void __swift::__runtime::llvm::report_fatal_error(__swift::__runtime::llvm *this, const char *a2)
{
  abort();
}

uint64_t `anonymous namespace'::error(_anonymous_namespace_ *this, const char *a2, const char *a3, const char *a4)
{
  char __str[1024];

  if (a3)
    snprintf(__str, 0x400uLL, "%s%s at %s:%u\n");
  else
    snprintf(__str, 0x400uLL, "%s%s\n");
  return asl_log(0, 0, 3, "%s", __str);
}

void __swift::__runtime::llvm::report_fatal_error(char *a1)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  __swift::__runtime::llvm::report_fatal_error((__swift::__runtime::llvm *)a1, 0);
}

void __swift::__runtime::llvm::report_fatal_error(const void *a1, const void *a2)
{
  char v2[24];
  const void *v3[2];

  v3[0] = a1;
  v3[1] = a2;
  __swift::__runtime::llvm::StringRef::str(v3, (uint64_t)v2);
  __swift::__runtime::llvm::report_fatal_error(v2);
}

const void **__swift::__runtime::llvm::StringRef::str@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = *this;
  if (!*this)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return this;
  }
  v4 = (size_t)this[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v5 = v4 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4)
      goto LABEL_11;
  }
  this = (const void **)memmove(v2, v3, v4);
LABEL_11:
  *((_BYTE *)v2 + v4) = 0;
  return this;
}

void __swift::__runtime::llvm::report_bad_alloc_error(__swift::__runtime::llvm *this, const char *a2)
{
  abort();
}

void __swift::__runtime::llvm::llvm_unreachable_internal(__swift::__runtime::llvm *this, const char *a2, const char *a3)
{
  const char *v5;

  if (this)
    v5 = (const char *)this;
  else
    v5 = "UNREACHABLE executed!";
  abort();
}

uint64_t __swift::__runtime::llvm::set_fixed_execution_hash_seed(uint64_t this)
{
  __swift::__runtime::llvm::hashing::detail::fixed_seed_override = this;
  return this;
}

void __swift::__runtime::llvm::deallocate_buffer(__swift::__runtime::llvm *this, void *a2, std::align_val_t a3)
{
  operator delete(this, a3);
}

void *__swift::__runtime::llvm::SmallPtrSetImplBase::shrink_and_clear(void **this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  void *v5;

  free(this[1]);
  v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 6);
  v3 = 1 << (33 - __clz(v2 - 1));
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v2 <= 0x10)
    v4 = 32;
  else
    v4 = v3;
  *((_DWORD *)this + 4) = v4;
  v5 = malloc_type_malloc(8 * v4, 0x3880A471uLL);
  if (!v5)
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  this[1] = v5;
  return memset(v5, 255, 8 * *((unsigned int *)this + 4));
}

const void **__swift::__runtime::llvm::SmallPtrSetImplBase::insert_imp_big(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  const void **result;
  const void *v10;
  const void **v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  v4 = *((_DWORD *)this + 5);
  v5 = *((_DWORD *)this + 4);
  if (3 * v5 <= 4 * (v4 - *((_DWORD *)this + 6)))
  {
    if (v5 >= 0x40)
      v5 *= 2;
    else
      v5 = 128;
  }
  else if (v5 - v4 >= v5 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::SmallPtrSetImplBase::Grow(this, v5);
LABEL_3:
  v6 = *((_DWORD *)this + 4) - 1;
  v7 = *((_QWORD *)this + 1);
  v8 = v6 & ((a2 >> 4) ^ (a2 >> 9));
  result = (const void **)(v7 + 8 * v8);
  v10 = *result;
  if (*result == (const void *)-1)
  {
    v11 = 0;
LABEL_5:
    if (v11)
      result = v11;
    if (*result != a2)
    {
      if (*result == (const void *)-2)
        --*((_DWORD *)this + 6);
      else
        ++*((_DWORD *)this + 5);
      *result = a2;
    }
  }
  else
  {
    v11 = 0;
    v12 = 1;
    while (v10 != a2)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (const void *)-2;
      if (v13)
        v11 = result;
      v14 = v8 + v12++;
      v8 = v14 & v6;
      result = (const void **)(v7 + 8 * v8);
      v10 = *result;
      if (*result == (const void *)-1)
        goto LABEL_5;
    }
  }
  return result;
}

void __swift::__runtime::llvm::SmallPtrSetImplBase::Grow(__swift::__runtime::llvm::SmallPtrSetImplBase *this, unsigned int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v5 = *(uint64_t **)this;
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = 16;
  if (v4 == *(uint64_t **)this)
    v6 = 20;
  v7 = *(unsigned int *)((char *)this + v6);
  v8 = malloc_type_malloc(8 * a2, 0x3880A471uLL);
  if (!v8 && (a2 || (v8 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0))
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  *((_QWORD *)this + 1) = v8;
  *((_DWORD *)this + 4) = a2;
  memset(v8, 255, 8 * a2);
  if ((_DWORD)v7)
  {
    v9 = v4;
    do
    {
      v12 = *v9;
      if ((unint64_t)*v9 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = *((_DWORD *)this + 4) - 1;
        v14 = *((_QWORD *)this + 1);
        v15 = v13 & ((v12 >> 4) ^ (v12 >> 9));
        v11 = (_QWORD *)(v14 + 8 * v15);
        v16 = *v11;
        if (*v11 == -1)
        {
          v10 = 0;
LABEL_9:
          if (v10)
            v11 = v10;
        }
        else
        {
          v10 = 0;
          v17 = 1;
          while (v16 != v12)
          {
            if (v10)
              v18 = 0;
            else
              v18 = v16 == -2;
            if (v18)
              v10 = v11;
            v19 = v15 + v17++;
            v15 = v19 & v13;
            v11 = (_QWORD *)(v14 + 8 * (v19 & v13));
            v16 = *v11;
            if (*v11 == -1)
              goto LABEL_9;
          }
        }
        *v11 = v12;
      }
      ++v9;
    }
    while (v9 != &v4[v7]);
  }
  if (v4 != v5)
    free(v4);
  *(_QWORD *)((char *)this + 20) = (*((_DWORD *)this + 5) - *((_DWORD *)this + 6));
}

const void **__swift::__runtime::llvm::SmallPtrSetImplBase::FindBucketFor(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  const void **result;
  const void *v6;
  const void **v7;
  int v8;
  BOOL v9;
  unsigned int v10;

  v2 = *((_DWORD *)this + 4) - 1;
  v3 = *((_QWORD *)this + 1);
  v4 = ((a2 >> 4) ^ (a2 >> 9)) & v2;
  result = (const void **)(v3 + 8 * v4);
  v6 = *result;
  if (*result == (const void *)-1)
  {
    v7 = 0;
LABEL_3:
    if (v7)
      return v7;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (v6 != a2)
    {
      if (v7)
        v9 = 0;
      else
        v9 = v6 == (const void *)-2;
      if (v9)
        v7 = result;
      v10 = v4 + v8++;
      v4 = v10 & v2;
      result = (const void **)(v3 + 8 * v4);
      v6 = *result;
      if (*result == (const void *)-1)
        goto LABEL_3;
    }
  }
  return result;
}

__swift::__runtime::llvm::SmallPtrSetImplBase *__swift::__runtime::llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const void **a2, const __swift::__runtime::llvm::SmallPtrSetImplBase *a3)
{
  const void *v5;
  uint64_t v6;
  const void **v7;
  const void *v8;
  int v9;
  unsigned int v10;
  int v11;

  *(_QWORD *)this = a2;
  v5 = (const void *)*((_QWORD *)a3 + 1);
  if (v5 == *(const void **)a3)
  {
    v7 = a2;
    *((_QWORD *)this + 1) = a2;
  }
  else
  {
    v6 = *((unsigned int *)a3 + 4);
    v7 = (const void **)malloc_type_malloc(8 * v6, 0x3880A471uLL);
    if (!v7 && ((_DWORD)v6 || (v7 = (const void **)malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0))
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
    *((_QWORD *)this + 1) = v7;
    v5 = *(const void **)a3;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a3 + 4);
  v8 = (const void *)*((_QWORD *)a3 + 1);
  v9 = *((_DWORD *)a3 + 5);
  if (v8 == v5)
    v10 = *((_DWORD *)a3 + 5);
  else
    v10 = *((_DWORD *)a3 + 4);
  if (v10)
  {
    memmove(v7, v8, 8 * v10);
    v9 = *((_DWORD *)a3 + 5);
  }
  v11 = *((_DWORD *)a3 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return this;
}

void **__swift::__runtime::llvm::SmallPtrSetImplBase::CopyHelper(void **this, const __swift::__runtime::llvm::SmallPtrSetImplBase *a2)
{
  void **v3;
  const void *v4;
  int v5;
  unsigned int v6;
  int v7;

  v3 = this;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v4 = (const void *)*((_QWORD *)a2 + 1);
  v5 = *((_DWORD *)a2 + 5);
  if (v4 == *(const void **)a2)
    v6 = *((_DWORD *)a2 + 5);
  else
    v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    this = (void **)memmove(this[1], v4, 8 * v6);
    v5 = *((_DWORD *)a2 + 5);
  }
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)v3 + 5) = v5;
  *((_DWORD *)v3 + 6) = v7;
  return this;
}

uint64_t __swift::__runtime::llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(uint64_t a1, void *__dst, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = __dst;
  v8 = *a4;
  v7 = a4[1];
  if (v7 == *a4)
  {
    *(_QWORD *)(a1 + 8) = __dst;
    v9 = *((unsigned int *)a4 + 5);
    if ((_DWORD)v9)
      memmove(__dst, (const void *)a4[1], 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(_QWORD *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = __dst;
  v8 = *a4;
  v7 = a4[1];
  if (v7 == *a4)
  {
    *(_QWORD *)(a1 + 8) = __dst;
    v9 = *((unsigned int *)a4 + 5);
    if ((_DWORD)v9)
      memmove(__dst, (const void *)a4[1], 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(_QWORD *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

double __swift::__runtime::llvm::SmallPtrSetImplBase::MoveHelper(uint64_t a1, int a2, double *a3)
{
  uint64_t v6;
  double v7;
  void *v8;
  uint64_t v9;
  double result;

  v7 = *a3;
  v6 = *((_QWORD *)a3 + 1);
  if (v6 == *(_QWORD *)a3)
  {
    v8 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v9 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v9)
      memmove(v8, *((const void **)a3 + 1), 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    a3[1] = v7;
  }
  result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

void *__swift::__runtime::llvm::SmallPtrSetImplBase::CopyFrom(__swift::__runtime::llvm::SmallPtrSetImplBase *this, const __swift::__runtime::llvm::SmallPtrSetImplBase *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  int v9;
  unsigned int v10;
  int v11;

  result = (void *)*((_QWORD *)this + 1);
  v6 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (result == *(void **)this)
  {
    if (v5 != v6)
    {
      v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == (_DWORD)v7)
        goto LABEL_14;
      result = malloc_type_malloc(8 * v7, 0x3880A471uLL);
      if (!result)
      {
LABEL_9:
        if ((_DWORD)v7 || (result = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)
          __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
      }
    }
  }
  else
  {
    if (v5 != v6)
    {
      v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == (_DWORD)v7)
        goto LABEL_14;
      result = malloc_type_realloc(result, 8 * v7, 0x88FD67E7uLL);
      if (result)
        goto LABEL_13;
      goto LABEL_9;
    }
    free(result);
    result = *(void **)this;
  }
LABEL_13:
  *((_QWORD *)this + 1) = result;
LABEL_14:
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v8 = (const void *)*((_QWORD *)a2 + 1);
  v9 = *((_DWORD *)a2 + 5);
  if (v8 == *(const void **)a2)
    v10 = *((_DWORD *)a2 + 5);
  else
    v10 = *((_DWORD *)a2 + 4);
  if (v10)
  {
    result = memmove(result, v8, 8 * v10);
    v9 = *((_DWORD *)a2 + 5);
  }
  v11 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return result;
}

double __swift::__runtime::llvm::SmallPtrSetImplBase::MoveFrom(uint64_t a1, int a2, double *a3)
{
  void *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  double result;

  v6 = *(void **)(a1 + 8);
  if (v6 != *(void **)a1)
    free(v6);
  v8 = *a3;
  v7 = *((_QWORD *)a3 + 1);
  if (v7 == *(_QWORD *)a3)
  {
    v9 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v10 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v10)
      memmove(v9, *((const void **)a3 + 1), 8 * v10);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a3[1] = v8;
  }
  result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

__swift::__runtime::llvm::SmallPtrSetImplBase *__swift::__runtime::llvm::SmallPtrSetImplBase::swap(__swift::__runtime::llvm::SmallPtrSetImplBase *this, __swift::__runtime::llvm::SmallPtrSetImplBase *a2)
{
  __swift::__runtime::llvm::SmallPtrSetImplBase *v3;
  __swift::__runtime::llvm::SmallPtrSetImplBase *v4;
  __swift::__runtime::llvm::SmallPtrSetImplBase *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __swift::__runtime::llvm::SmallPtrSetImplBase *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __swift::__runtime::llvm::SmallPtrSetImplBase *v33;
  uint64_t v34;
  __swift::__runtime::llvm::SmallPtrSetImplBase *v35;
  uint64_t v36;
  __swift::__runtime::llvm::SmallPtrSetImplBase *v37;
  int v38;
  int v39;

  if (this == a2)
    return this;
  v3 = this;
  v5 = this;
  this = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)this;
  v4 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)*((_QWORD *)v5 + 1);
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = *(_QWORD **)a2;
  if (v4 == this)
  {
    if (v6 != v7)
    {
      v9 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v9)
      {
        this = (__swift::__runtime::llvm::SmallPtrSetImplBase *)memmove(*(void **)a2, v4, 8 * v9);
        v7 = *(_QWORD **)a2;
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
      }
      v10 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = *((_DWORD *)v3 + 4);
      *((_DWORD *)v3 + 4) = v10;
      v11 = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = *((_DWORD *)v3 + 5);
      *((_DWORD *)v3 + 5) = v11;
      v12 = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)v3 + 6);
      *((_DWORD *)v3 + 6) = v12;
      *((_QWORD *)v3 + 1) = v6;
      *((_QWORD *)a2 + 1) = v7;
      return this;
    }
    v17 = *((unsigned int *)a2 + 5);
    v18 = *((unsigned int *)v3 + 5);
    if (v17 >= v18)
      v19 = v18;
    else
      v19 = v17;
    v20 = 8 * v19;
    if ((_DWORD)v19)
    {
      v21 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v21 < 9)
      {
        v22 = this;
LABEL_26:
        v33 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)((char *)this + 8 * v19);
        do
        {
          v34 = *(_QWORD *)v22;
          *(_QWORD *)v22 = *v6;
          v22 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)((char *)v22 + 8);
          *v6++ = v34;
        }
        while (v22 != v33);
        goto LABEL_28;
      }
      v23 = this >= (__swift::__runtime::llvm::SmallPtrSetImplBase *)&v6[(unint64_t)v20 / 8]
         || v6 >= (_QWORD *)((char *)this + v20);
      v22 = this;
      if (!v23)
        goto LABEL_26;
      v24 = v21 + 1;
      v25 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      v26 = &v6[v25];
      v22 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)((char *)this + v25 * 8);
      v27 = (__int128 *)((char *)this + 16);
      v28 = (__int128 *)(v6 + 2);
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(v27 - 1);
        v31 = *v27;
        v32 = *v28;
        *(v27 - 1) = *(v28 - 1);
        *v27 = v32;
        *(v28 - 1) = v30;
        *v28 = v31;
        v27 += 2;
        v28 += 2;
        v29 -= 4;
      }
      while (v29);
      v6 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_26;
    }
LABEL_28:
    if (v18 <= v17)
    {
      if (v17 <= v18)
        goto LABEL_33;
      v35 = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)a2;
      v36 = *(_QWORD *)a2 + 8 * v17;
      v37 = v3;
    }
    else
    {
      v35 = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)v3;
      v36 = *(_QWORD *)v3 + 8 * v18;
      v37 = a2;
    }
    this = (__swift::__runtime::llvm::SmallPtrSetImplBase *)memmove((void *)(*(_QWORD *)v37 + v20), (char *)v35 + v20, v36 - ((_QWORD)v35 + v20));
    goto LABEL_33;
  }
  if (v6 != v7)
  {
    *((_QWORD *)v3 + 1) = v6;
    *((_QWORD *)a2 + 1) = v4;
    v8 = *((_DWORD *)v3 + 4);
    *((_DWORD *)v3 + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v8;
LABEL_33:
    v38 = *((_DWORD *)v3 + 5);
    *((_DWORD *)v3 + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v38;
    v39 = *((_DWORD *)v3 + 6);
    *((_DWORD *)v3 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v39;
    return this;
  }
  v13 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v13)
  {
    memmove(this, v6, 8 * v13);
    this = *(__swift::__runtime::llvm::SmallPtrSetImplBase **)v3;
    v4 = (__swift::__runtime::llvm::SmallPtrSetImplBase *)*((_QWORD *)v3 + 1);
  }
  v14 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = *((_DWORD *)v3 + 4);
  *((_DWORD *)v3 + 4) = v14;
  v15 = *((_DWORD *)v3 + 5);
  *((_DWORD *)v3 + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v15;
  v16 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v16;
  *((_QWORD *)a2 + 1) = v4;
  *((_QWORD *)v3 + 1) = this;
  return this;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::SizeTypeMax()
{
  return 0xFFFFFFFFLL;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::SmallVectorBase(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *result;

  if (HIDWORD(a2))
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation", (const char *)&dword_0 + 1);
  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4 == -1)
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  v5 = (2 * v4) | 1;
  if (v5 <= a2)
    v5 = a2;
  if (v5 >= 0xFFFFFFFF)
    v5 = 0xFFFFFFFFLL;
  *a4 = v5;
  v6 = v5 * a3;
  result = malloc_type_malloc(v5 * a3, 0x3880A471uLL);
  if (!result && (v6 || (result = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0))
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  return result;
}

{
  return __ZN7__swift9__runtime4llvm15SmallVectorBaseIjE13mallocForGrowEmmRm(a1, a2, a3, a4);
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::capacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *result;
  void *v12;

  if (HIDWORD(a3))
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation", (const char *)&dword_0 + 1);
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == -1)
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  v7 = (2 * v5) | 1;
  if (v7 <= a3)
    v7 = a3;
  if (v7 >= 0xFFFFFFFF)
    v8 = 0xFFFFFFFFLL;
  else
    v8 = v7;
  v9 = *(void **)a1;
  v10 = v8 * a4;
  if (*(_QWORD *)a1 == a2)
  {
    v12 = malloc_type_malloc(v8 * a4, 0x3880A471uLL);
    if (!v12 && (v10 || (v12 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0))
LABEL_20:
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
    result = memcpy(v12, *(const void **)a1, *(unsigned int *)(a1 + 8) * a4);
  }
  else
  {
    result = malloc_type_realloc(v9, v8 * a4, 0x88FD67E7uLL);
    v12 = result;
    if (!result)
    {
      if (v10)
        goto LABEL_20;
      result = malloc_type_malloc(1uLL, 0x3880A471uLL);
      v12 = result;
      if (!result)
        goto LABEL_20;
    }
  }
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 12) = v8;
  return result;
}

{
  return __ZN7__swift9__runtime4llvm15SmallVectorBaseIjE8grow_podEPvmm(a1, a2, a3, a4);
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

BOOL __swift::__runtime::llvm::SmallVectorBase<unsigned int>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned int>::set_size(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::SizeTypeMax()
{
  return -1;
}

_QWORD *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::SmallVectorBase(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = 0;
  result[2] = a3;
  return result;
}

{
  *result = a2;
  result[1] = 0;
  result[2] = a3;
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::mallocForGrow(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == -1)
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  v5 = (2 * v4) | 1;
  if (v5 <= a2)
    v5 = a2;
  *a4 = v5;
  v6 = v5 * a3;
  result = malloc_type_malloc(v5 * a3, 0x3880A471uLL);
  if (!result && (v6 || (result = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0))
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::capacity(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *result;
  void *v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == -1)
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)&dword_0 + 1);
  v7 = (2 * v4) | 1;
  if (v7 <= a3)
    v8 = a3;
  else
    v8 = v7;
  v9 = *(void **)a1;
  v10 = v8 * a4;
  if (v9 == a2)
  {
    v12 = malloc_type_malloc(v8 * a4, 0x3880A471uLL);
    if (!v12 && (v10 || (v12 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0))
LABEL_16:
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)&dword_0 + 1);
    result = memcpy(v12, *(const void **)a1, *(_QWORD *)(a1 + 8) * a4);
  }
  else
  {
    result = malloc_type_realloc(v9, v8 * a4, 0x88FD67E7uLL);
    v12 = result;
    if (!result)
    {
      if (v10)
        goto LABEL_16;
      result = malloc_type_malloc(1uLL, 0x3880A471uLL);
      v12 = result;
      if (!result)
        goto LABEL_16;
    }
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::empty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t __swift::__runtime::llvm::SmallVectorBase<unsigned long long>::set_size(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::compare_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 v11;
  BOOL v12;
  unsigned int v13;

  v3 = (unint64_t)a1[1];
  if (a3 >= v3)
    v4 = (unint64_t)a1[1];
  else
    v4 = a3;
  if (v4)
  {
    v5 = *a1;
    while (1)
    {
      v7 = *v5++;
      v6 = v7;
      v8 = v7 + 32;
      if ((v7 - 65) < 0x1A)
        v6 = v8;
      v10 = *a2++;
      v9 = v10;
      v11 = v10 + 32;
      if ((v10 - 65) < 0x1A)
        v9 = v11;
      if (v6 != v9)
        break;
      if (!--v4)
        goto LABEL_12;
    }
    if (v6 < v9)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else
  {
LABEL_12:
    v12 = v3 == a3;
    if (v3 < a3)
      v13 = -1;
    else
      v13 = 1;
    if (v12)
      return 0;
    else
      return v13;
  }
}

BOOL __swift::__runtime::llvm::StringRef::starts_with_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  _BOOL8 result;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  BOOL v15;

  if ((unint64_t)a1[1] < a3)
    return 0;
  if (!a3)
    return 1;
  v4 = *a1;
  v5 = a3 - 1;
  do
  {
    v7 = *v4++;
    v6 = v7;
    v8 = v7 + 32;
    if ((v7 - 65) < 0x1A)
      v6 = v8;
    v9 = v6;
    v11 = *a2++;
    v10 = v11;
    v12 = v11 + 32;
    if ((v11 - 65) >= 0x1A)
      v13 = v10;
    else
      v13 = v12;
    v15 = v5-- != 0;
    result = v9 == v13;
  }
  while (v9 == v13 && v15);
  return result;
}

BOOL __swift::__runtime::llvm::StringRef::endswith_insensitive(_QWORD *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  _BOOL8 result;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;

  v3 = a1[1];
  if (v3 < a3)
    return 0;
  if (!a3)
    return 1;
  v5 = *a1 + v3;
  v6 = -(uint64_t)a3;
  do
  {
    v7 = *(unsigned __int8 *)(v5 + v6);
    if ((v7 - 65) < 0x1A)
      LOBYTE(v7) = v7 + 32;
    v9 = *a2++;
    v8 = v9;
    v10 = v9 + 32;
    if ((v9 - 65) < 0x1A)
      v8 = v10;
    result = v7 == v8;
  }
  while (v7 == v8 && v6++ != -1);
  return result;
}

unint64_t __swift::__runtime::llvm::StringRef::find_insensitive(__swift::__runtime::llvm::StringRef *this, int a2, unint64_t a3)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  int v8;

  if ((a2 - 65) >= 0x1A)
    v4 = a2;
  else
    v4 = a2 + 32;
  v5 = *((_QWORD *)this + 1);
  if (v5 >= a3)
    result = a3;
  else
    result = *((_QWORD *)this + 1);
  if (v5 == result)
    return -1;
  v7 = *(_QWORD *)this;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v7 + result);
    if ((v8 - 65) < 0x1A)
      LOBYTE(v8) = v8 + 32;
    if (v8 == v4)
      break;
    if (v5 == ++result)
      return -1;
  }
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::compare_numeric(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unint64_t v34;

  v5 = a1[1];
  if (a3 >= v5)
    v6 = a1[1];
  else
    v6 = a3;
  if (!v6)
  {
LABEL_36:
    if (v5 < a3)
      v32 = -1;
    else
      v32 = 1;
    if (v5 == a3)
      return 0;
    else
      return v32;
  }
  v7 = a2;
  v8 = 0;
  v9 = v6 + 1;
  v10 = *a1;
  v11 = -(uint64_t)v6;
  v12 = *a1 + 1;
  v13 = a2 + 1;
  while (1)
  {
    v15 = *(unsigned __int8 *)(v10 + v8);
    v16 = *(unsigned __int8 *)(v7 + v8);
    if (v15 - 48 <= 9 && v16 - 48 <= 9)
      break;
    v14 = v8;
    if (v15 != v16)
    {
      if (v15 < v16)
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
LABEL_7:
    v8 = v14 + 1;
    if (v14 + 1 == v6)
      goto LABEL_36;
  }
  v18 = 0;
  v19 = v13;
  v20 = v12;
  do
  {
    if (!(v11 + v8 + v18))
    {
      v14 = v6;
      v28 = v9 - v8;
      if (v9 == v8)
        goto LABEL_7;
      goto LABEL_34;
    }
    v26 = v8 + v18 + 1;
    if (v26 >= v5)
    {
      v22 = 0;
      if (v26 >= a3)
      {
LABEL_29:
        v24 = 5;
        v23 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      v22 = *(unsigned __int8 *)(v20 + v8) - 48 < 0xA;
      if (v26 >= a3)
        goto LABEL_29;
    }
    v21 = (*(_BYTE *)(v19 + v8) - 48);
    v22 ^= v21 < 0xA;
    if (v21 < 0xA)
      v23 = -1;
    else
      v23 = 1;
    v24 = 0;
LABEL_17:
    if (v22)
      v3 = v23;
    else
      v3 = v3;
    if (v22)
      v25 = 1;
    else
      v25 = v24;
    ++v18;
    ++v20;
    ++v19;
  }
  while (!v25);
  if (v25 != 5)
    return v3;
  v27 = v8 + v18;
  v14 = v27 - 1;
  v28 = v27 - v8;
  if (v27 == v8)
    goto LABEL_7;
LABEL_34:
  v29 = v10;
  v30 = v7;
  v34 = v6;
  v31 = memcmp((const void *)(v10 + v8), (const void *)(v7 + v8), v28);
  v6 = v34;
  v7 = v30;
  v10 = v29;
  if (!v31)
    goto LABEL_7;
  return (v31 >> 31) | 1u;
}

_QWORD *__swift::__runtime::llvm::StringRef::lower@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  uint8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  char v16;
  int v17;
  char v18;

  v2 = (_QWORD *)a2;
  v3 = this[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = (int8x16_t *)*this;
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    this = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = this;
    v2 = this;
    if (v3 >= 0x20 && (unint64_t)((char *)this - (char *)v4) >= 0x20)
    {
      v7 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      v8 = &v4->u8[v3 & 0xFFFFFFFFFFFFFFE0];
      v9 = v4 + 1;
      v10 = (int8x16_t *)(this + 2);
      v11.i64[0] = 0xBFBFBFBFBFBFBFBFLL;
      v11.i64[1] = 0xBFBFBFBFBFBFBFBFLL;
      v12.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v12.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v13.i64[0] = 0x2020202020202020;
      v13.i64[1] = 0x2020202020202020;
      v14 = v3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v15 = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(*v9, v11)), vaddq_s8(*v9, v13), *v9);
        v10[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(v9[-1], v11)), vaddq_s8(v9[-1], v13), v9[-1]);
        *v10 = v15;
        v9 += 2;
        v10 += 2;
        v14 -= 32;
      }
      while (v14);
      v2 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      if (v3 == (v3 & 0x7FFFFFFFFFFFFFE0))
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_18;
  }
  v7 = v2;
  v8 = (unsigned __int8 *)v4;
LABEL_14:
  v2 = v7;
  do
  {
    v17 = *v8++;
    v16 = v17;
    v18 = v17 + 32;
    if ((v17 - 65) < 0x1A)
      v16 = v18;
    *(_BYTE *)v2 = v16;
    v2 = (_QWORD *)((char *)v2 + 1);
  }
  while (v8 != (unsigned __int8 *)&v4->i8[v3]);
LABEL_18:
  *(_BYTE *)v2 = 0;
  return this;
}

_QWORD *__swift::__runtime::llvm::StringRef::upper@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  uint8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  char v16;
  int v17;
  char v18;

  v2 = (_QWORD *)a2;
  v3 = this[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = (int8x16_t *)*this;
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    this = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = this;
    v2 = this;
    if (v3 >= 0x20 && (unint64_t)((char *)this - (char *)v4) >= 0x20)
    {
      v7 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      v8 = &v4->u8[v3 & 0xFFFFFFFFFFFFFFE0];
      v9 = v4 + 1;
      v10 = (int8x16_t *)(this + 2);
      v11.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
      v11.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
      v12.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
      v12.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
      v13.i64[0] = 0xE0E0E0E0E0E0E0E0;
      v13.i64[1] = 0xE0E0E0E0E0E0E0E0;
      v14 = v3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v15 = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(*v9, v11)), vaddq_s8(*v9, v13), *v9);
        v10[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)vaddq_s8(v9[-1], v11)), vaddq_s8(v9[-1], v13), v9[-1]);
        *v10 = v15;
        v9 += 2;
        v10 += 2;
        v14 -= 32;
      }
      while (v14);
      v2 = (_QWORD *)((char *)this + (v3 & 0xFFFFFFFFFFFFFFE0));
      if (v3 == (v3 & 0x7FFFFFFFFFFFFFE0))
        goto LABEL_18;
      goto LABEL_14;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_18;
  }
  v7 = v2;
  v8 = (unsigned __int8 *)v4;
LABEL_14:
  v2 = v7;
  do
  {
    v17 = *v8++;
    v16 = v17;
    v18 = v17 - 32;
    if ((v17 - 97) < 0x1A)
      v16 = v18;
    *(_BYTE *)v2 = v16;
    v2 = (_QWORD *)((char *)v2 + 1);
  }
  while (v8 != (unsigned __int8 *)&v4->i8[v3]);
LABEL_18:
  *(_BYTE *)v2 = 0;
  return this;
}

uint64_t __swift::__runtime::llvm::StringRef::find(uint64_t *a1, unsigned __int8 *a2, size_t a3, unint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  size_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned int v23;
  _OWORD v24[14];
  int8x16_t v25;
  int8x16_t v26;

  v5 = a1[1];
  v6 = v5 - a4;
  if (v5 < a4)
    return -1;
  v7 = a4;
  if (!a3)
    return v7;
  if (v6 < a3)
    return -1;
  v10 = *a1;
  v11 = (unsigned __int8 *)(*a1 + a4);
  v12 = a3 - 1;
  if (a3 == 1)
  {
    v13 = memchr((void *)(*a1 + a4), (char)*a2, v6);
    if (v13)
      return (uint64_t)v13 - v10;
    else
      return -1;
  }
  v14 = (unint64_t)&v11[v6 - a3 + 1];
  if (a3 > 0xFF || v6 <= 0xF)
  {
    while (memcmp((const void *)(v10 + v7), a2, a3))
    {
      ++v7;
      result = -1;
      if (v10 + v7 >= v14)
        return result;
    }
    return v7;
  }
  v25 = vdupq_n_s8(a3);
  v26 = v25;
  v24[12] = v25;
  v24[13] = v25;
  v24[10] = v25;
  v24[11] = v25;
  v24[8] = v25;
  v24[9] = v25;
  v24[6] = v25;
  v24[7] = v25;
  v24[4] = v25;
  v24[5] = v25;
  v24[2] = v25;
  v24[3] = v25;
  v24[0] = v25;
  v24[1] = v25;
  if (a3 < 3)
  {
    v15 = 0;
    v16 = 0;
LABEL_13:
    v17 = v16 + 1;
    do
    {
      *((_BYTE *)v24 + a2[v15]) = v12 - v15;
      v15 = v17++;
    }
    while (v12 != v15);
    goto LABEL_15;
  }
  v16 = 0;
  v15 = 0;
  v20 = a3 - 2;
  if (HIDWORD(v20))
    goto LABEL_13;
  v15 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v16 = v12 & 0xFFFFFFFE;
  v21 = a2 + 1;
  v22 = v12 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *((_BYTE *)v24 + *(v21 - 1)) = v20 + 1;
    v23 = *v21;
    v21 += 2;
    *((_BYTE *)v24 + v23) = v20;
    v20 -= 2;
    v22 -= 2;
  }
  while (v22);
  if (v12 != v15)
    goto LABEL_13;
LABEL_15:
  v18 = a2[v12];
  while (1)
  {
    v19 = v11[v12];
    if ((_DWORD)v19 == v18 && !memcmp(v11, a2, v12))
      break;
    v11 += *((unsigned __int8 *)v24 + v19);
    if ((unint64_t)v11 >= v14)
      return -1;
  }
  return (uint64_t)&v11[-v10];
}

uint64_t __swift::__runtime::llvm::StringRef::find_insensitive(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = a1[1];
  if (v4 >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  v6 = v4 - v5;
  if (v6 < a3)
    return -1;
  v8 = *a1 + v5;
  v9 = a4;
  result = -1;
  while (a3)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned __int8 *)(v8 + v10);
      if ((v11 - 65) < 0x1A)
        LOBYTE(v11) = v11 + 32;
      v12 = *(unsigned __int8 *)(a2 + v10);
      if ((v12 - 65) < 0x1A)
        LOBYTE(v12) = v12 + 32;
      if (v11 != v12)
        break;
      if (a3 == ++v10)
        return v9;
    }
    ++v8;
    --v6;
    ++v9;
    if (v6 < a3)
      return result;
  }
  return a4;
}

unint64_t __swift::__runtime::llvm::StringRef::rfind_insensitive(__swift::__runtime::llvm::StringRef *this, int a2, unint64_t a3)
{
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  int v6;
  BOOL v7;

  if (*((_QWORD *)this + 1) >= a3)
    v3 = a3;
  else
    v3 = *((_QWORD *)this + 1);
  v4 = a2 + 32;
  if ((a2 - 65) >= 0x1A)
    v4 = a2;
  while (v3)
  {
    v5 = v3 - 1;
    v6 = *(unsigned __int8 *)(*(_QWORD *)this + v3 - 1);
    if ((v6 - 65) < 0x1A)
      LOBYTE(v6) = v6 + 32;
    v7 = v6 == v4;
    v3 = v5;
    if (v7)
      return v5;
  }
  return -1;
}

uint64_t __swift::__runtime::llvm::StringRef::rfind(uint64_t *a1, const void *a2, size_t a3)
{
  size_t v3;
  size_t v4;
  size_t v5;
  uint64_t v9;
  size_t v10;

  v3 = a1[1];
  v4 = v3 - a3;
  if (v3 < a3)
    return -1;
  v5 = v4 + 1;
  if (v4 == -1)
    return -1;
  v9 = *a1;
  while (1)
  {
    --v5;
    v10 = v3 >= v4 ? v4 : v3;
    if (a3 <= v3 - v10)
    {
      if (!a3)
        return v5;
      if (!memcmp((const void *)(v9 + v10), a2, a3))
        break;
    }
    if (--v4 == -1)
      return -1;
  }
  return v4;
}

uint64_t __swift::__runtime::llvm::StringRef::rfind_insensitive(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  char v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;

  v3 = a1[1];
  v4 = v3 - a3;
  if (v3 >= a3)
  {
    v5 = v4 + 1;
    if (v4 != -1)
    {
      v7 = *a1;
      while (1)
      {
        if (v3 >= v4)
          v8 = v4;
        else
          v8 = v3;
        --v5;
        v9 = v3 - v5;
        if (v3 < v5)
          v9 = 0;
        if (a3 <= v9)
        {
          if (!a3)
            return v5;
          v10 = (unsigned __int8 *)(v7 + v8);
          v11 = a2;
          v12 = a3;
          while (1)
          {
            v14 = *v10++;
            v13 = v14;
            v15 = v14 + 32;
            if ((v14 - 65) < 0x1A)
              v13 = v15;
            v17 = *v11++;
            v16 = v17;
            v18 = v17 + 32;
            if ((v17 - 65) < 0x1A)
              v16 = v18;
            if (v13 != v16)
              break;
            if (!--v12)
              return v5;
          }
        }
        --v4;
        result = -1;
        if (!v5)
          return result;
      }
    }
  }
  return -1;
}

uint64_t __swift::__runtime::llvm::StringRef::find_first_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

unint64_t __swift::__runtime::llvm::StringRef::find_first_not_of(__swift::__runtime::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3 <= a3)
    return -1;
  while (*(unsigned __int8 *)(*(_QWORD *)this + a3) == a2)
  {
    if (v3 == ++a3)
      return -1;
  }
  return a3;
}

uint64_t __swift::__runtime::llvm::StringRef::find_first_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

uint64_t __swift::__runtime::llvm::StringRef::find_last_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) != 0)
      return v6;
  }
  return -1;
}

unint64_t __swift::__runtime::llvm::StringRef::find_last_not_of(__swift::__runtime::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (*((_QWORD *)this + 1) >= a3)
    v3 = a3;
  else
    v3 = *((_QWORD *)this + 1);
  while (v3)
  {
    v4 = v3 - 1;
    v5 = *(unsigned __int8 *)(*(_QWORD *)this + v3-- - 1);
    if (v5 != a2)
      return v4;
  }
  return -1;
}

uint64_t __swift::__runtime::llvm::StringRef::find_last_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) == 0)
      return v6;
  }
  return -1;
}

_OWORD *__swift::__runtime::llvm::StringRef::split(_OWORD *result, uint64_t a2, unsigned __int8 *a3, size_t a4, int a5, int a6)
{
  int v8;
  unint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;

  v21 = *result;
  if (a5)
  {
    v8 = a5;
    v11 = *((_QWORD *)&v21 + 1);
    do
    {
      result = (_OWORD *)__swift::__runtime::llvm::StringRef::find((uint64_t *)&v21, a3, a4, 0);
      if (result == (_OWORD *)-1)
        break;
      v16 = result;
      v17 = v21;
      if (result || a6)
      {
        if (v11 >= (unint64_t)result)
          v12 = result;
        else
          v12 = (_OWORD *)v11;
        v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12))
        {
          result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 16);
          v13 = *(unsigned int *)(a2 + 8);
        }
        v14 = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
        *v14 = v17;
        v14[1] = v12;
        ++*(_DWORD *)(a2 + 8);
      }
      v15 = (unint64_t)v16 + a4;
      if (v11 < (unint64_t)v16 + a4)
        v15 = v11;
      v11 -= v15;
      *(_QWORD *)&v21 = v17 + v15;
      *((_QWORD *)&v21 + 1) = v11;
      --v8;
    }
    while (v8);
  }
  else
  {
    v11 = *((_QWORD *)&v21 + 1);
  }
  if ((a6 & 1) != 0 || v11)
  {
    v18 = v21;
    v19 = *(unsigned int *)(a2 + 8);
    if (v19 >= *(_DWORD *)(a2 + 12))
    {
      result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
      LODWORD(v19) = *(_DWORD *)(a2 + 8);
    }
    v20 = (_QWORD *)(*(_QWORD *)a2 + 16 * v19);
    *v20 = v18;
    v20[1] = v11;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

char *__swift::__runtime::llvm::StringRef::split(char *result, uint64_t a2, int __c, int a4, int a5)
{
  char *v7;
  size_t v8;
  int v9;
  size_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7 = *(char **)result;
  v8 = *((_QWORD *)result + 1);
  if (!a4)
  {
LABEL_19:
    if ((a5 & 1) == 0 && !v8)
      return result;
    goto LABEL_24;
  }
  v9 = a4;
  while (v8)
  {
    result = (char *)memchr(v7, __c, v8);
    if (!result)
      goto LABEL_24;
    v15 = result - v7;
    if (result - v7 == -1)
      goto LABEL_24;
    if (result != v7 || a5)
    {
      if (v8 >= v15)
        v11 = result - v7;
      else
        v11 = v8;
      v12 = *(unsigned int *)(a2 + 8);
      if (v12 >= *(unsigned int *)(a2 + 12))
      {
        result = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 16);
        v12 = *(unsigned int *)(a2 + 8);
      }
      v13 = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
      *v13 = v7;
      v13[1] = v11;
      ++*(_DWORD *)(a2 + 8);
    }
    if (v8 >= v15 + 1)
      v14 = v15 + 1;
    else
      v14 = v8;
    v7 += v14;
    v8 -= v14;
    if (!--v9)
      goto LABEL_19;
  }
  if (a5)
  {
    v8 = 0;
LABEL_24:
    v16 = *(unsigned int *)(a2 + 8);
    if (v16 >= *(_DWORD *)(a2 + 12))
    {
      result = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
      LODWORD(v16) = *(_DWORD *)(a2 + 8);
    }
    v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
    *v17 = v7;
    v17[1] = v8;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::count(_QWORD *a1, const void *a2, size_t a3)
{
  unint64_t v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  if (!a3)
    return 0;
  v5 = a1[1];
  v6 = v5 - a3;
  if (v5 < a3)
    return 0;
  v7 = v6 + 1;
  if (v6 == -1)
    return 0;
  v8 = 0;
  v11 = 0;
  do
  {
    if (v5 >= v11)
      v14 = v11;
    else
      v14 = v5;
    if (a3 <= v5 - v14)
    {
      v12 = memcmp((const void *)(*a1 + v14), a2, a3);
      if (v12)
        v13 = 1;
      else
        v13 = a3;
      if (!v12)
        ++v8;
    }
    else
    {
      v13 = 1;
    }
    v11 += v13;
  }
  while (v11 < v7);
  return v8;
}

uint64_t __swift::__runtime::llvm::consumeUnsignedInteger(__swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = *((_QWORD *)this + 1);
  if ((_DWORD)a2)
  {
    if (!v4)
      return 1;
    goto LABEL_3;
  }
  if (v4 < 2)
  {
    LODWORD(a2) = 10;
    if (!v4)
      return 1;
    goto LABEL_3;
  }
  v13 = *(_QWORD *)this;
  if (**(_WORD **)this == 30768 || *(_WORD *)v13 == 22576)
  {
    v4 -= 2;
    LODWORD(a2) = 16;
    *(_QWORD *)this = v13 + 2;
    *((_QWORD *)this + 1) = v4;
    if (!v4)
      return 1;
  }
  else if (*(_WORD *)v13 == 25136 || *(_WORD *)v13 == 16944)
  {
    LODWORD(a2) = 2;
    v4 -= 2;
    *(_QWORD *)this = v13 + 2;
    *((_QWORD *)this + 1) = v4;
    if (!v4)
      return 1;
  }
  else
  {
    if (*(_WORD *)v13 == 28464)
    {
      v14 = v13 + 2;
      v4 -= 2;
LABEL_34:
      LODWORD(a2) = 8;
      *(_QWORD *)this = v14;
      *((_QWORD *)this + 1) = v4;
      if (!v4)
        return 1;
      goto LABEL_3;
    }
    if (*(_BYTE *)v13 == 48)
    {
      v15 = *(unsigned __int8 *)(v13 + 1);
      v14 = v13 + 1;
      if ((v15 - 48) <= 9)
      {
        --v4;
        goto LABEL_34;
      }
    }
    LODWORD(a2) = 10;
  }
LABEL_3:
  v5 = 0;
  v6 = *(unsigned __int8 **)this;
  *a3 = 0;
  v7 = v4;
  do
  {
    if ((char)*v6 < 48)
      break;
    v8 = *v6;
    if (v8 >= 0x3A)
    {
      if (v8 < 0x61)
      {
        if (v8 - 65 > 0x19)
          break;
        v9 = -55;
      }
      else
      {
        if (v8 >= 0x7B)
          break;
        v9 = -87;
      }
    }
    else
    {
      v9 = -48;
    }
    v10 = v9 + v8;
    if (v10 >= a2)
      break;
    v11 = v5 * a2 + v10;
    *a3 = v11;
    if (v11 / a2 < v5)
      return 1;
    ++v6;
    v5 = v11;
    --v7;
  }
  while (v7);
  if (v4 != v7)
  {
    *(_QWORD *)this = v6;
    *((_QWORD *)this + 1) = v7;
    return 0;
  }
  return 1;
}

uint64_t __swift::__runtime::llvm::consumeSignedInteger(__swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  unint64_t v12;

  v12 = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6 && **(_BYTE **)this == 45)
  {
    *(_QWORD *)&v11 = *(_QWORD *)this + 1;
    *((_QWORD *)&v11 + 1) = v6 - 1;
    LODWORD(result) = __swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v11, a2, &v12, a4);
    v8 = v12;
    if (v12 > 0x8000000000000000)
      result = 1;
    else
      result = result;
    if ((result & 1) == 0)
    {
      *(_OWORD *)this = v11;
      v9 = -(uint64_t)v8;
LABEL_11:
      *a3 = v9;
    }
  }
  else
  {
    v10 = __swift::__runtime::llvm::consumeUnsignedInteger(this, a2, &v12, a4);
    result = 1;
    if ((v10 & 1) == 0)
    {
      v9 = v12;
      if ((v12 & 0x8000000000000000) == 0)
      {
        result = 0;
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t __swift::__runtime::llvm::getAsUnsignedInteger(uint64_t a1, uint64_t a2, __swift::__runtime::llvm::StringRef *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a1;
  v6 = a2;
  LODWORD(result) = __swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v5, a3, a4, a4);
  if (v6)
    return 1;
  else
    return result;
}

BOOL __swift::__runtime::llvm::getAsSignedInteger(_BYTE *a1, uint64_t a2, __swift::__runtime::llvm::StringRef *a3, unint64_t *a4)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = a2;
  v9 = 0;
  if (a2 && *a1 == 45)
  {
    *(_QWORD *)&v8 = a1 + 1;
    *((_QWORD *)&v8 + 1) = a2 - 1;
    if ((__swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v8, a3, (unint64_t *)&v9, a4) & 1) == 0&& (unint64_t)v9 < 0x8000000000000001)
    {
      v7 = v8;
      v5 = -v9;
LABEL_8:
      *a4 = v5;
      return *((_QWORD *)&v7 + 1) != 0;
    }
  }
  else if ((__swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v7, a3, (unint64_t *)&v9, a4) & 1) == 0)
  {
    v5 = v9;
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_8;
  }
  return 1;
}

unint64_t __swift::__runtime::llvm::hash_value(_QWORD *a1, uint64_t a2)
{
  return __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<char const>(a1, (uint64_t)a1 + a2);
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<char const>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  _QWORD *v70;

  v2 = a2;
  v4 = (unint64_t *)&__swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  if ((v3 & 1) == 0)
  {
    v70 = a1;
    v4 = (unint64_t *)&__swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
    v67 = v66;
    v2 = a2;
    a1 = v70;
    if (v67)
    {
      v68 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override)
        v68 = 0xFF51AFD7ED558CCDLL;
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v68;
      v4 = (unint64_t *)&__swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
      v2 = a2;
      a1 = v70;
    }
  }
  v5 = *v4;
  v6 = v2 - (_QWORD)a1;
  if ((unint64_t)(v2 - (_QWORD)a1) <= 0x40)
    return __swift::__runtime::llvm::hashing::detail::hash_short((__swift::__runtime::llvm::hashing::detail *)a1, v6, v5);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v9 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
  v10 = v5 ^ (v5 >> 47);
  v11 = v5 ^ (((0x9DDFEA08EB382D69 * (v10 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                          * (v10 ^ (0xB492B66FBE98F273
                                                                                                  * v5)));
  v12 = a1[1];
  v13 = a1[6];
  v14 = a1[7];
  v15 = v9 + v5 + v12;
  v16 = a1[5];
  v17 = v16 + v9 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v5 - 0x4B6D499041670D8DLL * v5, 42);
  v18 = v10 - 0x622015F714C7D297 * (v8 ^ (v8 >> 47));
  v19 = *a1 - 0x6D8ED9027DD26057 * v5;
  v20 = a1[2];
  v21 = a1[3];
  v22 = v19 + v12 + v20;
  v23 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v11) ^ ((0x9DDFEA08EB382D69 * v11) >> 47));
  v24 = __ROR8__(v18, 33);
  v25 = (0xB492B66FBE98F273 * __ROR8__(v15, 37)) ^ v23;
  v26 = __ROR8__(v22, 44) + v19 + __ROR8__(v25 + v10 + v19 + v21, 21);
  v27 = 0xB492B66FBE98F273 * v24;
  v28 = v22 + v21;
  v29 = v23 + a1[4] - 0x4B6D499041670D8DLL * v24;
  v30 = __ROR8__(v17 + v20 + v14 + v29, 21) + v29 + __ROR8__(v16 + v13 + v29, 44);
  v31 = v16 + v13 + v29 + v14;
  v32 = (v6 & 0xFFFFFFFFFFFFFFC0) - 64;
  if ((v6 & 0xFFFFFFFFFFFFFFC0) == 0x40)
  {
    v33 = v25;
  }
  else
  {
    v34 = a1 + 15;
    do
    {
      v35 = *(v34 - 6);
      v36 = __ROR8__(v17 + v28 + v27 + v35, 37);
      v38 = *(v34 - 2);
      v37 = *(v34 - 1);
      v17 = v38 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v37, 42);
      v39 = v25 + v31;
      v40 = *(v34 - 7) - 0x4B6D499041670D8DLL * v26;
      v41 = *(v34 - 4);
      v42 = *(v34 - 5);
      v43 = v40 + v35 + v42;
      v33 = (0xB492B66FBE98F273 * v36) ^ v30;
      v27 = 0xB492B66FBE98F273 * __ROR8__(v39, 33);
      v26 = __ROR8__(v43, 44) + v40 + __ROR8__(v33 + v31 + v40 + v41, 21);
      v28 = v43 + v41;
      v44 = v27 + v30 + *(v34 - 3);
      v45 = *v34;
      v34 += 8;
      v46 = __ROR8__(v17 + v42 + v44 + v45, 21);
      v47 = v38 + v37 + v44;
      v30 = v46 + v44 + __ROR8__(v47, 44);
      v31 = v47 + v45;
      v25 = v33;
      v32 -= 64;
    }
    while (v32);
  }
  if ((v6 & 0x3F) != 0)
  {
    v48 = *(_QWORD *)(v2 - 56);
    v49 = *(_QWORD *)(v2 - 16);
    v50 = *(_QWORD *)(v2 - 8);
    v51 = v33 + v31;
    v52 = (0xB492B66FBE98F273 * __ROR8__(v17 + v28 + v27 + v48, 37)) ^ v30;
    v54 = *(_QWORD *)(v2 - 32);
    v53 = *(_QWORD *)(v2 - 24);
    v17 = v53 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v49, 42);
    v55 = v52 + v31;
    v56 = *(_QWORD *)(v2 - 64) - 0x4B6D499041670D8DLL * v26;
    v59 = v2 - 48;
    v57 = *(_QWORD *)(v2 - 48);
    v58 = *(_QWORD *)(v59 + 8);
    v60 = v56 + v48 + v57;
    v27 = 0xB492B66FBE98F273 * __ROR8__(v51, 33);
    v26 = __ROR8__(v60, 44) + v56 + __ROR8__(v55 + v56 + v58, 21);
    v28 = v60 + v58;
    v61 = v27 + v30 + v54;
    v62 = v53 + v49 + v61;
    v30 = __ROR8__(v17 + v57 + v61 + v50, 21) + v61 + __ROR8__(v62, 44);
    v31 = v62 + v50;
    v33 = v52;
  }
  v63 = 0x9DDFEA08EB382D69
      * (v30 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v30)));
  v64 = v27 - 0x4B6D499041670D8DLL * (v6 ^ (v6 >> 47)) - 0x622015F714C7D297 * (v63 ^ (v63 >> 47));
  v65 = 0x9DDFEA08EB382D69
      * ((v33
        - 0x4B6D499041670D8DLL * (v17 ^ (v17 >> 47))
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) ^ ((0x9DDFEA08EB382D69 * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) >> 47))) ^ v64);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v64 ^ (v65 >> 47) ^ v65)) ^ ((0x9DDFEA08EB382D69 * (v64 ^ (v65 >> 47) ^ v65)) >> 47));
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_short(__swift::__runtime::llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if (a2 - 4 <= 4)
  {
    v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    v5 = v3 ^ (v4 >> 47) ^ v4;
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 - 9 <= 7)
  {
    v7 = *(_QWORD *)((char *)this + a2 - 8);
    v8 = __ROR8__(v7 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v8 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                  * (*(_QWORD *)this ^ a3 ^ v8)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v8)))) >> 47))) ^ v7;
  }
  if (a2 - 17 <= 0xF)
  {
    v9 = *((_QWORD *)this + 1);
    v10 = 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)this + a2 - 8);
    v11 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)this - v9, 43)
        - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)this + a2 - 16)
        + __ROR8__(v10 ^ a3, 30);
    v12 = a3 + a2 + __ROR8__(v9 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(_QWORD *)this - v10;
    v5 = v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v12));
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 >= 0x21)
  {
    v13 = (char *)this + a2;
    v14 = *(_QWORD *)((char *)this + a2 - 16);
    v15 = *(_QWORD *)((char *)this + a2 - 8);
    v16 = *(_QWORD *)this - 0x3C5A37A36834CED9 * (v14 + a2);
    v18 = *((_QWORD *)this + 2);
    v17 = *((_QWORD *)this + 3);
    v19 = __ROR8__(v16 + v17, 52);
    v20 = v16 + *((_QWORD *)this + 1);
    v21 = __ROR8__(v20, 7);
    v22 = v20 + v18;
    v23 = v21 + __ROR8__(*(_QWORD *)this - 0x3C5A37A36834CED9 * (v14 + a2), 37) + v19;
    v24 = *(_QWORD *)((char *)this + a2 - 32) + v18;
    v25 = __ROR8__(v24 + v15, 52);
    v26 = v23 + __ROR8__(v22, 31);
    v27 = __ROR8__(v24, 37);
    v28 = *((_QWORD *)v13 - 3) + v24;
    v29 = __ROR8__(v28, 7);
    v30 = v28 + v14;
    v31 = __ROR8__(v30, 31);
    v32 = ((0xC3A5C85C97CB3127
          * ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) ^ ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) >> 47))) ^ a3)
        + v26;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  if (a2)
  {
    v32 = (0x9AE16A3B2F90404FLL
         * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  return a3 ^ 0x9AE16A3B2F90404FLL;
}

uint64_t swift_reflection_getSupportedMetadataVersion()
{
  return 3;
}

void swift_reflection_createReflectionContext()
{
  operator new();
}

uint64_t minimalDataLayoutQueryFunction<(unsigned char)4>(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  if (a2 > 1)
  {
    if (a2 == 4)
    {
      *a4 = 4096;
      return 1;
    }
    else if (a2 == 3)
    {
      *(_BYTE *)a4 = 0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(_BYTE *)a4 = 4;
    return 1;
  }
}

uint64_t minimalDataLayoutQueryFunction<(unsigned char)8>(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  if (a2 > 1)
  {
    if (a2 == 4)
    {
      *a4 = 0x100000000;
      return 1;
    }
    else if (a2 == 3)
    {
      *(_BYTE *)a4 = 0;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(_BYTE *)a4 = 8;
    return 1;
  }
}

void swift_reflection_createReflectionContextWithDataLayout(uint64_t a1, void (*a2)(void))
{
  char v2;

  v2 = 1;
  a2();
  operator new();
}

SwiftReflectionContext *swift_reflection_destroyReflectionContext(SwiftReflectionContext *result)
{
  if (result)
  {
    SwiftReflectionContext::~SwiftReflectionContext(result);
    operator delete();
  }
  return result;
}

uint64_t swift_reflection_addReflectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;

  v5 = a2;
  v6 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_addReflectionMappingInfo(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t ***, uint64_t))off_B4B60[v2])(&v7, a1);
  }
}

uint64_t swift_reflection_addReflectionMappingInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;

  v5 = a2;
  v6 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_addImage(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t ***, uint64_t))off_B4B70[v2])(&v7, a1);
  }
}

uint64_t swift_reflection_addImage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_readIsaMask(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4B80[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_readIsaMask(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_typeRefForMetadata(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4CB0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_typeRefForMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_ownsObject(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4CC0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_ownsObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_ownsAddress(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4D80[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_ownsAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_ownsAddressStrict(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4D90[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_ownsAddressStrict(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataForObject(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4DA0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_metadataForObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataNominalTypeDescriptor(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4DB0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_metadataNominalTypeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataIsActor(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4DC0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_metadataIsActor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_typeRefForInstance(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4DD0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_typeRefForInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_typeRefForMangledTypeName(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4DE0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_typeRefForMangledTypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v7 = a3;
  v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  v9 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_copyDemangledNameForTypeRef(v5);
  }
  else
  {
    v10 = &v9;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4DF0[v3])(&v10, a1);
  }
}

char *swift_reflection_copyDemangledNameForTypeRef(uint64_t a1, swift::reflection::TypeRef *a2)
{
  unsigned int *Demangling;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  std::string __s1;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  _BYTE v60[24];
  _BYTE *v61;

  v22[2] = 0;
  v23 = 0;
  v24 = 2400;
  v25 = 0;
  v26 = 0;
  v22[0] = off_B5288;
  v22[1] = 0;
  v61 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v30 = 0;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v59 = 0;
  Demangling = swift::reflection::TypeRef::getDemangling(a2, (swift::Demangle::__runtime::Demangler *)v22);
  v10 = 0;
  v11 = 0x101010101010101;
  v12 = 1;
  v13 = 0x101010100000000;
  v14 = 1;
  v15 = 256;
  v16 = 1;
  v17 = 0;
  v18 = 0;
  v19[0] = off_B4B28;
  v19[1] = swift::Demangle::__runtime::genericParameterName;
  v20 = v19;
  swift::Demangle::__runtime::nodeToString((swift::Demangle::__runtime::Node *)Demangling, (__int128 *)&v10, &__s1);
  v3 = v20;
  if (v20 == v19)
  {
    v4 = 4;
    v3 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (void *)__s1.__r_.__value_.__r.__words[0];
    v5 = strdup(__s1.__r_.__value_.__l.__data_);
    operator delete(v6);
  }
  else
  {
    v5 = strdup((const char *)&__s1);
  }
  v22[0] = off_B5288;
  v7 = v61;
  if (v61 == v60)
  {
    v8 = 4;
    v7 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
  v22[0] = off_B5260;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v23);
  if (v25)
    *(_BYTE *)(v25 + 48) = 0;
  return v5;
}

void swift::Demangle::__runtime::Demangler::~Demangler(swift::Demangle::__runtime::Demangler *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_B5288;
  v2 = (char *)this + 544;
  v3 = (char *)*((_QWORD *)this + 71);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = off_B5260;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*((_QWORD **)this + 3));
  v5 = *((_QWORD *)this + 5);
  if (v5)
    *(_BYTE *)(v5 + 48) = 0;
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)this = off_B5288;
  v2 = (char *)this + 544;
  v3 = (char *)*((_QWORD *)this + 71);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = off_B5260;
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      free(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
    *(_BYTE *)(v7 + 48) = 0;
  operator delete();
}

char *swift_reflection_copyNameForTypeRef(uint64_t a1, swift::reflection::TypeRef *a2, int a3)
{
  unsigned int *v3;
  char *v4;
  unsigned int *Demangling;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  void *v10;
  std::string::size_type v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[9];
  char v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  char v20;
  _QWORD v21[2];
  _QWORD v22[3];
  _QWORD *v23;
  std::string __s1;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _BYTE v63[24];
  _BYTE *v64;

  v25[2] = 0;
  v26 = 0;
  v27 = 2400;
  v28 = 0;
  v29 = 0;
  v25[0] = off_B5288;
  v25[1] = 0;
  v64 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v62 = 0;
  if (!a3)
  {
    Demangling = swift::reflection::TypeRef::getDemangling(a2, (swift::Demangle::__runtime::Demangler *)v25);
    v15[0] = 0;
    *(_QWORD *)&v15[1] = 0x101010101010101;
    v16 = 1;
    v17 = 0x101010100000000;
    v18 = 1;
    v19 = 256;
    v20 = 1;
    v21[0] = 0;
    v21[1] = 0;
    v22[0] = off_B4B28;
    v22[1] = swift::Demangle::__runtime::genericParameterName;
    v23 = v22;
    swift::Demangle::__runtime::nodeToString((swift::Demangle::__runtime::Node *)Demangling, (__int128 *)v15, &__s1);
    v6 = v23;
    if (v23 == v22)
    {
      v7 = 4;
      v6 = v22;
    }
    else
    {
      if (!v23)
      {
LABEL_15:
        if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v4 = strdup((const char *)&__s1);
          goto LABEL_19;
        }
        v11 = __s1.__r_.__value_.__r.__words[0];
        v4 = strdup(__s1.__r_.__value_.__l.__data_);
        v10 = (void *)v11;
        goto LABEL_18;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_15;
  }
  v3 = swift::reflection::TypeRef::getDemangling(a2, (swift::Demangle::__runtime::Demangler *)v25);
  swift::Demangle::__runtime::mangleNode((size_t *)v3, (uint64_t)v15);
  if (*(_DWORD *)v15)
  {
    v4 = 0;
    if ((v22[0] & 0x8000000000000000) == 0)
      goto LABEL_19;
    goto LABEL_12;
  }
  v8 = HIBYTE(v22[0]);
  if (v22[0] >= 0)
    v9 = (const char *)v21;
  else
    v9 = (const char *)v21[0];
  v4 = strdup(v9);
  if (v8 < 0)
  {
LABEL_12:
    v10 = (void *)v21[0];
LABEL_18:
    operator delete(v10);
  }
LABEL_19:
  v25[0] = off_B5288;
  v12 = v64;
  if (v64 == v63)
  {
    v13 = 4;
    v12 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_24;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_24:
  v25[0] = off_B5260;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v26);
  if (v28)
    *(_BYTE *)(v28 + 48) = 0;
  return v4;
}

uint64_t swift_reflection_copyDemangledNameForProtocolDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t ***v9;

  v6 = &v7;
  v7 = a2;
  v8 = &v6;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_genericArgumentOfTypeRef(v4, v5);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4E00[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_genericArgumentOfTypeRef(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = 0;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * a2);
  }
  return result;
}

uint64_t swift_reflection_genericArgumentCountOfTypeRef(uint64_t a1)
{
  uint64_t result;

  result = 0;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 2)
      return (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3;
  }
  return result;
}

uint64_t getTypeInfoKind(uint64_t a1)
{
  int v1;
  uint64_t result;
  unsigned __int16 *v4;
  int v5;
  unsigned int v6;

  v1 = *(_DWORD *)(a1 + 8);
  result = 0;
  switch(v1)
  {
    case 0:
      v4 = (unsigned __int16 *)(a1 + 32);
      v5 = *(char *)(a1 + 55);
      if (v5 < 0)
      {
        if (*(_QWORD *)(a1 + 40) != 2)
          return 1;
        v4 = *(unsigned __int16 **)v4;
      }
      else if (v5 != 2)
      {
        return 1;
      }
      if (bswap32(*v4) >> 16 == 17008)
        return 2;
      else
        return 1;
    case 1:
      v6 = *(_DWORD *)(a1 + 32);
      if (v6 >= 0xA)
        goto LABEL_9;
      return dword_B0C30[v6];
    case 2:
      v6 = *(_DWORD *)(a1 + 32);
      goto LABEL_11;
    case 3:
      return result;
    case 4:
      v6 = *(_DWORD *)(a1 + 32);
LABEL_9:
      if (v6 < 3)
        return v6 + 5;
LABEL_11:
      if (v6 >= 4)
LABEL_20:
        abort();
      return dword_B0FA0[v6];
    default:
      goto LABEL_20;
  }
}

BOOL std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      abort();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t swift_reflection_infoForTypeRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_childOfTypeRef(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4E10[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_childOfTypeRef(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v8 = a2;
  v7 = a3;
  v6[0] = &v8;
  v6[1] = &v7;
  v9 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_infoForMetadata(v5);
  }
  else
  {
    v10 = &v9;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4E20[v3])(&v10, a1);
  }
}

uint64_t swift_reflection_infoForMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_childOfMetadata(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4E30[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_childOfMetadata(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v8 = a2;
  v7 = a3;
  v6[0] = &v8;
  v6[1] = &v7;
  v9 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_infoForInstance(v5);
  }
  else
  {
    v10 = &v9;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4E40[v3])(&v10, a1);
  }
}

uint64_t swift_reflection_infoForInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_childOfInstance(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4E50[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_childOfInstance(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v8 = a2;
  v7 = a3;
  v6[0] = &v8;
  v6[1] = &v7;
  v9 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_projectExistential(v5);
  }
  else
  {
    v10 = &v9;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4E60[v3])(&v10, a1);
  }
}

uint64_t swift_reflection_projectExistential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v11 = a3;
  v12 = a2;
  v9 = a5;
  v10 = a4;
  v8[0] = &v11;
  v8[1] = &v12;
  v8[2] = &v10;
  v8[3] = &v9;
  v13 = v8;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_projectExistentialAndUnwrapClass(v7);
  }
  else
  {
    v14 = &v13;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4E70[v5])(&v14, a1);
  }
}

uint64_t swift_reflection_projectExistentialAndUnwrapClass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v11 = a3;
  v12 = a2;
  v9 = a5;
  v10 = a4;
  v8[0] = &v11;
  v8[1] = &v12;
  v8[2] = &v10;
  v8[3] = &v9;
  v13 = v8;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_projectEnumValue(v7);
  }
  else
  {
    v14 = &v13;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4E80[v5])(&v14, a1);
  }
}

uint64_t swift_reflection_projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v8 = a4;
  v9 = a3;
  v7[0] = &v9;
  v7[1] = &v10;
  v7[2] = &v8;
  v10 = a2;
  v11 = v7;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_dumpTypeRef(v6);
  }
  else
  {
    v12 = &v11;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4E90[v4])(&v12, a1);
  }
}

_QWORD *swift_reflection_dumpTypeRef(uint64_t a1)
{
  if (a1)
    return swift::reflection::TypeRef::dump(a1, &std::cout, 0);
  else
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type reference>\n", 22);
}

_QWORD *std::operator<<[abi:nn180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

uint64_t swift_reflection_dumpInfoForTypeRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = a2;
  v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  v8 = v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_dumpInfoForMetadata(v4);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4EA0[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_dumpInfoForMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t ***v8;

  v5 = &v6;
  v6 = a2;
  v7 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_dumpInfoForInstance(v4);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4EB0[v2])(&v8, a1);
  }
}

uint64_t swift_reflection_dumpInfoForInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  size_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t ***v9;

  v6 = &v7;
  v7 = a2;
  v8 = &v6;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = (void *)std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_demangle(v4, v5);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(uint64_t ****, uint64_t))off_B4EC0[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_demangle(void *__src, size_t __n)
{
  _QWORD *v4;
  size_t v5;
  size_t v6;
  _QWORD v8[4];
  _QWORD __dst[2];
  unint64_t v10;

  if (__src && __n)
  {
    if (__n < 0x7FFFFFFFFFFFFFF8)
    {
      if (__n >= 0x17)
      {
        v5 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__n | 7) != 0x17)
          v5 = __n | 7;
        v6 = v5 + 1;
        v4 = operator new(v5 + 1);
        __dst[1] = __n;
        v10 = v6 | 0x8000000000000000;
        __dst[0] = v4;
      }
      else
      {
        HIBYTE(v10) = __n;
        v4 = __dst;
      }
      memcpy(v4, __src, __n);
      *((_BYTE *)v4 + __n) = 0;
      v8[0] = off_B4B28;
      v8[1] = swift::Demangle::__runtime::genericParameterName;
      v8[3] = v8;
      swift::Demangle::__runtime::demangleTypeAsString();
    }
    abort();
  }
  return 0;
}

uint64_t swift_reflection_iterateConformanceCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v7 = a3;
  v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  v6[2] = &v9;
  v9 = a1;
  v10 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_iterateMetadataAllocations(v5);
  }
  else
  {
    v11 = &v10;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4ED0[v3])(&v11, a1);
  }
}

uint64_t swift_reflection_iterateMetadataAllocations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v7 = a3;
  v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  v6[2] = &v9;
  v9 = a1;
  v10 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_allocationMetadataPointer(v5);
  }
  else
  {
    v11 = &v10;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B4FB8[v3])(&v11, a1);
  }
}

uint64_t swift_reflection_allocationMetadataPointer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;

  v5 = a2;
  v6 = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataAllocationTagName(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t ***, uint64_t))off_B5058[v2])(&v7, a1);
  }
}

uint64_t swift_reflection_metadataAllocationTagName(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v7 = a1;
  v6 = a2;
  v5[0] = &v6;
  v5[1] = &v7;
  v8 = v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_metadataAllocationCacheNode(v4);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B5068[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_metadataAllocationCacheNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6[0] = a2;
  v6[1] = &v7;
  v7 = a3;
  v8 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_iterateMetadataAllocationBacktraces(v5);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B5078[v3])(&v9, a1);
  }
}

uint64_t swift_reflection_iterateMetadataAllocationBacktraces(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v7 = a3;
  v8 = a2;
  v6[0] = &v8;
  v6[1] = &v7;
  v6[2] = &v9;
  v9 = a1;
  v10 = v6;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_asyncTaskSlabPointer(v5);
  }
  else
  {
    v11 = &v10;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B5088[v3])(&v11, a1);
  }
}

uint64_t swift_reflection_asyncTaskSlabPointer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = a2;
  v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  v8 = v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_asyncTaskSlabAllocations(v4);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B5128[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_asyncTaskSlabAllocations(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = a2;
  v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  v8 = v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_asyncTaskInfo(v4);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B5138[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_asyncTaskInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = a2;
  v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  v8 = v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_actorInfo(v4);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B5190[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_actorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = a2;
  v7 = a1;
  v5[0] = &v6;
  v5[1] = &v7;
  v8 = v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return swift_reflection_nextJob(v4);
  }
  else
  {
    v9 = &v8;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_B5230[v2])(&v9, a1);
  }
}

uint64_t swift_reflection_nextJob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t ***v10;

  v7 = &v8;
  v8 = a2;
  v9 = &v7;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    SwiftReflectionContext::SwiftReflectionContext(v4, v5, v6);
  }
  v10 = &v9;
  return ((uint64_t (*)(uint64_t ****, uint64_t))off_B5240[v2])(&v10, a1);
}

void SwiftReflectionContext::SwiftReflectionContext(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = off_B42A0;
  *(_QWORD *)(a1 + 88) = a1 + 64;
  v4 = operator new(0x50uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_B42E8;
  v4[3] = off_B4320;
  v5 = a3[1];
  *((_OWORD *)v4 + 2) = *a3;
  *((_OWORD *)v4 + 3) = v5;
  *((_OWORD *)v4 + 4) = a3[2];
  operator new();
}

void _ZNSt3__110__function6__funcIN22SwiftReflectionContext23freeTemporaryAllocationMUlvE_ENS_9allocatorIS3_EEFvvEED0Ev()
{
  operator delete();
}

_QWORD *_ZNKSt3__110__function6__funcIN22SwiftReflectionContext23freeTemporaryAllocationMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_B42A0;
  return result;
}

void _ZNKSt3__110__function6__funcIN22SwiftReflectionContext23freeTemporaryAllocationMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = off_B42A0;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void std::__shared_ptr_emplace<swift::remote::CMemoryReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_B42E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<swift::remote::CMemoryReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_B42E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

BOOL swift::remote::CMemoryReader::queryDataLayout(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8)) != 0;
}

uint64_t swift::remote::CMemoryReader::getSymbolAddress(uint64_t a1, uint64_t *a2)
{
  uint64_t (*v2)(uint64_t, uint64_t *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(a1 + 48);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v5 = v4;
  }
  return v2(v3, a2, v5);
}

uint64_t swift::remote::CMemoryReader::readString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (**v18)();
  _BOOL8 v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  const void *v31;
  _QWORD v32[3];
  _QWORD *v33;

  v6 = (*(uint64_t (**)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 8));
  if (!v6)
  {
    *(_QWORD *)&v29 = 0;
    v13 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __int128 *))(a1 + 32))(*(_QWORD *)(a1 + 8), a2, 1, &v29);
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = v29;
      v17 = operator new(0x20uLL);
      v18 = off_B43D0;
      *v17 = off_B43D0;
      v17[1] = v14;
      v17[2] = v15;
      v17[3] = v16;
      v33 = v17;
      if (v13)
      {
LABEL_6:
        v19 = *v13 == 0;
        v31 = 0;
        *(_QWORD *)&v29 = v13;
        ((void (*)(_QWORD *))v18[6])(v17);
        v17 = v33;
        goto LABEL_28;
      }
    }
    else
    {
      v17 = v32;
      v18 = off_B4388;
      v32[0] = off_B4388;
      v33 = v32;
      if (v13)
        goto LABEL_6;
    }
    v19 = 0;
    v31 = 0;
LABEL_28:
    if (v17 == v32)
    {
      v26 = 4;
      v17 = v32;
    }
    else
    {
      if (!v17)
        return v19;
      v26 = 5;
    }
    (*(void (**)(_QWORD *))(*v17 + 8 * v26))(v17);
    return v19;
  }
  v7 = v6;
  *(_QWORD *)&v29 = 0;
  v8 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __int128 *))(a1 + 32))(*(_QWORD *)(a1 + 8), a2, v6, &v29);
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v29;
    v12 = operator new(0x20uLL);
    *v12 = off_B43D0;
    v12[1] = v9;
    v12[2] = v10;
    v12[3] = v11;
  }
  else
  {
    v12 = v32;
    v32[0] = off_B4388;
  }
  v31 = v8;
  v33 = v12;
  v19 = v8 != 0;
  if (!v8)
  {
    v31 = 0;
    goto LABEL_21;
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v7 >= 0x17)
  {
    v21 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v21 = v7 | 7;
    v22 = v21 + 1;
    v20 = (__int128 *)operator new(v21 + 1);
    *((_QWORD *)&v29 + 1) = v7;
    v30 = v22 | 0x8000000000000000;
    *(_QWORD *)&v29 = v20;
  }
  else
  {
    HIBYTE(v30) = v7;
    v20 = &v29;
  }
  memmove(v20, v8, v7);
  *((_BYTE *)v20 + v7) = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)a3 = v29;
    *(_QWORD *)(a3 + 16) = v30;
    v31 = 0;
    *(_QWORD *)&v29 = v8;
    goto LABEL_20;
  }
  operator delete(*(void **)a3);
  v24 = v30;
  v23 = v31;
  v12 = v33;
  *(_OWORD *)a3 = v29;
  *(_QWORD *)(a3 + 16) = v24;
  v31 = 0;
  if (!v23)
    goto LABEL_21;
  *(_QWORD *)&v29 = v23;
  if (v12)
  {
LABEL_20:
    (*(void (**)(_QWORD *, __int128 *))(*v12 + 48))(v12, &v29);
    v12 = v33;
LABEL_21:
    if (v12 == v32)
    {
      v25 = 4;
      v12 = v32;
    }
    else
    {
      if (!v12)
        return v19;
      v25 = 5;
    }
    (*(void (**)(_QWORD *))(*v12 + 8 * v25))(v12);
    return v19;
  }
  v28 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::remote::CMemoryReader::readBytes(v28);
}

_QWORD *swift::remote::CMemoryReader::readBytes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  v11 = 0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(a1 + 32))(*(_QWORD *)(a1 + 8), a2, a3, &v11);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = v11;
    result = operator new(0x20uLL);
    *result = off_B43D0;
    result[1] = v7;
    result[2] = v8;
    result[3] = v9;
  }
  else
  {
    a4[1] = (uint64_t)off_B4388;
    result = a4 + 1;
  }
  *a4 = v6;
  a4[4] = (uint64_t)result;
  return result;
}

void swift::remote::MemoryReader::readBytes(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__src;
  _BYTE v12[24];
  _BYTE *v13;
  void *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 24))(&__src);
  v6 = __src;
  if (__src)
  {
    memcpy(a3, __src, a4);
    __src = 0;
    v14 = v6;
    if (!v13)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      swift::remote::MemoryReader::resolvePointer(v9, v10);
      return;
    }
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)v13 + 48))(v13, &v14);
  }
  else
  {
    __src = 0;
  }
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
  }
  else
  {
    if (!v13)
      return;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
}

void swift::remote::MemoryReader::resolvePointer(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 24) = a1;
}

void swift::remote::MemoryReader::resolvePointerAsSymbol(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

void swift::remote::MemoryReader::getSymbol(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 48))(__p);
  if (v11)
  {
    if (SHIBYTE(v9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      v6 = v11;
      v7 = SHIBYTE(v9);
      *(_QWORD *)(a3 + 24) = v10;
      if (v6)
      {
        if (v7 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)__p;
      v5 = v10;
      *(_QWORD *)(a3 + 16) = v9;
      *(_QWORD *)(a3 + 24) = v5;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 24) = a2;
  }
}

double swift::remote::MemoryReader::getDynamicSymbol@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void swift::remote::CMemoryReader::~CMemoryReader(swift::remote::CMemoryReader *this)
{
  operator delete();
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::~__func();
}

void std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_B4388;
  return result;
}

void std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_B4388;
}

void std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_B43D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B43D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2},std::allocator<swift::remote::CMemoryReader::readBytes(swift::remote::RemoteAddress,unsigned long long)::{lambda(void const*)#2}>,void ()(void const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *a2, *(_QWORD *)(a1 + 24));
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

double swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 2400;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_B5288;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = a1;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 840) = 1065353216;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 880) = 1065353216;
  *(_DWORD *)(a1 + 920) = 1065353216;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_DWORD *)(a1 + 960) = 1065353216;
  *(_DWORD *)(a1 + 1000) = 1065353216;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_DWORD *)(a1 + 1080) = 1065353216;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_DWORD *)(a1 + 1120) = 1065353216;
  *(_DWORD *)(a1 + 1160) = 1065353216;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_DWORD *)(a1 + 1200) = 1065353216;
  *(_DWORD *)(a1 + 1240) = 1065353216;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1280) = 1065353216;
  *(_DWORD *)(a1 + 1320) = 1065353216;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(_DWORD *)(a1 + 1400) = 1065353216;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_DWORD *)(a1 + 1440) = 1065353216;
  *(_DWORD *)(a1 + 1480) = 1065353216;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_DWORD *)(a1 + 1520) = 1065353216;
  *(_QWORD *)(a1 + 1672) = a4;
  *(_QWORD *)(a1 + 1680) = off_B6218;
  *(_DWORD *)(a1 + 1560) = 1065353216;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_DWORD *)(a1 + 1600) = 1065353216;
  *(_DWORD *)(a1 + 1640) = 1065353216;
  *(_DWORD *)(a1 + 1768) = 1065353216;
  *(_DWORD *)(a1 + 1808) = 1065353216;
  *(_DWORD *)(a1 + 1848) = 1065353216;
  *(_DWORD *)(a1 + 1888) = 1065353216;
  *(_QWORD *)(a1 + 1936) = a3;
  *(_DWORD *)(a1 + 1944) = 8;
  *(_QWORD *)(a1 + 1952) = off_B4418;
  *(_QWORD *)(a1 + 1976) = a1 + 1952;
  *(_QWORD *)(a1 + 1984) = off_B44A8;
  *(_QWORD *)(a1 + 2008) = a1 + 1984;
  *(_QWORD *)(a1 + 2016) = off_B4770;
  *(_QWORD *)(a1 + 2040) = a1 + 2016;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 2048) = off_B47B8;
  *(_QWORD *)(a1 + 2072) = a1 + 2048;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_QWORD *)(a1 + 2080) = off_B4800;
  *(_QWORD *)(a1 + 2104) = a1 + 2080;
  *(_QWORD *)(a1 + 2112) = off_B4848;
  *(_QWORD *)(a1 + 2136) = a1 + 2112;
  *(_QWORD *)(a1 + 2144) = off_B4890;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_DWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1904) = 0;
  *(_QWORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1928) = a1;
  *(_QWORD *)(a1 + 1960) = a1;
  *(_QWORD *)(a1 + 1968) = a2;
  *(_QWORD *)(a1 + 1992) = a2;
  *(_QWORD *)(a1 + 2024) = a2;
  *(_QWORD *)(a1 + 2056) = a2;
  *(_QWORD *)(a1 + 2088) = a2;
  *(_QWORD *)(a1 + 2120) = a2;
  *(_QWORD *)(a1 + 2152) = a2;
  *(_QWORD *)(a1 + 2168) = a1 + 2144;
  *(_BYTE *)(a1 + 2176) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 2184) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1716) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B4418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::operator()(uint64_t a1, uint64_t a2, char *a3)
{
  _BYTE *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *SymbolicMangledNameStringRef;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[3];
  _QWORD *v17;
  char v18;

  v3 = *(_BYTE **)(a2 + 8);
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v15[0] = *(_QWORD *)a2;
  v15[1] = v3;
  v18 = v4;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v3, (const char *)a2);
  v9 = v8;
  v10 = operator new(0x28uLL);
  *v10 = off_B4460;
  v10[1] = v15;
  v10[2] = v6;
  v10[3] = &v18;
  v10[4] = v5;
  v17 = v10;
  v11 = swift::Demangle::__runtime::Demangler::demangleType(v5, (uint64_t)SymbolicMangledNameStringRef, v9, v16);
  v12 = v17;
  if (v17 == v16)
  {
    v13 = 4;
    v12 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  _WORD *SymbolicMangledNameStringRef;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  char v22;

  v22 = a5;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(*(_BYTE **)(a2 + 8), (const char *)a2);
  v11 = v10;
  if (a3 == 1)
  {
    v16 = operator new(0x28uLL);
    *v16 = off_B4460;
    v16[1] = a2;
    v16[2] = a1;
    v16[3] = &v22;
    v16[4] = a4;
    v19 = v16;
    v13 = swift::Demangle::__runtime::Demangler::demangleSymbol(a4, SymbolicMangledNameStringRef, v11, v18);
    v14 = v19;
    if (v19 == v18)
    {
      v15 = 4;
      v14 = v18;
      goto LABEL_10;
    }
  }
  else
  {
    if (a3)
      return 0;
    v12 = operator new(0x28uLL);
    *v12 = off_B4460;
    v12[1] = a2;
    v12[2] = a1;
    v12[3] = &v22;
    v12[4] = a4;
    v21 = v12;
    v13 = swift::Demangle::__runtime::Demangler::demangleType(a4, (uint64_t)SymbolicMangledNameStringRef, v11, v20);
    v14 = v21;
    if (v21 == v20)
    {
      v15 = 4;
      v14 = v20;
LABEL_10:
      (*(void (**)(void))(*v14 + 8 * v15))();
      return v13;
    }
  }
  if (v14)
  {
    v15 = 5;
    goto LABEL_10;
  }
  return v13;
}

void std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_B4460;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4460;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *std::__function::__func<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::operator()(uint64_t a1, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5)
{
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(a1 + 8, *a2, *a3, *a4, *a5);
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *Node;
  size_t v11;
  void **v12;
  _BYTE *v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t MangledName;
  int v23;
  unint64_t v24;
  int v25;
  swift::Demangle::__runtime::Node *v26;
  int v27;
  swift::Demangle::__runtime::Node *v28;
  int v29;
  swift::Demangle::__runtime::Node *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  std::string v36;
  _BYTE __s[32];
  char v38;
  void *__p[2];
  __int128 v40;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = a5 + a4 - *(_QWORD *)(*(_QWORD *)a1 + 8) + **(_QWORD **)a1;
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  if (a3 == 1)
  {
    swift::remote::MemoryReader::readPointer(*(_QWORD *)(v7 + 2488), v8, 8u, (uint64_t)__s);
    if (!v38)
    {
LABEL_78:
      Node = 0;
      goto LABEL_79;
    }
    if ((__s[23] & 0x80000000) != 0)
    {
      if (*(_QWORD *)&__s[8])
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        goto LABEL_9;
      }
    }
    else if (__s[23])
    {
      v36 = *(std::string *)__s;
LABEL_9:
      v9 = *(_QWORD *)&__s[24];
LABEL_11:
      *(_OWORD *)__p = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *(_QWORD *)&v40 = *((_QWORD *)&v36.__r_.__value_.__l + 2);
      *((_QWORD *)&v40 + 1) = v9;
      if (v38 && (__s[23] & 0x80000000) != 0)
        operator delete(*(void **)__s);
      goto LABEL_14;
    }
    v9 = *(_QWORD *)(v7 + 2504) & *(_QWORD *)&__s[24];
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 0;
    v36.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_11;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v7 + 2488) + 56))(__s, *(_QWORD *)(v7 + 2488), v8);
  *(_OWORD *)__p = *(_OWORD *)__s;
  v9 = *(_QWORD *)&__s[24];
  v40 = *(_OWORD *)&__s[16];
LABEL_14:
  Node = 0;
  switch(a2)
  {
    case 0:
      if ((SBYTE7(v40) & 0x80u) == 0)
        v11 = BYTE7(v40);
      else
        v11 = (size_t)__p[1];
      if (v11)
      {
        if (v9)
          goto LABEL_78;
        if ((SBYTE7(v40) & 0x80u) == 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        __s[0] = 0;
        if (v11 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v11 >= 0x17)
        {
          v33 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v33 = v11 | 7;
          v34 = v33 + 1;
          v13 = operator new(v33 + 1);
          *(_QWORD *)&__s[16] = v11;
          *(_QWORD *)&__s[24] = v34 | 0x8000000000000000;
          *(_QWORD *)&__s[8] = v13;
        }
        else
        {
          v13 = &__s[8];
          __s[31] = v11;
        }
        memmove(v13, v12, v11);
        v13[v11] = 0;
        if (!__s[0])
          goto LABEL_82;
      }
      else
      {
        swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(v7, v9, (uint64_t *)&v36);
        __s[0] = 1;
        *(_OWORD *)&__s[8] = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      }
      if (!*(_QWORD *)&__s[16])
        goto LABEL_78;
      if (**(_BYTE **)(a1 + 16) && (**(_DWORD **)&__s[16] & 0x1F) == 4)
      {
        v14 = *(_QWORD **)(a1 + 24);
        v16 = *(_QWORD *)&__s[8];
        v15 = 301;
        goto LABEL_29;
      }
LABEL_82:
      Node = (unsigned int *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(v7, (uint64_t)__s, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24));
      if (!__s[0] && (__s[31] & 0x80000000) != 0)
        operator delete(*(void **)&__s[8]);
      break;
    case 2:
      v14 = *(_QWORD **)(a1 + 24);
      v15 = 336;
      goto LABEL_28;
    case 3:
      v14 = *(_QWORD **)(a1 + 24);
      v15 = 337;
LABEL_28:
      v16 = v9;
LABEL_29:
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v14, v15, v16);
      break;
    case 4:
      v17 = (void *)BYTE7(v40);
      v18 = SBYTE7(v40);
      if (SBYTE7(v40) < 0)
        v17 = __p[1];
      if (v17)
      {
        if (SBYTE7(v40) < 0)
          operator delete(__p[0]);
        v18 = 0;
        LOBYTE(__p[0]) = 0;
      }
      else
      {
        v8 = v9;
      }
      v19 = v8 + 4;
      LODWORD(v36.__r_.__value_.__l.__data_) = 0;
      (*(void (**)(_QWORD, uint64_t, std::string *, uint64_t))(**(_QWORD **)(v7 + 2488) + 32))(*(_QWORD *)(v7 + 2488), v19, &v36, 4);
      v20 = (char *)(v19 + SLODWORD(v36.__r_.__value_.__l.__data_));
      (*(void (**)(_BYTE *__return_ptr, _QWORD, char *))(**(_QWORD **)(v7 + 2488) + 56))(__s, *(_QWORD *)(v7 + 2488), v20);
      if (v18 < 0)
        operator delete(__p[0]);
      *(_QWORD *)&v40 = *(_QWORD *)&__s[16];
      *(_OWORD *)__p = *(_OWORD *)__s;
      v21 = HIBYTE(*(_QWORD *)&__s[16]);
      if (__s[23] < 0)
        v21 = *(_QWORD *)&__s[8];
      if (v21)
      {
        if ((__s[23] & 0x80000000) != 0)
          operator delete(__p[0]);
        LOBYTE(__p[0]) = 0;
        BYTE7(v40) = 0;
      }
      else
      {
        v20 = *(char **)&__s[24];
      }
      MangledName = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(v7, v20, 0, *(_QWORD **)(a1 + 24));
      if (!MangledName)
        goto LABEL_78;
      v23 = *(unsigned __int8 *)(MangledName + 18);
      if ((v23 - 1) < 2)
        goto LABEL_52;
      if (v23 != 5 || !*(_DWORD *)(MangledName + 8))
        goto LABEL_78;
      MangledName = *(_QWORD *)MangledName;
LABEL_52:
      v24 = *(_QWORD *)MangledName;
      if (!*(_QWORD *)MangledName)
        goto LABEL_78;
      v25 = *(unsigned __int8 *)(v24 + 18);
      if ((v25 - 1) < 2)
        goto LABEL_57;
      if (v25 != 5 || !*(_DWORD *)(v24 + 8))
        goto LABEL_78;
      v24 = *(_QWORD *)v24;
LABEL_57:
      v26 = *(swift::Demangle::__runtime::Node **)v24;
      if (!v26)
        goto LABEL_78;
      v27 = *((unsigned __int8 *)v26 + 18);
      if ((v27 - 1) < 2)
        goto LABEL_62;
      if (v27 != 5 || !*((_DWORD *)v26 + 2))
        goto LABEL_78;
      v26 = *(swift::Demangle::__runtime::Node **)v26;
LABEL_62:
      v28 = *(swift::Demangle::__runtime::Node **)v26;
      if (!v28)
        goto LABEL_78;
      v29 = *((unsigned __int8 *)v28 + 18);
      if ((v29 - 1) < 2)
        goto LABEL_67;
      if (v29 != 5 || !*((_DWORD *)v28 + 2))
        goto LABEL_78;
      v28 = *(swift::Demangle::__runtime::Node **)v28;
LABEL_67:
      v30 = *(swift::Demangle::__runtime::Node **)v28;
      if (!*(_QWORD *)v28 || *((_WORD *)v30 + 8) != 180)
        goto LABEL_78;
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 24), 232);
      swift::Demangle::__runtime::Node::addChild(Node, v30, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24), v31, v32);
      break;
    default:
      break;
  }
LABEL_79:
  if (SBYTE7(v40) < 0)
    operator delete(__p[0]);
  return Node;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  int v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  _QWORD v14[2];

  if (*(_BYTE *)a2)
  {
    v4 = *(_DWORD **)(a2 + 16);
    v14[0] = *(_QWORD *)(a2 + 8);
    v14[1] = v4;
    v5 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v14, a3, 50);
    if (v5 && ((*v4 & 0x10) != 0 || (*v4 & 0x1F) == 3))
    {
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v5, a3, v7, v8);
      return (uint64_t)Node;
    }
    return (uint64_t)v5;
  }
  else
  {
    v10 = *(char *)(a2 + 31);
    v11 = *(_QWORD *)(a2 + 16);
    if (v10 >= 0)
      v12 = (_WORD *)(a2 + 8);
    else
      v12 = *(_WORD **)(a2 + 8);
    if (v10 >= 0)
      v13 = v10;
    else
      v13 = v11;
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v12, v13, (uint64_t)a3);
  }
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(uint64_t a1, char *a2, int a3, _QWORD *a4)
{
  char *v5;
  uint64_t v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  unsigned int v10;
  std::string *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  std::string::size_type size;
  char v18;
  size_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  std::string *v25;
  unint64_t v26;
  void *__p;
  std::string::size_type v31;
  uint64_t v32;
  std::string v33;

  v5 = a2;
  v7 = 0;
  memset(&v33, 0, sizeof(v33));
  do
  {
    __p = 0;
    v31 = 0;
    v32 = 0;
    if (!(*(unsigned int (**)(_QWORD, char *, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v5, &__p))
    {
      v16 = 1;
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        continue;
LABEL_26:
      operator delete(__p);
      continue;
    }
    if (v32 >= 0)
      v8 = HIBYTE(v32);
    else
      v8 = v31;
    v5 += v8 + 1;
    if (v32 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    std::string::append(&v33, p_p, v8);
    v10 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = v33.__r_.__value_.__r.__words[1];
    v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v33;
    while (1)
    {
      v12 = v7;
      if (v7 >= v10)
        break;
      v13 = v11->__r_.__value_.__s.__data_[v7];
      v14 = v13 - 1;
      if ((v13 & 0xF8) == 0x18)
        v15 = 9;
      else
        v15 = 1;
      if (v14 < 0x17)
        v15 = 5;
      v7 = (v15 + v7);
      if (v7 > v10)
      {
        std::string::push_back(&v33, 0);
        v16 = 2;
        goto LABEL_25;
      }
    }
    v16 = 3;
LABEL_25:
    v7 = v12;
    if (SHIBYTE(v32) < 0)
      goto LABEL_26;
  }
  while (v16 == 2);
  if (v16 == 3)
  {
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v33.__r_.__value_.__l.__size_;
    v19 = size + 1;
    v20 = (char *)a4[1];
    if (!v20 || (unint64_t)&v20[v19] > a4[2])
    {
      v21 = 2 * a4[4];
      v22 = size + 2;
      if (v21 <= v22)
        v21 = v22;
      a4[4] = v21;
      v23 = v21 + 8;
      v24 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      *v24 = a4[3];
      v20 = (char *)(v24 + 1);
      a4[2] = (char *)v24 + v23;
      a4[3] = v24;
      v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    a4[1] = &v20[v19];
    if (v18 >= 0)
      v25 = &v33;
    else
      v25 = (std::string *)v33.__r_.__value_.__r.__words[0];
    memcpy(v20, v25, v19);
    __p = a2;
    v31 = (std::string::size_type)v20;
    v26 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(a1, (uint64_t)&__p, a3, (uint64_t)a4, 0);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_41:
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_41;
  }
  return v26;
}

void **swift::remote::MemoryReader::readPointer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  void **result;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  uint64_t v23;
  void **v24;

  result = (void **)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)a1 + 64))(__p);
  v9 = v23;
  if (v23)
    goto LABEL_5;
  v10 = (void *)HIBYTE(v22);
  if (v22 < 0)
    v10 = __p[1];
  if (v10)
  {
LABEL_5:
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_QWORD *)(a4 + 16) = v22;
    *(_QWORD *)(a4 + 24) = v9;
    *(_BYTE *)(a4 + 32) = 1;
    return result;
  }
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(__p, a1, a2, a3);
  v11 = __p[0];
  if (!__p[0])
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
    __p[0] = 0;
    goto LABEL_20;
  }
  if (a3 == 8)
  {
    v12 = *(_QWORD *)__p[0];
LABEL_15:
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v18, a1, a2, v12);
    *(_OWORD *)a4 = v18;
    v13 = v20;
    *(_QWORD *)(a4 + 16) = v19;
    *(_QWORD *)(a4 + 24) = v13;
    *(_BYTE *)(a4 + 32) = 1;
    v11 = __p[0];
    __p[0] = 0;
    if (!v11)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (a3 == 4)
  {
    v12 = *(unsigned int *)__p[0];
    goto LABEL_15;
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 32) = 0;
  __p[0] = 0;
LABEL_18:
  *(_QWORD *)&v18 = v11;
  if (!v24)
  {
    v15 = std::__throw_bad_function_call[abi:nn180100]();
    return (void **)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(v15, v16, v17);
  }
  (*((void (**)(void **, __int128 *))*v24 + 6))(v24, &v18);
LABEL_20:
  result = v24;
  if (v24 == &__p[1])
  {
    v14 = 4;
    result = &__p[1];
    return (void **)(*((uint64_t (**)(void))*result + v14))();
  }
  if (v24)
  {
    v14 = 5;
    return (void **)(*((uint64_t (**)(void))*result + v14))();
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31[24];
  uint64_t v32[2];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _BYTE v36[24];
  uint64_t *v37;
  unsigned int v38;

  if (!a2)
  {
LABEL_39:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  v5 = result;
  v7 = result + 48;
  v6 = *(_QWORD *)(result + 48);
  v8 = *(_DWORD *)(result + 64);
  if (v8)
  {
    v9 = (v8 - 1) & (37 * a2);
    v10 = (uint64_t *)(v6 + 48 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_9;
    v12 = 1;
    while (v11 != -1)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v10 = (uint64_t *)(v6 + 48 * v9);
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_9;
    }
  }
  v10 = (uint64_t *)(v6 + 48 * v8);
LABEL_9:
  if (v10 != (uint64_t *)(v6 + 48 * v8))
  {
    v14 = v10[1];
    *a3 = a2;
    a3[1] = v14;
    return result;
  }
  v38 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(result + 2488) + 32))(*(_QWORD *)(result + 2488), a2, &v38, 4);
  if ((result & 1) == 0)
    goto LABEL_39;
  v15 = 0;
  v16 = 0;
  v17 = 12;
  v18 = 8;
  switch(v38 & 0x1F)
  {
    case 0u:
    case 1u:
      goto LABEL_24;
    case 2u:
      v15 = 0;
      v16 = (v38 >> 14) & 4;
      goto LABEL_23;
    case 3u:
      v15 = 0;
      v16 = 0;
      v17 = 24;
      v18 = 8;
      if ((v38 & 0x80) != 0)
        goto LABEL_35;
      goto LABEL_25;
    case 4u:
      v15 = 0;
      v16 = 4 * ((unint64_t)v38 >> 16);
LABEL_23:
      v18 = 8;
      v17 = 8;
LABEL_24:
      if ((v38 & 0x80) == 0)
        goto LABEL_25;
      goto LABEL_35;
    case 0x10u:
      v15 = v38 >> 31;
      v23 = HIWORD(v38) & 3;
      v24 = 12;
      if (v23 != 1)
        v24 = 0;
      if (v23 == 2)
        v16 = 4;
      else
        v16 = v24;
      v17 = 44;
      goto LABEL_34;
    case 0x11u:
    case 0x12u:
      v15 = 0;
      v19 = HIWORD(v38) & 3;
      v20 = 12;
      if (v19 != 1)
        v20 = 0;
      if (v19 == 2)
        v16 = 4;
      else
        v16 = v20;
      v17 = 28;
LABEL_34:
      v18 = 16;
      if ((v38 & 0x80) != 0)
      {
LABEL_35:
        HIWORD(v32[0]) = 0;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v5 + 2488) + 32))(*(_QWORD *)(v5 + 2488), a2 + v18 + v17 - 8, v32, 8);
        if (!(_DWORD)result)
          goto LABEL_39;
        v21 = ((LOWORD(v32[0]) + 3) & 0x1FFFC) + v18 + 12 * WORD1(v32[0]);
        if (!v15)
          goto LABEL_37;
      }
      else
      {
LABEL_25:
        v21 = 0;
        if (!v15)
        {
LABEL_37:
          v22 = 0;
          goto LABEL_38;
        }
      }
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v5 + 2488) + 32))(*(_QWORD *)(v5 + 2488), v17 + a2 + v16 + v21, v32, 8);
      if (!(_DWORD)result)
        goto LABEL_39;
      v22 = 8 * HIDWORD(v32[0]) + 8;
LABEL_38:
      if (v17 + v16 + v21 + v22 > 0x100000)
        goto LABEL_39;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v5 + 2488) + 24))(&v35, *(_QWORD *)(v5 + 2488), a2);
      v25 = v35;
      if (v35)
      {
        v35 = 0;
        v32[0] = a2;
        v32[1] = v25;
        if (v37)
        {
          if (v37 == (uint64_t *)v36)
          {
            v34 = &v33;
            (*(void (**)(void))(*v37 + 24))();
          }
          else
          {
            v34 = v37;
            v37 = 0;
          }
        }
        else
        {
          v34 = 0;
        }
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::insert(v7, v32, (uint64_t)v31);
        std::pair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>::~pair(v32);
        *a3 = a2;
        a3[1] = v25;
        v26 = v35;
        v35 = 0;
        if (v26)
        {
          v32[0] = v26;
          if (!v37)
          {
            v28 = std::__throw_bad_function_call[abi:nn180100]();
            return (uint64_t)__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::insert(v28, v29, v30);
          }
          (*(void (**)(uint64_t *, uint64_t *))(*v37 + 48))(v37, v32);
        }
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        v35 = 0;
      }
      result = (uint64_t)v37;
      if (v37 == (uint64_t *)v36)
      {
        v27 = 4;
        result = (uint64_t)v36;
      }
      else
      {
        if (!v37)
          return result;
        v27 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v27))();
      break;
    default:
      goto LABEL_39;
  }
  return result;
}

_QWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::insert@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v12 = 0;
LABEL_5:
    result = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(a1, v12, a2, a2 + 1);
    v7 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 16);
    v11 = 1;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)a1;
  v8 = (37 * *a2) & (v6 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 48 * v8);
  v10 = *result;
  if (*a2 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v10 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v10 == -2;
      if (v15)
        v13 = result;
      v16 = v8 + v14++;
      v8 = v16 & (v6 - 1);
      result = (_QWORD *)(v7 + 48 * v8);
      v10 = *result;
      if (*a2 == *result)
        goto LABEL_3;
    }
    if (v13)
      v12 = v13;
    else
      v12 = result;
    goto LABEL_5;
  }
LABEL_3:
  v11 = 0;
LABEL_6:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7 + 48 * v6;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

_QWORD *std::pair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>::~pair(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  v2 = a1[1];
  a1[1] = 0;
  if (!v2)
  {
LABEL_4:
    v4 = (_QWORD *)a1[5];
    if (v4 == a1 + 2)
    {
      v5 = 4;
      v4 = a1 + 2;
    }
    else
    {
      if (!v4)
        return a1;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    return a1;
  }
  v11 = v2;
  v3 = a1[5];
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v11);
    goto LABEL_4;
  }
  v7 = std::__throw_bad_function_call[abi:nn180100]();
  return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(v7, v8, v9, v10);
}

_QWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    v10 = *a2;
    goto LABEL_4;
  }
  __swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::grow(a1, v9);
  v10 = *a3;
  v15 = *(_DWORD *)(a1 + 16) - 1;
  v16 = (37 * *a3) & v15;
  a2 = (_QWORD *)(*(_QWORD *)a1 + 48 * v16);
  v17 = *a2;
  if (*a3 != *a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -1)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -2;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = (_QWORD *)(*(_QWORD *)a1 + 48 * v16);
      v17 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v18)
      a2 = v18;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -1)
    --*(_DWORD *)(a1 + 12);
  v11 = *a3;
  v12 = *a4;
  *a4 = 0;
  *a2 = v11;
  a2[1] = v12;
  v13 = (uint64_t *)a4[4];
  if (v13)
  {
    if (v13 == a4 + 1)
    {
      a2[5] = a2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)a4[4] + 24))(a4[4]);
    }
    else
    {
      a2[5] = v13;
      a4[4] = 0;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return a2;
}

void __swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *buffer;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    v10 = 6 * v3;
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::moveFromOldBuckets(a1, v4, &v4[v10]);
    __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v4, (void *)(v10 * 8), (std::align_val_t)8uLL);
    return;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 48 * v11 - 48;
    if (v12 < 0x30)
    {
      v13 = buffer;
LABEL_12:
      v17 = &buffer[6 * v11];
      do
      {
        *v13 = -1;
        v13 += 6;
      }
      while (v13 != v17);
      return;
    }
    v14 = v12 / 0x30 + 1;
    v13 = &buffer[6 * (v14 & 0xFFFFFFFFFFFFFFELL)];
    v15 = v14 & 0xFFFFFFFFFFFFFFELL;
    v16 = buffer;
    do
    {
      *v16 = -1;
      v16[6] = -1;
      v16 += 12;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 48 * v6 - 48;
    if (v8 < 0x30)
    {
      v9 = *(_QWORD **)result;
LABEL_7:
      v13 = &v7[6 * v6];
      do
      {
        *v9 = -1;
        v9 += 6;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x30 + 1;
    v9 = &v7[6 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)result;
    do
    {
      *v12 = -1;
      v12[6] = -1;
      v12 += 12;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    while (1)
    {
      v15 = *v4;
      if ((unint64_t)*v4 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_13;
      v16 = *(_DWORD *)(v5 + 16);
      if (v16)
      {
        v17 = v16 - 1;
        v18 = (v16 - 1) & (37 * v15);
        v19 = (_QWORD *)(*(_QWORD *)v5 + 48 * v18);
        v20 = *v19;
        if (v15 != *v19)
        {
          v21 = 0;
          v22 = 1;
          while (v20 != -1)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v20 == -2;
            if (v23)
              v21 = v19;
            v24 = v18 + v22++;
            v18 = v24 & v17;
            v19 = (_QWORD *)(*(_QWORD *)v5 + 48 * (v24 & v17));
            v20 = *v19;
            if (v15 == *v19)
              goto LABEL_27;
          }
          if (v21)
            v19 = v21;
        }
      }
      else
      {
        v19 = 0;
      }
LABEL_27:
      v25 = v4[1];
      v4[1] = 0;
      *v19 = v15;
      v19[1] = v25;
      v26 = (uint64_t *)v4[5];
      if (!v26)
        break;
      if (v26 == v4 + 2)
      {
        v19[5] = v19 + 2;
        (*(void (**)(uint64_t))(*(_QWORD *)v4[5] + 24))(v4[5]);
        goto LABEL_32;
      }
      result = 0;
      v19[5] = v26;
      v4[5] = 0;
LABEL_33:
      ++*(_DWORD *)(v5 + 8);
      v27 = v4[1];
      v4[1] = 0;
      if (v27)
      {
        v29 = v27;
        if (!result)
        {
          v28 = std::__throw_bad_function_call[abi:nn180100]();
          return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(v28);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v29);
        result = v4[5];
      }
      if ((uint64_t *)result == v4 + 2)
      {
        result = (uint64_t)(v4 + 2);
        v14 = 4;
      }
      else
      {
        if (!result)
          goto LABEL_13;
        v14 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
LABEL_13:
      v4 += 6;
      if (v4 == a3)
        return result;
    }
    v19[5] = 0;
LABEL_32:
    result = v4[5];
    goto LABEL_33;
  }
  return result;
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, _QWORD *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *Node;
  uint64_t v8;
  const char *v9;
  _QWORD v11[2];

  v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  v6 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v11, a3, 50);
  if (v6 && ((*(_DWORD *)a2[1] & 0x10) != 0 || (*(_DWORD *)a2[1] & 0x1F) == 3))
  {
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v6, a3, v8, v9);
    return Node;
  }
  return v6;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(uint64_t a1, _WORD *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD v12[3];
  _QWORD *v13;

  v13 = 0;
  v4 = swift::Demangle::__runtime::Demangler::demangleSymbol(a4, a2, a3, v12);
  v5 = v13;
  if (v13 == v12)
  {
    v6 = 4;
    v5 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (*(_WORD *)(v4 + 16) == 99)
  {
    v7 = *(unsigned __int8 *)(v4 + 18);
    if ((v7 - 1) >= 2)
    {
      if (v7 != 5 || !*(_DWORD *)(v4 + 8))
      {
        v4 = 0;
        goto LABEL_13;
      }
      v4 = *(_QWORD *)v4;
    }
    v4 = *(_QWORD *)v4;
  }
LABEL_13:
  v8 = *(unsigned __int16 *)(v4 + 16);
  switch(v8)
  {
    case 158:
      goto LABEL_16;
    case 302:
      v10 = *(unsigned __int8 *)(v4 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*(_DWORD *)(v4 + 8))
          return 0;
LABEL_23:
        v4 = *(_QWORD *)v4;
      }
      return *(_QWORD *)v4;
    case 186:
LABEL_16:
      v9 = *(unsigned __int8 *)(v4 + 18);
      if ((v9 - 1) >= 2)
      {
        if (v9 != 5 || !*(_DWORD *)(v4 + 8))
          return 0;
        goto LABEL_23;
      }
      return *(_QWORD *)v4;
  }
  return 0;
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, _QWORD *a2, swift::Demangle::__runtime::NodeFactory *a3, int a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *Node;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  unint64_t MangledName;
  swift::Demangle::__runtime::Node *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int *v31;
  uint64_t v32;
  int *v33;
  size_t v34;
  swift::Demangle::__runtime::Node *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unsigned int *v40;
  swift::Demangle::__runtime::Node *v41;
  char v42;
  __int16 v43;
  int v44;
  unint64_t v45;
  swift::Demangle::__runtime::Node *v46;
  int v47;
  unsigned __int16 **v48;
  int v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  swift::Demangle::__runtime::Node *v57;
  int v58;
  uint64_t v59;
  unsigned int *v60;
  swift::Demangle::__runtime::Node *v61;
  swift::Demangle::__runtime::NodeFactory *v62;
  __int16 v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char *v74;
  int v75;
  int v76;
  unsigned int *v77;
  uint64_t v78;
  const char *v79;
  swift::Demangle::__runtime::Node *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int *v88;
  uint64_t v89;
  const char *v90;
  unsigned int *v91;
  int v92;
  swift::Demangle::__runtime::Node **v93;
  swift::Demangle::__runtime::Node *v94;
  uint64_t v95;
  const char *v96;
  int v97;
  size_t v98;
  void *v99;
  swift::Demangle::__runtime::Node *v100;
  unsigned int *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  unsigned int *v108;
  __int128 v109;
  void *v110;
  size_t v111;
  uint64_t v112;
  char *v113[2];
  _QWORD v114[2];
  _QWORD v115[5];
  void *v116;
  std::string __p;
  uint64_t v118;
  unsigned __int8 v119;
  void *v120;
  uint64_t v121;
  unsigned __int8 v122;
  char v123;
  _QWORD v124[2];
  swift::Demangle::__runtime::Node *v125;
  uint64_t v126;
  _QWORD v127[2];
  char v128[8];
  std::string v129;
  char v130;

  v4 = a4 - 1;
  if (a4 < 1)
    return 0;
  v8 = a2[1];
  v127[0] = *a2;
  v127[1] = v8;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v127, (uint64_t)v128);
  v125 = 0;
  v126 = 0;
  v9 = a2[1];
  v124[0] = *a2;
  v124[1] = v9;
  v125 = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(a1, (uint64_t)v124, (uint64_t)v128, a3, (unint64_t *)&v126);
  if (!v130)
    return 0;
  LOBYTE(v116) = v128[0];
  if (v128[0])
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
    if (!v129.__r_.__value_.__l.__size_)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  else if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  }
  else
  {
    __p = v129;
  }
  v10 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, (uint64_t)&v116, (uint64_t)a3, v4);
  if (v10 | v126)
  {
LABEL_11:
    v13 = 1;
    if ((_BYTE)v116)
      goto LABEL_16;
LABEL_14:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_16;
  }
  v10 = 0;
  v13 = 0;
  if (!(_BYTE)v116)
    goto LABEL_14;
LABEL_16:
  if (!v13)
  {
    Node = 0;
    if (!v130)
      return Node;
    goto LABEL_165;
  }
  if (v126 && (!v10 || *(_WORD *)(v10 + 16) == 1))
    v10 = v126;
  Node = 0;
  LOBYTE(v116) = 0;
  v123 = 0;
  v115[0] = &v125;
  v115[1] = a1;
  v115[2] = a2;
  v115[3] = &v116;
  v115[4] = a3;
  v14 = (unsigned int *)a2[1];
  switch(*v14 & 0x1F)
  {
    case 0u:
      if (v10)
        goto LABEL_131;
      v15 = (int)v14[2];
      if ((_DWORD)v15)
        v16 = *a2 + v15 + 8;
      else
        v16 = 0;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      Node = 0;
      if ((*(unsigned int (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v16, &v110))
      {
        if (v112 >= 0)
          v17 = &v110;
        else
          v17 = v110;
        if (v112 >= 0)
          v18 = HIBYTE(v112);
        else
          v18 = v111;
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 153, v17, v18);
      }
      if ((SHIBYTE(v112) & 0x80000000) == 0)
        goto LABEL_132;
      operator delete(v110);
      if (v123)
        goto LABEL_133;
      goto LABEL_164;
    case 1u:
      if (!v10)
        goto LABEL_131;
      v19 = (int)v14[2];
      v20 = (_DWORD)v19 ? (char *)(*a2 + v19 + 8) : 0;
      MangledName = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v20, 0, a3);
      if (!MangledName)
        goto LABEL_131;
      v22 = (swift::Demangle::__runtime::Node *)MangledName;
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 71);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3, v23, v24);
      swift::Demangle::__runtime::Node::addChild(Node, v22, a3, v25, v26);
      v27 = *v14;
      if ((v27 & 0x80) == 0)
        goto LABEL_132;
      v28 = *((unsigned __int16 *)v14 + 7);
      if (!*((_WORD *)v14 + 7))
        goto LABEL_132;
      v29 = ((unint64_t)&v14[2 * ((v27 >> 7) & 1) + 3] + *((unsigned __int16 *)v14 + 6) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v108 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 43);
      v30 = 0;
      v31 = (int *)(v29 + 8);
      v32 = 12 * v28;
      v33 = v31;
      while (2)
      {
        if ((v30 & 1) != 0)
          goto LABEL_132;
        v54 = *(v31 - 1);
        v55 = (_DWORD)v54 ? (char *)v33 + *a2 + v54 - a2[1] - 4 : 0;
        v56 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v55, 0, a3);
        if (!v56)
          goto LABEL_132;
        v57 = (swift::Demangle::__runtime::Node *)v56;
        v58 = *(v31 - 2) & 0x1F;
        if ((v58 - 1) >= 2)
        {
          if (v58 == 31)
          {
            v74 = (char *)v33 + *a2 - a2[1];
            LODWORD(v110) = 0;
            v75 = (*(uint64_t (**)(_QWORD, char *, void **, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v74, &v110, 4);
            if ((_DWORD)v110)
              v76 = 0;
            else
              v76 = v75;
            if (v76 == 1)
            {
              v77 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 41);
              swift::Demangle::__runtime::Node::addChild(v77, v57, a3, v78, v79);
              v80 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, "C");
              swift::Demangle::__runtime::Node::addChild(v77, v80, a3, v81, v82);
              swift::Demangle::__runtime::Node::addChild(v108, (swift::Demangle::__runtime::Node *)v77, a3, v83, v84);
            }
            v30 = v76 ^ 1;
          }
          else
          {
            if (!v58)
            {
              v59 = a2[1];
              v114[0] = *a2;
              v114[1] = v59;
              v110 = (void *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectProtocol<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>(a1, v114, (uint64_t)v31);
              v60 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(a1, (uint64_t *)&v110, a3, a3);
              if (v60)
              {
                v61 = (swift::Demangle::__runtime::Node *)v60;
                v62 = a3;
                v63 = 36;
LABEL_108:
                v67 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v62, v63);
                swift::Demangle::__runtime::Node::addChild(v67, v57, a3, v68, v69);
                swift::Demangle::__runtime::Node::addChild(v67, v61, a3, v70, v71);
                swift::Demangle::__runtime::Node::addChild(v108, (swift::Demangle::__runtime::Node *)v67, a3, v72, v73);
                v30 = 0;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
            v30 = 0;
          }
LABEL_89:
          v33 += 3;
          v31 += 3;
          v32 -= 12;
          if (!v32)
          {
            if ((v30 & 1) != 0)
              goto LABEL_132;
            v40 = Node;
            v41 = (swift::Demangle::__runtime::Node *)v108;
            goto LABEL_163;
          }
          continue;
        }
        break;
      }
      v64 = *v31;
      if ((_DWORD)v64)
        v65 = (char *)v33 + *a2 + v64 - a2[1];
      else
        v65 = 0;
      v66 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v65, 0, a3);
      if (v66)
      {
        v61 = (swift::Demangle::__runtime::Node *)v66;
        if ((*(v31 - 2) & 0x1F) == 1)
          v63 = 39;
        else
          v63 = 36;
        v62 = a3;
        goto LABEL_108;
      }
LABEL_88:
      v30 = 1;
      goto LABEL_89;
    case 2u:
      snprintf((char *)&v110, 0x12uLL, "$%llx", *a2);
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 1);
      v113[0] = 0;
      v113[1] = 0;
      v34 = strlen((const char *)&v110);
      swift::Demangle::__runtime::CharVector::append(v113, &v110, v34, a3);
      v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, (uint64_t *)v113);
      swift::Demangle::__runtime::Node::addChild(Node, v35, a3, v36, v37);
      if (!v10)
        goto LABEL_132;
      v40 = Node;
      v41 = (swift::Demangle::__runtime::Node *)v10;
      goto LABEL_163;
    case 3u:
      if (!swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115))
        goto LABEL_131;
      v42 = 0;
      v43 = 180;
      goto LABEL_70;
    case 4u:
      Node = 0;
      if (!v130 || !v128[0] || !v129.__r_.__value_.__l.__size_)
        goto LABEL_132;
      v44 = *(unsigned __int16 *)(v10 + 16);
      if (v44 == 153)
      {
        v40 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
        Node = v40;
        v41 = (swift::Demangle::__runtime::Node *)v10;
        goto LABEL_163;
      }
      if (v44 != 1)
        goto LABEL_131;
      v109 = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
      v45 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(a1, &v109, a3);
      if (!v45)
        goto LABEL_131;
      v46 = (swift::Demangle::__runtime::Node *)v45;
      if (*(_WORD *)(v45 + 16) != 99)
        goto LABEL_169;
      v47 = *(unsigned __int8 *)(v45 + 18);
      if ((v47 - 1) < 2)
        goto LABEL_63;
      if (v47 == 5 && *(_DWORD *)(v45 + 8))
      {
        v46 = *(swift::Demangle::__runtime::Node **)v45;
LABEL_63:
        v46 = *(swift::Demangle::__runtime::Node **)v46;
      }
      else
      {
        v46 = 0;
      }
LABEL_169:
      v40 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
      Node = v40;
      v41 = v46;
      goto LABEL_163;
    case 0x10u:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115) & 1) == 0)
        goto LABEL_131;
      v42 = 0;
      v43 = 24;
      goto LABEL_70;
    case 0x11u:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115) & 1) == 0)
        goto LABEL_131;
      v42 = 0;
      v43 = 219;
      goto LABEL_70;
    case 0x12u:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115) & 1) == 0)
        goto LABEL_131;
      v42 = 1;
      v43 = 61;
LABEL_70:
      if (!v10)
        goto LABEL_131;
      if (!v123)
        goto LABEL_126;
      v48 = (unsigned __int16 **)v10;
      while (2)
      {
        if (*((_WORD *)v48 + 8) != 153)
        {
          v49 = *((unsigned __int8 *)v48 + 18);
          if ((v49 - 1) >= 2)
          {
            if (v49 != 5 || !*((_DWORD *)v48 + 2))
              goto LABEL_126;
            v48 = (unsigned __int16 **)*v48;
          }
          v48 = (unsigned __int16 **)*v48;
          if (!v48)
            goto LABEL_126;
          continue;
        }
        break;
      }
      if (v48[1] == (unsigned __int16 *)((char *)&dword_0 + 3))
      {
        v50 = *v48;
        v51 = *v50;
        v52 = *((unsigned __int8 *)v50 + 2);
        if (v51 == 24415 && v52 == 67)
        {
          if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p.__r_.__value_.__r.__words[2], "t"))
          {
            v43 = 234;
          }
          else
          {
            v85 = v119;
            if ((v119 & 0x80u) != 0)
              v85 = v118;
            if (!v85)
            {
              v86 = v122;
              if ((v122 & 0x80u) != 0)
                v86 = v121;
              if ((v42 & (v86 == 0)) != 0)
                v43 = 219;
            }
          }
        }
      }
LABEL_126:
      if (*(_WORD *)(v10 + 16) != 1 || *((_WORD *)v125 + 8) != 101)
        goto LABEL_153;
      v87 = *(unsigned __int8 *)(v10 + 18);
      if (v87 == 2 || v87 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
      {
        v88 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 176);
        v91 = v88;
        v92 = *(unsigned __int8 *)(v10 + 18);
        v93 = (swift::Demangle::__runtime::Node **)v10;
        if ((v92 - 1) >= 2)
        {
          if (v92 != 5 || !*(_DWORD *)(v10 + 8))
          {
            v94 = 0;
            goto LABEL_147;
          }
          v93 = *(swift::Demangle::__runtime::Node ***)v10;
        }
        v94 = *v93;
LABEL_147:
        swift::Demangle::__runtime::Node::addChild(v88, v94, a3, v89, v90);
        swift::Demangle::__runtime::Node::addChild(v91, v125, a3, v95, v96);
        v125 = (swift::Demangle::__runtime::Node *)v91;
        v97 = *(unsigned __int8 *)(v10 + 18);
        if (v97 == 2)
        {
LABEL_151:
          v10 = *(_QWORD *)(v10 + 8);
          goto LABEL_153;
        }
        if (v97 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
        {
          v10 = *(_QWORD *)v10;
          goto LABEL_151;
        }
        v10 = 0;
LABEL_153:
        if (v123)
        {
          v98 = (v122 & 0x80u) == 0 ? v122 : v121;
          if (v98)
          {
            if ((v122 & 0x80u) == 0)
              v99 = &v120;
            else
              v99 = v120;
            v100 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, v99, v98);
            v101 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 205);
            swift::Demangle::__runtime::Node::addChild(v101, v100, a3, v102, v103);
            swift::Demangle::__runtime::Node::addChild(v101, v125, a3, v104, v105);
            v125 = (swift::Demangle::__runtime::Node *)v101;
          }
        }
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, v43);
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3, v106, v107);
        v41 = v125;
        v40 = Node;
LABEL_163:
        swift::Demangle::__runtime::Node::addChild(v40, v41, a3, v38, v39);
        if (!v123)
          goto LABEL_164;
        goto LABEL_133;
      }
LABEL_131:
      Node = 0;
LABEL_132:
      if (!v123)
        goto LABEL_164;
LABEL_133:
      if (((char)v122 & 0x80000000) == 0)
      {
        if (((char)v119 & 0x80000000) == 0)
          goto LABEL_135;
        goto LABEL_138;
      }
      operator delete(v120);
      if ((char)v119 < 0)
      {
LABEL_138:
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__s.__data_[15] < 0)
          goto LABEL_139;
LABEL_164:
        if (!v130)
          return Node;
        goto LABEL_165;
      }
LABEL_135:
      if ((__p.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
        goto LABEL_164;
LABEL_139:
      operator delete(v116);
      if (!v130)
        return Node;
LABEL_165:
      if (!v128[0] && SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      return Node;
    default:
      goto LABEL_132;
  }
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  _QWORD v18[2];
  void *__p[2];
  unsigned __int8 v20;
  uint64_t v21;
  char v22;

  v5 = a2[1];
  v18[0] = *a2;
  v18[1] = v5;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectableField<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,swift::RelativeIndirectablePointer<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,true,int,swift::RuntimeTarget<8u>::StoredSignedPointer>>(a1, v18, (int *)(v5 + 4), (uint64_t)__p);
  if (!v22)
    goto LABEL_7;
  if ((v20 & 0x80u) == 0)
    v6 = v20;
  else
    v6 = (size_t)__p[1];
  if (v6)
  {
    if (v21)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      goto LABEL_8;
    }
    if ((v20 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    LOBYTE(v15) = 0;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v6 >= 0x17)
    {
      v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v11 = v6 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&v16 + 1) = v6;
      v17 = v12 | 0x8000000000000000;
      *(_QWORD *)&v16 = v10;
    }
    else
    {
      HIBYTE(v17) = v6;
      v10 = &v16;
    }
    memmove(v10, v9, v6);
    *((_BYTE *)v10 + v6) = 0;
    v13 = v15;
    *(_BYTE *)a3 = v15;
    if (v13)
    {
      v14 = *((_QWORD *)&v16 + 1);
      *(_QWORD *)(a3 + 8) = v16;
      *(_QWORD *)(a3 + 16) = v14;
    }
    else
    {
      *(_OWORD *)(a3 + 8) = v16;
      *(_QWORD *)(a3 + 24) = v17;
    }
    *(_BYTE *)(a3 + 32) = 1;
  }
  else if (v21)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v21, &v15);
    v7 = v16;
    if (!(_QWORD)v16)
      goto LABEL_7;
    v8 = v15;
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v7;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 32) = 1;
  }
LABEL_8:
  if (v22)
  {
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
}

uint64_t *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  uint64_t *v5;
  _DWORD *v6;
  BOOL v7;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  void **v25;
  size_t v26;
  _BOOL4 v27;
  int v29;
  unint64_t v30;
  _QWORD v31[2];
  unsigned __int8 v32[8];
  void *__p;
  char v34;
  char v35;
  _QWORD v36[2];
  void *v37[2];
  unsigned __int8 v38;
  char v39;
  _BYTE v40[80];
  _QWORD v41[3];

  v5 = 0;
  *a5 = 0;
  v6 = *(_DWORD **)(a3 + 16);
  if (*(_BYTE *)(a3 + 32))
    v7 = *(_BYTE *)a3 == 0;
  else
    v7 = 1;
  if (!v7 && v6 != 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((**(_DWORD **)(a2 + 8) & 0x10) == 0 && (**(_DWORD **)(a2 + 8) & 0x1F) != 3)
      return 0;
    if ((*v6 & 0x1F) != 2)
      return 0;
    v41[0] = *(_QWORD *)(a3 + 8);
    v41[1] = v6;
    v14 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(a1, v41, a4);
    if (!v14)
      return 0;
    v15 = v14;
    if (*(_WORD *)(v14 + 16) == 99)
    {
      v16 = *(unsigned __int8 *)(v14 + 18);
      if ((v16 - 1) < 2)
      {
LABEL_17:
        v15 = *(_QWORD *)v15;
        goto LABEL_19;
      }
      if (v16 == 5 && *(_DWORD *)(v14 + 8))
      {
        v15 = *(_QWORD *)v14;
        goto LABEL_17;
      }
      v15 = 0;
    }
LABEL_19:
    v17 = *(unsigned __int8 *)(v15 + 18);
    v18 = v15;
    if (v17 != 2)
    {
      if (v17 != 5 || *(_DWORD *)(v15 + 8) < 2u)
        return 0;
      v18 = *(_QWORD *)v15;
    }
    v5 = *(uint64_t **)(v18 + 8);
    v19 = *((unsigned __int16 *)v5 + 8);
    if (v19 == 176 || v19 == 137)
    {
      v20 = *((unsigned __int8 *)v5 + 18);
      v21 = v5;
      if (v20 == 2)
      {
LABEL_29:
        v22 = v21[1];
        if (*(_WORD *)(v22 + 16) == 101 && *(_BYTE *)(v22 + 18) == 3)
        {
          v40[0] = 0;
          v40[72] = 0;
          v23 = *(_QWORD *)(a2 + 8);
          v36[0] = *(_QWORD *)a2;
          v36[1] = v23;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(a1, v36, (uint64_t)v40, (uint64_t)v37);
          if (!v39)
          {
            v5 = 0;
LABEL_59:
            std::optional<swift::TypeImportInfo<std::string>>::~optional((uint64_t)v40);
            return v5;
          }
          v24 = v38;
          if ((v38 & 0x80u) == 0)
            v25 = v37;
          else
            v25 = (void **)v37[0];
          if ((v38 & 0x80u) == 0)
            v26 = v38;
          else
            v26 = (size_t)v37[1];
          if (v26 != *(_QWORD *)(v22 + 8) || v26 && memcmp(v25, *(const void **)v22, v26))
          {
            v5 = 0;
            v27 = 1;
LABEL_56:
            if (v27 && (v24 & 0x80) != 0)
              operator delete(v37[0]);
            goto LABEL_59;
          }
          v31[0] = v13;
          v31[1] = v6;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v31, (uint64_t)v32);
          std::__optional_storage_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>>(a3, v32);
          if (v35 && !v32[0] && v34 < 0)
            operator delete(__p);
          v29 = *(unsigned __int8 *)(v15 + 18);
          if ((v29 - 1) >= 2)
          {
            if (v29 != 5 || !*(_DWORD *)(v15 + 8))
            {
              v30 = 0;
              goto LABEL_55;
            }
            v15 = *(_QWORD *)v15;
          }
          v30 = *(_QWORD *)v15;
LABEL_55:
          *a5 = v30;
          v24 = v38;
          v27 = v39 != 0;
          goto LABEL_56;
        }
        return 0;
      }
      if (v20 == 5 && *((_DWORD *)v5 + 2) >= 2u)
      {
        v21 = (uint64_t *)*v5;
        goto LABEL_29;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  unint64_t v12;
  int v13;
  _QWORD v14[4];

  if (a4 < 1)
    return 0;
  v14[2] = v4;
  v14[3] = v5;
  if (*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v14[0] = *(_QWORD *)(a2 + 8);
    v14[1] = v7;
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v14, a3);
  }
  else
  {
    v11 = *(_WORD **)(a2 + 8);
    v9 = a2 + 8;
    v10 = v11;
    if (*(char *)(v9 + 23) < 0)
    {
      v12 = *(_QWORD *)(v9 + 8);
    }
    else
    {
      v10 = (_WORD *)v9;
      v12 = *(unsigned __int8 *)(v9 + 23);
    }
    result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v10, v12, a3);
    if (result && *(_WORD *)(result + 16) == 232)
    {
      v13 = *(unsigned __int8 *)(result + 18);
      if ((v13 - 1) >= 2)
      {
        if (v13 != 5 || !*(_DWORD *)(result + 8))
          return 0;
        result = *(_QWORD *)result;
      }
      return *(_QWORD *)result;
    }
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()(uint64_t a1)
{
  _BOOL8 v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  size_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD v18[2];
  void *__p[2];
  unsigned __int8 v20;
  char v21;

  if (**(_QWORD **)a1)
    return 1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v8 = *v6;
  v7 = v6[1];
  v18[0] = v8;
  v18[1] = v7;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(v4, v18, v5, (uint64_t)__p);
  v1 = v21 != 0;
  if (v21)
  {
    v9 = *(_QWORD **)(a1 + 32);
    if ((v20 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v11 = v20;
    else
      v11 = (size_t)__p[1];
    if (v11)
    {
      v12 = (char *)v9[1];
      v13 = &v12[v11];
      if (v12)
        v14 = (unint64_t)v13 > v9[2];
      else
        v14 = 1;
      if (v14)
      {
        v15 = 2 * v9[4];
        if (v15 <= v11 + 1)
          v15 = v11 + 1;
        v9[4] = v15;
        v16 = v15 + 8;
        v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        *v17 = v9[3];
        v12 = (char *)(v17 + 1);
        v9[2] = (char *)v17 + v16;
        v9[3] = v17;
        v13 = (char *)v17 + v11 + 8;
      }
      v9[1] = v13;
      memmove(v12, v10, v11);
    }
    else
    {
      v12 = 0;
    }
    **(_QWORD **)a1 = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v9, 101, (uint64_t)v12, v11);
    if (v21 && (char)v20 < 0)
      operator delete(__p[0]);
  }
  return v1;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectProtocol<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unsigned int v10;

  v4 = a3 - a2[1] + *a2;
  v10 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v4, &v10, 4))
  {
    v5 = v10;
    v6 = (int)v10 & 0xFFFFFFFFFFFFFFFCLL;
    v10 &= 0xFFFFFFFC;
    v7 = v4 + v6;
    v9 = v4 + v6;
    if ((v5 & 1) == 0)
      return v7 | ((unint64_t)v5 >> 1) & 1;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488)))
    {
      v7 = v9;
      return v7 | ((unint64_t)v5 >> 1) & 1;
    }
  }
  return 0;
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(uint64_t a1, uint64_t *a2, swift::Demangle::__runtime::NodeFactory *a3, swift::Demangle::__runtime::NodeFactory *a4)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *Node;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  void *v15;
  void **v16;
  void **v17;
  unint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  _QWORD v25[3];
  _QWORD *v26;
  void *v27[2];
  unint64_t v28;
  swift::Demangle::__runtime::NodeFactory *v29;
  void *__p[2];
  unint64_t v31;

  v29 = a4;
  v6 = *a2;
  if ((*a2 & 1) == 0)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v6 & *(_QWORD *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v27);
    v7 = v27[1];
    if (!v27[1])
      return 0;
    __p[0] = v27[0];
    __p[1] = v27[1];
    v8 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, __p, a3);
    if (v8 && ((*v7 & 0x10) != 0 || (*v7 & 0x1F) == 3))
    {
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v8, a3, v10, v11);
      return Node;
    }
    return (unsigned int *)v8;
  }
  v12 = malloc_type_malloc(0x10uLL, 0xAD4E4A50uLL);
  if (v12)
  {
    v13 = v12;
    if (((*(uint64_t (**)(_QWORD, unint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v6 & 0xFFFFFFFFFFFFFFFELL, v12, 16) & 1) != 0)
    {
      __p[1] = 0;
      v31 = 0;
      __p[0] = 0;
      if ((*(unsigned int (**)(_QWORD, _QWORD, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v13[1], __p))
      {
        v28 = v31;
        *(_OWORD *)v27 = *(_OWORD *)__p;
        v14 = HIBYTE(v31);
        v15 = __p[1];
        v16 = (void **)__p[0];
      }
      else
      {
        v27[0] = 0;
        v27[1] = 0;
        v28 = 0;
        if (SHIBYTE(v31) < 0)
          operator delete(__p[0]);
        v15 = 0;
        v16 = 0;
        LODWORD(v14) = 0;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      LODWORD(v14) = 0;
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
    }
    free(v13);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    LODWORD(v14) = 0;
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
  }
  if ((v14 & 0x80u) == 0)
    v17 = v27;
  else
    v17 = v16;
  if ((v14 & 0x80u) == 0)
    v18 = v14;
  else
    v18 = (unint64_t)v15;
  if (v18 >= 4 && *(_DWORD *)v17 == 1349801055)
  {
    v26 = 0;
    v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)a3, v17, v18, v25);
    v20 = v26;
    if (v26 == v25)
    {
      v21 = 4;
      v20 = v25;
    }
    else
    {
      if (!v26)
        goto LABEL_35;
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_35:
    if (v8)
    {
      while (1)
      {
        v22 = *(unsigned __int16 *)(v8 + 16);
        v23 = (v22 - 190) > 0x2E || ((1 << (v22 + 66)) & 0x640000000001) == 0;
        if (v23 && v22 != 99)
          break;
        v24 = *(unsigned __int8 *)(v8 + 18);
        if (v24 != 1)
        {
          if (v24 != 5 || *(_DWORD *)(v8 + 8) != 1)
          {
            v8 = 0;
            goto LABEL_27;
          }
          v8 = *(_QWORD *)v8;
        }
        v8 = *(_QWORD *)v8;
      }
    }
    goto LABEL_27;
  }
  v8 = (uint64_t)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver::objcProtocol(&v29, v17, v18);
LABEL_27:
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  return (unsigned int *)v8;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(_QWORD *a1, __int16 a2, void *__src, size_t __len)
{
  void *v8;
  size_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;

  if (__len)
  {
    v8 = (void *)a1[1];
    v9 = (size_t)v8 + __len;
    if (v8)
      v10 = v9 > a1[2];
    else
      v10 = 1;
    if (v10)
    {
      v11 = 2 * a1[4];
      if (v11 <= __len + 1)
        v11 = __len + 1;
      a1[4] = v11;
      v12 = v11 + 8;
      v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      v14 = (char *)v13 + v12;
      *v13 = a1[3];
      v8 = v13 + 1;
      a1[2] = v14;
      a1[3] = v13;
      v9 = (size_t)v13 + __len + 8;
    }
    a1[1] = v9;
    memmove(v8, __src, __len);
  }
  else
  {
    v8 = 0;
  }
  return swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(a1, a2, (uint64_t)v8, __len);
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int16 *v3;
  unint64_t v4;
  unsigned __int16 *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  unsigned __int16 *v11;
  uint8x8_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v3 = (unsigned __int16 *)a2[1];
  v4 = *(unsigned int *)v3;
  if ((v4 & 0x10000) == 0)
    return 0;
  v6 = v3 + 4;
  if ((v4 & 0x80) != 0)
  {
    v9 = (unsigned __int16 *)((((unint64_t)&v6[4 * ((v4 >> 7) & 1) + 1] + v3[4] + 1) & 0xFFFFFFFFFFFFFFFCLL)
                            + 12 * v3[5]);
    v10 = v3[7];
    v11 = &v9[2 * (v10 & 1)];
    if ((v10 & 1) != 0)
      v11 += 4 * *v9;
    v8 = (unint64_t)v11 + (v10 & 2);
    if ((v10 & 2) != 0
      && (v12 = (uint8x8_t)vcnt_s8((int8x8_t)*v11), v12.i16[0] = vaddlv_u8(v12), v8 += 2 * v12.u32[0], *v11))
    {
      v7 = *(unsigned __int16 *)((char *)&v11[v12.u32[0] - 1] + (v10 & 2));
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = ((unint64_t)&v6[4 * ((v4 >> 7) & 1) + 1] + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }
  v13 = (int *)(((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7);
  v14 = *v13;
  v15 = (char *)v13 + *a2 - (_QWORD)v3 + v14;
  if ((_DWORD)v14)
    v16 = v15;
  else
    v16 = 0;
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v16, 1, a3);
}

uint64_t std::optional<swift::TypeImportInfo<std::string>>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
    {
      operator delete(*(void **)(a1 + 48));
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 23) & 0x80000000) == 0)
          return a1;
LABEL_8:
        operator delete(*(void **)a1);
        return a1;
      }
    }
    else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_8;
  }
  return a1;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectableField<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,swift::RelativeIndirectablePointer<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,true,int,swift::RuntimeTarget<8u>::StoredSignedPointer>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  std::string v9;
  std::string __s;
  uint64_t v11;
  char v12;

  v5 = *a3;
  if (!(_DWORD)v5)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    goto LABEL_5;
  }
  v6 = (uint64_t)a3 + (v5 & 0xFFFFFFFFFFFFFFFELL) - a2[1] + *a2;
  if ((v5 & 1) == 0)
  {
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    *(_QWORD *)(a4 + 24) = v6;
LABEL_5:
    *(_BYTE *)(a4 + 32) = 1;
    return;
  }
  swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v6, 8u, (uint64_t)&__s);
  if (!v12)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
    return;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_)
    {
      std::string::__init_copy_ctor_external(&v9, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      goto LABEL_14;
    }
  }
  else if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
  {
    v9 = __s;
LABEL_14:
    v8 = v11;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1 + 2504) & v11;
  *((_BYTE *)&v9.__r_.__value_.__s + 23) = 0;
  v9.__r_.__value_.__s.__data_[0] = 0;
LABEL_16:
  *(std::string *)a4 = v9;
  *(_QWORD *)(a4 + 24) = v8;
  *(_BYTE *)(a4 + 32) = 1;
  if (v12)
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;

  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  v6 = a2[1];
  if ((*(_DWORD *)v6 & 0x1F) == 0 || (*(_DWORD *)v6 & 0x1F) == 3)
  {
    v7 = *(int *)(v6 + 8);
    if ((_DWORD)v7)
      v8 = *a2 + v7 + 8;
    else
      v8 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v8, __p))
    {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  if ((*(_DWORD *)v6 & 0x10) == 0
    || ((v11 = *(int *)(v6 + 8), (_DWORD)v11) ? (v12 = *a2 + v11 + 8) : (v12 = 0),
        ((*(uint64_t (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v12, __p) & 1) == 0))
  {
LABEL_21:
    v9 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_22;
  }
  if ((*(_BYTE *)(v6 + 2) & 4) == 0)
    goto LABEL_7;
  if (!*(_BYTE *)(a3 + 72))
    goto LABEL_18;
  if ((*(char *)(a3 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a3 + 47) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_49:
    operator delete(*(void **)(a3 + 24));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_50:
    operator delete(*(void **)a3);
    goto LABEL_18;
  }
  operator delete(*(void **)(a3 + 48));
  if (*(char *)(a3 + 47) < 0)
    goto LABEL_49;
LABEL_17:
  if (*(char *)(a3 + 23) < 0)
    goto LABEL_50;
LABEL_18:
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_BYTE *)(a3 + 72) = 1;
  v13 = (void *)HIBYTE(v23);
  if (v23 < 0)
    v13 = __p[1];
  v14 = (uint64_t)v13 + v12 + 1;
  do
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    if (((*(uint64_t (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v14, &v19) & 1) != 0)
    {
      if (SHIBYTE(v21) < 0)
      {
        v16 = v20;
        if (!v20)
        {
          v15 = 3;
LABEL_27:
          operator delete(v19);
          continue;
        }
      }
      else
      {
        if (!HIBYTE(v21))
          goto LABEL_42;
        v16 = HIBYTE(v21);
      }
      v14 += v16 + 1;
      if (v21 >= 0)
        v17 = (char *)&v19;
      else
        v17 = (char *)v19;
      swift::TypeImportInfo<std::string>::collect<false>(a3, v17, v16);
      v15 = 0;
      if (SHIBYTE(v21) < 0)
        goto LABEL_27;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      v15 = 1;
      if (SHIBYTE(v21) < 0)
        goto LABEL_27;
    }
  }
  while (!v15);
  if (v15 != 3)
    goto LABEL_23;
LABEL_42:
  v18 = *(unsigned __int8 *)(a3 + 23);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a3 + 8);
  if (v18)
  {
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)a3;
    v23 = *(_QWORD *)(a3 + 16);
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
LABEL_7:
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 16) = v23;
  __p[1] = 0;
  v23 = 0;
  __p[0] = 0;
  v9 = 1;
LABEL_22:
  *(_BYTE *)(a4 + 24) = v9;
LABEL_23:
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
}

uint64_t swift::TypeImportInfo<std::string>::collect<false>(uint64_t a1, char *__src, unint64_t a3)
{
  uint64_t v3;
  int v4;
  char *v5;
  size_t v6;
  char v7;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 __dst;
  unint64_t v17;

  if (!a3)
    return 0;
  v3 = a1;
  v5 = __src + 1;
  v4 = *__src;
  v6 = a3 - 1;
  if (v4 == 83)
  {
    if (a3 == 1)
      return 0;
    v7 = *(_BYTE *)(a1 + 47);
    if (v7 < 0)
    {
      if (*(_QWORD *)(a1 + 32))
        return 0;
    }
    else if (*(_BYTE *)(a1 + 47))
    {
      return 0;
    }
    if (v6 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x18)
      {
        v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v14 = v6 | 7;
        v15 = v14 + 1;
        p_dst = (__int128 *)operator new(v14 + 1);
        *((_QWORD *)&__dst + 1) = v6;
        v17 = v15 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v17) = a3 - 1;
        p_dst = &__dst;
      }
      v3 += 24;
      goto LABEL_41;
    }
LABEL_44:
    abort();
  }
  if (v4 == 82)
  {
    if (a3 == 1)
      return 0;
    v7 = *(_BYTE *)(a1 + 71);
    if (v7 < 0)
    {
      if (*(_QWORD *)(a1 + 56))
        return 0;
    }
    else if (*(_BYTE *)(a1 + 71))
    {
      return 0;
    }
    if (v6 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x18)
      {
        v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v10 = v6 | 7;
        v11 = v10 + 1;
        p_dst = (__int128 *)operator new(v10 + 1);
        *((_QWORD *)&__dst + 1) = v6;
        v17 = v11 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v17) = a3 - 1;
        p_dst = &__dst;
      }
      v3 += 48;
      goto LABEL_41;
    }
    goto LABEL_44;
  }
  if (v4 != 78 || a3 == 1)
    return 0;
  v7 = *(_BYTE *)(a1 + 23);
  if (v7 < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
      goto LABEL_18;
    return 0;
  }
  if (*(_BYTE *)(a1 + 23))
    return 0;
LABEL_18:
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_44;
  if (a3 >= 0x18)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v17 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v17) = a3 - 1;
    p_dst = &__dst;
  }
LABEL_41:
  memmove(p_dst, v5, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (v7 < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = __dst;
  *(_QWORD *)(v3 + 16) = v17;
  return 1;
}

void std::__optional_storage_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>>(uint64_t a1, unsigned __int8 *a2)
{
  void **v4;
  __int128 *v5;
  int v6;
  __int128 v7;
  __int128 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  if (*(unsigned __int8 *)(a1 + 32) == a2[32])
  {
    if (!*(_BYTE *)(a1 + 32))
      return;
    v4 = (void **)(a1 + 8);
    v5 = (__int128 *)(a2 + 8);
    v6 = *a2;
    if ((*(_BYTE *)a1 != 0) != (*a2 != 0))
    {
      if (!*(_BYTE *)a1 && *(char *)(a1 + 31) < 0)
        operator delete(*v4);
      if (!v6)
      {
        v7 = *v5;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_OWORD *)v4 = v7;
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = 0;
        *(_QWORD *)v5 = 0;
LABEL_23:
        *(_BYTE *)a1 = *a2;
        return;
      }
    }
    else if (!*(_BYTE *)a1)
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v4);
      v13 = *v5;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_OWORD *)v4 = v13;
      a2[31] = 0;
      a2[8] = 0;
      goto LABEL_23;
    }
    v11 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = v11;
    goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    if (!*(_BYTE *)a1 && *(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    v8 = (__int128 *)(a2 + 8);
    v9 = *a2;
    *(_BYTE *)a1 = v9;
    if (v9)
    {
      v10 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = v10;
    }
    else
    {
      v12 = *v8;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_OWORD *)(a1 + 8) = v12;
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *(_QWORD *)v8 = 0;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver::objcProtocol(swift::Demangle::__runtime::NodeFactory **a1, const void *a2, size_t a3)
{
  swift::Demangle::__runtime::NodeFactory *v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  unsigned int *Node;
  uint64_t v15;
  const char *v16;
  swift::Demangle::__runtime::NodeFactory *v17;
  char *v18;
  char *v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  swift::Demangle::__runtime::Node *v25;
  uint64_t v26;
  const char *v27;

  v6 = *a1;
  v7 = *((_QWORD *)*a1 + 1);
  v8 = (char *)(v7 + 3);
  if (v7)
    v9 = (unint64_t)v8 > *((_QWORD *)*a1 + 2);
  else
    v9 = 1;
  if (v9)
  {
    v10 = 2 * *((_QWORD *)v6 + 4);
    if (v10 <= 4)
      v10 = 4;
    *((_QWORD *)v6 + 4) = v10;
    v11 = v10 + 8;
    v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    v7 = (uint64_t)(v12 + 1);
    *v12 = *((_QWORD *)v6 + 3);
    v8 = (char *)v12 + 11;
    *((_QWORD *)v6 + 2) = (char *)v12 + v11;
    *((_QWORD *)v6 + 3) = v12;
  }
  *((_QWORD *)v6 + 1) = v8;
  *(_BYTE *)(v7 + 2) = 67;
  *(_WORD *)v7 = 24415;
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 3);
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 180);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *a1, v15, v16);
  v17 = *a1;
  if (a3)
  {
    v18 = (char *)*((_QWORD *)v17 + 1);
    v19 = &v18[a3];
    if (v18)
      v20 = (unint64_t)v19 > *((_QWORD *)v17 + 2);
    else
      v20 = 1;
    if (v20)
    {
      v21 = 2 * *((_QWORD *)v17 + 4);
      if (v21 <= a3 + 1)
        v21 = a3 + 1;
      *((_QWORD *)v17 + 4) = v21;
      v22 = v21 + 8;
      v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      v24 = (char *)v23 + v22;
      *v23 = *((_QWORD *)v17 + 3);
      v18 = (char *)(v23 + 1);
      *((_QWORD *)v17 + 2) = v24;
      *((_QWORD *)v17 + 3) = v23;
      v19 = (char *)v23 + a3 + 8;
    }
    *((_QWORD *)v17 + 1) = v19;
    memmove(v18, a2, a3);
  }
  else
  {
    v18 = 0;
  }
  v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v17, 101, (uint64_t)v18, a3);
  swift::Demangle::__runtime::Node::addChild(Node, v25, *a1, v26, v27);
  return Node;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B44A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B44A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  _QWORD v4[2];
  __int16 v5;

  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor(*(_QWORD *)(a1 + 8), *a2, *a3, (uint64_t)v4);
  if (v5 == 1)
  {
    ((void (*)(_QWORD, uint64_t, _QWORD))v4[1])(v4[0], 3, 0);
  }
  else if (!v5)
  {
    return v4[0];
  }
  return 0;
}

_QWORD *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *UnderlyingTypeManglingForOpaqueTypeDescriptor;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v10[2] = 0;
  v11 = 0;
  v12 = 2400;
  v13 = 0;
  v14 = 0;
  v10[0] = off_B5288;
  v10[1] = 0;
  v49 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v47 = 0;
  UnderlyingTypeManglingForOpaqueTypeDescriptor = (_QWORD *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeManglingForOpaqueTypeDescriptor(a1, a2, a3, v10);
  if (UnderlyingTypeManglingForOpaqueTypeDescriptor)
  {
    v50 = a1 + 296;
    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v50, UnderlyingTypeManglingForOpaqueTypeDescriptor, 0, a4);
  }
  else
  {
    *(_WORD *)(a4 + 16) = 1;
    *(_QWORD *)a4 = "Failed to read type mangling for descriptor.";
    *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
  }
  v10[0] = off_B5288;
  v7 = v49;
  if (v49 == v48)
  {
    v8 = 4;
    v7 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_9:
  v10[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v11);
  if (v13)
    *(_BYTE *)(v13 + 48) = 0;
  return result;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeManglingForOpaqueTypeDescriptor(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v7;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int16 *v13;
  __int16 v14;
  unsigned __int16 *v15;
  uint8x8_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int *v21;

  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, a2, &v20);
  if (!v21)
    return 0;
  v7 = *v21;
  if ((*v21 & 0x1F) != 4 || WORD1(v7) <= a3)
    return 0;
  v10 = v21 + 2;
  if ((v7 & 0x80) != 0)
  {
    v13 = (unsigned __int16 *)((((unint64_t)&v10[2 * ((v7 >> 7) & 1)] + *((unsigned __int16 *)v21 + 4) + 3) & 0xFFFFFFFFFFFFFFFCLL)
                             + 12 * *((unsigned __int16 *)v21 + 5));
    v14 = *((_WORD *)v21 + 7);
    v15 = &v13[2 * (v14 & 1)];
    if ((v14 & 1) != 0)
      v15 += 4 * *v13;
    v12 = (unint64_t)v15 + (v14 & 2);
    if ((v14 & 2) != 0
      && (v16 = (uint8x8_t)vcnt_s8((int8x8_t)*v15), v16.i16[0] = vaddlv_u8(v16), v12 += 2 * v16.u32[0], *v15))
    {
      v11 = *(unsigned __int16 *)((char *)&v15[v16.u32[0] - 1] + (v14 & 2));
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = ((unint64_t)&v10[2 * ((v7 >> 7) & 1)] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  v17 = (int *)(((v12 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v11 + 4 * a3);
  v18 = *v17;
  if ((_DWORD)v18)
    v19 = (char *)v17 + v20 - (_QWORD)v21 + v18;
  else
    v19 = 0;
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v19, 0, a4);
}

void swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  const char *v5;
  unsigned int v6;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  size_t *v19;
  size_t v20;
  int v21;
  int v22;
  size_t *v23;
  size_t v24;
  uint64_t ProtocolCompositionType;
  int v26;
  uint64_t **v27;
  size_t v28;
  int v29;
  size_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  size_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  uint64_t *v40;
  int v41;
  uint64_t *v42;
  size_t v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t (*v51)(std::string::size_type, uint64_t, _QWORD);
  std::string::size_type v52;
  unint64_t v53;
  unsigned __int16 v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  size_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unsigned __int8 v69;
  unint64_t v70;
  __int16 v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v77;
  unsigned __int8 *v78;
  _QWORD *v79;
  int *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  int v88;
  int v89;
  int v91;
  size_t v92;
  size_t v93;
  uint64_t *v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t *v97;
  int v98;
  unsigned __int16 **v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t **v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  unsigned __int16 *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  char v120;
  _QWORD *v121;
  _QWORD *v122;
  unsigned __int8 v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t **v127;
  int v128;
  int v129;
  uint64_t *v130;
  uint64_t *v131;
  int v132;
  int v133;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  size_t *v139;
  uint64_t v140;
  uint64_t BuiltinType;
  int v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  _QWORD *v146;
  size_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  size_t v152;
  uint64_t **v153;
  int v154;
  uint64_t **v155;
  uint64_t **v156;
  size_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  _QWORD *v162;
  swift::reflection::TypeRefBuilder **v163;
  uint64_t v164;
  _QWORD *v165;
  size_t v166;
  uint64_t *v167;
  uint64_t v168;
  size_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t (*v175)();
  const char *v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  BOOL v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t ImplFunctionType;
  int v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t (*v189)(void *, uint64_t, _QWORD);
  uint64_t v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  unsigned int v193;
  _QWORD *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  std::string::value_type *v198;
  uint64_t v199;
  std::string::value_type *v200;
  uint64_t v201;
  uint64_t TupleType;
  void *v203;
  uint64_t (*v204)(void *, uint64_t, _QWORD);
  uint64_t *v205;
  uint64_t (*v206)(std::string::size_type, uint64_t, _QWORD);
  std::string::size_type v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t *v217;
  _QWORD *v219;
  uint64_t *v220;
  int v221;
  unint64_t v222;
  uint64_t v223;
  int v224;
  void *v225;
  uint64_t BoundGenericType;
  _OWORD *v227;
  uint64_t v228;
  uint64_t (*v229)();
  const char *v230;
  uint64_t v231;
  int v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  _OWORD **v239;
  void *v240;
  uint64_t ConstrainedExistentialType;
  uint64_t *v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unsigned int v250;
  uint64_t *v251;
  uint64_t *v252;
  _QWORD *v253;
  int v254;
  _QWORD *v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  BOOL v266;
  unint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  __int128 v281;
  unsigned int v282;
  unint64_t v283;
  int v284;
  BOOL v285;
  int v286;
  _BOOL4 v287;
  unsigned int v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char v292;
  unint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t (*size)(std::string::size_type, uint64_t, _QWORD);
  std::string::size_type v300;
  int v301;
  unint64_t v302;
  uint64_t v303;
  int v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  uint64_t FunctionType;
  uint64_t v311;
  uint64_t v312;
  int v314;
  int v315;
  uint64_t *v317;
  int v318;
  char v319;
  int v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  std::string::size_type v326;
  uint64_t v327;
  uint64_t v328;
  std::string::size_type v329;
  uint64_t v330;
  std::string::size_type v331;
  unint64_t v332;
  unsigned int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t **v341;
  int v342;
  uint64_t **v343;
  int v344;
  uint64_t **v345;
  int v346;
  unint64_t v347;
  unint64_t v348;
  _DWORD *v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  unint64_t v356;
  BOOL v357;
  unint64_t v358;
  unint64_t v359;
  unsigned int v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  unint64_t v369;
  int v370[2];
  uint64_t v371;
  _QWORD *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377[2];
  _BYTE v378[56];
  void *v379;
  uint64_t v380;
  _BYTE v381[16];
  void *v382;
  uint64_t v383;
  _BYTE v384[32];
  _BYTE *v385;
  uint64_t v386;
  _BYTE v387[32];
  std::string v388;
  char v389;
  char v390;
  uint64_t v391[3];
  char v392;
  _BYTE v393[15];
  char v394;
  void *v395[2];
  _WORD v396[3];
  char v397;
  std::string v398;
  unsigned __int8 v399;
  char v400;
  std::string v401;
  void *__p;
  void *v403;
  char v404;
  char v405;
  char v406;

  v4 = (uint64_t *)a4;
  if (a3 > 0x400)
  {
LABEL_2:
    *(_WORD *)(a4 + 16) = 1;
    v5 = "Mangled type is too complex";
LABEL_3:
    *(_QWORD *)a4 = v5;
    *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    return;
  }
  v6 = a3;
  while (2)
  {
    if (!a2)
    {
      *(_WORD *)(a4 + 16) = 1;
      v5 = "Node is NULL";
      goto LABEL_3;
    }
    v9 = *((unsigned __int16 *)a2 + 8);
    switch(*((_WORD *)a2 + 8))
    {
      case 3:
        v10 = *((unsigned __int8 *)a2 + 18);
        if ((v10 - 1) < 2)
          goto LABEL_49;
        if (v10 != 5 || !*((_DWORD *)a2 + 2))
          operator new();
        goto LABEL_48;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
        v18 = *((unsigned __int8 *)a2 + 18);
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            goto LABEL_88;
          case 5:
            if (*((_DWORD *)a2 + 2) <= 1u)
              goto LABEL_87;
LABEL_88:
            if ((v9 - 165) < 2)
            {
              v37 = 0x10000;
            }
            else if (v9 == 22)
            {
              v37 = 196608;
            }
            else if (v9 == 222)
            {
              v37 = 0x20000;
            }
            else
            {
              v37 = 0;
            }
            if (v18 == 5)
            {
              v109 = (_QWORD *)*a2;
              if (*((_DWORD *)a2 + 2))
                v110 = (unsigned __int16 *)(*v109 + 16);
              else
                v110 = (unsigned __int16 *)&dword_10;
              v111 = *v110 == 23;
              if (*(_WORD *)(v109[v111] + 16) == 67)
              {
LABEL_302:
                v112 = a2;
                if (v18 == 2 || v18 == 5 && (v112 = v109, *((_DWORD *)a2 + 2) > v111))
                  v113 = (uint64_t *)v112[v111];
                else
                  v113 = 0;
                v118 = *((unsigned __int8 *)v113 + 18);
                if ((v118 - 1) >= 2)
                {
                  if (v118 != 5 || !*((_DWORD *)v113 + 2))
                    operator new();
                  v113 = (uint64_t *)*v113;
                }
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, a1, *v113, v6 + 1, 1);
                v119 = *((unsigned __int16 *)v4 + 8);
                if (v4 && v119 == 1)
                  return;
                if (*((_WORD *)v4 + 8))
                {
                  if ((_DWORD)v111)
                    LODWORD(v111) = 2;
                  else
                    LODWORD(v111) = 1;
                  if (v119 == 1)
                    ((void (*)(uint64_t, uint64_t, _QWORD))v4[1])(*v4, 3, 0);
                  v115 = 0;
                  v114 = 0;
                }
                else
                {
                  v115 = 0;
                  v114 = *v4;
                  if ((_DWORD)v111)
                    LODWORD(v111) = 2;
                  else
                    LODWORD(v111) = 1;
                }
LABEL_308:
                v116 = *((unsigned __int8 *)a2 + 18);
                if ((_DWORD)v116 == 1)
                {
                  v117 = *(unsigned __int16 *)(a2[v111] + 16) == 130;
                }
                else
                {
                  if ((_DWORD)v116 != 2)
                  {
                    v120 = 0;
                    v121 = (_QWORD *)*a2;
                    if (*(_WORD *)(*(_QWORD *)(*a2 + 8 * v111) + 16) == 130)
                    {
                      v115 |= 0x10u;
                      v117 = (v111 + 1);
                    }
                    else
                    {
                      v117 = v111;
                    }
LABEL_332:
                    if (*(_WORD *)(v121[v117] + 16) == 68)
                    {
                      v122 = a2;
                      if ((v120 & 1) == 0)
                        v122 = (_QWORD *)*a2;
                      HIDWORD(v124) = *(unsigned __int8 *)v122[v117];
                      LODWORD(v124) = (HIDWORD(v124) << 24) - 1677721600;
                      v123 = v124 >> 25;
                      if (v123 > 7u)
                        v125 = 0;
                      else
                        v125 = qword_B0C58[(char)v123];
                      v117 = (v117 + 1);
                    }
                    else
                    {
                      v125 = 0;
                    }
                    v135 = a2;
                    if ((v120 & 1) == 0)
                      v135 = (_QWORD *)*a2;
                    if (*(_WORD *)(v135[v117] + 16) == 272)
                    {
                      v136 = 0;
                      LODWORD(v117) = v117 + 1;
                      v137 = 0x1000000;
                      goto LABEL_747;
                    }
                    v138 = a2;
                    if ((v120 & 1) == 0)
                      v138 = (_QWORD *)*a2;
                    if (*(_WORD *)(v138[v117] + 16) != 273)
                    {
                      v137 = 0;
                      v136 = 0;
                      goto LABEL_747;
                    }
                    if ((_DWORD)v116 != 1)
                    {
                      if ((_DWORD)v116 == 5)
                      {
                        v116 = *((unsigned int *)a2 + 2);
                      }
                      else
                      {
                        if ((_DWORD)v116 != 2)
                          goto LABEL_603;
                        v116 = 2;
                      }
                    }
                    if (v116 > v117)
                    {
                      v219 = a2;
                      if ((v120 & 1) == 0)
                        v219 = (_QWORD *)*a2;
                      v220 = (uint64_t *)v219[v117];
                      goto LABEL_604;
                    }
LABEL_603:
                    v220 = 0;
LABEL_604:
                    v221 = *((unsigned __int8 *)v220 + 18);
                    if ((v221 - 1) >= 2)
                    {
                      if (v221 != 5 || !*((_DWORD *)v220 + 2))
                        operator new();
                      v222 = v125;
                      v223 = v114;
                      v220 = (uint64_t *)*v220;
                    }
                    else
                    {
                      v222 = v125;
                      v223 = v114;
                    }
                    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, a1, *v220, v6 + 1, 1);
                    v224 = *((unsigned __int16 *)v4 + 8);
                    if (v4 && v224 == 1)
                      return;
                    if (*((_WORD *)v4 + 8))
                    {
                      LODWORD(v117) = v117 + 1;
                      v115 |= 1u;
                      if (v224 == 1)
                        ((void (*)(uint64_t, uint64_t, _QWORD))v4[1])(*v4, 3, 0);
                      v136 = 0;
                    }
                    else
                    {
                      v136 = *v4;
                      LODWORD(v117) = v117 + 1;
                      v115 |= 1u;
                    }
                    v137 = 0x1000000;
                    v114 = v223;
                    v125 = v222;
LABEL_747:
                    v282 = v117;
                    v283 = *((unsigned __int8 *)a2 + 18);
                    if ((_DWORD)v283 == 1)
                      goto LABEL_780;
                    v374 = v37;
                    if ((_DWORD)v283 == 2)
                    {
                      v284 = *(unsigned __int16 *)(a2[v117] + 16);
                      v285 = v284 == 66;
                      v286 = v284 == 66 ? v117 + 1 : v117;
                      v287 = v285;
                      v288 = *(_WORD *)(a2[v286] + 16) == 271 ? v286 + 1 : v286;
                      v289 = (unint64_t)v287 << 30;
                      v290 = (unint64_t)(*(_WORD *)(a2[v286] + 16) == 271) << 29;
                      v291 = (unint64_t)(v125 != 0) << 27;
                      v292 = 1;
                      v293 = 2;
                    }
                    else
                    {
                      v292 = 0;
                      v293 = *((unsigned int *)a2 + 2);
                      if (*(_WORD *)(*(_QWORD *)(*a2 + 8 * v117) + 16) == 66)
                        v282 = v117 + 1;
                      v288 = *(_WORD *)(*(_QWORD *)(*a2 + 8 * v282) + 16) == 271 ? v282 + 1 : v282;
                      v289 = (unint64_t)(*(_WORD *)(*(_QWORD *)(*a2 + 8 * v117) + 16) == 66) << 30;
                      v290 = (unint64_t)(*(_WORD *)(*(_QWORD *)(*a2 + 8 * v282) + 16) == 271) << 29;
                      v291 = (unint64_t)(v125 != 0) << 27;
                    }
                    if (v293 < v288 + 2)
LABEL_780:
                      operator new();
                    LOBYTE(v377[0]) = 0;
                    v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
                    v401.__r_.__value_.__l.__size_ = 0x800000000;
                    v369 = v125;
                    v371 = v114;
                    v367 = v136;
                    if ((_DWORD)v283 != 2)
                    {
                      if ((_DWORD)v283 != 5)
                        goto LABEL_774;
                      v283 = *((unsigned int *)a2 + 2);
                    }
                    if (v283 > v288)
                    {
                      v294 = a2;
                      if ((v292 & 1) == 0)
                        v294 = (_QWORD *)*a2;
                      v295 = v289;
                      v296 = v137;
                      v297 = v294[v288];
LABEL_775:
                      v298 = v6 + 1;
                      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(a1, v297, v298, (uint64_t)&v401, (uint64_t)v377, (uint64_t)&v398);
                      if (v398.__r_.__value_.__s.__data_[16])
                      {
                        *((_WORD *)v4 + 8) = 1;
                        size = (uint64_t (*)(std::string::size_type, uint64_t, _QWORD))v398.__r_.__value_.__l.__size_;
                        v300 = v398.__r_.__value_.__r.__words[0];
                        v4[1] = v398.__r_.__value_.__l.__size_;
                        *v4 = size(v300, 2, 0);
                        goto LABEL_804;
                      }
                      v301 = *((unsigned __int16 *)a2 + 8);
                      if (v301 == 82 || v301 == 64)
                      {
                        v302 = (v296 | v374 | v295) & 0xFFFFFFFFFBFFFFFFLL | v401.__r_.__value_.__r.__words[1] & 0xF9FFFFFF | (v291 | v290) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)LOBYTE(v377[0]) << 25) & 0xFFFFFFFFFBFFFFFFLL;
                      }
                      else
                      {
                        v302 = (v296 | v374 | v295) & 0xFFFFFFFFFBFFFFFFLL | v401.__r_.__value_.__r.__words[1] & 0xF9FFFFFF | (v291 | v290) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)LOBYTE(v377[0]) << 25) & 0xFFFFFFFFFBFFFFFFLL;
                        if (v301 != 166)
                        {
                          v303 = 0;
LABEL_783:
                          v304 = *((unsigned __int8 *)a2 + 18);
                          if (v304 == 2)
                          {
                            v305 = *((unsigned __int8 *)a2 + 18);
                          }
                          else
                          {
                            if (v304 != 5)
                              goto LABEL_791;
                            v305 = *((unsigned int *)a2 + 2);
                          }
                          v306 = v288 + 1;
                          if (v305 > v306)
                          {
                            if ((v304 - 1) >= 2)
                              a2 = (_QWORD *)*a2;
                            v307 = a2[v306];
                            goto LABEL_792;
                          }
LABEL_791:
                          v307 = 0;
LABEL_792:
                          swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v395, a1, v307, v298, 0);
                          if (v396[0] == 1)
                          {
                            *((_WORD *)v4 + 8) = 1;
                            *(_OWORD *)v4 = *(_OWORD *)v395;
                            v395[0] = 0;
                            v395[1] = swift::TypeLookupError::nop;
                          }
                          else
                          {
                            if (v115)
                              v308 = v303 | v302 | 0x80000000;
                            else
                              v308 = v303 | v302;
                            if (v396[0])
                              v309 = 0;
                            else
                              v309 = v395[0];
                            FunctionType = swift::reflection::TypeRefBuilder::createFunctionType(*a1, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (uint64_t)v309, v308, v115, v369, v371, v367);
                            *((_WORD *)v4 + 8) = 0;
                            *v4 = FunctionType;
                            if (!FunctionType)
                            {
                              *v4 = (uint64_t)"unknown error";
                              v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                              *((_WORD *)v4 + 8) = 1;
                            }
                          }
                          if (v396[0] == 1)
                            ((void (*)(void *, uint64_t, _QWORD))v395[1])(v395[0], 3, 0);
LABEL_804:
                          if (v398.__r_.__value_.__s.__data_[16])
                            ((void (*)(std::string::size_type, uint64_t, _QWORD))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
                          v225 = (void *)v401.__r_.__value_.__r.__words[0];
                          if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2])
                            goto LABEL_895;
                          return;
                        }
                      }
                      v303 = 0x4000000;
                      goto LABEL_783;
                    }
LABEL_774:
                    v295 = v289;
                    v296 = v137;
                    v297 = 0;
                    goto LABEL_775;
                  }
                  if (*(_WORD *)(a2[v111] + 16) == 130)
                  {
                    v115 |= 0x10u;
                    v117 = (v111 + 1);
                  }
                  else
                  {
                    v117 = v111;
                  }
                }
                v120 = 1;
                v121 = a2;
                goto LABEL_332;
              }
            }
            else
            {
              v109 = (_QWORD *)*a2;
              v111 = *(unsigned __int16 *)(*a2 + 16) == 23;
              if (*(_WORD *)(a2[v111] + 16) == 67)
                goto LABEL_302;
              v109 = a2;
            }
            v114 = 0;
            v115 = 2 * (*(_WORD *)(v109[v111] + 16) == 129);
            if (*(_WORD *)(v109[v111] + 16) == 129)
              LODWORD(v111) = v111 + 1;
            goto LABEL_308;
          default:
LABEL_87:
            operator new();
        }
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
      case 0x12:
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            v96 = a2;
            goto LABEL_225;
          case 5:
            if (*((_DWORD *)a2 + 2) <= 1u)
              goto LABEL_233;
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            if (*((_DWORD *)a2 + 2) < 2u)
            {
              v97 = 0;
            }
            else
            {
              v96 = (_QWORD *)*a2;
LABEL_225:
              v97 = (uint64_t *)v96[1];
            }
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeGenericArgs(a1, v97, v6 + 1, (uint64_t)&v401, (uint64_t)&v398);
            if (v398.__r_.__value_.__s.__data_[16])
              goto LABEL_558;
            v98 = *((unsigned __int8 *)a2 + 18);
            if ((v98 - 1) < 2)
              goto LABEL_231;
            if (v98 == 5 && *((_DWORD *)a2 + 2))
            {
              a2 = (_QWORD *)*a2;
LABEL_231:
              v99 = (unsigned __int16 **)*a2;
            }
            else
            {
              v99 = 0;
            }
            if (*((_WORD *)v99 + 8) != 232)
              goto LABEL_502;
            v185 = *((unsigned __int8 *)v99 + 18);
            if ((v185 - 1) < 2)
              goto LABEL_501;
            if (v185 == 5 && *((_DWORD *)v99 + 2))
            {
              v99 = (unsigned __int16 **)*v99;
LABEL_501:
              v99 = (unsigned __int16 **)*v99;
            }
LABEL_502:
            swift::Demangle::__runtime::getObjCClassOrProtocolName((unsigned __int16 ***)v99, (uint64_t)&v398);
            if (v398.__r_.__value_.__s.__data_[16])
            {
              v186 = *a1;
              __swift::__runtime::llvm::StringRef::str((const void **)&v398.__r_.__value_.__l.__data_, (uint64_t)v395);
              v187 = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(v186, (uint64_t)v395);
              *((_WORD *)v4 + 8) = 0;
              *v4 = v187;
              if (!v187)
              {
                *v4 = (uint64_t)"unknown error";
                v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)v4 + 8) = 1;
              }
              if (v397 < 0)
                operator delete(v395[0]);
            }
            else
            {
              v398.__r_.__value_.__s.__data_[0] = 0;
              v400 = 0;
              v377[0] = 0;
              LOBYTE(v385) = 0;
              swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledTypeDecl((swift::Demangle::__runtime::Node **)a1, v99, v6, (uint64_t)&v398, v377, (uint64_t)v395);
              if (LOBYTE(v396[0]))
              {
                *((_WORD *)v4 + 8) = 1;
                v188 = v395[0];
                v189 = (uint64_t (*)(void *, uint64_t, _QWORD))v395[1];
                v4[1] = (uint64_t)v395[1];
                *v4 = v189(v188, 2, 0);
                if (LOBYTE(v396[0]))
                  ((void (*)(void *, uint64_t, _QWORD))v395[1])(v395[0], 3, 0);
              }
              else
              {
                BoundGenericType = swift::reflection::TypeRefBuilder::createBoundGenericType(*a1, (uint64_t)&v398, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (uint64_t)v377[0]);
                *((_WORD *)v4 + 8) = 0;
                *v4 = BoundGenericType;
                if (!BoundGenericType)
                {
                  *v4 = (uint64_t)"unknown error";
                  v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                  *((_WORD *)v4 + 8) = 1;
                }
              }
              std::optional<swift::reflection::TypeRefDecl>::~optional((uint64_t)&v398);
            }
            break;
          default:
LABEL_233:
            operator new();
        }
        goto LABEL_894;
      case 0x10:
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            goto LABEL_37;
          case 5:
            if (*((_DWORD *)a2 + 2) <= 1u)
              goto LABEL_299;
            a2 = (_QWORD *)*a2;
LABEL_37:
            a2 = (_QWORD *)a2[1];
            v16 = *((unsigned __int8 *)a2 + 18);
            if (v16 == 1)
              goto LABEL_49;
            if (v16 != 5 || *((_DWORD *)a2 + 2) != 1)
              operator new();
            return;
          default:
LABEL_299:
            operator new();
        }
        goto LABEL_40;
      case 0x14:
        swift::Demangle::__runtime::mangleNode(a2, (uint64_t)&v401);
        if (LODWORD(v401.__r_.__value_.__l.__data_))
          operator new();
        v140 = *a1;
        *(_OWORD *)v395 = *(_OWORD *)a2;
        __swift::__runtime::llvm::StringRef::str((const void **)v395, (uint64_t)&v398);
        BuiltinType = swift::reflection::TypeRefBuilder::createBuiltinType(v140, (uint64_t)&v398, (uint64_t)&__p);
        *(_WORD *)(a4 + 16) = 0;
        *(_QWORD *)a4 = BuiltinType;
        if (BuiltinType)
        {
          if ((SHIBYTE(v398.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_375;
        }
        else
        {
          *(_QWORD *)a4 = "unknown error";
          *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *(_WORD *)(a4 + 16) = 1;
          if ((SHIBYTE(v398.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_375:
            if ((v404 & 0x80000000) == 0)
              return;
            goto LABEL_376;
          }
        }
        operator delete(v398.__r_.__value_.__l.__data_);
        if ((v404 & 0x80000000) == 0)
          return;
LABEL_376:
        v50 = __p;
        goto LABEL_265;
      case 0x18:
        swift::Demangle::__runtime::getObjCClassOrProtocolName((unsigned __int16 ***)a2, (uint64_t)&v401);
        if (!v401.__r_.__value_.__s.__data_[16])
          goto LABEL_118;
        v48 = *a1;
        __swift::__runtime::llvm::StringRef::str((const void **)&v401.__r_.__value_.__l.__data_, (uint64_t)&v398);
        v49 = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(v48, (uint64_t)&v398);
        *((_WORD *)v4 + 8) = 0;
        *v4 = v49;
        if (!v49)
        {
          *v4 = (uint64_t)"unknown error";
          v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)v4 + 8) = 1;
        }
        if ((SHIBYTE(v398.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v50 = (void *)v398.__r_.__value_.__r.__words[0];
        goto LABEL_265;
      case 0x23:
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            goto LABEL_44;
          case 5:
            if (*((_DWORD *)a2 + 2) > 1u)
              goto LABEL_43;
            goto LABEL_298;
          default:
LABEL_298:
            operator new();
        }
      case 0x26:
        v38 = *((unsigned __int8 *)a2 + 18);
        if ((v38 - 1) >= 2)
        {
          if (v38 == 5)
            v39 = *a2;
          else
            v39 = (size_t)a2;
          a2 = (_QWORD *)*a2;
        }
        else
        {
          v39 = (size_t)a2;
        }
        v101 = *(_DWORD *)*a2;
        v102 = **(_DWORD **)(v39 + 8);
        v100 = *a1;
        goto LABEL_284;
      case 0x2C:
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            goto LABEL_44;
          case 5:
            if (*((_DWORD *)a2 + 2) <= 1u)
              goto LABEL_297;
LABEL_43:
            a2 = (_QWORD *)*a2;
LABEL_44:
            ++a2;
            break;
          default:
LABEL_297:
            operator new();
        }
        goto LABEL_49;
      case 0x2D:
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            v160 = a1;
            v161 = a4;
            v162 = a2;
            goto LABEL_572;
          case 5:
            if (*((_DWORD *)a2 + 2) <= 1u)
              goto LABEL_436;
            v160 = a1;
            v161 = a4;
            v162 = (_QWORD *)*a2;
LABEL_572:
            v209 = v6 + 1;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v398, v160, *v162, v209, 1);
            if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1)
            {
              *(_WORD *)(v161 + 16) = 1;
              *(_OWORD *)v161 = *(_OWORD *)&v398.__r_.__value_.__l.__data_;
              v398.__r_.__value_.__l.__size_ = (std::string::size_type)swift::TypeLookupError::nop;
              v398.__r_.__value_.__r.__words[0] = 0;
              ((void (*)(_QWORD, uint64_t, _QWORD))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            v210 = *((unsigned __int8 *)a2 + 18);
            if (v210 == 2)
            {
              v211 = v161;
            }
            else
            {
              v211 = v161;
              if (v210 != 5 || *((_DWORD *)a2 + 2) < 2u)
              {
                v227 = 0;
                goto LABEL_661;
              }
              a2 = (_QWORD *)*a2;
            }
            v227 = (_OWORD *)a2[1];
LABEL_661:
            v238 = *((unsigned __int8 *)v227 + 18);
            v239 = (_OWORD **)v227;
            if ((v238 - 1) >= 2)
              v239 = *(_OWORD ***)v227;
            *(_OWORD *)v377 = **v239;
            if (v238 == 2)
              goto LABEL_884;
            if (v238 == 5 && *((_DWORD *)v227 + 2) > 1u)
            {
              v227 = *(_OWORD **)v227;
LABEL_884:
              swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType(*((_QWORD *)v227 + 1), v209, &v401);
              if (!(_BYTE)v403)
              {
                *(_QWORD *)v211 = "unknown error";
                *(_QWORD *)(v211 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *(_WORD *)(v211 + 16) = 1;
                goto LABEL_908;
              }
              v323 = v211;
              v324 = *v160;
              __swift::__runtime::llvm::StringRef::str((const void **)v377, (uint64_t)v395);
              v325 = LOWORD(v398.__r_.__value_.__r.__words[2]);
              v326 = v398.__r_.__value_.__r.__words[0];
              std::optional<std::pair<std::string,BOOL>>::optional[abi:nn180100](&v388, (__int128 *)&v401);
              if (v389
                || (v325 ? (v327 = 0) : (v327 = v326),
                    v328 = swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>(v324, (uint64_t)v395, v327, (uint64_t)&v388), *(_WORD *)(v323 + 16) = 0, (*(_QWORD *)v323 = v328) == 0))
              {
                *(_QWORD *)v323 = "unknown error";
                *(_QWORD *)(v323 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *(_WORD *)(v323 + 16) = 1;
              }
              if (v390 && SHIBYTE(v388.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v388.__r_.__value_.__l.__data_);
              if (v397 < 0)
                operator delete(v395[0]);
              if (!(_BYTE)v403)
              {
LABEL_908:
                if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1)
                  ((void (*)(std::string::size_type, uint64_t, _QWORD))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
                return;
              }
            }
            else
            {
              __swift::__runtime::llvm::StringRef::str((const void **)v377, (uint64_t)&v401);
              *(_QWORD *)v211 = "unknown error";
              *(_QWORD *)(v211 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *(_WORD *)(v211 + 16) = 1;
            }
            if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v401.__r_.__value_.__l.__data_);
            goto LABEL_908;
          default:
LABEL_436:
            operator new();
        }
      case 0x39:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
            goto LABEL_236;
          case 5:
            if (*((_DWORD *)a2 + 2) != 1)
              goto LABEL_410;
            goto LABEL_465;
          default:
LABEL_410:
            operator new();
        }
      case 0x3D:
      case 0xDB:
      case 0xE9:
      case 0xEA:
LABEL_118:
        v401.__r_.__value_.__s.__data_[0] = 0;
        v406 = 0;
        v395[0] = 0;
        LOBYTE(v377[0]) = 0;
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledTypeDecl((swift::Demangle::__runtime::Node **)a1, a2, v6, (uint64_t)&v401, v395, (uint64_t)&v398);
        if (v398.__r_.__value_.__s.__data_[16])
        {
          *((_WORD *)v4 + 8) = 1;
          v51 = (uint64_t (*)(std::string::size_type, uint64_t, _QWORD))v398.__r_.__value_.__l.__size_;
          v52 = v398.__r_.__value_.__r.__words[0];
          v4[1] = v398.__r_.__value_.__l.__size_;
          *v4 = v51(v52, 2, 0);
          if (v398.__r_.__value_.__s.__data_[16])
            ((void (*)(std::string::size_type, uint64_t, _QWORD))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
        }
        else
        {
          v105 = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(*a1, (uint64_t)&v401, (uint64_t)v395[0]);
          *((_WORD *)v4 + 8) = 0;
          *v4 = v105;
          if (!v105)
          {
            *v4 = (uint64_t)"unknown error";
            v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            *((_WORD *)v4 + 8) = 1;
          }
        }
        if (!v406)
          return;
        if (v405 && __p)
        {
          v403 = __p;
          operator delete(__p);
        }
LABEL_263:
        if ((SHIBYTE(v401.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v50 = (void *)v401.__r_.__value_.__r.__words[0];
        goto LABEL_265;
      case 0x45:
      case 0x91:
        v29 = *((unsigned __int8 *)a2 + 18);
        v30 = (size_t)a2;
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
            v31 = a1;
            v32 = v4;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            goto LABEL_85;
          case 2:
            goto LABEL_342;
          case 5:
            v126 = *((_DWORD *)a2 + 2);
            if (v126 < 2)
            {
              if (!v126)
LABEL_339:
                operator new();
              v31 = a1;
              v35 = 0;
              v34 = 0;
              v33 = 0;
            }
            else
            {
              v30 = *a2;
LABEL_342:
              v127 = *(uint64_t ***)v30;
              v128 = *(unsigned __int16 *)(*(_QWORD *)v30 + 16);
              v129 = *(unsigned __int8 *)(*(_QWORD *)v30 + 18);
              if (v128 != 146 || v129 != 3)
                operator new();
              v130 = *v127;
              v131 = v127[1];
              if (v131 == (uint64_t *)((char *)&dword_C + 2))
              {
                v311 = *v130;
                v312 = *(uint64_t *)((char *)v130 + 6);
                v35 = v311 == 0x656D5F636A626F40 && v312 == 0x657079746174656DLL;
                v34 = 2 * v35;
              }
              else if (v131 == (uint64_t *)((char *)&dword_4 + 2))
              {
                v314 = *(_DWORD *)v130;
                v315 = *((unsigned __int16 *)v130 + 2);
                v35 = v314 == 1768453184 && v315 == 27491;
                v34 = v35;
              }
              else if (v131 == (uint64_t *)((char *)&dword_4 + 1))
              {
                v34 = 0;
                v132 = *(_DWORD *)v130;
                v133 = *((unsigned __int8 *)v130 + 4);
                v35 = v132 == 1768453184 && v133 == 110;
              }
              else
              {
                v35 = 0;
                v34 = 0;
              }
              if (v29 == 2)
              {
                v31 = a1;
                v32 = v4;
                v33 = 1;
LABEL_85:
                v36 = (size_t)a2;
                goto LABEL_475;
              }
              if (v29 != 5 || *((_DWORD *)a2 + 2) < 2u)
              {
                v31 = a1;
                v32 = v4;
                v177 = 0;
LABEL_476:
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v31, v177, v6 + 1, 1);
                if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
                {
LABEL_477:
                  *((_WORD *)v32 + 8) = 1;
                  *(_OWORD *)v32 = *(_OWORD *)&v401.__r_.__value_.__l.__data_;
                  v401.__r_.__value_.__l.__size_ = (std::string::size_type)swift::TypeLookupError::nop;
                  v401.__r_.__value_.__r.__words[0] = 0;
                }
                else
                {
                  v178 = *((unsigned __int16 *)a2 + 8);
                  if (v178 == 69)
                  {
                    if (LOWORD(v401.__r_.__value_.__r.__words[2]))
                      v208 = 0;
                    else
                      v208 = v401.__r_.__value_.__r.__words[0];
                    v150 = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(*v31, v208);
LABEL_565:
                    *((_WORD *)v32 + 8) = 0;
                    *v32 = v150;
                    if (!v150)
                    {
                      *v32 = (uint64_t)"unknown error";
                      v32[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                      *((_WORD *)v32 + 8) = 1;
                    }
                  }
                  else
                  {
                    if (v178 != 145)
                      operator new();
                    if (LOWORD(v401.__r_.__value_.__r.__words[2]))
                      v179 = 0;
                    else
                      v179 = v401.__r_.__value_.__r.__words[0];
                    if (v34)
                      v180 = !v35;
                    else
                      v180 = 1;
                    v181 = !v180;
                    v182 = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(*v31, v179, v181);
                    *((_WORD *)v32 + 8) = 0;
                    *v32 = v182;
                    if (!v182)
                    {
                      *v32 = (uint64_t)"unknown error";
                      v32[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                      *((_WORD *)v32 + 8) = 1;
                    }
                  }
                }
LABEL_650:
                if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
                  ((void (*)(std::string::size_type, uint64_t, _QWORD))v401.__r_.__value_.__l.__size_)(v401.__r_.__value_.__r.__words[0], 3, 0);
                return;
              }
              v31 = a1;
              v33 = 1;
            }
            v32 = v4;
            v36 = *a2;
LABEL_475:
            v177 = *(_QWORD *)(v36 + 8 * v33);
            goto LABEL_476;
          default:
            goto LABEL_339;
        }
      case 0x53:
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            v163 = (swift::reflection::TypeRefBuilder **)a1;
            v164 = a4;
            v165 = a2;
            goto LABEL_579;
          case 5:
            if (*((_DWORD *)a2 + 2) <= 1u)
              goto LABEL_439;
            v163 = (swift::reflection::TypeRefBuilder **)a1;
            v164 = a4;
            v165 = (_QWORD *)*a2;
LABEL_579:
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v395, v163, *v165, v6 + 1, 1);
            if (v396[0] == 1)
            {
              *(_WORD *)(v164 + 16) = 1;
              *(_OWORD *)v164 = *(_OWORD *)v395;
              v395[0] = 0;
              v395[1] = swift::TypeLookupError::nop;
              ((void (*)(_QWORD, uint64_t, _QWORD))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
            v398.__r_.__value_.__l.__size_ = 0x800000000;
            v212 = *((unsigned __int8 *)a2 + 18);
            if (v212 == 2)
            {
              v213 = v164;
            }
            else
            {
              v213 = v164;
              if (v212 != 5 || *((_DWORD *)a2 + 2) < 2u)
              {
                v228 = 0;
                goto LABEL_669;
              }
              a2 = (_QWORD *)*a2;
            }
            v228 = a2[1];
LABEL_669:
            if (*(_WORD *)(v228 + 16) != 84)
              operator new();
            swift::Demangle::__runtime::decodeRequirement<swift::reflection::TypeRef const*,swift::reflection::TypeRefRequirement,swift::reflection::TypeRefInverseRequirement,swift::reflection::TypeRefLayoutConstraint,swift::reflection::TypeRefBuilder>(v228, (uint64_t)&v401, (uint64_t)&v398, *v163);
            if (v396[0])
              v240 = 0;
            else
              v240 = v395[0];
            ConstrainedExistentialType = swift::reflection::TypeRefBuilder::createConstrainedExistentialType((uint64_t)*v163, (uint64_t)v240, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]));
            *(_WORD *)(v213 + 16) = 0;
            *(_QWORD *)v213 = ConstrainedExistentialType;
            if (!ConstrainedExistentialType)
            {
              *(_QWORD *)v213 = "unknown error";
              *(_QWORD *)(v213 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *(_WORD *)(v213 + 16) = 1;
            }
            if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ != &v398.__r_.__value_.__r.__words[2])
              free(v398.__r_.__value_.__l.__data_);
            if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2])
              free(v401.__r_.__value_.__l.__data_);
            if (v396[0] == 1)
              ((void (*)(void *, uint64_t, _QWORD))v395[1])(v395[0], 3, 0);
            break;
          default:
LABEL_439:
            operator new();
        }
        return;
      case 0x55:
        v100 = *a1;
        v101 = 0;
        v102 = 0;
LABEL_284:
        v108 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(v100, v101, v102);
        *((_WORD *)v4 + 8) = 0;
        *v4 = v108;
        if (!v108)
        {
          *v4 = (uint64_t)"unknown error";
          v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)v4 + 8) = 1;
        }
        return;
      case 0x63:
        v12 = *((unsigned __int8 *)a2 + 18);
        if ((v12 - 1) < 2)
          goto LABEL_49;
        if (v12 != 5 || !*((_DWORD *)a2 + 2))
          operator new();
        goto LABEL_48;
      case 0x73:
        v53 = 0;
        v54 = 0;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x800000000;
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
        v55 = v6 + 1;
        v398.__r_.__value_.__l.__size_ = 0x800000000;
        v56 = 6;
        v395[0] = v396;
        v395[1] = (void *)0x800000000;
        while (2)
        {
          v57 = *((unsigned __int8 *)a2 + 18);
          switch((_DWORD)v57)
          {
            case 1:
              v58 = *((unsigned __int8 *)a2 + 18);
              break;
            case 5:
              v58 = *((unsigned int *)a2 + 2);
              break;
            case 2:
              v58 = 2;
              break;
            default:
LABEL_269:
              if (LODWORD(v395[1]))
              {
                if (LODWORD(v395[1]) != 1)
                  operator new();
                v106 = *(_BYTE *)v395[0];
                v377[0] = *(void **)((char *)v395[0] + 1);
                *(void **)((char *)v377 + 7) = *((void **)v395[0] + 1);
                v107 = 1;
              }
              else
              {
                v106 = 0;
                v107 = 0;
              }
              v183 = *a1;
              v392 = v106;
              *(void **)v393 = v377[0];
              *(void **)&v393[7] = *(void **)((char *)v377 + 7);
              v394 = v107;
              ImplFunctionType = swift::reflection::TypeRefBuilder::createImplFunctionType(v183, v56, (uint64_t)v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (uint64_t)v398.__r_.__value_.__l.__data_, LODWORD(v398.__r_.__value_.__r.__words[1]), (uint64_t)&v392, v54);
              *((_WORD *)v4 + 8) = 0;
              *v4 = ImplFunctionType;
              if (!ImplFunctionType)
              {
                *v4 = (uint64_t)"unknown error";
                v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)v4 + 8) = 1;
              }
              if (v395[0] != v396)
                free(v395[0]);
              if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ != &v398.__r_.__value_.__r.__words[2])
                free(v398.__r_.__value_.__l.__data_);
LABEL_894:
              v225 = (void *)v401.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ == &v401.__r_.__value_.__r.__words[2])
                return;
              goto LABEL_895;
          }
          if (v58 > v53)
          {
            v59 = v57 - 1;
            if ((_DWORD)v57 != 1)
            {
              if ((_DWORD)v57 == 5)
              {
                if (*((unsigned int *)a2 + 2) > v53)
                  goto LABEL_138;
                goto LABEL_142;
              }
              v57 = 2;
            }
            if (v57 > v53)
            {
LABEL_138:
              v60 = (size_t)a2;
              if (v59 >= 2)
                v60 = *a2;
              v61 = *(unsigned __int8 **)(v60 + 8 * v53);
              goto LABEL_143;
            }
LABEL_142:
            v61 = 0;
LABEL_143:
            switch(*((_WORD *)v61 + 8))
            {
              case 'i':
                v54 = v54 & 0xFEF | 0x10;
                goto LABEL_126;
              case 'j':
                if (v61[18] != 3)
                  operator new();
                v63 = *(unint64_t **)v61;
                v62 = *((_QWORD *)v61 + 1);
                if (v62 != 18)
                {
                  if (v62 == 17)
                  {
                    v64 = *v63;
                    v65 = v63[1];
                    v66 = *((unsigned __int8 *)v63 + 16);
                    v67 = v64 == 0x746E65766E6F6340 && v65 == 0x6E696874286E6F69;
                    if (v67 && v66 == 41)
                    {
                      v54 = v54 & 0xFF8 | 2;
                      ++v53;
                      continue;
                    }
                  }
                  goto LABEL_126;
                }
                v82 = 0x4063616C6C65655FLL;
                v83 = bswap64(*v63);
                if (v83 != 0x4063616C6C65655FLL)
                  goto LABEL_206;
                v82 = 0x67756172616E7465;
                v83 = bswap64(v63[1]);
                if (v83 != 0x67756172616E7465)
                  goto LABEL_206;
                v83 = bswap32(*((unsigned __int16 *)v63 + 8)) >> 16;
                if ((_DWORD)v83 == 25956)
                {
                  v84 = 0;
                }
                else
                {
                  v82 = 25956;
LABEL_206:
                  if (v83 < v82)
                    v84 = -1;
                  else
                    v84 = 1;
                }
                if (v84)
                  v56 = v56;
                else
                  v56 = 7;
                ++v53;
                continue;
              case 'k':
                HIDWORD(v70) = *v61;
                LODWORD(v70) = (HIDWORD(v70) << 24) - 1677721600;
                v69 = v70 >> 25;
                if (v69 > 7u)
                  v71 = 0;
                else
                  v71 = word_B0FB0[(char)v69];
                v54 = v71 | v54 & 0x8FF;
                ++v53;
                continue;
              case 'l':
                v54 = v54 & 0xF7F | 0x80;
                ++v53;
                continue;
              case 'p':
                if (v61[18] != 3)
                  operator new();
                v72 = *(int **)v61;
                v73 = *((_QWORD *)v61 + 1);
                if (v73 == 6)
                {
                  v85 = *v72;
                  v86 = *((unsigned __int16 *)v72 + 2);
                  if (v85 == 2037604672 && v86 == 25454)
                  {
                    v54 = v54 & 0xFBF | 0x40;
                    ++v53;
                    continue;
                  }
                }
                else if (v73 == 9)
                {
                  v74 = *(_QWORD *)v72;
                  v75 = *((unsigned __int8 *)v72 + 8);
                  if (v74 == 0x6C6261646E655340 && v75 == 101)
                  {
                    v54 = v54 & 0xFDF | 0x20;
                    ++v53;
                    continue;
                  }
                }
                goto LABEL_126;
              case 'q':
                v77 = v61[18];
                v78 = v61;
                if ((v77 - 1) >= 2)
                {
                  if (v77 != 5 || !*((_DWORD *)v61 + 2))
                    operator new();
                  v78 = *(unsigned __int8 **)v61;
                }
                if (*(_WORD *)(*(_QWORD *)v78 + 16) != 114)
                  goto LABEL_889;
                if ((v77 - 1) > 1)
                {
                  v79 = **(_QWORD ***)v61;
                  if (*((_BYTE *)v79 + 18) != 3)
LABEL_889:
                    operator new();
                }
                else
                {
                  v79 = *(_QWORD **)v61;
                  if (*(_BYTE *)(*(_QWORD *)v61 + 18) != 3)
                    goto LABEL_889;
                }
                v80 = (int *)*v79;
                v81 = v79[1];
                if (v81 == 5)
                {
                  v88 = *v80;
                  v89 = *((unsigned __int8 *)v80 + 4);
                  if (v88 == 1668246626 && v89 == 107)
                  {
                    v54 = v54 & 0xFF8 | 1;
                    ++v53;
                    continue;
                  }
                }
                else if (v81 == 1 && *(_BYTE *)v80 == 99)
                {
                  v54 = v54 & 0xFF8 | 3;
                  ++v53;
                  continue;
                }
LABEL_126:
                ++v53;
                continue;
              case 'v':
                if (swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>((uint64_t)a1, (uint64_t)v61, v55, (uint64_t)&v401))operator new();
                goto LABEL_126;
              case 'x':
                if (swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>((uint64_t)a1, (uint64_t)v61, v55, (uint64_t)&v398))operator new();
                goto LABEL_126;
              case 'z':
                if (swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionPart<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>((uint64_t)a1, (_DWORD ***)v61, v55, (uint64_t)v395))operator new();
                goto LABEL_126;
              default:
                operator new();
            }
          }
          goto LABEL_269;
        }
      case 0xB4:
      case 0xB5:
      case 0x15B:
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType((size_t)a2, v6 + 1, &v401);
        if (!(_BYTE)v403)
          operator new();
        ProtocolCompositionType = swift::reflection::TypeRefBuilder::createProtocolCompositionType(*a1, (__int128 *)&v401, 1, 0, 0);
        *((_WORD *)v4 + 8) = 0;
        *v4 = ProtocolCompositionType;
        if (!ProtocolCompositionType)
        {
          *v4 = (uint64_t)"unknown error";
          v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)v4 + 8) = 1;
        }
        if (!(_BYTE)v403)
          return;
        goto LABEL_263;
      case 0xBE:
      case 0xBF:
      case 0xC0:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            v19 = a2;
            goto LABEL_65;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_407;
            v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
            v401.__r_.__value_.__l.__size_ = 0x800000000;
            if (*((_DWORD *)a2 + 2))
            {
              v19 = (size_t *)*a2;
LABEL_65:
              v20 = *v19;
            }
            else
            {
              v20 = 0;
            }
            if (*(_WORD *)(v20 + 16) != 190)
              goto LABEL_72;
            v21 = *(unsigned __int8 *)(v20 + 18);
            if ((v21 - 1) < 2)
              goto LABEL_71;
            if (v21 == 5 && *(_DWORD *)(v20 + 8))
            {
              v20 = *(_QWORD *)v20;
LABEL_71:
              v20 = *(_QWORD *)v20;
            }
LABEL_72:
            v22 = *(unsigned __int8 *)(v20 + 18);
            v23 = (size_t *)v20;
            if ((v22 - 1) < 2)
              goto LABEL_368;
            if (v22 == 5)
            {
              v24 = *(_QWORD *)v20;
              v23 = *(size_t **)v20;
LABEL_372:
              v139 = (size_t *)(v24 + 8 * *(unsigned int *)(v20 + 8));
              goto LABEL_382;
            }
            v23 = 0;
LABEL_368:
            switch(v22)
            {
              case 1:
                v139 = (size_t *)(v20 + 8);
                break;
              case 2:
                v139 = (size_t *)(v20 + 16);
                break;
              case 5:
                v24 = *(_QWORD *)v20;
                goto LABEL_372;
              default:
                v139 = 0;
                break;
            }
LABEL_382:
            if (v23 == v139)
            {
LABEL_392:
              if (v9 == 191)
              {
                switch(*((_BYTE *)a2 + 18))
                {
                  case 2:
                    goto LABEL_653;
                  case 5:
                    if (*((_DWORD *)a2 + 2) <= 1u)
                      goto LABEL_569;
                    a2 = (_QWORD *)*a2;
LABEL_653:
                    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, a1, a2[1], v6 + 1, 1);
                    v237 = *((unsigned __int16 *)v4 + 8);
                    if (v4 && v237 == 1)
                      goto LABEL_570;
                    if (*((_WORD *)v4 + 8))
                    {
                      if (v237 == 1)
                        ((void (*)(uint64_t, uint64_t, _QWORD))v4[1])(*v4, 3, 0);
                      v143 = 0;
                      v144 = 1;
                    }
                    else
                    {
                      v143 = *v4;
                      v144 = 1;
                    }
                    break;
                  default:
LABEL_569:
                    operator new();
                }
              }
              else
              {
                v143 = 0;
                v144 = v9 == 192;
              }
              v145 = swift::reflection::TypeRefBuilder::createProtocolCompositionType(*a1, (__int128 *)v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), v143, v144);
              *((_WORD *)v4 + 8) = 0;
              *v4 = v145;
              if (!v145)
              {
                *v4 = (uint64_t)"unknown error";
                v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)v4 + 8) = 1;
              }
            }
            else
            {
              while (1)
              {
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType(*v23, v6 + 1, &v398);
                v142 = v399;
                if (!v399)
                  operator new();
                __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::push_back((uint64_t)&v401, (__int128 *)&v398);
                if (v399 && SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v398.__r_.__value_.__l.__data_);
                if (!v142)
                  break;
                if (++v23 == v139)
                {
                  v9 = *((unsigned __int16 *)a2 + 8);
                  goto LABEL_392;
                }
              }
            }
LABEL_570:
            llvm::SmallVector<std::optional<std::pair<std::string,BOOL>>,8u>::~SmallVector(&v401.__r_.__value_.__l.__data_);
            return;
          default:
LABEL_407:
            operator new();
        }
      case 0xCF:
        v11 = *((unsigned __int8 *)a2 + 18);
        if ((v11 - 1) < 2)
          goto LABEL_49;
        if (v11 != 5 || !*((_DWORD *)a2 + 2))
          operator new();
        goto LABEL_58;
      case 0xD2:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
            v40 = a1;
            v32 = (uint64_t *)a4;
            goto LABEL_413;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_623;
            v40 = a1;
            v32 = (uint64_t *)a4;
            a2 = (_QWORD *)*a2;
LABEL_413:
            v147 = *a2;
            v148 = v40;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v40, v147, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
              goto LABEL_477;
            if (LOWORD(v401.__r_.__value_.__r.__words[2]))
              v149 = 0;
            else
              v149 = v401.__r_.__value_.__r.__words[0];
            v150 = swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(*v148, v149);
            break;
          default:
LABEL_623:
            operator new();
        }
        goto LABEL_565;
      case 0xD3:
        v385 = v387;
        v386 = 0x400000000;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x400000000;
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
        v398.__r_.__value_.__l.__size_ = 0x400000000;
        v395[0] = v396;
        v395[1] = (void *)0x800000000;
        v382 = v384;
        v41 = *((unsigned __int8 *)a2 + 18);
        v383 = 0x400000000;
        v42 = 0;
        switch(v41)
        {
          case 1:
            goto LABEL_421;
          case 2:
            goto LABEL_99;
          case 5:
            v151 = *((_DWORD *)a2 + 2);
            if (!v151)
              goto LABEL_426;
            if (v151 == 1)
              goto LABEL_420;
            if (v151 < 3)
              v42 = 0;
            else
              v42 = *(uint64_t **)(*a2 + 16);
LABEL_99:
            if (*((_WORD *)v42 + 8) != 235)
              operator new();
            v43 = (size_t)a2;
            if (v41 == 2)
              goto LABEL_104;
            if (v41 == 5 && *((_DWORD *)a2 + 2) >= 2u)
            {
              v43 = *a2;
LABEL_104:
              v44 = *(_QWORD *)(v43 + 8);
            }
            else
            {
              v44 = 0;
            }
            v231 = v44 + 16;
            if (*(_WORD *)(v44 + 16) != 43)
              operator new();
            v232 = *(unsigned __int8 *)(v44 + 18);
            if ((v232 - 1) < 2)
            {
              v379 = v381;
              v380 = 0x400000000;
              v233 = v4;
              if (v232 == 2)
              {
                v236 = v44 + 16;
              }
              else if (v232 == 1)
              {
                v236 = v44 + 8;
              }
              else
              {
                v236 = 0;
              }
              v235 = v44;
            }
            else
            {
              if (v232 != 5 || (v233 = v4, !*(_DWORD *)(v44 + 8)))
                operator new();
              v379 = v381;
              v380 = 0x400000000;
              v234 = *(unsigned int *)(v44 + 8);
              if (!(_DWORD)v234)
              {
                v377[0] = v378;
                v377[1] = (void *)0x600000000;
                goto LABEL_946;
              }
              v235 = *(_QWORD *)v44;
              v236 = *(_QWORD *)v44 + 8 * v234;
            }
            do
            {
              v337 = *(_QWORD *)v235;
              if (*(_WORD *)(*(_QWORD *)v235 + 16) == 37 && *(_BYTE *)(v337 + 18) == 4)
                __swift::__runtime::llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(&v379, *(_DWORD *)v337);
              v235 += 8;
            }
            while (v235 != v236);
            v338 = *(unsigned __int8 *)(v44 + 18);
            v377[0] = v378;
            v377[1] = (void *)0x600000000;
            v339 = v44;
            if ((v338 - 1) >= 2)
            {
              if (v338 != 5)
              {
                v339 = 0;
                goto LABEL_936;
              }
LABEL_946:
              v340 = *(_QWORD *)v44;
              v339 = *(_QWORD *)v44;
              goto LABEL_947;
            }
LABEL_936:
            if (v338 == 1)
            {
              v231 = v44 + 8;
              goto LABEL_951;
            }
            if (v338 == 2)
              goto LABEL_951;
            if (v338 != 5)
            {
              v231 = 0;
              goto LABEL_951;
            }
            v340 = *(_QWORD *)v44;
LABEL_947:
            v231 = v340 + 8 * *(unsigned int *)(v44 + 8);
LABEL_951:
            while (v339 != v231)
            {
              v341 = *(uint64_t ***)v339;
              if (*(_WORD *)(*(_QWORD *)v339 + 16) != 42)
                goto LABEL_950;
              v342 = *((unsigned __int8 *)v341 + 18);
              if ((v342 - 1) < 2)
                goto LABEL_957;
              if (v342 == 5 && *((_DWORD *)v341 + 2))
              {
                v341 = (uint64_t **)*v341;
LABEL_957:
                v343 = (uint64_t **)*v341;
                goto LABEL_959;
              }
              v343 = 0;
LABEL_959:
              v344 = *((unsigned __int8 *)v343 + 18);
              if ((v344 - 1) >= 2)
              {
                if (v344 != 5 || !*((_DWORD *)v343 + 2))
                {
                  v345 = 0;
                  goto LABEL_965;
                }
                v343 = (uint64_t **)*v343;
              }
              v345 = (uint64_t **)*v343;
LABEL_965:
              v346 = *((unsigned __int8 *)v345 + 18);
              if ((v346 - 1) <= 1)
              {
                v376 = **v345;
              }
              else
              {
                v376 = *(_QWORD *)**v345;
                if (v346 == 5)
                  v345 = (uint64_t **)*v345;
              }
              v375 = *v345[1];
              __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>((uint64_t)v377, (unsigned int *)&v376, &v375);
LABEL_950:
              v339 += 8;
            }
            v347 = v380;
            if ((_DWORD)v380)
            {
              v348 = 0;
              v349 = v379;
              do
              {
                if (v349[v348])
                {
                  v350 = 0;
                  do
                  {
                    v351 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(*a1, v348, v350);
                    v352 = v383;
                    if (v383 >= (unint64_t)HIDWORD(v383))
                    {
                      v353 = v351;
                      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v382, (uint64_t)v384, v383 + 1, 8);
                      v351 = v353;
                      v352 = v383;
                    }
                    *((_QWORD *)v382 + v352) = v351;
                    LODWORD(v383) = v383 + 1;
                    ++v350;
                    v349 = v379;
                  }
                  while (v350 < *((_DWORD *)v379 + v348));
                  v347 = v380;
                }
                ++v348;
              }
              while (v348 < v347);
            }
            swift::Demangle::__runtime::decodeRequirement<swift::reflection::TypeRef const*,swift::reflection::TypeRefRequirement,swift::reflection::TypeRefInverseRequirement,swift::reflection::TypeRefLayoutConstraint,swift::reflection::TypeRefBuilder>(v44, (uint64_t)&v398, (uint64_t)v395, (swift::reflection::TypeRefBuilder *)*a1);
            v354 = *((unsigned __int8 *)v42 + 18);
            switch(v354)
            {
              case 1u:
LABEL_980:
                v4 = v233;
LABEL_982:
                v355 = 0;
                v356 = 0;
                v357 = 1;
                v358 = v354;
                while (1)
                {
                  v359 = *((unsigned __int8 *)v42 + 18);
                  v360 = v359 - 1;
                  if ((_DWORD)v359 != 1)
                  {
                    if ((_DWORD)v359 == 5)
                    {
                      v359 = *((unsigned int *)v42 + 2);
                    }
                    else
                    {
                      if ((_DWORD)v359 != 2)
                        goto LABEL_993;
                      v359 = 2;
                    }
                  }
                  if (v359 > v356)
                  {
                    v361 = v42;
                    if (v360 >= 2)
                      v361 = (uint64_t *)*v42;
                    v362 = v361[v356];
                    goto LABEL_994;
                  }
LABEL_993:
                  v362 = 0;
LABEL_994:
                  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, a1, v362, v6 + 1, 0);
                  if (!v4 || *((_WORD *)v4 + 8) != 1)
                  {
                    if (*((_WORD *)v4 + 8))
                      v363 = 0;
                    else
                      v363 = *v4;
                    v376 = v363;
                    llvm::SmallVectorImpl<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>((uint64_t)&v401, (uint64_t *)((char *)v382 + v355), &v376);
                    if (*((_WORD *)v4 + 8) == 1)
                      ((void (*)(uint64_t, uint64_t, _QWORD))v4[1])(*v4, 3, 0);
                    v357 = ++v356 < v358;
                    v355 += 8;
                    if (v358 != v356)
                      continue;
                  }
                  goto LABEL_1003;
                }
              case 5u:
                v354 = *((_DWORD *)v42 + 2);
                v4 = v233;
                if (!v354)
                {
                  v357 = 0;
                  goto LABEL_1003;
                }
                goto LABEL_982;
              case 2u:
                goto LABEL_980;
            }
            v357 = 0;
            v4 = v233;
LABEL_1003:
            if (v377[0] != v378)
              free(v377[0]);
            if (v379 != v381)
              free(v379);
            if (v357)
              goto LABEL_845;
            v364 = *((unsigned __int8 *)a2 + 18);
            if ((v364 - 1) < 2)
            {
LABEL_421:
              v152 = *a2;
              goto LABEL_422;
            }
            if (v364 == 5 && *((_DWORD *)a2 + 2))
            {
LABEL_420:
              a2 = (_QWORD *)*a2;
              goto LABEL_421;
            }
            v152 = 0;
LABEL_422:
            v153 = (uint64_t **)(v152 + 16);
            if (*(_WORD *)(v152 + 16) != 212)
              operator new();
            v154 = *(unsigned __int8 *)(v152 + 18);
            v155 = (uint64_t **)v152;
            if ((v154 - 1) >= 2)
            {
              if (v154 == 5)
              {
                v156 = *(uint64_t ***)v152;
                v155 = *(uint64_t ***)v152;
                goto LABEL_843;
              }
              v155 = 0;
            }
            if (v154 == 1)
            {
              v153 = (uint64_t **)(v152 + 8);
            }
            else if (v154 != 2)
            {
              if (v154 == 5)
              {
                v156 = *(uint64_t ***)v152;
LABEL_843:
                v153 = &v156[*(unsigned int *)(v152 + 8)];
              }
              else
              {
                v153 = 0;
              }
            }
            if (v155 == v153)
            {
LABEL_881:
              v322 = swift::reflection::SILBoxTypeWithLayoutTypeRef::create<swift::reflection::TypeRefBuilder>(*a1, v385, v386, v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), v398.__r_.__value_.__l.__data_, LODWORD(v398.__r_.__value_.__r.__words[1]));
              *((_WORD *)v4 + 8) = 0;
              *v4 = v322;
              if (!v322)
              {
                *v4 = (uint64_t)"unknown error";
                v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                *((_WORD *)v4 + 8) = 1;
              }
            }
            else
            {
              while (1)
              {
                v317 = *v155;
                LOBYTE(v379) = 0;
                v318 = *((unsigned __int16 *)v317 + 8);
                if (v318 == 213)
                {
                  v319 = 1;
                }
                else
                {
                  if (v318 != 214)
                    goto LABEL_940;
                  v319 = 0;
                }
                LOBYTE(v379) = v319;
                v320 = *((unsigned __int8 *)v317 + 18);
                if ((v320 - 1) >= 2)
                {
                  if (v320 != 5 || !*((_DWORD *)v317 + 2))
LABEL_940:
                    operator new();
                  v317 = (uint64_t *)*v317;
                }
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, a1, *v317, v6 + 1, 1);
                if (v4)
                {
                  if (*((_WORD *)v4 + 8) == 1)
                    break;
                }
                if (*((_WORD *)v4 + 8))
                  v321 = 0;
                else
                  v321 = (void *)*v4;
                v377[0] = v321;
                llvm::SmallVectorImpl<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field>::emplace_back<swift::reflection::TypeRef const*,BOOL &>((uint64_t)&v385, (uint64_t *)v377, (unsigned __int8 *)&v379);
                if (*((_WORD *)v4 + 8) == 1)
                  ((void (*)(uint64_t, uint64_t, _QWORD))v4[1])(*v4, 3, 0);
                if (++v155 == v153)
                  goto LABEL_881;
              }
            }
LABEL_845:
            if (v382 != v384)
              free(v382);
            if (v395[0] != v396)
              free(v395[0]);
            if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ != &v398.__r_.__value_.__r.__words[2])
              free(v398.__r_.__value_.__l.__data_);
            if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2])
              free(v401.__r_.__value_.__l.__data_);
            v225 = v385;
            if (v385 != v387)
              goto LABEL_895;
            return;
          default:
LABEL_426:
            operator new();
        }
      case 0xDF:
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398.__r_.__value_.__r.__words[2];
        v398.__r_.__value_.__l.__size_ = 0x800000000;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x800000000;
        v91 = *((unsigned __int8 *)a2 + 18);
        v92 = (size_t)a2;
        if ((v91 - 1) < 2)
          goto LABEL_400;
        if (v91 == 5)
        {
          v93 = *a2;
          v92 = *a2;
LABEL_404:
          v146 = (_QWORD *)(v93 + 8 * *((unsigned int *)a2 + 2));
          goto LABEL_513;
        }
        v92 = 0;
LABEL_400:
        switch(v91)
        {
          case 1:
            v146 = a2 + 1;
            break;
          case 2:
            v146 = a2 + 2;
            break;
          case 5:
            v93 = *a2;
            goto LABEL_404;
          default:
            v146 = 0;
            break;
        }
LABEL_513:
        if ((_QWORD *)v92 == v146)
        {
          v201 = 0;
          v199 = 0;
          v200 = &v401.__r_.__value_.__s.__data_[16];
          v198 = &v398.__r_.__value_.__s.__data_[16];
          goto LABEL_538;
        }
        v190 = v6 + 1;
        while (1)
        {
          v191 = *(unsigned __int8 **)v92;
          if (*(_WORD *)(*(_QWORD *)v92 + 16) != 224)
            operator new();
          if (v191[18] - 1 > 1)
            v191 = *(unsigned __int8 **)v191;
          if (*(_WORD *)(*(_QWORD *)v191 + 16) == 276)
            operator new();
          v377[0] = 0;
          v377[1] = 0;
          v192 = *(unsigned __int8 **)v92;
          v193 = *(unsigned __int8 *)(*(_QWORD *)v92 + 18);
          if (v193 - 1 > 1)
            v194 = **(_QWORD ***)v192;
          else
            v194 = *(_QWORD **)v192;
          if (*((_WORD *)v194 + 8) == 225)
          {
            *(_OWORD *)v377 = *(_OWORD *)v194;
            v192 = *(unsigned __int8 **)v92;
            v193 = *(unsigned __int8 *)(*(_QWORD *)v92 + 18);
            v195 = 1;
          }
          else
          {
            v195 = 0;
          }
          v196 = v193;
          if (v193 != 1)
          {
            if (v193 == 2)
              goto LABEL_532;
            if (v193 != 5)
              goto LABEL_533;
            v196 = *((unsigned int *)v192 + 2);
          }
          if (v196 <= v195)
          {
LABEL_533:
            v197 = 0;
            goto LABEL_534;
          }
          if (v193 - 1 >= 2)
            v192 = *(unsigned __int8 **)v192;
LABEL_532:
          v197 = *(uint64_t **)&v192[8 * v195];
LABEL_534:
          v391[0] = (uint64_t)&v398;
          v391[1] = (uint64_t)&v401;
          v391[2] = (uint64_t)v377;
          swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#1}>((uint64_t)a1, v197, v190, v391, (uint64_t)v395);
          if (LOBYTE(v396[0]))
          {
            *((_WORD *)v4 + 8) = 1;
            v203 = v395[0];
            v204 = (uint64_t (*)(void *, uint64_t, _QWORD))v395[1];
            v4[1] = (uint64_t)v395[1];
            *v4 = v204(v203, 2, 0);
            if (LOBYTE(v396[0]))
              ((void (*)(void *, uint64_t, _QWORD))v395[1])(v395[0], 3, 0);
            goto LABEL_616;
          }
          v92 += 8;
          if ((_QWORD *)v92 == v146)
          {
            v198 = (std::string::value_type *)v398.__r_.__value_.__r.__words[0];
            v199 = LODWORD(v398.__r_.__value_.__r.__words[1]);
            v200 = (std::string::value_type *)v401.__r_.__value_.__r.__words[0];
            v201 = LODWORD(v401.__r_.__value_.__r.__words[1]);
LABEL_538:
            TupleType = swift::reflection::TypeRefBuilder::createTupleType(*a1, v198, v199, (uint64_t)v200, v201);
            *((_WORD *)v4 + 8) = 0;
            *v4 = TupleType;
            if (!TupleType)
            {
              *v4 = (uint64_t)"unknown error";
              v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)v4 + 8) = 1;
            }
LABEL_616:
            if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2])
              free(v401.__r_.__value_.__l.__data_);
            v225 = (void *)v398.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v398.__r_.__value_.__l.__data_ == &v398.__r_.__value_.__r.__words[2])
              return;
LABEL_895:
            free(v225);
            return;
          }
        }
      case 0xE0:
        v13 = *((unsigned __int8 *)a2 + 18);
        v14 = (size_t)a2;
        if ((v13 - 1) >= 2)
        {
          if (v13 != 5 || !*((_DWORD *)a2 + 2))
            operator new();
          v14 = *a2;
        }
        if (*(_WORD *)(*(_QWORD *)v14 + 16) == 225)
        {
          switch(*((_BYTE *)a2 + 18))
          {
            case 2:
              goto LABEL_29;
            case 5:
              if (*((_DWORD *)a2 + 2) <= 1u)
                goto LABEL_408;
              a2 = (_QWORD *)*a2;
LABEL_29:
              ++a2;
              break;
            default:
LABEL_408:
              operator new();
          }
          goto LABEL_49;
        }
        if ((v13 - 1) < 2)
          goto LABEL_49;
        if (v13 == 5)
        {
          if (*((_DWORD *)a2 + 2))
          {
LABEL_58:
            a2 = (_QWORD *)*a2;
LABEL_49:
            a2 = (_QWORD *)*a2;
            goto LABEL_50;
          }
          a2 = 0;
        }
        else
        {
          a2 = 0;
        }
LABEL_50:
        if (++v6 == 1025)
          goto LABEL_2;
        continue;
      case 0xE2:
      case 0xE3:
      case 0xE4:
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x800000000;
        v26 = *((unsigned __int8 *)a2 + 18);
        v27 = (uint64_t **)a2;
        if ((v26 - 1) < 2)
          goto LABEL_240;
        if (v26 == 5)
        {
          v28 = *a2;
          v27 = (uint64_t **)*a2;
LABEL_244:
          v104 = (uint64_t **)(v28 + 8 * *((unsigned int *)a2 + 2));
          goto LABEL_275;
        }
        v27 = 0;
LABEL_240:
        switch(v26)
        {
          case 1:
            v104 = (uint64_t **)(a2 + 1);
            break;
          case 2:
            v104 = (uint64_t **)(a2 + 2);
            break;
          case 5:
            v28 = *a2;
            goto LABEL_244;
          default:
            v104 = 0;
            break;
        }
LABEL_275:
        if (v27 == v104)
          goto LABEL_278;
        while (1)
        {
          swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#2}>((uint64_t)a1, *v27, v6 + 1, (uint64_t)&v401, (uint64_t)&v398);
          if (v398.__r_.__value_.__s.__data_[16])
            goto LABEL_558;
          if (++v27 == v104)
            goto LABEL_278;
        }
      case 0xE5:
        operator new();
      case 0xE8:
        v15 = *((unsigned __int8 *)a2 + 18);
        if ((v15 - 1) >= 2)
        {
          if (v15 != 5 || !*((_DWORD *)a2 + 2))
            operator new();
LABEL_40:
          a2 = (_QWORD *)*a2;
        }
        goto LABEL_49;
      case 0xEC:
        v17 = *((unsigned __int8 *)a2 + 18);
        if ((v17 - 1) < 2)
          goto LABEL_49;
        if (v17 != 5 || !*((_DWORD *)a2 + 2))
          operator new();
LABEL_48:
        a2 = (_QWORD *)*a2;
        goto LABEL_49;
      case 0xF7:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
            v94 = a1;
            v32 = (uint64_t *)a4;
            goto LABEL_442;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_625;
            v94 = a1;
            v32 = (uint64_t *)a4;
            a2 = (_QWORD *)*a2;
LABEL_442:
            v166 = *a2;
            v167 = v94;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v94, v166, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
              goto LABEL_477;
            if (LOWORD(v401.__r_.__value_.__r.__words[2]))
              v168 = 0;
            else
              v168 = v401.__r_.__value_.__r.__words[0];
            v150 = swift::reflection::WeakStorageTypeRef::create<swift::reflection::TypeRefBuilder>(*v167, v168);
            break;
          default:
LABEL_625:
            operator new();
        }
        goto LABEL_565;
      case 0xF8:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
            v45 = a1;
            v32 = (uint64_t *)a4;
            goto LABEL_429;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_624;
            v45 = a1;
            v32 = (uint64_t *)a4;
            a2 = (_QWORD *)*a2;
LABEL_429:
            v157 = *a2;
            v158 = v45;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v45, v157, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
              goto LABEL_477;
            if (LOWORD(v401.__r_.__value_.__r.__words[2]))
              v159 = 0;
            else
              v159 = v401.__r_.__value_.__r.__words[0];
            v150 = swift::reflection::UnownedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(*v158, v159);
            break;
          default:
LABEL_624:
            operator new();
        }
        goto LABEL_565;
      case 0xF9:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
            v95 = a1;
            v32 = (uint64_t *)a4;
            goto LABEL_449;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_626;
            v95 = a1;
            v32 = (uint64_t *)a4;
            a2 = (_QWORD *)*a2;
LABEL_449:
            v169 = *a2;
            v170 = v95;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v95, v169, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
              goto LABEL_477;
            if (LOWORD(v401.__r_.__value_.__r.__words[2]))
              v171 = 0;
            else
              v171 = v401.__r_.__value_.__r.__words[0];
            v150 = swift::reflection::UnmanagedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(*v170, v171);
            break;
          default:
LABEL_626:
            operator new();
        }
        goto LABEL_565;
      case 0x127:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
            goto LABEL_236;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_455;
            goto LABEL_465;
          default:
LABEL_455:
            operator new();
        }
      case 0x128:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
            goto LABEL_236;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_457;
            goto LABEL_465;
          default:
LABEL_457:
            operator new();
        }
      case 0x129:
        switch(*((_BYTE *)a2 + 18))
        {
          case 2:
            v172 = a1;
            v173 = a4;
            v174 = a2;
            goto LABEL_586;
          case 5:
            if (*((_DWORD *)a2 + 2) <= 1u)
              goto LABEL_460;
            v172 = a1;
            v173 = a4;
            v174 = (_QWORD *)*a2;
LABEL_586:
            v214 = v6 + 1;
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, v172, *v174, v214, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
            {
              *(_WORD *)(v173 + 16) = 1;
              *(_OWORD *)v173 = *(_OWORD *)&v401.__r_.__value_.__l.__data_;
              v401.__r_.__value_.__l.__size_ = (std::string::size_type)swift::TypeLookupError::nop;
              v401.__r_.__value_.__r.__words[0] = 0;
              ((void (*)(_QWORD, uint64_t, _QWORD))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            v215 = *((unsigned __int8 *)a2 + 18);
            if (v215 == 2)
              goto LABEL_592;
            if (v215 == 5 && *((_DWORD *)a2 + 2) >= 2u)
            {
              a2 = (_QWORD *)*a2;
LABEL_592:
              v216 = a2[1];
            }
            else
            {
              v216 = 0;
            }
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v398, v172, v216, v214, 1);
            if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1)
              v229 = (uint64_t (*)())v398.__r_.__value_.__l.__size_;
            else
              v229 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            v230 = "unknown error";
            if (LOWORD(v398.__r_.__value_.__r.__words[2]) == 1)
              v230 = (const char *)v398.__r_.__value_.__r.__words[0];
            *(_WORD *)(v173 + 16) = 1;
            *(_QWORD *)v173 = v230;
            *(_QWORD *)(v173 + 8) = v229;
            break;
          default:
LABEL_460:
            operator new();
        }
        goto LABEL_650;
      case 0x12A:
        switch(*((_BYTE *)a2 + 18))
        {
          case 1:
          case 2:
LABEL_236:
            v103 = a4;
            goto LABEL_466;
          case 5:
            if (!*((_DWORD *)a2 + 2))
              goto LABEL_627;
LABEL_465:
            v103 = a4;
            a2 = (_QWORD *)*a2;
LABEL_466:
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v401, a1, *a2, v6 + 1, 1);
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
              v175 = (uint64_t (*)())v401.__r_.__value_.__l.__size_;
            else
              v175 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            v176 = "unknown error";
            if (LOWORD(v401.__r_.__value_.__r.__words[2]) == 1)
              v176 = (const char *)v401.__r_.__value_.__r.__words[0];
            *(_WORD *)(v103 + 16) = 1;
            *(_QWORD *)v103 = v176;
            *(_QWORD *)(v103 + 8) = v175;
            break;
          default:
LABEL_627:
            operator new();
        }
        return;
      case 0x12C:
        switch(*((_BYTE *)a2 + 18))
        {
          case 5:
            if (*((_DWORD *)a2 + 2) < 3u)
              goto LABEL_461;
            v217 = *(uint64_t **)(*a2 + 8);
            if (*((_WORD *)v217 + 8) != 102 || *((_BYTE *)v217 + 18) != 4)
              operator new();
            v242 = 0;
            v365 = *(_QWORD *)*a2;
            v366 = *v217;
            memset(&v401, 0, sizeof(v401));
            if (*((_DWORD *)a2 + 2) >= 3u)
              v242 = *(uint64_t **)(*a2 + 16);
            v243 = 0;
            v244 = 0;
            v245 = 0;
            v246 = 0;
            v247 = v6 + 1;
            v368 = v242;
            break;
          default:
LABEL_461:
            operator new();
        }
        while (2)
        {
          v248 = *((unsigned __int8 *)v242 + 18);
          switch((_DWORD)v248)
          {
            case 1:
              break;
            case 5:
              v248 = *((unsigned int *)v242 + 2);
              break;
            case 2:
              v248 = 2;
              break;
            default:
              goto LABEL_914;
          }
          if (v248 <= v243)
            goto LABEL_914;
          LODWORD(v398.__r_.__value_.__l.__data_) = (unint64_t)(v245 - v244) >> 3;
          std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v401, &v398);
          v249 = *((unsigned __int8 *)v242 + 18);
          v250 = v249 - 1;
          switch((_DWORD)v249)
          {
            case 1:
              break;
            case 5:
              v249 = *((unsigned int *)v242 + 2);
              break;
            case 2:
              v249 = 2;
              break;
            default:
              goto LABEL_695;
          }
          if (v249 > v243)
          {
            v251 = v242;
            if (v250 >= 2)
              v251 = (uint64_t *)*v242;
            v252 = (uint64_t *)v251[v243];
LABEL_696:
            v253 = v252 + 2;
            if (*((_WORD *)v252 + 8) == 235)
            {
              v254 = *((unsigned __int8 *)v252 + 18);
              v255 = v252;
              *(_QWORD *)v370 = v243;
              if ((v254 - 1) >= 2)
              {
                if (v254 == 5)
                {
                  v256 = *v252;
                  v255 = (_QWORD *)*v252;
                  goto LABEL_705;
                }
                v255 = 0;
              }
              if (v254 == 1)
              {
                v253 = v252 + 1;
                goto LABEL_708;
              }
              if (v254 == 2)
              {
LABEL_708:
                if (v255 == v253)
                {
LABEL_679:
                  v242 = v368;
                  v243 = *(_QWORD *)v370 + 1;
                  continue;
                }
                v372 = v253;
                while (1)
                {
                  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, a1, *v255, v247, 0);
                  v257 = *((unsigned __int16 *)v4 + 8);
                  if (v4 && v257 == 1)
                    goto LABEL_922;
                  v258 = *((_WORD *)v4 + 8) ? 0 : *v4;
                  if (v245 >= v246)
                    break;
                  *(_QWORD *)v245 = v258;
                  v245 += 8;
LABEL_739:
                  if (v257 == 1)
                    ((void (*)(uint64_t, uint64_t, _QWORD))v4[1])(*v4, 3, 0);
                  if (++v255 == v253)
                    goto LABEL_679;
                }
                v259 = v246;
                v260 = v247;
                v261 = (char *)(v245 - v244);
                v262 = (v245 - v244) >> 3;
                v263 = v262 + 1;
                if ((unint64_t)(v262 + 1) >> 61)
                  abort();
                v264 = v259 - v244;
                v265 = (v259 - v244) >> 2;
                if (v265 > v263)
                  v263 = v265;
                v266 = v264 >= 0x7FFFFFFFFFFFFFF8;
                v267 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v266)
                  v267 = v263;
                v373 = v267;
                if (v267)
                {
                  if (v267 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v268 = (char *)operator new(8 * v267);
                }
                else
                {
                  v268 = 0;
                }
                v269 = &v268[8 * v262];
                *(_QWORD *)v269 = v258;
                v270 = v269 + 8;
                if (v245 == v244)
                {
                  v244 = v269;
                  v247 = v260;
                  v274 = v373;
                  goto LABEL_736;
                }
                v271 = v245 - v244 - 8;
                if (v271 >= 0x168
                  && (v272 = (v245 - 8 - v244) & 0xFFFFFFFFFFFFFFF8,
                      &v261[(_QWORD)v268 - 8 - v272] <= &v261[(_QWORD)v268 - 8])
                  && &v245[-v272 - 8] <= v245 - 8
                  && (unint64_t)(v244 - v268) >= 0x20)
                {
                  v276 = (v271 >> 3) + 1;
                  v277 = 8 * (v276 & 0x3FFFFFFFFFFFFFFCLL);
                  v273 = &v245[-v277];
                  v269 -= v277;
                  v278 = &v261[(_QWORD)v268 - 16];
                  v279 = v245 - 16;
                  v280 = v276 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v281 = *(_OWORD *)v279;
                    *((_OWORD *)v278 - 1) = *((_OWORD *)v279 - 1);
                    *(_OWORD *)v278 = v281;
                    v278 -= 32;
                    v279 -= 32;
                    v280 -= 4;
                  }
                  while (v280);
                  v247 = v260;
                  v274 = v373;
                  if (v276 == (v276 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_734;
                }
                else
                {
                  v273 = v245;
                  v247 = v260;
                  v274 = v373;
                }
                do
                {
                  v275 = *((_QWORD *)v273 - 1);
                  v273 -= 8;
                  *((_QWORD *)v269 - 1) = v275;
                  v269 -= 8;
                }
                while (v273 != v244);
LABEL_734:
                v245 = v244;
                v244 = v269;
LABEL_736:
                v246 = &v268[8 * v274];
                if (v245)
                {
                  operator delete(v245);
                  v257 = *((unsigned __int16 *)v4 + 8);
                }
                v245 = v270;
                v253 = v372;
                goto LABEL_739;
              }
              if (v254 != 5)
              {
                v253 = 0;
                goto LABEL_708;
              }
              v256 = *v252;
LABEL_705:
              v253 = (_QWORD *)(v256 + 8 * *((unsigned int *)v252 + 2));
              goto LABEL_708;
            }
LABEL_914:
            LODWORD(v398.__r_.__value_.__l.__data_) = (unint64_t)(v245 - v244) >> 3;
            std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v401, &v398);
            v329 = 0;
            v330 = 0;
            memset(&v398, 0, sizeof(v398));
            v331 = v401.__r_.__value_.__r.__words[0];
            if (v401.__r_.__value_.__l.__size_ - v401.__r_.__value_.__r.__words[0] != 4)
            {
              v332 = 0;
              v333 = 1;
              do
              {
                v334 = *(unsigned int *)(v331 + 4 * v332);
                v332 = v333;
                v335 = *(_DWORD *)(v331 + 4 * v333);
                v395[0] = &v244[8 * v334];
                LODWORD(v377[0]) = v335 - v334;
                std::vector<llvm::ArrayRef<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const**,unsigned int>((uint64_t)&v398, v395, (unsigned int *)v377);
                v331 = v401.__r_.__value_.__r.__words[0];
                ++v333;
              }
              while (((uint64_t)(v401.__r_.__value_.__l.__size_ - v401.__r_.__value_.__r.__words[0]) >> 2) - 1 > v332);
              v329 = v398.__r_.__value_.__l.__size_;
              v330 = v398.__r_.__value_.__r.__words[0];
            }
            swift::reflection::TypeRefBuilder::resolveOpaqueType((_QWORD *)*a1, v365, v330, (uint64_t)(v329 - v330) >> 4, v366);
            *((_WORD *)v4 + 8) = 0;
            *v4 = v336;
            if (!v336)
            {
              *v4 = (uint64_t)"unknown error";
              v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)v4 + 8) = 1;
            }
            if (v398.__r_.__value_.__r.__words[0])
            {
              v398.__r_.__value_.__l.__size_ = v398.__r_.__value_.__r.__words[0];
              operator delete(v398.__r_.__value_.__l.__data_);
            }
LABEL_922:
            if (v401.__r_.__value_.__r.__words[0])
            {
              v401.__r_.__value_.__l.__size_ = v401.__r_.__value_.__r.__words[0];
              operator delete(v401.__r_.__value_.__l.__data_);
            }
            if (v244)
            {
              v50 = v244;
LABEL_265:
              operator delete(v50);
            }
            return;
          }
          break;
        }
LABEL_695:
        v252 = 0;
        goto LABEL_696;
      case 0x152:
        v46 = *((unsigned __int8 *)a2 + 18);
        if (v46 == 2)
        {
          v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
          v401.__r_.__value_.__l.__size_ = 0x800000000;
        }
        else
        {
          if (v46 != 5 || *((_DWORD *)a2 + 2) < 2u)
            operator new();
          v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
          v401.__r_.__value_.__l.__size_ = 0x800000000;
          if (*((_DWORD *)a2 + 2) <= 1u)
          {
            v205 = 0;
LABEL_557:
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeGenericArgs(a1, v205, v6 + 1, (uint64_t)&v401, (uint64_t)&v398);
            if (!v398.__r_.__value_.__s.__data_[16])
            {
LABEL_278:
              *v4 = (uint64_t)"unknown error";
              v4[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)v4 + 8) = 1;
              goto LABEL_894;
            }
LABEL_558:
            *((_WORD *)v4 + 8) = 1;
            v206 = (uint64_t (*)(std::string::size_type, uint64_t, _QWORD))v398.__r_.__value_.__l.__size_;
            v207 = v398.__r_.__value_.__r.__words[0];
            v4[1] = v398.__r_.__value_.__l.__size_;
            *v4 = v206(v207, 2, 0);
            if (v398.__r_.__value_.__s.__data_[16])
              ((void (*)(std::string::size_type, uint64_t, _QWORD))v398.__r_.__value_.__l.__size_)(v398.__r_.__value_.__r.__words[0], 3, 0);
            goto LABEL_894;
          }
          a2 = (_QWORD *)*a2;
        }
        v205 = (uint64_t *)a2[1];
        goto LABEL_557;
      default:
        operator new();
    }
  }
}

unsigned __int16 ***swift::Demangle::__runtime::getObjCClassOrProtocolName@<X0>(unsigned __int16 ***result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  unsigned __int16 ***v4;
  unsigned __int16 **v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  unsigned __int16 **v10;

  v2 = *((unsigned __int16 *)result + 8);
  if (v2 != 24 && v2 != 180)
    goto LABEL_21;
  v3 = *((unsigned __int8 *)result + 18);
  v4 = result;
  if (v3 != 2)
  {
    if (v3 != 5 || *((_DWORD *)result + 2) != 2)
      goto LABEL_21;
    v4 = (unsigned __int16 ***)*result;
  }
  v5 = *v4;
  if (*((_WORD *)v5 + 8) != 153 || v5[1] != (unsigned __int16 *)((char *)&dword_0 + 3))
    goto LABEL_21;
  v6 = *v5;
  v7 = *v6;
  v8 = *((unsigned __int8 *)v6 + 2);
  if (v7 != 24415 || v8 != 67)
    goto LABEL_21;
  if (v3 == 2)
    goto LABEL_17;
  if (*((_DWORD *)result + 2) >= 2u)
  {
    result = (unsigned __int16 ***)*result;
LABEL_17:
    v10 = result[1];
    goto LABEL_19;
  }
  v10 = 0;
LABEL_19:
  if (*((_WORD *)v10 + 8) == 101)
  {
    *(_OWORD *)a2 = *(_OWORD *)v10;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
LABEL_21:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledTypeDecl(swift::Demangle::__runtime::Node **a1@<X0>, _DWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  const char *v7;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  std::string v20;
  void *__p;
  void *v22;
  char v23;
  char v24;

  if (a3 > 0x400)
  {
LABEL_2:
    v7 = "Mangled type is too complex";
LABEL_3:
    *(_QWORD *)a6 = v7;
    *(_QWORD *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_BYTE *)(a6 + 16) = 1;
    return;
  }
  v12 = a3 + 1;
  while (1)
  {
    v13 = *((unsigned __int16 *)a2 + 8);
    if (v13 != 232)
      break;
    v14 = *((unsigned __int8 *)a2 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !a2[2])
      {
        a2 = 0;
        goto LABEL_8;
      }
      a2 = *(_DWORD **)a2;
    }
    a2 = *(_DWORD **)a2;
LABEL_8:
    v12 = (v12 + 1);
    if ((_DWORD)v12 == 1026)
      goto LABEL_2;
  }
  if (v13 != 233)
  {
    v15 = a2;
    switch(*((_BYTE *)a2 + 18))
    {
      case 2:
        goto LABEL_27;
      case 5:
        if (a2[2] <= 1u)
          goto LABEL_25;
        v15 = *(_DWORD **)a2;
LABEL_27:
        v16 = *(uint64_t **)v15;
        v17 = *(unsigned __int16 *)(*(_QWORD *)v15 + 16);
        if (v17 == 153)
          break;
        if (v17 == 71)
        {
          v18 = *((unsigned __int8 *)v16 + 18);
          if (v18 != 2)
          {
            if (v18 != 5 || *((_DWORD *)v16 + 2) < 2u)
              operator new();
            v16 = (uint64_t *)*v16;
          }
          v16 = (uint64_t *)v16[1];
        }
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v20, a1, v16, v12, 1);
        v19 = LOWORD(v20.__r_.__value_.__r.__words[2]);
        if (LOWORD(v20.__r_.__value_.__r.__words[2]))
        {
          *a5 = 0;
          if (v19 == 1)
            ((void (*)(std::string::size_type, uint64_t, _QWORD))v20.__r_.__value_.__l.__size_)(v20.__r_.__value_.__r.__words[0], 3, 0);
        }
        else
        {
          *a5 = v20.__r_.__value_.__r.__words[0];
        }
        swift::Demangle::__runtime::getUnspecialized((uint64_t)a2, *a1, (uint64_t)&v20);
        if (LODWORD(v20.__r_.__value_.__l.__data_))
        {
          v7 = "Failed to unspecialize type";
          goto LABEL_3;
        }
        a2 = __p;
        break;
      default:
LABEL_25:
        operator new();
    }
  }
  swift::reflection::TypeRefBuilder::createTypeDecl((size_t *)a2, &v20);
  std::__optional_storage_base<swift::reflection::TypeRefDecl,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::reflection::TypeRefDecl,false>>(a4, (__n128 *)&v20);
  if (v24)
  {
    if (v23 && __p)
    {
      v22 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (!*(_BYTE *)(a4 + 56))
  {
    v7 = "Failed to create type decl";
    goto LABEL_3;
  }
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 16) = 0;
}

uint64_t std::optional<swift::reflection::TypeRefDecl>::~optional(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v2 = *(void **)(a1 + 24);
      if (v2)
      {
        *(_QWORD *)(a1 + 32) = v2;
        operator delete(v2);
      }
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

_QWORD *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeGenericArgs@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  _QWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD);
  unsigned __int16 v21;

  v6 = a2 + 2;
  if (*((_WORD *)a2 + 8) != 235)
    operator new();
  v9 = result;
  v10 = *((unsigned __int8 *)a2 + 18);
  v11 = a2;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *a2;
      v11 = (uint64_t *)*a2;
      goto LABEL_11;
    }
    v11 = 0;
  }
  switch(v10)
  {
    case 1:
      v6 = a2 + 1;
      if (v11 != a2 + 1)
        goto LABEL_16;
      goto LABEL_28;
    case 2:
      goto LABEL_16;
    case 5:
      v12 = *a2;
LABEL_11:
      v6 = (uint64_t *)(v12 + 8 * *((unsigned int *)a2 + 2));
      if (v11 != v6)
        goto LABEL_16;
      goto LABEL_28;
  }
  v6 = 0;
  if (!v11)
  {
LABEL_28:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    return result;
  }
  while (1)
  {
LABEL_16:
    result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v19, v9, *v11, a3, 0);
    v13 = v21;
    if (v21 == 1)
    {
      v14 = v19;
      v15 = v20;
      *(_QWORD *)(a5 + 8) = v20;
      result = (_QWORD *)v15(v14, 2, 0);
      *(_QWORD *)a5 = result;
      *(_BYTE *)(a5 + 16) = 1;
    }
    else
    {
      v16 = v19;
      v17 = *(unsigned int *)(a4 + 8);
      if (v17 >= *(unsigned int *)(a4 + 12))
      {
        result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v17 + 1, 8);
        v17 = *(unsigned int *)(a4 + 8);
      }
      v18 = v13 ? 0 : v16;
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v17) = v18;
      ++*(_DWORD *)(a4 + 8);
    }
    if (v21 == 1)
      result = (_QWORD *)v20(v19, 3, 0);
    if (v13 == 1)
      return result;
    if (++v11 == v6)
      goto LABEL_28;
  }
}

uint64_t swift::reflection::TypeRefBuilder::createBoundGenericType(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  size_t v11;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v16[0] = a3;
  v16[1] = a4;
  if (!*(_BYTE *)(a2 + 56))
    return 0;
  if (*(_BYTE *)(a2 + 48))
    return swift::reflection::TypeRefBuilder::createBoundGenericType(a1, a2, (size_t)v16);
  __p = 0;
  v14 = 0;
  v15 = 0;
  if (a4)
  {
    if (a4 < 0)
      abort();
    v11 = 8 * a4;
    __p = operator new(8 * a4);
    v15 = (char *)__p + 8 * a4;
    memcpy(__p, a3, v11);
    v14 = v15;
  }
  v7 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2, (uint64_t **)&__p, a5);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v7;
}

uint64_t swift::reflection::TypeRefBuilder::createBuiltinType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v4 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledProtocolType(size_t a1@<X1>, unsigned int a2@<W2>, std::string *a3@<X8>)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned __int16 ***v10;
  unsigned __int16 **v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  BOOL v15;
  size_t v16;
  uint64_t v17;
  const void *v18;
  std::string::size_type v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::string v24;
  std::string v25;
  std::string __p;

  if (a2 > 0x400)
    goto LABEL_2;
  v4 = a2 - 1025;
  while (1)
  {
    v6 = *(unsigned __int16 *)(a1 + 16);
    v7 = *(unsigned __int8 *)(a1 + 18);
    if (v6 != 232)
      break;
    if ((v7 - 1) < 2)
      goto LABEL_7;
    if (v7 == 5 && *(_DWORD *)(a1 + 8))
    {
      a1 = *(_QWORD *)a1;
LABEL_7:
      a1 = *(_QWORD *)a1;
      v5 = __CFADD__(v4++, 1);
      if (v5)
        goto LABEL_2;
    }
    else
    {
      a1 = 0;
      v5 = __CFADD__(v4++, 1);
      if (v5)
        goto LABEL_2;
    }
  }
  if (v7 == 2)
  {
    v10 = (unsigned __int16 ***)a1;
    if (v6 != 180)
      goto LABEL_24;
    goto LABEL_27;
  }
  if (v7 == 5)
  {
    v8 = *(_DWORD *)(a1 + 8);
    if (v6 == 180 && v8 > 1)
    {
      if (v8 != 2)
        goto LABEL_45;
      v10 = *(unsigned __int16 ****)a1;
LABEL_27:
      v11 = *v10;
      if (*((_WORD *)v11 + 8) != 153
        || v11[1] != (unsigned __int16 *)((char *)&dword_0 + 3)
        || ((v12 = *v11, v13 = *v12, v14 = *((unsigned __int8 *)v12 + 2), v13 == 24415) ? (v15 = v14 == 67) : (v15 = 0),
            !v15))
      {
LABEL_45:
        swift::Demangle::__runtime::mangleNode((size_t *)a1, (uint64_t)&v25);
        if (LODWORD(v25.__r_.__value_.__l.__data_))
        {
          a3->__r_.__value_.__s.__data_[0] = 0;
          a3[1].__r_.__value_.__s.__data_[8] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v24 = __p;
          *a3 = v24;
          a3[1].__r_.__value_.__s.__data_[0] = 0;
          a3[1].__r_.__value_.__s.__data_[8] = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
      v16 = a1;
      if (v7 != 2)
      {
        if (*(_DWORD *)(a1 + 8) < 2u)
        {
          v17 = 0;
LABEL_39:
          if (*(_WORD *)(v17 + 16) != 101)
            goto LABEL_45;
          v18 = *(const void **)v17;
          if (!*(_QWORD *)v17)
          {
            memset(&v24, 0, sizeof(v24));
            goto LABEL_59;
          }
          v19 = *(_QWORD *)(v17 + 8);
          if (v19 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v19 >= 0x17)
          {
            v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v21 = v19 | 7;
            v22 = v21 + 1;
            v20 = (std::string *)operator new(v21 + 1);
            v24.__r_.__value_.__l.__size_ = v19;
            v24.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
            v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
          }
          else
          {
            *((_BYTE *)&v24.__r_.__value_.__s + 23) = *(_QWORD *)(v17 + 8);
            v20 = &v24;
            if (!v19)
            {
LABEL_58:
              v20->__r_.__value_.__s.__data_[v19] = 0;
              if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
              {
                v23 = (void *)v24.__r_.__value_.__r.__words[0];
                std::string::__init_copy_ctor_external(&v25, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
                *a3 = v25;
                operator delete(v23);
                goto LABEL_61;
              }
LABEL_59:
              *a3 = v24;
LABEL_61:
              a3[1].__r_.__value_.__s.__data_[0] = 1;
              a3[1].__r_.__value_.__s.__data_[8] = 1;
              return;
            }
          }
          memmove(v20, v18, v19);
          goto LABEL_58;
        }
        v16 = *(_QWORD *)a1;
      }
      v17 = *(_QWORD *)(v16 + 8);
      goto LABEL_39;
    }
  }
LABEL_24:
  if (v6 == 181 || v6 == 347)
    goto LABEL_45;
LABEL_2:
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[8] = 0;
}

void __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::push_back(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 40 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = (uint64_t)a2 - v5;
      __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::grow(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = (__int128 *)(*(_QWORD *)a1 + v11);
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::grow(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (std::string *)(v5 + 40 * *(unsigned int *)(a1 + 8));
  v6->__r_.__value_.__s.__data_[0] = 0;
  v6[1].__r_.__value_.__s.__data_[8] = 0;
  if (*((_BYTE *)a2 + 32))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v7 = *a2;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
    v6[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 24);
    v6[1].__r_.__value_.__s.__data_[8] = 1;
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t swift::reflection::TypeRefBuilder::createProtocolCompositionType(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, int a5)
{
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t ProtocolTypeFromDecl;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  void *__p;
  void *v35;
  char *v36;
  std::string v37;
  char v38;
  char v39;

  if (!a3)
  {
    v9 = 0;
    __p = 0;
    v35 = 0;
    v36 = 0;
    goto LABEL_46;
  }
  v6 = a2;
  v32 = a4;
  v33 = a5;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (__int128 *)((char *)a2 + 40 * a3);
  do
  {
    if (*((_BYTE *)v6 + 32))
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v11 = *v6;
        v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v11;
      }
      v38 = *((_BYTE *)v6 + 24);
      v39 = 1;
      ProtocolTypeFromDecl = swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(a1, (uint64_t)&v37);
      if (v39 && SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (ProtocolTypeFromDecl)
      {
        if (v8 < v7)
        {
          *v8++ = ProtocolTypeFromDecl;
          goto LABEL_4;
        }
        v13 = v8 - v9;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          goto LABEL_51;
        if (((char *)v7 - (char *)v9) >> 2 > v14)
          v14 = ((char *)v7 - (char *)v9) >> 2;
        if ((unint64_t)((char *)v7 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          if (v15 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v16 = operator new(8 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = (uint64_t *)&v16[8 * v13];
        *v17 = ProtocolTypeFromDecl;
        v18 = v17 + 1;
        if (v8 == v9)
          goto LABEL_38;
        v19 = (char *)v8 - (char *)v9 - 8;
        if (v19 >= 0x168)
        {
          v21 = ((char *)(v8 - 1) - (char *)v9) & 0xFFFFFFFFFFFFFFF8;
          if (&v16[(char *)v8 - (char *)v9 - 8 - v21] > &v16[(char *)v8 - (char *)v9 - 8])
          {
            v20 = v8;
          }
          else if ((uint64_t *)((char *)v8 - v21 - 8) > v8 - 1)
          {
            v20 = v8;
          }
          else if ((unint64_t)((char *)v9 - v16) >= 0x20)
          {
            v22 = (v19 >> 3) + 1;
            v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
            v20 = &v8[v23 / 0xFFFFFFFFFFFFFFF8];
            v17 = (uint64_t *)((char *)v17 - v23);
            v24 = &v16[8 * v13 - 16];
            v25 = v8 - 2;
            v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v27 = *(_OWORD *)v25;
              *(v24 - 1) = *((_OWORD *)v25 - 1);
              *v24 = v27;
              v24 -= 2;
              v25 -= 4;
              v26 -= 4;
            }
            while (v26);
            if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_37;
          }
          else
          {
            v20 = v8;
          }
        }
        else
        {
          v20 = v8;
        }
        do
        {
          v28 = *--v20;
          *--v17 = v28;
        }
        while (v20 != v9);
LABEL_37:
        v8 = v9;
LABEL_38:
        v9 = v17;
        v7 = (uint64_t *)&v16[8 * v15];
        if (v8)
          operator delete(v8);
        v8 = v18;
      }
    }
LABEL_4:
    v6 = (__int128 *)((char *)v6 + 40);
  }
  while (v6 != v10);
  __p = 0;
  v35 = 0;
  v36 = 0;
  v29 = (char *)v8 - (char *)v9;
  if (v8 != v9)
  {
    if (v29 < 0)
LABEL_51:
      abort();
    __p = operator new((char *)v8 - (char *)v9);
    v36 = (char *)__p + 8 * (v29 >> 3);
    memcpy(__p, v9, (char *)v8 - (char *)v9);
    v35 = v36;
  }
  a5 = v33;
  a4 = v32;
LABEL_46:
  v30 = swift::reflection::ProtocolCompositionTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&__p, a4, a5);
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  if (v9)
    operator delete(v9);
  return v30;
}

char **llvm::SmallVector<std::optional<std::pair<std::string,BOOL>>,8u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      v5 = (void **)&v2[v4];
      if (v2[v4 - 8] && *((char *)v5 - 17) < 0)
        operator delete(*(v5 - 5));
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t swift::Demangle::__runtime::decodeRequirement<swift::reflection::TypeRef const*,swift::reflection::TypeRefRequirement,swift::reflection::TypeRefInverseRequirement,swift::reflection::TypeRefLayoutConstraint,swift::reflection::TypeRefBuilder>(uint64_t result, uint64_t a2, uint64_t a3, swift::reflection::TypeRefBuilder *a4)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  _DWORD *v13;
  swift::Demangle::__runtime::Node *v14;
  int v15;
  int v16;
  uint64_t v17;
  swift::Demangle::__runtime::Node *v18;
  int v19;
  int v20;
  swift::Demangle::__runtime::Node *v21;
  int v22;
  swift::Demangle::__runtime::Node *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  swift::reflection::TypeRefBuilder *v27;
  uint64_t v28;
  swift::Demangle::__runtime::Node *v29;
  int v30;
  unint64_t v31;
  int v32;
  unsigned __int8 **v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v7 = *(unsigned __int8 *)(result + 18);
  v8 = (swift::Demangle::__runtime::Node **)result;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      v9 = *(swift::Demangle::__runtime::Node ***)result;
      v8 = *(swift::Demangle::__runtime::Node ***)result;
      goto LABEL_9;
    }
    v8 = 0;
  }
  switch(v7)
  {
    case 1:
      v10 = result + 8;
      if (v8 != (swift::Demangle::__runtime::Node **)(result + 8))
        goto LABEL_16;
      break;
    case 2:
      v10 = result + 16;
      if (v8 != (swift::Demangle::__runtime::Node **)(result + 16))
        goto LABEL_16;
      break;
    case 5:
      v9 = *(swift::Demangle::__runtime::Node ***)result;
LABEL_9:
      v10 = (uint64_t)&v9[*(unsigned int *)(result + 8)];
      if (v8 == (swift::Demangle::__runtime::Node **)v10)
        return result;
      goto LABEL_16;
    default:
      v10 = 0;
      if (!v8)
        return result;
LABEL_16:
      v39 = a3 + 16;
      while (1)
      {
        v14 = *v8;
        v15 = *((unsigned __int16 *)*v8 + 8);
        if (v15 == 37 || v15 == 42)
          goto LABEL_21;
        v16 = *((unsigned __int8 *)v14 + 18);
        if (v16 != 2)
        {
          if (v16 != 5 || *((_DWORD *)v14 + 2) != 2)
            return result;
          v14 = *(swift::Demangle::__runtime::Node **)v14;
        }
        result = swift::reflection::TypeRefBuilder::decodeMangledType(a4, *(swift::Demangle::__runtime::Node **)v14, 1);
        if (!result)
          return result;
        v17 = result;
        v18 = *v8;
        v19 = *((unsigned __int16 *)*v8 + 8);
        if (v19 == 354)
        {
          v22 = *((unsigned __int8 *)v18 + 18);
          v23 = *v8;
          if ((v22 - 1) < 2)
            goto LABEL_41;
          if (v22 == 5 && *((_DWORD *)v18 + 2))
          {
            v23 = *(swift::Demangle::__runtime::Node **)v18;
LABEL_41:
            v24 = *(_QWORD *)v23;
          }
          else
          {
            v24 = 0;
          }
          if (*(_WORD *)(v24 + 16) != 232)
            return result;
          v36 = *(unsigned __int8 *)(v24 + 18);
          if (v36 != 1 && (v36 != 5 || *(_DWORD *)(v24 + 8) != 1))
            return result;
          if (v22 == 5)
            v18 = *(swift::Demangle::__runtime::Node **)v18;
          v37 = **((unsigned __int8 **)v18 + 1);
          v38 = *(unsigned int *)(a3 + 8);
          if (v38 >= *(unsigned int *)(a3 + 12))
          {
            result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v39, v38 + 1, 8);
            v38 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v37 | v17 & 0xFFFFFFFFFFFFFFF8;
          v13 = (_DWORD *)(a3 + 8);
          goto LABEL_20;
        }
        if (v19 != 39)
        {
          if (v19 != 36)
          {
            v26 = 0;
            goto LABEL_53;
          }
          v20 = *((unsigned __int8 *)v18 + 18);
          if (v20 == 2)
          {
LABEL_36:
            v21 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v18 + 1);
          }
          else
          {
            if (v20 == 5 && *((_DWORD *)v18 + 2) >= 2u)
            {
              v18 = *(swift::Demangle::__runtime::Node **)v18;
              goto LABEL_36;
            }
            v21 = 0;
          }
          v27 = a4;
          v28 = 1;
          goto LABEL_52;
        }
        v25 = *((unsigned __int8 *)v18 + 18);
        if (v25 != 2)
        {
          if (v25 != 5 || *((_DWORD *)v18 + 2) < 2u)
          {
            v21 = 0;
            goto LABEL_51;
          }
          v18 = *(swift::Demangle::__runtime::Node **)v18;
        }
        v21 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v18 + 1);
LABEL_51:
        v27 = a4;
        v28 = 0;
LABEL_52:
        result = swift::reflection::TypeRefBuilder::decodeMangledType(v27, v21, v28);
        v26 = result;
        if (!result)
          return result;
LABEL_53:
        v29 = *v8;
        v30 = *((unsigned __int16 *)*v8 + 8);
        if (v30 != 41)
        {
          if (v30 == 39)
          {
            v31 = *(unsigned int *)(a2 + 8);
            if (v31 >= *(unsigned int *)(a2 + 12))
            {
              result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
              v31 = *(unsigned int *)(a2 + 8);
            }
            v11 = v17 & 0xFFFFFFFFFFFFFFF8 | 2;
          }
          else
          {
            if (v30 != 36)
              goto LABEL_21;
            v31 = *(unsigned int *)(a2 + 8);
            if (v31 >= *(unsigned int *)(a2 + 12))
            {
              result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
              v31 = *(unsigned int *)(a2 + 8);
            }
            v11 = v17 & 0xFFFFFFFFFFFFFFF8;
          }
          v12 = (unint64_t *)(*(_QWORD *)a2 + 16 * v31);
          *v12 = v11;
          v12[1] = v26;
          goto LABEL_19;
        }
        v32 = *((unsigned __int8 *)v29 + 18);
        if (v32 == 2)
          goto LABEL_62;
        if (v32 == 5 && *((_DWORD *)v29 + 2) >= 2u)
        {
          v29 = *(swift::Demangle::__runtime::Node **)v29;
LABEL_62:
          v33 = (unsigned __int8 **)*((_QWORD *)v29 + 1);
          goto LABEL_67;
        }
        v33 = 0;
LABEL_67:
        if (*((_WORD *)v33 + 8) != 101)
          return result;
        if (v33[1] != (_BYTE *)&dword_0 + 1)
          return result;
        v34 = **v33 - 66;
        if (v34 > 0x2B || ((1 << v34) & 0x808000F180FLL) == 0)
          return result;
        v35 = *(unsigned int *)(a2 + 8);
        if (v35 >= *(unsigned int *)(a2 + 12))
        {
          result = (uint64_t)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v35 + 1, 16);
          v35 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 16 * v35) = v17 & 0xFFFFFFFFFFFFFFF8 | 3;
LABEL_19:
        v13 = (_DWORD *)(a2 + 8);
LABEL_20:
        ++*v13;
LABEL_21:
        if (++v8 == (swift::Demangle::__runtime::Node **)v10)
          return result;
      }
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::createConstrainedExistentialType(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v4;
  size_t v9;
  void *__p;
  void *v12;
  char *v13;

  v4 = 0;
  if (a2 && *(_DWORD *)(a2 + 8) == 5)
  {
    __p = 0;
    v12 = 0;
    v13 = 0;
    if (a4)
    {
      if (a4 < 0)
        abort();
      v9 = 16 * a4;
      __p = operator new(16 * a4);
      v13 = (char *)__p + 16 * a4;
      memcpy(__p, a3, v9);
      v12 = v13;
    }
    v4 = swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2, (uint64_t)&__p);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
  }
  return v4;
}

_QWORD *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v7;
  int v9;
  int v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, _QWORD);
  int v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD);
  char v24;
  int v25;
  _QWORD v26[2];
  _QWORD v27[4];
  unsigned int v28;

  if (a3 > 0x400)
    goto LABEL_2;
  while (1)
  {
    v7 = *(unsigned __int16 *)(a2 + 16);
    if (v7 != 232 && v7 != 3)
      break;
    v9 = *(unsigned __int8 *)(a2 + 18);
    if ((v9 - 1) >= 2)
    {
      if (v9 != 5 || !*(_DWORD *)(a2 + 8))
      {
        a2 = 0;
        goto LABEL_7;
      }
      a2 = *(_QWORD *)a2;
    }
    a2 = *(_QWORD *)a2;
LABEL_7:
    if (++a3 == 1025)
      goto LABEL_2;
  }
  v28 = a3;
  v27[0] = a5;
  v27[1] = &v28;
  v27[2] = a4;
  v27[3] = result;
  v26[0] = a5;
  v26[1] = v27;
  if (v7 == 223)
  {
    v10 = *(unsigned __int8 *)(a2 + 18);
    v11 = (uint64_t **)a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        v12 = *(_QWORD *)a2;
        v11 = *(uint64_t ***)a2;
LABEL_28:
        v16 = (uint64_t **)(v12 + 8 * *(unsigned int *)(a2 + 8));
        goto LABEL_34;
      }
      v11 = 0;
    }
    switch(v10)
    {
      case 1:
        v16 = (uint64_t **)(a2 + 8);
        goto LABEL_34;
      case 2:
        v16 = (uint64_t **)(a2 + 16);
        goto LABEL_34;
      case 5:
        v12 = *(_QWORD *)a2;
        goto LABEL_28;
    }
    v16 = 0;
LABEL_34:
    while (v11 != v16)
    {
      result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(v26, *v11, &v22);
      if (v24)
      {
        v17 = v22;
        v18 = v23;
        *(_QWORD *)(a6 + 8) = v23;
        result = (_QWORD *)v18(v17, 2, 0);
        *(_QWORD *)a6 = result;
        *(_BYTE *)(a6 + 16) = 1;
        if (v24)
          return (_QWORD *)v23(v22, 3, 0);
        return result;
      }
      ++v11;
    }
LABEL_2:
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 16) = 0;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v25 = 0;
    result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator()((uint64_t)v27, a2, (unint64_t)&v22, (uint64_t)&v19);
    if (!v21)
      goto LABEL_2;
    v13 = v19;
    v14 = v20;
    *(_QWORD *)(a6 + 8) = v20;
    result = (_QWORD *)v14(v13, 2, 0);
    *(_QWORD *)a6 = result;
    v15 = v21;
    *(_BYTE *)(a6 + 16) = 1;
    if (v15)
      return (_QWORD *)v20(v19, 3, 0);
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::createFunctionType(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;
  void *__p;
  void *v21;
  char *v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  if (a3)
  {
    if (a3 < 0)
      abort();
    v17 = 32 * a3;
    __p = operator new(32 * a3);
    v22 = (char *)__p + 32 * a3;
    memcpy(__p, a2, v17 - 4);
    v21 = v22;
  }
  v18 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t *)&__p, a4, a5, a6, a7, a8, a9);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v18;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  char ***v11;
  char **v12;
  uint64_t v13;
  unsigned __int16 DifferentiabilityFromString;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[2];
  __int16 v20;
  uint64_t ConventionFromString;

  if (a3 > 0x400)
    return 1;
  v8 = *(unsigned __int8 *)(a2 + 18);
  v9 = 1;
  if (v8 == 2)
  {
    v11 = (char ***)a2;
  }
  else
  {
    if (v8 != 5)
      return v9;
    v10 = *(unsigned int *)(a2 + 8);
    if ((v10 - 2) > 2)
      return 1;
    v11 = *(char ****)a2;
    v9 = v10 - 1;
  }
  if (*((_WORD *)*v11 + 8) != 106)
    return 1;
  v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232)
    return 1;
  ConventionFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0)
    return 1;
  v9 = 1;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v19, a1, v12, a3 + 1, 1);
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(_QWORD, uint64_t, _QWORD))v19[1])(v19[0], 3, 0);
    return v9;
  }
  v18 = 0;
  if (*(_BYTE *)(a2 + 18) != 5)
    goto LABEL_23;
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }
  else
  {
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (*(_WORD *)(v13 + 16) != 110)
      goto LABEL_27;
    DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getDifferentiabilityFromString(*(_QWORD **)v13, *(_QWORD *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u)
      goto LABEL_27;
    v18 = DifferentiabilityFromString;
    if (*(_BYTE *)(a2 + 18) != 5)
      goto LABEL_23;
  }
  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 16) == 111)
    {
      v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }
LABEL_27:
    v9 = 1;
    goto LABEL_28;
  }
LABEL_23:
  if (v20)
    v16 = 0;
  else
    v16 = v19[0];
  v17 = v16;
  __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a4, &v17, (unsigned int *)&ConventionFromString, &v18);
  v9 = 0;
LABEL_28:
  if (v20 == 1)
    goto LABEL_29;
  return v9;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD ***v11;
  _DWORD **v12;
  uint64_t v13;
  unsigned __int16 DifferentiabilityFromString;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[2];
  __int16 v20;
  uint64_t ConventionFromString;

  if (a3 > 0x400)
    return 1;
  v8 = *(unsigned __int8 *)(a2 + 18);
  v9 = 1;
  if (v8 == 2)
  {
    v11 = (_DWORD ***)a2;
  }
  else
  {
    if (v8 != 5)
      return v9;
    v10 = *(unsigned int *)(a2 + 8);
    if ((v10 - 2) > 2)
      return 1;
    v11 = *(_DWORD ****)a2;
    v9 = v10 - 1;
  }
  if (*((_WORD *)*v11 + 8) != 106)
    return 1;
  v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232)
    return 1;
  ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0)
    return 1;
  v9 = 1;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v19, a1, v12, a3 + 1, 1);
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(_QWORD, uint64_t, _QWORD))v19[1])(v19[0], 3, 0);
    return v9;
  }
  v18 = 0;
  if (*(_BYTE *)(a2 + 18) != 5)
    goto LABEL_23;
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }
  else
  {
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (*(_WORD *)(v13 + 16) != 110)
      goto LABEL_27;
    DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getDifferentiabilityFromString(*(_QWORD **)v13, *(_QWORD *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u)
      goto LABEL_27;
    v18 = DifferentiabilityFromString;
    if (*(_BYTE *)(a2 + 18) != 5)
      goto LABEL_23;
  }
  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 16) == 111)
    {
      v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }
LABEL_27:
    v9 = 1;
    goto LABEL_28;
  }
LABEL_23:
  if (v20)
    v16 = 0;
  else
    v16 = v19[0];
  v17 = v16;
  __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a4, &v17, (unsigned int *)&ConventionFromString, &v18);
  v9 = 0;
LABEL_28:
  if (v20 == 1)
    goto LABEL_29;
  return v9;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeImplFunctionPart<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>(uint64_t a1, _DWORD ***a2, unsigned int a3, uint64_t a4)
{
  _DWORD ***v6;
  int v8;
  _WORD **v9;
  unsigned int v10;
  _DWORD ***v11;
  int v12;
  _DWORD **v13;
  _BOOL8 v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  __int16 v19;
  uint64_t ConventionFromString;

  if (a3 > 0x400)
    return 1;
  v6 = a2;
  v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2)
  {
    if (v8 == 5 && *((_DWORD *)a2 + 2) == 2)
    {
      v9 = (_WORD **)*a2;
      if (*((_WORD *)**a2 + 8) == 106)
        goto LABEL_8;
    }
    return 1;
  }
  v9 = (_WORD **)a2;
  if (*((_WORD *)*a2 + 8) != 106)
    return 1;
LABEL_8:
  if (v9[1][8] != 232)
    return 1;
  v10 = v8 - 1;
  v11 = a2;
  if (v10 >= 2)
    v11 = (_DWORD ***)*a2;
  ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0)
    return 1;
  v12 = *((unsigned __int8 *)v6 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v6 + 2) < 2u)
    {
      v13 = 0;
      goto LABEL_20;
    }
    v6 = (_DWORD ***)*v6;
  }
  v13 = v6[1];
LABEL_20:
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v18, a1, v13, a3 + 1, 1);
  v14 = v19 == 1;
  if (v19 == 1
    || (v19 ? (v16 = 0) : (v16 = v18[0]),
        v17 = v16,
        __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(a4, &v17, (unsigned int *)&ConventionFromString), v19 == 1))
  {
    ((void (*)(_QWORD, uint64_t, _QWORD))v18[1])(v18[0], 3, 0);
  }
  return v14;
}

uint64_t swift::reflection::TypeRefBuilder::createImplFunctionType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t TupleType;
  uint64_t v16;
  void *__p;
  void *v19;
  uint64_t v20;

  v9 = (a8 & 7) - 1;
  if (v9 > 5)
    v10 = 0;
  else
    v10 = qword_B0C98[v9];
  v11 = ((_DWORD)a8 << 25) & 0x40000000 | (((a8 >> 6) & 1) << 29) | ((unint64_t)((a8 & 0x700) != 0) << 27) | v10;
  v12 = (a8 >> 7) & 0x10;
  v13 = (BYTE1(a8) & 7u) - 1;
  if (v13 < 4)
    v14 = v13 + 1;
  else
    v14 = 0;
  TupleType = swift::reflection::TypeRefBuilder::createTupleType(a1, 0, 0, 0, 0);
  v19 = 0;
  v20 = 0;
  __p = 0;
  v16 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t *)&__p, TupleType, v11, v12, v14, 0, 0);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return v16;
}

_QWORD *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#1}>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  _QWORD *result;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD);
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD);
  unsigned __int16 v26;

  if (*((_WORD *)a2 + 8) == 232)
  {
    v7 = *((unsigned __int8 *)a2 + 18);
    if ((v7 - 1) < 2)
    {
LABEL_6:
      a2 = (uint64_t *)*a2;
      goto LABEL_8;
    }
    if (v7 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (uint64_t *)*a2;
      goto LABEL_6;
    }
    a2 = 0;
  }
LABEL_8:
  if (*((_WORD *)a2 + 8) == 229)
  {
    switch(*((_BYTE *)a2 + 18))
    {
      case 2:
        goto LABEL_27;
      case 5:
        if (*((_DWORD *)a2 + 2) <= 1u)
          goto LABEL_25;
        a2 = (uint64_t *)*a2;
LABEL_27:
        result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v24, a1, a2[1], a3, 1);
        if (v26 != 1)
          goto LABEL_30;
        v19 = v24;
        v20 = v25;
        *(_QWORD *)(a5 + 8) = v25;
        result = (_QWORD *)v20(v19, 2, 0);
        *(_QWORD *)a5 = result;
        *(_BYTE *)(a5 + 16) = 1;
        if (v26 == 1)
          result = (_QWORD *)v25(v24, 3, 0);
        break;
      default:
LABEL_25:
        operator new();
    }
  }
  else
  {
    result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v24, a1, a2, a3, 0);
    v9 = v26;
    if (v26 == 1)
    {
      v10 = v24;
      v11 = v25;
      *(_QWORD *)(a5 + 8) = v25;
      result = (_QWORD *)v11(v10, 2, 0);
      *(_QWORD *)a5 = result;
      *(_BYTE *)(a5 + 16) = 1;
    }
    else
    {
      v12 = v24;
      v13 = *a4;
      v14 = *(unsigned int *)(*a4 + 8);
      if (v14 >= *(_DWORD *)(*a4 + 12))
      {
        v22 = *a4;
        result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v14 + 1, 8);
        v13 = v22;
        LODWORD(v14) = *(_DWORD *)(v22 + 8);
      }
      if (v9)
        v15 = 0;
      else
        v15 = v12;
      *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v15;
      ++*(_DWORD *)(v13 + 8);
      v16 = a4[1];
      v17 = *(_OWORD *)a4[2];
      v18 = *(unsigned int *)(v16 + 8);
      if (v18 >= *(_DWORD *)(v16 + 12))
      {
        v21 = a4[1];
        v23 = v17;
        result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v16, v16 + 16, v18 + 1, 16);
        v17 = v23;
        v16 = v21;
        LODWORD(v18) = *(_DWORD *)(v21 + 8);
      }
      *(_OWORD *)(*(_QWORD *)v16 + 16 * v18) = v17;
      ++*(_DWORD *)(v16 + 8);
    }
    if (v26 == 1)
      result = (_QWORD *)v25(v24, 3, 0);
    if (v9 != 1)
    {
LABEL_30:
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 16) = 0;
    }
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::createTupleType(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  char *v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void *__p;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<__swift::__runtime::llvm::StringRef const*,__swift::__runtime::llvm::StringRef const*>(&v31, a4, a4 + 16 * a5, (16 * a5) >> 4);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  if (a3)
  {
    if (a3 < 0)
      goto LABEL_31;
    v28 = operator new(8 * a3);
    v30 = (char *)v28 + 8 * a3;
    memcpy(v28, a2, 8 * a3);
    v29 = v30;
  }
  __p = 0;
  v26 = 0;
  v27 = 0;
  v8 = (char *)v31;
  v9 = v32;
  v10 = v32 - (_BYTE *)v31;
  if (v32 == v31)
    goto LABEL_12;
  v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL)
LABEL_31:
    abort();
  v12 = (char *)operator new(v10);
  v13 = 0;
  __p = v12;
  v27 = &v12[24 * v11];
  do
  {
    v14 = &v8[v13];
    v15 = (std::string *)&v12[v13];
    if (v8[v13 + 23] < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v16 = *(_OWORD *)v14;
      v15->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    v13 += 24;
  }
  while (&v8[v13] != v9);
  v26 = &v12[v13];
LABEL_12:
  v17 = swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&v28, (__int128 **)&__p);
  v18 = (void **)__p;
  if (__p)
  {
    v19 = (void **)v26;
    v20 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = __p;
    }
    v26 = (char *)v18;
    operator delete(v20);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v21 = (void **)v31;
  if (v31)
  {
    v22 = (void **)v32;
    v23 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v22 - 1) < 0)
          operator delete(*(v22 - 3));
        v22 -= 3;
      }
      while (v22 != v21);
      v23 = v31;
    }
    v32 = (char *)v21;
    operator delete(v23);
  }
  return v17;
}

_QWORD *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::reflection::TypeRef const*)#2}>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  _QWORD *result;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD);
  unsigned __int16 v19;

  if (*((_WORD *)a2 + 8) == 232)
  {
    v7 = *((unsigned __int8 *)a2 + 18);
    if ((v7 - 1) < 2)
    {
LABEL_6:
      a2 = (uint64_t *)*a2;
      goto LABEL_8;
    }
    if (v7 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (uint64_t *)*a2;
      goto LABEL_6;
    }
    a2 = 0;
  }
LABEL_8:
  if (*((_WORD *)a2 + 8) == 229)
  {
    switch(*((_BYTE *)a2 + 18))
    {
      case 2:
        goto LABEL_25;
      case 5:
        if (*((_DWORD *)a2 + 2) <= 1u)
          goto LABEL_23;
        a2 = (uint64_t *)*a2;
LABEL_25:
        result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v17, a1, a2[1], a3, 1);
        if (v19 != 1)
          goto LABEL_28;
        v15 = v17;
        v16 = v18;
        *(_QWORD *)(a5 + 8) = v18;
        result = (_QWORD *)v16(v15, 2, 0);
        *(_QWORD *)a5 = result;
        *(_BYTE *)(a5 + 16) = 1;
        if (v19 == 1)
          result = (_QWORD *)v18(v17, 3, 0);
        break;
      default:
LABEL_23:
        operator new();
    }
  }
  else
  {
    result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v17, a1, a2, a3, 0);
    v9 = v19;
    if (v19 == 1)
    {
      v10 = v17;
      v11 = v18;
      *(_QWORD *)(a5 + 8) = v18;
      result = (_QWORD *)v11(v10, 2, 0);
      *(_QWORD *)a5 = result;
      *(_BYTE *)(a5 + 16) = 1;
    }
    else
    {
      v12 = v17;
      v13 = *(unsigned int *)(a4 + 8);
      if (v13 >= *(_DWORD *)(a4 + 12))
      {
        result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v13 + 1, 8);
        LODWORD(v13) = *(_DWORD *)(a4 + 8);
      }
      if (v9)
        v14 = 0;
      else
        v14 = v12;
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v13) = v14;
      ++*(_DWORD *)(a4 + 8);
    }
    if (v19 == 1)
      result = (_QWORD *)v18(v17, 3, 0);
    if (v9 != 1)
    {
LABEL_28:
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 16) = 0;
    }
  }
  return result;
}

std::string *std::optional<std::pair<std::string,BOOL>>::optional[abi:nn180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[8] = 0;
  if (*((_BYTE *)a2 + 32))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 24);
    this[1].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

_DWORD *__swift::__runtime::llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(_DWORD *result, int a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 4);
    LODWORD(v4) = v3[2];
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++v3[2];
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>(a1, a2, a3);
  v4 = *(_QWORD *)a1;
  v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * v3);
  v6 = *a3;
  *v5 = *(_QWORD *)a2;
  v5[1] = v6;
  v7 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return v4 + 8 * v7 - 8;
}

uint64_t llvm::SmallVectorImpl<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>(a1, a2, a3);
  v4 = *(_QWORD *)a1;
  v5 = (uint64_t *)(*(_QWORD *)a1 + 16 * v3);
  *v5 = *a2;
  v5[1] = *a3;
  v6 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 16 * v6 - 16;
}

uint64_t llvm::SmallVectorImpl<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field>::emplace_back<swift::reflection::TypeRef const*,BOOL &>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,BOOL &>(a1, a2, a3);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = *a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * *a3);
  v5 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return v4 + 8 * v5 - 8;
}

void std::vector<unsigned int>::push_back[abi:nn180100](uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 = (_DWORD *)((char *)v15 - v18);
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[4 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = *a2;
    v7 = v5 + 4;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

_QWORD *std::vector<llvm::ArrayRef<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const**,unsigned int>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v10 = *(_QWORD **)a1;
    v11 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v6 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = *a3;
    v19 = &v17[16 * v11];
    *(_QWORD *)v19 = *a2;
    *((_QWORD *)v19 + 1) = v18;
    v9 = v19 + 16;
    if (v7 == v10)
    {
      v20 = &v17[16 * v11];
    }
    else
    {
      do
      {
        v20 = v19 - 16;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 2;
        v19 -= 16;
      }
      while (v7 != v10);
    }
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v17[v16];
    if (v10)
      operator delete(v10);
  }
  else
  {
    v8 = *a3;
    *v7 = *a2;
    v7[1] = v8;
    v9 = v7 + 2;
  }
  *(_QWORD *)(a1 + 8) = v9;
  return v9 - 2;
}

void swift::reflection::TypeRefBuilder::resolveOpaqueType(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  int v24;
  _DWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v32;
  void *v34;
  size_t v35;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[21];
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  _QWORD *v49;
  std::string __p;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  size_t v54;

  if (*(_WORD *)(a2 + 16) == 301)
  {
    *(_QWORD *)v44 = *(_QWORD *)a2;
    LODWORD(v51) = a5;
    v10 = a1[251];
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v10 + 48))(v10, v44, &v51);
      if (v11)
      {
        v42 = v11;
        v43 = (uint64_t)a1;
        memset(v44, 0, 20);
        if ((_DWORD)a4)
        {
          v12 = 0;
          while (1)
          {
            v13 = a3 + 16 * v12;
            v14 = *(unsigned int *)(v13 + 8);
            if (*(_DWORD *)(v13 + 8))
              break;
LABEL_6:
            if (++v12 == a4)
              goto LABEL_48;
          }
          v15 = 0;
          v16 = *(_QWORD *)v13;
          while (1)
          {
            v51 = v12 | (v15 << 32);
            v52 = *(_QWORD *)(v16 + 8 * v15);
            if (*(_DWORD *)&v44[16])
            {
              v17 = (v12 | (unint64_t)(v15 << 32)) >> 32;
              v18 = ((0x2500000000 * v12) | (37 * v17))
                  + ~((unint64_t)(37 * v17) << 32);
              v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
              v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
              v21 = (*(_DWORD *)&v44[16] - 1) & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
              v22 = (_DWORD *)(*(_QWORD *)v44 + 16 * v21);
              v23 = *v22;
              v24 = v22[1];
              if (*v22 == (_DWORD)v12 && v24 == (_DWORD)v17)
                goto LABEL_14;
              v28 = 0;
              v29 = 1;
              while (v23 != -1 || v24 != -1)
              {
                if (v28)
                  v30 = 0;
                else
                  v30 = v24 == -2;
                if (v30 && v23 == -2)
                  v28 = v22;
                v32 = v21 + v29++;
                v21 = v32 & (*(_DWORD *)&v44[16] - 1);
                v22 = (_DWORD *)(*(_QWORD *)v44 + 16 * v21);
                v23 = *v22;
                v24 = v22[1];
                if (*v22 == (_DWORD)v12 && v24 == (_DWORD)v17)
                  goto LABEL_14;
              }
              if (v28)
                v26 = v28;
              else
                v26 = v22;
            }
            else
            {
              v26 = 0;
            }
            v27 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)v44, (uint64_t)&v51, (int *)&v51, v26);
            *v27 = v51;
            v27[1] = v52;
LABEL_14:
            if (++v15 == v14)
              goto LABEL_6;
          }
        }
LABEL_48:
        swift::reflection::TypeRef::subst(v42, v43, (uint64_t *)v44);
        __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)v44, (void *)(16 * *(unsigned int *)&v44[16]), (std::align_val_t)8uLL);
      }
    }
    else
    {
      v40 = std::__throw_bad_function_call[abi:nn180100]();
      swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(v40, v41);
    }
  }
  else
  {
    swift::Demangle::__runtime::mangleNode((size_t *)a2, 0, 0, a1, (uint64_t)&v51);
    if ((_DWORD)v51)
      return;
    v34 = v53;
    v35 = v54;
    v44[0] = 0;
    *(_QWORD *)&v44[1] = 0x101010101010101;
    v44[9] = 1;
    *(_QWORD *)&v44[10] = 0x101010100000000;
    v44[18] = 1;
    *(_WORD *)&v44[19] = 256;
    v45 = 1;
    v46 = 0;
    v47 = 0;
    v48[0] = off_B4B28;
    v48[1] = swift::Demangle::__runtime::genericParameterName;
    v49 = v48;
    swift::Demangle::__runtime::nodeToString((swift::Demangle::__runtime::Node *)a2, (__int128 *)v44, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    swift::reflection::OpaqueArchetypeTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)a1, v34, v35, (uint64_t)p_p, size, a5, a3, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v38 = v49;
    if (v49 == v48)
    {
      v39 = 4;
      v38 = v48;
    }
    else
    {
      if (!v49)
        return;
      v39 = 5;
    }
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_122D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = 0;
  swift_asprintf((char **)(v1 - 24), *(const char **)v0, *(unsigned int *)(v0 + 8), *(unsigned int *)(v0 + 12), *(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return *(_QWORD *)(v1 - 24);
}

void swift_asprintf(char **a1, const char *__format, ...)
{
  int v4;
  size_t v5;
  char *v6;
  char *v7;
  va_list va;

  va_start(va, __format);
  v4 = vsnprintf(0, 0, __format, va);
  *a1 = 0;
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 + 1);
    v6 = (char *)malloc_type_malloc(v5, 0x887381A9uLL);
    if (v6)
    {
      v7 = v6;
      if (vsnprintf(v6, v5, __format, va) < 0)
        free(v7);
      else
        *a1 = v7;
    }
  }
}

uint64_t swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::string v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v2 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1288), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
    else
      v9 = *(std::string *)v2;
    operator new();
  }
  v7 = v6[5];
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::TypeRefID::addString(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  unint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  int *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _DWORD *v61;
  char *v62;
  _DWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  unint64_t v73;
  uint64_t v75;

  if (!a3)
  {
    v29 = *(char **)(a1 + 8);
    v28 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v29 >= v28)
    {
      v54 = *(char **)a1;
      v55 = (uint64_t)&v29[-*(_QWORD *)a1];
      v56 = v55 >> 2;
      v57 = (v55 >> 2) + 1;
      if (v57 >> 62)
LABEL_88:
        abort();
      v58 = v28 - (_QWORD)v54;
      if (v58 >> 1 > v57)
        v57 = v58 >> 1;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
        v59 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 >> 62)
LABEL_89:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v60 = operator new(4 * v59);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[4 * v56];
      v62 = &v60[4 * v59];
      *v61 = 0;
      v63 = v61 + 1;
      if (v29 != v54)
      {
        v64 = v29 - v54 - 4;
        if (v64 < 0x2C)
          goto LABEL_92;
        if ((unint64_t)(v29 - v60 - v55) < 0x20)
          goto LABEL_92;
        v65 = (v64 >> 2) + 1;
        v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        v67 = &v29[-v66];
        v61 = (_DWORD *)((char *)v61 - v66);
        v68 = &v60[4 * v56 - 16];
        v69 = v29 - 16;
        v70 = v65 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        v29 = v67;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_92:
          do
          {
            v72 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *--v61 = v72;
          }
          while (v29 != v54);
        }
      }
      *(_QWORD *)a1 = v61;
      *(_QWORD *)(a1 + 8) = v63;
      *(_QWORD *)(a1 + 16) = v62;
      if (v54)
        operator delete(v54);
      *(_QWORD *)(a1 + 8) = v63;
    }
    else
    {
      *(_DWORD *)v29 = 0;
      *(_QWORD *)(a1 + 8) = v29 + 4;
    }
    return;
  }
  v75 = a2;
  if (a3 >= 4)
  {
    v30 = 0;
    v4 = 0;
    v31 = a3 >> 2;
    v32 = *(char **)(a1 + 8);
    v73 = a3 >> 2;
    while (1)
    {
      v34 = *(char *)(a2 + v4)
          + (*(char *)(a2 + (v4 | 1)) << 8)
          + (*(char *)(a2 + (v4 | 2)) << 16)
          + (*(unsigned __int8 *)(a2 + (v4 | 3)) << 24);
      v35 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v32 >= v35)
        break;
      *(_DWORD *)v32 = v34;
      v33 = v32 + 4;
LABEL_39:
      *(_QWORD *)(a1 + 8) = v33;
      ++v30;
      v4 += 4;
      v32 = v33;
      if (v30 == v31)
        goto LABEL_4;
    }
    v36 = *(char **)a1;
    v37 = (uint64_t)&v32[-*(_QWORD *)a1];
    v38 = v37 >> 2;
    v39 = (v37 >> 2) + 1;
    if (v39 >> 62)
      goto LABEL_88;
    v40 = v35 - (_QWORD)v36;
    if (v40 >> 1 > v39)
      v39 = v40 >> 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
      v41 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      if (v41 >> 62)
        goto LABEL_89;
      v42 = operator new(4 * v41);
    }
    else
    {
      v42 = 0;
    }
    v43 = (int *)&v42[4 * v38];
    *v43 = v34;
    v33 = (char *)(v43 + 1);
    if (v32 != v36)
    {
      v44 = v32 - v36 - 4;
      if (v44 >= 0xBC)
      {
        v46 = (v32 - 4 - v36) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v42[v37 - 4 - v46] > &v42[v37 - 4])
        {
          v45 = v32;
        }
        else if (&v32[-v46 - 4] > v32 - 4)
        {
          v45 = v32;
        }
        else if ((unint64_t)(v32 - v42 - v37) >= 0x20)
        {
          v47 = (v44 >> 2) + 1;
          v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          v45 = &v32[-v48];
          v43 = (int *)((char *)v43 - v48);
          v49 = &v42[4 * v38 - 16];
          v50 = v32 - 16;
          v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_64;
        }
        else
        {
          v45 = v32;
        }
      }
      else
      {
        v45 = v32;
      }
      do
      {
        v53 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v43 = v53;
      }
      while (v45 != v36);
    }
LABEL_64:
    *(_QWORD *)a1 = v43;
    *(_QWORD *)(a1 + 8) = v33;
    *(_QWORD *)(a1 + 16) = &v42[4 * v41];
    if (v36)
      operator delete(v36);
    a2 = v75;
    v31 = v73;
    goto LABEL_39;
  }
  v4 = 0;
LABEL_4:
  v5 = a3;
  if (v4 < a3)
  {
    v6 = *(char **)(a1 + 8);
    while (1)
    {
      v8 = *(char *)(a2 + v4);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v6 >= v9)
        break;
      *(_DWORD *)v6 = v8;
      v7 = v6 + 4;
LABEL_7:
      *(_QWORD *)(a1 + 8) = v7;
      ++v4;
      v6 = v7;
      if (v4 == v5)
        return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v6[-*(_QWORD *)a1];
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      goto LABEL_88;
    v14 = v9 - (_QWORD)v10;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        goto LABEL_89;
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    *v17 = v8;
    v7 = (char *)(v17 + 1);
    if (v6 == v10)
    {
      v5 = a3;
      goto LABEL_25;
    }
    v18 = v6 - v10 - 4;
    if (v18 < 0xBC
      || (v21 = (v6 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL, &v16[v11 - 4 - v21] > &v16[v11 - 4])
      || &v6[-v21 - 4] > v6 - 4
      || (unint64_t)(v6 - v16 - v11) < 0x20)
    {
      v19 = v6;
      v5 = a3;
    }
    else
    {
      v22 = (v18 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v19 = &v6[-v23];
      v17 = (_DWORD *)((char *)v17 - v23);
      v24 = &v16[4 * v12 - 16];
      v25 = v6 - 16;
      v26 = v22 & 0x7FFFFFFFFFFFFFF8;
      v5 = a3;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_25:
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = &v16[4 * v15];
        if (v10)
          operator delete(v10);
        a2 = v75;
        goto LABEL_7;
      }
    }
    do
    {
      v20 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *--v17 = v20;
    }
    while (v19 != v10);
    goto LABEL_25;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>(_QWORD *a1, char **a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  char *v5;
  unsigned int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  const void *v15;

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2)
  {
    v4 = 0;
    v7 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v7)
      return 0;
  }
  else
  {
    v4 = 0;
    v5 = *a2;
    do
    {
      v6 = *(_DWORD *)v5;
      v5 += 4;
      v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + v6;
    }
    while (v5 != v2);
    v7 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v7)
      return 0;
  }
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v10 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    v13 = v2 - v3;
    do
    {
      v14 = v12[1];
      if (v14 == v4)
      {
        v15 = (const void *)v12[2];
        if (v12[3] - (_QWORD)v15 == v13 && !memcmp(v15, v3, v13))
          return v12;
      }
      else
      {
        if (v9 <= 1)
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        else if (v14 >= *(_QWORD *)&v7)
        {
          v14 %= *(_QWORD *)&v7;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

void swift::reflection::ObjCClassTypeRef::~ObjCClassTypeRef(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  operator delete();
}

void swift::reflection::TypeRef::~TypeRef(swift::reflection::TypeRef *this)
{
  operator delete();
}

_QWORD *std::vector<std::unique_ptr<swift::reflection::TypeRef const>>::__push_back_slow_path<std::unique_ptr<swift::reflection::TypeRef const>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

_QWORD *std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__emplace_unique_key_args<swift::reflection::TypeRefID,std::pair<swift::reflection::TypeRefID const,swift::reflection::ObjCClassTypeRef const*>>(uint64_t a1, char **a2, uint64_t a3)
{
  unint64_t v3;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_24;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *(_DWORD *)v9;
      v9 += 4;
      v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + v10;
    }
    while (v9 != v6);
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_24;
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v11)
      v3 = v8 % v11;
  }
  else
  {
    v3 = (v11 - 1) & v8;
  }
  v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
  if (v14)
  {
    v15 = *v14;
    if (*v14)
    {
      v16 = v6 - v7;
      do
      {
        v17 = v15[1];
        if (v17 == v8)
        {
          v18 = (const void *)v15[2];
          if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
            return v15;
        }
        else
        {
          if (v13 <= 1)
          {
            v17 &= v11 - 1;
          }
          else if (v17 >= v11)
          {
            v17 %= v11;
          }
          if (v17 != v3)
            break;
        }
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
LABEL_24:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v8;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = 0;
  v20 = *(const void **)a3;
  v19 = *(_QWORD *)(a3 + 8);
  v21 = v19 - *(_QWORD *)a3;
  if (v19 != *(_QWORD *)a3)
  {
    if (v21 < 0)
      abort();
    v22 = (char *)operator new(v19 - *(_QWORD *)a3);
    v15[2] = v22;
    v15[3] = v22;
    v23 = &v22[4 * (v21 >> 2)];
    v15[4] = v23;
    memcpy(v22, v20, v21);
    v15[3] = v23;
  }
  v15[5] = *(_QWORD *)(a3 + 24);
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_39;
    if (prime < v11)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < v11)
LABEL_39:
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v3 = v8 % v11;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *v15 = *v34;
LABEL_63:
    *v34 = v15;
    goto LABEL_64;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v33 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v35 = *(_QWORD *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *v7 = *v11;
            v12 = 8 * v13;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + v12);
            **(_QWORD **)(*(_QWORD *)a1 + v12) = v11;
            v11 = v7;
          }
          v13 = v8;
LABEL_19:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t swift::TypeLookupError::nop()
{
  return 0;
}

void swift::reflection::TypeRefBuilder::createTypeDecl(size_t *a1@<X1>, std::string *a2@<X8>)
{
  std::string __p;
  std::string v6;
  char v7;
  char v8;
  _DWORD v9[6];
  std::string v10;

  swift::Demangle::__runtime::mangleNode(a1, (uint64_t)v9);
  if (v9[0])
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[2].__r_.__value_.__s.__data_[8] = 0;
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_11;
  }
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p = v10;
LABEL_6:
    v6 = __p;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_6;
  std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_9:
  v7 = 0;
  v8 = 0;
  *a2 = v6;
  memset(&v6, 0, sizeof(v6));
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  a2[2].__r_.__value_.__s.__data_[0] = 0;
  a2[2].__r_.__value_.__s.__data_[8] = 1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
LABEL_11:
    operator delete(v10.__r_.__value_.__l.__data_);
}

__n128 std::__optional_storage_base<swift::reflection::TypeRefDecl,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::reflection::TypeRefDecl,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;
  unint64_t *v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(unsigned __int8 *)(a1 + 56) == a2[3].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
      v5 = (void **)(a1 + 24);
      v6 = &a2[1].n128_u64[1];
      if (*(unsigned __int8 *)(a1 + 48) == a2[3].n128_u8[0])
      {
        if (*(_BYTE *)(a1 + 48))
        {
          v7 = *v5;
          if (*v5)
          {
            *(_QWORD *)(a1 + 32) = v7;
            operator delete(v7);
            *v5 = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
          }
          result = *(__n128 *)((char *)a2 + 24);
          *(__n128 *)(a1 + 24) = result;
          *(_QWORD *)(a1 + 40) = a2[2].n128_u64[1];
          *v6 = 0;
          a2[2].n128_u64[0] = 0;
          a2[2].n128_u64[1] = 0;
        }
      }
      else if (*(_BYTE *)(a1 + 48))
      {
        v9 = *v5;
        if (*v5)
        {
          *(_QWORD *)(a1 + 32) = v9;
          operator delete(v9);
        }
        *(_BYTE *)(a1 + 48) = 0;
      }
      else
      {
        *v5 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        result = *(__n128 *)((char *)a2 + 24);
        *(__n128 *)(a1 + 24) = result;
        *(_QWORD *)(a1 + 40) = a2[2].n128_u64[1];
        *v6 = 0;
        a2[2].n128_u64[0] = 0;
        a2[2].n128_u64[1] = 0;
        *(_BYTE *)(a1 + 48) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v8 = *(void **)(a1 + 24);
      if (v8)
      {
        *(_QWORD *)(a1 + 32) = v8;
        operator delete(v8);
      }
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    if (a2[3].n128_u8[0])
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      result = *(__n128 *)((char *)a2 + 24);
      *(__n128 *)(a1 + 24) = result;
      *(_QWORD *)(a1 + 40) = a2[2].n128_u64[1];
      a2[1].n128_u64[1] = 0;
      a2[2].n128_u64[0] = 0;
      a2[2].n128_u64[1] = 0;
      *(_BYTE *)(a1 + 48) = 1;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

uint64_t swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const std::string::value_type *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::string v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v12, a3);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const std::string::value_type *)a2;
  else
    v6 = *(const std::string::value_type **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  swift::reflection::TypeRefID::addString((uint64_t)&v12, (uint64_t)v6, v7);
  v8 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 848), (char **)&v12);
  if (!v8)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v11 = *(std::string *)a2;
    operator new();
  }
  v9 = v8[5];
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v9;
}

void swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (v5 >= v4)
  {
    v8 = *a1;
    v9 = v5 - *a1;
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      goto LABEL_46;
    v12 = v4 - v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        goto LABEL_47;
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v4 = &v14[4 * v13];
    *(_DWORD *)v15 = a2;
    v7 = v15 + 4;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_50;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_50;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 -= v18;
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v23;
          v15 -= 4;
        }
        while (v6 != v8);
      }
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = v4;
    if (v8)
    {
      operator delete(v8);
      v4 = a1[2];
    }
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v7 = v5 + 4;
  }
  a1[1] = v7;
  if (v7 < v4)
  {
    *(_DWORD *)v7 = HIDWORD(a2);
    v24 = v7 + 4;
    goto LABEL_45;
  }
  v25 = *a1;
  v26 = v7 - *a1;
  v27 = v26 >> 2;
  v28 = (v26 >> 2) + 1;
  if (v28 >> 62)
LABEL_46:
    abort();
  v29 = v4 - v25;
  if (v29 >> 1 > v28)
    v28 = v29 >> 1;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
    v30 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
  {
    if (!(v30 >> 62))
    {
      v31 = operator new(4 * v30);
      goto LABEL_34;
    }
LABEL_47:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_34:
  v32 = &v31[4 * v27];
  *(_DWORD *)v32 = HIDWORD(a2);
  v24 = v32 + 4;
  if (v7 == v25)
    goto LABEL_43;
  v33 = v7 - v25 - 4;
  if (v33 < 0x2C)
  {
    v34 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - v31 - v26) < 0x20)
  {
    v34 = v7;
    do
    {
LABEL_42:
      v41 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v32 - 1) = v41;
      v32 -= 4;
    }
    while (v34 != v25);
    goto LABEL_43;
  }
  v35 = (v33 >> 2) + 1;
  v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
  v34 = &v7[-v36];
  v32 -= v36;
  v37 = &v31[4 * v27 - 16];
  v38 = v7 - 16;
  v39 = v35 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v40 = *(_OWORD *)v38;
    *(v37 - 1) = *((_OWORD *)v38 - 1);
    *v37 = v40;
    v37 -= 2;
    v38 -= 32;
    v39 -= 8;
  }
  while (v39);
  if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_42;
LABEL_43:
  *a1 = v32;
  a1[1] = v24;
  a1[2] = &v31[4 * v30];
  if (v25)
    operator delete(v25);
LABEL_45:
  a1[1] = v24;
}

void swift::reflection::NominalTypeRef::~NominalTypeRef(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  operator delete();
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_13A50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = 0;
  swift_asprintf((char **)(v1 - 24), *(const char **)v0, *(unsigned int *)(v0 + 8), *(unsigned int *)(v0 + 12), *(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return *(_QWORD *)(v1 - 24);
}

uint64_t swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  int v7;
  const std::string::value_type *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  size_t v16;
  void *v17;
  std::string v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(&v20, a4);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a2;
  else
    v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  swift::reflection::TypeRefID::addString((uint64_t)&v20, (uint64_t)v8, v9);
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      v12 = *v10++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(&v20, v12);
    }
    while (v10 != v11);
  }
  v13 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 888), &v20);
  if (!v13)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v19 = *(std::string *)a2;
    v15 = *a3;
    v16 = (char *)a3[1] - (char *)*a3;
    if (v16)
    {
      if ((v16 & 0x8000000000000000) != 0)
        abort();
      v17 = operator new(v16);
      memcpy(v17, v15, v16);
    }
    swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::BoundGenericTypeRef,std::string,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*>();
  }
  v14 = v13[5];
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  return v14;
}

uint64_t swift::reflection::TypeRefBuilder::createBoundGenericType(uint64_t a1, uint64_t a2, size_t __sz)
{
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  uint64_t *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  size_t *v22;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void *__p[3];
  void *v33[3];
  _BYTE *v34;
  _BYTE *v35;
  int v36[6];
  void *v37;
  char v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  char *v46;
  char v47;

  if (!*(_BYTE *)(a2 + 56))
    return 0;
  if (*(_BYTE *)(a2 + 48))
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v7 = *(_BYTE **)(a2 + 24);
    v6 = *(_BYTE **)(a2 + 32);
    v8 = v6 - v7;
    if (v6 == v7)
      goto LABEL_6;
    if ((v8 & 0x8000000000000000) == 0)
    {
      v9 = (uint64_t *)operator new(v6 - v7);
      v10 = (char *)&v9[v8 >> 3];
      v44 = v9;
      v46 = v10;
      memcpy(v9, v7, v8);
      v45 = (uint64_t *)v10;
LABEL_6:
      v47 = 1;
      v11 = *(_BYTE *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
      v40 = 0;
      v14 = swift::Demangle::__runtime::Demangler::demangleType(a1, v12, v13, v39);
      v15 = v40;
      if (v40 == v39)
      {
        v16 = 4;
        v15 = v39;
      }
      else
      {
        if (!v40)
          goto LABEL_23;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_23:
      if (!v14
        || (v21 = *(unsigned __int8 *)(v14 + 18), (v21 - 1) >= 2) && (v21 != 5 || !*(_DWORD *)(v14 + 8))
        || *(_WORD *)(v14 + 16) != 232)
      {
        v17 = 0;
        goto LABEL_34;
      }
      if ((v21 - 1) >= 2)
      {
        if (v21 != 5 || !*(_DWORD *)(v14 + 8))
        {
          v22 = 0;
          goto LABEL_39;
        }
        v14 = *(_QWORD *)v14;
      }
      v22 = *(size_t **)v14;
LABEL_39:
      swift::Demangle::__runtime::mangleNode(v22, (uint64_t)v36);
      if (v36[0])
      {
        v17 = 0;
        goto LABEL_59;
      }
      std::vector<swift::reflection::TypeRef const*>::vector(&v34, (uint64_t)&v44);
      v24 = v34;
      if ((unint64_t)(v35 - v34) > 0x1F40)
        goto LABEL_56;
      v25 = *(_QWORD *)(__sz + 8);
      if (v25 > 0x3E8)
        goto LABEL_56;
      if (v35 != v34)
      {
        v26 = 0;
        v27 = 0;
        v28 = (v35 - v34) >> 3;
        if (v28 <= 1)
          v28 = 1;
        while (1)
        {
          v29 = *(_QWORD *)&v34[8 * v26];
          if (v29 > v25)
            break;
          v27 += v29;
          if (v28 == ++v26)
            goto LABEL_50;
        }
        v17 = 0;
LABEL_58:
        v35 = v24;
        operator delete(v24);
LABEL_59:
        if (v38 < 0)
        {
          operator delete(v37);
          if (!v47)
            return v17;
        }
        else if (!v47)
        {
          return v17;
        }
LABEL_34:
        v20 = v44;
        if (v44)
        {
          v45 = v44;
          goto LABEL_36;
        }
        return v17;
      }
      v27 = 0;
LABEL_50:
      if (v27 == v25)
      {
        v30 = swift::reflection::TypeRefBuilder::reconstructParentsOfBoundGenericType(a1, (uint64_t *)v22, &v34, (const void **)__sz);
        v31 = (_BYTE *)(*(_QWORD *)__sz + 8 * *(_QWORD *)(__sz + 8));
        std::vector<swift::reflection::TypeRef const*>::vector<swift::reflection::TypeRef const* const*,0>(v33, &v31[-8 * *((_QWORD *)v35 - 1)], v31);
        std::vector<swift::reflection::TypeRef const*>::vector(__p, (uint64_t)v33);
        v17 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&v37, (uint64_t **)__p, v30);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v33[0])
        {
          v33[1] = v33[0];
          operator delete(v33[0]);
        }
        v24 = v34;
      }
      else
      {
LABEL_56:
        v17 = 0;
      }
      if (!v24)
        goto LABEL_59;
      goto LABEL_58;
    }
LABEL_65:
    abort();
  }
  v18 = *(const void **)__sz;
  v19 = *(_QWORD *)(__sz + 8);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  if (v19)
  {
    if (v19 < 0)
      goto LABEL_65;
    v41 = (uint64_t *)operator new(8 * v19);
    v43 = &v41[v19];
    memcpy(v41, v18, 8 * v19);
    v42 = v43;
  }
  v17 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2, &v41, 0);
  v20 = v41;
  if (v41)
  {
    v42 = v41;
LABEL_36:
    operator delete(v20);
  }
  return v17;
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::BoundGenericTypeRef,std::string,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*>()
{
  operator new();
}

_QWORD *std::vector<swift::reflection::TypeRef const*>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void swift::reflection::BoundGenericTypeRef::~BoundGenericTypeRef(swift::reflection::BoundGenericTypeRef *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  operator delete();
}

_QWORD *std::vector<swift::reflection::TypeRef const*>::vector<swift::reflection::TypeRef const* const*,0>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v4;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0)
      abort();
    v6 = (char *)operator new(a3 - a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v4 >> 3)];
    a1[2] = v7;
    memcpy(v6, a2, v4);
    a1[1] = v7;
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::reconstructParentsOfBoundGenericType(uint64_t a1, uint64_t *a2, _QWORD *a3, const void **a4)
{
  uint64_t result;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  void *v39;
  char *v40;
  char *v41;
  uint64_t v43;
  void *__p;
  void *v45;
  char *v46;
  int v47[6];
  void *v48;
  char v49;

  if (a3[1] - *a3 == 8)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    if (!a2)
      goto LABEL_67;
    v12 = *((unsigned __int8 *)a2 + 18);
    if ((v12 - 1) >= 2)
    {
      if (v12 != 5 || !*((_DWORD *)a2 + 2))
        goto LABEL_67;
      a2 = (uint64_t *)*a2;
    }
    a2 = (uint64_t *)*a2;
    v13 = *((unsigned __int16 *)a2 + 8);
    if (v13 == 24 || v13 == 219 || v13 == 61)
    {
      if (v11 < v10)
      {
        *(_QWORD *)v11 = a2;
        v11 += 8;
        goto LABEL_5;
      }
      v14 = v8 + 1;
      if ((v8 + 1) >> 61)
LABEL_70:
        abort();
      if ((v10 - v9) >> 2 > v14)
        v14 = (v10 - v9) >> 2;
      if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v8];
      *(_QWORD *)v17 = a2;
      v18 = v17 + 8;
      if (v11 == v9)
        goto LABEL_39;
      v19 = v11 - v9 - 8;
      if (v19 >= 0x168)
      {
        v21 = (v11 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
        if (&v16[8 * v8 - 8 - v21] > &v16[8 * v8 - 8])
        {
          v20 = v11;
        }
        else if (&v11[-v21 - 8] > v11 - 8)
        {
          v20 = v11;
        }
        else if ((unint64_t)(v11 - &v16[8 * v8]) >= 0x20)
        {
          v22 = (v19 >> 3) + 1;
          v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          v20 = &v11[-v23];
          v17 -= v23;
          v24 = &v16[8 * v8 - 16];
          v25 = v11 - 16;
          v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_38;
        }
        else
        {
          v20 = v11;
        }
      }
      else
      {
        v20 = v11;
      }
      do
      {
        v28 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v17 - 1) = v28;
        v17 -= 8;
      }
      while (v20 != v9);
LABEL_38:
      v11 = v9;
LABEL_39:
      v9 = v17;
      v10 = &v16[8 * v15];
      if (v11)
        operator delete(v11);
      v11 = v18;
    }
LABEL_5:
    v8 = (v11 - v9) >> 3;
  }
  while (v8 < ((uint64_t)(a3[1] - *a3) >> 3) - 1);
  v29 = v11 - 8;
  if (v9 != v11 && v29 > v9)
  {
    v31 = v9 + 8;
    do
    {
      v32 = *((_QWORD *)v31 - 1);
      *((_QWORD *)v31 - 1) = *(_QWORD *)v29;
      *(_QWORD *)v29 = v32;
      v29 -= 8;
      v33 = v31 >= v29;
      v31 += 8;
    }
    while (!v33);
  }
  if (v11 != v9)
  {
    v34 = 0;
    v35 = 0;
    v36 = (char *)*a4;
    v43 = a1;
    while (1)
    {
      swift::Demangle::__runtime::mangleNode(*(size_t **)&v9[8 * v34], (uint64_t)v47);
      if (v47[0])
      {
        v37 = 1;
        if (v49 < 0)
          goto LABEL_61;
      }
      else
      {
        v38 = *(_QWORD *)(*a3 + 8 * v34);
        if (!v38)
        {
          v37 = 7;
          if ((v49 & 0x80000000) == 0)
            goto LABEL_62;
LABEL_61:
          operator delete(v48);
          goto LABEL_62;
        }
        if (v38 < 0)
          goto LABEL_70;
        v39 = operator new(8 * v38);
        memcpy(v39, v36, 8 * v38);
        v40 = (char *)operator new(8 * v38);
        v41 = &v40[8 * v38];
        __p = v40;
        v46 = v41;
        memcpy(v40, v39, 8 * v38);
        v45 = v41;
        v35 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(v43, (uint64_t)&v48, (uint64_t **)&__p, v35);
        if (__p)
        {
          v45 = __p;
          operator delete(__p);
        }
        v36 += 8 * v38;
        operator delete(v39);
        v37 = 0;
        if (v49 < 0)
          goto LABEL_61;
      }
LABEL_62:
      if (v37 != 7 && v37)
      {
        v35 = 0;
        goto LABEL_68;
      }
      if (v8 == ++v34)
        goto LABEL_68;
    }
  }
LABEL_67:
  v35 = 0;
  result = 0;
  if (v9)
  {
LABEL_68:
    operator delete(v9);
    return v35;
  }
  return result;
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_14670()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = 0;
  swift_asprintf((char **)(v1 - 24), *(const char **)v0, *(unsigned int *)(v0 + 8), *(unsigned int *)(v0 + 12), *(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32), *(unsigned int *)(v0 + 36));
  return *(_QWORD *)(v1 - 24);
}

uint64_t swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::string v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v2 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 808), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
    else
      v9 = *(std::string *)v2;
    operator new();
  }
  v7 = v6[5];
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::BuiltinTypeRef::~BuiltinTypeRef(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  operator delete();
}

uint64_t swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *v8;
  void *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v8, a2);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v8, a3);
  v5 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1088), (char **)&v8);
  if (!v5)
    operator new();
  v6 = v5[5];
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v6;
}

void swift::reflection::TypeRefID::addInteger(swift::reflection::TypeRefID *this, int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = (char *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)this;
    v9 = (uint64_t)&v5[-*(_QWORD *)this];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v17 = v5 - v8 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v19];
      v15 = (_DWORD *)((char *)v15 - v19);
      v20 = &v14[4 * v10 - 16];
      v21 = v5 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v24;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)this = v15;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v7 = v5 + 4;
  }
  *((_QWORD *)this + 1) = v7;
}

void swift::reflection::MetatypeTypeRef::~MetatypeTypeRef(swift::reflection::MetatypeTypeRef *this)
{
  operator delete();
}

uint64_t swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1128), (char **)&v6);
  if (!v3)
    operator new();
  v4 = v3[5];
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::ExistentialMetatypeTypeRef::~ExistentialMetatypeTypeRef(swift::reflection::ExistentialMetatypeTypeRef *this)
{
  operator delete();
}

void __swift::__runtime::llvm::SmallVectorTemplateBase<std::optional<std::pair<std::string,BOOL>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v14);
  v4 = v3;
  v5 = *(_QWORD **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = v3 + 32;
    v8 = 40 * v6;
    do
    {
      *(v7 - 32) = 0;
      *v7 = 0;
      if (*((_BYTE *)v5 + 32))
      {
        v9 = *(_OWORD *)v5;
        *((_QWORD *)v7 - 2) = v5[2];
        *((_OWORD *)v7 - 2) = v9;
        v5[1] = 0;
        v5[2] = 0;
        *v5 = 0;
        *(v7 - 8) = *((_BYTE *)v5 + 24);
        *v7 = 1;
      }
      v5 += 5;
      v7 += 40;
      v8 -= 40;
    }
    while (v8);
    v5 = *(_QWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 5 * v10;
      do
      {
        v12 = (void **)&v5[v11];
        if (LOBYTE(v5[v11 - 1]) && *((char *)v12 - 17) < 0)
          operator delete(*(v12 - 5));
        v11 -= 5;
      }
      while (v11 * 8);
      v5 = *(_QWORD **)a1;
    }
  }
  v13 = v14;
  if (v5 != (_QWORD *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string v5;
  std::string v6;
  void *__p;
  void *v8;
  char v9;
  std::string v10;
  void *v11;
  void *v12;
  char v13;
  char v14;

  if (*(_BYTE *)(a2 + 24))
    return swift::reflection::ObjCProtocolTypeRef::create<swift::reflection::TypeRefBuilder>(a1, a2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    v5 = *(std::string *)a2;
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_5:
      v6 = v5;
      goto LABEL_8;
    }
  }
  std::string::__init_copy_ctor_external(&v6, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
LABEL_8:
  LOBYTE(__p) = 0;
  v9 = 0;
  v10 = v6;
  memset(&v6, 0, sizeof(v6));
  LOBYTE(v11) = 0;
  v13 = 0;
  v14 = 1;
  v4 = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(a1, (uint64_t)&v10, 0);
  if (v14)
  {
    if (v13 && v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (v9)
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v4;
LABEL_21:
    operator delete(v5.__r_.__value_.__l.__data_);
    return v4;
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
  return v4;
}

uint64_t swift::reflection::ProtocolCompositionTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  const void *v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  void *v21;
  void *v22;
  uint64_t v23;

  v9 = *(const void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = v8 - *(_QWORD *)a2;
  if (v8 == *(_QWORD *)a2)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if (v10 < 0)
      goto LABEL_19;
    v11 = (uint64_t *)operator new(v8 - *(_QWORD *)a2);
    v12 = &v11[v10 >> 3];
    memcpy(v11, v9, v10);
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v21, a4);
  if (v11 != v12)
  {
    v13 = v11;
    do
    {
      v14 = *v13++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, v14);
    }
    while (v13 != v12);
  }
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, a3);
  if (v11)
    operator delete(v11);
  v15 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1008), (char **)&v21);
  if (!v15)
  {
    v17 = *(const void **)a2;
    v18 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v18)
      goto LABEL_15;
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = operator new(v18);
      memcpy(v19, v17, v18);
LABEL_15:
      swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ProtocolCompositionTypeRef,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*,BOOL>();
    }
LABEL_19:
    abort();
  }
  v16 = v15[5];
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return v16;
}

uint64_t swift::reflection::ObjCProtocolTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::string v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v2 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1328), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
    else
      v9 = *(std::string *)v2;
    operator new();
  }
  v7 = v6[5];
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::ObjCProtocolTypeRef::~ObjCProtocolTypeRef(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  operator delete();
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ProtocolCompositionTypeRef,std::vector<swift::reflection::TypeRef const*>,swift::reflection::TypeRef const*,BOOL>()
{
  operator new();
}

void swift::reflection::ProtocolCompositionTypeRef::~ProtocolCompositionTypeRef(swift::reflection::ProtocolCompositionTypeRef *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  void *v21;
  void *v22;
  uint64_t v23;

  v7 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = v6 - *(_QWORD *)a3;
  if (v6 == *(_QWORD *)a3)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_22;
    v9 = (char *)operator new(v6 - *(_QWORD *)a3);
    v10 = &v9[16 * (v8 >> 4)];
    memcpy(v9, v7, v8);
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, a2);
  if (v9 != v10)
  {
    v11 = v9;
    do
    {
      v12 = *(_QWORD *)v11;
      v13 = *((_QWORD *)v11 + 1);
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8);
      v14 = v12 & 7;
      if (v14 == 3)
        swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v21, 0);
      else
        swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v21, v13);
      swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v21, v14);
      v11 += 16;
    }
    while (v11 != v10);
  }
  if (v9)
    operator delete(v9);
  v15 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1048), (char **)&v21);
  if (!v15)
  {
    v17 = *(const void **)a3;
    v18 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (!v18)
      goto LABEL_18;
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = operator new(v18);
      memcpy(v19, v17, v18);
LABEL_18:
      swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ConstrainedExistentialTypeRef,swift::reflection::ProtocolCompositionTypeRef const*,std::vector<swift::reflection::TypeRefRequirement>>();
    }
LABEL_22:
    abort();
  }
  v16 = v15[5];
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return v16;
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::ConstrainedExistentialTypeRef,swift::reflection::ProtocolCompositionTypeRef const*,std::vector<swift::reflection::TypeRefRequirement>>()
{
  operator new();
}

void swift::reflection::ConstrainedExistentialTypeRef::~ConstrainedExistentialTypeRef(swift::reflection::ConstrainedExistentialTypeRef *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, int a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *v8;
  void *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v8, a2);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)&v8, a3);
  v5 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1168), (char **)&v8);
  if (!v5)
    operator new();
  v6 = v5[5];
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v6;
}

void swift::reflection::GenericTypeParameterTypeRef::~GenericTypeParameterTypeRef(swift::reflection::GenericTypeParameterTypeRef *this)
{
  operator delete();
}

void swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_15AFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = 0;
  swift_asprintf((char **)(v1 - 24), *(const char **)v0, *(unsigned int *)(v0 + 8), *(unsigned int *)(v0 + 12), *(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned int *)(v0 + 40));
  return *(_QWORD *)(v1 - 24);
}

_QWORD *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  __int128 **v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  __int128 **v8;
  __int128 *v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  int v14;

  v4 = (__int128 **)(a2 + 2);
  if (*((_WORD *)a2 + 8) == 224)
  {
    v5 = result;
    v13 = 0uLL;
    v14 = 0;
    v6 = *((unsigned __int8 *)a2 + 18);
    v7 = a2;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        v8 = (__int128 **)*a2;
        v7 = (uint64_t *)*a2;
        goto LABEL_10;
      }
      v7 = 0;
    }
    switch(v6)
    {
      case 1:
        v4 = (__int128 **)(a2 + 1);
        if (v7 != a2 + 1)
          goto LABEL_18;
        goto LABEL_30;
      case 2:
        goto LABEL_18;
      case 5:
        v8 = (__int128 **)*a2;
LABEL_10:
        v4 = &v8[*((unsigned int *)a2 + 2)];
        if (v7 != (uint64_t *)v4)
          goto LABEL_18;
        goto LABEL_30;
    }
    v4 = 0;
    if (v7)
    {
      while (1)
      {
LABEL_18:
        v9 = (__int128 *)*v7;
        v10 = *(unsigned __int16 *)(*v7 + 16);
        if (v10 == 276)
        {
          v14 |= 0x80u;
          *(_BYTE *)*v5 = 1;
          goto LABEL_17;
        }
        if (v10 != 232)
        {
          if (v10 != 225)
            operator new();
          v13 = *v9;
          goto LABEL_17;
        }
        v11 = *((unsigned __int8 *)v9 + 18);
        if ((v11 - 1) < 2)
          goto LABEL_26;
        if (v11 == 5 && *((_DWORD *)v9 + 2))
          break;
        v12 = 0;
LABEL_28:
        result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator()(v5[1], v12, (unint64_t)&v13, (uint64_t)a3);
        if (a3[16])
          return result;
LABEL_17:
        if (++v7 == (uint64_t *)v4)
          goto LABEL_30;
      }
      v9 = *(__int128 **)v9;
LABEL_26:
      v12 = *(_QWORD *)v9;
      goto LABEL_28;
    }
  }
LABEL_30:
  *a3 = 0;
  a3[16] = 0;
  return result;
}

_QWORD *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v5 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    v6 = *(unsigned __int16 *)(a2 + 16);
    if (v6 <= 0xCF)
      break;
    switch(v6)
    {
      case 0xD0u:
        v7 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 2;
        break;
      case 0xD1u:
        v7 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 3;
        break;
      case 0x146u:
        v7 = *(_DWORD *)(a3 + 24) | 0x200;
        break;
      default:
        return swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>(v5, (uint64_t *)a2, (**(_DWORD **)(a1 + 8) + 1), a3, *(_QWORD *)(a1 + 16), a4);
    }
LABEL_20:
    *(_DWORD *)(a3 + 24) = v7;
    v8 = *(unsigned __int8 *)(a2 + 18);
    if ((v8 - 1) < 2)
      goto LABEL_4;
    if (v8 == 5 && *(_DWORD *)(a2 + 8))
    {
      a2 = *(_QWORD *)a2;
LABEL_4:
      a2 = *(_QWORD *)a2;
      goto LABEL_5;
    }
    a2 = 0;
LABEL_5:
    **(_BYTE **)a1 = 1;
  }
  if (*(unsigned __int16 *)(a2 + 16) > 0x7Eu)
  {
    if (v6 == 127)
    {
      v7 = *(_DWORD *)(a3 + 24) | 0x400;
    }
    else
    {
      if (v6 != 128)
        return swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>(v5, (uint64_t *)a2, (**(_DWORD **)(a1 + 8) + 1), a3, *(_QWORD *)(a1 + 16), a4);
      v7 = *(_DWORD *)(a3 + 24) | 0x800;
    }
    goto LABEL_20;
  }
  if (v6 == 123)
  {
    v7 = *(_DWORD *)(a3 + 24) & 0xFFFFFF80 | 1;
    goto LABEL_20;
  }
  if (v6 == 11 || v6 == 64)
  {
    *(_DWORD *)(a3 + 24) |= 0x100u;
    **(_BYTE **)a1 = 1;
  }
  return swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>(v5, (uint64_t *)a2, (**(_DWORD **)(a1 + 8) + 1), a3, *(_QWORD *)(a1 + 16), a4);
}

void _ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

char *sub_15E90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  const char **v14;
  char *v16;

  v16 = 0;
  swift_asprintf(&v16, *v14);
  return v16;
}

_QWORD *swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeTypeSequenceElement<swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledFunctionInputType(swift::Demangle::__runtime::Node *,unsigned int,llvm::SmallVectorImpl<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>> &,BOOL &)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)#1}::operator() const(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>&)::{lambda(swift::reflection::TypeRef const*)#1}>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v9;
  _QWORD *result;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, _QWORD);
  unsigned __int16 v25;

  if (*((_WORD *)a2 + 8) == 232)
  {
    v9 = *((unsigned __int8 *)a2 + 18);
    if ((v9 - 1) < 2)
    {
LABEL_6:
      a2 = (uint64_t *)*a2;
      goto LABEL_8;
    }
    if (v9 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (uint64_t *)*a2;
      goto LABEL_6;
    }
    a2 = 0;
  }
LABEL_8:
  if (*((_WORD *)a2 + 8) == 229)
  {
    switch(*((_BYTE *)a2 + 18))
    {
      case 2:
        goto LABEL_23;
      case 5:
        if (*((_DWORD *)a2 + 2) <= 1u)
          goto LABEL_21;
        a2 = (uint64_t *)*a2;
LABEL_23:
        result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v23, a1, a2[1], a3, 1);
        if (v25 != 1)
          goto LABEL_26;
        v19 = v23;
        v20 = v24;
        *(_QWORD *)(a6 + 8) = v24;
        result = (_QWORD *)v20(v19, 2, 0);
        *(_QWORD *)a6 = result;
        *(_BYTE *)(a6 + 16) = 1;
        if (v25 == 1)
          result = (_QWORD *)v24(v23, 3, 0);
        break;
      default:
LABEL_21:
        operator new();
    }
  }
  else
  {
    result = swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v23, a1, a2, a3, 0);
    v11 = v25;
    if (v25 == 1)
    {
      v12 = v23;
      v13 = v24;
      *(_QWORD *)(a6 + 8) = v24;
      result = (_QWORD *)v13(v12, 2, 0);
      *(_QWORD *)a6 = result;
      *(_BYTE *)(a6 + 16) = 1;
    }
    else
    {
      v14 = v23;
      if (v25)
        v14 = 0;
      *(_QWORD *)(a4 + 16) = v14;
      v15 = *(unsigned int *)(a5 + 8);
      v16 = *(_QWORD *)a5;
      if (v15 >= *(_DWORD *)(a5 + 12))
      {
        v21 = v15 + 1;
        if (v16 <= a4 && v16 + 32 * v15 > a4)
        {
          v22 = a4 - v16;
          result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21, 32);
          v16 = *(_QWORD *)a5;
          a4 = *(_QWORD *)a5 + v22;
        }
        else
        {
          result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21, 32);
          v16 = *(_QWORD *)a5;
        }
      }
      v17 = (_OWORD *)(v16 + 32 * *(unsigned int *)(a5 + 8));
      v18 = *(_OWORD *)(a4 + 16);
      *v17 = *(_OWORD *)a4;
      v17[1] = v18;
      ++*(_DWORD *)(a5 + 8);
    }
    if (v25 == 1)
      result = (_QWORD *)v24(v23, 3, 0);
    if (v11 != 1)
    {
LABEL_26:
      *(_BYTE *)a6 = 0;
      *(_BYTE *)(a6 + 16) = 0;
    }
  }
  return result;
}

uint64_t swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, unsigned int a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  void *v14;
  void *v16[3];

  swift::reflection::FunctionTypeRef::Profile(a2, a3, a4, a5, a6, a7, a8, (uint64_t)v16);
  v10 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 968), (char **)v16);
  if (!v10)
  {
    v12 = (const void *)*a2;
    v13 = a2[1] - *a2;
    if (v13)
    {
      if ((v13 & 0x8000000000000000) != 0)
        abort();
      v14 = operator new(v13);
      memcpy(v14, v12, v13 - 4);
    }
    swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::FunctionTypeRef,std::vector<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,swift::TargetFunctionTypeFlags<unsigned long>,swift::TargetExtendedFunctionTypeFlags<unsigned int>,swift::TargetFunctionMetadataDifferentiabilityKind<unsigned long>,swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>();
  }
  v11 = v10[5];
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  return v11;
}

void swift::reflection::FunctionTypeRef::Profile(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **p_dst;
  unint64_t v21;
  void **__dst;
  size_t v28;
  unint64_t v29;

  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    while (1)
    {
      v12 = *(const void **)v10;
      if (*(_QWORD *)v10)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      __dst = 0;
      v28 = 0;
      v29 = 0;
LABEL_15:
      if ((v17 & 0x80u) == 0)
        p_dst = (void **)&__dst;
      else
        p_dst = v16;
      if ((v17 & 0x80u) == 0)
        v21 = v17;
      else
        v21 = v15;
      swift::reflection::TypeRefID::addString(a8, (uint64_t)p_dst, v21);
      if (SHIBYTE(v29) < 0)
        operator delete(__dst);
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, *(_QWORD *)(v10 + 16));
      swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, *(_DWORD *)(v10 + 24));
      v10 += 32;
      if (v10 == v11)
        goto LABEL_23;
    }
    v13 = *(_QWORD *)(v10 + 8);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      v14 = (void **)operator new(v18 + 1);
      v28 = v13;
      v29 = v19 | 0x8000000000000000;
      __dst = v14;
    }
    else
    {
      HIBYTE(v29) = *(_QWORD *)(v10 + 8);
      v14 = (void **)&__dst;
      if (!v13)
        goto LABEL_14;
    }
    memmove(v14, v12, v13);
LABEL_14:
    *((_BYTE *)v14 + v13) = 0;
    v17 = HIBYTE(v29);
    v16 = __dst;
    v15 = v28;
    goto LABEL_15;
  }
LABEL_23:
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, a2);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, a3);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, a4);
  swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a8, a5);
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, a6);
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a8, a7);
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::FunctionTypeRef,std::vector<swift::Demangle::__runtime::FunctionParam<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,swift::TargetFunctionTypeFlags<unsigned long>,swift::TargetExtendedFunctionTypeFlags<unsigned int>,swift::TargetFunctionMetadataDifferentiabilityKind<unsigned long>,swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>()
{
  operator new();
}

void swift::reflection::TypeRefID::addInteger(swift::reflection::TypeRefID *this, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _DWORD *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  int v43;

  v5 = (char *)*((_QWORD *)this + 1);
  v4 = (char *)*((_QWORD *)this + 2);
  v6 = v5;
  if (v5 >= v4)
  {
    v8 = *(char **)this;
    v9 = (uint64_t)&v5[-*(_QWORD *)this];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      goto LABEL_46;
    v12 = v4 - v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        goto LABEL_47;
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v4 = &v14[4 * v13];
    *v15 = a2;
    v7 = (char *)(v15 + 1);
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_50;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_50;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 = (_DWORD *)((char *)v15 - v18);
      v19 = &v14[4 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)this = v15;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v4;
    if (v8)
    {
      operator delete(v8);
      v4 = (char *)*((_QWORD *)this + 2);
    }
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v7 = v5 + 4;
  }
  *((_QWORD *)this + 1) = v7;
  v24 = HIDWORD(a2);
  if (v7 < v4)
  {
    *(_DWORD *)v7 = HIDWORD(a2);
    v25 = v7 + 4;
    goto LABEL_45;
  }
  v26 = *(char **)this;
  v27 = (uint64_t)&v7[-*(_QWORD *)this];
  v28 = v27 >> 2;
  v29 = (v27 >> 2) + 1;
  if (v29 >> 62)
LABEL_46:
    abort();
  v30 = v4 - v26;
  if (v30 >> 1 > v29)
    v29 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (v31)
  {
    if (!(v31 >> 62))
    {
      v32 = operator new(4 * v31);
      goto LABEL_34;
    }
LABEL_47:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v32 = 0;
LABEL_34:
  v33 = &v32[4 * v28];
  v34 = &v32[4 * v31];
  *v33 = v24;
  v25 = v33 + 1;
  if (v7 == v26)
    goto LABEL_43;
  v35 = v7 - v26 - 4;
  if (v35 < 0x2C)
  {
    v36 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - v32 - v27) < 0x20)
  {
    v36 = v7;
    do
    {
LABEL_42:
      v43 = *((_DWORD *)v36 - 1);
      v36 -= 4;
      *--v33 = v43;
    }
    while (v36 != v26);
    goto LABEL_43;
  }
  v37 = (v35 >> 2) + 1;
  v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
  v36 = &v7[-v38];
  v33 = (_DWORD *)((char *)v33 - v38);
  v39 = &v32[4 * v28 - 16];
  v40 = v7 - 16;
  v41 = v37 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v42 = *(_OWORD *)v40;
    *(v39 - 1) = *((_OWORD *)v40 - 1);
    *v39 = v42;
    v39 -= 2;
    v40 -= 32;
    v41 -= 8;
  }
  while (v41);
  if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_42;
LABEL_43:
  *(_QWORD *)this = v33;
  *((_QWORD *)this + 1) = v25;
  *((_QWORD *)this + 2) = v34;
  if (v26)
    operator delete(v26);
LABEL_45:
  *((_QWORD *)this + 1) = v25;
}

void swift::reflection::FunctionTypeRef::~FunctionTypeRef(swift::reflection::FunctionTypeRef *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getConventionFromString(char *__s1, size_t __n)
{
  uint64_t v5;
  uint64_t v6;

  switch(__n)
  {
    case 3uLL:
      if (*(_WORD *)__s1 != 26944 || __s1[2] != 110)
        goto LABEL_26;
      v5 = 0;
      v6 = 0x100000000;
      break;
    case 6uLL:
      if (!memcmp(__s1, "@inout", __n))
      {
        v6 = 0x100000000;
        v5 = 3;
      }
      else
      {
        if (memcmp(__s1, "@owned", __n))
          goto LABEL_26;
        v6 = 0x100000000;
        v5 = 5;
      }
      break;
    case 8uLL:
      if (memcmp(__s1, "@unowned", __n))
        goto LABEL_26;
      v6 = 0x100000000;
      v5 = 6;
      break;
    case 0xBuLL:
      if (!memcmp(__s1, "@guaranteed", __n))
      {
        v6 = 0x100000000;
        v5 = 7;
      }
      else if (*(_QWORD *)__s1 == 0x776F5F6B63617040 && *(_QWORD *)(__s1 + 3) == 0x64656E776F5F6B63)
      {
        v6 = 0x100000000;
        v5 = 8;
      }
      else
      {
        if (memcmp(__s1, "@pack_inout", __n))
          goto LABEL_26;
        v6 = 0x100000000;
        v5 = 10;
      }
      break;
    case 0xCuLL:
      if (memcmp(__s1, "@in_constant", __n))
        goto LABEL_26;
      v6 = 0x100000000;
      v5 = 1;
      break;
    case 0xEuLL:
      if (memcmp(__s1, "@in_guaranteed", __n))
        goto LABEL_26;
      v6 = 0x100000000;
      v5 = 2;
      break;
    case 0x10uLL:
      if (!memcmp(__s1, "@inout_aliasable", __n))
      {
        v6 = 0x100000000;
        v5 = 4;
      }
      else
      {
        if (memcmp(__s1, "@pack_guaranteed", __n))
          goto LABEL_26;
        v6 = 0x100000000;
        v5 = 9;
      }
      break;
    default:
LABEL_26:
      v6 = 0;
      v5 = 0;
      break;
  }
  return v5 | v6;
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>::getDifferentiabilityFromString(_QWORD *a1, uint64_t a2)
{
  if (!a2)
    return 256;
  if (a2 == 13 && *a1 == 0x76697265446F6E40 && *(_QWORD *)((char *)a1 + 5) == 0x6576697461766972)
    return 257;
  return 0;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 v7;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a1, a2, a3, a4);
  v5 = *(_QWORD *)a1 + 16 * v4;
  v6 = *a3;
  v7 = *a4;
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = v6;
  *(_BYTE *)(v5 + 12) = v7;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 16 * v5 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
  *v9 = v5;
  v9[1] = v6 | (v7 << 32);
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 16 * v9 - 16;
}

uint64_t swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>::getConventionFromString(_DWORD *a1, size_t __n)
{
  uint64_t v2;
  uint64_t v3;

  switch(__n)
  {
    case 4uLL:
      if (*a1 != 1953853248)
        goto LABEL_13;
      v2 = 0;
      v3 = 0x100000000;
      break;
    case 6uLL:
      if (memcmp(a1, "@owned", __n))
        goto LABEL_13;
      v3 = 0x100000000;
      v2 = 1;
      break;
    case 8uLL:
      if (memcmp(a1, "@unowned", __n))
        goto LABEL_13;
      v3 = 0x100000000;
      v2 = 2;
      break;
    case 9uLL:
      if (memcmp(a1, "@pack_out", __n))
        goto LABEL_13;
      v3 = 0x100000000;
      v2 = 5;
      break;
    case 0xDuLL:
      if (memcmp(a1, "@autoreleased", __n))
        goto LABEL_13;
      v3 = 0x100000000;
      v2 = 4;
      break;
    case 0x16uLL:
      if (memcmp(a1, "@unowned_inner_pointer", __n))
        goto LABEL_13;
      v3 = 0x100000000;
      v2 = 3;
      break;
    default:
LABEL_13:
      v3 = 0;
      v2 = 0;
      break;
  }
  return v2 | v3;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>>::emplace_back<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  v5 = *a3;
  *(_QWORD *)v4 = *a2;
  *(_DWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 12) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(_QWORD *)a1 + 16 * v4 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,swift::Demangle::__runtime::ImplResultConvention &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, __int128 **a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  size_t v10;
  void *v11;
  __int128 *v12;
  __int128 *v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  void *v21[3];

  swift::reflection::TupleTypeRef::Profile((uint64_t **)a2, a3, (uint64_t)v21);
  v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 928), (char **)v21);
  if (!v6)
  {
    v9 = *(uint64_t **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v10 = v8 - *(_QWORD *)a2;
    if (v8 != *(_QWORD *)a2)
    {
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_17;
      v11 = operator new(v8 - *(_QWORD *)a2);
      memcpy(v11, v9, v10);
    }
    v13 = *a3;
    v12 = a3[1];
    v14 = (char *)v12 - (char *)v13;
    if (v12 == v13)
      goto LABEL_13;
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) < 0xAAAAAAAAAAAAAABLL)
    {
      v15 = (char *)operator new(v14);
      v16 = 0;
      do
      {
        v17 = (char *)v13 + v16;
        v18 = (std::string *)&v15[v16];
        if (*((char *)v13 + v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
        }
        else
        {
          v19 = *(_OWORD *)v17;
          v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        v16 += 24;
      }
      while ((__int128 *)((char *)v13 + v16) != v12);
LABEL_13:
      operator new();
    }
LABEL_17:
    abort();
  }
  v7 = v6[5];
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  return v7;
}

_QWORD *std::vector<std::string>::__init_with_size[abi:nn180100]<__swift::__runtime::llvm::StringRef const*,__swift::__runtime::llvm::StringRef const*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  const void *v13;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
LABEL_16:
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    for (v6[2] = &result[v7]; a2 != a3; a2 += 16)
    {
      v12 = *(_QWORD *)(a2 + 8);
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_16;
      v13 = *(const void **)a2;
      if (v12 >= 0x17)
      {
        v9 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v9 = v12 | 7;
        v10 = v9 + 1;
        v11 = operator new(v9 + 1);
        v8[1] = v12;
        v8[2] = v10 | 0x8000000000000000;
        *v8 = v11;
      }
      else
      {
        *((_BYTE *)v8 + 23) = v12;
        v11 = v8;
        if (!v12)
          goto LABEL_9;
      }
      result = memmove(v11, v13, v12);
LABEL_9:
      *((_BYTE *)v11 + v12) = 0;
      v8 += 3;
    }
    v6[1] = v8;
  }
  return result;
}

void swift::reflection::TupleTypeRef::Profile(uint64_t **a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 *i;
  __int128 *v9;
  __int128 v10;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      v7 = *v5++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a3, v7);
    }
    while (v5 != v6);
  }
  v9 = *a2;
  for (i = a2[1]; v9 != i; v9 = (__int128 *)((char *)v9 + 24))
  {
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    swift::reflection::TypeRefID::addString(a3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void swift::reflection::TupleTypeRef::~TupleTypeRef(swift::reflection::TupleTypeRef *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
  operator delete();
}

uint64_t swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::string v16;
  std::string v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v18, a2, v9);
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>(&v18, a3);
  v10 = *(char *)(a4 + 23);
  if (v10 >= 0)
    v11 = a4;
  else
    v11 = *(_QWORD *)a4;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a4 + 23);
  else
    v12 = *(_QWORD *)(a4 + 8);
  swift::reflection::TypeRefID::addString((uint64_t)&v18, v11, v12);
  v13 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1208), &v18);
  if (!v13)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      if ((*(char *)(a4 + 23) & 0x80000000) == 0)
        goto LABEL_14;
    }
    else
    {
      v17 = *(std::string *)v6;
      if ((*(char *)(a4 + 23) & 0x80000000) == 0)
      {
LABEL_14:
        v16 = *(std::string *)a4;
        goto LABEL_17;
      }
    }
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
LABEL_17:
    swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::DependentMemberTypeRef,std::string,swift::reflection::TypeRef const*,std::string>();
  }
  v14 = v13[5];
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  return v14;
}

void swift::reflection::TypeRefBuilder::makeTypeRef<swift::reflection::DependentMemberTypeRef,std::string,swift::reflection::TypeRef const*,std::string>()
{
  operator new();
}

void swift::reflection::DependentMemberTypeRef::~DependentMemberTypeRef(void **this)
{
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[2]);
    return;
  }
  operator delete(this[6]);
  if (*((char *)this + 39) < 0)
    goto LABEL_5;
}

{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 39) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[2]);
LABEL_3:
  operator delete();
}

uint64_t swift::reflection::UnownedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1488), (char **)&v6);
  if (!v3)
    operator new();
  v4 = v3[5];
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::UnownedStorageTypeRef::~UnownedStorageTypeRef(swift::reflection::UnownedStorageTypeRef *this)
{
  operator delete();
}

uint64_t swift::reflection::UnmanagedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1528), (char **)&v6);
  if (!v3)
    operator new();
  v4 = v3[5];
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::UnmanagedStorageTypeRef::~UnmanagedStorageTypeRef(swift::reflection::UnmanagedStorageTypeRef *this)
{
  operator delete();
}

uint64_t swift::reflection::WeakStorageTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1448), (char **)&v6);
  if (!v3)
    operator new();
  v4 = v3[5];
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::WeakStorageTypeRef::~WeakStorageTypeRef(swift::reflection::WeakStorageTypeRef *this)
{
  operator delete();
}

uint64_t swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)&v6, a2);
  v3 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1568), (char **)&v6);
  if (!v3)
    operator new();
  v4 = v3[5];
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v4;
}

void swift::reflection::SILBoxTypeRef::~SILBoxTypeRef(swift::reflection::SILBoxTypeRef *this)
{
  operator delete();
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v4 | (v5 << 32);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 8 * v7 - 8;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::reflection::TypeRef const*,swift::reflection::TypeRef const*>,true>::growAndEmplaceBack<swift::reflection::TypeRef const*&,swift::reflection::TypeRef const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::reflection::SILBoxTypeWithLayoutTypeRef::Field,true>::growAndEmplaceBack<swift::reflection::TypeRef const*,BOOL &>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v4 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 != 0));
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 8 * v7 - 8;
}

uint64_t swift::reflection::SILBoxTypeWithLayoutTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7)
{
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v23;
  void *v24;
  char *v25;
  void *__p;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  void *v32[3];

  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (a3)
  {
    if (a3 < 0)
      goto LABEL_22;
    v14 = (char *)operator new(8 * a3);
    v15 = &v14[8 * a3];
    v23 = v14;
    v25 = v15;
    memcpy(v14, a2, 8 * a3);
    v24 = v15;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  if (a5)
  {
    if (a5 < 0)
      goto LABEL_22;
    v16 = (char *)operator new(16 * a5);
    v17 = &v16[16 * a5];
    v29 = v16;
    v31 = v17;
    memcpy(v16, a4, 16 * a5);
    v30 = v17;
  }
  __p = 0;
  v27 = 0;
  v28 = 0;
  if (!a7)
    goto LABEL_10;
  if (a7 < 0)
LABEL_22:
    abort();
  v18 = (char *)operator new(16 * a7);
  v19 = &v18[16 * a7];
  __p = v18;
  v28 = v19;
  memcpy(v18, a6, 16 * a7);
  v27 = v19;
LABEL_10:
  swift::reflection::SILBoxTypeWithLayoutTypeRef::Profile((uint64_t **)&v23, (uint64_t **)&v29, (uint64_t *)&__p, (uint64_t)v32);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  v20 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1608), (char **)v32);
  if (!v20)
    operator new();
  v21 = v20[5];
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v21;
}

void swift::reflection::SILBoxTypeWithLayoutTypeRef::Profile(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  uint64_t j;
  uint64_t v13;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    do
    {
      v9 = *v7++;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, v9);
    }
    while (v7 != v8);
  }
  v11 = *a2;
  for (i = a2[1]; v11 != i; v11 += 2)
  {
    swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, *v11);
    swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, v11[1]);
  }
  v13 = *a3;
  for (j = a3[1]; v13 != j; v13 += 16)
  {
    while (1)
    {
      swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a4, *(_DWORD *)v13 & 7);
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8);
      if ((*(_QWORD *)v13 & 7) == 3)
        break;
      swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a4, *(_QWORD *)(v13 + 8));
      v13 += 16;
      if (v13 == j)
        return;
    }
    swift::reflection::TypeRefID::addInteger((swift::reflection::TypeRefID *)a4, 0);
  }
}

uint64_t swift::reflection::SILBoxTypeWithLayoutTypeRef::SILBoxTypeWithLayoutTypeRef(uint64_t a1, const void *a2, uint64_t a3, size_t __sz, uint64_t a5, const void *a6, uint64_t a7)
{
  size_t v12;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  size_t v21;
  char *v22;
  char *v23;

  *(_DWORD *)(a1 + 8) = 20;
  *(_QWORD *)a1 = off_B4730;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a3)
  {
    v12 = 8 * a3;
    if (8 * a3 < 0)
      goto LABEL_11;
    v14 = (8 * a3) >> 3;
    v15 = (char *)operator new(8 * a3);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15;
    v16 = &v15[8 * v14];
    *(_QWORD *)(a1 + 32) = v16;
    memcpy(v15, a2, v12);
    *(_QWORD *)(a1 + 24) = v16;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v17 = 16 * a5;
    if (16 * a5 < 0)
      goto LABEL_11;
    v18 = (16 * a5) >> 4;
    v19 = (char *)operator new(16 * a5);
    *(_QWORD *)(a1 + 40) = v19;
    *(_QWORD *)(a1 + 48) = v19;
    *(_QWORD *)(a1 + 56) = &v19[16 * v18];
    v20 = v17 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v19, (const void *)__sz, v20);
    *(_QWORD *)(a1 + 48) = &v19[v20];
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (a7)
  {
    v21 = 16 * a7;
    if (((16 * a7) & 0x8000000000000000) == 0)
    {
      v22 = (char *)operator new(16 * a7);
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v22;
      v23 = &v22[16 * ((16 * a7) >> 4)];
      *(_QWORD *)(a1 + 80) = v23;
      memcpy(v22, a6, v21);
      *(_QWORD *)(a1 + 72) = v23;
      return a1;
    }
LABEL_11:
    abort();
  }
  return a1;
}

void swift::reflection::SILBoxTypeWithLayoutTypeRef::~SILBoxTypeWithLayoutTypeRef(swift::reflection::SILBoxTypeWithLayoutTypeRef *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::OpaqueArchetypeTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, void *__src, size_t __len, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  void *v12[3];

  swift::reflection::OpaqueArchetypeTypeRef::Profile(__src, __len, a6, a7, a8, (swift::reflection::TypeRefID *)v12);
  v9 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1408), (char **)v12);
  if (!v9)
    operator new();
  v10 = v9[5];
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  return v10;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(uint64_t *a1, int *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  int v15;
  _DWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((37 * v6) | ((unint64_t)(37 * *a2) << 32))
       + ~((unint64_t)(37 * v6) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_DWORD *)(*a1 + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    if (*a2 == *v13 && v6 == v15)
    {
      result = 1;
      *a3 = v13;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v14 != -1 || v15 != -1)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v15 == -2;
        if (v20 && v14 == -2)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_DWORD *)(v4 + 16 * (v22 & v11));
        v14 = *v13;
        v15 = v13[1];
        if (v5 == *v13 && v6 == v15)
        {
          *a3 = v13;
          return result;
        }
      }
      result = 0;
      if (v17)
        v13 = v17;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_DWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::grow(a1, v7);
  v10 = 0;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1 || a4[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void __swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  __swift::__runtime::llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *buffer;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  __swift::__runtime::llvm *v18;
  int v19;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(__swift::__runtime::llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = buffer;
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &buffer[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = buffer + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &buffer[2 * v11];
        do
        {
          *v10 = -1;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v17 = 16 * v3;
      v18 = v4;
      do
      {
        v19 = *((_DWORD *)v18 + 1);
        if ((*(_DWORD *)v18 != -1 || v19 != -1) && (*(_DWORD *)v18 != -2 || v19 != -2))
        {
          v28 = 0;
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, (int *)v18, &v28);
          v22 = v28;
          *v28 = *(_DWORD *)v18;
          v22[1] = *((_DWORD *)v18 + 1);
          *((_QWORD *)v22 + 1) = *((_QWORD *)v18 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (__swift::__runtime::llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    __swift::__runtime::llvm::deallocate_buffer(v4, v16, (std::align_val_t)8uLL);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v23 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v23)
    {
      if (((v23 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_30;
      v24 = ((v23 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &buffer[2 * (v24 & 0x1FFFFFFFFFFFFFFELL)];
      v25 = buffer + 2;
      v26 = v24 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v25 - 2) = -1;
        *v25 = -1;
        v25 += 4;
        v26 -= 2;
      }
      while (v26);
      if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_30:
        v27 = &buffer[2 * v23];
        do
        {
          *v10 = -1;
          v10 += 2;
        }
        while (v10 != v27);
      }
    }
  }
}

void swift::reflection::OpaqueArchetypeTypeRef::Profile(void *__src@<X0>, size_t __len@<X1>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, swift::reflection::TypeRefID *a6@<X8>)
{
  void **p_dst;
  size_t v13;
  void **v14;
  unsigned int v15;
  size_t v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **__dst;
  size_t v26;
  unint64_t v27;

  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  if (!__src)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    __dst = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v16 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v16 = __len | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v26 = __len;
    v27 = v17 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v27) = __len;
    p_dst = (void **)&__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
  v15 = HIBYTE(v27);
  v14 = __dst;
  v13 = v26;
LABEL_12:
  if ((v15 & 0x80u) == 0)
    v18 = (void **)&__dst;
  else
    v18 = v14;
  if ((v15 & 0x80u) == 0)
    v19 = v15;
  else
    v19 = v13;
  swift::reflection::TypeRefID::addString((uint64_t)a6, (uint64_t)v18, v19);
  if (SHIBYTE(v27) < 0)
    operator delete(__dst);
  swift::reflection::TypeRefID::addInteger(a6, a3);
  if (a5)
  {
    v20 = a4 + 16 * a5;
    do
    {
      v21 = *(uint64_t **)a4;
      v22 = *(_QWORD *)(a4 + 8);
      swift::reflection::TypeRefID::addInteger(a6, 0);
      if (v22)
      {
        v23 = 8 * v22;
        do
        {
          v24 = *v21++;
          swift::reflection::TypeRefID::addPointer<swift::reflection::TypeRef>((char **)a6, v24);
          v23 -= 8;
        }
        while (v23);
      }
      a4 += 16;
    }
    while (a4 != v20);
  }
}

_QWORD *swift::reflection::OpaqueArchetypeTypeRef::OpaqueArchetypeTypeRef(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v15;
  void *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *i;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v62;
  unint64_t *v63;

  *(_DWORD *)(a1 + 8) = 15;
  *(_QWORD *)a1 = off_B4750;
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
    abort();
  v15 = (_QWORD *)a1;
  if (__len >= 0x17)
  {
    v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v17 = __len | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v19 = v18 | 0x8000000000000000;
    v15 = (_QWORD *)a1;
    *(_QWORD *)(a1 + 24) = __len;
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 16) = v16;
    goto LABEL_8;
  }
  v16 = (void *)(a1 + 16);
  *(_BYTE *)(a1 + 39) = __len;
  if (__len)
LABEL_8:
    memmove(v16, __src, __len);
  *((_BYTE *)v16 + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_72;
  if (a5 >= 0x17)
  {
    v21 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v21 = a5 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v15[6] = a5;
    v15[7] = v22 | 0x8000000000000000;
    v15[5] = v20;
  }
  else
  {
    v20 = v15 + 5;
    *((_BYTE *)v15 + 63) = a5;
    if (!a5)
      goto LABEL_17;
  }
  memmove(v20, a4, a5);
LABEL_17:
  *((_BYTE *)v20 + a5) = 0;
  *(_OWORD *)(v15 + 9) = 0u;
  v23 = v15 + 9;
  *((_DWORD *)v15 + 16) = a6;
  *(_OWORD *)(v15 + 11) = 0u;
  *(_OWORD *)(v15 + 13) = 0u;
  if (!a8)
    return v15;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = a7 + 16 * a8;
  v62 = v27;
  v63 = v15 + 9;
  do
  {
    v29 = *(char **)a7;
    v28 = *(_QWORD *)(a7 + 8);
    if (v25 < v26)
    {
      *(_DWORD *)v25 = v28;
      v25 += 4;
      goto LABEL_20;
    }
    v30 = (v25 - v24) >> 2;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 62)
      goto LABEL_72;
    if ((v26 - v24) >> 1 > v31)
      v31 = (v26 - v24) >> 1;
    if ((unint64_t)(v26 - v24) >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      if (v32 >> 62)
LABEL_73:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v33 = operator new(4 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[4 * v30];
    *(_DWORD *)v34 = v28;
    v35 = v34 + 4;
    if (v25 != v24)
    {
      v36 = v25 - v24 - 4;
      if (v36 >= 0xBC)
      {
        v38 = (v25 - 4 - v24) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v33[v25 - v24 - 4 - v38] > &v33[v25 - v24 - 4])
        {
          v37 = v25;
        }
        else if (&v25[-v38 - 4] > v25 - 4)
        {
          v37 = v25;
        }
        else if ((unint64_t)(v24 - v33) >= 0x20)
        {
          v39 = (v36 >> 2) + 1;
          v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          v37 = &v25[-v40];
          v34 -= v40;
          v41 = &v33[4 * v30 - 16];
          v42 = v25 - 16;
          v43 = v39 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 8;
          }
          while (v43);
          if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_45;
        }
        else
        {
          v37 = v25;
        }
      }
      else
      {
        v37 = v25;
      }
      do
      {
        v45 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v34 - 1) = v45;
        v34 -= 4;
      }
      while (v37 != v24);
    }
LABEL_45:
    v26 = &v33[4 * v32];
    if (v24)
      operator delete(v24);
    v24 = v34;
    v25 = v35;
    v23 = v63;
    v15 = (_QWORD *)a1;
    v27 = v62;
LABEL_20:
    std::vector<swift::reflection::TypeRef const*>::__insert_with_size[abi:nn180100]<swift::reflection::TypeRef const* const*,swift::reflection::TypeRef const* const*>(v23, v15[10], v29, &v29[8 * v28], v28);
    a7 += 16;
  }
  while (a7 != v27);
  if (v24 != v25)
  {
    v46 = v15[9];
    v47 = (char *)v15[13];
    for (i = v24; i != v25; i += 4)
    {
      v50 = *(unsigned int *)i;
      v51 = v15[14];
      if ((unint64_t)v47 < v51)
      {
        *(_QWORD *)v47 = v46;
        *((_QWORD *)v47 + 1) = v50;
        v49 = v47 + 16;
      }
      else
      {
        v52 = (char *)v15[12];
        v53 = (v47 - v52) >> 4;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 60)
          goto LABEL_72;
        v55 = v51 - (_QWORD)v52;
        if (v55 >> 3 > v54)
          v54 = v55 >> 3;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
          v56 = 0xFFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (v56 >> 60)
            goto LABEL_73;
          v57 = (char *)operator new(16 * v56);
        }
        else
        {
          v57 = 0;
        }
        v58 = &v57[16 * v53];
        *(_QWORD *)v58 = v46;
        *((_QWORD *)v58 + 1) = v50;
        v59 = v58;
        if (v47 == v52)
        {
          v60 = (_QWORD *)a1;
        }
        else
        {
          do
          {
            *((_OWORD *)v59 - 1) = *((_OWORD *)v47 - 1);
            v59 -= 16;
            v47 -= 16;
          }
          while (v47 != v52);
          v60 = (_QWORD *)a1;
          v47 = *(char **)(a1 + 96);
        }
        v49 = v58 + 16;
        v60[12] = v59;
        v60[13] = v58 + 16;
        v60[14] = &v57[16 * v56];
        v15 = v60;
        if (v47)
          operator delete(v47);
      }
      v15[13] = v49;
      v46 += 8 * v50;
      v47 = v49;
    }
  }
  if (v24)
    operator delete(v24);
  return v15;
}

void swift::reflection::OpaqueArchetypeTypeRef::~OpaqueArchetypeTypeRef(swift::reflection::OpaqueArchetypeTypeRef *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*((void **)this + 2));
    return;
  }
  operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    goto LABEL_9;
}

{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if ((*((char *)this + 39) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*((void **)this + 2));
LABEL_7:
  operator delete();
}

char *std::vector<swift::reflection::TypeRef const*>::__insert_with_size[abi:nn180100]<swift::reflection::TypeRef const* const*,swift::reflection::TypeRef const* const*>(unint64_t *a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v55;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (char *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return v7;
  v12 = (char *)a1[1];
  v11 = a1[2];
  v55 = v6 >> 3;
  if (a5 > (uint64_t)(v11 - (_QWORD)v12) >> 3)
  {
    v13 = a5 + ((uint64_t)&v12[-v5] >> 3);
    if (v13 >> 61)
      abort();
    v14 = v11 - v5;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v29 = 8 * a5;
    v30 = &v16[8 * (v6 >> 3)];
    v31 = v16;
    memcpy(v30, __src, v29);
    v32 = v31;
    v33 = v30;
    v34 = v6 - 8;
    if ((unint64_t)v6 >= 8)
    {
      v35 = v7;
      v33 = v30;
      if (v34 < 0x68)
        goto LABEL_51;
      v35 = v7;
      v33 = v30;
      if ((v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)&v32[v6 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_51;
      v36 = (v34 >> 3) + 1;
      v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
      v35 = &v7[-v37];
      v33 = &v30[-v37];
      v38 = 8 * v55 - 16;
      v39 = &v32[v38];
      v40 = (__int128 *)(v5 + v38);
      v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *v40;
        *((_OWORD *)v39 - 1) = *(v40 - 1);
        *(_OWORD *)v39 = v42;
        v39 -= 32;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_51:
        do
        {
          v43 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *((_QWORD *)v33 - 1) = v43;
          v33 -= 8;
        }
        while (v35 != (char *)v5);
      }
      v12 = (char *)a1[1];
    }
    v44 = &v30[v29];
    v45 = &v32[8 * v15];
    if (v12 != v7)
      memmove(v44, v7, v12 - v7);
    v46 = (void *)*a1;
    *a1 = (unint64_t)v33;
    a1[1] = (unint64_t)&v44[v12 - v7];
    a1[2] = (unint64_t)v45;
    if (v46)
      operator delete(v46);
    return v30;
  }
  v17 = (v12 - v7) >> 3;
  if (v17 >= a5)
  {
    v18 = &__src[8 * a5];
    v20 = (char *)a1[1];
    goto LABEL_18;
  }
  v18 = &__src[8 * v17];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(v12, &__src[8 * v17], a4 - v18);
  v20 = &v12[v19];
  a1[1] = (unint64_t)&v12[v19];
  if (v12 - v7 >= 1)
  {
LABEL_18:
    v21 = &v7[8 * a5];
    v22 = v20 - v21;
    v23 = (v20 - v21) >> 3;
    v24 = &v20[-8 * a5];
    v25 = v20;
    if (v24 < v12)
    {
      v26 = (v6 & 0xFFFFFFFFFFFFFFF8) + v22;
      v27 = v26 + v5 + 8;
      if ((unint64_t)v12 > v27)
        v27 = (unint64_t)v12;
      v28 = v27 + ~v5 - v26;
      if (v28 >= 0x58)
      {
        v25 = v20;
        if ((unint64_t)&v21[-(v6 & 0xFFFFFFFFFFFFFFF8) - v5] >= 0x20)
        {
          v47 = (v28 >> 3) + 1;
          v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v24 += v48;
          v25 = &v20[v48];
          v49 = v20 + 16;
          v50 = (__int128 *)(8 * v23 + 8 * v55 + v5 + 16);
          v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v52 = *v50;
            *(v49 - 1) = *(v50 - 1);
            *v49 = v52;
            v49 += 2;
            v50 += 2;
            v51 -= 4;
          }
          while (v51);
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_42;
        }
      }
      else
      {
        v25 = v20;
      }
      do
      {
        v53 = *(_QWORD *)v24;
        v24 += 8;
        *(_QWORD *)v25 = v53;
        v25 += 8;
      }
      while (v24 < v12);
    }
LABEL_42:
    a1[1] = (unint64_t)v25;
    if (v20 != v21)
      memmove(&v20[-8 * v23], v7, v22);
    if (v18 != __src)
      memmove(v7, __src, v18 - __src);
  }
  return v7;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4770;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4770;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 2488) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2, *a3);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B47B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B47B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 2488) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4800;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4800;
  a2[1] = v2;
  return result;
}

void **std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  return swift::remote::MemoryReader::readPointer(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2, *a3, a4);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4848;
  a2[1] = v2;
  return result;
}

double std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::operator()@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 2488) + 64))(&v6, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2);
  result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  v5 = v8;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4890;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4890;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  return std::__invoke[abi:nn180100]<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1} &,std::string,unsigned int>(a1 + 8, a2, a3);
}

unint64_t std::__invoke[abi:nn180100]<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1} &,std::string,unsigned int>(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *a3;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 2488);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 2496);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v4 + 8))(v4, __p);
    if (v8)
    {
      if (v3 == 4)
      {
        LODWORD(v19) = 0;
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, v8, &v19, 4);
        v10 = v19;
        v11 = v19 & 0xFFFFFF00;
LABEL_14:
        if (v9)
          v12 = v10;
        else
          v12 = 0;
        if (v9)
          v13 = v11;
        else
          v13 = 0;
        if (!v5)
          goto LABEL_24;
        goto LABEL_21;
      }
      if (v3 == 8)
      {
        v19 = 0;
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, v8, &v19, 8);
        v10 = v19;
        v11 = v19 & 0xFFFFFFFFFFFFFF00;
        goto LABEL_14;
      }
    }
    v12 = 0;
    v13 = 0;
    if (!v5)
      goto LABEL_24;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    if (!v5)
      goto LABEL_24;
  }
LABEL_21:
  v14 = (unint64_t *)&v5->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      return v13 | v12;
    goto LABEL_25;
  }
LABEL_24:
  if (SHIBYTE(v18) < 0)
LABEL_25:
    operator delete(__p[0]);
  return v13 | v12;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::~ReflectionContext(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(a1 + 2584);
  if (v2)
  {
    *(_QWORD *)(a1 + 2592) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 2560);
  if (v3)
  {
    *(_QWORD *)(a1 + 2568) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 2536);
  if (!v4)
    goto LABEL_19;
  v5 = *(_QWORD **)(a1 + 2544);
  v6 = *(void **)(a1 + 2536);
  if (v5 == v4)
  {
LABEL_18:
    *(_QWORD *)(a1 + 2544) = v4;
    operator delete(v6);
LABEL_19:
    __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)(a1 + 2512), (void *)(24 * *(unsigned int *)(a1 + 2528)), (std::align_val_t)8uLL);
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::~MetadataReader(a1);
    return;
  }
  v7 = *(_QWORD **)(a1 + 2544);
  while (1)
  {
    v11 = *(v7 - 5);
    v7 -= 5;
    v10 = v11;
    *v7 = 0;
    if (!v11)
      goto LABEL_14;
    v14 = v10;
    v12 = *(v5 - 1);
    if (!v12)
      break;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v14);
LABEL_14:
    v8 = (_QWORD *)*(v5 - 1);
    if (v5 - 4 == v8)
    {
      v8 = v5 - 4;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_10;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
    v5 = v7;
    if (v7 == v4)
    {
      v6 = *(void **)(a1 + 2536);
      goto LABEL_18;
    }
  }
  v13 = std::__throw_bad_function_call[abi:nn180100]();
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::~MetadataReader(v13);
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::~MetadataReader(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __swift::__runtime::llvm *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __swift::__runtime::llvm *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __swift::__runtime::llvm *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  swift::reflection::TypeRefBuilder *v30;
  uint64_t v31;

  v2 = *(std::__shared_weak_count **)(a1 + 2496);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  swift::reflection::TypeRefBuilder::~TypeRefBuilder((swift::reflection::TypeRefBuilder *)(a1 + 296));
  *(_QWORD *)(a1 + 240) = off_B5260;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(_QWORD **)(a1 + 264));
  v5 = *(_QWORD *)(a1 + 280);
  if (v5)
    *(_BYTE *)(v5 + 48) = 0;
  v6 = *(unsigned int *)(a1 + 88);
  v7 = *(__swift::__runtime::llvm **)(a1 + 72);
  if ((_DWORD)v6)
  {
    v8 = 48 * v6;
    v9 = (_QWORD *)((char *)v7 + 40);
    while (1)
    {
      if (*(v9 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = *(v9 - 4);
        *(v9 - 4) = 0;
        if (v12)
        {
          v31 = v12;
          if (!*v9)
          {
LABEL_51:
            v30 = (swift::reflection::TypeRefBuilder *)std::__throw_bad_function_call[abi:nn180100]();
            swift::reflection::TypeRefBuilder::~TypeRefBuilder(v30);
            return;
          }
          (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v9 + 48))(*v9, &v31);
        }
        v10 = (_QWORD *)*v9;
        if (v9 - 3 == (_QWORD *)*v9)
        {
          v10 = v9 - 3;
          v11 = 4;
        }
        else
        {
          if (!v10)
            goto LABEL_12;
          v11 = 5;
        }
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
LABEL_12:
      v9 += 6;
      v8 -= 48;
      if (!v8)
      {
        v7 = *(__swift::__runtime::llvm **)(a1 + 72);
        v13 = 48 * *(unsigned int *)(a1 + 88);
        goto LABEL_22;
      }
    }
  }
  v13 = 0;
LABEL_22:
  __swift::__runtime::llvm::deallocate_buffer(v7, (void *)v13, (std::align_val_t)8uLL);
  v14 = *(unsigned int *)(a1 + 64);
  v15 = *(__swift::__runtime::llvm **)(a1 + 48);
  if ((_DWORD)v14)
  {
    v16 = 48 * v14;
    v17 = (_QWORD *)((char *)v15 + 40);
    while (1)
    {
      if (*(v17 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v20 = *(v17 - 4);
        *(v17 - 4) = 0;
        if (v20)
        {
          v31 = v20;
          if (!*v17)
            goto LABEL_51;
          (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v17 + 48))(*v17, &v31);
        }
        v18 = (_QWORD *)*v17;
        if (v17 - 3 == (_QWORD *)*v17)
        {
          v18 = v17 - 3;
          v19 = 4;
        }
        else
        {
          if (!v18)
            goto LABEL_26;
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
      }
LABEL_26:
      v17 += 6;
      v16 -= 48;
      if (!v16)
      {
        v15 = *(__swift::__runtime::llvm **)(a1 + 48);
        v21 = 48 * *(unsigned int *)(a1 + 64);
        goto LABEL_36;
      }
    }
  }
  v21 = 0;
LABEL_36:
  __swift::__runtime::llvm::deallocate_buffer(v15, (void *)v21, (std::align_val_t)8uLL);
  v22 = *(unsigned int *)(a1 + 40);
  v23 = *(__swift::__runtime::llvm **)(a1 + 24);
  if ((_DWORD)v22)
  {
    v24 = 48 * v22;
    v25 = (_QWORD *)((char *)v23 + 40);
    while (1)
    {
      if (*(v25 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v28 = *(v25 - 4);
        *(v25 - 4) = 0;
        if (v28)
        {
          v31 = v28;
          if (!*v25)
            goto LABEL_51;
          (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v25 + 48))(*v25, &v31);
        }
        v26 = (_QWORD *)*v25;
        if (v25 - 3 == (_QWORD *)*v25)
        {
          v26 = v25 - 3;
          v27 = 4;
        }
        else
        {
          if (!v26)
            goto LABEL_40;
          v27 = 5;
        }
        (*(void (**)(void))(*v26 + 8 * v27))();
      }
LABEL_40:
      v25 += 6;
      v24 -= 48;
      if (!v24)
      {
        v23 = *(__swift::__runtime::llvm **)(a1 + 24);
        v29 = 48 * *(unsigned int *)(a1 + 40);
        goto LABEL_50;
      }
    }
  }
  v29 = 0;
LABEL_50:
  __swift::__runtime::llvm::deallocate_buffer(v23, (void *)v29, (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(*(__swift::__runtime::llvm **)a1, (void *)(24 * *(unsigned int *)(a1 + 16)), (std::align_val_t)8uLL);
}

void swift::reflection::TypeRefBuilder::~TypeRefBuilder(swift::reflection::TypeRefBuilder *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  swift::reflection::TypeRefBuilder *v5;
  uint64_t v6;
  swift::reflection::TypeRefBuilder *v7;
  uint64_t v8;
  swift::reflection::TypeRefBuilder *v9;
  uint64_t v10;
  swift::reflection::TypeRefBuilder *v11;
  uint64_t v12;
  swift::reflection::TypeRefBuilder *v13;
  uint64_t v14;
  swift::reflection::TypeRefBuilder *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  void *v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  void *v81;
  _QWORD *v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  _QWORD *v90;
  void *v91;
  _QWORD *v92;
  void *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  void *v99;
  _QWORD *v100;
  void *v101;
  _QWORD *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  swift::reflection::TypeRefBuilder *v118;
  uint64_t v119;
  uint64_t v120;

  v2 = (char *)this + 2144;
  v3 = (char *)*((_QWORD *)this + 271);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (swift::reflection::TypeRefBuilder *)*((_QWORD *)this + 267);
  if (v5 == (swift::reflection::TypeRefBuilder *)((char *)this + 2112))
  {
    v6 = 4;
    v5 = (swift::reflection::TypeRefBuilder *)((char *)this + 2112);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (swift::reflection::TypeRefBuilder *)*((_QWORD *)this + 263);
  if (v7 == (swift::reflection::TypeRefBuilder *)((char *)this + 2080))
  {
    v8 = 4;
    v7 = (swift::reflection::TypeRefBuilder *)((char *)this + 2080);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (swift::reflection::TypeRefBuilder *)*((_QWORD *)this + 259);
  if (v9 == (swift::reflection::TypeRefBuilder *)((char *)this + 2048))
  {
    v10 = 4;
    v9 = (swift::reflection::TypeRefBuilder *)((char *)this + 2048);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (swift::reflection::TypeRefBuilder *)*((_QWORD *)this + 255);
  if (v11 == (swift::reflection::TypeRefBuilder *)((char *)this + 2016))
  {
    v12 = 4;
    v11 = (swift::reflection::TypeRefBuilder *)((char *)this + 2016);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = (swift::reflection::TypeRefBuilder *)*((_QWORD *)this + 251);
  if (v13 == (swift::reflection::TypeRefBuilder *)((char *)this + 1984))
  {
    v14 = 4;
    v13 = (swift::reflection::TypeRefBuilder *)((char *)this + 1984);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_31:
  v15 = (swift::reflection::TypeRefBuilder *)*((_QWORD *)this + 247);
  if (v15 == (swift::reflection::TypeRefBuilder *)((char *)this + 1952))
  {
    v16 = 4;
    v15 = (swift::reflection::TypeRefBuilder *)((char *)this + 1952);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_36:
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder((swift::reflection::TypeRefBuilder *)((char *)this + 1680));
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 206), (void *)(8 * *((unsigned int *)this + 416)), (std::align_val_t)8uLL);
  v17 = (_QWORD *)*((_QWORD *)this + 203);
  if (v17)
  {
    do
    {
      v62 = (_QWORD *)*v17;
      v63 = (void *)v17[2];
      if (v63)
      {
        v17[3] = v63;
        operator delete(v63);
      }
      operator delete(v17);
      v17 = v62;
    }
    while (v62);
  }
  v18 = (void *)*((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v18)
    operator delete(v18);
  v19 = (_QWORD *)*((_QWORD *)this + 198);
  if (v19)
  {
    do
    {
      v64 = (_QWORD *)*v19;
      v65 = (void *)v19[2];
      if (v65)
      {
        v19[3] = v65;
        operator delete(v65);
      }
      operator delete(v19);
      v19 = v64;
    }
    while (v64);
  }
  v20 = (void *)*((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v20)
    operator delete(v20);
  v21 = (_QWORD *)*((_QWORD *)this + 193);
  if (v21)
  {
    do
    {
      v66 = (_QWORD *)*v21;
      v67 = (void *)v21[2];
      if (v67)
      {
        v21[3] = v67;
        operator delete(v67);
      }
      operator delete(v21);
      v21 = v66;
    }
    while (v66);
  }
  v22 = (void *)*((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v22)
    operator delete(v22);
  v23 = (_QWORD *)*((_QWORD *)this + 188);
  if (v23)
  {
    do
    {
      v68 = (_QWORD *)*v23;
      v69 = (void *)v23[2];
      if (v69)
      {
        v23[3] = v69;
        operator delete(v69);
      }
      operator delete(v23);
      v23 = v68;
    }
    while (v68);
  }
  v24 = (void *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v24)
    operator delete(v24);
  v25 = (_QWORD *)*((_QWORD *)this + 183);
  if (v25)
  {
    do
    {
      v70 = (_QWORD *)*v25;
      v71 = (void *)v25[2];
      if (v71)
      {
        v25[3] = v71;
        operator delete(v71);
      }
      operator delete(v25);
      v25 = v70;
    }
    while (v70);
  }
  v26 = (void *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v26)
    operator delete(v26);
  v27 = (_QWORD *)*((_QWORD *)this + 178);
  if (v27)
  {
    do
    {
      v72 = (_QWORD *)*v27;
      v73 = (void *)v27[2];
      if (v73)
      {
        v27[3] = v73;
        operator delete(v73);
      }
      operator delete(v27);
      v27 = v72;
    }
    while (v72);
  }
  v28 = (void *)*((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v28)
    operator delete(v28);
  v29 = (_QWORD *)*((_QWORD *)this + 173);
  if (v29)
  {
    do
    {
      v74 = (_QWORD *)*v29;
      v75 = (void *)v29[2];
      if (v75)
      {
        v29[3] = v75;
        operator delete(v75);
      }
      operator delete(v29);
      v29 = v74;
    }
    while (v74);
  }
  v30 = (void *)*((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v30)
    operator delete(v30);
  v31 = (_QWORD *)*((_QWORD *)this + 168);
  if (v31)
  {
    do
    {
      v76 = (_QWORD *)*v31;
      v77 = (void *)v31[2];
      if (v77)
      {
        v31[3] = v77;
        operator delete(v77);
      }
      operator delete(v31);
      v31 = v76;
    }
    while (v76);
  }
  v32 = (void *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v32)
    operator delete(v32);
  v33 = (_QWORD *)*((_QWORD *)this + 163);
  if (v33)
  {
    do
    {
      v78 = (_QWORD *)*v33;
      v79 = (void *)v33[2];
      if (v79)
      {
        v33[3] = v79;
        operator delete(v79);
      }
      operator delete(v33);
      v33 = v78;
    }
    while (v78);
  }
  v34 = (void *)*((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v34)
    operator delete(v34);
  v35 = (_QWORD *)*((_QWORD *)this + 158);
  if (v35)
  {
    do
    {
      v80 = (_QWORD *)*v35;
      v81 = (void *)v35[2];
      if (v81)
      {
        v35[3] = v81;
        operator delete(v81);
      }
      operator delete(v35);
      v35 = v80;
    }
    while (v80);
  }
  v36 = (void *)*((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v36)
    operator delete(v36);
  v37 = (_QWORD *)*((_QWORD *)this + 153);
  if (v37)
  {
    do
    {
      v82 = (_QWORD *)*v37;
      v83 = (void *)v37[2];
      if (v83)
      {
        v37[3] = v83;
        operator delete(v83);
      }
      operator delete(v37);
      v37 = v82;
    }
    while (v82);
  }
  v38 = (void *)*((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v38)
    operator delete(v38);
  v39 = (_QWORD *)*((_QWORD *)this + 148);
  if (v39)
  {
    do
    {
      v84 = (_QWORD *)*v39;
      v85 = (void *)v39[2];
      if (v85)
      {
        v39[3] = v85;
        operator delete(v85);
      }
      operator delete(v39);
      v39 = v84;
    }
    while (v84);
  }
  v40 = (void *)*((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v40)
    operator delete(v40);
  v41 = (_QWORD *)*((_QWORD *)this + 143);
  if (v41)
  {
    do
    {
      v86 = (_QWORD *)*v41;
      v87 = (void *)v41[2];
      if (v87)
      {
        v41[3] = v87;
        operator delete(v87);
      }
      operator delete(v41);
      v41 = v86;
    }
    while (v86);
  }
  v42 = (void *)*((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v42)
    operator delete(v42);
  v43 = (_QWORD *)*((_QWORD *)this + 138);
  if (v43)
  {
    do
    {
      v88 = (_QWORD *)*v43;
      v89 = (void *)v43[2];
      if (v89)
      {
        v43[3] = v89;
        operator delete(v89);
      }
      operator delete(v43);
      v43 = v88;
    }
    while (v88);
  }
  v44 = (void *)*((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v44)
    operator delete(v44);
  v45 = (_QWORD *)*((_QWORD *)this + 133);
  if (v45)
  {
    do
    {
      v90 = (_QWORD *)*v45;
      v91 = (void *)v45[2];
      if (v91)
      {
        v45[3] = v91;
        operator delete(v91);
      }
      operator delete(v45);
      v45 = v90;
    }
    while (v90);
  }
  v46 = (void *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v46)
    operator delete(v46);
  v47 = (_QWORD *)*((_QWORD *)this + 128);
  if (v47)
  {
    do
    {
      v92 = (_QWORD *)*v47;
      v93 = (void *)v47[2];
      if (v93)
      {
        v47[3] = v93;
        operator delete(v93);
      }
      operator delete(v47);
      v47 = v92;
    }
    while (v92);
  }
  v48 = (void *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v48)
    operator delete(v48);
  v49 = (_QWORD *)*((_QWORD *)this + 123);
  if (v49)
  {
    do
    {
      v94 = (_QWORD *)*v49;
      v95 = (void *)v49[2];
      if (v95)
      {
        v49[3] = v95;
        operator delete(v95);
      }
      operator delete(v49);
      v49 = v94;
    }
    while (v94);
  }
  v50 = (void *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v50)
    operator delete(v50);
  v51 = (_QWORD *)*((_QWORD *)this + 118);
  if (v51)
  {
    do
    {
      v96 = (_QWORD *)*v51;
      v97 = (void *)v51[2];
      if (v97)
      {
        v51[3] = v97;
        operator delete(v97);
      }
      operator delete(v51);
      v51 = v96;
    }
    while (v96);
  }
  v52 = (void *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v52)
    operator delete(v52);
  v53 = (_QWORD *)*((_QWORD *)this + 113);
  if (v53)
  {
    do
    {
      v98 = (_QWORD *)*v53;
      v99 = (void *)v53[2];
      if (v99)
      {
        v53[3] = v99;
        operator delete(v99);
      }
      operator delete(v53);
      v53 = v98;
    }
    while (v98);
  }
  v54 = (void *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v54)
    operator delete(v54);
  v55 = (_QWORD *)*((_QWORD *)this + 108);
  if (v55)
  {
    do
    {
      v100 = (_QWORD *)*v55;
      v101 = (void *)v55[2];
      if (v101)
      {
        v55[3] = v101;
        operator delete(v101);
      }
      operator delete(v55);
      v55 = v100;
    }
    while (v100);
  }
  v56 = (void *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v56)
    operator delete(v56);
  v57 = (_QWORD *)*((_QWORD *)this + 103);
  if (v57)
  {
    do
    {
      v102 = (_QWORD *)*v57;
      v103 = (void *)v57[2];
      if (v103)
      {
        v57[3] = v103;
        operator delete(v103);
      }
      operator delete(v57);
      v57 = v102;
    }
    while (v102);
  }
  v58 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v58)
    operator delete(v58);
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 88), (void *)(16 * *((unsigned int *)this + 180)), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 85), (void *)(8 * *((unsigned int *)this + 174)), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 82), (void *)(24 * *((unsigned int *)this + 168)), (std::align_val_t)8uLL);
  v59 = (_QWORD *)*((_QWORD *)this + 79);
  if (v59)
  {
    v60 = (_QWORD *)*((_QWORD *)this + 80);
    v61 = (void *)*((_QWORD *)this + 79);
    if (v60 != v59)
    {
      do
      {
        v105 = *--v60;
        v104 = v105;
        *v60 = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 24))(v104);
      }
      while (v60 != v59);
      v61 = (void *)*((_QWORD *)this + 79);
    }
    *((_QWORD *)this + 80) = v59;
    operator delete(v61);
  }
  v106 = (_QWORD *)*((_QWORD *)this + 75);
  if (v106)
  {
    v107 = (_QWORD *)*((_QWORD *)this + 76);
    v108 = (void *)*((_QWORD *)this + 75);
    if (v107 != v106)
    {
      do
      {
        v110 = *--v107;
        v109 = v110;
        *v107 = 0;
        if (v110)
        {
          v111 = *(void **)(v109 + 24);
          if (v111)
          {
            *(_QWORD *)(v109 + 32) = v111;
            operator delete(v111);
          }
          v112 = *(void **)v109;
          if (*(_QWORD *)v109)
          {
            *(_QWORD *)(v109 + 8) = v112;
            operator delete(v112);
          }
          operator delete();
        }
      }
      while (v107 != v106);
      v108 = (void *)*((_QWORD *)this + 75);
    }
    *((_QWORD *)this + 76) = v106;
    operator delete(v108);
  }
  v113 = (_QWORD *)*((_QWORD *)this + 72);
  if (v113)
  {
    v114 = (_QWORD *)*((_QWORD *)this + 73);
    v115 = (void *)*((_QWORD *)this + 72);
    if (v114 != v113)
    {
      do
      {
        v117 = *--v114;
        v116 = v117;
        *v114 = 0;
        if (v117)
          (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
      }
      while (v114 != v113);
      v115 = (void *)*((_QWORD *)this + 72);
    }
    *((_QWORD *)this + 73) = v113;
    operator delete(v115);
  }
  *(_QWORD *)this = off_B5288;
  v118 = (swift::reflection::TypeRefBuilder *)*((_QWORD *)this + 71);
  if (v118 == (swift::reflection::TypeRefBuilder *)((char *)this + 544))
  {
    v119 = 4;
    v118 = (swift::reflection::TypeRefBuilder *)((char *)this + 544);
  }
  else
  {
    if (!v118)
      goto LABEL_195;
    v119 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v118 + 8 * v119))();
LABEL_195:
  *(_QWORD *)this = off_B5260;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*((_QWORD **)this + 3));
  v120 = *((_QWORD *)this + 5);
  if (v120)
    *(_BYTE *)(v120 + 48) = 0;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void **v13;
  void *v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  void **v21;
  _QWORD *v22;
  void **v23;
  char *v24;
  char *v25;

  *(_QWORD *)this = off_B6218;
  v2 = (_QWORD *)*((_QWORD *)this + 28);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 29);
    v4 = (void *)*((_QWORD *)this + 28);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 24);
  if (v7)
  {
    do
    {
      v19 = (_QWORD *)*v7;
      v20 = (void *)v7[2];
      if (v20)
      {
        v7[3] = v20;
        operator delete(v20);
      }
      operator delete(v7);
      v7 = v19;
    }
    while (v19);
  }
  v8 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v8)
    operator delete(v8);
  v9 = (void **)*((_QWORD *)this + 19);
  if (v9)
  {
    do
    {
      v21 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v21;
    }
    while (v21);
  }
  v10 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 14);
  while (v11)
  {
    v22 = v11;
    v11 = (_QWORD *)*v11;
    if (*((_BYTE *)v22 + 48) && *((char *)v22 + 47) < 0)
      operator delete((void *)v22[3]);
    operator delete(v22);
  }
  v12 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
    operator delete(v12);
  v13 = (void **)*((_QWORD *)this + 9);
  if (v13)
  {
    do
    {
      v23 = (void **)*v13;
      if (*((char *)v13 + 39) < 0)
        operator delete(v13[2]);
      operator delete(v13);
      v13 = v23;
    }
    while (v23);
  }
  v14 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
    operator delete(v14);
  __swift::__runtime::llvm::deallocate_buffer(*((__swift::__runtime::llvm **)this + 4), (void *)(8 * *((unsigned int *)this + 12)), (std::align_val_t)8uLL);
  v15 = (char *)*((_QWORD *)this + 1);
  if (v15)
  {
    v16 = (char *)*((_QWORD *)this + 2);
    v17 = (void *)*((_QWORD *)this + 1);
    if (v16 != v15)
    {
      v18 = v16 - 16;
      do
      {
        v25 = (char *)*((_QWORD *)v18 - 2);
        if (v18 != v25)
          free(v25);
        v24 = v18 - 208;
        v18 -= 224;
      }
      while (v24 != v15);
      v17 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v15;
    operator delete(v17);
  }
}

{
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder(this);
  operator delete();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN5swift10reflection17ReflectionContextINS9_8ExternalINS9_15WithObjCInteropINS9_13RuntimeTargetILj8EEEEEEEEENS_14default_deleteISI_EEEENS8_INSB_INSC_INS9_13NoObjCInteropISF_EEEEEENSJ_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSL_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::~ReflectionContext(result);
    operator delete();
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN5swift10reflection17ReflectionContextINS9_8ExternalINS9_15WithObjCInteropINS9_13RuntimeTargetILj8EEEEEEEEENS_14default_deleteISI_EEEENS8_INSB_INSC_INS9_13NoObjCInteropISF_EEEEEENSJ_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSL_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::~ReflectionContext(result);
    operator delete();
  }
  return result;
}

double swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 2400;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_B5288;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = a1;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 840) = 1065353216;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 880) = 1065353216;
  *(_DWORD *)(a1 + 920) = 1065353216;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_DWORD *)(a1 + 960) = 1065353216;
  *(_DWORD *)(a1 + 1000) = 1065353216;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_DWORD *)(a1 + 1080) = 1065353216;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_DWORD *)(a1 + 1120) = 1065353216;
  *(_DWORD *)(a1 + 1160) = 1065353216;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_DWORD *)(a1 + 1200) = 1065353216;
  *(_DWORD *)(a1 + 1240) = 1065353216;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1280) = 1065353216;
  *(_DWORD *)(a1 + 1320) = 1065353216;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(_DWORD *)(a1 + 1400) = 1065353216;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_DWORD *)(a1 + 1440) = 1065353216;
  *(_DWORD *)(a1 + 1480) = 1065353216;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_DWORD *)(a1 + 1520) = 1065353216;
  *(_QWORD *)(a1 + 1672) = a4;
  *(_QWORD *)(a1 + 1680) = off_B6218;
  *(_DWORD *)(a1 + 1560) = 1065353216;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_DWORD *)(a1 + 1600) = 1065353216;
  *(_DWORD *)(a1 + 1640) = 1065353216;
  *(_DWORD *)(a1 + 1768) = 1065353216;
  *(_DWORD *)(a1 + 1808) = 1065353216;
  *(_DWORD *)(a1 + 1848) = 1065353216;
  *(_DWORD *)(a1 + 1888) = 1065353216;
  *(_QWORD *)(a1 + 1936) = a3;
  *(_DWORD *)(a1 + 1944) = 8;
  *(_QWORD *)(a1 + 1952) = off_B48E8;
  *(_QWORD *)(a1 + 1976) = a1 + 1952;
  *(_QWORD *)(a1 + 1984) = off_B4978;
  *(_QWORD *)(a1 + 2008) = a1 + 1984;
  *(_QWORD *)(a1 + 2016) = off_B49C0;
  *(_QWORD *)(a1 + 2040) = a1 + 2016;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 2048) = off_B4A08;
  *(_QWORD *)(a1 + 2072) = a1 + 2048;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_QWORD *)(a1 + 2080) = off_B4A50;
  *(_QWORD *)(a1 + 2104) = a1 + 2080;
  *(_QWORD *)(a1 + 2112) = off_B4A98;
  *(_QWORD *)(a1 + 2136) = a1 + 2112;
  *(_QWORD *)(a1 + 2144) = off_B4AE0;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_DWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1904) = 0;
  *(_QWORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1928) = a1;
  *(_QWORD *)(a1 + 1960) = a1;
  *(_QWORD *)(a1 + 1968) = a2;
  *(_QWORD *)(a1 + 1992) = a2;
  *(_QWORD *)(a1 + 2024) = a2;
  *(_QWORD *)(a1 + 2056) = a2;
  *(_QWORD *)(a1 + 2088) = a2;
  *(_QWORD *)(a1 + 2120) = a2;
  *(_QWORD *)(a1 + 2152) = a2;
  *(_QWORD *)(a1 + 2168) = a1 + 2144;
  *(_BYTE *)(a1 + 2176) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 2184) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1716) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B48E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B48E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteRef<char>,BOOL)#1}>,swift::Demangle::__runtime::Node * ()(swift::remote::RemoteRef<char>,BOOL)>::operator()(uint64_t a1, uint64_t a2, char *a3)
{
  _BYTE *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *SymbolicMangledNameStringRef;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[3];
  _QWORD *v17;
  char v18;

  v3 = *(_BYTE **)(a2 + 8);
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v15[0] = *(_QWORD *)a2;
  v15[1] = v3;
  v18 = v4;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v3, (const char *)a2);
  v9 = v8;
  v10 = operator new(0x28uLL);
  *v10 = off_B4930;
  v10[1] = v15;
  v10[2] = v6;
  v10[3] = &v18;
  v10[4] = v5;
  v17 = v10;
  v11 = swift::Demangle::__runtime::Demangler::demangleType(v5, (uint64_t)SymbolicMangledNameStringRef, v9, v16);
  v12 = v17;
  if (v17 == v16)
  {
    v13 = 4;
    v12 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  _WORD *SymbolicMangledNameStringRef;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  char v22;

  v22 = a5;
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(*(_BYTE **)(a2 + 8), (const char *)a2);
  v11 = v10;
  if (a3 == 1)
  {
    v16 = operator new(0x28uLL);
    *v16 = off_B4930;
    v16[1] = a2;
    v16[2] = a1;
    v16[3] = &v22;
    v16[4] = a4;
    v19 = v16;
    v13 = swift::Demangle::__runtime::Demangler::demangleSymbol(a4, SymbolicMangledNameStringRef, v11, v18);
    v14 = v19;
    if (v19 == v18)
    {
      v15 = 4;
      v14 = v18;
      goto LABEL_10;
    }
  }
  else
  {
    if (a3)
      return 0;
    v12 = operator new(0x28uLL);
    *v12 = off_B4930;
    v12[1] = a2;
    v12[2] = a1;
    v12[3] = &v22;
    v12[4] = a4;
    v21 = v12;
    v13 = swift::Demangle::__runtime::Demangler::demangleType(a4, (uint64_t)SymbolicMangledNameStringRef, v11, v20);
    v14 = v21;
    if (v21 == v20)
    {
      v15 = 4;
      v14 = v20;
LABEL_10:
      (*(void (**)(void))(*v14 + 8 * v15))();
      return v13;
    }
  }
  if (v14)
  {
    v15 = 5;
    goto LABEL_10;
  }
  return v13;
}

void std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_B4930;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4930;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *std::__function::__func<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1},std::allocator<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::operator()(uint64_t a1, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5)
{
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(a1 + 8, *a2, *a3, *a4, *a5);
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(swift::remote::RemoteRef<char>,swift::remote::MangledNameKind,swift::Demangle::__runtime::Demangler &,BOOL)::{lambda(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)#1}::operator()(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *Node;
  size_t v11;
  void **v12;
  _BYTE *v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t MangledName;
  int v23;
  unint64_t v24;
  int v25;
  swift::Demangle::__runtime::Node *v26;
  int v27;
  swift::Demangle::__runtime::Node *v28;
  int v29;
  swift::Demangle::__runtime::Node *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  std::string v36;
  _BYTE __s[32];
  char v38;
  void *__p[2];
  __int128 v40;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = a5 + a4 - *(_QWORD *)(*(_QWORD *)a1 + 8) + **(_QWORD **)a1;
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  if (a3 == 1)
  {
    swift::remote::MemoryReader::readPointer(*(_QWORD *)(v7 + 2488), v8, 8u, (uint64_t)__s);
    if (!v38)
    {
LABEL_78:
      Node = 0;
      goto LABEL_79;
    }
    if ((__s[23] & 0x80000000) != 0)
    {
      if (*(_QWORD *)&__s[8])
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        goto LABEL_9;
      }
    }
    else if (__s[23])
    {
      v36 = *(std::string *)__s;
LABEL_9:
      v9 = *(_QWORD *)&__s[24];
LABEL_11:
      *(_OWORD *)__p = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *(_QWORD *)&v40 = *((_QWORD *)&v36.__r_.__value_.__l + 2);
      *((_QWORD *)&v40 + 1) = v9;
      if (v38 && (__s[23] & 0x80000000) != 0)
        operator delete(*(void **)__s);
      goto LABEL_14;
    }
    v9 = *(_QWORD *)(v7 + 2504) & *(_QWORD *)&__s[24];
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 0;
    v36.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_11;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v7 + 2488) + 56))(__s, *(_QWORD *)(v7 + 2488), v8);
  *(_OWORD *)__p = *(_OWORD *)__s;
  v9 = *(_QWORD *)&__s[24];
  v40 = *(_OWORD *)&__s[16];
LABEL_14:
  Node = 0;
  switch(a2)
  {
    case 0:
      if ((SBYTE7(v40) & 0x80u) == 0)
        v11 = BYTE7(v40);
      else
        v11 = (size_t)__p[1];
      if (v11)
      {
        if (v9)
          goto LABEL_78;
        if ((SBYTE7(v40) & 0x80u) == 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        __s[0] = 0;
        if (v11 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v11 >= 0x17)
        {
          v33 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v33 = v11 | 7;
          v34 = v33 + 1;
          v13 = operator new(v33 + 1);
          *(_QWORD *)&__s[16] = v11;
          *(_QWORD *)&__s[24] = v34 | 0x8000000000000000;
          *(_QWORD *)&__s[8] = v13;
        }
        else
        {
          v13 = &__s[8];
          __s[31] = v11;
        }
        memmove(v13, v12, v11);
        v13[v11] = 0;
        if (!__s[0])
          goto LABEL_82;
      }
      else
      {
        swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(v7, v9, (uint64_t *)&v36);
        __s[0] = 1;
        *(_OWORD *)&__s[8] = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      }
      if (!*(_QWORD *)&__s[16])
        goto LABEL_78;
      if (**(_BYTE **)(a1 + 16) && (**(_DWORD **)&__s[16] & 0x1F) == 4)
      {
        v14 = *(_QWORD **)(a1 + 24);
        v16 = *(_QWORD *)&__s[8];
        v15 = 301;
        goto LABEL_29;
      }
LABEL_82:
      Node = (unsigned int *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(v7, (uint64_t)__s, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24));
      if (!__s[0] && (__s[31] & 0x80000000) != 0)
        operator delete(*(void **)&__s[8]);
      break;
    case 2:
      v14 = *(_QWORD **)(a1 + 24);
      v15 = 336;
      goto LABEL_28;
    case 3:
      v14 = *(_QWORD **)(a1 + 24);
      v15 = 337;
LABEL_28:
      v16 = v9;
LABEL_29:
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v14, v15, v16);
      break;
    case 4:
      v17 = (void *)BYTE7(v40);
      v18 = SBYTE7(v40);
      if (SBYTE7(v40) < 0)
        v17 = __p[1];
      if (v17)
      {
        if (SBYTE7(v40) < 0)
          operator delete(__p[0]);
        v18 = 0;
        LOBYTE(__p[0]) = 0;
      }
      else
      {
        v8 = v9;
      }
      v19 = v8 + 4;
      LODWORD(v36.__r_.__value_.__l.__data_) = 0;
      (*(void (**)(_QWORD, uint64_t, std::string *, uint64_t))(**(_QWORD **)(v7 + 2488) + 32))(*(_QWORD *)(v7 + 2488), v19, &v36, 4);
      v20 = (char *)(v19 + SLODWORD(v36.__r_.__value_.__l.__data_));
      (*(void (**)(_BYTE *__return_ptr, _QWORD, char *))(**(_QWORD **)(v7 + 2488) + 56))(__s, *(_QWORD *)(v7 + 2488), v20);
      if (v18 < 0)
        operator delete(__p[0]);
      *(_QWORD *)&v40 = *(_QWORD *)&__s[16];
      *(_OWORD *)__p = *(_OWORD *)__s;
      v21 = HIBYTE(*(_QWORD *)&__s[16]);
      if (__s[23] < 0)
        v21 = *(_QWORD *)&__s[8];
      if (v21)
      {
        if ((__s[23] & 0x80000000) != 0)
          operator delete(__p[0]);
        LOBYTE(__p[0]) = 0;
        BYTE7(v40) = 0;
      }
      else
      {
        v20 = *(char **)&__s[24];
      }
      MangledName = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(v7, v20, 0, *(_QWORD **)(a1 + 24));
      if (!MangledName)
        goto LABEL_78;
      v23 = *(unsigned __int8 *)(MangledName + 18);
      if ((v23 - 1) < 2)
        goto LABEL_52;
      if (v23 != 5 || !*(_DWORD *)(MangledName + 8))
        goto LABEL_78;
      MangledName = *(_QWORD *)MangledName;
LABEL_52:
      v24 = *(_QWORD *)MangledName;
      if (!*(_QWORD *)MangledName)
        goto LABEL_78;
      v25 = *(unsigned __int8 *)(v24 + 18);
      if ((v25 - 1) < 2)
        goto LABEL_57;
      if (v25 != 5 || !*(_DWORD *)(v24 + 8))
        goto LABEL_78;
      v24 = *(_QWORD *)v24;
LABEL_57:
      v26 = *(swift::Demangle::__runtime::Node **)v24;
      if (!v26)
        goto LABEL_78;
      v27 = *((unsigned __int8 *)v26 + 18);
      if ((v27 - 1) < 2)
        goto LABEL_62;
      if (v27 != 5 || !*((_DWORD *)v26 + 2))
        goto LABEL_78;
      v26 = *(swift::Demangle::__runtime::Node **)v26;
LABEL_62:
      v28 = *(swift::Demangle::__runtime::Node **)v26;
      if (!v28)
        goto LABEL_78;
      v29 = *((unsigned __int8 *)v28 + 18);
      if ((v29 - 1) < 2)
        goto LABEL_67;
      if (v29 != 5 || !*((_DWORD *)v28 + 2))
        goto LABEL_78;
      v28 = *(swift::Demangle::__runtime::Node **)v28;
LABEL_67:
      v30 = *(swift::Demangle::__runtime::Node **)v28;
      if (!*(_QWORD *)v28 || *((_WORD *)v30 + 8) != 180)
        goto LABEL_78;
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 24), 232);
      swift::Demangle::__runtime::Node::addChild(Node, v30, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 24), v31, v32);
      break;
    default:
      break;
  }
LABEL_79:
  if (SBYTE7(v40) < 0)
    operator delete(__p[0]);
  return Node;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  int v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  _QWORD v14[2];

  if (*(_BYTE *)a2)
  {
    v4 = *(_DWORD **)(a2 + 16);
    v14[0] = *(_QWORD *)(a2 + 8);
    v14[1] = v4;
    v5 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v14, a3, 50);
    if (v5 && ((*v4 & 0x10) != 0 || (*v4 & 0x1F) == 3))
    {
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v5, a3, v7, v8);
      return (uint64_t)Node;
    }
    return (uint64_t)v5;
  }
  else
  {
    v10 = *(char *)(a2 + 31);
    v11 = *(_QWORD *)(a2 + 16);
    if (v10 >= 0)
      v12 = (_WORD *)(a2 + 8);
    else
      v12 = *(_WORD **)(a2 + 8);
    if (v10 >= 0)
      v13 = v10;
    else
      v13 = v11;
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v12, v13, (uint64_t)a3);
  }
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(uint64_t a1, char *a2, int a3, _QWORD *a4)
{
  char *v5;
  uint64_t v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  unsigned int v10;
  std::string *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  std::string::size_type size;
  char v18;
  size_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  std::string *v25;
  unint64_t v26;
  void *__p;
  std::string::size_type v31;
  uint64_t v32;
  std::string v33;

  v5 = a2;
  v7 = 0;
  memset(&v33, 0, sizeof(v33));
  do
  {
    __p = 0;
    v31 = 0;
    v32 = 0;
    if (!(*(unsigned int (**)(_QWORD, char *, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v5, &__p))
    {
      v16 = 1;
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        continue;
LABEL_26:
      operator delete(__p);
      continue;
    }
    if (v32 >= 0)
      v8 = HIBYTE(v32);
    else
      v8 = v31;
    v5 += v8 + 1;
    if (v32 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    std::string::append(&v33, p_p, v8);
    v10 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = v33.__r_.__value_.__r.__words[1];
    v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v33;
    while (1)
    {
      v12 = v7;
      if (v7 >= v10)
        break;
      v13 = v11->__r_.__value_.__s.__data_[v7];
      v14 = v13 - 1;
      if ((v13 & 0xF8) == 0x18)
        v15 = 9;
      else
        v15 = 1;
      if (v14 < 0x17)
        v15 = 5;
      v7 = (v15 + v7);
      if (v7 > v10)
      {
        std::string::push_back(&v33, 0);
        v16 = 2;
        goto LABEL_25;
      }
    }
    v16 = 3;
LABEL_25:
    v7 = v12;
    if (SHIBYTE(v32) < 0)
      goto LABEL_26;
  }
  while (v16 == 2);
  if (v16 == 3)
  {
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v33.__r_.__value_.__l.__size_;
    v19 = size + 1;
    v20 = (char *)a4[1];
    if (!v20 || (unint64_t)&v20[v19] > a4[2])
    {
      v21 = 2 * a4[4];
      v22 = size + 2;
      if (v21 <= v22)
        v21 = v22;
      a4[4] = v21;
      v23 = v21 + 8;
      v24 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      *v24 = a4[3];
      v20 = (char *)(v24 + 1);
      a4[2] = (char *)v24 + v23;
      a4[3] = v24;
      v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    a4[1] = &v20[v19];
    if (v18 >= 0)
      v25 = &v33;
    else
      v25 = (std::string *)v33.__r_.__value_.__r.__words[0];
    memcpy(v20, v25, v19);
    __p = a2;
    v31 = (std::string::size_type)v20;
    v26 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangle(a1, (uint64_t)&__p, a3, (uint64_t)a4, 0);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_41:
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_41;
  }
  return v26;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[24];
  uint64_t v30[2];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t *v35;
  unsigned int v36;

  if (!a2)
  {
LABEL_39:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  v5 = result;
  v7 = result + 48;
  v6 = *(_QWORD *)(result + 48);
  v8 = *(_DWORD *)(result + 64);
  if (v8)
  {
    v9 = (v8 - 1) & (37 * a2);
    v10 = (uint64_t *)(v6 + 48 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_9;
    v12 = 1;
    while (v11 != -1)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v10 = (uint64_t *)(v6 + 48 * v9);
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_9;
    }
  }
  v10 = (uint64_t *)(v6 + 48 * v8);
LABEL_9:
  if (v10 != (uint64_t *)(v6 + 48 * v8))
  {
    v14 = v10[1];
    *a3 = a2;
    a3[1] = v14;
    return result;
  }
  v36 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(result + 2488) + 32))(*(_QWORD *)(result + 2488), a2, &v36, 4);
  if ((result & 1) == 0)
    goto LABEL_39;
  v15 = 0;
  v16 = 0;
  v17 = 12;
  v18 = 8;
  switch(v36 & 0x1F)
  {
    case 0u:
    case 1u:
      goto LABEL_24;
    case 2u:
      v15 = 0;
      v16 = (v36 >> 14) & 4;
      goto LABEL_23;
    case 3u:
      v15 = 0;
      v16 = 0;
      v17 = 24;
      v18 = 8;
      if ((v36 & 0x80) != 0)
        goto LABEL_35;
      goto LABEL_25;
    case 4u:
      v15 = 0;
      v16 = 4 * ((unint64_t)v36 >> 16);
LABEL_23:
      v18 = 8;
      v17 = 8;
LABEL_24:
      if ((v36 & 0x80) == 0)
        goto LABEL_25;
      goto LABEL_35;
    case 0x10u:
      v15 = v36 >> 31;
      v23 = HIWORD(v36) & 3;
      v24 = 12;
      if (v23 != 1)
        v24 = 0;
      if (v23 == 2)
        v16 = 4;
      else
        v16 = v24;
      v17 = 44;
      goto LABEL_34;
    case 0x11u:
    case 0x12u:
      v15 = 0;
      v19 = HIWORD(v36) & 3;
      v20 = 12;
      if (v19 != 1)
        v20 = 0;
      if (v19 == 2)
        v16 = 4;
      else
        v16 = v20;
      v17 = 28;
LABEL_34:
      v18 = 16;
      if ((v36 & 0x80) != 0)
      {
LABEL_35:
        HIWORD(v30[0]) = 0;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v5 + 2488) + 32))(*(_QWORD *)(v5 + 2488), a2 + v18 + v17 - 8, v30, 8);
        if (!(_DWORD)result)
          goto LABEL_39;
        v21 = ((LOWORD(v30[0]) + 3) & 0x1FFFC) + v18 + 12 * WORD1(v30[0]);
        if (!v15)
          goto LABEL_37;
      }
      else
      {
LABEL_25:
        v21 = 0;
        if (!v15)
        {
LABEL_37:
          v22 = 0;
          goto LABEL_38;
        }
      }
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v5 + 2488) + 32))(*(_QWORD *)(v5 + 2488), v17 + a2 + v16 + v21, v30, 8);
      if (!(_DWORD)result)
        goto LABEL_39;
      v22 = 8 * HIDWORD(v30[0]) + 8;
LABEL_38:
      if (v17 + v16 + v21 + v22 > 0x100000)
        goto LABEL_39;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v5 + 2488) + 24))(&v33, *(_QWORD *)(v5 + 2488), a2);
      v25 = v33;
      if (v33)
      {
        v33 = 0;
        v30[0] = a2;
        v30[1] = v25;
        if (v35)
        {
          if (v35 == (uint64_t *)v34)
          {
            v32 = &v31;
            (*(void (**)(void))(*v35 + 24))();
          }
          else
          {
            v32 = v35;
            v35 = 0;
          }
        }
        else
        {
          v32 = 0;
        }
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::insert(v7, v30, (uint64_t)v29);
        std::pair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>::~pair(v30);
        *a3 = a2;
        a3[1] = v25;
        v26 = v33;
        v33 = 0;
        if (v26)
        {
          v30[0] = v26;
          if (!v35)
          {
            v28 = std::__throw_bad_function_call[abi:nn180100]();
            return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(v28);
          }
          (*(void (**)(uint64_t *, uint64_t *))(*v35 + 48))(v35, v30);
        }
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        v33 = 0;
      }
      result = (uint64_t)v35;
      if (v35 == (uint64_t *)v34)
      {
        v27 = 4;
        result = (uint64_t)v34;
      }
      else
      {
        if (!v35)
          return result;
        v27 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v27))();
      break;
    default:
      goto LABEL_39;
  }
  return result;
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(uint64_t a1, _QWORD *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *Node;
  uint64_t v8;
  const char *v9;
  _QWORD v11[2];

  v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  v6 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v11, a3, 50);
  if (v6 && ((*(_DWORD *)a2[1] & 0x10) != 0 || (*(_DWORD *)a2[1] & 0x1F) == 3))
  {
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v6, a3, v8, v9);
    return Node;
  }
  return v6;
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, _QWORD *a2, swift::Demangle::__runtime::NodeFactory *a3, int a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *Node;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  unint64_t MangledName;
  swift::Demangle::__runtime::Node *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int *v31;
  uint64_t v32;
  int *v33;
  size_t v34;
  swift::Demangle::__runtime::Node *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unsigned int *v40;
  swift::Demangle::__runtime::Node *v41;
  char v42;
  __int16 v43;
  int v44;
  unint64_t v45;
  swift::Demangle::__runtime::Node *v46;
  int v47;
  unsigned __int16 **v48;
  int v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  swift::Demangle::__runtime::Node *v57;
  int v58;
  uint64_t v59;
  unsigned int *v60;
  swift::Demangle::__runtime::Node *v61;
  swift::Demangle::__runtime::NodeFactory *v62;
  __int16 v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char *v74;
  int v75;
  int v76;
  unsigned int *v77;
  uint64_t v78;
  const char *v79;
  swift::Demangle::__runtime::Node *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int *v88;
  uint64_t v89;
  const char *v90;
  unsigned int *v91;
  int v92;
  swift::Demangle::__runtime::Node **v93;
  swift::Demangle::__runtime::Node *v94;
  uint64_t v95;
  const char *v96;
  int v97;
  size_t v98;
  void *v99;
  swift::Demangle::__runtime::Node *v100;
  unsigned int *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  unsigned int *v108;
  __int128 v109;
  void *v110;
  size_t v111;
  uint64_t v112;
  char *v113[2];
  _QWORD v114[2];
  _QWORD v115[5];
  void *v116;
  std::string __p;
  uint64_t v118;
  unsigned __int8 v119;
  void *v120;
  uint64_t v121;
  unsigned __int8 v122;
  char v123;
  _QWORD v124[2];
  swift::Demangle::__runtime::Node *v125;
  uint64_t v126;
  _QWORD v127[2];
  char v128[8];
  std::string v129;
  char v130;

  v4 = a4 - 1;
  if (a4 < 1)
    return 0;
  v8 = a2[1];
  v127[0] = *a2;
  v127[1] = v8;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v127, (uint64_t)v128);
  v125 = 0;
  v126 = 0;
  v9 = a2[1];
  v124[0] = *a2;
  v124[1] = v9;
  v125 = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(a1, (uint64_t)v124, (uint64_t)v128, a3, (unint64_t *)&v126);
  if (!v130)
    return 0;
  LOBYTE(v116) = v128[0];
  if (v128[0])
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
    if (!v129.__r_.__value_.__l.__size_)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  else if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  }
  else
  {
    __p = v129;
  }
  v10 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, (uint64_t)&v116, (uint64_t)a3, v4);
  if (v10 | v126)
  {
LABEL_11:
    v13 = 1;
    if ((_BYTE)v116)
      goto LABEL_16;
LABEL_14:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_16;
  }
  v10 = 0;
  v13 = 0;
  if (!(_BYTE)v116)
    goto LABEL_14;
LABEL_16:
  if (!v13)
  {
    Node = 0;
    if (!v130)
      return Node;
    goto LABEL_165;
  }
  if (v126 && (!v10 || *(_WORD *)(v10 + 16) == 1))
    v10 = v126;
  Node = 0;
  LOBYTE(v116) = 0;
  v123 = 0;
  v115[0] = &v125;
  v115[1] = a1;
  v115[2] = a2;
  v115[3] = &v116;
  v115[4] = a3;
  v14 = (unsigned int *)a2[1];
  switch(*v14 & 0x1F)
  {
    case 0u:
      if (v10)
        goto LABEL_131;
      v15 = (int)v14[2];
      if ((_DWORD)v15)
        v16 = *a2 + v15 + 8;
      else
        v16 = 0;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      Node = 0;
      if ((*(unsigned int (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v16, &v110))
      {
        if (v112 >= 0)
          v17 = &v110;
        else
          v17 = v110;
        if (v112 >= 0)
          v18 = HIBYTE(v112);
        else
          v18 = v111;
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 153, v17, v18);
      }
      if ((SHIBYTE(v112) & 0x80000000) == 0)
        goto LABEL_132;
      operator delete(v110);
      if (v123)
        goto LABEL_133;
      goto LABEL_164;
    case 1u:
      if (!v10)
        goto LABEL_131;
      v19 = (int)v14[2];
      v20 = (_DWORD)v19 ? (char *)(*a2 + v19 + 8) : 0;
      MangledName = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v20, 0, a3);
      if (!MangledName)
        goto LABEL_131;
      v22 = (swift::Demangle::__runtime::Node *)MangledName;
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 71);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3, v23, v24);
      swift::Demangle::__runtime::Node::addChild(Node, v22, a3, v25, v26);
      v27 = *v14;
      if ((v27 & 0x80) == 0)
        goto LABEL_132;
      v28 = *((unsigned __int16 *)v14 + 7);
      if (!*((_WORD *)v14 + 7))
        goto LABEL_132;
      v29 = ((unint64_t)&v14[2 * ((v27 >> 7) & 1) + 3] + *((unsigned __int16 *)v14 + 6) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v108 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 43);
      v30 = 0;
      v31 = (int *)(v29 + 8);
      v32 = 12 * v28;
      v33 = v31;
      while (2)
      {
        if ((v30 & 1) != 0)
          goto LABEL_132;
        v54 = *(v31 - 1);
        v55 = (_DWORD)v54 ? (char *)v33 + *a2 + v54 - a2[1] - 4 : 0;
        v56 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v55, 0, a3);
        if (!v56)
          goto LABEL_132;
        v57 = (swift::Demangle::__runtime::Node *)v56;
        v58 = *(v31 - 2) & 0x1F;
        if ((v58 - 1) >= 2)
        {
          if (v58 == 31)
          {
            v74 = (char *)v33 + *a2 - a2[1];
            LODWORD(v110) = 0;
            v75 = (*(uint64_t (**)(_QWORD, char *, void **, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v74, &v110, 4);
            if ((_DWORD)v110)
              v76 = 0;
            else
              v76 = v75;
            if (v76 == 1)
            {
              v77 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 41);
              swift::Demangle::__runtime::Node::addChild(v77, v57, a3, v78, v79);
              v80 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, "C");
              swift::Demangle::__runtime::Node::addChild(v77, v80, a3, v81, v82);
              swift::Demangle::__runtime::Node::addChild(v108, (swift::Demangle::__runtime::Node *)v77, a3, v83, v84);
            }
            v30 = v76 ^ 1;
          }
          else
          {
            if (!v58)
            {
              v59 = a2[1];
              v114[0] = *a2;
              v114[1] = v59;
              v110 = (void *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectProtocol<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>(a1, v114, (uint64_t)v31);
              v60 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(a1, &v110, a3);
              if (v60)
              {
                v61 = (swift::Demangle::__runtime::Node *)v60;
                v62 = a3;
                v63 = 36;
LABEL_108:
                v67 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v62, v63);
                swift::Demangle::__runtime::Node::addChild(v67, v57, a3, v68, v69);
                swift::Demangle::__runtime::Node::addChild(v67, v61, a3, v70, v71);
                swift::Demangle::__runtime::Node::addChild(v108, (swift::Demangle::__runtime::Node *)v67, a3, v72, v73);
                v30 = 0;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
            v30 = 0;
          }
LABEL_89:
          v33 += 3;
          v31 += 3;
          v32 -= 12;
          if (!v32)
          {
            if ((v30 & 1) != 0)
              goto LABEL_132;
            v40 = Node;
            v41 = (swift::Demangle::__runtime::Node *)v108;
            goto LABEL_163;
          }
          continue;
        }
        break;
      }
      v64 = *v31;
      if ((_DWORD)v64)
        v65 = (char *)v33 + *a2 + v64 - a2[1];
      else
        v65 = 0;
      v66 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v65, 0, a3);
      if (v66)
      {
        v61 = (swift::Demangle::__runtime::Node *)v66;
        if ((*(v31 - 2) & 0x1F) == 1)
          v63 = 39;
        else
          v63 = 36;
        v62 = a3;
        goto LABEL_108;
      }
LABEL_88:
      v30 = 1;
      goto LABEL_89;
    case 2u:
      snprintf((char *)&v110, 0x12uLL, "$%llx", *a2);
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 1);
      v113[0] = 0;
      v113[1] = 0;
      v34 = strlen((const char *)&v110);
      swift::Demangle::__runtime::CharVector::append(v113, &v110, v34, a3);
      v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, (uint64_t *)v113);
      swift::Demangle::__runtime::Node::addChild(Node, v35, a3, v36, v37);
      if (!v10)
        goto LABEL_132;
      v40 = Node;
      v41 = (swift::Demangle::__runtime::Node *)v10;
      goto LABEL_163;
    case 3u:
      if (!swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115))
        goto LABEL_131;
      v42 = 0;
      v43 = 180;
      goto LABEL_70;
    case 4u:
      Node = 0;
      if (!v130 || !v128[0] || !v129.__r_.__value_.__l.__size_)
        goto LABEL_132;
      v44 = *(unsigned __int16 *)(v10 + 16);
      if (v44 == 153)
      {
        v40 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
        Node = v40;
        v41 = (swift::Demangle::__runtime::Node *)v10;
        goto LABEL_163;
      }
      if (v44 != 1)
        goto LABEL_131;
      v109 = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
      v45 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(a1, &v109, a3);
      if (!v45)
        goto LABEL_131;
      v46 = (swift::Demangle::__runtime::Node *)v45;
      if (*(_WORD *)(v45 + 16) != 99)
        goto LABEL_169;
      v47 = *(unsigned __int8 *)(v45 + 18);
      if ((v47 - 1) < 2)
        goto LABEL_63;
      if (v47 == 5 && *(_DWORD *)(v45 + 8))
      {
        v46 = *(swift::Demangle::__runtime::Node **)v45;
LABEL_63:
        v46 = *(swift::Demangle::__runtime::Node **)v46;
      }
      else
      {
        v46 = 0;
      }
LABEL_169:
      v40 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 309);
      Node = v40;
      v41 = v46;
      goto LABEL_163;
    case 0x10u:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115) & 1) == 0)
        goto LABEL_131;
      v42 = 0;
      v43 = 24;
      goto LABEL_70;
    case 0x11u:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115) & 1) == 0)
        goto LABEL_131;
      v42 = 0;
      v43 = 219;
      goto LABEL_70;
    case 0x12u:
      if ((swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::{lambda(void)#1}::operator()((uint64_t)v115) & 1) == 0)
        goto LABEL_131;
      v42 = 1;
      v43 = 61;
LABEL_70:
      if (!v10)
        goto LABEL_131;
      if (!v123)
        goto LABEL_126;
      v48 = (unsigned __int16 **)v10;
      while (2)
      {
        if (*((_WORD *)v48 + 8) != 153)
        {
          v49 = *((unsigned __int8 *)v48 + 18);
          if ((v49 - 1) >= 2)
          {
            if (v49 != 5 || !*((_DWORD *)v48 + 2))
              goto LABEL_126;
            v48 = (unsigned __int16 **)*v48;
          }
          v48 = (unsigned __int16 **)*v48;
          if (!v48)
            goto LABEL_126;
          continue;
        }
        break;
      }
      if (v48[1] == (unsigned __int16 *)((char *)&dword_0 + 3))
      {
        v50 = *v48;
        v51 = *v50;
        v52 = *((unsigned __int8 *)v50 + 2);
        if (v51 == 24415 && v52 == 67)
        {
          if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p.__r_.__value_.__r.__words[2], "t"))
          {
            v43 = 234;
          }
          else
          {
            v85 = v119;
            if ((v119 & 0x80u) != 0)
              v85 = v118;
            if (!v85)
            {
              v86 = v122;
              if ((v122 & 0x80u) != 0)
                v86 = v121;
              if ((v42 & (v86 == 0)) != 0)
                v43 = 219;
            }
          }
        }
      }
LABEL_126:
      if (*(_WORD *)(v10 + 16) != 1 || *((_WORD *)v125 + 8) != 101)
        goto LABEL_153;
      v87 = *(unsigned __int8 *)(v10 + 18);
      if (v87 == 2 || v87 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
      {
        v88 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 176);
        v91 = v88;
        v92 = *(unsigned __int8 *)(v10 + 18);
        v93 = (swift::Demangle::__runtime::Node **)v10;
        if ((v92 - 1) >= 2)
        {
          if (v92 != 5 || !*(_DWORD *)(v10 + 8))
          {
            v94 = 0;
            goto LABEL_147;
          }
          v93 = *(swift::Demangle::__runtime::Node ***)v10;
        }
        v94 = *v93;
LABEL_147:
        swift::Demangle::__runtime::Node::addChild(v88, v94, a3, v89, v90);
        swift::Demangle::__runtime::Node::addChild(v91, v125, a3, v95, v96);
        v125 = (swift::Demangle::__runtime::Node *)v91;
        v97 = *(unsigned __int8 *)(v10 + 18);
        if (v97 == 2)
        {
LABEL_151:
          v10 = *(_QWORD *)(v10 + 8);
          goto LABEL_153;
        }
        if (v97 == 5 && *(_DWORD *)(v10 + 8) >= 2u)
        {
          v10 = *(_QWORD *)v10;
          goto LABEL_151;
        }
        v10 = 0;
LABEL_153:
        if (v123)
        {
          v98 = (v122 & 0x80u) == 0 ? v122 : v121;
          if (v98)
          {
            if ((v122 & 0x80u) == 0)
              v99 = &v120;
            else
              v99 = v120;
            v100 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 101, v99, v98);
            v101 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 205);
            swift::Demangle::__runtime::Node::addChild(v101, v100, a3, v102, v103);
            swift::Demangle::__runtime::Node::addChild(v101, v125, a3, v104, v105);
            v125 = (swift::Demangle::__runtime::Node *)v101;
          }
        }
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, v43);
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, a3, v106, v107);
        v41 = v125;
        v40 = Node;
LABEL_163:
        swift::Demangle::__runtime::Node::addChild(v40, v41, a3, v38, v39);
        if (!v123)
          goto LABEL_164;
        goto LABEL_133;
      }
LABEL_131:
      Node = 0;
LABEL_132:
      if (!v123)
        goto LABEL_164;
LABEL_133:
      if (((char)v122 & 0x80000000) == 0)
      {
        if (((char)v119 & 0x80000000) == 0)
          goto LABEL_135;
        goto LABEL_138;
      }
      operator delete(v120);
      if ((char)v119 < 0)
      {
LABEL_138:
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__s.__data_[15] < 0)
          goto LABEL_139;
LABEL_164:
        if (!v130)
          return Node;
        goto LABEL_165;
      }
LABEL_135:
      if ((__p.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
        goto LABEL_164;
LABEL_139:
      operator delete(v116);
      if (!v130)
        return Node;
LABEL_165:
      if (!v128[0] && SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      return Node;
    default:
      goto LABEL_132;
  }
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  _QWORD v18[2];
  void *__p[2];
  unsigned __int8 v20;
  uint64_t v21;
  char v22;

  v5 = a2[1];
  v18[0] = *a2;
  v18[1] = v5;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::resolveRelativeIndirectableField<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,swift::RelativeIndirectablePointer<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const,true,int,swift::RuntimeTarget<8u>::StoredSignedPointer>>(a1, v18, (int *)(v5 + 4), (uint64_t)__p);
  if (!v22)
    goto LABEL_7;
  if ((v20 & 0x80u) == 0)
    v6 = v20;
  else
    v6 = (size_t)__p[1];
  if (v6)
  {
    if (v21)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      goto LABEL_8;
    }
    if ((v20 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    LOBYTE(v15) = 0;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v6 >= 0x17)
    {
      v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v11 = v6 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&v16 + 1) = v6;
      v17 = v12 | 0x8000000000000000;
      *(_QWORD *)&v16 = v10;
    }
    else
    {
      HIBYTE(v17) = v6;
      v10 = &v16;
    }
    memmove(v10, v9, v6);
    *((_BYTE *)v10 + v6) = 0;
    v13 = v15;
    *(_BYTE *)a3 = v15;
    if (v13)
    {
      v14 = *((_QWORD *)&v16 + 1);
      *(_QWORD *)(a3 + 8) = v16;
      *(_QWORD *)(a3 + 16) = v14;
    }
    else
    {
      *(_OWORD *)(a3 + 8) = v16;
      *(_QWORD *)(a3 + 24) = v17;
    }
    *(_BYTE *)(a3 + 32) = 1;
  }
  else if (v21)
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v21, &v15);
    v7 = v16;
    if (!(_QWORD)v16)
      goto LABEL_7;
    v8 = v15;
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v7;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 32) = 1;
  }
LABEL_8:
  if (v22)
  {
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
}

uint64_t *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::adoptAnonymousContextName(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  uint64_t *v5;
  _DWORD *v6;
  BOOL v7;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  void **v25;
  size_t v26;
  _BOOL4 v27;
  int v29;
  unint64_t v30;
  _QWORD v31[2];
  unsigned __int8 v32[8];
  void *__p;
  char v34;
  char v35;
  _QWORD v36[2];
  void *v37[2];
  unsigned __int8 v38;
  char v39;
  _BYTE v40[80];
  _QWORD v41[3];

  v5 = 0;
  *a5 = 0;
  v6 = *(_DWORD **)(a3 + 16);
  if (*(_BYTE *)(a3 + 32))
    v7 = *(_BYTE *)a3 == 0;
  else
    v7 = 1;
  if (!v7 && v6 != 0)
  {
    v13 = *(_QWORD *)(a3 + 8);
    if ((**(_DWORD **)(a2 + 8) & 0x10) == 0 && (**(_DWORD **)(a2 + 8) & 0x1F) != 3)
      return 0;
    if ((*v6 & 0x1F) != 2)
      return 0;
    v41[0] = *(_QWORD *)(a3 + 8);
    v41[1] = v6;
    v14 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(a1, v41, a4);
    if (!v14)
      return 0;
    v15 = v14;
    if (*(_WORD *)(v14 + 16) == 99)
    {
      v16 = *(unsigned __int8 *)(v14 + 18);
      if ((v16 - 1) < 2)
      {
LABEL_17:
        v15 = *(_QWORD *)v15;
        goto LABEL_19;
      }
      if (v16 == 5 && *(_DWORD *)(v14 + 8))
      {
        v15 = *(_QWORD *)v14;
        goto LABEL_17;
      }
      v15 = 0;
    }
LABEL_19:
    v17 = *(unsigned __int8 *)(v15 + 18);
    v18 = v15;
    if (v17 != 2)
    {
      if (v17 != 5 || *(_DWORD *)(v15 + 8) < 2u)
        return 0;
      v18 = *(_QWORD *)v15;
    }
    v5 = *(uint64_t **)(v18 + 8);
    v19 = *((unsigned __int16 *)v5 + 8);
    if (v19 == 176 || v19 == 137)
    {
      v20 = *((unsigned __int8 *)v5 + 18);
      v21 = v5;
      if (v20 == 2)
      {
LABEL_29:
        v22 = v21[1];
        if (*(_WORD *)(v22 + 16) == 101 && *(_BYTE *)(v22 + 18) == 3)
        {
          v40[0] = 0;
          v40[72] = 0;
          v23 = *(_QWORD *)(a2 + 8);
          v36[0] = *(_QWORD *)a2;
          v36[1] = v23;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptorName(a1, v36, (uint64_t)v40, (uint64_t)v37);
          if (!v39)
          {
            v5 = 0;
LABEL_59:
            std::optional<swift::TypeImportInfo<std::string>>::~optional((uint64_t)v40);
            return v5;
          }
          v24 = v38;
          if ((v38 & 0x80u) == 0)
            v25 = v37;
          else
            v25 = (void **)v37[0];
          if ((v38 & 0x80u) == 0)
            v26 = v38;
          else
            v26 = (size_t)v37[1];
          if (v26 != *(_QWORD *)(v22 + 8) || v26 && memcmp(v25, *(const void **)v22, v26))
          {
            v5 = 0;
            v27 = 1;
LABEL_56:
            if (v27 && (v24 & 0x80) != 0)
              operator delete(v37[0]);
            goto LABEL_59;
          }
          v31[0] = v13;
          v31[1] = v6;
          swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(a1, v31, (uint64_t)v32);
          std::__optional_storage_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::ParentContextDescriptorRef,false>>(a3, v32);
          if (v35 && !v32[0] && v34 < 0)
            operator delete(__p);
          v29 = *(unsigned __int8 *)(v15 + 18);
          if ((v29 - 1) >= 2)
          {
            if (v29 != 5 || !*(_DWORD *)(v15 + 8))
            {
              v30 = 0;
              goto LABEL_55;
            }
            v15 = *(_QWORD *)v15;
          }
          v30 = *(_QWORD *)v15;
LABEL_55:
          *a5 = v30;
          v24 = v38;
          v27 = v39 != 0;
          goto LABEL_56;
        }
        return 0;
      }
      if (v20 == 5 && *((_DWORD *)v5 + 2) >= 2u)
      {
        v21 = (uint64_t *)*v5;
        goto LABEL_29;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  unint64_t v12;
  int v13;
  _QWORD v14[4];

  if (a4 < 1)
    return 0;
  v14[2] = v4;
  v14[3] = v5;
  if (*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v14[0] = *(_QWORD *)(a2 + 8);
    v14[1] = v7;
    return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v14, a3);
  }
  else
  {
    v11 = *(_WORD **)(a2 + 8);
    v9 = a2 + 8;
    v10 = v11;
    if (*(char *)(v9 + 23) < 0)
    {
      v12 = *(_QWORD *)(v9 + 8);
    }
    else
    {
      v10 = (_WORD *)v9;
      v12 = *(unsigned __int8 *)(v9 + 23);
    }
    result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextManglingForSymbol(a1, v10, v12, a3);
    if (result && *(_WORD *)(result + 16) == 232)
    {
      v13 = *(unsigned __int8 *)(result + 18);
      if ((v13 - 1) >= 2)
      {
        if (v13 != 5 || !*(_DWORD *)(result + 8))
          return 0;
        result = *(_QWORD *)result;
      }
      return *(_QWORD *)result;
    }
  }
  return result;
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::Demangle::__runtime::Demangler &,int)::ProtocolResolver>(uint64_t a1, _QWORD *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  _DWORD *v5;
  swift::Demangle::__runtime::Node *v6;
  unsigned int *Node;
  uint64_t v8;
  const char *v9;
  uint64_t v11;
  _DWORD *v12;
  _QWORD v13[2];

  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, *a2 & *(_QWORD *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, &v11);
  v5 = v12;
  if (!v12)
    return 0;
  v13[0] = v11;
  v13[1] = v12;
  v6 = (swift::Demangle::__runtime::Node *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v13, a3);
  if (v6 && ((*v5 & 0x10) != 0 || (*v5 & 0x1F) == 3))
  {
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
    swift::Demangle::__runtime::Node::addChild(Node, v6, a3, v8, v9);
    return Node;
  }
  return (unsigned int *)v6;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::demangleAnonymousContextName(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int16 *v3;
  unint64_t v4;
  unsigned __int16 *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  unsigned __int16 *v11;
  uint8x8_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v3 = (unsigned __int16 *)a2[1];
  v4 = *(unsigned int *)v3;
  if ((v4 & 0x10000) == 0)
    return 0;
  v6 = v3 + 4;
  if ((v4 & 0x80) != 0)
  {
    v9 = (unsigned __int16 *)((((unint64_t)&v6[4 * ((v4 >> 7) & 1) + 1] + v3[4] + 1) & 0xFFFFFFFFFFFFFFFCLL)
                            + 12 * v3[5]);
    v10 = v3[7];
    v11 = &v9[2 * (v10 & 1)];
    if ((v10 & 1) != 0)
      v11 += 4 * *v9;
    v8 = (unint64_t)v11 + (v10 & 2);
    if ((v10 & 2) != 0
      && (v12 = (uint8x8_t)vcnt_s8((int8x8_t)*v11), v12.i16[0] = vaddlv_u8(v12), v8 += 2 * v12.u32[0], *v11))
    {
      v7 = *(unsigned __int16 *)((char *)&v11[v12.u32[0] - 1] + (v10 & 2));
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = ((unint64_t)&v6[4 * ((v4 >> 7) & 1) + 1] + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }
  v13 = (int *)(((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7);
  v14 = *v13;
  v15 = (char *)v13 + *a2 - (_QWORD)v3 + v14;
  if ((_DWORD)v14)
    v16 = v15;
  else
    v16 = 0;
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v16, 1, a3);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4978;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4978;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(unsigned long long,unsigned int)#1}>,swift::reflection::TypeRef const* ()(unsigned long long,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  _QWORD v4[2];
  __int16 v5;

  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor(*(_QWORD *)(a1 + 8), *a2, *a3, (uint64_t)v4);
  if (v5 == 1)
  {
    ((void (*)(_QWORD, uint64_t, _QWORD))v4[1])(v4[0], 3, 0);
  }
  else if (!v5)
  {
    return v4[0];
  }
  return 0;
}

_QWORD *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeForOpaqueTypeDescriptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *UnderlyingTypeManglingForOpaqueTypeDescriptor;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v10[2] = 0;
  v11 = 0;
  v12 = 2400;
  v13 = 0;
  v14 = 0;
  v10[0] = off_B5288;
  v10[1] = 0;
  v49 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v47 = 0;
  UnderlyingTypeManglingForOpaqueTypeDescriptor = (_QWORD *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeManglingForOpaqueTypeDescriptor(a1, a2, a3, v10);
  if (UnderlyingTypeManglingForOpaqueTypeDescriptor)
  {
    v50 = a1 + 296;
    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v50, UnderlyingTypeManglingForOpaqueTypeDescriptor, 0, a4);
  }
  else
  {
    *(_WORD *)(a4 + 16) = 1;
    *(_QWORD *)a4 = "Failed to read type mangling for descriptor.";
    *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
  }
  v10[0] = off_B5288;
  v7 = v49;
  if (v49 == v48)
  {
    v8 = 4;
    v7 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_9:
  v10[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v11);
  if (v13)
    *(_BYTE *)(v13 + 48) = 0;
  return result;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readUnderlyingTypeManglingForOpaqueTypeDescriptor(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v7;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int16 *v13;
  __int16 v14;
  unsigned __int16 *v15;
  uint8x8_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int *v21;

  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, a2, &v20);
  if (!v21)
    return 0;
  v7 = *v21;
  if ((*v21 & 0x1F) != 4 || WORD1(v7) <= a3)
    return 0;
  v10 = v21 + 2;
  if ((v7 & 0x80) != 0)
  {
    v13 = (unsigned __int16 *)((((unint64_t)&v10[2 * ((v7 >> 7) & 1)] + *((unsigned __int16 *)v21 + 4) + 3) & 0xFFFFFFFFFFFFFFFCLL)
                             + 12 * *((unsigned __int16 *)v21 + 5));
    v14 = *((_WORD *)v21 + 7);
    v15 = &v13[2 * (v14 & 1)];
    if ((v14 & 1) != 0)
      v15 += 4 * *v13;
    v12 = (unint64_t)v15 + (v14 & 2);
    if ((v14 & 2) != 0
      && (v16 = (uint8x8_t)vcnt_s8((int8x8_t)*v15), v16.i16[0] = vaddlv_u8(v16), v12 += 2 * v16.u32[0], *v15))
    {
      v11 = *(unsigned __int16 *)((char *)&v15[v16.u32[0] - 1] + (v14 & 2));
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = ((unint64_t)&v10[2 * ((v7 >> 7) & 1)] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  v17 = (int *)(((v12 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v11 + 4 * a3);
  v18 = *v17;
  if ((_DWORD)v18)
    v19 = (char *)v17 + v20 - (_QWORD)v21 + v18;
  else
    v19 = 0;
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v19, 0, a4);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B49C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B49C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#1}>,std::unique_ptr<void const,std::function<void ()(void const*)>> ()(swift::remote::RemoteAddress,unsigned int)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 2488) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2, *a3);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4A08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4A08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,std::string &)#1}>,BOOL ()(swift::remote::RemoteAddress,std::string &)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 2488) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4A50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4A50;
  a2[1] = v2;
  return result;
}

void **std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress,unsigned int)#2}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress,unsigned int)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  return swift::remote::MemoryReader::readPointer(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2, *a3, a4);
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4A98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4A98;
  a2[1] = v2;
  return result;
}

double std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(swift::remote::RemoteAddress)#1}>,std::optional<swift::remote::RemoteAbsolutePointer> ()(swift::remote::RemoteAddress)>::operator()@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 2488) + 64))(&v6, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), *a2);
  result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  v5 = v8;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

void std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4AE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4AE0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1},std::allocator<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1}>,std::optional<unsigned long long> ()(std::string,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  return std::__invoke[abi:nn180100]<swift::reflection::TypeRefBuilder::TypeRefBuilder<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>(swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder> &,swift::remote::ExternalTypeRefCache *,swift::reflection::DescriptorFinder *)::{lambda(std::string,unsigned int)#1} &,std::string,unsigned int>(a1 + 8, a2, a3);
}

void SwiftReflectionContext::~SwiftReflectionContext(SwiftReflectionContext *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  SwiftReflectionContext *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;

  v2 = *((_QWORD *)this + 11);
  if (!v2)
  {
LABEL_37:
    v19 = std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::~__func(v19);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  for (i = (_QWORD *)*((_QWORD *)this + 3); v3 != i; v3 += 4)
  {
    v7 = (_QWORD *)v3[3];
    if (!v7)
    {
      v21 = 0;
      goto LABEL_37;
    }
    if (v3 == v7)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _BYTE *))(*v3 + 24))(v3, v20);
      v8 = (uint64_t)v21;
      if (!v21)
        goto LABEL_37;
    }
    else
    {
      v8 = (*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      v21 = (_BYTE *)v8;
      if (!v8)
        goto LABEL_37;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    v5 = v21;
    if (v21 == v20)
    {
      v5 = v20;
      v6 = 4;
    }
    else
    {
      if (!v21)
        continue;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  v9 = (SwiftReflectionContext *)*((_QWORD *)this + 11);
  if (v9 == (SwiftReflectionContext *)((char *)this + 64))
  {
    v10 = 4;
    v9 = (SwiftReflectionContext *)((char *)this + 64);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_20:
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 2);
  if (!v12)
    goto LABEL_33;
  v13 = *((_QWORD *)this + 3);
  v14 = (void *)*((_QWORD *)this + 2);
  if (v13 != v12)
  {
    while (1)
    {
      v17 = v13 - 32;
      v15 = *(_QWORD **)(v13 - 8);
      if ((_QWORD *)(v13 - 32) == v15)
      {
        v15 = (_QWORD *)(v13 - 32);
        v16 = 4;
      }
      else
      {
        if (!v15)
          goto LABEL_27;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_27:
      v13 = v17;
      if (v17 == v12)
      {
        v14 = (void *)*((_QWORD *)this + 2);
        break;
      }
    }
  }
  *((_QWORD *)this + 3) = v12;
  operator delete(v14);
LABEL_33:
  v18 = *((unsigned int *)this + 2);
  if ((_DWORD)v18 != -1)
    ((void (*)(_BYTE *, SwiftReflectionContext *))off_B48C8[v18])(v20, this);
  *((_DWORD *)this + 2) = -1;
}

void std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4B28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4B28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t std::__throw_bad_variant_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>();
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[18];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[16];

  v2 = ***a1;
  if (v2[2] || v2[5] || v2[8] || v2[11] || v2[14] || v2[17])
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>();
  v3 = *a2;
  v4 = v2[18];
  v5 = v2[19];
  v11 = *v2;
  v6 = v2[3];
  v12 = v2[1] - *v2;
  v13 = v2[4] - v6;
  v7 = v2[6];
  v8 = v2[9];
  v14 = v2[7] - v7;
  v15 = v2[10] - v8;
  v9 = v2[12];
  v10 = v2[15];
  v16 = v2[13] - v9;
  v17 = v2[16] - v10;
  v18[0] = *v2 - v4 + v5;
  v18[1] = v11;
  v18[2] = v12;
  v18[3] = v6 - v4 + v5;
  v18[4] = v6;
  v18[5] = v13;
  v18[6] = v7 - v4 + v5;
  v18[7] = v7;
  v18[8] = v14;
  v18[9] = v8 - v4 + v5;
  v18[10] = v8;
  v18[11] = v15;
  v18[12] = v9 - v4 + v5;
  v18[13] = v9;
  v18[14] = v16;
  v18[15] = v10 - v4 + v5;
  v18[16] = v10;
  v18[17] = v17;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = v24;
  v23 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v3 + 296), (uint64_t)v18);
  if (v22 != v24)
    free(v22);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[18];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[16];

  v2 = ***a1;
  if (v2[2] || v2[5] || v2[8] || v2[11] || v2[14] || v2[17])
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>();
  v3 = *a2;
  v4 = v2[18];
  v5 = v2[19];
  v11 = *v2;
  v6 = v2[3];
  v12 = v2[1] - *v2;
  v13 = v2[4] - v6;
  v7 = v2[6];
  v8 = v2[9];
  v14 = v2[7] - v7;
  v15 = v2[10] - v8;
  v9 = v2[12];
  v10 = v2[15];
  v16 = v2[13] - v9;
  v17 = v2[16] - v10;
  v18[0] = *v2 - v4 + v5;
  v18[1] = v11;
  v18[2] = v12;
  v18[3] = v6 - v4 + v5;
  v18[4] = v6;
  v18[5] = v13;
  v18[6] = v7 - v4 + v5;
  v18[7] = v7;
  v18[8] = v14;
  v18[9] = v8 - v4 + v5;
  v18[10] = v8;
  v18[11] = v15;
  v18[12] = v9 - v4 + v5;
  v18[13] = v9;
  v18[14] = v16;
  v18[15] = v10 - v4 + v5;
  v18[16] = v10;
  v18[17] = v17;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = v24;
  v23 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v3 + 296), (uint64_t)v18);
  if (v22 != v24)
    free(v22);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE v5[192];
  void *v6;
  uint64_t v7;

  v2 = (uint64_t *)(a1 + 296);
  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v5, a2);
  v3 = swift::reflection::TypeRefBuilder::addReflectionInfo(v2, (uint64_t)v5);
  if (v6 != &v7)
    free(v6);
  return v3;
}

uint64_t swift::reflection::TypeRefBuilder::addReflectionInfo(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  void *__src;
  unsigned int v29;
  uint64_t v30;

  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v12, a2);
  v3 = a1[212];
  if (v3 >= a1[213])
  {
    v9 = std::vector<swift::reflection::ReflectionInfo>::__push_back_slow_path<swift::reflection::ReflectionInfo const&>(a1 + 211, (uint64_t)v12);
    goto LABEL_12;
  }
  v4 = v12[1];
  *(_QWORD *)v3 = v12[0];
  *(_QWORD *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v13;
  *(_QWORD *)(v3 + 32) = v14;
  *(_OWORD *)(v3 + 40) = v15;
  *(_QWORD *)(v3 + 56) = v16;
  *(_OWORD *)(v3 + 64) = v17;
  *(_QWORD *)(v3 + 80) = v18;
  *(_OWORD *)(v3 + 88) = v19;
  *(_QWORD *)(v3 + 104) = v20;
  *(_OWORD *)(v3 + 112) = v21;
  *(_QWORD *)(v3 + 128) = v22;
  *(_OWORD *)(v3 + 136) = v23;
  *(_QWORD *)(v3 + 152) = v24;
  *(_OWORD *)(v3 + 160) = v25;
  v5 = v27;
  *(_QWORD *)(v3 + 176) = v26;
  *(_QWORD *)(v3 + 184) = v5;
  v6 = (void *)(v3 + 208);
  *(_QWORD *)(v3 + 192) = v3 + 208;
  *(_QWORD *)(v3 + 200) = 0x100000000;
  if ((_QWORD *)v3 != v12)
  {
    v7 = v29;
    if (v29)
    {
      if (v29 < 2)
      {
        v8 = 16;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 192, v3 + 208, v29, 16);
        if (!v29)
        {
LABEL_10:
          *(_DWORD *)(v3 + 200) = v7;
          goto LABEL_11;
        }
        v6 = *(void **)(v3 + 192);
        v8 = 16 * v29;
      }
      memcpy(v6, __src, v8);
      goto LABEL_10;
    }
  }
LABEL_11:
  v9 = v3 + 224;
LABEL_12:
  a1[212] = v9;
  v10 = a1[211];
  if (__src != &v30)
    free(__src);
  return -1227133513 * ((unint64_t)(v9 - v10) >> 5) - 1;
}

uint64_t std::vector<swift::reflection::ReflectionInfo>::__push_back_slow_path<swift::reflection::ReflectionInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x124924924924924)
    abort();
  v6 = (uint64_t)(a1 + 2);
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v7 = 0x124924924924924;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 > 0x124924924924924)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v8 = (char *)operator new(224 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t)&v8[224 * v2];
  v10 = &v8[224 * v7];
  swift::reflection::ReflectionInfo::ReflectionInfo(v9, a2);
  v11 = v9 + 224;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
  }
  else
  {
    do
    {
      v9 -= 224;
      v12 -= 224;
      std::allocator<swift::reflection::ReflectionInfo>::construct[abi:nn180100]<swift::reflection::ReflectionInfo,swift::reflection::ReflectionInfo>(v6, v9, (uint64_t)v12);
    }
    while (v12 != v13);
    v12 = (char *)*a1;
    v14 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
    if (v14 != v12)
    {
      v15 = v14 - 16;
      do
      {
        v17 = (char *)*((_QWORD *)v15 - 2);
        if (v15 != v17)
          free(v17);
        v16 = v15 - 208;
        v15 -= 224;
      }
      while (v16 != v12);
    }
  }
  if (v12)
    operator delete(v12);
  return v11;
}

uint64_t std::allocator<swift::reflection::ReflectionInfo>::construct[abi:nn180100]<swift::reflection::ReflectionInfo,swift::reflection::ReflectionInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  v4 = *(_QWORD *)(a3 + 184);
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
  *(_QWORD *)(a2 + 192) = a2 + 208;
  v5 = a2 + 192;
  *(_QWORD *)(v5 - 8) = v4;
  *(_QWORD *)(v5 + 8) = 0x100000000;
  if (*(_DWORD *)(a3 + 200))
    return __swift::__runtime::llvm::SmallVectorImpl<__swift::__runtime::llvm::StringRef>::operator=(v5, a3 + 192);
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<__swift::__runtime::llvm::StringRef>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 16 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t swift::reflection::ReflectionInfo::ReflectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void **v6;
  unint64_t v8;
  uint64_t v9;
  size_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v4 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v4;
  v5 = (void *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = a1 + 208;
  v6 = (void **)(a1 + 192);
  *(_QWORD *)(a1 + 200) = 0x100000000;
  if (a1 != a2)
  {
    v8 = *(unsigned int *)(a2 + 200);
    if ((_DWORD)v8)
    {
      if (v8 < 2)
      {
        v10 = 16;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 192, (uint64_t)v5, v8, 16);
        v9 = *(unsigned int *)(a2 + 200);
        if (!(_DWORD)v9)
        {
LABEL_8:
          *(_DWORD *)(a1 + 200) = v8;
          return a1;
        }
        v5 = *v6;
        v10 = 16 * v9;
      }
      memcpy(v5, *(const void **)(a2 + 192), v10);
      goto LABEL_8;
    }
  }
  return a1;
}

_QWORD *llvm::SmallVector<llvm::StringRef,1u>::SmallVector(_QWORD *a1, uint64_t a2)
{
  void *v3;
  unint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = a1 + 2;
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  if (a1 != (_QWORD *)a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      if (v5 < 2)
      {
        v7 = 16;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 2), v5, 16);
        v6 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v6)
        {
LABEL_8:
          *((_DWORD *)a1 + 2) = v5;
          return a1;
        }
        v3 = (void *)*a1;
        v7 = 16 * v6;
      }
      memcpy(v3, *(const void **)a2, v7);
      goto LABEL_8;
    }
  }
  return a1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionMappingInfo::$_0>(swift_reflection_addReflectionMappingInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[18];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE v27[16];

  v2 = *a2;
  v3 = ***a1;
  v4 = *v3;
  v5 = v3[3];
  v6 = v3[6];
  v7 = v3[4];
  v8 = v3[7];
  v9 = v3[10];
  v10 = v3[8];
  v11 = v3[11];
  v12 = v3[14];
  v13 = v3[12];
  v14 = v3[15];
  v15 = v3[18];
  v16 = v3[16];
  v17 = v3[19];
  v18 = v3[22];
  v19 = v3[20];
  v20 = v3[23];
  v21[0] = v3[2];
  v21[1] = v4;
  v21[2] = v5;
  v21[3] = v6;
  v21[4] = v7;
  v21[5] = v8;
  v21[6] = v9;
  v21[7] = v10;
  v21[8] = v11;
  v21[9] = v12;
  v21[10] = v13;
  v21[11] = v14;
  v21[12] = v15;
  v21[13] = v16;
  v21[14] = v17;
  v21[15] = v18;
  v21[16] = v19;
  v21[17] = v20;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = v27;
  v26 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v2 + 296), (uint64_t)v21);
  if (v25 != v27)
    free(v25);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionMappingInfo::$_0>(swift_reflection_addReflectionMappingInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[18];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE v27[16];

  v2 = *a2;
  v3 = ***a1;
  v4 = *v3;
  v5 = v3[3];
  v6 = v3[6];
  v7 = v3[4];
  v8 = v3[7];
  v9 = v3[10];
  v10 = v3[8];
  v11 = v3[11];
  v12 = v3[14];
  v13 = v3[12];
  v14 = v3[15];
  v15 = v3[18];
  v16 = v3[16];
  v17 = v3[19];
  v18 = v3[22];
  v19 = v3[20];
  v20 = v3[23];
  v21[0] = v3[2];
  v21[1] = v4;
  v21[2] = v5;
  v21[3] = v6;
  v21[4] = v7;
  v21[5] = v8;
  v21[6] = v9;
  v21[7] = v10;
  v21[8] = v11;
  v21[9] = v12;
  v21[10] = v13;
  v21[11] = v14;
  v21[12] = v15;
  v21[13] = v16;
  v21[14] = v17;
  v21[15] = v18;
  v21[16] = v19;
  v21[17] = v20;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = v27;
  v26 = 0x100000000;
  swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v2 + 296), (uint64_t)v21);
  if (v25 != v27)
    free(v25);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_addImage::$_0>(swift_reflection_addImage::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t **v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v7[2];
  _BYTE v8[16];

  v2 = **a1;
  v3 = *a2;
  v4 = **v2;
  v7[0] = v8;
  v7[1] = (void *)0x100000000;
  v5 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(v3, v4, (uint64_t)v7);
  if (v7[0] != v8)
    free(v7[0]);
  return (v5 & 0xFF00000000) != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_addImage::$_0>(swift_reflection_addImage::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t **v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v7[2];
  _BYTE v8[16];

  v2 = **a1;
  v3 = *a2;
  v4 = **v2;
  v7[0] = v8;
  v7[1] = (void *)0x100000000;
  v5 = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(v3, v4, (uint64_t)v7);
  if (v7[0] != v8)
    free(v7[0]);
  return (v5 & 0xFF00000000) != 0;
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  size_t v20;
  unsigned int v21;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  unsigned int **v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  unint64_t PECOFF;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  size_t v100;
  _BYTE *v101;
  uint64_t v102;
  size_t v103;
  _BYTE *v104;
  size_t v105;
  _BYTE *v106;
  size_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  int v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  _QWORD *v125;
  int v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  unint64_t v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  void **v209;
  void **v210;
  unint64_t v211;
  unint64_t v212;
  _QWORD v213[2];
  uint64_t v214;
  __int128 v215;
  char v216;
  _BYTE *v217;
  uint64_t v218;
  _BYTE v219[16];
  void *v220;
  uint64_t v221;
  _BYTE v222[16];
  void *__src;
  uint64_t v224;
  _BYTE v225[16];
  int *v226;
  _BYTE v227[24];
  _BYTE *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  _BYTE v255[16];
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *__dst;
  uint64_t v281;
  _BYTE v282[16];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t *v308;
  unint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  _BYTE v314[24];
  _BYTE *v315;
  unsigned int v316;
  uint64_t v317;
  _BYTE v318[24];
  _BYTE *v319;
  uint64_t v320;
  _BYTE v321[24];
  _BYTE *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  uint64_t v348;
  _BYTE v349[16];
  _QWORD v350[2];

  v6 = a1;
  (*(void (**)(int **__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v226);
  if (!v226)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v226 = 0;
    goto LABEL_376;
  }
  v7 = *v226;
  if (*v226 == -17958193)
  {
    v220 = v222;
    v221 = 0x100000000;
    if (&v220 == (void **)a3)
      goto LABEL_76;
    v12 = *(_DWORD *)(a3 + 8);
    if (!v12)
      goto LABEL_76;
    if (v12 < 2)
    {
      v15 = 16;
      v14 = v222;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, *(unsigned int *)(a3 + 8), 16);
      v13 = *(unsigned int *)(a3 + 8);
      if (!(_DWORD)v13)
      {
LABEL_75:
        LODWORD(v221) = v12;
LABEL_76:
        (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                         + 24))(&v320, *(_QWORD *)(v6 + 2488), a2, 32);
        if (!v320)
        {
          LOBYTE(a2) = 0;
          LOBYTE(v6) = 0;
          v320 = 0;
          goto LABEL_366;
        }
        v41 = *(_DWORD *)(v320 + 20);
        if (!v41)
          goto LABEL_117;
        v42 = 0;
        v43 = 0;
        v210 = (void **)(v6 + 2536);
        v212 = a2 + 32;
        a3 = (uint64_t)&v324;
        v208 = *(_DWORD *)(v320 + 20);
        while (1)
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                           + 24))(&v323, *(_QWORD *)(v6 + 2488), v42 + v212, 72);
          v44 = v323;
          if (!v323)
            break;
          if (strncmp((const char *)(v323 + 8), "__TEXT", 0x10uLL))
          {
            v45 = 0;
            v42 += *(unsigned int *)(v44 + 4);
            v323 = 0;
            v46 = v44;
LABEL_92:
            v256 = v46;
            if (!v327)
              goto LABEL_382;
            (*(void (**)(uint64_t *, uint64_t *))(*v327 + 48))(v327, &v256);
LABEL_94:
            v44 = v43;
            goto LABEL_95;
          }
          v47 = *(uint64_t **)(v6 + 2544);
          if ((unint64_t)v47 >= *(_QWORD *)(v6 + 2552))
          {
            v48 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v210, &v323);
          }
          else
          {
            v323 = 0;
            *v47 = v44;
            if (v327)
            {
              if (v327 == &v324)
              {
                v47[4] = (uint64_t)(v47 + 1);
                (*(void (**)(uint64_t *))(*v327 + 24))(v327);
              }
              else
              {
                v47[4] = (uint64_t)v327;
                v327 = 0;
              }
            }
            else
            {
              v47[4] = 0;
            }
            v48 = (char *)(v47 + 5);
          }
          *(_QWORD *)(v6 + 2544) = v48;
          v46 = v323;
          v45 = 2;
          v43 = v44;
          v323 = 0;
          if (v46)
            goto LABEL_92;
LABEL_95:
          v49 = v327;
          if (v327 == &v324)
          {
            v49 = &v324;
            v50 = 4;
          }
          else
          {
            if (!v327)
              goto LABEL_100;
            v50 = 5;
          }
          (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_100:
          if (v45)
          {
            if (v45 == 2)
            {
LABEL_105:
              if (v44)
              {
                (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                                 + 24))(&v317, *(_QWORD *)(v6 + 2488), v42 + v212, 72);
                if (!v317)
                {
                  LOBYTE(a2) = 0;
                  LOBYTE(v6) = 0;
                  v317 = 0;
                  goto LABEL_358;
                }
                v316 = *(_DWORD *)(v317 + 64);
                (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                                 + 24))(&v313, *(_QWORD *)(v6 + 2488), v42 + v212 + 72, 80 * v316);
                if (!v313)
                {
                  LOBYTE(a2) = 0;
                  LOBYTE(v6) = 0;
                  v313 = 0;
                  goto LABEL_350;
                }
                v312 = a2 - *(_QWORD *)(v44 + 24);
                v311 = v313;
                v307 = &v316;
                v308 = &v311;
                v309 = &v312;
                v310 = v6;
                v51 = v304;
                v52 = v301;
                v53 = v298;
                v54 = v295;
                v55 = v292;
                v56 = v289;
                v57 = v286;
                v58 = v283;
                if (!v304 && !v301 && !v298 && !v295 && !v292 && !v289 && !v286 && !v283)
                {
                  LOBYTE(v6) = 0;
                  LOBYTE(a2) = 0;
                  goto LABEL_347;
                }
                v81 = v305;
                v256 = v304;
                v257 = v305;
                v82 = v302;
                v83 = v303;
                v206 = v306;
                v258 = v306;
                v259 = v301;
                v260 = v302;
                v261 = v303;
                v84 = v299;
                v85 = v300;
                v262 = v298;
                v263 = v299;
                v86 = v296;
                v87 = v297;
                v264 = v300;
                v265 = v295;
                v266 = v296;
                v267 = v297;
                v88 = v293;
                v89 = v294;
                v268 = v292;
                v269 = v293;
                v90 = v290;
                v91 = v291;
                v270 = v294;
                v271 = v289;
                v272 = v290;
                v273 = v291;
                v92 = v287;
                v93 = v288;
                v274 = v286;
                v275 = v287;
                v94 = v284;
                v95 = v285;
                v276 = v288;
                v277 = v283;
                v278 = v284;
                v279 = v285;
                __dst = v282;
                v281 = 0x100000000;
                v96 = v221;
                if ((_DWORD)v221)
                {
                  if ((_DWORD)v221 == 1)
                  {
                    v97 = 16;
                    v98 = v282;
                    goto LABEL_144;
                  }
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v282, v221, 16);
                  if ((_DWORD)v221)
                  {
                    v98 = __dst;
                    v97 = 16 * v221;
LABEL_144:
                    memcpy(v98, v220, v97);
                  }
                  LODWORD(v281) = v96;
                  v51 = v256;
                  v81 = v257;
                  v206 = v258;
                  v52 = v259;
                  v82 = v260;
                  v83 = v261;
                  v53 = v262;
                  v84 = v263;
                  v85 = v264;
                  v54 = v265;
                  v86 = v266;
                  v87 = v267;
                  v55 = v268;
                  v88 = v269;
                  v89 = v270;
                  v56 = v271;
                  v90 = v272;
                  v91 = v273;
                  v57 = v274;
                  v92 = v275;
                  v93 = v276;
                  v58 = v277;
                  v94 = v278;
                  v95 = v279;
                }
                v202 = v81;
                v229 = v51;
                v230 = v81;
                v231 = v206;
                v232 = v52;
                v233 = v82;
                v234 = v83;
                v235 = v53;
                v236 = v84;
                v237 = v85;
                v238 = v54;
                v239 = v86;
                v240 = v87;
                v241 = v55;
                v242 = v88;
                v243 = v89;
                v244 = v56;
                v245 = v90;
                v246 = v91;
                v247 = v57;
                v248 = v92;
                v249 = v93;
                v250 = v58;
                v251 = v94;
                v252 = v95;
                v102 = v90;
                v253 = v255;
                v254 = 0x100000000;
                if ((_DWORD)v96)
                {
                  if ((_DWORD)v96 == 1)
                  {
                    v103 = 16;
                    v104 = v255;
                    goto LABEL_158;
                  }
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v96, 16);
                  if ((_DWORD)v281)
                  {
                    v104 = v253;
                    v103 = 16 * v281;
LABEL_158:
                    memcpy(v104, __dst, v103);
                  }
                  LODWORD(v254) = v96;
                  v51 = v229;
                  v202 = v230;
                  v206 = v231;
                  v52 = v232;
                  v82 = v233;
                  v83 = v234;
                  v53 = v235;
                  v84 = v236;
                  v85 = v237;
                  v54 = v238;
                  v86 = v239;
                  v87 = v240;
                  v55 = v241;
                  v88 = v242;
                  v89 = v243;
                  v56 = v244;
                  v102 = v245;
                  v91 = v246;
                  v57 = v247;
                  v92 = v248;
                  v93 = v249;
                  v58 = v250;
                  v94 = v251;
                  v95 = v252;
                }
                v323 = v51;
                v324 = v202;
                v325 = v206;
                v326 = v52;
                v327 = v82;
                v328 = v83;
                v329 = v53;
                v330 = v84;
                v331 = v85;
                v332 = v54;
                v333 = v86;
                v334 = v87;
                v335 = v55;
                v336 = v88;
                v337 = v89;
                v338 = v56;
                v339 = v102;
                v340 = v91;
                v341 = v57;
                v342 = v92;
                v343 = v93;
                v344 = v58;
                v345 = v94;
                v346 = v95;
                v347 = v349;
                v348 = 0x100000000;
                if ((_DWORD)v96)
                {
                  if ((_DWORD)v96 == 1)
                  {
                    v107 = 16;
                    v108 = v349;
                    goto LABEL_184;
                  }
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v96, 16);
                  if ((_DWORD)v254)
                  {
                    v108 = v347;
                    v107 = 16 * v254;
LABEL_184:
                    memcpy(v108, v253, v107);
                  }
                  LODWORD(v348) = v96;
                }
                LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v323);
                if (v347 != v349)
                  free(v347);
                if (v253 != v255)
                  free(v253);
                v121 = *(_QWORD *)(v44 + 24) + v312;
                v122 = v121 + *(_QWORD *)(v44 + 32);
                v123 = *(char **)(v6 + 2568);
                v124 = *(_QWORD *)(v6 + 2576);
                if ((unint64_t)v123 < v124)
                {
                  *(_QWORD *)v123 = v121;
                  *((_QWORD *)v123 + 1) = v122;
                  v125 = v123 + 16;
                  v126 = v208;
                  goto LABEL_253;
                }
                v127 = *(char **)(v6 + 2560);
                v128 = (v123 - v127) >> 4;
                v129 = v128 + 1;
                v126 = v208;
                if ((unint64_t)(v128 + 1) >> 60)
                  goto LABEL_383;
                v130 = v124 - (_QWORD)v127;
                if (v130 >> 3 > v129)
                  v129 = v130 >> 3;
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0)
                  v131 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v131 = v129;
                if (!v131)
                {
                  v132 = 0;
                  goto LABEL_206;
                }
                if (!(v131 >> 60))
                {
                  v132 = (char *)operator new(16 * v131);
LABEL_206:
                  v134 = &v132[16 * v128];
                  *(_QWORD *)v134 = v121;
                  *((_QWORD *)v134 + 1) = v122;
                  v125 = v134 + 16;
                  if (v123 != v127)
                  {
                    do
                    {
                      *((_OWORD *)v134 - 1) = *((_OWORD *)v123 - 1);
                      v134 -= 16;
                      v123 -= 16;
                    }
                    while (v123 != v127);
                    v123 = *(char **)(v6 + 2560);
                  }
                  *(_QWORD *)(v6 + 2560) = v134;
                  *(_QWORD *)(v6 + 2568) = v125;
                  *(_QWORD *)(v6 + 2576) = &v132[16 * v131];
                  if (v123)
                    operator delete(v123);
LABEL_253:
                  v155 = 0;
                  *(_QWORD *)(v6 + 2568) = v125;
                  while (2)
                  {
                    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v323, *(_QWORD *)(v6 + 2488), v42 + v212, 72);
                    a3 = v323;
                    if (v323)
                    {
                      if (strncmp((const char *)(v323 + 8), "__DATA", 6uLL)
                        && strncmp((const char *)(a3 + 8), "__AUTH", 6uLL))
                      {
                        v42 += *(unsigned int *)(a3 + 4);
                        v323 = 0;
                        v156 = a3;
                        goto LABEL_278;
                      }
                      v157 = *(_QWORD *)(a3 + 24) + v312;
                      v158 = v157 + *(_QWORD *)(a3 + 32);
                      v159 = *(char **)(v6 + 2592);
                      v160 = *(_QWORD *)(v6 + 2600);
                      if ((unint64_t)v159 >= v160)
                      {
                        v162 = *(char **)(v6 + 2584);
                        v163 = (v159 - v162) >> 4;
                        v164 = v163 + 1;
                        if ((unint64_t)(v163 + 1) >> 60)
                          goto LABEL_383;
                        v165 = v160 - (_QWORD)v162;
                        if (v165 >> 3 > v164)
                          v164 = v165 >> 3;
                        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0)
                          v164 = 0xFFFFFFFFFFFFFFFLL;
                        v204 = v164;
                        if (v164)
                        {
                          if (v164 >> 60)
                            break;
                          v166 = (char *)operator new(16 * v164);
                        }
                        else
                        {
                          v166 = 0;
                        }
                        v167 = &v166[16 * v163];
                        *(_QWORD *)v167 = v157;
                        *((_QWORD *)v167 + 1) = v158;
                        v168 = v167;
                        if (v159 == v162)
                        {
                          v126 = v208;
                          v169 = v204;
                        }
                        else
                        {
                          v126 = v208;
                          v169 = v204;
                          do
                          {
                            *((_OWORD *)v168 - 1) = *((_OWORD *)v159 - 1);
                            v168 -= 16;
                            v159 -= 16;
                          }
                          while (v159 != v162);
                          v159 = *(char **)(v6 + 2584);
                        }
                        *(_QWORD *)(v6 + 2584) = v168;
                        v161 = v167 + 16;
                        *(_QWORD *)(v6 + 2592) = v167 + 16;
                        *(_QWORD *)(v6 + 2600) = &v166[16 * v169];
                        if (v159)
                          operator delete(v159);
                      }
                      else
                      {
                        *(_QWORD *)v159 = v157;
                        *((_QWORD *)v159 + 1) = v158;
                        v161 = v159 + 16;
                      }
                      *(_QWORD *)(v6 + 2592) = v161;
                      v156 = v323;
                      v42 += *(unsigned int *)(a3 + 4);
                      v323 = 0;
                      if (v156)
                      {
LABEL_278:
                        v350[0] = v156;
                        if (!v327)
                          goto LABEL_382;
                        (*(void (**)(uint64_t *, _QWORD *))(*v327 + 48))(v327, v350);
                      }
                    }
                    else
                    {
                      v323 = 0;
                    }
                    v170 = v327;
                    if (v327 == &v324)
                    {
                      v170 = &v324;
                      v171 = 4;
LABEL_284:
                      (*(void (**)(void))(*v170 + 8 * v171))();
                    }
                    else if (v327)
                    {
                      v171 = 5;
                      goto LABEL_284;
                    }
                    if (!a3)
                    {
                      LOBYTE(v6) = 0;
                      LOBYTE(a2) = 0;
LABEL_345:
                      if (__dst != v282)
                        free(__dst);
LABEL_347:
                      v188 = v313;
                      v313 = 0;
                      if (v188)
                      {
                        v323 = v188;
                        if (!v315)
                          goto LABEL_382;
                        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v315 + 48))(v315, &v323);
                      }
LABEL_350:
                      v189 = v315;
                      if (v315 == v314)
                      {
                        v190 = 4;
                        v189 = v314;
LABEL_354:
                        (*(void (**)(void))(*v189 + 8 * v190))();
                      }
                      else if (v315)
                      {
                        v190 = 5;
                        goto LABEL_354;
                      }
                      v191 = v317;
                      v317 = 0;
                      if (v191)
                      {
                        v323 = v191;
                        if (!v319)
                          goto LABEL_382;
                        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v319 + 48))(v319, &v323);
                      }
LABEL_358:
                      v192 = v319;
                      if (v319 == v318)
                      {
                        v193 = 4;
                        v192 = v318;
LABEL_362:
                        (*(void (**)(void))(*v192 + 8 * v193))();
                      }
                      else if (v319)
                      {
                        v193 = 5;
                        goto LABEL_362;
                      }
LABEL_363:
                      v194 = v320;
                      v320 = 0;
                      if (v194)
                      {
                        v323 = v194;
                        if (!v322)
                          goto LABEL_382;
                        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v322 + 48))(v322, &v323);
                      }
LABEL_366:
                      v195 = v322;
                      if (v322 == v321)
                      {
                        v196 = 4;
                        v195 = v321;
LABEL_370:
                        (*(void (**)(void))(*v195 + 8 * v196))();
                      }
                      else if (v322)
                      {
                        v196 = 5;
                        goto LABEL_370;
                      }
                      v61 = 0;
                      v3 = 0;
                      v60 = v220;
                      if (v220 == v222)
                        goto LABEL_373;
LABEL_372:
                      free(v60);
                      v3 = v61;
                      goto LABEL_373;
                    }
                    if (++v155 == v126)
                    {
                      v172 = *(uint64_t **)(v6 + 2544);
                      if ((unint64_t)v172 >= *(_QWORD *)(v6 + 2552))
                      {
                        v174 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v210, &v320);
                      }
                      else
                      {
                        v173 = v320;
                        v320 = 0;
                        *v172 = v173;
                        if (v322)
                        {
                          if (v322 == v321)
                          {
                            v172[4] = (uint64_t)(v172 + 1);
                            (*(void (**)(_BYTE *))(*(_QWORD *)v322 + 24))(v322);
                          }
                          else
                          {
                            v172[4] = (uint64_t)v322;
                            v322 = 0;
                          }
                        }
                        else
                        {
                          v172[4] = 0;
                        }
                        v174 = (char *)(v172 + 5);
                      }
                      *(_QWORD *)(v6 + 2544) = v174;
                      if ((unint64_t)v174 >= *(_QWORD *)(v6 + 2552))
                      {
                        v178 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v210, &v313);
                      }
                      else
                      {
                        v177 = v313;
                        v313 = 0;
                        *(_QWORD *)v174 = v177;
                        if (v315)
                        {
                          if (v315 == v314)
                          {
                            *((_QWORD *)v174 + 4) = v174 + 8;
                            (*(void (**)(_BYTE *))(*(_QWORD *)v315 + 24))(v315);
                          }
                          else
                          {
                            *((_QWORD *)v174 + 4) = v315;
                            v315 = 0;
                          }
                        }
                        else
                        {
                          *((_QWORD *)v174 + 4) = 0;
                        }
                        v178 = v174 + 40;
                      }
                      *(_QWORD *)(v6 + 2544) = v178;
                      LODWORD(a3) = a2 >> 8;
                      LOBYTE(v6) = 1;
                      goto LABEL_345;
                    }
                    continue;
                  }
                }
LABEL_384:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
            }
LABEL_117:
            LOBYTE(v6) = 0;
            LOBYTE(a2) = 0;
            goto LABEL_363;
          }
          v43 = v44;
          if (!--v41)
            goto LABEL_105;
        }
        v323 = 0;
        v45 = 1;
        goto LABEL_94;
      }
      v14 = v220;
      v15 = 16 * v13;
    }
    memcpy(v14, *(const void **)a3, v15);
    goto LABEL_75;
  }
  if (v7 != -17958194)
  {
    v16 = BYTE1(v7);
    if (*v226 == 127)
    {
      v21 = v7 & 0xFFFF0000;
      if (v16 == 69 && v21 == 1179385856)
      {
        LOBYTE(v215) = 0;
        v216 = 0;
        llvm::SmallVector<llvm::StringRef,1u>::SmallVector(v213, a3);
        v59 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(v6, a2, &v215, (uint64_t)v213);
        LOBYTE(a2) = v59;
        a3 = v59 >> 8;
        v6 = HIDWORD(v59);
        v3 = v59 >> 40;
        v60 = (void *)v213[0];
        v61 = v3;
        if ((uint64_t *)v213[0] == &v214)
          goto LABEL_373;
        goto LABEL_372;
      }
    }
    else if (*v226 == 77 && BYTE1(v7) == 90)
    {
      v217 = v219;
      v218 = 0x100000000;
      if (&v217 == (_BYTE **)a3 || (v17 = *(_DWORD *)(a3 + 8)) == 0)
      {
LABEL_125:
        PECOFF = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFF(v6, a2, (uint64_t)&v217);
        LOBYTE(a2) = PECOFF;
        a3 = PECOFF >> 8;
        v6 = HIDWORD(PECOFF);
        v61 = PECOFF >> 40;
        v60 = v217;
        v3 = v61;
        if (v217 == v219)
          goto LABEL_373;
        goto LABEL_372;
      }
      if (v17 < 2)
      {
        v20 = 16;
        v19 = v219;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, *(unsigned int *)(a3 + 8), 16);
        v18 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v18)
        {
LABEL_124:
          LODWORD(v218) = v17;
          goto LABEL_125;
        }
        v19 = v217;
        v20 = 16 * v18;
      }
      memcpy(v19, *(const void **)a3, v20);
      goto LABEL_124;
    }
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_373;
  }
  __src = v225;
  v224 = 0x100000000;
  if (&__src == (void **)a3)
    goto LABEL_31;
  v8 = *(_DWORD *)(a3 + 8);
  if (!v8)
    goto LABEL_31;
  if (v8 < 2)
  {
    v11 = 16;
    v10 = v225;
    goto LABEL_29;
  }
  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v225, *(unsigned int *)(a3 + 8), 16);
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9)
  {
    v10 = __src;
    v11 = 16 * v9;
LABEL_29:
    memcpy(v10, *(const void **)a3, v11);
  }
  LODWORD(v224) = v8;
LABEL_31:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v320, *(_QWORD *)(v6 + 2488), a2, 28);
  if (!v320)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v320 = 0;
    goto LABEL_335;
  }
  v23 = *(_DWORD *)(v320 + 20);
  if (!v23)
  {
LABEL_72:
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_332;
  }
  v24 = 0;
  v25 = 0;
  v209 = (void **)(v6 + 2536);
  v211 = a2 + 28;
  a3 = (uint64_t)&v324;
  v207 = *(_DWORD *)(v320 + 20);
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v323, *(_QWORD *)(v6 + 2488), v24 + v211, 56);
    v26 = (unsigned int *)v323;
    if (!v323)
    {
      v323 = 0;
      v27 = 1;
      goto LABEL_49;
    }
    if (strncmp((const char *)(v323 + 8), "__TEXT", 0x10uLL))
    {
      v27 = 0;
      v24 += v26[1];
      v323 = 0;
      v28 = (uint64_t)v26;
LABEL_47:
      v256 = v28;
      if (!v327)
        goto LABEL_382;
      (*(void (**)(uint64_t *, uint64_t *))(*v327 + 48))(v327, &v256);
LABEL_49:
      v26 = v25;
      goto LABEL_50;
    }
    v29 = *(unsigned int ***)(v6 + 2544);
    if ((unint64_t)v29 >= *(_QWORD *)(v6 + 2552))
    {
      v30 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v209, &v323);
    }
    else
    {
      v323 = 0;
      *v29 = v26;
      if (v327)
      {
        if (v327 == &v324)
        {
          v29[4] = (unsigned int *)(v29 + 1);
          (*(void (**)(uint64_t *))(*v327 + 24))(v327);
        }
        else
        {
          v29[4] = (unsigned int *)v327;
          v327 = 0;
        }
      }
      else
      {
        v29[4] = 0;
      }
      v30 = (char *)(v29 + 5);
    }
    *(_QWORD *)(v6 + 2544) = v30;
    v28 = v323;
    v27 = 2;
    v25 = v26;
    v323 = 0;
    if (v28)
      goto LABEL_47;
LABEL_50:
    v31 = v327;
    if (v327 == &v324)
    {
      v31 = &v324;
      v32 = 4;
    }
    else
    {
      if (!v327)
        goto LABEL_55;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_55:
    if (v27)
      break;
    v25 = v26;
    if (!--v23)
      goto LABEL_60;
  }
  if (v27 != 2)
    goto LABEL_72;
LABEL_60:
  if (!v26)
    goto LABEL_72;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v317, *(_QWORD *)(v6 + 2488), v24 + v211, 56);
  if (!v317)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v317 = 0;
    goto LABEL_327;
  }
  v316 = *(_DWORD *)(v317 + 48);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v313, *(_QWORD *)(v6 + 2488), v24 + v211 + 56, 68 * v316);
  if (!v313)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v313 = 0;
    goto LABEL_319;
  }
  v312 = a2 - v26[6];
  v311 = v313;
  v307 = &v316;
  v308 = &v311;
  v309 = &v312;
  v310 = v6;
  v33 = v304;
  v34 = v301;
  v35 = v298;
  v36 = v295;
  v37 = v292;
  v38 = v289;
  v39 = v286;
  v40 = v283;
  if (!v304 && !v301 && !v298 && !v295 && !v292 && !v289 && !v286 && !v283)
  {
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_316;
  }
  v63 = v305;
  v256 = v304;
  v257 = v305;
  v64 = v302;
  v65 = v303;
  v205 = v306;
  v258 = v306;
  v259 = v301;
  v260 = v302;
  v261 = v303;
  v66 = v299;
  v67 = v300;
  v262 = v298;
  v263 = v299;
  v68 = v296;
  v69 = v297;
  v264 = v300;
  v265 = v295;
  v266 = v296;
  v267 = v297;
  v70 = v293;
  v71 = v294;
  v268 = v292;
  v269 = v293;
  v72 = v290;
  v73 = v291;
  v270 = v294;
  v271 = v289;
  v272 = v290;
  v273 = v291;
  v74 = v287;
  v75 = v288;
  v274 = v286;
  v275 = v287;
  v76 = v284;
  v77 = v285;
  v276 = v288;
  v277 = v283;
  v278 = v284;
  v279 = v285;
  __dst = v282;
  v281 = 0x100000000;
  v78 = v224;
  if ((_DWORD)v224)
  {
    if ((_DWORD)v224 == 1)
    {
      v79 = 16;
      v80 = v282;
      goto LABEL_137;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v282, v224, 16);
    if ((_DWORD)v224)
    {
      v80 = __dst;
      v79 = 16 * v224;
LABEL_137:
      memcpy(v80, __src, v79);
    }
    LODWORD(v281) = v78;
    v33 = v256;
    v63 = v257;
    v205 = v258;
    v34 = v259;
    v64 = v260;
    v65 = v261;
    v35 = v262;
    v66 = v263;
    v67 = v264;
    v36 = v265;
    v68 = v266;
    v69 = v267;
    v37 = v268;
    v70 = v269;
    v71 = v270;
    v38 = v271;
    v72 = v272;
    v73 = v273;
    v39 = v274;
    v74 = v275;
    v75 = v276;
    v40 = v277;
    v76 = v278;
    v77 = v279;
  }
  v201 = v63;
  v229 = v33;
  v230 = v63;
  v231 = v205;
  v232 = v34;
  v233 = v64;
  v234 = v65;
  v235 = v35;
  v236 = v66;
  v237 = v67;
  v238 = v36;
  v239 = v68;
  v240 = v69;
  v241 = v37;
  v242 = v70;
  v243 = v71;
  v244 = v38;
  v245 = v72;
  v246 = v73;
  v247 = v39;
  v248 = v74;
  v249 = v75;
  v250 = v40;
  v251 = v76;
  v252 = v77;
  v99 = v72;
  v253 = v255;
  v254 = 0x100000000;
  if ((_DWORD)v78)
  {
    if ((_DWORD)v78 == 1)
    {
      v100 = 16;
      v101 = v255;
      goto LABEL_151;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v78, 16);
    if ((_DWORD)v281)
    {
      v101 = v253;
      v100 = 16 * v281;
LABEL_151:
      memcpy(v101, __dst, v100);
    }
    LODWORD(v254) = v78;
    v33 = v229;
    v201 = v230;
    v205 = v231;
    v34 = v232;
    v64 = v233;
    v65 = v234;
    v35 = v235;
    v66 = v236;
    v67 = v237;
    v36 = v238;
    v68 = v239;
    v69 = v240;
    v37 = v241;
    v70 = v242;
    v71 = v243;
    v38 = v244;
    v99 = v245;
    v73 = v246;
    v39 = v247;
    v74 = v248;
    v75 = v249;
    v40 = v250;
    v76 = v251;
    v77 = v252;
  }
  v323 = v33;
  v324 = v201;
  v325 = v205;
  v326 = v34;
  v327 = v64;
  v328 = v65;
  v329 = v35;
  v330 = v66;
  v331 = v67;
  v332 = v36;
  v333 = v68;
  v334 = v69;
  v335 = v37;
  v336 = v70;
  v337 = v71;
  v338 = v38;
  v339 = v99;
  v340 = v73;
  v341 = v39;
  v342 = v74;
  v343 = v75;
  v344 = v40;
  v345 = v76;
  v346 = v77;
  v347 = v349;
  v348 = 0x100000000;
  if ((_DWORD)v78)
  {
    if ((_DWORD)v78 == 1)
    {
      v105 = 16;
      v106 = v349;
      goto LABEL_165;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v78, 16);
    if ((_DWORD)v254)
    {
      v106 = v347;
      v105 = 16 * v254;
LABEL_165:
      memcpy(v106, v253, v105);
    }
    LODWORD(v348) = v78;
  }
  LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v323);
  if (v347 != v349)
    free(v347);
  if (v253 != v255)
    free(v253);
  v109 = v312 + v26[6];
  v110 = v109 + v26[7];
  v111 = *(char **)(v6 + 2568);
  v112 = *(_QWORD *)(v6 + 2576);
  if ((unint64_t)v111 < v112)
  {
    *(_QWORD *)v111 = v109;
    *((_QWORD *)v111 + 1) = v110;
    v113 = v111 + 16;
    v114 = v207;
    goto LABEL_211;
  }
  v115 = *(char **)(v6 + 2560);
  v116 = (v111 - v115) >> 4;
  v117 = v116 + 1;
  v114 = v207;
  if ((unint64_t)(v116 + 1) >> 60)
    goto LABEL_383;
  v118 = v112 - (_QWORD)v115;
  if (v118 >> 3 > v117)
    v117 = v118 >> 3;
  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0)
    v119 = 0xFFFFFFFFFFFFFFFLL;
  else
    v119 = v117;
  if (!v119)
  {
    v120 = 0;
    goto LABEL_202;
  }
  if (v119 >> 60)
    goto LABEL_384;
  v120 = (char *)operator new(16 * v119);
LABEL_202:
  v133 = &v120[16 * v116];
  *(_QWORD *)v133 = v109;
  *((_QWORD *)v133 + 1) = v110;
  v113 = v133 + 16;
  if (v111 != v115)
  {
    do
    {
      *((_OWORD *)v133 - 1) = *((_OWORD *)v111 - 1);
      v133 -= 16;
      v111 -= 16;
    }
    while (v111 != v115);
    v111 = *(char **)(v6 + 2560);
  }
  *(_QWORD *)(v6 + 2560) = v133;
  *(_QWORD *)(v6 + 2568) = v113;
  *(_QWORD *)(v6 + 2576) = &v120[16 * v119];
  if (v111)
    operator delete(v111);
LABEL_211:
  v135 = 0;
  *(_QWORD *)(v6 + 2568) = v113;
  while (2)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v323, *(_QWORD *)(v6 + 2488), v24 + v211, 56);
    a3 = v323;
    if (v323)
    {
      if (strncmp((const char *)(v323 + 8), "__DATA", 6uLL) && strncmp((const char *)(a3 + 8), "__AUTH", 6uLL))
      {
        v24 += *(unsigned int *)(a3 + 4);
        v323 = 0;
        v136 = a3;
        goto LABEL_236;
      }
      v137 = v312 + *(unsigned int *)(a3 + 24);
      v138 = v137 + *(unsigned int *)(a3 + 28);
      v139 = *(char **)(v6 + 2592);
      v140 = *(_QWORD *)(v6 + 2600);
      if ((unint64_t)v139 >= v140)
      {
        v142 = *(char **)(v6 + 2584);
        v143 = (v139 - v142) >> 4;
        v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 60)
          goto LABEL_383;
        v145 = v140 - (_QWORD)v142;
        if (v145 >> 3 > v144)
          v144 = v145 >> 3;
        if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0)
          v144 = 0xFFFFFFFFFFFFFFFLL;
        v203 = v144;
        if (v144)
        {
          if (v144 >> 60)
            goto LABEL_384;
          v146 = (char *)operator new(16 * v144);
        }
        else
        {
          v146 = 0;
        }
        v147 = &v146[16 * v143];
        *(_QWORD *)v147 = v137;
        *((_QWORD *)v147 + 1) = v138;
        v148 = v147;
        if (v139 == v142)
        {
          v114 = v207;
          v149 = v203;
        }
        else
        {
          v114 = v207;
          v149 = v203;
          do
          {
            *((_OWORD *)v148 - 1) = *((_OWORD *)v139 - 1);
            v148 -= 16;
            v139 -= 16;
          }
          while (v139 != v142);
          v139 = *(char **)(v6 + 2584);
        }
        *(_QWORD *)(v6 + 2584) = v148;
        v141 = v147 + 16;
        *(_QWORD *)(v6 + 2592) = v147 + 16;
        *(_QWORD *)(v6 + 2600) = &v146[16 * v149];
        if (v139)
          operator delete(v139);
      }
      else
      {
        *(_QWORD *)v139 = v137;
        *((_QWORD *)v139 + 1) = v138;
        v141 = v139 + 16;
      }
      *(_QWORD *)(v6 + 2592) = v141;
      v136 = v323;
      v24 += *(unsigned int *)(a3 + 4);
      v323 = 0;
      if (v136)
      {
LABEL_236:
        v350[0] = v136;
        if (!v327)
          goto LABEL_382;
        (*(void (**)(uint64_t *, _QWORD *))(*v327 + 48))(v327, v350);
      }
    }
    else
    {
      v323 = 0;
    }
    v150 = v327;
    if (v327 == &v324)
    {
      v150 = &v324;
      v151 = 4;
LABEL_242:
      (*(void (**)(void))(*v150 + 8 * v151))();
    }
    else if (v327)
    {
      v151 = 5;
      goto LABEL_242;
    }
    if (!a3)
    {
      LOBYTE(v6) = 0;
      LOBYTE(a2) = 0;
      goto LABEL_314;
    }
    if (++v135 != v114)
      continue;
    break;
  }
  v152 = *(uint64_t **)(v6 + 2544);
  if ((unint64_t)v152 >= *(_QWORD *)(v6 + 2552))
  {
    v154 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v209, &v320);
  }
  else
  {
    v153 = v320;
    v320 = 0;
    *v152 = v153;
    if (v322)
    {
      if (v322 == v321)
      {
        v152[4] = (uint64_t)(v152 + 1);
        (*(void (**)(_BYTE *))(*(_QWORD *)v322 + 24))(v322);
      }
      else
      {
        v152[4] = (uint64_t)v322;
        v322 = 0;
      }
    }
    else
    {
      v152[4] = 0;
    }
    v154 = (char *)(v152 + 5);
  }
  *(_QWORD *)(v6 + 2544) = v154;
  if ((unint64_t)v154 >= *(_QWORD *)(v6 + 2552))
  {
    v176 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v209, &v313);
  }
  else
  {
    v175 = v313;
    v313 = 0;
    *(_QWORD *)v154 = v175;
    if (v315)
    {
      if (v315 == v314)
      {
        *((_QWORD *)v154 + 4) = v154 + 8;
        (*(void (**)(_BYTE *))(*(_QWORD *)v315 + 24))(v315);
      }
      else
      {
        *((_QWORD *)v154 + 4) = v315;
        v315 = 0;
      }
    }
    else
    {
      *((_QWORD *)v154 + 4) = 0;
    }
    v176 = v154 + 40;
  }
  *(_QWORD *)(v6 + 2544) = v176;
  LODWORD(a3) = a2 >> 8;
  LOBYTE(v6) = 1;
LABEL_314:
  if (__dst != v282)
    free(__dst);
LABEL_316:
  v179 = v313;
  v313 = 0;
  if (v179)
  {
    v323 = v179;
    if (v315)
    {
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v315 + 48))(v315, &v323);
      goto LABEL_319;
    }
LABEL_382:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_383:
    abort();
  }
LABEL_319:
  v180 = v315;
  if (v315 == v314)
  {
    v181 = 4;
    v180 = v314;
LABEL_323:
    (*(void (**)(void))(*v180 + 8 * v181))();
  }
  else if (v315)
  {
    v181 = 5;
    goto LABEL_323;
  }
  v182 = v317;
  v317 = 0;
  if (v182)
  {
    v323 = v182;
    if (!v319)
      goto LABEL_382;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v319 + 48))(v319, &v323);
  }
LABEL_327:
  v183 = v319;
  if (v319 == v318)
  {
    v184 = 4;
    v183 = v318;
LABEL_331:
    (*(void (**)(void))(*v183 + 8 * v184))();
  }
  else if (v319)
  {
    v184 = 5;
    goto LABEL_331;
  }
LABEL_332:
  v185 = v320;
  v320 = 0;
  if (v185)
  {
    v323 = v185;
    if (!v322)
      goto LABEL_382;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v322 + 48))(v322, &v323);
  }
LABEL_335:
  v186 = v322;
  if (v322 == v321)
  {
    v187 = 4;
    v186 = v321;
LABEL_339:
    (*(void (**)(void))(*v186 + 8 * v187))();
  }
  else if (v322)
  {
    v187 = 5;
    goto LABEL_339;
  }
  v61 = 0;
  v3 = 0;
  v60 = __src;
  if (__src != v225)
    goto LABEL_372;
LABEL_373:
  v197 = (uint64_t)v226;
  v226 = 0;
  if (v197)
  {
    v323 = v197;
    if (!v228)
      goto LABEL_382;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v228 + 48))(v228, &v323);
  }
LABEL_376:
  v198 = v228;
  if (v228 == v227)
  {
    v199 = 4;
    v198 = v227;
LABEL_380:
    (*(void (**)(void))(*v198 + 8 * v199))();
  }
  else if (v228)
  {
    v199 = 5;
    goto LABEL_380;
  }
  return ((unint64_t)v6 << 32) | (v3 << 40) | ((a3 & 0xFFFFFF) << 8) | a2;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  size_t v22;
  unint64_t PECOFFSections;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[16];
  _DWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _DWORD *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _DWORD *v37;

  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v34);
  if (!v34)
    goto LABEL_26;
  (*(void (**)(_DWORD **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v31, *(_QWORD *)(a1 + 2488), v34[15] + a2, 4);
  v6 = v31;
  v31 = 0;
  v7 = v34;
  v34 = v6;
  if (v7)
  {
    v37 = v7;
    if (!v36)
      goto LABEL_46;
    (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)v36 + 48))(v36, &v37);
  }
  v8 = v32;
  v9 = v36;
  v36 = 0;
  if (v9 == v35)
  {
    v10 = 4;
    v9 = v35;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_10:
  if (v33)
  {
    if (v33 == v32)
    {
      v36 = v35;
      (*(void (**)(_QWORD *, _BYTE *))(v32[0] + 24))(v32, v35);
      v11 = v33;
    }
    else
    {
      v11 = 0;
      v36 = v33;
      v33 = 0;
    }
  }
  else
  {
    v11 = 0;
    v36 = 0;
  }
  v12 = v31;
  v31 = 0;
  if (v12)
  {
    v37 = v12;
    if (!v11)
      goto LABEL_46;
    (*(void (**)(_QWORD *, _DWORD **))(*v11 + 48))(v11, &v37);
    v11 = v33;
  }
  if (v11 == v32)
  {
    v13 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_23;
    v13 = 5;
    v8 = v11;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v13))(v8);
LABEL_23:
  v14 = v34;
  if (!v34)
  {
LABEL_26:
    LODWORD(v15) = 0;
    v16 = 0;
    v17 = 0;
    LOBYTE(v18) = 0;
    v34 = 0;
    goto LABEL_40;
  }
  if (*v34 == 17744)
  {
    v28 = v30;
    v29 = 0x100000000;
    if (&v28 == (void **)a3)
      goto LABEL_35;
    v19 = *(_DWORD *)(a3 + 8);
    if (!v19)
      goto LABEL_35;
    if (v19 < 2)
    {
      v22 = 16;
      v21 = v30;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, *(unsigned int *)(a3 + 8), 16);
      v20 = *(unsigned int *)(a3 + 8);
      if (!(_DWORD)v20)
      {
LABEL_34:
        LODWORD(v29) = v19;
LABEL_35:
        PECOFFSections = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(a1, a2, (uint64_t)&v28);
        v17 = PECOFFSections;
        v15 = PECOFFSections >> 8;
        v18 = HIDWORD(PECOFFSections);
        v16 = PECOFFSections >> 40;
        if (v28 != v30)
          free(v28);
        v14 = v34;
        v34 = 0;
        if (!v14)
        {
LABEL_40:
          v24 = v36;
          if (v36 == v35)
          {
            v25 = 4;
            v24 = v35;
          }
          else
          {
            if (!v36)
              return (v16 << 40) | ((unint64_t)v18 << 32) | ((_DWORD)v15 << 8) | v17;
            v25 = 5;
          }
          (*(void (**)(void))(*v24 + 8 * v25))();
          return (v16 << 40) | ((unint64_t)v18 << 32) | ((_DWORD)v15 << 8) | v17;
        }
        goto LABEL_38;
      }
      v21 = v28;
      v22 = 16 * v20;
    }
    memcpy(v21, *(const void **)a3, v22);
    goto LABEL_34;
  }
  LODWORD(v15) = 0;
  v16 = 0;
  v17 = 0;
  LOBYTE(v18) = 0;
  v34 = 0;
LABEL_38:
  v31 = v14;
  if (v36)
  {
    (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)v36 + 48))(v36, &v31);
    goto LABEL_40;
  }
LABEL_46:
  v27 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(v27);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(uint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _OWORD *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  size_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  size_t v166;
  _BYTE *v167;
  size_t v168;
  _BYTE *v169;
  size_t v170;
  _BYTE *v171;
  size_t v172;
  _BYTE *v173;
  size_t v174;
  _BYTE *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  _BOOL4 v214;
  _BOOL4 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 v242;
  unsigned __int8 v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  _BYTE v248[16];
  _OWORD v249[2];
  void *__src;
  uint64_t v251;
  _BYTE v252[16];
  _OWORD v253[2];
  uint64_t v254;
  _BYTE v255[24];
  _BYTE *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  _BYTE v284[16];
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *__dst;
  uint64_t v310;
  _BYTE v311[16];
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  void **v337;
  uint64_t *v338;
  uint64_t *v339;
  unint64_t *v340;
  _OWORD *v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  void *v345;
  uint64_t *v346;
  uint64_t *v347;
  _OWORD *v348;
  uint64_t v349;
  unint64_t *v350;
  void **p_p;
  void *__p;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  _BYTE v382[24];

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v254);
  v8 = v254;
  if (!v254)
  {
    v9 = 0;
    v10 = 0;
    v254 = 0;
    goto LABEL_117;
  }
  if (*(_DWORD *)v254 != 1179403647)
  {
    v9 = 0;
    v10 = 0;
    v254 = 0;
    goto LABEL_115;
  }
  v11 = *(unsigned __int8 *)(v254 + 4);
  if (v11 == 1)
  {
    v17 = a3[1];
    v249[0] = *a3;
    v249[1] = v17;
    v246 = v248;
    v247 = 0x100000000;
    if (&v246 == (void **)a4 || (v18 = *(_DWORD *)(a4 + 8)) == 0)
    {
LABEL_69:
      v355 = a2;
      v353 = 0;
      __p = 0;
      v354 = 0;
      v348 = v249;
      v349 = a1;
      v350 = &v355;
      p_p = &__p;
      if (!v62
        || (v63 = *(unsigned __int16 *)(v62 + 46), v63 < 0x28)
        || (v64 = *(unsigned __int16 *)(v62 + 48), !*(_WORD *)(v62 + 48)))
      {
        v9 = 0;
        v88 = 0;
        v89 = 0;
        goto LABEL_98;
      }
      v245 = a1;
      v65 = 0;
      v241 = v62;
      v66 = *(unsigned int *)(v62 + 32);
      v346 = 0;
      v345 = 0;
      v347 = 0;
      do
      {
        if (!v68)
          goto LABEL_221;
        v69 = v68;
        v70 = v346;
        if (v346 < v347)
        {
          *v346 = v68;
          v67 = (uint64_t *)(v70 + 8);
        }
        else
        {
          v71 = v345;
          v72 = (char *)v346 - (_BYTE *)v345;
          v73 = ((char *)v346 - (_BYTE *)v345) >> 3;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61)
            goto LABEL_246;
          v75 = (char *)v347 - (_BYTE *)v345;
          if (((char *)v347 - (_BYTE *)v345) >> 2 > v74)
            v74 = v75 >> 2;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          if (v76)
          {
            if (v76 >> 61)
LABEL_247:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v77 = operator new(8 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = (uint64_t *)&v77[8 * v73];
          *v78 = v69;
          v67 = v78 + 1;
          if (v70 != v71)
          {
            v79 = v70 - v71 - 8;
            if (v79 < 0x58)
              goto LABEL_250;
            if ((unint64_t)(v70 - &v77[v72]) < 0x20)
              goto LABEL_250;
            v80 = (v79 >> 3) + 1;
            v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            v82 = &v70[-v81];
            v78 = (uint64_t *)((char *)v78 - v81);
            v83 = &v77[v72 - 16];
            v84 = (__int128 *)(v70 - 16);
            v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v86 = *v84;
              *(v83 - 1) = *(v84 - 1);
              *v83 = v86;
              v83 -= 2;
              v84 -= 2;
              v85 -= 4;
            }
            while (v85);
            v70 = v82;
            if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_250:
              do
              {
                v87 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *--v78 = v87;
              }
              while (v70 != v71);
            }
            v70 = v345;
          }
          v345 = v78;
          v346 = v67;
          v347 = (uint64_t *)&v77[8 * v76];
          if (v70)
            operator delete(v70);
        }
        v346 = v67;
        ++v65;
      }
      while (v65 != v64);
      v107 = *(unsigned __int16 *)(v241 + 50);
      if (v107 == 0xFFFF)
        v107 = *(_DWORD *)(*(_QWORD *)v345 + 24);
      v108 = *((_QWORD *)v345 + v107);
      v109 = *(unsigned int *)(v108 + 16);
      LODWORD(v257) = *(_DWORD *)(v108 + 20);
      if (!v110)
        goto LABEL_133;
      v344 = v110;
      v343 = 0;
      v336 = &v343;
      v337 = &v345;
      v338 = &v344;
      v339 = &v257;
      v340 = &v355;
      v341 = v249;
      v342 = v245;
      if (v343)
      {
LABEL_133:
        v9 = 0;
        v88 = 0;
        v89 = 0;
        v111 = (uint64_t *)v345;
        if (!v345)
          goto LABEL_98;
        goto LABEL_222;
      }
      v140 = v334;
      v141 = v331;
      v142 = v328;
      v143 = v325;
      v144 = v322;
      v145 = v319;
      v146 = v316;
      v147 = v313;
      v148 = v334 | v331 | v328 | v325 | v322 | v319 | v316 | v313;
      v215 = v148 != 0;
      if (!v148)
      {
        v213 = 0;
        v239 = v334;
        v243 = 0;
LABEL_220:
        v235 = v356;
        v237 = v357;
        v333 = v356;
        v334 = v357;
        v233 = v358;
        v335 = v358;
        v229 = v356;
        v231 = v357;
        v330 = v356;
        v331 = v357;
        v227 = v358;
        v332 = v358;
        v223 = v356;
        v225 = v357;
        v327 = v356;
        v328 = v357;
        v221 = v358;
        v329 = v358;
        v217 = v356;
        v219 = v357;
        v324 = v356;
        v325 = v357;
        v195 = v358;
        v326 = v358;
        v196 = v356;
        v197 = v357;
        v321 = v356;
        v322 = v357;
        v198 = v358;
        v323 = v358;
        v199 = v356;
        v200 = v357;
        v318 = v356;
        v319 = v357;
        v201 = v358;
        v320 = v358;
        v202 = v356;
        v203 = v357;
        v315 = v356;
        v316 = v357;
        v204 = v358;
        v317 = v358;
        v205 = v356;
        v206 = v357;
        v312 = v356;
        v313 = v357;
        v207 = v358;
        v314 = v358;
        if (!v343)
        {
          if (v237 || v231 || v225 || v219 || v197 || v200 || v203 || v357)
          {
            v356 = v235;
            v357 = v237;
            v358 = v233;
            v359 = v229;
            v360 = v231;
            v361 = v227;
            v362 = v223;
            v363 = v225;
            v364 = v221;
            v365 = v217;
            v366 = v219;
            v367 = v195;
            v368 = v196;
            v369 = v197;
            v370 = v198;
            v371 = v199;
            v372 = v200;
            v373 = v201;
            v374 = v202;
            v375 = v203;
            v376 = v204;
            v377 = v205;
            v378 = v206;
            v379 = v207;
            llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v380, (uint64_t)&v246);
            swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v285, (uint64_t)&v356);
            v211 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v245, (uint64_t)&v285);
            if (__dst != v311)
              free(__dst);
            if (v215)
              v208 = v243;
            else
              v208 = v211;
            if (v215)
              v209 = v239;
            else
              v209 = v211 >> 8;
            if (v380 != v382)
              free(v380);
            v210 = 0x100000000;
          }
          else
          {
            v208 = v243;
            v209 = v239;
            v210 = v213;
          }
          v88 = v210 & 0x100000000;
          v9 = v208;
          v89 = v210 & 0x100000000 | ((*(_QWORD *)&v209 & 0xFFFFFFLL) << 8);
          v111 = (uint64_t *)v345;
          if (!v345)
            goto LABEL_98;
          goto LABEL_222;
        }
LABEL_221:
        v9 = 0;
        v88 = 0;
        v89 = 0;
        v111 = (uint64_t *)v345;
        if (v345)
        {
LABEL_222:
          v346 = v111;
          operator delete(v111);
        }
LABEL_98:
        v90 = __p;
        if (!__p)
          goto LABEL_112;
        v91 = v353;
        v92 = __p;
        if (v353 == __p)
          goto LABEL_111;
        v93 = v353;
        while (1)
        {
          v97 = *(v93 - 5);
          v93 -= 5;
          v96 = v97;
          *v93 = 0;
          if (v97)
          {
            v356 = v96;
            v98 = *(v91 - 1);
            if (!v98)
              goto LABEL_245;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v98 + 48))(v98, &v356);
          }
          v94 = (_QWORD *)*(v91 - 1);
          if (v91 - 4 == v94)
          {
            v94 = v91 - 4;
            v95 = 4;
          }
          else
          {
            if (!v94)
              goto LABEL_103;
            v95 = 5;
          }
          (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_103:
          v91 = v93;
          if (v93 == v90)
          {
            v92 = __p;
LABEL_111:
            v353 = v90;
            operator delete(v92);
LABEL_112:
            a2 = v89 >> 8;
            v10 = HIDWORD(v88);
            v61 = v246;
            LODWORD(v59) = a2;
            v60 = v10;
            if (v246 == v248)
              goto LABEL_114;
LABEL_113:
            free(v61);
            LODWORD(a2) = v59;
            v10 = v60;
            goto LABEL_114;
          }
        }
      }
      v149 = v333;
      v150 = v335;
      v285 = v333;
      v286 = v334;
      v151 = v330;
      v152 = v332;
      v287 = v335;
      v288 = v330;
      v289 = v331;
      v290 = v332;
      v153 = v327;
      v154 = v329;
      v291 = v327;
      v292 = v328;
      v155 = v324;
      v156 = v326;
      v293 = v329;
      v294 = v324;
      v295 = v325;
      v296 = v326;
      v157 = v321;
      v158 = v323;
      v297 = v321;
      v298 = v322;
      v159 = v318;
      v160 = v320;
      v299 = v323;
      v300 = v318;
      v301 = v319;
      v302 = v320;
      v161 = v315;
      v162 = v317;
      v303 = v315;
      v304 = v316;
      v163 = v312;
      v164 = v314;
      v305 = v317;
      v306 = v312;
      v307 = v313;
      v308 = v314;
      __dst = v311;
      v310 = 0x100000000;
      v165 = v247;
      if (!(_DWORD)v247)
      {
LABEL_156:
        v258 = v149;
        v259 = v140;
        v260 = v150;
        v261 = v151;
        v262 = v141;
        v263 = v152;
        v264 = v153;
        v265 = v142;
        v266 = v154;
        v267 = v155;
        v268 = v143;
        v269 = v156;
        v270 = v157;
        v271 = v144;
        v272 = v158;
        v273 = v159;
        v274 = v145;
        v275 = v160;
        v276 = v161;
        v277 = v146;
        v278 = v162;
        v279 = v163;
        v280 = v147;
        v281 = v164;
        v282 = v284;
        v283 = 0x100000000;
        if (!(_DWORD)v165)
          goto LABEL_170;
        if ((_DWORD)v165 == 1)
        {
          v170 = 16;
          v171 = v284;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)v284, v165, 16);
          if (!(_DWORD)v310)
          {
LABEL_169:
            LODWORD(v283) = v165;
            v149 = v258;
            v140 = v259;
            v150 = v260;
            v151 = v261;
            v141 = v262;
            v152 = v263;
            v153 = v264;
            v142 = v265;
            v154 = v266;
            v155 = v267;
            v143 = v268;
            v156 = v269;
            v157 = v270;
            v144 = v271;
            v158 = v272;
            v159 = v273;
            v145 = v274;
            v160 = v275;
            v161 = v276;
            v146 = v277;
            v162 = v278;
            v163 = v279;
            v147 = v280;
            v164 = v281;
LABEL_170:
            v356 = v149;
            v357 = v140;
            v358 = v150;
            v359 = v151;
            v360 = v141;
            v361 = v152;
            v362 = v153;
            v363 = v142;
            v364 = v154;
            v365 = v155;
            v366 = v143;
            v367 = v156;
            v368 = v157;
            v369 = v144;
            v370 = v158;
            v371 = v159;
            v372 = v145;
            v373 = v160;
            v374 = v161;
            v375 = v146;
            v376 = v162;
            v377 = v163;
            v378 = v147;
            v379 = v164;
            v380 = v382;
            v381 = 0x100000000;
            if (!(_DWORD)v165)
            {
LABEL_213:
              v194 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v245 + 296), (uint64_t)&v356);
              if (v380 != v382)
                free(v380);
              if (v282 != v284)
                free(v282);
              if (__dst != v311)
                free(__dst);
              v239 = v194 >> 8;
              v243 = v194;
              v213 = 0x100000000;
              goto LABEL_220;
            }
            if ((_DWORD)v165 == 1)
            {
              v174 = 16;
              v175 = v382;
            }
            else
            {
              __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)v382, v165, 16);
              if (!(_DWORD)v283)
              {
LABEL_212:
                LODWORD(v381) = v165;
                goto LABEL_213;
              }
              v175 = v380;
              v174 = 16 * v283;
            }
            memcpy(v175, v282, v174);
            goto LABEL_212;
          }
          v171 = v282;
          v170 = 16 * v310;
        }
        memcpy(v171, __dst, v170);
        goto LABEL_169;
      }
      if ((_DWORD)v247 == 1)
      {
        v166 = 16;
        v167 = v311;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v311, v247, 16);
        if (!(_DWORD)v247)
        {
LABEL_155:
          LODWORD(v310) = v165;
          v149 = v285;
          v140 = v286;
          v150 = v287;
          v151 = v288;
          v141 = v289;
          v152 = v290;
          v153 = v291;
          v142 = v292;
          v154 = v293;
          v155 = v294;
          v143 = v295;
          v156 = v296;
          v157 = v297;
          v144 = v298;
          v158 = v299;
          v159 = v300;
          v145 = v301;
          v160 = v302;
          v161 = v303;
          v146 = v304;
          v162 = v305;
          v163 = v306;
          v147 = v307;
          v164 = v308;
          goto LABEL_156;
        }
        v167 = __dst;
        v166 = 16 * v247;
      }
      memcpy(v167, v246, v166);
      goto LABEL_155;
    }
    if (v18 < 2)
    {
      v21 = 16;
      v20 = v248;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, (uint64_t)v248, *(unsigned int *)(a4 + 8), 16);
      v19 = *(unsigned int *)(a4 + 8);
      if (!(_DWORD)v19)
      {
LABEL_68:
        LODWORD(v247) = v18;
        goto LABEL_69;
      }
      v20 = v246;
      v21 = 16 * v19;
    }
    memcpy(v20, *(const void **)a4, v21);
    goto LABEL_68;
  }
  if (v11 != 2)
  {
    v10 = 0;
    v9 = 0;
    goto LABEL_114;
  }
  v12 = a3[1];
  v253[0] = *a3;
  v253[1] = v12;
  __src = v252;
  v251 = 0x100000000;
  if (&__src != (void **)a4)
  {
    v13 = *(_DWORD *)(a4 + 8);
    if (v13)
    {
      if (v13 < 2)
      {
        v16 = 16;
        v15 = v252;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v252, *(unsigned int *)(a4 + 8), 16);
        v14 = *(unsigned int *)(a4 + 8);
        if (!(_DWORD)v14)
        {
LABEL_20:
          LODWORD(v251) = v13;
          goto LABEL_21;
        }
        v15 = __src;
        v16 = 16 * v14;
      }
      memcpy(v15, *(const void **)a4, v16);
      goto LABEL_20;
    }
  }
LABEL_21:
  v355 = a2;
  v353 = 0;
  __p = 0;
  v354 = 0;
  v348 = v253;
  v349 = a1;
  v350 = &v355;
  p_p = &__p;
  if (v22)
  {
    v23 = *(unsigned __int16 *)(v22 + 58);
    if (v23 >= 0x40)
    {
      v24 = *(unsigned __int16 *)(v22 + 60);
      if (*(_WORD *)(v22 + 60))
      {
        v244 = a1;
        v25 = 0;
        v240 = v22;
        v26 = *(_QWORD *)(v22 + 40);
        v346 = 0;
        v345 = 0;
        v347 = 0;
        do
        {
          if (!v28)
            goto LABEL_185;
          v29 = v28;
          v30 = v346;
          if (v346 < v347)
          {
            *v346 = v28;
            v27 = (uint64_t *)(v30 + 8);
          }
          else
          {
            v31 = v345;
            v32 = (char *)v346 - (_BYTE *)v345;
            v33 = ((char *)v346 - (_BYTE *)v345) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_246;
            v35 = (char *)v347 - (_BYTE *)v345;
            if (((char *)v347 - (_BYTE *)v345) >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              if (v36 >> 61)
                goto LABEL_247;
              v37 = operator new(8 * v36);
            }
            else
            {
              v37 = 0;
            }
            v38 = (uint64_t *)&v37[8 * v33];
            *v38 = v29;
            v27 = v38 + 1;
            if (v30 != v31)
            {
              v39 = v30 - v31 - 8;
              if (v39 < 0x58)
                goto LABEL_251;
              if ((unint64_t)(v30 - &v37[v32]) < 0x20)
                goto LABEL_251;
              v40 = (v39 >> 3) + 1;
              v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v30[-v41];
              v38 = (uint64_t *)((char *)v38 - v41);
              v43 = &v37[v32 - 16];
              v44 = (__int128 *)(v30 - 16);
              v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v46 = *v44;
                *(v43 - 1) = *(v44 - 1);
                *v43 = v46;
                v43 -= 2;
                v44 -= 2;
                v45 -= 4;
              }
              while (v45);
              v30 = v42;
              if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_251:
                do
                {
                  v47 = *((_QWORD *)v30 - 1);
                  v30 -= 8;
                  *--v38 = v47;
                }
                while (v30 != v31);
              }
              v30 = v345;
            }
            v345 = v38;
            v346 = v27;
            v347 = (uint64_t *)&v37[8 * v36];
            if (v30)
              operator delete(v30);
          }
          v346 = v27;
          ++v25;
        }
        while (v25 != v24);
        v102 = *(unsigned __int16 *)(v240 + 62);
        if (v102 == 0xFFFF)
          v102 = *(_DWORD *)(*(_QWORD *)v345 + 40);
        v103 = *((_QWORD *)v345 + v102);
        v104 = *(_QWORD *)(v103 + 24);
        v344 = *(_QWORD *)(v103 + 32);
        if (!v105)
          goto LABEL_127;
        v257 = v105;
        v343 = 0;
        v336 = &v343;
        v337 = &v345;
        v338 = &v257;
        v339 = &v344;
        v340 = &v355;
        v341 = v253;
        v342 = v244;
        if (v343)
        {
LABEL_127:
          v9 = 0;
          v48 = 0;
          v49 = 0;
          v106 = (uint64_t *)v345;
          if (!v345)
            goto LABEL_50;
          goto LABEL_186;
        }
        v112 = v334;
        v113 = v331;
        v114 = v328;
        v115 = v325;
        v116 = v322;
        v117 = v319;
        v118 = v316;
        v119 = v313;
        v120 = v334 | v331 | v328 | v325 | v322 | v319 | v316 | v313;
        v214 = v120 != 0;
        if (!v120)
        {
          v212 = 0;
          v238 = v334;
          v242 = 0;
          goto LABEL_184;
        }
        v121 = v333;
        v122 = v335;
        v285 = v333;
        v286 = v334;
        v123 = v330;
        v124 = v332;
        v287 = v335;
        v288 = v330;
        v289 = v331;
        v290 = v332;
        v125 = v327;
        v126 = v329;
        v291 = v327;
        v292 = v328;
        v127 = v324;
        v128 = v326;
        v293 = v329;
        v294 = v324;
        v295 = v325;
        v296 = v326;
        v129 = v321;
        v130 = v323;
        v297 = v321;
        v298 = v322;
        v131 = v318;
        v132 = v320;
        v299 = v323;
        v300 = v318;
        v301 = v319;
        v302 = v320;
        v133 = v315;
        v134 = v317;
        v303 = v315;
        v304 = v316;
        v135 = v312;
        v136 = v314;
        v305 = v317;
        v306 = v312;
        v307 = v313;
        v308 = v314;
        __dst = v311;
        v310 = 0x100000000;
        v137 = v251;
        if (!(_DWORD)v251)
        {
LABEL_149:
          v258 = v121;
          v259 = v112;
          v260 = v122;
          v261 = v123;
          v262 = v113;
          v263 = v124;
          v264 = v125;
          v265 = v114;
          v266 = v126;
          v267 = v127;
          v268 = v115;
          v269 = v128;
          v270 = v129;
          v271 = v116;
          v272 = v130;
          v273 = v131;
          v274 = v117;
          v275 = v132;
          v276 = v133;
          v277 = v118;
          v278 = v134;
          v279 = v135;
          v280 = v119;
          v281 = v136;
          v282 = v284;
          v283 = 0x100000000;
          if (!(_DWORD)v137)
            goto LABEL_163;
          if ((_DWORD)v137 == 1)
          {
            v168 = 16;
            v169 = v284;
          }
          else
          {
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)v284, v137, 16);
            if (!(_DWORD)v310)
            {
LABEL_162:
              LODWORD(v283) = v137;
              v121 = v258;
              v112 = v259;
              v122 = v260;
              v123 = v261;
              v113 = v262;
              v124 = v263;
              v125 = v264;
              v114 = v265;
              v126 = v266;
              v127 = v267;
              v115 = v268;
              v128 = v269;
              v129 = v270;
              v116 = v271;
              v130 = v272;
              v131 = v273;
              v117 = v274;
              v132 = v275;
              v133 = v276;
              v118 = v277;
              v134 = v278;
              v135 = v279;
              v119 = v280;
              v136 = v281;
LABEL_163:
              v356 = v121;
              v357 = v112;
              v358 = v122;
              v359 = v123;
              v360 = v113;
              v361 = v124;
              v362 = v125;
              v363 = v114;
              v364 = v126;
              v365 = v127;
              v366 = v115;
              v367 = v128;
              v368 = v129;
              v369 = v116;
              v370 = v130;
              v371 = v131;
              v372 = v117;
              v373 = v132;
              v374 = v133;
              v375 = v118;
              v376 = v134;
              v377 = v135;
              v378 = v119;
              v379 = v136;
              v380 = v382;
              v381 = 0x100000000;
              if (!(_DWORD)v137)
              {
LABEL_177:
                v176 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v244 + 296), (uint64_t)&v356);
                if (v380 != v382)
                  free(v380);
                if (v282 != v284)
                  free(v282);
                if (__dst != v311)
                  free(__dst);
                v238 = v176 >> 8;
                v242 = v176;
                v212 = 0x100000000;
LABEL_184:
                v234 = v356;
                v236 = v357;
                v333 = v356;
                v334 = v357;
                v232 = v358;
                v335 = v358;
                v228 = v356;
                v230 = v357;
                v330 = v356;
                v331 = v357;
                v226 = v358;
                v332 = v358;
                v222 = v356;
                v224 = v357;
                v327 = v356;
                v328 = v357;
                v220 = v358;
                v329 = v358;
                v216 = v356;
                v218 = v357;
                v324 = v356;
                v325 = v357;
                v177 = v358;
                v326 = v358;
                v178 = v356;
                v179 = v357;
                v321 = v356;
                v322 = v357;
                v180 = v358;
                v323 = v358;
                v181 = v356;
                v182 = v357;
                v318 = v356;
                v319 = v357;
                v183 = v358;
                v320 = v358;
                v184 = v356;
                v185 = v357;
                v315 = v356;
                v316 = v357;
                v186 = v358;
                v317 = v358;
                v187 = v356;
                v188 = v357;
                v312 = v356;
                v313 = v357;
                v189 = v358;
                v314 = v358;
                if (v343)
                {
LABEL_185:
                  v9 = 0;
                  v48 = 0;
                  v49 = 0;
                  v106 = (uint64_t *)v345;
                  if (!v345)
                    goto LABEL_50;
                  goto LABEL_186;
                }
                if (v236 || v230 || v224 || v218 || v179 || v182 || v185 || v357)
                {
                  v356 = v234;
                  v357 = v236;
                  v358 = v232;
                  v359 = v228;
                  v360 = v230;
                  v361 = v226;
                  v362 = v222;
                  v363 = v224;
                  v364 = v220;
                  v365 = v216;
                  v366 = v218;
                  v367 = v177;
                  v368 = v178;
                  v369 = v179;
                  v370 = v180;
                  v371 = v181;
                  v372 = v182;
                  v373 = v183;
                  v374 = v184;
                  v375 = v185;
                  v376 = v186;
                  v377 = v187;
                  v378 = v188;
                  v379 = v189;
                  llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v380, (uint64_t)&__src);
                  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v285, (uint64_t)&v356);
                  v193 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v244, (uint64_t)&v285);
                  if (__dst != v311)
                    free(__dst);
                  if (v214)
                    v190 = v242;
                  else
                    v190 = v193;
                  if (v214)
                    v191 = v238;
                  else
                    v191 = v193 >> 8;
                  if (v380 != v382)
                    free(v380);
                  v192 = 0x100000000;
                }
                else
                {
                  v190 = v242;
                  v191 = v238;
                  v192 = v212;
                }
                v48 = v192 & 0x100000000;
                v9 = v190;
                v49 = v192 & 0x100000000 | ((*(_QWORD *)&v191 & 0xFFFFFFLL) << 8);
                v106 = (uint64_t *)v345;
                if (v345)
                {
LABEL_186:
                  v346 = v106;
                  operator delete(v106);
                  goto LABEL_50;
                }
                goto LABEL_50;
              }
              if ((_DWORD)v137 == 1)
              {
                v172 = 16;
                v173 = v382;
              }
              else
              {
                __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)v382, v137, 16);
                if (!(_DWORD)v283)
                {
LABEL_176:
                  LODWORD(v381) = v137;
                  goto LABEL_177;
                }
                v173 = v380;
                v172 = 16 * v283;
              }
              memcpy(v173, v282, v172);
              goto LABEL_176;
            }
            v169 = v282;
            v168 = 16 * v310;
          }
          memcpy(v169, __dst, v168);
          goto LABEL_162;
        }
        if ((_DWORD)v251 == 1)
        {
          v138 = 16;
          v139 = v311;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v311, v251, 16);
          if (!(_DWORD)v251)
          {
LABEL_148:
            LODWORD(v310) = v137;
            v121 = v285;
            v112 = v286;
            v122 = v287;
            v123 = v288;
            v113 = v289;
            v124 = v290;
            v125 = v291;
            v114 = v292;
            v126 = v293;
            v127 = v294;
            v115 = v295;
            v128 = v296;
            v129 = v297;
            v116 = v298;
            v130 = v299;
            v131 = v300;
            v117 = v301;
            v132 = v302;
            v133 = v303;
            v118 = v304;
            v134 = v305;
            v135 = v306;
            v119 = v307;
            v136 = v308;
            goto LABEL_149;
          }
          v139 = __dst;
          v138 = 16 * v251;
        }
        memcpy(v139, __src, v138);
        goto LABEL_148;
      }
    }
  }
  v9 = 0;
  v48 = 0;
  v49 = 0;
LABEL_50:
  v50 = __p;
  if (!__p)
    goto LABEL_64;
  v51 = v353;
  v52 = __p;
  if (v353 == __p)
    goto LABEL_63;
  v53 = v353;
  do
  {
    v57 = *(v53 - 5);
    v53 -= 5;
    v56 = v57;
    *v53 = 0;
    if (v57)
    {
      v356 = v56;
      v58 = *(v51 - 1);
      if (!v58)
        goto LABEL_245;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v58 + 48))(v58, &v356);
    }
    v54 = (_QWORD *)*(v51 - 1);
    if (v51 - 4 == v54)
    {
      v54 = v51 - 4;
      v55 = 4;
LABEL_54:
      (*(void (**)(void))(*v54 + 8 * v55))();
      goto LABEL_55;
    }
    if (v54)
    {
      v55 = 5;
      goto LABEL_54;
    }
LABEL_55:
    v51 = v53;
  }
  while (v53 != v50);
  v52 = __p;
LABEL_63:
  v353 = v50;
  operator delete(v52);
LABEL_64:
  v59 = v49 >> 8;
  v60 = HIDWORD(v48);
  v61 = __src;
  a2 = v49 >> 8;
  v10 = HIDWORD(v48);
  if (__src != v252)
    goto LABEL_113;
LABEL_114:
  v8 = v254;
  v254 = 0;
  if (!v8)
    goto LABEL_117;
LABEL_115:
  v356 = v8;
  if (!v256)
  {
LABEL_245:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_246:
    abort();
  }
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v256 + 48))(v256, &v356);
LABEL_117:
  v99 = v256;
  if (v256 == v255)
  {
    v100 = 4;
    v99 = v255;
LABEL_121:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  else if (v256)
  {
    v100 = 5;
    goto LABEL_121;
  }
  return (v10 << 32) | ((a2 & 0xFFFFFF) << 8) | v9;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMachOSections<`anonymous namespace'::MachOTraits<4u>>(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()@<X0>(char *__s2@<X1>, uint64_t result@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v4 = **(unsigned int **)result;
  if (!(_DWORD)v4)
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v6 = result;
  v7 = *(_QWORD *)(result + 24);
  v8 = **(_QWORD **)(result + 8);
  while (1)
  {
    result = strncmp((const char *)v8, __s2, 0x10uLL);
    if (!(_DWORD)result)
      break;
    v8 += 68;
    if (!--v4)
      goto LABEL_5;
  }
  v9 = **(_QWORD **)(v6 + 16) + *(unsigned int *)(v8 + 32);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 2488) + 24))(&v17, *(_QWORD *)(v7 + 2488), v9, *(unsigned int *)(v8 + 36));
  v10 = v17;
  if (v17)
  {
    v11 = *(uint64_t **)(v7 + 2544);
    if ((unint64_t)v11 >= *(_QWORD *)(v7 + 2552))
    {
      v12 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((void **)(v7 + 2536), &v17);
    }
    else
    {
      v17 = 0;
      *v11 = v10;
      if (v19)
      {
        if (v19 == v18)
        {
          v11[4] = (uint64_t)(v11 + 1);
          (*(void (**)(_BYTE *))(*(_QWORD *)v19 + 24))(v19);
        }
        else
        {
          v11[4] = (uint64_t)v19;
          v19 = 0;
        }
      }
      else
      {
        v11[4] = 0;
      }
      v12 = (char *)(v11 + 5);
    }
    *(_QWORD *)(v7 + 2544) = v12;
    *a3 = v9;
    a3[1] = v10;
    a3[2] = *(unsigned int *)(v8 + 36);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      v20 = v13;
      if (!v19)
      {
        v15 = (void **)std::__throw_bad_function_call[abi:nn180100]();
        return (uint64_t)std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v15, v16);
      }
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v20);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v17 = 0;
  }
  result = (uint64_t)v19;
  if (v19 == v18)
  {
    v14 = 4;
    result = (uint64_t)v18;
  }
  else
  {
    if (!v19)
      return result;
    v14 = 5;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8 * v14))(result);
}

char *std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(void **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
LABEL_40:
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v2];
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)v8 = v9;
  v10 = (uint64_t *)a2[4];
  if (v10)
  {
    if (v10 == a2 + 1)
    {
      *((_QWORD *)v8 + 4) = v8 + 8;
      (*(void (**)(uint64_t *))(*v10 + 24))(v10);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v10;
      a2[4] = 0;
    }
  }
  else
  {
    *((_QWORD *)v8 + 4) = 0;
  }
  v11 = &v7[40 * v6];
  v12 = v8 + 40;
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v8[v15];
      v17 = &v13[v15];
      v18 = *(_QWORD *)&v13[v15 - 40];
      *(_QWORD *)&v13[v15 - 40] = 0;
      *(_QWORD *)&v8[v15 - 40] = v18;
      v19 = *(char **)&v13[v15 - 8];
      if (v19)
      {
        if (v17 - 32 == v19)
        {
          *((_QWORD *)v16 - 1) = v16 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v17 - 1) + 24))(*((_QWORD *)v17 - 1));
        }
        else
        {
          *((_QWORD *)v16 - 1) = v19;
          *((_QWORD *)v17 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v16 - 1) = 0;
      }
      v15 -= 40;
    }
    while (&v13[v15] != v14);
    v13 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = &v8[v15];
    a1[1] = v12;
    a1[2] = v11;
    if (v20 != v13)
    {
      v21 = v20;
      do
      {
        v25 = *((_QWORD *)v21 - 5);
        v21 -= 40;
        v24 = v25;
        *(_QWORD *)v21 = 0;
        if (v25)
        {
          v28 = v24;
          v26 = *((_QWORD *)v20 - 1);
          if (!v26)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_40;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v28);
        }
        v22 = (char *)*((_QWORD *)v20 - 1);
        if (v20 - 32 == v22)
        {
          v22 = v20 - 32;
          v23 = 4;
        }
        else
        {
          if (!v22)
            goto LABEL_28;
          v23 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_28:
        v20 = v21;
      }
      while (v21 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v8 + 40;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMachOSections<`anonymous namespace'::MachOTraits<8u>>(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()@<X0>(char *__s2@<X1>, uint64_t result@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v4 = **(unsigned int **)result;
  if (!(_DWORD)v4)
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v6 = result;
  v7 = *(_QWORD *)(result + 24);
  v8 = **(_QWORD **)(result + 8);
  while (1)
  {
    result = strncmp((const char *)v8, __s2, 0x10uLL);
    if (!(_DWORD)result)
      break;
    v8 += 80;
    if (!--v4)
      goto LABEL_5;
  }
  v9 = **(_QWORD **)(v6 + 16) + *(_QWORD *)(v8 + 32);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 2488) + 24))(&v18, *(_QWORD *)(v7 + 2488), v9, *(_QWORD *)(v8 + 40));
  v10 = v18;
  if (v18)
  {
    v11 = *(uint64_t **)(v7 + 2544);
    if ((unint64_t)v11 >= *(_QWORD *)(v7 + 2552))
    {
      v12 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((void **)(v7 + 2536), &v18);
    }
    else
    {
      v18 = 0;
      *v11 = v10;
      if (v20)
      {
        if (v20 == v19)
        {
          v11[4] = (uint64_t)(v11 + 1);
          (*(void (**)(_BYTE *))(*(_QWORD *)v20 + 24))(v20);
        }
        else
        {
          v11[4] = (uint64_t)v20;
          v20 = 0;
        }
      }
      else
      {
        v11[4] = 0;
      }
      v12 = (char *)(v11 + 5);
    }
    *(_QWORD *)(v7 + 2544) = v12;
    *a3 = v9;
    a3[1] = v10;
    a3[2] = *(_QWORD *)(v8 + 40);
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      v21 = v13;
      if (!v20)
      {
        v15 = std::__throw_bad_function_call[abi:nn180100]();
        return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(v15, v16, v17);
      }
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v21);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v18 = 0;
  }
  result = (uint64_t)v20;
  if (v20 == v19)
  {
    v14 = 4;
    result = (uint64_t)v19;
  }
  else
  {
    if (!v20)
      return result;
    v14 = 5;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8 * v14))(result);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  size_t v37;
  size_t v38;
  _BYTE *v39;
  uint64_t *v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;
  void *v54;
  size_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _BYTE v76[16];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *__src;
  uint64_t v102;
  _BYTE v103[16];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD v128[4];
  uint64_t v129;
  _BYTE v130[24];
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE v134[24];
  _BYTE *v135;
  uint64_t v136;
  _BYTE v137[24];
  _BYTE *v138;
  uint64_t v139;
  _QWORD v140[24];
  void *v141;
  uint64_t v142;
  _BYTE v143[24];

  v139 = a2;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v136);
  if (!v136)
  {
    LOBYTE(v16) = 0;
    v15 = 0;
    v136 = 0;
    goto LABEL_64;
  }
  v6 = *(unsigned int *)(v136 + 60) + a2;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v133, *(_QWORD *)(a1 + 2488), v6 + 4, 20);
  if (!v133)
  {
    LOBYTE(v16) = 0;
    v15 = 0;
    v133 = 0;
    goto LABEL_56;
  }
  v132 = v133;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v129, *(_QWORD *)(a1 + 2488), v6 + *(unsigned __int16 *)(v133 + 16) + 24, 40 * *(unsigned __int16 *)(v133 + 2));
  if (!v129)
  {
    LOBYTE(v16) = 0;
    v15 = 0;
    v129 = 0;
    goto LABEL_48;
  }
  v128[0] = &v132;
  v128[1] = &v129;
  v128[2] = &v139;
  v128[3] = a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5flmd", (uint64_t)v128, 8uLL, &v125);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5asty", (uint64_t)v128, 8uLL, &v122);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5bltn", (uint64_t)v128, 8uLL, &v119);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5cptr", (uint64_t)v128, 8uLL, &v116);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5tyrf", (uint64_t)v128, 8uLL, &v113);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5rfst", (uint64_t)v128, 8uLL, &v110);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5prtc$B", (uint64_t)v128, 0xAuLL, &v107);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(".sw5mpen$B", (uint64_t)v128, 0xAuLL, &v104);
  v7 = v125;
  v8 = v122;
  v9 = v119;
  v10 = v116;
  v11 = v113;
  v12 = v110;
  v13 = v107;
  v14 = v104;
  if (!v125 && !v122 && !v119 && !v116 && !v113 && !v110 && !v107 && !v104)
  {
    v15 = 0;
    LOBYTE(v16) = 0;
    goto LABEL_45;
  }
  v17 = 0;
  v18 = v126;
  v19 = v127;
  v77 = v125;
  v78 = v126;
  v20 = v123;
  v21 = v124;
  v79 = v127;
  v80 = v122;
  v81 = v123;
  v82 = v124;
  v22 = v120;
  v23 = v121;
  v83 = v119;
  v84 = v120;
  v24 = v117;
  v25 = v118;
  v85 = v121;
  v86 = v116;
  v87 = v117;
  v88 = v118;
  v26 = v114;
  v27 = v115;
  v89 = v113;
  v90 = v114;
  v28 = v111;
  v29 = v112;
  v91 = v115;
  v92 = v110;
  v93 = v111;
  v94 = v112;
  v30 = v108;
  v31 = v109;
  v95 = v107;
  v96 = v108;
  v33 = v105;
  v32 = v106;
  v97 = v109;
  v98 = v104;
  v99 = v105;
  v100 = v106;
  __src = v103;
  v102 = 0x100000000;
  if (&__src != (void **)a3)
  {
    v34 = *(_DWORD *)(a3 + 8);
    if (v34)
    {
      if (v34 < 2)
      {
        v37 = 16;
        v36 = v103;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v103, *(unsigned int *)(a3 + 8), 16);
        v35 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v35)
        {
LABEL_23:
          LODWORD(v102) = v34;
          v7 = v77;
          v18 = v78;
          v19 = v79;
          v8 = v80;
          v20 = v81;
          v21 = v82;
          v9 = v83;
          v22 = v84;
          v23 = v85;
          v10 = v86;
          v24 = v87;
          v25 = v88;
          v11 = v89;
          v26 = v90;
          v27 = v91;
          v12 = v92;
          v28 = v93;
          v29 = v94;
          v13 = v95;
          v30 = v96;
          v31 = v97;
          v14 = v98;
          v17 = v34;
          v33 = v99;
          v32 = v100;
          goto LABEL_24;
        }
        v36 = __src;
        v37 = 16 * v35;
      }
      memcpy(v36, *(const void **)a3, v37);
      goto LABEL_23;
    }
  }
LABEL_24:
  v57 = v7;
  v58 = v18;
  v59 = v19;
  v60 = v8;
  v61 = v20;
  v62 = v21;
  v63 = v9;
  v64 = v22;
  v65 = v23;
  v66 = v10;
  v67 = v24;
  v68 = v25;
  v69 = v11;
  v70 = v26;
  v71 = v12;
  v72 = v13;
  v73 = v14;
  v74 = v76;
  v75 = 0x100000000;
  if (!v17)
    goto LABEL_31;
  if (v17 == 1)
  {
    v38 = 16;
    v39 = v76;
LABEL_29:
    memcpy(v39, __src, v38);
    goto LABEL_30;
  }
  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, (uint64_t)v76, v17, 16);
  if ((_DWORD)v102)
  {
    v39 = v74;
    v38 = 16 * v102;
    goto LABEL_29;
  }
LABEL_30:
  LODWORD(v75) = v17;
  v7 = v57;
  v18 = v58;
  v19 = v59;
  v8 = v60;
  v20 = v61;
  v21 = v62;
  v9 = v63;
  v22 = v64;
  v23 = v65;
  v10 = v66;
  v24 = v67;
  v25 = v68;
  v11 = v69;
  v26 = v70;
  v12 = v71;
  v13 = v72;
  v14 = v73;
LABEL_31:
  v40 = (uint64_t *)(a1 + 296);
  v140[0] = v7;
  v140[1] = v18;
  v140[2] = v19;
  v140[3] = v8;
  v140[4] = v20;
  v140[5] = v21;
  v140[6] = v9;
  v140[7] = v22;
  v140[8] = v23;
  v140[9] = v10;
  v140[10] = v24;
  v140[11] = v25;
  v140[12] = v11;
  v140[13] = v26;
  v140[14] = v27;
  v140[15] = v12;
  v140[16] = v28;
  v140[17] = v29;
  v140[18] = v13;
  v140[19] = v30;
  v140[20] = v31;
  v140[21] = v14;
  v140[22] = v33;
  v140[23] = v32;
  v141 = v143;
  v142 = 0x100000000;
  if (v17)
  {
    if (v17 == 1)
    {
      v41 = 16;
      v42 = v143;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v143, v17, 16);
      if (!(_DWORD)v75)
      {
LABEL_37:
        LODWORD(v142) = v17;
        goto LABEL_38;
      }
      v42 = v141;
      v41 = 16 * v75;
    }
    memcpy(v42, v74, v41);
    goto LABEL_37;
  }
LABEL_38:
  v16 = swift::reflection::TypeRefBuilder::addReflectionInfo(v40, (uint64_t)v140);
  if (v141 != v143)
    free(v141);
  if (v74 != v76)
    free(v74);
  if (__src != v103)
    free(__src);
  LODWORD(a3) = v16 >> 8;
  v15 = 1;
LABEL_45:
  v43 = v129;
  v129 = 0;
  if (v43)
  {
    v140[0] = v43;
    if (!v131)
      goto LABEL_70;
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v131 + 48))(v131, v140);
  }
LABEL_48:
  v44 = v131;
  if (v131 == v130)
  {
    v45 = 4;
    v44 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_53;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_53:
  v46 = v133;
  v133 = 0;
  if (v46)
  {
    v140[0] = v46;
    if (!v135)
      goto LABEL_70;
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v135 + 48))(v135, v140);
  }
LABEL_56:
  v47 = v135;
  if (v135 == v134)
  {
    v48 = 4;
    v47 = v134;
    goto LABEL_60;
  }
  if (v135)
  {
    v48 = 5;
LABEL_60:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  v49 = v136;
  v136 = 0;
  if (!v49)
    goto LABEL_64;
  v140[0] = v49;
  if (v138)
  {
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v138 + 48))(v138, v140);
LABEL_64:
    v50 = v138;
    if (v138 == v137)
    {
      v51 = 4;
      v50 = v137;
    }
    else
    {
      if (!v138)
        return v16 | ((a3 & 0xFFFFFF) << 8) | (v15 << 32);
      v51 = 5;
    }
    (*(void (**)(void))(*v50 + 8 * v51))();
    return v16 | ((a3 & 0xFFFFFF) << 8) | (v15 << 32);
  }
LABEL_70:
  v53 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()(v54, v53, v55, v56);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFFSections(swift::remote::RemoteAddress,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef)#1}::operator()@<X0>(void *__s2@<X1>, uint64_t result@<X0>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v5 = **(_QWORD **)result;
  v6 = *(unsigned __int16 *)(v5 + 2);
  if (!*(_WORD *)(v5 + 2))
  {
LABEL_15:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  v9 = result;
  v10 = *(_QWORD *)(result + 24);
  v11 = (unsigned int *)(**(_QWORD **)(result + 8) + 12);
  while (*((_BYTE *)v11 - 5))
  {
    if (a3 != 8)
      goto LABEL_4;
    v12 = 8;
LABEL_3:
    result = memcmp(v11 - 3, __s2, v12);
    if (!(_DWORD)result)
      goto LABEL_10;
LABEL_4:
    v11 += 10;
    if (!--v6)
      goto LABEL_15;
  }
  result = strlen((const char *)v11 - 12);
  if (result != a3)
    goto LABEL_4;
  v12 = a3;
  if (a3)
    goto LABEL_3;
LABEL_10:
  v13 = **(_QWORD **)(v9 + 16) + *v11;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10 + 2488) + 24))(&v21, *(_QWORD *)(v10 + 2488), v13, *(v11 - 1));
  v14 = v21;
  if (!v21)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v21 = 0;
    goto LABEL_24;
  }
  v15 = *(uint64_t **)(v10 + 2544);
  if ((unint64_t)v15 >= *(_QWORD *)(v10 + 2552))
  {
    v16 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((void **)(v10 + 2536), &v21);
  }
  else
  {
    v21 = 0;
    *v15 = v14;
    if (v23)
    {
      if (v23 == v22)
      {
        v15[4] = (uint64_t)(v15 + 1);
        (*(void (**)(_BYTE *))(*(_QWORD *)v23 + 24))(v23);
      }
      else
      {
        v15[4] = (uint64_t)v23;
        v23 = 0;
      }
    }
    else
    {
      v15[4] = 0;
    }
    v16 = (char *)(v15 + 5);
  }
  *(_QWORD *)(v10 + 2544) = v16;
  v17 = *(v11 - 1) - 16;
  *a4 = v13 + 8;
  a4[1] = v14 + 8;
  a4[2] = v17;
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    v24 = v18;
    if (v23)
    {
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v23 + 48))(v23, &v24);
      goto LABEL_24;
    }
    v20 = std::__throw_bad_function_call[abi:nn180100]();
  }
  else
  {
LABEL_24:
    result = (uint64_t)v23;
    if (v23 == v22)
    {
      v19 = 4;
      result = (uint64_t)v22;
    }
    else
    {
      if (!v23)
        return result;
      v19 = 5;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8 * v19))(result);
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(unsigned long long,unsigned long long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v3 = *(_QWORD **)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 24))
  {
    if ((unint64_t)(a3 + a2) <= v3[1])
      return *v3 + a2;
    else
      return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 2488) + 24))(&v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2488), **(_QWORD **)(a1 + 16) + a2);
  v6 = v15;
  if (!v15)
  {
    v4 = 0;
    v15 = 0;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(uint64_t **)(v7 + 8);
  if ((unint64_t)v8 >= *(_QWORD *)(v7 + 16))
  {
    v9 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(*(void ***)(a1 + 24), &v15);
  }
  else
  {
    v15 = 0;
    *v8 = v6;
    if (v17)
    {
      if (v17 == v16)
      {
        v8[4] = (uint64_t)(v8 + 1);
        (*(void (**)(_BYTE *))(*(_QWORD *)v17 + 24))(v17);
      }
      else
      {
        v8[4] = (uint64_t)v17;
        v17 = 0;
      }
    }
    else
    {
      v8[4] = 0;
    }
    v9 = (char *)(v8 + 5);
  }
  *(_QWORD *)(v7 + 8) = v9;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - 40);
  v10 = v15;
  v15 = 0;
  if (!v10)
  {
LABEL_18:
    v11 = v17;
    if (v17 == v16)
    {
      v12 = 4;
      v11 = v16;
    }
    else
    {
      if (!v17)
        return v4;
      v12 = 5;
    }
    (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
    return v4;
  }
  v18 = v10;
  if (v17)
  {
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v18);
    goto LABEL_18;
  }
  v14 = std::__throw_bad_function_call[abi:nn180100]();
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned int ***v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[3];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  void **__dst;
  size_t v63;
  int64_t v64;
  _QWORD v65[2];

  if (**(_BYTE **)a1 || (v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v51 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v11 = (uint64_t)*v9;
    v12 = **v9;
    v13 = (const char *)(**(_QWORD **)(a1 + 16) + v12);
    v14 = **(_QWORD **)(a1 + 24) - v12;
    v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(_BYTE **)a1 = 1;
      goto LABEL_2;
    }
    v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v18 = v15 | 7;
      v19 = v18 + 1;
      p_dst = (void **)operator new(v18 + 1);
      v63 = v16;
      v64 = v19 | 0x8000000000000000;
      __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v64) = v15;
    p_dst = (void **)&__dst;
    if (v15)
      goto LABEL_13;
LABEL_14:
    *((_BYTE *)p_dst + v16) = 0;
    v20 = HIBYTE(v64);
    if (v64 >= 0)
      v21 = (void **)&__dst;
    else
      v21 = __dst;
    v22 = HIBYTE(v64);
    if (v64 < 0)
      v22 = v63;
    if (v22 != a3 || a3 && memcmp(v21, a2, a3) || ((*(_BYTE *)(v11 + 10) & 0x20) == 0) == a4)
    {
      v28 = 3;
      if ((v20 & 0x80) == 0)
        goto LABEL_28;
LABEL_27:
      operator delete(__dst);
      goto LABEL_28;
    }
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(v11 + 16) + **(_QWORD **)(a1 + 32);
    v25 = *(_QWORD *)(v11 + 32);
    v59 = 0;
    v61 = 0;
    if (*(_BYTE *)(v23 + 24))
    {
      v26 = *(_QWORD *)(v11 + 24);
      if (*(_QWORD *)(v23 + 8) < v26 + v25)
      {
        v27 = 0;
        **(_BYTE **)a1 = 1;
        v28 = 2;
        goto LABEL_85;
      }
      v33 = malloc_type_malloc(v25, 0x4156ED03uLL);
      v54[0] = off_B4BA0;
      v55 = v54;
      v56 = 0;
      v57[0] = off_B4BA0;
      v34 = v59;
      v58 = v57;
      v59 = (uint64_t)v33;
      if (v34)
      {
        v65[0] = v34;
        if (!v61)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v65);
      }
      v35 = v61;
      v61 = 0;
      if (v35 == v60)
      {
        v35 = v60;
        v36 = 4;
      }
      else
      {
        if (!v35)
          goto LABEL_51;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_51:
      if (v58)
      {
        if (v58 == v57)
        {
          v61 = v60;
          (*(void (**)(uint64_t, _QWORD *))(v57[0] + 24))((uint64_t)v57, v60);
          v38 = v58;
        }
        else
        {
          v38 = 0;
          v61 = v58;
          v58 = 0;
        }
      }
      else
      {
        v38 = 0;
        v61 = 0;
      }
      v41 = v56;
      v56 = 0;
      if (v41)
      {
        v65[0] = v41;
        if (!v38)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v38 + 48))(v38, v65);
        v38 = v58;
      }
      if (v38 == v57)
      {
        v38 = v57;
        v42 = 4;
      }
      else
      {
        if (!v38)
          goto LABEL_73;
        v42 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v42))();
LABEL_73:
      v43 = v55;
      if (v55 == v54)
      {
        v43 = v54;
        v44 = 4;
      }
      else
      {
        if (!v55)
        {
LABEL_78:
          memcpy(v33, (const void *)(v26 + **(_QWORD **)(a1 + 40)), v25);
          goto LABEL_79;
        }
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
      goto LABEL_78;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, size_t))(**(_QWORD **)(v51 + 2488) + 24))(&v56, *(_QWORD *)(v51 + 2488), v24, v25);
    v29 = v56;
    v56 = 0;
    v30 = v59;
    v59 = v29;
    if (v30)
    {
      v54[0] = v30;
      if (!v61)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v54);
    }
    v31 = v61;
    v61 = 0;
    if (v31 == v60)
    {
      v31 = v60;
      v32 = 4;
      goto LABEL_44;
    }
    if (v31)
    {
      v32 = 5;
LABEL_44:
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
    if (v58)
    {
      if (v58 == v57)
      {
        v61 = v60;
        (*(void (**)(_QWORD *, _QWORD *))(v57[0] + 24))(v57, v60);
        v37 = v58;
      }
      else
      {
        v37 = 0;
        v61 = v58;
        v58 = 0;
      }
    }
    else
    {
      v37 = 0;
      v61 = 0;
    }
    v39 = v56;
    v56 = 0;
    if (v39)
    {
      v54[0] = v39;
      if (!v37)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v37 + 48))(v37, v54);
      v37 = v58;
    }
    if (v37 == v57)
    {
      v37 = v57;
      v40 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_79;
      v40 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v40))();
LABEL_79:
    v45 = v59;
    if (!v59)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      v28 = 1;
      v27 = v61;
LABEL_85:
      v59 = 0;
      if (v27 == v60)
        goto LABEL_95;
      goto LABEL_86;
    }
    v46 = *(uint64_t **)(v51 + 2544);
    if ((unint64_t)v46 >= *(_QWORD *)(v51 + 2552))
    {
      v48 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((void **)(v51 + 2536), &v59);
    }
    else
    {
      v59 = 0;
      *v46 = v45;
      if (v61)
      {
        if (v61 == v60)
        {
          v46[4] = (uint64_t)(v46 + 1);
          (*(void (**)(_QWORD *))(*v61 + 24))(v61);
        }
        else
        {
          v46[4] = (uint64_t)v61;
          v61 = 0;
        }
      }
      else
      {
        v46[4] = 0;
      }
      v48 = (char *)(v46 + 5);
    }
    *(_QWORD *)(v51 + 2544) = v48;
    *a5 = v24;
    a5[1] = v45;
    a5[2] = v25;
    v49 = v59;
    v27 = v61;
    v59 = 0;
    if (v49)
    {
      v56 = v49;
      if (!v61)
      {
LABEL_105:
        v50 = std::__throw_bad_function_call[abi:nn180100]();
        return;
      }
      (*(void (**)(void))(*v61 + 48))();
      v28 = 1;
      v27 = v61;
      if (v61 == v60)
      {
LABEL_95:
        v27 = v60;
        v47 = 4;
        goto LABEL_96;
      }
    }
    else
    {
      v28 = 1;
      if (v61 == v60)
        goto LABEL_95;
    }
LABEL_86:
    if (!v27)
      goto LABEL_97;
    v47 = 5;
LABEL_96:
    (*(void (**)(void))(*v27 + 8 * v47))();
LABEL_97:
    if (v64 < 0)
      goto LABEL_27;
LABEL_28:
    if (v28 != 3)
      break;
    if (++v9 == v8)
      goto LABEL_2;
  }
  if (v28 == 2)
    goto LABEL_2;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_B4BA0;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_B4BA0;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned int ***v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[3];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  void **__dst;
  size_t v63;
  int64_t v64;
  _QWORD v65[2];

  if (**(_BYTE **)a1 || (v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v51 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v11 = (uint64_t)*v9;
    v12 = **v9;
    v13 = (const char *)(**(_QWORD **)(a1 + 16) + v12);
    v14 = (**(_DWORD **)(a1 + 24) - v12);
    v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(_BYTE **)a1 = 1;
      goto LABEL_2;
    }
    v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v18 = v15 | 7;
      v19 = v18 + 1;
      p_dst = (void **)operator new(v18 + 1);
      v63 = v16;
      v64 = v19 | 0x8000000000000000;
      __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v64) = v15;
    p_dst = (void **)&__dst;
    if (v15)
      goto LABEL_13;
LABEL_14:
    *((_BYTE *)p_dst + v16) = 0;
    v20 = HIBYTE(v64);
    if (v64 >= 0)
      v21 = (void **)&__dst;
    else
      v21 = __dst;
    v22 = HIBYTE(v64);
    if (v64 < 0)
      v22 = v63;
    if (v22 != a3 || a3 && memcmp(v21, a2, a3) || ((*(_BYTE *)(v11 + 10) & 0x20) == 0) == a4)
    {
      v28 = 3;
      if ((v20 & 0x80) == 0)
        goto LABEL_28;
LABEL_27:
      operator delete(__dst);
      goto LABEL_28;
    }
    v23 = *(_QWORD *)(a1 + 40);
    v24 = **(_QWORD **)(a1 + 32) + *(unsigned int *)(v11 + 12);
    v25 = *(unsigned int *)(v11 + 20);
    v59 = 0;
    v61 = 0;
    if (*(_BYTE *)(v23 + 24))
    {
      v26 = *(unsigned int *)(v11 + 16);
      if (*(_QWORD *)(v23 + 8) < (unint64_t)(v26 + v25))
      {
        v27 = 0;
        **(_BYTE **)a1 = 1;
        v28 = 2;
        goto LABEL_85;
      }
      v33 = malloc_type_malloc(v25, 0x4156ED03uLL);
      v54[0] = off_B4BE8;
      v55 = v54;
      v56 = 0;
      v57[0] = off_B4BE8;
      v34 = v59;
      v58 = v57;
      v59 = (uint64_t)v33;
      if (v34)
      {
        v65[0] = v34;
        if (!v61)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v65);
      }
      v35 = v61;
      v61 = 0;
      if (v35 == v60)
      {
        v35 = v60;
        v36 = 4;
      }
      else
      {
        if (!v35)
          goto LABEL_51;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_51:
      if (v58)
      {
        if (v58 == v57)
        {
          v61 = v60;
          (*(void (**)(uint64_t, _QWORD *))(v57[0] + 24))((uint64_t)v57, v60);
          v38 = v58;
        }
        else
        {
          v38 = 0;
          v61 = v58;
          v58 = 0;
        }
      }
      else
      {
        v38 = 0;
        v61 = 0;
      }
      v41 = v56;
      v56 = 0;
      if (v41)
      {
        v65[0] = v41;
        if (!v38)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v38 + 48))(v38, v65);
        v38 = v58;
      }
      if (v38 == v57)
      {
        v38 = v57;
        v42 = 4;
      }
      else
      {
        if (!v38)
          goto LABEL_73;
        v42 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v42))();
LABEL_73:
      v43 = v55;
      if (v55 == v54)
      {
        v43 = v54;
        v44 = 4;
      }
      else
      {
        if (!v55)
        {
LABEL_78:
          memcpy(v33, (const void *)(**(_QWORD **)(a1 + 40) + v26), v25);
          goto LABEL_79;
        }
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
      goto LABEL_78;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, size_t))(**(_QWORD **)(v51 + 2488) + 24))(&v56, *(_QWORD *)(v51 + 2488), v24, v25);
    v29 = v56;
    v56 = 0;
    v30 = v59;
    v59 = v29;
    if (v30)
    {
      v54[0] = v30;
      if (!v61)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v54);
    }
    v31 = v61;
    v61 = 0;
    if (v31 == v60)
    {
      v31 = v60;
      v32 = 4;
      goto LABEL_44;
    }
    if (v31)
    {
      v32 = 5;
LABEL_44:
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
    if (v58)
    {
      if (v58 == v57)
      {
        v61 = v60;
        (*(void (**)(_QWORD *, _QWORD *))(v57[0] + 24))(v57, v60);
        v37 = v58;
      }
      else
      {
        v37 = 0;
        v61 = v58;
        v58 = 0;
      }
    }
    else
    {
      v37 = 0;
      v61 = 0;
    }
    v39 = v56;
    v56 = 0;
    if (v39)
    {
      v54[0] = v39;
      if (!v37)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v37 + 48))(v37, v54);
      v37 = v58;
    }
    if (v37 == v57)
    {
      v37 = v57;
      v40 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_79;
      v40 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v40))();
LABEL_79:
    v45 = v59;
    if (!v59)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      v28 = 1;
      v27 = v61;
LABEL_85:
      v59 = 0;
      if (v27 == v60)
        goto LABEL_95;
      goto LABEL_86;
    }
    v46 = *(uint64_t **)(v51 + 2544);
    if ((unint64_t)v46 >= *(_QWORD *)(v51 + 2552))
    {
      v48 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((void **)(v51 + 2536), &v59);
    }
    else
    {
      v59 = 0;
      *v46 = v45;
      if (v61)
      {
        if (v61 == v60)
        {
          v46[4] = (uint64_t)(v46 + 1);
          (*(void (**)(_QWORD *))(*v61 + 24))(v61);
        }
        else
        {
          v46[4] = (uint64_t)v61;
          v61 = 0;
        }
      }
      else
      {
        v46[4] = 0;
      }
      v48 = (char *)(v46 + 5);
    }
    *(_QWORD *)(v51 + 2544) = v48;
    *a5 = v24;
    a5[1] = v45;
    a5[2] = v25;
    v49 = v59;
    v27 = v61;
    v59 = 0;
    if (v49)
    {
      v56 = v49;
      if (!v61)
      {
LABEL_105:
        v50 = std::__throw_bad_function_call[abi:nn180100]();
        return;
      }
      (*(void (**)(void))(*v61 + 48))();
      v28 = 1;
      v27 = v61;
      if (v61 == v60)
      {
LABEL_95:
        v27 = v60;
        v47 = 4;
        goto LABEL_96;
      }
    }
    else
    {
      v28 = 1;
      if (v61 == v60)
        goto LABEL_95;
    }
LABEL_86:
    if (!v27)
      goto LABEL_97;
    v47 = 5;
LABEL_96:
    (*(void (**)(void))(*v27 + 8 * v47))();
LABEL_97:
    if (v64 < 0)
      goto LABEL_27;
LABEL_28:
    if (v28 != 3)
      break;
    if (++v9 == v8)
      goto LABEL_2;
  }
  if (v28 == 2)
    goto LABEL_2;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_B4BE8;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_B4BE8;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::addImage(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  size_t v20;
  unsigned int v21;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  unsigned int **v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  unint64_t PECOFF;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  size_t v100;
  _BYTE *v101;
  uint64_t v102;
  size_t v103;
  _BYTE *v104;
  size_t v105;
  _BYTE *v106;
  size_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  int v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  _QWORD *v125;
  int v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  unint64_t v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  void **v209;
  void **v210;
  unint64_t v211;
  unint64_t v212;
  _QWORD v213[2];
  uint64_t v214;
  __int128 v215;
  char v216;
  _BYTE *v217;
  uint64_t v218;
  _BYTE v219[16];
  void *v220;
  uint64_t v221;
  _BYTE v222[16];
  void *__src;
  uint64_t v224;
  _BYTE v225[16];
  int *v226;
  _BYTE v227[24];
  _BYTE *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  _BYTE v255[16];
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *__dst;
  uint64_t v281;
  _BYTE v282[16];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t *v308;
  unint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  _BYTE v314[24];
  _BYTE *v315;
  unsigned int v316;
  uint64_t v317;
  _BYTE v318[24];
  _BYTE *v319;
  uint64_t v320;
  _BYTE v321[24];
  _BYTE *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  uint64_t v348;
  _BYTE v349[16];
  _QWORD v350[2];

  v6 = a1;
  (*(void (**)(int **__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v226);
  if (!v226)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v226 = 0;
    goto LABEL_376;
  }
  v7 = *v226;
  if (*v226 == -17958193)
  {
    v220 = v222;
    v221 = 0x100000000;
    if (&v220 == (void **)a3)
      goto LABEL_76;
    v12 = *(_DWORD *)(a3 + 8);
    if (!v12)
      goto LABEL_76;
    if (v12 < 2)
    {
      v15 = 16;
      v14 = v222;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, *(unsigned int *)(a3 + 8), 16);
      v13 = *(unsigned int *)(a3 + 8);
      if (!(_DWORD)v13)
      {
LABEL_75:
        LODWORD(v221) = v12;
LABEL_76:
        (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                         + 24))(&v320, *(_QWORD *)(v6 + 2488), a2, 32);
        if (!v320)
        {
          LOBYTE(a2) = 0;
          LOBYTE(v6) = 0;
          v320 = 0;
          goto LABEL_366;
        }
        v41 = *(_DWORD *)(v320 + 20);
        if (!v41)
          goto LABEL_117;
        v42 = 0;
        v43 = 0;
        v210 = (void **)(v6 + 2536);
        v212 = a2 + 32;
        a3 = (uint64_t)&v324;
        v208 = *(_DWORD *)(v320 + 20);
        while (1)
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                           + 24))(&v323, *(_QWORD *)(v6 + 2488), v42 + v212, 72);
          v44 = v323;
          if (!v323)
            break;
          if (strncmp((const char *)(v323 + 8), "__TEXT", 0x10uLL))
          {
            v45 = 0;
            v42 += *(unsigned int *)(v44 + 4);
            v323 = 0;
            v46 = v44;
LABEL_92:
            v256 = v46;
            if (!v327)
              goto LABEL_382;
            (*(void (**)(uint64_t *, uint64_t *))(*v327 + 48))(v327, &v256);
LABEL_94:
            v44 = v43;
            goto LABEL_95;
          }
          v47 = *(uint64_t **)(v6 + 2544);
          if ((unint64_t)v47 >= *(_QWORD *)(v6 + 2552))
          {
            v48 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v210, &v323);
          }
          else
          {
            v323 = 0;
            *v47 = v44;
            if (v327)
            {
              if (v327 == &v324)
              {
                v47[4] = (uint64_t)(v47 + 1);
                (*(void (**)(uint64_t *))(*v327 + 24))(v327);
              }
              else
              {
                v47[4] = (uint64_t)v327;
                v327 = 0;
              }
            }
            else
            {
              v47[4] = 0;
            }
            v48 = (char *)(v47 + 5);
          }
          *(_QWORD *)(v6 + 2544) = v48;
          v46 = v323;
          v45 = 2;
          v43 = v44;
          v323 = 0;
          if (v46)
            goto LABEL_92;
LABEL_95:
          v49 = v327;
          if (v327 == &v324)
          {
            v49 = &v324;
            v50 = 4;
          }
          else
          {
            if (!v327)
              goto LABEL_100;
            v50 = 5;
          }
          (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_100:
          if (v45)
          {
            if (v45 == 2)
            {
LABEL_105:
              if (v44)
              {
                (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                                 + 24))(&v317, *(_QWORD *)(v6 + 2488), v42 + v212, 72);
                if (!v317)
                {
                  LOBYTE(a2) = 0;
                  LOBYTE(v6) = 0;
                  v317 = 0;
                  goto LABEL_358;
                }
                v316 = *(_DWORD *)(v317 + 64);
                (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488)
                                                                                                 + 24))(&v313, *(_QWORD *)(v6 + 2488), v42 + v212 + 72, 80 * v316);
                if (!v313)
                {
                  LOBYTE(a2) = 0;
                  LOBYTE(v6) = 0;
                  v313 = 0;
                  goto LABEL_350;
                }
                v312 = a2 - *(_QWORD *)(v44 + 24);
                v311 = v313;
                v307 = &v316;
                v308 = &v311;
                v309 = &v312;
                v310 = v6;
                v51 = v304;
                v52 = v301;
                v53 = v298;
                v54 = v295;
                v55 = v292;
                v56 = v289;
                v57 = v286;
                v58 = v283;
                if (!v304 && !v301 && !v298 && !v295 && !v292 && !v289 && !v286 && !v283)
                {
                  LOBYTE(v6) = 0;
                  LOBYTE(a2) = 0;
                  goto LABEL_347;
                }
                v81 = v305;
                v256 = v304;
                v257 = v305;
                v82 = v302;
                v83 = v303;
                v206 = v306;
                v258 = v306;
                v259 = v301;
                v260 = v302;
                v261 = v303;
                v84 = v299;
                v85 = v300;
                v262 = v298;
                v263 = v299;
                v86 = v296;
                v87 = v297;
                v264 = v300;
                v265 = v295;
                v266 = v296;
                v267 = v297;
                v88 = v293;
                v89 = v294;
                v268 = v292;
                v269 = v293;
                v90 = v290;
                v91 = v291;
                v270 = v294;
                v271 = v289;
                v272 = v290;
                v273 = v291;
                v92 = v287;
                v93 = v288;
                v274 = v286;
                v275 = v287;
                v94 = v284;
                v95 = v285;
                v276 = v288;
                v277 = v283;
                v278 = v284;
                v279 = v285;
                __dst = v282;
                v281 = 0x100000000;
                v96 = v221;
                if ((_DWORD)v221)
                {
                  if ((_DWORD)v221 == 1)
                  {
                    v97 = 16;
                    v98 = v282;
                    goto LABEL_144;
                  }
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v282, v221, 16);
                  if ((_DWORD)v221)
                  {
                    v98 = __dst;
                    v97 = 16 * v221;
LABEL_144:
                    memcpy(v98, v220, v97);
                  }
                  LODWORD(v281) = v96;
                  v51 = v256;
                  v81 = v257;
                  v206 = v258;
                  v52 = v259;
                  v82 = v260;
                  v83 = v261;
                  v53 = v262;
                  v84 = v263;
                  v85 = v264;
                  v54 = v265;
                  v86 = v266;
                  v87 = v267;
                  v55 = v268;
                  v88 = v269;
                  v89 = v270;
                  v56 = v271;
                  v90 = v272;
                  v91 = v273;
                  v57 = v274;
                  v92 = v275;
                  v93 = v276;
                  v58 = v277;
                  v94 = v278;
                  v95 = v279;
                }
                v202 = v81;
                v229 = v51;
                v230 = v81;
                v231 = v206;
                v232 = v52;
                v233 = v82;
                v234 = v83;
                v235 = v53;
                v236 = v84;
                v237 = v85;
                v238 = v54;
                v239 = v86;
                v240 = v87;
                v241 = v55;
                v242 = v88;
                v243 = v89;
                v244 = v56;
                v245 = v90;
                v246 = v91;
                v247 = v57;
                v248 = v92;
                v249 = v93;
                v250 = v58;
                v251 = v94;
                v252 = v95;
                v102 = v90;
                v253 = v255;
                v254 = 0x100000000;
                if ((_DWORD)v96)
                {
                  if ((_DWORD)v96 == 1)
                  {
                    v103 = 16;
                    v104 = v255;
                    goto LABEL_158;
                  }
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v96, 16);
                  if ((_DWORD)v281)
                  {
                    v104 = v253;
                    v103 = 16 * v281;
LABEL_158:
                    memcpy(v104, __dst, v103);
                  }
                  LODWORD(v254) = v96;
                  v51 = v229;
                  v202 = v230;
                  v206 = v231;
                  v52 = v232;
                  v82 = v233;
                  v83 = v234;
                  v53 = v235;
                  v84 = v236;
                  v85 = v237;
                  v54 = v238;
                  v86 = v239;
                  v87 = v240;
                  v55 = v241;
                  v88 = v242;
                  v89 = v243;
                  v56 = v244;
                  v102 = v245;
                  v91 = v246;
                  v57 = v247;
                  v92 = v248;
                  v93 = v249;
                  v58 = v250;
                  v94 = v251;
                  v95 = v252;
                }
                v323 = v51;
                v324 = v202;
                v325 = v206;
                v326 = v52;
                v327 = v82;
                v328 = v83;
                v329 = v53;
                v330 = v84;
                v331 = v85;
                v332 = v54;
                v333 = v86;
                v334 = v87;
                v335 = v55;
                v336 = v88;
                v337 = v89;
                v338 = v56;
                v339 = v102;
                v340 = v91;
                v341 = v57;
                v342 = v92;
                v343 = v93;
                v344 = v58;
                v345 = v94;
                v346 = v95;
                v347 = v349;
                v348 = 0x100000000;
                if ((_DWORD)v96)
                {
                  if ((_DWORD)v96 == 1)
                  {
                    v107 = 16;
                    v108 = v349;
                    goto LABEL_184;
                  }
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v96, 16);
                  if ((_DWORD)v254)
                  {
                    v108 = v347;
                    v107 = 16 * v254;
LABEL_184:
                    memcpy(v108, v253, v107);
                  }
                  LODWORD(v348) = v96;
                }
                LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v323);
                if (v347 != v349)
                  free(v347);
                if (v253 != v255)
                  free(v253);
                v121 = *(_QWORD *)(v44 + 24) + v312;
                v122 = v121 + *(_QWORD *)(v44 + 32);
                v123 = *(char **)(v6 + 2568);
                v124 = *(_QWORD *)(v6 + 2576);
                if ((unint64_t)v123 < v124)
                {
                  *(_QWORD *)v123 = v121;
                  *((_QWORD *)v123 + 1) = v122;
                  v125 = v123 + 16;
                  v126 = v208;
                  goto LABEL_253;
                }
                v127 = *(char **)(v6 + 2560);
                v128 = (v123 - v127) >> 4;
                v129 = v128 + 1;
                v126 = v208;
                if ((unint64_t)(v128 + 1) >> 60)
                  goto LABEL_383;
                v130 = v124 - (_QWORD)v127;
                if (v130 >> 3 > v129)
                  v129 = v130 >> 3;
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0)
                  v131 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v131 = v129;
                if (!v131)
                {
                  v132 = 0;
                  goto LABEL_206;
                }
                if (!(v131 >> 60))
                {
                  v132 = (char *)operator new(16 * v131);
LABEL_206:
                  v134 = &v132[16 * v128];
                  *(_QWORD *)v134 = v121;
                  *((_QWORD *)v134 + 1) = v122;
                  v125 = v134 + 16;
                  if (v123 != v127)
                  {
                    do
                    {
                      *((_OWORD *)v134 - 1) = *((_OWORD *)v123 - 1);
                      v134 -= 16;
                      v123 -= 16;
                    }
                    while (v123 != v127);
                    v123 = *(char **)(v6 + 2560);
                  }
                  *(_QWORD *)(v6 + 2560) = v134;
                  *(_QWORD *)(v6 + 2568) = v125;
                  *(_QWORD *)(v6 + 2576) = &v132[16 * v131];
                  if (v123)
                    operator delete(v123);
LABEL_253:
                  v155 = 0;
                  *(_QWORD *)(v6 + 2568) = v125;
                  while (2)
                  {
                    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v323, *(_QWORD *)(v6 + 2488), v42 + v212, 72);
                    a3 = v323;
                    if (v323)
                    {
                      if (strncmp((const char *)(v323 + 8), "__DATA", 6uLL)
                        && strncmp((const char *)(a3 + 8), "__AUTH", 6uLL))
                      {
                        v42 += *(unsigned int *)(a3 + 4);
                        v323 = 0;
                        v156 = a3;
                        goto LABEL_278;
                      }
                      v157 = *(_QWORD *)(a3 + 24) + v312;
                      v158 = v157 + *(_QWORD *)(a3 + 32);
                      v159 = *(char **)(v6 + 2592);
                      v160 = *(_QWORD *)(v6 + 2600);
                      if ((unint64_t)v159 >= v160)
                      {
                        v162 = *(char **)(v6 + 2584);
                        v163 = (v159 - v162) >> 4;
                        v164 = v163 + 1;
                        if ((unint64_t)(v163 + 1) >> 60)
                          goto LABEL_383;
                        v165 = v160 - (_QWORD)v162;
                        if (v165 >> 3 > v164)
                          v164 = v165 >> 3;
                        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0)
                          v164 = 0xFFFFFFFFFFFFFFFLL;
                        v204 = v164;
                        if (v164)
                        {
                          if (v164 >> 60)
                            break;
                          v166 = (char *)operator new(16 * v164);
                        }
                        else
                        {
                          v166 = 0;
                        }
                        v167 = &v166[16 * v163];
                        *(_QWORD *)v167 = v157;
                        *((_QWORD *)v167 + 1) = v158;
                        v168 = v167;
                        if (v159 == v162)
                        {
                          v126 = v208;
                          v169 = v204;
                        }
                        else
                        {
                          v126 = v208;
                          v169 = v204;
                          do
                          {
                            *((_OWORD *)v168 - 1) = *((_OWORD *)v159 - 1);
                            v168 -= 16;
                            v159 -= 16;
                          }
                          while (v159 != v162);
                          v159 = *(char **)(v6 + 2584);
                        }
                        *(_QWORD *)(v6 + 2584) = v168;
                        v161 = v167 + 16;
                        *(_QWORD *)(v6 + 2592) = v167 + 16;
                        *(_QWORD *)(v6 + 2600) = &v166[16 * v169];
                        if (v159)
                          operator delete(v159);
                      }
                      else
                      {
                        *(_QWORD *)v159 = v157;
                        *((_QWORD *)v159 + 1) = v158;
                        v161 = v159 + 16;
                      }
                      *(_QWORD *)(v6 + 2592) = v161;
                      v156 = v323;
                      v42 += *(unsigned int *)(a3 + 4);
                      v323 = 0;
                      if (v156)
                      {
LABEL_278:
                        v350[0] = v156;
                        if (!v327)
                          goto LABEL_382;
                        (*(void (**)(uint64_t *, _QWORD *))(*v327 + 48))(v327, v350);
                      }
                    }
                    else
                    {
                      v323 = 0;
                    }
                    v170 = v327;
                    if (v327 == &v324)
                    {
                      v170 = &v324;
                      v171 = 4;
LABEL_284:
                      (*(void (**)(void))(*v170 + 8 * v171))();
                    }
                    else if (v327)
                    {
                      v171 = 5;
                      goto LABEL_284;
                    }
                    if (!a3)
                    {
                      LOBYTE(v6) = 0;
                      LOBYTE(a2) = 0;
LABEL_345:
                      if (__dst != v282)
                        free(__dst);
LABEL_347:
                      v188 = v313;
                      v313 = 0;
                      if (v188)
                      {
                        v323 = v188;
                        if (!v315)
                          goto LABEL_382;
                        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v315 + 48))(v315, &v323);
                      }
LABEL_350:
                      v189 = v315;
                      if (v315 == v314)
                      {
                        v190 = 4;
                        v189 = v314;
LABEL_354:
                        (*(void (**)(void))(*v189 + 8 * v190))();
                      }
                      else if (v315)
                      {
                        v190 = 5;
                        goto LABEL_354;
                      }
                      v191 = v317;
                      v317 = 0;
                      if (v191)
                      {
                        v323 = v191;
                        if (!v319)
                          goto LABEL_382;
                        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v319 + 48))(v319, &v323);
                      }
LABEL_358:
                      v192 = v319;
                      if (v319 == v318)
                      {
                        v193 = 4;
                        v192 = v318;
LABEL_362:
                        (*(void (**)(void))(*v192 + 8 * v193))();
                      }
                      else if (v319)
                      {
                        v193 = 5;
                        goto LABEL_362;
                      }
LABEL_363:
                      v194 = v320;
                      v320 = 0;
                      if (v194)
                      {
                        v323 = v194;
                        if (!v322)
                          goto LABEL_382;
                        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v322 + 48))(v322, &v323);
                      }
LABEL_366:
                      v195 = v322;
                      if (v322 == v321)
                      {
                        v196 = 4;
                        v195 = v321;
LABEL_370:
                        (*(void (**)(void))(*v195 + 8 * v196))();
                      }
                      else if (v322)
                      {
                        v196 = 5;
                        goto LABEL_370;
                      }
                      v61 = 0;
                      v3 = 0;
                      v60 = v220;
                      if (v220 == v222)
                        goto LABEL_373;
LABEL_372:
                      free(v60);
                      v3 = v61;
                      goto LABEL_373;
                    }
                    if (++v155 == v126)
                    {
                      v172 = *(uint64_t **)(v6 + 2544);
                      if ((unint64_t)v172 >= *(_QWORD *)(v6 + 2552))
                      {
                        v174 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v210, &v320);
                      }
                      else
                      {
                        v173 = v320;
                        v320 = 0;
                        *v172 = v173;
                        if (v322)
                        {
                          if (v322 == v321)
                          {
                            v172[4] = (uint64_t)(v172 + 1);
                            (*(void (**)(_BYTE *))(*(_QWORD *)v322 + 24))(v322);
                          }
                          else
                          {
                            v172[4] = (uint64_t)v322;
                            v322 = 0;
                          }
                        }
                        else
                        {
                          v172[4] = 0;
                        }
                        v174 = (char *)(v172 + 5);
                      }
                      *(_QWORD *)(v6 + 2544) = v174;
                      if ((unint64_t)v174 >= *(_QWORD *)(v6 + 2552))
                      {
                        v178 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v210, &v313);
                      }
                      else
                      {
                        v177 = v313;
                        v313 = 0;
                        *(_QWORD *)v174 = v177;
                        if (v315)
                        {
                          if (v315 == v314)
                          {
                            *((_QWORD *)v174 + 4) = v174 + 8;
                            (*(void (**)(_BYTE *))(*(_QWORD *)v315 + 24))(v315);
                          }
                          else
                          {
                            *((_QWORD *)v174 + 4) = v315;
                            v315 = 0;
                          }
                        }
                        else
                        {
                          *((_QWORD *)v174 + 4) = 0;
                        }
                        v178 = v174 + 40;
                      }
                      *(_QWORD *)(v6 + 2544) = v178;
                      LODWORD(a3) = a2 >> 8;
                      LOBYTE(v6) = 1;
                      goto LABEL_345;
                    }
                    continue;
                  }
                }
LABEL_384:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
            }
LABEL_117:
            LOBYTE(v6) = 0;
            LOBYTE(a2) = 0;
            goto LABEL_363;
          }
          v43 = v44;
          if (!--v41)
            goto LABEL_105;
        }
        v323 = 0;
        v45 = 1;
        goto LABEL_94;
      }
      v14 = v220;
      v15 = 16 * v13;
    }
    memcpy(v14, *(const void **)a3, v15);
    goto LABEL_75;
  }
  if (v7 != -17958194)
  {
    v16 = BYTE1(v7);
    if (*v226 == 127)
    {
      v21 = v7 & 0xFFFF0000;
      if (v16 == 69 && v21 == 1179385856)
      {
        LOBYTE(v215) = 0;
        v216 = 0;
        llvm::SmallVector<llvm::StringRef,1u>::SmallVector(v213, a3);
        v59 = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(v6, a2, &v215, (uint64_t)v213);
        LOBYTE(a2) = v59;
        a3 = v59 >> 8;
        v6 = HIDWORD(v59);
        v3 = v59 >> 40;
        v60 = (void *)v213[0];
        v61 = v3;
        if ((uint64_t *)v213[0] == &v214)
          goto LABEL_373;
        goto LABEL_372;
      }
    }
    else if (*v226 == 77 && BYTE1(v7) == 90)
    {
      v217 = v219;
      v218 = 0x100000000;
      if (&v217 == (_BYTE **)a3 || (v17 = *(_DWORD *)(a3 + 8)) == 0)
      {
LABEL_125:
        PECOFF = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readPECOFF(v6, a2, (uint64_t)&v217);
        LOBYTE(a2) = PECOFF;
        a3 = PECOFF >> 8;
        v6 = HIDWORD(PECOFF);
        v61 = PECOFF >> 40;
        v60 = v217;
        v3 = v61;
        if (v217 == v219)
          goto LABEL_373;
        goto LABEL_372;
      }
      if (v17 < 2)
      {
        v20 = 16;
        v19 = v219;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, *(unsigned int *)(a3 + 8), 16);
        v18 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v18)
        {
LABEL_124:
          LODWORD(v218) = v17;
          goto LABEL_125;
        }
        v19 = v217;
        v20 = 16 * v18;
      }
      memcpy(v19, *(const void **)a3, v20);
      goto LABEL_124;
    }
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_373;
  }
  __src = v225;
  v224 = 0x100000000;
  if (&__src == (void **)a3)
    goto LABEL_31;
  v8 = *(_DWORD *)(a3 + 8);
  if (!v8)
    goto LABEL_31;
  if (v8 < 2)
  {
    v11 = 16;
    v10 = v225;
    goto LABEL_29;
  }
  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v225, *(unsigned int *)(a3 + 8), 16);
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9)
  {
    v10 = __src;
    v11 = 16 * v9;
LABEL_29:
    memcpy(v10, *(const void **)a3, v11);
  }
  LODWORD(v224) = v8;
LABEL_31:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v320, *(_QWORD *)(v6 + 2488), a2, 28);
  if (!v320)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v320 = 0;
    goto LABEL_335;
  }
  v23 = *(_DWORD *)(v320 + 20);
  if (!v23)
  {
LABEL_72:
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_332;
  }
  v24 = 0;
  v25 = 0;
  v209 = (void **)(v6 + 2536);
  v211 = a2 + 28;
  a3 = (uint64_t)&v324;
  v207 = *(_DWORD *)(v320 + 20);
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v323, *(_QWORD *)(v6 + 2488), v24 + v211, 56);
    v26 = (unsigned int *)v323;
    if (!v323)
    {
      v323 = 0;
      v27 = 1;
      goto LABEL_49;
    }
    if (strncmp((const char *)(v323 + 8), "__TEXT", 0x10uLL))
    {
      v27 = 0;
      v24 += v26[1];
      v323 = 0;
      v28 = (uint64_t)v26;
LABEL_47:
      v256 = v28;
      if (!v327)
        goto LABEL_382;
      (*(void (**)(uint64_t *, uint64_t *))(*v327 + 48))(v327, &v256);
LABEL_49:
      v26 = v25;
      goto LABEL_50;
    }
    v29 = *(unsigned int ***)(v6 + 2544);
    if ((unint64_t)v29 >= *(_QWORD *)(v6 + 2552))
    {
      v30 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v209, &v323);
    }
    else
    {
      v323 = 0;
      *v29 = v26;
      if (v327)
      {
        if (v327 == &v324)
        {
          v29[4] = (unsigned int *)(v29 + 1);
          (*(void (**)(uint64_t *))(*v327 + 24))(v327);
        }
        else
        {
          v29[4] = (unsigned int *)v327;
          v327 = 0;
        }
      }
      else
      {
        v29[4] = 0;
      }
      v30 = (char *)(v29 + 5);
    }
    *(_QWORD *)(v6 + 2544) = v30;
    v28 = v323;
    v27 = 2;
    v25 = v26;
    v323 = 0;
    if (v28)
      goto LABEL_47;
LABEL_50:
    v31 = v327;
    if (v327 == &v324)
    {
      v31 = &v324;
      v32 = 4;
    }
    else
    {
      if (!v327)
        goto LABEL_55;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_55:
    if (v27)
      break;
    v25 = v26;
    if (!--v23)
      goto LABEL_60;
  }
  if (v27 != 2)
    goto LABEL_72;
LABEL_60:
  if (!v26)
    goto LABEL_72;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v317, *(_QWORD *)(v6 + 2488), v24 + v211, 56);
  if (!v317)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v317 = 0;
    goto LABEL_327;
  }
  v316 = *(_DWORD *)(v317 + 48);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v313, *(_QWORD *)(v6 + 2488), v24 + v211 + 56, 68 * v316);
  if (!v313)
  {
    LOBYTE(a2) = 0;
    LOBYTE(v6) = 0;
    v313 = 0;
    goto LABEL_319;
  }
  v312 = a2 - v26[6];
  v311 = v313;
  v307 = &v316;
  v308 = &v311;
  v309 = &v312;
  v310 = v6;
  v33 = v304;
  v34 = v301;
  v35 = v298;
  v36 = v295;
  v37 = v292;
  v38 = v289;
  v39 = v286;
  v40 = v283;
  if (!v304 && !v301 && !v298 && !v295 && !v292 && !v289 && !v286 && !v283)
  {
    LOBYTE(v6) = 0;
    LOBYTE(a2) = 0;
    goto LABEL_316;
  }
  v63 = v305;
  v256 = v304;
  v257 = v305;
  v64 = v302;
  v65 = v303;
  v205 = v306;
  v258 = v306;
  v259 = v301;
  v260 = v302;
  v261 = v303;
  v66 = v299;
  v67 = v300;
  v262 = v298;
  v263 = v299;
  v68 = v296;
  v69 = v297;
  v264 = v300;
  v265 = v295;
  v266 = v296;
  v267 = v297;
  v70 = v293;
  v71 = v294;
  v268 = v292;
  v269 = v293;
  v72 = v290;
  v73 = v291;
  v270 = v294;
  v271 = v289;
  v272 = v290;
  v273 = v291;
  v74 = v287;
  v75 = v288;
  v274 = v286;
  v275 = v287;
  v76 = v284;
  v77 = v285;
  v276 = v288;
  v277 = v283;
  v278 = v284;
  v279 = v285;
  __dst = v282;
  v281 = 0x100000000;
  v78 = v224;
  if ((_DWORD)v224)
  {
    if ((_DWORD)v224 == 1)
    {
      v79 = 16;
      v80 = v282;
      goto LABEL_137;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v282, v224, 16);
    if ((_DWORD)v224)
    {
      v80 = __dst;
      v79 = 16 * v224;
LABEL_137:
      memcpy(v80, __src, v79);
    }
    LODWORD(v281) = v78;
    v33 = v256;
    v63 = v257;
    v205 = v258;
    v34 = v259;
    v64 = v260;
    v65 = v261;
    v35 = v262;
    v66 = v263;
    v67 = v264;
    v36 = v265;
    v68 = v266;
    v69 = v267;
    v37 = v268;
    v70 = v269;
    v71 = v270;
    v38 = v271;
    v72 = v272;
    v73 = v273;
    v39 = v274;
    v74 = v275;
    v75 = v276;
    v40 = v277;
    v76 = v278;
    v77 = v279;
  }
  v201 = v63;
  v229 = v33;
  v230 = v63;
  v231 = v205;
  v232 = v34;
  v233 = v64;
  v234 = v65;
  v235 = v35;
  v236 = v66;
  v237 = v67;
  v238 = v36;
  v239 = v68;
  v240 = v69;
  v241 = v37;
  v242 = v70;
  v243 = v71;
  v244 = v38;
  v245 = v72;
  v246 = v73;
  v247 = v39;
  v248 = v74;
  v249 = v75;
  v250 = v40;
  v251 = v76;
  v252 = v77;
  v99 = v72;
  v253 = v255;
  v254 = 0x100000000;
  if ((_DWORD)v78)
  {
    if ((_DWORD)v78 == 1)
    {
      v100 = 16;
      v101 = v255;
      goto LABEL_151;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v78, 16);
    if ((_DWORD)v281)
    {
      v101 = v253;
      v100 = 16 * v281;
LABEL_151:
      memcpy(v101, __dst, v100);
    }
    LODWORD(v254) = v78;
    v33 = v229;
    v201 = v230;
    v205 = v231;
    v34 = v232;
    v64 = v233;
    v65 = v234;
    v35 = v235;
    v66 = v236;
    v67 = v237;
    v36 = v238;
    v68 = v239;
    v69 = v240;
    v37 = v241;
    v70 = v242;
    v71 = v243;
    v38 = v244;
    v99 = v245;
    v73 = v246;
    v39 = v247;
    v74 = v248;
    v75 = v249;
    v40 = v250;
    v76 = v251;
    v77 = v252;
  }
  v323 = v33;
  v324 = v201;
  v325 = v205;
  v326 = v34;
  v327 = v64;
  v328 = v65;
  v329 = v35;
  v330 = v66;
  v331 = v67;
  v332 = v36;
  v333 = v68;
  v334 = v69;
  v335 = v37;
  v336 = v70;
  v337 = v71;
  v338 = v38;
  v339 = v99;
  v340 = v73;
  v341 = v39;
  v342 = v74;
  v343 = v75;
  v344 = v40;
  v345 = v76;
  v346 = v77;
  v347 = v349;
  v348 = 0x100000000;
  if ((_DWORD)v78)
  {
    if ((_DWORD)v78 == 1)
    {
      v105 = 16;
      v106 = v349;
      goto LABEL_165;
    }
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v78, 16);
    if ((_DWORD)v254)
    {
      v106 = v347;
      v105 = 16 * v254;
LABEL_165:
      memcpy(v106, v253, v105);
    }
    LODWORD(v348) = v78;
  }
  LODWORD(a2) = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v6 + 296), (uint64_t)&v323);
  if (v347 != v349)
    free(v347);
  if (v253 != v255)
    free(v253);
  v109 = v312 + v26[6];
  v110 = v109 + v26[7];
  v111 = *(char **)(v6 + 2568);
  v112 = *(_QWORD *)(v6 + 2576);
  if ((unint64_t)v111 < v112)
  {
    *(_QWORD *)v111 = v109;
    *((_QWORD *)v111 + 1) = v110;
    v113 = v111 + 16;
    v114 = v207;
    goto LABEL_211;
  }
  v115 = *(char **)(v6 + 2560);
  v116 = (v111 - v115) >> 4;
  v117 = v116 + 1;
  v114 = v207;
  if ((unint64_t)(v116 + 1) >> 60)
    goto LABEL_383;
  v118 = v112 - (_QWORD)v115;
  if (v118 >> 3 > v117)
    v117 = v118 >> 3;
  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0)
    v119 = 0xFFFFFFFFFFFFFFFLL;
  else
    v119 = v117;
  if (!v119)
  {
    v120 = 0;
    goto LABEL_202;
  }
  if (v119 >> 60)
    goto LABEL_384;
  v120 = (char *)operator new(16 * v119);
LABEL_202:
  v133 = &v120[16 * v116];
  *(_QWORD *)v133 = v109;
  *((_QWORD *)v133 + 1) = v110;
  v113 = v133 + 16;
  if (v111 != v115)
  {
    do
    {
      *((_OWORD *)v133 - 1) = *((_OWORD *)v111 - 1);
      v133 -= 16;
      v111 -= 16;
    }
    while (v111 != v115);
    v111 = *(char **)(v6 + 2560);
  }
  *(_QWORD *)(v6 + 2560) = v133;
  *(_QWORD *)(v6 + 2568) = v113;
  *(_QWORD *)(v6 + 2576) = &v120[16 * v119];
  if (v111)
    operator delete(v111);
LABEL_211:
  v135 = 0;
  *(_QWORD *)(v6 + 2568) = v113;
  while (2)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 2488) + 24))(&v323, *(_QWORD *)(v6 + 2488), v24 + v211, 56);
    a3 = v323;
    if (v323)
    {
      if (strncmp((const char *)(v323 + 8), "__DATA", 6uLL) && strncmp((const char *)(a3 + 8), "__AUTH", 6uLL))
      {
        v24 += *(unsigned int *)(a3 + 4);
        v323 = 0;
        v136 = a3;
        goto LABEL_236;
      }
      v137 = v312 + *(unsigned int *)(a3 + 24);
      v138 = v137 + *(unsigned int *)(a3 + 28);
      v139 = *(char **)(v6 + 2592);
      v140 = *(_QWORD *)(v6 + 2600);
      if ((unint64_t)v139 >= v140)
      {
        v142 = *(char **)(v6 + 2584);
        v143 = (v139 - v142) >> 4;
        v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 60)
          goto LABEL_383;
        v145 = v140 - (_QWORD)v142;
        if (v145 >> 3 > v144)
          v144 = v145 >> 3;
        if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0)
          v144 = 0xFFFFFFFFFFFFFFFLL;
        v203 = v144;
        if (v144)
        {
          if (v144 >> 60)
            goto LABEL_384;
          v146 = (char *)operator new(16 * v144);
        }
        else
        {
          v146 = 0;
        }
        v147 = &v146[16 * v143];
        *(_QWORD *)v147 = v137;
        *((_QWORD *)v147 + 1) = v138;
        v148 = v147;
        if (v139 == v142)
        {
          v114 = v207;
          v149 = v203;
        }
        else
        {
          v114 = v207;
          v149 = v203;
          do
          {
            *((_OWORD *)v148 - 1) = *((_OWORD *)v139 - 1);
            v148 -= 16;
            v139 -= 16;
          }
          while (v139 != v142);
          v139 = *(char **)(v6 + 2584);
        }
        *(_QWORD *)(v6 + 2584) = v148;
        v141 = v147 + 16;
        *(_QWORD *)(v6 + 2592) = v147 + 16;
        *(_QWORD *)(v6 + 2600) = &v146[16 * v149];
        if (v139)
          operator delete(v139);
      }
      else
      {
        *(_QWORD *)v139 = v137;
        *((_QWORD *)v139 + 1) = v138;
        v141 = v139 + 16;
      }
      *(_QWORD *)(v6 + 2592) = v141;
      v136 = v323;
      v24 += *(unsigned int *)(a3 + 4);
      v323 = 0;
      if (v136)
      {
LABEL_236:
        v350[0] = v136;
        if (!v327)
          goto LABEL_382;
        (*(void (**)(uint64_t *, _QWORD *))(*v327 + 48))(v327, v350);
      }
    }
    else
    {
      v323 = 0;
    }
    v150 = v327;
    if (v327 == &v324)
    {
      v150 = &v324;
      v151 = 4;
LABEL_242:
      (*(void (**)(void))(*v150 + 8 * v151))();
    }
    else if (v327)
    {
      v151 = 5;
      goto LABEL_242;
    }
    if (!a3)
    {
      LOBYTE(v6) = 0;
      LOBYTE(a2) = 0;
      goto LABEL_314;
    }
    if (++v135 != v114)
      continue;
    break;
  }
  v152 = *(uint64_t **)(v6 + 2544);
  if ((unint64_t)v152 >= *(_QWORD *)(v6 + 2552))
  {
    v154 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v209, &v320);
  }
  else
  {
    v153 = v320;
    v320 = 0;
    *v152 = v153;
    if (v322)
    {
      if (v322 == v321)
      {
        v152[4] = (uint64_t)(v152 + 1);
        (*(void (**)(_BYTE *))(*(_QWORD *)v322 + 24))(v322);
      }
      else
      {
        v152[4] = (uint64_t)v322;
        v322 = 0;
      }
    }
    else
    {
      v152[4] = 0;
    }
    v154 = (char *)(v152 + 5);
  }
  *(_QWORD *)(v6 + 2544) = v154;
  if ((unint64_t)v154 >= *(_QWORD *)(v6 + 2552))
  {
    v176 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>(v209, &v313);
  }
  else
  {
    v175 = v313;
    v313 = 0;
    *(_QWORD *)v154 = v175;
    if (v315)
    {
      if (v315 == v314)
      {
        *((_QWORD *)v154 + 4) = v154 + 8;
        (*(void (**)(_BYTE *))(*(_QWORD *)v315 + 24))(v315);
      }
      else
      {
        *((_QWORD *)v154 + 4) = v315;
        v315 = 0;
      }
    }
    else
    {
      *((_QWORD *)v154 + 4) = 0;
    }
    v176 = v154 + 40;
  }
  *(_QWORD *)(v6 + 2544) = v176;
  LODWORD(a3) = a2 >> 8;
  LOBYTE(v6) = 1;
LABEL_314:
  if (__dst != v282)
    free(__dst);
LABEL_316:
  v179 = v313;
  v313 = 0;
  if (v179)
  {
    v323 = v179;
    if (v315)
    {
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v315 + 48))(v315, &v323);
      goto LABEL_319;
    }
LABEL_382:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_383:
    abort();
  }
LABEL_319:
  v180 = v315;
  if (v315 == v314)
  {
    v181 = 4;
    v180 = v314;
LABEL_323:
    (*(void (**)(void))(*v180 + 8 * v181))();
  }
  else if (v315)
  {
    v181 = 5;
    goto LABEL_323;
  }
  v182 = v317;
  v317 = 0;
  if (v182)
  {
    v323 = v182;
    if (!v319)
      goto LABEL_382;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v319 + 48))(v319, &v323);
  }
LABEL_327:
  v183 = v319;
  if (v319 == v318)
  {
    v184 = 4;
    v183 = v318;
LABEL_331:
    (*(void (**)(void))(*v183 + 8 * v184))();
  }
  else if (v319)
  {
    v184 = 5;
    goto LABEL_331;
  }
LABEL_332:
  v185 = v320;
  v320 = 0;
  if (v185)
  {
    v323 = v185;
    if (!v322)
      goto LABEL_382;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v322 + 48))(v322, &v323);
  }
LABEL_335:
  v186 = v322;
  if (v322 == v321)
  {
    v187 = 4;
    v186 = v321;
LABEL_339:
    (*(void (**)(void))(*v186 + 8 * v187))();
  }
  else if (v322)
  {
    v187 = 5;
    goto LABEL_339;
  }
  v61 = 0;
  v3 = 0;
  v60 = __src;
  if (__src != v225)
    goto LABEL_372;
LABEL_373:
  v197 = (uint64_t)v226;
  v226 = 0;
  if (v197)
  {
    v323 = v197;
    if (!v228)
      goto LABEL_382;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v228 + 48))(v228, &v323);
  }
LABEL_376:
  v198 = v228;
  if (v228 == v227)
  {
    v199 = 4;
    v198 = v227;
LABEL_380:
    (*(void (**)(void))(*v198 + 8 * v199))();
  }
  else if (v228)
  {
    v199 = 5;
    goto LABEL_380;
  }
  return ((unint64_t)v6 << 32) | (v3 << 40) | ((a3 & 0xFFFFFF) << 8) | a2;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELF(uint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _OWORD *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  size_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  size_t v166;
  _BYTE *v167;
  size_t v168;
  _BYTE *v169;
  size_t v170;
  _BYTE *v171;
  size_t v172;
  _BYTE *v173;
  size_t v174;
  _BYTE *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  _BOOL4 v214;
  _BOOL4 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 v242;
  unsigned __int8 v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  _BYTE v248[16];
  _OWORD v249[2];
  void *__src;
  uint64_t v251;
  _BYTE v252[16];
  _OWORD v253[2];
  uint64_t v254;
  _BYTE v255[24];
  _BYTE *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  _BYTE v284[16];
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *__dst;
  uint64_t v310;
  _BYTE v311[16];
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  void **v337;
  uint64_t *v338;
  uint64_t *v339;
  unint64_t *v340;
  _OWORD *v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  void *v345;
  uint64_t *v346;
  uint64_t *v347;
  _OWORD *v348;
  uint64_t v349;
  unint64_t *v350;
  void **p_p;
  void *__p;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  _BYTE v382[24];

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v254);
  v8 = v254;
  if (!v254)
  {
    v9 = 0;
    v10 = 0;
    v254 = 0;
    goto LABEL_117;
  }
  if (*(_DWORD *)v254 != 1179403647)
  {
    v9 = 0;
    v10 = 0;
    v254 = 0;
    goto LABEL_115;
  }
  v11 = *(unsigned __int8 *)(v254 + 4);
  if (v11 == 1)
  {
    v17 = a3[1];
    v249[0] = *a3;
    v249[1] = v17;
    v246 = v248;
    v247 = 0x100000000;
    if (&v246 == (void **)a4 || (v18 = *(_DWORD *)(a4 + 8)) == 0)
    {
LABEL_69:
      v355 = a2;
      v353 = 0;
      __p = 0;
      v354 = 0;
      v348 = v249;
      v349 = a1;
      v350 = &v355;
      p_p = &__p;
      if (!v62
        || (v63 = *(unsigned __int16 *)(v62 + 46), v63 < 0x28)
        || (v64 = *(unsigned __int16 *)(v62 + 48), !*(_WORD *)(v62 + 48)))
      {
        v9 = 0;
        v88 = 0;
        v89 = 0;
        goto LABEL_98;
      }
      v245 = a1;
      v65 = 0;
      v241 = v62;
      v66 = *(unsigned int *)(v62 + 32);
      v346 = 0;
      v345 = 0;
      v347 = 0;
      do
      {
        if (!v68)
          goto LABEL_221;
        v69 = v68;
        v70 = v346;
        if (v346 < v347)
        {
          *v346 = v68;
          v67 = (uint64_t *)(v70 + 8);
        }
        else
        {
          v71 = v345;
          v72 = (char *)v346 - (_BYTE *)v345;
          v73 = ((char *)v346 - (_BYTE *)v345) >> 3;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61)
            goto LABEL_246;
          v75 = (char *)v347 - (_BYTE *)v345;
          if (((char *)v347 - (_BYTE *)v345) >> 2 > v74)
            v74 = v75 >> 2;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          if (v76)
          {
            if (v76 >> 61)
LABEL_247:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v77 = operator new(8 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = (uint64_t *)&v77[8 * v73];
          *v78 = v69;
          v67 = v78 + 1;
          if (v70 != v71)
          {
            v79 = v70 - v71 - 8;
            if (v79 < 0x58)
              goto LABEL_250;
            if ((unint64_t)(v70 - &v77[v72]) < 0x20)
              goto LABEL_250;
            v80 = (v79 >> 3) + 1;
            v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            v82 = &v70[-v81];
            v78 = (uint64_t *)((char *)v78 - v81);
            v83 = &v77[v72 - 16];
            v84 = (__int128 *)(v70 - 16);
            v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v86 = *v84;
              *(v83 - 1) = *(v84 - 1);
              *v83 = v86;
              v83 -= 2;
              v84 -= 2;
              v85 -= 4;
            }
            while (v85);
            v70 = v82;
            if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_250:
              do
              {
                v87 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *--v78 = v87;
              }
              while (v70 != v71);
            }
            v70 = v345;
          }
          v345 = v78;
          v346 = v67;
          v347 = (uint64_t *)&v77[8 * v76];
          if (v70)
            operator delete(v70);
        }
        v346 = v67;
        ++v65;
      }
      while (v65 != v64);
      v107 = *(unsigned __int16 *)(v241 + 50);
      if (v107 == 0xFFFF)
        v107 = *(_DWORD *)(*(_QWORD *)v345 + 24);
      v108 = *((_QWORD *)v345 + v107);
      v109 = *(unsigned int *)(v108 + 16);
      LODWORD(v257) = *(_DWORD *)(v108 + 20);
      if (!v110)
        goto LABEL_133;
      v344 = v110;
      v343 = 0;
      v336 = &v343;
      v337 = &v345;
      v338 = &v344;
      v339 = &v257;
      v340 = &v355;
      v341 = v249;
      v342 = v245;
      if (v343)
      {
LABEL_133:
        v9 = 0;
        v88 = 0;
        v89 = 0;
        v111 = (uint64_t *)v345;
        if (!v345)
          goto LABEL_98;
        goto LABEL_222;
      }
      v140 = v334;
      v141 = v331;
      v142 = v328;
      v143 = v325;
      v144 = v322;
      v145 = v319;
      v146 = v316;
      v147 = v313;
      v148 = v334 | v331 | v328 | v325 | v322 | v319 | v316 | v313;
      v215 = v148 != 0;
      if (!v148)
      {
        v213 = 0;
        v239 = v334;
        v243 = 0;
LABEL_220:
        v235 = v356;
        v237 = v357;
        v333 = v356;
        v334 = v357;
        v233 = v358;
        v335 = v358;
        v229 = v356;
        v231 = v357;
        v330 = v356;
        v331 = v357;
        v227 = v358;
        v332 = v358;
        v223 = v356;
        v225 = v357;
        v327 = v356;
        v328 = v357;
        v221 = v358;
        v329 = v358;
        v217 = v356;
        v219 = v357;
        v324 = v356;
        v325 = v357;
        v195 = v358;
        v326 = v358;
        v196 = v356;
        v197 = v357;
        v321 = v356;
        v322 = v357;
        v198 = v358;
        v323 = v358;
        v199 = v356;
        v200 = v357;
        v318 = v356;
        v319 = v357;
        v201 = v358;
        v320 = v358;
        v202 = v356;
        v203 = v357;
        v315 = v356;
        v316 = v357;
        v204 = v358;
        v317 = v358;
        v205 = v356;
        v206 = v357;
        v312 = v356;
        v313 = v357;
        v207 = v358;
        v314 = v358;
        if (!v343)
        {
          if (v237 || v231 || v225 || v219 || v197 || v200 || v203 || v357)
          {
            v356 = v235;
            v357 = v237;
            v358 = v233;
            v359 = v229;
            v360 = v231;
            v361 = v227;
            v362 = v223;
            v363 = v225;
            v364 = v221;
            v365 = v217;
            v366 = v219;
            v367 = v195;
            v368 = v196;
            v369 = v197;
            v370 = v198;
            v371 = v199;
            v372 = v200;
            v373 = v201;
            v374 = v202;
            v375 = v203;
            v376 = v204;
            v377 = v205;
            v378 = v206;
            v379 = v207;
            llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v380, (uint64_t)&v246);
            swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v285, (uint64_t)&v356);
            v211 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v245, (uint64_t)&v285);
            if (__dst != v311)
              free(__dst);
            if (v215)
              v208 = v243;
            else
              v208 = v211;
            if (v215)
              v209 = v239;
            else
              v209 = v211 >> 8;
            if (v380 != v382)
              free(v380);
            v210 = 0x100000000;
          }
          else
          {
            v208 = v243;
            v209 = v239;
            v210 = v213;
          }
          v88 = v210 & 0x100000000;
          v9 = v208;
          v89 = v210 & 0x100000000 | ((*(_QWORD *)&v209 & 0xFFFFFFLL) << 8);
          v111 = (uint64_t *)v345;
          if (!v345)
            goto LABEL_98;
          goto LABEL_222;
        }
LABEL_221:
        v9 = 0;
        v88 = 0;
        v89 = 0;
        v111 = (uint64_t *)v345;
        if (v345)
        {
LABEL_222:
          v346 = v111;
          operator delete(v111);
        }
LABEL_98:
        v90 = __p;
        if (!__p)
          goto LABEL_112;
        v91 = v353;
        v92 = __p;
        if (v353 == __p)
          goto LABEL_111;
        v93 = v353;
        while (1)
        {
          v97 = *(v93 - 5);
          v93 -= 5;
          v96 = v97;
          *v93 = 0;
          if (v97)
          {
            v356 = v96;
            v98 = *(v91 - 1);
            if (!v98)
              goto LABEL_245;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v98 + 48))(v98, &v356);
          }
          v94 = (_QWORD *)*(v91 - 1);
          if (v91 - 4 == v94)
          {
            v94 = v91 - 4;
            v95 = 4;
          }
          else
          {
            if (!v94)
              goto LABEL_103;
            v95 = 5;
          }
          (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_103:
          v91 = v93;
          if (v93 == v90)
          {
            v92 = __p;
LABEL_111:
            v353 = v90;
            operator delete(v92);
LABEL_112:
            a2 = v89 >> 8;
            v10 = HIDWORD(v88);
            v61 = v246;
            LODWORD(v59) = a2;
            v60 = v10;
            if (v246 == v248)
              goto LABEL_114;
LABEL_113:
            free(v61);
            LODWORD(a2) = v59;
            v10 = v60;
            goto LABEL_114;
          }
        }
      }
      v149 = v333;
      v150 = v335;
      v285 = v333;
      v286 = v334;
      v151 = v330;
      v152 = v332;
      v287 = v335;
      v288 = v330;
      v289 = v331;
      v290 = v332;
      v153 = v327;
      v154 = v329;
      v291 = v327;
      v292 = v328;
      v155 = v324;
      v156 = v326;
      v293 = v329;
      v294 = v324;
      v295 = v325;
      v296 = v326;
      v157 = v321;
      v158 = v323;
      v297 = v321;
      v298 = v322;
      v159 = v318;
      v160 = v320;
      v299 = v323;
      v300 = v318;
      v301 = v319;
      v302 = v320;
      v161 = v315;
      v162 = v317;
      v303 = v315;
      v304 = v316;
      v163 = v312;
      v164 = v314;
      v305 = v317;
      v306 = v312;
      v307 = v313;
      v308 = v314;
      __dst = v311;
      v310 = 0x100000000;
      v165 = v247;
      if (!(_DWORD)v247)
      {
LABEL_156:
        v258 = v149;
        v259 = v140;
        v260 = v150;
        v261 = v151;
        v262 = v141;
        v263 = v152;
        v264 = v153;
        v265 = v142;
        v266 = v154;
        v267 = v155;
        v268 = v143;
        v269 = v156;
        v270 = v157;
        v271 = v144;
        v272 = v158;
        v273 = v159;
        v274 = v145;
        v275 = v160;
        v276 = v161;
        v277 = v146;
        v278 = v162;
        v279 = v163;
        v280 = v147;
        v281 = v164;
        v282 = v284;
        v283 = 0x100000000;
        if (!(_DWORD)v165)
          goto LABEL_170;
        if ((_DWORD)v165 == 1)
        {
          v170 = 16;
          v171 = v284;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)v284, v165, 16);
          if (!(_DWORD)v310)
          {
LABEL_169:
            LODWORD(v283) = v165;
            v149 = v258;
            v140 = v259;
            v150 = v260;
            v151 = v261;
            v141 = v262;
            v152 = v263;
            v153 = v264;
            v142 = v265;
            v154 = v266;
            v155 = v267;
            v143 = v268;
            v156 = v269;
            v157 = v270;
            v144 = v271;
            v158 = v272;
            v159 = v273;
            v145 = v274;
            v160 = v275;
            v161 = v276;
            v146 = v277;
            v162 = v278;
            v163 = v279;
            v147 = v280;
            v164 = v281;
LABEL_170:
            v356 = v149;
            v357 = v140;
            v358 = v150;
            v359 = v151;
            v360 = v141;
            v361 = v152;
            v362 = v153;
            v363 = v142;
            v364 = v154;
            v365 = v155;
            v366 = v143;
            v367 = v156;
            v368 = v157;
            v369 = v144;
            v370 = v158;
            v371 = v159;
            v372 = v145;
            v373 = v160;
            v374 = v161;
            v375 = v146;
            v376 = v162;
            v377 = v163;
            v378 = v147;
            v379 = v164;
            v380 = v382;
            v381 = 0x100000000;
            if (!(_DWORD)v165)
            {
LABEL_213:
              v194 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v245 + 296), (uint64_t)&v356);
              if (v380 != v382)
                free(v380);
              if (v282 != v284)
                free(v282);
              if (__dst != v311)
                free(__dst);
              v239 = v194 >> 8;
              v243 = v194;
              v213 = 0x100000000;
              goto LABEL_220;
            }
            if ((_DWORD)v165 == 1)
            {
              v174 = 16;
              v175 = v382;
            }
            else
            {
              __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)v382, v165, 16);
              if (!(_DWORD)v283)
              {
LABEL_212:
                LODWORD(v381) = v165;
                goto LABEL_213;
              }
              v175 = v380;
              v174 = 16 * v283;
            }
            memcpy(v175, v282, v174);
            goto LABEL_212;
          }
          v171 = v282;
          v170 = 16 * v310;
        }
        memcpy(v171, __dst, v170);
        goto LABEL_169;
      }
      if ((_DWORD)v247 == 1)
      {
        v166 = 16;
        v167 = v311;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v311, v247, 16);
        if (!(_DWORD)v247)
        {
LABEL_155:
          LODWORD(v310) = v165;
          v149 = v285;
          v140 = v286;
          v150 = v287;
          v151 = v288;
          v141 = v289;
          v152 = v290;
          v153 = v291;
          v142 = v292;
          v154 = v293;
          v155 = v294;
          v143 = v295;
          v156 = v296;
          v157 = v297;
          v144 = v298;
          v158 = v299;
          v159 = v300;
          v145 = v301;
          v160 = v302;
          v161 = v303;
          v146 = v304;
          v162 = v305;
          v163 = v306;
          v147 = v307;
          v164 = v308;
          goto LABEL_156;
        }
        v167 = __dst;
        v166 = 16 * v247;
      }
      memcpy(v167, v246, v166);
      goto LABEL_155;
    }
    if (v18 < 2)
    {
      v21 = 16;
      v20 = v248;
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, (uint64_t)v248, *(unsigned int *)(a4 + 8), 16);
      v19 = *(unsigned int *)(a4 + 8);
      if (!(_DWORD)v19)
      {
LABEL_68:
        LODWORD(v247) = v18;
        goto LABEL_69;
      }
      v20 = v246;
      v21 = 16 * v19;
    }
    memcpy(v20, *(const void **)a4, v21);
    goto LABEL_68;
  }
  if (v11 != 2)
  {
    v10 = 0;
    v9 = 0;
    goto LABEL_114;
  }
  v12 = a3[1];
  v253[0] = *a3;
  v253[1] = v12;
  __src = v252;
  v251 = 0x100000000;
  if (&__src != (void **)a4)
  {
    v13 = *(_DWORD *)(a4 + 8);
    if (v13)
    {
      if (v13 < 2)
      {
        v16 = 16;
        v15 = v252;
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v252, *(unsigned int *)(a4 + 8), 16);
        v14 = *(unsigned int *)(a4 + 8);
        if (!(_DWORD)v14)
        {
LABEL_20:
          LODWORD(v251) = v13;
          goto LABEL_21;
        }
        v15 = __src;
        v16 = 16 * v14;
      }
      memcpy(v15, *(const void **)a4, v16);
      goto LABEL_20;
    }
  }
LABEL_21:
  v355 = a2;
  v353 = 0;
  __p = 0;
  v354 = 0;
  v348 = v253;
  v349 = a1;
  v350 = &v355;
  p_p = &__p;
  if (v22)
  {
    v23 = *(unsigned __int16 *)(v22 + 58);
    if (v23 >= 0x40)
    {
      v24 = *(unsigned __int16 *)(v22 + 60);
      if (*(_WORD *)(v22 + 60))
      {
        v244 = a1;
        v25 = 0;
        v240 = v22;
        v26 = *(_QWORD *)(v22 + 40);
        v346 = 0;
        v345 = 0;
        v347 = 0;
        do
        {
          if (!v28)
            goto LABEL_185;
          v29 = v28;
          v30 = v346;
          if (v346 < v347)
          {
            *v346 = v28;
            v27 = (uint64_t *)(v30 + 8);
          }
          else
          {
            v31 = v345;
            v32 = (char *)v346 - (_BYTE *)v345;
            v33 = ((char *)v346 - (_BYTE *)v345) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_246;
            v35 = (char *)v347 - (_BYTE *)v345;
            if (((char *)v347 - (_BYTE *)v345) >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              if (v36 >> 61)
                goto LABEL_247;
              v37 = operator new(8 * v36);
            }
            else
            {
              v37 = 0;
            }
            v38 = (uint64_t *)&v37[8 * v33];
            *v38 = v29;
            v27 = v38 + 1;
            if (v30 != v31)
            {
              v39 = v30 - v31 - 8;
              if (v39 < 0x58)
                goto LABEL_251;
              if ((unint64_t)(v30 - &v37[v32]) < 0x20)
                goto LABEL_251;
              v40 = (v39 >> 3) + 1;
              v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v30[-v41];
              v38 = (uint64_t *)((char *)v38 - v41);
              v43 = &v37[v32 - 16];
              v44 = (__int128 *)(v30 - 16);
              v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v46 = *v44;
                *(v43 - 1) = *(v44 - 1);
                *v43 = v46;
                v43 -= 2;
                v44 -= 2;
                v45 -= 4;
              }
              while (v45);
              v30 = v42;
              if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_251:
                do
                {
                  v47 = *((_QWORD *)v30 - 1);
                  v30 -= 8;
                  *--v38 = v47;
                }
                while (v30 != v31);
              }
              v30 = v345;
            }
            v345 = v38;
            v346 = v27;
            v347 = (uint64_t *)&v37[8 * v36];
            if (v30)
              operator delete(v30);
          }
          v346 = v27;
          ++v25;
        }
        while (v25 != v24);
        v102 = *(unsigned __int16 *)(v240 + 62);
        if (v102 == 0xFFFF)
          v102 = *(_DWORD *)(*(_QWORD *)v345 + 40);
        v103 = *((_QWORD *)v345 + v102);
        v104 = *(_QWORD *)(v103 + 24);
        v344 = *(_QWORD *)(v103 + 32);
        if (!v105)
          goto LABEL_127;
        v257 = v105;
        v343 = 0;
        v336 = &v343;
        v337 = &v345;
        v338 = &v257;
        v339 = &v344;
        v340 = &v355;
        v341 = v253;
        v342 = v244;
        if (v343)
        {
LABEL_127:
          v9 = 0;
          v48 = 0;
          v49 = 0;
          v106 = (uint64_t *)v345;
          if (!v345)
            goto LABEL_50;
          goto LABEL_186;
        }
        v112 = v334;
        v113 = v331;
        v114 = v328;
        v115 = v325;
        v116 = v322;
        v117 = v319;
        v118 = v316;
        v119 = v313;
        v120 = v334 | v331 | v328 | v325 | v322 | v319 | v316 | v313;
        v214 = v120 != 0;
        if (!v120)
        {
          v212 = 0;
          v238 = v334;
          v242 = 0;
          goto LABEL_184;
        }
        v121 = v333;
        v122 = v335;
        v285 = v333;
        v286 = v334;
        v123 = v330;
        v124 = v332;
        v287 = v335;
        v288 = v330;
        v289 = v331;
        v290 = v332;
        v125 = v327;
        v126 = v329;
        v291 = v327;
        v292 = v328;
        v127 = v324;
        v128 = v326;
        v293 = v329;
        v294 = v324;
        v295 = v325;
        v296 = v326;
        v129 = v321;
        v130 = v323;
        v297 = v321;
        v298 = v322;
        v131 = v318;
        v132 = v320;
        v299 = v323;
        v300 = v318;
        v301 = v319;
        v302 = v320;
        v133 = v315;
        v134 = v317;
        v303 = v315;
        v304 = v316;
        v135 = v312;
        v136 = v314;
        v305 = v317;
        v306 = v312;
        v307 = v313;
        v308 = v314;
        __dst = v311;
        v310 = 0x100000000;
        v137 = v251;
        if (!(_DWORD)v251)
        {
LABEL_149:
          v258 = v121;
          v259 = v112;
          v260 = v122;
          v261 = v123;
          v262 = v113;
          v263 = v124;
          v264 = v125;
          v265 = v114;
          v266 = v126;
          v267 = v127;
          v268 = v115;
          v269 = v128;
          v270 = v129;
          v271 = v116;
          v272 = v130;
          v273 = v131;
          v274 = v117;
          v275 = v132;
          v276 = v133;
          v277 = v118;
          v278 = v134;
          v279 = v135;
          v280 = v119;
          v281 = v136;
          v282 = v284;
          v283 = 0x100000000;
          if (!(_DWORD)v137)
            goto LABEL_163;
          if ((_DWORD)v137 == 1)
          {
            v168 = 16;
            v169 = v284;
          }
          else
          {
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)v284, v137, 16);
            if (!(_DWORD)v310)
            {
LABEL_162:
              LODWORD(v283) = v137;
              v121 = v258;
              v112 = v259;
              v122 = v260;
              v123 = v261;
              v113 = v262;
              v124 = v263;
              v125 = v264;
              v114 = v265;
              v126 = v266;
              v127 = v267;
              v115 = v268;
              v128 = v269;
              v129 = v270;
              v116 = v271;
              v130 = v272;
              v131 = v273;
              v117 = v274;
              v132 = v275;
              v133 = v276;
              v118 = v277;
              v134 = v278;
              v135 = v279;
              v119 = v280;
              v136 = v281;
LABEL_163:
              v356 = v121;
              v357 = v112;
              v358 = v122;
              v359 = v123;
              v360 = v113;
              v361 = v124;
              v362 = v125;
              v363 = v114;
              v364 = v126;
              v365 = v127;
              v366 = v115;
              v367 = v128;
              v368 = v129;
              v369 = v116;
              v370 = v130;
              v371 = v131;
              v372 = v117;
              v373 = v132;
              v374 = v133;
              v375 = v118;
              v376 = v134;
              v377 = v135;
              v378 = v119;
              v379 = v136;
              v380 = v382;
              v381 = 0x100000000;
              if (!(_DWORD)v137)
              {
LABEL_177:
                v176 = swift::reflection::TypeRefBuilder::addReflectionInfo((uint64_t *)(v244 + 296), (uint64_t)&v356);
                if (v380 != v382)
                  free(v380);
                if (v282 != v284)
                  free(v282);
                if (__dst != v311)
                  free(__dst);
                v238 = v176 >> 8;
                v242 = v176;
                v212 = 0x100000000;
LABEL_184:
                v234 = v356;
                v236 = v357;
                v333 = v356;
                v334 = v357;
                v232 = v358;
                v335 = v358;
                v228 = v356;
                v230 = v357;
                v330 = v356;
                v331 = v357;
                v226 = v358;
                v332 = v358;
                v222 = v356;
                v224 = v357;
                v327 = v356;
                v328 = v357;
                v220 = v358;
                v329 = v358;
                v216 = v356;
                v218 = v357;
                v324 = v356;
                v325 = v357;
                v177 = v358;
                v326 = v358;
                v178 = v356;
                v179 = v357;
                v321 = v356;
                v322 = v357;
                v180 = v358;
                v323 = v358;
                v181 = v356;
                v182 = v357;
                v318 = v356;
                v319 = v357;
                v183 = v358;
                v320 = v358;
                v184 = v356;
                v185 = v357;
                v315 = v356;
                v316 = v357;
                v186 = v358;
                v317 = v358;
                v187 = v356;
                v188 = v357;
                v312 = v356;
                v313 = v357;
                v189 = v358;
                v314 = v358;
                if (v343)
                {
LABEL_185:
                  v9 = 0;
                  v48 = 0;
                  v49 = 0;
                  v106 = (uint64_t *)v345;
                  if (!v345)
                    goto LABEL_50;
                  goto LABEL_186;
                }
                if (v236 || v230 || v224 || v218 || v179 || v182 || v185 || v357)
                {
                  v356 = v234;
                  v357 = v236;
                  v358 = v232;
                  v359 = v228;
                  v360 = v230;
                  v361 = v226;
                  v362 = v222;
                  v363 = v224;
                  v364 = v220;
                  v365 = v216;
                  v366 = v218;
                  v367 = v177;
                  v368 = v178;
                  v369 = v179;
                  v370 = v180;
                  v371 = v181;
                  v372 = v182;
                  v373 = v183;
                  v374 = v184;
                  v375 = v185;
                  v376 = v186;
                  v377 = v187;
                  v378 = v188;
                  v379 = v189;
                  llvm::SmallVector<llvm::StringRef,1u>::SmallVector(&v380, (uint64_t)&__src);
                  swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)&v285, (uint64_t)&v356);
                  v193 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::addReflectionInfo(v244, (uint64_t)&v285);
                  if (__dst != v311)
                    free(__dst);
                  if (v214)
                    v190 = v242;
                  else
                    v190 = v193;
                  if (v214)
                    v191 = v238;
                  else
                    v191 = v193 >> 8;
                  if (v380 != v382)
                    free(v380);
                  v192 = 0x100000000;
                }
                else
                {
                  v190 = v242;
                  v191 = v238;
                  v192 = v212;
                }
                v48 = v192 & 0x100000000;
                v9 = v190;
                v49 = v192 & 0x100000000 | ((*(_QWORD *)&v191 & 0xFFFFFFLL) << 8);
                v106 = (uint64_t *)v345;
                if (v345)
                {
LABEL_186:
                  v346 = v106;
                  operator delete(v106);
                  goto LABEL_50;
                }
                goto LABEL_50;
              }
              if ((_DWORD)v137 == 1)
              {
                v172 = 16;
                v173 = v382;
              }
              else
              {
                __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v380, (uint64_t)v382, v137, 16);
                if (!(_DWORD)v283)
                {
LABEL_176:
                  LODWORD(v381) = v137;
                  goto LABEL_177;
                }
                v173 = v380;
                v172 = 16 * v283;
              }
              memcpy(v173, v282, v172);
              goto LABEL_176;
            }
            v169 = v282;
            v168 = 16 * v310;
          }
          memcpy(v169, __dst, v168);
          goto LABEL_162;
        }
        if ((_DWORD)v251 == 1)
        {
          v138 = 16;
          v139 = v311;
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v311, v251, 16);
          if (!(_DWORD)v251)
          {
LABEL_148:
            LODWORD(v310) = v137;
            v121 = v285;
            v112 = v286;
            v122 = v287;
            v123 = v288;
            v113 = v289;
            v124 = v290;
            v125 = v291;
            v114 = v292;
            v126 = v293;
            v127 = v294;
            v115 = v295;
            v128 = v296;
            v129 = v297;
            v116 = v298;
            v130 = v299;
            v131 = v300;
            v117 = v301;
            v132 = v302;
            v133 = v303;
            v118 = v304;
            v134 = v305;
            v135 = v306;
            v119 = v307;
            v136 = v308;
            goto LABEL_149;
          }
          v139 = __dst;
          v138 = 16 * v251;
        }
        memcpy(v139, __src, v138);
        goto LABEL_148;
      }
    }
  }
  v9 = 0;
  v48 = 0;
  v49 = 0;
LABEL_50:
  v50 = __p;
  if (!__p)
    goto LABEL_64;
  v51 = v353;
  v52 = __p;
  if (v353 == __p)
    goto LABEL_63;
  v53 = v353;
  do
  {
    v57 = *(v53 - 5);
    v53 -= 5;
    v56 = v57;
    *v53 = 0;
    if (v57)
    {
      v356 = v56;
      v58 = *(v51 - 1);
      if (!v58)
        goto LABEL_245;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v58 + 48))(v58, &v356);
    }
    v54 = (_QWORD *)*(v51 - 1);
    if (v51 - 4 == v54)
    {
      v54 = v51 - 4;
      v55 = 4;
LABEL_54:
      (*(void (**)(void))(*v54 + 8 * v55))();
      goto LABEL_55;
    }
    if (v54)
    {
      v55 = 5;
      goto LABEL_54;
    }
LABEL_55:
    v51 = v53;
  }
  while (v53 != v50);
  v52 = __p;
LABEL_63:
  v353 = v50;
  operator delete(v52);
LABEL_64:
  v59 = v49 >> 8;
  v60 = HIDWORD(v48);
  v61 = __src;
  a2 = v49 >> 8;
  v10 = HIDWORD(v48);
  if (__src != v252)
    goto LABEL_113;
LABEL_114:
  v8 = v254;
  v254 = 0;
  if (!v8)
    goto LABEL_117;
LABEL_115:
  v356 = v8;
  if (!v256)
  {
LABEL_245:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_246:
    abort();
  }
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v256 + 48))(v256, &v356);
LABEL_117:
  v99 = v256;
  if (v256 == v255)
  {
    v100 = 4;
    v99 = v255;
LABEL_121:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  else if (v256)
  {
    v100 = 5;
    goto LABEL_121;
  }
  return (v10 << 32) | ((a2 & 0xFFFFFF) << 8) | v9;
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned int ***v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[3];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  void **__dst;
  size_t v63;
  int64_t v64;
  _QWORD v65[2];

  if (**(_BYTE **)a1 || (v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v51 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v11 = (uint64_t)*v9;
    v12 = **v9;
    v13 = (const char *)(**(_QWORD **)(a1 + 16) + v12);
    v14 = **(_QWORD **)(a1 + 24) - v12;
    v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(_BYTE **)a1 = 1;
      goto LABEL_2;
    }
    v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v18 = v15 | 7;
      v19 = v18 + 1;
      p_dst = (void **)operator new(v18 + 1);
      v63 = v16;
      v64 = v19 | 0x8000000000000000;
      __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v64) = v15;
    p_dst = (void **)&__dst;
    if (v15)
      goto LABEL_13;
LABEL_14:
    *((_BYTE *)p_dst + v16) = 0;
    v20 = HIBYTE(v64);
    if (v64 >= 0)
      v21 = (void **)&__dst;
    else
      v21 = __dst;
    v22 = HIBYTE(v64);
    if (v64 < 0)
      v22 = v63;
    if (v22 != a3 || a3 && memcmp(v21, a2, a3) || ((*(_BYTE *)(v11 + 10) & 0x20) == 0) == a4)
    {
      v28 = 3;
      if ((v20 & 0x80) == 0)
        goto LABEL_28;
LABEL_27:
      operator delete(__dst);
      goto LABEL_28;
    }
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(v11 + 16) + **(_QWORD **)(a1 + 32);
    v25 = *(_QWORD *)(v11 + 32);
    v59 = 0;
    v61 = 0;
    if (*(_BYTE *)(v23 + 24))
    {
      v26 = *(_QWORD *)(v11 + 24);
      if (*(_QWORD *)(v23 + 8) < v26 + v25)
      {
        v27 = 0;
        **(_BYTE **)a1 = 1;
        v28 = 2;
        goto LABEL_85;
      }
      v33 = malloc_type_malloc(v25, 0x4156ED03uLL);
      v54[0] = off_B4C30;
      v55 = v54;
      v56 = 0;
      v57[0] = off_B4C30;
      v34 = v59;
      v58 = v57;
      v59 = (uint64_t)v33;
      if (v34)
      {
        v65[0] = v34;
        if (!v61)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v65);
      }
      v35 = v61;
      v61 = 0;
      if (v35 == v60)
      {
        v35 = v60;
        v36 = 4;
      }
      else
      {
        if (!v35)
          goto LABEL_51;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_51:
      if (v58)
      {
        if (v58 == v57)
        {
          v61 = v60;
          (*(void (**)(uint64_t, _QWORD *))(v57[0] + 24))((uint64_t)v57, v60);
          v38 = v58;
        }
        else
        {
          v38 = 0;
          v61 = v58;
          v58 = 0;
        }
      }
      else
      {
        v38 = 0;
        v61 = 0;
      }
      v41 = v56;
      v56 = 0;
      if (v41)
      {
        v65[0] = v41;
        if (!v38)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v38 + 48))(v38, v65);
        v38 = v58;
      }
      if (v38 == v57)
      {
        v38 = v57;
        v42 = 4;
      }
      else
      {
        if (!v38)
          goto LABEL_73;
        v42 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v42))();
LABEL_73:
      v43 = v55;
      if (v55 == v54)
      {
        v43 = v54;
        v44 = 4;
      }
      else
      {
        if (!v55)
        {
LABEL_78:
          memcpy(v33, (const void *)(v26 + **(_QWORD **)(a1 + 40)), v25);
          goto LABEL_79;
        }
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
      goto LABEL_78;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, size_t))(**(_QWORD **)(v51 + 2488) + 24))(&v56, *(_QWORD *)(v51 + 2488), v24, v25);
    v29 = v56;
    v56 = 0;
    v30 = v59;
    v59 = v29;
    if (v30)
    {
      v54[0] = v30;
      if (!v61)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v54);
    }
    v31 = v61;
    v61 = 0;
    if (v31 == v60)
    {
      v31 = v60;
      v32 = 4;
      goto LABEL_44;
    }
    if (v31)
    {
      v32 = 5;
LABEL_44:
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
    if (v58)
    {
      if (v58 == v57)
      {
        v61 = v60;
        (*(void (**)(_QWORD *, _QWORD *))(v57[0] + 24))(v57, v60);
        v37 = v58;
      }
      else
      {
        v37 = 0;
        v61 = v58;
        v58 = 0;
      }
    }
    else
    {
      v37 = 0;
      v61 = 0;
    }
    v39 = v56;
    v56 = 0;
    if (v39)
    {
      v54[0] = v39;
      if (!v37)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v37 + 48))(v37, v54);
      v37 = v58;
    }
    if (v37 == v57)
    {
      v37 = v57;
      v40 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_79;
      v40 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v40))();
LABEL_79:
    v45 = v59;
    if (!v59)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      v28 = 1;
      v27 = v61;
LABEL_85:
      v59 = 0;
      if (v27 == v60)
        goto LABEL_95;
      goto LABEL_86;
    }
    v46 = *(uint64_t **)(v51 + 2544);
    if ((unint64_t)v46 >= *(_QWORD *)(v51 + 2552))
    {
      v48 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((void **)(v51 + 2536), &v59);
    }
    else
    {
      v59 = 0;
      *v46 = v45;
      if (v61)
      {
        if (v61 == v60)
        {
          v46[4] = (uint64_t)(v46 + 1);
          (*(void (**)(_QWORD *))(*v61 + 24))(v61);
        }
        else
        {
          v46[4] = (uint64_t)v61;
          v61 = 0;
        }
      }
      else
      {
        v46[4] = 0;
      }
      v48 = (char *)(v46 + 5);
    }
    *(_QWORD *)(v51 + 2544) = v48;
    *a5 = v24;
    a5[1] = v45;
    a5[2] = v25;
    v49 = v59;
    v27 = v61;
    v59 = 0;
    if (v49)
    {
      v56 = v49;
      if (!v61)
      {
LABEL_105:
        v50 = std::__throw_bad_function_call[abi:nn180100]();
        return;
      }
      (*(void (**)(void))(*v61 + 48))();
      v28 = 1;
      v27 = v61;
      if (v61 == v60)
      {
LABEL_95:
        v27 = v60;
        v47 = 4;
        goto LABEL_96;
      }
    }
    else
    {
      v28 = 1;
      if (v61 == v60)
        goto LABEL_95;
    }
LABEL_86:
    if (!v27)
      goto LABEL_97;
    v47 = 5;
LABEL_96:
    (*(void (**)(void))(*v27 + 8 * v47))();
LABEL_97:
    if (v64 < 0)
      goto LABEL_27;
LABEL_28:
    if (v28 != 3)
      break;
    if (++v9 == v8)
      goto LABEL_2;
  }
  if (v28 == 2)
    goto LABEL_2;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_B4C30;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_B4C30;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)2>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator()(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned int ***v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[3];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  void **__dst;
  size_t v63;
  int64_t v64;
  _QWORD v65[2];

  if (**(_BYTE **)a1 || (v7 = *(unsigned int ****)(a1 + 8), v9 = *v7, v8 = v7[1], *v7 == v8))
  {
LABEL_2:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v51 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v11 = (uint64_t)*v9;
    v12 = **v9;
    v13 = (const char *)(**(_QWORD **)(a1 + 16) + v12);
    v14 = (**(_DWORD **)(a1 + 24) - v12);
    v15 = strnlen(v13, v14);
    if (v15 > v14)
    {
      **(_BYTE **)a1 = 1;
      goto LABEL_2;
    }
    v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v18 = v15 | 7;
      v19 = v18 + 1;
      p_dst = (void **)operator new(v18 + 1);
      v63 = v16;
      v64 = v19 | 0x8000000000000000;
      __dst = p_dst;
LABEL_13:
      memmove(p_dst, v13, v16);
      goto LABEL_14;
    }
    HIBYTE(v64) = v15;
    p_dst = (void **)&__dst;
    if (v15)
      goto LABEL_13;
LABEL_14:
    *((_BYTE *)p_dst + v16) = 0;
    v20 = HIBYTE(v64);
    if (v64 >= 0)
      v21 = (void **)&__dst;
    else
      v21 = __dst;
    v22 = HIBYTE(v64);
    if (v64 < 0)
      v22 = v63;
    if (v22 != a3 || a3 && memcmp(v21, a2, a3) || ((*(_BYTE *)(v11 + 10) & 0x20) == 0) == a4)
    {
      v28 = 3;
      if ((v20 & 0x80) == 0)
        goto LABEL_28;
LABEL_27:
      operator delete(__dst);
      goto LABEL_28;
    }
    v23 = *(_QWORD *)(a1 + 40);
    v24 = **(_QWORD **)(a1 + 32) + *(unsigned int *)(v11 + 12);
    v25 = *(unsigned int *)(v11 + 20);
    v59 = 0;
    v61 = 0;
    if (*(_BYTE *)(v23 + 24))
    {
      v26 = *(unsigned int *)(v11 + 16);
      if (*(_QWORD *)(v23 + 8) < (unint64_t)(v26 + v25))
      {
        v27 = 0;
        **(_BYTE **)a1 = 1;
        v28 = 2;
        goto LABEL_85;
      }
      v33 = malloc_type_malloc(v25, 0x4156ED03uLL);
      v54[0] = off_B4C78;
      v55 = v54;
      v56 = 0;
      v57[0] = off_B4C78;
      v34 = v59;
      v58 = v57;
      v59 = (uint64_t)v33;
      if (v34)
      {
        v65[0] = v34;
        if (!v61)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v65);
      }
      v35 = v61;
      v61 = 0;
      if (v35 == v60)
      {
        v35 = v60;
        v36 = 4;
      }
      else
      {
        if (!v35)
          goto LABEL_51;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_51:
      if (v58)
      {
        if (v58 == v57)
        {
          v61 = v60;
          (*(void (**)(uint64_t, _QWORD *))(v57[0] + 24))((uint64_t)v57, v60);
          v38 = v58;
        }
        else
        {
          v38 = 0;
          v61 = v58;
          v58 = 0;
        }
      }
      else
      {
        v38 = 0;
        v61 = 0;
      }
      v41 = v56;
      v56 = 0;
      if (v41)
      {
        v65[0] = v41;
        if (!v38)
          goto LABEL_105;
        (*(void (**)(_QWORD *, _QWORD *))(*v38 + 48))(v38, v65);
        v38 = v58;
      }
      if (v38 == v57)
      {
        v38 = v57;
        v42 = 4;
      }
      else
      {
        if (!v38)
          goto LABEL_73;
        v42 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v42))();
LABEL_73:
      v43 = v55;
      if (v55 == v54)
      {
        v43 = v54;
        v44 = 4;
      }
      else
      {
        if (!v55)
        {
LABEL_78:
          memcpy(v33, (const void *)(**(_QWORD **)(a1 + 40) + v26), v25);
          goto LABEL_79;
        }
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
      goto LABEL_78;
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, size_t))(**(_QWORD **)(v51 + 2488) + 24))(&v56, *(_QWORD *)(v51 + 2488), v24, v25);
    v29 = v56;
    v56 = 0;
    v30 = v59;
    v59 = v29;
    if (v30)
    {
      v54[0] = v30;
      if (!v61)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v61 + 48))(v61, v54);
    }
    v31 = v61;
    v61 = 0;
    if (v31 == v60)
    {
      v31 = v60;
      v32 = 4;
      goto LABEL_44;
    }
    if (v31)
    {
      v32 = 5;
LABEL_44:
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
    if (v58)
    {
      if (v58 == v57)
      {
        v61 = v60;
        (*(void (**)(_QWORD *, _QWORD *))(v57[0] + 24))(v57, v60);
        v37 = v58;
      }
      else
      {
        v37 = 0;
        v61 = v58;
        v58 = 0;
      }
    }
    else
    {
      v37 = 0;
      v61 = 0;
    }
    v39 = v56;
    v56 = 0;
    if (v39)
    {
      v54[0] = v39;
      if (!v37)
        goto LABEL_105;
      (*(void (**)(_QWORD *, _QWORD *))(*v37 + 48))(v37, v54);
      v37 = v58;
    }
    if (v37 == v57)
    {
      v37 = v57;
      v40 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_79;
      v40 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v40))();
LABEL_79:
    v45 = v59;
    if (!v59)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      v28 = 1;
      v27 = v61;
LABEL_85:
      v59 = 0;
      if (v27 == v60)
        goto LABEL_95;
      goto LABEL_86;
    }
    v46 = *(uint64_t **)(v51 + 2544);
    if ((unint64_t)v46 >= *(_QWORD *)(v51 + 2552))
    {
      v48 = std::vector<std::unique_ptr<void const,std::function<void ()(void const*)>>>::__push_back_slow_path<std::unique_ptr<void const,std::function<void ()(void const*)>>>((void **)(v51 + 2536), &v59);
    }
    else
    {
      v59 = 0;
      *v46 = v45;
      if (v61)
      {
        if (v61 == v60)
        {
          v46[4] = (uint64_t)(v46 + 1);
          (*(void (**)(_QWORD *))(*v61 + 24))(v61);
        }
        else
        {
          v46[4] = (uint64_t)v61;
          v61 = 0;
        }
      }
      else
      {
        v46[4] = 0;
      }
      v48 = (char *)(v46 + 5);
    }
    *(_QWORD *)(v51 + 2544) = v48;
    *a5 = v24;
    a5[1] = v45;
    a5[2] = v25;
    v49 = v59;
    v27 = v61;
    v59 = 0;
    if (v49)
    {
      v56 = v49;
      if (!v61)
      {
LABEL_105:
        v50 = std::__throw_bad_function_call[abi:nn180100]();
        return;
      }
      (*(void (**)(void))(*v61 + 48))();
      v28 = 1;
      v27 = v61;
      if (v61 == v60)
      {
LABEL_95:
        v27 = v60;
        v47 = 4;
        goto LABEL_96;
      }
    }
    else
    {
      v28 = 1;
      if (v61 == v60)
        goto LABEL_95;
    }
LABEL_86:
    if (!v27)
      goto LABEL_97;
    v47 = 5;
LABEL_96:
    (*(void (**)(void))(*v27 + 8 * v47))();
LABEL_97:
    if (v64 < 0)
      goto LABEL_27;
LABEL_28:
    if (v28 != 3)
      break;
    if (++v9 == v8)
      goto LABEL_2;
  }
  if (v28 == 2)
    goto LABEL_2;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_B4C78;
  return result;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_B4C78;
}

void std::__function::__func<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1},std::allocator<std::optional<unsigned int> swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readELFSections<`anonymous namespace'::ELFTraits<(unsigned char)1>>(swift::remote::RemoteAddress,std::optional<llvm::sys::MemoryBlock>,llvm::SmallVector<llvm::StringRef,1u>)::{lambda(llvm::StringRef,BOOL)#1}::operator() const(llvm::StringRef,BOOL)::{lambda(void const*)#1}>,void ()(void const*)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_readIsaMask::$_0>(swift_reflection_readIsaMask::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_QWORD **a1, uint64_t *a2)
{
  _QWORD ***v2;
  uint64_t v3;
  int IsaEncoding;
  uint64_t v5;
  uint64_t result;

  v2 = (_QWORD ***)**a1;
  v3 = *a2;
  IsaEncoding = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(*a2);
  if (IsaEncoding == 2)
  {
    v5 = 0;
    result = 1;
  }
  else if (IsaEncoding == 3)
  {
    v5 = *(_QWORD *)(v3 + 104);
    result = 1;
  }
  else
  {
    v5 = 0;
    result = 0;
  }
  ***v2 = v5;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_readIsaMask::$_0>(swift_reflection_readIsaMask::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_QWORD **a1, uint64_t *a2)
{
  _QWORD ***v2;
  uint64_t v3;
  int IsaEncoding;
  uint64_t v5;
  uint64_t result;

  v2 = (_QWORD ***)**a1;
  v3 = *a2;
  IsaEncoding = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(*a2);
  if (IsaEncoding == 2)
  {
    v5 = 0;
    result = 1;
  }
  else if (IsaEncoding == 3)
  {
    v5 = *(_QWORD *)(v3 + 104);
    result = 1;
  }
  else
  {
    v5 = 0;
    result = 0;
  }
  ***v2 = v5;
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE __p[24];

  result = *(unsigned int *)(a1 + 96);
  if (!(_DWORD)result)
  {
    v3 = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_B0E30;
    strcpy(*(char **)__p, "objc_debug_indexed_isa_magic_mask");
    v4 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 8))(v3, __p);
    v5 = v4;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v5)
        goto LABEL_27;
    }
    else if (!v4)
    {
      goto LABEL_27;
    }
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v5, a1 + 120, 8))goto LABEL_34;
    if (*(_QWORD *)(a1 + 120))
    {
      v6 = *(_QWORD *)(a1 + 2488);
      *(_QWORD *)__p = operator new(0x28uLL);
      *(_OWORD *)&__p[8] = xmmword_B0E40;
      strcpy(*(char **)__p, "objc_debug_indexed_isa_magic_value");
      v7 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 8))(v6, __p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v7
        && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v7, a1 + 128, 8))
      {
        v8 = *(_QWORD *)(a1 + 2488);
        *(_QWORD *)__p = operator new(0x28uLL);
        *(_OWORD *)&__p[8] = xmmword_B0E30;
        strcpy(*(char **)__p, "objc_debug_indexed_isa_index_mask");
        v9 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 8))(v8, __p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (v9
          && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v9, a1 + 104, 8))
        {
          v10 = *(_QWORD *)(a1 + 2488);
          std::string::basic_string[abi:nn180100]<0>(__p, "objc_debug_indexed_isa_index_shift");
          v11 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 8))(v10, __p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (v11
            && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v11, a1 + 112, 8))
          {
            v12 = *(_QWORD *)(a1 + 2488);
            std::string::basic_string[abi:nn180100]<0>(__p, "objc_indexed_classes");
            v13 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 8))(v12, __p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (v13)
            {
              *(_QWORD *)(a1 + 136) = v13;
              v14 = *(_QWORD *)(a1 + 2488);
              std::string::basic_string[abi:nn180100]<0>(__p, "objc_indexed_classes_count");
              v15 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 8))(v14, __p);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              if (v15)
              {
                *(_QWORD *)(a1 + 144) = v15;
                result = 4;
LABEL_36:
                *(_DWORD *)(a1 + 96) = result;
                return result;
              }
            }
          }
        }
      }
      goto LABEL_34;
    }
LABEL_27:
    v16 = *(_QWORD *)(a1 + 2488);
    __p[23] = 13;
    strcpy(__p, "swift_isaMask");
    v17 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 8))(v16, __p);
    v18 = v17;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v18)
        goto LABEL_35;
    }
    else if (!v17)
    {
      goto LABEL_35;
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v18, a1 + 104, 8))
    {
      if (*(_QWORD *)(a1 + 104))
      {
        result = 3;
        goto LABEL_36;
      }
LABEL_35:
      result = 2;
      goto LABEL_36;
    }
LABEL_34:
    result = 1;
    goto LABEL_36;
  }
  return result;
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMetadata::$_0>(swift_reflection_typeRefForMetadata::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(*a2, ****a1, 0, 50);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMetadata::$_0>(swift_reflection_typeRefForMetadata::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(*a2, ****a1, 0, 50);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int32x2_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t TupleType;
  BOOL v20;
  uint64_t v21;
  swift::reflection::OpaqueTypeRef *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  void *v30;
  uint64_t TypeFromMetadata;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  unsigned int v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  uint64_t *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  std::string::size_type v104;
  std::string::size_type v105;
  std::string::size_type v106;
  char *v107;
  char *v108;
  char *v109;
  std::string *v110;
  char *v111;
  std::string::size_type v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  std::string *size;
  __int128 v124;
  std::string::value_type *v125;
  uint64_t v126;
  char *v127;
  _QWORD *MangledName;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int ExtendedFlags;
  uint64_t v133;
  std::string::size_type v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  const void *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t ThrownError;
  uint64_t v152;
  unint64_t v153;
  int *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD v176[2];
  std::string v177;
  std::string v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  int v212;
  uint64_t v213;
  _QWORD v214[2];
  uint64_t v215;
  unsigned int *v216;
  std::string v217;
  void *__p[2];
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  int v256;
  uint64_t v257;
  _QWORD v258[2];
  uint64_t v259[2];
  uint64_t v260;
  _QWORD *v261;
  char v262[32];

  *(_QWORD *)v262 = a2;
  v262[8] = a3;
  v8 = *(int32x2_t *)a1;
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
  {
    v18 = 0;
LABEL_15:
    v11 = *(_QWORD *)&v8 + 24 * v18;
    goto LABEL_16;
  }
  v10 = (v9 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(v262, &v262[8]);
  v11 = *(_QWORD *)&v8 + 24 * v10;
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned __int8 *)(v11 + 8);
  if (*(_QWORD *)v262 != *(_QWORD *)v11 || v262[8] != v13)
  {
    v15 = 1;
    while (v12 != -1 || v13)
    {
      v16 = v10 + v15++;
      v10 = v16 & (v9 - 1);
      v11 = *(_QWORD *)&v8 + 24 * v10;
      v12 = *(_QWORD *)v11;
      v13 = *(unsigned __int8 *)(v11 + 8);
      if (*(_QWORD *)v262 == *(_QWORD *)v11 && v262[8] == v13)
        goto LABEL_16;
    }
    v8 = *(int32x2_t *)a1;
    v18 = *(_DWORD *)(a1 + 16);
    goto LABEL_15;
  }
LABEL_16:
  if (v11 != *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(v11 + 16);
  v20 = __OFSUB__(a4, 1);
  v21 = (a4 - 1);
  if ((int)v21 < 0 != v20)
    return 0;
  *(_OWORD *)__p = *(_OWORD *)v262;
  v219 = 0;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::try_emplace<swift::reflection::TypeRef const*>(a1, (char *)__p, (uint64_t *)&v219, (uint64_t)&v177);
  v22 = (swift::reflection::OpaqueTypeRef *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v260);
  v23 = v261;
  if (!v261)
    return 0;
  v24 = *v261;
  if (*v261 > 0x7FFuLL)
    LODWORD(v24) = 0;
  if ((int)v24 <= 768)
  {
    if ((v24 - 512) < 3)
    {
      v258[0] = v260;
      v258[1] = v261;
      return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata((int32x2_t *)a1, (uint64_t)v258, v21, 0);
    }
    if ((v24 - 515) >= 2)
    {
      if ((_DWORD)v24)
      {
LABEL_139:
        v75 = swift::reflection::OpaqueTypeRef::get(v22);
LABEL_140:
        TupleType = v75;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = v75;
      }
      else
      {
        v259[0] = v260;
        v259[1] = (uint64_t)v261;
        return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata(a1, v259, v21, a3);
      }
      return TupleType;
    }
    v28 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(a1, &v260, 0);
    if (v28)
    {
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v28, &v215);
      if (v216)
      {
        v219 = 0;
        v220 = 0;
        v221 = 2400;
        v222 = 0;
        v223 = 0;
        __p[1] = 0;
        __p[0] = off_B5288;
        v257 = 0;
        v226 = 0;
        v224 = 0;
        v225 = 0;
        v227 = 0;
        v239 = 0u;
        v240 = 0u;
        v241 = 0u;
        v242 = 0u;
        v243 = 0u;
        v244 = 0u;
        v245 = 0u;
        v246 = 0u;
        v247 = 0u;
        v248 = 0u;
        v249 = 0u;
        v250 = 0u;
        v251 = 0u;
        v252 = 0u;
        v253 = 0u;
        v254 = 0u;
        v255 = 0u;
        v228 = 0u;
        v229 = 0u;
        v230 = 0u;
        v231 = 0u;
        v232 = 0u;
        v233 = 0u;
        v234 = 0u;
        v235 = 0u;
        v236 = 0u;
        v237 = 0u;
        v238 = 0u;
        v256 = 0;
        v176[0] = v215;
        v176[1] = v216;
        v29 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(a1, v176, (swift::Demangle::__runtime::NodeFactory *)__p);
        if (v29 && *((_WORD *)v29 + 8) == 232)
        {
          swift::Demangle::__runtime::mangleNode((size_t *)v29, (uint64_t)&v177);
          if (LODWORD(v177.__r_.__value_.__l.__data_))
          {
            TupleType = 0;
          }
          else
          {
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v217, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
            else
              v217 = v178;
            TupleType = swift::reflection::ForeignClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)&v217);
            __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v178.__r_.__value_.__l.__data_);
        }
        else
        {
          TupleType = 0;
        }
LABEL_208:
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
        return TupleType;
      }
    }
    return 0;
  }
  switch((int)v24)
  {
    case 769:
      v219 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<swift::reflection::TypeRef const*>::reserve((uint64_t)__p, v261[1]);
      v25 = *((unsigned int *)v23 + 2);
      if (!*((_DWORD *)v23 + 2))
        goto LABEL_141;
      v26 = 0;
      v27 = v23 + 3;
      v173 = v23;
      v169 = v23 + 3;
      do
      {
        TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v27[2 * v26], 0, v21);
        if (!TypeFromMetadata)
        {
          TupleType = 0;
          goto LABEL_246;
        }
        v32 = TypeFromMetadata;
        v33 = (char *)__p[1];
        if (__p[1] < v219)
        {
          *(_QWORD *)__p[1] = TypeFromMetadata;
          v30 = v33 + 8;
          goto LABEL_35;
        }
        v34 = v25;
        v35 = v21;
        v36 = (char *)__p[0];
        v37 = (char *)__p[1] - (char *)__p[0];
        v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
          goto LABEL_318;
        v40 = v219 - (char *)__p[0];
        if ((v219 - (char *)__p[0]) >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        v170 = v39;
        if (v39)
        {
          if (v39 >> 61)
            goto LABEL_319;
          v41 = operator new(8 * v39);
        }
        else
        {
          v41 = 0;
        }
        v42 = (uint64_t *)&v41[8 * v38];
        *v42 = v32;
        v30 = v42 + 1;
        if (v33 == v36)
        {
          v21 = v35;
          v25 = v34;
          v23 = v173;
          goto LABEL_57;
        }
        v43 = v33 - v36 - 8;
        if (v43 >= 0x58)
        {
          v44 = v33 - v41 - v37;
          v21 = v35;
          v25 = v34;
          v23 = v173;
          if (v44 >= 0x20)
          {
            v45 = (v43 >> 3) + 1;
            v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v33[-v46];
            v42 = (uint64_t *)((char *)v42 - v46);
            v48 = &v41[8 * v38 - 16];
            v49 = v33 - 16;
            v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 4;
            }
            while (v50);
            v33 = v47;
            if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_56;
          }
        }
        else
        {
          v21 = v35;
          v25 = v34;
          v23 = v173;
        }
        do
        {
          v52 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *--v42 = v52;
        }
        while (v33 != v36);
LABEL_56:
        v33 = (char *)__p[0];
LABEL_57:
        v27 = v169;
        __p[0] = v42;
        __p[1] = v30;
        v219 = &v41[8 * v170];
        if (v33)
          operator delete(v33);
LABEL_35:
        __p[1] = v30;
        ++v26;
      }
      while (v26 != v25);
LABEL_141:
      memset(&v177, 0, sizeof(v177));
      v103 = v23[2];
      if (v103
        && !(*(unsigned int (**)(_QWORD, uint64_t, std::string *))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v103, &v177))
      {
        TupleType = 0;
      }
      else
      {
        v104 = std::string::find(&v177, 32, 0);
        if (v104 != -1)
        {
          v105 = v104;
          v106 = 0;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          while (1)
          {
            if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v110 = &v177;
            else
              v110 = (std::string *)v177.__r_.__value_.__r.__words[0];
            v111 = (char *)v110 + v106;
            v112 = v105 - v106;
            if (v108 < v109)
            {
              *(_QWORD *)v108 = v111;
              *((_QWORD *)v108 + 1) = v112;
              v108 += 16;
            }
            else
            {
              v113 = (v108 - v107) >> 4;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 60)
                goto LABEL_318;
              if ((v109 - v107) >> 3 > v114)
                v114 = (v109 - v107) >> 3;
              if ((unint64_t)(v109 - v107) >= 0x7FFFFFFFFFFFFFF0)
                v115 = 0xFFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                if (v115 >> 60)
                  goto LABEL_319;
                v116 = (char *)operator new(16 * v115);
              }
              else
              {
                v116 = 0;
              }
              v117 = &v116[16 * v113];
              *(_QWORD *)v117 = v111;
              *((_QWORD *)v117 + 1) = v112;
              if (v108 == v107)
              {
                v119 = &v116[16 * v113];
              }
              else
              {
                v118 = &v116[16 * v113];
                do
                {
                  v119 = v118 - 16;
                  *((_OWORD *)v118 - 1) = *((_OWORD *)v108 - 1);
                  v108 -= 16;
                  v118 -= 16;
                }
                while (v108 != v107);
              }
              v109 = &v116[16 * v115];
              v108 = v117 + 16;
              if (v107)
                operator delete(v107);
              v107 = v119;
            }
            v106 = v105 + 1;
            v105 = std::string::find(&v177, 32, v105 + 1);
            if (v105 == -1)
              goto LABEL_218;
          }
        }
        v109 = 0;
        v108 = 0;
        v107 = 0;
LABEL_218:
        v139 = v108 - v107;
        v140 = (unint64_t)(v108 - v107) >> 4;
        v141 = __p[0];
        v142 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if (v142 > v140)
        {
          do
          {
            if (v108 < v109)
            {
              *(_QWORD *)v108 = 0;
              *((_QWORD *)v108 + 1) = 0;
              v108 += 16;
            }
            else
            {
              v143 = (v108 - v107) >> 4;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 60)
                goto LABEL_318;
              if ((v109 - v107) >> 3 > v144)
                v144 = (v109 - v107) >> 3;
              if ((unint64_t)(v109 - v107) >= 0x7FFFFFFFFFFFFFF0)
                v145 = 0xFFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                if (v145 >> 60)
                  goto LABEL_319;
                v146 = (char *)operator new(16 * v145);
              }
              else
              {
                v146 = 0;
              }
              v147 = &v146[16 * v143];
              *(_QWORD *)v147 = 0;
              *((_QWORD *)v147 + 1) = 0;
              if (v108 == v107)
              {
                v149 = &v146[16 * v143];
              }
              else
              {
                v148 = &v146[16 * v143];
                do
                {
                  v149 = v148 - 16;
                  *((_OWORD *)v148 - 1) = *((_OWORD *)v108 - 1);
                  v108 -= 16;
                  v148 -= 16;
                }
                while (v108 != v107);
              }
              v109 = &v146[16 * v145];
              v108 = v147 + 16;
              if (v107)
                operator delete(v107);
              v107 = v149;
            }
            v140 = (v140 + 1);
            v141 = __p[0];
            v142 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          }
          while (v142 > v140);
          v139 = v108 - v107;
        }
        TupleType = swift::reflection::TypeRefBuilder::createTupleType(a1 + 296, v141, v142, (uint64_t)v107, v139 >> 4);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
        if (v107)
          operator delete(v107);
      }
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
LABEL_246:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return TupleType;
    case 770:
      v53 = *((unsigned __int16 *)v261 + 4);
      v174 = (uint64_t)v261;
      if (*((_WORD *)v261 + 4))
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = v261 + 3;
        v171 = v261 + 3;
        while (1)
        {
          v59 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v58[v54], 0, v21);
          if (!v59)
            goto LABEL_253;
          v60 = v59;
          v61 = *(_QWORD *)(v174 + 8);
          if ((v61 & 0x2000000) != 0)
          {
            v62 = *((_DWORD *)&v58[(unsigned __int16)v61] + v54);
            if (v56 < (uint64_t *)v57)
            {
LABEL_69:
              *v56 = 0;
              v56[1] = 0;
              v56[2] = v59;
              *((_DWORD *)v56 + 6) = v62;
              v56 += 4;
              goto LABEL_70;
            }
          }
          else
          {
            v62 = 0;
            if (v56 < (uint64_t *)v57)
              goto LABEL_69;
          }
          v63 = v21;
          v64 = ((char *)v56 - (char *)v55) >> 5;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 59)
            goto LABEL_318;
          if ((v57 - (char *)v55) >> 4 > v65)
            v65 = (v57 - (char *)v55) >> 4;
          if ((unint64_t)(v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFE0)
            v66 = 0x7FFFFFFFFFFFFFFLL;
          else
            v66 = v65;
          if (v66)
          {
            if (v66 >> 59)
              goto LABEL_319;
            v67 = (char *)operator new(32 * v66);
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[32 * v64];
          *(_QWORD *)v68 = 0;
          *((_QWORD *)v68 + 1) = 0;
          *((_QWORD *)v68 + 2) = v60;
          *((_DWORD *)v68 + 6) = v62;
          if (v56 == v55)
          {
            v71 = &v67[32 * v64];
          }
          else
          {
            v69 = &v67[32 * v64];
            do
            {
              v70 = *((_OWORD *)v56 - 2);
              v71 = v69 - 32;
              *(_OWORD *)(v69 - 20) = *(_OWORD *)((char *)v56 - 20);
              *((_OWORD *)v69 - 2) = v70;
              v56 -= 4;
              v69 -= 32;
            }
            while (v56 != v55);
          }
          v57 = &v67[32 * v66];
          v56 = (uint64_t *)(v68 + 32);
          if (v55)
            operator delete(v55);
          v55 = (uint64_t *)v71;
          v21 = v63;
          v58 = v171;
LABEL_70:
          if (++v54 == v53)
            goto LABEL_199;
        }
      }
      v56 = 0;
      v55 = 0;
LABEL_199:
      v129 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(_QWORD *)(v174 + 16), 0, v21);
      if (!v129)
        goto LABEL_253;
      v130 = v129;
      v131 = *(_QWORD *)(v174 + 8);
      if ((v131 & 0x80000000) != 0)
        ExtendedFlags = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getExtendedFlags(v174);
      else
        ExtendedFlags = 0;
      v133 = *(_QWORD *)(v174 + 8);
      if ((v133 & 0x10000000) != 0)
      {
        v137 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(_QWORD *)(((v174+ 8 * (unsigned __int16)*(_QWORD *)(v174 + 8)+ 4* ((unsigned __int16)*(_QWORD *)(v174 + 8) & (unint64_t)((uint64_t)(*(_QWORD *)(v174 + 8) << 38) >> 63))+ 31) & 0xFFFFFFFFFFFFFFF8)+ 8 * ((*(_QWORD *)(v174 + 8) >> 27) & 1)), 0, v21);
        if (!v137)
        {
LABEL_253:
          TupleType = 0;
          goto LABEL_256;
        }
        v136 = v137;
        v133 = *(_QWORD *)(v174 + 8);
      }
      else
      {
        v136 = 0;
      }
      if ((v133 & 0x8000000) != 0)
      {
        v150 = *(_QWORD *)((v174
                          + 8 * (unsigned __int16)v133
                          + 4 * ((unsigned __int16)v133 & (unint64_t)(v133 << 38 >> 63))
                          + 31) & 0xFFFFFFFFFFFFFFF8);
        if (v150 - 1 >= 4)
          v138 = 0;
        else
          v138 = v150;
      }
      else
      {
        v138 = 0;
      }
      if (swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::hasThrownError(v174))
      {
        ThrownError = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getThrownError(v174);
        v152 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, ThrownError, 0, v21);
        if (!v152)
          goto LABEL_253;
      }
      else
      {
        v152 = 0;
      }
      TupleType = swift::reflection::TypeRefBuilder::createFunctionType(a1 + 296, v55, ((char *)v56 - (char *)v55) >> 5, v130, v131, ExtendedFlags, v138, v136, v152);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
LABEL_256:
      if (!v55)
        return TupleType;
      goto LABEL_257;
    case 771:
      v72 = *((_DWORD *)v261 + 2);
      if ((v72 & 0x40000000) != 0)
      {
        TupleType = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v261[2], 0, v21);
        if (!TupleType)
          return TupleType;
        v72 = *((_DWORD *)v23 + 2);
        v73 = 1;
      }
      else
      {
        TupleType = 0;
        v73 = (v72 & 0x80000000) == 0;
      }
      v219 = 0;
      v220 = 0;
      v221 = 2400;
      v222 = 0;
      v223 = 0;
      __p[1] = 0;
      __p[0] = off_B5288;
      v257 = 0;
      v226 = 0;
      v224 = 0;
      v225 = 0;
      v227 = 0;
      v239 = 0u;
      v240 = 0u;
      v241 = 0u;
      v242 = 0u;
      v243 = 0u;
      v244 = 0u;
      v245 = 0u;
      v246 = 0u;
      v247 = 0u;
      v248 = 0u;
      v249 = 0u;
      v250 = 0u;
      v251 = 0u;
      v252 = 0u;
      v253 = 0u;
      v254 = 0u;
      v255 = 0u;
      v228 = 0u;
      v229 = 0u;
      v230 = 0u;
      v231 = 0u;
      v232 = 0u;
      v233 = 0u;
      v234 = 0u;
      v235 = 0u;
      v236 = 0u;
      v237 = 0u;
      v238 = 0u;
      v256 = 0;
      memset(&v217, 0, sizeof(v217));
      v120 = *((unsigned int *)v23 + 3);
      if ((_DWORD)v120)
      {
        v121 = &v23[((v72 >> 30) & 1) + 2];
        v122 = 8 * v120;
        do
        {
          v215 = *v121;
          swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver>(a1, &v215, (swift::Demangle::__runtime::NodeFactory *)__p, a1 + 296, &v177);
          if (!v178.__r_.__value_.__s.__data_[8])
          {
            TupleType = 0;
            goto LABEL_207;
          }
          size = (std::string *)v217.__r_.__value_.__l.__size_;
          if (v217.__r_.__value_.__l.__size_ >= v217.__r_.__value_.__r.__words[2])
          {
            v125 = std::vector<std::optional<std::pair<std::string,BOOL>>>::__push_back_slow_path<std::optional<std::pair<std::string,BOOL>> const&>((uint64_t)&v217, (uint64_t)&v177);
          }
          else
          {
            *(_BYTE *)v217.__r_.__value_.__l.__size_ = 0;
            size[1].__r_.__value_.__s.__data_[8] = 0;
            if (v178.__r_.__value_.__s.__data_[8])
            {
              if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(size, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
              }
              else
              {
                v124 = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
                size->__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[2];
                *(_OWORD *)&size->__r_.__value_.__l.__data_ = v124;
              }
              size[1].__r_.__value_.__s.__data_[0] = v178.__r_.__value_.__s.__data_[0];
              size[1].__r_.__value_.__s.__data_[8] = 1;
            }
            v125 = &size[1].__r_.__value_.__s.__data_[16];
          }
          v217.__r_.__value_.__l.__size_ = (std::string::size_type)v125;
          if (v178.__r_.__value_.__s.__data_[8] && SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          ++v121;
          v122 -= 8;
        }
        while (v122);
        v134 = v217.__r_.__value_.__l.__size_;
        v135 = (__int128 *)v217.__r_.__value_.__r.__words[0];
      }
      else
      {
        v134 = 0;
        v135 = 0;
      }
      TupleType = swift::reflection::TypeRefBuilder::createProtocolCompositionType(a1 + 296, v135, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v134 - (_QWORD)v135) >> 3), TupleType, v73);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
LABEL_207:
      std::vector<std::optional<std::pair<std::string,BOOL>>>::~vector[abi:nn180100]((void **)&v217.__r_.__value_.__l.__data_);
      goto LABEL_208;
    case 772:
      v74 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v261[1], 0, v21);
      if (!v74)
        return 0;
      v75 = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v74, 0);
      goto LABEL_140;
    case 773:
      v76 = v261[1];
      __p[1] = 0;
      __p[0] = 0;
      v219 = 0;
      TupleType = 0;
      if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCClassName(a1, v76))
      {
        TupleType = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
      }
      goto LABEL_62;
    case 774:
      v77 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v261[1], 0, v21);
      if (!v77)
        return 0;
      v75 = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v77);
      goto LABEL_140;
    case 775:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(a1, *(_QWORD *)(a1 + 2504) & v261[1], &v215);
      v78 = v216;
      if (!v216)
        return 0;
      if ((*((_BYTE *)v216 + 1) & 1) == 0 || (v79 = *((unsigned __int16 *)v216 + 10), !*((_WORD *)v216 + 10)))
      {
        v81 = 0;
        v55 = 0;
        goto LABEL_188;
      }
      v80 = 0;
      v55 = 0;
      v81 = 0;
      v82 = 0;
      v83 = v23 + 2;
      v172 = v23 + 2;
      v175 = *((unsigned __int16 *)v216 + 10);
      break;
    default:
      if ((v24 - 1280) >= 2 && (_DWORD)v24 != 1024)
        goto LABEL_139;
      strcpy((char *)__p, "Bo");
      HIBYTE(v219) = 2;
      TupleType = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
LABEL_62:
      if (SHIBYTE(v219) < 0)
        operator delete(__p[0]);
      return TupleType;
  }
  while (1)
  {
    v85 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v83[v80], 0, v21);
    if (!v85)
    {
      TupleType = 0;
      if (!v55)
        return TupleType;
      goto LABEL_257;
    }
    v86 = v85;
    if (v81 >= v82)
      break;
    *v81++ = v85;
LABEL_109:
    if (++v80 == v79)
    {
      v78 = v216;
LABEL_188:
      v219 = 0;
      v220 = 0;
      v221 = 2400;
      v222 = 0;
      v223 = 0;
      __p[1] = 0;
      __p[0] = off_B5288;
      v257 = 0;
      v226 = 0;
      v224 = 0;
      v225 = 0;
      v227 = 0;
      v239 = 0u;
      v240 = 0u;
      v241 = 0u;
      v242 = 0u;
      v243 = 0u;
      v244 = 0u;
      v245 = 0u;
      v246 = 0u;
      v247 = 0u;
      v248 = 0u;
      v249 = 0u;
      v250 = 0u;
      v251 = 0u;
      v252 = 0u;
      v253 = 0u;
      v254 = 0u;
      v255 = 0u;
      v228 = 0u;
      v229 = 0u;
      v230 = 0u;
      v231 = 0u;
      v232 = 0u;
      v233 = 0u;
      v234 = 0u;
      v235 = 0u;
      v236 = 0u;
      v237 = 0u;
      v238 = 0u;
      v256 = 0;
      v126 = (int)v78[1];
      if ((_DWORD)v126)
        v127 = (char *)(v215 + v126 + 4);
      else
        v127 = 0;
      MangledName = (_QWORD *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v127, 0, __p);
      if (!MangledName)
        goto LABEL_195;
      v217.__r_.__value_.__r.__words[0] = a1 + 296;
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&v217, MangledName, 0, (uint64_t)&v177);
      if (LOWORD(v177.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(v177.__r_.__value_.__r.__words[2]) == 1)
          ((void (*)(std::string::size_type, uint64_t, _QWORD))v177.__r_.__value_.__l.__size_)(v177.__r_.__value_.__r.__words[0], 3, 0);
        goto LABEL_195;
      }
      TupleType = v177.__r_.__value_.__r.__words[0];
      if (!v177.__r_.__value_.__r.__words[0])
        goto LABEL_196;
      v214[0] = v215;
      v214[1] = v216;
      swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature(v216, (uint64_t)&v177);
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(a1, (uint64_t)v214, (unsigned __int16 *)&v177, (uint64_t)&v217);
      if (LOWORD(v217.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(v217.__r_.__value_.__r.__words[2]) == 1)
          ((void (*)(std::string::size_type, uint64_t, _QWORD))v217.__r_.__value_.__l.__size_)(v217.__r_.__value_.__r.__words[0], 3, 0);
        goto LABEL_195;
      }
      if (!v217.__r_.__value_.__r.__words[0])
      {
LABEL_195:
        TupleType = 0;
        goto LABEL_196;
      }
      swift::reflection::TypeRefBuilder::createSubstitutionMap((uint64_t *)v217.__r_.__value_.__l.__data_, (uint64_t)v55, v81 - v55, (uint64_t)&v217);
      if (!LODWORD(v217.__r_.__value_.__r.__words[1]))
      {
        TupleType = 0;
        goto LABEL_316;
      }
      TupleType = swift::reflection::TypeRef::subst(TupleType, a1 + 296, (uint64_t *)&v217);
      if (!TupleType)
        goto LABEL_316;
      if ((*((_BYTE *)v216 + 1) & 2) == 0)
        goto LABEL_315;
      v178.__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&v178.__r_.__value_.__r.__words[1] = 0x960uLL;
      v179 = 0;
      v177.__r_.__value_.__r.__words[0] = (std::string::size_type)off_B5288;
      *(_OWORD *)&v177.__r_.__value_.__r.__words[1] = 0uLL;
      v213 = 0;
      v181 = 0;
      v182 = 0;
      v180 = 0;
      v183 = 0;
      v195 = 0u;
      v196 = 0u;
      v197 = 0u;
      v198 = 0u;
      v199 = 0u;
      v200 = 0u;
      v201 = 0u;
      v202 = 0u;
      v203 = 0u;
      v204 = 0u;
      v205 = 0u;
      v206 = 0u;
      v207 = 0u;
      v208 = 0u;
      v209 = 0u;
      v210 = 0u;
      v211 = 0u;
      v184 = 0u;
      v185 = 0u;
      v186 = 0u;
      v187 = 0u;
      v188 = 0u;
      v189 = 0u;
      v190 = 0u;
      v191 = 0u;
      v192 = 0u;
      v193 = 0u;
      v194 = 0u;
      v212 = 0;
      v153 = *v216;
      if ((v153 & 0x200) != 0)
        v154 = (int *)(((unint64_t)&v216[2 * ((v153 >> 8) & 1) + 4] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      else
        v154 = 0;
      v155 = (char *)v154 + v215 - (_QWORD)v216;
      v156 = *v154;
      v157 = &v155[v156];
      if ((_DWORD)v156)
        v158 = v157;
      else
        v158 = 0;
      v159 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v158, 0, &v177);
      if (!v159)
      {
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v177);
        TupleType = 0;
        goto LABEL_316;
      }
      v160 = v159;
      while (1)
      {
        if (*(_WORD *)(v160 + 16) != 232)
        {
LABEL_314:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v177);
LABEL_315:
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
LABEL_316:
          __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v217.__r_.__value_.__l.__data_, (void *)(16 * LODWORD(v217.__r_.__value_.__r.__words[2])), (std::align_val_t)8uLL);
LABEL_196:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
          if (!v55)
            return TupleType;
LABEL_257:
          operator delete(v55);
          return TupleType;
        }
        v162 = *(unsigned __int8 *)(v160 + 18);
        v163 = (uint64_t *)v160;
        if ((v162 - 1) >= 2)
        {
          if (v162 != 5 || !*(_DWORD *)(v160 + 8))
            goto LABEL_314;
          v163 = *(uint64_t **)v160;
        }
        if (*(_WORD *)(*v163 + 16) != 145)
          goto LABEL_314;
        v164 = (uint64_t *)v160;
        if ((v162 - 1) >= 2)
        {
          if (v162 != 5 || !*(_DWORD *)(v160 + 8))
          {
            v165 = 0;
            goto LABEL_301;
          }
          v164 = *(uint64_t **)v160;
        }
        v165 = *v164;
LABEL_301:
        v166 = *(unsigned __int8 *)(v165 + 18);
        if ((v166 - 1) >= 2 && (v166 != 5 || !*(_DWORD *)(v165 + 8)))
          goto LABEL_314;
        TupleType = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, TupleType);
        v167 = *(unsigned __int8 *)(v160 + 18);
        if ((v167 - 1) >= 2)
        {
          if (v167 != 5 || !*(_DWORD *)(v160 + 8))
          {
            v161 = 0;
            goto LABEL_310;
          }
          v160 = *(_QWORD *)v160;
        }
        v161 = *(_QWORD *)v160;
LABEL_310:
        v168 = *(unsigned __int8 *)(v161 + 18);
        if ((v168 - 1) < 2)
          goto LABEL_288;
        if (v168 == 5)
        {
          if (*(_DWORD *)(v161 + 8))
          {
            v161 = *(_QWORD *)v161;
LABEL_288:
            v160 = *(_QWORD *)v161;
            continue;
          }
          v160 = 0;
        }
        else
        {
          v160 = 0;
        }
      }
    }
  }
  v87 = v81 - v55;
  v88 = v87 + 1;
  if ((unint64_t)(v87 + 1) >> 61)
LABEL_318:
    abort();
  if (((char *)v82 - (char *)v55) >> 2 > v88)
    v88 = ((char *)v82 - (char *)v55) >> 2;
  if ((unint64_t)((char *)v82 - (char *)v55) >= 0x7FFFFFFFFFFFFFF8)
    v89 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v89 = v88;
  if (v89)
  {
    if (v89 >> 61)
LABEL_319:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v90 = operator new(8 * v89);
  }
  else
  {
    v90 = 0;
  }
  v91 = (uint64_t *)&v90[8 * v87];
  *v91 = v86;
  v92 = v91 + 1;
  if (v81 == v55)
    goto LABEL_135;
  v93 = (char *)v81 - (char *)v55 - 8;
  if (v93 < 0x168)
  {
    v94 = v81;
    goto LABEL_134;
  }
  v95 = ((char *)(v81 - 1) - (char *)v55) & 0xFFFFFFFFFFFFFFF8;
  if (&v90[(char *)v81 - (char *)v55 - 8 - v95] > &v90[(char *)v81 - (char *)v55 - 8])
  {
    v94 = v81;
  }
  else
  {
    if ((uint64_t *)((char *)v81 - v95 - 8) <= v81 - 1)
    {
      if ((unint64_t)((char *)v55 - v90) < 0x20)
      {
        v94 = v81;
        goto LABEL_134;
      }
      v96 = (v93 >> 3) + 1;
      v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
      v94 = &v81[v97 / 0xFFFFFFFFFFFFFFF8];
      v91 = (uint64_t *)((char *)v91 - v97);
      v98 = &v90[8 * v87 - 16];
      v99 = v81 - 2;
      v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *(_OWORD *)v99;
        *(v98 - 1) = *((_OWORD *)v99 - 1);
        *v98 = v101;
        v98 -= 2;
        v99 -= 4;
        v100 -= 4;
      }
      while (v100);
      if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_134;
LABEL_135:
      v82 = (uint64_t *)&v90[8 * v89];
      if (v55)
      {
        v81 = v92;
        operator delete(v55);
        v55 = v91;
      }
      else
      {
        v55 = v91;
        v81 = v92;
      }
      v83 = v172;
      v79 = v175;
      goto LABEL_109;
    }
    v94 = v81;
  }
  do
  {
LABEL_134:
    v102 = *--v94;
    *--v91 = v102;
  }
  while (v94 != v55);
  goto LABEL_135;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int16 v26[20];
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;

  v4 = result;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 40);
  if (v7)
  {
    v8 = (v7 - 1) & (37 * a2);
    v9 = (uint64_t *)(v6 + 48 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -1)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v9 = (uint64_t *)(v6 + 48 * v8);
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_8;
    }
  }
  v9 = (uint64_t *)(v6 + 48 * v7);
LABEL_8:
  if (v9 == (uint64_t *)(v6 + 48 * v7))
  {
    v30 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(result + 2488)
                                                                                     + 32))(*(_QWORD *)(result + 2488), a2, &v30, 8);
    if ((result & 1) != 0)
    {
      v14 = v30;
      if (v30 > 0x7FF)
        v14 = 0;
      if (v14 <= 1023)
      {
        switch(v14)
        {
          case 769:
            *(_QWORD *)v26 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, uint64_t))(**(_QWORD **)(v4 + 2488)
                                                                                             + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0 || *(_QWORD *)v26 >= 0x100uLL)
              goto LABEL_45;
            v18 = 16 * *(_QWORD *)v26 + 24;
            break;
          case 770:
            *(_QWORD *)v26 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, uint64_t))(**(_QWORD **)(v4 + 2488)
                                                                                             + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0)
              goto LABEL_45;
            v19 = 4 * v26[0];
            if ((*(_DWORD *)v26 & 0x2000000) == 0)
              v19 = 0;
            v20 = v19 + 8 * v26[0];
            v21 = v20 + 24;
            v22 = ((v20 + 31) & 0x1FFFF8) + 8;
            if ((*(_DWORD *)v26 & 0x8000000) != 0)
              v23 = v22;
            else
              v23 = v21;
            v18 = (v23 + 7) & 0xFFFFF8;
            break;
          case 771:
            *(_DWORD *)v26 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, uint64_t))(**(_QWORD **)(v4 + 2488)
                                                                                             + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, v26, 4);
            if ((result & 1) == 0)
              goto LABEL_45;
            v24 = *(_DWORD *)v26;
            LODWORD(v27) = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v4 + 2488) + 32))(*(_QWORD *)(v4 + 2488), a2 + 12, &v27, 4);
            if ((result & 1) == 0 || v27 >= 0x100)
              goto LABEL_45;
            v25 = 24;
            if ((v24 & 0x40000000) == 0)
              v25 = 16;
            v18 = v25 + 8 * v27;
            break;
          case 772:
          case 773:
            goto LABEL_23;
          case 774:
            goto LABEL_24;
          case 775:
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v4 + 2488) + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, &v29, 8);
            if ((result & 1) == 0)
              goto LABEL_45;
            swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(v4, *(_QWORD *)(v4 + 2504) & v29, &v27);
            result = (uint64_t)v28;
            if (!v28)
              goto LABEL_45;
            swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature(v28, (uint64_t)v26);
            v18 = 8 * v26[2] + 16;
            break;
          default:
            switch(v14)
            {
              case 512:
              case 513:
              case 514:
                goto LABEL_23;
              case 515:
                v15 = a3;
                v16 = (_BYTE *)v4;
                v17 = a2;
                v18 = 32;
                break;
              case 516:
                goto LABEL_24;
              default:
                if (v14)
                  goto LABEL_17;
                v15 = a3;
                v16 = (_BYTE *)v4;
                v17 = a2;
                v18 = 80;
                break;
            }
            return (uint64_t)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
        }
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
      }
      else if (v14 == 1024 || v14 == 1280)
      {
LABEL_24:
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
        v18 = 24;
      }
      else if (v14 == 1281)
      {
LABEL_23:
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
        v18 = 16;
      }
      else
      {
LABEL_17:
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
        v18 = 8;
      }
      return (uint64_t)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
    }
    else
    {
LABEL_45:
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else
  {
    v13 = v9[1];
    *a3 = a2;
    a3[1] = v13;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t TypeFromMetadata;
  uint64_t v9;
  uint64_t ObjCRODataPtr;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  void *__p[2];
  uint64_t v17;
  _QWORD v18[2];

  v7 = a2[1];
  if ((swift_reflection_classIsSwiftMask & *(_QWORD *)(v7 + 32)) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v9 = *a2;
    ObjCRODataPtr = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, *a2);
    if (ObjCRODataPtr)
    {
      v14 = 0;
      v11 = !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), ObjCRODataPtr + 24, &v14, 8)|| v14 == 0;
      if (!v11 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488)))
      {
        TypeFromMetadata = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
        if (TypeFromMetadata)
          goto LABEL_12;
        v12 = *(_QWORD *)(a1 + 2504) & *(_QWORD *)(v7 + 8);
        if (v12)
        {
          TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v12, a4, a3);
LABEL_12:
          v14 = v9;
          v15 = a4;
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, (char *)&v14)[2] = TypeFromMetadata;
          if ((SHIBYTE(v17) & 0x80000000) == 0)
            return TypeFromMetadata;
LABEL_15:
          operator delete(__p[0]);
          return TypeFromMetadata;
        }
      }
    }
    TypeFromMetadata = 0;
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return TypeFromMetadata;
    goto LABEL_15;
  }
  v18[0] = *a2;
  v18[1] = v7;
  return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata((int32x2_t *)a1, (uint64_t)v18, a3, a4);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  __int32 v12;
  int v13;
  __int32 v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v20;
  unsigned int v21;
  unsigned __int32 v23;
  int32x2_t v24;
  unsigned __int32 v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t BoundGenericType;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  __int32 v36;
  int32x2_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  int v41;
  int v42;
  unsigned int v43;
  int v45;
  unsigned int v46;
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  void *__p;
  _BYTE *v52;
  _QWORD v53[2];
  void *v54;
  char v55[16];
  void *v56;
  void *v57;
  char v58;
  char v59;
  uint64_t v60;
  _BYTE *v61;
  void *v62;
  uint64_t v63;

  v8 = *(_QWORD *)(a2 + 8);
  v62 = *(void **)a2;
  v63 = v8;
  v9 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, &v62, a4);
  if (!v9)
    return 0;
  v10 = v9;
  if (!a4 || v62 == *(void **)a2)
  {
LABEL_28:
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor((uint64_t)a1, v10, &v60);
    if (v61)
    {
      v53[0] = v60;
      v53[1] = v61;
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>((uint64_t)a1, v53, &v54);
      if (v59)
      {
        if ((*v61 & 0x80) == 0)
        {
          BoundGenericType = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)&a1[37], (uint64_t)&v54, 0);
          goto LABEL_38;
        }
        v50[0] = v62;
        v50[1] = v63;
        v49[0] = v60;
        v49[1] = v61;
        swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst((uint64_t)a1, v50, v49, a3, (char **)&__p);
        v33 = __p;
        v34 = v52;
        if (__p == v52)
        {
          BoundGenericType = 0;
          v35 = __p;
          if (!__p)
          {
LABEL_37:
            if (v33 == v34)
            {
              BoundGenericType = 0;
LABEL_48:
              if (v59)
              {
                if (v58 && v56)
                {
                  v57 = v56;
                  operator delete(v56);
                }
                if (v55[15] < 0)
                  operator delete(v54);
              }
              return BoundGenericType;
            }
LABEL_38:
            if (BoundGenericType)
            {
              __p = v62;
              LOBYTE(v52) = a4;
              __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct((unint64_t)a1, (char *)&__p)[2] = BoundGenericType;
              if (a4)
              {
                if (v62 != *(void **)a2)
                {
                  __p = *(void **)a2;
                  LOBYTE(v52) = a4;
                  v36 = a1[2].i32[0];
                  if (v36)
                  {
                    v37 = *a1;
                    v38 = (v36 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&__p, (char *)&v52);
                    v39 = *(_QWORD *)&v37 + 24 * v38;
                    v40 = *(void **)v39;
                    v41 = *(unsigned __int8 *)(v39 + 8);
                    if (__p == *(void **)v39 && v52 == v41)
                    {
LABEL_44:
                      *(_QWORD *)v39 = -2;
                      *(_BYTE *)(v39 + 8) = 0;
                      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
                    }
                    else
                    {
                      v45 = 1;
                      while (v40 != (void *)-1 || v41)
                      {
                        v46 = v38 + v45++;
                        v38 = v46 & (v36 - 1);
                        v39 = *(_QWORD *)&v37 + 24 * v38;
                        v40 = *(void **)v39;
                        v41 = *(unsigned __int8 *)(v39 + 8);
                        if (__p == *(void **)v39 && v52 == v41)
                          goto LABEL_44;
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_48;
          }
        }
        else
        {
          v48[0] = __p;
          v48[1] = (v52 - (_BYTE *)__p) >> 3;
          BoundGenericType = swift::reflection::TypeRefBuilder::createBoundGenericType((uint64_t)&a1[37], (uint64_t)&v54, (size_t)v48);
          v35 = __p;
          if (!__p)
            goto LABEL_37;
        }
        v52 = v35;
        operator delete(v35);
        goto LABEL_37;
      }
    }
    return 0;
  }
  v54 = v62;
  v55[0] = a4;
  v11 = *a1;
  v12 = a1[2].i32[0];
  if (!v12)
  {
    v23 = 0;
LABEL_18:
    v16 = *(_QWORD *)&v11 + 24 * v23;
    goto LABEL_19;
  }
  v13 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
  v14 = v12 - 1;
  v15 = (v12 - 1) & v13;
  v16 = *(_QWORD *)&v11 + 24 * v15;
  v17 = *(void **)v16;
  v18 = *(unsigned __int8 *)(v16 + 8);
  if (v54 != *(void **)v16 || v55[0] != v18)
  {
    v20 = 1;
    while (v17 != (void *)-1 || v18)
    {
      v21 = v15 + v20++;
      v15 = v21 & v14;
      v16 = *(_QWORD *)&v11 + 24 * v15;
      v17 = *(void **)v16;
      v18 = *(unsigned __int8 *)(v16 + 8);
      if (v54 == *(void **)v16 && v55[0] == v18)
        goto LABEL_19;
    }
    v11 = *a1;
    v23 = a1[2].u32[0];
    goto LABEL_18;
  }
LABEL_19:
  v24 = *a1;
  v25 = a1[2].u32[0];
  if (v16 == *(_QWORD *)a1 + 24 * v25)
    goto LABEL_28;
  v54 = *(void **)a2;
  v55[0] = a4;
  if (v25)
  {
    v26 = (v25 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
    v27 = *(_QWORD *)&v24 + 24 * v26;
    v28 = *(void **)v27;
    v29 = *(unsigned __int8 *)(v27 + 8);
    if (v54 == *(void **)v27 && v55[0] == v29)
    {
LABEL_26:
      *(_QWORD *)v27 = -2;
      *(_BYTE *)(v27 + 8) = 0;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v42 = 1;
      while (v28 != (void *)-1 || v29)
      {
        v43 = v26 + v42++;
        v26 = v43 & (v25 - 1);
        v27 = *(_QWORD *)&v24 + 24 * v26;
        v28 = *(void **)v27;
        v29 = *(unsigned __int8 *)(v27 + 8);
        if (v54 == *(void **)v27 && v55[0] == v29)
          goto LABEL_26;
      }
    }
  }
  return *(_QWORD *)(v16 + 16);
}

void std::vector<swift::reflection::TypeRef const*>::reserve(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = v4 - v2;
    v8 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    v9 = v8;
    if (v4 == v2)
      goto LABEL_11;
    if ((unint64_t)(v7 - 8) >= 0x58)
    {
      v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v10 = v7 >> 3;
        v11 = ((unint64_t)(v7 - 8) >> 3) + 1;
        v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = &v4[-v12];
        v9 = &v8[-v12];
        v14 = &v6[8 * v10 - 16];
        v15 = (__int128 *)(v4 - 16);
        v16 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 4;
        }
        while (v16);
        v4 = v13;
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v18 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v9 - 1) = v18;
      v9 -= 8;
    }
    while (v4 != v2);
LABEL_11:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v6[v5];
    if (v2)
      operator delete(v2);
  }
}

uint64_t swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getExtendedFlags(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
    return *(unsigned int *)(((a1
                             + 8 * (unsigned __int16)*(_QWORD *)(a1 + 8)
                             + 4
                             * ((unsigned __int16)*(_QWORD *)(a1 + 8) & (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) << 38) >> 63))
                             + 31) & 0xFFFFFFFFFFFFFFF8)
                           + 8 * ((v1 >> 27) & 1)
                           + 8 * ((v1 >> 28) & 1));
  else
    return 0;
}

uint64_t swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::hasThrownError(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
    return *(_BYTE *)(((a1
                      + 8 * (unsigned __int16)*(_QWORD *)(a1 + 8)
                      + 4
                      * ((unsigned __int16)*(_QWORD *)(a1 + 8) & (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) << 38) >> 63))
                      + 31) & 0xFFFFFFFFFFFFFFF8)
                    + 8 * ((v1 >> 27) & 1)
                    + 8 * ((v1 >> 28) & 1)) & 1;
  else
    return 0;
}

uint64_t swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getThrownError(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v3;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 0x80000000) == 0)
    return 0;
  v3 = (_BYTE *)(((a1
                 + 8 * (unsigned __int16)v1
                 + 4 * ((unsigned __int16)v1 & (unint64_t)((uint64_t)(v1 << 38) >> 63))
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + 8 * ((v1 >> 27) & 1)
               + 8 * ((v1 >> 28) & 1));
  if ((*v3 & 1) != 0)
    return *(_QWORD *)((unint64_t)&v3[4 * ((v1 >> 31) & 1) + 7] & 0xFFFFFFFFFFFFFFF8);
  else
    return 0;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver>(uint64_t a1@<X0>, uint64_t *a2@<X1>, swift::Demangle::__runtime::NodeFactory *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;
  swift::Demangle::__runtime::Node *v11;
  unsigned int *Node;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string::size_type v19;
  std::string *v20;
  size_t v21;
  void *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;
  std::string v32;
  std::string __p;
  std::string v34;

  v31 = a4;
  v8 = *a2;
  if ((*a2 & 1) != 0)
  {
    v15 = malloc_type_malloc(0x10uLL, 0xAD4E4A50uLL);
    if (v15)
    {
      v16 = v15;
      if (((*(uint64_t (**)(_QWORD, unint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v8 & 0xFFFFFFFFFFFFFFFELL, v15, 16) & 1) != 0)
      {
        memset(&__p, 0, sizeof(__p));
        if ((*(unsigned int (**)(_QWORD, _QWORD, std::string *))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v16[1], &__p))
        {
          v32 = __p;
          v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          size = __p.__r_.__value_.__l.__size_;
          v19 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          memset(&v32, 0, sizeof(v32));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          size = 0;
          v19 = 0;
          LODWORD(v17) = 0;
        }
      }
      else
      {
        size = 0;
        v19 = 0;
        LODWORD(v17) = 0;
        memset(&v32, 0, sizeof(v32));
      }
      free(v16);
    }
    else
    {
      size = 0;
      v19 = 0;
      LODWORD(v17) = 0;
      memset(&v32, 0, sizeof(v32));
    }
    if ((v17 & 0x80u) == 0)
      v20 = &v32;
    else
      v20 = (std::string *)v19;
    if ((v17 & 0x80u) == 0)
      v21 = v17;
    else
      v21 = size;
    if (v21 < 4 || LODWORD(v20->__r_.__value_.__l.__data_) != 1349801055)
    {
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::objcProtocol(v20, v21, a5);
LABEL_30:
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v22 = (void *)v32.__r_.__value_.__r.__words[0];
      goto LABEL_57;
    }
    v30 = 0;
    v23 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)a3, v20, v21, v29);
    v24 = v30;
    if (v30 == v29)
    {
      v25 = 4;
      v24 = v29;
    }
    else
    {
      if (!v30)
        goto LABEL_39;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_39:
    if (v23)
    {
      while (1)
      {
        v26 = *(unsigned __int16 *)(v23 + 16);
        v27 = (v26 - 190) > 0x2E || ((1 << (v26 + 66)) & 0x640000000001) == 0;
        if (v27 && v26 != 99)
          break;
        v28 = *(unsigned __int8 *)(v23 + 18);
        if (v28 != 1)
        {
          if (v28 != 5 || *(_DWORD *)(v23 + 8) != 1)
            goto LABEL_53;
          v23 = *(_QWORD *)v23;
        }
        v23 = *(_QWORD *)v23;
      }
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::swiftProtocol((size_t *)v23, a5);
    }
    else
    {
LABEL_53:
      a5->__r_.__value_.__s.__data_[0] = 0;
      a5[1].__r_.__value_.__s.__data_[8] = 0;
    }
    goto LABEL_30;
  }
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v8 & *(_QWORD *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v32);
  v9 = (_DWORD *)v32.__r_.__value_.__l.__size_;
  if (!v32.__r_.__value_.__l.__size_
    || (*(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v32.__r_.__value_.__l.__data_,
        (v10 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, &__p, a3, 50)) == 0)|| ((v11 = (swift::Demangle::__runtime::Node *)v10, (*v9 & 0x10) != 0) || (*v9 & 0x1F) == 3)&& (Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232), swift::Demangle::__runtime::Node::addChild(Node, v11, a3, v13, v14), (v11 = (swift::Demangle::__runtime::Node *)Node) == 0))
  {
    a5->__r_.__value_.__s.__data_[0] = 0;
    a5[1].__r_.__value_.__s.__data_[8] = 0;
    return;
  }
  swift::Demangle::__runtime::mangleNode((size_t *)v11, (uint64_t)&__p);
  if (LODWORD(__p.__r_.__value_.__l.__data_))
  {
    a5->__r_.__value_.__s.__data_[0] = 0;
    a5[1].__r_.__value_.__s.__data_[8] = 0;
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_56;
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v32 = v34;
  *a5 = v32;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_56:
    v22 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_57:
    operator delete(v22);
  }
}

void **std::vector<std::optional<std::pair<std::string,BOOL>>>::~vector[abi:nn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 17) < 0)
          operator delete(*(v3 - 5));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;

  if (!a2)
  {
LABEL_19:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  v5 = result;
  v7 = result + 72;
  v6 = *(_QWORD *)(result + 72);
  v8 = *(_DWORD *)(result + 88);
  if (v8)
  {
    v9 = (v8 - 1) & (37 * a2);
    v10 = (uint64_t *)(v6 + 48 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_9;
    v12 = 1;
    while (v11 != -1)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v10 = (uint64_t *)(v6 + 48 * v9);
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_9;
    }
  }
  v10 = (uint64_t *)(v6 + 48 * v8);
LABEL_9:
  if (v10 != (uint64_t *)(v6 + 48 * v8))
  {
    v14 = v10[1];
    *a3 = a2;
    a3[1] = v14;
    return result;
  }
  v41 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(result + 2488) + 32))(*(_QWORD *)(result + 2488), a2, &v41, 4);
  if ((result & 1) == 0)
    goto LABEL_19;
  HIWORD(v34) = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v5 + 2488) + 32))(*(_QWORD *)(v5 + 2488), a2 + 4, &v34, 8);
  if ((result & 1) == 0)
    goto LABEL_19;
  v15 = 24;
  if ((v41 & 0x200) == 0)
    v15 = 16;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(v5 + 2488) + 24))(&v38, *(_QWORD *)(v5 + 2488), a2, (((unsigned __int16)v34 + 3) & 0x1FFFC) + 12 * WORD1(v34) + (((unint64_t)v41 >> 7) & 8) + v15);
  v16 = v38;
  if (!v38)
  {
    *a3 = 0;
    a3[1] = 0;
    v38 = 0;
    goto LABEL_48;
  }
  v38 = 0;
  v34 = a2;
  v35 = v16;
  v17 = v36;
  if (v40)
  {
    if (v40 == v39)
    {
      v37 = v36;
      (*(void (**)(void))(*(_QWORD *)v40 + 24))();
    }
    else
    {
      v37 = v40;
      v40 = 0;
    }
  }
  else
  {
    v37 = 0;
  }
  v18 = *(_DWORD *)(v5 + 88);
  if (v18)
  {
    v19 = *(_QWORD *)(v5 + 72);
    v20 = v18 - 1;
    v21 = (37 * v34) & v20;
    v22 = (_QWORD *)(v19 + 48 * v21);
    v23 = *v22;
    if (v34 == *v22)
      goto LABEL_37;
    v24 = 0;
    v25 = 1;
    while (v23 != -1)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == -2;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & v20;
      v22 = (_QWORD *)(v19 + 48 * v21);
      v23 = *v22;
      if (v34 == *v22)
        goto LABEL_37;
    }
    if (v24)
      v28 = v24;
    else
      v28 = v22;
  }
  else
  {
    v28 = 0;
  }
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>(v7, v28, &v34, &v35);
LABEL_37:
  v29 = v35;
  v35 = 0;
  if (v29)
  {
    v42 = v29;
    if (!v37)
      goto LABEL_56;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v37 + 48))(v37, &v42);
  }
  if (v37 == v36)
  {
    v30 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_45;
    v30 = 5;
    v17 = v37;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v30))(v17);
LABEL_45:
  *a3 = a2;
  a3[1] = v16;
  v31 = v38;
  v38 = 0;
  if (v31)
  {
    v34 = v31;
    if (v40)
    {
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v34);
      goto LABEL_48;
    }
LABEL_56:
    v33 = std::__throw_bad_function_call[abi:nn180100]();
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(v33);
  }
LABEL_48:
  result = (uint64_t)v40;
  if (v40 == v39)
  {
    v32 = 4;
    result = (uint64_t)v39;
    return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v32))();
  }
  if (v40)
  {
    v32 = 5;
    return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v32))();
  }
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unint64_t *v29;
  _DWORD *v30;
  _BYTE *SymbolicMangledNameStringRef;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const char *v37;
  void (**v38)(swift::Demangle::__runtime::NodeFactory *__hidden);
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char **v45;
  const char *v46;
  _QWORD *v47;
  uint64_t v48;
  const char *v49;
  _BYTE *v50;
  const char *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  const char *v59;
  _BYTE *v60;
  const char *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, _QWORD);
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, _QWORD);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t *v94;
  char *v95;
  unint64_t *v96;
  unint64_t v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t *v101;
  char *v102;
  unint64_t *v103;
  unint64_t v104;
  char *v105;
  unint64_t *v106;
  char *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t GenericSignature;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *__p;
  _DWORD *v136;
  unsigned __int16 *v137;
  _QWORD v139[2];
  _QWORD v140[2];
  void (**v141)(swift::Demangle::__runtime::NodeFactory *__hidden);
  void (*v142)(void (**)(swift::Demangle::__runtime::NodeFactory *__hidden), uint64_t, _QWORD);
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  int v180;
  _BYTE v181[24];
  _BYTE *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  int v222;
  _BYTE v223[24];
  _BYTE *v224;
  uint64_t v225;
  uint64_t (*v226)(uint64_t, uint64_t, _QWORD);
  unsigned __int16 v227;
  uint64_t *v228;
  uint64_t v229[2];

  v4 = *a3;
  if (!*a3)
  {
    v6 = 0;
    v5 = 0;
    v28 = a3[1];
    if (!a3[1])
      goto LABEL_184;
    goto LABEL_32;
  }
  v137 = a3;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = a1 + 296;
  do
  {
    v10 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(v9, 0, v8);
    if (!v10)
    {
      *(_WORD *)(a4 + 16) = 1;
      *(_QWORD *)a4 = "Failed to read generic parameter type in runtime generic signature.";
      *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      goto LABEL_189;
    }
    v11 = v10;
    if (v6 < v7)
    {
      *(_QWORD *)v6 = v10;
      goto LABEL_4;
    }
    v12 = (v6 - v5) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
LABEL_194:
      abort();
    if ((v7 - v5) >> 2 > v13)
      v13 = (v7 - v5) >> 2;
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
LABEL_195:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)&v15[8 * v12];
    *v16 = v11;
    v17 = (char *)v16;
    if (v6 != v5)
    {
      v18 = v6 - v5 - 8;
      if (v18 < 0x168
        || (v21 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8, &v15[v6 - v5 - 8 - v21] > &v15[v6 - v5 - 8])
        || &v6[-v21 - 8] > v6 - 8
        || (unint64_t)(v5 - v15) < 0x20)
      {
        v19 = v6;
        v17 = &v15[8 * v12];
      }
      else
      {
        v22 = (v18 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v6[-v23];
        v17 = (char *)&v16[v23 / 0xFFFFFFFFFFFFFFF8];
        v24 = &v15[8 * v12 - 16];
        v25 = v6 - 16;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_21;
      }
      do
      {
        v20 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v20;
        v17 -= 8;
      }
      while (v19 != v5);
    }
LABEL_21:
    v7 = &v15[8 * v14];
    if (v5)
      operator delete(v5);
    v5 = v17;
    v6 = (char *)v16;
LABEL_4:
    v6 += 8;
    ++v8;
  }
  while (v8 != v4);
  a3 = v137;
  v28 = v137[1];
  if (!v137[1])
  {
LABEL_184:
    __p = 0;
LABEL_185:
    v115 = (v6 - v5) >> 3;
    v116 = __p;
    GenericSignature = swift::reflection::TypeRefBuilder::createGenericSignature(a1 + 296, (uint64_t *)v5, v115);
    *(_WORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = GenericSignature;
    if (!GenericSignature)
    {
      *(_QWORD *)a4 = "unknown error";
      *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a4 + 16) = 1;
    }
    if (!__p)
      goto LABEL_189;
LABEL_188:
    operator delete(v116);
    goto LABEL_189;
  }
LABEL_32:
  __p = 0;
  v29 = 0;
  v30 = (_DWORD *)*((_QWORD *)a3 + 2);
  v136 = &v30[3 * v28];
  v129 = 0;
  while (2)
  {
    if ((*v30 & 0x1Fu) < 6 || (*v30 & 0x1F) == 31)
    {
      v185[1] = 0;
      v185[2] = 0;
      v186 = 0;
      v188 = 0;
      v189 = 0;
      v187 = 2400;
      v185[0] = off_B5288;
      v224 = 0;
      v191 = 0;
      v192 = 0;
      v190 = 0;
      v193 = 0;
      v194 = 0u;
      v195 = 0u;
      v196 = 0u;
      v197 = 0u;
      v198 = 0u;
      v199 = 0u;
      v200 = 0u;
      v201 = 0u;
      v202 = 0u;
      v203 = 0u;
      v204 = 0u;
      v205 = 0u;
      v206 = 0u;
      v207 = 0u;
      v208 = 0u;
      v209 = 0u;
      v210 = 0u;
      v211 = 0u;
      v212 = 0u;
      v213 = 0u;
      v214 = 0u;
      v215 = 0u;
      v216 = 0u;
      v217 = 0u;
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      v221 = 0u;
      v222 = 0;
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[1] + 4, (const char *)a2);
      v184 = 0;
      v34 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v185, (uint64_t)SymbolicMangledNameStringRef, v33, v183);
      v35 = v184;
      if (v184 == v183)
      {
        v35 = v183;
        v36 = 4;
      }
      else
      {
        if (!v184)
          goto LABEL_43;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_43:
      if (v34)
      {
        v225 = a1 + 296;
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v225, (_QWORD *)v34, 0, (uint64_t)&v141);
        if ((_WORD)v143)
        {
          if ((unsigned __int16)v143 == 1)
            v142(v141, 3, 0);
        }
        else
        {
          v38 = v141;
          if (v141)
          {
            switch(*v30 & 0x1F)
            {
              case 0:
                v142 = 0;
                v143 = 0;
                v144 = 0;
                v146 = 0;
                v147 = 0;
                v145 = 2400;
                v141 = off_B5288;
                v182 = 0;
                v149 = 0;
                v150 = 0;
                v148 = 0;
                v151 = 0;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                v160 = 0u;
                v161 = 0u;
                v162 = 0u;
                v163 = 0u;
                v164 = 0u;
                v165 = 0u;
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v170 = 0u;
                v171 = 0u;
                v172 = 0u;
                v173 = 0u;
                v174 = 0u;
                v175 = 0u;
                v176 = 0u;
                v177 = 0u;
                v178 = 0u;
                v179 = 0u;
                v180 = 0;
                v39 = (uint64_t)v30 + *(_QWORD *)a2 - *(_QWORD *)(a2 + 8) + 8;
                LODWORD(v229[0]) = 0;
                v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v39, v229, 4);
                v41 = 0;
                if (!v40)
                  goto LABEL_112;
                v42 = v39;
                v43 = SLODWORD(v229[0]);
                LODWORD(v229[0]) &= 0xFFFFFFFC;
                v44 = v42 + (v43 & 0xFFFFFFFFFFFFFFFCLL);
                v225 = v44;
                if ((v43 & 1) == 0)
                  goto LABEL_53;
                if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488)))
                {
                  v44 = v225;
LABEL_53:
                  v41 = v44 | ((unint64_t)v43 >> 1) & 1;
                }
                else
                {
                  v41 = 0;
                }
LABEL_112:
                v225 = v41;
                v87 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver>(a1, &v225, (swift::Demangle::__runtime::NodeFactory *)&v141, a1 + 296);
                v88 = v87;
                if (v87)
                {
                  v128 = v87;
                  v89 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8;
                  if (v29 >= (unint64_t *)v129)
                  {
                    v90 = ((char *)v29 - (char *)__p) >> 4;
                    v91 = v90 + 1;
                    if ((unint64_t)(v90 + 1) >> 60)
                      goto LABEL_194;
                    if ((v129 - (char *)__p) >> 3 > v91)
                      v91 = (v129 - (char *)__p) >> 3;
                    v92 = 0xFFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v129 - (char *)__p) < 0x7FFFFFFFFFFFFFF0)
                      v92 = v91;
                    v132 = v92;
                    if (v92)
                    {
                      if (v92 >> 60)
                        goto LABEL_195;
                      v93 = (char *)operator new(16 * v92);
                    }
                    else
                    {
                      v93 = 0;
                    }
                    v94 = (unint64_t *)&v93[16 * v90];
                    *v94 = v89;
                    v88 = v128;
                    v94[1] = v128;
                    if (v29 == __p)
                    {
                      v98 = &v93[16 * v90];
                      v96 = __p;
                      v97 = v132;
                    }
                    else
                    {
                      v95 = &v93[16 * v90];
                      v96 = __p;
                      v97 = v132;
                      do
                      {
                        v98 = v95 - 16;
                        *((_OWORD *)v95 - 1) = *((_OWORD *)v29 - 1);
                        v29 -= 2;
                        v95 -= 16;
                      }
                      while (v29 != __p);
                    }
                    v129 = &v93[16 * v97];
                    v29 = v94 + 2;
                    if (v96)
                      operator delete(v96);
                    __p = (unint64_t *)v98;
                  }
                  else
                  {
                    *v29 = v89;
                    v88 = v87;
                    v29[1] = v87;
                    v29 += 2;
                  }
                }
                else
                {
                  *(_WORD *)(a4 + 16) = 1;
                  *(_QWORD *)a4 = "Failed to read protocol type in conformance requirement of runtime generic signature.";
                  *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                }
                v141 = off_B5288;
                v99 = v182;
                if (v182 == v181)
                {
                  v99 = v181;
                  v100 = 4;
                }
                else
                {
                  if (!v182)
                    goto LABEL_138;
                  v100 = 5;
                }
                (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_138:
                v141 = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v144);
                if (v146)
                  *(_BYTE *)(v146 + 48) = 0;
                if (v88)
LABEL_141:
                  LOBYTE(v34) = 1;
                else
LABEL_166:
                  LOBYTE(v34) = 0;
                break;
              case 1:
                v142 = 0;
                v143 = 0;
                v144 = 0;
                v146 = 0;
                v147 = 0;
                v145 = 2400;
                v141 = off_B5288;
                v182 = 0;
                v149 = 0;
                v150 = 0;
                v148 = 0;
                v151 = 0;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                v160 = 0u;
                v161 = 0u;
                v162 = 0u;
                v163 = 0u;
                v164 = 0u;
                v165 = 0u;
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v170 = 0u;
                v171 = 0u;
                v172 = 0u;
                v173 = 0u;
                v174 = 0u;
                v175 = 0u;
                v176 = 0u;
                v177 = 0u;
                v178 = 0u;
                v179 = 0u;
                v180 = 0;
                v122 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v37);
                v50 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v49);
                v140[0] = v122;
                v140[1] = v50;
                LOBYTE(v229[0]) = 0;
                v52 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v50, v51);
                v118 = v53;
                v123 = (uint64_t)v52;
                v54 = (uint64_t *)operator new(0x28uLL);
                *v54 = (uint64_t)off_B4460;
                v54[1] = (uint64_t)v140;
                v54[2] = a1;
                v54[3] = (uint64_t)v229;
                v54[4] = (uint64_t)&v141;
                v228 = v54;
                v55 = (_QWORD *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v141, v123, v118, &v225);
                v56 = v228;
                if (v228 == &v225)
                {
                  v57 = v55;
                  v56 = &v225;
                  v58 = 4;
                }
                else
                {
                  if (!v228)
                    goto LABEL_79;
                  v57 = v55;
                  v58 = 5;
                }
                (*(void (**)(void))(*v56 + 8 * v58))();
                v55 = v57;
LABEL_79:
                v229[0] = a1 + 296;
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v229, v55, 0, (uint64_t)&v225);
                v69 = v227;
                if (v227 == 1)
                {
                  *(_WORD *)(a4 + 16) = 1;
                  v70 = v225;
                  v71 = v226;
                  *(_QWORD *)(a4 + 8) = v226;
                  *(_QWORD *)a4 = v71(v70, 2, 0);
                }
                else
                {
                  v126 = v227;
                  if (v227)
                    v72 = 0;
                  else
                    v72 = v225;
                  v73 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8 | 2;
                  if (v29 >= (unint64_t *)v129)
                  {
                    v79 = ((char *)v29 - (char *)__p) >> 4;
                    v80 = v79 + 1;
                    if ((unint64_t)(v79 + 1) >> 60)
                      goto LABEL_194;
                    if ((v129 - (char *)__p) >> 3 > v80)
                      v80 = (v129 - (char *)__p) >> 3;
                    v81 = 0xFFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v129 - (char *)__p) < 0x7FFFFFFFFFFFFFF0)
                      v81 = v80;
                    v130 = v81;
                    if (v81)
                    {
                      v120 = v73;
                      if (v81 >> 60)
                        goto LABEL_195;
                      v82 = (char *)operator new(16 * v81);
                      v73 = v120;
                    }
                    else
                    {
                      v82 = 0;
                    }
                    v101 = (unint64_t *)&v82[16 * v79];
                    *v101 = v73;
                    v101[1] = v72;
                    if (v29 == __p)
                    {
                      v105 = &v82[16 * v79];
                      v103 = __p;
                      v69 = v126;
                      v104 = v130;
                    }
                    else
                    {
                      v102 = &v82[16 * v79];
                      v103 = __p;
                      v69 = v126;
                      v104 = v130;
                      do
                      {
                        v105 = v102 - 16;
                        *((_OWORD *)v102 - 1) = *((_OWORD *)v29 - 1);
                        v29 -= 2;
                        v102 -= 16;
                      }
                      while (v29 != __p);
                    }
                    v129 = &v82[16 * v104];
                    v29 = v101 + 2;
                    if (v103)
                      operator delete(v103);
                    __p = (unint64_t *)v105;
                  }
                  else
                  {
                    *v29 = v73;
                    v29[1] = v72;
                    v29 += 2;
                    v69 = v126;
                  }
                }
                if (v227 == 1)
                  v226(v225, 3, 0);
                v141 = off_B5288;
                v111 = v182;
                if (v182 == v181)
                {
                  v111 = v181;
                  v112 = 4;
                }
                else
                {
                  if (!v182)
                    goto LABEL_163;
                  v112 = 5;
                }
                (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_163:
                v141 = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v144);
                if (v146)
                  *(_BYTE *)(v146 + 48) = 0;
                if (v69 == 1)
                  goto LABEL_166;
                goto LABEL_141;
              case 2:
                v142 = 0;
                v143 = 0;
                v144 = 0;
                v146 = 0;
                v147 = 0;
                v145 = 2400;
                v141 = off_B5288;
                v182 = 0;
                v149 = 0;
                v150 = 0;
                v148 = 0;
                v151 = 0;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                v160 = 0u;
                v161 = 0u;
                v162 = 0u;
                v163 = 0u;
                v164 = 0u;
                v165 = 0u;
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v170 = 0u;
                v171 = 0u;
                v172 = 0u;
                v173 = 0u;
                v174 = 0u;
                v175 = 0u;
                v176 = 0u;
                v177 = 0u;
                v178 = 0u;
                v179 = 0u;
                v180 = 0;
                v124 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v37);
                v60 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v59);
                v139[0] = v124;
                v139[1] = v60;
                LOBYTE(v229[0]) = 0;
                v62 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v60, v61);
                v119 = v63;
                v125 = (uint64_t)v62;
                v64 = (uint64_t *)operator new(0x28uLL);
                *v64 = (uint64_t)off_B4460;
                v64[1] = (uint64_t)v139;
                v64[2] = a1;
                v64[3] = (uint64_t)v229;
                v64[4] = (uint64_t)&v141;
                v228 = v64;
                v65 = (_QWORD *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v141, v125, v119, &v225);
                v66 = v228;
                if (v228 == &v225)
                {
                  v67 = v65;
                  v66 = &v225;
                  v68 = 4;
                }
                else
                {
                  if (!v228)
                    goto LABEL_88;
                  v67 = v65;
                  v68 = 5;
                }
                (*(void (**)(void))(*v66 + 8 * v68))();
                v65 = v67;
LABEL_88:
                v229[0] = a1 + 296;
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v229, v65, 0, (uint64_t)&v225);
                v74 = v227;
                if (v227 == 1)
                {
                  *(_WORD *)(a4 + 16) = 1;
                  v75 = v225;
                  v76 = v226;
                  *(_QWORD *)(a4 + 8) = v226;
                  *(_QWORD *)a4 = v76(v75, 2, 0);
                }
                else
                {
                  v127 = v227;
                  if (v227)
                    v77 = 0;
                  else
                    v77 = v225;
                  v78 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8 | 1;
                  if (v29 >= (unint64_t *)v129)
                  {
                    v83 = ((char *)v29 - (char *)__p) >> 4;
                    v84 = v83 + 1;
                    if ((unint64_t)(v83 + 1) >> 60)
                      goto LABEL_194;
                    if ((v129 - (char *)__p) >> 3 > v84)
                      v84 = (v129 - (char *)__p) >> 3;
                    v85 = 0xFFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v129 - (char *)__p) < 0x7FFFFFFFFFFFFFF0)
                      v85 = v84;
                    v131 = v85;
                    if (v85)
                    {
                      v121 = v78;
                      if (v85 >> 60)
                        goto LABEL_195;
                      v86 = (char *)operator new(16 * v85);
                      v78 = v121;
                    }
                    else
                    {
                      v86 = 0;
                    }
                    v106 = (unint64_t *)&v86[16 * v83];
                    *v106 = v78;
                    v106[1] = v77;
                    if (v29 == __p)
                    {
                      v110 = &v86[16 * v83];
                      v108 = __p;
                      v74 = v127;
                      v109 = v131;
                    }
                    else
                    {
                      v107 = &v86[16 * v83];
                      v108 = __p;
                      v74 = v127;
                      v109 = v131;
                      do
                      {
                        v110 = v107 - 16;
                        *((_OWORD *)v107 - 1) = *((_OWORD *)v29 - 1);
                        v29 -= 2;
                        v107 -= 16;
                      }
                      while (v29 != __p);
                    }
                    v129 = &v86[16 * v109];
                    v29 = v106 + 2;
                    if (v108)
                      operator delete(v108);
                    __p = (unint64_t *)v110;
                  }
                  else
                  {
                    *v29 = v78;
                    v29[1] = v77;
                    v29 += 2;
                    v74 = v127;
                  }
                }
                if (v227 == 1)
                  v226(v225, 3, 0);
                v141 = off_B5288;
                v113 = v182;
                if (v182 == v181)
                {
                  v113 = v181;
                  v114 = 4;
                }
                else
                {
                  if (!v182)
                    goto LABEL_178;
                  v114 = 5;
                }
                (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_178:
                v141 = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v144);
                if (v146)
                  *(_BYTE *)(v146 + 48) = 0;
                if (v74 != 1)
                  goto LABEL_141;
                goto LABEL_166;
              case 3:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected same conformance requirement in runtime generic signature";
                goto LABEL_56;
              case 4:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected same-shape requirement in runtime generic signature";
                goto LABEL_56;
              case 5:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected invertible protocol in runtime generic signature";
                goto LABEL_56;
              case 0x1F:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected layout requirement in runtime generic signature";
                goto LABEL_56;
              default:
                goto LABEL_141;
            }
LABEL_57:
            v185[0] = off_B5288;
            v47 = v224;
            if (v224 == v223)
            {
              v47 = v223;
              v48 = 4;
            }
            else
            {
              if (!v224)
              {
LABEL_62:
                v185[0] = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v186);
                if (v188)
                  *(_BYTE *)(v188 + 48) = 0;
                if ((v34 & 1) == 0)
                  goto LABEL_192;
                v30 += 3;
                if (v30 == v136)
                  goto LABEL_185;
                continue;
              }
              v48 = 5;
            }
            (*(void (**)(void))(*v47 + 8 * v48))();
            goto LABEL_62;
          }
        }
        LOBYTE(v34) = 0;
      }
      v45 = (const char **)a4;
      *(_WORD *)(a4 + 16) = 1;
      v46 = "Failed to read subject type in requirement of runtime generic signature.";
LABEL_56:
      *v45 = v46;
      v45[1] = (const char *)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      goto LABEL_57;
    }
    break;
  }
  *(_WORD *)(a4 + 16) = 1;
  *(_QWORD *)a4 = "unknown kind";
  *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_192:
  v116 = __p;
  if (__p)
    goto LABEL_188;
LABEL_189:
  if (v5)
    operator delete(v5);
}

unsigned int *swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *result;
  if ((v2 & 0x100) == 0)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }
  v3 = result + 4;
  if ((v2 & 0x1000) != 0)
  {
    v4 = (char *)&swift::externalTargetImplicitGenericParamDescriptors(void)::buffer;
    if ((v2 & 0x800) == 0)
      goto LABEL_7;
  }
  else
  {
    v4 = (char *)((((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
                + 4 * ((v2 >> 9) & 1)
                + 4 * ((v2 >> 10) & 1));
    if ((v2 & 0x800) == 0)
    {
      v4 += *((unsigned __int16 *)result + 4);
LABEL_7:
      v5 = *((unsigned __int16 *)result + 4);
      v6 = 1;
      goto LABEL_9;
    }
  }
  v6 = 0;
  v5 = 0;
LABEL_9:
  v7 = *result & 0x1100;
  if (v7 == 256)
    v8 = *(unsigned __int16 *)v3;
  else
    v8 = 0;
  v9 = (((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
     + 4 * ((v2 >> 9) & 1)
     + 4 * ((v2 >> 10) & 1);
  v10 = ((v9 + v8 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * *((unsigned __int16 *)result + 5);
  if ((v2 & 0x2000) != 0)
  {
    if (v6)
    {
      v13 = *((unsigned __int16 *)result + 4);
      if (v7 != 256)
      {
LABEL_16:
        v14 = 0;
LABEL_19:
        v15 = (v9 + v14 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v16 = *((unsigned __int16 *)result + 9) + *((unsigned __int16 *)result + 5);
        if (v6)
          v17 = *((unsigned __int16 *)result + 4);
        else
          v17 = 0;
        v11 = *(_DWORD *)(v15 + 12 * v16);
        if (v7 == 256)
          v18 = *(unsigned __int16 *)v3;
        else
          v18 = 0;
        v12 = ((v9 + v18 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v16 + 4 * ((v2 >> 13) & 1);
        goto LABEL_26;
      }
    }
    else
    {
      v13 = 0;
      if (v7 != 256)
        goto LABEL_16;
    }
    v14 = *(unsigned __int16 *)v3;
    goto LABEL_19;
  }
  v11 = 0;
  v12 = 0;
LABEL_26:
  *(_QWORD *)a2 = *v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  return result;
}

void swift::reflection::TypeRefBuilder::createSubstitutionMap(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;

  v5 = *a1;
  v6 = a1[1];
  v7 = v6 - *a1;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (a3 == v7 >> 3 && v6 != v5)
  {
    v12 = 0;
    do
    {
      v13 = 8 * v12;
      v14 = *(_QWORD *)(a2 + v13);
      v17 = *(_QWORD *)(*(_QWORD *)(*a1 + v13) + 12);
      v18 = 0;
      v15 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a4, (int *)&v17, &v18);
      v16 = v18;
      if ((v15 & 1) == 0)
      {
        v16 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>(a4, (uint64_t)&v17, (int *)&v17, v18);
        *(_QWORD *)v16 = v17;
        *((_QWORD *)v16 + 1) = 0;
      }
      *((_QWORD *)v16 + 1) = v14;
      ++v12;
    }
    while (a3 != v12);
  }
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCClassName(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v4;
  uint64_t v5;

  result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, a2);
  if (result)
  {
    v5 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), result + 24, &v5, 8))
    {
      v4 = v5 == 0;
    }
    else
    {
      v4 = 1;
    }
    if (v4)
      return 0;
    else
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488));
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;

  result = 0;
  v5 = (uint64_t *)a2[1];
  v6 = *v5;
  if ((unint64_t)*v5 > 0x7FF)
    LODWORD(v6) = 0;
  if ((int)v6 > 514)
  {
    if ((_DWORD)v6 != 515 && (_DWORD)v6 != 516)
      return result;
    return *(_QWORD *)(a1 + 2504) & v5[1];
  }
  if ((v6 - 512) < 3)
    return *(_QWORD *)(a1 + 2504) & v5[1];
  if (!(_DWORD)v6)
  {
    if ((swift_reflection_classIsSwiftMask & v5[4]) != 0)
    {
      do
      {
        v9 = *(_QWORD *)(a1 + 2504);
        result = v9 & v5[8];
        if (result || a3 == 0)
          break;
        v11 = v5[1] & v9;
        if (!v11)
          return 0;
        swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v11, &v13);
        v5 = v14;
        if (!v14)
          return 0;
        if ((unint64_t)*v14 <= 0x7FF && *v14 != 0)
          return 0;
        result = 0;
        *a2 = v13;
        a2[1] = v5;
      }
      while ((swift_reflection_classIsSwiftMask & v5[4]) != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(_QWORD *a1, char *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  char *v4;
  int v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  _OWORD v10[4];
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  if ((v2 & 1) == 0)
  {
    v8 = a2;
    v9 = a1;
    a2 = v8;
    a1 = v9;
    if (v6)
    {
      v7 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override)
        v7 = 0xFF51AFD7ED558CCDLL;
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      a2 = v8;
      a1 = v9;
    }
  }
  v3 = *a1;
  v13 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v10[0] = v3;
  v14 = 0;
  v4 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>((uint64_t)v10, &v14, (_BYTE *)v10 + 8, (unint64_t)v11, *a2);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v10, v14, v4, (char *)v11);
}

unint64_t *__swift::__runtime::llvm::hashing::detail::hash_state::mix(unint64_t *this, const char *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v2 = this[1];
  v4 = this[2];
  v3 = this[3];
  v5 = 0xB492B66FBE98F273 * __ROR8__(v2 + *this + v3 + *((_QWORD *)a2 + 1), 37);
  *this = v5;
  v6 = this[4];
  v7 = this[5];
  v8 = __ROR8__(v6 + v2 + *((_QWORD *)a2 + 6), 42);
  v9 = this[6];
  v10 = v9 ^ v5;
  *this = v10;
  this[1] = 0xB492B66FBE98F273 * v8;
  v11 = 0xB492B66FBE98F273 * v8 + v3 + *((_QWORD *)a2 + 5);
  v12 = 0xB492B66FBE98F273 * __ROR8__(v7 + v4, 33);
  this[1] = v11;
  this[2] = v12;
  this[3] = 0xB492B66FBE98F273 * v6;
  this[4] = v7 + v10;
  v13 = *(_QWORD *)a2 - 0x4B6D499041670D8DLL * v6;
  this[3] = v13;
  v14 = *((_QWORD *)a2 + 3);
  v15 = __ROR8__(v13 + v14 + v7 + v10, 21);
  this[4] = v15;
  v16 = __ROR8__(*((_QWORD *)a2 + 1) + *((_QWORD *)a2 + 2) + v13, 44);
  this[3] = *((_QWORD *)a2 + 1) + *((_QWORD *)a2 + 2) + v13 + v14;
  this[4] = v15 + v13 + v16;
  this[5] = v12 + v9;
  v17 = *((_QWORD *)a2 + 2) + v11;
  this[6] = v17;
  v18 = *((_QWORD *)a2 + 4) + v12 + v9;
  this[5] = v18;
  v19 = *((_QWORD *)a2 + 7);
  v20 = __ROR8__(v18 + v19 + v17, 21);
  this[6] = v20;
  v21 = v20 + v18 + __ROR8__(*((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 6) + v18, 44);
  this[5] = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 6) + v18 + v19;
  this[6] = v21;
  this[2] = v10;
  *this = v12;
  return this;
}

_BYTE *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(uint64_t a1, uint64_t *a2, _BYTE *__dst, unint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      v9 = *a2 + 64;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 120);
      v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273, 49);
      v12 = v10 ^ (v10 >> 47);
      v13 = *(_QWORD *)(a1 + 8);
      v14 = v13 + v10 + v11;
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      v19 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v10 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v10 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v20 = 0x9DDFEA08EB382D69
          * (v10 ^ (((0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v12 ^ (0xB492B66FBE98F273 * v10))));
      v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
      v22 = 0xB492B66FBE98F273 * __ROR8__(v12 - 0x622015F714C7D297 * (v19 ^ (v19 >> 47)), 33);
      v23 = *(_QWORD *)a1 - 0x6D8ED9027DD26057 * v10;
      v25 = *(_QWORD *)(a1 + 16);
      v24 = *(_QWORD *)(a1 + 24);
      v26 = v23 + v13 + v25;
      v27 = v21 ^ (0xB492B66FBE98F273 * __ROR8__(v14, 37));
      v28 = v22 + *(_QWORD *)(a1 + 32) + v21;
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v18;
      *(_QWORD *)(a1 + 80) = v27;
      *(_QWORD *)(a1 + 88) = v26 + v24;
      *(_QWORD *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(_QWORD *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(_QWORD *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      v9 = 64;
    }
    *a2 = v9;
    if (a1 + 1 - v8 <= a4)
    {
      memcpy((void *)a1, &__src + v8, 1 - v8);
      a1 += 1 - v8;
    }
  }
  return (_BYTE *)a1;
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine(__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *v14;
  char *v15;
  unint64_t v16;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *v23;
  char v24;
  char v25;
  __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *v26;
  __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *v27;
  __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *v28;
  char *v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  __int128 *v33;
  char *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;

  if (!a2)
    return __swift::__runtime::llvm::hashing::detail::hash_short(this, __src - (char *)this, *((_QWORD *)this + 15));
  if (this != (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)__src && __src != a4)
  {
    if ((char *)this + 1 != __src)
    {
      if (__src + 1 == a4)
      {
        v20 = *(a4 - 1);
        if (a4 - 1 != (char *)this)
          memmove((char *)this + 1, this, a4 - 1 - (char *)this);
        *(_BYTE *)this = v20;
        goto LABEL_45;
      }
      v7 = __src - (char *)this;
      v8 = a4 - __src;
      if (__src - (char *)this != a4 - __src)
      {
        v21 = __src - (char *)this;
        do
        {
          v22 = v21;
          v21 = v8;
          v8 = v22 % v8;
        }
        while (v8);
        if (v21)
        {
          v23 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v21);
          do
          {
            v25 = *((_BYTE *)v23 - 1);
            v23 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v23 - 1);
            v24 = v25;
            v26 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v23 + v7);
            v27 = v23;
            do
            {
              v28 = v27;
              v27 = v26;
              *(_BYTE *)v28 = *(_BYTE *)v26;
              v29 = (char *)(a4 - (char *)v26);
              v30 = __OFSUB__(v7, v29);
              v32 = v7 - (_QWORD)v29;
              v31 = (v32 < 0) ^ v30;
              v26 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v32);
              if (v31)
                v26 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v27 + v7);
            }
            while (v26 != v23);
            *(_BYTE *)v27 = v24;
          }
          while (v23 != this);
        }
        goto LABEL_45;
      }
      v9 = &a4[~(unint64_t)__src];
      v10 = &__src[~(unint64_t)this];
      if (v9 >= v10)
        v11 = &__src[~(unint64_t)this];
      else
        v11 = &a4[~(unint64_t)__src];
      v12 = (unint64_t)(v11 + 1);
      v13 = __src;
      v14 = this;
      if (v12 < 8)
        goto LABEL_41;
      if (v9 >= v10)
        v9 = &__src[~(unint64_t)this];
      v15 = v9 + 1;
      if (&v15[(_QWORD)__src] > (char *)this)
      {
        v13 = __src;
        v14 = this;
        if (&v15[(_QWORD)this] > __src)
          goto LABEL_41;
      }
      if (v12 >= 0x20)
      {
        v16 = v12 & 0xFFFFFFFFFFFFFFE0;
        v33 = (__int128 *)((char *)this + 16);
        v34 = __src + 16;
        v35 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v36 = *(v33 - 1);
          v37 = *v33;
          v38 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v38;
          *((_OWORD *)v34 - 1) = v36;
          *(_OWORD *)v34 = v37;
          v33 += 2;
          v34 += 32;
          v35 -= 32;
        }
        while (v35);
        if (v12 == v16)
          goto LABEL_45;
        if ((v12 & 0x18) == 0)
        {
          v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v16);
          v13 = &__src[v16];
          goto LABEL_41;
        }
      }
      else
      {
        v16 = 0;
      }
      v13 = &__src[v12 & 0xFFFFFFFFFFFFFFF8];
      v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this
                                                                                       + (v12 & 0xFFFFFFFFFFFFFFF8));
      v39 = (uint64_t *)((char *)this + v16);
      v40 = &__src[v16];
      v41 = v16 - (v12 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v42 = *v39;
        *v39++ = *(_QWORD *)v40;
        *(_QWORD *)v40 = v42;
        v40 += 8;
        v41 += 8;
      }
      while (v41);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_45;
LABEL_41:
      v43 = v13 + 1;
      v44 = (char *)v14 + 1;
      do
      {
        v45 = *(v44 - 1);
        *(v44 - 1) = *(v43 - 1);
        *(v43 - 1) = v45;
        if (v44 == __src)
          break;
        ++v44;
      }
      while (v43++ != a4);
      goto LABEL_45;
    }
    v18 = *(_BYTE *)this;
    v19 = a4 - __src;
    memmove(this, __src, a4 - __src);
    *((_BYTE *)this + v19) = v18;
  }
LABEL_45:
  __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)this + 8, (const char *)this);
  v47 = 0x9DDFEA08EB382D69
      * (*((_QWORD *)this + 13) ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)this + 13) ^ *((_QWORD *)this + 11))) >> 47) ^ (0x9DDFEA08EB382D69 * (*((_QWORD *)this + 13) ^ *((_QWORD *)this + 11))));
  v48 = *((_QWORD *)this + 14);
  v49 = *((_QWORD *)this + 8)
      - 0x4B6D499041670D8DLL * ((__src - (char *)this + a2) ^ ((unint64_t)(__src - (char *)this + a2) >> 47))
      - 0x622015F714C7D297
      * ((0x9DDFEA08EB382D69
        * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ *((_QWORD *)this + 12))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                  * (v48 ^ *((_QWORD *)this + 12))))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ *((_QWORD *)this + 12))) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ *((_QWORD *)this + 12))))) >> 47));
  v50 = 0x9DDFEA08EB382D69
      * (v49 ^ (*((_QWORD *)this + 10)
              - 0x4B6D499041670D8DLL * (*((_QWORD *)this + 9) ^ (*((_QWORD *)this + 9) >> 47))
              - 0x622015F714C7D297 * (v47 ^ (v47 >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v49 ^ (v50 >> 47) ^ v50)) ^ ((0x9DDFEA08EB382D69 * (v49 ^ (v50 >> 47) ^ v50)) >> 47));
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::try_emplace<swift::reflection::TypeRef const*>@<X0>(unint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t *result;
  uint64_t v13;
  int v14;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v23;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v17 = 0;
LABEL_9:
    result = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>(a1, v17, a2, a3);
    v16 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v8 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(a2, a2 + 8);
  v11 = a2[8];
  result = (uint64_t *)(v9 + 24 * v10);
  v13 = *result;
  v14 = *((unsigned __int8 *)result + 8);
  if (*(_QWORD *)a2 != *result || v11 != v14)
  {
    v19 = 0;
    v20 = 1;
    while (v13 != -1 || v14)
    {
      v16 = 0;
      if (v19)
        v21 = 0;
      else
        v21 = v14 == 0;
      if (v21 && v13 == -2)
        v19 = result;
      v23 = v10 + v20++;
      v10 = v23 & (v8 - 1);
      result = (uint64_t *)(v9 + 24 * v10);
      v13 = *result;
      v14 = *((unsigned __int8 *)result + 8);
      if (*(_QWORD *)a2 == *result && v11 == v14)
        goto LABEL_10;
    }
    if (v19)
      v17 = v19;
    else
      v17 = result;
    goto LABEL_9;
  }
  v16 = 0;
LABEL_10:
  v18 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v18;
  *(_BYTE *)(a4 + 16) = v16;
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>(unint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t *v21;
  int v22;
  BOOL v23;
  unsigned int v25;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::grow(a1, v9);
  v12 = *(_DWORD *)(a1 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)a1;
    v14 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(a3, a3 + 8);
    v15 = v12 - 1;
    v16 = (v12 - 1) & v14;
    v17 = a3[8];
    a2 = (uint64_t *)(v13 + 24 * v16);
    v18 = *a2;
    v19 = *((unsigned __int8 *)a2 + 8);
    if (*(_QWORD *)a3 != *a2 || v17 != v19)
    {
      v21 = 0;
      v22 = 1;
      while (v18 != -1 || v19)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v19 == 0;
        if (v23 && v18 == -2)
          v21 = a2;
        v25 = v16 + v22++;
        v16 = v25 & v15;
        a2 = (uint64_t *)(v13 + 24 * (v25 & v15));
        v18 = *a2;
        v19 = *((unsigned __int8 *)a2 + 8);
        if (*(_QWORD *)a3 == *a2 && v17 == v19)
          goto LABEL_3;
      }
      if (v21)
        a2 = v21;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -1 || *((_BYTE *)a2 + 8) != 0)
    --*(_DWORD *)(a1 + 12);
  *a2 = *(_QWORD *)a3;
  *((_BYTE *)a2 + 8) = a3[8];
  a2[2] = *a4;
  return a2;
}

void __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::grow(unint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *buffer;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    v10 = 3 * v3;
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::moveFromOldBuckets(a1, v4, &v4[v10]);
    __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v4, (void *)(v10 * 8), (std::align_val_t)8uLL);
    return;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 24 * v11 - 24;
    if (v12 < 0x18)
    {
      v13 = buffer;
LABEL_12:
      v17 = (_OWORD *)((char *)buffer + 24 * v11);
      do
      {
        *v13 = xmmword_B0E50;
        v13 = (_OWORD *)((char *)v13 + 24);
      }
      while (v13 != v17);
      return;
    }
    v14 = v12 / 0x18 + 1;
    v13 = (_OWORD *)((char *)buffer + 24 * (v14 & 0x1FFFFFFFFFFFFFFELL));
    v15 = v14 & 0x1FFFFFFFFFFFFFFELL;
    v16 = buffer;
    do
    {
      *v16 = xmmword_B0E50;
      *(_OWORD *)((char *)v16 + 24) = xmmword_B0E50;
      v16 += 3;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
}

unint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  char *v4;
  unint64_t v5;
  unsigned int v6;
  _OWORD *v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  BOOL v14;
  uint64_t *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;

  v4 = (char *)a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6 - 24;
    if (v8 < 0x18)
    {
      v9 = *(_OWORD **)result;
LABEL_7:
      v13 = (_OWORD *)((char *)v7 + 24 * v6);
      do
      {
        *v9 = xmmword_B0E50;
        v9 = (_OWORD *)((char *)v9 + 24);
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x18 + 1;
    v9 = (_OWORD *)((char *)v7 + 24 * (v10 & 0x1FFFFFFFFFFFFFFELL));
    v11 = v10 & 0x1FFFFFFFFFFFFFFELL;
    v12 = *(_OWORD **)result;
    do
    {
      *v12 = xmmword_B0E50;
      *(_OWORD *)((char *)v12 + 24) = xmmword_B0E50;
      v12 += 3;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if (*(_QWORD *)v4 < 0xFFFFFFFFFFFFFFFELL || v4[8] != 0)
      {
        v25 = *(_QWORD *)v5;
        v26 = *(_DWORD *)(v5 + 16);
        result = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(v4, v4 + 8);
        v27 = v26 - 1;
        v19 = (v26 - 1) & result;
        v28 = *(_QWORD *)v4;
        v29 = v4[8];
        v20 = (uint64_t *)(v25 + 24 * v19);
        v21 = *v20;
        v22 = *((unsigned __int8 *)v20 + 8);
        if (*(_QWORD *)v4 != *v20 || v29 != v22)
        {
          v16 = 0;
          v18 = 1;
          while (v21 != -1 || v22)
          {
            if (v16)
              v14 = 0;
            else
              v14 = v22 == 0;
            if (v14 && v21 == -2)
              v16 = v20;
            v17 = v19 + v18++;
            v19 = v17 & v27;
            v20 = (uint64_t *)(v25 + 24 * (v17 & v27));
            v21 = *v20;
            v22 = *((unsigned __int8 *)v20 + 8);
            if (v28 == *v20 && v29 == v22)
              goto LABEL_28;
          }
          if (v16)
            v20 = v16;
        }
LABEL_28:
        *v20 = v28;
        *((_BYTE *)v20 + 8) = v29;
        v20[2] = *((_QWORD *)v4 + 2);
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 24;
    }
    while (v4 != (char *)a3);
  }
  return result;
}

_BYTE *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  if (a3 > 0x100000)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  v6 = result;
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)result + 311) + 24))(&v29);
  v7 = v29;
  if (!v29)
  {
    *a4 = 0;
    a4[1] = 0;
    v29 = 0;
    goto LABEL_34;
  }
  v29 = 0;
  v25 = a2;
  v26 = v7;
  v8 = v27;
  if (!v31)
  {
    v28 = 0;
    v9 = *((_DWORD *)v6 + 10);
    if (v9)
      goto LABEL_10;
LABEL_21:
    v19 = 0;
    goto LABEL_22;
  }
  if (v31 == v30)
  {
    v28 = v27;
    (*(void (**)(void))(*(_QWORD *)v31 + 24))();
    v9 = *((_DWORD *)v6 + 10);
    if (v9)
      goto LABEL_10;
    goto LABEL_21;
  }
  v28 = v31;
  v31 = 0;
  v9 = *((_DWORD *)v6 + 10);
  if (!v9)
    goto LABEL_21;
LABEL_10:
  v10 = *((_QWORD *)v6 + 3);
  v11 = v9 - 1;
  v12 = (37 * v25) & v11;
  v13 = (_QWORD *)(v10 + 48 * v12);
  v14 = *v13;
  if (v25 == *v13)
    goto LABEL_23;
  v15 = 0;
  v16 = 1;
  while (v14 != -1)
  {
    if (v15)
      v17 = 0;
    else
      v17 = v14 == -2;
    if (v17)
      v15 = v13;
    v18 = v12 + v16++;
    v12 = v18 & v11;
    v13 = (_QWORD *)(v10 + 48 * v12);
    v14 = *v13;
    if (v25 == *v13)
      goto LABEL_23;
  }
  if (v15)
    v19 = v15;
  else
    v19 = v13;
LABEL_22:
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>,unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>,__swift::__runtime::llvm::DenseMapInfo<unsigned long long>,__swift::__runtime::llvm::detail::DenseMapPair<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>>::InsertIntoBucket<unsigned long long,std::unique_ptr<void const,std::function<void ()(void const*)>>>((uint64_t)(v6 + 24), v19, &v25, &v26);
LABEL_23:
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    v32 = v20;
    if (!v28)
      goto LABEL_43;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v32);
  }
  if (v28 == v27)
  {
    v21 = 4;
  }
  else
  {
    if (!v28)
      goto LABEL_31;
    v21 = 5;
    v8 = v28;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v21))(v8);
LABEL_31:
  *a4 = a2;
  a4[1] = v7;
  v22 = v29;
  v29 = 0;
  if (!v22)
    goto LABEL_34;
  v25 = v22;
  if (!v31)
  {
LABEL_43:
    v24 = std::__throw_bad_function_call[abi:nn180100]();
    return (_BYTE *)__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(v24);
  }
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, &v25);
LABEL_34:
  result = v31;
  if (v31 == v30)
  {
    v23 = 4;
    result = v30;
  }
  else
  {
    if (!v31)
      return result;
    v23 = 5;
  }
  return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v23))();
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(unint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v17;

  v4 = *(_DWORD *)(a1 + 16);
  if (!v4)
  {
    v12 = 0;
    return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>>(a1, v12, a2);
  }
  v5 = *(_QWORD *)a1;
  v6 = (v4 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(a2, a2 + 8);
  v7 = a2[8];
  result = (uint64_t *)(v5 + 24 * v6);
  v9 = *result;
  v10 = *((unsigned __int8 *)result + 8);
  if (*(_QWORD *)a2 != *result || v7 != v10)
  {
    v13 = 0;
    v14 = 1;
    while (v9 != -1 || v10)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v10 == 0;
      if (v15 && v9 == -2)
        v13 = result;
      v17 = v6 + v14++;
      v6 = v17 & (v4 - 1);
      result = (uint64_t *)(v5 + 24 * v6);
      v9 = *result;
      v10 = *((unsigned __int8 *)result + 8);
      if (*(_QWORD *)a2 == *result && v7 == v10)
        return result;
    }
    if (v13)
      v12 = v13;
    else
      v12 = result;
    return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>>(a1, v12, a2);
  }
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::InsertIntoBucket<std::pair<unsigned long long,BOOL>>(unint64_t a1, uint64_t *a2, char *a3)
{
  int v6;
  unsigned int v7;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::grow(a1, v7);
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)a1;
    v12 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(a3, a3 + 8);
    v13 = v10 - 1;
    v14 = (v10 - 1) & v12;
    v15 = a3[8];
    a2 = (uint64_t *)(v11 + 24 * v14);
    v16 = *a2;
    v17 = *((unsigned __int8 *)a2 + 8);
    if (*(_QWORD *)a3 != *a2 || v15 != v17)
    {
      v19 = 0;
      v20 = 1;
      while (v16 != -1 || v17)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v17 == 0;
        if (v21 && v16 == -2)
          v19 = a2;
        v23 = v14 + v20++;
        v14 = v23 & v13;
        a2 = (uint64_t *)(v11 + 24 * (v23 & v13));
        v16 = *a2;
        v17 = *((unsigned __int8 *)a2 + 8);
        if (*(_QWORD *)a3 == *a2 && v15 == v17)
          goto LABEL_3;
      }
      if (v19)
        a2 = v19;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -1 || *((_BYTE *)a2 + 8) != 0)
    --*(_DWORD *)(a1 + 12);
  *a2 = *(_QWORD *)a3;
  *((_BYTE *)a2 + 8) = a3[8];
  a2[2] = 0;
  return a2;
}

_QWORD *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *Node;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  void *__p;
  void *v24;
  char *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  _BYTE v70[24];
  _BYTE *v71;
  _QWORD v72[2];

  v32[2] = 0;
  v33 = 0;
  v34 = 2400;
  v35 = 0;
  v36 = 0;
  v32[0] = off_B5288;
  v32[1] = 0;
  v71 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v69 = 0;
  v6 = (_DWORD *)a2[1];
  v26[0] = *a2;
  v26[1] = v6;
  v7 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v26, (swift::Demangle::__runtime::NodeFactory *)v32, 50);
  if (!v7
    || ((v8 = v7, (*v6 & 0x10) != 0) || (*v6 & 0x1F) == 3)
    && (Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v32, 232),
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v8, (swift::Demangle::__runtime::NodeFactory *)v32, v10, v11), (v8 = Node) == 0)|| *((_WORD *)v8 + 8) != 232)
  {
    *a3 = 0;
    a3[56] = 0;
    goto LABEL_15;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v12 = operator new(0x20uLL);
  *v12 = off_B4CE0;
  v12[2] = v26;
  v12[3] = &v29;
  v27 = v12;
  v12[1] = a1;
  v13 = a2[1];
  v72[0] = *a2;
  v72[1] = v13;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(v12 + 1, v72, &v28);
  v24 = 0;
  v25 = 0;
  __p = 0;
  v14 = v29;
  v15 = v30 - (_BYTE *)v29;
  if (v30 != v29)
  {
    if (v15 < 0)
      abort();
    v16 = (char *)operator new(v30 - (_BYTE *)v29);
    v17 = &v16[8 * (v15 >> 3)];
    __p = v16;
    v25 = v17;
    memcpy(v16, v14, v15);
    v24 = v17;
  }
  swift::reflection::TypeRefBuilder::createTypeDecl((size_t *)v8, (uint64_t)&__p, (uint64_t)a3);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v18 = v27;
  if (v27 == v26)
  {
    v19 = 4;
    v18 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_25;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_25:
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
LABEL_15:
  v32[0] = off_B5288;
  v20 = v71;
  if (v71 == v70)
  {
    v21 = 4;
    v20 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_20;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_20:
  v32[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v33);
  if (v35)
    *(_BYTE *)(v35 + 48) = 0;
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  int *v6;
  int v7;
  uint64_t v10;
  int *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TypeFromMetadata;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  _WORD *v41;
  int v42;
  _DWORD *v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  _QWORD v48[2];
  _QWORD v49[2];
  char v50;

  v6 = (int *)a3[1];
  v7 = *v6;
  if ((*v6 & 0x80) == 0)
  {
LABEL_3:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  switch(v7 & 0x1F)
  {
    case 0x10:
      v10 = a1;
      v11 = v6 + 12;
      v41 = v6 + 13;
      v13 = *((unsigned __int16 *)v6 + 28);
      if ((v7 & 0x20000000) != 0)
      {
        v48[0] = *a3;
        v48[1] = v6;
        swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(a1, v48, (uint64_t)v49);
        if (!v50)
          goto LABEL_3;
        if ((*((_BYTE *)v6 + 3) & 0x10) != 0)
          v14 = -LODWORD(v49[0]) - v6[8];
        else
          v14 = HIDWORD(v49[0]);
      }
      else
      {
        if ((v7 & 0x10000000) != 0)
        {
          v42 = 0;
          v43 = v6 + 6;
        }
        else
        {
          v42 = v6[7];
          v43 = v6 + 8;
        }
        v14 = v42 - *v43;
      }
      v12 = v14 & 0xFFFFFF00;
      v15 = (unsigned __int16)*v41;
      if (!*v41)
      {
LABEL_51:
        v47 = 0;
        v17 = 0;
        v16 = 0;
LABEL_52:
        *a5 = v16;
        a5[1] = v17;
        a5[2] = v47;
        return;
      }
LABEL_6:
      v16 = 0;
      v17 = 0;
      v47 = 0;
      v18 = v11 + 3;
      v19 = (char *)v11 + v15 + 12;
      v20 = *a2 + 8 * (int)(v12 & 0xFFFFFF00 | v14);
      v21 = v10;
      v46 = a4;
      v44 = v19;
      v45 = v10;
      break;
    case 0x11:
    case 0x12:
      v10 = a1;
      v11 = v6 + 8;
      v12 = 0;
      v13 = *((unsigned __int16 *)v6 + 20);
      LOBYTE(v14) = 2;
      v15 = *((unsigned __int16 *)v6 + 18);
      if (*((_WORD *)v6 + 18))
        goto LABEL_6;
      goto LABEL_51;
    default:
      goto LABEL_3;
  }
  while ((*v18 & 0x3F) == 0)
  {
    if (((char)*v18 & 0x80000000) == 0)
      break;
    if (!v13)
      break;
    v49[0] = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(v21 + 2488) + 32))(*(_QWORD *)(v21 + 2488), v20, v49, 8))break;
    TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(v21, v49[0], 0, a4);
    if (!TypeFromMetadata)
      break;
    v23 = TypeFromMetadata;
    if (v17 >= v47)
    {
      v24 = (v17 - v16) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        abort();
      if ((v47 - v16) >> 2 > v25)
        v25 = (v47 - v16) >> 2;
      if ((unint64_t)(v47 - v16) >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v27 = v26;
        v28 = operator new(8 * v26);
        v26 = v27;
      }
      else
      {
        v28 = 0;
      }
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v23;
      v30 = (char *)v29;
      if (v17 != v16)
      {
        v31 = v17 - v16 - 8;
        if (v31 < 0x168
          || (v32 = (v17 - 8 - v16) & 0xFFFFFFFFFFFFFFF8, &v28[v17 - v16 - 8 - v32] > &v28[v17 - v16 - 8])
          || &v17[-v32 - 8] > v17 - 8
          || (unint64_t)(v16 - v28) < 0x20)
        {
          v33 = v17;
          v30 = &v28[8 * v24];
          goto LABEL_31;
        }
        v35 = (v31 >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = &v17[-v36];
        v30 = (char *)&v29[v36 / 0xFFFFFFFFFFFFFFF8];
        v37 = &v28[8 * v24 - 16];
        v38 = v17 - 16;
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 4;
        }
        while (v39);
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_31:
            v34 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v30 - 1) = v34;
            v30 -= 8;
          }
          while (v33 != v16);
        }
      }
      v47 = &v28[8 * v26];
      if (v16)
        operator delete(v16);
      v17 = (char *)v29;
      v16 = v30;
      a4 = v46;
      v19 = v44;
      v21 = v45;
      goto LABEL_8;
    }
    *(_QWORD *)v17 = TypeFromMetadata;
LABEL_8:
    --v13;
    v20 += 8;
    v17 += 8;
    if (++v18 == v19)
      goto LABEL_52;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v16)
    operator delete(v16);
}

void swift::reflection::TypeRefBuilder::createTypeDecl(size_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  char *v11;
  char *v12;
  std::string::size_type v13;
  std::string v14;
  std::string v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20[6];
  std::string __p;

  swift::Demangle::__runtime::mangleNode(a1, (uint64_t)v20);
  if (v20[0])
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_21;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v14 = __p;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    v8 = 0;
    v9 = 0;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      v15 = v14;
      goto LABEL_13;
    }
  }
  else
  {
    if (v7 < 0)
      goto LABEL_25;
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    v9 = &v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v7);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
  }
  std::string::__init_copy_ctor_external(&v15, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
LABEL_13:
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      v11 = (char *)operator new(v9 - v8);
      v12 = &v11[8 * (v10 >> 3)];
      memcpy(v11, v8, v10);
      goto LABEL_17;
    }
LABEL_25:
    abort();
  }
  v12 = 0;
  v11 = 0;
LABEL_17:
  v19 = 1;
  *(_OWORD *)a3 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  v13 = v15.__r_.__value_.__r.__words[2];
  memset(&v15, 0, sizeof(v15));
  *(_QWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v12;
  *(_QWORD *)(a3 + 40) = v12;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  *(_BYTE *)(a3 + 48) = 1;
  *(_BYTE *)(a3 + 56) = 1;
  if (v8)
    operator delete(v8);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_21;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_21:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_B4CE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4CE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD v4[2];

  v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()((uint64_t *)(a1 + 8), v4, a3);
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  char v38[8];
  void *__p;
  uint64_t v40;
  char v41;
  char v42;

  v6 = *a1;
  v7 = a2[1];
  v37[0] = *a2;
  v37[1] = v7;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(v6, v37, (uint64_t)v38);
  if (v42)
  {
    if (!v38[0])
      goto LABEL_7;
    if (v40)
    {
      v8 = a1[1];
      v36[0] = __p;
      v36[1] = v40;
      v9 = *(_QWORD *)(v8 + 24);
      if (!v9)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_39;
      }
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v36, a3);
      if (v42)
      {
        if (!v38[0])
        {
LABEL_7:
          if (v41 < 0)
            operator delete(__p);
        }
      }
    }
  }
  v10 = (_DWORD *)a2[1];
  if ((*v10 & 0x80) == 0)
    return;
  v11 = *v10 & 0x1F;
  if (v11 == 18 || v11 == 17)
  {
    v12 = v10 + 8;
  }
  else
  {
    if (v11 != 16)
      return;
    v12 = v10 + 12;
  }
  v13 = a1[2];
  v14 = *((unsigned __int16 *)v12 + 2) - *a3;
  v16 = *(char **)(v13 + 8);
  v15 = *(_QWORD *)(v13 + 16);
  if ((unint64_t)v16 >= v15)
  {
    v18 = *(char **)v13;
    v19 = (uint64_t)&v16[-*(_QWORD *)v13];
    v20 = v19 >> 3;
    v21 = (v19 >> 3) + 1;
    if (!(v21 >> 61))
    {
      v22 = v15 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = operator new(8 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v14;
      v17 = v25 + 1;
      if (v16 != v18)
      {
        v27 = v16 - v18 - 8;
        if (v27 < 0x58)
          goto LABEL_43;
        if ((unint64_t)(v16 - v24 - v19) < 0x20)
          goto LABEL_43;
        v28 = (v27 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v16[-v29];
        v25 = (_QWORD *)((char *)v25 - v29);
        v31 = &v24[8 * v20 - 16];
        v32 = v16 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v16 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_43:
          do
          {
            v35 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v25 = v35;
          }
          while (v16 != v18);
        }
      }
      *(_QWORD *)v13 = v25;
      *(_QWORD *)(v13 + 8) = v17;
      *(_QWORD *)(v13 + 16) = v26;
      if (v18)
        operator delete(v18);
      goto LABEL_36;
    }
LABEL_39:
    abort();
  }
  *(_QWORD *)v16 = v14;
  v17 = v16 + 8;
LABEL_36:
  *(_QWORD *)(v13 + 8) = v17;
  *a3 += *(_QWORD *)(*(_QWORD *)(a1[2] + 8) - 8);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  unsigned __int16 *v9;
  uint8x8_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (unsigned __int16 *)a2[1];
  v4 = *(unsigned int *)v3;
  if ((v4 & 0x20000000) == 0)
    goto LABEL_15;
  if ((v4 & 0x80) != 0)
  {
    v7 = (unsigned __int16 *)((((unint64_t)&v3[8 * ((v4 >> 7) & 1) + 23] + v3[26] + 1) & 0xFFFFFFFFFFFFFFFCLL)
                            + 12 * v3[27]);
    v8 = v3[29];
    v9 = &v7[2 * (v8 & 1)];
    if ((v8 & 1) != 0)
      v9 += 4 * *v7;
    v6 = (unint64_t)v9 + (v8 & 2);
    if ((v8 & 2) != 0
      && (v10 = (uint8x8_t)vcnt_s8((int8x8_t)*v9), v10.i16[0] = vaddlv_u8(v10), v6 += 2 * v10.u32[0], *v9))
    {
      v5 = *(unsigned __int16 *)((char *)&v9[v10.u32[0] - 1] + (v8 & 2));
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    v6 = ((unint64_t)&v3[8 * ((v4 >> 7) & 1) + 23] + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }
  v11 = (int *)(((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v5);
  v12 = *v11;
  v13 = (uint64_t)v11 + *a2 - (_QWORD)v3 + v12;
  if (!(_DWORD)v12 || v13 == 0)
  {
LABEL_15:
    *(_OWORD *)a3 = xmmword_B0E60;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v15 = result;
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>(result, (v4 >> 25) & 7, v13, &v15, a3);
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;

  v7 = a3;
  v8 = result;
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v18 = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(result + 2488) + 32))(*(_QWORD *)(result + 2488), a3, &v18, 8);
      if (!(_DWORD)result)
        goto LABEL_20;
      v7 = v18;
LABEL_4:
      result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(v8, v7, &v16);
      if (!v17 || (*v17 & 0x1F) != 0x10)
        goto LABEL_20;
      v9 = *a4;
      v18 = v16;
      v19 = v17;
      result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(v9, &v18);
      break;
    case 3:
      v16 = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(result + 2488) + 32))(*(_QWORD *)(result + 2488), a3, &v16, 8);
      if ((result & 1) == 0)
        goto LABEL_20;
      result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(v8, v16, &v18);
      if (!v19)
        goto LABEL_20;
      if (*(_QWORD *)v19 <= 0x7FFuLL && *(_QWORD *)v19 != 0)
        goto LABEL_20;
      if ((swift_reflection_classIsSwiftMask & *((_QWORD *)v19 + 4)) != 0)
      {
        v11 = v19[15];
        v12 = v19[14] - v11;
        v13 = v11 >> 3;
        v14 = (v12 << 29) & 0xFFFFFFFF00000000;
        if (v13 < 3)
          v13 = 3;
        if ((v12 >> 3) < 0xA)
          v14 = 0xA00000000;
        v15 = v14 | v13;
      }
      else
      {
        v15 = 0xA00000003;
        v12 = 80;
      }
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v12;
      *(_BYTE *)(a5 + 16) = 1;
      break;
    default:
LABEL_20:
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 16) = 0;
      break;
  }
  return result;
}

double swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::swiftProtocol@<D0>(size_t *a1@<X1>, std::string *a2@<X8>)
{
  double result;
  std::string v4;
  _DWORD v5[6];
  std::string __p;

  swift::Demangle::__runtime::mangleNode(a1, (uint64_t)v5);
  if (v5[0])
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[8] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return result;
    goto LABEL_3;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v4 = __p;
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_3:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver::objcProtocol(void *__src@<X1>, size_t __len@<X2>, std::string *a3@<X8>)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void *v9;
  __int128 __dst;
  unint64_t v11;
  std::string v12;

  if (!__src)
  {
    __dst = 0uLL;
    v11 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v11) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_10:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (SHIBYTE(v11) < 0)
  {
    v9 = (void *)__dst;
    std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    *a3 = v12;
    operator delete(v9);
    goto LABEL_14;
  }
LABEL_12:
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = __dst;
  a3->__r_.__value_.__r.__words[2] = v11;
LABEL_14:
  a3[1].__r_.__value_.__s.__data_[0] = 1;
  a3[1].__r_.__value_.__s.__data_[8] = 1;
}

std::string::value_type *std::vector<std::optional<std::pair<std::string,BOOL>>>::__push_back_slow_path<std::optional<std::pair<std::string,BOOL>> const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  std::string *v10;
  char *v11;
  std::string::value_type *v12;
  std::string *v13;
  char *v14;
  __int128 v15;
  void **v16;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[40 * v4];
  v10->__r_.__value_.__s.__data_[0] = 0;
  v10[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v2 = *(void ***)a1;
      v3 = *(void ***)(a1 + 8);
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    v10[1].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 24);
    v10[1].__r_.__value_.__s.__data_[8] = 1;
  }
  v11 = &v9[40 * v8];
  v12 = &v10[1].__r_.__value_.__s.__data_[16];
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    v13 = v10;
    do
    {
      v13[-2].__r_.__value_.__s.__data_[8] = 0;
      v13 = (std::string *)((char *)v13 - 40);
      v14 = (char *)(v3 - 5);
      v13[1].__r_.__value_.__s.__data_[8] = 0;
      if (*((_BYTE *)v3 - 8))
      {
        v15 = *(_OWORD *)v14;
        v13->__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 3);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        *(v3 - 4) = 0;
        *(v3 - 3) = 0;
        *(_QWORD *)v14 = 0;
        v10[-1].__r_.__value_.__s.__data_[8] = *((_BYTE *)v3 - 16);
        v10[-1].__r_.__value_.__s.__data_[16] = 1;
      }
      v3 -= 5;
      v10 = v13;
    }
    while (v14 != (char *)v2);
    v2 = *(void ***)a1;
    v16 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    while (v16 != v2)
    {
      if (*((_BYTE *)v16 - 8))
      {
        if (*((char *)v16 - 17) < 0)
          operator delete(*(v16 - 5));
      }
      v16 -= 5;
    }
  }
  if (v2)
    operator delete(v2);
  return v12;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver>(uint64_t a1, uint64_t *a2, swift::Demangle::__runtime::NodeFactory *a3, uint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int *v8;
  size_t *v9;
  unsigned int *Node;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  void *v17;
  void **v18;
  void **v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  _QWORD v28[3];
  _QWORD *v29;
  void *v30[2];
  unint64_t v31;
  uint64_t v32;
  void *__p[2];
  unint64_t v34;

  v32 = a4;
  v6 = *a2;
  if ((*a2 & 1) == 0)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v6 & *(_QWORD *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v30);
    v7 = v30[1];
    if (v30[1]
      && (__p[0] = v30[0],
          __p[1] = v30[1],
          (v8 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, __p, a3, 50)) != 0)&& ((v9 = (size_t *)v8, (*v7 & 0x10) == 0) && (*v7 & 0x1F) != 3|| (Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232), swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v9, a3, v11, v12), (v9 = (size_t *)Node) != 0)))
    {
      return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(&v32, v9);
    }
    else
    {
      return 0;
    }
  }
  v14 = malloc_type_malloc(0x10uLL, 0xAD4E4A50uLL);
  if (v14)
  {
    v15 = v14;
    if (((*(uint64_t (**)(_QWORD, unint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v6 & 0xFFFFFFFFFFFFFFFELL, v14, 16) & 1) != 0)
    {
      __p[1] = 0;
      v34 = 0;
      __p[0] = 0;
      if ((*(unsigned int (**)(_QWORD, _QWORD, void **))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v15[1], __p))
      {
        v31 = v34;
        *(_OWORD *)v30 = *(_OWORD *)__p;
        v16 = HIBYTE(v34);
        v17 = __p[1];
        v18 = (void **)__p[0];
      }
      else
      {
        v30[0] = 0;
        v30[1] = 0;
        v31 = 0;
        if (SHIBYTE(v34) < 0)
          operator delete(__p[0]);
        v17 = 0;
        v18 = 0;
        LODWORD(v16) = 0;
      }
    }
    else
    {
      v17 = 0;
      v18 = 0;
      LODWORD(v16) = 0;
      v30[0] = 0;
      v30[1] = 0;
      v31 = 0;
    }
    free(v15);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    LODWORD(v16) = 0;
    v30[0] = 0;
    v30[1] = 0;
    v31 = 0;
  }
  if ((v16 & 0x80u) == 0)
    v19 = v30;
  else
    v19 = v18;
  if ((v16 & 0x80u) == 0)
    v20 = v16;
  else
    v20 = (unint64_t)v17;
  if (v20 >= 4 && *(_DWORD *)v19 == 1349801055)
  {
    v29 = 0;
    v13 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)a3, v19, v20, v28);
    v23 = v29;
    if (v29 == v28)
    {
      v24 = 4;
      v23 = v28;
    }
    else
    {
      if (!v29)
        goto LABEL_37;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_37:
    if (v13)
    {
      while (1)
      {
        v25 = *(unsigned __int16 *)(v13 + 16);
        v26 = (v25 - 190) > 0x2E || ((1 << (v25 + 66)) & 0x640000000001) == 0;
        if (v26 && v25 != 99)
        {
          v21 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(&v32, (size_t *)v13);
          goto LABEL_28;
        }
        v27 = *(unsigned __int8 *)(v13 + 18);
        if (v27 != 1)
        {
          if (v27 != 5 || *(_DWORD *)(v13 + 8) != 1)
          {
            v13 = 0;
            goto LABEL_29;
          }
          v13 = *(_QWORD *)v13;
        }
        v13 = *(_QWORD *)v13;
      }
    }
    goto LABEL_29;
  }
  v21 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::objcProtocol(&v32, v19, v20);
LABEL_28:
  v13 = v21;
LABEL_29:
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  return v13;
}

uint64_t swift::reflection::TypeRefBuilder::createGenericSignature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  if (!a3)
LABEL_37:
    swift::reflection::TypeRefBuilder::makeGenericSignatureRef<llvm::ArrayRef<swift::reflection::GenericTypeParameterTypeRef const*>,llvm::ArrayRef<swift::reflection::TypeRefRequirement>>();
  v3 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = &a2[a3];
  while (1)
  {
    v9 = *v3;
    if (!*v3 || *(_DWORD *)(*v3 + 8) != 9)
      break;
    if (v5 >= v6)
    {
      v11 = (v5 - v4) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        abort();
      if ((v6 - v4) >> 2 > v12)
        v12 = (v6 - v4) >> 2;
      if ((unint64_t)(v6 - v4) >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        if (v13 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v14 = operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v11];
      *(_QWORD *)v15 = v9;
      v8 = v15 + 8;
      if (v5 != v4)
      {
        v16 = v5 - v4 - 8;
        if (v16 < 0x168)
        {
          v17 = v5;
          goto LABEL_33;
        }
        v18 = (v5 - 8 - v4) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v5 - v4 - 8 - v18] > &v14[v5 - v4 - 8])
        {
          v17 = v5;
          goto LABEL_33;
        }
        if (&v5[-v18 - 8] > v5 - 8)
        {
          v17 = v5;
          goto LABEL_33;
        }
        if ((unint64_t)(v4 - v14) < 0x20)
        {
          v17 = v5;
          goto LABEL_33;
        }
        v19 = (v16 >> 3) + 1;
        v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        v17 = &v5[-v20];
        v15 -= v20;
        v21 = &v14[8 * v11 - 16];
        v22 = v5 - 16;
        v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_33:
            v25 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v15 - 1) = v25;
            v15 -= 8;
          }
          while (v17 != v4);
        }
      }
      v6 = &v14[8 * v13];
      if (v4)
        operator delete(v4);
      v4 = v15;
      goto LABEL_4;
    }
    *(_QWORD *)v5 = v9;
    v8 = v5 + 8;
LABEL_4:
    ++v3;
    v5 = v8;
    if (v3 == v7)
      goto LABEL_37;
  }
  if (v4)
    operator delete(v4);
  return 0;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(uint64_t *a1, size_t *a2)
{
  std::string::size_type size;
  char v3;
  int v5;
  std::string::value_type *v6;
  uint64_t ProtocolTypeFromDecl;
  uint64_t v8;
  std::string v10;
  char v11;
  char v12;
  _DWORD v13[2];
  std::string v14;
  _DWORD v15[6];
  std::string __p;

  swift::Demangle::__runtime::mangleNode(a2, (uint64_t)v15);
  v5 = v15[0];
  if (v15[0])
  {
    v6 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_9:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v14 = __p;
  size = v14.__r_.__value_.__l.__size_;
  v6 = (std::string::value_type *)v14.__r_.__value_.__r.__words[0];
  v13[0] = v14.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)((char *)&v14.__r_.__value_.__r.__words[2] + 3);
  v3 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_3:
  if (v5)
    return 0;
LABEL_10:
  v8 = *a1;
  v10.__r_.__value_.__s.__data_[0] = 0;
  v12 = 0;
  if (v3 < 0)
  {
    std::string::__init_copy_ctor_external(&v10, v6, size);
  }
  else
  {
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v10.__r_.__value_.__l.__size_ = size;
    LODWORD(v10.__r_.__value_.__r.__words[2]) = v13[0];
    *(_DWORD *)((char *)&v10.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v13 + 3);
    *((_BYTE *)&v10.__r_.__value_.__s + 23) = v3;
  }
  v11 = 0;
  v12 = 1;
  ProtocolTypeFromDecl = swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(v8, (uint64_t)&v10);
  if (v12 && SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (v3 < 0)
    operator delete(v6);
  return ProtocolTypeFromDecl;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::objcProtocol(uint64_t *a1, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v7;
  size_t v8;
  std::string::value_type *v9;
  std::string::size_type size;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t ProtocolTypeFromDecl;
  std::string v16;
  char v17;
  char v18;
  std::string __dst;
  _DWORD v20[2];
  std::string v21;

  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
LABEL_12:
    v21 = __dst;
    size = __dst.__r_.__value_.__l.__size_;
    v9 = (std::string::value_type *)__dst.__r_.__value_.__r.__words[0];
    v20[0] = __dst.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v20 + 3) = __dst.__r_.__value_.__r.__words[2] >> 24;
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    goto LABEL_14;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_10:
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_12;
  v12 = (void *)__dst.__r_.__value_.__r.__words[0];
  std::string::__init_copy_ctor_external(&v21, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  size = v21.__r_.__value_.__l.__size_;
  v9 = (std::string::value_type *)v21.__r_.__value_.__r.__words[0];
  v20[0] = v21.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)&v21.__r_.__value_.__r.__words[2] + 3);
  v11 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  operator delete(v12);
LABEL_14:
  v13 = *a1;
  v16.__r_.__value_.__s.__data_[0] = 0;
  v18 = 0;
  if (v11 < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v9, size);
  }
  else
  {
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v16.__r_.__value_.__l.__size_ = size;
    LODWORD(v16.__r_.__value_.__r.__words[2]) = v20[0];
    *(_DWORD *)((char *)&v16.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v20 + 3);
    *((_BYTE *)&v16.__r_.__value_.__s + 23) = v11;
  }
  v17 = 1;
  v18 = 1;
  ProtocolTypeFromDecl = swift::reflection::TypeRefBuilder::createProtocolTypeFromDecl(v13, (uint64_t)&v16);
  if (v18 && SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v9);
  return ProtocolTypeFromDecl;
}

void swift::reflection::TypeRefBuilder::makeGenericSignatureRef<llvm::ArrayRef<swift::reflection::GenericTypeParameterTypeRef const*>,llvm::ArrayRef<swift::reflection::TypeRefRequirement>>()
{
  operator new();
}

_QWORD *std::vector<std::unique_ptr<swift::reflection::GenericSignatureRef const>>::__push_back_slow_path<std::unique_ptr<swift::reflection::GenericSignatureRef const>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_35;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        v29 = *(void **)(v27 + 24);
        if (v29)
        {
          *(_QWORD *)(v27 + 32) = v29;
          operator delete(v29);
        }
        v30 = *(void **)v27;
        if (*(_QWORD *)v27)
        {
          *(_QWORD *)(v27 + 8) = v30;
          operator delete(v30);
        }
        operator delete();
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), a2 + 32, &v7, 8))return 0;
  v3 = v7 & *(_QWORD *)(a1 + 2504) & 0x7FFFFFFFFFF8;
  if (v3)
  {
    v6 = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, int *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v3, &v6, 4))return 0;
    if (v6 < 0)
    {
      if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v3 + 8, &v7, 8))return 0;
      v4 = *(_QWORD *)(a1 + 2504);
      v3 = v4 & v7;
      if ((v4 & v7 & 1) != 0)
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v3 ^ 1, &v7, 8))
        {
          return *(_QWORD *)(a1 + 2504) & v7;
        }
        return 0;
      }
    }
  }
  return v3;
}

uint64_t swift::reflection::ForeignClassTypeRef::create<swift::reflection::TypeRefBuilder>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::string v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v2 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v10, a2, v5);
  v6 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>((_QWORD *)(a1 + 1248), (char **)&v10);
  if (!v6)
  {
    if (*(char *)(v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
    else
      v9 = *(std::string *)v2;
    operator new();
  }
  v7 = v6[5];
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return v7;
}

void swift::reflection::ForeignClassTypeRef::~ForeignClassTypeRef(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  operator delete();
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unint64_t a1, uint64_t a2, int a3, int a4)
{
  int32x2_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t TupleType;
  BOOL v20;
  uint64_t v21;
  swift::reflection::OpaqueTypeRef *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  void *v30;
  uint64_t TypeFromMetadata;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  unsigned int v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  uint64_t *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  std::string::size_type v104;
  std::string::size_type v105;
  std::string::size_type v106;
  char *v107;
  char *v108;
  char *v109;
  std::string *v110;
  char *v111;
  std::string::size_type v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  std::string *size;
  __int128 v124;
  std::string::value_type *v125;
  uint64_t v126;
  char *v127;
  _QWORD *MangledName;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int ExtendedFlags;
  uint64_t v133;
  std::string::size_type v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  const void *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t ThrownError;
  uint64_t v152;
  unint64_t v153;
  int *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD v176[2];
  std::string v177;
  std::string v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  int v212;
  uint64_t v213;
  _QWORD v214[2];
  uint64_t v215;
  unsigned int *v216;
  std::string v217;
  void *__p[2];
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  int v256;
  uint64_t v257;
  _QWORD v258[2];
  _QWORD v259[2];
  uint64_t v260;
  _QWORD *v261;
  char v262[32];

  *(_QWORD *)v262 = a2;
  v262[8] = a3;
  v8 = *(int32x2_t *)a1;
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
  {
    v18 = 0;
LABEL_15:
    v11 = *(_QWORD *)&v8 + 24 * v18;
    goto LABEL_16;
  }
  v10 = (v9 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(v262, &v262[8]);
  v11 = *(_QWORD *)&v8 + 24 * v10;
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned __int8 *)(v11 + 8);
  if (*(_QWORD *)v262 != *(_QWORD *)v11 || v262[8] != v13)
  {
    v15 = 1;
    while (v12 != -1 || v13)
    {
      v16 = v10 + v15++;
      v10 = v16 & (v9 - 1);
      v11 = *(_QWORD *)&v8 + 24 * v10;
      v12 = *(_QWORD *)v11;
      v13 = *(unsigned __int8 *)(v11 + 8);
      if (*(_QWORD *)v262 == *(_QWORD *)v11 && v262[8] == v13)
        goto LABEL_16;
    }
    v8 = *(int32x2_t *)a1;
    v18 = *(_DWORD *)(a1 + 16);
    goto LABEL_15;
  }
LABEL_16:
  if (v11 != *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(v11 + 16);
  v20 = __OFSUB__(a4, 1);
  v21 = (a4 - 1);
  if ((int)v21 < 0 != v20)
    return 0;
  *(_OWORD *)__p = *(_OWORD *)v262;
  v219 = 0;
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::try_emplace<swift::reflection::TypeRef const*>(a1, (char *)__p, (uint64_t *)&v219, (uint64_t)&v177);
  v22 = (swift::reflection::OpaqueTypeRef *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v260);
  v23 = v261;
  if (!v261)
    return 0;
  v24 = *v261;
  if (*v261 > 0x7FFuLL)
    LODWORD(v24) = 0;
  if ((int)v24 <= 768)
  {
    if ((v24 - 512) < 3)
    {
      v258[0] = v260;
      v258[1] = v261;
      return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata((int32x2_t *)a1, (uint64_t)v258, v21, 0);
    }
    if ((v24 - 515) >= 2)
    {
      if ((_DWORD)v24)
      {
LABEL_139:
        v75 = swift::reflection::OpaqueTypeRef::get(v22);
LABEL_140:
        TupleType = v75;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = v75;
      }
      else
      {
        v259[0] = v260;
        v259[1] = v261;
        return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata((int32x2_t *)a1, v259, v21, a3);
      }
      return TupleType;
    }
    v28 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(a1, &v260, 0);
    if (v28)
    {
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v28, &v215);
      if (v216)
      {
        v219 = 0;
        v220 = 0;
        v221 = 2400;
        v222 = 0;
        v223 = 0;
        __p[1] = 0;
        __p[0] = off_B5288;
        v257 = 0;
        v226 = 0;
        v224 = 0;
        v225 = 0;
        v227 = 0;
        v239 = 0u;
        v240 = 0u;
        v241 = 0u;
        v242 = 0u;
        v243 = 0u;
        v244 = 0u;
        v245 = 0u;
        v246 = 0u;
        v247 = 0u;
        v248 = 0u;
        v249 = 0u;
        v250 = 0u;
        v251 = 0u;
        v252 = 0u;
        v253 = 0u;
        v254 = 0u;
        v255 = 0u;
        v228 = 0u;
        v229 = 0u;
        v230 = 0u;
        v231 = 0u;
        v232 = 0u;
        v233 = 0u;
        v234 = 0u;
        v235 = 0u;
        v236 = 0u;
        v237 = 0u;
        v238 = 0u;
        v256 = 0;
        v176[0] = v215;
        v176[1] = v216;
        v29 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextMangling(a1, v176, (swift::Demangle::__runtime::NodeFactory *)__p);
        if (v29 && *((_WORD *)v29 + 8) == 232)
        {
          swift::Demangle::__runtime::mangleNode((size_t *)v29, (uint64_t)&v177);
          if (LODWORD(v177.__r_.__value_.__l.__data_))
          {
            TupleType = 0;
          }
          else
          {
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v217, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
            else
              v217 = v178;
            TupleType = swift::reflection::ForeignClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)&v217);
            __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v178.__r_.__value_.__l.__data_);
        }
        else
        {
          TupleType = 0;
        }
LABEL_208:
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
        return TupleType;
      }
    }
    return 0;
  }
  switch((int)v24)
  {
    case 769:
      v219 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<swift::reflection::TypeRef const*>::reserve((uint64_t)__p, v261[1]);
      v25 = *((unsigned int *)v23 + 2);
      if (!*((_DWORD *)v23 + 2))
        goto LABEL_141;
      v26 = 0;
      v27 = v23 + 3;
      v173 = v23;
      v169 = v23 + 3;
      do
      {
        TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v27[2 * v26], 0, v21);
        if (!TypeFromMetadata)
        {
          TupleType = 0;
          goto LABEL_246;
        }
        v32 = TypeFromMetadata;
        v33 = (char *)__p[1];
        if (__p[1] < v219)
        {
          *(_QWORD *)__p[1] = TypeFromMetadata;
          v30 = v33 + 8;
          goto LABEL_35;
        }
        v34 = v25;
        v35 = v21;
        v36 = (char *)__p[0];
        v37 = (char *)__p[1] - (char *)__p[0];
        v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
          goto LABEL_318;
        v40 = v219 - (char *)__p[0];
        if ((v219 - (char *)__p[0]) >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        v170 = v39;
        if (v39)
        {
          if (v39 >> 61)
            goto LABEL_319;
          v41 = operator new(8 * v39);
        }
        else
        {
          v41 = 0;
        }
        v42 = (uint64_t *)&v41[8 * v38];
        *v42 = v32;
        v30 = v42 + 1;
        if (v33 == v36)
        {
          v21 = v35;
          v25 = v34;
          v23 = v173;
          goto LABEL_57;
        }
        v43 = v33 - v36 - 8;
        if (v43 >= 0x58)
        {
          v44 = v33 - v41 - v37;
          v21 = v35;
          v25 = v34;
          v23 = v173;
          if (v44 >= 0x20)
          {
            v45 = (v43 >> 3) + 1;
            v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v33[-v46];
            v42 = (uint64_t *)((char *)v42 - v46);
            v48 = &v41[8 * v38 - 16];
            v49 = v33 - 16;
            v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 4;
            }
            while (v50);
            v33 = v47;
            if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_56;
          }
        }
        else
        {
          v21 = v35;
          v25 = v34;
          v23 = v173;
        }
        do
        {
          v52 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *--v42 = v52;
        }
        while (v33 != v36);
LABEL_56:
        v33 = (char *)__p[0];
LABEL_57:
        v27 = v169;
        __p[0] = v42;
        __p[1] = v30;
        v219 = &v41[8 * v170];
        if (v33)
          operator delete(v33);
LABEL_35:
        __p[1] = v30;
        ++v26;
      }
      while (v26 != v25);
LABEL_141:
      memset(&v177, 0, sizeof(v177));
      v103 = v23[2];
      if (v103
        && !(*(unsigned int (**)(_QWORD, uint64_t, std::string *))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488), v103, &v177))
      {
        TupleType = 0;
      }
      else
      {
        v104 = std::string::find(&v177, 32, 0);
        if (v104 != -1)
        {
          v105 = v104;
          v106 = 0;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          while (1)
          {
            if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v110 = &v177;
            else
              v110 = (std::string *)v177.__r_.__value_.__r.__words[0];
            v111 = (char *)v110 + v106;
            v112 = v105 - v106;
            if (v108 < v109)
            {
              *(_QWORD *)v108 = v111;
              *((_QWORD *)v108 + 1) = v112;
              v108 += 16;
            }
            else
            {
              v113 = (v108 - v107) >> 4;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 60)
                goto LABEL_318;
              if ((v109 - v107) >> 3 > v114)
                v114 = (v109 - v107) >> 3;
              if ((unint64_t)(v109 - v107) >= 0x7FFFFFFFFFFFFFF0)
                v115 = 0xFFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                if (v115 >> 60)
                  goto LABEL_319;
                v116 = (char *)operator new(16 * v115);
              }
              else
              {
                v116 = 0;
              }
              v117 = &v116[16 * v113];
              *(_QWORD *)v117 = v111;
              *((_QWORD *)v117 + 1) = v112;
              if (v108 == v107)
              {
                v119 = &v116[16 * v113];
              }
              else
              {
                v118 = &v116[16 * v113];
                do
                {
                  v119 = v118 - 16;
                  *((_OWORD *)v118 - 1) = *((_OWORD *)v108 - 1);
                  v108 -= 16;
                  v118 -= 16;
                }
                while (v108 != v107);
              }
              v109 = &v116[16 * v115];
              v108 = v117 + 16;
              if (v107)
                operator delete(v107);
              v107 = v119;
            }
            v106 = v105 + 1;
            v105 = std::string::find(&v177, 32, v105 + 1);
            if (v105 == -1)
              goto LABEL_218;
          }
        }
        v109 = 0;
        v108 = 0;
        v107 = 0;
LABEL_218:
        v139 = v108 - v107;
        v140 = (unint64_t)(v108 - v107) >> 4;
        v141 = __p[0];
        v142 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if (v142 > v140)
        {
          do
          {
            if (v108 < v109)
            {
              *(_QWORD *)v108 = 0;
              *((_QWORD *)v108 + 1) = 0;
              v108 += 16;
            }
            else
            {
              v143 = (v108 - v107) >> 4;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 60)
                goto LABEL_318;
              if ((v109 - v107) >> 3 > v144)
                v144 = (v109 - v107) >> 3;
              if ((unint64_t)(v109 - v107) >= 0x7FFFFFFFFFFFFFF0)
                v145 = 0xFFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                if (v145 >> 60)
                  goto LABEL_319;
                v146 = (char *)operator new(16 * v145);
              }
              else
              {
                v146 = 0;
              }
              v147 = &v146[16 * v143];
              *(_QWORD *)v147 = 0;
              *((_QWORD *)v147 + 1) = 0;
              if (v108 == v107)
              {
                v149 = &v146[16 * v143];
              }
              else
              {
                v148 = &v146[16 * v143];
                do
                {
                  v149 = v148 - 16;
                  *((_OWORD *)v148 - 1) = *((_OWORD *)v108 - 1);
                  v108 -= 16;
                  v148 -= 16;
                }
                while (v108 != v107);
              }
              v109 = &v146[16 * v145];
              v108 = v147 + 16;
              if (v107)
                operator delete(v107);
              v107 = v149;
            }
            v140 = (v140 + 1);
            v141 = __p[0];
            v142 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          }
          while (v142 > v140);
          v139 = v108 - v107;
        }
        TupleType = swift::reflection::TypeRefBuilder::createTupleType(a1 + 296, v141, v142, (uint64_t)v107, v139 >> 4);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
        if (v107)
          operator delete(v107);
      }
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
LABEL_246:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return TupleType;
    case 770:
      v53 = *((unsigned __int16 *)v261 + 4);
      v174 = (uint64_t)v261;
      if (*((_WORD *)v261 + 4))
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = v261 + 3;
        v171 = v261 + 3;
        while (1)
        {
          v59 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v58[v54], 0, v21);
          if (!v59)
            goto LABEL_253;
          v60 = v59;
          v61 = *(_QWORD *)(v174 + 8);
          if ((v61 & 0x2000000) != 0)
          {
            v62 = *((_DWORD *)&v58[(unsigned __int16)v61] + v54);
            if (v56 < (uint64_t *)v57)
            {
LABEL_69:
              *v56 = 0;
              v56[1] = 0;
              v56[2] = v59;
              *((_DWORD *)v56 + 6) = v62;
              v56 += 4;
              goto LABEL_70;
            }
          }
          else
          {
            v62 = 0;
            if (v56 < (uint64_t *)v57)
              goto LABEL_69;
          }
          v63 = v21;
          v64 = ((char *)v56 - (char *)v55) >> 5;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 59)
            goto LABEL_318;
          if ((v57 - (char *)v55) >> 4 > v65)
            v65 = (v57 - (char *)v55) >> 4;
          if ((unint64_t)(v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFE0)
            v66 = 0x7FFFFFFFFFFFFFFLL;
          else
            v66 = v65;
          if (v66)
          {
            if (v66 >> 59)
              goto LABEL_319;
            v67 = (char *)operator new(32 * v66);
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[32 * v64];
          *(_QWORD *)v68 = 0;
          *((_QWORD *)v68 + 1) = 0;
          *((_QWORD *)v68 + 2) = v60;
          *((_DWORD *)v68 + 6) = v62;
          if (v56 == v55)
          {
            v71 = &v67[32 * v64];
          }
          else
          {
            v69 = &v67[32 * v64];
            do
            {
              v70 = *((_OWORD *)v56 - 2);
              v71 = v69 - 32;
              *(_OWORD *)(v69 - 20) = *(_OWORD *)((char *)v56 - 20);
              *((_OWORD *)v69 - 2) = v70;
              v56 -= 4;
              v69 -= 32;
            }
            while (v56 != v55);
          }
          v57 = &v67[32 * v66];
          v56 = (uint64_t *)(v68 + 32);
          if (v55)
            operator delete(v55);
          v55 = (uint64_t *)v71;
          v21 = v63;
          v58 = v171;
LABEL_70:
          if (++v54 == v53)
            goto LABEL_199;
        }
      }
      v56 = 0;
      v55 = 0;
LABEL_199:
      v129 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(_QWORD *)(v174 + 16), 0, v21);
      if (!v129)
        goto LABEL_253;
      v130 = v129;
      v131 = *(_QWORD *)(v174 + 8);
      if ((v131 & 0x80000000) != 0)
        ExtendedFlags = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getExtendedFlags(v174);
      else
        ExtendedFlags = 0;
      v133 = *(_QWORD *)(v174 + 8);
      if ((v133 & 0x10000000) != 0)
      {
        v137 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, *(_QWORD *)(((v174+ 8 * (unsigned __int16)*(_QWORD *)(v174 + 8)+ 4* ((unsigned __int16)*(_QWORD *)(v174 + 8) & (unint64_t)((uint64_t)(*(_QWORD *)(v174 + 8) << 38) >> 63))+ 31) & 0xFFFFFFFFFFFFFFF8)+ 8 * ((*(_QWORD *)(v174 + 8) >> 27) & 1)), 0, v21);
        if (!v137)
        {
LABEL_253:
          TupleType = 0;
          goto LABEL_256;
        }
        v136 = v137;
        v133 = *(_QWORD *)(v174 + 8);
      }
      else
      {
        v136 = 0;
      }
      if ((v133 & 0x8000000) != 0)
      {
        v150 = *(_QWORD *)((v174
                          + 8 * (unsigned __int16)v133
                          + 4 * ((unsigned __int16)v133 & (unint64_t)(v133 << 38 >> 63))
                          + 31) & 0xFFFFFFFFFFFFFFF8);
        if (v150 - 1 >= 4)
          v138 = 0;
        else
          v138 = v150;
      }
      else
      {
        v138 = 0;
      }
      if (swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::hasThrownError(v174))
      {
        ThrownError = swift::TargetFunctionTypeMetadata<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getThrownError(v174);
        v152 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, ThrownError, 0, v21);
        if (!v152)
          goto LABEL_253;
      }
      else
      {
        v152 = 0;
      }
      TupleType = swift::reflection::TypeRefBuilder::createFunctionType(a1 + 296, v55, ((char *)v56 - (char *)v55) >> 5, v130, v131, ExtendedFlags, v138, v136, v152);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
LABEL_256:
      if (!v55)
        return TupleType;
      goto LABEL_257;
    case 771:
      v72 = *((_DWORD *)v261 + 2);
      if ((v72 & 0x40000000) != 0)
      {
        TupleType = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v261[2], 0, v21);
        if (!TupleType)
          return TupleType;
        v72 = *((_DWORD *)v23 + 2);
        v73 = 1;
      }
      else
      {
        TupleType = 0;
        v73 = (v72 & 0x80000000) == 0;
      }
      v219 = 0;
      v220 = 0;
      v221 = 2400;
      v222 = 0;
      v223 = 0;
      __p[1] = 0;
      __p[0] = off_B5288;
      v257 = 0;
      v226 = 0;
      v224 = 0;
      v225 = 0;
      v227 = 0;
      v239 = 0u;
      v240 = 0u;
      v241 = 0u;
      v242 = 0u;
      v243 = 0u;
      v244 = 0u;
      v245 = 0u;
      v246 = 0u;
      v247 = 0u;
      v248 = 0u;
      v249 = 0u;
      v250 = 0u;
      v251 = 0u;
      v252 = 0u;
      v253 = 0u;
      v254 = 0u;
      v255 = 0u;
      v228 = 0u;
      v229 = 0u;
      v230 = 0u;
      v231 = 0u;
      v232 = 0u;
      v233 = 0u;
      v234 = 0u;
      v235 = 0u;
      v236 = 0u;
      v237 = 0u;
      v238 = 0u;
      v256 = 0;
      memset(&v217, 0, sizeof(v217));
      v120 = *((unsigned int *)v23 + 3);
      if ((_DWORD)v120)
      {
        v121 = &v23[((v72 >> 30) & 1) + 2];
        v122 = 8 * v120;
        do
        {
          v215 = *v121;
          swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver>(a1, &v215, (swift::Demangle::__runtime::NodeFactory *)__p, &v177);
          if (!v178.__r_.__value_.__s.__data_[8])
          {
            TupleType = 0;
            goto LABEL_207;
          }
          size = (std::string *)v217.__r_.__value_.__l.__size_;
          if (v217.__r_.__value_.__l.__size_ >= v217.__r_.__value_.__r.__words[2])
          {
            v125 = std::vector<std::optional<std::pair<std::string,BOOL>>>::__push_back_slow_path<std::optional<std::pair<std::string,BOOL>> const&>((uint64_t)&v217, (uint64_t)&v177);
          }
          else
          {
            *(_BYTE *)v217.__r_.__value_.__l.__size_ = 0;
            size[1].__r_.__value_.__s.__data_[8] = 0;
            if (v178.__r_.__value_.__s.__data_[8])
            {
              if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(size, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
              }
              else
              {
                v124 = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
                size->__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[2];
                *(_OWORD *)&size->__r_.__value_.__l.__data_ = v124;
              }
              size[1].__r_.__value_.__s.__data_[0] = v178.__r_.__value_.__s.__data_[0];
              size[1].__r_.__value_.__s.__data_[8] = 1;
            }
            v125 = &size[1].__r_.__value_.__s.__data_[16];
          }
          v217.__r_.__value_.__l.__size_ = (std::string::size_type)v125;
          if (v178.__r_.__value_.__s.__data_[8] && SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          ++v121;
          v122 -= 8;
        }
        while (v122);
        v134 = v217.__r_.__value_.__l.__size_;
        v135 = (__int128 *)v217.__r_.__value_.__r.__words[0];
      }
      else
      {
        v134 = 0;
        v135 = 0;
      }
      TupleType = swift::reflection::TypeRefBuilder::createProtocolCompositionType(a1 + 296, v135, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v134 - (_QWORD)v135) >> 3), TupleType, v73);
      __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
LABEL_207:
      std::vector<std::optional<std::pair<std::string,BOOL>>>::~vector[abi:nn180100]((void **)&v217.__r_.__value_.__l.__data_);
      goto LABEL_208;
    case 772:
      v74 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v261[1], 0, v21);
      if (!v74)
        return 0;
      v75 = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v74, 0);
      goto LABEL_140;
    case 773:
      v76 = v261[1];
      __p[1] = 0;
      __p[0] = 0;
      v219 = 0;
      TupleType = 0;
      if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCClassName(a1, v76))
      {
        TupleType = swift::reflection::ObjCClassTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
      }
      goto LABEL_62;
    case 774:
      v77 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v261[1], 0, v21);
      if (!v77)
        return 0;
      v75 = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, v77);
      goto LABEL_140;
    case 775:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(a1, *(_QWORD *)(a1 + 2504) & v261[1], &v215);
      v78 = v216;
      if (!v216)
        return 0;
      if ((*((_BYTE *)v216 + 1) & 1) == 0 || (v79 = *((unsigned __int16 *)v216 + 10), !*((_WORD *)v216 + 10)))
      {
        v81 = 0;
        v55 = 0;
        goto LABEL_188;
      }
      v80 = 0;
      v55 = 0;
      v81 = 0;
      v82 = 0;
      v83 = v23 + 2;
      v172 = v23 + 2;
      v175 = *((unsigned __int16 *)v216 + 10);
      break;
    default:
      if ((v24 - 1280) >= 2 && (_DWORD)v24 != 1024)
        goto LABEL_139;
      strcpy((char *)__p, "Bo");
      HIBYTE(v219) = 2;
      TupleType = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, (uint64_t)__p);
LABEL_62:
      if (SHIBYTE(v219) < 0)
        operator delete(__p[0]);
      return TupleType;
  }
  while (1)
  {
    v85 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v83[v80], 0, v21);
    if (!v85)
    {
      TupleType = 0;
      if (!v55)
        return TupleType;
      goto LABEL_257;
    }
    v86 = v85;
    if (v81 >= v82)
      break;
    *v81++ = v85;
LABEL_109:
    if (++v80 == v79)
    {
      v78 = v216;
LABEL_188:
      v219 = 0;
      v220 = 0;
      v221 = 2400;
      v222 = 0;
      v223 = 0;
      __p[1] = 0;
      __p[0] = off_B5288;
      v257 = 0;
      v226 = 0;
      v224 = 0;
      v225 = 0;
      v227 = 0;
      v239 = 0u;
      v240 = 0u;
      v241 = 0u;
      v242 = 0u;
      v243 = 0u;
      v244 = 0u;
      v245 = 0u;
      v246 = 0u;
      v247 = 0u;
      v248 = 0u;
      v249 = 0u;
      v250 = 0u;
      v251 = 0u;
      v252 = 0u;
      v253 = 0u;
      v254 = 0u;
      v255 = 0u;
      v228 = 0u;
      v229 = 0u;
      v230 = 0u;
      v231 = 0u;
      v232 = 0u;
      v233 = 0u;
      v234 = 0u;
      v235 = 0u;
      v236 = 0u;
      v237 = 0u;
      v238 = 0u;
      v256 = 0;
      v126 = (int)v78[1];
      if ((_DWORD)v126)
        v127 = (char *)(v215 + v126 + 4);
      else
        v127 = 0;
      MangledName = (_QWORD *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v127, 0, __p);
      if (!MangledName)
        goto LABEL_195;
      v217.__r_.__value_.__r.__words[0] = a1 + 296;
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&v217, MangledName, 0, (uint64_t)&v177);
      if (LOWORD(v177.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(v177.__r_.__value_.__r.__words[2]) == 1)
          ((void (*)(std::string::size_type, uint64_t, _QWORD))v177.__r_.__value_.__l.__size_)(v177.__r_.__value_.__r.__words[0], 3, 0);
        goto LABEL_195;
      }
      TupleType = v177.__r_.__value_.__r.__words[0];
      if (!v177.__r_.__value_.__r.__words[0])
        goto LABEL_196;
      v214[0] = v215;
      v214[1] = v216;
      swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature(v216, (uint64_t)&v177);
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(a1, (uint64_t)v214, (unsigned __int16 *)&v177, (uint64_t)&v217);
      if (LOWORD(v217.__r_.__value_.__r.__words[2]))
      {
        if (LOWORD(v217.__r_.__value_.__r.__words[2]) == 1)
          ((void (*)(std::string::size_type, uint64_t, _QWORD))v217.__r_.__value_.__l.__size_)(v217.__r_.__value_.__r.__words[0], 3, 0);
        goto LABEL_195;
      }
      if (!v217.__r_.__value_.__r.__words[0])
      {
LABEL_195:
        TupleType = 0;
        goto LABEL_196;
      }
      swift::reflection::TypeRefBuilder::createSubstitutionMap((uint64_t *)v217.__r_.__value_.__l.__data_, (uint64_t)v55, v81 - v55, (uint64_t)&v217);
      if (!LODWORD(v217.__r_.__value_.__r.__words[1]))
      {
        TupleType = 0;
        goto LABEL_316;
      }
      TupleType = swift::reflection::TypeRef::subst(TupleType, a1 + 296, (uint64_t *)&v217);
      if (!TupleType)
        goto LABEL_316;
      if ((*((_BYTE *)v216 + 1) & 2) == 0)
        goto LABEL_315;
      v178.__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&v178.__r_.__value_.__r.__words[1] = 0x960uLL;
      v179 = 0;
      v177.__r_.__value_.__r.__words[0] = (std::string::size_type)off_B5288;
      *(_OWORD *)&v177.__r_.__value_.__r.__words[1] = 0uLL;
      v213 = 0;
      v181 = 0;
      v182 = 0;
      v180 = 0;
      v183 = 0;
      v195 = 0u;
      v196 = 0u;
      v197 = 0u;
      v198 = 0u;
      v199 = 0u;
      v200 = 0u;
      v201 = 0u;
      v202 = 0u;
      v203 = 0u;
      v204 = 0u;
      v205 = 0u;
      v206 = 0u;
      v207 = 0u;
      v208 = 0u;
      v209 = 0u;
      v210 = 0u;
      v211 = 0u;
      v184 = 0u;
      v185 = 0u;
      v186 = 0u;
      v187 = 0u;
      v188 = 0u;
      v189 = 0u;
      v190 = 0u;
      v191 = 0u;
      v192 = 0u;
      v193 = 0u;
      v194 = 0u;
      v212 = 0;
      v153 = *v216;
      if ((v153 & 0x200) != 0)
        v154 = (int *)(((unint64_t)&v216[2 * ((v153 >> 8) & 1) + 4] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      else
        v154 = 0;
      v155 = (char *)v154 + v215 - (_QWORD)v216;
      v156 = *v154;
      v157 = &v155[v156];
      if ((_DWORD)v156)
        v158 = v157;
      else
        v158 = 0;
      v159 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMangledName(a1, v158, 0, &v177);
      if (!v159)
      {
        swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v177);
        TupleType = 0;
        goto LABEL_316;
      }
      v160 = v159;
      while (1)
      {
        if (*(_WORD *)(v160 + 16) != 232)
        {
LABEL_314:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)&v177);
LABEL_315:
          __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct(a1, v262)[2] = TupleType;
LABEL_316:
          __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v217.__r_.__value_.__l.__data_, (void *)(16 * LODWORD(v217.__r_.__value_.__r.__words[2])), (std::align_val_t)8uLL);
LABEL_196:
          swift::Demangle::__runtime::Demangler::~Demangler((swift::Demangle::__runtime::Demangler *)__p);
          if (!v55)
            return TupleType;
LABEL_257:
          operator delete(v55);
          return TupleType;
        }
        v162 = *(unsigned __int8 *)(v160 + 18);
        v163 = (uint64_t *)v160;
        if ((v162 - 1) >= 2)
        {
          if (v162 != 5 || !*(_DWORD *)(v160 + 8))
            goto LABEL_314;
          v163 = *(uint64_t **)v160;
        }
        if (*(_WORD *)(*v163 + 16) != 145)
          goto LABEL_314;
        v164 = (uint64_t *)v160;
        if ((v162 - 1) >= 2)
        {
          if (v162 != 5 || !*(_DWORD *)(v160 + 8))
          {
            v165 = 0;
            goto LABEL_301;
          }
          v164 = *(uint64_t **)v160;
        }
        v165 = *v164;
LABEL_301:
        v166 = *(unsigned __int8 *)(v165 + 18);
        if ((v166 - 1) >= 2 && (v166 != 5 || !*(_DWORD *)(v165 + 8)))
          goto LABEL_314;
        TupleType = swift::reflection::ExistentialMetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(a1 + 296, TupleType);
        v167 = *(unsigned __int8 *)(v160 + 18);
        if ((v167 - 1) >= 2)
        {
          if (v167 != 5 || !*(_DWORD *)(v160 + 8))
          {
            v161 = 0;
            goto LABEL_310;
          }
          v160 = *(_QWORD *)v160;
        }
        v161 = *(_QWORD *)v160;
LABEL_310:
        v168 = *(unsigned __int8 *)(v161 + 18);
        if ((v168 - 1) < 2)
          goto LABEL_288;
        if (v168 == 5)
        {
          if (*(_DWORD *)(v161 + 8))
          {
            v161 = *(_QWORD *)v161;
LABEL_288:
            v160 = *(_QWORD *)v161;
            continue;
          }
          v160 = 0;
        }
        else
        {
          v160 = 0;
        }
      }
    }
  }
  v87 = v81 - v55;
  v88 = v87 + 1;
  if ((unint64_t)(v87 + 1) >> 61)
LABEL_318:
    abort();
  if (((char *)v82 - (char *)v55) >> 2 > v88)
    v88 = ((char *)v82 - (char *)v55) >> 2;
  if ((unint64_t)((char *)v82 - (char *)v55) >= 0x7FFFFFFFFFFFFFF8)
    v89 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v89 = v88;
  if (v89)
  {
    if (v89 >> 61)
LABEL_319:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v90 = operator new(8 * v89);
  }
  else
  {
    v90 = 0;
  }
  v91 = (uint64_t *)&v90[8 * v87];
  *v91 = v86;
  v92 = v91 + 1;
  if (v81 == v55)
    goto LABEL_135;
  v93 = (char *)v81 - (char *)v55 - 8;
  if (v93 < 0x168)
  {
    v94 = v81;
    goto LABEL_134;
  }
  v95 = ((char *)(v81 - 1) - (char *)v55) & 0xFFFFFFFFFFFFFFF8;
  if (&v90[(char *)v81 - (char *)v55 - 8 - v95] > &v90[(char *)v81 - (char *)v55 - 8])
  {
    v94 = v81;
  }
  else
  {
    if ((uint64_t *)((char *)v81 - v95 - 8) <= v81 - 1)
    {
      if ((unint64_t)((char *)v55 - v90) < 0x20)
      {
        v94 = v81;
        goto LABEL_134;
      }
      v96 = (v93 >> 3) + 1;
      v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
      v94 = &v81[v97 / 0xFFFFFFFFFFFFFFF8];
      v91 = (uint64_t *)((char *)v91 - v97);
      v98 = &v90[8 * v87 - 16];
      v99 = v81 - 2;
      v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *(_OWORD *)v99;
        *(v98 - 1) = *((_OWORD *)v99 - 1);
        *v98 = v101;
        v98 -= 2;
        v99 -= 4;
        v100 -= 4;
      }
      while (v100);
      if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_134;
LABEL_135:
      v82 = (uint64_t *)&v90[8 * v89];
      if (v55)
      {
        v81 = v92;
        operator delete(v55);
        v55 = v91;
      }
      else
      {
        v55 = v91;
        v81 = v92;
      }
      v83 = v172;
      v79 = v175;
      goto LABEL_109;
    }
    v94 = v81;
  }
  do
  {
LABEL_134:
    v102 = *--v94;
    *--v91 = v102;
  }
  while (v94 != v55);
  goto LABEL_135;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int16 v26[20];
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;

  v4 = result;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 40);
  if (v7)
  {
    v8 = (v7 - 1) & (37 * a2);
    v9 = (uint64_t *)(v6 + 48 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -1)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v9 = (uint64_t *)(v6 + 48 * v8);
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_8;
    }
  }
  v9 = (uint64_t *)(v6 + 48 * v7);
LABEL_8:
  if (v9 == (uint64_t *)(v6 + 48 * v7))
  {
    v30 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(result + 2488)
                                                                                     + 32))(*(_QWORD *)(result + 2488), a2, &v30, 8);
    if ((result & 1) != 0)
    {
      v14 = v30;
      if (v30 > 0x7FF)
        v14 = 0;
      if (v14 <= 1023)
      {
        switch(v14)
        {
          case 769:
            *(_QWORD *)v26 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, uint64_t))(**(_QWORD **)(v4 + 2488)
                                                                                             + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0 || *(_QWORD *)v26 >= 0x100uLL)
              goto LABEL_45;
            v18 = 16 * *(_QWORD *)v26 + 24;
            break;
          case 770:
            *(_QWORD *)v26 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, uint64_t))(**(_QWORD **)(v4 + 2488)
                                                                                             + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, v26, 8);
            if ((result & 1) == 0)
              goto LABEL_45;
            v19 = 4 * v26[0];
            if ((*(_DWORD *)v26 & 0x2000000) == 0)
              v19 = 0;
            v20 = v19 + 8 * v26[0];
            v21 = v20 + 24;
            v22 = ((v20 + 31) & 0x1FFFF8) + 8;
            if ((*(_DWORD *)v26 & 0x8000000) != 0)
              v23 = v22;
            else
              v23 = v21;
            v18 = (v23 + 7) & 0xFFFFF8;
            break;
          case 771:
            *(_DWORD *)v26 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, uint64_t))(**(_QWORD **)(v4 + 2488)
                                                                                             + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, v26, 4);
            if ((result & 1) == 0)
              goto LABEL_45;
            v24 = *(_DWORD *)v26;
            LODWORD(v27) = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v4 + 2488) + 32))(*(_QWORD *)(v4 + 2488), a2 + 12, &v27, 4);
            if ((result & 1) == 0 || v27 >= 0x100)
              goto LABEL_45;
            v25 = 24;
            if ((v24 & 0x40000000) == 0)
              v25 = 16;
            v18 = v25 + 8 * v27;
            break;
          case 772:
          case 773:
            goto LABEL_23;
          case 774:
            goto LABEL_24;
          case 775:
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(v4 + 2488) + 32))(*(_QWORD *)(v4 + 2488), a2 + 8, &v29, 8);
            if ((result & 1) == 0)
              goto LABEL_45;
            swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readShape(v4, *(_QWORD *)(v4 + 2504) & v29, &v27);
            result = (uint64_t)v28;
            if (!v28)
              goto LABEL_45;
            swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getGeneralizationSignature(v28, (uint64_t)v26);
            v18 = 8 * v26[2] + 16;
            break;
          default:
            switch(v14)
            {
              case 512:
              case 513:
              case 514:
                goto LABEL_23;
              case 515:
                v15 = a3;
                v16 = (_BYTE *)v4;
                v17 = a2;
                v18 = 32;
                break;
              case 516:
                goto LABEL_24;
              default:
                if (v14)
                  goto LABEL_17;
                v15 = a3;
                v16 = (_BYTE *)v4;
                v17 = a2;
                v18 = 56;
                break;
            }
            return (uint64_t)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
        }
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
      }
      else if (v14 == 1024 || v14 == 1280)
      {
LABEL_24:
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
        v18 = 24;
      }
      else if (v14 == 1281)
      {
LABEL_23:
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
        v18 = 16;
      }
      else
      {
LABEL_17:
        v15 = a3;
        v16 = (_BYTE *)v4;
        v17 = a2;
        v18 = 8;
      }
      return (uint64_t)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::_readMetadata(v16, v17, v18, v15);
    }
    else
    {
LABEL_45:
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else
  {
    v13 = v9[1];
    *a3 = a2;
    a3[1] = v13;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromClassMetadata(int32x2_t *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata(a1, (uint64_t)v6, a3, a4);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readNominalTypeFromMetadata(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  __int32 v12;
  int v13;
  __int32 v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v20;
  unsigned int v21;
  unsigned __int32 v23;
  int32x2_t v24;
  unsigned __int32 v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t BoundGenericType;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  __int32 v36;
  int32x2_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  int v41;
  int v42;
  unsigned int v43;
  int v45;
  unsigned int v46;
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  void *__p;
  _BYTE *v52;
  _QWORD v53[2];
  void *v54;
  char v55[16];
  void *v56;
  void *v57;
  char v58;
  char v59;
  uint64_t v60;
  _BYTE *v61;
  void *v62;
  uint64_t v63;

  v8 = *(_QWORD *)(a2 + 8);
  v62 = *(void **)a2;
  v63 = v8;
  v9 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, &v62, a4);
  if (!v9)
    return 0;
  v10 = v9;
  if (!a4 || v62 == *(void **)a2)
  {
LABEL_28:
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor((uint64_t)a1, v10, &v60);
    if (v61)
    {
      v53[0] = v60;
      v53[1] = v61;
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>((uint64_t)a1, v53, &v54);
      if (v59)
      {
        if ((*v61 & 0x80) == 0)
        {
          BoundGenericType = swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)&a1[37], (uint64_t)&v54, 0);
          goto LABEL_38;
        }
        v50[0] = v62;
        v50[1] = v63;
        v49[0] = v60;
        v49[1] = v61;
        swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst((uint64_t)a1, v50, v49, a3, (char **)&__p);
        v33 = __p;
        v34 = v52;
        if (__p == v52)
        {
          BoundGenericType = 0;
          v35 = __p;
          if (!__p)
          {
LABEL_37:
            if (v33 == v34)
            {
              BoundGenericType = 0;
LABEL_48:
              if (v59)
              {
                if (v58 && v56)
                {
                  v57 = v56;
                  operator delete(v56);
                }
                if (v55[15] < 0)
                  operator delete(v54);
              }
              return BoundGenericType;
            }
LABEL_38:
            if (BoundGenericType)
            {
              __p = v62;
              LOBYTE(v52) = a4;
              __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>,std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*,swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::DenseMapInfoTypeCacheKey,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,BOOL>,swift::reflection::TypeRef const*>>::FindAndConstruct((unint64_t)a1, (char *)&__p)[2] = BoundGenericType;
              if (a4)
              {
                if (v62 != *(void **)a2)
                {
                  __p = *(void **)a2;
                  LOBYTE(v52) = a4;
                  v36 = a1[2].i32[0];
                  if (v36)
                  {
                    v37 = *a1;
                    v38 = (v36 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&__p, (char *)&v52);
                    v39 = *(_QWORD *)&v37 + 24 * v38;
                    v40 = *(void **)v39;
                    v41 = *(unsigned __int8 *)(v39 + 8);
                    if (__p == *(void **)v39 && v52 == v41)
                    {
LABEL_44:
                      *(_QWORD *)v39 = -2;
                      *(_BYTE *)(v39 + 8) = 0;
                      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
                    }
                    else
                    {
                      v45 = 1;
                      while (v40 != (void *)-1 || v41)
                      {
                        v46 = v38 + v45++;
                        v38 = v46 & (v36 - 1);
                        v39 = *(_QWORD *)&v37 + 24 * v38;
                        v40 = *(void **)v39;
                        v41 = *(unsigned __int8 *)(v39 + 8);
                        if (__p == *(void **)v39 && v52 == v41)
                          goto LABEL_44;
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_48;
          }
        }
        else
        {
          v48[0] = __p;
          v48[1] = (v52 - (_BYTE *)__p) >> 3;
          BoundGenericType = swift::reflection::TypeRefBuilder::createBoundGenericType((uint64_t)&a1[37], (uint64_t)&v54, (size_t)v48);
          v35 = __p;
          if (!__p)
            goto LABEL_37;
        }
        v52 = v35;
        operator delete(v35);
        goto LABEL_37;
      }
    }
    return 0;
  }
  v54 = v62;
  v55[0] = a4;
  v11 = *a1;
  v12 = a1[2].i32[0];
  if (!v12)
  {
    v23 = 0;
LABEL_18:
    v16 = *(_QWORD *)&v11 + 24 * v23;
    goto LABEL_19;
  }
  v13 = __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
  v14 = v12 - 1;
  v15 = (v12 - 1) & v13;
  v16 = *(_QWORD *)&v11 + 24 * v15;
  v17 = *(void **)v16;
  v18 = *(unsigned __int8 *)(v16 + 8);
  if (v54 != *(void **)v16 || v55[0] != v18)
  {
    v20 = 1;
    while (v17 != (void *)-1 || v18)
    {
      v21 = v15 + v20++;
      v15 = v21 & v14;
      v16 = *(_QWORD *)&v11 + 24 * v15;
      v17 = *(void **)v16;
      v18 = *(unsigned __int8 *)(v16 + 8);
      if (v54 == *(void **)v16 && v55[0] == v18)
        goto LABEL_19;
    }
    v11 = *a1;
    v23 = a1[2].u32[0];
    goto LABEL_18;
  }
LABEL_19:
  v24 = *a1;
  v25 = a1[2].u32[0];
  if (v16 == *(_QWORD *)a1 + 24 * v25)
    goto LABEL_28;
  v54 = *(void **)a2;
  v55[0] = a4;
  if (v25)
  {
    v26 = (v25 - 1) & __swift::__runtime::llvm::hash_combine<unsigned long long,BOOL>(&v54, v55);
    v27 = *(_QWORD *)&v24 + 24 * v26;
    v28 = *(void **)v27;
    v29 = *(unsigned __int8 *)(v27 + 8);
    if (v54 == *(void **)v27 && v55[0] == v29)
    {
LABEL_26:
      *(_QWORD *)v27 = -2;
      *(_BYTE *)(v27 + 8) = 0;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v42 = 1;
      while (v28 != (void *)-1 || v29)
      {
        v43 = v26 + v42++;
        v26 = v43 & (v25 - 1);
        v27 = *(_QWORD *)&v24 + 24 * v26;
        v28 = *(void **)v27;
        v29 = *(unsigned __int8 *)(v27 + 8);
        if (v54 == *(void **)v27 && v55[0] == v29)
          goto LABEL_26;
      }
    }
  }
  return *(_QWORD *)(v16 + 16);
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(unsigned long long,BOOL,int)::ProtocolResolver>(uint64_t a1@<X0>, _QWORD *a2@<X1>, swift::Demangle::__runtime::NodeFactory *a3@<X2>, std::string *a4@<X8>)
{
  _DWORD *size;
  unsigned int *v8;
  size_t *v9;
  unsigned int *Node;
  uint64_t v11;
  const char *v12;
  std::string v13;
  __int128 v14;
  std::string __p;

  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, *a2 & *(_QWORD *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v13);
  size = (_DWORD *)v13.__r_.__value_.__l.__size_;
  if (v13.__r_.__value_.__l.__size_
    && (v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_,
        (v8 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, &v14, a3, 50)) != 0)&& ((v9 = (size_t *)v8, (*size & 0x10) == 0) && (*size & 0x1F) != 3|| (Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232), swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v9, a3, v11, v12), (v9 = (size_t *)Node) != 0)))
  {
    swift::Demangle::__runtime::mangleNode(v9, (uint64_t)&v14);
    if ((_DWORD)v14)
    {
      a4->__r_.__value_.__s.__data_[0] = 0;
      a4[1].__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_15:
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v13 = __p;
      *a4 = v13;
      a4[1].__r_.__value_.__s.__data_[0] = 0;
      a4[1].__r_.__value_.__s.__data_[8] = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_15;
    }
  }
  else
  {
    a4->__r_.__value_.__s.__data_[0] = 0;
    a4[1].__r_.__value_.__s.__data_[8] = 0;
  }
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unint64_t *v29;
  _DWORD *v30;
  _BYTE *SymbolicMangledNameStringRef;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const char *v37;
  void (**v38)(swift::Demangle::__runtime::NodeFactory *__hidden);
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char **v45;
  const char *v46;
  _QWORD *v47;
  uint64_t v48;
  const char *v49;
  _BYTE *v50;
  const char *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  const char *v59;
  _BYTE *v60;
  const char *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, _QWORD);
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, _QWORD);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  unsigned int *v87;
  unsigned int *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t *v94;
  char *v95;
  unint64_t *v96;
  unint64_t v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t *v101;
  char *v102;
  unint64_t *v103;
  unint64_t v104;
  char *v105;
  unint64_t *v106;
  char *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t GenericSignature;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned int *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *__p;
  _DWORD *v136;
  unsigned __int16 *v137;
  _QWORD v139[2];
  _QWORD v140[2];
  void (**v141)(swift::Demangle::__runtime::NodeFactory *__hidden);
  void (*v142)(void (**)(swift::Demangle::__runtime::NodeFactory *__hidden), uint64_t, _QWORD);
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  int v180;
  _BYTE v181[24];
  _BYTE *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  int v222;
  _BYTE v223[24];
  _BYTE *v224;
  uint64_t v225;
  uint64_t (*v226)(uint64_t, uint64_t, _QWORD);
  unsigned __int16 v227;
  uint64_t *v228;
  uint64_t v229[2];

  v4 = *a3;
  if (!*a3)
  {
    v6 = 0;
    v5 = 0;
    v28 = a3[1];
    if (!a3[1])
      goto LABEL_184;
    goto LABEL_32;
  }
  v137 = a3;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = a1 + 296;
  do
  {
    v10 = swift::reflection::GenericTypeParameterTypeRef::create<swift::reflection::TypeRefBuilder>(v9, 0, v8);
    if (!v10)
    {
      *(_WORD *)(a4 + 16) = 1;
      *(_QWORD *)a4 = "Failed to read generic parameter type in runtime generic signature.";
      *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      goto LABEL_189;
    }
    v11 = v10;
    if (v6 < v7)
    {
      *(_QWORD *)v6 = v10;
      goto LABEL_4;
    }
    v12 = (v6 - v5) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
LABEL_194:
      abort();
    if ((v7 - v5) >> 2 > v13)
      v13 = (v7 - v5) >> 2;
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
LABEL_195:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)&v15[8 * v12];
    *v16 = v11;
    v17 = (char *)v16;
    if (v6 != v5)
    {
      v18 = v6 - v5 - 8;
      if (v18 < 0x168
        || (v21 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8, &v15[v6 - v5 - 8 - v21] > &v15[v6 - v5 - 8])
        || &v6[-v21 - 8] > v6 - 8
        || (unint64_t)(v5 - v15) < 0x20)
      {
        v19 = v6;
        v17 = &v15[8 * v12];
      }
      else
      {
        v22 = (v18 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v6[-v23];
        v17 = (char *)&v16[v23 / 0xFFFFFFFFFFFFFFF8];
        v24 = &v15[8 * v12 - 16];
        v25 = v6 - 16;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_21;
      }
      do
      {
        v20 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v20;
        v17 -= 8;
      }
      while (v19 != v5);
    }
LABEL_21:
    v7 = &v15[8 * v14];
    if (v5)
      operator delete(v5);
    v5 = v17;
    v6 = (char *)v16;
LABEL_4:
    v6 += 8;
    ++v8;
  }
  while (v8 != v4);
  a3 = v137;
  v28 = v137[1];
  if (!v137[1])
  {
LABEL_184:
    __p = 0;
LABEL_185:
    v115 = (v6 - v5) >> 3;
    v116 = __p;
    GenericSignature = swift::reflection::TypeRefBuilder::createGenericSignature(a1 + 296, (uint64_t *)v5, v115);
    *(_WORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = GenericSignature;
    if (!GenericSignature)
    {
      *(_QWORD *)a4 = "unknown error";
      *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a4 + 16) = 1;
    }
    if (!__p)
      goto LABEL_189;
LABEL_188:
    operator delete(v116);
    goto LABEL_189;
  }
LABEL_32:
  __p = 0;
  v29 = 0;
  v30 = (_DWORD *)*((_QWORD *)a3 + 2);
  v136 = &v30[3 * v28];
  v129 = 0;
  while (2)
  {
    if ((*v30 & 0x1Fu) < 6 || (*v30 & 0x1F) == 31)
    {
      v185[1] = 0;
      v185[2] = 0;
      v186 = 0;
      v188 = 0;
      v189 = 0;
      v187 = 2400;
      v185[0] = off_B5288;
      v224 = 0;
      v191 = 0;
      v192 = 0;
      v190 = 0;
      v193 = 0;
      v194 = 0u;
      v195 = 0u;
      v196 = 0u;
      v197 = 0u;
      v198 = 0u;
      v199 = 0u;
      v200 = 0u;
      v201 = 0u;
      v202 = 0u;
      v203 = 0u;
      v204 = 0u;
      v205 = 0u;
      v206 = 0u;
      v207 = 0u;
      v208 = 0u;
      v209 = 0u;
      v210 = 0u;
      v211 = 0u;
      v212 = 0u;
      v213 = 0u;
      v214 = 0u;
      v215 = 0u;
      v216 = 0u;
      v217 = 0u;
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      v221 = 0u;
      v222 = 0;
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[1] + 4, (const char *)a2);
      v184 = 0;
      v34 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v185, (uint64_t)SymbolicMangledNameStringRef, v33, v183);
      v35 = v184;
      if (v184 == v183)
      {
        v35 = v183;
        v36 = 4;
      }
      else
      {
        if (!v184)
          goto LABEL_43;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_43:
      if (v34)
      {
        v225 = a1 + 296;
        swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v225, (_QWORD *)v34, 0, (uint64_t)&v141);
        if ((_WORD)v143)
        {
          if ((unsigned __int16)v143 == 1)
            v142(v141, 3, 0);
        }
        else
        {
          v38 = v141;
          if (v141)
          {
            switch(*v30 & 0x1F)
            {
              case 0:
                v142 = 0;
                v143 = 0;
                v144 = 0;
                v146 = 0;
                v147 = 0;
                v145 = 2400;
                v141 = off_B5288;
                v182 = 0;
                v149 = 0;
                v150 = 0;
                v148 = 0;
                v151 = 0;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                v160 = 0u;
                v161 = 0u;
                v162 = 0u;
                v163 = 0u;
                v164 = 0u;
                v165 = 0u;
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v170 = 0u;
                v171 = 0u;
                v172 = 0u;
                v173 = 0u;
                v174 = 0u;
                v175 = 0u;
                v176 = 0u;
                v177 = 0u;
                v178 = 0u;
                v179 = 0u;
                v180 = 0;
                v39 = (uint64_t)v30 + *(_QWORD *)a2 - *(_QWORD *)(a2 + 8) + 8;
                LODWORD(v229[0]) = 0;
                v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v39, v229, 4);
                v41 = 0;
                if (!v40)
                  goto LABEL_112;
                v42 = v39;
                v43 = SLODWORD(v229[0]);
                LODWORD(v229[0]) &= 0xFFFFFFFC;
                v44 = v42 + (v43 & 0xFFFFFFFFFFFFFFFCLL);
                v225 = v44;
                if ((v43 & 1) == 0)
                  goto LABEL_53;
                if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488)))
                {
                  v44 = v225;
LABEL_53:
                  v41 = v44 | ((unint64_t)v43 >> 1) & 1;
                }
                else
                {
                  v41 = 0;
                }
LABEL_112:
                v225 = v41;
                v87 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver>(a1, &v225, (swift::Demangle::__runtime::NodeFactory *)&v141, a1 + 296);
                v88 = v87;
                if (v87)
                {
                  v128 = v87;
                  v89 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8;
                  if (v29 >= (unint64_t *)v129)
                  {
                    v90 = ((char *)v29 - (char *)__p) >> 4;
                    v91 = v90 + 1;
                    if ((unint64_t)(v90 + 1) >> 60)
                      goto LABEL_194;
                    if ((v129 - (char *)__p) >> 3 > v91)
                      v91 = (v129 - (char *)__p) >> 3;
                    v92 = 0xFFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v129 - (char *)__p) < 0x7FFFFFFFFFFFFFF0)
                      v92 = v91;
                    v132 = v92;
                    if (v92)
                    {
                      if (v92 >> 60)
                        goto LABEL_195;
                      v93 = (char *)operator new(16 * v92);
                    }
                    else
                    {
                      v93 = 0;
                    }
                    v94 = (unint64_t *)&v93[16 * v90];
                    *v94 = v89;
                    v88 = v128;
                    v94[1] = (unint64_t)v128;
                    if (v29 == __p)
                    {
                      v98 = &v93[16 * v90];
                      v96 = __p;
                      v97 = v132;
                    }
                    else
                    {
                      v95 = &v93[16 * v90];
                      v96 = __p;
                      v97 = v132;
                      do
                      {
                        v98 = v95 - 16;
                        *((_OWORD *)v95 - 1) = *((_OWORD *)v29 - 1);
                        v29 -= 2;
                        v95 -= 16;
                      }
                      while (v29 != __p);
                    }
                    v129 = &v93[16 * v97];
                    v29 = v94 + 2;
                    if (v96)
                      operator delete(v96);
                    __p = (unint64_t *)v98;
                  }
                  else
                  {
                    *v29 = v89;
                    v88 = v87;
                    v29[1] = (unint64_t)v87;
                    v29 += 2;
                  }
                }
                else
                {
                  *(_WORD *)(a4 + 16) = 1;
                  *(_QWORD *)a4 = "Failed to read protocol type in conformance requirement of runtime generic signature.";
                  *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
                }
                v141 = off_B5288;
                v99 = v182;
                if (v182 == v181)
                {
                  v99 = v181;
                  v100 = 4;
                }
                else
                {
                  if (!v182)
                    goto LABEL_138;
                  v100 = 5;
                }
                (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_138:
                v141 = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v144);
                if (v146)
                  *(_BYTE *)(v146 + 48) = 0;
                if (v88)
LABEL_141:
                  LOBYTE(v34) = 1;
                else
LABEL_166:
                  LOBYTE(v34) = 0;
                break;
              case 1:
                v142 = 0;
                v143 = 0;
                v144 = 0;
                v146 = 0;
                v147 = 0;
                v145 = 2400;
                v141 = off_B5288;
                v182 = 0;
                v149 = 0;
                v150 = 0;
                v148 = 0;
                v151 = 0;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                v160 = 0u;
                v161 = 0u;
                v162 = 0u;
                v163 = 0u;
                v164 = 0u;
                v165 = 0u;
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v170 = 0u;
                v171 = 0u;
                v172 = 0u;
                v173 = 0u;
                v174 = 0u;
                v175 = 0u;
                v176 = 0u;
                v177 = 0u;
                v178 = 0u;
                v179 = 0u;
                v180 = 0;
                v122 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v37);
                v50 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v49);
                v140[0] = v122;
                v140[1] = v50;
                LOBYTE(v229[0]) = 0;
                v52 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v50, v51);
                v118 = v53;
                v123 = (uint64_t)v52;
                v54 = (uint64_t *)operator new(0x28uLL);
                *v54 = (uint64_t)off_B4930;
                v54[1] = (uint64_t)v140;
                v54[2] = a1;
                v54[3] = (uint64_t)v229;
                v54[4] = (uint64_t)&v141;
                v228 = v54;
                v55 = (_QWORD *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v141, v123, v118, &v225);
                v56 = v228;
                if (v228 == &v225)
                {
                  v57 = v55;
                  v56 = &v225;
                  v58 = 4;
                }
                else
                {
                  if (!v228)
                    goto LABEL_79;
                  v57 = v55;
                  v58 = 5;
                }
                (*(void (**)(void))(*v56 + 8 * v58))();
                v55 = v57;
LABEL_79:
                v229[0] = a1 + 296;
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v229, v55, 0, (uint64_t)&v225);
                v69 = v227;
                if (v227 == 1)
                {
                  *(_WORD *)(a4 + 16) = 1;
                  v70 = v225;
                  v71 = v226;
                  *(_QWORD *)(a4 + 8) = v226;
                  *(_QWORD *)a4 = v71(v70, 2, 0);
                }
                else
                {
                  v126 = v227;
                  if (v227)
                    v72 = 0;
                  else
                    v72 = v225;
                  v73 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8 | 2;
                  if (v29 >= (unint64_t *)v129)
                  {
                    v79 = ((char *)v29 - (char *)__p) >> 4;
                    v80 = v79 + 1;
                    if ((unint64_t)(v79 + 1) >> 60)
                      goto LABEL_194;
                    if ((v129 - (char *)__p) >> 3 > v80)
                      v80 = (v129 - (char *)__p) >> 3;
                    v81 = 0xFFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v129 - (char *)__p) < 0x7FFFFFFFFFFFFFF0)
                      v81 = v80;
                    v130 = v81;
                    if (v81)
                    {
                      v120 = v73;
                      if (v81 >> 60)
                        goto LABEL_195;
                      v82 = (char *)operator new(16 * v81);
                      v73 = v120;
                    }
                    else
                    {
                      v82 = 0;
                    }
                    v101 = (unint64_t *)&v82[16 * v79];
                    *v101 = v73;
                    v101[1] = v72;
                    if (v29 == __p)
                    {
                      v105 = &v82[16 * v79];
                      v103 = __p;
                      v69 = v126;
                      v104 = v130;
                    }
                    else
                    {
                      v102 = &v82[16 * v79];
                      v103 = __p;
                      v69 = v126;
                      v104 = v130;
                      do
                      {
                        v105 = v102 - 16;
                        *((_OWORD *)v102 - 1) = *((_OWORD *)v29 - 1);
                        v29 -= 2;
                        v102 -= 16;
                      }
                      while (v29 != __p);
                    }
                    v129 = &v82[16 * v104];
                    v29 = v101 + 2;
                    if (v103)
                      operator delete(v103);
                    __p = (unint64_t *)v105;
                  }
                  else
                  {
                    *v29 = v73;
                    v29[1] = v72;
                    v29 += 2;
                    v69 = v126;
                  }
                }
                if (v227 == 1)
                  v226(v225, 3, 0);
                v141 = off_B5288;
                v111 = v182;
                if (v182 == v181)
                {
                  v111 = v181;
                  v112 = 4;
                }
                else
                {
                  if (!v182)
                    goto LABEL_163;
                  v112 = 5;
                }
                (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_163:
                v141 = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v144);
                if (v146)
                  *(_BYTE *)(v146 + 48) = 0;
                if (v69 == 1)
                  goto LABEL_166;
                goto LABEL_141;
              case 2:
                v142 = 0;
                v143 = 0;
                v144 = 0;
                v146 = 0;
                v147 = 0;
                v145 = 2400;
                v141 = off_B5288;
                v182 = 0;
                v149 = 0;
                v150 = 0;
                v148 = 0;
                v151 = 0;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                v160 = 0u;
                v161 = 0u;
                v162 = 0u;
                v163 = 0u;
                v164 = 0u;
                v165 = 0u;
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v170 = 0u;
                v171 = 0u;
                v172 = 0u;
                v173 = 0u;
                v174 = 0u;
                v175 = 0u;
                v176 = 0u;
                v177 = 0u;
                v178 = 0u;
                v179 = 0u;
                v180 = 0;
                v124 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v37);
                v60 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)v30 + v30[2] + 8, v59);
                v139[0] = v124;
                v139[1] = v60;
                LOBYTE(v229[0]) = 0;
                v62 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v60, v61);
                v119 = v63;
                v125 = (uint64_t)v62;
                v64 = (uint64_t *)operator new(0x28uLL);
                *v64 = (uint64_t)off_B4930;
                v64[1] = (uint64_t)v139;
                v64[2] = a1;
                v64[3] = (uint64_t)v229;
                v64[4] = (uint64_t)&v141;
                v228 = v64;
                v65 = (_QWORD *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v141, v125, v119, &v225);
                v66 = v228;
                if (v228 == &v225)
                {
                  v67 = v65;
                  v66 = &v225;
                  v68 = 4;
                }
                else
                {
                  if (!v228)
                    goto LABEL_88;
                  v67 = v65;
                  v68 = 5;
                }
                (*(void (**)(void))(*v66 + 8 * v68))();
                v65 = v67;
LABEL_88:
                v229[0] = a1 + 296;
                swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v229, v65, 0, (uint64_t)&v225);
                v74 = v227;
                if (v227 == 1)
                {
                  *(_WORD *)(a4 + 16) = 1;
                  v75 = v225;
                  v76 = v226;
                  *(_QWORD *)(a4 + 8) = v226;
                  *(_QWORD *)a4 = v76(v75, 2, 0);
                }
                else
                {
                  v127 = v227;
                  if (v227)
                    v77 = 0;
                  else
                    v77 = v225;
                  v78 = (unint64_t)v38 & 0xFFFFFFFFFFFFFFF8 | 1;
                  if (v29 >= (unint64_t *)v129)
                  {
                    v83 = ((char *)v29 - (char *)__p) >> 4;
                    v84 = v83 + 1;
                    if ((unint64_t)(v83 + 1) >> 60)
                      goto LABEL_194;
                    if ((v129 - (char *)__p) >> 3 > v84)
                      v84 = (v129 - (char *)__p) >> 3;
                    v85 = 0xFFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v129 - (char *)__p) < 0x7FFFFFFFFFFFFFF0)
                      v85 = v84;
                    v131 = v85;
                    if (v85)
                    {
                      v121 = v78;
                      if (v85 >> 60)
                        goto LABEL_195;
                      v86 = (char *)operator new(16 * v85);
                      v78 = v121;
                    }
                    else
                    {
                      v86 = 0;
                    }
                    v106 = (unint64_t *)&v86[16 * v83];
                    *v106 = v78;
                    v106[1] = v77;
                    if (v29 == __p)
                    {
                      v110 = &v86[16 * v83];
                      v108 = __p;
                      v74 = v127;
                      v109 = v131;
                    }
                    else
                    {
                      v107 = &v86[16 * v83];
                      v108 = __p;
                      v74 = v127;
                      v109 = v131;
                      do
                      {
                        v110 = v107 - 16;
                        *((_OWORD *)v107 - 1) = *((_OWORD *)v29 - 1);
                        v29 -= 2;
                        v107 -= 16;
                      }
                      while (v29 != __p);
                    }
                    v129 = &v86[16 * v109];
                    v29 = v106 + 2;
                    if (v108)
                      operator delete(v108);
                    __p = (unint64_t *)v110;
                  }
                  else
                  {
                    *v29 = v78;
                    v29[1] = v77;
                    v29 += 2;
                    v74 = v127;
                  }
                }
                if (v227 == 1)
                  v226(v225, 3, 0);
                v141 = off_B5288;
                v113 = v182;
                if (v182 == v181)
                {
                  v113 = v181;
                  v114 = 4;
                }
                else
                {
                  if (!v182)
                    goto LABEL_178;
                  v114 = 5;
                }
                (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_178:
                v141 = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v144);
                if (v146)
                  *(_BYTE *)(v146 + 48) = 0;
                if (v74 != 1)
                  goto LABEL_141;
                goto LABEL_166;
              case 3:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected same conformance requirement in runtime generic signature";
                goto LABEL_56;
              case 4:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected same-shape requirement in runtime generic signature";
                goto LABEL_56;
              case 5:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected invertible protocol in runtime generic signature";
                goto LABEL_56;
              case 0x1F:
                LOBYTE(v34) = 0;
                v45 = (const char **)a4;
                *(_WORD *)(a4 + 16) = 1;
                v46 = "Unexpected layout requirement in runtime generic signature";
                goto LABEL_56;
              default:
                goto LABEL_141;
            }
LABEL_57:
            v185[0] = off_B5288;
            v47 = v224;
            if (v224 == v223)
            {
              v47 = v223;
              v48 = 4;
            }
            else
            {
              if (!v224)
              {
LABEL_62:
                v185[0] = off_B5260;
                swift::Demangle::__runtime::NodeFactory::freeSlabs(v186);
                if (v188)
                  *(_BYTE *)(v188 + 48) = 0;
                if ((v34 & 1) == 0)
                  goto LABEL_192;
                v30 += 3;
                if (v30 == v136)
                  goto LABEL_185;
                continue;
              }
              v48 = 5;
            }
            (*(void (**)(void))(*v47 + 8 * v48))();
            goto LABEL_62;
          }
        }
        LOBYTE(v34) = 0;
      }
      v45 = (const char **)a4;
      *(_WORD *)(a4 + 16) = 1;
      v46 = "Failed to read subject type in requirement of runtime generic signature.";
LABEL_56:
      *v45 = v46;
      v45[1] = (const char *)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      goto LABEL_57;
    }
    break;
  }
  *(_WORD *)(a4 + 16) = 1;
  *(_QWORD *)a4 = "unknown kind";
  *(_QWORD *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
LABEL_192:
  v116 = __p;
  if (__p)
    goto LABEL_188;
LABEL_189:
  if (v5)
    operator delete(v5);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;

  result = 0;
  v5 = (uint64_t *)a2[1];
  v6 = *v5;
  if ((unint64_t)*v5 > 0x7FF)
    LODWORD(v6) = 0;
  if ((int)v6 > 514)
  {
    if ((_DWORD)v6 != 515 && (_DWORD)v6 != 516)
      return result;
    return *(_QWORD *)(a1 + 2504) & v5[1];
  }
  if ((v6 - 512) < 3)
    return *(_QWORD *)(a1 + 2504) & v5[1];
  if (!(_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 2504);
    result = v7 & v5[5];
    if (!result && a3 != 0)
    {
      while (1)
      {
        v10 = v5[1] & v7;
        if (!v10)
          break;
        swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v10, &v12);
        v5 = v13;
        if (!v13)
          break;
        if ((unint64_t)*v13 <= 0x7FF && *v13 != 0)
          break;
        *a2 = v12;
        a2[1] = v5;
        v7 = *(_QWORD *)(a1 + 2504);
        result = v7 & v5[5];
        if (result)
          return result;
      }
      return 0;
    }
  }
  return result;
}

_QWORD *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *Node;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  void *__p;
  void *v24;
  char *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  _BYTE v70[24];
  _BYTE *v71;
  _QWORD v72[2];

  v32[2] = 0;
  v33 = 0;
  v34 = 2400;
  v35 = 0;
  v36 = 0;
  v32[0] = off_B5288;
  v32[1] = 0;
  v71 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v69 = 0;
  v6 = (_DWORD *)a2[1];
  v26[0] = *a2;
  v26[1] = v6;
  v7 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v26, (swift::Demangle::__runtime::NodeFactory *)v32, 50);
  if (!v7
    || ((v8 = v7, (*v6 & 0x10) != 0) || (*v6 & 0x1F) == 3)
    && (Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v32, 232),
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v8, (swift::Demangle::__runtime::NodeFactory *)v32, v10, v11), (v8 = Node) == 0)|| *((_WORD *)v8 + 8) != 232)
  {
    *a3 = 0;
    a3[56] = 0;
    goto LABEL_15;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v12 = operator new(0x20uLL);
  *v12 = off_B4D48;
  v12[2] = v26;
  v12[3] = &v29;
  v27 = v12;
  v12[1] = a1;
  v13 = a2[1];
  v72[0] = *a2;
  v72[1] = v13;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(v12 + 1, v72, &v28);
  v24 = 0;
  v25 = 0;
  __p = 0;
  v14 = v29;
  v15 = v30 - (_BYTE *)v29;
  if (v30 != v29)
  {
    if (v15 < 0)
      abort();
    v16 = (char *)operator new(v30 - (_BYTE *)v29);
    v17 = &v16[8 * (v15 >> 3)];
    __p = v16;
    v25 = v17;
    memcpy(v16, v14, v15);
    v24 = v17;
  }
  swift::reflection::TypeRefBuilder::createTypeDecl((size_t *)v8, (uint64_t)&__p, (uint64_t)a3);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v18 = v27;
  if (v27 == v26)
  {
    v19 = 4;
    v18 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_25;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_25:
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
LABEL_15:
  v32[0] = off_B5288;
  v20 = v71;
  if (v71 == v70)
  {
    v21 = 4;
    v20 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_20;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_20:
  v32[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v33);
  if (v35)
    *(_BYTE *)(v35 + 48) = 0;
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getGenericSubst(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  int *v6;
  int v7;
  uint64_t v10;
  int *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TypeFromMetadata;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  _WORD *v41;
  int v42;
  _DWORD *v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  _QWORD v48[2];
  _QWORD v49[2];
  char v50;

  v6 = (int *)a3[1];
  v7 = *v6;
  if ((*v6 & 0x80) == 0)
  {
LABEL_3:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  switch(v7 & 0x1F)
  {
    case 0x10:
      v10 = a1;
      v11 = v6 + 12;
      v41 = v6 + 13;
      v13 = *((unsigned __int16 *)v6 + 28);
      if ((v7 & 0x20000000) != 0)
      {
        v48[0] = *a3;
        v48[1] = v6;
        swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(a1, v48, (uint64_t)v49);
        if (!v50)
          goto LABEL_3;
        if ((*((_BYTE *)v6 + 3) & 0x10) != 0)
          v14 = -LODWORD(v49[0]) - v6[8];
        else
          v14 = HIDWORD(v49[0]);
      }
      else
      {
        if ((v7 & 0x10000000) != 0)
        {
          v42 = 0;
          v43 = v6 + 6;
        }
        else
        {
          v42 = v6[7];
          v43 = v6 + 8;
        }
        v14 = v42 - *v43;
      }
      v12 = v14 & 0xFFFFFF00;
      v15 = (unsigned __int16)*v41;
      if (!*v41)
      {
LABEL_51:
        v47 = 0;
        v17 = 0;
        v16 = 0;
LABEL_52:
        *a5 = v16;
        a5[1] = v17;
        a5[2] = v47;
        return;
      }
LABEL_6:
      v16 = 0;
      v17 = 0;
      v47 = 0;
      v18 = v11 + 3;
      v19 = (char *)v11 + v15 + 12;
      v20 = *a2 + 8 * (int)(v12 & 0xFFFFFF00 | v14);
      v21 = v10;
      v46 = a4;
      v44 = v19;
      v45 = v10;
      break;
    case 0x11:
    case 0x12:
      v10 = a1;
      v11 = v6 + 8;
      v12 = 0;
      v13 = *((unsigned __int16 *)v6 + 20);
      LOBYTE(v14) = 2;
      v15 = *((unsigned __int16 *)v6 + 18);
      if (*((_WORD *)v6 + 18))
        goto LABEL_6;
      goto LABEL_51;
    default:
      goto LABEL_3;
  }
  while ((*v18 & 0x3F) == 0)
  {
    if (((char)*v18 & 0x80000000) == 0)
      break;
    if (!v13)
      break;
    v49[0] = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(v21 + 2488) + 32))(*(_QWORD *)(v21 + 2488), v20, v49, 8))break;
    TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(v21, v49[0], 0, a4);
    if (!TypeFromMetadata)
      break;
    v23 = TypeFromMetadata;
    if (v17 >= v47)
    {
      v24 = (v17 - v16) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        abort();
      if ((v47 - v16) >> 2 > v25)
        v25 = (v47 - v16) >> 2;
      if ((unint64_t)(v47 - v16) >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v27 = v26;
        v28 = operator new(8 * v26);
        v26 = v27;
      }
      else
      {
        v28 = 0;
      }
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v23;
      v30 = (char *)v29;
      if (v17 != v16)
      {
        v31 = v17 - v16 - 8;
        if (v31 < 0x168
          || (v32 = (v17 - 8 - v16) & 0xFFFFFFFFFFFFFFF8, &v28[v17 - v16 - 8 - v32] > &v28[v17 - v16 - 8])
          || &v17[-v32 - 8] > v17 - 8
          || (unint64_t)(v16 - v28) < 0x20)
        {
          v33 = v17;
          v30 = &v28[8 * v24];
          goto LABEL_31;
        }
        v35 = (v31 >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = &v17[-v36];
        v30 = (char *)&v29[v36 / 0xFFFFFFFFFFFFFFF8];
        v37 = &v28[8 * v24 - 16];
        v38 = v17 - 16;
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 4;
        }
        while (v39);
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_31:
            v34 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v30 - 1) = v34;
            v30 -= 8;
          }
          while (v33 != v16);
        }
      }
      v47 = &v28[8 * v26];
      if (v16)
        operator delete(v16);
      v17 = (char *)v29;
      v16 = v30;
      a4 = v46;
      v19 = v44;
      v21 = v45;
      goto LABEL_8;
    }
    *(_QWORD *)v17 = TypeFromMetadata;
LABEL_8:
    --v13;
    v20 += 8;
    v17 += 8;
    if (++v18 == v19)
      goto LABEL_52;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v16)
    operator delete(v16);
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_B4D48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4D48;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1},std::allocator<std::optional<swift::reflection::TypeRefDecl> swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}>,void ()(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD v4[2];

  v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()((uint64_t *)(a1 + 8), v4, a3);
}

void swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildNominalTypeDecl<swift::reflection::TypeRefBuilder,true>(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,unsigned long &)#1}::operator()(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  char v38[8];
  void *__p;
  uint64_t v40;
  char v41;
  char v42;

  v6 = *a1;
  v7 = a2[1];
  v37[0] = *a2;
  v37[1] = v7;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readParentContextDescriptor(v6, v37, (uint64_t)v38);
  if (v42)
  {
    if (!v38[0])
      goto LABEL_7;
    if (v40)
    {
      v8 = a1[1];
      v36[0] = __p;
      v36[1] = v40;
      v9 = *(_QWORD *)(v8 + 24);
      if (!v9)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_39;
      }
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v36, a3);
      if (v42)
      {
        if (!v38[0])
        {
LABEL_7:
          if (v41 < 0)
            operator delete(__p);
        }
      }
    }
  }
  v10 = (_DWORD *)a2[1];
  if ((*v10 & 0x80) == 0)
    return;
  v11 = *v10 & 0x1F;
  if (v11 == 18 || v11 == 17)
  {
    v12 = v10 + 8;
  }
  else
  {
    if (v11 != 16)
      return;
    v12 = v10 + 12;
  }
  v13 = a1[2];
  v14 = *((unsigned __int16 *)v12 + 2) - *a3;
  v16 = *(char **)(v13 + 8);
  v15 = *(_QWORD *)(v13 + 16);
  if ((unint64_t)v16 >= v15)
  {
    v18 = *(char **)v13;
    v19 = (uint64_t)&v16[-*(_QWORD *)v13];
    v20 = v19 >> 3;
    v21 = (v19 >> 3) + 1;
    if (!(v21 >> 61))
    {
      v22 = v15 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = operator new(8 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v14;
      v17 = v25 + 1;
      if (v16 != v18)
      {
        v27 = v16 - v18 - 8;
        if (v27 < 0x58)
          goto LABEL_43;
        if ((unint64_t)(v16 - v24 - v19) < 0x20)
          goto LABEL_43;
        v28 = (v27 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v16[-v29];
        v25 = (_QWORD *)((char *)v25 - v29);
        v31 = &v24[8 * v20 - 16];
        v32 = v16 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v16 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_43:
          do
          {
            v35 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v25 = v35;
          }
          while (v16 != v18);
        }
      }
      *(_QWORD *)v13 = v25;
      *(_QWORD *)(v13 + 8) = v17;
      *(_QWORD *)(v13 + 16) = v26;
      if (v18)
        operator delete(v18);
      goto LABEL_36;
    }
LABEL_39:
    abort();
  }
  *(_QWORD *)v16 = v14;
  v17 = v16 + 8;
LABEL_36:
  *(_QWORD *)(v13 + 8) = v17;
  *a3 += *(_QWORD *)(*(_QWORD *)(a1[2] + 8) - 8);
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  unsigned __int16 *v9;
  uint8x8_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (unsigned __int16 *)a2[1];
  v4 = *(unsigned int *)v3;
  if ((v4 & 0x20000000) == 0)
    goto LABEL_15;
  if ((v4 & 0x80) != 0)
  {
    v7 = (unsigned __int16 *)((((unint64_t)&v3[8 * ((v4 >> 7) & 1) + 23] + v3[26] + 1) & 0xFFFFFFFFFFFFFFFCLL)
                            + 12 * v3[27]);
    v8 = v3[29];
    v9 = &v7[2 * (v8 & 1)];
    if ((v8 & 1) != 0)
      v9 += 4 * *v7;
    v6 = (unint64_t)v9 + (v8 & 2);
    if ((v8 & 2) != 0
      && (v10 = (uint8x8_t)vcnt_s8((int8x8_t)*v9), v10.i16[0] = vaddlv_u8(v10), v6 += 2 * v10.u32[0], *v9))
    {
      v5 = *(unsigned __int16 *)((char *)&v9[v10.u32[0] - 1] + (v8 & 2));
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    v6 = ((unint64_t)&v3[8 * ((v4 >> 7) & 1) + 23] + 1) & 0xFFFFFFFFFFFFFFFCLL;
  }
  v11 = (int *)(((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v5);
  v12 = *v11;
  v13 = (uint64_t)v11 + *a2 - (_QWORD)v3 + v12;
  if (!(_DWORD)v12 || v13 == 0)
  {
LABEL_15:
    *(_OWORD *)a3 = xmmword_B0E70;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v15 = result;
    return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>(result, (v4 >> 25) & 7, v13, &v15, a3);
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::forTypeReference<swift::TargetClassMetadataBounds<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>,swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(swift::remote::RemoteRef<swift::TargetMetadata<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)#1},swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(swift::remote::RemoteRef<swift::TargetContextDescriptor<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>)::{lambda(unsigned long long)#1}>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;

  v7 = a3;
  v8 = result;
  switch(a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v17 = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(result + 2488) + 32))(*(_QWORD *)(result + 2488), a3, &v17, 8);
      if (!(_DWORD)result)
        goto LABEL_19;
      v7 = v17;
LABEL_4:
      result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(v8, v7, &v15);
      if (!v16 || (*v16 & 0x1F) != 0x10)
        goto LABEL_19;
      v9 = *a4;
      v17 = v15;
      v18 = v16;
      result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(v9, &v17);
      break;
    case 3:
      v15 = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(result + 2488) + 32))(*(_QWORD *)(result + 2488), a3, &v15, 8);
      if ((result & 1) == 0)
        goto LABEL_19;
      result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(v8, v15, &v17);
      if (!v18)
        goto LABEL_19;
      if (*(_QWORD *)v18 <= 0x7FFuLL && *(_QWORD *)v18 != 0)
        goto LABEL_19;
      v11 = v18[9];
      v12 = v18[8] - v11;
      v13 = v11 >> 3;
      if (v13 < 3)
        v13 = 3;
      v14 = (v12 << 29) & 0xFFFFFFFF00000000;
      if ((v12 >> 3) < 7)
        v14 = 0x700000000;
      *(_QWORD *)a5 = v14 | v13;
      *(_QWORD *)(a5 + 8) = v12;
      *(_BYTE *)(a5 + 16) = 1;
      break;
    default:
LABEL_19:
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 16) = 0;
      break;
  }
  return result;
}

unsigned int *swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readProtocol<swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver>(uint64_t a1, _QWORD *a2, swift::Demangle::__runtime::NodeFactory *a3, uint64_t a4)
{
  _DWORD *v6;
  unsigned int *result;
  size_t *v8;
  unsigned int *Node;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD v15[2];

  v12 = a4;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, *a2 & *(_QWORD *)(a1 + 2504) & 0xFFFFFFFFFFFFFFFELL, &v13);
  v6 = v14;
  if (!v14)
    return 0;
  v15[0] = v13;
  v15[1] = v14;
  result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(a1, v15, a3, 50);
  if (!result)
    return result;
  if (((v8 = (size_t *)result, (*v6 & 0x10) != 0) || (*v6 & 0x1F) == 3)
    && (Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232),
        swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v8, a3, v10, v11),
        (v8 = (size_t *)Node) == 0))
  {
    return 0;
  }
  else
  {
    return (unsigned int *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::decodeRuntimeGenericSignature(swift::remote::RemoteRef<swift::TargetExtendedExistentialTypeShape<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const>,swift::RuntimeGenericSignature<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>> const&)::ProtocolReferenceResolver::swiftProtocol(&v12, v8);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsObject::$_0>(swift_reflection_ownsObject::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t MetadataFromInstance;
  char v4;

  v2 = (_QWORD *)*a2;
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (v4)
    return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(v2, MetadataFromInstance, 1);
  else
    return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsObject::$_0>(swift_reflection_ownsObject::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t MetadataFromInstance;
  char v4;

  v2 = (_QWORD *)*a2;
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (v4)
    return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(v2, MetadataFromInstance, 1);
  else
    return 1;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int IsaEncoding;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v16;
  unint64_t v17;

  if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getTaggedPointerEncoding(a1) == 2
    && (v4 = *(_QWORD *)(a1 + 232) ^ a2, (v4 & *(_QWORD *)(a1 + 168)) != 0))
  {
    v5 = *(_QWORD *)(a1 + 200);
    if (v5 && (v4 & v5) == v5)
    {
      v6 = (a2 >> *(_QWORD *)(a1 + 208)) & *(_QWORD *)(a1 + 216);
      v7 = *(_QWORD *)(a1 + 224);
    }
    else
    {
      v6 = (a2 >> *(_QWORD *)(a1 + 176)) & *(_QWORD *)(a1 + 184);
      v7 = *(_QWORD *)(a1 + 192);
    }
    if ((*(unsigned int (**)(_QWORD, unint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                               + 32))(*(_QWORD *)(a1 + 2488), v7 + 8 * v6, &v17, 8))
    {
      v9 = *(_QWORD *)(a1 + 2504) & v17;
      v10 = v9 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v9) = 0;
      v10 = 0;
    }
  }
  else if ((*(unsigned int (**)(_QWORD, unint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                                  + 32))(*(_QWORD *)(a1 + 2488), a2, &v17, 8))
  {
    IsaEncoding = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(a1);
    LOBYTE(v9) = 0;
    v10 = 0;
    switch(IsaEncoding)
    {
      case 0:
      case 1:
        return v10 & 0xFFFFFFFFFFFFFF00 | v9;
      case 2:
        v9 = *(_QWORD *)(a1 + 2504) & v17;
        goto LABEL_26;
      case 3:
        v9 = *(_QWORD *)(a1 + 2504) & v17 & *(_QWORD *)(a1 + 104);
        goto LABEL_26;
      case 4:
        v9 = v17;
        if ((*(_QWORD *)(a1 + 120) & v17) != *(_QWORD *)(a1 + 128))
        {
LABEL_26:
          v10 = v9 & 0xFFFFFFFFFFFFFF00;
          return v10 & 0xFFFFFFFFFFFFFF00 | v9;
        }
        v11 = (*(_QWORD *)(a1 + 104) & v17) >> *(_QWORD *)(a1 + 112);
        if (!v11)
          goto LABEL_25;
        if (v11 >= *(_QWORD *)(a1 + 152))
        {
          v16 = 0;
          if (!(*(unsigned int (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                            + 32))(*(_QWORD *)(a1 + 2488), *(_QWORD *)(a1 + 144), &v16, 8))goto LABEL_25;
          v12 = v16;
          *(_QWORD *)(a1 + 152) = v16;
          if (v11 >= v12)
            goto LABEL_25;
        }
        v13 = *(_QWORD *)(a1 + 136) + 8 * v11;
        v16 = 0;
        v14 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v13, &v16, 8);
        if (v14)
          LOBYTE(v9) = v16;
        else
          LOBYTE(v9) = 0;
        if (v14)
          v10 = v16 & 0xFFFFFFFFFFFFFF00;
        else
          v10 = 0;
        break;
      default:
        abort();
    }
  }
  else
  {
LABEL_25:
    LOBYTE(v9) = 0;
    v10 = 0;
  }
  return v10 & 0xFFFFFFFFFFFFFF00 | v9;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t AddressOfNominalTypeDescriptor;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v15[2];

  v4 = (unint64_t *)a1[320];
  v5 = (unint64_t *)a1[321];
  if (v4 == v5)
  {
LABEL_7:
    v7 = (unint64_t *)a1[323];
    v8 = (unint64_t *)a1[324];
    if (v7 == v8)
    {
LABEL_13:
      if (!a3)
        return 0;
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata((uint64_t)a1, a2, v15);
      if (!v15[1])
        return 0;
      AddressOfNominalTypeDescriptor = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, v15, 1);
      if (!AddressOfNominalTypeDescriptor)
        return 0;
      v11 = (unint64_t *)a1[320];
      v12 = (unint64_t *)a1[321];
      if (v11 == v12)
        return 0;
      while (*v11 > AddressOfNominalTypeDescriptor || v11[1] <= AddressOfNominalTypeDescriptor)
      {
        v11 += 2;
        if (v11 == v12)
          return 0;
      }
    }
    else
    {
      while (*v7 > a2 || v7[1] <= a2)
      {
        v7 += 2;
        if (v7 == v8)
          goto LABEL_13;
      }
    }
  }
  else
  {
    while (*v4 > a2 || v4[1] <= a2)
    {
      v4 += 2;
      if (v4 == v5)
        goto LABEL_7;
    }
  }
  return 1;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getTaggedPointerEncoding(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  __int128 v23;

  result = *(unsigned int *)(a1 + 160);
  if (!(_DWORD)result)
  {
    v3 = *(_QWORD *)(a1 + 2488);
    __p = operator new(0x20uLL);
    v23 = xmmword_B0E80;
    strcpy((char *)__p, "objc_debug_taggedpointer_mask");
    v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 8))(v3, &__p);
    v5 = v4;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(__p);
      if (!v5)
        goto LABEL_39;
    }
    else if (!v4)
    {
      goto LABEL_39;
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v5, a1 + 168, 8))
    {
      v6 = *(_QWORD *)(a1 + 2488);
      __p = operator new(0x28uLL);
      v23 = xmmword_B0E90;
      strcpy((char *)__p, "objc_debug_taggedpointer_slot_shift");
      v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v6 + 8))(v6, &__p);
      if (SHIBYTE(v23) < 0)
        operator delete(__p);
      if (v7
        && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v7, a1 + 176, 8))
      {
        v8 = *(_QWORD *)(a1 + 2488);
        __p = operator new(0x28uLL);
        v23 = xmmword_B0E40;
        strcpy((char *)__p, "objc_debug_taggedpointer_slot_mask");
        v9 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v8 + 8))(v8, &__p);
        if (SHIBYTE(v23) < 0)
          operator delete(__p);
        if (v9
          && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v9, a1 + 184, 8))
        {
          v10 = *(_QWORD *)(a1 + 2488);
          __p = operator new(0x28uLL);
          v23 = xmmword_B0EA0;
          strcpy((char *)__p, "objc_debug_taggedpointer_classes");
          v11 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v10 + 8))(v10, &__p);
          if (SHIBYTE(v23) < 0)
            operator delete(__p);
          if (v11)
          {
            *(_QWORD *)(a1 + 200) = 0;
            *(_QWORD *)(a1 + 192) = v11;
            v12 = *(_QWORD *)(a1 + 2488);
            __p = operator new(0x28uLL);
            v23 = xmmword_B0E30;
            strcpy((char *)__p, "objc_debug_taggedpointer_ext_mask");
            v13 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v12 + 8))(v12, &__p);
            if (SHIBYTE(v23) < 0)
              operator delete(__p);
            if (!v13
              || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v13, a1 + 200, 8))
            {
              *(_QWORD *)(a1 + 208) = 0;
              v14 = *(_QWORD *)(a1 + 2488);
              std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_ext_slot_shift");
              v15 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 8))(v14, &__p);
              if (SHIBYTE(v23) < 0)
                operator delete(__p);
              if (!v15
                || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v15, a1 + 208, 8))
              {
                *(_QWORD *)(a1 + 216) = 0;
                v16 = *(_QWORD *)(a1 + 2488);
                std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_ext_slot_mask");
                v17 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v16 + 8))(v16, &__p);
                if (SHIBYTE(v23) < 0)
                  operator delete(__p);
                if (!v17
                  || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v17, a1 + 216, 8))
                {
                  v18 = *(_QWORD *)(a1 + 2488);
                  std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_ext_classes");
                  v19 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v18 + 8))(v18, &__p);
                  if (SHIBYTE(v23) < 0)
                    operator delete(__p);
                  if (v19)
                    *(_QWORD *)(a1 + 224) = v19;
                  *(_QWORD *)(a1 + 232) = 0;
                  v20 = *(_QWORD *)(a1 + 2488);
                  std::string::basic_string[abi:nn180100]<0>(&__p, "objc_debug_taggedpointer_obfuscator");
                  v21 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v20 + 8))(v20, &__p);
                  if (SHIBYTE(v23) < 0)
                    operator delete(__p);
                  if (!v21
                    || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                         + 32))(*(_QWORD *)(a1 + 2488), v21, a1 + 232, 8))
                  {
                    result = 2;
LABEL_40:
                    *(_DWORD *)(a1 + 160) = result;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_39:
    result = 1;
    goto LABEL_40;
  }
  return result;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int IsaEncoding;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v16;
  unint64_t v17;

  if (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getTaggedPointerEncoding(a1) == 2
    && (v4 = *(_QWORD *)(a1 + 232) ^ a2, (v4 & *(_QWORD *)(a1 + 168)) != 0))
  {
    v5 = *(_QWORD *)(a1 + 200);
    if (v5 && (v4 & v5) == v5)
    {
      v6 = (a2 >> *(_QWORD *)(a1 + 208)) & *(_QWORD *)(a1 + 216);
      v7 = *(_QWORD *)(a1 + 224);
    }
    else
    {
      v6 = (a2 >> *(_QWORD *)(a1 + 176)) & *(_QWORD *)(a1 + 184);
      v7 = *(_QWORD *)(a1 + 192);
    }
    if ((*(unsigned int (**)(_QWORD, unint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                               + 32))(*(_QWORD *)(a1 + 2488), v7 + 8 * v6, &v17, 8))
    {
      v9 = *(_QWORD *)(a1 + 2504) & v17;
      v10 = v9 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v9) = 0;
      v10 = 0;
    }
  }
  else if ((*(unsigned int (**)(_QWORD, unint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                                  + 32))(*(_QWORD *)(a1 + 2488), a2, &v17, 8))
  {
    IsaEncoding = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::getIsaEncoding(a1);
    LOBYTE(v9) = 0;
    v10 = 0;
    switch(IsaEncoding)
    {
      case 0:
      case 1:
        return v10 & 0xFFFFFFFFFFFFFF00 | v9;
      case 2:
        v9 = *(_QWORD *)(a1 + 2504) & v17;
        goto LABEL_26;
      case 3:
        v9 = *(_QWORD *)(a1 + 2504) & v17 & *(_QWORD *)(a1 + 104);
        goto LABEL_26;
      case 4:
        v9 = v17;
        if ((*(_QWORD *)(a1 + 120) & v17) != *(_QWORD *)(a1 + 128))
        {
LABEL_26:
          v10 = v9 & 0xFFFFFFFFFFFFFF00;
          return v10 & 0xFFFFFFFFFFFFFF00 | v9;
        }
        v11 = (*(_QWORD *)(a1 + 104) & v17) >> *(_QWORD *)(a1 + 112);
        if (!v11)
          goto LABEL_25;
        if (v11 >= *(_QWORD *)(a1 + 152))
        {
          v16 = 0;
          if (!(*(unsigned int (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                            + 32))(*(_QWORD *)(a1 + 2488), *(_QWORD *)(a1 + 144), &v16, 8))goto LABEL_25;
          v12 = v16;
          *(_QWORD *)(a1 + 152) = v16;
          if (v11 >= v12)
            goto LABEL_25;
        }
        v13 = *(_QWORD *)(a1 + 136) + 8 * v11;
        v16 = 0;
        v14 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v13, &v16, 8);
        if (v14)
          LOBYTE(v9) = v16;
        else
          LOBYTE(v9) = 0;
        if (v14)
          v10 = v16 & 0xFFFFFFFFFFFFFF00;
        else
          v10 = 0;
        break;
      default:
        abort();
    }
  }
  else
  {
LABEL_25:
    LOBYTE(v9) = 0;
    v10 = 0;
  }
  return v10 & 0xFFFFFFFFFFFFFF00 | v9;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t AddressOfNominalTypeDescriptor;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v15[2];

  v4 = (unint64_t *)a1[320];
  v5 = (unint64_t *)a1[321];
  if (v4 == v5)
  {
LABEL_7:
    v7 = (unint64_t *)a1[323];
    v8 = (unint64_t *)a1[324];
    if (v7 == v8)
    {
LABEL_13:
      if (!a3)
        return 0;
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata((uint64_t)a1, a2, v15);
      if (!v15[1])
        return 0;
      AddressOfNominalTypeDescriptor = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor((uint64_t)a1, v15, 1);
      if (!AddressOfNominalTypeDescriptor)
        return 0;
      v11 = (unint64_t *)a1[320];
      v12 = (unint64_t *)a1[321];
      if (v11 == v12)
        return 0;
      while (*v11 > AddressOfNominalTypeDescriptor || v11[1] <= AddressOfNominalTypeDescriptor)
      {
        v11 += 2;
        if (v11 == v12)
          return 0;
      }
    }
    else
    {
      while (*v7 > a2 || v7[1] <= a2)
      {
        v7 += 2;
        if (v7 == v8)
          goto LABEL_13;
      }
    }
  }
  else
  {
    while (*v4 > a2 || v4[1] <= a2)
    {
      v4 += 2;
      if (v4 == v5)
        goto LABEL_7;
    }
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddress::$_0>(swift_reflection_ownsAddress::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, _QWORD **a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(*a2, ****a1, 1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddress::$_0>(swift_reflection_ownsAddress::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, _QWORD **a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::ownsAddress(*a2, ****a1, 1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddressStrict::$_0>(swift_reflection_ownsAddressStrict::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v7;
  unint64_t *v8;
  BOOL v9;
  uint64_t result;

  v2 = *a2;
  v3 = ****a1;
  v4 = *(unint64_t **)(*a2 + 2560);
  v5 = *(unint64_t **)(*a2 + 2568);
  if (v4 == v5)
  {
LABEL_7:
    v7 = *(unint64_t **)(v2 + 2584);
    v8 = *(unint64_t **)(v2 + 2592);
    if (v7 == v8)
    {
      return 0;
    }
    else
    {
      do
      {
        v9 = *v7 <= v3 && v7[1] > v3;
        result = v9;
        if (v9)
          break;
        v7 += 2;
      }
      while (v7 != v8);
    }
  }
  else
  {
    while (*v4 > v3 || v4[1] <= v3)
    {
      v4 += 2;
      if (v4 == v5)
        goto LABEL_7;
    }
    return 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_ownsAddressStrict::$_0>(swift_reflection_ownsAddressStrict::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v7;
  unint64_t *v8;
  BOOL v9;
  uint64_t result;

  v2 = *a2;
  v3 = ****a1;
  v4 = *(unint64_t **)(*a2 + 2560);
  v5 = *(unint64_t **)(*a2 + 2568);
  if (v4 == v5)
  {
LABEL_7:
    v7 = *(unint64_t **)(v2 + 2584);
    v8 = *(unint64_t **)(v2 + 2592);
    if (v7 == v8)
    {
      return 0;
    }
    else
    {
      do
      {
        v9 = *v7 <= v3 && v7[1] > v3;
        result = v9;
        if (v9)
          break;
        v7 += 2;
      }
      while (v7 != v8);
    }
  }
  else
  {
    while (*v4 > v3 || v4[1] <= v3)
    {
      v4 += 2;
      if (v4 == v5)
        goto LABEL_7;
    }
    return 1;
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long SwiftReflectionContext::withContext<unsigned long,swift_reflection_metadataForObject::$_0>(swift_reflection_metadataForObject::$_0 const&)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t result;
  char v3;

  result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (!v3)
    return 0;
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long SwiftReflectionContext::withContext<unsigned long,swift_reflection_metadataForObject::$_0>(swift_reflection_metadataForObject::$_0 const&)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t result;
  char v3;

  result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (!v3)
    return 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_metadataNominalTypeDescriptor::$_0>(swift_reflection_metadataNominalTypeDescriptor::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a2;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(*a2, ****a1, v4);
  if (v4[1])
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(v2, v4, 1);
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_metadataNominalTypeDescriptor::$_0>(swift_reflection_metadataNominalTypeDescriptor::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a2;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(*a2, ****a1, v4);
  if (v4[1])
    return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readAddressOfNominalTypeDescriptor(v2, v4, 1);
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataIsActor::$_0>(swift_reflection_metadataIsActor::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(*a2, ****a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataIsActor::$_0>(swift_reflection_metadataIsActor::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(*a2, ****a1);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v8;
  _DWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;

  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v18);
  if (!v19)
    return 0;
  if (*v19 <= 0x7FFuLL && *v19 != 0)
    return 0;
  if ((swift_reflection_classIsSwiftMask & v19[4]) == 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 2504) & v19[8];
  if (!v4)
    return 0;
  v5 = *(unint64_t **)(a1 + 2560);
  v6 = *(unint64_t **)(a1 + 2568);
  if (v5 == v6)
    return 0;
  while (*v5 > v4 || v5[1] <= v4)
  {
    v5 += 2;
    if (v5 == v6)
      return 0;
  }
  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v15);
  v10 = v15;
  if (!v15)
  {
    v8 = 0;
    v15 = 0;
    goto LABEL_21;
  }
  v11 = *v15;
  v15 = 0;
  v20 = v10;
  if (v17)
  {
    v8 = (v11 >> 23) & 1;
    (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)v17 + 48))(v17, &v20);
LABEL_21:
    v12 = v17;
    if (v17 == v16)
    {
      v13 = 4;
      v12 = v16;
      goto LABEL_25;
    }
    if (v17)
    {
      v13 = 5;
LABEL_25:
      (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
    }
    return v8;
  }
  v14 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(v14);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataIsActor(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v8;
  _DWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;

  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v18);
  if (!v19)
    return 0;
  if (*v19 <= 0x7FFuLL && *v19 != 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 2504) & v19[5];
  if (!v4)
    return 0;
  v5 = *(unint64_t **)(a1 + 2560);
  v6 = *(unint64_t **)(a1 + 2568);
  if (v5 == v6)
    return 0;
  while (*v5 > v4 || v5[1] <= v4)
  {
    v5 += 2;
    if (v5 == v6)
      return 0;
  }
  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v15);
  v10 = v15;
  if (!v15)
  {
    v8 = 0;
    v15 = 0;
    goto LABEL_20;
  }
  v11 = *v15;
  v15 = 0;
  v20 = v10;
  if (v17)
  {
    v8 = (v11 >> 23) & 1;
    (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)v17 + 48))(v17, &v20);
LABEL_20:
    v12 = v17;
    if (v17 == v16)
    {
      v13 = 4;
      v12 = v16;
      goto LABEL_24;
    }
    if (v17)
    {
      v13 = 5;
LABEL_24:
      (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
    }
    return v8;
  }
  v14 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForInstance::$_0>(swift_reflection_typeRefForInstance::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v14);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForInstance::$_0>(swift_reflection_typeRefForInstance::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t MetadataFromInstance;
  char v4;

  v2 = *a2;
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (v4)
    return swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(v2, MetadataFromInstance, 0, 50);
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForInstance::$_0>(swift_reflection_typeRefForInstance::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t MetadataFromInstance;
  char v4;

  v2 = *a2;
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(*a2, ****a1);
  if (v4)
    return swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(v2, MetadataFromInstance, 0, 50);
  else
    return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMangledTypeName::$_0>(swift_reflection_typeRefForMangledTypeName::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_WORD *****a1, uint64_t *a2)
{
  _QWORD v3[2];
  __int16 v4;

  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMangledName(*a2, ****a1, (unint64_t)*(**a1)[1], (uint64_t)v3);
  if (v4 == 1)
  {
    ((void (*)(_QWORD, uint64_t, _QWORD))v3[1])(v3[0], 3, 0);
  }
  else if (!v4)
  {
    return v3[0];
  }
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_typeRefForMangledTypeName::$_0>(swift_reflection_typeRefForMangledTypeName::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_WORD *****a1, uint64_t *a2)
{
  _QWORD v3[2];
  __int16 v4;

  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMangledName(*a2, ****a1, (unint64_t)*(**a1)[1], (uint64_t)v3);
  if (v4 == 1)
  {
    ((void (*)(_QWORD, uint64_t, _QWORD))v3[1])(v3[0], 3, 0);
  }
  else if (!v4)
  {
    return v3[0];
  }
  return 0;
}

_QWORD *swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMangledName@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v14[2] = 0;
  v15 = 0;
  v16 = 2400;
  v17 = 0;
  v18 = 0;
  v14[0] = off_B5288;
  v14[1] = 0;
  v53 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v51 = 0;
  v13 = 0;
  v6 = (_QWORD *)swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v14, a2, a3, v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v54 = a1 + 296;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v54, v6, 0, a4);
  v14[0] = off_B5288;
  v9 = v53;
  if (v53 == v52)
  {
    v10 = 4;
    v9 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v14[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v15);
  if (v17)
    *(_BYTE *)(v17 + 48) = 0;
  return result;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char * SwiftReflectionContext::withContext<char *,swift_reflection_copyDemangledNameForProtocolDescriptor::$_0>(swift_reflection_copyDemangledNameForProtocolDescriptor::$_0 const&)::{lambda(char *&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t v3;
  _DWORD *size;
  unsigned int *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[18];
  char v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  std::string __s1;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _BYTE v63[24];
  _BYTE *v64;

  v2 = **a1;
  v3 = *a2;
  v25[2] = 0;
  v26 = 0;
  v27 = 2400;
  v28 = 0;
  v29 = 0;
  v25[0] = off_B5288;
  v25[1] = 0;
  v64 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v62 = 0;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(v3, **v2, (uint64_t *)&__s1);
  size = (_DWORD *)__s1.__r_.__value_.__l.__size_;
  if (__s1.__r_.__value_.__l.__size_)
  {
    *(_OWORD *)v16 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
    v5 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(v3, v16, (swift::Demangle::__runtime::NodeFactory *)v25, 50);
    if (v5 && ((*size & 0x10) != 0 || (*size & 0x1F) == 3))
    {
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v25, 232);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::NodeFactory *)v25, v7, v8);
      v5 = Node;
    }
  }
  else
  {
    v5 = 0;
  }
  v16[0] = 0;
  *(_QWORD *)&v16[1] = 0x101010101010101;
  v16[9] = 1;
  *(_QWORD *)&v16[10] = 0x101010100000000;
  v17 = 1;
  v18 = 256;
  v19 = 1;
  v20 = 0;
  v21 = 0;
  v22[0] = off_B4B28;
  v22[1] = swift::Demangle::__runtime::genericParameterName;
  v23 = v22;
  swift::Demangle::__runtime::nodeToString((swift::Demangle::__runtime::Node *)v5, (__int128 *)v16, &__s1);
  v9 = v23;
  if (v23 == v22)
  {
    v10 = 4;
    v9 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_12;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_12:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__s1.__r_.__value_.__r.__words[0];
    v11 = strdup(__s1.__r_.__value_.__l.__data_);
    operator delete(v12);
  }
  else
  {
    v11 = strdup((const char *)&__s1);
  }
  v25[0] = off_B5288;
  v13 = v64;
  if (v64 == v63)
  {
    v14 = 4;
    v13 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_20;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_20:
  v25[0] = off_B5260;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v26);
  if (v28)
    *(_BYTE *)(v28 + 48) = 0;
  return v11;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char * SwiftReflectionContext::withContext<char *,swift_reflection_copyDemangledNameForProtocolDescriptor::$_0>(swift_reflection_copyDemangledNameForProtocolDescriptor::$_0 const&)::{lambda(char *&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t v3;
  _DWORD *size;
  unsigned int *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[18];
  char v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  std::string __s1;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _BYTE v63[24];
  _BYTE *v64;

  v2 = **a1;
  v3 = *a2;
  v25[2] = 0;
  v26 = 0;
  v27 = 2400;
  v28 = 0;
  v29 = 0;
  v25[0] = off_B5288;
  v25[1] = 0;
  v64 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v62 = 0;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(v3, **v2, (uint64_t *)&__s1);
  size = (_DWORD *)__s1.__r_.__value_.__l.__size_;
  if (__s1.__r_.__value_.__l.__size_)
  {
    *(_OWORD *)v16 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
    v5 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::buildContextDescriptorMangling(v3, v16, (swift::Demangle::__runtime::NodeFactory *)v25, 50);
    if (v5 && ((*size & 0x10) != 0 || (*size & 0x1F) == 3))
    {
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v25, 232);
      swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::NodeFactory *)v25, v7, v8);
      v5 = Node;
    }
  }
  else
  {
    v5 = 0;
  }
  v16[0] = 0;
  *(_QWORD *)&v16[1] = 0x101010101010101;
  v16[9] = 1;
  *(_QWORD *)&v16[10] = 0x101010100000000;
  v17 = 1;
  v18 = 256;
  v19 = 1;
  v20 = 0;
  v21 = 0;
  v22[0] = off_B4B28;
  v22[1] = swift::Demangle::__runtime::genericParameterName;
  v23 = v22;
  swift::Demangle::__runtime::nodeToString((swift::Demangle::__runtime::Node *)v5, (__int128 *)v16, &__s1);
  v9 = v23;
  if (v23 == v22)
  {
    v10 = 4;
    v9 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_12;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_12:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__s1.__r_.__value_.__r.__words[0];
    v11 = strdup(__s1.__r_.__value_.__l.__data_);
    operator delete(v12);
  }
  else
  {
    v11 = strdup((const char *)&__s1);
  }
  v25[0] = off_B5288;
  v13 = v64;
  if (v64 == v63)
  {
    v14 = 4;
    v13 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_20;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_20:
  v25[0] = off_B5260;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(v26);
  if (v28)
    *(_BYTE *)(v28 + 48) = 0;
  return v11;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForTypeRef::$_0>(swift_reflection_infoForTypeRef::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t TypeInfo;
  double result;
  uint64_t v8;
  int v9;
  int v10;

  v5 = ****a1;
  if (v5 && (TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v5, 0)) != 0)
  {
    v8 = TypeInfo;
    v9 = *(_DWORD *)(TypeInfo + 8);
    if (v9 == 1 || v9 == 4)
      v10 = -1431655765 * ((*(_QWORD *)(TypeInfo + 48) - *(_QWORD *)(TypeInfo + 40)) >> 4);
    else
      v10 = 0;
    *(_DWORD *)a3 = getTypeInfoKind(TypeInfo);
    result = *(double *)(v8 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v8 + 20);
    *(_DWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForTypeRef::$_0>(swift_reflection_infoForTypeRef::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t TypeInfo;
  double result;
  uint64_t v8;
  int v9;
  int v10;

  v5 = ****a1;
  if (v5 && (TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v5, 0)) != 0)
  {
    v8 = TypeInfo;
    v9 = *(_DWORD *)(TypeInfo + 8);
    if (v9 == 1 || v9 == 4)
      v10 = -1431655765 * ((*(_QWORD *)(TypeInfo + 48) - *(_QWORD *)(TypeInfo + 40)) >> 4);
    else
      v10 = 0;
    *(_DWORD *)a3 = getTypeInfoKind(TypeInfo);
    result = *(double *)(v8 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v8 + 20);
    *(_DWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfTypeRef::$_0>(swift_reflection_childOfTypeRef::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;

  v5 = **(_QWORD **)result;
  v6 = **(_QWORD **)v5;
  if (v6 && (result = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v6, 0)) != 0)
  {
    v7 = *(_DWORD *)(result + 8);
    if (v7 == 1 || v7 == 4)
    {
      v9 = **(_DWORD **)(v5 + 8);
      v10 = *(_QWORD *)(result + 40);
      v11 = (uint64_t **)(v10 + 48 * v9);
      if (*((char *)v11 + 23) < 0)
        v11 = (uint64_t **)*v11;
      *(_QWORD *)a3 = v11;
      v12 = v10 + 48 * v9;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v12 + 24);
      result = getTypeInfoKind(*(_QWORD *)(v12 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v12 + 32);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfTypeRef::$_0>(swift_reflection_childOfTypeRef::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;

  v5 = **(_QWORD **)result;
  v6 = **(_QWORD **)v5;
  if (v6 && (result = swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, v6, 0)) != 0)
  {
    v7 = *(_DWORD *)(result + 8);
    if (v7 == 1 || v7 == 4)
    {
      v9 = **(_DWORD **)(v5 + 8);
      v10 = *(_QWORD *)(result + 40);
      v11 = (uint64_t **)(v10 + 48 * v9);
      if (*((char *)v11 + 23) < 0)
        v11 = (uint64_t **)*v11;
      *(_QWORD *)a3 = v11;
      v12 = v10 + 48 * v9;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v12 + 24);
      result = getTypeInfoKind(*(_QWORD *)(v12 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v12 + 32);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForMetadata::$_0>(swift_reflection_infoForMetadata::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t MetadataTypeInfo;
  double result;
  uint64_t v6;
  int v7;
  int v8;

  MetadataTypeInfo = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
  {
    v6 = MetadataTypeInfo;
    v7 = *(_DWORD *)(MetadataTypeInfo + 8);
    if (v7 == 1 || v7 == 4)
      v8 = -1431655765 * ((*(_QWORD *)(MetadataTypeInfo + 48) - *(_QWORD *)(MetadataTypeInfo + 40)) >> 4);
    else
      v8 = 0;
    *(_DWORD *)a3 = getTypeInfoKind(MetadataTypeInfo);
    result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForMetadata::$_0>(swift_reflection_infoForMetadata::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(uint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t MetadataTypeInfo;
  double result;
  uint64_t v6;
  int v7;
  int v8;

  MetadataTypeInfo = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
  {
    v6 = MetadataTypeInfo;
    v7 = *(_DWORD *)(MetadataTypeInfo + 8);
    if (v7 == 1 || v7 == 4)
      v8 = -1431655765 * ((*(_QWORD *)(MetadataTypeInfo + 48) - *(_QWORD *)(MetadataTypeInfo + 40)) >> 4);
    else
      v8 = 0;
    *(_DWORD *)a3 = getTypeInfoKind(MetadataTypeInfo);
    result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t ClassInstanceTypeInfo;
  const swift::reflection::TypeRef *TypeFromMetadata;
  uint64_t v9;
  uint64_t ObjCRODataPtr;
  char v11;
  _QWORD *v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  if (a3)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  else
    v6 = 0;
  v14 = a2;
  v15 = (_QWORD *)v6;
  v16 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16)&& v16 != (_QWORD *)(*(_QWORD *)(a1 + 2512) + 24 * *(unsigned int *)(a1 + 2528)))
  {
    return v16[2];
  }
  TypeFromMetadata = (const swift::reflection::TypeRef *)swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, a2, 0, 50);
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
  v9 = (uint64_t)v15;
  if (v15)
  {
    if (*v15 <= 0x7FFuLL)
      v9 = *v15 | 0x100000000;
    else
      v9 = 0x100000000;
  }
  ClassInstanceTypeInfo = 0;
  if (TypeFromMetadata && (v9 & 0x100000000) != 0 && !(_DWORD)v9)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
    if (v15
      && (*v15 > 0x7FFuLL || !*v15)
      && (ObjCRODataPtr = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, a2)) != 0&& (LODWORD(v16) = 0, (*(unsigned int (**)(_QWORD, uint64_t, _QWORD **, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), ObjCRODataPtr + 4, &v16, 4)))
    {
      ClassInstanceTypeInfo = swift::reflection::TypeConverter::getClassInstanceTypeInfo((swift::reflection::TypeRefBuilder **)(a1 + 920), TypeFromMetadata, (int)v16, a3);
    }
    else
    {
      ClassInstanceTypeInfo = 0;
    }
  }
  v14 = a2;
  v15 = (_QWORD *)v6;
  v16 = 0;
  v11 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16);
  v12 = v16;
  if ((v11 & 1) == 0)
  {
    v12 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::InsertIntoBucketImpl<std::pair<unsigned long long,void *>>(a1 + 2512, (uint64_t)&v14, &v14, v16);
    *v12 = v14;
    v12[1] = v15;
    v12[2] = 0;
  }
  v12[2] = ClassInstanceTypeInfo;
  return ClassInstanceTypeInfo;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = a2[1];
    v6 = ((0x2500000000 * *a2) | (v5 >> 4) ^ (v5 >> 9))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (_QWORD *)(*a1 + 24 * v11);
    v14 = *v12;
    v13 = v12[1];
    if (*a2 == *v12 && v5 == v13)
    {
      result = 1;
      *a3 = v12;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -1 || v13 != -4096)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v13 == -8192;
        if (v19 && v14 == -2)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = (_QWORD *)(v4 + 24 * (v21 & v10));
        v14 = *v12;
        v13 = v12[1];
        if (*a2 == *v12 && v5 == v13)
        {
          *a3 = v12;
          return result;
        }
      }
      result = 0;
      if (v16)
        v12 = v16;
      *a3 = v12;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::InsertIntoBucketImpl<std::pair<unsigned long long,void *>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::grow(a1, v7);
    v9 = 0;
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void __swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  __swift::__runtime::llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *buffer;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  __swift::__runtime::llvm *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  _QWORD *v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(__swift::__runtime::llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = __swift::__runtime::llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (!v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(_DWORD *)(a1 + 16);
    if (!v13)
      return;
    v14 = 24 * v13 - 24;
    if (v14 >= 0x18)
    {
      v25 = v14 / 0x18 + 1;
      v15 = (_OWORD *)((char *)buffer + 24 * (v25 & 0x1FFFFFFFFFFFFFFELL));
      v26 = v25 & 0x1FFFFFFFFFFFFFFELL;
      v27 = buffer;
      do
      {
        *v27 = xmmword_B0EB0;
        *(_OWORD *)((char *)v27 + 24) = xmmword_B0EB0;
        v27 += 3;
        v26 -= 2;
      }
      while (v26);
      if (v25 == (v25 & 0x1FFFFFFFFFFFFFFELL))
        return;
    }
    else
    {
      v15 = buffer;
    }
    v28 = (_OWORD *)((char *)buffer + 24 * v13);
    do
    {
      *v15 = xmmword_B0EB0;
      v15 = (_OWORD *)((char *)v15 + 24);
    }
    while (v15 != v28);
    return;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)buffer + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = buffer;
      do
      {
        *v18 = xmmword_B0EB0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_B0EB0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_16;
    }
    else
    {
      v12 = buffer;
    }
    v19 = (_OWORD *)((char *)buffer + 24 * v10);
    do
    {
      *v12 = xmmword_B0EB0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
  }
LABEL_16:
  if ((_DWORD)v3)
  {
    v20 = 24 * v3;
    v21 = v4;
    do
    {
      v24 = *((_QWORD *)v21 + 1);
      if ((*(_QWORD *)v21 != -1 || v24 != -4096) && (*(_QWORD *)v21 != -2 || v24 != -8192))
      {
        v29 = 0;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)a1, v21, &v29);
        v22 = v29;
        v23 = *((_QWORD *)v21 + 1);
        *v29 = *(_QWORD *)v21;
        v22[1] = v23;
        v22[2] = *((_QWORD *)v21 + 2);
        ++*(_DWORD *)(a1 + 8);
      }
      v21 = (__swift::__runtime::llvm *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
  }
  __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(24 * v3), (std::align_val_t)8uLL);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t ClassInstanceTypeInfo;
  const swift::reflection::TypeRef *TypeFromMetadata;
  uint64_t v9;
  uint64_t InstanceStartFromClassMetadata;
  char v11;
  _QWORD *v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  if (a3)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  else
    v6 = 0;
  v14 = a2;
  v15 = (_QWORD *)v6;
  v16 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16)&& v16 != (_QWORD *)(*(_QWORD *)(a1 + 2512) + 24 * *(unsigned int *)(a1 + 2528)))
  {
    return v16[2];
  }
  TypeFromMetadata = (const swift::reflection::TypeRef *)swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, a2, 0, 50);
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
  v9 = (uint64_t)v15;
  if (v15)
  {
    if (*v15 <= 0x7FFuLL)
      v9 = *v15 | 0x100000000;
    else
      v9 = 0x100000000;
  }
  ClassInstanceTypeInfo = 0;
  if (TypeFromMetadata && (v9 & 0x100000000) != 0 && !(_DWORD)v9)
  {
    InstanceStartFromClassMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readInstanceStartFromClassMetadata(a1, a2);
    if ((InstanceStartFromClassMetadata & 0xFF00000000) != 0)
      ClassInstanceTypeInfo = swift::reflection::TypeConverter::getClassInstanceTypeInfo((swift::reflection::TypeRefBuilder **)(a1 + 920), TypeFromMetadata, InstanceStartFromClassMetadata, a3);
    else
      ClassInstanceTypeInfo = 0;
  }
  v14 = a2;
  v15 = (_QWORD *)v6;
  v16 = 0;
  v11 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::LookupBucketFor<std::pair<unsigned long long,void *>>((uint64_t *)(a1 + 2512), &v14, &v16);
  v12 = v16;
  if ((v11 & 1) == 0)
  {
    v12 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>,std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned long long,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned long long,void *>,swift::reflection::RecordTypeInfo const*>>::InsertIntoBucketImpl<std::pair<unsigned long long,void *>>(a1 + 2512, (uint64_t)&v14, &v14, v16);
    *v12 = v14;
    v12[1] = v15;
    v12[2] = 0;
  }
  v12[2] = ClassInstanceTypeInfo;
  return ClassInstanceTypeInfo;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readInstanceStartFromClassMetadata(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v14);
  v3 = (unint64_t)v15;
  if (!v15)
    goto LABEL_17;
  if (*v15 <= 0x7FFuLL && *v15 != 0)
  {
LABEL_16:
    v3 = 0;
LABEL_17:
    v9 = 0;
    v10 = 0;
    return v9 | v3 | v10;
  }
  v5 = v15[1];
  v6 = *(_QWORD *)(a1 + 2504);
  for (i = 16; (v6 & v5) != 0; v6 = *(_QWORD *)(a1 + 2504))
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v5 & v6, &v12);
    v3 = v13;
    v14 = v12;
    v15 = (_QWORD *)v13;
    if (!v13)
      goto LABEL_17;
    if (*(_QWORD *)v13 <= 0x7FFuLL && *(_QWORD *)v13 != 0)
      goto LABEL_16;
    i = i + *(_DWORD *)(v13 + 24) - 16;
    v5 = *(_QWORD *)(v13 + 8);
  }
  v9 = i & 0xFFFFFF00;
  v3 = i;
  v10 = 0x100000000;
  return v9 | v3 | v10;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfMetadata::$_0>(swift_reflection_childOfMetadata::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;

  v4 = **a1;
  result = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, **(_QWORD **)v4, 0);
  if (result)
  {
    v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      v8 = **(_DWORD **)(v4 + 8);
      v9 = *(_QWORD *)(result + 40);
      v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0)
        v10 = (uint64_t **)*v10;
      *(_QWORD *)a3 = v10;
      v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      result = getTypeInfoKind(*(_QWORD *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v11 + 32);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfMetadata::$_0>(swift_reflection_childOfMetadata::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;

  v4 = **a1;
  result = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, **(_QWORD **)v4, 0);
  if (result)
  {
    v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      v8 = **(_DWORD **)(v4 + 8);
      v9 = *(_QWORD *)(result + 40);
      v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0)
        v10 = (uint64_t **)*v10;
      *(_QWORD *)a3 = v10;
      v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      result = getTypeInfoKind(*(_QWORD *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v11 + 32);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForInstance::$_0>(swift_reflection_infoForInstance::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(unint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t InstanceTypeInfo;
  double result;
  uint64_t v6;
  int v7;
  int v8;

  InstanceTypeInfo = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
  {
    v6 = InstanceTypeInfo;
    v7 = *(_DWORD *)(InstanceTypeInfo + 8);
    if (v7 == 1 || v7 == 4)
      v8 = -1431655765 * ((*(_QWORD *)(InstanceTypeInfo + 48) - *(_QWORD *)(InstanceTypeInfo + 40)) >> 4);
    else
      v8 = 0;
    *(_DWORD *)a3 = getTypeInfoKind(InstanceTypeInfo);
    result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_typeinfo SwiftReflectionContext::withContext<swift_typeinfo,swift_reflection_infoForInstance::$_0>(swift_reflection_infoForInstance::$_0 const&)::{lambda(swift_typeinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<D0>(unint64_t ****a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t InstanceTypeInfo;
  double result;
  uint64_t v6;
  int v7;
  int v8;

  InstanceTypeInfo = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
  {
    v6 = InstanceTypeInfo;
    v7 = *(_DWORD *)(InstanceTypeInfo + 8);
    if (v7 == 1 || v7 == 4)
      v8 = -1431655765 * ((*(_QWORD *)(InstanceTypeInfo + 48) - *(_QWORD *)(InstanceTypeInfo + 40)) >> 4);
    else
      v8 = 0;
    *(_DWORD *)a3 = getTypeInfoKind(InstanceTypeInfo);
    result = *(double *)(v6 + 12);
    *(double *)(a3 + 4) = result;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v6 + 20);
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t MetadataFromInstance;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t ClosureContextInfo;
  unint64_t v13;
  void *v14;
  int v15;
  void *v17;
  uint64_t *v18;
  unsigned __int8 v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;

  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7)
    return 0;
  v8 = MetadataFromInstance;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v17);
  if (!v18)
    return 0;
  v9 = *v18;
  if ((unint64_t)*v18 > 0x7FF)
    LODWORD(v9) = 0;
  if ((_DWORD)v9 == 1280)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, (uint64_t *)&v17);
    if (v18)
    {
      v11 = v18[2];
      v10 = a1;
      return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
    }
    return 0;
  }
  if ((_DWORD)v9 == 1024)
  {
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, &v22);
    if (v23 && *v23 == 1024)
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 2488) + 40))(&v17, *(_QWORD *)(a1 + 2488), v22 + 16, v23[2]);
      v14 = v17;
      v13 = (unint64_t)v18;
      v15 = (char)v19;
      if ((v19 & 0x80u) == 0)
        v13 = v19;
      if (v13
        || (swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getCaptureDescriptor((swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *)(a1 + 1976), v20, v21), !v21[0]))
      {
        ClosureContextInfo = 0;
        if ((v15 & 0x80000000) == 0)
          return ClosureContextInfo;
      }
      else
      {
        v22 = v21[0];
        v23 = (_QWORD *)v21[1];
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo((_QWORD *)(a1 + 1976), (const char *)&v22, (uint64_t)&v17);
        ClosureContextInfo = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(a1, a2, (uint64_t)&v17, a3);
        swift::reflection::ClosureContextInfo::~ClosureContextInfo((swift::reflection::ClosureContextInfo *)&v17);
        if ((v15 & 0x80000000) == 0)
          return ClosureContextInfo;
      }
      operator delete(v14);
      return ClosureContextInfo;
    }
    return 0;
  }
  if ((_DWORD)v9)
    return 0;
  v10 = a1;
  v11 = v8;
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  swift::reflection::TypeConverter *v8;
  unint64_t MetadataFromInstance;
  char v10;
  const swift::reflection::TypeRef **v11;
  uint64_t v12;
  uint64_t v13;
  const swift::reflection::TypeRef *v14;
  unint64_t *v15;
  unint64_t *v16;
  char v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *i;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t MetadataSource;
  char v27;
  uint64_t TypeFromMetadata;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  const swift::reflection::TypeRef **v42;
  uint64_t v43;
  void *__p;
  char v45;
  __swift::__runtime::llvm *v46[2];
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[2];
  int v52;
  char v53;
  int v54;
  void *v55;
  void **v56;
  uint64_t v57;
  __int16 v58;

  v8 = (swift::reflection::TypeConverter *)(a1 + 920);
  v51[0] = a1 + 920;
  v51[1] = 0x100000000;
  v52 = 0;
  v53 = 1;
  v54 = 9;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v58 = 1;
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v10
    || (swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v48), !v49)|| *v49 != 1024)
  {
    v35 = 0;
    v36 = (void **)v55;
    if (!v55)
      return v35;
    goto LABEL_53;
  }
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, *((_DWORD *)v49 + 2), 8u, 0, 1);
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, 8 * *(_DWORD *)(a3 + 48), 8u, 0, 1);
  v49 = 0;
  v50 = 0;
  v48 = (uint64_t *)&v49;
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v11 = *(const swift::reflection::TypeRef ***)a3;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (!v12)
    goto LABEL_51;
  v13 = v12 >> 3;
  v40 = a3;
  v41 = a4;
  while (1)
  {
    v14 = *v11;
    if (!*v11)
      break;
    v43 = v13;
    if ((swift::reflection::TypeRef::isConcreteAfterSubstitutions((uint64_t)v14, (uint64_t *)v46) & 1) != 0)
    {
      v14 = (const swift::reflection::TypeRef *)swift::reflection::TypeRef::subst((uint64_t)v14, a1 + 296, (uint64_t *)v46);
      if (v14)
        goto LABEL_9;
    }
    else if ((swift::reflection::TypeConverter::hasFixedSize(v8, v14) & 1) != 0)
    {
LABEL_9:
      v45 = 0;
      LOBYTE(__p) = 0;
      swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v51, (uint64_t)&__p, (uint64_t)v14, a4);
      if (v45 < 0)
        operator delete(__p);
      if (!HIBYTE(v58))
      {
        v13 = v43 - 1;
        ++v11;
        goto LABEL_50;
      }
      break;
    }
    v42 = v11;
    v16 = *(unint64_t **)(a3 + 24);
    v15 = *(unint64_t **)(a3 + 32);
    if (v16 == v15)
      break;
    v17 = 0;
    while (2)
    {
      v19 = *v16;
      v20 = v16[1];
      for (i = v49; i; i = (uint64_t *)*i)
      {
        v24 = i[4];
        if (v19 >= v24)
        {
          if (v24 >= v19)
          {
            v25 = i[5];
            if (v20 < v25)
              continue;
            if (v25 >= v20)
              goto LABEL_19;
          }
          ++i;
        }
      }
      if (!v20)
        goto LABEL_19;
      v22 = v16[1];
      while (1)
      {
        v23 = *(_DWORD *)(v22 + 8);
        if (v23 != 3)
          break;
        v22 = *(_QWORD *)(v22 + 16);
        if (!v22)
          goto LABEL_19;
      }
      switch(v23)
      {
        case 0:
        case 4:
        case 5:
          goto LABEL_35;
        case 1:
        case 2:
          if (*(_DWORD *)(v22 + 12) >= -1431655765
                                      * ((unint64_t)((char *)v56 - (_BYTE *)v55) >> 4))
            goto LABEL_19;
LABEL_35:
          MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, v16[1], (uint64_t)v51);
          if (!v27)
            goto LABEL_61;
          TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataSource, 0, 50);
          if (!TypeFromMetadata
            || !swift::reflection::TypeRef::deriveSubstitutions((uint64_t)v46, v19, TypeFromMetadata))
          {
            goto LABEL_61;
          }
          v29 = v49;
          v30 = &v49;
          v31 = &v49;
          if (!v49)
            goto LABEL_47;
          break;
        default:
          abort();
      }
      do
      {
        while (1)
        {
          v31 = (uint64_t **)v29;
          v32 = v29[4];
          if (v19 >= v32)
          {
            if (v32 < v19)
              goto LABEL_45;
            v33 = v31[5];
            if (v20 >= (unint64_t)v33)
              break;
          }
          v29 = *v31;
          v30 = v31;
          if (!*v31)
            goto LABEL_47;
        }
        if ((unint64_t)v33 >= v20)
          goto LABEL_18;
LABEL_45:
        v29 = v31[1];
      }
      while (v29);
      v30 = v31 + 1;
LABEL_47:
      v34 = (uint64_t *)operator new(0x30uLL);
      v34[4] = v19;
      v34[5] = v20;
      *v34 = 0;
      v34[1] = 0;
      v34[2] = (uint64_t)v31;
      *v30 = v34;
      if (*v48)
      {
        v48 = (uint64_t *)*v48;
        v18 = *v30;
      }
      else
      {
        v18 = v34;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v49, v18);
      ++v50;
LABEL_18:
      v17 = 1;
LABEL_19:
      v16 += 2;
      if (v16 != v15)
        continue;
      break;
    }
    a3 = v40;
    a4 = v41;
    v11 = v42;
    v13 = v43;
    if ((v17 & 1) == 0)
      break;
LABEL_50:
    if (!v13)
    {
LABEL_51:
      v35 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)v51);
      goto LABEL_62;
    }
  }
LABEL_61:
  v35 = 0;
LABEL_62:
  __swift::__runtime::llvm::deallocate_buffer(v46[0], (void *)(16 * v47), (std::align_val_t)8uLL);
  std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy((uint64_t)&v48, v49);
  v36 = (void **)v55;
  if (v55)
  {
LABEL_53:
    v37 = v56;
    v38 = v36;
    if (v56 != v36)
    {
      do
      {
        if (*((char *)v37 - 25) < 0)
          operator delete(*(v37 - 6));
        v37 -= 6;
      }
      while (v37 != v36);
      v38 = v55;
    }
    v56 = v36;
    operator delete(v38);
  }
  return v35;
}

void swift::reflection::ClosureContextInfo::~ClosureContextInfo(swift::reflection::ClosureContextInfo *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t MetadataFromInstance;
  unint64_t v8;
  uint64_t MetadataSource;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v14;

  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
      v6 = (8 * *(_DWORD *)(a3 + 12) + 16);
      goto LABEL_4;
    case 1:
      v12 = *(unsigned int *)(*(_QWORD *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
      v14 = 0;
      if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v12 + a2, &v14, 8) & 1) == 0)goto LABEL_12;
      MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v14);
      v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      break;
    case 2:
      v6 = *(unsigned int *)(*(_QWORD *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
LABEL_4:
      v14 = 0;
      if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v6 + a2, &v14, 8) & 1) == 0)goto LABEL_12;
      LOBYTE(MetadataFromInstance) = v14;
      v8 = v14 & 0xFFFFFFFFFFFFFF00;
      break;
    case 3:
      MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, *(_QWORD *)(a3 + 16));
      if (!v10)
        goto LABEL_12;
      MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(a1, MetadataSource, *(_DWORD *)(a3 + 12));
      v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      if (!v11)
      {
        LOBYTE(MetadataFromInstance) = 0;
        v8 = 0;
      }
      break;
    default:
LABEL_12:
      LOBYTE(MetadataFromInstance) = 0;
      v8 = 0;
      break;
  }
  return v8 | MetadataFromInstance;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;

  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v21);
  if (!v22)
    goto LABEL_30;
  v5 = 0;
  v6 = *v22;
  if ((unint64_t)*v22 > 0x7FF)
    LODWORD(v6) = 0;
  if ((int)v6 <= 514)
  {
    if ((v6 - 512) >= 3)
    {
      v7 = 0;
      if ((_DWORD)v6)
        return v7 & 0xFFFFFFFFFFFFFF00 | v5;
      if ((swift_reflection_classIsSwiftMask & v22[4]) == 0)
        goto LABEL_30;
      v8 = v22 + 8;
LABEL_12:
      v9 = *(_QWORD *)(a1 + 2504) & *v8;
      if (!v9)
      {
        v5 = 0;
LABEL_31:
        v7 = 0;
        return v7 & 0xFFFFFFFFFFFFFF00 | v5;
      }
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v9, &v19);
      v10 = v20;
      if (v20)
      {
        v11 = *v20;
        if ((*v20 & 0x80) != 0)
        {
          v12 = *v20 & 0x1F;
          if (v12 == 16)
          {
            v13 = v20 + 12;
            if ((v11 & 0x20000000) != 0)
            {
              v23[0] = v19;
              v23[1] = v20;
              swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(a1, v23, (uint64_t)v24);
              if (!v25)
                goto LABEL_30;
              if ((*((_BYTE *)v10 + 3) & 0x10) != 0)
                v14 = -LODWORD(v24[0]) - v10[8];
              else
                v14 = HIDWORD(v24[0]);
            }
            else
            {
              if ((v11 & 0x10000000) != 0)
              {
                v16 = 0;
                v17 = v20 + 6;
              }
              else
              {
                v16 = v20[7];
                v17 = v20 + 8;
              }
              v14 = v16 - *v17;
            }
LABEL_19:
            if (*((unsigned __int16 *)v13 + 4) > a3)
            {
              v24[0] = 0;
              v15 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                           + 32))(*(_QWORD *)(a1 + 2488), v21 + 8 * (v14 + (unint64_t)a3), v24, 8);
              v5 = v24[0];
              if (v15)
              {
                v7 = v24[0] & 0xFFFFFFFFFFFFFF00;
              }
              else
              {
                v5 = 0;
                v7 = 0;
              }
              return v7 & 0xFFFFFFFFFFFFFF00 | v5;
            }
            goto LABEL_30;
          }
          if (v12 == 17 || v12 == 18)
          {
            v13 = v20 + 8;
            v14 = 2;
            goto LABEL_19;
          }
        }
      }
LABEL_30:
      v5 = 0;
      goto LABEL_31;
    }
LABEL_11:
    v8 = v22 + 1;
    goto LABEL_12;
  }
  if ((_DWORD)v6 == 515)
    goto LABEL_11;
  v7 = 0;
  if ((_DWORD)v6 == 516)
    goto LABEL_11;
  return v7 & 0xFFFFFFFFFFFFFF00 | v5;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy(a1, *a2);
    std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t MetadataFromInstance;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t ClosureContextInfo;
  unint64_t v13;
  void *v14;
  int v15;
  void *v17;
  uint64_t *v18;
  unsigned __int8 v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;

  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7)
    return 0;
  v8 = MetadataFromInstance;
  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v17);
  if (!v18)
    return 0;
  v9 = *v18;
  if ((unint64_t)*v18 > 0x7FF)
    LODWORD(v9) = 0;
  if ((_DWORD)v9 == 1280)
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, (uint64_t *)&v17);
    if (v18)
    {
      v11 = v18[2];
      v10 = a1;
      return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
    }
    return 0;
  }
  if ((_DWORD)v9 == 1024)
  {
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v8, &v22);
    if (v23 && *v23 == 1024)
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 2488) + 40))(&v17, *(_QWORD *)(a1 + 2488), v22 + 16, v23[2]);
      v14 = v17;
      v13 = (unint64_t)v18;
      v15 = (char)v19;
      if ((v19 & 0x80u) == 0)
        v13 = v19;
      if (v13
        || (swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getCaptureDescriptor((swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *)(a1 + 1976), v20, v21), !v21[0]))
      {
        ClosureContextInfo = 0;
        if ((v15 & 0x80000000) == 0)
          return ClosureContextInfo;
      }
      else
      {
        v22 = v21[0];
        v23 = (_QWORD *)v21[1];
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo((_QWORD *)(a1 + 1976), (const char *)&v22, (uint64_t)&v17);
        ClosureContextInfo = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(a1, a2, (uint64_t)&v17, a3);
        swift::reflection::ClosureContextInfo::~ClosureContextInfo((swift::reflection::ClosureContextInfo *)&v17);
        if ((v15 & 0x80000000) == 0)
          return ClosureContextInfo;
      }
      operator delete(v14);
      return ClosureContextInfo;
    }
    return 0;
  }
  if ((_DWORD)v9)
    return 0;
  v10 = a1;
  v11 = v8;
  return swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(v10, v11, a3);
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getClosureContextInfo(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  swift::reflection::TypeConverter *v8;
  unint64_t MetadataFromInstance;
  char v10;
  const swift::reflection::TypeRef **v11;
  uint64_t v12;
  uint64_t v13;
  const swift::reflection::TypeRef *v14;
  unint64_t *v15;
  unint64_t *v16;
  char v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *i;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t MetadataSource;
  char v27;
  uint64_t TypeFromMetadata;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  const swift::reflection::TypeRef **v42;
  uint64_t v43;
  void *__p;
  char v45;
  __swift::__runtime::llvm *v46[2];
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[2];
  int v52;
  char v53;
  int v54;
  void *v55;
  void **v56;
  uint64_t v57;
  __int16 v58;

  v8 = (swift::reflection::TypeConverter *)(a1 + 920);
  v51[0] = a1 + 920;
  v51[1] = 0x100000000;
  v52 = 0;
  v53 = 1;
  v54 = 9;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v58 = 1;
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v10
    || (swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, (uint64_t *)&v48), !v49)|| *v49 != 1024)
  {
    v35 = 0;
    v36 = (void **)v55;
    if (!v55)
      return v35;
    goto LABEL_53;
  }
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, *((_DWORD *)v49 + 2), 8u, 0, 1);
  swift::reflection::RecordTypeInfoBuilder::addField((swift::reflection::RecordTypeInfoBuilder *)v51, 8 * *(_DWORD *)(a3 + 48), 8u, 0, 1);
  v49 = 0;
  v50 = 0;
  v48 = (uint64_t *)&v49;
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v11 = *(const swift::reflection::TypeRef ***)a3;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (!v12)
    goto LABEL_51;
  v13 = v12 >> 3;
  v40 = a3;
  v41 = a4;
  while (1)
  {
    v14 = *v11;
    if (!*v11)
      break;
    v43 = v13;
    if ((swift::reflection::TypeRef::isConcreteAfterSubstitutions((uint64_t)v14, (uint64_t *)v46) & 1) != 0)
    {
      v14 = (const swift::reflection::TypeRef *)swift::reflection::TypeRef::subst((uint64_t)v14, a1 + 296, (uint64_t *)v46);
      if (v14)
        goto LABEL_9;
    }
    else if ((swift::reflection::TypeConverter::hasFixedSize(v8, v14) & 1) != 0)
    {
LABEL_9:
      v45 = 0;
      LOBYTE(__p) = 0;
      swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)v51, (uint64_t)&__p, (uint64_t)v14, a4);
      if (v45 < 0)
        operator delete(__p);
      if (!HIBYTE(v58))
      {
        v13 = v43 - 1;
        ++v11;
        goto LABEL_50;
      }
      break;
    }
    v42 = v11;
    v16 = *(unint64_t **)(a3 + 24);
    v15 = *(unint64_t **)(a3 + 32);
    if (v16 == v15)
      break;
    v17 = 0;
    while (2)
    {
      v19 = *v16;
      v20 = v16[1];
      for (i = v49; i; i = (uint64_t *)*i)
      {
        v24 = i[4];
        if (v19 >= v24)
        {
          if (v24 >= v19)
          {
            v25 = i[5];
            if (v20 < v25)
              continue;
            if (v25 >= v20)
              goto LABEL_19;
          }
          ++i;
        }
      }
      if (!v20)
        goto LABEL_19;
      v22 = v16[1];
      while (1)
      {
        v23 = *(_DWORD *)(v22 + 8);
        if (v23 != 3)
          break;
        v22 = *(_QWORD *)(v22 + 16);
        if (!v22)
          goto LABEL_19;
      }
      switch(v23)
      {
        case 0:
        case 4:
        case 5:
          goto LABEL_35;
        case 1:
        case 2:
          if (*(_DWORD *)(v22 + 12) >= -1431655765
                                      * ((unint64_t)((char *)v56 - (_BYTE *)v55) >> 4))
            goto LABEL_19;
LABEL_35:
          MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, v16[1], (uint64_t)v51);
          if (!v27)
            goto LABEL_61;
          TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataSource, 0, 50);
          if (!TypeFromMetadata
            || !swift::reflection::TypeRef::deriveSubstitutions((uint64_t)v46, v19, TypeFromMetadata))
          {
            goto LABEL_61;
          }
          v29 = v49;
          v30 = &v49;
          v31 = &v49;
          if (!v49)
            goto LABEL_47;
          break;
        default:
          abort();
      }
      do
      {
        while (1)
        {
          v31 = (uint64_t **)v29;
          v32 = v29[4];
          if (v19 >= v32)
          {
            if (v32 < v19)
              goto LABEL_45;
            v33 = v31[5];
            if (v20 >= (unint64_t)v33)
              break;
          }
          v29 = *v31;
          v30 = v31;
          if (!*v31)
            goto LABEL_47;
        }
        if ((unint64_t)v33 >= v20)
          goto LABEL_18;
LABEL_45:
        v29 = v31[1];
      }
      while (v29);
      v30 = v31 + 1;
LABEL_47:
      v34 = (uint64_t *)operator new(0x30uLL);
      v34[4] = v19;
      v34[5] = v20;
      *v34 = 0;
      v34[1] = 0;
      v34[2] = (uint64_t)v31;
      *v30 = v34;
      if (*v48)
      {
        v48 = (uint64_t *)*v48;
        v18 = *v30;
      }
      else
      {
        v18 = v34;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v49, v18);
      ++v50;
LABEL_18:
      v17 = 1;
LABEL_19:
      v16 += 2;
      if (v16 != v15)
        continue;
      break;
    }
    a3 = v40;
    a4 = v41;
    v11 = v42;
    v13 = v43;
    if ((v17 & 1) == 0)
      break;
LABEL_50:
    if (!v13)
    {
LABEL_51:
      v35 = swift::reflection::RecordTypeInfoBuilder::build((swift::reflection::RecordTypeInfoBuilder *)v51);
      goto LABEL_62;
    }
  }
LABEL_61:
  v35 = 0;
LABEL_62:
  __swift::__runtime::llvm::deallocate_buffer(v46[0], (void *)(16 * v47), (std::align_val_t)8uLL);
  std::__tree<std::pair<swift::reflection::TypeRef const*,swift::reflection::MetadataSource const*>>::destroy((uint64_t)&v48, v49);
  v36 = (void **)v55;
  if (v55)
  {
LABEL_53:
    v37 = v56;
    v38 = v36;
    if (v56 != v36)
    {
      do
      {
        if (*((char *)v37 - 25) < 0)
          operator delete(*(v37 - 6));
        v37 -= 6;
      }
      while (v37 != v36);
      v38 = v55;
    }
    v56 = v36;
    operator delete(v38);
  }
  return v35;
}

unint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t MetadataFromInstance;
  unint64_t v8;
  uint64_t MetadataSource;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v14;

  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
      v6 = (8 * *(_DWORD *)(a3 + 12) + 16);
      goto LABEL_4;
    case 1:
      v12 = *(unsigned int *)(*(_QWORD *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
      v14 = 0;
      if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v12 + a2, &v14, 8) & 1) == 0)goto LABEL_12;
      MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v14);
      v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      break;
    case 2:
      v6 = *(unsigned int *)(*(_QWORD *)(a4 + 32) + 48 * *(unsigned int *)(a3 + 12) + 24);
LABEL_4:
      v14 = 0;
      if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v6 + a2, &v14, 8) & 1) == 0)goto LABEL_12;
      LOBYTE(MetadataFromInstance) = v14;
      v8 = v14 & 0xFFFFFFFFFFFFFF00;
      break;
    case 3:
      MetadataSource = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::readMetadataSource(a1, a2, *(_QWORD *)(a3 + 16));
      if (!v10)
        goto LABEL_12;
      MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(a1, MetadataSource, *(_DWORD *)(a3 + 12));
      v8 = MetadataFromInstance & 0xFFFFFFFFFFFFFF00;
      if (!v11)
      {
        LOBYTE(MetadataFromInstance) = 0;
        v8 = 0;
      }
      break;
    default:
LABEL_12:
      LOBYTE(MetadataFromInstance) = 0;
      v8 = 0;
      break;
  }
  return v8 | MetadataFromInstance;
}

unint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readGenericArgFromMetadata(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;

  swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, a2, &v21);
  if (!v22)
    goto LABEL_29;
  v5 = 0;
  v6 = *v22;
  if ((unint64_t)*v22 > 0x7FF)
    LODWORD(v6) = 0;
  if ((int)v6 <= 514)
  {
    if ((v6 - 512) >= 3)
    {
      v7 = 0;
      if ((_DWORD)v6)
        return v7 & 0xFFFFFFFFFFFFFF00 | v5;
      v8 = v22 + 5;
LABEL_11:
      v9 = *(_QWORD *)(a1 + 2504) & *v8;
      if (!v9)
      {
        v5 = 0;
LABEL_30:
        v7 = 0;
        return v7 & 0xFFFFFFFFFFFFFF00 | v5;
      }
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readContextDescriptor(a1, v9, &v19);
      v10 = v20;
      if (v20)
      {
        v11 = *v20;
        if ((*v20 & 0x80) != 0)
        {
          v12 = *v20 & 0x1F;
          if (v12 == 16)
          {
            v13 = v20 + 12;
            if ((v11 & 0x20000000) != 0)
            {
              v23[0] = v19;
              v23[1] = v20;
              swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataBoundsOfSuperclass(a1, v23, (uint64_t)v24);
              if (!v25)
                goto LABEL_29;
              if ((*((_BYTE *)v10 + 3) & 0x10) != 0)
                v14 = -LODWORD(v24[0]) - v10[8];
              else
                v14 = HIDWORD(v24[0]);
            }
            else
            {
              if ((v11 & 0x10000000) != 0)
              {
                v16 = 0;
                v17 = v20 + 6;
              }
              else
              {
                v16 = v20[7];
                v17 = v20 + 8;
              }
              v14 = v16 - *v17;
            }
LABEL_18:
            if (*((unsigned __int16 *)v13 + 4) > a3)
            {
              v24[0] = 0;
              v15 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                           + 32))(*(_QWORD *)(a1 + 2488), v21 + 8 * (v14 + (unint64_t)a3), v24, 8);
              v5 = v24[0];
              if (v15)
              {
                v7 = v24[0] & 0xFFFFFFFFFFFFFF00;
              }
              else
              {
                v5 = 0;
                v7 = 0;
              }
              return v7 & 0xFFFFFFFFFFFFFF00 | v5;
            }
            goto LABEL_29;
          }
          if (v12 == 17 || v12 == 18)
          {
            v13 = v20 + 8;
            v14 = 2;
            goto LABEL_18;
          }
        }
      }
LABEL_29:
      v5 = 0;
      goto LABEL_30;
    }
LABEL_10:
    v8 = v22 + 1;
    goto LABEL_11;
  }
  if ((_DWORD)v6 == 515)
    goto LABEL_10;
  v7 = 0;
  if ((_DWORD)v6 == 516)
    goto LABEL_10;
  return v7 & 0xFFFFFFFFFFFFFF00 | v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfInstance::$_0>(swift_reflection_childOfInstance::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;

  v4 = **a1;
  result = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, **(_QWORD **)v4, 0);
  if (result)
  {
    v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      v8 = **(_DWORD **)(v4 + 8);
      v9 = *(_QWORD *)(result + 40);
      v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0)
        v10 = (uint64_t **)*v10;
      *(_QWORD *)a3 = v10;
      v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      result = getTypeInfoKind(*(_QWORD *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v11 + 32);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_childinfo SwiftReflectionContext::withContext<swift_childinfo,swift_reflection_childOfInstance::$_0>(swift_reflection_childOfInstance::$_0 const&)::{lambda(swift_childinfo&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;

  v4 = **a1;
  result = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, **(_QWORD **)v4, 0);
  if (result)
  {
    v6 = *(_DWORD *)(result + 8);
    if (v6 == 1 || v6 == 4)
    {
      v8 = **(_DWORD **)(v4 + 8);
      v9 = *(_QWORD *)(result + 40);
      v10 = (uint64_t **)(v9 + 48 * v8);
      if (*((char *)v10 + 23) < 0)
        v10 = (uint64_t **)*v10;
      *(_QWORD *)a3 = v10;
      v11 = v9 + 48 * v8;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v11 + 24);
      result = getTypeInfoKind(*(_QWORD *)(v11 + 40));
      *(_DWORD *)(a3 + 12) = result;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v11 + 32);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = "unknown TypeInfo kind";
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistential::$_0>(swift_reflection_projectExistential::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v2 = **a1;
  v3 = *a2;
  v4 = **(_QWORD **)v2;
  v5 = **(_QWORD **)(v2 + 8);
  v7 = 0;
  v8 = 0;
  result = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(v3, v5, v4, &v8, &v7, 0);
  if ((_DWORD)result)
  {
    ***(_QWORD ***)(v2 + 16) = v8;
    ***(_QWORD ***)(v2 + 24) = v7;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistential::$_0>(swift_reflection_projectExistential::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v2 = **a1;
  v3 = *a2;
  v4 = **(_QWORD **)v2;
  v5 = **(_QWORD **)(v2 + 8);
  v7 = 0;
  v8 = 0;
  result = swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(v3, v5, v4, &v8, &v7, 0);
  if ((_DWORD)result)
  {
    ***(_QWORD ***)(v2 + 16) = v8;
    ***(_QWORD ***)(v2 + 24) = v7;
  }
  return result;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t result;
  int v11;
  uint64_t v12[3];
  char v13;

  if (!a3)
    return 0;
  result = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, a6);
  if (!result)
    return result;
  if (*(_DWORD *)(result + 8) != 1)
    return 0;
  v11 = *(_DWORD *)(result + 32);
  switch(v11)
  {
    case 4:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)v12);
      if (!v13)
        return 0;
LABEL_10:
      result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v12[0], 0, 50);
      if (!result)
        return result;
      *a4 = result;
      *a5 = v12[1];
      return 1;
    case 7:
      swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, a2, (uint64_t)v12);
      if (!v13)
        return 0;
      goto LABEL_10;
    case 5:
      *a4 = *(_QWORD *)(*(_QWORD *)(result + 40) + 32);
      *a5 = a2;
      return 1;
  }
  return 0;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12[2];
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[10];
  int v17;

  result = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), a2, v13, 32);
  if ((result & 1) != 0
    && (v7 = v14,
        result = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v14, v12), v12[1])&& (v17 = 0, result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v7 - 8, &v15, 8), (_DWORD)result)&& (result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), *(_QWORD *)(a1 + 2504) & v15, v16, 88), (result & 1) != 0))
  {
    v8 = v17;
    if ((v17 & 0x20000) != 0)
    {
      v16[0] = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), a2, v16, 8);
      if ((_DWORD)result)
      {
        v10 = v16[0] + ((v8 + 16) & ~(unint64_t)v8);
        *(_QWORD *)a3 = v7;
        *(_QWORD *)(a3 + 8) = v10;
        v11 = (_BYTE *)(a3 + 16);
        v9 = 1;
      }
      else
      {
        v9 = 0;
        v11 = (_BYTE *)a3;
      }
      *v11 = 0;
    }
    else
    {
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = a2;
      *(_BYTE *)(a3 + 16) = 0;
      v9 = 1;
    }
    *(_BYTE *)(a3 + 24) = v9;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  return result;
}

void swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t MetadataFromInstance;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t ObjCRODataPtr;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  void *p_p;
  _BOOL4 v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;
  uint64_t v32;
  int v33;

  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  v8 = MetadataFromInstance;
  swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, MetadataFromInstance, &v27);
  v9 = (char)v28;
  if (!v28)
    goto LABEL_23;
  if (*v28 <= 0x7FFuLL && *v28 != 0)
    goto LABEL_17;
  if ((swift_reflection_classIsSwiftMask & v28[4]) == 0)
  {
    __p = 0;
    v31 = 0;
    v32 = 0;
    ObjCRODataPtr = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readObjCRODataPtr(a1, v8);
    if (!ObjCRODataPtr
      || ((v29 = 0,
           (*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), ObjCRODataPtr + 24, &v29, 8))? (v12 = v29 == 0): (v12 = 1), v12))
    {
LABEL_17:
      v13 = 16;
      v14 = 16;
LABEL_18:
      v15 = v14 + a2;
      v16 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v15);
      if (v17)
      {
        v18 = v16;
        v33 = 0;
        if ((*(unsigned int (**)(_QWORD, unint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488)
                                                                                          + 32))(*(_QWORD *)(a1 + 2488), v16 - 8, &v29, 8))
        {
          if (((*(uint64_t (**)(_QWORD, uint64_t, void **, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), *(_QWORD *)(a1 + 2504) & v29, &__p, 88) & 1) != 0)
          {
            v19 = (v15 + v13 + v33) & ~(unint64_t)v33;
            *(_QWORD *)a3 = v18;
            *(_QWORD *)(a3 + 8) = v19;
            *(_BYTE *)(a3 + 16) = 0;
            v9 = 1;
            goto LABEL_24;
          }
        }
      }
      v9 = 0;
LABEL_23:
      *(_BYTE *)a3 = 0;
      goto LABEL_24;
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 2488) + 16))(*(_QWORD *)(a1 + 2488)))
    {
      if (SHIBYTE(v32) < 0)
      {
        p_p = __p;
        if (v31 != 20)
        {
          operator delete(__p);
          goto LABEL_9;
        }
      }
      else
      {
        if (SHIBYTE(v32) != 20)
          goto LABEL_9;
        p_p = &__p;
      }
      v24 = 0x5F5F53776966744ELL;
      v25 = bswap64(*(_QWORD *)p_p);
      if (v25 == 0x5F5F53776966744ELL
        && (v24 = 0x61746976654E5345, v25 = bswap64(*((_QWORD *)p_p + 1)), v25 == 0x61746976654E5345)
        && (v24 = 1920102258, v25 = bswap32(*((_DWORD *)p_p + 4)), (_DWORD)v25 == 1920102258))
      {
        v26 = 0;
      }
      else if (v25 < v24)
      {
        v26 = -1;
      }
      else
      {
        v26 = 1;
      }
      v23 = v26 == 0;
      v22 = v26 != 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__p);
      if (v22)
        goto LABEL_9;
    }
    else if (v22)
    {
      goto LABEL_9;
    }
    v14 = 40;
    if (v23)
    {
      v13 = 32;
    }
    else
    {
      v14 = 16;
      v13 = 16;
    }
    goto LABEL_18;
  }
LABEL_9:
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = a2;
  v9 = 1;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_24:
  *(_BYTE *)(a3 + 24) = v9;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistential(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t result;
  int v11;
  uint64_t v12[3];
  char v13;

  if (!a3)
    return 0;
  result = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, a6);
  if (!result)
    return result;
  if (*(_DWORD *)(result + 8) != 1)
    return 0;
  v11 = *(_DWORD *)(result + 32);
  switch(v11)
  {
    case 4:
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)v12);
      if (!v13)
        return 0;
LABEL_10:
      result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, v12[0], 0, 50);
      if (!result)
        return result;
      *a4 = result;
      *a5 = v12[1];
      return 1;
    case 7:
      swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, a2, (uint64_t)v12);
      if (!v13)
        return 0;
      goto LABEL_10;
    case 5:
      *a4 = *(_QWORD *)(*(_QWORD *)(result + 40) + 32);
      *a5 = a2;
      return 1;
  }
  return 0;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12[2];
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[10];
  int v17;

  result = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), a2, v13, 32);
  if ((result & 1) != 0
    && (v7 = v14,
        result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, v14, v12), v12[1])&& (v17 = 0, result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v7 - 8, &v15, 8), (_DWORD)result)&& (result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), *(_QWORD *)(a1 + 2504) & v15, v16, 88), (result & 1) != 0))
  {
    v8 = v17;
    if ((v17 & 0x20000) != 0)
    {
      v16[0] = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), a2, v16, 8);
      if ((_DWORD)result)
      {
        v10 = v16[0] + ((v8 + 16) & ~(unint64_t)v8);
        *(_QWORD *)a3 = v7;
        *(_QWORD *)(a3 + 8) = v10;
        v11 = (_BYTE *)(a3 + 16);
        v9 = 1;
      }
      else
      {
        v9 = 0;
        v11 = (_BYTE *)a3;
      }
      *v11 = 0;
    }
    else
    {
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = a2;
      *(_BYTE *)(a3 + 16) = 0;
      v9 = 1;
    }
    *(_BYTE *)(a3 + 24) = v9;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE v17[80];
  int v18;

  result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2);
  if (!v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  v8 = result;
  result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadata(a1, result, &v14);
  v9 = (char)v15;
  if (!v15)
    goto LABEL_15;
  if (*v15 <= 0x7FFuLL && *v15 != 0)
  {
    result = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, a2 + 16);
    if (v11)
    {
      v12 = result;
      v18 = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), result - 8, &v16, 8);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), *(_QWORD *)(a1 + 2504) & v16, v17, 88);
        if ((result & 1) != 0)
        {
          v13 = (a2 + v18 + 32) & ~(unint64_t)v18;
          *(_QWORD *)a3 = v12;
          *(_QWORD *)(a3 + 8) = v13;
          *(_BYTE *)(a3 + 16) = 0;
          v9 = 1;
          goto LABEL_16;
        }
      }
    }
    v9 = 0;
LABEL_15:
    *(_BYTE *)a3 = 0;
    goto LABEL_16;
  }
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = a2;
  v9 = 1;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_16:
  *(_BYTE *)(a3 + 24) = v9;
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistentialAndUnwrapClass::$_0>(swift_reflection_projectExistentialAndUnwrapClass::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2;
  int v3;
  _QWORD v5[2];
  unsigned __int8 v6;

  v2 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(*a2, **(_QWORD **)(v2 + 8), **(_QWORD **)v2, (uint64_t)v5);
  v3 = v6;
  if (v6)
  {
    ***(_QWORD ***)(v2 + 16) = v5[0];
    ***(_QWORD ***)(v2 + 24) = v5[1];
  }
  return v3 != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectExistentialAndUnwrapClass::$_0>(swift_reflection_projectExistentialAndUnwrapClass::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v2;
  int v3;
  _QWORD v5[2];
  unsigned __int8 v6;

  v2 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(*a2, **(_QWORD **)(v2 + 8), **(_QWORD **)v2, (uint64_t)v5);
  v3 = v6;
  if (v6)
  {
    ***(_QWORD ***)(v2 + 16) = v5[0];
    ***(_QWORD ***)(v2 + 24) = v5[1];
  }
  return v3 != 0;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TypeInfo;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t TypeFromMetadata;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  void *__p;
  uint64_t v21;
  char v22;
  unsigned __int8 v23;
  unint64_t v24;
  char v25;

  v19 = a1;
  TypeInfo = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, 0);
  if (TypeInfo && *(_DWORD *)(TypeInfo + 8) == 1)
  {
    v8 = *(_DWORD *)(TypeInfo + 32);
    if (v8 != 4)
    {
      if (v8 == 7)
      {
        swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), a2, 8u, (uint64_t)&__p);
        if (v25)
        {
          v13 = (v23 & 0x80u) == 0 ? v23 : v21;
          v14 = v24;
          if ((char)v23 < 0)
            operator delete(__p);
          if (!v13)
          {
            swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, v14, (uint64_t)&__p);
            if ((_BYTE)v24)
            {
              TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
              if (TypeFromMetadata)
              {
                *(_QWORD *)&v17 = TypeFromMetadata;
                *((_QWORD *)&v17 + 1) = v21;
                LOBYTE(v18) = 1;
                if (v22
                  || !swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::reflection::TypeRef const*)#1}::operator()((uint64_t)&__p, TypeFromMetadata)
                  || (swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::remote::RemoteAddress&)#1}::operator()((uint64_t)&v19, (uint64_t *)&v17 + 1) & 1) != 0)
                {
                  *(_OWORD *)a4 = v17;
                  *(_QWORD *)(a4 + 16) = v18;
                  return;
                }
              }
            }
          }
        }
      }
      else if (v8 == 5)
      {
        swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(a1, a2, a4);
        return;
      }
      goto LABEL_19;
    }
    swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)&__p);
    if ((_BYTE)v24)
    {
      v9 = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
      if (v9)
      {
        v10 = v9;
        v11 = v21;
        v12 = *(_DWORD *)(v9 + 8);
        if ((v12 - 1) > 1)
        {
          if ((v12 - 11) > 1)
          {
LABEL_35:
            *(_QWORD *)a4 = v10;
            *(_QWORD *)(a4 + 8) = v11;
            *(_BYTE *)(a4 + 16) = 1;
            return;
          }
        }
        else if (!swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(v9 + 16)))
        {
          goto LABEL_35;
        }
        swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v11, 8u, (uint64_t)&__p);
        if (v25)
        {
          if ((v23 & 0x80u) == 0)
            v16 = v23;
          else
            v16 = v21;
          v11 = v24;
          if ((char)v23 < 0)
            operator delete(__p);
          if (!v16)
            goto LABEL_35;
        }
      }
    }
  }
LABEL_19:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 0;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t MetadataFromInstance;
  char v8;
  uint64_t TypeFromMetadata;
  char v10;
  void *__p[2];
  unsigned __int8 v12;
  unint64_t v13;
  char v14;

  swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), a2, 8u, (uint64_t)__p);
  if (!v14)
    goto LABEL_12;
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (unint64_t)__p[1];
  v6 = v13;
  if (((char)v12 & 0x80000000) == 0)
  {
    if (!v5)
      goto LABEL_9;
LABEL_12:
    v10 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (v5)
    goto LABEL_12;
LABEL_9:
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v6);
  if (!v8)
    goto LABEL_12;
  TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataFromInstance, 0, 50);
  if (!TypeFromMetadata)
    goto LABEL_12;
  *(_QWORD *)a3 = TypeFromMetadata;
  *(_QWORD *)(a3 + 8) = v6;
  v10 = 1;
LABEL_13:
  *(_BYTE *)(a3 + 16) = v10;
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::remote::RemoteAddress&)#1}::operator()(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  uint64_t v8;
  char v9;

  swift::remote::MemoryReader::readPointer(*(_QWORD *)(*(_QWORD *)a1 + 2488), *a2, 8u, (uint64_t)__p);
  if (!v9)
    return 0;
  if ((v7 & 0x80u) == 0)
    v3 = v7;
  else
    v3 = (unint64_t)__p[1];
  v4 = v8;
  if ((char)v7 < 0)
  {
    operator delete(__p[0]);
    if (v3)
      return 0;
  }
  else if (v3)
  {
    return 0;
  }
  *a2 = v4;
  return 1;
}

BOOL swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::reflection::TypeRef const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 8);
  if (a2 && v2 == 1 || a2 && v2 == 2)
    return swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(a2 + 16));
  else
    return (v2 - 11) < 2;
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TypeInfo;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t TypeFromMetadata;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  void *__p;
  uint64_t v21;
  char v22;
  unsigned __int8 v23;
  unint64_t v24;
  char v25;

  v19 = a1;
  TypeInfo = swift::reflection::TypeConverter::getTypeInfo(a1 + 920, a3, 0);
  if (TypeInfo && *(_DWORD *)(TypeInfo + 8) == 1)
  {
    v8 = *(_DWORD *)(TypeInfo + 32);
    if (v8 != 4)
    {
      if (v8 == 7)
      {
        swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), a2, 8u, (uint64_t)&__p);
        if (v25)
        {
          v13 = (v23 & 0x80u) == 0 ? v23 : v21;
          v14 = v24;
          if ((char)v23 < 0)
            operator delete(__p);
          if (!v13)
          {
            swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueErrorExistential(a1, v14, (uint64_t)&__p);
            if ((_BYTE)v24)
            {
              TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
              if (TypeFromMetadata)
              {
                *(_QWORD *)&v17 = TypeFromMetadata;
                *((_QWORD *)&v17 + 1) = v21;
                LOBYTE(v18) = 1;
                if (v22
                  || !swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::reflection::TypeRef const*)#1}::operator()((uint64_t)&__p, TypeFromMetadata)
                  || (swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::projectExistentialAndUnwrapClass(swift::remote::RemoteAddress,swift::reflection::TypeRef const&)::{lambda(swift::remote::RemoteAddress&)#1}::operator()((uint64_t)&v19, (uint64_t *)&v17 + 1) & 1) != 0)
                {
                  *(_OWORD *)a4 = v17;
                  *(_QWORD *)(a4 + 16) = v18;
                  return;
                }
              }
            }
          }
        }
      }
      else if (v8 == 5)
      {
        swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(a1, a2, a4);
        return;
      }
      goto LABEL_19;
    }
    swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataAndValueOpaqueExistential(a1, a2, (uint64_t)&__p);
    if ((_BYTE)v24)
    {
      v9 = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, (uint64_t)__p, 0, 50);
      if (v9)
      {
        v10 = v9;
        v11 = v21;
        v12 = *(_DWORD *)(v9 + 8);
        if ((v12 - 1) > 1)
        {
          if ((v12 - 11) > 1)
          {
LABEL_35:
            *(_QWORD *)a4 = v10;
            *(_QWORD *)(a4 + 8) = v11;
            *(_BYTE *)(a4 + 16) = 1;
            return;
          }
        }
        else if (!swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(v9 + 16)))
        {
          goto LABEL_35;
        }
        swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v11, 8u, (uint64_t)&__p);
        if (v25)
        {
          if ((v23 & 0x80u) == 0)
            v16 = v23;
          else
            v16 = v21;
          v11 = v24;
          if ((char)v23 < 0)
            operator delete(__p);
          if (!v16)
            goto LABEL_35;
        }
      }
    }
  }
LABEL_19:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 0;
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getDynamicTypeAndAddressClassExistential(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t MetadataFromInstance;
  char v8;
  uint64_t TypeFromMetadata;
  char v10;
  void *__p[2];
  unsigned __int8 v12;
  unint64_t v13;
  char v14;

  swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), a2, 8u, (uint64_t)__p);
  if (!v14)
    goto LABEL_12;
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = (unint64_t)__p[1];
  v6 = v13;
  if (((char)v12 & 0x80000000) == 0)
  {
    if (!v5)
      goto LABEL_9;
LABEL_12:
    v10 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (v5)
    goto LABEL_12;
LABEL_9:
  MetadataFromInstance = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readMetadataFromInstance(a1, v6);
  if (!v8)
    goto LABEL_12;
  TypeFromMetadata = swift::remote::MetadataReader<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::TypeRefBuilder>::readTypeFromMetadata(a1, MetadataFromInstance, 0, 50);
  if (!TypeFromMetadata)
    goto LABEL_12;
  *(_QWORD *)a3 = TypeFromMetadata;
  *(_QWORD *)(a3 + 8) = v6;
  v10 = 1;
LABEL_13:
  *(_BYTE *)(a3 + 16) = v10;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectEnumValue::$_0>(swift_reflection_projectEnumValue::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *result;
  uint64_t TypeInfo;
  uint64_t v10;

  v2 = **a1;
  v3 = **v2;
  if (!v3)
    return 0;
  v4 = *a2;
  v5 = *v2[1];
  v6 = *v2[2];
  v7 = *a2 + 920;
  result = (_DWORD *)swift::reflection::TypeConverter::getTypeInfo(v7, **v2, 0);
  if (!result)
    return result;
  if (result[2] != 4)
    return 0;
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, *(_QWORD *)(v4 + 2488), v5, v6);
  if ((_DWORD)result)
  {
    TypeInfo = swift::reflection::TypeConverter::getTypeInfo(v7, v3, 0);
    if (*(_DWORD *)(TypeInfo + 8) == 4)
      v10 = TypeInfo;
    else
      v10 = 0;
    return (_DWORD *)(-1431655765 * ((*(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 40)) >> 4) > (unint64_t)*(int *)*v2[2]);
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_projectEnumValue::$_0>(swift_reflection_projectEnumValue::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *result;
  uint64_t TypeInfo;
  uint64_t v10;

  v2 = **a1;
  v3 = **v2;
  if (!v3)
    return 0;
  v4 = *a2;
  v5 = *v2[1];
  v6 = *v2[2];
  v7 = *a2 + 920;
  result = (_DWORD *)swift::reflection::TypeConverter::getTypeInfo(v7, **v2, 0);
  if (!result)
    return result;
  if (result[2] != 4)
    return 0;
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, *(_QWORD *)(v4 + 2488), v5, v6);
  if ((_DWORD)result)
  {
    TypeInfo = swift::reflection::TypeConverter::getTypeInfo(v7, v3, 0);
    if (*(_DWORD *)(TypeInfo + 8) == 4)
      v10 = TypeInfo;
    else
      v10 = 0;
    return (_DWORD *)(-1431655765 * ((*(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 40)) >> 4) > (unint64_t)*(int *)*v2[2]);
  }
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForTypeRef::$_0>(swift_reflection_dumpInfoForTypeRef::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, _QWORD *a2)
{
  uint64_t **v2;
  swift::reflection::TypeRef *v3;
  __int128 **TypeInfo;
  unsigned int *Demangling;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type size;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::string v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  std::string __p;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  _BYTE v67[24];
  _BYTE *v68;

  v2 = **a1;
  v3 = (swift::reflection::TypeRef *)**v2;
  if (!v3)
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  TypeInfo = (__int128 **)swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, **v2, 0);
  if (!TypeInfo)
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  swift::reflection::TypeInfo::dump(TypeInfo, &std::cout, 0);
  v29[2] = 0;
  v30 = 0;
  v31 = 2400;
  v32 = 0;
  v33 = 0;
  v29[0] = off_B5288;
  v29[1] = 0;
  v68 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v37 = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v66 = 0;
  Demangling = swift::reflection::TypeRef::getDemangling(v3, (swift::Demangle::__runtime::Demangler *)v29);
  swift::Demangle::__runtime::mangleNode((size_t *)Demangling, (uint64_t)&v25);
  memset(&v24, 0, sizeof(v24));
  if (v25)
  {
    std::string::assign(&v24, "<failed to mangle name>");
    v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Failed to get mangled name: Node ", 33);
    v7 = (_QWORD *)std::ostream::operator<<(v6, v26);
    v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)" error ", 7);
    v9 = (_QWORD *)std::ostream::operator<<(v8, v25);
    v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
    v11 = (_QWORD *)std::ostream::operator<<(v10, v27);
  }
  else
  {
    std::string::operator=(&v24, &__p);
    v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Mangled name: ", 14);
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"$s", 2);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v24;
    else
      v15 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    else
      size = v24.__r_.__value_.__l.__size_;
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
  }
  v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  v18 = swift_reflection_copyNameForTypeRef((uint64_t)v17, (swift::reflection::TypeRef *)**v2, 0);
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Demangled name: ", 16);
  v20 = strlen(v18);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v18, v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  free(v18);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_15:
  v29[0] = off_B5288;
  v22 = v68;
  if (v68 == v67)
  {
    v23 = 4;
    v22 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_22;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_22:
  v29[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v30);
  if (v32)
    *(_BYTE *)(v32 + 48) = 0;
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForTypeRef::$_0>(swift_reflection_dumpInfoForTypeRef::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, _QWORD *a2)
{
  uint64_t **v2;
  swift::reflection::TypeRef *v3;
  __int128 **TypeInfo;
  unsigned int *Demangling;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type size;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::string v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  std::string __p;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  _BYTE v67[24];
  _BYTE *v68;

  v2 = **a1;
  v3 = (swift::reflection::TypeRef *)**v2;
  if (!v3)
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  TypeInfo = (__int128 **)swift::reflection::TypeConverter::getTypeInfo(*a2 + 920, **v2, 0);
  if (!TypeInfo)
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
  swift::reflection::TypeInfo::dump(TypeInfo, &std::cout, 0);
  v29[2] = 0;
  v30 = 0;
  v31 = 2400;
  v32 = 0;
  v33 = 0;
  v29[0] = off_B5288;
  v29[1] = 0;
  v68 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v37 = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v66 = 0;
  Demangling = swift::reflection::TypeRef::getDemangling(v3, (swift::Demangle::__runtime::Demangler *)v29);
  swift::Demangle::__runtime::mangleNode((size_t *)Demangling, (uint64_t)&v25);
  memset(&v24, 0, sizeof(v24));
  if (v25)
  {
    std::string::assign(&v24, "<failed to mangle name>");
    v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Failed to get mangled name: Node ", 33);
    v7 = (_QWORD *)std::ostream::operator<<(v6, v26);
    v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)" error ", 7);
    v9 = (_QWORD *)std::ostream::operator<<(v8, v25);
    v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
    v11 = (_QWORD *)std::ostream::operator<<(v10, v27);
  }
  else
  {
    std::string::operator=(&v24, &__p);
    v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Mangled name: ", 14);
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"$s", 2);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v24;
    else
      v15 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    else
      size = v24.__r_.__value_.__l.__size_;
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
  }
  v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  v18 = swift_reflection_copyNameForTypeRef((uint64_t)v17, (swift::reflection::TypeRef *)**v2, 0);
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Demangled name: ", 16);
  v20 = strlen(v18);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v18, v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  free(v18);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_15:
  v29[0] = off_B5288;
  v22 = v68;
  if (v68 == v67)
  {
    v23 = 4;
    v22 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_22;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_22:
  v29[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v30);
  if (v32)
    *(_BYTE *)(v32 + 48) = 0;
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForMetadata::$_0>(swift_reflection_dumpInfoForMetadata::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  __int128 **MetadataTypeInfo;

  MetadataTypeInfo = (__int128 **)swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
    return swift::reflection::TypeInfo::dump(MetadataTypeInfo, &std::cout, 0);
  else
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForMetadata::$_0>(swift_reflection_dumpInfoForMetadata::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, unint64_t *a2)
{
  __int128 **MetadataTypeInfo;

  MetadataTypeInfo = (__int128 **)swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getMetadataTypeInfo(*a2, ****a1, 0);
  if (MetadataTypeInfo)
    return swift::reflection::TypeInfo::dump(MetadataTypeInfo, &std::cout, 0);
  else
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForInstance::$_0>(swift_reflection_dumpInfoForInstance::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, unint64_t *a2)
{
  __int128 **InstanceTypeInfo;

  InstanceTypeInfo = (__int128 **)swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
    return swift::reflection::TypeInfo::dump(InstanceTypeInfo, &std::cout, 0);
  else
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_dumpInfoForInstance::$_0>(swift_reflection_dumpInfoForInstance::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(unint64_t ****a1, unint64_t *a2)
{
  __int128 **InstanceTypeInfo;

  InstanceTypeInfo = (__int128 **)swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::getInstanceTypeInfo(*a2, ****a1, 0);
  if (InstanceTypeInfo)
    return swift::reflection::TypeInfo::dump(InstanceTypeInfo, &std::cout, 0);
  else
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"<null type info>\n", 17);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateConformanceCache::$_0>(swift_reflection_iterateConformanceCache::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(__int128 ***a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::string __p;
  char v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t (***v13)();
  std::string v14;
  char v15;

  v2 = **a1;
  v3 = *a2;
  v11 = off_B4EF0;
  v12 = *v2;
  v13 = &v11;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateConformances(v3, &v11, (uint64_t)&v14);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  v6 = **((_QWORD **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v10 = 0;
  if (v15)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __p = v14;
    v10 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateConformanceCache::$_0>(swift_reflection_iterateConformanceCache::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(__int128 ***a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::string __p;
  char v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t (***v13)();
  std::string v14;
  char v15;

  v2 = **a1;
  v3 = *a2;
  v11 = off_B4F80;
  v12 = *v2;
  v13 = &v11;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateConformances(v3, &v11, (uint64_t)&v14);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  v6 = **((_QWORD **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v10 = 0;
  if (v15)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __p = v14;
    v10 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateConformances(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  __int128 v20;

  v19 = (char *)operator new(0x30uLL);
  v20 = xmmword_B0EC0;
  strcpy(v19, "_swift_debug_protocolConformanceStatePointer");
  v6 = (*(uint64_t (**)(_QWORD, char **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v19);
  if (!v6)
  {
    std::operator+<char>(__p, "unable to look up debug variable ", &v19);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v16;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_19;
  }
  swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v6, 8u, (uint64_t)__p);
  if (!v18)
  {
    std::operator+<char>(&v13, "unable to read value of ", &v19);
    *(_OWORD *)a3 = v13;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = 1;
    if (!v18)
      goto LABEL_19;
    goto LABEL_17;
  }
  v7 = v17;
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v12 = v11;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v11);
    }
    else
    {
      v12 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v12 = 0;
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::IterateConformanceTable(a1, v7, (uint64_t)v11);
  v9 = v12;
  if (v12 == v11)
  {
    v10 = 4;
    v9 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (!v18)
    goto LABEL_19;
LABEL_17:
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
LABEL_19:
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
}

_QWORD *returnableCString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 48))(*(_QWORD *)(a1 + 88));
    operator new();
  }
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::IterateConformanceTable(v4, v5, v6);
}

_QWORD *swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::IterateConformanceTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v19);
  if (!v19)
  {
    v19 = 0;
    goto LABEL_22;
  }
  v5 = *(unsigned int *)(v19 + 4);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v16, *(_QWORD *)(a1 + 2488), *(_QWORD *)(v19 + 8), 24 * v5 + 8);
  v6 = v16;
  if (v16)
  {
    if ((_DWORD)v5)
    {
      v7 = (uint64_t *)(v16 + 16);
      while (1)
      {
        v8 = *(v7 - 1);
        v22 = *v7;
        v23 = v8;
        v9 = *(_QWORD *)(a3 + 24);
        if (!v9)
          goto LABEL_28;
        v7 += 3;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v23, &v22);
        if (!--v5)
        {
          v6 = v16;
          v16 = 0;
          if (v6)
            goto LABEL_12;
          goto LABEL_14;
        }
      }
    }
    v16 = 0;
LABEL_12:
    v23 = v6;
    if (!v18)
      goto LABEL_28;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v23);
  }
  else
  {
    v16 = 0;
  }
LABEL_14:
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_19;
    v11 = 5;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v11))(v10);
LABEL_19:
  v12 = v19;
  v19 = 0;
  if (!v12)
    goto LABEL_22;
  v16 = v12;
  if (!v21)
  {
LABEL_28:
    v15 = std::__throw_bad_function_call[abi:nn180100]();
    return (_QWORD *)_ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEED1Ev(v15);
  }
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v16);
LABEL_22:
  result = v21;
  if (v21 == v20)
  {
    v14 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v14))(result);
}

void _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEED0Ev()
{
  operator delete();
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B4EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEEclEOySN_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, **(_QWORD **)(a1 + 16));
}

void std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B4F38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B4F38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1},std::allocator<std::string * SwiftReflectionContext::allocateTemporaryObject<std::string>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

_QWORD *std::__function::__value_func<void ()(void)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[7];

  if (a2 != result)
  {
    v8[5] = v2;
    v8[6] = v3;
    v5 = result;
    v6 = (_QWORD *)result[3];
    v7 = (_QWORD *)a2[3];
    if (v6 == result)
    {
      if (v7 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v8);
        (*(void (**)(_QWORD))(*(_QWORD *)v5[3] + 32))(v5[3]);
        v5[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v5);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v5[3] = v5;
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[3] + 32))(v5[3]);
        v5[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v7 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v5[3];
      v5[3] = v5;
    }
    else
    {
      result[3] = v7;
      a2[3] = v6;
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEED0Ev()
{
  operator delete();
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B4F80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4F80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ40swift_reflection_iterateConformanceCacheENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_E_NS_9allocatorISI_EEFvyyEEclEOySN_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, **(_QWORD **)(a1 + 16));
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocations::$_0>(swift_reflection_iterateMetadataAllocations::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(__int128 ***a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::string __p;
  char v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t (***v13)();
  std::string v14;
  char v15;

  v2 = **a1;
  v3 = *a2;
  v11 = off_B4FD8;
  v12 = *v2;
  v13 = &v11;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocations(v3, (uint64_t)&v11, (uint64_t)&v14);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  v6 = **((_QWORD **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v10 = 0;
  if (v15)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __p = v14;
    v10 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocations::$_0>(swift_reflection_iterateMetadataAllocations::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(__int128 ***a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::string __p;
  char v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t (***v13)();
  std::string v14;
  char v15;

  v2 = **a1;
  v3 = *a2;
  v11 = off_B5020;
  v12 = *v2;
  v13 = &v11;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocations(v3, (uint64_t)&v11, (uint64_t)&v14);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  v6 = **((_QWORD **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v10 = 0;
  if (v15)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __p = v14;
    v10 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocations(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  char **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  _BYTE v40[24];
  _BYTE *v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  void *__p[2];
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  uint64_t *v54;

  v52 = (char *)operator new(0x30uLL);
  v53 = xmmword_B0ED0;
  strcpy(v52, "_swift_debug_metadataAllocationIterationEnabled");
  v50 = (char *)operator new(0x28uLL);
  v51 = xmmword_B0E40;
  strcpy(v50, "_swift_debug_allocationPoolPointer");
  v6 = (*(uint64_t (**)(_QWORD, char **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v52);
  if (!v6)
  {
    v11 = &v52;
LABEL_9:
    std::operator+<char>(__p, "unable to look up debug variable ", v11);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v46;
LABEL_43:
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_44;
  }
  v49 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v6, &v49, 1) & 1) == 0)
  {
    std::operator+<char>(__p, "failed to read value of ", &v52);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v46;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_44;
  }
  if (!v49)
  {
    v27 = (char *)operator new(0x48uLL);
    strcpy(v27, "remote process does not have metadata allocation iteration enabled");
    *(_QWORD *)a3 = v27;
    *(_OWORD *)(a3 + 8) = xmmword_B0EF0;
    goto LABEL_43;
  }
  v7 = (*(uint64_t (**)(_QWORD, char **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v50);
  if (!v7)
  {
    v11 = &v50;
    goto LABEL_9;
  }
  swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v7, 8u, (uint64_t)__p);
  if (!v48)
  {
    std::operator+<char>(&v42, "failed to read value of ", &v50);
    *(_OWORD *)a3 = v42;
    *(_QWORD *)(a3 + 16) = v43;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_60;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v42, *(_QWORD *)(a1 + 2488), v47, 16);
  if (!(_QWORD)v42)
  {
    v29 = (char *)operator new(0x30uLL);
    strcpy(v29, "failure reading allocation pool contents");
    *(_QWORD *)a3 = v29;
    *(_OWORD *)(a3 + 8) = xmmword_B0EE0;
    *(_BYTE *)(a3 + 24) = 1;
    *(_QWORD *)&v42 = 0;
LABEL_55:
    v30 = v44;
    if (v44 == (__int128 *)((char *)&v42 + 8))
    {
      v31 = 4;
      v30 = (_QWORD *)&v42 + 1;
    }
    else
    {
      if (!v44)
        goto LABEL_60;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_60:
    if (v48)
    {
      if (SHIBYTE(v46) < 0)
        operator delete(__p[0]);
    }
LABEL_44:
    if (SHIBYTE(v51) < 0)
    {
      operator delete(v50);
      if ((SHIBYTE(v53) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v52);
    return;
  }
  v8 = 0;
  v9 = *(_QWORD *)(v42 + 8) + *(_QWORD *)v42;
  v10 = &v37;
  while (v9 && v8 != 1000000)
  {
    (*(void (**)(uint64_t **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v39, *(_QWORD *)(a1 + 2488), v9, 16);
    v14 = v39;
    if (!v39)
    {
      v39 = 0;
      v23 = 3;
      goto LABEL_39;
    }
    v15 = v9 - v39[1];
    (*(void (**)(uint64_t **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v36, *(_QWORD *)(a1 + 2488), v15);
    v16 = v36;
    if (!v36)
    {
      v36 = 0;
      v23 = 3;
      goto LABEL_31;
    }
    if (v14[1])
    {
      v17 = v10;
      v18 = 0;
      v19 = v15 + 8;
      do
      {
        v20 = (unsigned __int16 *)((char *)v16 + v18);
        v21 = *(unsigned __int16 *)((char *)v16 + v18);
        if (!*(_WORD *)((char *)v16 + v18))
          break;
        v33 = v20[1];
        v34 = v19 + v18;
        v35 = v21;
        v22 = *(_QWORD *)(a2 + 24);
        if (!v22)
          goto LABEL_63;
        (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v22 + 48))(v22, &v33);
        v18 += *v20 + 8;
      }
      while (v18 < v14[1]);
      v16 = v36;
      v9 = *v14;
      v36 = 0;
      if (!v16)
      {
        v23 = 0;
        v10 = v17;
        goto LABEL_31;
      }
      v10 = v17;
    }
    else
    {
      v9 = *v14;
      v36 = 0;
    }
    v54 = v16;
    if (!v38)
      goto LABEL_63;
    (*(void (**)(uint64_t *, uint64_t **))(*v38 + 48))(v38, &v54);
    v23 = 0;
LABEL_31:
    v24 = v38;
    if (v38 == v10)
    {
      v24 = v10;
      v25 = 4;
    }
    else
    {
      if (!v38)
        goto LABEL_36;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_36:
    v26 = v39;
    v39 = 0;
    if (v26)
    {
      v36 = v26;
      if (!v41)
        goto LABEL_63;
      (*(void (**)(_BYTE *, uint64_t **))(*(_QWORD *)v41 + 48))(v41, &v36);
    }
LABEL_39:
    v12 = v41;
    if (v41 == v40)
    {
      v12 = v40;
      v13 = 4;
    }
    else
    {
      if (!v41)
        goto LABEL_13;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_13:
    ++v8;
    if (v23)
      break;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  v28 = (uint64_t *)v42;
  *(_QWORD *)&v42 = 0;
  if (!v28)
    goto LABEL_55;
  v39 = v28;
  if (v44)
  {
    (*(void (**)(_OWORD *, uint64_t **))(*(_QWORD *)v44 + 48))(v44, &v39);
    goto LABEL_55;
  }
LABEL_63:
  v32 = std::__throw_bad_function_call[abi:nn180100]();
  _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEED1Ev(v32);
}

void _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEED0Ev()
{
  operator delete();
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B4FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B4FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEEclEOSL_(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t (*v5)(int *, _QWORD);
  int v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_DWORD *)a2 + 4);
  v4 = *(_QWORD **)(a1 + 16);
  v5 = **(uint64_t (***)(int *, _QWORD))(a1 + 8);
  v7 = *a2;
  v8 = v2;
  v9 = v3;
  return v5(&v7, *v4);
}

void _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEED0Ev()
{
  operator delete();
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B5020;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B5020;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ43swift_reflection_iterateMetadataAllocationsENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_E_NS_9allocatorISH_EEFvNS5_18MetadataAllocationISC_EEEEclEOSL_(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t (*v5)(int *, _QWORD);
  int v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_DWORD *)a2 + 4);
  v4 = *(_QWORD **)(a1 + 16);
  v5 = **(uint64_t (***)(int *, _QWORD))(a1 + 8);
  v7 = *a2;
  v8 = v2;
  v9 = v3;
  return v5(&v7, *v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_allocationMetadataPointer::$_0>(swift_reflection_allocationMetadataPointer::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v2 = ***a1;
  if (*(_WORD *)v2 != 14)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 2488) + 24))(&v9, *(_QWORD *)(*(_QWORD *)a2 + 2488), *(_QWORD *)(v2 + 8), *(unsigned int *)(v2 + 16));
  v3 = v9;
  if (!v9)
  {
    v4 = 0;
    v9 = 0;
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v9 + 32);
  v9 = 0;
  v12 = v3;
  if (v11)
  {
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v12);
LABEL_7:
    v5 = v11;
    if (v11 == v10)
    {
      v6 = 4;
      v5 = v10;
      goto LABEL_11;
    }
    if (v11)
    {
      v6 = 5;
LABEL_11:
      (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
    }
    return v4;
  }
  v8 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_allocationMetadataPointer::$_0>(swift_reflection_allocationMetadataPointer::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_allocationMetadataPointer::$_0>(swift_reflection_allocationMetadataPointer::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v2 = ***a1;
  if (*(_WORD *)v2 != 14)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 2488) + 24))(&v9, *(_QWORD *)(*(_QWORD *)a2 + 2488), *(_QWORD *)(v2 + 8), *(unsigned int *)(v2 + 16));
  v3 = v9;
  if (!v9)
  {
    v4 = 0;
    v9 = 0;
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v9 + 32);
  v9 = 0;
  v12 = v3;
  if (v11)
  {
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v12);
LABEL_7:
    v5 = v11;
    if (v11 == v10)
    {
      v6 = 4;
      v5 = v10;
      goto LABEL_11;
    }
    if (v11)
    {
      v6 = 5;
LABEL_11:
      (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
    }
    return v4;
  }
  v8 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_metadataAllocationTagName::$_0>(swift_reflection_metadataAllocationTagName::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v8);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_metadataAllocationTagName::$_0>(swift_reflection_metadataAllocationTagName::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string __p;
  char v6;
  std::string v7;
  char v8;

  v1 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(**(_DWORD **)v1, (uint64_t)&v7);
  v2 = **(_QWORD **)(v1 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v6 = 0;
  if (v8)
  {
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    else
      __p = v7;
    v6 = 1;
  }
  v3 = returnableCString(v2, (uint64_t)&__p);
  if (v6 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v3;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_metadataAllocationTagName::$_0>(swift_reflection_metadataAllocationTagName::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string __p;
  char v6;
  std::string v7;
  char v8;

  v1 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(**(_DWORD **)v1, (uint64_t)&v7);
  v2 = **(_QWORD **)(v1 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v6 = 0;
  if (v8)
  {
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    else
      __p = v7;
    v6 = 1;
  }
  v3 = returnableCString(v2, (uint64_t)&__p);
  if (v6 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v3;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(int a1@<W1>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  const char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;

  switch(a1)
  {
    case 0:
      *(_QWORD *)a2 = 0x746553746F4ELL;
      v3 = 6;
      goto LABEL_36;
    case 1:
      *(_QWORD *)a2 = 0x7365786F42;
      v3 = 5;
      goto LABEL_36;
    case 2:
      strcpy((char *)a2, "ObjCClassWrappers");
      v3 = 17;
      goto LABEL_36;
    case 3:
      v5 = 0x6E6F6974636E7546;
      goto LABEL_8;
    case 4:
      v5 = 0x657079746174654DLL;
LABEL_8:
      *(_QWORD *)a2 = v5;
      strcpy((char *)(a2 + 8), "Types");
      v3 = 13;
      goto LABEL_36;
    case 5:
      v6 = (char *)operator new(0x28uLL);
      strcpy(v6, "ExistentialMetatypeValueWitnessTables");
      *(_QWORD *)a2 = v6;
      v7 = xmmword_B0F30;
      goto LABEL_30;
    case 6:
      *(_DWORD *)(a2 + 16) = 1936027769;
      v8 = *(_QWORD *)"ialMetatypes";
      v9 = 0x746E657473697845;
      goto LABEL_23;
    case 7:
      v10 = 0x746E657473697845;
      v11 = 0x73657079546C6169;
      goto LABEL_33;
    case 8:
      v12 = (char *)operator new(0x28uLL);
      strcpy(v12, "OpaqueExistentialValueWitnessTables");
      *(_QWORD *)a2 = v12;
      v7 = xmmword_B0E90;
      goto LABEL_30;
    case 9:
      v13 = (char *)operator new(0x28uLL);
      strcpy(v13, "ClassExistentialValueWitnessTables");
      *(_QWORD *)a2 = v13;
      v7 = xmmword_B0E40;
      goto LABEL_30;
    case 10:
      *(_DWORD *)(a2 + 16) = 1936026722;
      v8 = *(_QWORD *)"itnessTables";
      v9 = 0x576E676965726F46;
      goto LABEL_23;
    case 11:
      v14 = (char *)operator new(0x20uLL);
      strcpy(v14, "ResilientMetadataAllocator");
      *(_QWORD *)a2 = v14;
      v7 = xmmword_B0F20;
      goto LABEL_30;
    case 12:
      strcpy((char *)a2, "Metadata");
      v3 = 8;
      goto LABEL_36;
    case 13:
      strcpy((char *)a2, "TupleCache");
      v3 = 10;
      goto LABEL_36;
    case 14:
      *(_DWORD *)(a2 + 16) = 1701340001;
      v8 = *(_QWORD *)"etadataCache";
      v9 = 0x4D636972656E6547;
      goto LABEL_23;
    case 15:
      *(_DWORD *)(a2 + 16) = 1701340001;
      v8 = *(_QWORD *)"etadataCache";
      v9 = 0x4D6E676965726F46;
      goto LABEL_23;
    case 16:
      v15 = operator new(0x20uLL);
      v16 = "GenericWitnessTableCache";
      goto LABEL_28;
    case 17:
      *(_DWORD *)(a2 + 16) = 1635017060;
      v8 = *(_QWORD *)"lassMetadata";
      v9 = 0x43636972656E6547;
      goto LABEL_23;
    case 18:
      *(_DWORD *)(a2 + 16) = 1635017060;
      v8 = *(_QWORD *)"alueMetadata";
      v9 = 0x56636972656E6547;
LABEL_23:
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 20) = 0;
      v3 = 20;
      goto LABEL_36;
    case 19:
      v17 = (char *)operator new(0x28uLL);
      strcpy(v17, "SingletonGenericWitnessTableCache");
      *(_QWORD *)a2 = v17;
      v7 = xmmword_B0E30;
      goto LABEL_30;
    case 20:
      strcpy((char *)a2, "GlobalMetadataCache");
      v3 = 19;
      goto LABEL_36;
    case 21:
      v18 = (char *)operator new(0x19uLL);
      strcpy(v18, "GlobalWitnessTableCache");
      *(_QWORD *)a2 = v18;
      v7 = xmmword_B0F10;
      goto LABEL_30;
    case 22:
      v15 = operator new(0x20uLL);
      v16 = "ExtendedExistentialTypes";
LABEL_28:
      *(_OWORD *)v15 = *(_OWORD *)v16;
      v15[2] = *((_QWORD *)v16 + 2);
      *((_BYTE *)v15 + 24) = 0;
      *(_QWORD *)a2 = v15;
      v7 = xmmword_B0F00;
      goto LABEL_30;
    case 23:
      v19 = (char *)operator new(0x20uLL);
      strcpy(v19, "ExtendedExistentialTypeShapes");
      *(_QWORD *)a2 = v19;
      v7 = xmmword_B0E80;
LABEL_30:
      *(_OWORD *)(a2 + 8) = v7;
      goto LABEL_37;
    case 24:
      *(_QWORD *)a2 = 0x617461646174654DLL;
      v20 = 1801675088;
      goto LABEL_35;
    case 25:
      v10 = 0x547373656E746957;
      v11 = 0x6B636150656C6261;
LABEL_33:
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v11;
      *(_BYTE *)(a2 + 16) = 0;
      v3 = 16;
      goto LABEL_36;
    case 26:
      *(_QWORD *)a2 = 0x745374756F79614CLL;
      v20 = 1735289202;
LABEL_35:
      *(_DWORD *)(a2 + 8) = v20;
      *(_BYTE *)(a2 + 12) = 0;
      v3 = 12;
LABEL_36:
      *(_BYTE *)(a2 + 23) = v3;
LABEL_37:
      v4 = 1;
      break;
    default:
      v4 = 0;
      *(_BYTE *)a2 = 0;
      break;
  }
  *(_BYTE *)(a2 + 24) = v4;
}

void swift::reflection::ReflectionContext<swift::External<swift::NoObjCInterop<swift::RuntimeTarget<8u>>>>::metadataAllocationTagName(int a1@<W1>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  const char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;

  switch(a1)
  {
    case 0:
      *(_QWORD *)a2 = 0x746553746F4ELL;
      v3 = 6;
      goto LABEL_36;
    case 1:
      *(_QWORD *)a2 = 0x7365786F42;
      v3 = 5;
      goto LABEL_36;
    case 2:
      strcpy((char *)a2, "ObjCClassWrappers");
      v3 = 17;
      goto LABEL_36;
    case 3:
      v5 = 0x6E6F6974636E7546;
      goto LABEL_8;
    case 4:
      v5 = 0x657079746174654DLL;
LABEL_8:
      *(_QWORD *)a2 = v5;
      strcpy((char *)(a2 + 8), "Types");
      v3 = 13;
      goto LABEL_36;
    case 5:
      v6 = (char *)operator new(0x28uLL);
      strcpy(v6, "ExistentialMetatypeValueWitnessTables");
      *(_QWORD *)a2 = v6;
      v7 = xmmword_B0F30;
      goto LABEL_30;
    case 6:
      *(_DWORD *)(a2 + 16) = 1936027769;
      v8 = *(_QWORD *)"ialMetatypes";
      v9 = 0x746E657473697845;
      goto LABEL_23;
    case 7:
      v10 = 0x746E657473697845;
      v11 = 0x73657079546C6169;
      goto LABEL_33;
    case 8:
      v12 = (char *)operator new(0x28uLL);
      strcpy(v12, "OpaqueExistentialValueWitnessTables");
      *(_QWORD *)a2 = v12;
      v7 = xmmword_B0E90;
      goto LABEL_30;
    case 9:
      v13 = (char *)operator new(0x28uLL);
      strcpy(v13, "ClassExistentialValueWitnessTables");
      *(_QWORD *)a2 = v13;
      v7 = xmmword_B0E40;
      goto LABEL_30;
    case 10:
      *(_DWORD *)(a2 + 16) = 1936026722;
      v8 = *(_QWORD *)"itnessTables";
      v9 = 0x576E676965726F46;
      goto LABEL_23;
    case 11:
      v14 = (char *)operator new(0x20uLL);
      strcpy(v14, "ResilientMetadataAllocator");
      *(_QWORD *)a2 = v14;
      v7 = xmmword_B0F20;
      goto LABEL_30;
    case 12:
      strcpy((char *)a2, "Metadata");
      v3 = 8;
      goto LABEL_36;
    case 13:
      strcpy((char *)a2, "TupleCache");
      v3 = 10;
      goto LABEL_36;
    case 14:
      *(_DWORD *)(a2 + 16) = 1701340001;
      v8 = *(_QWORD *)"etadataCache";
      v9 = 0x4D636972656E6547;
      goto LABEL_23;
    case 15:
      *(_DWORD *)(a2 + 16) = 1701340001;
      v8 = *(_QWORD *)"etadataCache";
      v9 = 0x4D6E676965726F46;
      goto LABEL_23;
    case 16:
      v15 = operator new(0x20uLL);
      v16 = "GenericWitnessTableCache";
      goto LABEL_28;
    case 17:
      *(_DWORD *)(a2 + 16) = 1635017060;
      v8 = *(_QWORD *)"lassMetadata";
      v9 = 0x43636972656E6547;
      goto LABEL_23;
    case 18:
      *(_DWORD *)(a2 + 16) = 1635017060;
      v8 = *(_QWORD *)"alueMetadata";
      v9 = 0x56636972656E6547;
LABEL_23:
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 20) = 0;
      v3 = 20;
      goto LABEL_36;
    case 19:
      v17 = (char *)operator new(0x28uLL);
      strcpy(v17, "SingletonGenericWitnessTableCache");
      *(_QWORD *)a2 = v17;
      v7 = xmmword_B0E30;
      goto LABEL_30;
    case 20:
      strcpy((char *)a2, "GlobalMetadataCache");
      v3 = 19;
      goto LABEL_36;
    case 21:
      v18 = (char *)operator new(0x19uLL);
      strcpy(v18, "GlobalWitnessTableCache");
      *(_QWORD *)a2 = v18;
      v7 = xmmword_B0F10;
      goto LABEL_30;
    case 22:
      v15 = operator new(0x20uLL);
      v16 = "ExtendedExistentialTypes";
LABEL_28:
      *(_OWORD *)v15 = *(_OWORD *)v16;
      v15[2] = *((_QWORD *)v16 + 2);
      *((_BYTE *)v15 + 24) = 0;
      *(_QWORD *)a2 = v15;
      v7 = xmmword_B0F00;
      goto LABEL_30;
    case 23:
      v19 = (char *)operator new(0x20uLL);
      strcpy(v19, "ExtendedExistentialTypeShapes");
      *(_QWORD *)a2 = v19;
      v7 = xmmword_B0E80;
LABEL_30:
      *(_OWORD *)(a2 + 8) = v7;
      goto LABEL_37;
    case 24:
      *(_QWORD *)a2 = 0x617461646174654DLL;
      v20 = 1801675088;
      goto LABEL_35;
    case 25:
      v10 = 0x547373656E746957;
      v11 = 0x6B636150656C6261;
LABEL_33:
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v11;
      *(_BYTE *)(a2 + 16) = 0;
      v3 = 16;
      goto LABEL_36;
    case 26:
      *(_QWORD *)a2 = 0x745374756F79614CLL;
      v20 = 1735289202;
LABEL_35:
      *(_DWORD *)(a2 + 8) = v20;
      *(_BYTE *)(a2 + 12) = 0;
      v3 = 12;
LABEL_36:
      *(_BYTE *)(a2 + 23) = v3;
LABEL_37:
      v4 = 1;
      break;
    default:
      v4 = 0;
      *(_BYTE *)a2 = 0;
      break;
  }
  *(_BYTE *)(a2 + 24) = v4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataAllocationCacheNode::$_0>(swift_reflection_metadataAllocationCacheNode::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_QWORD **a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD **v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  _QWORD *v19;

  v3 = (_QWORD **)**a1;
  v4 = *(unsigned __int16 *)*v3;
  v5 = v4 > 0x17;
  v6 = (1 << v4) & 0xC1E7FE;
  if (!v5 && v6 != 0)
  {
    (*(void (**)(_QWORD **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a2 + 2488) + 24))(&v16, *(_QWORD *)(*(_QWORD *)a2 + 2488), (*v3)[1], 16);
    v8 = v16;
    if (v16)
    {
      v9 = *v16;
      v2 = v16[1];
      v16 = 0;
      v19 = v8;
      if (!v18)
      {
        v15 = std::__throw_bad_function_call[abi:nn180100]();
        return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataAllocationCacheNode::$_0>(swift_reflection_metadataAllocationCacheNode::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v15);
      }
      v10 = v9 & 0xFFFFFFFFFFFFFF00;
      (*(void (**)(_BYTE *, _QWORD **))(*(_QWORD *)v18 + 48))(v18, &v19);
      v9 = v9;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v16 = 0;
    }
    v11 = v18;
    if (v18 == v17)
    {
      v12 = 4;
      v11 = v17;
    }
    else
    {
      if (!v18)
        goto LABEL_14;
      v12 = 5;
    }
    (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_14:
    if (v8)
    {
      v13 = (unint64_t *)*v3[1];
      *v13 = v10 | v9;
      v13[1] = v2;
      return 1;
    }
  }
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<int SwiftReflectionContext::withContext<int,swift_reflection_metadataAllocationCacheNode::$_0>(swift_reflection_metadataAllocationCacheNode::$_0 const&)::{lambda(int&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_QWORD **a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD **v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  _QWORD *v19;

  v3 = (_QWORD **)**a1;
  v4 = *(unsigned __int16 *)*v3;
  v5 = v4 > 0x17;
  v6 = (1 << v4) & 0xC1E7FE;
  if (!v5 && v6 != 0)
  {
    (*(void (**)(_QWORD **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a2 + 2488) + 24))(&v16, *(_QWORD *)(*(_QWORD *)a2 + 2488), (*v3)[1], 16);
    v8 = v16;
    if (v16)
    {
      v9 = *v16;
      v2 = v16[1];
      v16 = 0;
      v19 = v8;
      if (!v18)
      {
        v15 = std::__throw_bad_function_call[abi:nn180100]();
        return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocationBacktraces::$_0>(swift_reflection_iterateMetadataAllocationBacktraces::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v15);
      }
      v10 = v9 & 0xFFFFFFFFFFFFFF00;
      (*(void (**)(_BYTE *, _QWORD **))(*(_QWORD *)v18 + 48))(v18, &v19);
      v9 = v9;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v16 = 0;
    }
    v11 = v18;
    if (v18 == v17)
    {
      v12 = 4;
      v11 = v17;
    }
    else
    {
      if (!v18)
        goto LABEL_14;
      v12 = 5;
    }
    (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_14:
    if (v8)
    {
      v13 = (unint64_t *)*v3[1];
      *v13 = v10 | v9;
      v13[1] = v2;
      return 1;
    }
  }
  return 0;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocationBacktraces::$_0>(swift_reflection_iterateMetadataAllocationBacktraces::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(__int128 ***a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::string __p;
  char v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t (***v13)();
  std::string v14;
  char v15;

  v2 = **a1;
  v3 = *a2;
  v11 = off_B50A8;
  v12 = *v2;
  v13 = &v11;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocationBacktraces(v3, (uint64_t)&v11, (uint64_t)&v14);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  v6 = **((_QWORD **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v10 = 0;
  if (v15)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __p = v14;
    v10 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<char const* SwiftReflectionContext::withContext<char const*,swift_reflection_iterateMetadataAllocationBacktraces::$_0>(swift_reflection_iterateMetadataAllocationBacktraces::$_0 const&)::{lambda(char const*&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(__int128 ***a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::string __p;
  char v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t (***v13)();
  std::string v14;
  char v15;

  v2 = **a1;
  v3 = *a2;
  v11 = off_B50F0;
  v12 = *v2;
  v13 = &v11;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocationBacktraces(v3, (uint64_t)&v11, (uint64_t)&v14);
  v4 = v13;
  if (v13 == &v11)
  {
    v5 = 4;
    v4 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  v6 = **((_QWORD **)v2 + 2);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v10 = 0;
  if (v15)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __p = v14;
    v10 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::iterateMetadataAllocationBacktraces(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  __int128 *p_dst;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 __dst;
  unint64_t v32;
  char __str[16];
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  void *v39;
  char v40;
  uint64_t v41;
  char v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  int v46[3];

  v43 = (char *)operator new(0x30uLL);
  v44 = xmmword_B0EC0;
  strcpy(v43, "_swift_debug_metadataAllocationBacktraceList");
  v6 = (*(uint64_t (**)(_QWORD, char **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v43);
  if (!v6)
  {
    std::operator+<char>(__str, "unable to look up debug variable ", &v43);
    *(_OWORD *)a3 = *(_OWORD *)__str;
    *(_QWORD *)(a3 + 16) = v34;
    *(_BYTE *)(a3 + 24) = 1;
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      return;
LABEL_41:
    operator delete(v43);
    return;
  }
  swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v6, 8u, (uint64_t)&v39);
  if (v42)
  {
    v7 = v41;
    v8 = &__str[8];
    v9 = &v37;
    v10 = 1000000001;
    v30 = a1;
    while (1)
    {
      if (!v7)
        goto LABEL_34;
      if (!--v10)
        goto LABEL_34;
      (*(void (**)(uint64_t **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(&v36, *(_QWORD *)(a1 + 2488), v7, 24);
      v13 = v36;
      if (!v36)
        break;
      (*(void (**)(char *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 24))(__str, *(_QWORD *)(a1 + 2488), v7 + 24, 8 * *((unsigned int *)v36 + 4));
      v14 = *((_DWORD *)v13 + 4);
      *(_QWORD *)&__dst = v13[1];
      v46[0] = v14;
      v45 = *(_QWORD *)__str;
      v15 = *(_QWORD *)(a2 + 24);
      if (!v15)
        goto LABEL_42;
      (*(void (**)(uint64_t, __int128 *, int *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &__dst, v46, &v45);
      v7 = *v13;
      v16 = *(_QWORD *)__str;
      *(_QWORD *)__str = 0;
      if (v16)
      {
        *(_QWORD *)&__dst = v16;
        if (!v35)
          goto LABEL_42;
        (*(void (**)(char *, __int128 *))(*(_QWORD *)v35 + 48))(v35, &__dst);
      }
      v17 = v35;
      if (v35 == v8)
      {
        v17 = v8;
        v18 = 4;
      }
      else
      {
        if (!v35)
          goto LABEL_28;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_28:
      v29 = v36;
      v11 = v38;
      v36 = 0;
      if (v29)
      {
        *(_QWORD *)__str = v29;
        if (!v38)
        {
LABEL_42:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
          abort();
        }
        (*(void (**)(void))(*v38 + 48))();
        v11 = v38;
      }
      if (v11 == v9)
      {
        v11 = v9;
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_6;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
      if (!v13)
        goto LABEL_35;
    }
    snprintf(__str, 0x80uLL, "unable to read Next pointer %#llx", v7);
    v19 = strlen(__str);
    if (v19 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_43;
    v20 = v19;
    if (v19 >= 0x17)
    {
      v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v22 = v19 | 7;
      v23 = a3;
      v24 = v9;
      v25 = v8;
      v26 = a2;
      v27 = v22 + 1;
      p_dst = (__int128 *)operator new(v22 + 1);
      v28 = v27 | 0x8000000000000000;
      a2 = v26;
      v8 = v25;
      v9 = v24;
      a3 = v23;
      a1 = v30;
      *((_QWORD *)&__dst + 1) = v20;
      v32 = v28;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v32) = v19;
      p_dst = &__dst;
      if (!v19)
        goto LABEL_27;
    }
    memcpy(p_dst, __str, v20);
LABEL_27:
    *((_BYTE *)p_dst + v20) = 0;
    *(_OWORD *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = v32;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_28;
  }
LABEL_34:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_35:
  if (v42)
  {
    if (v40 < 0)
      operator delete(v39);
  }
  if (SHIBYTE(v44) < 0)
    goto LABEL_41;
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEED0Ev()
{
  operator delete();
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B50A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B50A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_15WithObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEEclEOyOjOSN_(uint64_t a1, uint64_t *a2, unsigned int *a3, const void **a4)
{
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;

  v5 = *a2;
  v6 = *a3;
  if ((_DWORD)v6)
  {
    v7 = *a4;
    v8 = operator new(8 * v6);
    memcpy(v8, v7, 8 * v6);
  }
  else
  {
    v8 = 0;
  }
  (**(void (***)(uint64_t, uint64_t, void *, _QWORD))(a1 + 8))(v5, v6, v8, **(_QWORD **)(a1 + 16));
  if (v8)
    operator delete(v8);
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEED0Ev()
{
  operator delete();
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_B50F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_B50F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZ52swift_reflection_iterateMetadataAllocationBacktracesENK3__0clIN5swift10reflection17ReflectionContextINS4_8ExternalINS4_13NoObjCInteropINS4_13RuntimeTargetILj8EEEEEEEEEEEDaPT_EUlSF_T0_T1_E_NS_9allocatorISJ_EEFvyjPKyEEclEOyOjOSN_(uint64_t a1, uint64_t *a2, unsigned int *a3, const void **a4)
{
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;

  v5 = *a2;
  v6 = *a3;
  if ((_DWORD)v6)
  {
    v7 = *a4;
    v8 = operator new(8 * v6);
    memcpy(v8, v7, 8 * v6);
  }
  else
  {
    v8 = 0;
  }
  (**(void (***)(uint64_t, uint64_t, void *, _QWORD))(a1 + 8))(v5, v6, v8, **(_QWORD **)(a1 + 16));
  if (v8)
    operator delete(v8);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_return SwiftReflectionContext::withContext<swift_async_task_slab_return,swift_reflection_asyncTaskSlabPointer::$_0>(swift_reflection_asyncTaskSlabPointer::$_0 const&)::{lambda(swift_async_task_slab_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::string __p;
  char v8;
  std::string v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = **a1;
  v3 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (*(_BYTE *)(v3 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
    if (v10)
      goto LABEL_3;
LABEL_6:
    v5 = 0;
    goto LABEL_11;
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
  if (!v10)
    goto LABEL_6;
LABEL_3:
  v4 = **(_QWORD **)(v2 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v8 = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v8 = 1;
  v5 = returnableCString(v4, (uint64_t)&__p);
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v10 && SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v5;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_return SwiftReflectionContext::withContext<swift_async_task_slab_return,swift_reflection_asyncTaskSlabPointer::$_0>(swift_reflection_asyncTaskSlabPointer::$_0 const&)::{lambda(swift_async_task_slab_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::string __p;
  char v8;
  std::string v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = **a1;
  v3 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (*(_BYTE *)(v3 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
    if (v10)
      goto LABEL_3;
LABEL_6:
    v5 = 0;
    goto LABEL_11;
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v3, 0, 0, &v9);
  if (!v10)
    goto LABEL_6;
LABEL_3:
  v4 = **(_QWORD **)(v2 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v8 = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v8 = 1;
  v5 = returnableCString(v4, (uint64_t)&__p);
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v10 && SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v5;
}

void swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  void *__p;
  __int128 v15;
  uint64_t v16;
  char v17;

  if (!*(_BYTE *)(a1 + 2608))
  {
    v12 = operator new(0x30uLL);
    v13 = xmmword_B0F40;
    strcpy((char *)v12, "_swift_concurrency_debug_non_future_adapter");
    v2 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v12);
    if (v2 && (swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v2, 8u, (uint64_t)&__p), v17))
    {
      v3 = v16;
      if (SHIBYTE(v15) < 0)
        operator delete(__p);
    }
    else
    {
      v3 = 0;
    }
    *(_QWORD *)(a1 + 2616) = v3;
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    v12 = operator new(0x28uLL);
    v13 = xmmword_B0F50;
    strcpy((char *)v12, "_swift_concurrency_debug_future_adapter");
    v4 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v12);
    if (v4 && (swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v4, 8u, (uint64_t)&__p), v17))
    {
      v5 = v16;
      if (SHIBYTE(v15) < 0)
        operator delete(__p);
    }
    else
    {
      v5 = 0;
    }
    *(_QWORD *)(a1 + 2624) = v5;
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    v12 = operator new(0x40uLL);
    v13 = xmmword_B0F60;
    strcpy((char *)v12, "_swift_concurrency_debug_task_wait_throwing_resume_adapter");
    v6 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v12);
    if (v6 && (swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v6, 8u, (uint64_t)&__p), v17))
    {
      v7 = v16;
      if (SHIBYTE(v15) < 0)
        operator delete(__p);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(a1 + 2632) = v7;
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    v12 = operator new(0x40uLL);
    v13 = xmmword_B0F70;
    strcpy((char *)v12, "_swift_concurrency_debug_task_future_wait_resume_adapter");
    v8 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 2488) + 8))(*(_QWORD *)(a1 + 2488), &v12);
    if (v8 && (swift::remote::MemoryReader::readPointer(*(_QWORD *)(a1 + 2488), v8, 8u, (uint64_t)&__p), v17))
    {
      v9 = v16;
      if (SHIBYTE(v15) < 0)
        operator delete(__p);
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)(a1 + 2640) = v9;
    if (SHIBYTE(v13) < 0)
      operator delete(v12);
    v10 = *(_QWORD *)(a1 + 2488);
    __p = operator new(0x38uLL);
    v15 = xmmword_B0F80;
    strcpy((char *)__p, "_swift_concurrency_debug_supportsPriorityEscalation");
    v11 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v10 + 8))(v10, &__p);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    if (v11)
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2488) + 32))(*(_QWORD *)(a1 + 2488), v11, a1 + 2648, 1);
    *(_BYTE *)(a1 + 2608) = 1;
  }
}

_QWORD *swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, std::string *a4@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  int32x4_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __int128 *v24;
  uint64_t v25;
  void *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  char *v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  _QWORD *result;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int16x8_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  std::string::size_type v94;
  int v95;
  int v96;
  std::string *v97;
  unsigned int v98;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  char v107;
  __int128 *v108;
  _BYTE v109[23];
  int v110;
  __int128 v111;
  void *v112[2];
  __int128 v113;
  void *__p[2];
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[24];
  _BYTE *v118;
  _QWORD v119[2];

  v4 = a1;
  swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(_QWORD *)(a1 + 2488), &v116);
  if (v116)
  {
    v97 = a4;
    v6 = *(_DWORD *)(v116 + 32);
    v86 = v6;
    v87 = BYTE1(v6);
    v7 = (int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v6), (uint32x4_t)xmmword_B0F90);
    v7.i64[0] = *(_QWORD *)&vmovn_s32(v7) & 0xFF01FF01FF01FF01;
    v85 = (int16x8_t)v7;
    v8 = *(_DWORD *)(v116 + 96);
    v9 = *(_DWORD *)(v116 + 100);
    v89 = (v8 >> 8) & 1;
    v90 = (v8 >> 9) & 1;
    v96 = (v8 >> 12) & 1;
    v91 = (v8 >> 10) & 1;
    v92 = v9 > 3;
    v10 = v9 | 3;
    v98 = v9;
    if (v9 < 4)
      v10 = 0;
    v95 = v10;
    v93 = *(unsigned int *)(v116 + 36) | ((unint64_t)*(unsigned int *)(v116 + 144) << 32);
    v94 = *(_QWORD *)(v116 + 120);
    v88 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getRunJob<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v4, v116);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(v116 + 104);
    v104 = v4;
    while (v15 && v14 != a2)
    {
      swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), v109);
      v19 = *(_QWORD *)v109;
      if (!*(_QWORD *)v109)
      {
        *(_QWORD *)v109 = 0;
        goto LABEL_33;
      }
      v101 = *(_QWORD *)v109;
      v20 = **(_BYTE **)v109;
      if (v20 == 2)
      {
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), &v105);
        v23 = v105;
        if (v105)
        {
          v22 = *((_QWORD *)v105 + 2);
          v105 = 0;
          v119[0] = v23;
          if (!v108)
            goto LABEL_144;
          (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v108 + 48))(v108, v119);
        }
        else
        {
          v22 = 0;
          v105 = 0;
        }
        v24 = v108;
        if (v108 == &v106)
          goto LABEL_29;
        if (v108)
        {
LABEL_28:
          v25 = 5;
LABEL_30:
          (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
          if (!v22)
            goto LABEL_31;
LABEL_39:
          while (2)
          {
            if (v12 < v13)
            {
              *(_QWORD *)v12 = v22;
              v12 += 8;
              goto LABEL_58;
            }
            v29 = (v12 - v11) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_145;
            if ((v13 - v11) >> 2 > v30)
              v30 = (v13 - v11) >> 2;
            if ((unint64_t)(v13 - v11) >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
            {
              if (v31 >> 61)
LABEL_146:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v32 = operator new(8 * v31);
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[8 * v29];
            *(_QWORD *)v33 = v22;
            v34 = v33 + 8;
            if (v12 != v11)
            {
              v35 = v12 - v11 - 8;
              if (v35 < 0x168
                || (v39 = (v12 - 8 - v11) & 0xFFFFFFFFFFFFFFF8, &v32[v12 - v11 - 8 - v39] > &v32[v12 - v11 - 8])
                || &v12[-v39 - 8] > v12 - 8
                || (unint64_t)(v11 - v32) < 0x20)
              {
                v36 = v12;
                v4 = v104;
              }
              else
              {
                v40 = (v35 >> 3) + 1;
                v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
                v36 = &v12[-v41];
                v33 -= v41;
                v42 = &v32[8 * v29 - 16];
                v43 = v12 - 16;
                v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v45 = *(_OWORD *)v43;
                  *(v42 - 1) = *((_OWORD *)v43 - 1);
                  *v42 = v45;
                  v42 -= 2;
                  v43 -= 32;
                  v44 -= 4;
                }
                while (v44);
                v4 = v104;
                if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_55:
                  v13 = &v32[8 * v31];
                  if (v11)
                    goto LABEL_56;
                  goto LABEL_57;
                }
              }
              do
              {
                v37 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v33 - 1) = v37;
                v33 -= 8;
              }
              while (v36 != v11);
              goto LABEL_55;
            }
            v4 = v104;
            v13 = &v32[8 * v31];
            if (v11)
LABEL_56:
              operator delete(v11);
LABEL_57:
            v11 = v33;
            v12 = v34;
LABEL_58:
            swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), &v105);
            v38 = v105;
            if (v105)
            {
              v22 = *((_QWORD *)v105 + 1);
              v105 = 0;
              v119[0] = v38;
              if (!v108)
                goto LABEL_144;
              (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v108 + 48))(v108, v119);
            }
            else
            {
              v22 = 0;
              v105 = 0;
            }
            v27 = v108;
            if (v108 != &v106)
            {
              if (v108)
              {
                v28 = 5;
LABEL_37:
                (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
              }
              if (!v22)
                goto LABEL_31;
              continue;
            }
            break;
          }
          v27 = &v106;
          v28 = 4;
          goto LABEL_37;
        }
      }
      else
      {
        if (v20 != 1)
          goto LABEL_31;
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), &v105);
        v21 = v105;
        if (v105)
        {
          v22 = *((_QWORD *)v105 + 2);
          v105 = 0;
          v119[0] = v21;
          if (!v108)
            goto LABEL_144;
          (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v108 + 48))(v108, v119);
        }
        else
        {
          v22 = 0;
          v105 = 0;
        }
        v24 = v108;
        if (v108 == &v106)
        {
LABEL_29:
          v24 = &v106;
          v25 = 4;
          goto LABEL_30;
        }
        if (v108)
          goto LABEL_28;
      }
      if (v22)
        goto LABEL_39;
LABEL_31:
      v26 = *(void **)v109;
      v15 = *(_QWORD *)(*(_QWORD *)v109 + 8);
      *(_QWORD *)v109 = 0;
      v105 = v26;
      if (!(_QWORD)v111)
      {
LABEL_144:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_145:
        abort();
      }
      (*(void (**)(_QWORD, void **))(*(_QWORD *)v111 + 48))(v111, &v105);
      v19 = v101;
LABEL_33:
      v17 = (_QWORD *)v111;
      if ((_BYTE *)v111 == &v109[8])
      {
        v16 = v19;
        v17 = &v109[8];
        v18 = 4;
      }
      else
      {
        if (!(_QWORD)v111)
          goto LABEL_7;
        v16 = v19;
        v18 = 5;
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
      v19 = v16;
LABEL_7:
      ++v14;
      if (!v19)
        break;
    }
    if (v98 > 3)
    {
      v46 = 0;
      v47 = 0;
LABEL_76:
      v97->__r_.__value_.__s.__data_[0] = 0;
      v97[1].__r_.__value_.__s.__data_[0] = 0;
      LODWORD(v97[1].__r_.__value_.__r.__words[1]) = v86;
      HIDWORD(v97[1].__r_.__value_.__r.__words[1]) = v87;
      v97[1].__r_.__value_.__r.__words[2] = vmovn_s16(v85).u32[0];
      v97[2].__r_.__value_.__s.__data_[0] = v89;
      v97[2].__r_.__value_.__s.__data_[1] = v90;
      v97[2].__r_.__value_.__s.__data_[2] = v91;
      v97[2].__r_.__value_.__s.__data_[3] = 1;
      v97[2].__r_.__value_.__s.__data_[4] = v92;
      v97[2].__r_.__value_.__s.__data_[5] = v96;
      v97[2].__r_.__value_.__s.__data_[6] = 1;
      LODWORD(v97[2].__r_.__value_.__r.__words[1]) = v95;
      v97[2].__r_.__value_.__r.__words[2] = v93;
      v97[3].__r_.__value_.__r.__words[0] = v88;
      v97[3].__r_.__value_.__l.__size_ = v94;
      v97[3].__r_.__value_.__r.__words[2] = 0;
      v97[4].__r_.__value_.__r.__words[0] = 0;
      v97[4].__r_.__value_.__l.__size_ = 0;
      v48 = v12 - v11;
      if (v48)
      {
        if (v48 < 0)
          goto LABEL_145;
        v49 = (char *)operator new(v48);
        v97[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v49;
        v97[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        v50 = &v49[8 * (v48 >> 3)];
        v97[4].__r_.__value_.__l.__size_ = (std::string::size_type)v50;
        memcpy(v49, v11, v48);
        v97[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      }
      v97[4].__r_.__value_.__r.__words[2] = 0;
      v97[5].__r_.__value_.__r.__words[0] = 0;
      v97[5].__r_.__value_.__l.__size_ = 0;
      v51 = v47 - v46;
      if (v47 != v46)
      {
        if (v51 < 0)
          goto LABEL_145;
        v52 = (char *)operator new(v47 - v46);
        v97[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v52;
        v97[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
        v53 = &v52[8 * (v51 >> 3)];
        v97[5].__r_.__value_.__l.__size_ = (std::string::size_type)v53;
        memcpy(v52, v46, v47 - v46);
        v97[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
      }
      if (v46)
        operator delete(v46);
      if (v11)
      {
        v54 = v11;
LABEL_93:
        operator delete(v54);
        goto LABEL_94;
      }
      goto LABEL_94;
    }
    v47 = 0;
    v46 = 0;
    v59 = 0;
    v60 = *(_QWORD *)(v116 + 64);
    v102 = 0;
    while (1)
    {
      if (!v60 || v59 == a3)
        goto LABEL_76;
      swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), v109);
      v63 = *(uint64_t **)v109;
      if (!*(_QWORD *)v109)
      {
        *(_QWORD *)v109 = 0;
        goto LABEL_134;
      }
      v64 = *(_QWORD *)(v4 + 2504) & *(_QWORD *)(*(_QWORD *)v109 + 8);
      if (v47 >= v102)
        break;
      *(_QWORD *)v47 = v64;
      v47 += 8;
      v65 = v63;
LABEL_132:
      v76 = *v65;
      v77 = *(_QWORD *)(v4 + 2504);
      *(_QWORD *)v109 = 0;
      v105 = v65;
      if (!(_QWORD)v111)
        goto LABEL_144;
      v60 = v77 & v76;
      (*(void (**)(_QWORD, void **))(*(_QWORD *)v111 + 48))(v111, &v105);
LABEL_134:
      v61 = (_QWORD *)v111;
      if ((_BYTE *)v111 == &v109[8])
      {
        v61 = &v109[8];
        v62 = 4;
      }
      else
      {
        if (!(_QWORD)v111)
          goto LABEL_106;
        v62 = 5;
      }
      (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_106:
      ++v59;
      if (!v63)
        goto LABEL_76;
    }
    v66 = (v47 - v46) >> 3;
    v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 61)
      goto LABEL_145;
    if ((v102 - v46) >> 2 > v67)
      v67 = (v102 - v46) >> 2;
    v68 = 0x1FFFFFFFFFFFFFFFLL;
    if ((unint64_t)(v102 - v46) < 0x7FFFFFFFFFFFFFF8)
      v68 = v67;
    v103 = v68;
    if (v68)
    {
      if (v68 >> 61)
        goto LABEL_146;
      v69 = operator new(8 * v68);
    }
    else
    {
      v69 = 0;
    }
    v70 = &v69[8 * v66];
    *(_QWORD *)v70 = v64;
    v71 = v70 + 8;
    if (v47 == v46)
    {
      v47 = v70 + 8;
      v74 = v103;
      goto LABEL_128;
    }
    v72 = v47 - v46 - 8;
    if (v72 < 0x168
      || (v78 = (v47 - 8 - v46) & 0xFFFFFFFFFFFFFFF8, &v69[v47 - v46 - 8 - v78] > &v69[v47 - v46 - 8])
      || &v47[-v78 - 8] > v47 - 8
      || (unint64_t)(v46 - v69) < 0x20)
    {
      v73 = v47;
      v47 = v70 + 8;
      v74 = v103;
    }
    else
    {
      v79 = (v72 >> 3) + 1;
      v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
      v73 = &v47[-v80];
      v70 -= v80;
      v81 = &v69[8 * v66 - 16];
      v82 = v47 - 16;
      v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v84 = *(_OWORD *)v82;
        *(v81 - 1) = *((_OWORD *)v82 - 1);
        *v81 = v84;
        v81 -= 2;
        v82 -= 32;
        v83 -= 4;
      }
      while (v83);
      v47 = v71;
      v74 = v103;
      if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_128:
        v102 = &v69[8 * v74];
        if (v46)
        {
          operator delete(v46);
          v65 = *(uint64_t **)v109;
        }
        else
        {
          v65 = v63;
        }
        v46 = v70;
        v4 = v104;
        goto LABEL_132;
      }
    }
    do
    {
      v75 = *((_QWORD *)v73 - 1);
      v73 -= 8;
      *((_QWORD *)v70 - 1) = v75;
      v70 -= 8;
    }
    while (v73 != v46);
    goto LABEL_128;
  }
  v55 = (char *)operator new(0x20uLL);
  strcpy(v55, "failure reading async task");
  v105 = v55;
  v106 = xmmword_B0F20;
  v107 = 1;
  v110 = 0;
  memset(v109, 0, sizeof(v109));
  v111 = 0u;
  *(_OWORD *)v112 = 0u;
  v113 = 0u;
  *(_OWORD *)__p = 0u;
  v115 = 0;
  std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(a4, (__int128 *)&v105, (__int128 *)v109);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v112[1])
  {
    *(void **)&v113 = v112[1];
    operator delete(v112[1]);
  }
  if (v107 && SHIBYTE(v106) < 0)
  {
    v54 = v105;
    goto LABEL_93;
  }
LABEL_94:
  v56 = v116;
  v116 = 0;
  if (v56)
  {
    *(_QWORD *)v109 = v56;
    if (!v118)
      goto LABEL_144;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v118 + 48))(v118, v109);
  }
  result = v118;
  if (v118 == v117)
  {
    v58 = 4;
    result = v117;
  }
  else
  {
    if (!v118)
      return result;
    v58 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v58))();
}

_QWORD *swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, std::string *a4@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  int32x4_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  int64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _QWORD *result;
  uint64_t v82;
  int v83;
  int16x8_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  std::string::size_type v92;
  std::string *v93;
  int v94;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  __int128 v102;
  char v103;
  __int128 *v104;
  _BYTE v105[23];
  int v106;
  __int128 v107;
  void *v108[2];
  __int128 v109;
  void *__p[2];
  uint64_t v111;
  uint64_t v112;
  _BYTE v113[24];
  _BYTE *v114;
  _QWORD v115[2];

  v4 = a1;
  swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(_QWORD *)(a1 + 2488), &v112);
  if (v112)
  {
    v93 = a4;
    v6 = *(_DWORD *)(v112 + 32);
    v83 = v6;
    v85 = BYTE1(v6);
    v7 = (int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v6), (uint32x4_t)xmmword_B0F90);
    v7.i64[0] = *(_QWORD *)&vmovn_s32(v7) & 0xFF01FF01FF01FF01;
    v84 = (int16x8_t)v7;
    v8 = *(_DWORD *)(v112 + 96);
    v86 = (v8 >> 8) & 1;
    v87 = (v8 >> 9) & 1;
    v88 = (v8 >> 10) & 1;
    v90 = (v8 >> 12) & 1;
    v94 = (v8 >> 11) & 1;
    v91 = *(unsigned int *)(v112 + 36) | ((unint64_t)*(unsigned int *)(v112 + 144) << 32);
    v92 = *(_QWORD *)(v112 + 120);
    v89 = swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getRunJob<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v4, v112);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v112 + 104);
    v100 = v4;
    while (v13 && v12 != a2)
    {
      swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), v105);
      v17 = *(_QWORD *)v105;
      if (!*(_QWORD *)v105)
      {
        *(_QWORD *)v105 = 0;
        goto LABEL_31;
      }
      v97 = *(_QWORD *)v105;
      v18 = **(_BYTE **)v105;
      if (v18 == 2)
      {
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), &v101);
        v21 = v101;
        if (v101)
        {
          v20 = *((_QWORD *)v101 + 2);
          v101 = 0;
          v115[0] = v21;
          if (!v104)
            goto LABEL_142;
          (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v104 + 48))(v104, v115);
        }
        else
        {
          v20 = 0;
          v101 = 0;
        }
        v22 = v104;
        if (v104 == &v102)
          goto LABEL_27;
        if (v104)
        {
LABEL_26:
          v23 = 5;
LABEL_28:
          (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
          if (!v20)
            goto LABEL_29;
LABEL_37:
          while (2)
          {
            if (v10 < v11)
            {
              *(_QWORD *)v10 = v20;
              v10 += 8;
              goto LABEL_56;
            }
            v27 = (v10 - v9) >> 3;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              goto LABEL_143;
            if ((v11 - v9) >> 2 > v28)
              v28 = (v11 - v9) >> 2;
            if ((unint64_t)(v11 - v9) >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            if (v29)
            {
              if (v29 >> 61)
LABEL_144:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v30 = operator new(8 * v29);
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[8 * v27];
            *(_QWORD *)v31 = v20;
            v32 = v31 + 8;
            if (v10 != v9)
            {
              v33 = v10 - v9 - 8;
              if (v33 < 0x168
                || (v37 = (v10 - 8 - v9) & 0xFFFFFFFFFFFFFFF8, &v30[v10 - v9 - 8 - v37] > &v30[v10 - v9 - 8])
                || &v10[-v37 - 8] > v10 - 8
                || (unint64_t)(v9 - v30) < 0x20)
              {
                v34 = v10;
                v4 = v100;
              }
              else
              {
                v38 = (v33 >> 3) + 1;
                v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
                v34 = &v10[-v39];
                v31 -= v39;
                v40 = &v30[8 * v27 - 16];
                v41 = v10 - 16;
                v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v43 = *(_OWORD *)v41;
                  *(v40 - 1) = *((_OWORD *)v41 - 1);
                  *v40 = v43;
                  v40 -= 2;
                  v41 -= 32;
                  v42 -= 4;
                }
                while (v42);
                v4 = v100;
                if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_53:
                  v11 = &v30[8 * v29];
                  if (v9)
                    goto LABEL_54;
                  goto LABEL_55;
                }
              }
              do
              {
                v35 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v31 - 1) = v35;
                v31 -= 8;
              }
              while (v34 != v9);
              goto LABEL_53;
            }
            v4 = v100;
            v11 = &v30[8 * v29];
            if (v9)
LABEL_54:
              operator delete(v9);
LABEL_55:
            v9 = v31;
            v10 = v32;
LABEL_56:
            swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), &v101);
            v36 = v101;
            if (v101)
            {
              v20 = *((_QWORD *)v101 + 1);
              v101 = 0;
              v115[0] = v36;
              if (!v104)
                goto LABEL_142;
              (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v104 + 48))(v104, v115);
            }
            else
            {
              v20 = 0;
              v101 = 0;
            }
            v25 = v104;
            if (v104 != &v102)
            {
              if (v104)
              {
                v26 = 5;
LABEL_35:
                (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
              }
              if (!v20)
                goto LABEL_29;
              continue;
            }
            break;
          }
          v25 = &v102;
          v26 = 4;
          goto LABEL_35;
        }
      }
      else
      {
        if (v18 != 1)
          goto LABEL_29;
        swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), &v101);
        v19 = v101;
        if (v101)
        {
          v20 = *((_QWORD *)v101 + 2);
          v101 = 0;
          v115[0] = v19;
          if (!v104)
            goto LABEL_142;
          (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v104 + 48))(v104, v115);
        }
        else
        {
          v20 = 0;
          v101 = 0;
        }
        v22 = v104;
        if (v104 == &v102)
        {
LABEL_27:
          v22 = &v102;
          v23 = 4;
          goto LABEL_28;
        }
        if (v104)
          goto LABEL_26;
      }
      if (v20)
        goto LABEL_37;
LABEL_29:
      v24 = *(char **)v105;
      v13 = *(_QWORD *)(*(_QWORD *)v105 + 8);
      *(_QWORD *)v105 = 0;
      v101 = v24;
      if (!(_QWORD)v107)
      {
LABEL_142:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_143:
        abort();
      }
      (*(void (**)(_QWORD, char **))(*(_QWORD *)v107 + 48))(v107, &v101);
      v17 = v97;
LABEL_31:
      v15 = (_QWORD *)v107;
      if ((_BYTE *)v107 == &v105[8])
      {
        v14 = v17;
        v15 = &v105[8];
        v16 = 4;
      }
      else
      {
        if (!(_QWORD)v107)
          goto LABEL_5;
        v14 = v17;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
      v17 = v14;
LABEL_5:
      ++v12;
      if (!v17)
        break;
    }
    if (!v94)
    {
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = *(_QWORD *)(v112 + 64);
      v98 = 0;
      while (1)
      {
        if (!v47 || v46 == a3)
          goto LABEL_122;
        swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(*(_QWORD *)(v4 + 2488), v105);
        v50 = *(char **)v105;
        if (!*(_QWORD *)v105)
        {
          *(_QWORD *)v105 = 0;
          goto LABEL_104;
        }
        v51 = *(_QWORD *)(v4 + 2504) & *(_QWORD *)(*(_QWORD *)v105 + 8);
        if (v44 >= v98)
          break;
        *(_QWORD *)v44 = v51;
        v44 += 8;
        v52 = v50;
LABEL_102:
        v63 = *(_QWORD *)v52;
        v64 = *(_QWORD *)(v4 + 2504);
        *(_QWORD *)v105 = 0;
        v101 = v52;
        if (!(_QWORD)v107)
          goto LABEL_142;
        v47 = v64 & v63;
        (*(void (**)(_QWORD, char **))(*(_QWORD *)v107 + 48))(v107, &v101);
LABEL_104:
        v48 = (_QWORD *)v107;
        if ((_BYTE *)v107 == &v105[8])
        {
          v48 = &v105[8];
          v49 = 4;
        }
        else
        {
          if (!(_QWORD)v107)
            goto LABEL_76;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_76:
        ++v46;
        if (!v50)
          goto LABEL_122;
      }
      v53 = (v44 - v45) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        goto LABEL_143;
      if ((v98 - v45) >> 2 > v54)
        v54 = (v98 - v45) >> 2;
      v55 = 0x1FFFFFFFFFFFFFFFLL;
      if ((unint64_t)(v98 - v45) < 0x7FFFFFFFFFFFFFF8)
        v55 = v54;
      v99 = v55;
      if (v55)
      {
        if (v55 >> 61)
          goto LABEL_144;
        v56 = operator new(8 * v55);
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[8 * v53];
      *(_QWORD *)v57 = v51;
      v58 = v57 + 8;
      if (v44 == v45)
      {
        v44 = v57 + 8;
        v61 = v99;
        goto LABEL_98;
      }
      v59 = v44 - v45 - 8;
      if (v59 < 0x168
        || (v65 = (v44 - 8 - v45) & 0xFFFFFFFFFFFFFFF8, &v56[v44 - v45 - 8 - v65] > &v56[v44 - v45 - 8])
        || &v44[-v65 - 8] > v44 - 8
        || (unint64_t)(v45 - v56) < 0x20)
      {
        v60 = v44;
        v44 = v57 + 8;
        v61 = v99;
      }
      else
      {
        v66 = (v59 >> 3) + 1;
        v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
        v60 = &v44[-v67];
        v57 -= v67;
        v68 = &v56[8 * v53 - 16];
        v69 = v44 - 16;
        v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 4;
        }
        while (v70);
        v44 = v58;
        v61 = v99;
        if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_98:
          v98 = &v56[8 * v61];
          if (v45)
          {
            operator delete(v45);
            v52 = *(char **)v105;
          }
          else
          {
            v52 = v50;
          }
          v45 = v57;
          v4 = v100;
          goto LABEL_102;
        }
      }
      do
      {
        v62 = *((_QWORD *)v60 - 1);
        v60 -= 8;
        *((_QWORD *)v57 - 1) = v62;
        v57 -= 8;
      }
      while (v60 != v45);
      goto LABEL_98;
    }
    v45 = 0;
    v44 = 0;
LABEL_122:
    v93->__r_.__value_.__s.__data_[0] = 0;
    v93[1].__r_.__value_.__s.__data_[0] = 0;
    LODWORD(v93[1].__r_.__value_.__r.__words[1]) = v83;
    HIDWORD(v93[1].__r_.__value_.__r.__words[1]) = v85;
    v93[1].__r_.__value_.__r.__words[2] = vmovn_s16(v84).u32[0];
    v93[2].__r_.__value_.__s.__data_[0] = v86;
    v93[2].__r_.__value_.__s.__data_[1] = v87;
    v93[2].__r_.__value_.__s.__data_[2] = v88;
    v93[2].__r_.__value_.__s.__data_[3] = 1;
    v93[2].__r_.__value_.__s.__data_[4] = v94;
    v93[2].__r_.__value_.__s.__data_[5] = v90;
    v93[2].__r_.__value_.__s.__data_[6] = 0;
    LODWORD(v93[2].__r_.__value_.__r.__words[1]) = 0;
    v93[2].__r_.__value_.__r.__words[2] = v91;
    v93[3].__r_.__value_.__r.__words[0] = v89;
    v93[3].__r_.__value_.__l.__size_ = v92;
    v93[3].__r_.__value_.__r.__words[2] = 0;
    v93[4].__r_.__value_.__r.__words[0] = 0;
    v93[4].__r_.__value_.__l.__size_ = 0;
    v74 = v10 - v9;
    if (v74)
    {
      if (v74 < 0)
        goto LABEL_143;
      v75 = (char *)operator new(v74);
      v93[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v75;
      v93[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      v76 = &v75[8 * (v74 >> 3)];
      v93[4].__r_.__value_.__l.__size_ = (std::string::size_type)v76;
      memcpy(v75, v9, v74);
      v93[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    }
    v93[4].__r_.__value_.__r.__words[2] = 0;
    v93[5].__r_.__value_.__r.__words[0] = 0;
    v93[5].__r_.__value_.__l.__size_ = 0;
    v77 = v44 - v45;
    if (v44 != v45)
    {
      if (v77 < 0)
        goto LABEL_143;
      v78 = (char *)operator new(v44 - v45);
      v93[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v78;
      v93[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
      v79 = &v78[8 * (v77 >> 3)];
      v93[5].__r_.__value_.__l.__size_ = (std::string::size_type)v79;
      memcpy(v78, v45, v44 - v45);
      v93[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
    }
    if (v45)
      operator delete(v45);
    if (v9)
    {
      v73 = v9;
      goto LABEL_132;
    }
  }
  else
  {
    v72 = (char *)operator new(0x20uLL);
    strcpy(v72, "failure reading async task");
    v101 = v72;
    v102 = xmmword_B0F20;
    v103 = 1;
    v106 = 0;
    memset(v105, 0, sizeof(v105));
    v107 = 0u;
    *(_OWORD *)v108 = 0u;
    v109 = 0u;
    *(_OWORD *)__p = 0u;
    v111 = 0;
    std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(a4, (__int128 *)&v101, (__int128 *)v105);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v108[1])
    {
      *(void **)&v109 = v108[1];
      operator delete(v108[1]);
    }
    if (v103 && SHIBYTE(v102) < 0)
    {
      v73 = v101;
LABEL_132:
      operator delete(v73);
    }
  }
  v80 = v112;
  v112 = 0;
  if (v80)
  {
    *(_QWORD *)v105 = v80;
    if (!v114)
      goto LABEL_142;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v114 + 48))(v114, v105);
  }
  result = v114;
  if (v114 == v113)
  {
    v82 = 4;
    result = v113;
  }
  else
  {
    if (!v114)
      return result;
    v82 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v82))();
}

uint64_t swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::getRunJob<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE *v20;
  _QWORD *v21;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 2504) & *(_QWORD *)(a2 + 56);
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(a1);
  v5 = *(_QWORD *)(v3 + 2616);
  if (v5)
    v6 = v4 == v5;
  else
    v6 = 0;
  if (v6)
  {
    (*(void (**)(_QWORD **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 2488) + 24))(&v18, *(_QWORD *)(v3 + 2488), *(_QWORD *)(a2 + 64) - 24, 24);
    v11 = v18;
    if (v18)
    {
      v12 = *v18;
      goto LABEL_18;
    }
LABEL_20:
    v18 = 0;
LABEL_21:
    v14 = v20;
    if (v20 == v19)
    {
      v15 = 4;
      v14 = v19;
    }
    else
    {
      if (!v20)
        goto LABEL_26;
      v15 = 5;
    }
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_26:
    if (v11)
      return v3;
    return v4;
  }
  v7 = *(_QWORD *)(v3 + 2624);
  if (v7)
    v8 = v4 == v7;
  else
    v8 = 0;
  if (!v8)
  {
    v9 = *(_QWORD *)(v3 + 2632);
    if (!v9 || v4 != v9)
    {
      v10 = *(_QWORD *)(v3 + 2640);
      if (!v10 || v4 != v10)
        return v4;
    }
  }
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v3 + 2488) + 24))(&v18);
  v11 = v18;
  if (!v18)
    goto LABEL_20;
  v12 = v18[1];
LABEL_18:
  v13 = *(_QWORD *)(v3 + 2504);
  v18 = 0;
  v21 = v11;
  if (v20)
  {
    v3 = v13 & v12;
    (*(void (**)(_BYTE *, _QWORD **))(*(_QWORD *)v20 + 48))(v20, &v21);
    goto LABEL_21;
  }
  v17 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v17);
}

_QWORD *swift::remote::MemoryReader::readObj<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  std::string *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v16);
  v3 = v17;
  if (!v18)
  {
    v5 = v16;
    v16 = 0;
    *a2 = v5;
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v18 == v17)
  {
    v15 = v14;
    (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v14);
    v4 = v15;
  }
  else
  {
    v4 = (_QWORD *)(*(uint64_t (**)(void))(*v18 + 16))();
    v15 = v4;
  }
  v6 = v16;
  v16 = 0;
  *a2 = v6;
  v7 = a2 + 1;
  if (!v4)
  {
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v4 == v14)
  {
    a2[4] = v7;
    (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
  }
  else
  {
    a2[4] = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v7);
  }
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v16;
  result = v18;
  v16 = 0;
  if (v10)
  {
    v14[0] = v10;
    if (!v18)
    {
      v13 = (std::string *)std::__throw_bad_function_call[abi:nn180100]();
      return (_QWORD *)std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(v13);
    }
    (*(void (**)(void))(*v18 + 48))();
    result = v18;
  }
  if (result == v17)
  {
    v12 = 4;
  }
  else
  {
    if (!result)
      return result;
    v12 = 5;
    v3 = result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v12))(v3);
}

std::string *std::pair<std::optional<std::string>,swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::AsyncTaskInfo>::pair[abi:nn180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  void *v12;
  std::string::size_type v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  void *v17;
  std::string::size_type v18;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v5 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  v6 = *a3;
  v7 = a3[2];
  v8 = *((_QWORD *)a3 + 6);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a3[1];
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v7;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  this[3].__r_.__value_.__l.__size_ = v8;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  v10 = (_BYTE *)*((_QWORD *)a3 + 7);
  v9 = (_BYTE *)*((_QWORD *)a3 + 8);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      goto LABEL_13;
    v12 = operator new(v9 - v10);
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
    this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    v13 = (std::string::size_type)v12 + 8 * (v11 >> 3);
    this[4].__r_.__value_.__l.__size_ = v13;
    memcpy(v12, v10, v11);
    this[4].__r_.__value_.__r.__words[0] = v13;
  }
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  v15 = (_BYTE *)*((_QWORD *)a3 + 10);
  v14 = (_BYTE *)*((_QWORD *)a3 + 11);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v17 = operator new(v14 - v15);
      this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
      this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v18 = (std::string::size_type)v17 + 8 * (v16 >> 3);
      this[5].__r_.__value_.__l.__size_ = v18;
      memcpy(v17, v15, v16);
      this[5].__r_.__value_.__r.__words[0] = v18;
      return this;
    }
LABEL_13:
    abort();
  }
  return this;
}

_QWORD *swift::remote::MemoryReader::readObj<swift::reflection::TaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v16);
  v3 = v17;
  if (!v18)
  {
    v5 = v16;
    v16 = 0;
    *a2 = v5;
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v18 == v17)
  {
    v15 = v14;
    (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v14);
    v4 = v15;
  }
  else
  {
    v4 = (_QWORD *)(*(uint64_t (**)(void))(*v18 + 16))();
    v15 = v4;
  }
  v6 = v16;
  v16 = 0;
  *a2 = v6;
  v7 = a2 + 1;
  if (!v4)
  {
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v4 == v14)
  {
    a2[4] = v7;
    (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
  }
  else
  {
    a2[4] = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v7);
  }
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v16;
  result = v18;
  v16 = 0;
  if (v10)
  {
    v14[0] = v10;
    if (!v18)
    {
      v13 = std::__throw_bad_function_call[abi:nn180100]();
      return (_QWORD *)swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>(v13);
    }
    (*(void (**)(void))(*v18 + 48))();
    result = v18;
  }
  if (result == v17)
  {
    v12 = 4;
  }
  else
  {
    if (!result)
      return result;
    v12 = 5;
    v3 = result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v12))(v3);
}

_QWORD *swift::remote::MemoryReader::readObj<swift::reflection::ChildTaskStatusRecord<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v16);
  v3 = v17;
  if (!v18)
  {
    v5 = v16;
    v16 = 0;
    *a2 = v5;
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v18 == v17)
  {
    v15 = v14;
    (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v14);
    v4 = v15;
  }
  else
  {
    v4 = (_QWORD *)(*(uint64_t (**)(void))(*v18 + 16))();
    v15 = v4;
  }
  v6 = v16;
  v16 = 0;
  *a2 = v6;
  v7 = a2 + 1;
  if (!v4)
  {
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v4 == v14)
  {
    a2[4] = v7;
    (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
  }
  else
  {
    a2[4] = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v7);
  }
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v16;
  result = v18;
  v16 = 0;
  if (v10)
  {
    v14[0] = v10;
    if (!v18)
    {
      v13 = std::__throw_bad_function_call[abi:nn180100]();
      return (_QWORD *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_allocations_return SwiftReflectionContext::withContext<swift_async_task_slab_allocations_return,swift_reflection_asyncTaskSlabAllocations::$_0>(swift_reflection_asyncTaskSlabAllocations::$_0 const&)::{lambda(swift_async_task_slab_allocations_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v13);
    }
    (*(void (**)(void))(*v18 + 48))();
    result = v18;
  }
  if (result == v17)
  {
    v12 = 4;
  }
  else
  {
    if (!result)
      return result;
    v12 = 5;
    v3 = result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v12))(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_allocations_return SwiftReflectionContext::withContext<swift_async_task_slab_allocations_return,swift_reflection_asyncTaskSlabAllocations::$_0>(swift_reflection_asyncTaskSlabAllocations::$_0 const&)::{lambda(swift_async_task_slab_allocations_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  void *__p;

  v2 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskSlabAllocations(*a2, **v2, (uint64_t)&__p);
  v3 = *(_QWORD *)(*v2[1] + 88);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    operator new();
  }
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_allocations_return SwiftReflectionContext::withContext<swift_async_task_slab_allocations_return,swift_reflection_asyncTaskSlabAllocations::$_0>(swift_reflection_asyncTaskSlabAllocations::$_0 const&)::{lambda(swift_async_task_slab_allocations_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v4);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_slab_allocations_return SwiftReflectionContext::withContext<swift_async_task_slab_allocations_return,swift_reflection_asyncTaskSlabAllocations::$_0>(swift_reflection_asyncTaskSlabAllocations::$_0 const&)::{lambda(swift_async_task_slab_allocations_return&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t ****a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;

  v2 = **a1;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskSlabAllocations(*a2, **v2, (uint64_t)&__p);
  v3 = *(_QWORD *)(*v2[1] + 88);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    operator new();
  }
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskSlabAllocations(v4, v5, v6);
}

_QWORD *swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskSlabAllocations@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 2488) + 24))(&v17);
  if (v17)
  {
    v5 = a2 + 32;
    v6 = a2 + 8;
    v7 = *(_DWORD *)(v17 + 20);
    v8 = *(unsigned int *)(v17 + 16) + 32;
    v9 = *(_QWORD *)(v17 + 8);
    v10 = operator new(0x20uLL);
    *v10 = v6;
    v10[1] = 0x200000008;
    v10[2] = v5;
    *((_DWORD *)v10 + 6) = v7;
    *((_DWORD *)v10 + 7) = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = v9;
    *(_QWORD *)(a3 + 40) = v8;
    v11 = operator new(0x20uLL);
    *(_QWORD *)(a3 + 56) = v11 + 2;
    *(_QWORD *)(a3 + 64) = v11 + 2;
    v12 = *((_OWORD *)v10 + 1);
    *v11 = *(_OWORD *)v10;
    v11[1] = v12;
    *(_QWORD *)(a3 + 48) = v11;
    operator delete(v10);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      v20 = v13;
      if (!v19)
      {
        v16 = std::__throw_bad_function_call[abi:nn180100]();
        return (_QWORD *)std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::~__func(v16);
      }
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v20);
    }
  }
  else
  {
    strcpy((char *)a3, "failure reading slab");
    *(_WORD *)(a3 + 23) = 276;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_QWORD *)(a3 + 64) = 0;
    v17 = 0;
  }
  result = v19;
  if (v19 == v18)
  {
    v15 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v15))(result);
}

void std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B5158;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B5158;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1},std::allocator<std::vector<swift_async_task_allocation_chunk> * SwiftReflectionContext::allocateTemporaryObject<std::vector<swift_async_task_allocation_chunk>>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_info SwiftReflectionContext::withContext<swift_async_task_info,swift_reflection_asyncTaskInfo::$_0>(swift_reflection_asyncTaskInfo::$_0 const&)::{lambda(swift_async_task_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::string v10;
  char v11;
  void *v12;
  void *v13;
  void *__p;
  void *v15;
  std::string v16;
  uint64_t v17;

  v4 = **a1;
  v5 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (*(_BYTE *)(v5 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v10);
    if (v11)
    {
LABEL_3:
      v6 = **(_QWORD **)(v4 + 8);
      v16.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v17) = 0;
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v16, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
      else
        v16 = v10;
      LOBYTE(v17) = 1;
      v8 = returnableCString(v6, (uint64_t)&v16);
      if ((_BYTE)v17 && SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      *(_QWORD *)a3 = v8;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_OWORD *)(a3 + 72) = 0u;
      *(_QWORD *)(a3 + 88) = 0;
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        v13 = v12;
        operator delete(v12);
      }
      if (v11)
      {
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
      }
      return;
    }
  }
  else
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v10);
    if (v11)
      goto LABEL_3;
  }
  v7 = *(_QWORD *)(**(_QWORD **)(v4 + 8) + 88);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    operator new();
  }
  v9 = std::__throw_bad_function_call[abi:nn180100]();
  std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_info SwiftReflectionContext::withContext<swift_async_task_info,swift_reflection_asyncTaskInfo::$_0>(swift_reflection_asyncTaskInfo::$_0 const&)::{lambda(swift_async_task_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v9);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_async_task_info SwiftReflectionContext::withContext<swift_async_task_info,swift_reflection_asyncTaskInfo::$_0>(swift_reflection_asyncTaskInfo::$_0 const&)::{lambda(swift_async_task_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::string v9;
  char v10;
  void *v11;
  void *v12;
  void *__p;
  void *v14;
  std::string v15;
  uint64_t v16;

  v4 = **a1;
  v5 = *a2;
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::loadTargetPointers(*a2);
  if (*(_BYTE *)(v5 + 2648))
  {
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v9);
    if (v10)
      goto LABEL_3;
LABEL_6:
    v7 = *(_QWORD *)(**(_QWORD **)(v4 + 8) + 88);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      operator new();
    }
    std::__throw_bad_function_call[abi:nn180100]();
    SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>();
  }
  swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::asyncTaskInfo<swift::reflection::AsyncTask<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveTaskStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, 1000000, 1000, &v9);
  if (!v10)
    goto LABEL_6;
LABEL_3:
  v6 = **(_QWORD **)(v4 + 8);
  v15.__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v16) = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v15 = v9;
  LOBYTE(v16) = 1;
  v8 = returnableCString(v6, (uint64_t)&v15);
  if ((_BYTE)v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  *(_QWORD *)a3 = v8;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v10)
  {
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>()
{
  operator new();
}

void std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_B51B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_B51B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      abort();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

_QWORD *std::function<void ()(void)>::operator=<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t *v14;
  _QWORD v15[3];
  _QWORD *v16;

  v3 = *a2;
  v12 = *a2;
  v4 = v13;
  v5 = (uint64_t *)a2[4];
  if (v5)
  {
    if (v5 == a2 + 1)
    {
      v14 = v13;
      (*(void (**)(uint64_t *, _QWORD *))(*v5 + 24))(v5, v13);
      v3 = v12;
      v5 = v14;
    }
    else
    {
      v14 = (uint64_t *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v14 = 0;
  }
  v6 = operator new(0x30uLL);
  v7 = v6;
  *v6 = off_B51F8;
  v6[1] = v3;
  if (v5)
  {
    if (v5 == v13)
    {
      v6[5] = v6 + 2;
      (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
    }
    else
    {
      v6[5] = v5;
      v14 = 0;
    }
  }
  else
  {
    v6[5] = 0;
  }
  v16 = v7;
  std::__function::__value_func<void ()(void)>::swap[abi:nn180100](v15, a1);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  if (v14 == v13)
  {
    v10 = 4;
    goto LABEL_20;
  }
  if (v14)
  {
    v10 = 5;
    v4 = v14;
LABEL_20:
    (*(void (**)(uint64_t *))(*v4 + 8 * v10))(v4);
  }
  return a1;
}

_QWORD *std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_B51F8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_B51F8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_QWORD *std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_B51F8;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    v2[5] = 0;
  }
  return v2;
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = off_B51F8;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1},std::allocator<std::vector<unsigned long long> * SwiftReflectionContext::allocateSubsequentTemporaryObject<std::vector<unsigned long long>>(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_actor_info SwiftReflectionContext::withContext<swift_actor_info,swift_reflection_actorInfo::$_0>(swift_reflection_actorInfo::$_0 const&)::{lambda(swift_actor_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v5);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_actor_info SwiftReflectionContext::withContext<swift_actor_info,swift_reflection_actorInfo::$_0>(swift_reflection_actorInfo::$_0 const&)::{lambda(swift_actor_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint8x8_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int16x8_t v12;
  std::string __p;
  char v14;
  std::string v15;
  char v16;
  uint64_t v17;
  __int32 v18;
  char v19;
  int v20;

  v4 = **a1;
  v5 = *a2;
  if (*(_BYTE *)(*a2 + 2648))
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  else
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  v6 = **(_QWORD **)(v4 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v14 = 0;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      __p = v15;
    v14 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v17;
  v10 = v19;
  v11 = v20;
  *(_QWORD *)a3 = v7;
  v8.i32[0] = v18;
  v12 = (int16x8_t)vmovl_u8(v8);
  *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, vrev32_s16(*(int16x4_t *)v12.i8));
  *(_QWORD *)(a3 + 8) = vmovn_s16(v12).u32[0];
  *(_QWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 24) = v10;
  *(_WORD *)(a3 + 25) = 0;
  *(_BYTE *)(a3 + 27) = 0;
  *(_DWORD *)(a3 + 28) = v11;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<swift_actor_info SwiftReflectionContext::withContext<swift_actor_info,swift_reflection_actorInfo::$_0>(swift_reflection_actorInfo::$_0 const&)::{lambda(swift_actor_info&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint8x8_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int16x8_t v12;
  std::string __p;
  char v14;
  std::string v15;
  char v16;
  uint64_t v17;
  __int32 v18;
  char v19;
  int v20;

  v4 = **a1;
  v5 = *a2;
  if (*(_BYTE *)(*a2 + 2648))
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  else
    swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v5, (uint64_t)&v15);
  v6 = **(_QWORD **)(v4 + 8);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v14 = 0;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      __p = v15;
    v14 = 1;
  }
  v7 = returnableCString(v6, (uint64_t)&__p);
  if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v17;
  v10 = v19;
  v11 = v20;
  *(_QWORD *)a3 = v7;
  v8.i32[0] = v18;
  v12 = (int16x8_t)vmovl_u8(v8);
  *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, vrev32_s16(*(int16x4_t *)v12.i8));
  *(_QWORD *)(a3 + 8) = vmovn_s16(v12).u32[0];
  *(_QWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 24) = v10;
  *(_WORD *)(a3 + 25) = 0;
  *(_BYTE *)(a3 + 27) = 0;
  *(_DWORD *)(a3 + 28) = v11;
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

_QWORD *swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  char v6;
  char v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(_QWORD *)(a1 + 2488), &v15);
  v3 = v15;
  if (v15)
  {
    v4 = *(_DWORD *)(v15 + 80);
    v5 = (v4 >> 4) & 1;
    v6 = *(_BYTE *)(v15 + 96);
    v7 = v4 & 7;
    if ((v4 & 7) != 0)
      v8 = *(_QWORD *)(v15 + 88) & 0xFFFFFFFFFFFFFFFCLL;
    else
      v8 = 0;
    v9 = *(_DWORD *)(v15 + 84);
    v10 = v4 >> 8;
    *(_BYTE *)a2 = 0;
    if (v9 >= 4)
      v11 = v9 | 3;
    else
      v11 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v8;
    *(_BYTE *)(a2 + 40) = v7;
    *(_BYTE *)(a2 + 41) = v5;
    *(_BYTE *)(a2 + 42) = v6;
    *(_BYTE *)(a2 + 43) = v10;
    *(_BYTE *)(a2 + 44) = 1;
    *(_WORD *)(a2 + 45) = 0;
    *(_BYTE *)(a2 + 47) = 0;
    *(_DWORD *)(a2 + 48) = v11;
    *(_DWORD *)(a2 + 52) = 0;
    v15 = 0;
    v18 = v3;
    if (!v17)
    {
      v14 = std::__throw_bad_function_call[abi:nn180100]();
      return (_QWORD *)swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v14);
    }
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v18);
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    strcpy((char *)a2, "failure reading actor");
    *(_BYTE *)(a2 + 22) = 0;
    *(_WORD *)(a2 + 23) = 277;
    v15 = 0;
  }
  result = v17;
  if (v17 == v16)
  {
    v13 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v13))(result);
}

_QWORD *swift::reflection::ReflectionContext<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>::actorInfo<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithoutEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(*(_QWORD *)(a1 + 2488), &v11);
  v3 = v11;
  if (v11)
  {
    v4 = *(_DWORD *)(v11 + 80);
    v5 = *(_BYTE *)(v11 + 96);
    if ((v4 & 7) != 0)
      v6 = *(_QWORD *)(v11 + 88) & 0xFFFFFFFFFFFFFFFCLL;
    else
      v6 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 40) = v4 & 7;
    *(_BYTE *)(a2 + 41) = (v4 & 0x10) != 0;
    *(_BYTE *)(a2 + 42) = v5;
    *(_BYTE *)(a2 + 43) = BYTE1(v4);
    *(_QWORD *)(a2 + 44) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    v11 = 0;
    v14 = v3;
    if (!v13)
    {
      v9 = std::__throw_bad_function_call[abi:nn180100]();
      return swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>(v9, v10);
    }
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v14);
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    strcpy((char *)a2, "failure reading actor");
    *(_BYTE *)(a2 + 22) = 0;
    *(_WORD *)(a2 + 23) = 277;
    v11 = 0;
  }
  result = v13;
  if (v13 == v12)
  {
    v8 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v8))(result);
}

_QWORD *swift::remote::MemoryReader::readObj<swift::reflection::DefaultActorImpl<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>,swift::reflection::ActiveActorStatusWithEscalation<swift::External<swift::WithObjCInterop<swift::RuntimeTarget<8u>>>>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v16);
  v3 = v17;
  if (!v18)
  {
    v5 = v16;
    v16 = 0;
    *a2 = v5;
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v18 == v17)
  {
    v15 = v14;
    (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v14);
    v4 = v15;
  }
  else
  {
    v4 = (_QWORD *)(*(uint64_t (**)(void))(*v18 + 16))();
    v15 = v4;
  }
  v6 = v16;
  v16 = 0;
  *a2 = v6;
  v7 = a2 + 1;
  if (!v4)
  {
    a2[4] = 0;
    goto LABEL_16;
  }
  if (v4 == v14)
  {
    a2[4] = v7;
    (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
  }
  else
  {
    a2[4] = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v7);
  }
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v16;
  result = v18;
  v16 = 0;
  if (v10)
  {
    v14[0] = v10;
    if (!v18)
    {
      v13 = std::__throw_bad_function_call[abi:nn180100]();
      return (_QWORD *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_nextJob::$_0>(swift_reflection_nextJob::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v13);
    }
    (*(void (**)(void))(*v18 + 48))();
    result = v18;
  }
  if (result == v17)
  {
    v12 = 4;
  }
  else
  {
    if (!result)
      return result;
    v12 = 5;
    v3 = result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v12))(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_nextJob::$_0>(swift_reflection_nextJob::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_QWORD ****a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a2 + 2488) + 24))(&v9, *(_QWORD *)(*(_QWORD *)a2 + 2488), ****a1, 64);
  v2 = v9;
  if (!v9)
  {
    v4 = 0;
    v9 = 0;
LABEL_5:
    v5 = v11;
    if (v11 == v10)
    {
      v6 = 4;
      v5 = v10;
    }
    else
    {
      if (!v11)
        return v4;
      v6 = 5;
    }
    (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
    return v4;
  }
  v3 = *(_QWORD *)(v9 + 16);
  v9 = 0;
  v12 = v2;
  if (v11)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v12);
    goto LABEL_5;
  }
  v8 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_nextJob::$_0>(swift_reflection_nextJob::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(v8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long long SwiftReflectionContext::withContext<unsigned long long,swift_reflection_nextJob::$_0>(swift_reflection_nextJob::$_0 const&)::{lambda(unsigned long long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>(_QWORD ****a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  swift::Demangle::__runtime::Context *v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a2 + 2488) + 24))(&v9, *(_QWORD *)(*(_QWORD *)a2 + 2488), ****a1, 64);
  v2 = v9;
  if (!v9)
  {
    v4 = 0;
    v9 = 0;
LABEL_5:
    v5 = v11;
    if (v11 == v10)
    {
      v6 = 4;
      v5 = v10;
    }
    else
    {
      if (!v11)
        return v4;
      v6 = 5;
    }
    (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
    return v4;
  }
  v3 = *(_QWORD *)(v9 + 16);
  v9 = 0;
  v12 = v2;
  if (v11)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v12);
    goto LABEL_5;
  }
  v8 = (swift::Demangle::__runtime::Context *)std::__throw_bad_function_call[abi:nn180100]();
  return swift::Demangle::__runtime::Context::Context(v8);
}

void swift::Demangle::__runtime::Context::Context(swift::Demangle::__runtime::Context *this)
{
  operator new();
}

{
  operator new();
}

void swift::Demangle::__runtime::Context::~Context(swift::Demangle::__runtime::Context *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t swift::Demangle::__runtime::Context::clear(swift::Demangle::__runtime::Context *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
}

unsigned int *swift::Demangle::__runtime::Context::demangleSymbolAsNode(swift::Demangle::__runtime::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength;
  swift::Demangle::__runtime::NodeFactory *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;

  ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  v7 = *a1;
  if (!ManglingPrefixLength)
    return swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v7);
  v13 = 0;
  v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v12);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_7;
  }
  if (v13)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return (unsigned int *)v8;
}

unint64_t swift::Demangle::__runtime::Context::demangleTypeAsNode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;

  v3 = *a1;
  v9 = 0;
  v4 = swift::Demangle::__runtime::Demangler::demangleType(v3, a2, a3, v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v4;
}

void swift::Demangle::__runtime::Context::demangleSymbolAsString(swift::Demangle::__runtime::NodeFactory **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int ManglingPrefixLength;
  swift::Demangle::__runtime::NodeFactory *v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *__p[2];
  uint64_t v24;
  void **v25;

  ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  v11 = *a1;
  if (!ManglingPrefixLength)
  {
    v12 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v11);
    goto LABEL_6;
  }
  v25 = 0;
  v12 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v11, a2, a3, __p);
  v13 = v25;
  if (v25 != __p)
  {
    if (v25)
    {
      v14 = 5;
      goto LABEL_12;
    }
LABEL_6:
    if (!v12)
      goto LABEL_13;
    goto LABEL_7;
  }
  v14 = 4;
  v13 = __p;
LABEL_12:
  (*((void (**)(void))*v13 + v14))();
  if (!v12)
  {
LABEL_13:
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v17 = a3 | 7;
        v18 = v17 + 1;
        v19 = operator new(v17 + 1);
        a5[1] = a3;
        a5[2] = v18 | 0x8000000000000000;
        *a5 = v19;
        a5 = v19;
      }
      else
      {
        *((_BYTE *)a5 + 23) = a3;
        if (!a3)
          goto LABEL_28;
      }
      memmove(a5, a2, a3);
LABEL_28:
      *((_BYTE *)a5 + a3) = 0;
      return;
    }
LABEL_38:
    abort();
  }
LABEL_7:
  swift::Demangle::__runtime::nodeToString(__p, v12, a4);
  v15 = (void *)HIBYTE(v24);
  v16 = HIBYTE(v24);
  if (v24 < 0)
    v15 = __p[1];
  if (v15)
  {
    *(_OWORD *)a5 = *(_OWORD *)__p;
    a5[2] = v24;
    return;
  }
  if (a2)
  {
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_38;
    if (a3 >= 0x17)
    {
      v20 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v20 = a3 | 7;
      v21 = v20 + 1;
      v22 = operator new(v20 + 1);
      a5[1] = a3;
      a5[2] = v21 | 0x8000000000000000;
      *a5 = v22;
      a5 = v22;
    }
    else
    {
      *((_BYTE *)a5 + 23) = a3;
      if (!a3)
      {
LABEL_35:
        *((_BYTE *)a5 + a3) = 0;
        if ((v24 & 0x8000000000000000) == 0)
          return;
        goto LABEL_36;
      }
    }
    memmove(a5, a2, a3);
    goto LABEL_35;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v16 & 0x80) == 0)
    return;
LABEL_36:
  operator delete(__p[0]);
}

void swift::Demangle::__runtime::Context::demangleTypeAsString(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  swift::Demangle::__runtime::Node *v10;
  std::string *p_p;
  uint64_t v12;
  std::string::size_type size;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::string __p;
  std::string *v22;

  v9 = *a1;
  v22 = 0;
  v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType(v9, (uint64_t)a2, a3, &__p);
  p_p = v22;
  if (v22 == &__p)
  {
    v12 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v12))();
LABEL_6:
  if (!v10)
  {
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_36;
    if (a3 >= 0x17)
    {
      v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v15 = a3 | 7;
      v16 = v15 + 1;
      v17 = operator new(v15 + 1);
      a5[1] = a3;
      a5[2] = v16 | 0x8000000000000000;
      *a5 = v17;
      a5 = v17;
    }
    else
    {
      *((_BYTE *)a5 + 23) = a3;
      if (!a3)
        goto LABEL_26;
    }
    memmove(a5, a2, a3);
LABEL_26:
    *((_BYTE *)a5 + a3) = 0;
    return;
  }
  swift::Demangle::__runtime::nodeToString(v10, a4, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    *(std::string *)a5 = __p;
    return;
  }
  if (a2)
  {
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v18 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v18 = a3 | 7;
        v19 = v18 + 1;
        v20 = operator new(v18 + 1);
        a5[1] = a3;
        a5[2] = v19 | 0x8000000000000000;
        *a5 = v20;
        a5 = v20;
      }
      else
      {
        *((_BYTE *)a5 + 23) = a3;
        if (!a3)
        {
LABEL_33:
          *((_BYTE *)a5 + a3) = 0;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
            return;
          goto LABEL_34;
        }
      }
      memmove(a5, a2, a3);
      goto LABEL_33;
    }
LABEL_36:
    abort();
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v14 & 0x80) == 0)
    return;
LABEL_34:
  operator delete(__p.__r_.__value_.__l.__data_);
}

BOOL swift::Demangle::__runtime::Context::isThunkSymbol(uint64_t *a1, char *a2, unint64_t a3)
{
  size_t v3;
  _BYTE *v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  _WORD *v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD v22[3];
  _QWORD *v23;

  v3 = a3;
  if (!swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3))
  {
    if (v3 < 2)
      return 0;
    if (*(_WORD *)a2 != 21599)
      return 0;
    v9 = v3 - 2;
    if (v3 - 2 < 2)
      return 0;
    v10 = a2 + 2;
    if (*((_WORD *)a2 + 1) != 28500 && *v10 != 20308)
    {
      if (v9 < 3)
        return 0;
      v11 = *v10 == 16720 && a2[4] == 95;
      if (!v11 && (v9 < 4 || *(_DWORD *)v10 != 1601126736))
        return 0;
    }
    return 1;
  }
  if (a2[v3 - 1] - 48 > 9)
  {
LABEL_10:
    if (!v3)
      return 0;
    goto LABEL_11;
  }
  if (!v3)
    return 0;
  v6 = memchr(a2, 46, v3);
  if (v6)
  {
    v7 = v3 >= v6 - a2 ? v6 - a2 : v3;
    if (v6 - a2 != -1)
    {
      v3 = v7;
      goto LABEL_10;
    }
  }
LABEL_11:
  if (a2[v3 - 1] == 95)
  {
    v8 = v3 - 1;
    if (v3 < v3 - 1)
      v8 = v3;
    if (v8)
    {
      while (a2[v8 - 1] - 48 <= 9)
      {
        if (v8 >= v8 - 1)
          --v8;
        if (!v8)
          goto LABEL_39;
      }
      if (v8 >= 2 && (*(_WORD *)&a2[v8 - 2] == 20820 || *(_WORD *)&a2[v8 - 2] == 22868))
      {
        if (v8 >= v8 - 2)
          v3 = v8 - 2;
        else
          v3 = v8;
      }
    }
  }
LABEL_39:
  if (v3 < 2)
    return 0;
  v12 = &a2[v3];
  if (*(_WORD *)&a2[v3 - 2] != 16724
    && *((_WORD *)v12 - 1) != 24916
    && *((_WORD *)v12 - 1) != 28500
    && *((_WORD *)v12 - 1) != 20308
    && *((_WORD *)v12 - 1) != 21076
    && *((_WORD *)v12 - 1) != 29268
    && *((_WORD *)v12 - 1) != 22356
    && *((_WORD *)v12 - 1) != 17254)
  {
    return 0;
  }
  v13 = *a1;
  v23 = 0;
  v14 = swift::Demangle::__runtime::Demangler::demangleSymbol(v13, a2, v3, v22);
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
    goto LABEL_52;
  }
  if (v23)
  {
    v16 = 5;
LABEL_52:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  if (v14 && *(_WORD *)(v14 + 16) == 99)
  {
    v17 = *(unsigned __int8 *)(v14 + 18);
    if ((v17 - 1) < 2)
      goto LABEL_59;
    if (v17 == 5 && *(_DWORD *)(v14 + 8))
    {
      v14 = *(_QWORD *)v14;
LABEL_59:
      v18 = *(unsigned __int16 *)(*(_QWORD *)v14 + 16);
      return (v18 - 160) <= 0x29 && ((1 << (v18 + 96)) & 0x31000000C11) != 0
          || v18 == 0;
    }
  }
  return 0;
}

void swift::Demangle::__runtime::Context::getThunkTarget(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  int v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  std::string::size_type v19;
  void **v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void **p_p;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  size_t v29;
  std::string::size_type v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *__p;
  size_t v39;
  unint64_t v40;
  std::string v41;
  const void *v42[2];

  v4 = (char *)a3;
  v42[0] = (const void *)a2;
  if (!swift::Demangle::__runtime::Context::isThunkSymbol(a1, (char *)a2, a3))
    goto LABEL_83;
  if (!swift::Demangle::__runtime::getManglingPrefixLength(a2, (unint64_t)v4))
  {
    if ((unint64_t)v4 >= 2)
      v11 = 2;
    else
      v11 = (uint64_t)v4;
    v12 = (char *)(a2 + v11);
    v13 = (unint64_t)&v4[-v11];
    if (v13 < 3)
    {
LABEL_24:
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v41, "_T");
      if (v13 >= 2)
        v15 = 2;
      else
        v15 = v13;
      if (!a2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        __p = 0;
        v39 = 0;
        v40 = 0;
LABEL_49:
        if ((v21 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = v20;
        if ((v21 & 0x80u) == 0)
          v25 = v21;
        else
          v25 = v19;
        v26 = std::string::append(&v41, (const std::string::value_type *)p_p, v25);
        v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)a4 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        *(_QWORD *)(a4 + 16) = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v40) < 0)
          operator delete(__p);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        return;
      }
      v16 = v13 - v15;
      if (v13 - v15 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v16 >= 0x17)
        {
          v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v22 = v16 | 7;
          v23 = v22 + 1;
          v17 = operator new(v22 + 1);
          v39 = v16;
          v40 = v23 | 0x8000000000000000;
          __p = v17;
        }
        else
        {
          HIBYTE(v40) = v13 - v15;
          v17 = &__p;
          if (v13 < 3)
            goto LABEL_48;
        }
        memmove(v17, &v12[v15], v16);
LABEL_48:
        *((_BYTE *)v17 + v16) = 0;
        v21 = HIBYTE(v40);
        v20 = (void **)__p;
        v19 = v39;
        goto LABEL_49;
      }
LABEL_94:
      abort();
    }
    if (*(_WORD *)v12 == 16720 && v12[2] == 95)
    {
      v28 = 3;
      v29 = v13 - 3;
      if (v13 - 3 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_94;
      if (v29 < 0x17)
      {
        *(_BYTE *)(a4 + 23) = v29;
        if (v13 < 4)
          goto LABEL_93;
        goto LABEL_92;
      }
    }
    else
    {
      if (v13 < 4 || *(_DWORD *)v12 != 1601126736)
        goto LABEL_24;
      v28 = 4;
      v29 = v13 - 4;
      if (v13 - 4 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_94;
      if (v29 < 0x17)
      {
        *(_BYTE *)(a4 + 23) = v29;
        if (v13 < 5)
          goto LABEL_93;
        goto LABEL_92;
      }
    }
    v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v35 = v29 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    *(_QWORD *)(a4 + 8) = v29;
    *(_QWORD *)(a4 + 16) = v36 | 0x8000000000000000;
    *(_QWORD *)a4 = v37;
    a4 = (uint64_t)v37;
LABEL_92:
    memmove((void *)a4, &v12[v28], v29);
LABEL_93:
    *(_BYTE *)(a4 + v29) = 0;
    return;
  }
  v7 = v4[a2 - 1];
  if ((v7 - 48) <= 9 && v4)
  {
    v8 = memchr((void *)a2, 46, (size_t)v4);
    if (!v8)
      goto LABEL_69;
    if (v4 >= &v8[-a2])
      v9 = &v8[-a2];
    else
      v9 = v4;
    if (&v8[-a2] == (_BYTE *)-1)
      v10 = v4;
    else
      v10 = v9;
    if (v10 != v4)
      goto LABEL_83;
  }
  if (!v4)
  {
LABEL_70:
    v30 = (std::string::size_type)(v4 - 2);
    if (v4 < v4 - 2)
      v30 = (std::string::size_type)v4;
    v41.__r_.__value_.__r.__words[0] = a2;
    v41.__r_.__value_.__l.__size_ = v30;
    __swift::__runtime::llvm::StringRef::str((const void **)&v41.__r_.__value_.__l.__data_, a4);
    return;
  }
  if (v4 >= v4 - 1)
    v18 = (unint64_t)(v4 - 1);
  else
    v18 = (unint64_t)v4;
  if (v18 && v7 == 95)
  {
    while (*(unsigned __int8 *)(a2 + v18 - 1) - 48 <= 9)
    {
      if (v18 >= v18 - 1)
        --v18;
      if (!v18)
        goto LABEL_69;
    }
    if (v18 >= 2 && (*(_WORD *)(a2 + v18 - 2) == 20820 || *(_WORD *)(a2 + v18 - 2) == 22868))
    {
      if (v18 >= v18 - 2)
        v4 = (char *)(v18 - 2);
      else
        v4 = (char *)v18;
    }
  }
LABEL_69:
  v42[1] = v4;
  if ((unint64_t)v4 < 2)
    goto LABEL_70;
  v31 = &v4[a2];
  if (*(_WORD *)&v4[a2 - 2] == 21076 || *((_WORD *)v31 - 1) == 29268 || *((_WORD *)v31 - 1) == 22356)
  {
LABEL_83:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  if (*((_WORD *)v31 - 1) != 17254)
    goto LABEL_70;
  __swift::__runtime::llvm::StringRef::str(v42, a4);
  v32 = *(unsigned __int8 *)(a4 + 23);
  v33 = (v32 & 0x80u) != 0;
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a4 + 8);
  if (v33)
    v34 = *(_QWORD *)a4;
  else
    v34 = a4;
  *(_BYTE *)(v32 + v34 - 1) = 99;
}

uint64_t swift::Demangle::__runtime::Context::hasSwiftCallingConvention(swift::Demangle::__runtime::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength;
  swift::Demangle::__runtime::NodeFactory *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  _QWORD v16[3];
  _QWORD *v17;

  ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  v7 = *a1;
  if (!ManglingPrefixLength)
  {
    v8 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v7);
    goto LABEL_6;
  }
  v17 = 0;
  v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v16);
  v9 = v17;
  if (v17 != v16)
  {
    if (v17)
    {
      v10 = 5;
      goto LABEL_9;
    }
LABEL_6:
    if (!v8)
      return 0;
    goto LABEL_10;
  }
  v10 = 4;
  v9 = v16;
LABEL_9:
  (*(void (**)(void))(*v9 + 8 * v10))();
  if (!v8)
    return 0;
LABEL_10:
  if (*(_WORD *)(v8 + 16) != 99)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 18);
  if ((v11 - 1) < 2)
    goto LABEL_15;
  if (v11 != 5 || !*(_DWORD *)(v8 + 8))
    return 0;
  v8 = *(_QWORD *)v8;
LABEL_15:
  result = 0;
  v13 = *(unsigned __int16 *)(*(_QWORD *)v8 + 16);
  if (v13 <= 0x86)
  {
    v15 = v13 > 0xA || ((1 << v13) & 0x640) == 0;
    if (v15 && v13 != 89)
      return 1;
  }
  else
  {
    v14 = v13 - 135 > 0x3F || ((1 << (v13 + 121)) & 0x8000000020000001) == 0;
    if (v14 && v13 != 238 && v13 != 252)
      return 1;
  }
  return result;
}

uint64_t swift::Demangle::__runtime::Context::getModuleName@<X0>(swift::Demangle::__runtime::Node **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int ManglingPrefixLength;
  swift::Demangle::__runtime::NodeFactory *v9;
  swift::Demangle::__runtime::Node *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned __int16 *v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;

  ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  v9 = *a1;
  if (!ManglingPrefixLength)
  {
    result = (uint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v9);
    v11 = result;
    goto LABEL_6;
  }
  v26 = 0;
  v11 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v9, a2, a3, v25);
  result = (uint64_t)v26;
  if (v26 != v25)
  {
    if (v26)
    {
      v13 = 5;
      goto LABEL_9;
    }
LABEL_6:
    if (v11)
      goto LABEL_15;
    goto LABEL_10;
  }
  v13 = 4;
  result = (uint64_t)v25;
LABEL_9:
  result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v13))();
  if (!v11)
  {
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  while (1)
  {
LABEL_15:
    v16 = (unsigned __int16 *)(v11 + 16);
    v15 = *(unsigned __int16 *)(v11 + 16);
    if (v15 > 0xE7)
    {
      if (v15 == 232 || v15 == 236)
        goto LABEL_12;
      goto LABEL_27;
    }
    if (v15 == 99)
    {
      v17 = *(unsigned __int8 *)(v11 + 18);
      v18 = (unint64_t *)v11;
      if ((v17 - 1) >= 2)
      {
        if (v17 == 5)
        {
          v19 = *(_QWORD *)v11;
          v18 = *(unint64_t **)v11;
          goto LABEL_35;
        }
        v18 = 0;
      }
      if (v17 == 1)
      {
        v16 = (unsigned __int16 *)(v11 + 8);
        goto LABEL_39;
      }
      if (v17 == 2)
        goto LABEL_39;
      if (v17 != 5)
      {
        v16 = 0;
LABEL_39:
        while (v18 != (unint64_t *)v16)
        {
          v11 = *v18;
          result = swift::Demangle::__runtime::isFunctionAttr(*(unsigned __int16 *)(*v18 + 16));
          if ((result & 1) == 0)
            goto LABEL_14;
          ++v18;
        }
        goto LABEL_10;
      }
      v19 = *(_QWORD *)v11;
LABEL_35:
      v16 = (unsigned __int16 *)(v19 + 8 * *(unsigned int *)(v11 + 8));
      goto LABEL_39;
    }
    if (v15 == 153)
      break;
LABEL_27:
    if (swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v11, v10))
    {
      result = swift::Demangle::__runtime::getUnspecialized(v11, *a1, (uint64_t)v25);
      if (LODWORD(v25[0]))
        goto LABEL_10;
      v11 = (unint64_t)v26;
      goto LABEL_14;
    }
    result = swift::Demangle::__runtime::isContext(*v16);
    if (!(_DWORD)result)
      goto LABEL_10;
LABEL_12:
    v14 = *(unsigned __int8 *)(v11 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*(_DWORD *)(v11 + 8))
        goto LABEL_10;
      v11 = *(_QWORD *)v11;
    }
    v11 = *(_QWORD *)v11;
LABEL_14:
    if (!v11)
      goto LABEL_10;
  }
  v20 = *(const void **)v11;
  if (!*(_QWORD *)v11)
    goto LABEL_10;
  v21 = *(_QWORD *)(v11 + 8);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v22 = v21 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    a4[1] = v21;
    a4[2] = v23 | 0x8000000000000000;
    *a4 = v24;
    a4 = v24;
    goto LABEL_50;
  }
  *((_BYTE *)a4 + 23) = v21;
  if (v21)
LABEL_50:
    result = (uint64_t)memmove(a4, v20, v21);
  *((_BYTE *)a4 + v21) = 0;
  return result;
}

void swift::Demangle::__runtime::demangleSymbolAsString()
{
  operator new();
}

void swift::Demangle::__runtime::demangleTypeAsString()
{
  operator new();
}

void swift::Demangle::__runtime::failAssert(swift::Demangle::__runtime *this, const char *a2, swift::Demangle::__runtime *a3, swift::Demangle::__runtime::Node *a4, const char *a5)
{
  const char *v9;
  char *v10;
  double NodeTreeAsString;
  std::string *v12;
  std::string v13;

  NodeTreeAsString = swift::Demangle::__runtime::getNodeTreeAsString(a3, &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v13;
  else
    v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  swift::Demangle::__runtime::fatal(0, "%s:%u: assertion failed for Node %p: %s\n%s:%u: Node %p is:\n%s\n", v9, v10, NodeTreeAsString, this, a2, a3, a4, this, a2, a3, v12);
}

uint64_t swift::Demangle::__runtime::isContext(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 21:
    case 24:
    case 29:
    case 31:
    case 33:
    case 50:
    case 51:
    case 61:
    case 70:
    case 71:
    case 76:
    case 98:
    case 100:
    case 103:
    case 104:
    case 117:
    case 125:
    case 126:
    case 141:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 167:
    case 168:
    case 169:
    case 178:
    case 179:
    case 180:
    case 181:
    case 204:
    case 215:
    case 218:
    case 219:
    case 220:
    case 233:
    case 234:
    case 250:
    case 251:
    case 254:
    case 257:
    case 309:
    case 320:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t swift::Demangle::__runtime::isFunctionAttr(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 53;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 24:
    case 33:
    case 34:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 91:
    case 107:
    case 111:
    case 117:
    case 118:
    case 203:
    case 224:
    case 234:
    case 235:
    case 266:
    case 275:
    case 276:
    case 277:
    case 279:
    case 280:
    case 287:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

_BYTE *swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(_BYTE *this, const char *a2)
{
  unsigned int v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;

  if (this)
  {
    v2 = *this;
    if (*this)
    {
      v3 = this;
      do
      {
        if (v2 >= 0x18)
          v4 = 8 * ((v2 & 0xF8) == 24);
        else
          v4 = 4;
        v5 = &v3[v4];
        v6 = v5[1];
        v3 = v5 + 1;
        v2 = v6;
      }
      while (v6);
    }
  }
  return this;
}

uint64_t swift::Demangle::__runtime::getManglingPrefixLength(uint64_t a1, unint64_t a2)
{
  if (!a2)
    return 0;
  if (a2 < 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 21284 && *(_WORD *)a1 != 29476)
      return 0;
    return 2;
  }
  if (*(_WORD *)a1 == 21599 && *(_BYTE *)(a1 + 2) == 48)
    return 3;
  if (*(_WORD *)a1 == 21284)
    return 2;
  if (*(_WORD *)a1 == 9311 && *(_BYTE *)(a1 + 2) == 83)
    return 3;
  if (*(_WORD *)a1 == 29476)
    return 2;
  if (*(_WORD *)a1 == 9311 && *(_BYTE *)(a1 + 2) == 115)
    return 3;
  if (a2 < 0xE)
    return 0;
  if (*(_QWORD *)a1 != 0x74666977735F5F40 || *(_QWORD *)(a1 + 6) != 0x5F6F7263616D7466)
    return 0;
  return 14;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(_WORD *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599
      || swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a1, a2) != 0;
}

BOOL swift::Demangle::__runtime::isOldFunctionTypeMangling(unsigned __int16 *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(swift::Demangle::__runtime *this, const char *a2)
{
  size_t v3;

  if (this)
  {
    v3 = strlen((const char *)this);
    if (v3 >= 2 && *(_WORD *)this == 21599)
      return 1;
  }
  else
  {
    v3 = 0;
  }
  return swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)this, v3) != 0;
}

BOOL swift::Demangle::__runtime::isObjCSymbol(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength;

  ManglingPrefixLength = (int)swift::Demangle::__runtime::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength)
    ManglingPrefixLength = a2;
  if (a2 - ManglingPrefixLength < 2)
    return 0;
  if (*(_WORD *)(a1 + ManglingPrefixLength) == 28499)
    return 1;
  return *(unsigned __int16 *)(a1 + ManglingPrefixLength) == 17235;
}

unint64_t swift::Demangle::__runtime::dropSwiftManglingPrefix(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength;

  ManglingPrefixLength = (int)swift::Demangle::__runtime::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength)
    ManglingPrefixLength = a2;
  return a1 + ManglingPrefixLength;
}

BOOL swift::Demangle::__runtime::isAlias(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _BYTE v54[24];
  _BYTE *v55;

  v16[2] = 0;
  v17 = 0;
  v18 = 2400;
  v19 = 0;
  v20 = 0;
  v16[0] = off_B5288;
  v16[1] = 0;
  v55 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v53 = 0;
  v15 = 0;
  v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v16, a1, a2, v14);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v6 = v4 == 234;
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v15)
  {
    v8 = 5;
    goto LABEL_13;
  }
  v16[0] = off_B5288;
  v9 = v55;
  if (v55 == v54)
  {
    v10 = 4;
    v9 = v54;
LABEL_18:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v55)
  {
    v10 = 5;
    goto LABEL_18;
  }
  v16[0] = off_B5260;
  v11 = v17;
  if (v17)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      free(v11);
      v11 = v12;
    }
    while (v12);
  }
  if (v19)
    *(_BYTE *)(v19 + 48) = 0;
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleType(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int8x16_t *v15;
  int v16;
  unsigned int v17;
  unint64_t Node;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  int8x16_t *v35;

  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v26 = v25;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v25);
    }
    else
    {
      v26 = (_BYTE *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v26 = 0;
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)&v27, a1, a2, a3, (uint64_t)v25);
  v12 = v26;
  if (v26 == v25)
  {
    v13 = 4;
    v12 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = *(_QWORD *)(a1 + 64);
  while (*(_QWORD *)(a1 + 72) < v14)
  {
    v15 = swift::Demangle::__runtime::Demangler::demangleOperator((swift::Demangle::__runtime::Demangler *)a1, v8, v9, v10, v11);
    if (!v15)
      break;
    v35 = v15;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v35, (_QWORD *)a1);
  }
  v16 = *(_DWORD *)(a1 + 96);
  if (!v16 || (v17 = v16 - 1, Node = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v17), *(_DWORD *)(a1 + 96) = v17, !Node))
    Node = swift::Demangle::__runtime::NodeFactory::createNode((_QWORD *)a1, 221, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  v19 = v27;
  *(_OWORD *)(v27 + 88) = v28;
  *(_OWORD *)(v19 + 104) = v29;
  *(_DWORD *)(v19 + 536) = v30;
  *(_OWORD *)(v19 + 56) = v31;
  *(_QWORD *)(v19 + 72) = v32;
  v20 = *(_QWORD **)(v19 + 568);
  *(_QWORD *)(v19 + 568) = 0;
  if (v20 == (_QWORD *)(v19 + 544))
  {
    v21 = 4;
    v20 = (_QWORD *)(v19 + 544);
  }
  else
  {
    if (!v20)
      goto LABEL_22;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_22:
  if (v34)
  {
    v22 = v33;
    if (v34 == v33)
    {
      *(_QWORD *)(v19 + 568) = v19 + 544;
      (*(void (**)(_QWORD *, uint64_t))(v33[0] + 24))(v33, v19 + 544);
      if (v34 == v33)
      {
        v23 = 4;
      }
      else
      {
        if (!v34)
          return Node;
        v23 = 5;
        v22 = v34;
      }
      (*(void (**)(_QWORD *))(*v22 + 8 * v23))(v22);
      return Node;
    }
    *(_QWORD *)(v19 + 568) = v34;
  }
  else
  {
    *(_QWORD *)(v19 + 568) = 0;
  }
  return Node;
}

BOOL swift::Demangle::__runtime::isClass(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  _BYTE v55[24];
  _BYTE *v56;

  v17[2] = 0;
  v18 = 0;
  v19 = 2400;
  v20 = 0;
  v21 = 0;
  v17[0] = off_B5288;
  v17[1] = 0;
  v56 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v54 = 0;
  v16 = 0;
  v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v17, a1, a2, v15);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v7 = v4 == 13 || v4 == 24;
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
LABEL_19:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  else if (v16)
  {
    v9 = 5;
    goto LABEL_19;
  }
  v17[0] = off_B5288;
  v10 = v56;
  if (v56 == v55)
  {
    v11 = 4;
    v10 = v55;
LABEL_24:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  else if (v56)
  {
    v11 = 5;
    goto LABEL_24;
  }
  v17[0] = off_B5260;
  v12 = v18;
  if (v18)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      free(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (v20)
    *(_BYTE *)(v20 + 48) = 0;
  return v7;
}

BOOL swift::Demangle::__runtime::isEnum(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _BYTE v54[24];
  _BYTE *v55;

  v16[2] = 0;
  v17 = 0;
  v18 = 2400;
  v19 = 0;
  v20 = 0;
  v16[0] = off_B5288;
  v16[1] = 0;
  v55 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v53 = 0;
  v15 = 0;
  v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v16, a1, a2, v14);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v6 = v4 == 14 || v4 == 61;
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
LABEL_17:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v15)
  {
    v8 = 5;
    goto LABEL_17;
  }
  v16[0] = off_B5288;
  v9 = v55;
  if (v55 == v54)
  {
    v10 = 4;
    v9 = v54;
LABEL_22:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v55)
  {
    v10 = 5;
    goto LABEL_22;
  }
  v16[0] = off_B5260;
  v11 = v17;
  if (v17)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      free(v11);
      v11 = v12;
    }
    while (v12);
  }
  if (v19)
    *(_BYTE *)(v19 + 48) = 0;
  return v6;
}

BOOL swift::Demangle::__runtime::isProtocol(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  _BOOL8 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  _BYTE v57[24];
  _BYTE *v58;

  v19[2] = 0;
  v20 = 0;
  v21 = 2400;
  v22 = 0;
  v23 = 0;
  v19[0] = off_B5288;
  v19[1] = 0;
  v58 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v56 = 0;
  ManglingPrefixLength = (int)swift::Demangle::__runtime::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength)
    ManglingPrefixLength = a2;
  v18 = 0;
  v5 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v19, a1 + ManglingPrefixLength, a2 - ManglingPrefixLength, v17);
  while (1)
  {
    v7 = *(unsigned __int16 *)(v5 + 16);
    if (v7 != 232)
      break;
    v6 = v5;
    v8 = *(unsigned __int8 *)(v5 + 18);
    if ((v8 - 1) < 2)
    {
LABEL_6:
      v5 = *(_QWORD *)v6;
    }
    else
    {
      v5 = 0;
      if (v8 == 5)
      {
        v5 = 0;
        if (*(_DWORD *)(v6 + 8))
        {
          v6 = *(_QWORD *)v6;
          goto LABEL_6;
        }
      }
    }
  }
  v9 = (v7 - 180) < 2 || v7 == 347;
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  else if (v18)
  {
    v11 = 5;
    goto LABEL_19;
  }
  v19[0] = off_B5288;
  v12 = v58;
  if (v58 == v57)
  {
    v13 = 4;
    v12 = v57;
LABEL_24:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  else if (v58)
  {
    v13 = 5;
    goto LABEL_24;
  }
  v19[0] = off_B5260;
  v14 = v20;
  if (v20)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      free(v14);
      v14 = v15;
    }
    while (v15);
  }
  if (v22)
    *(_BYTE *)(v22 + 48) = 0;
  return v9;
}

BOOL swift::Demangle::__runtime::isStruct(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _BYTE v54[24];
  _BYTE *v55;

  v16[2] = 0;
  v17 = 0;
  v18 = 2400;
  v19 = 0;
  v20 = 0;
  v16[0] = off_B5288;
  v16[1] = 0;
  v55 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v53 = 0;
  v15 = 0;
  v2 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v16, a1, a2, v14);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v6 = v4 == 15 || v4 == 219;
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
LABEL_17:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v15)
  {
    v8 = 5;
    goto LABEL_17;
  }
  v16[0] = off_B5288;
  v9 = v55;
  if (v55 == v54)
  {
    v10 = 4;
    v9 = v54;
LABEL_22:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v55)
  {
    v10 = 5;
    goto LABEL_22;
  }
  v16[0] = off_B5260;
  v11 = v17;
  if (v17)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      free(v11);
      v11 = v12;
    }
    while (v12);
  }
  if (v19)
    *(_BYTE *)(v19 + 48) = 0;
  return v6;
}

_QWORD *swift::Demangle::__runtime::mangledNameForTypeMetadataAccessor@<X0>(const void *a1@<X0>, size_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, __int16 a5@<W4>, std::string *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  size_t v20;
  const void *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *result;
  _QWORD *v55;
  unint64_t v56;
  char v60[24];
  __int128 __p;
  std::string::size_type v62;
  void (**v63)(swift::Demangle::__runtime::NodeFactory *__hidden);
  char *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  _BYTE v103[24];
  _BYTE *v104;

  v69 = 0;
  v63 = off_B5288;
  v64 = 0;
  v104 = 0;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v73 = 0;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v102 = 0;
  v9 = 4800;
  v67 = 4800;
  v68 = 0;
  v12 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  *v12 = 0;
  v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = (unint64_t)(v12 + 601);
  v66 = v12;
  *(_WORD *)(v13 + 16) = 99;
  *(_BYTE *)(v13 + 18) = 0;
  if (v13 + 48 <= v65)
  {
    v15 = v13 + 24;
  }
  else
  {
    v9 = 9600;
    v67 = 9600;
    v14 = malloc_type_malloc(0x2588uLL, 0xD0263BC5uLL);
    *v14 = v12;
    v15 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)(v14 + 1201);
    v66 = v14;
    v12 = v14;
  }
  v64 = (char *)(v15 + 24);
  *(_WORD *)(v15 + 16) = 238;
  *(_BYTE *)(v15 + 18) = 0;
  v16 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (!v16 || v16 + 24 > v65)
  {
    v9 *= 2;
    v67 = v9;
    v17 = malloc_type_malloc(v9 | 8, 0xD0263BC5uLL);
    *v17 = v12;
    v16 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v17 + (v9 | 8);
    v66 = v17;
    v12 = v17;
  }
  v18 = (char *)(v16 + 24);
  *(_WORD *)(v16 + 16) = 232;
  *(_BYTE *)(v16 + 18) = 0;
  v19 = v65;
  if (a2)
  {
    v56 = v13;
    v20 = a4;
    v21 = a1;
    v22 = &v18[a2];
    if ((unint64_t)&v18[a2] > v65)
    {
      if (2 * v9 <= a2 + 1)
        v9 = a2 + 1;
      else
        v9 *= 2;
      v67 = v9;
      v23 = (char *)malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      *(_QWORD *)v23 = v12;
      v18 = v23 + 8;
      v19 = (unint64_t)&v23[v9 + 8];
      v65 = v19;
      v66 = v23;
      v22 = &v23[a2 + 8];
      v12 = v23;
    }
    v24 = v18;
    memmove(v18, v21, a2);
    v18 = v22;
    a4 = v20;
    v13 = v56;
  }
  else
  {
    v24 = 0;
  }
  v25 = (unint64_t)(v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v25 || v25 + 24 > v19)
  {
    v26 = 2 * v9;
    if ((unint64_t)(2 * v9) <= 0x20)
      v26 = 32;
    v67 = v26;
    v27 = v26 + 8;
    v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    *v28 = v12;
    v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v28 + v27;
    v66 = v28;
  }
  v64 = (char *)(v25 + 24);
  *(_WORD *)(v25 + 16) = 153;
  *(_BYTE *)(v25 + 18) = 3;
  *(_QWORD *)v25 = v24;
  *(_QWORD *)(v25 + 8) = a2;
  v29 = v64;
  v30 = v65;
  if (a4)
  {
    if (!v64 || (v31 = &v64[a4], (unint64_t)&v64[a4] > v65))
    {
      v32 = 2 * v67;
      if (2 * v67 <= a4 + 1)
        v32 = a4 + 1;
      v67 = v32;
      v33 = v32 + 8;
      v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *v34 = v66;
      v29 = v34 + 1;
      v30 = (unint64_t)v34 + v33;
      v65 = (unint64_t)v34 + v33;
      v66 = v34;
      v31 = (char *)v34 + a4 + 8;
    }
    v35 = v29;
    memmove(v29, a3, a4);
    v29 = v31;
  }
  else
  {
    v35 = 0;
  }
  v36 = ((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v36 || v36 + 24 > v30)
  {
    v37 = 2 * v67;
    if ((unint64_t)(2 * v67) <= 0x20)
      v37 = 32;
    v67 = v37;
    v38 = v37 + 8;
    v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    *v39 = v66;
    v36 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v39 + v38;
    v66 = v39;
  }
  v64 = (char *)(v36 + 24);
  *(_WORD *)(v36 + 16) = 101;
  *(_BYTE *)(v36 + 18) = 3;
  *(_QWORD *)v36 = v35;
  *(_QWORD *)(v36 + 8) = a4;
  v40 = (unint64_t)(v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v40 || v40 + 24 > v65)
  {
    v41 = 2 * v67;
    if ((unint64_t)(2 * v67) <= 0x20)
      v41 = 32;
    v67 = v41;
    v42 = v41 + 8;
    v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
    *v43 = v66;
    v40 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v43 + v42;
    v66 = v43;
  }
  v64 = (char *)(v40 + 24);
  *(_WORD *)(v40 + 16) = a5;
  *(_BYTE *)(v40 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v40, (swift::Demangle::__runtime::Node *)v25, (swift::Demangle::__runtime::NodeFactory *)&v63, v10, v11);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v40, (swift::Demangle::__runtime::Node *)v36, (swift::Demangle::__runtime::NodeFactory *)&v63, v44, v45);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, (swift::Demangle::__runtime::Node *)v40, (swift::Demangle::__runtime::NodeFactory *)&v63, v46, v47);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v15, (swift::Demangle::__runtime::Node *)v16, (swift::Demangle::__runtime::NodeFactory *)&v63, v48, v49);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v15, (swift::Demangle::__runtime::NodeFactory *)&v63, v50, v51);
  swift::Demangle::__runtime::mangleNode((size_t *)v13, (uint64_t)v60);
  if (SHIBYTE(v62) < 0)
  {
    std::string::__init_copy_ctor_external(a6, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    if (SHIBYTE(v62) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = __p;
    a6->__r_.__value_.__r.__words[2] = v62;
  }
  v63 = off_B5288;
  v52 = v104;
  if (v104 == v103)
  {
    v53 = 4;
    v52 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_47;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_47:
  v63 = off_B5260;
  result = v66;
  if (v66)
  {
    do
    {
      v55 = (_QWORD *)*result;
      free(result);
      result = v55;
    }
    while (v55);
  }
  if (v68)
    *(_BYTE *)(v68 + 48) = 0;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(_QWORD *a1, __int16 a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v5 = 2 * a1[4];
    if (v5 <= 0x20)
      v5 = 32;
    a1[4] = v5;
    v6 = v5 + 8;
    v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    *v7 = a1[3];
    result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v7 + v6;
    a1[3] = v7;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

unsigned int *swift::Demangle::__runtime::Node::addChild(unsigned int *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;

  v5 = (uint64_t)this;
  if (!a2)
    swift::Demangle::__runtime::failAssert((swift::Demangle::__runtime *)"/Library/Caches/com.apple.xbs/Sources/swiftlang_SwiftRemoteMirror/swift/lib/Demangling/Demangler.cpp", &stru_158.sectname[14], (swift::Demangle::__runtime *)this, (swift::Demangle::__runtime::Node *)"Child", a5);
  switch(*((_BYTE *)this + 18))
  {
    case 0:
      *(_QWORD *)this = a2;
      *((_QWORD *)this + 1) = 0;
      *((_BYTE *)this + 18) = 1;
      return this;
    case 1:
      *((_QWORD *)this + 1) = a2;
      *((_BYTE *)this + 18) = 2;
      return this;
    case 2:
      v9 = *(char **)this;
      v8 = *((_QWORD *)this + 1);
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      v10 = *((_QWORD *)a3 + 1);
      v11 = *((_QWORD *)a3 + 2);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 0x18;
      if (v12)
      {
        *((_QWORD *)a3 + 1) = 24;
        v13 = *(_QWORD **)this;
        v23 = 3;
      }
      else
      {
        v13 = (_QWORD *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)a3 + 1) = v13;
        if (v13)
          v14 = (unint64_t)(v13 + 4) > v11;
        else
          v14 = 1;
        if (v14)
        {
          v15 = 2 * *((_QWORD *)a3 + 4);
          if (v15 <= 0x28)
            v15 = 40;
          *((_QWORD *)a3 + 4) = v15;
          v16 = v15 + 8;
          this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
          *(_QWORD *)this = *((_QWORD *)a3 + 3);
          v13 = (_QWORD *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8);
          *((_QWORD *)a3 + 2) = (char *)this + v16;
          *((_QWORD *)a3 + 3) = this;
          v23 = *(_DWORD *)(v5 + 12) + 4;
        }
        else
        {
          v23 = 4;
        }
        *((_QWORD *)a3 + 1) = v13 + 4;
        *(_QWORD *)v5 = v13;
      }
      *v13 = v9;
      *(_QWORD *)(*(_QWORD *)v5 + 8) = v8;
      *(_QWORD *)(*(_QWORD *)v5 + 16) = a2;
      *(_DWORD *)(v5 + 8) = 3;
      *(_DWORD *)(v5 + 12) = v23;
      *(_BYTE *)(v5 + 18) = 5;
      return this;
    case 5:
      v17 = this[2];
      v18 = this[3];
      v19 = *(char **)this;
      if (v17 < v18)
        goto LABEL_36;
      v20 = &v19[8 * v18];
      v21 = (char *)*((_QWORD *)a3 + 1);
      if (v20 == v21)
      {
        v24 = v20 + 8;
        v22 = *((_QWORD *)a3 + 2);
        if ((unint64_t)v24 <= v22)
        {
          *((_QWORD *)a3 + 1) = v24;
          v19 = *(char **)this;
          LODWORD(v25) = 1;
          goto LABEL_35;
        }
      }
      else
      {
        v22 = *((_QWORD *)a3 + 2);
      }
      if ((2 * v18) <= 4)
        v25 = 4;
      else
        v25 = (2 * v18);
      v26 = 8 * (v25 + v18);
      v19 = (char *)((unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a3 + 1) = v19;
      if (!v19 || (unint64_t)&v19[v26] > v22)
      {
        v27 = 2 * *((_QWORD *)a3 + 4);
        if (v27 <= v26 + 8)
          v27 = v26 + 8;
        *((_QWORD *)a3 + 4) = v27;
        v28 = v27 + 8;
        this = (unsigned int *)malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        v29 = (char *)this + v28;
        *(_QWORD *)this = *((_QWORD *)a3 + 3);
        v19 = (char *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)a3 + 2) = v29;
        *((_QWORD *)a3 + 3) = this;
      }
      *((_QWORD *)a3 + 1) = &v19[v26];
      if ((_DWORD)v18)
        this = (unsigned int *)memcpy(v19, *(const void **)v5, 8 * v18);
      *(_QWORD *)v5 = v19;
      LODWORD(v18) = *(_DWORD *)(v5 + 12);
LABEL_35:
      *(_DWORD *)(v5 + 12) = v18 + v25;
      v17 = *(_DWORD *)(v5 + 8);
LABEL_36:
      *(_DWORD *)(v5 + 8) = v17 + 1;
      *(_QWORD *)&v19[8 * v17] = a2;
      return this;
    default:
      return this;
  }
}

uint64_t swift::Demangle::__runtime::Node::removeChildAt(uint64_t this, unsigned int a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(this + 18);
  switch(v2)
  {
    case 5:
      v3 = *(_DWORD *)(this + 8) - 1;
      if (v3 != a2)
      {
        do
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * a2) = *(_QWORD *)(*(_QWORD *)this + 8 * (a2 + 1));
          ++a2;
        }
        while (v3 != a2);
        v3 = *(_DWORD *)(this + 8) - 1;
      }
      *(_DWORD *)(this + 8) = v3;
      break;
    case 2:
      if (!a2)
        *(_QWORD *)this = *(_QWORD *)(this + 8);
      *(_BYTE *)(this + 18) = 1;
      break;
    case 1:
      *(_BYTE *)(this + 18) = 0;
      break;
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Node::replaceChild(uint64_t this, unsigned int a2, swift::Demangle::__runtime::Node *a3)
{
  int v3;

  v3 = *(unsigned __int8 *)(this + 18);
  if (v3 != 1)
  {
    if (v3 == 5)
    {
      this = *(_QWORD *)this + 8 * a2;
    }
    else
    {
      if (v3 != 2)
        return this;
      this += 8 * a2;
    }
  }
  *(_QWORD *)this = a3;
  return this;
}

int8x16_t *swift::Demangle::__runtime::Node::reverseChildren(int8x16_t *this, uint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = this[1].u8[2];
  if (v2 == 5)
  {
    v4 = this->i64[0] + 8 * a2;
    v5 = this->u32[2];
    v6 = (_QWORD *)(this->i64[0] + 8 * v5 - 8);
    if (v5 != a2 && (unint64_t)v6 > v4)
    {
      v8 = v4 + 8;
      do
      {
        v9 = *(_QWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 8) = *v6;
        *v6-- = v9;
        v10 = v8 >= (unint64_t)v6;
        v8 += 8;
      }
      while (!v10);
    }
  }
  else if (v2 == 2 && a2 == 0)
  {
    *this = vextq_s8(*this, *this, 8uLL);
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Node::findByKind(uint64_t result, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (_QWORD *)(result + 16);
  if (*(unsigned __int16 *)(result + 16) != (_DWORD)a2)
  {
    v4 = (a3 - 1);
    if (a3 < 1)
      return 0;
    v6 = *(unsigned __int8 *)(result + 18);
    v7 = (_QWORD *)result;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        v8 = *(_QWORD **)result;
        v7 = *(_QWORD **)result;
        goto LABEL_11;
      }
      v7 = 0;
    }
    switch(v6)
    {
      case 1:
        v3 = (_QWORD *)(result + 8);
        if (v7 != (_QWORD *)(result + 8))
          goto LABEL_12;
        return 0;
      case 2:
        goto LABEL_12;
      case 5:
        v8 = *(_QWORD **)result;
LABEL_11:
        v3 = &v8[*(unsigned int *)(result + 8)];
        if (v7 != v3)
          goto LABEL_12;
        return 0;
    }
    v3 = 0;
    if (!v7)
      return 0;
LABEL_12:
    while (1)
    {
      result = swift::Demangle::__runtime::Node::findByKind(*v7, a2, v4);
      if (result)
        break;
      if (++v7 == v3)
        return 0;
    }
  }
  return result;
}

_QWORD *swift::Demangle::__runtime::NodeFactory::freeSlabs(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    do
    {
      v1 = (_QWORD *)*result;
      free(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

_QWORD *swift::Demangle::__runtime::NodeFactory::clear(_QWORD *this)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD **)this[3];
  if (v1)
  {
    v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        v3 = (_QWORD *)*this;
        free(this);
        this = v3;
      }
      while (v3);
      v1 = (_QWORD **)v2[3];
    }
    *v1 = 0;
    v2[1] = v1 + 1;
  }
  return this;
}

__n128 swift::Demangle::__runtime::NodeFactory::pushCheckpoint@<Q0>(swift::Demangle::__runtime::NodeFactory *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *((_QWORD *)this + 3);
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 swift::Demangle::__runtime::NodeFactory::popCheckpoint(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD ***)(a1 + 24);
  if (*(_QWORD ***)a2 != v7)
  {
    if (v7)
    {
      if (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8) >= (unint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v7 - 8) >> 4)
      {
        v9 = 0;
        v8 = *(_QWORD **)(a1 + 24);
LABEL_10:
        while (*(_QWORD **)a2 != v8)
        {
          *(_QWORD *)(a1 + 24) = *v8;
          free(v8);
          v8 = *(_QWORD **)(a1 + 24);
          if (!v8)
          {
            v6 = *(_QWORD **)a2;
            v7 = v9;
            goto LABEL_13;
          }
        }
        v7 = v9;
        if (v9)
          goto LABEL_15;
LABEL_17:
        result = *(__n128 *)(a2 + 8);
        *(__n128 *)(a1 + 8) = result;
        return result;
      }
      v8 = *v7;
      *(_QWORD *)(a1 + 24) = *v7;
      v9 = v7;
      if (v8)
        goto LABEL_10;
    }
LABEL_13:
    if (v6)
      swift::Demangle::__runtime::fatal(0, "Popping checkpoint {%p, %p, %p} with slab that is not within the allocator's slab chain.\n", a3, a4, v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
    v8 = 0;
    if (v7)
    {
LABEL_15:
      *v7 = v8;
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 8) = v7 + 1;
      return result;
    }
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (v10 > *(_QWORD *)(a1 + 8))
    swift::Demangle::__runtime::fatal(0, "Popping checkpoint {%p, %p, %p} that is after the current pointer.\n", a3, a4, v6, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  if (v11 != v12)
    swift::Demangle::__runtime::fatal(0, "Popping checkpoint {%p, %p, %p} with End that does not match current End %p.\n", a3, a4, v6, v10, v11, v12);
  *(_QWORD *)(a1 + 8) = v10;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(_QWORD *a1, __int16 a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v7 = 2 * a1[4];
    if (v7 <= 0x20)
      v7 = 32;
    a1[4] = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *v9 = a1[3];
    result = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v9 + v8;
    a1[3] = v9;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 4;
  *(_QWORD *)result = a3;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(_QWORD *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v9 = 2 * a1[4];
    if (v9 <= 0x20)
      v9 = 32;
    a1[4] = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    *v11 = a1[3];
    result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v11 + v10;
    a1[3] = v11;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a4;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(_QWORD *a1, __int16 a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v5 = *a3;
  v6 = *((unsigned int *)a3 + 2);
  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v8 = 2 * a1[4];
    if (v8 <= 0x20)
      v8 = 32;
    a1[4] = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    *v10 = a1[3];
    result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v10 + v9;
    a1[3] = v10;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v6;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(_QWORD *a1, __int16 a2, char *__s)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  size_t v11;

  v6 = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = v6;
  if (!v6 || v6 + 24 > a1[2])
  {
    v7 = 2 * a1[4];
    if (v7 <= 0x20)
      v7 = 32;
    a1[4] = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = a1[3];
    v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = v10;
    a1[3] = v9;
  }
  a1[1] = v6 + 24;
  if (__s)
    v11 = strlen(__s);
  else
    v11 = 0;
  *(_WORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 18) = 3;
  *(_QWORD *)v6 = __s;
  *(_QWORD *)(v6 + 8) = v11;
  return v6;
}

void *swift::Demangle::__runtime::CharVector::append(char **a1, const void *a2, size_t a3, _QWORD *a4)
{
  uint64_t v7;
  size_t v8;
  char *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  void *result;

  v7 = *((unsigned int *)a1 + 2);
  v8 = *((unsigned int *)a1 + 3);
  v9 = *a1;
  if (a3 + v7 > v8)
  {
    v11 = (char *)a4[1];
    if (&v9[v8] == v11)
    {
      v13 = &v9[v8 + a3];
      v12 = a4[2];
      if ((unint64_t)v13 <= v12)
      {
        a4[1] = v13;
        LODWORD(v15) = a3;
LABEL_19:
        *((_DWORD *)a1 + 3) = v8 + v15;
        goto LABEL_20;
      }
    }
    else
    {
      v12 = a4[2];
    }
    v14 = (2 * v8);
    if (a3 > v14)
      v14 = a3;
    if (v14 <= 4)
      v15 = 4;
    else
      v15 = v14;
    v16 = v15 + v8;
    if (!v11 || (unint64_t)&v11[v16] > v12)
    {
      v17 = 2 * a4[4];
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      a4[4] = v17;
      v18 = v17 + 8;
      v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v20 = (char *)v19 + v18;
      *v19 = a4[3];
      v11 = (char *)(v19 + 1);
      a4[2] = v20;
      a4[3] = v19;
    }
    a4[1] = &v11[v16];
    if ((_DWORD)v8)
      memcpy(v11, *a1, v8);
    *a1 = v11;
    v9 = v11;
    v7 = *((unsigned int *)a1 + 2);
    LODWORD(v8) = *((_DWORD *)a1 + 3);
    goto LABEL_19;
  }
LABEL_20:
  result = memcpy(&v9[v7], a2, a3);
  *((_DWORD *)a1 + 2) += a3;
  return result;
}

unsigned int *swift::Demangle::__runtime::CharVector::append(unsigned int *this, unsigned int a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  char *v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  unsigned int v25;
  char *v26;
  unint64_t v27;
  char v28;

  v4 = (uint64_t)this;
  v5 = this[2];
  v6 = this[3];
  v7 = *(char **)this;
  if (v5 + 11 > v6)
  {
    v9 = (char *)*((_QWORD *)a3 + 1);
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 11];
      v10 = *((_QWORD *)a3 + 2);
      if (v11 <= v10)
      {
        *((_QWORD *)a3 + 1) = v11;
        LODWORD(v12) = 11;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      v10 = *((_QWORD *)a3 + 2);
    }
    if ((2 * v6) <= 0xB)
      v12 = 11;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      v14 = 2 * *((_QWORD *)a3 + 4);
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      *((_QWORD *)a3 + 4) = v14;
      v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)this + v15;
      *(_QWORD *)this = *((_QWORD *)a3 + 3);
      v9 = (char *)(this + 2);
      *((_QWORD *)a3 + 2) = v16;
      *((_QWORD *)a3 + 3) = this;
    }
    *((_QWORD *)a3 + 1) = &v9[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    *(_QWORD *)v4 = v9;
    v7 = v9;
    v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  v17 = v5;
  v18 = &v7[v5];
  if ((a2 & 0x80000000) != 0)
  {
    v19 = 0;
    *v18 = 45;
    v25 = -a2;
    do
    {
      v18[++v19] = (v25 % 0xA) | 0x30;
      v20 = v25 > 9;
      v25 /= 0xAu;
    }
    while (v20);
    v18[v19 + 1] = 0;
    v26 = &v18[v19 + 1];
    if (&v18[v19] > v18)
    {
      v27 = (unint64_t)&v7[v17 + 2];
      do
      {
        v28 = *--v26;
        *v26 = *(_BYTE *)(v27 - 1);
        *(_BYTE *)(v27 - 1) = v28;
        v24 = v27++ >= (unint64_t)v26;
      }
      while (!v24);
    }
  }
  else if (a2)
  {
    v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      v20 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v20);
    v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        v23 = *--v21;
        *v21 = *(_BYTE *)(v22 - 1);
        *(_BYTE *)(v22 - 1) = v23;
        v24 = v22++ >= (unint64_t)v21;
      }
      while (!v24);
    }
  }
  else
  {
    *(_WORD *)v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

unsigned int *swift::Demangle::__runtime::CharVector::append(unsigned int *this, unint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  char *v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  char v23;

  v4 = (uint64_t)this;
  v5 = this[2];
  v6 = this[3];
  v7 = *(char **)this;
  if (v5 + 21 > v6)
  {
    v9 = (char *)*((_QWORD *)a3 + 1);
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 21];
      v10 = *((_QWORD *)a3 + 2);
      if (v11 <= v10)
      {
        *((_QWORD *)a3 + 1) = v11;
        LODWORD(v12) = 21;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      v10 = *((_QWORD *)a3 + 2);
    }
    if ((2 * v6) <= 0x15)
      v12 = 21;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      v14 = 2 * *((_QWORD *)a3 + 4);
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      *((_QWORD *)a3 + 4) = v14;
      v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)this + v15;
      *(_QWORD *)this = *((_QWORD *)a3 + 3);
      v9 = (char *)(this + 2);
      *((_QWORD *)a3 + 2) = v16;
      *((_QWORD *)a3 + 3) = this;
    }
    *((_QWORD *)a3 + 1) = &v9[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    *(_QWORD *)v4 = v9;
    v7 = v9;
    v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  v17 = v5;
  v18 = &v7[v5];
  if (a2)
  {
    v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      v20 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v20);
    v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        v23 = *--v21;
        *v21 = *(_BYTE *)(v22 - 1);
        *(_BYTE *)(v22 - 1) = v23;
      }
      while (v22++ < (unint64_t)v21);
    }
  }
  else
  {
    *(_WORD *)v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

void *swift::Demangle::__runtime::Demangler::clear(void *this)
{
  void **v1;
  void *v2;
  void *v3;

  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 29) = 0;
  *((_QWORD *)this + 13) = 0;
  v1 = (void **)*((_QWORD *)this + 3);
  if (v1)
  {
    v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        v3 = *(void **)this;
        free(this);
        this = v3;
      }
      while (v3);
      v1 = (void **)*((_QWORD *)v2 + 3);
    }
    *v1 = 0;
    *((_QWORD *)v2 + 1) = v1 + 1;
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 72);
  v10 = (_QWORD *)(a2 + 544);
  v11 = *(_QWORD **)(a2 + 568);
  if (v11)
  {
    if (v11 == v10)
    {
      *(_QWORD *)(a1 + 96) = a1 + 72;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 568) + 24))(*(_QWORD *)(a2 + 568));
    }
    else
    {
      *(_QWORD *)(a1 + 96) = v11;
      *(_QWORD *)(a2 + 568) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  v12 = (*(_QWORD *)(a2 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a2 + 8) = v12;
  if (!v12 || (v13 = *(_QWORD *)(a2 + 16), v12 + 128 > v13))
  {
    v14 = 2 * *(_QWORD *)(a2 + 32);
    if (v14 <= 0x88)
      v14 = 136;
    *(_QWORD *)(a2 + 32) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v13 = (unint64_t)v16 + v15;
    *v16 = *(_QWORD *)(a2 + 24);
    v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 16) = (char *)v16 + v15;
    *(_QWORD *)(a2 + 24) = v16;
  }
  *(_QWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 96) = 0x1000000000;
  v17 = (v12 + 135) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a2 + 8) = v17;
  if (!v17 || v17 + 128 > v13)
  {
    v18 = 2 * *(_QWORD *)(a2 + 32);
    if (v18 <= 0x88)
      v18 = 136;
    *(_QWORD *)(a2 + 32) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *v20 = *(_QWORD *)(a2 + 24);
    v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 16) = (char *)v20 + v19;
    *(_QWORD *)(a2 + 24) = v20;
  }
  *(_QWORD *)(a2 + 8) = v17 + 128;
  *(_QWORD *)(a2 + 104) = v17;
  *(_QWORD *)(a2 + 112) = 0x1000000000;
  *(_DWORD *)(a2 + 536) = 0;
  *(_QWORD *)(a2 + 56) = a3;
  *(_QWORD *)(a2 + 64) = a4;
  *(_QWORD *)(a2 + 72) = 0;
  v21 = *(_QWORD **)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  if (v21 == v10)
  {
    v22 = 4;
    v21 = v10;
  }
  else
  {
    if (!v21)
      goto LABEL_21;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_21:
  v23 = *(_QWORD *)(a5 + 24);
  if (v23)
  {
    if (v23 == a5)
    {
      *(_QWORD *)(a2 + 568) = v10;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24), v10);
    }
    else
    {
      *(_QWORD *)(a2 + 568) = v23;
      *(_QWORD *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 568) = 0;
  }
  return a1;
}

void swift::Demangle::__runtime::Demangler::DemangleInitRAII::~DemangleInitRAII(swift::Demangle::__runtime::Demangler::DemangleInitRAII *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_OWORD *)(*(_QWORD *)this + 88) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(*(_QWORD *)this + 104) = *(_OWORD *)((char *)this + 24);
  v2 = *(_QWORD *)this;
  *(_DWORD *)(v2 + 536) = *((_DWORD *)this + 10);
  *(_OWORD *)(v2 + 56) = *((_OWORD *)this + 3);
  v3 = *(_QWORD **)this;
  v3[9] = *((_QWORD *)this + 8);
  v4 = (_QWORD *)v3[71];
  v3[71] = 0;
  if (v4 == v3 + 68)
  {
    v5 = 4;
    v4 = v3 + 68;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)this + 72;
  v7 = (char *)*((_QWORD *)this + 12);
  if (v7)
  {
    if (v7 != v6)
    {
      v3[71] = v7;
      *((_QWORD *)this + 12) = 0;
      return;
    }
    v3[71] = v3 + 68;
    (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12), v3 + 68);
  }
  else
  {
    v3[71] = 0;
  }
  v8 = (char *)*((_QWORD *)this + 12);
  if (v8 == v6)
  {
    v9 = 4;
    v8 = (char *)this + 72;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_OWORD *)(*(_QWORD *)this + 88) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(*(_QWORD *)this + 104) = *(_OWORD *)((char *)this + 24);
  v2 = *(_QWORD *)this;
  *(_DWORD *)(v2 + 536) = *((_DWORD *)this + 10);
  *(_OWORD *)(v2 + 56) = *((_OWORD *)this + 3);
  v3 = *(_QWORD **)this;
  v3[9] = *((_QWORD *)this + 8);
  v4 = (_QWORD *)v3[71];
  v3[71] = 0;
  if (v4 == v3 + 68)
  {
    v5 = 4;
    v4 = v3 + 68;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)this + 72;
  v7 = (char *)*((_QWORD *)this + 12);
  if (v7)
  {
    if (v7 != v6)
    {
      v3[71] = v7;
      *((_QWORD *)this + 12) = 0;
      return;
    }
    v3[71] = v3 + 68;
    (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12), v3 + 68);
  }
  else
  {
    v3[71] = 0;
  }
  v8 = (char *)*((_QWORD *)this + 12);
  if (v8 == v6)
  {
    v9 = 4;
    v8 = (char *)this + 72;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSymbol(uint64_t a1, _WORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  _WORD *v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  unsigned int ManglingPrefixLength;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  size_t v24;
  int8x16_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t **v32;
  unsigned __int16 *v33;
  uint64_t v34;
  const char *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[3];
  _QWORD *v55;
  int8x16_t *v56;

  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v47 = v46;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v46);
    }
    else
    {
      v47 = (_BYTE *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v47 = 0;
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)&v48, a1, (uint64_t)a2, a3, (uint64_t)v46);
  v8 = v47;
  if (v47 == v46)
  {
    v9 = 4;
    v8 = v46;
    goto LABEL_10;
  }
  if (v47)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  if (v10 >= v11)
    v12 = *(_QWORD *)(a1 + 72);
  else
    v12 = *(_QWORD *)(a1 + 64);
  if (v10 - v12 >= 3)
  {
    v13 = *(_WORD **)(a1 + 56);
    v14 = (_WORD *)((char *)v13 + v12);
    v15 = *v14;
    v16 = *((unsigned __int8 *)v14 + 2);
    if (v15 == 21599 && v16 == 116)
    {
      *(_QWORD *)(a1 + 72) = v11 + 3;
      v26 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(v13, v10, (swift::Demangle::__runtime::NodeFactory *)a1);
      goto LABEL_42;
    }
  }
  ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  if (!ManglingPrefixLength)
    goto LABEL_40;
  v23 = a3 >= 2 && *a2 == 21599;
  *(_BYTE *)(a1 + 80) = v23;
  v24 = v11 + ManglingPrefixLength;
  *(_QWORD *)(a1 + 72) = v24;
  while (*(_QWORD *)(a1 + 72) < v10)
  {
    v25 = swift::Demangle::__runtime::Demangler::demangleOperator((swift::Demangle::__runtime::Demangler *)a1, v19, v20, v21, v22);
    if (!v25)
      goto LABEL_40;
    v56 = v25;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v56, (_QWORD *)a1);
  }
  v26 = (*(_QWORD *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a1 + 8) = v26;
  if (!v26 || v26 + 24 > *(_QWORD *)(a1 + 16))
  {
    v27 = 2 * *(_QWORD *)(a1 + 32);
    if (v27 <= 0x20)
      v27 = 32;
    *(_QWORD *)(a1 + 32) = v27;
    v28 = v27 + 8;
    v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
    *v29 = *(_QWORD *)(a1 + 24);
    v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 16) = (char *)v29 + v28;
    *(_QWORD *)(a1 + 24) = v29;
  }
  *(_QWORD *)(a1 + 8) = v26 + 24;
  *(_WORD *)(v26 + 16) = 99;
  *(_BYTE *)(v26 + 18) = 0;
  v30 = *(_DWORD *)(a1 + 96);
  if (!v30)
  {
LABEL_40:
    v26 = 0;
    goto LABEL_42;
  }
  v31 = (unsigned int *)v26;
  do
  {
    v32 = *(uint64_t ***)(a1 + 88);
    v33 = (unsigned __int16 *)v32[v30 - 1];
    if (!swift::Demangle::__runtime::isFunctionAttr(v33[8]))
    {
      v42 = 8 * v30;
      while (1)
      {
        v43 = *v32;
        if (*((_WORD *)*v32 + 8) == 232)
        {
          v44 = *((unsigned __int8 *)v43 + 18);
          if ((v44 - 1) >= 2)
          {
            if (v44 != 5 || !*((_DWORD *)v43 + 2))
            {
              v43 = 0;
              goto LABEL_58;
            }
            v43 = (uint64_t *)*v43;
          }
          v43 = (uint64_t *)*v43;
        }
LABEL_58:
        swift::Demangle::__runtime::Node::addChild(v31, (swift::Demangle::__runtime::Node *)v43, (swift::Demangle::__runtime::NodeFactory *)a1, v34, v35);
        ++v32;
        v42 -= 8;
        if (!v42)
          goto LABEL_37;
      }
    }
    *(_DWORD *)(a1 + 96) = v30 - 1;
    swift::Demangle::__runtime::Node::addChild(v31, (swift::Demangle::__runtime::Node *)v33, (swift::Demangle::__runtime::NodeFactory *)a1, v34, v35);
    if ((v33[8] & 0xFFFE) == 0xAA)
      v31 = (unsigned int *)v33;
    v30 = *(_DWORD *)(a1 + 96);
  }
  while (v30);
LABEL_37:
  v36 = *(unsigned __int8 *)(v26 + 18);
  if ((v36 - 1) >= 2 && (v36 != 5 || !*(_DWORD *)(v26 + 8)))
    goto LABEL_40;
LABEL_42:
  v37 = v48;
  *(_OWORD *)(v48 + 88) = v49;
  *(_OWORD *)(v37 + 104) = v50;
  *(_DWORD *)(v37 + 536) = v51;
  *(_OWORD *)(v37 + 56) = v52;
  *(_QWORD *)(v37 + 72) = v53;
  v38 = *(_QWORD **)(v37 + 568);
  *(_QWORD *)(v37 + 568) = 0;
  if (v38 == (_QWORD *)(v37 + 544))
  {
    v39 = 4;
    v38 = (_QWORD *)(v37 + 544);
LABEL_46:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  else if (v38)
  {
    v39 = 5;
    goto LABEL_46;
  }
  if (v55)
  {
    v40 = v54;
    if (v55 == v54)
    {
      *(_QWORD *)(v37 + 568) = v37 + 544;
      (*(void (**)(_QWORD *, uint64_t))(v54[0] + 24))(v54, v37 + 544);
      if (v55 == v54)
      {
        v41 = 4;
      }
      else
      {
        if (!v55)
          return v26;
        v41 = 5;
        v40 = v55;
      }
      (*(void (**)(_QWORD *))(*v40 + 8 * v41))(v40);
      return v26;
    }
    *(_QWORD *)(v37 + 568) = v55;
  }
  else
  {
    *(_QWORD *)(v37 + 568) = 0;
  }
  return v26;
}

BOOL swift::Demangle::__runtime::Demangler::parseAndPushNodes(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v5;
  const void **v7;
  int8x16_t *v8;
  _BOOL8 v9;
  int8x16_t *v11;

  v5 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) >= v5)
    return 1;
  v7 = (const void **)((char *)this + 88);
  do
  {
    v8 = swift::Demangle::__runtime::Demangler::demangleOperator(this, a2, a3, a4, a5);
    v9 = v8 != 0;
    if (!v8)
      break;
    v11 = v8;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v7, (uint64_t *)&v11, this);
  }
  while (*((_QWORD *)this + 9) < v5);
  return v9;
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleOperator(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *result;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unsigned __int16 *v25;
  int v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  __int16 v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  __int16 v66;
  int v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  char *v73;
  int v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  char *v81;
  unint64_t DependentGenericParamType;
  swift::Demangle::__runtime::Node *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  char *v90;
  int v91;
  int v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  int v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  char *v129;
  int8x16_t *v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  unsigned int *v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  char *v139;
  int v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  char *v145;
  int v146;
  unsigned int v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  char *v161;
  swift::Demangle::__runtime::NodeFactory *v162;
  __int16 v163;
  unsigned int v164;

  v7 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v7 <= v6)
    v8 = *((_QWORD *)this + 9);
  else
    v8 = *((_QWORD *)this + 8);
  while (2)
  {
    if (v8 == v6)
    {
      v6 = v8;
LABEL_8:
      v13 = v6 - 1;
LABEL_9:
      *((_QWORD *)this + 9) = v13;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleIdentifier(this);
    }
    else
    {
      v9 = v6++;
      *((_QWORD *)this + 9) = v6;
      v10 = *((_QWORD *)this + 7);
      v11 = *(unsigned __int8 *)(v10 + v9);
      switch(*(_BYTE *)(v10 + v9))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleSymbolicReference(this, v11);
        case 0x2E:
          v14 = v6 - 1;
          if (v7 < v14)
            v14 = v7;
          v15 = (char *)(v10 + v14);
          v16 = v7 - v14;
          *((_QWORD *)this + 9) = v7;
          v17 = 221;
          return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v17, v15, v16);
        case 0x41:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions(this);
        case 0x42:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleBuiltinType(this, v11, a3, a4, a5);
        case 0x43:
          v18 = 24;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x44:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleTypeMangling(this, v11, a3, a4, a5);
        case 0x45:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleExtensionContext(this, v11, a3, a4, a5);
        case 0x46:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demanglePlainFunction(this, v11, a3, a4, a5);
        case 0x47:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleBoundGenericType(this, v11, a3, a4, a5);
        case 0x48:
          if (v6 < v7)
          {
            v19 = v6 + 1;
            *((_QWORD *)this + 9) = v6 + 1;
            switch(*(_BYTE *)(v10 + v6))
            {
              case 'A':
                v20 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(this, v21, v22, v23, v24);
                v26 = *((_DWORD *)this + 24);
                if (v26
                  && (v27 = v26 - 1,
                      v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v27),
                      v28[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v27;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 49;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v162, v163, (swift::Demangle::__runtime::Node *)v28, (swift::Demangle::__runtime::Node *)v25, v20);
              case 'C':
                v20 = (char *)swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this, v11, a3, a4, a5);
                v106 = *((_DWORD *)this + 24);
                if (v106
                  && ((v107 = v106 - 1,
                       v25 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v107),
                       v108 = v25[8],
                       v108 == 184)
                   || v108 == 183))
                {
                  *((_DWORD *)this + 24) = v107;
                }
                else
                {
                  v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(this, v103, v104, (uint64_t)v25, v105);
                  v107 = *((_DWORD *)this + 24);
                }
                if (v107
                  && (v164 = v107 - 1, v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v164), v28[8] == 232))
                {
                  *((_DWORD *)this + 24) = v164;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 26;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v162, v163, (swift::Demangle::__runtime::Node *)v28, (swift::Demangle::__runtime::Node *)v25, v20);
              case 'D':
                v20 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol(this, v109, v110, v111, v112);
                v113 = *((_DWORD *)this + 24);
                if (v113
                  && (v114 = v113 - 1, v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v114), v28[8] == 232))
                {
                  *((_DWORD *)this + 24) = v114;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 47;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v162, v163, (swift::Demangle::__runtime::Node *)v28, (swift::Demangle::__runtime::Node *)v25, v20);
              case 'F':
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v115 = 2 * *((_QWORD *)this + 4);
                  if (v115 <= 0x20)
                    v115 = 32;
                  *((_QWORD *)this + 4) = v115;
                  v116 = v115 + 8;
                  v117 = malloc_type_malloc(v115 + 8, 0xD0263BC5uLL);
                  v118 = (char *)v117 + v116;
                  *v117 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v118;
                  *((_QWORD *)this + 3) = v117;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v34 = 330;
                goto LABEL_135;
              case 'I':
                v20 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                v25 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol(this, v119, v120, v121, v122);
                v123 = *((_DWORD *)this + 24);
                if (v123
                  && (v124 = v123 - 1,
                      v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v124),
                      v28[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v124;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 48;
                return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v162, v163, (swift::Demangle::__runtime::Node *)v28, (swift::Demangle::__runtime::Node *)v25, v20);
              case 'P':
                v125 = swift::Demangle::__runtime::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v125)
                  goto LABEL_226;
                v37 = v125;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v126 = 2 * *((_QWORD *)this + 4);
                  if (v126 <= 0x20)
                    v126 = 32;
                  *((_QWORD *)this + 4) = v126;
                  v127 = v126 + 8;
                  v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
                  v129 = (char *)v128 + v127;
                  *v128 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v129;
                  *((_QWORD *)this + 3) = v128;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 183;
                goto LABEL_156;
              case 'X':
                v130 = swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this, v11, a3, a4, a5);
                if (!v130)
                  goto LABEL_226;
                v37 = (unint64_t)v130;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v131 = 2 * *((_QWORD *)this + 4);
                  if (v131 <= 0x20)
                    v131 = 32;
                  *((_QWORD *)this + 4) = v131;
                  v132 = v131 + 8;
                  v133 = malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
                  v134 = (char *)v133 + v132;
                  *v133 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v134;
                  *((_QWORD *)this + 3) = v133;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 27;
                goto LABEL_156;
              case 'c':
                v135 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, v11, a3, a4, a5);
                if (!v135)
                  goto LABEL_226;
                v37 = (unint64_t)v135;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v136 = 2 * *((_QWORD *)this + 4);
                  if (v136 <= 0x20)
                    v136 = 32;
                  *((_QWORD *)this + 4) = v136;
                  v137 = v136 + 8;
                  v138 = malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
                  v139 = (char *)v138 + v137;
                  *v138 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v138 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v139;
                  *((_QWORD *)this + 3) = v138;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 189;
                goto LABEL_156;
              case 'n':
                v140 = *((_DWORD *)this + 24);
                if (!v140)
                  goto LABEL_226;
                v141 = v140 - 1;
                v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v141);
                if (*(_WORD *)(v37 + 16) != 232)
                  goto LABEL_226;
                *((_DWORD *)this + 24) = v141;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v142 = 2 * *((_QWORD *)this + 4);
                  if (v142 <= 0x20)
                    v142 = 32;
                  *((_QWORD *)this + 4) = v142;
                  v143 = v142 + 8;
                  v144 = malloc_type_malloc(v142 + 8, 0xD0263BC5uLL);
                  v145 = (char *)v144 + v143;
                  *v144 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v145;
                  *((_QWORD *)this + 3) = v144;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 159;
                goto LABEL_156;
              case 'o':
                v146 = *((_DWORD *)this + 24);
                if (!v146)
                  goto LABEL_226;
                v147 = v146 - 1;
                v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v147);
                *((_DWORD *)this + 24) = v147;
                if (!v37)
                  goto LABEL_226;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v148 = 2 * *((_QWORD *)this + 4);
                  if (v148 <= 0x20)
                    v148 = 32;
                  *((_QWORD *)this + 4) = v148;
                  v149 = v148 + 8;
                  v150 = malloc_type_malloc(v148 + 8, 0xD0263BC5uLL);
                  v151 = (char *)v150 + v149;
                  *v150 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v150 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v151;
                  *((_QWORD *)this + 3) = v150;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 303;
                goto LABEL_156;
              case 'p':
                v152 = swift::Demangle::__runtime::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v152)
                  goto LABEL_226;
                v37 = v152;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v153 = 2 * *((_QWORD *)this + 4);
                  if (v153 <= 0x20)
                    v153 = 32;
                  *((_QWORD *)this + 4) = v153;
                  v154 = v153 + 8;
                  v155 = malloc_type_malloc(v153 + 8, 0xD0263BC5uLL);
                  v156 = (char *)v155 + v154;
                  *v155 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v156;
                  *((_QWORD *)this + 3) = v155;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 184;
                goto LABEL_156;
              case 'r':
                v157 = swift::Demangle::__runtime::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v157)
                  goto LABEL_226;
                v37 = v157;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v158 = 2 * *((_QWORD *)this + 4);
                  if (v158 <= 0x20)
                    v158 = 32;
                  *((_QWORD *)this + 4) = v158;
                  v159 = v158 + 8;
                  v160 = malloc_type_malloc(v158 + 8, 0xD0263BC5uLL);
                  v161 = (char *)v160 + v159;
                  *v160 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v161;
                  *((_QWORD *)this + 3) = v160;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 187;
                goto LABEL_156;
              default:
                goto LABEL_158;
            }
          }
          v19 = v6;
LABEL_158:
          v13 = v19 - 2;
          goto LABEL_9;
        case 0x49:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleImplFunctionType(this, v11, a3, a4, a5);
        case 0x4B:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v30 = 2 * *((_QWORD *)this + 4);
            if (v30 <= 0x20)
              v30 = 32;
            *((_QWORD *)this + 4) = v30;
            v31 = v30 + 8;
            v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
            v33 = (char *)v32 + v31;
            *v32 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v33;
            *((_QWORD *)this + 3) = v32;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 272;
          goto LABEL_135;
        case 0x4C:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleLocalIdentifier(this, v11, a3, a4, a5);
        case 0x4D:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleMetatype(this, v11, a3, a4, a5);
        case 0x4E:
          v35 = *((_DWORD *)this + 24);
          if (!v35)
            goto LABEL_226;
          v36 = v35 - 1;
          v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v36);
          if (*(_WORD *)(v37 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v36;
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v38 = 2 * *((_QWORD *)this + 4);
            if (v38 <= 0x20)
              v38 = 32;
            *((_QWORD *)this + 4) = v38;
            v39 = v38 + 8;
            v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
            v41 = (char *)v40 + v39;
            *v40 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v41;
            *((_QWORD *)this + 3) = v40;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v42 = 237;
          goto LABEL_156;
        case 0x4F:
          v18 = 61;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x50:
          v18 = 180;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x51:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleArchetype(this, v11, a3, a4, a5);
        case 0x52:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericRequirement(this, v11, a3, a4, a5);
        case 0x53:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleStandardSubstitution(this);
        case 0x54:
          return swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization(this, v11, a3, a4, a5);
        case 0x56:
          v18 = 219;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x57:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleWitness(this, v11, a3, a4, a5);
        case 0x58:
          return swift::Demangle::__runtime::Demangler::demangleSpecialType(this, v11, a3, a4, a5);
        case 0x59:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleTypeAnnotation(this, v11, a3, a4, a5);
        case 0x5A:
          v43 = *((_DWORD *)this + 24);
          if (!v43)
            goto LABEL_226;
          v44 = v43 - 1;
          v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v43 - 1));
          v45 = *(unsigned __int16 *)(v37 + 16);
          if (v45 != 232 && !swift::Demangle::__runtime::isContext(v45))
            goto LABEL_226;
          *((_DWORD *)this + 24) = v44;
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v46 = 2 * *((_QWORD *)this + 4);
            if (v46 <= 0x20)
              v46 = 32;
            *((_QWORD *)this + 4) = v46;
            v47 = v46 + 8;
            v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
            v49 = (char *)v48 + v47;
            *v48 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v49;
            *((_QWORD *)this + 3) = v48;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v42 = 218;
          goto LABEL_156;
        case 0x5F:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v50 = 2 * *((_QWORD *)this + 4);
            if (v50 <= 0x20)
              v50 = 32;
            *((_QWORD *)this + 4) = v50;
            v51 = v50 + 8;
            v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
            v53 = (char *)v52 + v51;
            *v52 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v53;
            *((_QWORD *)this + 3) = v52;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 275;
          goto LABEL_135;
        case 0x61:
          v18 = 234;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x63:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0, a4, a5);
        case 0x64:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v54 = 2 * *((_QWORD *)this + 4);
            if (v54 <= 0x20)
              v54 = 32;
            *((_QWORD *)this + 4) = v54;
            v55 = v54 + 8;
            v56 = malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
            v57 = (char *)v56 + v55;
            *v56 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v57;
            *((_QWORD *)this + 3) = v56;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 276;
          goto LABEL_135;
        case 0x66:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleFunctionEntity(this, v11, a3, a4, a5);
        case 0x67:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance(this);
        case 0x68:
          v58 = *((_DWORD *)this + 24);
          if (!v58)
            goto LABEL_226;
          v59 = v58 - 1;
          v60 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v58 - 1));
          if (*(_WORD *)(v60 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v59;
          v61 = *(unsigned __int8 *)(v60 + 18);
          if (v61 == 1)
            goto LABEL_84;
          if (v61 != 5 || *(_DWORD *)(v60 + 8) != 1)
            goto LABEL_226;
          v60 = *(_QWORD *)v60;
LABEL_84:
          v29 = *(_QWORD *)v60;
          if (!*(_QWORD *)v60)
            goto LABEL_227;
          v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v37;
          if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
          {
            v62 = 2 * *((_QWORD *)this + 4);
            if (v62 <= 0x20)
              v62 = 32;
            *((_QWORD *)this + 4) = v62;
            v63 = v62 + 8;
            v64 = malloc_type_malloc(v62 + 8, 0xD0263BC5uLL);
            v65 = (char *)v64 + v63;
            *v64 = *((_QWORD *)this + 3);
            v37 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v65;
            *((_QWORD *)this + 3) = v64;
          }
          *((_QWORD *)this + 1) = v37 + 24;
          v66 = 208;
          goto LABEL_149;
        case 0x69:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleSubscript(this, v11, a3, a4, a5);
        case 0x6C:
          v67 = 0;
          return swift::Demangle::__runtime::Demangler::demangleGenericSignature(this, v67, a3, a4, a5);
        case 0x6D:
          v68 = *((_DWORD *)this + 24);
          if (!v68)
            goto LABEL_226;
          v69 = v68 - 1;
          v29 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v69);
          if (*(_WORD *)(v29 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v69;
          v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v37;
          if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
          {
            v70 = 2 * *((_QWORD *)this + 4);
            if (v70 <= 0x20)
              v70 = 32;
            *((_QWORD *)this + 4) = v70;
            v71 = v70 + 8;
            v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
            v73 = (char *)v72 + v71;
            *v72 = *((_QWORD *)this + 3);
            v37 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v73;
            *((_QWORD *)this + 3) = v72;
          }
          *((_QWORD *)this + 1) = v37 + 24;
          v66 = 145;
          goto LABEL_149;
        case 0x6E:
          v74 = *((_DWORD *)this + 24);
          if (!v74)
            goto LABEL_226;
          v75 = v74 - 1;
          v76 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v74 - 1));
          if (*(_WORD *)(v76 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v75;
          v77 = *(unsigned __int8 *)(v76 + 18);
          if (v77 == 1)
            goto LABEL_107;
          if (v77 != 5 || *(_DWORD *)(v76 + 8) != 1)
            goto LABEL_226;
          v76 = *(_QWORD *)v76;
LABEL_107:
          v29 = *(_QWORD *)v76;
          if (!*(_QWORD *)v76)
            goto LABEL_227;
          v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v37;
          if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
          {
            v78 = 2 * *((_QWORD *)this + 4);
            if (v78 <= 0x20)
              v78 = 32;
            *((_QWORD *)this + 4) = v78;
            v79 = v78 + 8;
            v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
            v81 = (char *)v80 + v79;
            *v80 = *((_QWORD *)this + 3);
            v37 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v81;
            *((_QWORD *)this + 3) = v80;
          }
          *((_QWORD *)this + 1) = v37 + 24;
          v66 = 209;
          goto LABEL_149;
        case 0x6F:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(this);
        case 0x70:
          DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleProtocolList(this, v11, a3, a4, a5);
          if (!DependentGenericParamType)
            goto LABEL_226;
          goto LABEL_128;
        case 0x71:
          DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this, v11, a3, a4, a5);
          if (!DependentGenericParamType)
            goto LABEL_226;
          goto LABEL_128;
        case 0x72:
          v67 = 1;
          return swift::Demangle::__runtime::Demangler::demangleGenericSignature(this, v67, a3, a4, a5);
        case 0x73:
          v15 = "Swift";
          v17 = 153;
          v16 = 5;
          return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v17, v15, v16);
        case 0x74:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::popTuple(this, v11, a3, a4, a5);
        case 0x75:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericType(this, v11, a3, a4, a5);
        case 0x76:
          v83 = swift::Demangle::__runtime::Demangler::demangleEntity(this, 254, a3, a4, a5);
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAccessor(this, v83, v84, v85, v86);
        case 0x77:
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleValueWitness(this, v11, a3, a4, a5);
        case 0x78:
          DependentGenericParamType = swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0, a4, a5);
          if (!DependentGenericParamType)
            goto LABEL_226;
LABEL_128:
          v37 = DependentGenericParamType;
          goto LABEL_150;
        case 0x79:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v87 = 2 * *((_QWORD *)this + 4);
            if (v87 <= 0x20)
              v87 = 32;
            *((_QWORD *)this + 4) = v87;
            v88 = v87 + 8;
            v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
            v90 = (char *)v89 + v88;
            *v89 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v90;
            *((_QWORD *)this + 3) = v89;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 274;
LABEL_135:
          *(_WORD *)(v29 + 16) = v34;
          *(_BYTE *)(v29 + 18) = 0;
          goto LABEL_227;
        case 0x7A:
          v91 = *((_DWORD *)this + 24);
          if (!v91)
            goto LABEL_226;
          v92 = v91 - 1;
          v93 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v91 - 1));
          if (*(_WORD *)(v93 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v92;
          v94 = *(unsigned __int8 *)(v93 + 18);
          if (v94 == 1)
            goto LABEL_142;
          if (v94 == 5 && *(_DWORD *)(v93 + 8) == 1)
          {
            v93 = *(_QWORD *)v93;
LABEL_142:
            v29 = *(_QWORD *)v93;
            if (*(_QWORD *)v93)
            {
              v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = v37;
              if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
              {
                v95 = 2 * *((_QWORD *)this + 4);
                if (v95 <= 0x20)
                  v95 = 32;
                *((_QWORD *)this + 4) = v95;
                v96 = v95 + 8;
                v97 = malloc_type_malloc(v95 + 8, 0xD0263BC5uLL);
                v98 = (char *)v97 + v96;
                *v97 = *((_QWORD *)this + 3);
                v37 = ((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = v98;
                *((_QWORD *)this + 3) = v97;
              }
              *((_QWORD *)this + 1) = v37 + 24;
              v66 = 123;
LABEL_149:
              *(_WORD *)(v37 + 16) = v66;
              *(_BYTE *)(v37 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v37, (swift::Demangle::__runtime::Node *)v29, this, a4, a5);
LABEL_150:
              v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = v29;
              if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
              {
                v99 = 2 * *((_QWORD *)this + 4);
                if (v99 <= 0x20)
                  v99 = 32;
                *((_QWORD *)this + 4) = v99;
                v100 = v99 + 8;
                v101 = malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
                v102 = (char *)v101 + v100;
                *v101 = *((_QWORD *)this + 3);
                v29 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = v102;
                *((_QWORD *)this + 3) = v101;
              }
              *((_QWORD *)this + 1) = v29 + 24;
              v42 = 232;
LABEL_156:
              *(_WORD *)(v29 + 16) = v42;
              *(_BYTE *)(v29 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v29, (swift::Demangle::__runtime::Node *)v37, this, a4, a5);
            }
          }
          else
          {
LABEL_226:
            v29 = 0;
          }
LABEL_227:
          result = (int8x16_t *)v29;
          break;
        case 0xFF:
          continue;
        default:
          goto LABEL_8;
      }
    }
    return result;
  }
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::addChild(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, uint64_t a4, const char *a5)
{
  swift::Demangle::__runtime::Node *result;

  result = 0;
  if (a2)
  {
    if (a3)
    {
      swift::Demangle::__runtime::Node::addChild((unsigned int *)a2, a3, this, a4, a5);
      return a2;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChild(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, uint64_t a4, const char *a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;

  if (!a3)
    return 0;
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v12;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, a3, a1, a4, a5);
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::createType(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;

  if (!a2)
    return 0;
  v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
  {
    v8 = 2 * *((_QWORD *)this + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)this + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v11 = (char *)v10 + v9;
    *v10 = *((_QWORD *)this + 3);
    v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v11;
    *((_QWORD *)this + 3) = v10;
  }
  *((_QWORD *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 232;
  *(_BYTE *)(v7 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, a2, this, a4, a5);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, const char *a5)
{
  unint64_t v5;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  const char *v15;

  v5 = 0;
  if (a3 && a4)
  {
    v5 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v5;
    if (!v5 || v5 + 24 > *((_QWORD *)a1 + 2))
    {
      v10 = 2 * *((_QWORD *)a1 + 4);
      if (v10 <= 0x20)
        v10 = 32;
      *((_QWORD *)a1 + 4) = v10;
      v11 = v10 + 8;
      v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
      v13 = (char *)v12 + v11;
      *v12 = *((_QWORD *)a1 + 3);
      v5 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v13;
      *((_QWORD *)a1 + 3) = v12;
    }
    *((_QWORD *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(_BYTE *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a4, a1, v14, v15);
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, char *a5)
{
  unint64_t v5;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;

  v5 = 0;
  if (a3 && a4 && a5)
  {
    v5 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v5;
    if (!v5 || v5 + 24 > *((_QWORD *)a1 + 2))
    {
      v11 = 2 * *((_QWORD *)a1 + 4);
      if (v11 <= 0x20)
        v11 = 32;
      *((_QWORD *)a1 + 4) = v11;
      v12 = v11 + 8;
      v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      v14 = (char *)v13 + v12;
      *v13 = *((_QWORD *)a1 + 3);
      v5 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v14;
      *((_QWORD *)a1 + 3) = v13;
    }
    *((_QWORD *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(_BYTE *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, a4, a1, v15, v16);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, (swift::Demangle::__runtime::Node *)a5, a1, v17, v18);
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, char *a5, swift::Demangle::__runtime::Node *a6)
{
  unint64_t v6;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;

  v6 = 0;
  if (a3 && a4 && a5 && a6)
  {
    v6 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v6;
    if (!v6 || v6 + 24 > *((_QWORD *)a1 + 2))
    {
      v13 = 2 * *((_QWORD *)a1 + 4);
      if (v13 <= 0x20)
        v13 = 32;
      *((_QWORD *)a1 + 4) = v13;
      v14 = v13 + 8;
      v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      v16 = (char *)v15 + v14;
      *v15 = *((_QWORD *)a1 + 3);
      v6 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v16;
      *((_QWORD *)a1 + 3) = v15;
    }
    *((_QWORD *)a1 + 1) = v6 + 24;
    *(_WORD *)(v6 + 16) = a2;
    *(_BYTE *)(v6 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, a4, a1, v17, v18);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)a5, a1, v19, v20);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, a6, a1, v21, v22);
  }
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::changeKind(swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node **a2, __int16 a3, uint64_t a4, const char *a5)
{
  int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  swift::Demangle::__runtime::Node *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  int v24;
  swift::Demangle::__runtime::Node **v25;
  swift::Demangle::__runtime::Node *v26;
  swift::Demangle::__runtime::Node **v27;
  swift::Demangle::__runtime::Node *v28;
  __int128 v30;

  if (!a2)
    return 0;
  v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 == 4)
  {
    v15 = *a2;
    v10 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)a1 + 2))
    {
      v16 = 2 * *((_QWORD *)a1 + 4);
      if (v16 <= 0x20)
        v16 = 32;
      *((_QWORD *)a1 + 4) = v16;
      v17 = v16 + 8;
      v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      v19 = (char *)v18 + v17;
      *v18 = *((_QWORD *)a1 + 3);
      v10 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v19;
      *((_QWORD *)a1 + 3) = v18;
    }
    *((_QWORD *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 4;
    *(_QWORD *)v10 = v15;
  }
  else if (v8 == 3)
  {
    v9 = *(_OWORD *)a2;
    v10 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)a1 + 2))
    {
      v11 = 2 * *((_QWORD *)a1 + 4);
      if (v11 <= 0x20)
        v11 = 32;
      *((_QWORD *)a1 + 4) = v11;
      v12 = v11 + 8;
      v30 = v9;
      v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      v9 = v30;
      v14 = (char *)v13 + v12;
      *v13 = *((_QWORD *)a1 + 3);
      v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v14;
      *((_QWORD *)a1 + 3) = v13;
    }
    *((_QWORD *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 3;
    *(_OWORD *)v10 = v9;
  }
  else
  {
    v10 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)a1 + 2))
    {
      v20 = 2 * *((_QWORD *)a1 + 4);
      if (v20 <= 0x20)
        v20 = 32;
      *((_QWORD *)a1 + 4) = v20;
      v21 = v20 + 8;
      v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v23 = (char *)v22 + v21;
      *v22 = *((_QWORD *)a1 + 3);
      v10 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v23;
      *((_QWORD *)a1 + 3) = v22;
    }
    *((_QWORD *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 0;
  }
  v24 = *((unsigned __int8 *)a2 + 18);
  v25 = a2;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      v26 = *a2;
      v25 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_31:
      v27 = (swift::Demangle::__runtime::Node **)((char *)v26 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_36;
    }
    v25 = 0;
  }
  switch(v24)
  {
    case 1:
      v27 = a2 + 1;
      break;
    case 2:
      v27 = a2 + 2;
      break;
    case 5:
      v26 = *a2;
      goto LABEL_31;
    default:
      v27 = 0;
      break;
  }
LABEL_36:
  while (v25 != v27)
  {
    v28 = *v25++;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, v28, a1, a4, a5);
  }
  return v10;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeMangling(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  swift::Demangle::__runtime::Node *v8;
  uint64_t v9;
  const char *v10;
  swift::Demangle::__runtime::Node *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t result;

  v6 = *((_DWORD *)this + 24);
  if (v6
    && (v7 = v6 - 1,
        v8 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v7),
        *((_WORD *)v8 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v7;
  }
  else
  {
    v8 = 0;
  }
  v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v8, a3, a4, a5);
  v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v12;
  if (!v12 || v12 + 24 > *((_QWORD *)this + 2))
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
  }
  *((_QWORD *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 236;
  *(_BYTE *)(v12 + 18) = 0;
  if (v11 && v12)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, v11, this, v9, v10);
  result = 0;
  if (v8)
  {
    if (v12)
    {
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, v8, this, v9, v10);
      return v12;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParamLabels(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int8x16_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  int v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  int v31;
  uint64_t **v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  int v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t *v64;
  __int128 *v65;
  int v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  __int128 v73;

  if (!*((_BYTE *)this + 80))
  {
    v8 = *((_DWORD *)this + 24);
    if (v8)
    {
      v9 = v8 - 1;
      if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v9) + 16) == 274)
      {
        *((_DWORD *)this + 24) = v9;
        v10 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 1) = v10;
        if (!v10 || (unint64_t)&v10[1].u64[1] > *((_QWORD *)this + 2))
        {
          v11 = 2 * *((_QWORD *)this + 4);
          if (v11 <= 0x20)
            v11 = 32;
          *((_QWORD *)this + 4) = v11;
          v12 = v11 + 8;
          v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
          v14 = (char *)v13 + v12;
          *v13 = *((_QWORD *)this + 3);
          v10 = (int8x16_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
          *((_QWORD *)this + 2) = v14;
          *((_QWORD *)this + 3) = v13;
        }
        *((_QWORD *)this + 1) = (char *)v10 + 24;
        v10[1].i16[0] = 290;
        v10[1].i8[2] = 0;
        return (unint64_t)v10;
      }
    }
  }
  if (!a2 || *((_WORD *)a2 + 8) != 232)
    return 0;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_8;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_8:
    v7 = *(uint64_t **)a2;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_18:
  if (*((_WORD *)v7 + 8) != 44)
    goto LABEL_31;
  v15 = *((unsigned __int8 *)v7 + 18);
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v7 + 2) < 2u)
    {
      v16 = 0;
      goto LABEL_25;
    }
    v7 = (uint64_t *)*v7;
  }
  v16 = (uint64_t *)v7[1];
LABEL_25:
  v17 = *((unsigned __int8 *)v16 + 18);
  if ((v17 - 1) >= 2)
  {
    if (v17 != 5 || !*((_DWORD *)v16 + 2))
    {
      v7 = 0;
      goto LABEL_31;
    }
    v16 = (uint64_t *)*v16;
  }
  v7 = (uint64_t *)*v16;
LABEL_31:
  v18 = *((unsigned __int16 *)v7 + 8);
  if (v18 != 82 && v18 != 65)
    return 0;
  v19 = *((unsigned __int8 *)v7 + 18);
  v20 = v19 - 1;
  v21 = v7;
  if ((v19 - 1) >= 2)
    v21 = (uint64_t *)*v7;
  v22 = *(unsigned __int16 *)(*v21 + 16) == 349;
  if (v20 >= 2)
  {
    v23 = (uint64_t *)*v7;
    if (*(_WORD *)(*(_QWORD *)(*v7 + 8 * v22) + 16) == 67)
      v22 = (v22 + 1);
    else
      v22 = v22;
  }
  else
  {
    if (*(_WORD *)(v7[v22] + 16) == 67)
      v22 = (v22 + 1);
    else
      v22 = v22;
    v23 = v7;
  }
  if (*(_WORD *)(v23[v22] + 16) == 129)
    v22 = (v22 + 1);
  else
    v22 = v22;
  if (v19 == 5)
  {
    v24 = (uint64_t *)*v7;
    if (*(_WORD *)(*(_QWORD *)(*v7 + 8 * v22) + 16) == 130)
      LODWORD(v22) = v22 + 1;
    if (*(_WORD *)(v24[v22] + 16) == 68)
      v22 = (v22 + 1);
    else
      v22 = v22;
  }
  else
  {
    if (v19 == 2)
    {
      if (*(_WORD *)(v7[v22] + 16) == 130)
        v22 = (v22 + 1);
      else
        v22 = v22;
    }
    else
    {
      v22 = *(unsigned __int16 *)(v7[v22] + 16) == 130;
    }
    if (*(_WORD *)(v7[v22] + 16) == 68)
      v22 = (v22 + 1);
    else
      v22 = v22;
    v24 = v7;
  }
  if (*(_WORD *)(v24[v22] + 16) == 272)
    goto LABEL_65;
  v25 = v7;
  if (v20 >= 2)
    v25 = (uint64_t *)*v7;
  if (*(_WORD *)(v25[v22] + 16) == 273)
LABEL_65:
    v22 = (v22 + 1);
  if (v19 == 5)
  {
    v27 = *((unsigned int *)v7 + 2);
    v28 = (uint64_t *)*v7;
    if (*(_WORD *)(*(_QWORD *)(*v7 + 8 * v22) + 16) == 66)
      LODWORD(v22) = v22 + 1;
    if (*(_WORD *)(v28[v22] + 16) == 271)
      LODWORD(v22) = v22 + 1;
    if (*(_WORD *)(v28[v22] + 16) == 348)
      LODWORD(v22) = v22 + 1;
  }
  else if (v19 == 2)
  {
    if (*(_WORD *)(v7[v22] + 16) == 66)
      v26 = v22 + 1;
    else
      v26 = v22;
    if (*(_WORD *)(v7[v26] + 16) == 271)
      ++v26;
    if (*(_WORD *)(v7[v26] + 16) == 348)
      LODWORD(v22) = v26 + 1;
    else
      LODWORD(v22) = v26;
    v27 = 2;
  }
  else
  {
    if (*(_WORD *)(v7[v22] + 16) == 66)
      v29 = v22 + 1;
    else
      v29 = v22;
    LODWORD(v22) = *(unsigned __int16 *)(v7[*(_WORD *)(v7[v29] + 16) == 271] + 16) == 348;
    v27 = 1;
  }
  if (v27 <= v22)
  {
    v30 = 0;
  }
  else
  {
    if (v20 >= 2)
      v7 = (uint64_t *)*v7;
    v30 = (uint64_t *)v7[v22];
  }
  v31 = *((unsigned __int8 *)v30 + 18);
  v32 = (uint64_t **)v30;
  if ((v31 - 1) < 2)
    goto LABEL_97;
  if (v31 == 5 && *((_DWORD *)v30 + 2))
  {
    v32 = (uint64_t **)*v30;
LABEL_97:
    v33 = *v32;
    goto LABEL_99;
  }
  v33 = 0;
LABEL_99:
  v34 = *((unsigned __int8 *)v33 + 18);
  if ((v34 - 1) < 2)
  {
LABEL_103:
    v35 = (uint64_t *)*v33;
    goto LABEL_105;
  }
  if (v34 == 5 && *((_DWORD *)v33 + 2))
  {
    v33 = (uint64_t *)*v33;
    goto LABEL_103;
  }
  v35 = 0;
LABEL_105:
  if (*((_WORD *)v35 + 8) == 223)
  {
    v36 = *((unsigned __int8 *)v35 + 18);
    if (v36 != 1)
    {
      if (v36 == 5)
      {
        v36 = *((_DWORD *)v35 + 2);
        if (!v36)
          return 0;
      }
      else if (v36 != 2)
      {
        return 0;
      }
    }
  }
  else
  {
    v36 = 1;
  }
  v10 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v10;
  if (!v10 || (unint64_t)&v10[1].u64[1] > *((_QWORD *)this + 2))
  {
    v37 = 2 * *((_QWORD *)this + 4);
    if (v37 <= 0x20)
      v37 = 32;
    *((_QWORD *)this + 4) = v37;
    v38 = v37 + 8;
    v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    v40 = (char *)v39 + v38;
    *v39 = *((_QWORD *)this + 3);
    v10 = (int8x16_t *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v40;
    *((_QWORD *)this + 3) = v39;
  }
  *((_QWORD *)this + 1) = (char *)v10 + 24;
  v10[1].i16[0] = 290;
  v10[1].i8[2] = 0;
  v41 = *((unsigned __int8 *)v30 + 18);
  if ((v41 - 1) < 2)
    goto LABEL_120;
  if (v41 == 5 && *((_DWORD *)v30 + 2))
  {
    v30 = (uint64_t *)*v30;
LABEL_120:
    v42 = (uint64_t *)*v30;
    goto LABEL_122;
  }
  v42 = 0;
LABEL_122:
  v43 = *((unsigned __int8 *)v42 + 18);
  if ((v43 - 1) < 2)
    goto LABEL_126;
  if (v43 == 5 && *((_DWORD *)v42 + 2))
  {
    v42 = (uint64_t *)*v42;
LABEL_126:
    v44 = (uint64_t *)*v42;
    if (!*((_BYTE *)this + 80))
      goto LABEL_131;
LABEL_129:
    if (!v44 || *((_WORD *)v44 + 8) != 223)
      return (unint64_t)v10;
    goto LABEL_131;
  }
  v44 = 0;
  if (*((_BYTE *)this + 80))
    goto LABEL_129;
LABEL_131:
  v45 = 0;
  v46 = 0;
  do
  {
    if (!*((_BYTE *)this + 80))
    {
      v56 = *((_DWORD *)this + 24);
      if (v56)
      {
        v57 = v56 - 1;
        v51 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v57);
        *((_DWORD *)this + 24) = v57;
        if (v51)
        {
          v58 = *(unsigned __int16 *)(v51 + 16);
          if (v58 == 275 || v58 == 101)
            goto LABEL_136;
        }
      }
      return 0;
    }
    v52 = *((unsigned __int8 *)v44 + 18);
    v53 = v52 - 1;
    if ((_DWORD)v52 == 1)
      goto LABEL_142;
    if ((_DWORD)v52 != 5)
    {
      if ((_DWORD)v52 != 2)
        goto LABEL_152;
      v52 = 2;
LABEL_142:
      if (v52 > v45)
        goto LABEL_143;
      goto LABEL_152;
    }
    if (*((unsigned int *)v44 + 2) > v45)
    {
LABEL_143:
      v54 = v44;
      if (v53 >= 2)
        v54 = (uint64_t *)*v44;
      v55 = (uint64_t *)v54[v45];
      goto LABEL_153;
    }
LABEL_152:
    v55 = 0;
LABEL_153:
    v59 = *((unsigned __int8 *)v55 + 18);
    switch(v59)
    {
      case 1:
        v60 = *((unsigned __int8 *)v55 + 18);
        break;
      case 5:
        v60 = *((unsigned int *)v55 + 2);
        if (!(_DWORD)v60)
        {
LABEL_171:
          v51 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v51;
          if (!v51 || v51 + 24 > *((_QWORD *)this + 2))
          {
            v47 = 2 * *((_QWORD *)this + 4);
            if (v47 <= 0x20)
              v47 = 32;
            *((_QWORD *)this + 4) = v47;
            v48 = v47 + 8;
            v49 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
            v50 = (char *)v49 + v48;
            *v49 = *((_QWORD *)this + 3);
            v51 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v50;
            *((_QWORD *)this + 3) = v49;
          }
          *((_QWORD *)this + 1) = v51 + 24;
          *(_WORD *)(v51 + 16) = 275;
          *(_BYTE *)(v51 + 18) = 0;
          goto LABEL_136;
        }
        break;
      case 2:
        v60 = 2;
        break;
      default:
        goto LABEL_171;
    }
    v61 = 0;
    v62 = 1;
    while (1)
    {
      v63 = *((unsigned __int8 *)v55 + 18);
      if (v59 == 1)
        goto LABEL_163;
      if (v59 != 5)
      {
        v63 = 2;
LABEL_163:
        if (v63 <= v61)
          goto LABEL_168;
        goto LABEL_164;
      }
      if (*((unsigned int *)v55 + 2) <= v61)
      {
LABEL_168:
        v65 = 0;
        goto LABEL_169;
      }
LABEL_164:
      v64 = v55;
      if ((v59 - 1) >= 2)
        v64 = (uint64_t *)*v55;
      v65 = (__int128 *)v64[v61];
LABEL_169:
      if (*((_WORD *)v65 + 8) == 225)
        break;
      ++v61;
      ++v62;
      if (v60 == v61)
        goto LABEL_171;
    }
    if (v59 == 5)
    {
      v66 = *((_DWORD *)v55 + 2);
      if ((_DWORD)v61 - v66 == -1)
      {
        *((_DWORD *)v55 + 2) = v61;
      }
      else
      {
        do
        {
          *(_QWORD *)(*v55 + 8 * (v62 - 1)) = *(_QWORD *)(*v55 + 8 * v62);
          ++v62;
        }
        while (v66 != v62);
        --*((_DWORD *)v55 + 2);
      }
    }
    else if (v59 == 2)
    {
      if (!(_DWORD)v61)
        *v55 = v55[1];
      *((_BYTE *)v55 + 18) = 1;
    }
    else
    {
      *((_BYTE *)v55 + 18) = 0;
    }
    v67 = *v65;
    v51 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v51;
    if (!v51 || v51 + 24 > *((_QWORD *)this + 2))
    {
      v68 = 2 * *((_QWORD *)this + 4);
      if (v68 <= 0x20)
        v68 = 32;
      *((_QWORD *)this + 4) = v68;
      v69 = v68 + 8;
      v73 = v67;
      v70 = malloc_type_malloc(v68 + 8, 0xD0263BC5uLL);
      v67 = v73;
      v71 = (char *)v70 + v69;
      *v70 = *((_QWORD *)this + 3);
      v51 = ((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v71;
      *((_QWORD *)this + 3) = v70;
    }
    *((_QWORD *)this + 1) = v51 + 24;
    *(_WORD *)(v51 + 16) = 101;
    *(_BYTE *)(v51 + 18) = 3;
    *(_OWORD *)v51 = v67;
LABEL_136:
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, (swift::Demangle::__runtime::Node *)v51, this, a4, a5);
    v46 |= *(unsigned __int16 *)(v51 + 16) != 275;
    ++v45;
  }
  while (v45 != v36);
  if ((v46 & 1) == 0)
    return swift::Demangle::__runtime::NodeFactory::createNode(this, 290);
  if (!*((_BYTE *)this + 80))
    swift::Demangle::__runtime::Node::reverseChildren(v10, 0);
  return (unint64_t)v10;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleSymbolicReference(swift::Demangle::__runtime::Demangler *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  int v17;
  char v18;
  _DWORD *v19;

  v2 = *((_QWORD *)this + 9);
  v3 = v2 + 4;
  if ((unint64_t)(v2 + 4) > *((_QWORD *)this + 8))
    return 0;
  v5 = 0;
  v6 = (_DWORD *)(*((_QWORD *)this + 7) + v2);
  v7 = *v6;
  *((_QWORD *)this + 9) = v3;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  switch(a2)
  {
    case 1:
      goto LABEL_10;
    case 2:
      v8 = 0;
      v9 = 0;
      v10 = 1;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
      goto LABEL_11;
    case 9:
      v11 = 0;
      v8 = 0;
      v10 = 0;
      v9 = 1;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
      goto LABEL_11;
    case 10:
      v11 = 0;
      v8 = 0;
      v10 = 0;
      v9 = 2;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
      goto LABEL_11;
    case 11:
      v11 = 0;
      v8 = 0;
      v10 = 0;
      v9 = 3;
LABEL_10:
      v12 = *((_QWORD *)this + 71);
      if (v12)
        goto LABEL_11;
      return 0;
    case 12:
      v11 = 0;
      v10 = 0;
      v9 = 4;
      v8 = 1;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
LABEL_11:
      v18 = v9;
      v16 = v7;
      v17 = v10;
      v19 = v6;
      v13 = (*(uint64_t (**)(uint64_t, char *, int *, int *, _DWORD **))(*(_QWORD *)v12 + 48))(v12, &v18, &v17, &v16, &v19);
      v5 = v13;
      if (v13)
      {
        if ((v11 | v8) == 1)
        {
          v14 = *(unsigned __int16 *)(v13 + 16);
          if (v14 != 301 && v14 != 309)
          {
            v19 = (_DWORD *)v13;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v19, this);
          }
        }
      }
      break;
    default:
      return v5;
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeAnnotation(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  __int16 v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  __int16 v59;
  int v61;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  int v77;
  int v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  char *v88;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v8 = 0;
  v9 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v10 = *((_QWORD *)this + 7);
  switch(*(_BYTE *)(v10 + v5))
  {
    case 'A':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v11 = 2 * *((_QWORD *)this + 4);
        if (v11 <= 0x20)
          v11 = 32;
        *((_QWORD *)this + 4) = v11;
        v12 = v11 + 8;
        v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        v14 = (char *)v13 + v12;
        *v13 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v14;
        *((_QWORD *)this + 3) = v13;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 129;
      goto LABEL_50;
    case 'K':
      v16 = *((_DWORD *)this + 24);
      if (!v16)
        return 0;
      v17 = v16 - 1;
      v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v16 - 1));
      if (*(_WORD *)(v18 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v17;
      v19 = *(unsigned __int8 *)(v18 + 18);
      if (v19 == 1)
        goto LABEL_15;
      if (v19 != 5 || *(_DWORD *)(v18 + 8) != 1)
        return 0;
      v18 = *(_QWORD *)v18;
LABEL_15:
      v20 = *(_QWORD *)v18;
      if (!*(_QWORD *)v18)
        return 0;
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v25 = 273;
      goto LABEL_124;
    case 'L':
      if (v9 >= v6)
        return 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v26 = *(char *)(v10 + v9);
      if ((_DWORD)v26 == 115)
        goto LABEL_26;
      if ((_DWORD)v26 != 105)
        return 0;
      v26 = 105;
LABEL_26:
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v27 = 2 * *((_QWORD *)this + 4);
        if (v27 <= 0x20)
          v27 = 32;
        *((_QWORD *)this + 4) = v27;
        v28 = v27 + 8;
        v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        v30 = (char *)v29 + v28;
        *v29 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v30;
        *((_QWORD *)this + 3) = v29;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 349;
      *(_BYTE *)(v8 + 18) = 4;
      *(_QWORD *)v8 = v26;
      return v8;
    case 'T':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v31 = 2 * *((_QWORD *)this + 4);
        if (v31 <= 0x20)
          v31 = 32;
        *((_QWORD *)this + 4) = v31;
        v32 = v31 + 8;
        v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        v34 = (char *)v33 + v32;
        *v33 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v34;
        *((_QWORD *)this + 3) = v33;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 130;
      goto LABEL_50;
    case 'a':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v35 = 2 * *((_QWORD *)this + 4);
        if (v35 <= 0x20)
          v35 = 32;
        *((_QWORD *)this + 4) = v35;
        v36 = v35 + 8;
        v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        v38 = (char *)v37 + v36;
        *v37 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v38;
        *((_QWORD *)this + 3) = v37;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 271;
      goto LABEL_50;
    case 'b':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v39 = 2 * *((_QWORD *)this + 4);
        if (v39 <= 0x20)
          v39 = 32;
        *((_QWORD *)this + 4) = v39;
        v40 = v39 + 8;
        v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
        v42 = (char *)v41 + v40;
        *v41 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v42;
        *((_QWORD *)this + 3) = v41;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 66;
LABEL_50:
      *(_WORD *)(v8 + 16) = v15;
      *(_BYTE *)(v8 + 18) = 0;
      return v8;
    case 'c':
      v43 = *((_DWORD *)this + 24);
      if (!v43)
        return 0;
      v44 = v43 - 1;
      v45 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v43 - 1));
      if (*(_WORD *)(v45 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v44;
      v46 = *(unsigned __int8 *)(v45 + 18);
      if (v46 == 1)
        goto LABEL_57;
      if (v46 != 5 || *(_DWORD *)(v45 + 8) != 1)
        return 0;
      v45 = *(_QWORD *)v45;
LABEL_57:
      v20 = *(_QWORD *)v45;
      if (!*(_QWORD *)v45)
        return 0;
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v47 = 2 * *((_QWORD *)this + 4);
        if (v47 <= 0x20)
          v47 = 32;
        *((_QWORD *)this + 4) = v47;
        v48 = v47 + 8;
        v49 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
        v50 = (char *)v49 + v48;
        *v49 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v50;
        *((_QWORD *)this + 3) = v49;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v25 = 67;
      goto LABEL_124;
    case 'i':
      v51 = *((_DWORD *)this + 24);
      if (!v51)
        return 0;
      v52 = v51 - 1;
      v53 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v51 - 1));
      if (*(_WORD *)(v53 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v52;
      v54 = *(unsigned __int8 *)(v53 + 18);
      if (v54 == 1)
        goto LABEL_70;
      if (v54 != 5 || *(_DWORD *)(v53 + 8) != 1)
        return 0;
      v53 = *(_QWORD *)v53;
LABEL_70:
      v8 = *(_QWORD *)v53;
      if (!*(_QWORD *)v53)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v55 = 2 * *((_QWORD *)this + 4);
        if (v55 <= 0x20)
          v55 = 32;
        *((_QWORD *)this + 4) = v55;
        v56 = v55 + 8;
        v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
        v58 = (char *)v57 + v56;
        *v57 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v58;
        *((_QWORD *)this + 3) = v57;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 127;
      break;
    case 'j':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType(this);
    case 'k':
      v61 = *((_DWORD *)this + 24);
      if (!v61)
        return 0;
      v62 = v61 - 1;
      v63 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v61 - 1));
      if (*(_WORD *)(v63 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v62;
      v64 = *(unsigned __int8 *)(v63 + 18);
      if (v64 == 1)
        goto LABEL_84;
      if (v64 != 5 || *(_DWORD *)(v63 + 8) != 1)
        return 0;
      v63 = *(_QWORD *)v63;
LABEL_84:
      v8 = *(_QWORD *)v63;
      if (!*(_QWORD *)v63)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v65 = 2 * *((_QWORD *)this + 4);
        if (v65 <= 0x20)
          v65 = 32;
        *((_QWORD *)this + 4) = v65;
        v66 = v65 + 8;
        v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
        v68 = (char *)v67 + v66;
        *v67 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v68;
        *((_QWORD *)this + 3) = v67;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 326;
      break;
    case 'l':
      return swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind(this, 0, a3, a4, a5);
    case 't':
      v69 = *((_DWORD *)this + 24);
      if (!v69)
        return 0;
      v70 = v69 - 1;
      v71 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v69 - 1));
      if (*(_WORD *)(v71 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v70;
      v72 = *(unsigned __int8 *)(v71 + 18);
      if (v72 == 1)
        goto LABEL_98;
      if (v72 != 5 || *(_DWORD *)(v71 + 8) != 1)
        return 0;
      v71 = *(_QWORD *)v71;
LABEL_98:
      v8 = *(_QWORD *)v71;
      if (!*(_QWORD *)v71)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v73 = 2 * *((_QWORD *)this + 4);
        if (v73 <= 0x20)
          v73 = 32;
        *((_QWORD *)this + 4) = v73;
        v74 = v73 + 8;
        v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        v76 = (char *)v75 + v74;
        *v75 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v76;
        *((_QWORD *)this + 3) = v75;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 331;
      break;
    case 'u':
      v77 = *((_DWORD *)this + 24);
      if (!v77)
        return 0;
      v78 = v77 - 1;
      v79 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v77 - 1));
      if (*(_WORD *)(v79 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v78;
      v80 = *(unsigned __int8 *)(v79 + 18);
      if (v80 == 1)
        goto LABEL_111;
      if (v80 != 5 || *(_DWORD *)(v79 + 8) != 1)
        return 0;
      v79 = *(_QWORD *)v79;
LABEL_111:
      v8 = *(_QWORD *)v79;
      if (!*(_QWORD *)v79)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v81 = 2 * *((_QWORD *)this + 4);
        if (v81 <= 0x20)
          v81 = 32;
        *((_QWORD *)this + 4) = v81;
        v82 = v81 + 8;
        v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
        v84 = (char *)v83 + v82;
        *v83 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v84;
        *((_QWORD *)this + 3) = v83;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 128;
      break;
    default:
      return v8;
  }
  *(_WORD *)(v20 + 16) = v59;
  *(_BYTE *)(v20 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, (swift::Demangle::__runtime::Node *)v8, this, a4, a5);
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
  {
    v85 = 2 * *((_QWORD *)this + 4);
    if (v85 <= 0x20)
      v85 = 32;
    *((_QWORD *)this + 4) = v85;
    v86 = v85 + 8;
    v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
    v88 = (char *)v87 + v86;
    *v87 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v88;
    *((_QWORD *)this + 3) = v87;
  }
  *((_QWORD *)this + 1) = v8 + 24;
  v25 = 232;
LABEL_124:
  *(_WORD *)(v8 + 16) = v25;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v20, this, a4, a5);
  return v8;
}

uint64_t *swift::Demangle::__runtime::Demangler::popTypeAndGetChild(swift::Demangle::__runtime::Demangler *this)
{
  int v1;
  int v2;
  uint64_t *v3;
  int v4;

  v1 = *((_DWORD *)this + 24);
  if (v1)
  {
    v2 = v1 - 1;
    v3 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * (v1 - 1));
    if (*((_WORD *)v3 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v2;
      v4 = *((unsigned __int8 *)v3 + 18);
      if (v4 == 1)
        return (uint64_t *)*v3;
      if (v4 == 5 && *((_DWORD *)v3 + 2) == 1)
      {
        v3 = (uint64_t *)*v3;
        return (uint64_t *)*v3;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v2 = *((_QWORD *)this + 9);
  if (v2 >= *((_QWORD *)this + 8))
  {
    v3 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v2 + 1;
    v3 = *(char *)(*((_QWORD *)this + 7) + v2);
  }
  HIDWORD(v5) = v3;
  LODWORD(v5) = v3 - 100;
  v4 = v5 >> 1;
  if (v4 > 7 || ((0x93u >> v4) & 1) == 0)
    return 0;
  v7 = qword_B1A58[v4];
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v8 = 2 * *((_QWORD *)this + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)this + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    *v10 = *((_QWORD *)this + 3);
    result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v10 + v9;
    *((_QWORD *)this + 3) = v10;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 68;
  *(_BYTE *)(result + 18) = 4;
  *(_QWORD *)result = v7;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind(swift::Demangle::__runtime::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  int v17;
  int v18;
  swift::Demangle::__runtime::Node *v19;
  int v20;
  swift::Demangle::__runtime::Node *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;

  v5 = *((_QWORD *)this + 9);
  if (v5 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v5 + 1;
  v7 = *(char *)(*((_QWORD *)this + 7) + v5);
  if ((_DWORD)v7 != 115)
  {
    if ((_DWORD)v7 != 105)
      return 0;
    v7 = 105;
  }
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (a2)
  {
    if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
    {
      v9 = 2 * *((_QWORD *)this + 4);
      if (v9 <= 0x20)
        v9 = 32;
      *((_QWORD *)this + 4) = v9;
      v10 = v9 + 8;
      v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      v12 = (char *)v11 + v10;
      *v11 = *((_QWORD *)this + 3);
      v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v12;
      *((_QWORD *)this + 3) = v11;
    }
    *((_QWORD *)this + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = 349;
    *(_BYTE *)(v8 + 18) = 4;
    *(_QWORD *)v8 = v7;
    return v8;
  }
  if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
  }
  *((_QWORD *)this + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 102;
  *(_BYTE *)(v8 + 18) = 4;
  *(_QWORD *)v8 = v7;
  v17 = *((_DWORD *)this + 24);
  if (!v17)
    return 0;
  v18 = v17 - 1;
  v19 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v17 - 1));
  if (*((_WORD *)v19 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v18;
  v20 = *((unsigned __int8 *)v19 + 18);
  if (v20 != 1)
  {
    if (v20 != 5 || *((_DWORD *)v19 + 2) != 1)
      return 0;
    v19 = *(swift::Demangle::__runtime::Node **)v19;
  }
  v21 = *(swift::Demangle::__runtime::Node **)v19;
  if (!*(_QWORD *)v19)
    return 0;
  v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v22;
  if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
  {
    v23 = 2 * *((_QWORD *)this + 4);
    if (v23 <= 0x20)
      v23 = 32;
    *((_QWORD *)this + 4) = v23;
    v24 = v23 + 8;
    v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
    v26 = (char *)v25 + v24;
    *v25 = *((_QWORD *)this + 3);
    v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v25;
  }
  *((_QWORD *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 348;
  *(_BYTE *)(v22 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v22, (swift::Demangle::__runtime::Node *)v8, this, a4, a5);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v22, v21, this, v27, v28);
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
  {
    v31 = 2 * *((_QWORD *)this + 4);
    if (v31 <= 0x20)
      v31 = 32;
    *((_QWORD *)this + 4) = v31;
    v32 = v31 + 8;
    v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
    v34 = (char *)v33 + v32;
    *v33 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v34;
    *((_QWORD *)this + 3) = v33;
  }
  *((_QWORD *)this + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 232;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v22, this, v29, v30);
  return v8;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  const void **v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 < v2)
  {
    v4 = (const void **)((char *)this + 88);
    v5 = -1;
    do
    {
      *((_QWORD *)this + 9) = v1 + 1;
      v6 = *((_QWORD *)this + 7);
      v7 = *(char *)(v6 + v1);
      if (!*(_BYTE *)(v6 + v1))
        break;
      if ((v7 - 97) > 0x19u)
      {
        if ((v7 - 65) <= 0x19u)
        {
          v8 = 0;
          if (v5 <= 2048 && *((unsigned int *)this + 28) > (unint64_t)(*(char *)(v6 + v1) - 65))
          {
            v8 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*(char *)(v6 + v1) - 65));
            if (v5 >= 2)
            {
              v12 = v5 + 1;
              do
              {
                v15 = v8;
                swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
                --v12;
              }
              while (v12 > 2);
            }
          }
          return v8;
        }
        if (v7 == 95)
        {
          v13 = v5 + 27;
          if (*((_DWORD *)this + 28) <= v13)
            return 0;
          return *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v13);
        }
        *((_QWORD *)this + 9) = v1;
        if (v1 >= v2 || *(unsigned __int8 *)(v6 + v1) - 48 > 9)
          return 0;
        v5 = 0;
        while (1)
        {
          v10 = *(unsigned __int8 *)(v6 + v1);
          if ((v10 - 48) > 9)
            break;
          v11 = v10 + 10 * v5 - 48;
          if (v11 < v5)
            return 0;
          *((_QWORD *)this + 9) = ++v1;
          v5 = v11;
          if (v2 == v1)
          {
            v1 = v2;
            v5 = v11;
            break;
          }
        }
        if (v5 < 0)
          return 0;
      }
      else
      {
        v8 = 0;
        if (v5 > 2048 || *((unsigned int *)this + 28) <= (unint64_t)(*(char *)(v6 + v1) - 97))
          return v8;
        v8 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*(char *)(v6 + v1) - 97));
        if (v5 >= 2)
        {
          v9 = v5 + 1;
          do
          {
            v15 = v8;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
            --v9;
          }
          while (v9 > 2);
        }
        if (!v8)
          return v8;
        v15 = v8;
        swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
        v2 = *((_QWORD *)this + 8);
        v1 = *((_QWORD *)this + 9);
        v5 = -1;
      }
    }
    while (v1 < v2);
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBuiltinType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  unint64_t Node;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  signed int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  signed int v28;
  int v29;
  int v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  char v52;
  char *v53;
  uint64_t v54;

  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 >= v5)
    return 0;
  v8 = 0;
  v9 = v6 + 1;
  *((_QWORD *)this + 9) = v6 + 1;
  v10 = *((_QWORD *)this + 7);
  switch(*(_BYTE *)(v10 + v6))
  {
    case 'B':
      v11 = "Builtin.UnsafeValueBuffer";
      v12 = 25;
      goto LABEL_45;
    case 'D':
      v11 = "Builtin.DefaultActorStorage";
      v12 = 27;
      goto LABEL_45;
    case 'I':
      v11 = "Builtin.IntLiteral";
      goto LABEL_38;
    case 'O':
      v11 = "Builtin.UnknownObject";
      v12 = 21;
      goto LABEL_45;
    case 'P':
      v11 = "Builtin.PackIndex";
      v12 = 17;
      goto LABEL_45;
    case 'T':
      Node = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)this + 2))
      {
        v14 = 2 * *((_QWORD *)this + 4);
        if (v14 <= 0x20)
          v14 = 32;
        *((_QWORD *)this + 4) = v14;
        v15 = v14 + 8;
        v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        *v16 = *((_QWORD *)this + 3);
        Node = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v16 + v15;
        *((_QWORD *)this + 3) = v16;
      }
      *((_QWORD *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 21;
      *(_BYTE *)(Node + 18) = 0;
      goto LABEL_46;
    case 'b':
      v11 = "Builtin.BridgeObject";
      goto LABEL_36;
    case 'c':
      v11 = "Builtin.RawUnsafeContinuation";
      v12 = 29;
      goto LABEL_45;
    case 'd':
      v11 = "Builtin.NonDefaultDistributedActorStorage";
      v12 = 41;
      goto LABEL_45;
    case 'e':
      v11 = "Builtin.Executor";
      goto LABEL_40;
    case 'f':
      if (v9 >= v5)
        return 0;
      v17 = *(unsigned __int8 *)(v10 + v9);
      if (v17 == 95)
        goto LABEL_43;
      if ((v17 - 48) > 9)
        return 0;
      v18 = 0;
      while (1)
      {
        v19 = *(unsigned __int8 *)(v10 + v9);
        if ((v19 - 48) > 9)
          break;
        v20 = v19 + 10 * v18 - 48;
        if (v20 < v18)
          return 0;
        v8 = 0;
        *((_QWORD *)this + 9) = ++v9;
        v18 = v20;
        if (v5 == v9)
          return v8;
      }
      v8 = 0;
      if (v18 < 0 || v9 >= v5 || v19 != 95)
        return v8;
      *((_QWORD *)this + 9) = v9 + 1;
      if ((v18 - 1) > 0xFFF)
        return 0;
      v53 = 0;
      v31 = (char *)*((_QWORD *)this + 1);
      if (!v31 || (unint64_t)(v31 + 14) > *((_QWORD *)this + 2))
      {
        v32 = 2 * *((_QWORD *)this + 4);
        if (v32 <= 0xF)
          v32 = 15;
        *((_QWORD *)this + 4) = v32;
        v33 = v32 + 8;
        v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        *v34 = *((_QWORD *)this + 3);
        v31 = (char *)(v34 + 1);
        *((_QWORD *)this + 2) = (char *)v34 + v33;
        *((_QWORD *)this + 3) = v34;
      }
      *((_QWORD *)this + 1) = v31 + 14;
      v53 = v31;
      qmemcpy(v31, "Builtin.FPIEEE", 14);
      v35 = 0xE0000000ELL;
      goto LABEL_78;
    case 'i':
      if (v9 >= v5)
        return 0;
      v21 = *(unsigned __int8 *)(v10 + v9);
      if (v21 == 95)
        goto LABEL_43;
      if ((v21 - 48) > 9)
        return 0;
      v18 = 0;
      while (1)
      {
        v22 = *(unsigned __int8 *)(v10 + v9);
        if ((v22 - 48) > 9)
          break;
        v23 = v22 + 10 * v18 - 48;
        if (v23 < v18)
          return 0;
        v8 = 0;
        *((_QWORD *)this + 9) = ++v9;
        v18 = v23;
        if (v5 == v9)
          return v8;
      }
      v8 = 0;
      if (v18 < 0 || v9 >= v5 || v22 != 95)
        return v8;
      *((_QWORD *)this + 9) = v9 + 1;
      if ((v18 - 1) > 0xFFF)
        return 0;
      v53 = 0;
      v36 = (_QWORD *)*((_QWORD *)this + 1);
      if (!v36 || (unint64_t)v36 + 11 > *((_QWORD *)this + 2))
      {
        v37 = 2 * *((_QWORD *)this + 4);
        if (v37 <= 0xC)
          v37 = 12;
        *((_QWORD *)this + 4) = v37;
        v38 = v37 + 8;
        v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        *v39 = *((_QWORD *)this + 3);
        v36 = v39 + 1;
        *((_QWORD *)this + 2) = (char *)v39 + v38;
        *((_QWORD *)this + 3) = v39;
      }
      *((_QWORD *)this + 1) = (char *)v36 + 11;
      v53 = (char *)v36;
      *(_DWORD *)((char *)v36 + 7) = 1953384750;
      *v36 = *(_QWORD *)"Builtin.Int";
      v35 = 0xB0000000BLL;
LABEL_78:
      v54 = v35;
      swift::Demangle::__runtime::CharVector::append((unsigned int *)&v53, v18, this);
      v40 = v53;
      v41 = v54;
      Node = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)this + 2))
      {
        v42 = 2 * *((_QWORD *)this + 4);
        if (v42 <= 0x20)
          v42 = 32;
        *((_QWORD *)this + 4) = v42;
        v43 = v42 + 8;
        v44 = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        *v44 = *((_QWORD *)this + 3);
        Node = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v44 + v43;
        *((_QWORD *)this + 3) = v44;
      }
      *((_QWORD *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 20;
      *(_BYTE *)(Node + 18) = 3;
      *(_QWORD *)Node = v40;
      *(_QWORD *)(Node + 8) = v41;
      goto LABEL_46;
    case 'j':
      v11 = "Builtin.Job";
      v12 = 11;
      goto LABEL_45;
    case 'o':
      v11 = "Builtin.NativeObject";
LABEL_36:
      v12 = 20;
      goto LABEL_45;
    case 'p':
      v11 = "Builtin.RawPointer";
LABEL_38:
      v12 = 18;
      goto LABEL_45;
    case 't':
      v11 = "Builtin.SILToken";
LABEL_40:
      v12 = 16;
      goto LABEL_45;
    case 'v':
      if (v9 >= v5)
        return 0;
      v24 = *(unsigned __int8 *)(v10 + v9);
      if (v24 == 95)
      {
LABEL_43:
        v8 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
        return v8;
      }
      if ((v24 - 48) > 9)
        return 0;
      v28 = 0;
      break;
    case 'w':
      v11 = "Builtin.Word";
      v12 = 12;
LABEL_45:
      Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, v11, v12);
      if (Node)
        goto LABEL_46;
      return 0;
    default:
      return v8;
  }
  while (1)
  {
    v29 = *(unsigned __int8 *)(v10 + v9);
    if ((v29 - 48) > 9)
      break;
    v30 = v29 + 10 * v28 - 48;
    if (v30 < v28)
      return 0;
    v8 = 0;
    *((_QWORD *)this + 9) = ++v9;
    v28 = v30;
    if (v5 == v9)
      return v8;
  }
  v8 = 0;
  if (v28 < 0 || v9 >= v5 || v29 != 95)
    return v8;
  *((_QWORD *)this + 9) = v9 + 1;
  if ((v28 - 4097) < 0xFFFFF000)
    return 0;
  v45 = *((_DWORD *)this + 24);
  if (!v45)
    return 0;
  v46 = v45 - 1;
  v47 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v45 - 1));
  if (*(_WORD *)(v47 + 16) != 232)
    return 0;
  *((_DWORD *)this + 24) = v46;
  v48 = *(unsigned __int8 *)(v47 + 18);
  if (v48 == 1)
    goto LABEL_94;
  if (v48 != 5 || *(_DWORD *)(v47 + 8) != 1)
    return 0;
  v47 = *(_QWORD *)v47;
LABEL_94:
  v8 = *(_QWORD *)v47;
  if (*(_QWORD *)v47)
  {
    if (*(_WORD *)(v8 + 16) != 20 || *(_QWORD *)(v8 + 8) < 8uLL || **(_QWORD **)v8 != 0x2E6E69746C697542)
      return 0;
    v53 = 0;
    v54 = 0;
    swift::Demangle::__runtime::CharVector::append(&v53, "Builtin.Vec", 0xBuLL, this);
    swift::Demangle::__runtime::CharVector::append((unsigned int *)&v53, v28, this);
    v52 = 120;
    swift::Demangle::__runtime::Vector<char>::push_back((unsigned int *)&v53, &v52, this);
    v49 = *(_QWORD *)(v8 + 8);
    v50 = 8;
    if (v49 < 8)
      v50 = *(_QWORD *)(v8 + 8);
    swift::Demangle::__runtime::CharVector::append(&v53, (const void *)(*(_QWORD *)v8 + v50), v49 - v50, this);
    Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, (uint64_t *)&v53);
    if (!Node)
      return 0;
LABEL_46:
    v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v8;
    if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
    {
      v25 = 2 * *((_QWORD *)this + 4);
      if (v25 <= 0x20)
        v25 = 32;
      *((_QWORD *)this + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      *v27 = *((_QWORD *)this + 3);
      v8 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v27 + v26;
      *((_QWORD *)this + 3) = v27;
    }
    *((_QWORD *)this + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = 232;
    *(_BYTE *)(v8 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)Node, this, a4, a5);
  }
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAnyGenericType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  __int16 v5;
  int v7;
  unsigned int v8;
  unsigned __int16 *v9;
  int v10;
  BOOL v11;
  BOOL v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t v14;
  const char *v15;
  swift::Demangle::__runtime::Node *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v32;

  v5 = a2;
  v7 = *((_DWORD *)this + 24);
  if (!v7
    || ((v8 = v7 - 1,
         v9 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v8),
         v10 = v9[8],
         (v10 - 173) <= 0x3C)
      ? (v11 = ((1 << (v10 + 83)) & 0x100000010000010DLL) == 0)
      : (v11 = 1),
        v11
     && ((v10 - 101) <= 0x24
       ? (v12 = ((1 << (v10 - 101)) & 0x1000800001) == 0)
       : (v12 = 1),
         v12 && v10 != 347)))
  {
    v9 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v8;
  }
  v13 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
  if (!v9)
    return 0;
  v16 = v13;
  if (!v13)
    return 0;
  v17 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v17;
  if (!v17 || v17 + 24 > *((_QWORD *)this + 2))
  {
    v18 = 2 * *((_QWORD *)this + 4);
    if (v18 <= 0x20)
      v18 = 32;
    *((_QWORD *)this + 4) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    v21 = (char *)v20 + v19;
    *v20 = *((_QWORD *)this + 3);
    v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v21;
    *((_QWORD *)this + 3) = v20;
  }
  *((_QWORD *)this + 1) = v17 + 24;
  *(_WORD *)(v17 + 16) = v5;
  *(_BYTE *)(v17 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v17, v16, this, v14, v15);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v17, (swift::Demangle::__runtime::Node *)v9, this, v22, v23);
  v26 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v26;
  if (!v26 || v26 + 24 > *((_QWORD *)this + 2))
  {
    v27 = 2 * *((_QWORD *)this + 4);
    if (v27 <= 0x20)
      v27 = 32;
    *((_QWORD *)this + 4) = v27;
    v28 = v27 + 8;
    v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
    v30 = (char *)v29 + v28;
    *v29 = *((_QWORD *)this + 3);
    v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v30;
    *((_QWORD *)this + 3) = v29;
  }
  *((_QWORD *)this + 1) = v26 + 24;
  *(_WORD *)(v26 + 16) = 232;
  *(_BYTE *)(v26 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v26, (swift::Demangle::__runtime::Node *)v17, this, v24, v25);
  v32 = v26;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v32, this);
  return v26;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtensionContext(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t *AnyGeneric;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  swift::Demangle::__runtime::Node *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
  {
    v9 = 0;
LABEL_10:
    v11 = 0;
    goto LABEL_12;
  }
  v7 = v6 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(swift::Demangle::__runtime::Node **)(v8 + 8 * (v6 - 1));
  if (*((_WORD *)v9 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7;
    if (v6 == 1)
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    v7 = *((_DWORD *)this + 24);
  }
  v10 = v7 - 1;
  v11 = *(_QWORD *)(v8 + 8 * v10);
  v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 == 153)
  {
    *((_DWORD *)this + 24) = v10;
    goto LABEL_12;
  }
  if (v12 != 101)
    goto LABEL_10;
  *((_DWORD *)this + 24) = v10;
  v11 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v11, 153, a4, a5);
LABEL_12:
  AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
  v16 = 0;
  if (v11)
  {
    v17 = (swift::Demangle::__runtime::Node *)AnyGeneric;
    if (AnyGeneric)
    {
      v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
      {
        v18 = 2 * *((_QWORD *)this + 4);
        if (v18 <= 0x20)
          v18 = 32;
        *((_QWORD *)this + 4) = v18;
        v19 = v18 + 8;
        v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
        v21 = (char *)v20 + v19;
        *v20 = *((_QWORD *)this + 3);
        v16 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v21;
        *((_QWORD *)this + 3) = v20;
      }
      *((_QWORD *)this + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 71;
      *(_BYTE *)(v16 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, (swift::Demangle::__runtime::Node *)v11, this, v14, v15);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, v17, this, v22, v23);
      if (v9)
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, v9, this, v24, v25);
    }
  }
  return v16;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demanglePlainFunction(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  swift::Demangle::__runtime::Node *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned __int16 *v33;
  int v34;
  BOOL v35;
  BOOL v36;
  swift::Demangle::__runtime::Node *v37;
  swift::Demangle::__runtime::Node *v38;
  uint64_t v39;
  const char *v40;

  v6 = *((_DWORD *)this + 24);
  if (v6
    && (v7 = v6 - 1,
        v8 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v7),
        *((_WORD *)v8 + 8) == 43))
  {
    *((_DWORD *)this + 24) = v7;
  }
  else
  {
    v8 = 0;
  }
  v9 = swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0, a4, a5);
  v17 = (char *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, (swift::Demangle::__runtime::Node *)v9, v10, v11, v12);
  if (v8 && v9)
  {
    v18 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v18;
    if (!v18 || v18 + 24 > *((_QWORD *)this + 2))
    {
      v19 = 2 * *((_QWORD *)this + 4);
      if (v19 <= 0x20)
        v19 = 32;
      *((_QWORD *)this + 4) = v19;
      v20 = v19 + 8;
      v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v22 = (char *)v21 + v20;
      *v21 = *((_QWORD *)this + 3);
      v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v22;
      *((_QWORD *)this + 3) = v21;
    }
    *((_QWORD *)this + 1) = v18 + 24;
    *(_WORD *)(v18 + 16) = 44;
    *(_BYTE *)(v18 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, v8, this, v15, v16);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, (swift::Demangle::__runtime::Node *)v9, this, v23, v24);
    v9 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v9;
    if (!v9 || v9 + 24 > *((_QWORD *)this + 2))
    {
      v27 = 2 * *((_QWORD *)this + 4);
      if (v27 <= 0x20)
        v27 = 32;
      *((_QWORD *)this + 4) = v27;
      v28 = v27 + 8;
      v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
      v30 = (char *)v29 + v28;
      *v29 = *((_QWORD *)this + 3);
      v9 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v30;
      *((_QWORD *)this + 3) = v29;
    }
    *((_QWORD *)this + 1) = v9 + 24;
    *(_WORD *)(v9 + 16) = 232;
    *(_BYTE *)(v9 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, (swift::Demangle::__runtime::Node *)v18, this, v25, v26);
  }
  v31 = *((_DWORD *)this + 24);
  if (!v31
    || ((v32 = v31 - 1,
         v33 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v32),
         v34 = v33[8],
         (v34 - 173) <= 0x3C)
      ? (v35 = ((1 << (v34 + 83)) & 0x100000010000010DLL) == 0)
      : (v35 = 1),
        v35
     && ((v34 - 101) <= 0x24
       ? (v36 = ((1 << (v34 - 101)) & 0x1000800001) == 0)
       : (v36 = 1),
         v36 && v34 != 347)))
  {
    v33 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v32;
  }
  v37 = swift::Demangle::__runtime::Demangler::popContext(this, v13, v14, v15, v16);
  if (v17)
    v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 76, v37, (swift::Demangle::__runtime::Node *)v33, v17, (swift::Demangle::__runtime::Node *)v9);
  else
    v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 76, v37, (swift::Demangle::__runtime::Node *)v33, (char *)v9);
  return setParentForOpaqueReturnTypeNodes(this, v38, (swift::Demangle::__runtime::Node *)v9, v39, v40);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *AnyGeneric;
  const char *v14;
  unsigned int *v15;
  uint64_t v16;
  const char *v17;
  swift::Demangle::__runtime::Node *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  const void *v23[2];
  swift::Demangle::__runtime::Node *v24;
  unint64_t v25;

  v6 = *((_QWORD *)this + 2);
  v7 = (char *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v7;
  if (v7)
    v8 = (unint64_t)(v7 + 32) > v6;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 2 * *((_QWORD *)this + 4);
    if (v9 <= 0x28)
      v9 = 40;
    *((_QWORD *)this + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    *v11 = *((_QWORD *)this + 3);
    v7 = (char *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = (char *)v11 + v10;
    *((_QWORD *)this + 3) = v11;
  }
  v24 = 0;
  *((_QWORD *)this + 1) = v7 + 32;
  v23[0] = v7;
  v23[1] = (const void *)0x400000000;
  v12 = 0;
  if (swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, v23, (int8x16_t **)&v24, a4, a5))
  {
    AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
    if (AnyGeneric
      && (v15 = (unsigned int *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(this, (unint64_t)AnyGeneric, (uint64_t)v23, 0, v14)) != 0)
    {
      v18 = (swift::Demangle::__runtime::Node *)v15;
      if (v24)
        swift::Demangle::__runtime::Node::addChild(v15, v24, this, v16, v17);
      v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v12;
      if (!v12 || v12 + 24 > *((_QWORD *)this + 2))
      {
        v19 = 2 * *((_QWORD *)this + 4);
        if (v19 <= 0x20)
          v19 = 32;
        *((_QWORD *)this + 4) = v19;
        v20 = v19 + 8;
        v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *v21 = *((_QWORD *)this + 3);
        v12 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v21 + v20;
        *((_QWORD *)this + 3) = v21;
      }
      *((_QWORD *)this + 1) = v12 + 24;
      *(_WORD *)(v12 + 16) = 232;
      *(_BYTE *)(v12 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, v18, this, v16, v17);
      v25 = v12;
      swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v25, this);
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentProtocolConformanceAssociated(swift::Demangle::__runtime::Demangler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  unsigned int v9;
  unsigned __int16 *v10;

  v2 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
  v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(this, v3, v4, v5, v6);
  v8 = *((_DWORD *)this + 24);
  if (v8
    && (v9 = v8 - 1, v10 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v9), v10[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v9;
  }
  else
  {
    v10 = 0;
  }
  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 49, (swift::Demangle::__runtime::Node *)v10, v7, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleConcreteProtocolConformance(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  const char *v9;
  int8x16_t *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  swift::Demangle::__runtime::Node *v15;

  v10 = swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this, a2, a3, a4, a5);
  v11 = *((_DWORD *)this + 24);
  if (v11
    && ((v12 = v11 - 1, v8 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v12), v13 = v8[8], v13 == 184)
     || v13 == 183))
  {
    *((_DWORD *)this + 24) = v12;
    if (!v12)
      goto LABEL_9;
  }
  else
  {
    v8 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(this, v6, v7, (uint64_t)v8, v9);
    v12 = *((_DWORD *)this + 24);
    if (!v12)
    {
LABEL_9:
      v15 = 0;
      return swift::Demangle::__runtime::Demangler::createWithChildren(this, 26, v15, (swift::Demangle::__runtime::Node *)v8, v10->i8);
    }
  }
  v14 = v12 - 1;
  v15 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v14);
  if (*((_WORD *)v15 + 8) != 232)
    goto LABEL_9;
  *((_DWORD *)this + 24) = v14;
  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 26, v15, (swift::Demangle::__runtime::Node *)v8, v10->i8);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentProtocolConformanceRoot(swift::Demangle::__runtime::Demangler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  unsigned int v9;
  swift::Demangle::__runtime::Node *v10;

  v2 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
  v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this, v3, v4, v5, v6);
  v8 = *((_DWORD *)this + 24);
  if (v8
    && (v9 = v8 - 1,
        v10 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v9),
        *((_WORD *)v10 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v9;
  }
  else
  {
    v10 = 0;
  }
  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 47, v10, v7, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentProtocolConformanceInherited(swift::Demangle::__runtime::Demangler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  unsigned int v9;
  unsigned __int16 *v10;

  v2 = (char *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
  v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this, v3, v4, v5, v6);
  v8 = *((_DWORD *)this + 24);
  if (v8
    && (v9 = v8 - 1, v10 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v9), v10[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v9;
  }
  else
  {
    v10 = 0;
  }
  return swift::Demangle::__runtime::Demangler::createWithChildren(this, 48, (swift::Demangle::__runtime::Node *)v10, v7, v2);
}

unint64_t swift::Demangle::__runtime::Demangler::popProtocol(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  uint64_t *v13;
  unint64_t v15;
  swift::Demangle::__runtime::Node *v16;
  uint64_t v17;
  const char *v18;
  swift::Demangle::__runtime::Node *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
    goto LABEL_22;
  v7 = v6 - 1;
  v8 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * v7);
  v9 = *((unsigned __int16 *)v8 + 8);
  v10 = (v9 - 173);
  if (v10 > 0x3C)
  {
LABEL_14:
    if ((v9 - 101) <= 0x24 && ((1 << (v9 - 101)) & 0x1000800001) != 0)
      goto LABEL_18;
    if (v9 == 347)
    {
LABEL_20:
      *((_DWORD *)this + 24) = v7;
      return (unint64_t)v8;
    }
LABEL_22:
    v8 = 0;
    goto LABEL_23;
  }
  if (((1 << (v9 + 83)) & 0x100000010000000DLL) == 0)
  {
    if (v10 == 8)
      goto LABEL_20;
    if (v10 == 59)
    {
      *((_DWORD *)this + 24) = v7;
      v11 = *((unsigned __int8 *)v8 + 18);
      if ((v11 - 1) >= 2 && (v11 != 5 || !*((_DWORD *)v8 + 2)))
        return 0;
      v12 = 232;
      v13 = v8;
      while (v12 == 232)
      {
        if (*((unsigned __int8 *)v13 + 18) - 1 >= 2)
          v13 = (uint64_t *)*v13;
        v13 = (uint64_t *)*v13;
        v12 = *((_WORD *)v13 + 8);
      }
      if (v12 - 180 >= 2 && v12 != 347)
        return 0;
      return (unint64_t)v8;
    }
    goto LABEL_14;
  }
LABEL_18:
  *((_DWORD *)this + 24) = v7;
LABEL_23:
  v16 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
  v15 = 0;
  if (v8)
  {
    v19 = v16;
    if (v16)
    {
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      *(_WORD *)(v20 + 16) = 180;
      *(_BYTE *)(v20 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, v19, this, v17, v18);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, (swift::Demangle::__runtime::Node *)v8, this, v25, v26);
      v15 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v15;
      if (!v15 || v15 + 24 > *((_QWORD *)this + 2))
      {
        v29 = 2 * *((_QWORD *)this + 4);
        if (v29 <= 0x20)
          v29 = 32;
        *((_QWORD *)this + 4) = v29;
        v30 = v29 + 8;
        v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
        *v31 = *((_QWORD *)this + 3);
        v15 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v31 + v30;
        *((_QWORD *)this + 3) = v31;
      }
      *((_QWORD *)this + 1) = v15 + 24;
      *(_WORD *)(v15 + 16) = 232;
      *(_BYTE *)(v15 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v15, (swift::Demangle::__runtime::Node *)v20, this, v27, v28);
    }
  }
  return v15;
}

unint64_t swift::Demangle::__runtime::Demangler::demanglePackProtocolConformance(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  uint64_t v7;
  const char *v8;
  swift::Demangle::__runtime::Node *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;

  v6 = swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this, a2, a3, a4, a5);
  if (!v6)
    return 0;
  v9 = (swift::Demangle::__runtime::Node *)v6;
  v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v10;
  if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
  {
    v11 = 2 * *((_QWORD *)this + 4);
    if (v11 <= 0x20)
      v11 = 32;
    *((_QWORD *)this + 4) = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    v14 = (char *)v13 + v12;
    *v13 = *((_QWORD *)this + 3);
    v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v14;
    *((_QWORD *)this + 3) = v13;
  }
  *((_QWORD *)this + 1) = v10 + 24;
  *(_WORD *)(v10 + 16) = 27;
  *(_BYTE *)(v10 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, v9, this, v7, v8);
  return v10;
}

unsigned int *swift::Demangle::__runtime::Demangler::popProtocolConformance(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  const char *v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  unsigned int *v38;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
  {
    v9 = 0;
LABEL_10:
    v11 = 0;
    goto LABEL_12;
  }
  v7 = v6 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(swift::Demangle::__runtime::Node **)(v8 + 8 * (v6 - 1));
  if (*((_WORD *)v9 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7;
    if (v6 == 1)
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    v7 = *((_DWORD *)this + 24);
  }
  v10 = v7 - 1;
  v11 = *(_QWORD *)(v8 + 8 * v10);
  v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 != 153)
  {
    if (v12 == 101)
    {
      *((_DWORD *)this + 24) = v10;
      v11 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v11, 153, a4, a5);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v10;
LABEL_12:
  v15 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
  v16 = *((_DWORD *)this + 24);
  if (v16)
  {
    v17 = 0;
    v18 = v16 - 1;
    v19 = *((_QWORD *)this + 11);
    v20 = *(unsigned __int16 **)(v19 + 8 * (v16 - 1));
    v21 = v20[8];
    if (v21 == 232)
      goto LABEL_18;
    if (v21 == 101)
    {
      *((_DWORD *)this + 24) = v18;
      if (v16 == 1)
      {
        v22 = 0;
        if (!v9)
          goto LABEL_37;
        goto LABEL_25;
      }
      v17 = v20;
      --v16;
    }
    v18 = v16 - 1;
    v20 = *(unsigned __int16 **)(v19 + 8 * (v16 - 1));
    if (v20[8] == 232)
    {
LABEL_18:
      *((_DWORD *)this + 24) = v18;
      v22 = (unint64_t)v20;
      v20 = v17;
      if (!v9)
        goto LABEL_37;
    }
    else
    {
      v22 = 0;
      v20 = v17;
      if (!v9)
        goto LABEL_37;
    }
  }
  else
  {
    v22 = 0;
    v20 = 0;
    if (!v9)
      goto LABEL_37;
  }
LABEL_25:
  if (v22)
  {
    v23 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v23;
    if (!v23 || v23 + 24 > *((_QWORD *)this + 2))
    {
      v24 = 2 * *((_QWORD *)this + 4);
      if (v24 <= 0x20)
        v24 = 32;
      *((_QWORD *)this + 4) = v24;
      v25 = v24 + 8;
      v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      v27 = (char *)v26 + v25;
      *v26 = *((_QWORD *)this + 3);
      v23 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v27;
      *((_QWORD *)this + 3) = v26;
    }
    *((_QWORD *)this + 1) = v23 + 24;
    *(_WORD *)(v23 + 16) = 44;
    *(_BYTE *)(v23 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v23, v9, this, v13, v14);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v23, (swift::Demangle::__runtime::Node *)v22, this, v28, v29);
    v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v22;
    if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
    {
      v32 = 2 * *((_QWORD *)this + 4);
      if (v32 <= 0x20)
        v32 = 32;
      *((_QWORD *)this + 4) = v32;
      v33 = v32 + 8;
      v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *v34 = *((_QWORD *)this + 3);
      v22 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v34 + v33;
      *((_QWORD *)this + 3) = v34;
    }
    *((_QWORD *)this + 1) = v22 + 24;
    *(_WORD *)(v22 + 16) = 232;
    *(_BYTE *)(v22 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v22, (swift::Demangle::__runtime::Node *)v23, this, v30, v31);
  }
LABEL_37:
  v35 = (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 182, (swift::Demangle::__runtime::Node *)v22, v15, (char *)v11);
  v38 = v35;
  if (v20 && v35)
    swift::Demangle::__runtime::Node::addChild(v35, (swift::Demangle::__runtime::Node *)v20, this, v36, v37);
  return v38;
}

_WORD *swift::Demangle::__runtime::Demangler::demangleIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t v37;
  const void *p_p;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  const void *v65;
  void *v66;
  const void *v67;
  _WORD *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v73;
  int v74;
  int v75;
  const void *v76;
  char v77;
  char *__src;
  char *__srca;
  char *__srcb;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  void *__p;
  size_t v85;
  uint64_t v86;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (v2 >= v1)
    return 0;
  v4 = *((_QWORD *)this + 7);
  v5 = *(unsigned __int8 *)(v4 + v2);
  if ((v5 - 48) > 9)
    return 0;
  if (v5 == 48)
  {
    *((_QWORD *)this + 9) = v2 + 1;
    if (v2 + 1 < v1 && *(_BYTE *)(v4 + v2 + 1) == 48)
    {
      v6 = 0;
      v2 += 2;
      *((_QWORD *)this + 9) = v2;
      v75 = 1;
    }
    else
    {
      v75 = 0;
      v6 = 1;
      ++v2;
    }
  }
  else
  {
    v75 = 0;
    v6 = 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    if ((v6 & 1) == 0)
    {
      v10 = 0;
      goto LABEL_40;
    }
    do
    {
      v2 = *((_QWORD *)this + 9);
      if (v2 >= *((_QWORD *)this + 8) || (v11 = *((_QWORD *)this + 7), (*(_BYTE *)(v11 + v2) & 0xDFu) - 65 > 0x19))
      {
        v10 = 1;
        goto LABEL_40;
      }
      *((_QWORD *)this + 9) = v2 + 1;
      v12 = *(char *)(v11 + v2);
      v13 = v12 - 97;
      if ((v12 - 97) >= 0x1A)
        v14 = -65;
      else
        v14 = -97;
      v15 = v14 + v12;
      if (v15 >= *((_DWORD *)this + 134))
        return 0;
      v16 = (char *)this + 16 * v15;
      v18 = (const void *)*((_QWORD *)v16 + 15);
      v17 = *((_QWORD *)v16 + 16);
      v19 = v8;
      v20 = v7;
      if (v17 + v8 > v7)
      {
        __src = v9;
        v21 = &v9[v7];
        v9 = (char *)*((_QWORD *)this + 1);
        if (v21 == v9)
        {
          v23 = &v21[v17];
          v22 = *((_QWORD *)this + 2);
          if ((unint64_t)v23 <= v22)
          {
            v24 = v7;
            *((_QWORD *)this + 1) = v23;
            LODWORD(v26) = v17;
            v9 = __src;
LABEL_13:
            v7 = v24 + v26;
            goto LABEL_14;
          }
        }
        else
        {
          v22 = *((_QWORD *)this + 2);
        }
        v81 = v8;
        v24 = v7;
        v25 = 2 * v7;
        if (v17 > v25)
          v25 = v17;
        if (v25 <= 4)
          v26 = 4;
        else
          v26 = v25;
        v27 = v26 + v20;
        if (!v9 || (unint64_t)&v9[v27] > v22)
        {
          v28 = 2 * *((_QWORD *)this + 4);
          if (v28 <= v27 + 1)
            v28 = v27 + 1;
          *((_QWORD *)this + 4) = v28;
          v76 = v18;
          v29 = v28 + 8;
          v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
          *v30 = *((_QWORD *)this + 3);
          v9 = (char *)(v30 + 1);
          v31 = (char *)v30 + v29;
          v18 = v76;
          *((_QWORD *)this + 2) = v31;
          *((_QWORD *)this + 3) = v30;
        }
        *((_QWORD *)this + 1) = &v9[v27];
        if (v24)
          memcpy(v9, __src, v20);
        v8 = v81;
        goto LABEL_13;
      }
LABEL_14:
      memcpy(&v9[v19], v18, v17);
      v8 += v17;
    }
    while (v13 < 0x1Au);
    v10 = 0;
    v2 = *((_QWORD *)this + 9);
LABEL_40:
    v32 = *((_QWORD *)this + 8);
    if (v2 >= v32)
      return 0;
    v33 = *((_QWORD *)this + 7);
    if (*(_BYTE *)(v33 + v2) == 48)
    {
      *((_QWORD *)this + 9) = v2 + 1;
      break;
    }
    if (*(unsigned __int8 *)(v33 + v2) - 48 > 9)
      return 0;
    LODWORD(v34) = 0;
    while (1)
    {
      v35 = *(unsigned __int8 *)(v33 + v2);
      if ((v35 - 48) > 9)
        break;
      v36 = v35 + 10 * v34 - 48;
      if (v36 < (int)v34)
        return 0;
      *((_QWORD *)this + 9) = ++v2;
      LODWORD(v34) = v36;
      if (v32 == v2)
      {
        v2 = v32;
        LODWORD(v34) = v36;
        break;
      }
    }
    if ((int)v34 < 1)
      return 0;
    v77 = v10;
    if (!v75)
    {
      v37 = v34;
      if (v2 + v34 <= v32)
      {
        v42 = v8;
        if (v34 + (unint64_t)v8 > v7)
        {
          __srca = v9;
          v43 = &v9[v7];
          v9 = (char *)*((_QWORD *)this + 1);
          if (v43 != v9)
          {
            v44 = *((_QWORD *)this + 2);
            goto LABEL_70;
          }
          v46 = &v43[v34];
          v44 = *((_QWORD *)this + 2);
          if ((unint64_t)v46 <= v44)
          {
            *((_QWORD *)this + 1) = v46;
            v51 = v34;
            v9 = __srca;
          }
          else
          {
LABEL_70:
            v82 = v8;
            LODWORD(v47) = 2 * v7;
            if (v34 > 2 * v7)
              LODWORD(v47) = v34;
            if (v47 <= 4)
              v47 = 4;
            else
              v47 = v47;
            v74 = v47;
            v48 = v47 + v7;
            if (!v9 || (unint64_t)&v9[v48] > v44)
            {
              v49 = 2 * *((_QWORD *)this + 4);
              if (v49 <= v48 + 1)
                v49 = v48 + 1;
              *((_QWORD *)this + 4) = v49;
              v73 = v49 + 8;
              v50 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
              *v50 = *((_QWORD *)this + 3);
              v9 = (char *)(v50 + 1);
              *((_QWORD *)this + 2) = (char *)v50 + v73;
              *((_QWORD *)this + 3) = v50;
            }
            *((_QWORD *)this + 1) = &v9[v48];
            if (v7)
              memcpy(v9, __srca, v7);
            v8 = v82;
            v51 = v74;
          }
          v7 += v51;
        }
        v52 = v33 + v2;
        memcpy(&v9[v42], (const void *)(v33 + v2), v34);
        v53 = 0;
        v54 = -1;
        while (2)
        {
          if (v53 >= v34)
          {
            v57 = 0;
            if ((v54 & 0x80000000) == 0)
              goto LABEL_99;
LABEL_86:
            if ((v57 - 58) < 0xFFFFFFF6 && v57 != 95 && v57 != 0)
              v54 = v53;
          }
          else
          {
            v57 = *(unsigned __int8 *)(v52 + v53);
            if ((v54 & 0x80000000) != 0)
              goto LABEL_86;
LABEL_99:
            if (!v57
              || v57 == 95
              || (v57 - 65) <= 0x19
              && *(unsigned __int8 *)(v52 + v53 - 1) - 91 <= 0xFFFFFFE5)
            {
              if ((int)(v53 - v54) >= 2)
              {
                v58 = *((int *)this + 134);
                if ((int)v58 <= 25)
                {
                  *((_DWORD *)this + 134) = v58 + 1;
                  v59 = (char *)this + 16 * v58;
                  *((_QWORD *)v59 + 15) = v52 + v54;
                  *((_QWORD *)v59 + 16) = v53 - v54;
                }
              }
              v54 = -1;
              goto LABEL_86;
            }
          }
          if ((_DWORD)v34 + 1 == ++v53)
          {
            v45 = v77;
            goto LABEL_124;
          }
          continue;
        }
      }
      return 0;
    }
    if (v2 < v32 && *(_BYTE *)(v33 + v2) == 95)
      *((_QWORD *)this + 9) = ++v2;
    v37 = v34;
    if (v2 + v34 > v32)
      return 0;
    __p = 0;
    v85 = 0;
    v86 = 0;
    if (!swift::Punycode::__runtime::decodePunycodeUTF8((unsigned __int8 *)(v33 + v2), v34, (uint64_t)&__p))
    {
      if (v86 < 0)
        operator delete(__p);
      return 0;
    }
    if (v86 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v86 >= 0)
      v34 = HIBYTE(v86);
    else
      v34 = v85;
    v39 = v8;
    if (v34 + v8 <= v7)
    {
      v45 = v77;
    }
    else
    {
      v40 = (char *)*((_QWORD *)this + 1);
      if (&v9[v7] != v40)
      {
        v41 = *((_QWORD *)this + 2);
        goto LABEL_108;
      }
      v60 = &v9[v7 + v34];
      v41 = *((_QWORD *)this + 2);
      if ((unint64_t)v60 <= v41)
      {
        *((_QWORD *)this + 1) = v60;
        LODWORD(v62) = v34;
      }
      else
      {
LABEL_108:
        v83 = v8;
        v61 = 2 * v7;
        if (v34 > v61)
          v61 = v34;
        if (v61 <= 4)
          v62 = 4;
        else
          v62 = v61;
        v63 = v62 + v7;
        if (!v40 || (unint64_t)&v40[v63] > v41)
        {
          v64 = 2 * *((_QWORD *)this + 4);
          if (v64 <= v63 + 1)
            v64 = v63 + 1;
          *((_QWORD *)this + 4) = v64;
          __srcb = (char *)(v64 + 8);
          v65 = p_p;
          v66 = malloc_type_malloc(v64 + 8, 0xD0263BC5uLL);
          p_p = v65;
          *(_QWORD *)v66 = *((_QWORD *)this + 3);
          v40 = (char *)v66 + 8;
          *((_QWORD *)this + 2) = &__srcb[(_QWORD)v66];
          *((_QWORD *)this + 3) = v66;
        }
        *((_QWORD *)this + 1) = &v40[v63];
        if (v7)
        {
          v67 = p_p;
          memcpy(v40, v9, v7);
          p_p = v67;
        }
        v9 = v40;
        v8 = v83;
      }
      v45 = v77;
      v7 += v62;
    }
    memcpy(&v9[v39], p_p, v34);
    if (SHIBYTE(v86) < 0)
      operator delete(__p);
LABEL_124:
    v8 += v34;
    v2 = *((_QWORD *)this + 9) + v37;
    *((_QWORD *)this + 9) = v2;
    v6 = 1;
  }
  while ((v45 & 1) != 0);
  if (!v8)
    return 0;
  v68 = (_WORD *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v68;
  if (!v68 || (unint64_t)(v68 + 12) > *((_QWORD *)this + 2))
  {
    v69 = 2 * *((_QWORD *)this + 4);
    if (v69 <= 0x20)
      v69 = 32;
    *((_QWORD *)this + 4) = v69;
    v70 = v69 + 8;
    v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
    *v71 = *((_QWORD *)this + 3);
    v68 = (_WORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = (char *)v71 + v70;
    *((_QWORD *)this + 3) = v71;
  }
  *((_QWORD *)this + 1) = v68 + 12;
  v68[8] = 101;
  *((_BYTE *)v68 + 18) = 3;
  *(_QWORD *)v68 = v9;
  *((_QWORD *)v68 + 1) = v8;
  __p = v68;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&__p, this);
  return v68;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplFunctionType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  unsigned int v15;
  swift::Demangle::__runtime::Node *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  const char *v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  size_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  size_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  swift::Demangle::__runtime::Node *v89;
  int v90;
  const char *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  const char *v106;
  swift::Demangle::__runtime::Node *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  const char *v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  char *v121;
  size_t v122;
  uint64_t v123;
  const char *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  const char *v133;
  swift::Demangle::__runtime::Node *v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  char *v139;
  size_t v140;
  uint64_t v141;
  const char *v142;
  unint64_t v143;
  const char *v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  swift::Demangle::__runtime::Node *v148;
  swift::Demangle::__runtime::Node *v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  int v153;
  unsigned int v154;
  swift::Demangle::__runtime::Node *v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v165;
  int v166;
  unsigned int *v167;
  swift::Demangle::__runtime::Node *v168;
  swift::Demangle::__runtime::Node **v169;
  uint64_t v170;

  v6 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *v9 = *((_QWORD *)this + 3);
    v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v9 + v8;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 115;
  *(_BYTE *)(v6 + 18) = 0;
  v11 = *((_QWORD *)this + 8);
  v10 = *((_QWORD *)this + 9);
  if (v10 < v11 && *(_BYTE *)(*((_QWORD *)this + 7) + v10) == 115)
  {
    *((_QWORD *)this + 9) = v10 + 1;
    v169 = 0;
    v170 = 0;
    v168 = 0;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v169, (int8x16_t **)&v168, a4, a5))return 0;
    v14 = *((_DWORD *)this + 24);
    if (!v14)
      return 0;
    v15 = v14 - 1;
    v16 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v15);
    if (*((_WORD *)v16 + 8) != 43)
      return 0;
    *((_DWORD *)this + 24) = v15;
    v17 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v17;
    if (!v17 || v17 + 24 > *((_QWORD *)this + 2))
    {
      v18 = 2 * *((_QWORD *)this + 4);
      if (v18 <= 0x20)
        v18 = 32;
      *((_QWORD *)this + 4) = v18;
      v19 = v18 + 8;
      v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      *v20 = *((_QWORD *)this + 3);
      v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v20 + v19;
      *((_QWORD *)this + 3) = v20;
    }
    *((_QWORD *)this + 1) = v17 + 24;
    *(_WORD *)(v17 + 16) = 119;
    *(_BYTE *)(v17 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v17, v16, this, v12, v13);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v17, *v169, this, v21, v22);
    if (v168)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v17, v168, this, v23, v24);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v17, this, v23, v24);
    v11 = *((_QWORD *)this + 8);
    v10 = *((_QWORD *)this + 9);
  }
  if (v10 < v11 && *(_BYTE *)(*((_QWORD *)this + 7) + v10) == 73)
  {
    *((_QWORD *)this + 9) = v10 + 1;
    v169 = 0;
    v170 = 0;
    v168 = 0;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v169, (int8x16_t **)&v168, a4, a5))return 0;
    v27 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v27;
    if (!v27 || v27 + 24 > *((_QWORD *)this + 2))
    {
      v28 = 2 * *((_QWORD *)this + 4);
      if (v28 <= 0x20)
        v28 = 32;
      *((_QWORD *)this + 4) = v28;
      v29 = v28 + 8;
      v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      *v30 = *((_QWORD *)this + 3);
      v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v30 + v29;
      *((_QWORD *)this + 3) = v30;
    }
    *((_QWORD *)this + 1) = v27 + 24;
    *(_WORD *)(v27 + 16) = 116;
    *(_BYTE *)(v27 + 18) = 0;
    if ((_DWORD)v170 != 1)
      return 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v27, *v169, this, v25, v26);
    if (v168)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v27, v168, this, v31, v32);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v27, this, v31, v32);
  }
  v33 = *((_DWORD *)this + 24);
  if (v33 && (v34 = v33 - 1, v35 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v34), *(_WORD *)(v35 + 16) == 43))
  {
    *((_DWORD *)this + 24) = v34;
    v36 = *((_QWORD *)this + 9);
    if (v36 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v36) == 80)
    {
      *((_QWORD *)this + 9) = v36 + 1;
      v35 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v35, 46, a4, a5);
    }
  }
  else
  {
    v35 = 0;
  }
  v38 = *((_QWORD *)this + 8);
  v37 = *((_QWORD *)this + 9);
  if (v37 < v38 && *(_BYTE *)(*((_QWORD *)this + 7) + v37) == 101)
  {
    *((_QWORD *)this + 9) = v37 + 1;
    v39 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v39;
    if (!v39 || v39 + 24 > *((_QWORD *)this + 2))
    {
      v40 = 2 * *((_QWORD *)this + 4);
      if (v40 <= 0x20)
        v40 = 32;
      *((_QWORD *)this + 4) = v40;
      v41 = v40 + 8;
      v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
      *v42 = *((_QWORD *)this + 3);
      v39 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v42 + v41;
      *((_QWORD *)this + 3) = v42;
    }
    *((_QWORD *)this + 1) = v39 + 24;
    *(_WORD *)(v39 + 16) = 105;
    *(_BYTE *)(v39 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v39, this, a4, a5);
    v38 = *((_QWORD *)this + 8);
    v37 = *((_QWORD *)this + 9);
  }
  if (v37 < v38 && *(_BYTE *)(*((_QWORD *)this + 7) + v37) == 65)
  {
    *((_QWORD *)this + 9) = v37 + 1;
    v43 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v43;
    if (!v43 || v43 + 24 > *((_QWORD *)this + 2))
    {
      v44 = 2 * *((_QWORD *)this + 4);
      if (v44 <= 0x20)
        v44 = 32;
      *((_QWORD *)this + 4) = v44;
      v45 = v44 + 8;
      v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
      *v46 = *((_QWORD *)this + 3);
      v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v46 + v45;
      *((_QWORD *)this + 3) = v46;
    }
    *((_QWORD *)this + 1) = v43 + 24;
    *(_WORD *)(v43 + 16) = 108;
    *(_BYTE *)(v43 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v43, this, a4, a5);
    v38 = *((_QWORD *)this + 8);
    v37 = *((_QWORD *)this + 9);
  }
  if (v37 >= v38)
    v47 = 0;
  else
    v47 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v37);
  HIDWORD(v48) = v47;
  LODWORD(v48) = (v47 << 24) - 1677721600;
  v49 = (v48 >> 25);
  if (v49 <= 7 && ((1 << v49) & 0x93) != 0)
  {
    if (v37 >= v38)
    {
      v50 = 0;
    }
    else
    {
      *((_QWORD *)this + 9) = v37 + 1;
      v50 = *(_BYTE *)(*((_QWORD *)this + 7) + v37);
    }
    v51 = v50;
    v52 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v52;
    if (!v52 || v52 + 24 > *((_QWORD *)this + 2))
    {
      v53 = 2 * *((_QWORD *)this + 4);
      if (v53 <= 0x20)
        v53 = 32;
      *((_QWORD *)this + 4) = v53;
      v54 = v53 + 8;
      v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
      *v55 = *((_QWORD *)this + 3);
      v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v55 + v54;
      *((_QWORD *)this + 3) = v55;
    }
    *((_QWORD *)this + 1) = v52 + 24;
    *(_WORD *)(v52 + 16) = 107;
    *(_BYTE *)(v52 + 18) = 4;
    *(_QWORD *)v52 = v51;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v52, this, a4, a5);
    v38 = *((_QWORD *)this + 8);
    v37 = *((_QWORD *)this + 9);
  }
  if (v37 >= v38)
    return 0;
  v56 = 0;
  *((_QWORD *)this + 9) = v37 + 1;
  v57 = "@callee_unowned";
  switch(*(_BYTE *)(*((_QWORD *)this + 7) + v37))
  {
    case 'g':
      v57 = "@callee_guaranteed";
      goto LABEL_72;
    case 't':
      v57 = "@convention(thin)";
      goto LABEL_72;
    case 'x':
      v57 = "@callee_owned";
      goto LABEL_72;
    case 'y':
LABEL_72:
      v58 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v58;
      v167 = (unsigned int *)v6;
      if (!v58 || v58 + 24 > *((_QWORD *)this + 2))
      {
        v59 = 2 * *((_QWORD *)this + 4);
        if (v59 <= 0x20)
          v59 = 32;
        *((_QWORD *)this + 4) = v59;
        v60 = v59 + 8;
        v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
        *v61 = *((_QWORD *)this + 3);
        v58 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
        v62 = (char *)v61 + v60;
        v6 = (unint64_t)v167;
        *((_QWORD *)this + 2) = v62;
        *((_QWORD *)this + 3) = v61;
      }
      *((_QWORD *)this + 1) = v58 + 24;
      v63 = strlen(v57);
      *(_WORD *)(v58 + 16) = 106;
      *(_BYTE *)(v58 + 18) = 3;
      *(_QWORD *)v58 = v57;
      *(_QWORD *)(v58 + 8) = v63;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v58, this, v64, v65);
      v68 = *((_QWORD *)this + 8);
      v69 = *((_QWORD *)this + 9);
      if (v69 < v68)
      {
        v70 = v69 + 1;
        *((_QWORD *)this + 9) = v69 + 1;
        v71 = *((_QWORD *)this + 7);
        v72 = 0;
        v73 = "block";
        switch(*(_BYTE *)(v71 + v69))
        {
          case 'B':
            goto LABEL_89;
          case 'C':
            v72 = 0;
            goto LABEL_80;
          case 'K':
            v72 = 0;
            v73 = "closure";
            goto LABEL_89;
          case 'M':
            v72 = 0;
            v73 = "method";
            goto LABEL_89;
          case 'O':
            v72 = 0;
            v73 = "objc_method";
            goto LABEL_89;
          case 'W':
            v72 = 0;
            v73 = "witness_method";
            goto LABEL_89;
          case 'z':
            if (v70 >= v68)
              goto LABEL_220;
            v165 = v69 + 2;
            *((_QWORD *)this + 9) = v165;
            v166 = *(char *)(v71 + v70);
            if (v166 == 66)
            {
              v72 = 1;
            }
            else
            {
              v70 = v165;
              if (v166 != 67)
              {
LABEL_220:
                v74 = v70 - 2;
                goto LABEL_83;
              }
              v72 = 1;
LABEL_80:
              v73 = "c";
            }
LABEL_89:
            v75 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v75;
            if (!v75 || (v76 = *((_QWORD *)this + 2), v75 + 24 > v76))
            {
              v77 = 2 * *((_QWORD *)this + 4);
              if (v77 <= 0x20)
                v77 = 32;
              *((_QWORD *)this + 4) = v77;
              v78 = v77 + 8;
              v79 = malloc_type_malloc(v77 + 8, 0xD0263BC5uLL);
              *v79 = *((_QWORD *)this + 3);
              v75 = ((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFFFF8;
              v76 = (unint64_t)v79 + v78;
              *((_QWORD *)this + 2) = (char *)v79 + v78;
              *((_QWORD *)this + 3) = v79;
            }
            *(_WORD *)(v75 + 16) = 113;
            *(_BYTE *)(v75 + 18) = 0;
            v80 = (v75 + 31) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v80;
            if (!v80 || v80 + 24 > v76)
            {
              v81 = 2 * *((_QWORD *)this + 4);
              if (v81 <= 0x20)
                v81 = 32;
              *((_QWORD *)this + 4) = v81;
              v82 = v81 + 8;
              v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
              *v83 = *((_QWORD *)this + 3);
              v80 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v83 + v82;
              *((_QWORD *)this + 3) = v83;
            }
            *((_QWORD *)this + 1) = v80 + 24;
            v84 = strlen(v73);
            *(_WORD *)(v80 + 16) = 114;
            *(_BYTE *)(v80 + 18) = 3;
            *(_QWORD *)v80 = v73;
            *(_QWORD *)(v80 + 8) = v84;
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v75, (swift::Demangle::__runtime::Node *)v80, this, v85, v86);
            if (v72)
            {
              v89 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleClangType(this);
              if (v89)
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v75, v89, this, v87, v88);
            }
            v6 = (unint64_t)v167;
            swift::Demangle::__runtime::Node::addChild(v167, (swift::Demangle::__runtime::Node *)v75, this, v87, v88);
            v68 = *((_QWORD *)this + 8);
            v74 = *((_QWORD *)this + 9);
            if (v74 < v68)
              goto LABEL_103;
            goto LABEL_113;
          default:
            goto LABEL_82;
        }
      }
      v70 = *((_QWORD *)this + 9);
LABEL_82:
      v74 = v70 - 1;
LABEL_83:
      *((_QWORD *)this + 9) = v74;
      if (v74 >= v68)
        goto LABEL_113;
LABEL_103:
      v90 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v74);
      if (v90 == 65)
      {
        v91 = "@yield_once";
      }
      else
      {
        if (v90 != 71)
          goto LABEL_113;
        v91 = "@yield_many";
      }
      *((_QWORD *)this + 9) = v74 + 1;
      v92 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v92;
      if (!v92 || v92 + 24 > *((_QWORD *)this + 2))
      {
        v93 = 2 * *((_QWORD *)this + 4);
        if (v93 <= 0x20)
          v93 = 32;
        *((_QWORD *)this + 4) = v93;
        v94 = v93 + 8;
        v95 = malloc_type_malloc(v93 + 8, 0xD0263BC5uLL);
        *v95 = *((_QWORD *)this + 3);
        v92 = ((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v95 + v94;
        *((_QWORD *)this + 3) = v95;
      }
      *((_QWORD *)this + 1) = v92 + 24;
      *(_WORD *)(v92 + 16) = 112;
      *(_BYTE *)(v92 + 18) = 3;
      *(_QWORD *)v92 = v91;
      *(_QWORD *)(v92 + 8) = 11;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v92, this, v66, v67);
      v68 = *((_QWORD *)this + 8);
      v74 = *((_QWORD *)this + 9);
LABEL_113:
      if (v74 < v68 && *(_BYTE *)(*((_QWORD *)this + 7) + v74) == 104)
      {
        *((_QWORD *)this + 9) = v74 + 1;
        v96 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v96;
        if (!v96 || v96 + 24 > *((_QWORD *)this + 2))
        {
          v97 = 2 * *((_QWORD *)this + 4);
          if (v97 <= 0x20)
            v97 = 32;
          *((_QWORD *)this + 4) = v97;
          v98 = v97 + 8;
          v99 = malloc_type_malloc(v97 + 8, 0xD0263BC5uLL);
          *v99 = *((_QWORD *)this + 3);
          v96 = ((unint64_t)v99 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v99 + v98;
          *((_QWORD *)this + 3) = v99;
        }
        *((_QWORD *)this + 1) = v96 + 24;
        *(_WORD *)(v96 + 16) = 112;
        *(_BYTE *)(v96 + 18) = 3;
        *(_QWORD *)v96 = "@Sendable";
        *(_QWORD *)(v96 + 8) = 9;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v96, this, v66, v67);
        v68 = *((_QWORD *)this + 8);
        v74 = *((_QWORD *)this + 9);
      }
      if (v74 < v68 && *(_BYTE *)(*((_QWORD *)this + 7) + v74) == 72)
      {
        *((_QWORD *)this + 9) = v74 + 1;
        v100 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v100;
        if (!v100 || v100 + 24 > *((_QWORD *)this + 2))
        {
          v101 = 2 * *((_QWORD *)this + 4);
          if (v101 <= 0x20)
            v101 = 32;
          *((_QWORD *)this + 4) = v101;
          v102 = v101 + 8;
          v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
          *v103 = *((_QWORD *)this + 3);
          v100 = ((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v103 + v102;
          *((_QWORD *)this + 3) = v103;
        }
        *((_QWORD *)this + 1) = v100 + 24;
        *(_WORD *)(v100 + 16) = 112;
        *(_BYTE *)(v100 + 18) = 3;
        *(_QWORD *)v100 = "@async";
        *(_QWORD *)(v100 + 8) = 6;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v100, this, v66, v67);
      }
      if (v35)
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v35, this, v66, v67);
      v104 = swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 118);
      if (v104)
      {
        v107 = (swift::Demangle::__runtime::Node *)v104;
        v108 = 0;
        do
        {
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v107, this, v105, v106);
          v115 = *((_QWORD *)this + 9);
          v116 = (const char *)&unk_A9F1F;
          if (v115 < *((_QWORD *)this + 8))
          {
            v116 = (const char *)&unk_A9F1F;
            if (*(_BYTE *)(*((_QWORD *)this + 7) + v115) == 119)
            {
              *((_QWORD *)this + 9) = v115 + 1;
              v116 = "@noDerivative";
            }
          }
          v117 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v117;
          if (!v117 || v117 + 24 > *((_QWORD *)this + 2))
          {
            v118 = 2 * *((_QWORD *)this + 4);
            if (v118 <= 0x20)
              v118 = 32;
            *((_QWORD *)this + 4) = v118;
            v119 = v118 + 8;
            v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
            *v120 = *((_QWORD *)this + 3);
            v117 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
            v121 = (char *)v120 + v119;
            v6 = (unint64_t)v167;
            *((_QWORD *)this + 2) = v121;
            *((_QWORD *)this + 3) = v120;
          }
          *((_QWORD *)this + 1) = v117 + 24;
          v122 = strlen(v116);
          *(_WORD *)(v117 + 16) = 110;
          *(_BYTE *)(v117 + 18) = 3;
          *(_QWORD *)v117 = v116;
          *(_QWORD *)(v117 + 8) = v122;
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v107, (swift::Demangle::__runtime::Node *)v117, this, v123, v124);
          v125 = *((_QWORD *)this + 9);
          if (v125 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v125) == 84)
          {
            *((_QWORD *)this + 9) = v125 + 1;
            v114 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v114;
            if (!v114 || v114 + 24 > *((_QWORD *)this + 2))
            {
              v109 = 2 * *((_QWORD *)this + 4);
              if (v109 <= 0x20)
                v109 = 32;
              *((_QWORD *)this + 4) = v109;
              v110 = v109 + 8;
              v111 = malloc_type_malloc(v109 + 8, 0xD0263BC5uLL);
              *v111 = *((_QWORD *)this + 3);
              v114 = ((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v111 + v110;
              *((_QWORD *)this + 3) = v111;
            }
            *((_QWORD *)this + 1) = v114 + 24;
            *(_WORD *)(v114 + 16) = 111;
            *(_BYTE *)(v114 + 18) = 3;
            *(_QWORD *)v114 = "sending";
            *(_QWORD *)(v114 + 8) = 7;
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v107, (swift::Demangle::__runtime::Node *)v114, this, v112, v113);
          }
          ++v108;
          v107 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 118);
        }
        while (v107);
      }
      else
      {
        v108 = 0;
      }
      v126 = *((_QWORD *)this + 9);
      if (v126 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v126) == 84)
      {
        *((_QWORD *)this + 9) = v126 + 1;
        v127 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v127;
        if (!v127 || v127 + 24 > *((_QWORD *)this + 2))
        {
          v128 = 2 * *((_QWORD *)this + 4);
          if (v128 <= 0x20)
            v128 = 32;
          *((_QWORD *)this + 4) = v128;
          v129 = v128 + 8;
          v130 = malloc_type_malloc(v128 + 8, 0xD0263BC5uLL);
          *v130 = *((_QWORD *)this + 3);
          v127 = ((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v130 + v129;
          *((_QWORD *)this + 3) = v130;
        }
        *((_QWORD *)this + 1) = v127 + 24;
        *(_WORD *)(v127 + 16) = 109;
        *(_BYTE *)(v127 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v127, this, v105, v106);
      }
      v131 = swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 120);
      if (v131)
      {
        v134 = (swift::Demangle::__runtime::Node *)v131;
        do
        {
          if (v6)
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v134, this, v132, v133);
          v143 = *((_QWORD *)this + 9);
          v144 = (const char *)&unk_A9F1F;
          if (v143 < *((_QWORD *)this + 8))
          {
            v144 = (const char *)&unk_A9F1F;
            if (*(_BYTE *)(*((_QWORD *)this + 7) + v143) == 119)
            {
              *((_QWORD *)this + 9) = v143 + 1;
              v144 = "@noDerivative";
            }
          }
          v138 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v138;
          if (!v138 || v138 + 24 > *((_QWORD *)this + 2))
          {
            v135 = 2 * *((_QWORD *)this + 4);
            if (v135 <= 0x20)
              v135 = 32;
            *((_QWORD *)this + 4) = v135;
            v136 = v135 + 8;
            v137 = malloc_type_malloc(v135 + 8, 0xD0263BC5uLL);
            *v137 = *((_QWORD *)this + 3);
            v138 = ((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8;
            v139 = (char *)v137 + v136;
            v6 = (unint64_t)v167;
            *((_QWORD *)this + 2) = v139;
            *((_QWORD *)this + 3) = v137;
          }
          *((_QWORD *)this + 1) = v138 + 24;
          v140 = strlen(v144);
          *(_WORD *)(v138 + 16) = 110;
          *(_BYTE *)(v138 + 18) = 3;
          *(_QWORD *)v138 = v144;
          *(_QWORD *)(v138 + 8) = v140;
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v134, (swift::Demangle::__runtime::Node *)v138, this, v141, v142);
          ++v108;
          v134 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 120);
        }
        while (v134);
      }
      v146 = *((_QWORD *)this + 8);
      v145 = *((_QWORD *)this + 9);
      if (v145 >= v146 || *(_BYTE *)(*((_QWORD *)this + 7) + v145) != 89)
        goto LABEL_182;
      v147 = v108 + 1;
      break;
    default:
      return v56;
  }
  do
  {
    v108 = v147;
    *((_QWORD *)this + 9) = v145 + 1;
    v148 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 121);
    if (!v148)
      return 0;
    if (v6)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v148, this, v132, v133);
    v146 = *((_QWORD *)this + 8);
    v145 = *((_QWORD *)this + 9);
    if (v145 >= v146)
      break;
    v147 = v108 + 1;
  }
  while (*(_BYTE *)(*((_QWORD *)this + 7) + v145) == 89);
LABEL_182:
  if (v145 >= v146 || *(_BYTE *)(*((_QWORD *)this + 7) + v145) != 122)
    goto LABEL_188;
  *((_QWORD *)this + 9) = v145 + 1;
  v149 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 122);
  if (!v149)
    return 0;
  if (v6)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v149, this, v132, v133);
  ++v108;
  v146 = *((_QWORD *)this + 8);
  v145 = *((_QWORD *)this + 9);
LABEL_188:
  if (v145 >= v146 || *(_BYTE *)(*((_QWORD *)this + 7) + v145) != 95)
    return 0;
  *((_QWORD *)this + 9) = v145 + 1;
  if (v108 >= 1)
  {
    v150 = 0;
    v151 = 0;
    do
    {
      v153 = *((_DWORD *)this + 24);
      if (!v153)
        return 0;
      v154 = v153 - 1;
      v155 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v154);
      if (*((_WORD *)v155 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v154;
      v156 = *(unsigned __int8 *)(v6 + 18);
      switch(v156)
      {
        case 5:
          v158 = *(unsigned int *)(v6 + 8);
          v157 = v158 + ~v151;
          if (v158 > v157)
            goto LABEL_204;
          break;
        case 2:
          v157 = 1 - v151;
          if ((unint64_t)(1 - v151) < 2)
            goto LABEL_204;
          break;
        case 1:
          v157 = v150;
          if (!v150)
          {
LABEL_204:
            v159 = v156 - 1;
            v160 = v6;
            if (v159 >= 2)
              v160 = *(_QWORD *)v6;
            v152 = *(unsigned int **)(v160 + 8 * v157);
            goto LABEL_193;
          }
          break;
      }
      v152 = 0;
LABEL_193:
      swift::Demangle::__runtime::Node::addChild(v152, v155, this, v132, v133);
      ++v151;
      --v150;
    }
    while (-(uint64_t)v108 != v150);
  }
  if (!v6)
    return 0;
  v56 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v56;
  if (!v56 || v56 + 24 > *((_QWORD *)this + 2))
  {
    v161 = 2 * *((_QWORD *)this + 4);
    if (v161 <= 0x20)
      v161 = 32;
    *((_QWORD *)this + 4) = v161;
    v162 = v161 + 8;
    v163 = malloc_type_malloc(v161 + 8, 0xD0263BC5uLL);
    *v163 = *((_QWORD *)this + 3);
    v56 = ((unint64_t)v163 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v163 + v162;
    *((_QWORD *)this + 3) = v163;
  }
  *((_QWORD *)this + 1) = v56 + 24;
  *(_WORD *)(v56 + 16) = 232;
  *(_BYTE *)(v56 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v56, (swift::Demangle::__runtime::Node *)v6, this, v132, v133);
  return v56;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleLocalIdentifier(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  swift::Demangle::__runtime::Node *v12;
  int v13;
  unsigned int v14;
  swift::Demangle::__runtime::Node *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unsigned int *v21;
  swift::Demangle::__runtime::Node *v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned __int16 *v26;
  int v27;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  __int16 v34;
  uint64_t v35;
  const char *v36;
  swift::Demangle::__runtime::Node *v37;
  int v38;
  unsigned int v39;
  swift::Demangle::__runtime::Node *v40;
  unsigned int v41;
  int v42;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  char __src;

  v6 = *((_QWORD *)this + 9);
  if (v6 >= *((_QWORD *)this + 8))
    goto LABEL_18;
  v7 = *((_QWORD *)this + 7);
  v8 = *(unsigned __int8 *)(v7 + v6);
  if (v8 == 108)
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v13 = *((_DWORD *)this + 24);
    if (!v13)
      return 0;
    v14 = v13 - 1;
    v15 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v14);
    if (*((_WORD *)v15 + 8) != 101)
      return 0;
    *((_DWORD *)this + 24) = v14;
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v17 = 2 * *((_QWORD *)this + 4);
      if (v17 <= 0x20)
        v17 = 32;
      *((_QWORD *)this + 4) = v17;
      v18 = v17 + 8;
      v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v20 = (char *)v19 + v18;
      *v19 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v20;
      *((_QWORD *)this + 3) = v19;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 176;
    *(_BYTE *)(v16 + 18) = 0;
    v21 = (unsigned int *)v16;
    v22 = v15;
    goto LABEL_38;
  }
  if (v8 == 76)
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v9 = *((_DWORD *)this + 24);
    if (!v9)
      return 0;
    v10 = v9 - 1;
    v11 = *((_QWORD *)this + 11);
    v12 = *(swift::Demangle::__runtime::Node **)(v11 + 8 * (v9 - 1));
    if (*((_WORD *)v12 + 8) == 101)
    {
      *((_DWORD *)this + 24) = v10;
      if (v9 == 1)
        return 0;
    }
    else
    {
      v12 = 0;
      v10 = *((_DWORD *)this + 24);
    }
    v41 = v10 - 1;
    v26 = *(unsigned __int16 **)(v11 + 8 * v41);
    v42 = v26[8];
    if ((v42 - 173) > 0x3C || ((1 << (v42 + 83)) & 0x100000010000010DLL) == 0)
    {
      v44 = (v42 - 101) > 0x24 || ((1 << (v42 - 101)) & 0x1000800001) == 0;
      if (v44 && v42 != 347)
        return 0;
    }
    *((_DWORD *)this + 24) = v41;
    if (!v12)
      return 0;
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v45 = 2 * *((_QWORD *)this + 4);
      if (v45 <= 0x20)
        v45 = 32;
      *((_QWORD *)this + 4) = v45;
      v46 = v45 + 8;
      v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
      v48 = (char *)v47 + v46;
      *v47 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v48;
      *((_QWORD *)this + 3) = v47;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    v34 = 176;
    goto LABEL_37;
  }
  if ((char)v8 < 97)
  {
    if (v8 - 65 > 9)
      goto LABEL_18;
  }
  else if (v8 >= 0x6B)
  {
LABEL_18:
    v23 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
    v24 = *((_DWORD *)this + 24);
    if (!v24)
      return 0;
    v12 = (swift::Demangle::__runtime::Node *)v23;
    v25 = v24 - 1;
    v26 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v25);
    v27 = v26[8];
    if ((v27 - 173) > 0x3C || ((1 << (v27 + 83)) & 0x100000010000010DLL) == 0)
    {
      v29 = (v27 - 101) > 0x24 || ((1 << (v27 - 101)) & 0x1000800001) == 0;
      if (v29 && v27 != 347)
        return 0;
    }
    *((_DWORD *)this + 24) = v25;
    if (!v23)
      return 0;
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v30 = 2 * *((_QWORD *)this + 4);
      if (v30 <= 0x20)
        v30 = 32;
      *((_QWORD *)this + 4) = v30;
      v31 = v30 + 8;
      v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v33 = (char *)v32 + v31;
      *v32 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v33;
      *((_QWORD *)this + 3) = v32;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    v34 = 137;
LABEL_37:
    *(_WORD *)(v16 + 16) = v34;
    *(_BYTE *)(v16 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, v12, this, a4, a5);
    v21 = (unsigned int *)v16;
    v22 = (swift::Demangle::__runtime::Node *)v26;
LABEL_38:
    swift::Demangle::__runtime::Node::addChild(v21, v22, this, a4, a5);
    return v16;
  }
  *((_QWORD *)this + 9) = v6 + 1;
  __src = *(_BYTE *)(v7 + v6);
  v37 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, 101, &__src, 1uLL);
  v38 = *((_DWORD *)this + 24);
  if (v38)
  {
    v39 = v38 - 1;
    v40 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v39);
    *((_DWORD *)this + 24) = v39;
  }
  else
  {
    v40 = 0;
  }
  v50 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v50;
  if (!v50 || v50 + 24 > *((_QWORD *)this + 2))
  {
    v51 = 2 * *((_QWORD *)this + 4);
    if (v51 <= 0x20)
      v51 = 32;
    *((_QWORD *)this + 4) = v51;
    v52 = v51 + 8;
    v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
    v54 = (char *)v53 + v52;
    *v53 = *((_QWORD *)this + 3);
    v50 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v54;
    *((_QWORD *)this + 3) = v53;
  }
  *((_QWORD *)this + 1) = v50 + 24;
  *(_WORD *)(v50 + 16) = 205;
  *(_BYTE *)(v50 + 18) = 0;
  if (v37 && v50)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v50, v37, this, v35, v36);
  v16 = 0;
  if (v40 && v50)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v50, v40, this, v35, v36);
    return v50;
  }
  return v16;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatype(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  unsigned int *v8;
  swift::Demangle::__runtime::Node *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  __int16 v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  int v21;
  unsigned int v22;
  uint64_t *v23;
  int v24;
  swift::Demangle::__runtime::Node *v25;
  uint64_t v26;
  const char *v27;
  swift::Demangle::__runtime::Node *v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  int v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  char *v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  char *v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  char *v106;
  int v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  char *v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  char *v119;
  unsigned int *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  char *v124;
  int v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  char *v130;
  int v131;
  unsigned int v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  char *v136;
  int v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  int v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  char *v148;
  int v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  char *v154;
  int v155;
  unsigned int v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  char *v160;
  int v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  char *v166;
  int v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  char *v172;
  int v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  char *v178;
  int v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  char *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  char *v189;
  int v190;
  unsigned int v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  char *v195;
  int v196;
  unsigned int v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  char *v201;
  int v202;
  unsigned int v203;
  unint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  char *v207;
  int v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  char *v213;
  int v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  char *v219;
  int v220;
  unsigned int v221;
  unint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  char *v225;

  v5 = *((_QWORD *)this + 9);
  if (v5 < *((_QWORD *)this + 8))
  {
    v7 = 0;
    *((_QWORD *)this + 9) = v5 + 1;
    switch(*(_BYTE *)(*((_QWORD *)this + 7) + v5))
    {
      case 'A':
        v8 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
        if (!v8)
          return 0;
        v9 = (swift::Demangle::__runtime::Node *)v8;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v10 = 2 * *((_QWORD *)this + 4);
          if (v10 <= 0x20)
            v10 = 32;
          *((_QWORD *)this + 4) = v10;
          v11 = v10 + 8;
          v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
          v13 = (char *)v12 + v11;
          *v12 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v13;
          *((_QWORD *)this + 3) = v12;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 260;
        goto LABEL_291;
      case 'B':
        v15 = *((_DWORD *)this + 24);
        if (!v15)
          return 0;
        v16 = v15 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v16);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v16;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v17 = 2 * *((_QWORD *)this + 4);
          if (v17 <= 0x20)
            v17 = 32;
          *((_QWORD *)this + 4) = v17;
          v18 = v17 + 8;
          v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
          v20 = (char *)v19 + v18;
          *v19 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v20;
          *((_QWORD *)this + 3) = v19;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 258;
        goto LABEL_291;
      case 'C':
        v21 = *((_DWORD *)this + 24);
        if (!v21)
          return 0;
        v22 = v21 - 1;
        v23 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * v22);
        if (*((_WORD *)v23 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v22;
        v24 = *((unsigned __int8 *)v23 + 18);
        v25 = (swift::Demangle::__runtime::Node *)v23;
        if ((v24 - 1) >= 2)
          v25 = (swift::Demangle::__runtime::Node *)*v23;
          return 0;
        if ((v24 - 1) < 2)
          goto LABEL_27;
        if (v24 == 5 && *((_DWORD *)v23 + 2))
        {
          v23 = (uint64_t *)*v23;
LABEL_27:
          v28 = (swift::Demangle::__runtime::Node *)*v23;
        }
        else
        {
          v28 = 0;
        }
        return swift::Demangle::__runtime::Demangler::createWithChild(this, 261, v28, v26, v27);
      case 'D':
        v29 = *((_DWORD *)this + 24);
        if (!v29)
          return 0;
        v30 = v29 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v30);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v30;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v31 = 2 * *((_QWORD *)this + 4);
          if (v31 <= 0x20)
            v31 = 32;
          *((_QWORD *)this + 4) = v31;
          v32 = v31 + 8;
          v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          v34 = (char *)v33 + v32;
          *v33 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v34;
          *((_QWORD *)this + 3) = v33;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 243;
        goto LABEL_291;
      case 'F':
        v35 = *((_DWORD *)this + 24);
        if (!v35)
          return 0;
        v36 = v35 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v36);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v36;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v37 = 2 * *((_QWORD *)this + 4);
          if (v37 <= 0x20)
            v37 = 32;
          *((_QWORD *)this + 4) = v37;
          v38 = v37 + 8;
          v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
          v40 = (char *)v39 + v38;
          *v39 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v40;
          *((_QWORD *)this + 3) = v39;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 259;
        goto LABEL_291;
      case 'I':
        v41 = *((_DWORD *)this + 24);
        if (!v41)
          return 0;
        v42 = v41 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v42);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v42;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v43 = 2 * *((_QWORD *)this + 4);
          if (v43 <= 0x20)
            v43 = 32;
          *((_QWORD *)this + 4) = v43;
          v44 = v43 + 8;
          v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
          v46 = (char *)v45 + v44;
          *v45 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v46;
          *((_QWORD *)this + 3) = v45;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 240;
        goto LABEL_291;
      case 'J':
        v47 = *((_DWORD *)this + 24);
        if (!v47)
          return 0;
        v48 = v47 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v48);
        *((_DWORD *)this + 24) = v48;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v49 = 2 * *((_QWORD *)this + 4);
          if (v49 <= 0x20)
            v49 = 32;
          *((_QWORD *)this + 4) = v49;
          v50 = v49 + 8;
          v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
          v52 = (char *)v51 + v50;
          *v51 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v52;
          *((_QWORD *)this + 3) = v51;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 314;
        goto LABEL_291;
      case 'K':
        v53 = *((_DWORD *)this + 24);
        if (!v53)
          return 0;
        v54 = v53 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v54);
        *((_DWORD *)this + 24) = v54;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v55 = 2 * *((_QWORD *)this + 4);
          if (v55 <= 0x20)
            v55 = 32;
          *((_QWORD *)this + 4) = v55;
          v56 = v55 + 8;
          v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
          v58 = (char *)v57 + v56;
          *v57 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v58;
          *((_QWORD *)this + 3) = v57;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 312;
        goto LABEL_291;
      case 'L':
        v59 = *((_DWORD *)this + 24);
        if (!v59)
          return 0;
        v60 = v59 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v60);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v60;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v61 = 2 * *((_QWORD *)this + 4);
          if (v61 <= 0x20)
            v61 = 32;
          *((_QWORD *)this + 4) = v61;
          v62 = v61 + 8;
          v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
          v64 = (char *)v63 + v62;
          *v63 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v64;
          *((_QWORD *)this + 3) = v63;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 244;
        goto LABEL_291;
      case 'M':
        v65 = *((_DWORD *)this + 24);
        if (!v65)
          return 0;
        v66 = v65 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v66);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v66;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v67 = 2 * *((_QWORD *)this + 4);
          if (v67 <= 0x20)
            v67 = 32;
          *((_QWORD *)this + 4) = v67;
          v68 = v67 + 8;
          v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
          v70 = (char *)v69 + v68;
          *v69 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v70;
          *((_QWORD *)this + 3) = v69;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 310;
        goto LABEL_291;
      case 'N':
        v71 = *((_DWORD *)this + 24);
        if (!v71)
          return 0;
        v72 = v71 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v72);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v72;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v73 = 2 * *((_QWORD *)this + 4);
          if (v73 <= 0x20)
            v73 = 32;
          *((_QWORD *)this + 4) = v73;
          v74 = v73 + 8;
          v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
          v76 = (char *)v75 + v74;
          *v75 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v76;
          *((_QWORD *)this + 3) = v75;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 313;
        goto LABEL_291;
      case 'P':
        v77 = *((_DWORD *)this + 24);
        if (!v77)
          return 0;
        v78 = v77 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v78);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v78;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v79 = 2 * *((_QWORD *)this + 4);
          if (v79 <= 0x20)
            v79 = 32;
          *((_QWORD *)this + 4) = v79;
          v80 = v79 + 8;
          v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          v82 = (char *)v81 + v80;
          *v81 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v82;
          *((_QWORD *)this + 3) = v81;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 97;
        goto LABEL_291;
      case 'Q':
        v83 = *((_DWORD *)this + 24);
        if (!v83)
          return 0;
        v84 = v83 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v84);
        *((_DWORD *)this + 24) = v84;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v85 = 2 * *((_QWORD *)this + 4);
          if (v85 <= 0x20)
            v85 = 32;
          *((_QWORD *)this + 4) = v85;
          v86 = v85 + 8;
          v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
          v88 = (char *)v87 + v86;
          *v87 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v88;
          *((_QWORD *)this + 3) = v87;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 302;
        goto LABEL_291;
      case 'S':
        v89 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
        if (!v89)
          return 0;
        v9 = (swift::Demangle::__runtime::Node *)v89;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v90 = 2 * *((_QWORD *)this + 4);
          if (v90 <= 0x20)
            v90 = 32;
          *((_QWORD *)this + 4) = v90;
          v91 = v90 + 8;
          v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
          v93 = (char *)v92 + v91;
          *v92 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v93;
          *((_QWORD *)this + 3) = v92;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 193;
        goto LABEL_291;
      case 'U':
        v94 = *((_DWORD *)this + 24);
        if (!v94)
          return 0;
        v95 = v94 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v95);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v95;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v96 = 2 * *((_QWORD *)this + 4);
          if (v96 <= 0x20)
            v96 = 32;
          *((_QWORD *)this + 4) = v96;
          v97 = v96 + 8;
          v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
          v99 = (char *)v98 + v97;
          *v98 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v99;
          *((_QWORD *)this + 3) = v98;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 149;
        goto LABEL_291;
      case 'V':
        v100 = *((_DWORD *)this + 24);
        if (!v100)
          return 0;
        v101 = v100 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v100 - 1));
        v102 = *((unsigned __int16 *)v9 + 8);
        if (v102 != 232 && !swift::Demangle::__runtime::isContext(v102))
          return 0;
        *((_DWORD *)this + 24) = v101;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v103 = 2 * *((_QWORD *)this + 4);
          if (v103 <= 0x20)
            v103 = 32;
          *((_QWORD *)this + 4) = v103;
          v104 = v103 + 8;
          v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
          v106 = (char *)v105 + v104;
          *v105 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v106;
          *((_QWORD *)this + 3) = v105;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 177;
        goto LABEL_291;
      case 'X':
        return swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor(this, a2, a3, a4, a5);
      case 'a':
        v108 = *((_DWORD *)this + 24);
        if (!v108)
          return 0;
        v109 = v108 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v109);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v109;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v110 = 2 * *((_QWORD *)this + 4);
          if (v110 <= 0x20)
            v110 = 32;
          *((_QWORD *)this + 4) = v110;
          v111 = v110 + 8;
          v112 = malloc_type_malloc(v110 + 8, 0xD0263BC5uLL);
          v113 = (char *)v112 + v111;
          *v112 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v113;
          *((_QWORD *)this + 3) = v112;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 238;
        goto LABEL_291;
      case 'b':
        v114 = *((_DWORD *)this + 24);
        if (!v114)
          return 0;
        v115 = v114 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v115);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v115;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v116 = 2 * *((_QWORD *)this + 4);
          if (v116 <= 0x20)
            v116 = 32;
          *((_QWORD *)this + 4) = v116;
          v117 = v116 + 8;
          v118 = malloc_type_malloc(v116 + 8, 0xD0263BC5uLL);
          v119 = (char *)v118 + v117;
          *v118 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v119;
          *((_QWORD *)this + 3) = v118;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 311;
        goto LABEL_291;
      case 'c':
        v120 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
        if (!v120)
          return 0;
        v9 = (swift::Demangle::__runtime::Node *)v120;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v121 = 2 * *((_QWORD *)this + 4);
          if (v121 <= 0x20)
            v121 = 32;
          *((_QWORD *)this + 4) = v121;
          v122 = v121 + 8;
          v123 = malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
          v124 = (char *)v123 + v122;
          *v123 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v124;
          *((_QWORD *)this + 3) = v123;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 188;
        goto LABEL_291;
      case 'f':
        v125 = *((_DWORD *)this + 24);
        if (!v125)
          return 0;
        v126 = v125 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v126);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v126;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v127 = 2 * *((_QWORD *)this + 4);
          if (v127 <= 0x20)
            v127 = 32;
          *((_QWORD *)this + 4) = v127;
          v128 = v127 + 8;
          v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
          v130 = (char *)v129 + v128;
          *v129 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v130;
          *((_QWORD *)this + 3) = v129;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 75;
        goto LABEL_291;
      case 'g':
        v131 = *((_DWORD *)this + 24);
        if (!v131)
          return 0;
        v132 = v131 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v132);
        *((_DWORD *)this + 24) = v132;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v133 = 2 * *((_QWORD *)this + 4);
          if (v133 <= 0x20)
            v133 = 32;
          *((_QWORD *)this + 4) = v133;
          v134 = v133 + 8;
          v135 = malloc_type_malloc(v133 + 8, 0xD0263BC5uLL);
          v136 = (char *)v135 + v134;
          *v135 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v135 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v136;
          *((_QWORD *)this + 3) = v135;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 304;
        goto LABEL_291;
      case 'h':
        v137 = *((_DWORD *)this + 24);
        if (!v137)
          return 0;
        v138 = v137 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v138);
        *((_DWORD *)this + 24) = v138;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v139 = 2 * *((_QWORD *)this + 4);
          if (v139 <= 0x20)
            v139 = 32;
          *((_QWORD *)this + 4) = v139;
          v140 = v139 + 8;
          v141 = malloc_type_malloc(v139 + 8, 0xD0263BC5uLL);
          v142 = (char *)v141 + v140;
          *v141 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v142;
          *((_QWORD *)this + 3) = v141;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 305;
        goto LABEL_291;
      case 'i':
        v143 = *((_DWORD *)this + 24);
        if (!v143)
          return 0;
        v144 = v143 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v144);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v144;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v145 = 2 * *((_QWORD *)this + 4);
          if (v145 <= 0x20)
            v145 = 32;
          *((_QWORD *)this + 4) = v145;
          v146 = v145 + 8;
          v147 = malloc_type_malloc(v145 + 8, 0xD0263BC5uLL);
          v148 = (char *)v147 + v146;
          *v147 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v148;
          *((_QWORD *)this + 3) = v147;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 241;
        goto LABEL_291;
      case 'j':
        v149 = *((_DWORD *)this + 24);
        if (!v149)
          return 0;
        v150 = v149 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v150);
        *((_DWORD *)this + 24) = v150;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v151 = 2 * *((_QWORD *)this + 4);
          if (v151 <= 0x20)
            v151 = 32;
          *((_QWORD *)this + 4) = v151;
          v152 = v151 + 8;
          v153 = malloc_type_malloc(v151 + 8, 0xD0263BC5uLL);
          v154 = (char *)v153 + v152;
          *v153 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v154;
          *((_QWORD *)this + 3) = v153;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 306;
        goto LABEL_291;
      case 'k':
        v155 = *((_DWORD *)this + 24);
        if (!v155)
          return 0;
        v156 = v155 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v156);
        *((_DWORD *)this + 24) = v156;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v157 = 2 * *((_QWORD *)this + 4);
          if (v157 <= 0x20)
            v157 = 32;
          *((_QWORD *)this + 4) = v157;
          v158 = v157 + 8;
          v159 = malloc_type_malloc(v157 + 8, 0xD0263BC5uLL);
          v160 = (char *)v159 + v158;
          *v159 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v159 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v160;
          *((_QWORD *)this + 3) = v159;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 307;
        goto LABEL_291;
      case 'l':
        v161 = *((_DWORD *)this + 24);
        if (!v161)
          return 0;
        v162 = v161 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v162);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v162;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v163 = 2 * *((_QWORD *)this + 4);
          if (v163 <= 0x20)
            v163 = 32;
          *((_QWORD *)this + 4) = v163;
          v164 = v163 + 8;
          v165 = malloc_type_malloc(v163 + 8, 0xD0263BC5uLL);
          v166 = (char *)v165 + v164;
          *v165 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v166;
          *((_QWORD *)this + 3) = v165;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 242;
        goto LABEL_291;
      case 'm':
        v167 = *((_DWORD *)this + 24);
        if (!v167)
          return 0;
        v168 = v167 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v168);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v168;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v169 = 2 * *((_QWORD *)this + 4);
          if (v169 <= 0x20)
            v169 = 32;
          *((_QWORD *)this + 4) = v169;
          v170 = v169 + 8;
          v171 = malloc_type_malloc(v169 + 8, 0xD0263BC5uLL);
          v172 = (char *)v171 + v170;
          *v171 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v172;
          *((_QWORD *)this + 3) = v171;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 147;
        goto LABEL_291;
      case 'n':
        v173 = *((_DWORD *)this + 24);
        if (!v173)
          return 0;
        v174 = v173 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v174);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v174;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v175 = 2 * *((_QWORD *)this + 4);
          if (v175 <= 0x20)
            v175 = 32;
          *((_QWORD *)this + 4) = v175;
          v176 = v175 + 8;
          v177 = malloc_type_malloc(v175 + 8, 0xD0263BC5uLL);
          v178 = (char *)v177 + v176;
          *v177 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v178;
          *((_QWORD *)this + 3) = v177;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 158;
        goto LABEL_291;
      case 'o':
        v179 = *((_DWORD *)this + 24);
        if (!v179)
          return 0;
        v180 = v179 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v180);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v180;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v181 = 2 * *((_QWORD *)this + 4);
          if (v181 <= 0x20)
            v181 = 32;
          *((_QWORD *)this + 4) = v181;
          v182 = v181 + 8;
          v183 = malloc_type_malloc(v181 + 8, 0xD0263BC5uLL);
          v184 = (char *)v183 + v182;
          *v183 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v183 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v184;
          *((_QWORD *)this + 3) = v183;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 25;
        goto LABEL_291;
      case 'p':
        v185 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
        if (!v185)
          return 0;
        v9 = (swift::Demangle::__runtime::Node *)v185;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v186 = 2 * *((_QWORD *)this + 4);
          if (v186 <= 0x20)
            v186 = 32;
          *((_QWORD *)this + 4) = v186;
          v187 = v186 + 8;
          v188 = malloc_type_malloc(v186 + 8, 0xD0263BC5uLL);
          v189 = (char *)v188 + v187;
          *v188 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v188 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v189;
          *((_QWORD *)this + 3) = v188;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 186;
        goto LABEL_291;
      case 'q':
        v190 = *((_DWORD *)this + 24);
        if (!v190)
          return 0;
        v191 = v190 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v191);
        *((_DWORD *)this + 24) = v191;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v192 = 2 * *((_QWORD *)this + 4);
          if (v192 <= 0x20)
            v192 = 32;
          *((_QWORD *)this + 4) = v192;
          v193 = v192 + 8;
          v194 = malloc_type_malloc(v192 + 8, 0xD0263BC5uLL);
          v195 = (char *)v194 + v193;
          *v194 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v195;
          *((_QWORD *)this + 3) = v194;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 335;
        goto LABEL_291;
      case 'r':
        v196 = *((_DWORD *)this + 24);
        if (!v196)
          return 0;
        v197 = v196 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v197);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v197;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v198 = 2 * *((_QWORD *)this + 4);
          if (v198 <= 0x20)
            v198 = 32;
          *((_QWORD *)this + 4) = v198;
          v199 = v198 + 8;
          v200 = malloc_type_malloc(v198 + 8, 0xD0263BC5uLL);
          v201 = (char *)v200 + v199;
          *v200 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v201;
          *((_QWORD *)this + 3) = v200;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 239;
        goto LABEL_291;
      case 's':
        v202 = *((_DWORD *)this + 24);
        if (!v202)
          return 0;
        v203 = v202 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v203);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v203;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v204 = 2 * *((_QWORD *)this + 4);
          if (v204 <= 0x20)
            v204 = 32;
          *((_QWORD *)this + 4) = v204;
          v205 = v204 + 8;
          v206 = malloc_type_malloc(v204 + 8, 0xD0263BC5uLL);
          v207 = (char *)v206 + v205;
          *v206 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v207;
          *((_QWORD *)this + 3) = v206;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 150;
        goto LABEL_291;
      case 't':
        v208 = *((_DWORD *)this + 24);
        if (!v208)
          return 0;
        v209 = v208 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v209);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v209;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v210 = 2 * *((_QWORD *)this + 4);
          if (v210 <= 0x20)
            v210 = 32;
          *((_QWORD *)this + 4) = v210;
          v211 = v210 + 8;
          v212 = malloc_type_malloc(v210 + 8, 0xD0263BC5uLL);
          v213 = (char *)v212 + v211;
          *v212 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v213;
          *((_QWORD *)this + 3) = v212;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 151;
        goto LABEL_291;
      case 'u':
        v214 = *((_DWORD *)this + 24);
        if (!v214)
          return 0;
        v215 = v214 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v215);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v215;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v216 = 2 * *((_QWORD *)this + 4);
          if (v216 <= 0x20)
            v216 = 32;
          *((_QWORD *)this + 4) = v216;
          v217 = v216 + 8;
          v218 = malloc_type_malloc(v216 + 8, 0xD0263BC5uLL);
          v219 = (char *)v218 + v217;
          *v218 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v219;
          *((_QWORD *)this + 3) = v218;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 148;
        goto LABEL_291;
      case 'z':
        v220 = *((_DWORD *)this + 24);
        if (!v220)
          return 0;
        v221 = v220 - 1;
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v221);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v221;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v222 = 2 * *((_QWORD *)this + 4);
          if (v222 <= 0x20)
            v222 = 32;
          *((_QWORD *)this + 4) = v222;
          v223 = v222 + 8;
          v224 = malloc_type_malloc(v222 + 8, 0xD0263BC5uLL);
          v225 = (char *)v224 + v223;
          *v224 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v224 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v225;
          *((_QWORD *)this + 3) = v224;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 318;
LABEL_291:
        *(_WORD *)(v7 + 16) = v14;
        *(_BYTE *)(v7 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v9, this, a4, a5);
        return v7;
      default:
        return v7;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleArchetype(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  swift::Demangle::__runtime::Demangler *v7;
  unint64_t Type;
  unint64_t v9;
  uint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int16 v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  swift::Demangle::__runtime::Node **v27;
  swift::Demangle::__runtime::Node *DependentGenericParamType;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  int v33;
  uint64_t v34;
  swift::Demangle::__runtime::Node *v35;
  int v36;
  int v37;
  swift::Demangle::__runtime::Node *v38;
  int v39;
  swift::Demangle::__runtime::Node *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  swift::Demangle::__runtime::Node *v46;
  int v47;
  swift::Demangle::__runtime::Node *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned int *v57;
  swift::Demangle::__runtime::Node *v58;
  swift::Demangle::__runtime::Node *v59;
  unint64_t v60;
  const void **v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  const char *v74;
  unsigned int *v75;
  swift::Demangle::__runtime::Node *v76;
  unsigned int v77;
  swift::Demangle::__runtime::Node *v78;
  int v79;
  swift::Demangle::__runtime::Node *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  swift::Demangle::__runtime::Node *Node;
  const char *v101;
  unsigned int *v102;
  uint64_t v103;
  const char *v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  swift::Demangle::__runtime::Node *v115;
  int v116;
  swift::Demangle::__runtime::Node *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  swift::Demangle::__runtime::Node *v124;
  swift::Demangle::__runtime::Node **v125;
  uint64_t v126;
  unint64_t v127;

  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 >= v5)
    return 0;
  v7 = this;
  Type = 0;
  v9 = v6 + 1;
  *((_QWORD *)this + 9) = v6 + 1;
  v10 = *((_QWORD *)this + 7);
  switch(*(_BYTE *)(v10 + v6))
  {
    case 'O':
      v11 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v11)
        return 0;
      v12 = (unint64_t)v11;
      Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
      {
        v13 = 2 * *((_QWORD *)v7 + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)v7 + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        *v15 = *((_QWORD *)v7 + 3);
        Type = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v15 + v14;
        *((_QWORD *)v7 + 3) = v15;
      }
      *((_QWORD *)v7 + 1) = Type + 24;
      v16 = 309;
      goto LABEL_67;
    case 'P':
      return swift::Demangle::__runtime::Demangler::popPack(this, a2, a3, a4, a5);
    case 'R':
      if (v9 >= v5)
        return 0;
      v18 = *(unsigned __int8 *)(v10 + v9);
      if (v18 == 95)
      {
        v19 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
      }
      else
      {
        if ((v18 - 48) > 9)
          return 0;
        v92 = 0;
        while (1)
        {
          v93 = *(unsigned __int8 *)(v10 + v9);
          if ((v93 - 48) > 9)
            break;
          v94 = v93 + 10 * v92 - 48;
          if (v94 < v92)
            return 0;
          Type = 0;
          *((_QWORD *)this + 9) = ++v9;
          v92 = v94;
          if (v5 == v9)
            return Type;
        }
        Type = 0;
        if (v92 < 0 || v9 >= v5 || v93 != 95)
          return Type;
        *((_QWORD *)this + 9) = v9 + 1;
        v19 = (v92 + 1);
      }
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        *v23 = *((_QWORD *)v7 + 3);
        v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v23 + v22;
        *((_QWORD *)v7 + 3) = v23;
      }
      *((_QWORD *)v7 + 1) = v20 + 24;
      *(_WORD *)(v20 + 16) = 341;
      *(_BYTE *)(v20 + 18) = 4;
      *(_QWORD *)v20 = v19;
      v12 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v12;
      if (!v12 || v12 + 24 > *((_QWORD *)v7 + 2))
      {
        v24 = 2 * *((_QWORD *)v7 + 4);
        if (v24 <= 0x20)
          v24 = 32;
        *((_QWORD *)v7 + 4) = v24;
        v25 = v24 + 8;
        v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
        *v26 = *((_QWORD *)v7 + 3);
        v12 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v26 + v25;
        *((_QWORD *)v7 + 3) = v26;
      }
      *((_QWORD *)v7 + 1) = v12 + 24;
      *(_WORD *)(v12 + 16) = 308;
      *(_BYTE *)(v12 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, (swift::Demangle::__runtime::Node *)v20, v7, a4, a5);
      Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
      {
LABEL_63:
        v54 = 2 * *((_QWORD *)v7 + 4);
        if (v54 <= 0x20)
          v54 = 32;
        *((_QWORD *)v7 + 4) = v54;
        v55 = v54 + 8;
        v56 = malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        *v56 = *((_QWORD *)v7 + 3);
        Type = ((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v56 + v55;
        *((_QWORD *)v7 + 3) = v56;
      }
LABEL_66:
      *((_QWORD *)v7 + 1) = Type + 24;
      v16 = 232;
LABEL_67:
      *(_WORD *)(Type + 16) = v16;
      *(_BYTE *)(Type + 18) = 0;
      v57 = (unsigned int *)Type;
      v58 = (swift::Demangle::__runtime::Node *)v12;
      goto LABEL_68;
    case 'S':
      return swift::Demangle::__runtime::Demangler::popSILPack(this, a2, a3, a4, a5);
    case 'X':
      v27 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(this, 0, a3, a4, a5);
      goto LABEL_74;
    case 'Y':
      DependentGenericParamType = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
      goto LABEL_31;
    case 'Z':
      DependentGenericParamType = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0, a4, a5);
LABEL_31:
      v27 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(v7, DependentGenericParamType, v29, v30, v31);
      goto LABEL_74;
    case 'a':
      v32 = *((_DWORD *)this + 24);
      if (!v32)
        return 0;
      v33 = v32 - 1;
      v34 = *((_QWORD *)this + 11);
      v35 = *(swift::Demangle::__runtime::Node **)(v34 + 8 * (v32 - 1));
      if (*((_WORD *)v35 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v33;
        if (v32 == 1)
          return 0;
      }
      else
      {
        v35 = 0;
        v33 = *((_DWORD *)this + 24);
      }
      v77 = v33 - 1;
      v78 = *(swift::Demangle::__runtime::Node **)(v34 + 8 * v77);
      if (*((_WORD *)v78 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v77;
      v79 = *((unsigned __int8 *)v78 + 18);
      if (v79 == 1)
        goto LABEL_99;
      if (v79 != 5 || *((_DWORD *)v78 + 2) != 1)
        return 0;
      v78 = *(swift::Demangle::__runtime::Node **)v78;
LABEL_99:
      if (!v35)
        return 0;
      v80 = *(swift::Demangle::__runtime::Node **)v78;
      if (!*(_QWORD *)v78)
        return 0;
      v81 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v81;
      if (!v81 || v81 + 24 > *((_QWORD *)this + 2))
      {
        v82 = 2 * *((_QWORD *)this + 4);
        if (v82 <= 0x20)
          v82 = 32;
        *((_QWORD *)this + 4) = v82;
        v83 = v82 + 8;
        v84 = malloc_type_malloc(v82 + 8, 0xD0263BC5uLL);
        *v84 = *((_QWORD *)v7 + 3);
        v81 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v84 + v83;
        *((_QWORD *)v7 + 3) = v84;
      }
      *((_QWORD *)v7 + 1) = v81 + 24;
      *(_WORD *)(v81 + 16) = 5;
      *(_BYTE *)(v81 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v81, v80, v7, a4, a5);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v81, v35, v7, v85, v86);
      Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
      {
        v89 = 2 * *((_QWORD *)v7 + 4);
        if (v89 <= 0x20)
          v89 = 32;
        *((_QWORD *)v7 + 4) = v89;
        v90 = v89 + 8;
        v91 = malloc_type_malloc(v89 + 8, 0xD0263BC5uLL);
        *v91 = *((_QWORD *)v7 + 3);
        Type = ((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v91 + v90;
        *((_QWORD *)v7 + 3) = v91;
      }
      *((_QWORD *)v7 + 1) = Type + 24;
      *(_WORD *)(Type + 16) = 232;
      *(_BYTE *)(Type + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)Type, (swift::Demangle::__runtime::Node *)v81, v7, v87, v88);
      v125 = (swift::Demangle::__runtime::Node **)Type;
LABEL_75:
      v61 = (const void **)((char *)v7 + 104);
      v62 = (uint64_t *)&v125;
      goto LABEL_76;
    case 'e':
      v36 = *((_DWORD *)this + 24);
      if (!v36)
        goto LABEL_77;
      v37 = v36 - 1;
      v38 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v36 - 1));
      if (*((_WORD *)v38 + 8) != 232)
        goto LABEL_77;
      *((_DWORD *)this + 24) = v37;
      v39 = *((unsigned __int8 *)v38 + 18);
      if (v39 == 1)
        goto LABEL_42;
      if (v39 == 5 && *((_DWORD *)v38 + 2) == 1)
      {
        v38 = *(swift::Demangle::__runtime::Node **)v38;
LABEL_42:
        v40 = *(swift::Demangle::__runtime::Node **)v38;
      }
      else
      {
LABEL_77:
        v40 = 0;
      }
      if (v9 >= v5)
        return 0;
      v63 = *(unsigned __int8 *)(v10 + v9);
      if (v63 == 95)
      {
        v64 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
      }
      else
      {
        if ((v63 - 48) > 9)
          return 0;
        v111 = 0;
        while (1)
        {
          v112 = *(unsigned __int8 *)(v10 + v9);
          if ((v112 - 48) > 9)
            break;
          v113 = v112 + 10 * v111 - 48;
          if (v113 < v111)
            return 0;
          Type = 0;
          *((_QWORD *)this + 9) = ++v9;
          v111 = v113;
          if (v5 == v9)
            return Type;
        }
        Type = 0;
        if (v111 < 0 || v9 >= v5 || v112 != 95)
          return Type;
        *((_QWORD *)this + 9) = v9 + 1;
        v64 = (v111 + 1);
      }
      v65 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v65;
      if (!v65 || v65 + 24 > *((_QWORD *)this + 2))
      {
        v66 = 2 * *((_QWORD *)this + 4);
        if (v66 <= 0x20)
          v66 = 32;
        *((_QWORD *)this + 4) = v66;
        v67 = v66 + 8;
        v68 = malloc_type_malloc(v66 + 8, 0xD0263BC5uLL);
        *v68 = *((_QWORD *)v7 + 3);
        v65 = ((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v68 + v67;
        *((_QWORD *)v7 + 3) = v68;
      }
      *((_QWORD *)v7 + 1) = v65 + 24;
      *(_WORD *)(v65 + 16) = 231;
      *(_BYTE *)(v65 + 18) = 4;
      *(_QWORD *)v65 = v64;
      if (v40)
      {
        v69 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 1) = v69;
        if (!v69 || v69 + 24 > *((_QWORD *)v7 + 2))
        {
          v70 = 2 * *((_QWORD *)v7 + 4);
          if (v70 <= 0x20)
            v70 = 32;
          *((_QWORD *)v7 + 4) = v70;
          v71 = v70 + 8;
          v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
          *v72 = *((_QWORD *)v7 + 3);
          v69 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v7 + 2) = (char *)v72 + v71;
          *((_QWORD *)v7 + 3) = v72;
        }
        *((_QWORD *)v7 + 1) = v69 + 24;
        *(_WORD *)(v69 + 16) = 230;
        *(_BYTE *)(v69 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v69, v40, v7, a4, a5);
        v75 = (unsigned int *)v69;
        v76 = (swift::Demangle::__runtime::Node *)v65;
        goto LABEL_156;
      }
      return 0;
    case 'o':
      if (v9 >= v5)
        goto LABEL_124;
      v41 = *(unsigned __int8 *)(v10 + v9);
      if (v41 == 95)
      {
        v42 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
        goto LABEL_125;
      }
      if ((v41 - 48) > 9)
        goto LABEL_124;
      v95 = 0;
      break;
    case 'p':
      v43 = *((_DWORD *)this + 24);
      if (!v43)
        return 0;
      v44 = v43 - 1;
      v45 = *((_QWORD *)this + 11);
      v46 = *(swift::Demangle::__runtime::Node **)(v45 + 8 * (v43 - 1));
      if (*((_WORD *)v46 + 8) != 232)
      {
        v48 = 0;
        v44 = *((_DWORD *)this + 24);
        goto LABEL_143;
      }
      *((_DWORD *)this + 24) = v44;
      v47 = *((unsigned __int8 *)v46 + 18);
      if (v47 == 1)
        goto LABEL_52;
      if (v47 == 5 && *((_DWORD *)v46 + 2) == 1)
      {
        v46 = *(swift::Demangle::__runtime::Node **)v46;
LABEL_52:
        v48 = *(swift::Demangle::__runtime::Node **)v46;
      }
      else
      {
        v48 = 0;
      }
      if (!v44)
        return 0;
LABEL_143:
      v114 = v44 - 1;
      v115 = *(swift::Demangle::__runtime::Node **)(v45 + 8 * v114);
      if (*((_WORD *)v115 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v114;
      v116 = *((unsigned __int8 *)v115 + 18);
      if (v116 == 1)
        goto LABEL_148;
      if (v116 != 5 || *((_DWORD *)v115 + 2) != 1)
        return 0;
      v115 = *(swift::Demangle::__runtime::Node **)v115;
LABEL_148:
      Type = 0;
      if (v48)
      {
        v117 = *(swift::Demangle::__runtime::Node **)v115;
        if (*(_QWORD *)v115)
        {
          v69 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v69;
          if (!v69 || v69 + 24 > *((_QWORD *)this + 2))
          {
            v118 = 2 * *((_QWORD *)this + 4);
            if (v118 <= 0x20)
              v118 = 32;
            *((_QWORD *)this + 4) = v118;
            v119 = v118 + 8;
            v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
            *v120 = *((_QWORD *)v7 + 3);
            v69 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)v7 + 2) = (char *)v120 + v119;
            *((_QWORD *)v7 + 3) = v120;
          }
          *((_QWORD *)v7 + 1) = v69 + 24;
          *(_WORD *)(v69 + 16) = 229;
          *(_BYTE *)(v69 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v69, v117, v7, a4, a5);
          v75 = (unsigned int *)v69;
          v76 = v48;
LABEL_156:
          swift::Demangle::__runtime::Node::addChild(v75, v76, v7, v73, v74);
          Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v7 + 1) = Type;
          if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
          {
            v121 = 2 * *((_QWORD *)v7 + 4);
            if (v121 <= 0x20)
              v121 = 32;
            *((_QWORD *)v7 + 4) = v121;
            v122 = v121 + 8;
            v123 = malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
            *v123 = *((_QWORD *)v7 + 3);
            Type = ((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)v7 + 2) = (char *)v123 + v122;
            *((_QWORD *)v7 + 3) = v123;
          }
          *((_QWORD *)v7 + 1) = Type + 24;
          *(_WORD *)(Type + 16) = 232;
          *(_BYTE *)(Type + 18) = 0;
          v57 = (unsigned int *)Type;
          v58 = (swift::Demangle::__runtime::Node *)v69;
LABEL_68:
          swift::Demangle::__runtime::Node::addChild(v57, v58, v7, a4, a5);
        }
      }
      return Type;
    case 'r':
      v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v12;
      if (!v12 || (v49 = *((_QWORD *)this + 2), v12 + 24 > v49))
      {
        v50 = 2 * *((_QWORD *)this + 4);
        if (v50 <= 0x20)
          v50 = 32;
        *((_QWORD *)this + 4) = v50;
        v51 = v50 + 8;
        v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
        *v52 = *((_QWORD *)v7 + 3);
        v12 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
        v49 = (unint64_t)v52 + v51;
        *((_QWORD *)v7 + 2) = (char *)v52 + v51;
        *((_QWORD *)v7 + 3) = v52;
      }
      *(_WORD *)(v12 + 16) = 308;
      *(_BYTE *)(v12 + 18) = 0;
      Type = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (Type)
        v53 = Type + 24 > v49;
      else
        v53 = 1;
      if (!v53)
        goto LABEL_66;
      goto LABEL_63;
    case 'x':
      v59 = 0;
      goto LABEL_73;
    case 'y':
      v60 = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
      goto LABEL_72;
    case 'z':
      v60 = swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0, a4, a5);
LABEL_72:
      v59 = (swift::Demangle::__runtime::Node *)v60;
      this = v7;
LABEL_73:
      v27 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(this, v59, a3, a4, a5);
LABEL_74:
      Type = (unint64_t)v27;
      v125 = v27;
      if (v27)
        goto LABEL_75;
      return Type;
    default:
      return Type;
  }
  while (1)
  {
    v96 = *(unsigned __int8 *)(v10 + v9);
    if ((v96 - 48) > 9)
      break;
    v97 = v96 + 10 * v95 - 48;
    if (v97 >= v95)
    {
      *((_QWORD *)this + 9) = ++v9;
      v95 = v97;
      if (v5 != v9)
        continue;
    }
LABEL_124:
    v42 = -1000;
    goto LABEL_125;
  }
  v42 = -1000;
  if ((v95 & 0x80000000) == 0 && v9 < v5 && v96 == 95)
  {
    *((_QWORD *)this + 9) = v9 + 1;
    v42 = (v95 + 1);
  }
LABEL_125:
  v125 = 0;
  v126 = 0;
  v124 = 0;
  Type = 0;
  if (swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v125, (int8x16_t **)&v124, a4, a5))
  {
    v98 = *((_DWORD *)v7 + 24);
    if (v98)
    {
      v99 = v98 - 1;
      Type = *(_QWORD *)(*((_QWORD *)v7 + 11) + 8 * v99);
      *((_DWORD *)v7 + 24) = v99;
      if (Type)
      {
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, 102, v42);
        v102 = (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(v7, 300, (swift::Demangle::__runtime::Node *)Type, Node, v101);
        v105 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v7, 235);
        if ((_DWORD)v126)
        {
          v106 = v126 - 1;
          do
          {
            v107 = v106;
            swift::Demangle::__runtime::Node::addChild(v105, v125[v106--], v7, v103, v104);
          }
          while (v107);
        }
        swift::Demangle::__runtime::Node::addChild(v102, (swift::Demangle::__runtime::Node *)v105, v7, v103, v104);
        if (v124)
          swift::Demangle::__runtime::Node::addChild(v102, v124, v7, v109, v110);
        Type = swift::Demangle::__runtime::Demangler::createType(v7, (swift::Demangle::__runtime::Node *)v102, v108, v109, v110);
        v127 = Type;
        if (Type)
        {
          v61 = (const void **)((char *)v7 + 104);
          v62 = (uint64_t *)&v127;
LABEL_76:
          swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v61, v62, v7);
        }
      }
      return Type;
    }
    return 0;
  }
  return Type;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericRequirement(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  swift::Demangle::__runtime::Node *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  swift::Demangle::__runtime::Node *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  swift::Demangle::__runtime::Node *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  const char *v49;
  swift::Demangle::__runtime::Node *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned int *v54;
  swift::Demangle::__runtime::Node *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  unint64_t v75;

  v6 = *((_QWORD *)this + 9);
  if (v6 >= *((_QWORD *)this + 8))
  {
    v7 = *((_QWORD *)this + 9);
LABEL_6:
    v10 = 0;
    v8 = 0;
    *((_QWORD *)this + 9) = v7 - 1;
LABEL_7:
    v12 = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
    if (v12)
    {
      v13 = (swift::Demangle::__runtime::Node *)v12;
      v14 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v14;
      if (!v14 || v14 + 24 > *((_QWORD *)this + 2))
      {
        v15 = 2 * *((_QWORD *)this + 4);
        if (v15 <= 0x20)
          v15 = 32;
        *((_QWORD *)this + 4) = v15;
        v16 = v15 + 8;
        v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        *v17 = *((_QWORD *)this + 3);
        v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v17 + v16;
        *((_QWORD *)this + 3) = v17;
      }
      *((_QWORD *)this + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 232;
      *(_BYTE *)(v14 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v14, v13, this, a4, a5);
    }
    else
    {
      v14 = 0;
    }
LABEL_40:
    switch(v10)
    {
      case 0:
        v30 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
        v31 = 0;
        if (!v14)
          return v31;
        v8 = (swift::Demangle::__runtime::Node *)v30;
        if (!v30)
          return v31;
        goto LABEL_47;
      case 1:
        v32 = *((_DWORD *)this + 24);
        if (!v32)
          goto LABEL_122;
        v33 = v32 - 1;
        v8 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v33);
        if (*((_WORD *)v8 + 8) != 232)
          goto LABEL_122;
        *((_DWORD *)this + 24) = v33;
        if (!v14)
          goto LABEL_122;
LABEL_47:
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v34 = 2 * *((_QWORD *)this + 4);
          if (v34 <= 0x20)
            v34 = 32;
          *((_QWORD *)this + 4) = v34;
          v35 = v34 + 8;
          v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
          *v36 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v36 + v35;
          *((_QWORD *)this + 3) = v36;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 36;
        goto LABEL_89;
      case 2:
        v38 = *((_DWORD *)this + 24);
        if (!v38)
          goto LABEL_122;
        v39 = v38 - 1;
        v8 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v39);
        if (*((_WORD *)v8 + 8) != 232)
          goto LABEL_122;
        *((_DWORD *)this + 24) = v39;
        if (!v14)
          goto LABEL_122;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v40 = 2 * *((_QWORD *)this + 4);
          if (v40 <= 0x20)
            v40 = 32;
          *((_QWORD *)this + 4) = v40;
          v41 = v40 + 8;
          v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
          *v42 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v42 + v41;
          *((_QWORD *)this + 3) = v42;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 39;
        goto LABEL_89;
      case 3:
        v43 = *((_DWORD *)this + 24);
        if (!v43)
          goto LABEL_122;
        v44 = v43 - 1;
        v8 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v44);
        if (*((_WORD *)v8 + 8) != 232)
          goto LABEL_122;
        *((_DWORD *)this + 24) = v44;
        if (!v14)
          goto LABEL_122;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v45 = 2 * *((_QWORD *)this + 4);
          if (v45 <= 0x20)
            v45 = 32;
          *((_QWORD *)this + 4) = v45;
          v46 = v45 + 8;
          v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
          *v47 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v47 + v46;
          *((_QWORD *)this + 3) = v47;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 40;
        goto LABEL_89;
      case 4:
        v48 = *((_QWORD *)this + 9);
        if (v48 >= *((_QWORD *)this + 8))
          goto LABEL_122;
        v31 = 0;
        *((_QWORD *)this + 9) = v48 + 1;
        v49 = "U";
        v50 = 0;
        switch(*(_BYTE *)(*((_QWORD *)this + 7) + v48))
        {
          case 'B':
            v31 = 0;
            v50 = 0;
            v49 = "B";
            goto LABEL_106;
          case 'C':
            v31 = 0;
            v50 = 0;
            v49 = "C";
            goto LABEL_106;
          case 'D':
            v31 = 0;
            v50 = 0;
            v49 = "D";
            goto LABEL_106;
          case 'E':
            v31 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            if (!v31)
              return v31;
            v50 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            v49 = "E";
            goto LABEL_106;
          case 'M':
            v31 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            if (!v31)
              return v31;
            v50 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            v49 = "M";
            goto LABEL_106;
          case 'N':
            v31 = 0;
            v50 = 0;
            v49 = "N";
            goto LABEL_106;
          case 'R':
            v31 = 0;
            v50 = 0;
            v49 = "R";
            goto LABEL_106;
          case 'S':
            v59 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            v50 = 0;
            if (!v59)
              return 0;
            v31 = v59;
            v49 = "S";
            goto LABEL_106;
          case 'T':
            v31 = 0;
            v50 = 0;
            v49 = "T";
            goto LABEL_106;
          case 'U':
            goto LABEL_106;
          case 'e':
            v60 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            v50 = 0;
            if (!v60)
              return 0;
            v31 = v60;
            v49 = "e";
            goto LABEL_106;
          case 'm':
            v61 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            v50 = 0;
            if (!v61)
              return 0;
            v31 = v61;
            v49 = "m";
LABEL_106:
            v62 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v62;
            if (!v62 || v62 + 24 > *((_QWORD *)this + 2))
            {
              v63 = 2 * *((_QWORD *)this + 4);
              if (v63 <= 0x20)
                v63 = 32;
              *((_QWORD *)this + 4) = v63;
              v64 = v63 + 8;
              v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
              *v65 = *((_QWORD *)this + 3);
              v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v65 + v64;
              *((_QWORD *)this + 3) = v65;
            }
            *((_QWORD *)this + 1) = v62 + 24;
            *(_WORD *)(v62 + 16) = 101;
            *(_BYTE *)(v62 + 18) = 3;
            *(_QWORD *)v62 = v49;
            *(_QWORD *)(v62 + 8) = 1;
            if (!v14)
              goto LABEL_122;
            v66 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v66;
            if (!v66 || v66 + 24 > *((_QWORD *)this + 2))
            {
              v67 = 2 * *((_QWORD *)this + 4);
              if (v67 <= 0x20)
                v67 = 32;
              *((_QWORD *)this + 4) = v67;
              v68 = v67 + 8;
              v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
              *v69 = *((_QWORD *)this + 3);
              v66 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v69 + v68;
              *((_QWORD *)this + 3) = v69;
            }
            *((_QWORD *)this + 1) = v66 + 24;
            *(_WORD *)(v66 + 16) = 41;
            *(_BYTE *)(v66 + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v66, (swift::Demangle::__runtime::Node *)v14, this, a4, a5);
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v66, (swift::Demangle::__runtime::Node *)v62, this, v70, v71);
            if (v31)
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v66, (swift::Demangle::__runtime::Node *)v31, this, v72, v73);
            if (v50)
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v66, v50, this, v72, v73);
            v31 = v66;
            break;
          default:
            return v31;
        }
        return v31;
      case 5:
        if (!v14)
          goto LABEL_122;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v51 = 2 * *((_QWORD *)this + 4);
          if (v51 <= 0x20)
            v51 = 32;
          *((_QWORD *)this + 4) = v51;
          v52 = v51 + 8;
          v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
          *v53 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v53 + v52;
          *((_QWORD *)this + 3) = v53;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        *(_WORD *)(v31 + 16) = 42;
        *(_BYTE *)(v31 + 18) = 0;
        v54 = (unsigned int *)v31;
        v55 = (swift::Demangle::__runtime::Node *)v14;
        goto LABEL_90;
      case 6:
        v31 = 0;
        if (!v8 || !v14)
          return v31;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v56 = 2 * *((_QWORD *)this + 4);
          if (v56 <= 0x20)
            v56 = 32;
          *((_QWORD *)this + 4) = v56;
          v57 = v56 + 8;
          v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
          *v58 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v58 + v57;
          *((_QWORD *)this + 3) = v58;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 354;
LABEL_89:
        *(_WORD *)(v31 + 16) = v37;
        *(_BYTE *)(v31 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v31, (swift::Demangle::__runtime::Node *)v14, this, a4, a5);
        v54 = (unsigned int *)v31;
        v55 = v8;
LABEL_90:
        swift::Demangle::__runtime::Node::addChild(v54, v55, this, a4, a5);
        break;
      default:
        goto LABEL_122;
    }
  }
  else
  {
    v7 = v6 + 1;
    *((_QWORD *)this + 9) = v6 + 1;
    v8 = 0;
    v9 = 1;
    v10 = 5;
    switch(*(_BYTE *)(*((_QWORD *)this + 7) + v6))
    {
      case 'B':
        goto LABEL_20;
      case 'C':
        goto LABEL_25;
      case 'I':
        v11 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        if (!v11)
          goto LABEL_122;
        v8 = (swift::Demangle::__runtime::Node *)v11;
        v9 = 6;
LABEL_20:
        v18 = *((_DWORD *)this + 24);
        if (v18 && (v19 = v18 - 1, v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v19), *(_WORD *)(v14 + 16) == 232))
          *((_DWORD *)this + 24) = v19;
        else
          v14 = 0;
        goto LABEL_39;
      case 'L':
        v8 = 0;
        v9 = 4;
        goto LABEL_20;
      case 'M':
        v9 = 4;
        goto LABEL_25;
      case 'P':
        v9 = 0;
        goto LABEL_25;
      case 'Q':
        v9 = 0;
        v8 = 0;
        goto LABEL_20;
      case 'S':
        v8 = 0;
        v9 = 2;
        goto LABEL_20;
      case 'T':
        v9 = 2;
LABEL_25:
        v20 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
        v24 = swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(this, v20, v21, v22, v23);
        goto LABEL_36;
      case 'b':
        v8 = 0;
        v10 = 1;
        goto LABEL_7;
      case 'c':
        goto LABEL_35;
      case 'h':
        v8 = 0;
        v10 = 3;
        goto LABEL_7;
      case 'i':
        v25 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        if (v25)
        {
          v8 = (swift::Demangle::__runtime::Node *)v25;
          v10 = 6;
          goto LABEL_7;
        }
LABEL_122:
        v31 = 0;
        break;
      case 'l':
        v8 = 0;
        v10 = 4;
        goto LABEL_7;
      case 'm':
        v9 = 4;
        goto LABEL_35;
      case 'p':
        v9 = 0;
        goto LABEL_35;
      case 's':
        v8 = 0;
        v10 = 2;
        goto LABEL_7;
      case 't':
        v9 = 2;
LABEL_35:
        v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
        v24 = swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(this, v26, v27, v28, v29);
LABEL_36:
        v14 = v24;
        v75 = v24;
        if (v24)
          swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v75, this);
        v8 = 0;
LABEL_39:
        v10 = v9;
        goto LABEL_40;
      case 'v':
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  return v31;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleStandardSubstitution(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  unint64_t StandardSubstitution;
  unsigned int v15;
  unint64_t SwiftType;
  uint64_t v18;
  const char *v19;
  int v20;
  unsigned int v21;
  swift::Demangle::__runtime::Node *v22;
  swift::Demangle::__runtime::Node *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;

  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  if (v3 < v2)
  {
    *((_QWORD *)this + 9) = v3 + 1;
    v4 = *(char *)(*((_QWORD *)this + 7) + v3);
    if (v4 == 67)
    {
      v5 = "__C_Synthesized";
      v6 = 15;
      return swift::Demangle::__runtime::NodeFactory::createNode(this, 153, v5, v6);
    }
    if (v4 == 103)
    {
      SwiftType = swift::Demangle::__runtime::Demangler::createSwiftType(this, 61, "Optional");
      v20 = *((_DWORD *)this + 24);
      if (v20)
      {
        v21 = v20 - 1;
        v22 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v21);
        if (*((_WORD *)v22 + 8) == 232)
        {
          v23 = (swift::Demangle::__runtime::Node *)SwiftType;
          *((_DWORD *)this + 24) = v21;
          v24 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v24;
          if (!v24 || v24 + 24 > *((_QWORD *)this + 2))
          {
            v25 = 2 * *((_QWORD *)this + 4);
            if (v25 <= 0x20)
              v25 = 32;
            *((_QWORD *)this + 4) = v25;
            v26 = v25 + 8;
            v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
            *v27 = *((_QWORD *)this + 3);
            v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = (char *)v27 + v26;
            *((_QWORD *)this + 3) = v27;
          }
          *((_QWORD *)this + 1) = v24 + 24;
          *(_WORD *)(v24 + 16) = 235;
          *(_BYTE *)(v24 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v24, v22, this, v18, v19);
          if (v23)
          {
            if (v24)
            {
              v30 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = v30;
              if (!v30 || v30 + 24 > *((_QWORD *)this + 2))
              {
                v31 = 2 * *((_QWORD *)this + 4);
                if (v31 <= 0x20)
                  v31 = 32;
                *((_QWORD *)this + 4) = v31;
                v32 = v31 + 8;
                v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
                *v33 = *((_QWORD *)this + 3);
                v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = (char *)v33 + v32;
                *((_QWORD *)this + 3) = v33;
              }
              *((_QWORD *)this + 1) = v30 + 24;
              *(_WORD *)(v30 + 16) = 14;
              *(_BYTE *)(v30 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v30, v23, this, v28, v29);
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v30, (swift::Demangle::__runtime::Node *)v24, this, v34, v35);
              StandardSubstitution = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = StandardSubstitution;
              if (!StandardSubstitution || StandardSubstitution + 24 > *((_QWORD *)this + 2))
              {
                v38 = 2 * *((_QWORD *)this + 4);
                if (v38 <= 0x20)
                  v38 = 32;
                *((_QWORD *)this + 4) = v38;
                v39 = v38 + 8;
                v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
                *v40 = *((_QWORD *)this + 3);
                StandardSubstitution = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = (char *)v40 + v39;
                *((_QWORD *)this + 3) = v40;
              }
              *((_QWORD *)this + 1) = StandardSubstitution + 24;
              *(_WORD *)(StandardSubstitution + 16) = 232;
              *(_BYTE *)(StandardSubstitution + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((unsigned int *)StandardSubstitution, (swift::Demangle::__runtime::Node *)v30, this, v36, v37);
              v41 = StandardSubstitution;
              swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v41, this);
              return StandardSubstitution;
            }
          }
        }
      }
      return 0;
    }
    ++v3;
    if (v4 == 111)
    {
      v5 = "__C";
      v6 = 3;
      return swift::Demangle::__runtime::NodeFactory::createNode(this, 153, v5, v6);
    }
  }
  v7 = v3 - 1;
  *((_QWORD *)this + 9) = v7;
  if (v7 >= v2 || (v8 = *((_QWORD *)this + 7), *(unsigned __int8 *)(v8 + v7) - 48 > 9))
  {
LABEL_16:
    v9 = -1000;
    if (v7 >= v2)
      goto LABEL_20;
    goto LABEL_17;
  }
  v9 = 0;
  while (1)
  {
    v10 = *(unsigned __int8 *)(v8 + v7);
    if ((v10 - 48) > 9)
      break;
    v11 = v10 + 10 * v9 - 48;
    if (v11 < v9)
      goto LABEL_16;
    *((_QWORD *)this + 9) = ++v7;
    v9 = v11;
    if (v2 == v7)
    {
      v7 = v2;
      v9 = v11;
      break;
    }
  }
  if (v9 <= 2048)
  {
    if (v7 >= v2)
      goto LABEL_20;
LABEL_17:
    if (*(_BYTE *)(*((_QWORD *)this + 7) + v7) == 99)
    {
      *((_QWORD *)this + 9) = ++v7;
      v12 = 1;
      if (v7 >= v2)
      {
LABEL_19:
        v13 = 0;
LABEL_22:
        StandardSubstitution = swift::Demangle::__runtime::Demangler::createStandardSubstitution(this, v13, v12);
        if (StandardSubstitution && v9 >= 2)
        {
          v15 = v9 + 1;
          do
          {
            v41 = StandardSubstitution;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 11, (uint64_t *)&v41, this);
            --v15;
          }
          while (v15 > 2);
        }
        return StandardSubstitution;
      }
LABEL_21:
      *((_QWORD *)this + 9) = v7 + 1;
      v13 = *(_BYTE *)(*((_QWORD *)this + 7) + v7);
      goto LABEL_22;
    }
LABEL_20:
    v12 = 0;
    if (v7 >= v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  return 0;
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  swift::Demangle::__runtime::Demangler *v7;
  unint64_t Node;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  char v17;
  unint64_t v18;
  __int16 v19;
  swift::Demangle::__runtime::Node *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  swift::Demangle::__runtime::Node *v28;
  int v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  int v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t *v54;
  uint64_t v55;
  __int128 v56;
  __int16 v57;
  __int16 v58;
  int v59;
  unsigned int v60;
  swift::Demangle::__runtime::Node *v61;
  int v62;
  __int16 v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  int8x16_t *v70;
  int v71;
  unsigned int v72;
  swift::Demangle::__runtime::Node *v73;
  __int16 v74;
  int v75;
  int v76;
  swift::Demangle::__runtime::Node *v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  swift::Demangle::__runtime::Node *v82;
  uint64_t v83;
  const char *v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned __int16 *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  swift::Demangle::__runtime::Node *v93;
  int v94;
  unsigned int v95;
  unsigned int *v96;
  int v97;
  int v98;
  int v99;
  char v100;
  size_t v101;
  std::string *p_p;
  int v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  const char *v114;
  unsigned int *v115;
  int v116;
  unsigned int v117;
  swift::Demangle::__runtime::Node *v118;
  swift::Demangle::__runtime::Node *v119;
  uint64_t v120;
  const char *v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  int v131;
  swift::Demangle::__runtime::Node *v132;
  swift::Demangle::__runtime::Node *v133;
  swift::Demangle::__runtime::Node *v134;
  unsigned int v135;
  swift::Demangle::__runtime::Node *v136;
  unsigned int *v137;
  swift::Demangle::__runtime::NodeFactory *v138;
  __int16 v139;
  swift::Demangle::__runtime::NodeFactory *v140;
  __int16 v141;
  __int16 v142;
  unsigned int v143;
  swift::Demangle::__runtime::Node *v144;
  __int16 v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  const char *v149;
  std::string::size_type v150;
  std::string::size_type v151;
  swift::Demangle::__runtime::Node *v152;
  swift::Demangle::__runtime::Node *v153;
  uint64_t v154;
  const char *v155;
  std::string::size_type v156;
  uint64_t v157;
  _BYTE *size;
  std::string::size_type v159;
  std::string::size_type v160;
  uint64_t v161;
  unint64_t v162;
  int64_t v163;
  unint64_t v164;
  _BYTE *v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  _OWORD *v171;
  __int128 *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  unsigned int v176;
  swift::Demangle::__runtime::Node *v177;
  unint64_t v178;
  uint64_t v179;
  const char *v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  swift::Demangle::__runtime::Node *v184;
  swift::Demangle::__runtime::Node *v185;
  uint64_t v186;
  const char *v187;
  __int16 v188;
  int v189;
  char v190;
  unsigned __int16 *v191;
  std::string __p;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v7 = this;
  Node = 0;
  v9 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v10 = *((_QWORD *)this + 7);
  v11 = *(unsigned __int8 *)(v10 + v5);
  switch(*(_BYTE *)(v10 + v5))
  {
    case 'A':
      v57 = 170;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'B':
      v58 = 93;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'C':
      v59 = *((_DWORD *)this + 24);
      if (v59
        && (v60 = v59 - 1,
            v61 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v60),
            *((_WORD *)v61 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v60;
      }
      else
      {
        v61 = 0;
      }
      v64 = 30;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'D':
      v57 = 55;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'E':
      v57 = 53;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'F':
      v57 = 54;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'G':
      v58 = 92;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'H':
    case 'h':
      if (v11 == 72)
        v14 = 133;
      else
        v14 = 134;
      if (v9 < v6 && *(_BYTE *)(v10 + v9) == 113)
      {
        *((_QWORD *)this + 9) = v5 + 2;
        v15 = 1;
      }
      else
      {
        v15 = 0;
      }
      memset(&__p, 0, sizeof(__p));
      v29 = *((_DWORD *)this + 24);
      if (!v29)
        goto LABEL_274;
      v30 = v29 - 1;
      v31 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v29 - 1));
      *((_DWORD *)this + 24) = v29 - 1;
      v191 = v31;
      if (!v31)
        goto LABEL_274;
      v32 = v31[8];
      if (v32 == 43)
      {
        v188 = v14;
        v189 = v15;
      }
      else
      {
        if (v32 != 232)
        {
LABEL_274:
          Node = 0;
          goto LABEL_275;
        }
        v188 = v14;
        v189 = v15;
        std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100]((void **)&__p.__r_.__value_.__l.__data_, &v191);
        v31 = 0;
        v30 = *((_DWORD *)v7 + 24);
      }
      for (; v30; __p.__r_.__value_.__l.__size_ = v156)
      {
        v157 = *(_QWORD *)(*((_QWORD *)v7 + 11) + 8 * --v30);
        *((_DWORD *)v7 + 24) = v30;
        if (!v157)
          break;
        if (*(_WORD *)(v157 + 16) != 232)
          goto LABEL_274;
        size = (_BYTE *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)__p.__r_.__value_.__l.__size_ = v157;
          v156 = (std::string::size_type)(size + 8);
        }
        else
        {
          v159 = __p.__r_.__value_.__r.__words[0];
          v160 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          v161 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          v162 = v161 + 1;
          if ((unint64_t)(v161 + 1) >> 61)
            goto LABEL_302;
          v163 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v162)
            v162 = v163 >> 2;
          if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
            v164 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v164 = v162;
          if (v164)
          {
            if (v164 >> 61)
              goto LABEL_303;
            v165 = operator new(8 * v164);
          }
          else
          {
            v165 = 0;
          }
          v166 = &v165[8 * v161];
          *v166 = v157;
          v156 = (std::string::size_type)(v166 + 1);
          if (size != (_BYTE *)v159)
          {
            v167 = (unint64_t)&size[-v159 - 8];
            if (v167 < 0x58)
              goto LABEL_306;
            if ((unint64_t)(size - &v165[v160]) < 0x20)
              goto LABEL_306;
            v168 = (v167 >> 3) + 1;
            v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
            v170 = &size[-v169];
            v166 = (_QWORD *)((char *)v166 - v169);
            v171 = &v165[8 * v161 - 16];
            v172 = (__int128 *)(size - 16);
            v173 = v168 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v174 = *v172;
              *(v171 - 1) = *(v172 - 1);
              *v171 = v174;
              v171 -= 2;
              v172 -= 2;
              v173 -= 4;
            }
            while (v173);
            size = v170;
            if (v168 != (v168 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_306:
              do
              {
                v175 = *((_QWORD *)size - 1);
                size -= 8;
                *--v166 = v175;
              }
              while (size != (_BYTE *)v159);
            }
            size = (_BYTE *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
          __p.__r_.__value_.__l.__size_ = v156;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v165[8 * v164];
          if (size)
          {
            operator delete(size);
            v30 = *((_DWORD *)v7 + 24);
          }
        }
      }
      Node = swift::Demangle::__runtime::NodeFactory::createNode(v7, v188);
      v150 = __p.__r_.__value_.__l.__size_;
      v151 = __p.__r_.__value_.__r.__words[0];
      while (v150 != v151)
      {
        v152 = *(swift::Demangle::__runtime::Node **)(v150 - 8);
        v150 -= 8;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v152, v7, v148, v149);
      }
      if (v31)
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, (swift::Demangle::__runtime::Node *)v31, v7, v148, v149);
      if (v189)
      {
        v153 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, 217);
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v153, v7, v154, v155);
      }
LABEL_275:
      v147 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        return (int8x16_t *)Node;
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      goto LABEL_277;
    case 'I':
      v57 = 58;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'J':
      if (v9 >= v6)
        goto LABEL_211;
      v62 = *(char *)(v10 + v9);
      if (v62 == 79)
      {
        *((_QWORD *)this + 9) = v5 + 2;
        return swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(this, a2, a3, a4, a5);
      }
      else
      {
        if (v62 == 86)
        {
          *((_QWORD *)this + 9) = v5 + 2;
          v142 = 324;
        }
        else
        {
          if (v62 == 83)
          {
            *((_QWORD *)this + 9) = v5 + 2;
            return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk(this, a2, a3, a4, a5);
          }
LABEL_211:
          v142 = 320;
        }
        return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionOrSimpleThunk(this, v142, a3, a4, a5);
      }
    case 'K':
    case 'k':
      if (v11 == 75)
        v16 = 131;
      else
        v16 = 132;
      if (v9 < v6 && *(_BYTE *)(v10 + v9) == 113)
      {
        *((_QWORD *)this + 9) = v5 + 2;
        v17 = 1;
      }
      else
      {
        v17 = 0;
      }
      v33 = *((_DWORD *)this + 24);
      if (!v33)
        return 0;
      v34 = v33 - 1;
      Node = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v33 - 1));
      *((_DWORD *)this + 24) = v33 - 1;
      if (!Node)
        return (int8x16_t *)Node;
      if (*(_WORD *)(Node + 16) != 232)
        return 0;
      v190 = v17;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      break;
    case 'L':
      v61 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
      this = v7;
      v64 = 266;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'M':
      v61 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypeName(this, a2, a3, a4, a5);
      this = v7;
      v64 = 7;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'N':
      v65 = (char *)swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
      v70 = swift::Demangle::__runtime::Demangler::popAssocTypePath(v7, v66, v67, v68, v69);
      v71 = *((_DWORD *)v7 + 24);
      if (v71
        && (v72 = v71 - 1,
            v73 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)v7 + 11) + 8 * v72),
            *((_WORD *)v73 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v72;
      }
      else
      {
        v73 = 0;
      }
      v138 = v7;
      v139 = 268;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v138, v139, v73, (swift::Demangle::__runtime::Node *)v70, v65);
    case 'O':
      v57 = 160;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'P':
      v74 = 87;
      goto LABEL_151;
    case 'Q':
    case 'Y':
      v18 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
      if (v11 == 81)
        v19 = 328;
      else
        v19 = 329;
      if (!v18)
        return 0;
      v20 = (swift::Demangle::__runtime::Node *)v18;
      Node = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)v7 + 2))
      {
        v21 = 2 * *((_QWORD *)v7 + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)v7 + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        *v23 = *((_QWORD *)v7 + 3);
        Node = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v23 + v22;
        *((_QWORD *)v7 + 3) = v23;
      }
      *((_QWORD *)v7 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v19;
      *(_BYTE *)(Node + 18) = 0;
      goto LABEL_234;
    case 'R':
    case 'r':
    case 'y':
      if (v11 == 82)
      {
        v13 = 0;
        v12 = 201;
      }
      else if (v11 == 121)
      {
        v12 = 202;
        v13 = 1;
      }
      else
      {
        v13 = 0;
        v12 = 200;
      }
      Node = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)this + 2))
      {
        v128 = 2 * *((_QWORD *)this + 4);
        if (v128 <= 0x20)
          v128 = 32;
        *((_QWORD *)this + 4) = v128;
        v129 = v128 + 8;
        v130 = malloc_type_malloc(v128 + 8, 0xD0263BC5uLL);
        *v130 = *((_QWORD *)v7 + 3);
        Node = ((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v130 + v129;
        *((_QWORD *)v7 + 3) = v130;
      }
      *((_QWORD *)v7 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v12;
      *(_BYTE *)(Node + 18) = 0;
      v131 = *((_DWORD *)v7 + 24);
      if (!v131)
        return (int8x16_t *)Node;
      v132 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)v7 + 11) + 8 * (v131 - 1));
      if (*((_WORD *)v132 + 8) == 43)
      {
        *((_DWORD *)v7 + 24) = v131 - 1;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v132, v7, a4, a5);
        v131 = *((_DWORD *)v7 + 24);
      }
      if (!v13)
        goto LABEL_192;
      if (!v131)
        return (int8x16_t *)Node;
      v133 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)v7 + 11) + 8 * (v131 - 1));
      if (*((_WORD *)v133 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v131 - 1;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v133, v7, a4, a5);
        v131 = *((_DWORD *)v7 + 24);
LABEL_192:
        if (!v131)
          return (int8x16_t *)Node;
      }
      v134 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)v7 + 11) + 8 * (v131 - 1));
      if (*((_WORD *)v134 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v131 - 1;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v134, v7, a4, a5);
        v131 = *((_DWORD *)v7 + 24);
        if (!v131)
          return (int8x16_t *)Node;
      }
      v135 = v131 - 1;
      v136 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)v7 + 11) + 8 * v135);
      if (*((_WORD *)v136 + 8) != 232)
        return (int8x16_t *)Node;
      *((_DWORD *)v7 + 24) = v135;
      v137 = (unsigned int *)Node;
      goto LABEL_235;
    case 'S':
      v75 = *((_DWORD *)this + 24);
      if (v75
        && ((v76 = v75 - 1,
             v77 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v75 - 1)),
             v78 = *((unsigned __int16 *)v77 + 8),
             v78 == 232)
         || swift::Demangle::__runtime::isContext(v78)))
      {
        *((_DWORD *)v7 + 24) = v76;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 194;
      goto LABEL_223;
    case 'U':
      v79 = *((_DWORD *)this + 24);
      if (!v79)
        return 0;
      v80 = *((_QWORD *)this + 11);
      v20 = *(swift::Demangle::__runtime::Node **)(v80 + 8 * (v79 - 1));
      if (*((_WORD *)v20 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v79 - 1;
      if (v79 == 1)
        return 0;
      v81 = v79 - 2;
      v82 = *(swift::Demangle::__runtime::Node **)(v80 + 8 * v81);
      *((_DWORD *)this + 24) = v81;
      if (!v82)
        return 0;
      Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 203);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v82, v7, v83, v84);
      goto LABEL_234;
    case 'V':
      v85 = *((_DWORD *)this + 24);
      if (v85)
      {
        v86 = v85 - 1;
        v87 = *((_QWORD *)this + 11);
        v88 = *(unsigned __int16 **)(v87 + 8 * (v85 - 1));
        v89 = v88[8];
        if (v89 == 232 || swift::Demangle::__runtime::isContext(v89))
        {
          *((_DWORD *)v7 + 24) = v86;
          if (v85 == 1)
            goto LABEL_287;
        }
        else
        {
          v88 = 0;
          v86 = v85;
        }
        v181 = v86 - 1;
        v182 = *(_QWORD *)(v87 + 8 * v181);
        v183 = *(unsigned __int16 *)(v182 + 16);
        if (v183 == 232 || swift::Demangle::__runtime::isContext(v183))
        {
          *((_DWORD *)v7 + 24) = v181;
          goto LABEL_288;
        }
      }
      else
      {
        v88 = 0;
      }
LABEL_287:
      v182 = 0;
LABEL_288:
      v140 = v7;
      v141 = 255;
      v96 = (unsigned int *)v182;
LABEL_289:
      v93 = (swift::Demangle::__runtime::Node *)v88;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v140, v141, (swift::Demangle::__runtime::Node *)v96, v93, a5);
    case 'W':
      v90 = *((_DWORD *)this + 24);
      if (v90
        && ((v91 = v90 - 1,
             v88 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v90 - 1)),
             v92 = v88[8],
             v92 == 232)
         || swift::Demangle::__runtime::isContext(v92)))
      {
        *((_DWORD *)v7 + 24) = v91;
      }
      else
      {
        v88 = 0;
      }
      v96 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v7, a2, a3, a4, a5);
      v140 = v7;
      v141 = 196;
      goto LABEL_289;
    case 'X':
      v57 = 60;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'Z':
    case 'z':
      v24 = (char *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
      v25 = *((_DWORD *)v7 + 24);
      if (!v25)
      {
        v28 = 0;
        v20 = 0;
        goto LABEL_228;
      }
      v26 = v25 - 1;
      v27 = *((_QWORD *)v7 + 11);
      v20 = *(swift::Demangle::__runtime::Node **)(v27 + 8 * (v25 - 1));
      if (*((_WORD *)v20 + 8) == 43)
      {
        *((_DWORD *)v7 + 24) = v26;
        if (v25 == 1)
        {
          v28 = 0;
          goto LABEL_228;
        }
      }
      else
      {
        v20 = 0;
        v26 = *((_DWORD *)v7 + 24);
      }
      v28 = *(swift::Demangle::__runtime::Node **)(v27 + 8 * (v26 - 1));
      if (*((_WORD *)v28 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v26 - 1;
        if (v26 == 1)
          goto LABEL_228;
        --v26;
      }
      else
      {
        v28 = 0;
      }
      v143 = v26 - 1;
      v144 = *(swift::Demangle::__runtime::Node **)(v27 + 8 * v143);
      if (*((_WORD *)v144 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v143;
        goto LABEL_229;
      }
LABEL_228:
      v144 = 0;
LABEL_229:
      if (v11 == 122)
        v145 = 162;
      else
        v145 = 163;
      v146 = swift::Demangle::__runtime::Demangler::createWithChildren(v7, v145, v144, v28, v24);
      Node = v146;
      if (v20 && v146)
      {
LABEL_234:
        v137 = (unsigned int *)Node;
        v136 = v20;
LABEL_235:
        swift::Demangle::__runtime::Node::addChild(v137, v136, v7, a4, a5);
      }
      return (int8x16_t *)Node;
    case 'a':
      v57 = 171;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'b':
      v93 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
      v94 = *((_DWORD *)v7 + 24);
      if (v94
        && (v95 = v94 - 1, v96 = *(unsigned int **)(*((_QWORD *)v7 + 11) + 8 * v95), *((_WORD *)v96 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v95;
      }
      else
      {
        v96 = 0;
      }
      v140 = v7;
      v141 = 269;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v140, v141, (swift::Demangle::__runtime::Node *)v96, v93, a5);
    case 'c':
      v97 = *((_DWORD *)this + 24);
      if (v97
        && ((v98 = v97 - 1,
             v77 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v97 - 1)),
             v99 = *((unsigned __int16 *)v77 + 8),
             v99 == 232)
         || swift::Demangle::__runtime::isContext(v99)))
      {
        *((_DWORD *)v7 + 24) = v98;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 263;
      goto LABEL_223;
    case 'd':
      v57 = 56;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'e':
      swift::Demangle::__runtime::Demangler::demangleBridgedMethodParams(this, &__p);
      v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v101 = __p.__r_.__value_.__l.__size_;
      if (v101)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        Node = swift::Demangle::__runtime::NodeFactory::createNode(v7, 277, p_p, v101);
        v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        Node = 0;
      }
      if ((v100 & 0x80) == 0)
        return (int8x16_t *)Node;
      v147 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_277;
    case 'f':
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleFunctionSpecialization(this, a2, a3, a4, a5);
    case 'g':
      v58 = 91;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'i':
      v58 = 96;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'j':
      v103 = *((_DWORD *)this + 24);
      if (v103
        && ((v104 = v103 - 1,
             v77 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v103 - 1)),
             v105 = *((unsigned __int16 *)v77 + 8),
             v105 == 232)
         || swift::Demangle::__runtime::isContext(v105)))
      {
        *((_DWORD *)v7 + 24) = v104;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 264;
      goto LABEL_223;
    case 'l':
      v106 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this, a2, a3, a4, a5);
      if (!v106)
        return 0;
      v61 = (swift::Demangle::__runtime::Node *)v106;
      this = v7;
      v64 = 270;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'm':
      v57 = 144;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'n':
      v65 = (char *)swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
      v70 = swift::Demangle::__runtime::Demangler::popAssocTypePath(v7, v107, v108, v109, v110);
      v111 = *((_DWORD *)v7 + 24);
      if (v111
        && (v112 = v111 - 1,
            v73 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)v7 + 11) + 8 * v112),
            *((_WORD *)v73 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v112;
      }
      else
      {
        v73 = 0;
      }
      v138 = v7;
      v139 = 267;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChildren(v138, v139, v73, (swift::Demangle::__runtime::Node *)v70, v65);
    case 'o':
      v57 = 164;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'p':
      v74 = 86;
LABEL_151:
      v115 = (unsigned int *)swift::Demangle::__runtime::Demangler::demangleSpecAttributes(this, v74, a3, a4, a5);
      v116 = *((_DWORD *)v7 + 24);
      if (v116
        && (v117 = v116 - 1,
            v118 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)v7 + 11) + 8 * v117),
            *((_WORD *)v118 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v117;
      }
      else
      {
        v118 = 0;
      }
      v119 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(v7, 94, v118, v113, v114);
      Node = 0;
      if (v115 && v119)
      {
        swift::Demangle::__runtime::Node::addChild(v115, v119, v7, v120, v121);
        return (int8x16_t *)v115;
      }
      return (int8x16_t *)Node;
    case 'q':
      v122 = *((_DWORD *)this + 24);
      if (v122
        && ((v123 = v122 - 1,
             v77 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v122 - 1)),
             v124 = *((unsigned __int16 *)v77 + 8),
             v124 == 232)
         || swift::Demangle::__runtime::isContext(v124)))
      {
        *((_DWORD *)v7 + 24) = v123;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 265;
LABEL_223:
      v61 = v77;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 's':
      v58 = 95;
      return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'u':
      v57 = 319;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'v':
      v125 = swift::Demangle::__runtime::Demangler::demangleIndex(this);
      if ((v125 & 0x80000000) != 0)
        return 0;
      v126 = *((_QWORD *)v7 + 9);
      if (v126 < *((_QWORD *)v7 + 8) && (*((_QWORD *)v7 + 9) = v126 + 1, *(_BYTE *)(*((_QWORD *)v7 + 7) + v126) == 114))
        return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(v7, 288, v125);
      else
        return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(v7, 287, v125);
    case 'w':
      if (v9 >= v6)
        return 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v127 = *(char *)(v10 + v9);
      switch(v127)
      {
        case 'B':
          v57 = 333;
          break;
        case 'S':
          v57 = 340;
          break;
        case 'b':
          v57 = 332;
          break;
        default:
          return 0;
      }
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    case 'x':
      v57 = 59;
      return (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(this, v57);
    default:
      return (int8x16_t *)Node;
  }
  do
  {
    if (v36 < v35)
    {
      *v36++ = Node;
      v38 = v34;
      goto LABEL_64;
    }
    v39 = v36 - v37;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61)
LABEL_302:
      abort();
    if (((char *)v35 - (char *)v37) >> 2 > v40)
      v40 = ((char *)v35 - (char *)v37) >> 2;
    if ((unint64_t)((char *)v35 - (char *)v37) >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v40;
    if (v41)
    {
      if (v41 >> 61)
LABEL_303:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v42 = (char *)operator new(8 * v41);
    }
    else
    {
      v42 = 0;
    }
    v43 = (unint64_t *)&v42[8 * v39];
    *v43 = Node;
    v44 = v43 + 1;
    if (v36 != v37)
    {
      v45 = (char *)v36 - (char *)v37 - 8;
      if (v45 >= 0x168)
      {
        v50 = ((char *)(v36 - 1) - (char *)v37) & 0xFFFFFFFFFFFFFFF8;
        if (&v42[(char *)v36 - (char *)v37 - 8 - v50] > &v42[(char *)v36 - (char *)v37 - 8])
        {
          v46 = v36;
        }
        else if ((unint64_t *)((char *)v36 - v50 - 8) > v36 - 1)
        {
          v46 = v36;
        }
        else if ((unint64_t)((char *)v37 - v42) >= 0x20)
        {
          v51 = (v45 >> 3) + 1;
          v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v36[v52 / 0xFFFFFFFFFFFFFFF8];
          v43 = (unint64_t *)((char *)v43 - v52);
          v53 = &v42[8 * v39 - 16];
          v54 = v36 - 2;
          v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *(_OWORD *)v54;
            *((_OWORD *)v53 - 1) = *((_OWORD *)v54 - 1);
            *(_OWORD *)v53 = v56;
            v53 -= 32;
            v54 -= 4;
            v55 -= 4;
          }
          while (v55);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_59;
        }
        else
        {
          v46 = v36;
        }
      }
      else
      {
        v46 = v36;
      }
      do
      {
        v47 = *--v46;
        *--v43 = v47;
      }
      while (v46 != v37);
LABEL_59:
      v36 = v37;
    }
    v37 = v43;
    v35 = (unint64_t *)&v42[8 * v41];
    if (v36)
    {
      operator delete(v36);
      v38 = *((_DWORD *)v7 + 24);
    }
    else
    {
      v38 = v34;
    }
    v36 = v44;
LABEL_64:
    if (!v38)
      goto LABEL_282;
    v34 = v38 - 1;
    v48 = *((_QWORD *)v7 + 11);
    Node = *(_QWORD *)(v48 + 8 * (v38 - 1));
    *((_DWORD *)v7 + 24) = v38 - 1;
    if (!Node)
      goto LABEL_300;
    v49 = *(unsigned __int16 *)(Node + 16);
  }
  while (v49 == 232);
  if (v49 == 43)
  {
    if (v38 == 1
      || (v176 = v38 - 2,
          v177 = *(swift::Demangle::__runtime::Node **)(v48 + 8 * v176),
          *((_DWORD *)v7 + 24) = v176,
          !v177))
    {
LABEL_282:
      Node = 0;
      goto LABEL_300;
    }
    v178 = swift::Demangle::__runtime::Demangler::createWithChildren(v7, v16, v177, (swift::Demangle::__runtime::Node *)Node, a5);
  }
  else
  {
    v178 = swift::Demangle::__runtime::Demangler::createWithChild(v7, v16, (swift::Demangle::__runtime::Node *)Node, a4, a5);
  }
  Node = v178;
  while (v36 != v37)
  {
    v184 = (swift::Demangle::__runtime::Node *)*--v36;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v184, v7, v179, v180);
  }
  if ((v190 & 1) != 0)
  {
    v185 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, 217);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v185, v7, v186, v187);
  }
LABEL_300:
  if (v37)
  {
    v147 = v37;
LABEL_277:
    operator delete(v147);
  }
  return (int8x16_t *)Node;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleWitness(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v5;
  unint64_t v6;
  swift::Demangle::__runtime::Demangler *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  int v42;
  unsigned __int16 *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  __int16 v49;
  unsigned int *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  unsigned int *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  unsigned int *v61;
  uint64_t v62;
  const char *v63;
  int v64;
  unsigned int v65;
  unsigned int *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  __int16 v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned __int16 *v75;
  int v76;
  unsigned int v77;
  unsigned __int16 *v78;
  unsigned int *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  char *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  char *v97;
  unsigned int *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  int v103;
  unsigned int v104;
  unsigned int *v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  char *v111;
  unsigned int *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  char *v116;
  unsigned int *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  char *v121;
  int v122;
  unsigned int v123;
  int v124;
  BOOL v125;
  BOOL v126;
  int v127;
  uint64_t v128;
  int8x16_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  unsigned int *v134;
  swift::Demangle::__runtime::NodeFactory *v135;
  __int16 v136;
  unsigned __int16 *v137;
  unsigned int *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  unsigned int *v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  char *v147;
  unsigned int *v148;
  swift::Demangle::__runtime::Node *v149;
  swift::Demangle::__runtime::Node *v150;
  swift::Demangle::__runtime::Node *v151;
  uint64_t v152;
  const char *v153;
  __int16 v154;
  swift::Demangle::__runtime::Node *v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  const char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  int v166;
  int v167;
  unsigned __int16 *v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  char *v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  unsigned int v218;
  int v219;
  int v220;
  uint64_t v221;
  int v222;
  unsigned int v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  uint64_t v231;
  int v232;
  unsigned int v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  uint64_t v246;
  int v247;
  unsigned int v248;
  __int16 v249;
  __int16 v250;
  char v251;
  unsigned int *v252;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v7 = this;
  v8 = 0;
  v9 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v10 = *((_QWORD *)this + 7);
  v11 = *(_BYTE *)(v10 + v5);
  switch(v11)
  {
    case 'C':
      v41 = *((_DWORD *)this + 24);
      if (!v41)
        return 0;
      v42 = v41 - 1;
      v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v41 - 1));
      v44 = v43[8];
      if (v44 != 232 && !swift::Demangle::__runtime::isContext(v44))
        return 0;
      *((_DWORD *)v7 + 24) = v42;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v45 = 2 * *((_QWORD *)v7 + 4);
        if (v45 <= 0x20)
          v45 = 32;
        *((_QWORD *)v7 + 4) = v45;
        v46 = v45 + 8;
        v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
        v48 = (char *)v47 + v46;
        *v47 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v48;
        *((_QWORD *)v7 + 3) = v47;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 62;
      goto LABEL_152;
    case 'G':
      v50 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v50)
        return 0;
      v43 = (unsigned __int16 *)v50;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v51 = 2 * *((_QWORD *)v7 + 4);
        if (v51 <= 0x20)
          v51 = 32;
        *((_QWORD *)v7 + 4) = v51;
        v52 = v51 + 8;
        v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        v54 = (char *)v53 + v52;
        *v53 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v54;
        *((_QWORD *)v7 + 3) = v53;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 88;
      goto LABEL_152;
    case 'I':
      v55 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v55)
        return 0;
      v43 = (unsigned __int16 *)v55;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v56 = 2 * *((_QWORD *)v7 + 4);
        if (v56 <= 0x20)
          v56 = 32;
        *((_QWORD *)v7 + 4) = v56;
        v57 = v56 + 8;
        v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
        v59 = (char *)v58 + v57;
        *v58 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v59;
        *((_QWORD *)v7 + 3) = v58;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 89;
      goto LABEL_152;
    case 'J':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness(this, a2, a3, a4, a5);
    case 'L':
      v61 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v64 = *((_DWORD *)v7 + 24);
      if (!v64)
        return 0;
      v65 = v64 - 1;
      v66 = *(unsigned int **)(*((_QWORD *)v7 + 11) + 8 * v65);
      if (*((_WORD *)v66 + 8) != 232)
        return 0;
      v43 = (unsigned __int16 *)v61;
      *((_DWORD *)v7 + 24) = v65;
      if (!v61)
        return 0;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v67 = 2 * *((_QWORD *)v7 + 4);
        if (v67 <= 0x20)
          v67 = 32;
        *((_QWORD *)v7 + 4) = v67;
        v68 = v67 + 8;
        v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
        v70 = (char *)v69 + v68;
        *v69 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v70;
        *((_QWORD *)v7 + 3) = v69;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 136;
      goto LABEL_192;
    case 'O':
      if (v9 >= v6)
        return 0;
      v8 = 0;
      *((_QWORD *)this + 9) = v5 + 2;
      switch(*(_BYTE *)(v10 + v9))
      {
        case 'C':
          v72 = *((_DWORD *)this + 24);
          if (!v72)
            goto LABEL_323;
          v73 = v72 - 1;
          v74 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v74 + 8 * (v72 - 1));
          v76 = v75[8];
          if (v76 == 232)
          {
            *((_DWORD *)this + 24) = v73;
          }
          else
          {
            if (v76 == 43)
            {
              *((_DWORD *)this + 24) = v73;
              if (v72 == 1 || (v77 = v72 - 2, v78 = *(unsigned __int16 **)(v74 + 8 * v77), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v77;
              v250 = 350;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_323:
            v75 = 0;
          }
          v249 = 350;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'D':
          v174 = *((_DWORD *)this + 24);
          if (!v174)
            goto LABEL_324;
          v175 = v174 - 1;
          v176 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v176 + 8 * (v174 - 1));
          v177 = v75[8];
          if (v177 == 232)
          {
            *((_DWORD *)this + 24) = v175;
          }
          else
          {
            if (v177 == 43)
            {
              *((_DWORD *)this + 24) = v175;
              if (v174 == 1 || (v178 = v174 - 2, v78 = *(unsigned __int16 **)(v176 + 8 * v178), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v178;
              v250 = 351;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_324:
            v75 = 0;
          }
          v249 = 351;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'F':
          v179 = *((_DWORD *)this + 24);
          if (!v179)
            goto LABEL_325;
          v180 = v179 - 1;
          v181 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v181 + 8 * (v179 - 1));
          v182 = v75[8];
          if (v182 == 232)
          {
            *((_DWORD *)this + 24) = v180;
          }
          else
          {
            if (v182 == 43)
            {
              *((_DWORD *)this + 24) = v180;
              if (v179 == 1 || (v183 = v179 - 2, v78 = *(unsigned __int16 **)(v181 + 8 * v183), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v183;
              v250 = 352;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_325:
            v75 = 0;
          }
          v249 = 352;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'H':
          v184 = *((_DWORD *)this + 24);
          if (!v184)
            goto LABEL_326;
          v185 = v184 - 1;
          v186 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v186 + 8 * (v184 - 1));
          v187 = v75[8];
          if (v187 == 232)
          {
            *((_DWORD *)this + 24) = v185;
          }
          else
          {
            if (v187 == 43)
            {
              *((_DWORD *)this + 24) = v185;
              if (v184 == 1 || (v188 = v184 - 2, v78 = *(unsigned __int16 **)(v186 + 8 * v188), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v188;
              v250 = 353;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_326:
            v75 = 0;
          }
          v249 = 353;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'b':
          v189 = *((_DWORD *)this + 24);
          if (!v189)
            goto LABEL_327;
          v190 = v189 - 1;
          v191 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v191 + 8 * (v189 - 1));
          v192 = v75[8];
          if (v192 == 232)
          {
            *((_DWORD *)this + 24) = v190;
          }
          else
          {
            if (v192 == 43)
            {
              *((_DWORD *)this + 24) = v190;
              if (v189 == 1 || (v193 = v189 - 2, v78 = *(unsigned __int16 **)(v191 + 8 * v193), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v193;
              v250 = 282;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_327:
            v75 = 0;
          }
          v249 = 282;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'c':
          v194 = *((_DWORD *)this + 24);
          if (!v194)
            goto LABEL_328;
          v195 = v194 - 1;
          v196 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v196 + 8 * (v194 - 1));
          v197 = v75[8];
          if (v197 == 232)
          {
            *((_DWORD *)this + 24) = v195;
          }
          else
          {
            if (v197 == 43)
            {
              *((_DWORD *)this + 24) = v195;
              if (v194 == 1 || (v198 = v194 - 2, v78 = *(unsigned __int16 **)(v196 + 8 * v198), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v198;
              v250 = 283;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_328:
            v75 = 0;
          }
          v249 = 283;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'd':
          v199 = *((_DWORD *)this + 24);
          if (!v199)
            goto LABEL_329;
          v200 = v199 - 1;
          v201 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v201 + 8 * (v199 - 1));
          v202 = v75[8];
          if (v202 == 232)
          {
            *((_DWORD *)this + 24) = v200;
          }
          else
          {
            if (v202 == 43)
            {
              *((_DWORD *)this + 24) = v200;
              if (v199 == 1 || (v203 = v199 - 2, v78 = *(unsigned __int16 **)(v201 + 8 * v203), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v203;
              v250 = 284;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_329:
            v75 = 0;
          }
          v249 = 284;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'e':
          v204 = *((_DWORD *)this + 24);
          if (!v204)
            goto LABEL_330;
          v205 = v204 - 1;
          v206 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v206 + 8 * (v204 - 1));
          v207 = v75[8];
          if (v207 == 232)
          {
            *((_DWORD *)this + 24) = v205;
          }
          else
          {
            if (v207 == 43)
            {
              *((_DWORD *)this + 24) = v205;
              if (v204 == 1 || (v208 = v204 - 2, v78 = *(unsigned __int16 **)(v206 + 8 * v208), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v208;
              v250 = 279;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_330:
            v75 = 0;
          }
          v249 = 279;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'f':
          v209 = *((_DWORD *)this + 24);
          if (!v209)
            goto LABEL_331;
          v210 = v209 - 1;
          v211 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v211 + 8 * (v209 - 1));
          v212 = v75[8];
          if (v212 == 232)
          {
            *((_DWORD *)this + 24) = v210;
          }
          else
          {
            if (v212 == 43)
            {
              *((_DWORD *)this + 24) = v210;
              if (v209 == 1 || (v213 = v209 - 2, v78 = *(unsigned __int16 **)(v211 + 8 * v213), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v213;
              v250 = 285;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_331:
            v75 = 0;
          }
          v249 = 285;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'g':
          v214 = *((_DWORD *)this + 24);
          if (!v214)
            goto LABEL_332;
          v215 = v214 - 1;
          v216 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v216 + 8 * (v214 - 1));
          v217 = v75[8];
          if (v217 == 232)
          {
            *((_DWORD *)this + 24) = v215;
          }
          else
          {
            if (v217 == 43)
            {
              *((_DWORD *)this + 24) = v215;
              if (v214 == 1 || (v218 = v214 - 2, v78 = *(unsigned __int16 **)(v216 + 8 * v218), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v218;
              v250 = 345;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_332:
            v75 = 0;
          }
          v249 = 345;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'h':
          v219 = *((_DWORD *)this + 24);
          if (!v219)
            goto LABEL_333;
          v220 = v219 - 1;
          v221 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v221 + 8 * (v219 - 1));
          v222 = v75[8];
          if (v222 == 232)
          {
            *((_DWORD *)this + 24) = v220;
          }
          else
          {
            if (v222 == 43)
            {
              *((_DWORD *)this + 24) = v220;
              if (v219 == 1 || (v223 = v219 - 2, v78 = *(unsigned __int16 **)(v221 + 8 * v223), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v223;
              v250 = 286;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_333:
            v75 = 0;
          }
          v249 = 286;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'i':
          a5 = (char *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
          v224 = *((_DWORD *)v7 + 24);
          if (!v224)
            goto LABEL_334;
          v225 = v224 - 1;
          v226 = *((_QWORD *)v7 + 11);
          v137 = *(unsigned __int16 **)(v226 + 8 * (v224 - 1));
          v227 = v137[8];
          if (v227 == 232)
          {
            *((_DWORD *)v7 + 24) = v225;
            goto LABEL_362;
          }
          if (v227 != 43)
          {
LABEL_334:
            v137 = 0;
LABEL_362:
            this = v7;
            v250 = 343;
            goto LABEL_365;
          }
          *((_DWORD *)v7 + 24) = v225;
          if (v224 == 1 || (v228 = v224 - 2, v134 = *(unsigned int **)(v226 + 8 * v228), *((_WORD *)v134 + 8) != 232))
            v134 = 0;
          else
            *((_DWORD *)v7 + 24) = v228;
          v135 = v7;
          v136 = 343;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(v135, v136, (swift::Demangle::__runtime::Node *)v134, (swift::Demangle::__runtime::Node *)v137, a5);
        case 'j':
          a5 = (char *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
          v229 = *((_DWORD *)v7 + 24);
          if (!v229)
            goto LABEL_335;
          v230 = v229 - 1;
          v231 = *((_QWORD *)v7 + 11);
          v137 = *(unsigned __int16 **)(v231 + 8 * (v229 - 1));
          v232 = v137[8];
          if (v232 == 232)
          {
            *((_DWORD *)v7 + 24) = v230;
          }
          else
          {
            if (v232 == 43)
            {
              *((_DWORD *)v7 + 24) = v230;
              if (v229 == 1
                || (v233 = v229 - 2, v134 = *(unsigned int **)(v231 + 8 * v233), *((_WORD *)v134 + 8) != 232))
              {
                v134 = 0;
              }
              else
              {
                *((_DWORD *)v7 + 24) = v233;
              }
              v135 = v7;
              v136 = 344;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(v135, v136, (swift::Demangle::__runtime::Node *)v134, (swift::Demangle::__runtime::Node *)v137, a5);
            }
LABEL_335:
            v137 = 0;
          }
          this = v7;
          v250 = 344;
LABEL_365:
          v78 = v137;
          v75 = (unsigned __int16 *)a5;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
        case 'r':
          v234 = *((_DWORD *)this + 24);
          if (!v234)
            goto LABEL_336;
          v235 = v234 - 1;
          v236 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v236 + 8 * (v234 - 1));
          v237 = v75[8];
          if (v237 == 232)
          {
            *((_DWORD *)this + 24) = v235;
          }
          else
          {
            if (v237 == 43)
            {
              *((_DWORD *)this + 24) = v235;
              if (v234 == 1 || (v238 = v234 - 2, v78 = *(unsigned __int16 **)(v236 + 8 * v238), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v238;
              v250 = 280;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_336:
            v75 = 0;
          }
          v249 = 280;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 's':
          v239 = *((_DWORD *)this + 24);
          if (!v239)
            goto LABEL_337;
          v240 = v239 - 1;
          v241 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v241 + 8 * (v239 - 1));
          v242 = v75[8];
          if (v242 == 232)
          {
            *((_DWORD *)this + 24) = v240;
          }
          else
          {
            if (v242 == 43)
            {
              *((_DWORD *)this + 24) = v240;
              if (v239 == 1 || (v243 = v239 - 2, v78 = *(unsigned __int16 **)(v241 + 8 * v243), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v243;
              v250 = 281;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_337:
            v75 = 0;
          }
          v249 = 281;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        case 'y':
          v244 = *((_DWORD *)this + 24);
          if (!v244)
            goto LABEL_338;
          v245 = v244 - 1;
          v246 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v246 + 8 * (v244 - 1));
          v247 = v75[8];
          if (v247 == 232)
          {
            *((_DWORD *)this + 24) = v245;
          }
          else
          {
            if (v247 == 43)
            {
              *((_DWORD *)this + 24) = v245;
              if (v244 == 1 || (v248 = v244 - 2, v78 = *(unsigned __int16 **)(v246 + 8 * v248), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v248;
              v250 = 278;
              return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v250, (swift::Demangle::__runtime::Node *)v78, (swift::Demangle::__runtime::Node *)v75, a5);
            }
LABEL_338:
            v75 = 0;
          }
          v249 = 278;
          return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChild(this, v249, (swift::Demangle::__runtime::Node *)v75, (uint64_t)v75, a5);
        default:
          return (unsigned int *)v8;
      }
    case 'P':
      v79 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v79)
        return 0;
      v43 = (unsigned __int16 *)v79;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v80 = 2 * *((_QWORD *)v7 + 4);
        if (v80 <= 0x20)
          v80 = 32;
        *((_QWORD *)v7 + 4) = v80;
        v81 = v80 + 8;
        v82 = malloc_type_malloc(v80 + 8, 0xD0263BC5uLL);
        v83 = (char *)v82 + v81;
        *v82 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v82 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v83;
        *((_QWORD *)v7 + 3) = v82;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 197;
      goto LABEL_152;
    case 'S':
      v84 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
      if (!v84)
        return 0;
      v43 = (unsigned __int16 *)v84;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v85 = 2 * *((_QWORD *)v7 + 4);
        if (v85 <= 0x20)
          v85 = 32;
        *((_QWORD *)v7 + 4) = v85;
        v86 = v85 + 8;
        v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
        v88 = (char *)v87 + v86;
        *v87 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v88;
        *((_QWORD *)v7 + 3) = v87;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 195;
      goto LABEL_152;
    case 'T':
      v89 = *((_DWORD *)this + 24);
      if (v89 && (v90 = v89 - 1, v91 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v90), *(_WORD *)(v91 + 16) == 232))
        *((_DWORD *)this + 24) = v90;
      else
        v91 = 0;
      v129 = swift::Demangle::__runtime::Demangler::popAssocTypePath(this, a2, a3, a4, a5);
      v134 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v7, v130, v131, v132, v133);
      v135 = v7;
      v136 = 9;
      v137 = (unsigned __int16 *)v129;
      a5 = (char *)v91;
      return (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(v135, v136, (swift::Demangle::__runtime::Node *)v134, (swift::Demangle::__runtime::Node *)v137, a5);
    case 'V':
      v92 = *((_DWORD *)this + 24);
      if (!v92)
        return 0;
      v93 = v92 - 1;
      v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v93);
      if (v43[8] != 232)
        return 0;
      *((_DWORD *)this + 24) = v93;
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v94 = 2 * *((_QWORD *)this + 4);
        if (v94 <= 0x20)
          v94 = 32;
        *((_QWORD *)this + 4) = v94;
        v95 = v94 + 8;
        v96 = malloc_type_malloc(v94 + 8, 0xD0263BC5uLL);
        v97 = (char *)v96 + v95;
        *v96 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v97;
        *((_QWORD *)v7 + 3) = v96;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 253;
      goto LABEL_152;
    case 'Z':
    case 'z':
      v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v12;
      if (!v12 || v12 + 24 > *((_QWORD *)this + 2))
      {
        v13 = 2 * *((_QWORD *)this + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)this + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        *v15 = *((_QWORD *)v7 + 3);
        v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v15 + v14;
        *((_QWORD *)v7 + 3) = v15;
      }
      *((_QWORD *)v7 + 1) = v12 + 24;
      *(_WORD *)(v12 + 16) = 317;
      *(_BYTE *)(v12 + 18) = 0;
      v16 = *((_DWORD *)v7 + 24);
      if (!v16)
      {
        v17 = 0;
        goto LABEL_202;
      }
      v251 = v11;
      v252 = (unsigned int *)v12;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (2)
      {
        v21 = *((_QWORD *)v7 + 11);
        if (*(_WORD *)(*(_QWORD *)(v21 + 8 * (v16 - 1)) + 16) == 275)
        {
          *((_DWORD *)v7 + 24) = v16 - 1;
          if (v16 == 1)
            goto LABEL_214;
          v16 -= 2;
          v22 = *(_QWORD *)(v21 + 8 * v16);
          v23 = *(unsigned __int16 *)(v22 + 16);
          if ((v23 - 173) > 0x3C || ((1 << (v23 + 83)) & 0x100000010000010DLL) == 0)
          {
            v25 = (v23 - 101) > 0x24 || ((1 << (v23 - 101)) & 0x1000800001) == 0;
            if (v25 && v23 != 347)
              goto LABEL_214;
          }
          *((_DWORD *)v7 + 24) = v16;
          if (v18 < v19)
          {
            *(_QWORD *)v18 = v22;
            v20 = v18 + 8;
            v18 += 8;
            if (!v16)
              goto LABEL_196;
            continue;
          }
          v26 = (v18 - v17) >> 3;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
            abort();
          if ((v19 - v17) >> 2 > v27)
            v27 = (v19 - v17) >> 2;
          if ((unint64_t)(v19 - v17) >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
          {
            if (v28 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v29 = operator new(8 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * v26];
          *(_QWORD *)v30 = v22;
          v20 = v30 + 8;
          if (v18 == v17)
            goto LABEL_39;
          v31 = v18 - v17 - 8;
          if (v31 < 0x168)
          {
            v32 = v18;
            goto LABEL_38;
          }
          v34 = (v18 - 8 - v17) & 0xFFFFFFFFFFFFFFF8;
          if (&v29[v18 - v17 - 8 - v34] > &v29[v18 - v17 - 8])
          {
            v32 = v18;
          }
          else
          {
            if (&v18[-v34 - 8] <= v18 - 8)
            {
              if ((unint64_t)(v17 - v29) < 0x20)
              {
                v32 = v18;
                goto LABEL_38;
              }
              v35 = (v31 >> 3) + 1;
              v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
              v32 = &v18[-v36];
              v30 -= v36;
              v37 = &v29[8 * v26 - 16];
              v38 = v18 - 16;
              v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v40 = *(_OWORD *)v38;
                *(v37 - 1) = *((_OWORD *)v38 - 1);
                *v37 = v40;
                v37 -= 2;
                v38 -= 32;
                v39 -= 4;
              }
              while (v39);
              if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_38;
LABEL_39:
              v19 = &v29[8 * v28];
              if (v17)
              {
                operator delete(v17);
                v16 = *((_DWORD *)v7 + 24);
              }
              v17 = v30;
              v18 = v20;
              if (!v16)
                goto LABEL_196;
              continue;
            }
            v32 = v18;
          }
          do
          {
LABEL_38:
            v33 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v30 - 1) = v33;
            v30 -= 8;
          }
          while (v32 != v17);
          goto LABEL_39;
        }
        break;
      }
      v20 = v18;
LABEL_196:
      if (v20 == v17)
      {
        v12 = (unint64_t)v252;
      }
      else
      {
        v12 = (unint64_t)v252;
        do
        {
          v150 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v20 - 1);
          v20 -= 8;
          swift::Demangle::__runtime::Node::addChild(v252, v150, v7, a4, a5);
        }
        while (v20 != v17);
      }
      v11 = v251;
LABEL_202:
      v151 = swift::Demangle::__runtime::Demangler::popContext(v7, a2, a3, a4, a5);
      if (v151 && (v11 == 90 ? (v154 = 315) : (v154 = 316), v12))
      {
        v155 = v151;
        v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
        {
          v156 = 2 * *((_QWORD *)v7 + 4);
          if (v156 <= 0x20)
            v156 = 32;
          *((_QWORD *)v7 + 4) = v156;
          v157 = v156 + 8;
          v158 = malloc_type_malloc(v156 + 8, 0xD0263BC5uLL);
          v159 = (char *)v158 + v157;
          *v158 = *((_QWORD *)v7 + 3);
          v8 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v7 + 2) = v159;
          *((_QWORD *)v7 + 3) = v158;
        }
        *((_QWORD *)v7 + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = v154;
        *(_BYTE *)(v8 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v155, v7, v152, v153);
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v12, v7, v160, v161);
        if (!v17)
          return (unsigned int *)v8;
      }
      else
      {
LABEL_214:
        v8 = 0;
        if (!v17)
          return (unsigned int *)v8;
      }
      operator delete(v17);
      return (unsigned int *)v8;
    case 'a':
      v98 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v98)
        return 0;
      v43 = (unsigned __int16 *)v98;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v99 = 2 * *((_QWORD *)v7 + 4);
        if (v99 <= 0x20)
          v99 = 32;
        *((_QWORD *)v7 + 4) = v99;
        v100 = v99 + 8;
        v101 = malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
        v102 = (char *)v101 + v100;
        *v101 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v102;
        *((_QWORD *)v7 + 3) = v101;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 198;
      goto LABEL_152;
    case 'b':
      v103 = *((_DWORD *)this + 24);
      if (v103 && (v104 = v103 - 1, v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v104), v43[8] == 232))
        *((_DWORD *)this + 24) = v104;
      else
        v43 = 0;
      v138 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v8 = 0;
      if (!v43)
        return (unsigned int *)v8;
      v66 = v138;
      if (!v138)
        return (unsigned int *)v8;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v139 = 2 * *((_QWORD *)v7 + 4);
        if (v139 <= 0x20)
          v139 = 32;
        *((_QWORD *)v7 + 4) = v139;
        v140 = v139 + 8;
        v141 = malloc_type_malloc(v139 + 8, 0xD0263BC5uLL);
        v142 = (char *)v141 + v140;
        *v141 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v142;
        *((_QWORD *)v7 + 3) = v141;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 10;
      goto LABEL_192;
    case 'l':
      v105 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v106 = *((_DWORD *)v7 + 24);
      if (!v106)
        return 0;
      v107 = v106 - 1;
      v66 = *(unsigned int **)(*((_QWORD *)v7 + 11) + 8 * v107);
      if (*((_WORD *)v66 + 8) != 232)
        return 0;
      v43 = (unsigned __int16 *)v105;
      *((_DWORD *)v7 + 24) = v107;
      if (!v105)
        return 0;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v108 = 2 * *((_QWORD *)v7 + 4);
        if (v108 <= 0x20)
          v108 = 32;
        *((_QWORD *)v7 + 4) = v108;
        v109 = v108 + 8;
        v110 = malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
        v111 = (char *)v110 + v109;
        *v110 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v111;
        *((_QWORD *)v7 + 3) = v110;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 135;
      goto LABEL_192;
    case 'p':
      v112 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v112)
        return 0;
      v43 = (unsigned __int16 *)v112;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v113 = 2 * *((_QWORD *)v7 + 4);
        if (v113 <= 0x20)
          v113 = 32;
        *((_QWORD *)v7 + 4) = v113;
        v114 = v113 + 8;
        v115 = malloc_type_malloc(v113 + 8, 0xD0263BC5uLL);
        v116 = (char *)v115 + v114;
        *v115 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v116;
        *((_QWORD *)v7 + 3) = v115;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 199;
      goto LABEL_152;
    case 'r':
      v117 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v117)
        return 0;
      v43 = (unsigned __int16 *)v117;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v118 = 2 * *((_QWORD *)v7 + 4);
        if (v118 <= 0x20)
          v118 = 32;
        *((_QWORD *)v7 + 4) = v118;
        v119 = v118 + 8;
        v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
        v121 = (char *)v120 + v119;
        *v120 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v121;
        *((_QWORD *)v7 + 3) = v120;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 90;
LABEL_152:
      *(_WORD *)(v8 + 16) = v49;
      *(_BYTE *)(v8 + 18) = 0;
      goto LABEL_193;
    case 't':
      v122 = *((_DWORD *)this + 24);
      if (!v122
        || ((v123 = v122 - 1,
             v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v123),
             v124 = v43[8],
             (v124 - 173) <= 0x3C)
          ? (v125 = ((1 << (v124 + 83)) & 0x100000010000010DLL) == 0)
          : (v125 = 1),
            v125
         && ((v124 - 101) <= 0x24
           ? (v126 = ((1 << (v124 - 101)) & 0x1000800001) == 0)
           : (v126 = 1),
             v126 && v124 != 347)))
      {
        v43 = 0;
      }
      else
      {
        *((_DWORD *)this + 24) = v123;
      }
      v143 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v8 = 0;
      if (!v43)
        return (unsigned int *)v8;
      v66 = v143;
      if (!v143)
        return (unsigned int *)v8;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v144 = 2 * *((_QWORD *)v7 + 4);
        if (v144 <= 0x20)
          v144 = 32;
        *((_QWORD *)v7 + 4) = v144;
        v145 = v144 + 8;
        v146 = malloc_type_malloc(v144 + 8, 0xD0263BC5uLL);
        v147 = (char *)v146 + v145;
        *v146 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v147;
        *((_QWORD *)v7 + 3) = v146;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 6;
LABEL_192:
      *(_WORD *)(v8 + 16) = v71;
      *(_BYTE *)(v8 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v66, v7, v62, v63);
LABEL_193:
      v148 = (unsigned int *)v8;
      v149 = (swift::Demangle::__runtime::Node *)v43;
      goto LABEL_194;
    case 'v':
      if (v9 >= v6)
        return 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v127 = *(char *)(v10 + v9);
      if (v127 == 100)
      {
        v128 = 0;
      }
      else
      {
        v8 = 0;
        if (v127 != 105)
          return (unsigned int *)v8;
        v128 = 1;
      }
      v162 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v162;
      if (!v162 || v162 + 24 > *((_QWORD *)this + 2))
      {
        v163 = 2 * *((_QWORD *)this + 4);
        if (v163 <= 0x20)
          v163 = 32;
        *((_QWORD *)this + 4) = v163;
        v164 = v163 + 8;
        v165 = malloc_type_malloc(v163 + 8, 0xD0263BC5uLL);
        *v165 = *((_QWORD *)v7 + 3);
        v162 = ((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v165 + v164;
        *((_QWORD *)v7 + 3) = v165;
      }
      *((_QWORD *)v7 + 1) = v162 + 24;
      *(_WORD *)(v162 + 16) = 52;
      *(_BYTE *)(v162 + 18) = 4;
      *(_QWORD *)v162 = v128;
      v166 = *((_DWORD *)v7 + 24);
      if (!v166)
        return 0;
      v167 = v166 - 1;
      v168 = *(unsigned __int16 **)(*((_QWORD *)v7 + 11) + 8 * (v166 - 1));
      v169 = v168[8];
      if (v169 != 232 && !swift::Demangle::__runtime::isContext(v169))
        return 0;
      *((_DWORD *)v7 + 24) = v167;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v170 = 2 * *((_QWORD *)v7 + 4);
        if (v170 <= 0x20)
          v170 = 32;
        *((_QWORD *)v7 + 4) = v170;
        v171 = v170 + 8;
        v172 = malloc_type_malloc(v170 + 8, 0xD0263BC5uLL);
        v173 = (char *)v172 + v171;
        *v172 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v173;
        *((_QWORD *)v7 + 3) = v172;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 73;
      *(_BYTE *)(v8 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v162, v7, a4, a5);
      v148 = (unsigned int *)v8;
      v149 = (swift::Demangle::__runtime::Node *)v168;
LABEL_194:
      swift::Demangle::__runtime::Node::addChild(v148, v149, v7, a4, a5);
      return (unsigned int *)v8;
    default:
      return (unsigned int *)v8;
  }
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleSpecialType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v13;
  unsigned int v14;
  swift::Demangle::__runtime::Node *v15;
  int8x16_t *v16;
  swift::Demangle::__runtime::Node *v17;
  __int16 v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  __int16 v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  int v30;
  unsigned int v31;
  swift::Demangle::__runtime::Node *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  __int16 v37;
  int8x16_t *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  unsigned int v42;
  swift::Demangle::__runtime::Node *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  int v48;
  int v49;
  unsigned int v50;
  swift::Demangle::__runtime::Node *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  int8x16_t *v56;
  int v57;
  unsigned int v58;
  swift::Demangle::__runtime::Node *v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  int v66;
  unsigned int v67;
  swift::Demangle::__runtime::Node *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  char *v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  unsigned int *v86;
  swift::Demangle::__runtime::Node *v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  char *v99;
  int v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  char *v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  char *v115;
  unsigned int *v116;
  swift::Demangle::__runtime::Node *v117;
  int v118;
  int8x16_t *v119;
  uint64_t v120;
  const char *v121;
  int8x16_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  swift::Demangle::__runtime::Node *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  const char *v143;
  swift::Demangle::__runtime::Node *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  const char *v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  char *v154;
  int v155;
  unsigned int v156;
  unint64_t i;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  const char *v164;
  unint64_t v165;
  unsigned int v166;
  int8x16_t *v167;
  unint64_t v168;
  int v169;
  unint64_t v170;
  swift::Demangle::__runtime::Node *v171;
  __int16 v172;
  int v173;
  swift::Demangle::__runtime::Node *v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  char *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  char *v189;
  int v190;
  int v191;
  uint64_t v192;
  swift::Demangle::__runtime::Node *v193;
  int v194;
  unsigned int v195;
  __int16 v196;
  swift::Demangle::__runtime::Node *v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  unsigned int v201;
  swift::Demangle::__runtime::Node *v202;
  swift::Demangle::__runtime::Node *v203;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 < v6)
  {
    v8 = 0;
    v9 = v5 + 1;
    *((_QWORD *)this + 9) = v5 + 1;
    v10 = *((_QWORD *)this + 7);
    v11 = *(unsigned __int8 *)(v10 + v5);
    switch(*(_BYTE *)(v10 + v5))
    {
      case 'A':
        v18 = 64;
        goto LABEL_75;
      case 'B':
        v18 = 165;
        goto LABEL_75;
      case 'C':
        v18 = 22;
        goto LABEL_75;
      case 'D':
        v19 = *((_DWORD *)this + 24);
        if (!v19)
          return 0;
        v20 = v19 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v20);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v20;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v22 = 2 * *((_QWORD *)this + 4);
          if (v22 <= 0x20)
            v22 = 32;
          *((_QWORD *)this + 4) = v22;
          v23 = v22 + 8;
          v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
          v25 = (char *)v24 + v23;
          *v24 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v25;
          *((_QWORD *)this + 3) = v24;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 57;
        goto LABEL_127;
      case 'E':
        v18 = 65;
        goto LABEL_75;
      case 'G':
      case 'g':
        return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape(this, (char)v11, a3, a4, a5);
      case 'K':
        v18 = 11;
        goto LABEL_75;
      case 'L':
        v18 = 166;
        goto LABEL_75;
      case 'M':
        v27 = swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(this);
        v30 = *((_DWORD *)this + 24);
        if (!v30)
          return 0;
        v31 = v30 - 1;
        v32 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v31);
        if (*((_WORD *)v32 + 8) != 232)
          return 0;
        v8 = v27;
        *((_DWORD *)this + 24) = v31;
        if (!v27)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v33 = 2 * *((_QWORD *)this + 4);
          if (v33 <= 0x20)
            v33 = 32;
          *((_QWORD *)this + 4) = v33;
          v34 = v33 + 8;
          v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
          v36 = (char *)v35 + v34;
          *v35 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v36;
          *((_QWORD *)this + 3) = v35;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v37 = 145;
        goto LABEL_94;
      case 'P':
        v38 = swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList(this, a2, a3, a4, a5);
        v41 = *((_DWORD *)this + 24);
        if (!v41)
          return 0;
        v42 = v41 - 1;
        v43 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v42);
        if (*((_WORD *)v43 + 8) != 232)
          return 0;
        v8 = (unint64_t)v38;
        *((_DWORD *)this + 24) = v42;
        if (!v38)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v44 = 2 * *((_QWORD *)this + 4);
          if (v44 <= 0x20)
            v44 = 32;
          *((_QWORD *)this + 4) = v44;
          v45 = v44 + 8;
          v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
          v47 = (char *)v46 + v45;
          *v46 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v47;
          *((_QWORD *)this + 3) = v46;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        *(_WORD *)(v21 + 16) = 83;
        *(_BYTE *)(v21 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, v43, this, v39, v40);
        goto LABEL_128;
      case 'S':
        if (v9 >= v6)
          return 0;
        v8 = 0;
        *((_QWORD *)this + 9) = v5 + 2;
        v48 = *(char *)(v10 + v9);
        if (v48 > 111)
        {
          if (v48 == 112)
          {
            v194 = *((_DWORD *)this + 24);
            if (v194
              && (v195 = v194 - 1,
                  v51 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v195),
                  *((_WORD *)v51 + 8) == 232))
            {
              *((_DWORD *)this + 24) = v195;
            }
            else
            {
              v51 = 0;
            }
            v196 = 298;
          }
          else
          {
            if (v48 != 113)
              return (int8x16_t *)v8;
            v155 = *((_DWORD *)this + 24);
            if (v155
              && (v156 = v155 - 1,
                  v51 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v156),
                  *((_WORD *)v51 + 8) == 232))
            {
              *((_DWORD *)this + 24) = v156;
            }
            else
            {
              v51 = 0;
            }
            v196 = 295;
          }
          goto LABEL_253;
        }
        if (v48 != 68)
        {
          if (v48 != 97)
            return (int8x16_t *)v8;
          v49 = *((_DWORD *)this + 24);
          if (v49
            && (v50 = v49 - 1,
                v51 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v50),
                *((_WORD *)v51 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v50;
          }
          else
          {
            v51 = 0;
          }
          v196 = 296;
LABEL_253:
          v197 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(this, v196, v51, a4, a5);
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::createType(this, v197, v198, v199, v200);
        }
        v190 = *((_DWORD *)this + 24);
        if (v190)
        {
          v191 = v190 - 1;
          v192 = *((_QWORD *)this + 11);
          v193 = *(swift::Demangle::__runtime::Node **)(v192 + 8 * (v190 - 1));
          if (*((_WORD *)v193 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v191;
            if (v190 == 1)
              goto LABEL_258;
          }
          else
          {
            v193 = 0;
            v191 = *((_DWORD *)this + 24);
          }
          v201 = v191 - 1;
          v202 = *(swift::Demangle::__runtime::Node **)(v192 + 8 * v201);
          if (*((_WORD *)v202 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v201;
            goto LABEL_259;
          }
        }
        else
        {
          v193 = 0;
        }
LABEL_258:
        v202 = 0;
LABEL_259:
        v197 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 297, v202, v193, a5);
        return (int8x16_t *)swift::Demangle::__runtime::Demangler::createType(this, v197, v198, v199, v200);
      case 'U':
        v18 = 245;
        goto LABEL_75;
      case 'X':
      case 'x':
        if (v11 == 88)
        {
          v13 = *((_DWORD *)this + 24);
          if (!v13)
            return 0;
          v14 = v13 - 1;
          v15 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v14);
          if (*((_WORD *)v15 + 8) != 43)
            return 0;
          *((_DWORD *)this + 24) = v14;
          v16 = swift::Demangle::__runtime::Demangler::popTypeList(this, a2, a3, a4, a5);
          if (!v16)
            return 0;
          v17 = (swift::Demangle::__runtime::Node *)v16;
        }
        else
        {
          v17 = 0;
          v15 = 0;
        }
        v119 = swift::Demangle::__runtime::Demangler::popTypeList(this, a2, a3, a4, a5);
        if (!v119)
          return 0;
        v122 = v119;
        v123 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v123;
        if (!v123 || v123 + 24 > *((_QWORD *)this + 2))
        {
          v124 = 2 * *((_QWORD *)this + 4);
          if (v124 <= 0x20)
            v124 = 32;
          *((_QWORD *)this + 4) = v124;
          v125 = v124 + 8;
          v126 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
          v127 = (char *)v126 + v125;
          *v126 = *((_QWORD *)this + 3);
          v123 = ((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v127;
          *((_QWORD *)this + 3) = v126;
        }
        v128 = v123 + 24;
        *((_QWORD *)this + 1) = v123 + 24;
        *(_WORD *)(v123 + 16) = 212;
        *(_BYTE *)(v123 + 18) = 0;
        v129 = v122[1].u8[2];
        switch((_DWORD)v129)
        {
          case 1:
            break;
          case 5:
            v129 = v122->u32[2];
            if (!(_DWORD)v129)
              goto LABEL_226;
            break;
          case 2:
            v129 = 2;
            break;
          default:
            goto LABEL_226;
        }
        v203 = v17;
        for (i = 0; i != v129; ++i)
        {
          v165 = v122[1].u8[2];
          v166 = v165 - 1;
          if ((_DWORD)v165 == 1)
            goto LABEL_193;
          if ((_DWORD)v165 != 5)
          {
            if ((_DWORD)v165 != 2)
              goto LABEL_198;
            v165 = 2;
LABEL_193:
            if (v165 <= i)
              goto LABEL_198;
            goto LABEL_194;
          }
          if (v122->u32[2] <= i)
          {
LABEL_198:
            v168 = 0;
            goto LABEL_199;
          }
LABEL_194:
          v167 = v122;
          if (v166 >= 2)
            v167 = (int8x16_t *)v122->i64[0];
          v168 = v167->u64[i];
LABEL_199:
          v169 = *(unsigned __int8 *)(v168 + 18);
          v170 = v168;
          if ((v169 - 1) >= 2)
            v170 = *(_QWORD *)v168;
          if (*(_WORD *)(*(_QWORD *)v170 + 16) == 123)
          {
            if ((v169 - 1) >= 2)
            {
              if (v169 != 5 || !*(_DWORD *)(v168 + 8))
              {
                v171 = 0;
LABEL_209:
                v173 = *((unsigned __int8 *)v171 + 18);
                if ((v173 - 1) >= 2)
                {
                  if (v173 != 5 || !*((_DWORD *)v171 + 2))
                    goto LABEL_220;
                  v171 = *(swift::Demangle::__runtime::Node **)v171;
                }
                v174 = *(swift::Demangle::__runtime::Node **)v171;
                if (*(_QWORD *)v171)
                {
                  v168 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 1) = v168;
                  if (!v168 || v168 + 24 > *((_QWORD *)this + 2))
                  {
                    v175 = 2 * *((_QWORD *)this + 4);
                    if (v175 <= 0x20)
                      v175 = 32;
                    *((_QWORD *)this + 4) = v175;
                    v176 = v175 + 8;
                    v177 = malloc_type_malloc(v175 + 8, 0xD0263BC5uLL);
                    v178 = (char *)v177 + v176;
                    *v177 = *((_QWORD *)this + 3);
                    v168 = ((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *((_QWORD *)this + 2) = v178;
                    *((_QWORD *)this + 3) = v177;
                  }
                  *((_QWORD *)this + 1) = v168 + 24;
                  *(_WORD *)(v168 + 16) = 232;
                  *(_BYTE *)(v168 + 18) = 0;
                  swift::Demangle::__runtime::Node::addChild((unsigned int *)v168, v174, this, v120, v121);
                  goto LABEL_221;
                }
LABEL_220:
                v168 = 0;
LABEL_221:
                v172 = 213;
                goto LABEL_222;
              }
              v168 = *(_QWORD *)v168;
            }
            v171 = *(swift::Demangle::__runtime::Node **)v168;
            goto LABEL_209;
          }
          v172 = 214;
LABEL_222:
          v162 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v162;
          if (!v162 || v162 + 24 > *((_QWORD *)this + 2))
          {
            v158 = 2 * *((_QWORD *)this + 4);
            if (v158 <= 0x20)
              v158 = 32;
            *((_QWORD *)this + 4) = v158;
            v159 = v158 + 8;
            v160 = malloc_type_malloc(v158 + 8, 0xD0263BC5uLL);
            v161 = (char *)v160 + v159;
            *v160 = *((_QWORD *)this + 3);
            v162 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v161;
            *((_QWORD *)this + 3) = v160;
          }
          *((_QWORD *)this + 1) = v162 + 24;
          *(_WORD *)(v162 + 16) = v172;
          *(_BYTE *)(v162 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v162, (swift::Demangle::__runtime::Node *)v168, this, v120, v121);
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v123, (swift::Demangle::__runtime::Node *)v162, this, v163, v164);
        }
        v128 = *((_QWORD *)this + 1);
        v17 = v203;
LABEL_226:
        v179 = (v128 + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v179;
        if (!v179 || v179 + 24 > *((_QWORD *)this + 2))
        {
          v180 = 2 * *((_QWORD *)this + 4);
          if (v180 <= 0x20)
            v180 = 32;
          *((_QWORD *)this + 4) = v180;
          v181 = v180 + 8;
          v182 = malloc_type_malloc(v180 + 8, 0xD0263BC5uLL);
          v183 = (char *)v182 + v181;
          *v182 = *((_QWORD *)this + 3);
          v179 = ((unint64_t)v182 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v183;
          *((_QWORD *)this + 3) = v182;
        }
        *((_QWORD *)this + 1) = v179 + 24;
        *(_WORD *)(v179 + 16) = 211;
        *(_BYTE *)(v179 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v179, (swift::Demangle::__runtime::Node *)v123, this, v120, v121);
        if (v15)
        {
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v179, v15, this, a4, a5);
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v179, v17, this, v184, v185);
        }
        v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
        {
          v186 = 2 * *((_QWORD *)this + 4);
          if (v186 <= 0x20)
            v186 = 32;
          *((_QWORD *)this + 4) = v186;
          v187 = v186 + 8;
          v188 = malloc_type_malloc(v186 + 8, 0xD0263BC5uLL);
          v189 = (char *)v188 + v187;
          *v188 = *((_QWORD *)this + 3);
          v8 = ((unint64_t)v188 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v189;
          *((_QWORD *)this + 3) = v188;
        }
        *((_QWORD *)this + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = 232;
        *(_BYTE *)(v8 + 18) = 0;
        v116 = (unsigned int *)v8;
        v117 = (swift::Demangle::__runtime::Node *)v179;
LABEL_135:
        swift::Demangle::__runtime::Node::addChild(v116, v117, this, a4, a5);
        return (int8x16_t *)v8;
      case 'Y':
        return (int8x16_t *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, 167, a3, a4, a5);
      case 'Z':
        v56 = swift::Demangle::__runtime::Demangler::popTypeList(this, a2, a3, a4, a5);
        v57 = *((_DWORD *)this + 24);
        if (v57
          && (v58 = v57 - 1,
              v59 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v58),
              *((_WORD *)v59 + 8) == 101))
        {
          *((_DWORD *)this + 24) = v58;
        }
        else
        {
          v59 = 0;
        }
        v132 = swift::Demangle::__runtime::Demangler::popContext(this, v52, v53, v54, v55);
        v133 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v133;
        if (!v133 || v133 + 24 > *((_QWORD *)this + 2))
        {
          v134 = 2 * *((_QWORD *)this + 4);
          if (v134 <= 0x20)
            v134 = 32;
          *((_QWORD *)this + 4) = v134;
          v135 = v134 + 8;
          v136 = malloc_type_malloc(v134 + 8, 0xD0263BC5uLL);
          *v136 = *((_QWORD *)this + 3);
          v133 = ((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v136 + v135;
          *((_QWORD *)this + 3) = v136;
        }
        v8 = 0;
        *((_QWORD *)this + 1) = v133 + 24;
        *(_WORD *)(v133 + 16) = 1;
        *(_BYTE *)(v133 + 18) = 0;
        if (!v59 || !v133)
          return (int8x16_t *)v8;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v133, v59, this, v130, v131);
        if (!v132)
          return 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v133, v132, this, v137, v138);
        if (!v56)
          return 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v133, (swift::Demangle::__runtime::Node *)v56, this, v139, v140);
        return (int8x16_t *)v133;
      case 'b':
        v60 = *((_DWORD *)this + 24);
        if (!v60)
          return 0;
        v61 = v60 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v61);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v61;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v62 = 2 * *((_QWORD *)this + 4);
          if (v62 <= 0x20)
            v62 = 32;
          *((_QWORD *)this + 4) = v62;
          v63 = v62 + 8;
          v64 = malloc_type_malloc(v62 + 8, 0xD0263BC5uLL);
          v65 = (char *)v64 + v63;
          *v64 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v65;
          *((_QWORD *)this + 3) = v64;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 210;
        goto LABEL_127;
      case 'c':
        v66 = *((_DWORD *)this + 24);
        if (v66
          && (v67 = v66 - 1,
              v68 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v67),
              *((_WORD *)v68 + 8) == 232))
        {
          *((_DWORD *)this + 24) = v67;
        }
        else
        {
          v68 = 0;
        }
        v141 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this, a2, a3, a4, a5);
        v8 = 0;
        if (!v68)
          return (int8x16_t *)v8;
        v144 = (swift::Demangle::__runtime::Node *)v141;
        if (!v141)
          return (int8x16_t *)v8;
        v145 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v145;
        if (!v145 || v145 + 24 > *((_QWORD *)this + 2))
        {
          v146 = 2 * *((_QWORD *)this + 4);
          if (v146 <= 0x20)
            v146 = 32;
          *((_QWORD *)this + 4) = v146;
          v147 = v146 + 8;
          v148 = malloc_type_malloc(v146 + 8, 0xD0263BC5uLL);
          *v148 = *((_QWORD *)this + 3);
          v145 = ((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v148 + v147;
          *((_QWORD *)this + 3) = v148;
        }
        *((_QWORD *)this + 1) = v145 + 24;
        *(_WORD *)(v145 + 16) = 191;
        *(_BYTE *)(v145 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v145, v144, this, v142, v143);
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v145, v68, this, v149, v150);
        v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
        {
          v151 = 2 * *((_QWORD *)this + 4);
          if (v151 <= 0x20)
            v151 = 32;
          *((_QWORD *)this + 4) = v151;
          v152 = v151 + 8;
          v153 = malloc_type_malloc(v151 + 8, 0xD0263BC5uLL);
          v154 = (char *)v153 + v152;
          *v153 = *((_QWORD *)this + 3);
          v8 = ((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v154;
          *((_QWORD *)this + 3) = v153;
        }
        *((_QWORD *)this + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = 232;
        *(_BYTE *)(v8 + 18) = 0;
        v116 = (unsigned int *)v8;
        v117 = (swift::Demangle::__runtime::Node *)v145;
        goto LABEL_135;
      case 'e':
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || (v69 = *((_QWORD *)this + 2), v21 + 24 > v69))
        {
          v70 = 2 * *((_QWORD *)this + 4);
          if (v70 <= 0x20)
            v70 = 32;
          *((_QWORD *)this + 4) = v70;
          v71 = v70 + 8;
          v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
          v69 = (unint64_t)v72 + v71;
          *v72 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v72 + v71;
          *((_QWORD *)this + 3) = v72;
        }
        *(_WORD *)(v21 + 16) = 63;
        *(_BYTE *)(v21 + 18) = 0;
        v8 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (v8)
          v73 = v8 + 24 > v69;
        else
          v73 = 1;
        if (!v73)
          goto LABEL_134;
        goto LABEL_131;
      case 'f':
        v18 = 222;
LABEL_75:
        v74 = 0;
        return (int8x16_t *)swift::Demangle::__runtime::Demangler::popFunctionType(this, v18, v74, a4, a5);
      case 'j':
        return swift::Demangle::__runtime::Demangler::demangleSymbolicExtendedExistentialType(this, a2, a3, a4, a5);
      case 'l':
        v8 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this, a2, a3, a4, a5);
        if (!v8)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v75 = 2 * *((_QWORD *)this + 4);
          if (v75 <= 0x20)
            v75 = 32;
          *((_QWORD *)this + 4) = v75;
          v76 = v75 + 8;
          v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
          v78 = (char *)v77 + v76;
          *v77 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v78;
          *((_QWORD *)this + 3) = v77;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 192;
        goto LABEL_127;
      case 'm':
        v79 = swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(this);
        v80 = *((_DWORD *)this + 24);
        if (!v80)
          return 0;
        v81 = v80 - 1;
        v32 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v81);
        if (*((_WORD *)v32 + 8) != 232)
          return 0;
        v8 = v79;
        *((_DWORD *)this + 24) = v81;
        if (!v79)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v82 = 2 * *((_QWORD *)this + 4);
          if (v82 <= 0x20)
            v82 = 32;
          *((_QWORD *)this + 4) = v82;
          v83 = v82 + 8;
          v84 = malloc_type_malloc(v82 + 8, 0xD0263BC5uLL);
          v85 = (char *)v84 + v83;
          *v84 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v85;
          *((_QWORD *)this + 3) = v84;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v37 = 69;
LABEL_94:
        *(_WORD *)(v21 + 16) = v37;
        *(_BYTE *)(v21 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, (swift::Demangle::__runtime::Node *)v8, this, v28, v29);
        v86 = (unsigned int *)v21;
        v87 = v32;
        goto LABEL_129;
      case 'o':
        v88 = *((_DWORD *)this + 24);
        if (!v88)
          return 0;
        v89 = v88 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v89);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v89;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v90 = 2 * *((_QWORD *)this + 4);
          if (v90 <= 0x20)
            v90 = 32;
          *((_QWORD *)this + 4) = v90;
          v91 = v90 + 8;
          v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
          v93 = (char *)v92 + v91;
          *v92 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v93;
          *((_QWORD *)this + 3) = v92;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 248;
        goto LABEL_127;
      case 'p':
        v94 = *((_DWORD *)this + 24);
        if (!v94)
          return 0;
        v95 = v94 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v95);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v95;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v96 = 2 * *((_QWORD *)this + 4);
          if (v96 <= 0x20)
            v96 = 32;
          *((_QWORD *)this + 4) = v96;
          v97 = v96 + 8;
          v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
          v99 = (char *)v98 + v97;
          *v98 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v99;
          *((_QWORD *)this + 3) = v98;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 69;
        goto LABEL_127;
      case 'u':
        v100 = *((_DWORD *)this + 24);
        if (!v100)
          return 0;
        v101 = v100 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v101);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v101;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v102 = 2 * *((_QWORD *)this + 4);
          if (v102 <= 0x20)
            v102 = 32;
          *((_QWORD *)this + 4) = v102;
          v103 = v102 + 8;
          v104 = malloc_type_malloc(v102 + 8, 0xD0263BC5uLL);
          v105 = (char *)v104 + v103;
          *v104 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v105;
          *((_QWORD *)this + 3) = v104;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 249;
        goto LABEL_127;
      case 'w':
        v106 = *((_DWORD *)this + 24);
        if (!v106)
          return 0;
        v107 = v106 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v107);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v107;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v108 = 2 * *((_QWORD *)this + 4);
          if (v108 <= 0x20)
            v108 = 32;
          *((_QWORD *)this + 4) = v108;
          v109 = v108 + 8;
          v110 = malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
          v111 = (char *)v110 + v109;
          *v110 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v111;
          *((_QWORD *)this + 3) = v110;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 247;
LABEL_127:
        *(_WORD *)(v21 + 16) = v26;
        *(_BYTE *)(v21 + 18) = 0;
LABEL_128:
        v86 = (unsigned int *)v21;
        v87 = (swift::Demangle::__runtime::Node *)v8;
LABEL_129:
        swift::Demangle::__runtime::Node::addChild(v86, v87, this, a4, a5);
        v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
        {
LABEL_131:
          v112 = 2 * *((_QWORD *)this + 4);
          if (v112 <= 0x20)
            v112 = 32;
          *((_QWORD *)this + 4) = v112;
          v113 = v112 + 8;
          v114 = malloc_type_malloc(v112 + 8, 0xD0263BC5uLL);
          v115 = (char *)v114 + v113;
          *v114 = *((_QWORD *)this + 3);
          v8 = ((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v115;
          *((_QWORD *)this + 3) = v114;
        }
LABEL_134:
        *((_QWORD *)this + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = 232;
        *(_BYTE *)(v8 + 18) = 0;
        v116 = (unsigned int *)v8;
        v117 = (swift::Demangle::__runtime::Node *)v21;
        goto LABEL_135;
      case 'z':
        if (v9 >= v6)
          return 0;
        *((_QWORD *)this + 9) = v5 + 2;
        v118 = *(char *)(v10 + v9);
        if (v118 == 67)
        {
          v18 = 22;
          v74 = 1;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::popFunctionType(this, v18, v74, a4, a5);
        }
        if (v118 == 66)
        {
          v18 = 165;
          v74 = 1;
          return (int8x16_t *)swift::Demangle::__runtime::Demangler::popFunctionType(this, v18, v74, a4, a5);
        }
        break;
      default:
        return (int8x16_t *)v8;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionType(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  swift::Demangle::__runtime::Node *v13;
  int v14;
  swift::Demangle::__runtime::Node *v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node *v17;
  swift::Demangle::__runtime::Node *v18;
  swift::Demangle::__runtime::Node *v19;
  swift::Demangle::__runtime::Node *v20;
  swift::Demangle::__runtime::Node *v21;
  unsigned int v22;
  swift::Demangle::__runtime::Node *v23;
  swift::Demangle::__runtime::Node *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  swift::Demangle::__runtime::Node *v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;

  v5 = a3;
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v12;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 18) = 0;
  if (v5)
  {
    v13 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleClangType(a1);
    if (v13)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v13, a1, a4, a5);
  }
  v14 = *((_DWORD *)a1 + 24);
  if (v14)
  {
    v15 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
    if (*((_WORD *)v15 + 8) != 349
      || (*((_DWORD *)a1 + 24) = v14 - 1,
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v15, a1, a4, a5),
          (v14 = *((_DWORD *)a1 + 24)) != 0))
    {
      v16 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v16 + 8) != 67
        || (*((_DWORD *)a1 + 24) = v14 - 1,
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v16, a1, a4, a5),
            (v14 = *((_DWORD *)a1 + 24)) != 0))
      {
        v17 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
        if (*((_WORD *)v17 + 8) != 129
          || (*((_DWORD *)a1 + 24) = v14 - 1,
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v17, a1, a4, a5),
              (v14 = *((_DWORD *)a1 + 24)) != 0))
        {
          v18 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
          if (*((_WORD *)v18 + 8) != 130
            || (*((_DWORD *)a1 + 24) = v14 - 1,
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v18, a1, a4, a5),
                (v14 = *((_DWORD *)a1 + 24)) != 0))
          {
            v19 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
            if (*((_WORD *)v19 + 8) != 68
              || (*((_DWORD *)a1 + 24) = v14 - 1,
                  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v19, a1, a4, a5),
                  (v14 = *((_DWORD *)a1 + 24)) != 0))
            {
              v20 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
              if ((*((_WORD *)v20 + 8) & 0xFFFE) != 0x110
                || (*((_DWORD *)a1 + 24) = v14 - 1,
                    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v20, a1, a4, a5),
                    (v14 = *((_DWORD *)a1 + 24)) != 0))
              {
                v21 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
                if (*((_WORD *)v21 + 8) != 66
                  || (*((_DWORD *)a1 + 24) = v14 - 1,
                      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v21, a1, a4, a5),
                      (v14 = *((_DWORD *)a1 + 24)) != 0))
                {
                  v22 = v14 - 1;
                  v23 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * v22);
                  if (*((_WORD *)v23 + 8) == 271)
                  {
                    *((_DWORD *)a1 + 24) = v22;
                    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v23, a1, a4, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams(a1, 3, a3, a4, a5);
  if (v24)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v24, a1, v26, v27);
  else
    v8 = 0;
  v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams(a1, 207, v25, v26, v27);
  v31 = 0;
  if (v8 && v28)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v28, a1, v29, v30);
    v31 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v31;
    if (!v31 || v31 + 24 > *((_QWORD *)a1 + 2))
    {
      v34 = 2 * *((_QWORD *)a1 + 4);
      if (v34 <= 0x20)
        v34 = 32;
      *((_QWORD *)a1 + 4) = v34;
      v35 = v34 + 8;
      v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
      v37 = (char *)v36 + v35;
      *v36 = *((_QWORD *)a1 + 3);
      v31 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v37;
      *((_QWORD *)a1 + 3) = v36;
    }
    *((_QWORD *)a1 + 1) = v31 + 24;
    *(_WORD *)(v31 + 16) = 232;
    *(_BYTE *)(v31 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v31, (swift::Demangle::__runtime::Node *)v8, a1, v32, v33);
  }
  return v31;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFunctionEntity(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  __int16 v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node *v14;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  swift::Demangle::__runtime::Node *v23;
  swift::Demangle::__runtime::Node *v24;
  uint64_t v25;
  const char *v26;
  swift::Demangle::__runtime::Node *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  unsigned int *v33;
  swift::Demangle::__runtime::Node *v34;

  v5 = *((_QWORD *)this + 9);
  if (v5 < *((_QWORD *)this + 8))
  {
    v7 = 0;
    *((_QWORD *)this + 9) = v5 + 1;
    v8 = *(char *)(*((_QWORD *)this + 7) + v5) - 65;
    v9 = 0;
    v10 = 0;
    v11 = 70;
    v12 = 31;
    v13 = 0;
    v14 = 0;
    switch(v8)
    {
      case 0:
        v7 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        v13 = 0;
        v14 = 0;
        v10 = 3;
        v12 = 33;
        goto LABEL_31;
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_31;
      case 4:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 104;
        goto LABEL_31;
      case 12:
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMacroExpansion(this, a2, a3, a4, a5);
      case 15:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 178;
        goto LABEL_31;
      case 20:
        goto LABEL_20;
      case 22:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 179;
        goto LABEL_31;
      case 34:
        v9 = 29;
LABEL_9:
        v12 = v9;
        v16 = *((_DWORD *)this + 24);
        if (v16)
        {
          v17 = v16 - 1;
          v18 = *((_QWORD *)this + 11);
          v7 = *(_QWORD *)(v18 + 8 * (v16 - 1));
          if (*(_WORD *)(v7 + 16) == 176)
          {
            *((_DWORD *)this + 24) = v17;
            if (v16 == 1)
              goto LABEL_29;
          }
          else
          {
            v7 = 0;
            v17 = *((_DWORD *)this + 24);
          }
          v22 = v17 - 1;
          v13 = *(swift::Demangle::__runtime::Node **)(v18 + 8 * v22);
          if (*((_WORD *)v13 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v22;
            goto LABEL_30;
          }
        }
        else
        {
          v7 = 0;
        }
LABEL_29:
        v13 = 0;
LABEL_30:
        v14 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v13, a3, a4, a5);
        v10 = 1;
LABEL_31:
        v23 = (swift::Demangle::__runtime::Node *)v7;
        v24 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
        if (v24)
        {
          v27 = v24;
          v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v28;
          if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
          {
            v29 = 2 * *((_QWORD *)this + 4);
            if (v29 <= 0x20)
              v29 = 32;
            *((_QWORD *)this + 4) = v29;
            v30 = v29 + 8;
            v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            v32 = (char *)v31 + v30;
            *v31 = *((_QWORD *)this + 3);
            v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v32;
            *((_QWORD *)this + 3) = v31;
          }
          *((_QWORD *)this + 1) = v28 + 24;
          *(_WORD *)(v28 + 16) = v12;
          *(_BYTE *)(v28 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v28, v27, this, v25, v26);
          if (v10 != 1)
          {
LABEL_38:
            if (v10 == 2)
            {
              v7 = 0;
              if (!v23 || !v28)
                return (swift::Demangle::__runtime::Node *)v7;
              swift::Demangle::__runtime::Node::addChild((unsigned int *)v28, v23, this, v25, v26);
              if (!v13)
                return 0;
              v33 = (unsigned int *)v28;
              v34 = v13;
              goto LABEL_55;
            }
            if (v10 == 3)
            {
              v7 = 0;
              if (!v23 || !v28)
                return (swift::Demangle::__runtime::Node *)v7;
              goto LABEL_50;
            }
            return (swift::Demangle::__runtime::Node *)v28;
          }
        }
        else
        {
          v28 = 0;
          if (v10 != 1)
            goto LABEL_38;
        }
        if (v14 && v28)
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v28, v14, this, v25, v26);
        v7 = 0;
        if (!v13 || !v28)
          return (swift::Demangle::__runtime::Node *)v7;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v28, v13, this, v25, v26);
        if (v23)
        {
LABEL_50:
          v33 = (unsigned int *)v28;
          v34 = v23;
LABEL_55:
          swift::Demangle::__runtime::Node::addChild(v33, v34, this, v25, v26);
        }
        return (swift::Demangle::__runtime::Node *)v28;
      case 35:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 50;
        goto LABEL_31;
      case 36:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 103;
        goto LABEL_31;
      case 40:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 125;
        goto LABEL_31;
      case 44:
        v19 = 138;
        return swift::Demangle::__runtime::Demangler::demangleEntity(this, v19, a3, a4, a5);
      case 47:
        v19 = 262;
        return swift::Demangle::__runtime::Demangler::demangleEntity(this, v19, a3, a4, a5);
      case 52:
        v11 = 117;
LABEL_20:
        v7 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        v20 = *((_DWORD *)this + 24);
        if (v20
          && (v21 = v20 - 1,
              v13 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v21),
              *((_WORD *)v13 + 8) == 232))
        {
          v14 = 0;
          *((_DWORD *)this + 24) = v21;
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
        v10 = 2;
        v12 = v11;
        goto LABEL_31;
      default:
        return (swift::Demangle::__runtime::Node *)v7;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  swift::Demangle::__runtime::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;

  v2 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v6 = v5 - 1;
  v7 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v6);
  v8 = v7[8];
  v9 = v8 > 0x31;
  v10 = (1 << v8) & 0x380000C000000;
  if (v9 || v10 == 0)
    return 0;
  v12 = (swift::Demangle::__runtime::Node *)v2;
  *((_DWORD *)this + 24) = v6;
  if (!v2)
    return 0;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 206;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, v3, v4);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v7, this, v18, v19);
  return v13;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleSubscript(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  swift::Demangle::__runtime::Node *v17;
  uint64_t v18;
  const char *v19;
  swift::Demangle::__runtime::Node *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  swift::Demangle::__runtime::Node *v26;
  uint64_t v27;
  const char *v28;
  swift::Demangle::__runtime::Node *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;

  v6 = *((_DWORD *)this + 24);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = *((_QWORD *)this + 11);
    v9 = *(swift::Demangle::__runtime::Node **)(v8 + 8 * (v6 - 1));
    if (*((_WORD *)v9 + 8) == 176)
    {
      *((_DWORD *)this + 24) = v7;
      if (v6 == 1)
        goto LABEL_9;
    }
    else
    {
      v9 = 0;
      v7 = *((_DWORD *)this + 24);
    }
    v10 = v7 - 1;
    v11 = *(swift::Demangle::__runtime::Node **)(v8 + 8 * v10);
    if (*((_WORD *)v11 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v10;
      goto LABEL_10;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_9:
  v11 = 0;
LABEL_10:
  v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v11, a3, a4, a5);
  v17 = swift::Demangle::__runtime::Demangler::popContext(this, v13, v14, v15, v16);
  if (!v11)
    return 0;
  v20 = v17;
  v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v21;
  if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
  {
    v22 = 2 * *((_QWORD *)this + 4);
    if (v22 <= 0x20)
      v22 = 32;
    *((_QWORD *)this + 4) = v22;
    v23 = v22 + 8;
    v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    v25 = (char *)v24 + v23;
    *v24 = *((_QWORD *)this + 3);
    v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v25;
    *((_QWORD *)this + 3) = v24;
  }
  v26 = 0;
  *((_QWORD *)this + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = 220;
  *(_BYTE *)(v21 + 18) = 0;
  if (v20 && v21)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, v20, this, v18, v19);
    if (v12)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, v12, this, v27, v28);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, v11, this, v27, v28);
    if (v9)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, v9, this, v18, v19);
    v26 = (swift::Demangle::__runtime::Node *)v21;
  }
  v29 = setParentForOpaqueReturnTypeNodes(this, v26, v11, v18, v19);
  return swift::Demangle::__runtime::Demangler::demangleAccessor(this, v29, v30, v31, v32);
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleGenericSignature(swift::Demangle::__runtime::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int8x16_t *result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;

  v7 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v7;
  if (!v7 || (v8 = *((_QWORD *)this + 2), (unint64_t)&v7[1].u64[1] > v8))
  {
    v9 = 2 * *((_QWORD *)this + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)this + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v8 = (unint64_t)v11 + v10;
    *v11 = *((_QWORD *)this + 3);
    v7 = (int8x16_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v11;
  }
  *((_QWORD *)this + 1) = (char *)v7 + 24;
  v7[1].i16[0] = 43;
  v7[1].i8[2] = 0;
  if (!a2)
  {
    v25 = ((unint64_t)&v7[1].u64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v25;
    if (v25)
      v26 = v25 + 24 > v8;
    else
      v26 = 1;
    if (v26)
    {
      v27 = 2 * *((_QWORD *)this + 4);
      if (v27 <= 0x20)
        v27 = 32;
      *((_QWORD *)this + 4) = v27;
      v28 = v27 + 8;
      v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
      *v29 = *((_QWORD *)this + 3);
      v25 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v29 + v28;
      *((_QWORD *)this + 3) = v29;
    }
    *((_QWORD *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 37;
    *(_BYTE *)(v25 + 18) = 4;
    *(_QWORD *)v25 = 1;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v25, this, a4, a5);
LABEL_39:
    v30 = v7[1].u8[2];
    v31 = v30;
    if ((_DWORD)v30 != 1)
    {
      if ((_DWORD)v30 != 5)
      {
        if ((_DWORD)v30 == 2)
        {
          v31 = 2;
          v32 = *((_DWORD *)this + 24);
          if (!v32)
            goto LABEL_49;
        }
        else
        {
          v31 = 0;
          v32 = *((_DWORD *)this + 24);
          if (!v32)
            goto LABEL_49;
        }
        goto LABEL_54;
      }
      v31 = v7->u32[2];
    }
    v32 = *((_DWORD *)this + 24);
    if (!v32)
    {
LABEL_49:
      if ((_DWORD)v30 != 5)
        goto LABEL_50;
      goto LABEL_58;
    }
    do
    {
LABEL_54:
      v33 = v32 - 1;
      v34 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v32 - 1));
      v35 = v34[8];
      if ((v35 - 39) >= 4 && v35 != 354 && v35 != 36)
        break;
      *((_DWORD *)this + 24) = v33;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v34, this, a4, a5);
      v32 = *((_DWORD *)this + 24);
    }
    while (v32);
    LODWORD(v30) = v7[1].u8[2];
    if ((_DWORD)v30 != 5)
    {
LABEL_50:
      if ((_DWORD)v30 == 2 && !v31)
        *v7 = vextq_s8(*v7, *v7, 8uLL);
      return v7;
    }
LABEL_58:
    v36 = v7->u32[2];
    if (v31 != v36)
    {
      v37 = (_QWORD *)(v7->i64[0] + 8 * v36 - 8);
      if ((unint64_t)v37 > v7->i64[0] + 8 * v31)
      {
        v38 = v7->i64[0] + 8 * v31 + 8;
        do
        {
          v39 = *(_QWORD *)(v38 - 8);
          *(_QWORD *)(v38 - 8) = *v37;
          *v37-- = v39;
          v40 = v38 >= (unint64_t)v37;
          v38 += 8;
        }
        while (!v40);
      }
    }
    return v7;
  }
  v13 = *((_QWORD *)this + 8);
  v12 = *((_QWORD *)this + 9);
  if (v12 < v13)
  {
    while (1)
    {
      v14 = *((_QWORD *)this + 7);
      v15 = *(unsigned __int8 *)(v14 + v12);
      switch(v15)
      {
        case '_':
          *((_QWORD *)this + 9) = v12 + 1;
          v19 = 1;
          break;
        case 'z':
          v19 = 0;
          *((_QWORD *)this + 9) = v12 + 1;
          break;
        case 'l':
          *((_QWORD *)this + 9) = v12 + 1;
          goto LABEL_39;
        default:
          if ((v15 - 48) > 9)
            return 0;
          v16 = 0;
          while (1)
          {
            v17 = *(unsigned __int8 *)(v14 + v12);
            if ((v17 - 48) > 9)
              break;
            v18 = v17 + 10 * v16 - 48;
            if (v18 >= v16)
            {
              *((_QWORD *)this + 9) = ++v12;
              v16 = v18;
              if (v13 != v12)
                continue;
            }
            return 0;
          }
          result = 0;
          if (v16 < 0 || v12 >= v13 || v17 != 95)
            return result;
          *((_QWORD *)this + 9) = v12 + 1;
          v19 = v16 + 2;
          break;
      }
      v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v21;
      if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
      {
        v22 = 2 * *((_QWORD *)this + 4);
        if (v22 <= 0x20)
          v22 = 32;
        *((_QWORD *)this + 4) = v22;
        v23 = v22 + 8;
        v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
        *v24 = *((_QWORD *)this + 3);
        v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v24 + v23;
        *((_QWORD *)this + 3) = v24;
      }
      *((_QWORD *)this + 1) = v21 + 24;
      *(_WORD *)(v21 + 16) = 37;
      *(_BYTE *)(v21 + 18) = 4;
      *(_QWORD *)v21 = v19;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v21, this, a4, a5);
      result = 0;
      v13 = *((_QWORD *)this + 8);
      v12 = *((_QWORD *)this + 9);
      if (v12 >= v13)
        return result;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  int v1;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  unint64_t result;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  v4 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 101)
    return 0;
  *((_DWORD *)this + 24) = v3;
  v5 = v4[1];
  if (!v5)
  {
    v21 = 0;
    v7 = 0;
    goto LABEL_29;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *v4;
  v41 = *v4;
  do
  {
    v10 = *(char *)(v9 + v6);
    if ((v10 & 0x8000000000000000) == 0)
    {
      if ((v10 - 97) > 0x19 || ((0x17007A2uLL >> (v10 - 97)) & 1) != 0)
        return 0;
      LOBYTE(v10) = swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(void)::op_char_table[v10 - 97];
    }
    if (v6 >= v8)
    {
      v11 = &v7[v8];
      v12 = (char *)*((_QWORD *)this + 1);
      if (v11 == v12)
      {
        v14 = v11 + 1;
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v14 <= v13)
        {
          *((_QWORD *)this + 1) = v14;
          LODWORD(v15) = 1;
LABEL_6:
          v8 += v15;
          goto LABEL_7;
        }
      }
      else
      {
        v13 = *((_QWORD *)this + 2);
      }
      if (2 * v8 <= 4)
        v15 = 4;
      else
        v15 = 2 * v8;
      v16 = v15 + v8;
      if (!v12 || (unint64_t)&v12[v16] > v13)
      {
        v17 = 2 * *((_QWORD *)this + 4);
        if (v17 <= v16 + 1)
          v17 = v16 + 1;
        *((_QWORD *)this + 4) = v17;
        v18 = v17 + 8;
        v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        v20 = (char *)v19 + v18;
        *v19 = *((_QWORD *)this + 3);
        v12 = (char *)(v19 + 1);
        *((_QWORD *)this + 2) = v20;
        *((_QWORD *)this + 3) = v19;
      }
      *((_QWORD *)this + 1) = &v12[v16];
      if (v8)
        memcpy(v12, v7, v8);
      v7 = v12;
      v9 = v41;
      goto LABEL_6;
    }
LABEL_7:
    v7[v6++] = v10;
  }
  while (v5 != v6);
  v21 = v6;
LABEL_29:
  v22 = *((_QWORD *)this + 9);
  if (v22 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v22 + 1;
  v23 = *(char *)(*((_QWORD *)this + 7) + v22);
  if (v23 == 80)
  {
    v24 = (_QWORD *)((char *)this + 8);
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (result && result + 24 <= *((_QWORD *)this + 2))
    {
      v32 = 173;
      goto LABEL_50;
    }
    v33 = 2 * *((_QWORD *)this + 4);
    if (v33 <= 0x20)
      v33 = 32;
    *((_QWORD *)this + 4) = v33;
    v34 = v33 + 8;
    v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
    v36 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v35;
    v30 = (char *)v35 + v34;
    *v35 = v36;
    v31 = v35 + 1;
    v32 = 173;
    goto LABEL_49;
  }
  if (v23 == 112)
  {
    v24 = (_QWORD *)((char *)this + 8);
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (result && result + 24 <= *((_QWORD *)this + 2))
    {
      v32 = 175;
      goto LABEL_50;
    }
    v37 = 2 * *((_QWORD *)this + 4);
    if (v37 <= 0x20)
      v37 = 32;
    *((_QWORD *)this + 4) = v37;
    v38 = v37 + 8;
    v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    v40 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v39;
    v30 = (char *)v39 + v38;
    *v39 = v40;
    v31 = v39 + 1;
    v32 = 175;
LABEL_49:
    result = ((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v30;
    goto LABEL_50;
  }
  if (v23 != 105)
    return 0;
  v24 = (_QWORD *)((char *)this + 8);
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v26 = 2 * *((_QWORD *)this + 4);
    if (v26 <= 0x20)
      v26 = 32;
    *((_QWORD *)this + 4) = v26;
    v27 = v26 + 8;
    v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    v29 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v28;
    v30 = (char *)v28 + v27;
    *v28 = v29;
    v31 = v28 + 1;
    v32 = 124;
    goto LABEL_49;
  }
  v32 = 124;
LABEL_50:
  *v24 = result + 24;
  *(_WORD *)(result + 16) = v32;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v21;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleProtocolListType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  swift::Demangle::__runtime::Node *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;

  v6 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this, a2, a3, a4, a5);
  if (!v6)
    return 0;
  v9 = (swift::Demangle::__runtime::Node *)v6;
  v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v10;
  if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
  {
    v11 = 2 * *((_QWORD *)this + 4);
    if (v11 <= 0x20)
      v11 = 32;
    *((_QWORD *)this + 4) = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    v14 = (char *)v13 + v12;
    *v13 = *((_QWORD *)this + 3);
    v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v14;
    *((_QWORD *)this + 3) = v13;
  }
  *((_QWORD *)this + 1) = v10 + 24;
  *(_WORD *)(v10 + 16) = 232;
  *(_BYTE *)(v10 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, v9, this, v7, v8);
  return v10;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v6 = *((_QWORD *)this + 8);
  v7 = *((_QWORD *)this + 9);
  if (v7 >= v6)
  {
LABEL_10:
    v9 = -999;
  }
  else
  {
    v8 = *((_QWORD *)this + 7);
    switch(*(_BYTE *)(v8 + v7))
    {
      case '_':
        *((_QWORD *)this + 9) = v7 + 1;
        v9 = 1;
        goto LABEL_11;
      case 'd':
        v15 = v7 + 1;
        *((_QWORD *)this + 9) = v7 + 1;
        if (v7 + 1 >= v6)
          goto LABEL_29;
        v16 = *(unsigned __int8 *)(v8 + v15);
        if (v16 == 95)
        {
          v15 = v7 + 2;
          *((_QWORD *)this + 9) = v7 + 2;
          v13 = 1;
          goto LABEL_30;
        }
        if ((v16 - 48) > 9)
          goto LABEL_29;
        v20 = 0;
        while (2)
        {
          v21 = *(unsigned __int8 *)(v8 + v15);
          if ((v21 - 48) > 9)
          {
            v13 = -999;
            if ((v20 & 0x80000000) == 0 && v15 < v6 && v21 == 95)
            {
              *((_QWORD *)this + 9) = ++v15;
              v13 = v20 + 2;
            }
          }
          else
          {
            v22 = v21 + 10 * v20 - 48;
            if (v22 >= v20)
            {
              *((_QWORD *)this + 9) = ++v15;
              v20 = v22;
              if (v6 == v15)
              {
                v9 = -1000;
                v13 = -999;
                return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
              }
              continue;
            }
LABEL_29:
            v13 = -999;
          }
          break;
        }
LABEL_30:
        if (v15 >= v6)
          goto LABEL_38;
        v23 = *(unsigned __int8 *)(v8 + v15);
        if (v23 == 95)
        {
          v9 = 0;
          *((_QWORD *)this + 9) = v15 + 1;
          return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
        }
        if ((v23 - 48) > 9)
          goto LABEL_38;
        v24 = 0;
        while (1)
        {
          v25 = *(unsigned __int8 *)(v8 + v15);
          if ((v25 - 48) > 9)
            break;
          v26 = v25 + 10 * v24 - 48;
          if (v26 >= v24)
          {
            *((_QWORD *)this + 9) = ++v15;
            v24 = v26;
            if (v6 != v15)
              continue;
          }
LABEL_38:
          v9 = -1000;
          return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
        }
        v9 = -1000;
        if ((v24 & 0x80000000) == 0 && v15 < v6 && v25 == 95)
        {
          *((_QWORD *)this + 9) = v15 + 1;
          v9 = v24 + 1;
        }
        return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
      case 's':
        *((_QWORD *)this + 9) = v7 + 1;
        result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = result;
        if (!result || (unint64_t)(result + 24) > *((_QWORD *)this + 2))
        {
          v17 = 2 * *((_QWORD *)this + 4);
          if (v17 <= 0x20)
            v17 = 32;
          *((_QWORD *)this + 4) = v17;
          v18 = v17 + 8;
          v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
          *v19 = *((_QWORD *)this + 3);
          result = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v19 + v18;
          *((_QWORD *)this + 3) = v19;
        }
        *((_QWORD *)this + 1) = result + 24;
        *(_WORD *)(result + 16) = 85;
        *(_BYTE *)(result + 18) = 0;
        return result;
      case 'z':
        *((_QWORD *)this + 9) = v7 + 1;
        v13 = 0;
        v9 = 0;
        return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
      default:
        if (*(unsigned __int8 *)(v8 + v7) - 48 > 9)
          goto LABEL_10;
        v10 = 0;
        v9 = -999;
        break;
    }
    while (1)
    {
      v11 = *(unsigned __int8 *)(v8 + v7);
      if ((v11 - 48) > 9)
        break;
      v12 = v11 + 10 * v10 - 48;
      if (v12 < v10)
        goto LABEL_10;
      *((_QWORD *)this + 9) = ++v7;
      v10 = v12;
      if (v6 == v7)
        goto LABEL_11;
    }
    v9 = -999;
    if ((v10 & 0x80000000) == 0 && v7 < v6 && v11 == 95)
    {
      *((_QWORD *)this + 9) = v7 + 1;
      v9 = v10 + 2;
    }
  }
LABEL_11:
  v13 = 0;
  return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
}

unint64_t swift::Demangle::__runtime::Demangler::popTuple(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  swift::Demangle::__runtime::Node *v25;
  __int128 *v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  swift::Demangle::__runtime::Node *v33;
  uint64_t v34;
  const char *v35;
  int v36;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  __int128 v43;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 223;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v18 = *((_DWORD *)this + 24);
      if (v18
        && (v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v18 - 1)), *(_WORD *)(v19 + 16) == 275))
      {
        *((_DWORD *)this + 24) = --v18;
      }
      else
      {
        v19 = 0;
      }
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
        v18 = *((_DWORD *)this + 24);
      }
      *((_QWORD *)this + 1) = v20 + 24;
      *(_WORD *)(v20 + 16) = 224;
      *(_BYTE *)(v20 + 18) = 0;
      if (!v18)
        return 0;
      v25 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v18 - 1));
      if (*((_WORD *)v25 + 8) == 276)
      {
        *((_DWORD *)this + 24) = v18 - 1;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, v25, this, a4, a5);
        v18 = *((_DWORD *)this + 24);
        if (!v18)
          return 0;
      }
      v26 = *(__int128 **)(*((_QWORD *)this + 11) + 8 * (v18 - 1));
      if (*((_WORD *)v26 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v18 - 1;
        v27 = *v26;
        v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v28;
        if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
        {
          v29 = 2 * *((_QWORD *)this + 4);
          if (v29 <= 0x20)
            v29 = 32;
          *((_QWORD *)this + 4) = v29;
          v30 = v29 + 8;
          v43 = v27;
          v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
          v27 = v43;
          *v31 = *((_QWORD *)this + 3);
          v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v31 + v30;
          *((_QWORD *)this + 3) = v31;
        }
        *((_QWORD *)this + 1) = v28 + 24;
        *(_WORD *)(v28 + 16) = 225;
        *(_BYTE *)(v28 + 18) = 3;
        *(_OWORD *)v28 = v27;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, (swift::Demangle::__runtime::Node *)v28, this, a4, a5);
        v18 = *((_DWORD *)this + 24);
        if (!v18)
          return 0;
      }
      v32 = v18 - 1;
      v33 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v32);
      if (*((_WORD *)v33 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v32;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, v33, this, a4, a5);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v20, this, v34, v35);
    }
    while (!v19);
    v36 = v6[1].u8[2];
    if (v36 == 5)
    {
      v38 = v6->u32[2];
      if ((_DWORD)v38)
      {
        v39 = (_QWORD *)(v6->i64[0] + 8 * v38 - 8);
        if ((unint64_t)v39 > v6->i64[0])
        {
          v40 = v6->i64[0] + 8;
          do
          {
            v41 = *(_QWORD *)(v40 - 8);
            *(_QWORD *)(v40 - 8) = *v39;
            *v39-- = v41;
            v42 = v40 >= (unint64_t)v39;
            v40 += 8;
          }
          while (!v42);
        }
      }
    }
    else if (v36 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 232;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v6, this, a4, a5);
  return v13;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = v5 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(unsigned __int16 **)(v8 + 8 * (v5 - 1));
  v10 = v9[8];
  if (v10 == 232)
  {
    v22 = 0;
    *((_DWORD *)this + 24) = v7;
    return v22;
  }
  if (v10 != 43)
    return 0;
  *((_DWORD *)this + 24) = v7;
  if (v5 == 1)
    return 0;
  v11 = v5 - 2;
  v12 = *(swift::Demangle::__runtime::Node **)(v8 + 8 * v11);
  if (*((_WORD *)v12 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v11;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 44;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v9, this, a4, a5);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, v18, v19);
  v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v22;
  if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
  {
    v23 = 2 * *((_QWORD *)this + 4);
    if (v23 <= 0x20)
      v23 = 32;
    *((_QWORD *)this + 4) = v23;
    v24 = v23 + 8;
    v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
    v26 = (char *)v25 + v24;
    *v25 = *((_QWORD *)this + 3);
    v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v25;
  }
  *((_QWORD *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 232;
  *(_BYTE *)(v22 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v22, (swift::Demangle::__runtime::Node *)v13, this, v20, v21);
  return v22;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleVariable(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  swift::Demangle::__runtime::Node *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v6 = swift::Demangle::__runtime::Demangler::demangleEntity(this, 254, a3, a4, a5);
  return swift::Demangle::__runtime::Demangler::demangleAccessor(this, v6, v7, v8, v9);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleValueWitness(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  int v23;
  unsigned int v24;
  swift::Demangle::__runtime::Node *v25;
  unsigned __int16 v27;

  v7 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 >= v7)
  {
    v8 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v8 = *(_BYTE *)(*((_QWORD *)this + 7) + v6++);
  }
  LOBYTE(v27) = v8;
  if (v6 >= v7)
  {
    v9 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v9 = *(_BYTE *)(*((_QWORD *)this + 7) + v6);
  }
  HIBYTE(v27) = v9;
  switch(v27)
  {
    case 0x6C61u:
      v10 = 0;
      break;
    case 0x6163u:
      v10 = 1;
      break;
    case 0x6174u:
      v10 = 2;
      break;
    case 0x6564u:
      v10 = 3;
      break;
    case 0x7878u:
      v10 = 4;
      break;
    case 0x5858u:
      v10 = 5;
      break;
    case 0x7858u:
      v10 = 6;
      break;
    case 0x5043u:
      v10 = 7;
      break;
    case 0x7043u:
      v10 = 8;
      break;
    case 0x7063u:
      v10 = 9;
      break;
    case 0x6B54u:
      v10 = 10;
      break;
    case 0x6B74u:
      v10 = 11;
      break;
    case 0x7270u:
      v10 = 12;
      break;
    case 0x4B54u:
      v10 = 13;
      break;
    case 0x6343u:
      v10 = 14;
      break;
    case 0x7454u:
      v10 = 15;
      break;
    case 0x5474u:
      v10 = 16;
      break;
    case 0x7378u:
      v10 = 17;
      break;
    case 0x6778u:
      v10 = 18;
      break;
    case 0x6775u:
      v10 = 19;
      break;
    case 0x7075u:
      v10 = 20;
      break;
    case 0x6975u:
      v10 = 21;
      break;
    case 0x7465u:
      v10 = 22;
      break;
    default:
      if (bswap32(v27) >> 16 != 29556)
        return 0;
      v10 = 23;
      break;
  }
  v11 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v11;
  if (!v11 || (v12 = *((_QWORD *)this + 2), v11 + 24 > v12))
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v12 = (unint64_t)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v12;
    *((_QWORD *)this + 3) = v15;
  }
  *(_WORD *)(v11 + 16) = 252;
  *(_BYTE *)(v11 + 18) = 0;
  v16 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v16;
  if (v16)
    v17 = v16 + 24 > v12;
  else
    v17 = 1;
  if (v17)
  {
    v18 = 2 * *((_QWORD *)this + 4);
    if (v18 <= 0x20)
      v18 = 32;
    *((_QWORD *)this + 4) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *v20 = *((_QWORD *)this + 3);
    v16 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v20 + v19;
    *((_QWORD *)this + 3) = v20;
  }
  *((_QWORD *)this + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = 102;
  *(_BYTE *)(v16 + 18) = 4;
  *(_QWORD *)v16 = v10;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, (swift::Demangle::__runtime::Node *)v16, this, a4, a5);
  v23 = *((_DWORD *)this + 24);
  if (!v23)
    return 0;
  v24 = v23 - 1;
  v25 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v24);
  if (*((_WORD *)v25 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v24;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, v25, this, v21, v22);
  return v11;
}

unint64_t swift::Demangle::__runtime::Demangler::getDependentGenericParamType(swift::Demangle::__runtime::Demangler *this, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  if (((a3 | a2) & 0x80000000) != 0)
    return 0;
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (!v8 || (v9 = *((_QWORD *)this + 2), v8 + 24 > v9))
  {
    v10 = 2 * *((_QWORD *)this + 4);
    if (v10 <= 0x20)
      v10 = 32;
    *((_QWORD *)this + 4) = v10;
    v11 = v10 + 8;
    v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    v9 = (unint64_t)v12 + v11;
    *v12 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v9;
    *((_QWORD *)this + 3) = v12;
  }
  *(_WORD *)(v8 + 16) = 38;
  *(_BYTE *)(v8 + 18) = 0;
  v13 = a2;
  v14 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v14;
  if (v14)
    v15 = v14 + 24 > v9;
  else
    v15 = 1;
  if (v15)
  {
    v16 = 2 * *((_QWORD *)this + 4);
    if (v16 <= 0x20)
      v16 = 32;
    *((_QWORD *)this + 4) = v16;
    v17 = v16 + 8;
    v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
    *v18 = *((_QWORD *)this + 3);
    v14 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v18 + v17;
    *((_QWORD *)this + 3) = v18;
  }
  *((_QWORD *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 102;
  *(_BYTE *)(v14 + 18) = 4;
  *(_QWORD *)v14 = v13;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v14, this, a4, a5);
  v21 = a3;
  v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v22;
  if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
  {
    v23 = 2 * *((_QWORD *)this + 4);
    if (v23 <= 0x20)
      v23 = 32;
    *((_QWORD *)this + 4) = v23;
    v24 = v23 + 8;
    v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
    *v25 = *((_QWORD *)this + 3);
    v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v25 + v24;
    *((_QWORD *)this + 3) = v25;
  }
  *((_QWORD *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 102;
  *(_BYTE *)(v22 + 18) = 4;
  *(_QWORD *)v22 = v21;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, (swift::Demangle::__runtime::Node *)v22, this, v19, v20);
  return v8;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleNatural(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 4294966296;
  v3 = *((_QWORD *)this + 7);
  if (*(unsigned __int8 *)(v3 + v1) - 48 > 9)
    return 4294966296;
  v4 = 0;
  while (1)
  {
    v5 = *(unsigned __int8 *)(v3 + v1);
    if ((v5 - 48) > 9)
      break;
    v6 = (v5 + 10 * v4 - 48);
    if ((int)v6 < (int)v4)
      return 4294966296;
    *((_QWORD *)this + 9) = ++v1;
    v4 = v6;
    if (v2 == v1)
      return v6;
  }
  return v4;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 < v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = *(unsigned __int8 *)(v3 + v1);
    if (v4 == 95)
    {
      *((_QWORD *)this + 9) = v1 + 1;
      return 0;
    }
    if ((v4 - 48) <= 9)
    {
      v6 = 0;
      while (1)
      {
        v7 = *(unsigned __int8 *)(v3 + v1);
        if ((v7 - 48) > 9)
          break;
        v8 = v7 + 10 * v6 - 48;
        if (v8 < v6)
          return 4294966296;
        *((_QWORD *)this + 9) = ++v1;
        v6 = v8;
        if (v2 == v1)
        {
          v1 = v2;
          v6 = v8;
          break;
        }
      }
      v9 = 4294966296;
      if (v6 < 0 || v1 >= v2)
        return v9;
      if (*(_BYTE *)(v3 + v1) == 95)
      {
        *((_QWORD *)this + 9) = v1 + 1;
        return (v6 + 1);
      }
    }
  }
  return 4294966296;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexAsNode(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 0;
  v4 = *((_QWORD *)this + 7);
  v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    v6 = 0;
    *((_QWORD *)this + 9) = v1 + 1;
    goto LABEL_4;
  }
  if ((v5 - 48) > 9)
    return 0;
  v11 = 0;
  while (1)
  {
    v12 = *(unsigned __int8 *)(v4 + v1);
    if ((v12 - 48) > 9)
      break;
    v13 = v12 + 10 * v11 - 48;
    if (v13 >= v11)
    {
      *((_QWORD *)this + 9) = ++v1;
      v11 = v13;
      if (v2 != v1)
        continue;
    }
    return 0;
  }
  result = 0;
  if ((v11 & 0x80000000) == 0 && v1 < v2 && v12 == 95)
  {
    *((_QWORD *)this + 9) = v1 + 1;
    v6 = (v11 + 1);
LABEL_4:
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (!result || result + 24 > *((_QWORD *)this + 2))
    {
      v8 = 2 * *((_QWORD *)this + 4);
      if (v8 <= 0x20)
        v8 = 32;
      *((_QWORD *)this + 4) = v8;
      v9 = v8 + 8;
      v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      *v10 = *((_QWORD *)this + 3);
      result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v10 + v9;
      *((_QWORD *)this + 3) = v10;
    }
    *((_QWORD *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 161;
    *(_BYTE *)(result + 18) = 4;
    *(_QWORD *)result = v6;
  }
  return result;
}

uint64_t swift::Demangle::__runtime::Demangler::pushMultiSubstitutions(swift::Demangle::__runtime::Demangler *this, int a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v7;

  v3 = 0;
  if (a2 <= 2048 && *((unsigned int *)this + 28) > a3)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * a3);
    if (a2 >= 2)
    {
      v5 = a2 + 1;
      do
      {
        v7 = v3;
        swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 11, &v7, this);
        --v5;
      }
      while (v5 > 2);
    }
  }
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::createSwiftType(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, const char *a3)
{
  uint64_t v6;
  const char *v7;
  swift::Demangle::__runtime::Node *Node;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;

  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 153, "Swift", 5uLL);
  v9 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v9;
  if (!v9 || v9 + 24 > *((_QWORD *)a1 + 2))
  {
    v10 = 2 * *((_QWORD *)a1 + 4);
    if (v10 <= 0x20)
      v10 = 32;
    *((_QWORD *)a1 + 4) = v10;
    v11 = v10 + 8;
    v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    v13 = (char *)v12 + v11;
    *v12 = *((_QWORD *)a1 + 3);
    v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v13;
    *((_QWORD *)a1 + 3) = v12;
  }
  *((_QWORD *)a1 + 1) = v9 + 24;
  if (a3)
    v14 = strlen(a3);
  else
    v14 = 0;
  *(_WORD *)(v9 + 16) = 101;
  *(_BYTE *)(v9 + 18) = 3;
  *(_QWORD *)v9 = a3;
  *(_QWORD *)(v9 + 8) = v14;
  if (!Node)
    return 0;
  v15 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v15;
  if (!v15 || v15 + 24 > *((_QWORD *)a1 + 2))
  {
    v16 = 2 * *((_QWORD *)a1 + 4);
    if (v16 <= 0x20)
      v16 = 32;
    *((_QWORD *)a1 + 4) = v16;
    v17 = v16 + 8;
    v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
    v19 = (char *)v18 + v17;
    *v18 = *((_QWORD *)a1 + 3);
    v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v19;
    *((_QWORD *)a1 + 3) = v18;
  }
  *((_QWORD *)a1 + 1) = v15 + 24;
  *(_WORD *)(v15 + 16) = a2;
  *(_BYTE *)(v15 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v15, Node, a1, v6, v7);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v15, (swift::Demangle::__runtime::Node *)v9, a1, v20, v21);
  v24 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v24;
  if (!v24 || v24 + 24 > *((_QWORD *)a1 + 2))
  {
    v25 = 2 * *((_QWORD *)a1 + 4);
    if (v25 <= 0x20)
      v25 = 32;
    *((_QWORD *)a1 + 4) = v25;
    v26 = v25 + 8;
    v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
    v28 = (char *)v27 + v26;
    *v27 = *((_QWORD *)a1 + 3);
    v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v28;
    *((_QWORD *)a1 + 3) = v27;
  }
  *((_QWORD *)a1 + 1) = v24 + 24;
  *(_WORD *)(v24 + 16) = 232;
  *(_BYTE *)(v24 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v24, (swift::Demangle::__runtime::Node *)v15, a1, v22, v23);
  return v24;
}

unint64_t swift::Demangle::__runtime::Demangler::createStandardSubstitution(swift::Demangle::__runtime::Demangler *this, int a2, int a3)
{
  const char *v3;
  __int16 v4;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  if (a2 == 65 && a3 != 1)
  {
    v3 = "AutoreleasingUnsafeMutablePointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 97 && (a3 & 1) == 0)
  {
    v3 = "Array";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 98 && (a3 & 1) == 0)
  {
    v3 = "Bool";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 68 && (a3 & 1) == 0)
  {
    v3 = "Dictionary";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 100 && (a3 & 1) == 0)
  {
    v3 = "Double";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v6 = a3;
  if (a2 == 102)
    v7 = a3;
  else
    v7 = 1;
  if ((v7 & 1) == 0)
  {
    v3 = "Float";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 104)
    v6 = 1;
  if ((v6 & 1) == 0)
  {
    v3 = "Set";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v8 = a3;
  if (a2 == 73)
    v9 = a3;
  else
    v9 = 1;
  if ((v9 & 1) == 0)
  {
    v3 = "DefaultIndices";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 105)
    v8 = 1;
  if ((v8 & 1) == 0)
  {
    v3 = "Int";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v10 = a3;
  if (a2 != 74)
    v10 = 1;
  if ((v10 & 1) == 0)
  {
    v3 = "Character";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 78 && (a3 & 1) == 0)
  {
    v3 = "ClosedRange";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 110 && (a3 & 1) == 0)
  {
    v3 = "Range";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 79 && (a3 & 1) == 0)
  {
    v3 = "ObjectIdentifier";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v11 = a3;
  if (a2 != 80)
    v11 = 1;
  if ((v11 & 1) == 0)
  {
    v3 = "UnsafePointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 112 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutablePointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 82 && (a3 & 1) == 0)
  {
    v3 = "UnsafeBufferPointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 114 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutableBufferPointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v12 = a3;
  if (a2 == 83)
    v13 = a3;
  else
    v13 = 1;
  if ((v13 & 1) == 0)
  {
    v3 = "String";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 115)
    v12 = 1;
  if ((v12 & 1) == 0)
  {
    v3 = "Substring";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 117 && (a3 & 1) == 0)
  {
    v3 = "UInt";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 86 && (a3 & 1) == 0)
  {
    v3 = "UnsafeRawPointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 118 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutableRawPointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 87 && (a3 & 1) == 0)
  {
    v3 = "UnsafeRawBufferPointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 119 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutableRawBufferPointer";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 113 && (a3 & 1) == 0)
  {
    v3 = "Optional";
    v4 = 61;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 66 && (a3 & 1) == 0)
  {
    v3 = "BinaryFloatingPoint";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v14 = a3;
  if (a2 == 69)
    v15 = a3;
  else
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    v3 = "Encodable";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 101)
    v14 = 1;
  if ((v14 & 1) == 0)
  {
    v3 = "Decodable";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v16 = a3;
  if (a2 == 70)
    v17 = a3;
  else
    v17 = 1;
  if ((v17 & 1) == 0)
  {
    v3 = "FloatingPoint";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 71)
    v16 = 1;
  if ((v16 & 1) == 0)
  {
    v3 = "RandomNumberGenerator";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 72 && (a3 & 1) == 0)
  {
    v3 = "Hashable";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 106 && (a3 & 1) == 0)
  {
    v3 = "Numeric";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 75 && (a3 & 1) == 0)
  {
    v3 = "BidirectionalCollection";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 107 && (a3 & 1) == 0)
  {
    v3 = "RandomAccessCollection";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 76 && (a3 & 1) == 0)
  {
    v3 = "Comparable";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 108 && (a3 & 1) == 0)
  {
    v3 = "Collection";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v18 = a3;
  if (a2 != 77)
    v18 = 1;
  if ((v18 & 1) == 0)
  {
    v3 = "MutableCollection";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 109 && (a3 & 1) == 0)
  {
    v3 = "RangeReplaceableCollection";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 81 && (a3 & 1) == 0)
  {
    v3 = "Equatable";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  v19 = a3;
  if (a2 == 84)
    v20 = a3;
  else
    v20 = 1;
  if ((v20 & 1) == 0)
  {
    v3 = "Sequence";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 116)
    v19 = 1;
  if ((v19 & 1) == 0)
  {
    v3 = "IteratorProtocol";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 85 && (a3 & 1) == 0)
  {
    v3 = "UnsignedInteger";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 88 && (a3 & 1) == 0)
  {
    v3 = "RangeExpression";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 120 && (a3 & 1) == 0)
  {
    v3 = "Strideable";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 89 && (a3 & 1) == 0)
  {
    v3 = "RawRepresentable";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 121 && (a3 & 1) == 0)
  {
    v3 = "StringProtocol";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 90 && (a3 & 1) == 0)
  {
    v3 = "SignedInteger";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 122 && (a3 & 1) == 0)
  {
    v3 = "BinaryInteger";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 65 && a3)
  {
    v3 = "Actor";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 67 && a3)
  {
    v3 = "CheckedContinuation";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 99 && a3)
  {
    v3 = "UnsafeContinuation";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 69 && a3)
  {
    v3 = "CancellationError";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 101 && a3)
  {
    v3 = "UnownedSerialExecutor";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 70 && a3)
  {
    v3 = "Executor";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 102 && a3)
  {
    v3 = "SerialExecutor";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 71 && a3)
  {
    v3 = "TaskGroup";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 103 && a3)
  {
    v3 = "ThrowingTaskGroup";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 104 && a3)
  {
    v3 = "TaskExecutor";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 73 && a3)
  {
    v3 = "AsyncIteratorProtocol";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 105 && a3)
  {
    v3 = "AsyncSequence";
    v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 74 && a3)
  {
    v3 = "UnownedJob";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 77 && a3)
  {
    v3 = "MainActor";
    v4 = 24;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 80 && a3)
  {
    v3 = "TaskPriority";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 83 && a3)
  {
    v3 = "AsyncStream";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 115 && a3)
  {
    v3 = "AsyncThrowingStream";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 84 && a3)
  {
    v3 = "Task";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 116 && a3)
  {
    v3 = "UnsafeCurrentTask";
    v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  return 0;
}

unsigned int *swift::Demangle::__runtime::Vector<char>::push_back(unsigned int *result, char *a2, _QWORD *a3)
{
  const void **v4;
  unsigned int v5;
  size_t v6;
  char *v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char v17;

  v4 = (const void **)result;
  v5 = result[2];
  v6 = result[3];
  v7 = *(char **)result;
  if (v5 >= v6)
  {
    v9 = (char *)a3[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = a3[2];
      if (v11 <= v10)
      {
        a3[1] = v11;
        LODWORD(v12) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      v10 = a3[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      v14 = 2 * a3[4];
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      a3[4] = v14;
      v15 = v14 + 8;
      result = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)result + v15;
      *(_QWORD *)result = a3[3];
      v9 = (char *)(result + 2);
      a3[2] = v16;
      a3[3] = result;
    }
    a3[1] = &v9[v13];
    if ((_DWORD)v6)
      result = (unsigned int *)memcpy(v9, *v4, v6);
    *v4 = v9;
    v7 = v9;
    v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  v17 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  v7[v5] = v17;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popModule(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v6 = v5 - 1;
  v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v6);
  v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 != 153)
  {
    if (v8 == 101)
    {
      *((_DWORD *)this + 24) = v6;
      return swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v7, 153, a4, a5);
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v6;
  return v7;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::popContext(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = v5 - 1;
  v8 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v5 - 1));
  v9 = *((unsigned __int16 *)v8 + 8);
  if (v9 == 101)
  {
    *((_DWORD *)this + 24) = v7;
    v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v8, 153, a4, a5);
    if (v8)
      return v8;
    v5 = *((_DWORD *)this + 24);
    if (!v5)
      return 0;
  }
  else if (v9 == 153)
  {
    *((_DWORD *)this + 24) = v7;
    return v8;
  }
  v10 = v5 - 1;
  v8 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v5 - 1));
  v11 = *((unsigned __int16 *)v8 + 8);
  if (v11 != 232)
  {
    if (swift::Demangle::__runtime::isContext(v11))
    {
      *((_DWORD *)this + 24) = v10;
      return v8;
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v10;
  v12 = *((unsigned __int8 *)v8 + 18);
  if (v12 == 1)
    goto LABEL_12;
  if (v12 != 5 || *((_DWORD *)v8 + 2) != 1)
    return 0;
  v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
  v8 = *(swift::Demangle::__runtime::Node **)v8;
  if (!swift::Demangle::__runtime::isContext(*((unsigned __int16 *)v8 + 8)))
    return 0;
  return v8;
}

uint64_t *swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(swift::Demangle::__runtime::Demangler *this)
{
  int v1;
  int v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t *result;
  unsigned int v7;
  BOOL v8;
  BOOL v9;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v2 = v1 - 1;
  v3 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v3 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v2;
  v4 = *((unsigned __int8 *)v3 + 18);
  if (v4 != 1)
  {
    if (v4 != 5 || *((_DWORD *)v3 + 2) != 1)
      return 0;
    v3 = (uint64_t *)*v3;
  }
  v5 = (uint64_t *)*v3;
  if (!v5)
    return 0;
  result = 0;
  v7 = *((unsigned __int16 *)v5 + 8);
  if (v7 > 0xB3)
  {
    v8 = v7 - 180 > 0x36 || ((1 << (v7 + 76)) & 0x60008000000003) == 0;
    if (v8 && v7 != 347)
      return result;
    return v5;
  }
  v9 = v7 > 0x3D || ((1 << v7) & 0x2000000001200000) == 0;
  if (!v9 || v7 == 167)
    return v5;
  return result;
}

uint64_t `anonymous namespace'::isAnyGeneric(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 179)
  {
    if ((a1 > 0x3D || ((1 << a1) & 0x2000000001200000) == 0) && a1 != 167)
      return 0;
  }
  else if (((a1 - 180) > 0x36 || ((1 << (a1 + 76)) & 0x60008000000003) == 0)
         && a1 != 347)
  {
    return 0;
  }
  return result;
}

swift::Demangle::__runtime::Node *setParentForOpaqueReturnTypeNodes(swift::Demangle::__runtime::Demangler *a1, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, uint64_t a4, const char *a5)
{
  swift::Demangle::__runtime::Node *result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  swift::Demangle::__runtime::Node *v20;
  unint64_t v21;
  unsigned int v22;
  swift::Demangle::__runtime::Node *v23;

  result = 0;
  if (a2 && a3)
  {
    v9 = *((unsigned __int16 *)a3 + 8);
    if (v9 <= 0xFD)
    {
      if (v9 != 76 && v9 != 220)
        goto LABEL_14;
      return a2;
    }
    if (v9 == 254)
      return a2;
    if (v9 != 308)
    {
LABEL_14:
      v14 = *((unsigned __int8 *)a3 + 18);
      switch((_DWORD)v14)
      {
        case 1:
LABEL_31:
          v19 = 0;
          while (1)
          {
            v21 = *((unsigned __int8 *)a3 + 18);
            v22 = v21 - 1;
            if ((_DWORD)v21 == 1)
              goto LABEL_38;
            if ((_DWORD)v21 != 5)
              break;
            if (*((unsigned int *)a3 + 2) > v19)
            {
LABEL_41:
              v23 = a3;
              if (v22 >= 2)
                v23 = *(swift::Demangle::__runtime::Node **)a3;
              v20 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v23 + v19);
              goto LABEL_33;
            }
LABEL_32:
            v20 = 0;
LABEL_33:
            setParentForOpaqueReturnTypeNodes(a1, a2, v20);
            if (v14 == ++v19)
              return a2;
          }
          if ((_DWORD)v21 != 2)
            goto LABEL_32;
          v21 = 2;
LABEL_38:
          if (v21 > v19)
            goto LABEL_41;
          goto LABEL_32;
        case 5:
          v14 = *((unsigned int *)a3 + 2);
          if ((_DWORD)v14)
            goto LABEL_31;
          break;
        case 2:
          v14 = 2;
          goto LABEL_31;
      }
      return a2;
    }
    v10 = *((unsigned __int8 *)a3 + 18);
    switch(v10)
    {
      case 1:
        v12 = 0;
        break;
      case 2:
        v12 = 1;
        break;
      case 5:
        v11 = *((unsigned int *)a3 + 2);
        if (!(_DWORD)v11)
          goto LABEL_22;
        v12 = v11 - 1;
        v13 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_21:
        if (*(_WORD *)(*((_QWORD *)v13 + v12) + 16) == 342)
          return a2;
LABEL_22:
        v15 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 1) = v15;
        if (!v15 || v15 + 24 > *((_QWORD *)a1 + 2))
        {
          v16 = 2 * *((_QWORD *)a1 + 4);
          if (v16 <= 0x20)
            v16 = 32;
          *((_QWORD *)a1 + 4) = v16;
          v17 = v16 + 8;
          v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
          *v18 = *((_QWORD *)a1 + 3);
          v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)a1 + 2) = (char *)v18 + v17;
          *((_QWORD *)a1 + 3) = v18;
        }
        *((_QWORD *)a1 + 1) = v15 + 24;
        *(_WORD *)(v15 + 16) = 342;
        *(_BYTE *)(v15 + 18) = 4;
        *(_QWORD *)v15 = a2;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)a3, (swift::Demangle::__runtime::Node *)v15, a1, a4, a5);
        return a2;
      default:
        goto LABEL_22;
    }
    v13 = a3;
    goto LABEL_21;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleClangType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  size_t v8;
  unint64_t result;
  const void *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 0;
  v4 = *((_QWORD *)this + 7);
  if (*(unsigned __int8 *)(v4 + v1) - 48 > 9)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v4 + v1);
    if ((v6 - 48) > 9)
      break;
    v7 = v6 + 10 * v5 - 48;
    if (v7 < (int)v5)
      return 0;
    *((_QWORD *)this + 9) = ++v1;
    v5 = v7;
    if (v2 == v1)
    {
      v1 = v2;
      v5 = v7;
      break;
    }
  }
  if ((int)v5 < 1)
    return 0;
  v8 = v5;
  if (v1 + v5 > v2)
    return 0;
  v10 = (const void *)(v4 + v1);
  v11 = (char *)*((_QWORD *)this + 1);
  if (v11)
  {
    if (v5 <= 4uLL)
      v12 = 4;
    else
      v12 = v5;
    if ((unint64_t)&v11[v12] <= *((_QWORD *)this + 2))
    {
LABEL_24:
      v17 = &v11[v12];
      goto LABEL_26;
    }
LABEL_21:
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= v12 + 1)
      v13 = v12 + 1;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v11 = (char *)(v15 + 1);
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
    goto LABEL_24;
  }
  if ((unint64_t)v5 > *((_QWORD *)this + 2))
  {
    if (v5 <= 4uLL)
      v12 = 4;
    else
      v12 = v5;
    goto LABEL_21;
  }
  v11 = 0;
  v17 = (char *)v5;
LABEL_26:
  *((_QWORD *)this + 1) = v17;
  memcpy(v11, v10, v8);
  *((_QWORD *)this + 9) += v8;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v18 = 2 * *((_QWORD *)this + 4);
    if (v18 <= 0x20)
      v18 = 32;
    *((_QWORD *)this + 4) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *v20 = *((_QWORD *)this + 3);
    result = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v20 + v19;
    *((_QWORD *)this + 3) = v20;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 23;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = v11;
  *(_QWORD *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParams(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unsigned int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;

  v5 = *((_DWORD *)a1 + 24);
  if (!v5)
    return 0;
  v8 = v5 - 1;
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 8 * v8);
  v10 = *(unsigned __int16 *)(v9 + 16);
  if (v10 != 232)
  {
    if (v10 == 274)
    {
      *((_DWORD *)a1 + 24) = v8;
      v11 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v11;
      if (!v11 || (v12 = *((_QWORD *)a1 + 2), v11 + 24 > v12))
      {
        v13 = 2 * *((_QWORD *)a1 + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)a1 + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        v12 = (unint64_t)v15 + v14;
        *v15 = *((_QWORD *)a1 + 3);
        v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v15 + v14;
        *((_QWORD *)a1 + 3) = v15;
      }
      *(_WORD *)(v11 + 16) = 223;
      *(_BYTE *)(v11 + 18) = 0;
      v9 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v9;
      if (v9)
        v16 = v9 + 24 > v12;
      else
        v16 = 1;
      if (v16)
      {
        v17 = 2 * *((_QWORD *)a1 + 4);
        if (v17 <= 0x20)
          v17 = 32;
        *((_QWORD *)a1 + 4) = v17;
        v18 = v17 + 8;
        v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        v20 = (char *)v19 + v18;
        *v19 = *((_QWORD *)a1 + 3);
        v9 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = v20;
        *((_QWORD *)a1 + 3) = v19;
      }
      *((_QWORD *)a1 + 1) = v9 + 24;
      *(_WORD *)(v9 + 16) = 232;
      *(_BYTE *)(v9 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, (swift::Demangle::__runtime::Node *)v11, a1, a4, a5);
      goto LABEL_20;
    }
    return 0;
  }
  *((_DWORD *)a1 + 24) = v8;
LABEL_20:
  v21 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v21;
  if (!v21 || v21 + 24 > *((_QWORD *)a1 + 2))
  {
    v22 = 2 * *((_QWORD *)a1 + 4);
    if (v22 <= 0x20)
      v22 = 32;
    *((_QWORD *)a1 + 4) = v22;
    v23 = v22 + 8;
    v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    v25 = (char *)v24 + v23;
    *v24 = *((_QWORD *)a1 + 3);
    v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v25;
    *((_QWORD *)a1 + 3) = v24;
  }
  *((_QWORD *)a1 + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = a2;
  *(_BYTE *)(v21 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v21, (swift::Demangle::__runtime::Node *)v9, a1, a4, a5);
  return v21;
}

unint64_t swift::Demangle::__runtime::Demangler::popPack(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  swift::Demangle::__runtime::Node *v23;
  int v24;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 226;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v18 = *((_DWORD *)this + 24);
      if (!v18)
        return 0;
      v19 = v18 - 1;
      v20 = *((_QWORD *)this + 11);
      v21 = *(unsigned __int16 *)(*(_QWORD *)(v20 + 8 * (v18 - 1)) + 16);
      if (v21 == 275)
      {
        *((_DWORD *)this + 24) = v19;
        --v18;
        if (!v19)
          return 0;
      }
      v22 = v18 - 1;
      v23 = *(swift::Demangle::__runtime::Node **)(v20 + 8 * v22);
      if (*((_WORD *)v23 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v22;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v23, this, a4, a5);
    }
    while (v21 != 275);
    v24 = v6[1].u8[2];
    if (v24 == 5)
    {
      v26 = v6->u32[2];
      if ((_DWORD)v26)
      {
        v27 = (_QWORD *)(v6->i64[0] + 8 * v26 - 8);
        if ((unint64_t)v27 > v6->i64[0])
        {
          v28 = v6->i64[0] + 8;
          do
          {
            v29 = *(_QWORD *)(v28 - 8);
            *(_QWORD *)(v28 - 8) = *v27;
            *v27-- = v29;
            v30 = v28 >= (unint64_t)v27;
            v28 += 8;
          }
          while (!v30);
        }
      }
    }
    else if (v24 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 232;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v6, this, a4, a5);
  return v13;
}

unint64_t swift::Demangle::__runtime::Demangler::popSILPack(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  int v7;
  int8x16_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  swift::Demangle::__runtime::Node *v28;
  int v29;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;

  v5 = *((_QWORD *)this + 9);
  if (v5 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v5 + 1;
  v7 = *(char *)(*((_QWORD *)this + 7) + v5);
  if (v7 == 105)
  {
    v8 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 1) = v8;
    if (v8 && (unint64_t)&v8[1].u64[1] <= *((_QWORD *)this + 2))
    {
      v13 = 228;
      goto LABEL_15;
    }
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v11 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *v11 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    v12 = (char *)v11 + v15;
    v13 = 228;
    goto LABEL_14;
  }
  if (v7 != 100)
    return 0;
  v8 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v8;
  if (v8 && (unint64_t)&v8[1].u64[1] <= *((_QWORD *)this + 2))
  {
    v13 = 227;
    goto LABEL_15;
  }
  v9 = 2 * *((_QWORD *)this + 4);
  if (v9 <= 0x20)
    v9 = 32;
  *((_QWORD *)this + 4) = v9;
  v10 = v9 + 8;
  v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
  *v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v11;
  v12 = (char *)v11 + v10;
  v13 = 227;
LABEL_14:
  v8 = (int8x16_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 2) = v12;
LABEL_15:
  *((_QWORD *)this + 1) = (char *)v8 + 24;
  v8[1].i16[0] = v13;
  v8[1].i8[2] = 0;
  v16 = *((_DWORD *)this + 24);
  if (!v16 || (v17 = v16 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v17) + 16) != 274))
  {
    while (1)
    {
      v23 = *((_DWORD *)this + 24);
      if (!v23)
        return 0;
      v24 = v23 - 1;
      v25 = *((_QWORD *)this + 11);
      v26 = *(unsigned __int16 *)(*(_QWORD *)(v25 + 8 * (v23 - 1)) + 16);
      if (v26 == 275)
      {
        *((_DWORD *)this + 24) = v24;
        --v23;
        if (!v24)
          return 0;
      }
      v27 = v23 - 1;
      v28 = *(swift::Demangle::__runtime::Node **)(v25 + 8 * v27);
      if (*((_WORD *)v28 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v27;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v8, v28, this, a4, a5);
      if (v26 == 275)
      {
        v29 = v8[1].u8[2];
        if (v29 == 5)
        {
          v31 = v8->u32[2];
          if ((_DWORD)v31)
          {
            v32 = (_QWORD *)(v8->i64[0] + 8 * v31 - 8);
            if ((unint64_t)v32 > v8->i64[0])
            {
              v33 = v8->i64[0] + 8;
              do
              {
                v34 = *(_QWORD *)(v33 - 8);
                *(_QWORD *)(v33 - 8) = *v32;
                *v32-- = v34;
                v35 = v33 >= (unint64_t)v32;
                v33 += 8;
              }
              while (!v35);
            }
          }
        }
        else if (v29 == 2)
        {
          *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        goto LABEL_18;
      }
    }
  }
  *((_DWORD *)this + 24) = v17;
LABEL_18:
  v18 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v18;
  if (!v18 || v18 + 24 > *((_QWORD *)this + 2))
  {
    v19 = 2 * *((_QWORD *)this + 4);
    if (v19 <= 0x20)
      v19 = 32;
    *((_QWORD *)this + 4) = v19;
    v20 = v19 + 8;
    v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    v22 = (char *)v21 + v20;
    *v21 = *((_QWORD *)this + 3);
    v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v22;
    *((_QWORD *)this + 3) = v21;
  }
  *((_QWORD *)this + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 232;
  *(_BYTE *)(v18 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, (swift::Demangle::__runtime::Node *)v8, this, a4, a5);
  return v18;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popTypeList(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  swift::Demangle::__runtime::Node *v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 235;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v13 = *((_DWORD *)this + 24);
      if (!v13)
        return 0;
      v14 = v13 - 1;
      v15 = *((_QWORD *)this + 11);
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 8 * (v13 - 1)) + 16);
      if (v16 == 275)
      {
        *((_DWORD *)this + 24) = v14;
        --v13;
        if (!v14)
          return 0;
      }
      v17 = v13 - 1;
      v18 = *(swift::Demangle::__runtime::Node **)(v15 + 8 * v17);
      if (*((_WORD *)v18 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v17;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v18, this, a4, a5);
    }
    while (v16 != 275);
    v19 = v6[1].u8[2];
    if (v19 == 5)
    {
      v21 = v6->u32[2];
      if ((_DWORD)v21)
      {
        v22 = (_QWORD *)(v6->i64[0] + 8 * v21 - 8);
        if ((unint64_t)v22 > v6->i64[0])
        {
          v23 = v6->i64[0] + 8;
          do
          {
            v24 = *(_QWORD *)(v23 - 8);
            *(_QWORD *)(v23 - 8) = *v22;
            *v22-- = v24;
            v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  return v6;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v23;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 2;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v13 = *((_DWORD *)this + 24);
      if (!v13)
        return 0;
      v14 = v13 - 1;
      v15 = *((_QWORD *)this + 11);
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 8 * (v13 - 1)) + 16);
      if (v16 == 275)
      {
        *((_DWORD *)this + 24) = v14;
        --v13;
        if (!v14)
          return 0;
      }
      v17 = v13 - 1;
      v18 = *(unsigned __int16 **)(v15 + 8 * v17);
      v19 = v18[8];
      v20 = v19 > 0x31;
      v21 = (1 << v19) & 0x380000C000000;
      if (v20 || v21 == 0)
        return 0;
      *((_DWORD *)this + 24) = v17;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v18, this, a4, a5);
    }
    while (v16 != 275);
    v23 = v6[1].u8[2];
    if (v23 == 5)
    {
      v25 = v6->u32[2];
      if ((_DWORD)v25)
      {
        v26 = (_QWORD *)(v6->i64[0] + 8 * v25 - 8);
        if ((unint64_t)v26 > v6->i64[0])
        {
          v27 = v6->i64[0] + 8;
          do
          {
            v28 = *(_QWORD *)(v27 - 8);
            *(_QWORD *)(v27 - 8) = *v26;
            *v26-- = v28;
            v29 = v27 >= (unint64_t)v26;
            v27 += 8;
          }
          while (!v29);
        }
      }
    }
    else if (v23 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  return v6;
}

uint64_t swift::Demangle::__runtime::Demangler::popAnyProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  int v1;
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  result = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v3);
  v5 = *(unsigned __int16 *)(result + 16);
  v6 = v5 > 0x31;
  v7 = (1 << v5) & 0x380000C000000;
  if (v6 || v7 == 0)
    return 0;
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  swift::Demangle::__runtime::Node *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  const char *v20;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
    goto LABEL_5;
  v7 = v6 - 1;
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v7);
  v9 = *(unsigned __int16 *)(v8 + 16);
  if (v9 == 153)
  {
    *((_DWORD *)this + 24) = v7;
    goto LABEL_7;
  }
  if (v9 == 101)
  {
    *((_DWORD *)this + 24) = v7;
    v8 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v8, 153, a4, a5);
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
LABEL_7:
  v10 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
  v13 = 0;
  if (v8)
  {
    v14 = (swift::Demangle::__runtime::Node *)v10;
    if (v10)
    {
      v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v13;
      if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
      {
        v15 = 2 * *((_QWORD *)this + 4);
        if (v15 <= 0x20)
          v15 = 32;
        *((_QWORD *)this + 4) = v15;
        v16 = v15 + 8;
        v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        v18 = (char *)v17 + v16;
        *v17 = *((_QWORD *)this + 3);
        v13 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v18;
        *((_QWORD *)this + 3) = v17;
      }
      *((_QWORD *)this + 1) = v13 + 24;
      *(_WORD *)(v13 + 16) = 185;
      *(_BYTE *)(v13 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v14, this, v11, v12);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v8, this, v19, v20);
    }
  }
  return v13;
}

uint64_t swift::Demangle::__runtime::Demangler::popDependentProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  int v1;
  unsigned int v3;
  uint64_t result;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  result = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v3);
  if (*(unsigned __int16 *)(result + 16) - 47 > 2)
    return 0;
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  unint64_t result;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 0;
  v4 = *((_QWORD *)this + 7);
  v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    result = 0;
    *((_QWORD *)this + 9) = v1 + 1;
    return result;
  }
  if ((v5 - 48) > 9)
    return 0;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v4 + v1);
    if ((v8 - 48) > 9)
      break;
    v9 = v8 + 10 * v7 - 48;
    if (v9 >= v7)
    {
      *((_QWORD *)this + 9) = ++v1;
      v7 = v9;
      if (v2 != v1)
        continue;
    }
    return 0;
  }
  result = 0;
  if ((v7 & 0x80000000) == 0 && v1 < v2 && v8 == 95)
  {
    *((_QWORD *)this + 9) = v1 + 1;
    if (v7)
    {
      v10 = (v7 - 1);
      result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = result;
      if (!result || result + 24 > *((_QWORD *)this + 2))
      {
        v11 = 2 * *((_QWORD *)this + 4);
        if (v11 <= 0x20)
          v11 = 32;
        *((_QWORD *)this + 4) = v11;
        v12 = v11 + 8;
        v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *v13 = *((_QWORD *)this + 3);
        result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v13 + v12;
        *((_QWORD *)this + 3) = v13;
      }
      *((_QWORD *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 102;
      *(_BYTE *)(result + 18) = 4;
      *(_QWORD *)result = v10;
    }
    else
    {
      result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = result;
      if (!result || result + 24 > *((_QWORD *)this + 2))
      {
        v14 = 2 * *((_QWORD *)this + 4);
        if (v14 <= 0x20)
          v14 = 32;
        *((_QWORD *)this + 4) = v14;
        v15 = v14 + 8;
        v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        *v16 = *((_QWORD *)this + 3);
        result = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v16 + v15;
        *((_QWORD *)this + 3) = v16;
      }
      *((_QWORD *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 246;
      *(_BYTE *)(result + 18) = 0;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  unsigned int v10;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;

  v6 = swift::Demangle::__runtime::Demangler::popProtocol(this, a2, a3, a4, a5);
  v9 = *((_DWORD *)this + 24);
  if (!v9)
    return 0;
  v10 = v9 - 1;
  v11 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v10);
  if (*((_WORD *)v11 + 8) != 232)
    return 0;
  v12 = (swift::Demangle::__runtime::Node *)v6;
  *((_DWORD *)this + 24) = v10;
  if (!v6)
    return 0;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 34;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v11, this, v7, v8);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, v18, v19);
  return v13;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popRetroactiveConformances(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unsigned int v12;
  swift::Demangle::__runtime::Node *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = 0;
  while (1)
  {
    v12 = v5 - 1;
    v13 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v12);
    if (*((_WORD *)v13 + 8) != 206)
      break;
    *((_DWORD *)this + 24) = v12;
    if (!v7)
    {
      v7 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 1) = v7;
      if (!v7 || (unint64_t)&v7[1].u64[1] > *((_QWORD *)this + 2))
      {
        v8 = 2 * *((_QWORD *)this + 4);
        if (v8 <= 0x20)
          v8 = 32;
        *((_QWORD *)this + 4) = v8;
        v9 = v8 + 8;
        v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
        v11 = (char *)v10 + v9;
        *v10 = *((_QWORD *)this + 3);
        v7 = (int8x16_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 2) = v11;
        *((_QWORD *)this + 3) = v10;
      }
      *((_QWORD *)this + 1) = (char *)v7 + 24;
      v7[1].i16[0] = 235;
      v7[1].i8[2] = 0;
    }
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v13, this, a4, a5);
    v5 = *((_DWORD *)this + 24);
    if (!v5)
      goto LABEL_15;
  }
  if (!v7)
    return v7;
LABEL_15:
  v14 = v7[1].u8[2];
  if (v14 == 5)
  {
    v15 = v7->u32[2];
    if ((_DWORD)v15)
    {
      v16 = (_QWORD *)(v7->i64[0] + 8 * v15 - 8);
      if ((unint64_t)v16 > v7->i64[0])
      {
        v17 = v7->i64[0] + 8;
        do
        {
          v18 = *(_QWORD *)(v17 - 8);
          *(_QWORD *)(v17 - 8) = *v16;
          *v16-- = v18;
          v19 = v17 >= (unint64_t)v16;
          v17 += 8;
        }
        while (!v19);
      }
    }
  }
  else if (v14 == 2)
  {
    *v7 = vextq_s8(*v7, *v7, 8uLL);
  }
  return v7;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenerics(uint64_t a1, const void **a2, int8x16_t **a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  int i;
  swift::Demangle::__runtime::Node *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  swift::Demangle::__runtime::Node *v26;

  *a3 = swift::Demangle::__runtime::Demangler::popRetroactiveConformances((swift::Demangle::__runtime::Demangler *)a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  while (1)
  {
    v26 = 0;
    v7 = (*(_QWORD *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 8) = v7;
    if (!v7 || v7 + 24 > *(_QWORD *)(a1 + 16))
    {
      v8 = 2 * *(_QWORD *)(a1 + 32);
      if (v8 <= 0x20)
        v8 = 32;
      *(_QWORD *)(a1 + 32) = v8;
      v9 = v8 + 8;
      v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      *v10 = *(_QWORD *)(a1 + 24);
      v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1 + 16) = (char *)v10 + v9;
      *(_QWORD *)(a1 + 24) = v10;
    }
    *(_QWORD *)(a1 + 8) = v7 + 24;
    *(_WORD *)(v7 + 16) = 235;
    *(_BYTE *)(v7 + 18) = 0;
    v26 = (swift::Demangle::__runtime::Node *)v7;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(a2, (uint64_t *)&v26, (_QWORD *)a1);
    for (i = *(_DWORD *)(a1 + 96); i; i = *(_DWORD *)(a1 + 96))
    {
      v14 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)(a1 + 88) + 8 * (i - 1));
      if (*((_WORD *)v14 + 8) != 232)
        break;
      *(_DWORD *)(a1 + 96) = i - 1;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v26, v14, (swift::Demangle::__runtime::NodeFactory *)a1, v11, v12);
    }
    v15 = *((unsigned __int8 *)v26 + 18);
    if (v15 == 5)
    {
      v16 = *(_QWORD *)v26;
      v17 = *((unsigned int *)v26 + 2);
      v18 = (_QWORD *)(*(_QWORD *)v26 + 8 * v17 - 8);
      if ((_DWORD)v17 && (unint64_t)v18 > v16)
      {
        v20 = v16 + 8;
        do
        {
          v21 = *(_QWORD *)(v20 - 8);
          *(_QWORD *)(v20 - 8) = *v18;
          *v18-- = v21;
          v22 = v20 >= (unint64_t)v18;
          v20 += 8;
        }
        while (!v22);
      }
    }
    else if (v15 == 2)
    {
      *(int8x16_t *)v26 = vextq_s8(*(int8x16_t *)v26, *(int8x16_t *)v26, 8uLL);
    }
    if (!i)
      break;
    v23 = i - 1;
    v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v23) + 16);
    if (v24 != 275)
    {
      if (v24 == 274)
      {
        *(_DWORD *)(a1 + 96) = v23;
        return 1;
      }
      return 0;
    }
    *(_DWORD *)(a1 + 96) = v23;
  }
  return 0;
}

const void **swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(const void **result, uint64_t *a2, _QWORD *a3)
{
  const void **v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v4 = result;
  v5 = *((_DWORD *)result + 2);
  v6 = *((unsigned int *)result + 3);
  v7 = (char *)*result;
  if (v5 >= v6)
  {
    v9 = &v7[8 * v6];
    v10 = (char *)a3[1];
    if (v9 == v10)
    {
      v12 = v9 + 8;
      v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = a3[2];
    }
    if ((2 * v6) <= 4)
      v13 = 4;
    else
      v13 = (2 * v6);
    v14 = 8 * (v13 + v6);
    v7 = (char *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)&v7[v14] > v11)
    {
      v15 = 2 * a3[4];
      if (v15 <= v14 + 8)
        v15 = v14 + 8;
      a3[4] = v15;
      v16 = v15 + 8;
      result = (const void **)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)result + v16;
      *result = (const void *)a3[3];
      v7 = (char *)(((unint64_t)result + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v17;
      a3[3] = result;
    }
    a3[1] = &v7[v14];
    if ((_DWORD)v6)
      result = (const void **)memcpy(v7, *v4, 8 * v6);
    *v4 = v7;
    v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  v18 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  *(_QWORD *)&v7[8 * v5] = v18;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(swift::Demangle::__runtime::NodeFactory *a1, unint64_t a2, uint64_t a3, unint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v21;
  int v22;
  swift::Demangle::__runtime::Node **v23;
  swift::Demangle::__runtime::Node *v24;
  swift::Demangle::__runtime::Node **v25;
  swift::Demangle::__runtime::Node *v26;
  int v27;
  _QWORD *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  swift::Demangle::__runtime::Node *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  swift::Demangle::__runtime::Node *v51;
  swift::Demangle::__runtime::Node *v52;
  const char *v53;
  int v54;
  swift::Demangle::__runtime::Node **v55;
  swift::Demangle::__runtime::Node *v56;
  unsigned int *v57;
  swift::Demangle::__runtime::Node *v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  unsigned int i;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  swift::Demangle::__runtime::Node *v72;
  int v73;
  unsigned int v74;
  __int16 v75;
  swift::Demangle::__runtime::NodeFactory *v76;
  __int16 v77;
  swift::Demangle::__runtime::Node *Type;

  if (!a2)
    return 0;
  v5 = a4;
  v7 = *(unsigned int *)(a3 + 8);
  if (v7 <= a4)
    return 0;
  v8 = a2;
  v10 = *(unsigned __int16 *)(a2 + 16);
  if (v10 == 233 || v10 == 181)
  {
    v11 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v11;
    if (!v11 || v11 + 24 > *((_QWORD *)a1 + 2))
    {
      v12 = 2 * *((_QWORD *)a1 + 4);
      if (v12 <= 0x20)
        v12 = 32;
      *((_QWORD *)a1 + 4) = v12;
      v13 = v12 + 8;
      v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      v15 = (char *)v14 + v13;
      *v14 = *((_QWORD *)a1 + 3);
      v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v15;
      *((_QWORD *)a1 + 3) = v14;
    }
    v16 = v11 + 24;
    *((_QWORD *)a1 + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 235;
    *(_BYTE *)(v11 + 18) = 0;
    v17 = *(_DWORD *)(a3 + 8);
    v18 = v17 - 1;
    if (v18 >= v5 && v17 != 0)
    {
      while (1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v18);
        v22 = *(unsigned __int8 *)(v21 + 18);
        v23 = (swift::Demangle::__runtime::Node **)v21;
        if ((v22 - 1) >= 2)
        {
          if (v22 == 5)
          {
            v24 = *(swift::Demangle::__runtime::Node **)v21;
            v23 = *(swift::Demangle::__runtime::Node ***)v21;
            goto LABEL_29;
          }
          v23 = 0;
        }
        switch(v22)
        {
          case 1:
            v25 = (swift::Demangle::__runtime::Node **)(v21 + 8);
            if (v23 != (swift::Demangle::__runtime::Node **)(v21 + 8))
              goto LABEL_36;
            break;
          case 2:
            v25 = (swift::Demangle::__runtime::Node **)(v21 + 16);
            if (v23 != (swift::Demangle::__runtime::Node **)(v21 + 16))
              goto LABEL_36;
            break;
          case 5:
            v24 = *(swift::Demangle::__runtime::Node **)v21;
LABEL_29:
            v25 = (swift::Demangle::__runtime::Node **)((char *)v24 + 8 * *(unsigned int *)(v21 + 8));
            if (v23 != v25)
              goto LABEL_36;
            break;
          default:
            v25 = 0;
            if (v23)
            {
              do
              {
LABEL_36:
                v26 = *v23++;
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, v26, a1, a4, a5);
              }
              while (v23 != v25);
              v17 = *(_DWORD *)(a3 + 8);
            }
            break;
        }
        v18 = (v18 - 1);
        if (v18 < v5 || v17 <= v18)
        {
          v16 = *((_QWORD *)a1 + 1);
          break;
        }
      }
    }
    v30 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v30;
    if (!v30 || v30 + 24 > *((_QWORD *)a1 + 2))
    {
      v31 = 2 * *((_QWORD *)a1 + 4);
      if (v31 <= 0x20)
        v31 = 32;
      *((_QWORD *)a1 + 4) = v31;
      v32 = v31 + 8;
      v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      v34 = (char *)v33 + v32;
      *v33 = *((_QWORD *)a1 + 3);
      v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v34;
      *((_QWORD *)a1 + 3) = v33;
    }
    *((_QWORD *)a1 + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 232;
    *(_BYTE *)(v30 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v30, (swift::Demangle::__runtime::Node *)v8, a1, a4, a5);
    v37 = 0;
    if (v11 && v30)
    {
      v37 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v37;
      if (!v37 || v37 + 24 > *((_QWORD *)a1 + 2))
      {
        v38 = 2 * *((_QWORD *)a1 + 4);
        if (v38 <= 0x20)
          v38 = 32;
        *((_QWORD *)a1 + 4) = v38;
        v39 = v38 + 8;
        v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *v40 = *((_QWORD *)a1 + 3);
        v37 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v40 + v39;
        *((_QWORD *)a1 + 3) = v40;
      }
      *((_QWORD *)a1 + 1) = v37 + 24;
      *(_WORD *)(v37 + 16) = 17;
      *(_BYTE *)(v37 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v37, (swift::Demangle::__runtime::Node *)v30, a1, v35, v36);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v37, (swift::Demangle::__runtime::Node *)v11, a1, v41, v42);
    }
    return v37;
  }
  v27 = *(unsigned __int8 *)(a2 + 18);
  v28 = (_QWORD *)a2;
  if ((v27 - 1) >= 2)
  {
    if (v27 == 5 && *(_DWORD *)(a2 + 8))
    {
      v28 = *(_QWORD **)a2;
      goto LABEL_42;
    }
    return 0;
  }
LABEL_42:
  v29 = 0;
  if (*(unsigned __int16 *)(a2 + 16) > 0xD9u)
  {
    v43 = v10 - 218;
    if (v43 > 0x24 || ((1 << v43) & 0x1000000005) == 0)
    {
LABEL_64:
      ++a4;
      v29 = 1;
    }
  }
  else if (((v10 - 117) > 0x3E || ((1 << (v10 - 117)) & 0x6000000000000101) == 0)
         && v10 != 33
         && v10 != 70)
  {
    goto LABEL_64;
  }
  v44 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v5);
  if (a4 < v7)
  {
    v45 = *v28;
    if (*(_WORD *)(*v28 + 16) != 71)
    {
      v51 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(a1, *v28, a3);
LABEL_85:
      if (v51)
      {
LABEL_86:
        v59 = *(_WORD *)(v8 + 16);
        v60 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 1) = v60;
        if (!v60 || v60 + 24 > *((_QWORD *)a1 + 2))
        {
          v61 = 2 * *((_QWORD *)a1 + 4);
          if (v61 <= 0x20)
            v61 = 32;
          *((_QWORD *)a1 + 4) = v61;
          v62 = v61 + 8;
          v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
          v64 = (char *)v63 + v62;
          *v63 = *((_QWORD *)a1 + 3);
          v60 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)a1 + 2) = v64;
          *((_QWORD *)a1 + 3) = v63;
        }
        *((_QWORD *)a1 + 1) = v60 + 24;
        *(_WORD *)(v60 + 16) = v59;
        *(_BYTE *)(v60 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v60, v51, a1, v49, v50);
        for (i = 1; ; i = v69 + 1)
        {
          v67 = *(unsigned __int8 *)(v8 + 18);
          switch((_DWORD)v67)
          {
            case 1:
              v68 = *(unsigned __int8 *)(v8 + 18);
              break;
            case 5:
              v68 = *(unsigned int *)(v8 + 8);
              break;
            case 2:
              v68 = 2;
              break;
            default:
              goto LABEL_112;
          }
          v69 = i;
          if (v68 <= i)
          {
LABEL_112:
            v8 = v60;
            goto LABEL_113;
          }
          v70 = v67 - 1;
          if ((_DWORD)v67 != 1)
          {
            if ((_DWORD)v67 == 5)
            {
              if (*(unsigned int *)(v8 + 8) <= v69)
                continue;
              goto LABEL_108;
            }
            v67 = 2;
          }
          if (v67 <= v69)
            continue;
LABEL_108:
          v71 = v8;
          if (v70 >= 2)
            v71 = *(_QWORD *)v8;
          v72 = *(swift::Demangle::__runtime::Node **)(v71 + 8 * v69);
          if (v72)
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v60, v72, a1, a4, a5);
        }
      }
      return 0;
    }
    v46 = *(unsigned __int8 *)(v45 + 18);
    v47 = (swift::Demangle::__runtime::Node *)v45;
    if (v46 != 2)
    {
      if (v46 != 5 || *(_DWORD *)(v45 + 8) < 2u)
      {
        v48 = 0;
LABEL_74:
        v52 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(a1, v48, a3);
        v54 = *(unsigned __int8 *)(v45 + 18);
        v55 = (swift::Demangle::__runtime::Node **)v45;
        if ((v54 - 1) >= 2)
        {
          if (v54 != 5 || !*(_DWORD *)(v45 + 8))
          {
            v56 = 0;
            goto LABEL_80;
          }
          v55 = *(swift::Demangle::__runtime::Node ***)v45;
        }
        v56 = *v55;
LABEL_80:
        v57 = (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(a1, 71, v56, v52, v53);
        v51 = (swift::Demangle::__runtime::Node *)v57;
        if (*(_BYTE *)(v45 + 18) == 5 && *(_DWORD *)(v45 + 8) == 3)
        {
          if (v57)
          {
            v58 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)v45 + 16);
            if (v58)
            {
              swift::Demangle::__runtime::Node::addChild(v57, v58, a1, v49, v50);
              goto LABEL_86;
            }
          }
        }
        goto LABEL_85;
      }
      v47 = *(swift::Demangle::__runtime::Node **)v45;
    }
    v48 = *((_QWORD *)v47 + 1);
    goto LABEL_74;
  }
LABEL_113:
  if (!v29)
    return v8;
  v73 = *(unsigned __int8 *)(v44 + 18);
  if ((v73 - 1) >= 2 && (v73 != 5 || !*(_DWORD *)(v44 + 8)))
    return v8;
  v37 = 0;
  v74 = *(unsigned __int16 *)(v8 + 16);
  if (v74 > 0xA6)
  {
    if (*(unsigned __int16 *)(v8 + 16) > 0xDAu)
    {
      if (v74 == 234)
      {
        v75 = 18;
      }
      else
      {
        if (v74 != 219)
          return v37;
        v75 = 15;
      }
    }
    else if (v74 == 167)
    {
      v75 = 17;
    }
    else
    {
      if (v74 != 180)
        return v37;
      v75 = 16;
    }
    goto LABEL_137;
  }
  if (*(unsigned __int16 *)(v8 + 16) > 0x3Cu)
  {
    if (v74 != 61)
    {
      if (v74 != 76)
        return v37;
      goto LABEL_129;
    }
    v75 = 14;
LABEL_137:
    Type = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createType(a1, (swift::Demangle::__runtime::Node *)v8, a3, a4, a5);
    v76 = a1;
    v77 = v75;
    return swift::Demangle::__runtime::Demangler::createWithChildren(v76, v77, Type, (swift::Demangle::__runtime::Node *)v44, a5);
  }
  if (v74 == 24)
  {
    v75 = 13;
    goto LABEL_137;
  }
  if (v74 != 29)
    return v37;
LABEL_129:
  v76 = a1;
  v77 = 19;
  Type = (swift::Demangle::__runtime::Node *)v8;
  return swift::Demangle::__runtime::Demangler::createWithChildren(v76, v77, Type, (swift::Demangle::__runtime::Node *)v44, a5);
}

uint64_t swift::Demangle::__runtime::nodeConsumesGenericArgs(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  uint64_t result;
  int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  result = 0;
  v4 = *((unsigned __int16 *)this + 8);
  if (v4 > 217)
  {
    v6 = v4 - 218;
    v7 = v6 > 0x24;
    v8 = (1 << v6) & 0x1000000005;
    if (v7 || v8 == 0)
      return 1;
  }
  else
  {
    v5 = (v4 - 117) > 0x3E || ((1 << (v4 - 117)) & 0x6000000000000101) == 0;
    if (v5 && v4 != 33 && v4 != 70)
      return 1;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParamConvention(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;

  v3 = *((_QWORD *)a1 + 9);
  if (v3 >= *((_QWORD *)a1 + 8))
  {
    v4 = *((_QWORD *)a1 + 9);
LABEL_16:
    v16 = 0;
    *((_QWORD *)a1 + 9) = v4 - 1;
    return v16;
  }
  v4 = v3 + 1;
  *((_QWORD *)a1 + 9) = v3 + 1;
  v5 = *(char *)(*((_QWORD *)a1 + 7) + v3) - 98;
  if (v5 >= 0x18 || ((0xD05CABu >> v5) & 1) == 0)
    goto LABEL_16;
  v7 = off_B52A0[v5];
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v12;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  v13 = strlen(v7);
  *(_WORD *)(v8 + 16) = 106;
  *(_BYTE *)(v8 + 18) = 3;
  *(_QWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = v13;
  v16 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v16;
  if (!v16 || v16 + 24 > *((_QWORD *)a1 + 2))
  {
    v17 = 2 * *((_QWORD *)a1 + 4);
    if (v17 <= 0x20)
      v17 = 32;
    *((_QWORD *)a1 + 4) = v17;
    v18 = v17 + 8;
    v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
    v20 = (char *)v19 + v18;
    *v19 = *((_QWORD *)a1 + 3);
    v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v20;
    *((_QWORD *)a1 + 3) = v19;
  }
  *((_QWORD *)a1 + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = a2;
  *(_BYTE *)(v16 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, (swift::Demangle::__runtime::Node *)v8, a1, v14, v15);
  return v16;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplResultConvention(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3;
  unint64_t v4;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;

  v3 = *((_QWORD *)a1 + 9);
  if (v3 >= *((_QWORD *)a1 + 8))
  {
    v4 = *((_QWORD *)a1 + 9);
LABEL_5:
    v7 = 0;
    *((_QWORD *)a1 + 9) = v4 - 1;
  }
  else
  {
    v4 = v3 + 1;
    *((_QWORD *)a1 + 9) = v3 + 1;
    v6 = "@out";
    switch(*(_BYTE *)(*((_QWORD *)a1 + 7) + v3))
    {
      case 'a':
        v6 = "@autoreleased";
        break;
      case 'd':
        v6 = "@unowned";
        break;
      case 'k':
        v6 = "@pack_out";
        break;
      case 'o':
        v6 = "@owned";
        break;
      case 'r':
        break;
      case 'u':
        v6 = "@unowned_inner_pointer";
        break;
      default:
        goto LABEL_5;
    }
    v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
    {
      v9 = 2 * *((_QWORD *)a1 + 4);
      if (v9 <= 0x20)
        v9 = 32;
      *((_QWORD *)a1 + 4) = v9;
      v10 = v9 + 8;
      v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      v12 = (char *)v11 + v10;
      *v11 = *((_QWORD *)a1 + 3);
      v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v12;
      *((_QWORD *)a1 + 3) = v11;
    }
    *((_QWORD *)a1 + 1) = v8 + 24;
    v13 = strlen(v6);
    *(_WORD *)(v8 + 16) = 106;
    *(_BYTE *)(v8 + 18) = 3;
    *(_QWORD *)v8 = v6;
    *(_QWORD *)(v8 + 8) = v13;
    v7 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v7;
    if (!v7 || v7 + 24 > *((_QWORD *)a1 + 2))
    {
      v16 = 2 * *((_QWORD *)a1 + 4);
      if (v16 <= 0x20)
        v16 = 32;
      *((_QWORD *)a1 + 4) = v16;
      v17 = v16 + 8;
      v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      v19 = (char *)v18 + v17;
      *v18 = *((_QWORD *)a1 + 3);
      v7 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v19;
      *((_QWORD *)a1 + 3) = v18;
    }
    *((_QWORD *)a1 + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = a2;
    *(_BYTE *)(v7 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v8, a1, v14, v15);
  }
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParameterSending(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  unint64_t result;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v1 = *((_QWORD *)this + 9);
  if (v1 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v1) != 84)
    return 0;
  *((_QWORD *)this + 9) = v1 + 1;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v4 = 2 * *((_QWORD *)this + 4);
    if (v4 <= 0x20)
      v4 = 32;
    *((_QWORD *)this + 4) = v4;
    v5 = v4 + 8;
    v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    *v6 = *((_QWORD *)this + 3);
    result = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v6 + v5;
    *((_QWORD *)this + 3) = v6;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 111;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = "sending";
  *(_QWORD *)(result + 8) = 7;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParameterResultDifferentiability(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2;
  const char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  size_t v9;

  v2 = *((_QWORD *)this + 9);
  if (v2 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v2) == 119)
  {
    *((_QWORD *)this + 9) = v2 + 1;
    v3 = "@noDerivative";
  }
  else
  {
    v3 = (const char *)&unk_A9F1F;
  }
  v4 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((_QWORD *)this + 2))
  {
    v5 = 2 * *((_QWORD *)this + 4);
    if (v5 <= 0x20)
      v5 = 32;
    *((_QWORD *)this + 4) = v5;
    v6 = v5 + 8;
    v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    v8 = (char *)v7 + v6;
    *v7 = *((_QWORD *)this + 3);
    v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v7;
  }
  *((_QWORD *)this + 1) = v4 + 24;
  v9 = strlen(v3);
  *(_WORD *)(v4 + 16) = 110;
  *(_BYTE *)(v4 + 18) = 3;
  *(_QWORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = v9;
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  int8x16_t *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  unsigned int v12;
  swift::Demangle::__runtime::Node *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  __int16 v19;
  swift::Demangle::__runtime::Node *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  int v28;
  swift::Demangle::__runtime::Node *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  int v34;
  unsigned int v35;
  swift::Demangle::__runtime::Node *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;

  v5 = *((_QWORD *)this + 9);
  if (v5 >= *((_QWORD *)this + 8))
    return 0;
  v7 = 0;
  *((_QWORD *)this + 9) = v5 + 1;
  switch(*(_BYTE *)(*((_QWORD *)this + 7) + v5))
  {
    case 'A':
      v8 = swift::Demangle::__runtime::Demangler::popAssocTypePath(this, a2, a3, a4, a5);
      if (!v8)
        return 0;
      v11 = *((_DWORD *)this + 24);
      if (!v11)
        return 0;
      v12 = v11 - 1;
      v13 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v12);
      if (*((_WORD *)v13 + 8) != 232)
        return 0;
      v14 = (unint64_t)v8;
      *((_DWORD *)this + 24) = v12;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v15 = 2 * *((_QWORD *)this + 4);
        if (v15 <= 0x20)
          v15 = 32;
        *((_QWORD *)this + 4) = v15;
        v16 = v15 + 8;
        v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        v18 = (char *)v17 + v16;
        *v17 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v18;
        *((_QWORD *)this + 3) = v17;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v19 = 294;
      goto LABEL_39;
    case 'E':
      v20 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v20)
        return 0;
      v14 = (unint64_t)v20;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v25 = 292;
      goto LABEL_47;
    case 'M':
      v26 = *((_DWORD *)this + 24);
      if (!v26)
        return 0;
      v27 = v26 - 1;
      v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v27);
      v28 = *(unsigned __int16 *)(v14 + 16);
      if (v28 == 101)
      {
        *((_DWORD *)this + 24) = v27;
        v14 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v14, 153, a4, a5);
        if (!v14)
          return 0;
      }
      else
      {
        if (v28 != 153)
          return 0;
        *((_DWORD *)this + 24) = v27;
      }
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v41 = 2 * *((_QWORD *)this + 4);
        if (v41 <= 0x20)
          v41 = 32;
        *((_QWORD *)this + 4) = v41;
        v42 = v41 + 8;
        v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
        v44 = (char *)v43 + v42;
        *v43 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v44;
        *((_QWORD *)this + 3) = v43;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v25 = 291;
LABEL_47:
      *(_WORD *)(v7 + 16) = v25;
      *(_BYTE *)(v7 + 18) = 0;
LABEL_48:
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v14, this, a4, a5);
      break;
    case 'X':
      v29 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v29)
        return 0;
      v14 = (unint64_t)v29;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v30 = 2 * *((_QWORD *)this + 4);
        if (v30 <= 0x20)
          v30 = 32;
        *((_QWORD *)this + 4) = v30;
        v31 = v30 + 8;
        v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
        v33 = (char *)v32 + v31;
        *v32 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v33;
        *((_QWORD *)this + 3) = v32;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v25 = 293;
      goto LABEL_47;
    case 'Y':
      v34 = *((_DWORD *)this + 24);
      if (!v34)
        return 0;
      v35 = v34 - 1;
      v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v35);
      *((_DWORD *)this + 24) = v35;
      if (!v14)
        return 0;
      v36 = swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v36)
        return 0;
      v13 = v36;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v37 = 2 * *((_QWORD *)this + 4);
        if (v37 <= 0x20)
          v37 = 32;
        *((_QWORD *)this + 4) = v37;
        v38 = v37 + 8;
        v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        v40 = (char *)v39 + v38;
        *v39 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v40;
        *((_QWORD *)this + 3) = v39;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v19 = 293;
LABEL_39:
      *(_WORD *)(v7 + 16) = v19;
      *(_BYTE *)(v7 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v13, this, v9, v10);
      goto LABEL_48;
    default:
      return v7;
  }
  return v7;
}

int8x16_t *swift::Demangle::__runtime::Demangler::popAssocTypePath(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  swift::Demangle::__runtime::Node *v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 289;
  v6[1].i8[2] = 0;
  do
  {
    v11 = *((_DWORD *)this + 24);
    if (v11 && (v12 = v11 - 1, v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12), *(_WORD *)(v13 + 16) == 275))
      *((_DWORD *)this + 24) = v12;
    else
      v13 = 0;
    v14 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypeName(this, a2, a3, a4, a5);
    if (!v14)
      return 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v14, this, v15, v16);
  }
  while (!v13);
  v17 = v6[1].u8[2];
  if (v17 == 5)
  {
    v19 = v6->u32[2];
    if ((_DWORD)v19)
    {
      v20 = (_QWORD *)(v6->i64[0] + 8 * v19 - 8);
      if ((unint64_t)v20 > v6->i64[0])
      {
        v21 = v6->i64[0] + 8;
        do
        {
          v22 = *(_QWORD *)(v21 - 8);
          *(_QWORD *)(v21 - 8) = *v20;
          *v20-- = v22;
          v23 = v21 >= (unint64_t)v20;
          v21 += 8;
        }
        while (!v23);
      }
    }
  }
  else if (v17 == 2)
  {
    *v6 = vextq_s8(*v6, *v6, 8uLL);
  }
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  int v29;
  unsigned int v30;

  v7 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this, (uint64_t)a2, a3, a4, a5);
  v10 = v7;
  if (!a2)
  {
    v29 = *((_DWORD *)this + 24);
    if (!v29)
      return 0;
    v30 = v29 - 1;
    v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v30);
    if (*(_WORD *)(v11 + 16) != 232)
      return 0;
    *((_DWORD *)this + 24) = v30;
    if (!v7)
      return v10;
    goto LABEL_8;
  }
  v11 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((_QWORD *)this + 2))
  {
    v12 = 2 * *((_QWORD *)this + 4);
    if (v12 <= 0x20)
      v12 = 32;
    *((_QWORD *)this + 4) = v12;
    v13 = v12 + 8;
    v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    v15 = (char *)v14 + v13;
    *v14 = *((_QWORD *)this + 3);
    v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v15;
    *((_QWORD *)this + 3) = v14;
  }
  *((_QWORD *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 232;
  *(_BYTE *)(v11 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, a2, this, v8, v9);
  if (v10)
  {
LABEL_8:
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v17 = 2 * *((_QWORD *)this + 4);
      if (v17 <= 0x20)
        v17 = 32;
      *((_QWORD *)this + 4) = v17;
      v18 = v17 + 8;
      v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v20 = (char *)v19 + v18;
      *v19 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v20;
      *((_QWORD *)this + 3) = v19;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 45;
    *(_BYTE *)(v16 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, (swift::Demangle::__runtime::Node *)v11, this, v8, v9);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, (swift::Demangle::__runtime::Node *)v10, this, v21, v22);
    v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
    {
      v25 = 2 * *((_QWORD *)this + 4);
      if (v25 <= 0x20)
        v25 = 32;
      *((_QWORD *)this + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      v28 = (char *)v27 + v26;
      *v27 = *((_QWORD *)this + 3);
      v10 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v28;
      *((_QWORD *)this + 3) = v27;
    }
    *((_QWORD *)this + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = 232;
    *(_BYTE *)(v10 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, (swift::Demangle::__runtime::Node *)v16, this, v23, v24);
  }
  return v10;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  const char *v46;
  swift::Demangle::__runtime::Node *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  const char *v54;

  v6 = *((_QWORD *)this + 2);
  v7 = (char *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v7;
  if (v7)
    v8 = (unint64_t)(v7 + 32) > v6;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 2 * *((_QWORD *)this + 4);
    if (v9 <= 0x28)
      v9 = 40;
    *((_QWORD *)this + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)this + 3);
    v7 = (char *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v12;
    *((_QWORD *)this + 3) = v11;
  }
  v13 = 0;
  *((_QWORD *)this + 1) = v7 + 32;
  v14 = 4;
  do
  {
    v16 = *((_DWORD *)this + 24);
    if (v16 && (v17 = v16 - 1, v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v17), *(_WORD *)(v18 + 16) == 275))
      *((_DWORD *)this + 24) = v17;
    else
      v18 = 0;
    v19 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this, (uint64_t)a2, a3, a4, a5);
    if (!v19)
      return 0;
    v20 = v19;
    if (v13 >= v14)
    {
      v21 = &v7[8 * v14];
      v22 = (char *)*((_QWORD *)this + 1);
      if (v21 == v22)
      {
        v24 = v21 + 8;
        v23 = *((_QWORD *)this + 2);
        if ((unint64_t)v24 <= v23)
        {
          *((_QWORD *)this + 1) = v24;
          LODWORD(v25) = 1;
LABEL_11:
          v14 += v25;
          goto LABEL_12;
        }
      }
      else
      {
        v23 = *((_QWORD *)this + 2);
      }
      if (2 * v14 <= 4)
        v25 = 4;
      else
        v25 = 2 * v14;
      v26 = 8 * (v25 + v14);
      v27 = (char *)((unint64_t)(v22 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 1) = v27;
      if (!v27 || (unint64_t)&v27[v26] > v23)
      {
        v28 = 2 * *((_QWORD *)this + 4);
        if (v28 <= v26 + 8)
          v28 = v26 + 8;
        *((_QWORD *)this + 4) = v28;
        v29 = v28 + 8;
        v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
        v31 = (char *)v30 + v29;
        *v30 = *((_QWORD *)this + 3);
        v27 = (char *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 2) = v31;
        *((_QWORD *)this + 3) = v30;
      }
      *((_QWORD *)this + 1) = &v27[v26];
      if (v14)
        memcpy(v27, v7, 8 * v14);
      v7 = v27;
      goto LABEL_11;
    }
LABEL_12:
    v15 = v13 + 1;
    *(_QWORD *)&v7[8 * v13++] = v20;
  }
  while (!v18);
  if (a2)
  {
    v33 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v33;
    if (!v33 || v33 + 24 > *((_QWORD *)this + 2))
    {
      v34 = 2 * *((_QWORD *)this + 4);
      if (v34 <= 0x20)
        v34 = 32;
      *((_QWORD *)this + 4) = v34;
      v35 = v34 + 8;
      v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
      v37 = (char *)v36 + v35;
      *v36 = *((_QWORD *)this + 3);
      v33 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v37;
      *((_QWORD *)this + 3) = v36;
    }
    *((_QWORD *)this + 1) = v33 + 24;
    *(_WORD *)(v33 + 16) = 232;
    *(_BYTE *)(v33 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v33, a2, this, a4, a5);
    if (!v15)
      return v33;
LABEL_47:
    v40 = 8 * v15;
    v41 = v7 - 8;
    while (1)
    {
      v47 = *(swift::Demangle::__runtime::Node **)&v41[v40];
      if (!v47)
        break;
      v48 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v48;
      if (!v48 || v48 + 24 > *((_QWORD *)this + 2))
      {
        v49 = 2 * *((_QWORD *)this + 4);
        if (v49 <= 0x20)
          v49 = 32;
        *((_QWORD *)this + 4) = v49;
        v50 = v49 + 8;
        v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
        v52 = (char *)v51 + v50;
        *v51 = *((_QWORD *)this + 3);
        v48 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v52;
        *((_QWORD *)this + 3) = v51;
      }
      v32 = 0;
      *((_QWORD *)this + 1) = v48 + 24;
      *(_WORD *)(v48 + 16) = 45;
      *(_BYTE *)(v48 + 18) = 0;
      if (v33 && v48)
      {
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v48, (swift::Demangle::__runtime::Node *)v33, this, a4, a5);
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v48, v47, this, v53, v54);
        v32 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v32;
        if (!v32 || v32 + 24 > *((_QWORD *)this + 2))
        {
          v42 = 2 * *((_QWORD *)this + 4);
          if (v42 <= 0x20)
            v42 = 32;
          *((_QWORD *)this + 4) = v42;
          v43 = v42 + 8;
          v44 = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
          *v44 = *((_QWORD *)this + 3);
          v32 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v44 + v43;
          *((_QWORD *)this + 3) = v44;
        }
        *((_QWORD *)this + 1) = v32 + 24;
        *(_WORD *)(v32 + 16) = 232;
        *(_BYTE *)(v32 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v32, (swift::Demangle::__runtime::Node *)v48, this, v45, v46);
      }
      v33 = v32;
      v40 -= 8;
      if (!v40)
        return v32;
    }
    return v33;
  }
  v38 = *((_DWORD *)this + 24);
  if (v38 && (v39 = v38 - 1, v33 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v39), *(_WORD *)(v33 + 16) == 232))
  {
    *((_DWORD *)this + 24) = v39;
    if (v15)
      goto LABEL_47;
  }
  else
  {
    v33 = 0;
    if (v15)
      goto LABEL_47;
  }
  return v33;
}

unint64_t swift::Demangle::__runtime::Demangler::popAssocTypeName(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 *v11;
  swift::Demangle::__runtime::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = v5 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(unsigned __int16 **)(v8 + 8 * (v5 - 1));
  v10 = v9[8];
  if (v10 == 181)
  {
LABEL_16:
    *((_DWORD *)this + 24) = v7;
    v5 = v7;
    if (!v7)
      return 0;
    goto LABEL_19;
  }
  if (v10 != 232)
  {
LABEL_15:
    v7 = v5 - 1;
    v9 = *(unsigned __int16 **)(v8 + 8 * (v5 - 1));
    if (v9[8] != 347)
    {
      v9 = 0;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *((_DWORD *)this + 24) = v7;
  v11 = v9;
  while ((unsigned __int16)v10 == 232)
  {
    if (*((unsigned __int8 *)v11 + 18) - 1 >= 2)
      v11 = *(unsigned __int16 **)v11;
    v11 = *(unsigned __int16 **)v11;
    LOWORD(v10) = v11[8];
  }
  if ((unsigned __int16)v10 - 180 >= 2 && (unsigned __int16)v10 != 347)
    return 0;
  if (!v9)
  {
    v5 = v7;
    if (!v7)
      return 0;
    goto LABEL_15;
  }
  v5 = v7;
  if (!v7)
    return 0;
LABEL_19:
  v12 = *(swift::Demangle::__runtime::Node **)(v8 + 8 * (v5 - 1));
  if (*((_WORD *)v12 + 8) != 101)
    return 0;
  *((_DWORD *)this + 24) = v5 - 1;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 35;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, v12, this, a4, a5);
  if (v9 && v13)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v9, this, v18, v19);
  return v13;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  int8x16_t *v11;
  uint64_t v12;
  const char *v13;
  int v14;
  swift::Demangle::__runtime::Node **v15;
  uint64_t v16;
  int8x16_t *v17;
  unint64_t v18;
  swift::Demangle::__runtime::Node *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;

  v10 = (unsigned int *)swift::Demangle::__runtime::Demangler::demangleSpecAttributes(a1, a2, a3, a4, a5);
  if (!v10)
    return v10;
  v11 = swift::Demangle::__runtime::Demangler::popTypeList(a1, v6, v7, v8, v9);
  if (!v11)
    return 0;
  v14 = v11[1].u8[2];
  v15 = (swift::Demangle::__runtime::Node **)v11;
  if ((v14 - 1) >= 2)
  {
    if (v14 == 5)
    {
      v16 = v11->i64[0];
      v15 = (swift::Demangle::__runtime::Node **)v11->i64[0];
LABEL_12:
      v17 = (int8x16_t *)(v16 + 8 * v11->u32[2]);
      if (v15 == (swift::Demangle::__runtime::Node **)v17)
        return v10;
      goto LABEL_22;
    }
    v15 = 0;
  }
  switch(v14)
  {
    case 1:
      v17 = (int8x16_t *)&v11->u64[1];
      if (v15 == (swift::Demangle::__runtime::Node **)&v11->u64[1])
        return v10;
      break;
    case 2:
      v17 = v11 + 1;
      if (v15 == (swift::Demangle::__runtime::Node **)&v11[1])
        return v10;
      break;
    case 5:
      v16 = v11->i64[0];
      goto LABEL_12;
    default:
      v17 = 0;
      if (!v15)
        return v10;
      goto LABEL_22;
  }
  do
  {
LABEL_22:
    v19 = *v15;
    if (*v15)
    {
      v18 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v18;
      if (!v18 || v18 + 24 > *((_QWORD *)a1 + 2))
      {
        v20 = 2 * *((_QWORD *)a1 + 4);
        if (v20 <= 0x20)
          v20 = 32;
        *((_QWORD *)a1 + 4) = v20;
        v21 = v20 + 8;
        v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        v23 = (char *)v22 + v21;
        *v22 = *((_QWORD *)a1 + 3);
        v18 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = v23;
        *((_QWORD *)a1 + 3) = v22;
      }
      *((_QWORD *)a1 + 1) = v18 + 24;
      *(_WORD *)(v18 + 16) = 94;
      *(_BYTE *)(v18 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v18, v19, a1, v12, v13);
    }
    else
    {
      v18 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v10, (swift::Demangle::__runtime::Node *)v18, a1, v12, v13);
    ++v15;
  }
  while (v15 != (swift::Demangle::__runtime::Node **)v17);
  return v10;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSpecAttributes(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;

  v8 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  if (v7 < v8 && *(_BYTE *)(*((_QWORD *)a1 + 7) + v7) == 109)
  {
    *((_QWORD *)a1 + 9) = ++v7;
    v9 = 1;
    if (v7 >= v8)
      goto LABEL_9;
  }
  else
  {
    v9 = 0;
    if (v7 >= v8)
      goto LABEL_9;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 7) + v7) == 113)
  {
    *((_QWORD *)a1 + 9) = ++v7;
    v10 = 1;
    if (v7 >= v8)
      goto LABEL_13;
    goto LABEL_10;
  }
LABEL_9:
  v10 = 0;
  if (v7 >= v8)
    goto LABEL_13;
LABEL_10:
  if (*(_BYTE *)(*((_QWORD *)a1 + 7) + v7) != 97)
  {
LABEL_13:
    v11 = 0;
    if (v7 < v8)
      goto LABEL_14;
    return 0;
  }
  *((_QWORD *)a1 + 9) = ++v7;
  v11 = 1;
  if (v7 >= v8)
    return 0;
LABEL_14:
  *((_QWORD *)a1 + 9) = v7 + 1;
  v12 = *(char *)(*((_QWORD *)a1 + 7) + v7);
  if ((v12 - 58) < 0xF6u)
    return 0;
  v13 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v13;
  if (!v13 || (v14 = *((_QWORD *)a1 + 2), v13 + 24 > v14))
  {
    v15 = 2 * *((_QWORD *)a1 + 4);
    if (v15 <= 0x20)
      v15 = 32;
    *((_QWORD *)a1 + 4) = v15;
    v16 = v15 + 8;
    v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    v14 = (unint64_t)v17 + v16;
    *v17 = *((_QWORD *)a1 + 3);
    v13 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v14;
    *((_QWORD *)a1 + 3) = v17;
  }
  v18 = v13 + 24;
  *(_WORD *)(v13 + 16) = a2;
  *(_BYTE *)(v13 + 18) = 0;
  if (!v9)
  {
    if (!v10)
      goto LABEL_28;
LABEL_31:
    v24 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v24;
    if (!v24 || v24 + 24 > *((_QWORD *)a1 + 2))
    {
      v25 = 2 * *((_QWORD *)a1 + 4);
      if (v25 <= 0x20)
        v25 = 32;
      *((_QWORD *)a1 + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      *v27 = *((_QWORD *)a1 + 3);
      v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = (char *)v27 + v26;
      *((_QWORD *)a1 + 3) = v27;
    }
    *((_QWORD *)a1 + 1) = v24 + 24;
    *(_WORD *)(v24 + 16) = 217;
    *(_BYTE *)(v24 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v24, a1, a4, a5);
    v18 = *((_QWORD *)a1 + 1);
    v23 = v12 - 48;
    if (!v11)
      goto LABEL_43;
    goto LABEL_37;
  }
  v19 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v19;
  if (!v19 || v19 + 24 > v14)
  {
    v20 = 2 * *((_QWORD *)a1 + 4);
    if (v20 <= 0x20)
      v20 = 32;
    *((_QWORD *)a1 + 4) = v20;
    v21 = v20 + 8;
    v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    *v22 = *((_QWORD *)a1 + 3);
    v19 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v22 + v21;
    *((_QWORD *)a1 + 3) = v22;
  }
  *((_QWORD *)a1 + 1) = v19 + 24;
  *(_WORD *)(v19 + 16) = 339;
  *(_BYTE *)(v19 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v19, a1, a4, a5);
  v18 = *((_QWORD *)a1 + 1);
  if (v10)
    goto LABEL_31;
LABEL_28:
  v23 = v12 - 48;
  if (v11)
  {
LABEL_37:
    v28 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v28;
    if (!v28 || v28 + 24 > *((_QWORD *)a1 + 2))
    {
      v29 = 2 * *((_QWORD *)a1 + 4);
      if (v29 <= 0x20)
        v29 = 32;
      *((_QWORD *)a1 + 4) = v29;
      v30 = v29 + 8;
      v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      *v31 = *((_QWORD *)a1 + 3);
      v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = (char *)v31 + v30;
      *((_QWORD *)a1 + 3) = v31;
    }
    *((_QWORD *)a1 + 1) = v28 + 24;
    *(_WORD *)(v28 + 16) = 346;
    *(_BYTE *)(v28 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v28, a1, a4, a5);
    v18 = *((_QWORD *)a1 + 1);
  }
LABEL_43:
  v32 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v32;
  if (!v32 || v32 + 24 > *((_QWORD *)a1 + 2))
  {
    v33 = 2 * *((_QWORD *)a1 + 4);
    if (v33 <= 0x20)
      v33 = 32;
    *((_QWORD *)a1 + 4) = v33;
    v34 = v33 + 8;
    v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
    *v35 = *((_QWORD *)a1 + 3);
    v32 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v35 + v34;
    *((_QWORD *)a1 + 3) = v35;
  }
  *((_QWORD *)a1 + 1) = v32 + 24;
  *(_WORD *)(v32 + 16) = 216;
  *(_BYTE *)(v32 + 18) = 4;
  *(_QWORD *)v32 = v23;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v13, (swift::Demangle::__runtime::Node *)v32, a1, a4, a5);
  return v13;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleFunctionSpecialization(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  unint64_t v12;
  uint64_t result;
  swift::Demangle::__runtime::Node *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int v26;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;

  v9 = swift::Demangle::__runtime::Demangler::demangleSpecAttributes(this, 77, a3, a4, a5);
  if (v9)
  {
    while (1)
    {
      v10 = *((_QWORD *)this + 9);
      if (v10 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v10) == 95)
        break;
      v11 = swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(this, 78, v6, v7, v8);
      if (!v11)
      {
        v9 = 0;
        goto LABEL_8;
      }
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, v11, this, v7, v8);
    }
    *((_QWORD *)this + 9) = v10 + 1;
  }
LABEL_8:
  v12 = *((_QWORD *)this + 9);
  if (v12 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v12) == 110)
  {
    *((_QWORD *)this + 9) = v12 + 1;
    if (!v9)
      return 0;
  }
  else
  {
    v14 = swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(this, 79, v6, v7, v8);
    result = 0;
    if (!v9 || !v14)
      return result;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, v14, this, v15, v16);
  }
  v17 = *(unsigned __int8 *)(v9 + 18);
  if ((_DWORD)v17 == 1)
    goto LABEL_20;
  if ((_DWORD)v17 == 5)
  {
    v17 = *(unsigned int *)(v9 + 8);
    if ((_DWORD)v17)
      goto LABEL_20;
    return v9;
  }
  if ((_DWORD)v17 != 2)
    return v9;
  v17 = 2;
LABEL_20:
  v18 = 0;
  while (1)
  {
    v19 = *(unsigned __int8 *)(v9 + 18);
    v20 = v19 - 1;
    if ((_DWORD)v19 != 1)
    {
      if ((_DWORD)v19 == 5)
      {
        v19 = *(unsigned int *)(v9 + 8);
      }
      else
      {
        if ((_DWORD)v19 != 2)
          goto LABEL_31;
        v19 = 2;
      }
    }
    v21 = v17 + ~v18;
    if (v19 <= v21)
    {
LABEL_31:
      v23 = 0;
      goto LABEL_32;
    }
    v22 = v9;
    if (v20 >= 2)
      v22 = *(_QWORD *)v9;
    v23 = *(int8x16_t **)(v22 + 8 * v21);
LABEL_32:
    if (v23[1].i16[0] != 78)
      goto LABEL_21;
    v24 = v23[1].u8[2];
    v25 = (unsigned int **)v23;
    if ((v24 - 1) >= 2)
    {
      if ((_DWORD)v24 != 5 || !v23->i32[2])
        goto LABEL_21;
      v25 = (unsigned int **)v23->i64[0];
    }
    v26 = **v25;
    if (v26 > 9 || ((1 << v26) & 0x233) == 0)
      goto LABEL_21;
    if ((_DWORD)v24 == 1)
      goto LABEL_47;
    if ((_DWORD)v24 == 5)
      break;
    if ((_DWORD)v24 == 2)
    {
      v24 = 2;
      v28 = *((_DWORD *)this + 24);
      if (v28)
        goto LABEL_52;
      return 0;
    }
    v24 = 0;
    v28 = *((_DWORD *)this + 24);
    if (!v28)
      return 0;
LABEL_52:
    while (1)
    {
      v29 = v28 - 1;
      v30 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v29);
      v31 = *(unsigned __int16 *)(v30 + 16);
      if (v31 != 232)
        break;
      *((_DWORD *)this + 24) = v29;
      if (v26 == 9 || v26 == 5)
      {
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v23, (swift::Demangle::__runtime::Node *)v30, this, v7, v8);
        v28 = *((_DWORD *)this + 24);
        if (v28)
          continue;
      }
      return 0;
    }
    if (v31 != 101)
      return 0;
    *((_DWORD *)this + 24) = v29;
    v33 = *(_BYTE **)v30;
    v32 = *(_QWORD *)(v30 + 8);
    if (v26 == 4 && v32 && *v33 == 95)
    {
      --v32;
      ++v33;
    }
    v34 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v34;
    if (!v34 || v34 + 24 > *((_QWORD *)this + 2))
    {
      v35 = 2 * *((_QWORD *)this + 4);
      if (v35 <= 0x20)
        v35 = 32;
      *((_QWORD *)this + 4) = v35;
      v36 = v35 + 8;
      v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      *v37 = *((_QWORD *)this + 3);
      v34 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v37 + v36;
      *((_QWORD *)this + 3) = v37;
    }
    *((_QWORD *)this + 1) = v34 + 24;
    *(_WORD *)(v34 + 16) = 81;
    *(_BYTE *)(v34 + 18) = 3;
    *(_QWORD *)v34 = v33;
    *(_QWORD *)(v34 + 8) = v32;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v23, (swift::Demangle::__runtime::Node *)v34, this, v7, v8);
    v38 = v23[1].u8[2];
    if (v38 == 5)
    {
      v39 = v23->u32[2];
      if (v24 != v39)
      {
        v40 = (_QWORD *)(v23->i64[0] + 8 * v39 - 8);
        if ((unint64_t)v40 > v23->i64[0] + 8 * v24)
        {
          v41 = v23->i64[0] + 8 * v24 + 8;
          do
          {
            v42 = *(_QWORD *)(v41 - 8);
            *(_QWORD *)(v41 - 8) = *v40;
            *v40-- = v42;
            v43 = v41 >= (unint64_t)v40;
            v41 += 8;
          }
          while (!v43);
        }
      }
    }
    else if (v38 == 2 && !v24)
    {
      *v23 = vextq_s8(*v23, *v23, 8uLL);
    }
LABEL_21:
    if (++v18 == v17)
      return v9;
  }
  v24 = v23->u32[2];
LABEL_47:
  v28 = *((_DWORD *)this + 24);
  if (v28)
    goto LABEL_52;
  return 0;
}

void std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_28;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

double swift::Demangle::__runtime::Demangler::demangleBridgedMethodParams@<D0>(swift::Demangle::__runtime::Demangler *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  int v5;
  double result;
  unint64_t v8;
  int v9;
  int v10;
  std::string v12;

  v3 = *((_QWORD *)this + 9);
  if (v3 >= *((_QWORD *)this + 8))
    goto LABEL_22;
  if (*(_BYTE *)(*((_QWORD *)this + 7) + v3) == 95)
  {
    *((_QWORD *)this + 9) = v3 + 1;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    return result;
  }
  memset(&v12, 0, sizeof(v12));
  *((_QWORD *)this + 9) = v3 + 1;
  v5 = *(char *)(*((_QWORD *)this + 7) + v3);
  if ((v5 - 97) > 0xF || ((1 << (v5 - 97)) & 0xD001) == 0)
  {
LABEL_22:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return result;
  }
  std::string::push_back(&v12, v5);
  do
  {
    v8 = *((_QWORD *)this + 9);
    if (v8 >= *((_QWORD *)this + 8))
    {
      v10 = 0;
LABEL_17:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      continue;
    }
    v9 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v8);
    *((_QWORD *)this + 9) = v8 + 1;
    if (v9 == 95)
    {
      result = *(double *)&v12.__r_.__value_.__l.__data_;
      *a2 = v12;
      return result;
    }
    v10 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v8);
    if ((v10 - 98) > 0xC || ((1 << (v10 - 98)) & 0x1021) == 0)
      goto LABEL_17;
    std::string::push_back(&v12, v10);
  }
  while ((v10 - 98) <= 0xC && ((1 << (v10 - 98)) & 0x1021) != 0);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return result;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  swift::Demangle::__runtime::Node *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  swift::Demangle::__runtime::Node *v33;
  uint64_t v34;
  const char *v35;
  unsigned int *v36;
  unint64_t v37;
  swift::Demangle::__runtime::Node *v38;
  uint64_t v39;
  const char *v40;
  unsigned int *v41;
  unint64_t v42;
  swift::Demangle::__runtime::Node *v43;
  uint64_t v44;
  const char *v45;
  unsigned int *result;
  unint64_t v47;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 323;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11)
  {
    do
    {
      v12 = v11 - 1;
      v13 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v12);
      *((_DWORD *)this + 24) = v12;
      if (!v13)
        break;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v13, this, a4, a5);
      v11 = *((_DWORD *)this + 24);
    }
    while (v11);
    v14 = v6[1].u8[2];
    if (v14 == 5)
    {
      v15 = v6->i64[0];
      v16 = v6->u32[2];
      v17 = (_QWORD *)(v6->i64[0] + 8 * v16 - 8);
      if ((_DWORD)v16)
        v18 = (unint64_t)v17 > v15;
      else
        v18 = 0;
      if (v18)
      {
        v19 = v15 + 8;
        do
        {
          v20 = *(_QWORD *)(v19 - 8);
          *(_QWORD *)(v19 - 8) = *v17;
          *v17-- = v20;
          v21 = v19 >= (unint64_t)v17;
          v19 += 8;
        }
        while (!v21);
      }
    }
    else if (v14 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  v22 = *((_QWORD *)this + 9);
  if (v22 >= *((_QWORD *)this + 8))
  {
    v23 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v22 + 1;
    v23 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v22);
  }
  HIDWORD(v24) = v23;
  LODWORD(v24) = (v23 << 24) - 1677721600;
  v25 = (v24 >> 25);
  v18 = v25 > 7;
  v26 = (1 << v25) & 0xC3;
  if (v18 || v26 == 0)
  {
    v6 = 0;
  }
  else
  {
    v28 = (char)v23;
    v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v29;
    if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
    {
      v30 = 2 * *((_QWORD *)this + 4);
      if (v30 <= 0x20)
        v30 = 32;
      *((_QWORD *)this + 4) = v30;
      v31 = v30 + 8;
      v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      *v32 = *((_QWORD *)this + 3);
      v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v32 + v31;
      *((_QWORD *)this + 3) = v32;
    }
    *((_QWORD *)this + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 321;
    *(_BYTE *)(v29 + 18) = 4;
    *(_QWORD *)v29 = v28;
    if (v6)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v29, this, a4, a5);
  }
  v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  v36 = 0;
  if (v6 && v33)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v33, this, v34, v35);
    v36 = (unsigned int *)v6;
  }
  v37 = *((_QWORD *)this + 9);
  if (v37 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v37) != 112)
    return 0;
  *((_QWORD *)this + 9) = v37 + 1;
  v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  v41 = 0;
  if (v36 && v38)
  {
    swift::Demangle::__runtime::Node::addChild(v36, v38, this, v39, v40);
    v41 = v36;
  }
  v42 = *((_QWORD *)this + 9);
  if (v42 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v42) != 114)
    return 0;
  *((_QWORD *)this + 9) = v42 + 1;
  v43 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  result = 0;
  if (v41 && v43)
  {
    swift::Demangle::__runtime::Node::addChild(v41, v43, this, v44, v45);
    result = v41;
  }
  v47 = *((_QWORD *)this + 9);
  if (v47 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v47) != 80)
    return 0;
  *((_QWORD *)this + 9) = v47 + 1;
  return result;
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node *v13;
  unsigned int v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 322;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (!v11)
    goto LABEL_18;
  v12 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v11 - 1));
  if (*((_WORD *)v12 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v11 - 1;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v12, this, a4, a5);
    v11 = *((_DWORD *)this + 24);
    if (!v11)
      goto LABEL_18;
  }
  v13 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v11 - 1));
  if (*((_WORD *)v13 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v11 - 1;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v13, this, a4, a5);
    v11 = *((_DWORD *)this + 24);
    if (!v11)
      goto LABEL_18;
  }
  else
  {
    v6 = 0;
  }
  v14 = v11 - 1;
  v15 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v14);
  if (*((_WORD *)v15 + 8) != 232)
  {
LABEL_18:
    v6 = 0;
    goto LABEL_19;
  }
  *((_DWORD *)this + 24) = v14;
  if (v6)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v15, this, a4, a5);
    v16 = v6[1].u8[2];
    if (v16 == 5)
    {
      v30 = v6->u32[2];
      if ((_DWORD)v30)
      {
        v31 = (_QWORD *)(v6->i64[0] + 8 * v30 - 8);
        if ((unint64_t)v31 > v6->i64[0])
        {
          v32 = v6->i64[0] + 8;
          do
          {
            v33 = *(_QWORD *)(v32 - 8);
            *(_QWORD *)(v32 - 8) = *v31;
            *v31-- = v33;
            v34 = v32 >= (unint64_t)v31;
            v32 += 8;
          }
          while (!v34);
        }
      }
    }
    else if (v16 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
LABEL_19:
  v17 = *((_QWORD *)this + 9);
  if (v17 >= *((_QWORD *)this + 8))
  {
    v18 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v17 + 1;
    v18 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v17);
  }
  HIDWORD(v19) = v18;
  LODWORD(v19) = (v18 << 24) - 1677721600;
  v20 = (v19 >> 25);
  v21 = v20 > 7;
  v22 = (1 << v20) & 0xC3;
  if (v21 || v22 == 0)
    return 0;
  v24 = (char)v18;
  v25 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v25;
  if (!v25 || v25 + 24 > *((_QWORD *)this + 2))
  {
    v26 = 2 * *((_QWORD *)this + 4);
    if (v26 <= 0x20)
      v26 = 32;
    *((_QWORD *)this + 4) = v26;
    v27 = v26 + 8;
    v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    *v28 = *((_QWORD *)this + 3);
    v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v28 + v27;
    *((_QWORD *)this + 3) = v28;
  }
  *((_QWORD *)this + 1) = v25 + 24;
  *(_WORD *)(v25 + 16) = 321;
  *(_BYTE *)(v25 + 18) = 4;
  *(_QWORD *)v25 = v24;
  if (v6)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v25, this, a4, a5);
  return v6;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionOrSimpleThunk(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  int v12;
  unsigned int v13;
  swift::Demangle::__runtime::Node *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  swift::Demangle::__runtime::Node *v34;
  uint64_t v35;
  const char *v36;
  unsigned int *v37;
  unint64_t v38;
  swift::Demangle::__runtime::Node *v39;
  uint64_t v40;
  const char *v41;
  unsigned int *result;
  unint64_t v43;

  v7 = (int8x16_t *)((*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)a1 + 1) = v7;
  if (!v7 || (unint64_t)&v7[1].u64[1] > *((_QWORD *)a1 + 2))
  {
    v8 = 2 * *((_QWORD *)a1 + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)a1 + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v11 = (char *)v10 + v9;
    *v10 = *((_QWORD *)a1 + 3);
    v7 = (int8x16_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)a1 + 2) = v11;
    *((_QWORD *)a1 + 3) = v10;
  }
  *((_QWORD *)a1 + 1) = (char *)v7 + 24;
  v7[1].i16[0] = a2;
  v7[1].i8[2] = 0;
  v12 = *((_DWORD *)a1 + 24);
  if (v12)
  {
    do
    {
      v13 = v12 - 1;
      v14 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)a1 + 11) + 8 * v13);
      *((_DWORD *)a1 + 24) = v13;
      if (!v14)
        break;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v14, a1, a4, a5);
      v12 = *((_DWORD *)a1 + 24);
    }
    while (v12);
    v15 = v7[1].u8[2];
    if (v15 == 5)
    {
      v16 = v7->i64[0];
      v17 = v7->u32[2];
      v18 = (_QWORD *)(v7->i64[0] + 8 * v17 - 8);
      if ((_DWORD)v17)
        v19 = (unint64_t)v18 > v16;
      else
        v19 = 0;
      if (v19)
      {
        v20 = v16 + 8;
        do
        {
          v21 = *(_QWORD *)(v20 - 8);
          *(_QWORD *)(v20 - 8) = *v18;
          *v18-- = v21;
          v22 = v20 >= (unint64_t)v18;
          v20 += 8;
        }
        while (!v22);
      }
    }
    else if (v15 == 2)
    {
      *v7 = vextq_s8(*v7, *v7, 8uLL);
    }
  }
  v23 = *((_QWORD *)a1 + 9);
  if (v23 >= *((_QWORD *)a1 + 8))
  {
    v24 = 0;
  }
  else
  {
    *((_QWORD *)a1 + 9) = v23 + 1;
    v24 = *(unsigned __int8 *)(*((_QWORD *)a1 + 7) + v23);
  }
  HIDWORD(v25) = v24;
  LODWORD(v25) = (v24 << 24) - 1677721600;
  v26 = (v25 >> 25);
  v19 = v26 > 7;
  v27 = (1 << v26) & 0xC3;
  if (v19 || v27 == 0)
  {
    v7 = 0;
  }
  else
  {
    v29 = (char)v24;
    v30 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v30;
    if (!v30 || v30 + 24 > *((_QWORD *)a1 + 2))
    {
      v31 = 2 * *((_QWORD *)a1 + 4);
      if (v31 <= 0x20)
        v31 = 32;
      *((_QWORD *)a1 + 4) = v31;
      v32 = v31 + 8;
      v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      *v33 = *((_QWORD *)a1 + 3);
      v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = (char *)v33 + v32;
      *((_QWORD *)a1 + 3) = v33;
    }
    *((_QWORD *)a1 + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 321;
    *(_BYTE *)(v30 + 18) = 4;
    *(_QWORD *)v30 = v29;
    if (v7)
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v30, a1, a4, a5);
  }
  v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(a1);
  v37 = 0;
  if (v7 && v34)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v34, a1, v35, v36);
    v37 = (unsigned int *)v7;
  }
  v38 = *((_QWORD *)a1 + 9);
  if (v38 >= *((_QWORD *)a1 + 8) || *(_BYTE *)(*((_QWORD *)a1 + 7) + v38) != 112)
    return 0;
  *((_QWORD *)a1 + 9) = v38 + 1;
  v39 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(a1);
  result = 0;
  if (v37 && v39)
  {
    swift::Demangle::__runtime::Node::addChild(v37, v39, a1, v40, v41);
    result = v37;
  }
  v43 = *((_QWORD *)a1 + 9);
  if (v43 >= *((_QWORD *)a1 + 8) || *(_BYTE *)(*((_QWORD *)a1 + 7) + v43) != 114)
    return 0;
  *((_QWORD *)a1 + 9) = v43 + 1;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionKind(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v2 = *((_QWORD *)this + 9);
  if (v2 >= *((_QWORD *)this + 8))
  {
    v3 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v2 + 1;
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v2);
  }
  HIDWORD(v4) = v3;
  LODWORD(v4) = (v3 << 24) - 1677721600;
  v5 = (v4 >> 25);
  v6 = v5 > 7;
  v7 = (1 << v5) & 0xC3;
  if (v6 || v7 == 0)
    return 0;
  v9 = (char)v3;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v11 = 2 * *((_QWORD *)this + 4);
    if (v11 <= 0x20)
      v11 = 32;
    *((_QWORD *)this + 4) = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *v13 = *((_QWORD *)this + 3);
    result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v13 + v12;
    *((_QWORD *)this + 3) = v13;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 321;
  *(_BYTE *)(result + 18) = 4;
  *(_QWORD *)result = v9;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexSubset(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2;
  std::string::value_type v3;
  unint64_t v4;
  unint64_t v5;
  size_t size;
  std::string *v7;
  unint64_t Node;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  v2 = *((_QWORD *)this + 9);
  if (v2 >= *((_QWORD *)this + 8))
    v3 = 0;
  else
    v3 = *(_BYTE *)(*((_QWORD *)this + 7) + v2);
  while (v3 == 83 || v3 == 85)
  {
    std::string::push_back(&v10, v3);
    v5 = *((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 9);
    if (v4 < v5)
      *((_QWORD *)this + 9) = ++v4;
    v3 = 0;
    if (v4 < v5)
      v3 = *(_BYTE *)(*((_QWORD *)this + 7) + v4);
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  else
    size = v10.__r_.__value_.__l.__size_;
  if (!size)
  {
    Node = 0;
    if ((*((_BYTE *)&v10.__r_.__value_.__s + 23) & 0x80) == 0)
      return Node;
    goto LABEL_18;
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v10;
  else
    v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 327, v7, size);
  if ((*((_BYTE *)&v10.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_18:
    operator delete(v10.__r_.__value_.__l.__data_);
  return Node;
}

unsigned int *swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int v13;
  swift::Demangle::__runtime::Node *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  swift::Demangle::__runtime::Node *v32;
  uint64_t v33;
  const char *v34;
  unsigned int *v35;
  unint64_t v36;
  swift::Demangle::__runtime::Node *v37;
  uint64_t v38;
  const char *v39;
  unsigned int *v40;
  unint64_t v41;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = (char *)v9 + v8;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 325;
  v6[1].i8[2] = 0;
  v10 = *((_DWORD *)this + 24);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v10 - 1));
    if (*((_WORD *)v12 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v11;
      if (v10 == 1)
        goto LABEL_25;
    }
    else
    {
      v12 = 0;
      v11 = *((_DWORD *)this + 24);
    }
    do
    {
      v13 = v11 - 1;
      v14 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v13);
      *((_DWORD *)this + 24) = v13;
      if (!v14)
        break;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v14, this, a4, a5);
      v11 = *((_DWORD *)this + 24);
    }
    while (v11);
    v15 = v6[1].u8[2];
    if (v15 == 5)
    {
      v16 = v6->i64[0];
      v17 = v6->u32[2];
      v18 = (_QWORD *)(v6->i64[0] + 8 * v17 - 8);
      if ((_DWORD)v17)
        v19 = (unint64_t)v18 > v16;
      else
        v19 = 0;
      if (v19)
      {
        v20 = v16 + 8;
        do
        {
          v21 = *(_QWORD *)(v20 - 8);
          *(_QWORD *)(v20 - 8) = *v18;
          *v18-- = v21;
          v22 = v20 >= (unint64_t)v18;
          v20 += 8;
        }
        while (!v22);
      }
    }
    else if (v15 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_25:
  v23 = *((_QWORD *)this + 9);
  if (v23 >= *((_QWORD *)this + 8))
  {
    v24 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v23 + 1;
    v24 = *(char *)(*((_QWORD *)this + 7) + v23);
  }
  HIDWORD(v26) = v24;
  LODWORD(v26) = v24 - 100;
  v25 = v26 >> 1;
  if (v25 > 7 || ((0x93u >> v25) & 1) == 0)
    return 0;
  v27 = qword_B1A58[v25];
  v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v28;
  if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
  {
    v29 = 2 * *((_QWORD *)this + 4);
    if (v29 <= 0x20)
      v29 = 32;
    *((_QWORD *)this + 4) = v29;
    v30 = v29 + 8;
    v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
    *v31 = *((_QWORD *)this + 3);
    v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v31 + v30;
    *((_QWORD *)this + 3) = v31;
  }
  *((_QWORD *)this + 1) = v28 + 24;
  *(_WORD *)(v28 + 16) = 102;
  *(_BYTE *)(v28 + 18) = 4;
  *(_QWORD *)v28 = v27;
  if (v6)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v28, this, a4, a5);
  v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  v35 = 0;
  if (v6 && v32)
  {
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v32, this, v33, v34);
    v35 = (unsigned int *)v6;
  }
  v36 = *((_QWORD *)this + 9);
  if (v36 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v36) != 112)
    return 0;
  *((_QWORD *)this + 9) = v36 + 1;
  v37 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  v40 = 0;
  if (v35 && v37)
  {
    swift::Demangle::__runtime::Node::addChild(v35, v37, this, v38, v39);
    v40 = v35;
  }
  v41 = *((_QWORD *)this + 9);
  if (v41 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v41) != 114)
    return 0;
  *((_QWORD *)this + 9) = v41 + 1;
  if (v12 && v40)
    swift::Demangle::__runtime::Node::addChild(v40, v12, this, v38, v39);
  return v40;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  swift::Demangle::__runtime::Node *result;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  swift::Demangle::__runtime::NodeFactory *v33;
  swift::Demangle::__runtime::Node *v34;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  swift::Demangle::__runtime::NodeFactory *v48;
  uint64_t v49;
  int v50;
  char *v51;
  swift::Demangle::__runtime::Node *Node;
  uint64_t v53;
  const char *v54;

  v7 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v7;
  if (!v7 || (v8 = *((_QWORD *)a1 + 2), v7 + 24 > v8))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v8 = (unint64_t)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = a2;
  *(_BYTE *)(v7 + 18) = 0;
  v12 = *((_QWORD *)a1 + 8);
  v13 = *((_QWORD *)a1 + 9);
  if (v13 >= v12)
    return 0;
  v14 = v13 + 1;
  *((_QWORD *)a1 + 9) = v13 + 1;
  v15 = *((_QWORD *)a1 + 7);
  result = (swift::Demangle::__runtime::Node *)v7;
  switch(*(_BYTE *)(v15 + v13))
  {
    case 'c':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v18 = v17 + 24 > v8;
      else
        v18 = 1;
      if (v18)
      {
        v19 = 2 * *((_QWORD *)a1 + 4);
        if (v19 <= 0x20)
          v19 = 32;
        *((_QWORD *)a1 + 4) = v19;
        v20 = v19 + 8;
        v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *v21 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v21 + v20;
        *((_QWORD *)a1 + 3) = v21;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 5;
      break;
    case 'd':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 71)
      {
        v14 = v13 + 2;
        *((_QWORD *)a1 + 9) = v13 + 2;
        v22 = 192;
      }
      else
      {
        v22 = 64;
      }
      goto LABEL_74;
    case 'e':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 68)
      {
        v14 = v13 + 2;
        *((_QWORD *)a1 + 9) = v13 + 2;
        v22 = 1088;
      }
      else
      {
        v22 = 1024;
      }
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 71)
      {
        *((_QWORD *)a1 + 9) = ++v14;
        v22 |= 0x80u;
      }
LABEL_74:
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 79)
      {
        *((_QWORD *)a1 + 9) = ++v14;
        v22 |= 0x200u;
      }
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 88)
      {
        *((_QWORD *)a1 + 9) = v14 + 1;
        v22 |= 0x100u;
      }
      v23 = v22;
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (!v17 || v17 + 24 > v8)
        goto LABEL_89;
      goto LABEL_92;
    case 'g':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 88)
      {
        *((_QWORD *)a1 + 9) = v13 + 2;
        v23 = 384;
      }
      else
      {
        v23 = 128;
      }
      goto LABEL_84;
    case 'i':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v24 = v17 + 24 > v8;
      else
        v24 = 1;
      if (v24)
      {
        v25 = 2 * *((_QWORD *)a1 + 4);
        if (v25 <= 0x20)
          v25 = 32;
        *((_QWORD *)a1 + 4) = v25;
        v26 = v25 + 8;
        v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
        *v27 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v27 + v26;
        *((_QWORD *)a1 + 3) = v27;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 6;
      break;
    case 'n':
      return result;
    case 'o':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 88)
      {
        *((_QWORD *)a1 + 9) = v13 + 2;
        v23 = 768;
      }
      else
      {
        v23 = 512;
      }
LABEL_84:
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v44 = v17 + 24 > v8;
      else
        v44 = 1;
      if (v44)
      {
LABEL_89:
        v45 = 2 * *((_QWORD *)a1 + 4);
        if (v45 <= 0x20)
          v45 = 32;
        *((_QWORD *)a1 + 4) = v45;
        v46 = v45 + 8;
        v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
        *v47 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v47 + v46;
        *((_QWORD *)a1 + 3) = v47;
      }
LABEL_92:
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = v23;
      break;
    case 'p':
      if (v14 >= v12)
        return 0;
      result = 0;
      v32 = v13 + 2;
      *((_QWORD *)a1 + 9) = v13 + 2;
      switch(*(_BYTE *)(v15 + v14))
      {
        case 'd':
          v33 = a1;
          v34 = (swift::Demangle::__runtime::Node *)v7;
          v35 = 3;
          return swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber(v33, v34, v35, a4, a5);
        case 'f':
          v48 = a1;
          v49 = 0;
          goto LABEL_106;
        case 'g':
          v48 = a1;
          v49 = 1;
          goto LABEL_106;
        case 'i':
          v33 = a1;
          v34 = (swift::Demangle::__runtime::Node *)v7;
          v35 = 2;
          return swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber(v33, v34, v35, a4, a5);
        case 'k':
          v48 = a1;
          v49 = 9;
LABEL_106:
          result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v48, 80, v49);
          if (result)
            goto LABEL_107;
          return result;
        case 's':
          if (v32 >= v12)
            return 0;
          *((_QWORD *)a1 + 9) = v13 + 3;
          v50 = *(char *)(v15 + v32);
          switch(v50)
          {
            case 'b':
              v51 = "u8";
              break;
            case 'c':
              v51 = "objc";
              break;
            case 'w':
              v51 = "u16";
              break;
            default:
              return 0;
          }
          Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 80, 4);
          if (Node)
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, Node, a1, v53, v54);
          result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 81, v51);
          if (!result)
            return result;
LABEL_107:
          v17 = (unint64_t)result;
          break;
        default:
          return result;
      }
      break;
    case 'r':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v36 = v17 + 24 > v8;
      else
        v36 = 1;
      if (v36)
      {
        v37 = 2 * *((_QWORD *)a1 + 4);
        if (v37 <= 0x20)
          v37 = 32;
        *((_QWORD *)a1 + 4) = v37;
        v38 = v37 + 8;
        v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        *v39 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v39 + v38;
        *((_QWORD *)a1 + 3) = v39;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 8;
      break;
    case 's':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v40 = v17 + 24 > v8;
      else
        v40 = 1;
      if (v40)
      {
        v41 = 2 * *((_QWORD *)a1 + 4);
        if (v41 <= 0x20)
          v41 = 32;
        *((_QWORD *)a1 + 4) = v41;
        v42 = v41 + 8;
        v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
        *v43 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v43 + v42;
        *((_QWORD *)a1 + 3) = v43;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 7;
      break;
    case 'x':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v28 = v17 + 24 > v8;
      else
        v28 = 1;
      if (v28)
      {
        v29 = 2 * *((_QWORD *)a1 + 4);
        if (v29 <= 0x20)
          v29 = 32;
        *((_QWORD *)a1 + 4) = v29;
        v30 = v29 + 8;
        v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
        *v31 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v31 + v30;
        *((_QWORD *)a1 + 3) = v31;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 256;
      break;
    default:
      return 0;
  }
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, (swift::Demangle::__runtime::Node *)v17, a1, a4, a5);
  return (swift::Demangle::__runtime::Node *)v7;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber(swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node *this, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  swift::Demangle::__runtime::Node *v35;
  swift::Demangle::__runtime::Node *v37;

  v7 = a3;
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v11 + v10;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 80;
  *(_BYTE *)(v8 + 18) = 4;
  *(_QWORD *)v8 = v7;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)this, (swift::Demangle::__runtime::Node *)v8, a1, a4, a5);
  v14 = *((_QWORD *)a1 + 9);
  if (v14 >= *((_QWORD *)a1 + 8))
    return 0;
  v37 = this;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  while (1)
  {
    v19 = *((_QWORD *)a1 + 7);
    if (*(unsigned __int8 *)(v19 + v14) - 48 > 9)
      break;
    *((_QWORD *)a1 + 9) = v14 + 1;
    v20 = *(_BYTE *)(v19 + v14);
    if (v17 < v16)
      goto LABEL_10;
    v21 = &v15[v16];
    v22 = (char *)*((_QWORD *)a1 + 1);
    if (v21 != v22)
    {
      v23 = *((_QWORD *)a1 + 2);
LABEL_16:
      if (2 * v16 <= 4)
        v25 = 4;
      else
        v25 = 2 * v16;
      v26 = v25 + v16;
      if (!v22 || (unint64_t)&v22[v26] > v23)
      {
        v27 = 2 * *((_QWORD *)a1 + 4);
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        *((_QWORD *)a1 + 4) = v27;
        v28 = v27 + 8;
        v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        v30 = (char *)v29 + v28;
        *v29 = *((_QWORD *)a1 + 3);
        v22 = (char *)(v29 + 1);
        *((_QWORD *)a1 + 2) = v30;
        *((_QWORD *)a1 + 3) = v29;
      }
      *((_QWORD *)a1 + 1) = &v22[v26];
      if (v16)
        memcpy(v22, v15, v16);
      v15 = v22;
      goto LABEL_9;
    }
    v24 = v21 + 1;
    v23 = *((_QWORD *)a1 + 2);
    if ((unint64_t)v24 > v23)
      goto LABEL_16;
    *((_QWORD *)a1 + 1) = v24;
    LODWORD(v25) = 1;
LABEL_9:
    v16 += v25;
LABEL_10:
    v18 = v17 + 1;
    v15[v17] = v20;
    v14 = *((_QWORD *)a1 + 9);
    ++v17;
    if (v14 >= *((_QWORD *)a1 + 8))
      goto LABEL_28;
  }
  v18 = v17;
LABEL_28:
  if (!v18)
    return 0;
  v31 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v31;
  if (!v31 || v31 + 24 > *((_QWORD *)a1 + 2))
  {
    v32 = 2 * *((_QWORD *)a1 + 4);
    if (v32 <= 0x20)
      v32 = 32;
    *((_QWORD *)a1 + 4) = v32;
    v33 = v32 + 8;
    v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
    *v34 = *((_QWORD *)a1 + 3);
    v31 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v34 + v33;
    *((_QWORD *)a1 + 3) = v34;
  }
  *((_QWORD *)a1 + 1) = v31 + 24;
  *(_WORD *)(v31 + 16) = 81;
  *(_BYTE *)(v31 + 18) = 3;
  *(_QWORD *)v31 = v15;
  *(_QWORD *)(v31 + 8) = v18;
  v35 = v37;
  if (v37)
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v37, (swift::Demangle::__runtime::Node *)v31, a1, v12, v13);
  return v35;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape(swift::Demangle::__runtime::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  swift::Demangle::__runtime::Node *v7;
  unsigned int v8;
  swift::Demangle::__runtime::Node *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v5 - 1));
  if (*((_WORD *)v7 + 8) == 232)
  {
    *((_DWORD *)this + 24) = --v5;
    if (a2 != 71)
      goto LABEL_15;
  }
  else
  {
    v7 = 0;
    if (a2 != 71)
      goto LABEL_15;
  }
  if (v5)
  {
    v8 = v5 - 1;
    v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v8);
    if (*((_WORD *)v9 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v8;
      if (v7)
      {
        v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v10;
        if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
        {
          v11 = 2 * *((_QWORD *)this + 4);
          if (v11 <= 0x20)
            v11 = 32;
          *((_QWORD *)this + 4) = v11;
          v12 = v11 + 8;
          v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
          v14 = (char *)v13 + v12;
          *v13 = *((_QWORD *)this + 3);
          v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v14;
          *((_QWORD *)this + 3) = v13;
        }
        *((_QWORD *)this + 1) = v10 + 24;
        *(_WORD *)(v10 + 16) = 334;
        *(_BYTE *)(v10 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, v9, this, a4, a5);
        goto LABEL_22;
      }
      return 0;
    }
  }
LABEL_15:
  if (!v7)
    return 0;
  v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v10;
  if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
  {
    v15 = 2 * *((_QWORD *)this + 4);
    if (v15 <= 0x20)
      v15 = 32;
    *((_QWORD *)this + 4) = v15;
    v16 = v15 + 8;
    v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    v18 = (char *)v17 + v16;
    *v17 = *((_QWORD *)this + 3);
    v10 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v18;
    *((_QWORD *)this + 3) = v17;
  }
  *((_QWORD *)this + 1) = v10 + 24;
  *(_WORD *)(v10 + 16) = 334;
  *(_BYTE *)(v10 + 18) = 0;
LABEL_22:
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, v7, this, a4, a5);
  return v10;
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleSymbolicExtendedExistentialType(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  const char *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  int v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  swift::Demangle::__runtime::Node *v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;

  v8 = swift::Demangle::__runtime::Demangler::popRetroactiveConformances(this, a2, a3, a4, a5);
  v9 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v9;
  if (!v9 || (unint64_t)&v9[1].u64[1] > *((_QWORD *)this + 2))
  {
    v10 = 2 * *((_QWORD *)this + 4);
    if (v10 <= 0x20)
      v10 = 32;
    *((_QWORD *)this + 4) = v10;
    v11 = v10 + 8;
    v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    v13 = (char *)v12 + v11;
    *v12 = *((_QWORD *)this + 3);
    v9 = (int8x16_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v13;
    *((_QWORD *)this + 3) = v12;
  }
  *((_QWORD *)this + 1) = (char *)v9 + 24;
  v9[1].i16[0] = 235;
  v9[1].i8[2] = 0;
  v14 = *((_DWORD *)this + 24);
  if (!v14)
    return 0;
  do
  {
    v15 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v14 - 1));
    if (*((_WORD *)v15 + 8) != 232)
      break;
    *((_DWORD *)this + 24) = v14 - 1;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, v15, this, v6, v7);
    v14 = *((_DWORD *)this + 24);
  }
  while (v14);
  v16 = v9[1].u8[2];
  if (v16 == 5)
  {
    v17 = v9->i64[0];
    v18 = v9->u32[2];
    v19 = (_QWORD *)(v9->i64[0] + 8 * v18 - 8);
    if ((_DWORD)v18)
      v20 = (unint64_t)v19 > v17;
    else
      v20 = 0;
    if (v20)
    {
      v21 = v17 + 8;
      do
      {
        v22 = *(_QWORD *)(v21 - 8);
        *(_QWORD *)(v21 - 8) = *v19;
        *v19-- = v22;
        v23 = v21 >= (unint64_t)v19;
        v21 += 8;
      }
      while (!v23);
    }
  }
  else if (v16 == 2)
  {
    *v9 = vextq_s8(*v9, *v9, 8uLL);
  }
  if (!v14)
    return 0;
  v24 = v14 - 1;
  v25 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v24);
  *((_DWORD *)this + 24) = v24;
  if (!v25 || (*((_WORD *)v25 + 8) & 0xFFFE) != 0x150)
    return 0;
  if (v8)
  {
    v28 = swift::Demangle::__runtime::Demangler::createWithChildren(this, 338, v25, (swift::Demangle::__runtime::Node *)v9, v8->i8);
    if (!v28)
      return 0;
  }
  else
  {
    if (!v9)
      return v9;
    v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v28;
    if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
    {
      v30 = 2 * *((_QWORD *)this + 4);
      if (v30 <= 0x20)
        v30 = 32;
      *((_QWORD *)this + 4) = v30;
      v31 = v30 + 8;
      v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v33 = (char *)v32 + v31;
      *v32 = *((_QWORD *)this + 3);
      v28 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v33;
      *((_QWORD *)this + 3) = v32;
    }
    *((_QWORD *)this + 1) = v28 + 24;
    *(_WORD *)(v28 + 16) = 338;
    *(_BYTE *)(v28 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v28, v25, this, v6, v7);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v28, (swift::Demangle::__runtime::Node *)v9, this, v34, v35);
  }
  v9 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v9;
  if (!v9 || (unint64_t)&v9[1].u64[1] > *((_QWORD *)this + 2))
  {
    v36 = 2 * *((_QWORD *)this + 4);
    if (v36 <= 0x20)
      v36 = 32;
    *((_QWORD *)this + 4) = v36;
    v37 = v36 + 8;
    v38 = malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
    v39 = (char *)v38 + v37;
    *v38 = *((_QWORD *)this + 3);
    v9 = (int8x16_t *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v39;
    *((_QWORD *)this + 3) = v38;
  }
  *((_QWORD *)this + 1) = (char *)v9 + 24;
  v9[1].i16[0] = 232;
  v9[1].i8[2] = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, (swift::Demangle::__runtime::Node *)v28, this, v26, v27);
  return v9;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1;
  int v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = *((_QWORD *)this + 9);
  if (v1 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v1 + 1;
  v3 = *(char *)(*((_QWORD *)this + 7) + v1);
  if (v3 == 84)
  {
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (!result || result + 24 > *((_QWORD *)this + 2))
    {
      v9 = 2 * *((_QWORD *)this + 4);
      if (v9 <= 0x20)
        v9 = 32;
      *((_QWORD *)this + 4) = v9;
      v10 = v9 + 8;
      v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      *v11 = *((_QWORD *)this + 3);
      result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v11 + v10;
      *((_QWORD *)this + 3) = v11;
    }
    *((_QWORD *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(_BYTE *)(result + 18) = 3;
    *(_QWORD *)result = "@thick";
    v8 = 6;
    goto LABEL_24;
  }
  if (v3 == 111)
  {
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (!result || result + 24 > *((_QWORD *)this + 2))
    {
      v12 = 2 * *((_QWORD *)this + 4);
      if (v12 <= 0x20)
        v12 = 32;
      *((_QWORD *)this + 4) = v12;
      v13 = v12 + 8;
      v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *v14 = *((_QWORD *)this + 3);
      result = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v14 + v13;
      *((_QWORD *)this + 3) = v14;
    }
    *((_QWORD *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(_BYTE *)(result + 18) = 3;
    *(_QWORD *)result = "@objc_metatype";
    v8 = 14;
    goto LABEL_24;
  }
  if (v3 != 116)
    return 0;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v5 = 2 * *((_QWORD *)this + 4);
    if (v5 <= 0x20)
      v5 = 32;
    *((_QWORD *)this + 4) = v5;
    v6 = v5 + 8;
    v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    *v7 = *((_QWORD *)this + 3);
    result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v7 + v6;
    *((_QWORD *)this + 3) = v7;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 146;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = "@thin";
  v8 = 5;
LABEL_24:
  *(_QWORD *)(result + 8) = v8;
  return result;
}

int8x16_t *swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unsigned int v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 84;
  v6[1].i8[2] = 0;
  do
  {
    v14 = *((_DWORD *)this + 24);
    if (!v14)
      return 0;
    v15 = v14 - 1;
    v16 = *((_QWORD *)this + 11);
    v17 = *(unsigned __int16 *)(*(_QWORD *)(v16 + 8 * (v14 - 1)) + 16);
    if (v17 == 275)
    {
      *((_DWORD *)this + 24) = v15;
      --v14;
      if (!v15)
        return 0;
    }
    v11 = v14 - 1;
    v12 = *(unsigned __int16 **)(v16 + 8 * v11);
    v13 = v12[8];
    if ((v13 - 39) >= 4 && v13 != 354 && v13 != 36)
      return 0;
    *((_DWORD *)this + 24) = v11;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, (swift::Demangle::__runtime::Node *)v12, this, a4, a5);
  }
  while (v17 != 275);
  v19 = v6[1].u8[2];
  if (v19 == 5)
  {
    v20 = v6->u32[2];
    if ((_DWORD)v20)
    {
      v21 = (_QWORD *)(v6->i64[0] + 8 * v20 - 8);
      if ((unint64_t)v21 > v6->i64[0])
      {
        v22 = v6->i64[0] + 8;
        do
        {
          v23 = *(_QWORD *)(v22 - 8);
          *(_QWORD *)(v22 - 8) = *v21;
          *v21-- = v23;
          v24 = v22 >= (unint64_t)v21;
          v22 += 8;
        }
        while (!v24);
      }
    }
  }
  else if (v19 == 2)
  {
    *v6 = vextq_s8(*v6, *v6, 8uLL);
  }
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleProtocolList(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  swift::Demangle::__runtime::Node *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;

  v6 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (v7 = *((_QWORD *)this + 2), v6 + 24 > v7))
  {
    v8 = 2 * *((_QWORD *)this + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)this + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v7 = (unint64_t)v10 + v9;
    *v10 = *((_QWORD *)this + 3);
    v6 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v10;
  }
  *(_WORD *)(v6 + 16) = 235;
  *(_BYTE *)(v6 + 18) = 0;
  v11 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v11;
  if (v11)
    v12 = v11 + 24 > v7;
  else
    v12 = 1;
  if (v12)
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
  }
  *((_QWORD *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 190;
  *(_BYTE *)(v11 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, (swift::Demangle::__runtime::Node *)v6, this, a4, a5);
  v21 = *((_DWORD *)this + 24);
  if (v21 && (v22 = v21 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v22) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v22;
  }
  else
  {
    do
    {
      v23 = *((_DWORD *)this + 24);
      if (v23 && (v24 = v23 - 1, v25 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v24), *(_WORD *)(v25 + 16) == 275))
        *((_DWORD *)this + 24) = v24;
      else
        v25 = 0;
      v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this, v17, v18, v19, v20);
      if (!v26)
        return 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v6, v26, this, v27, v28);
    }
    while (!v25);
    v29 = *(unsigned __int8 *)(v6 + 18);
    if (v29 == 5)
    {
      v31 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v31)
      {
        v32 = (_QWORD *)(*(_QWORD *)v6 + 8 * v31 - 8);
        if ((unint64_t)v32 > *(_QWORD *)v6)
        {
          v33 = *(_QWORD *)v6 + 8;
          do
          {
            v34 = *(_QWORD *)(v33 - 8);
            *(_QWORD *)(v33 - 8) = *v32;
            *v32-- = v34;
            v35 = v33 >= (unint64_t)v32;
            v33 += 8;
          }
          while (!v35);
        }
      }
    }
    else if (v29 == 2)
    {
      *(int8x16_t *)v6 = vextq_s8(*(int8x16_t *)v6, *(int8x16_t *)v6, 8uLL);
    }
  }
  return v11;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAccessor(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  __int16 v11;
  swift::Demangle::__runtime::Node *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v8 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v9 = *((_QWORD *)this + 7);
  v11 = 141;
  v12 = a2;
  switch(*(_BYTE *)(v9 + v5))
  {
    case 'G':
      v11 = 100;
      goto LABEL_17;
    case 'M':
      v11 = 152;
      goto LABEL_17;
    case 'W':
      v11 = 51;
      goto LABEL_17;
    case 'a':
      if (v8 >= v6)
        return 0;
      v12 = 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v11 = 169;
      switch(*(_BYTE *)(v9 + v8))
      {
        case 'O':
          goto LABEL_17;
        case 'P':
          v11 = 157;
          goto LABEL_17;
        case 'o':
          v11 = 155;
          goto LABEL_17;
        case 'u':
          v11 = 251;
          goto LABEL_17;
        default:
          return v12;
      }
      return v12;
    case 'g':
      v11 = 98;
      goto LABEL_17;
    case 'i':
      v11 = 126;
      goto LABEL_17;
    case 'l':
      if (v8 >= v6)
        return 0;
      v12 = 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v11 = 168;
      switch(*(_BYTE *)(v9 + v8))
      {
        case 'O':
          goto LABEL_17;
        case 'o':
          v11 = 154;
          goto LABEL_17;
        case 'p':
          v11 = 156;
          goto LABEL_17;
        case 'u':
          v11 = 250;
          goto LABEL_17;
        default:
          return v12;
      }
      return v12;
    case 'm':
      goto LABEL_17;
    case 'p':
      return v12;
    case 'r':
      v11 = 204;
      goto LABEL_17;
    case 's':
      v11 = 215;
      goto LABEL_17;
    case 'w':
      v11 = 257;
LABEL_17:
      if (!a2)
        return 0;
      v12 = (swift::Demangle::__runtime::Node *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 1) = v12;
      if (!v12 || (unint64_t)v12 + 24 > *((_QWORD *)this + 2))
      {
        v13 = 2 * *((_QWORD *)this + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)this + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        v16 = (char *)v15 + v14;
        *v15 = *((_QWORD *)this + 3);
        v12 = (swift::Demangle::__runtime::Node *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 2) = v16;
        *((_QWORD *)this + 3) = v15;
      }
      *((_QWORD *)this + 1) = (char *)v12 + 24;
      *((_WORD *)v12 + 8) = v11;
      *((_BYTE *)v12 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v12, a2, this, a4, a5);
      break;
    default:
      return 0;
  }
  return v12;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleEntity(swift::Demangle::__runtime::Demangler *this, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  unsigned int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  int v18;
  BOOL v19;
  BOOL v20;
  swift::Demangle::__runtime::Node *v21;
  swift::Demangle::__runtime::Node *v22;
  uint64_t v23;
  const char *v24;

  v7 = *((_DWORD *)this + 24);
  if (v7
    && (v8 = v7 - 1,
        v9 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v8),
        *((_WORD *)v9 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    v9 = 0;
  }
  v14 = (char *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v9, a3, a4, a5);
  v15 = *((_DWORD *)this + 24);
  if (!v15
    || ((v16 = v15 - 1,
         v17 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v16),
         v18 = v17[8],
         (v18 - 173) <= 0x3C)
      ? (v19 = ((1 << (v18 + 83)) & 0x100000010000010DLL) == 0)
      : (v19 = 1),
        v19
     && ((v18 - 101) <= 0x24
       ? (v20 = ((1 << (v18 - 101)) & 0x1000800001) == 0)
       : (v20 = 1),
         v20 && v18 != 347)))
  {
    v17 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v16;
  }
  v21 = swift::Demangle::__runtime::Demangler::popContext(this, v10, v11, v12, v13);
  if (v14)
    v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, a2, v21, (swift::Demangle::__runtime::Node *)v17, v14, v9);
  else
    v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, a2, v21, (swift::Demangle::__runtime::Node *)v17, (char *)v9);
  return setParentForOpaqueReturnTypeNodes(this, v22, v9, v23, v24);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMacroExpansion(swift::Demangle::__runtime::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  swift::Demangle::__runtime::Node *v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  int v26;
  unsigned __int16 *v27;
  int v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  swift::Demangle::__runtime::Node *v32;
  uint64_t v33;
  const char *v34;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  swift::Demangle::__runtime::Node *v56;
  unsigned int v57;
  swift::Demangle::__runtime::Node *v58;

  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 < v5)
  {
    v8 = 0;
    v9 = v6 + 1;
    *((_QWORD *)this + 9) = v6 + 1;
    v10 = *((_QWORD *)this + 7);
    v11 = 8;
    v12 = 1;
    switch(*(_BYTE *)(v10 + v6))
    {
      case 'X':
        if (v9 >= v5)
          goto LABEL_75;
        v13 = *(unsigned __int8 *)(v10 + v9);
        if (v13 == 95)
        {
          v14 = 0;
          v9 = v6 + 2;
          *((_QWORD *)this + 9) = v6 + 2;
        }
        else if ((v13 - 48) > 9)
        {
LABEL_75:
          v14 = -1000;
        }
        else
        {
          v36 = 0;
          while (1)
          {
            v37 = *(unsigned __int8 *)(v10 + v9);
            if ((v37 - 48) > 9)
              break;
            v38 = v37 + 10 * v36 - 48;
            if (v38 < v36)
              goto LABEL_75;
            *((_QWORD *)this + 9) = ++v9;
            v36 = v38;
            if (v5 == v9)
            {
              v14 = -1000;
LABEL_84:
              v40 = -1000;
              goto LABEL_85;
            }
          }
          v14 = -1000;
          if ((v36 & 0x80000000) == 0 && v9 < v5 && v37 == 95)
          {
            *((_QWORD *)this + 9) = ++v9;
            v14 = (v36 + 1);
          }
        }
        if (v9 >= v5)
          goto LABEL_84;
        v39 = *(unsigned __int8 *)(v10 + v9);
        if (v39 == 95)
        {
          v40 = 0;
          *((_QWORD *)this + 9) = v9 + 1;
          goto LABEL_85;
        }
        if ((v39 - 48) > 9)
          goto LABEL_84;
        v41 = 0;
        while (1)
        {
          v42 = *(unsigned __int8 *)(v10 + v9);
          if ((v42 - 48) > 9)
            break;
          v43 = v42 + 10 * v41 - 48;
          if (v43 >= v41)
          {
            *((_QWORD *)this + 9) = ++v9;
            v41 = v43;
            if (v5 != v9)
              continue;
          }
          goto LABEL_84;
        }
        v40 = -1000;
        if ((v41 & 0x80000000) == 0 && v9 < v5 && v42 == 95)
        {
          *((_QWORD *)this + 9) = v9 + 1;
          v40 = (v41 + 1);
        }
LABEL_85:
        v44 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v44;
        if (!v44 || v44 + 24 > *((_QWORD *)this + 2))
        {
          v45 = 2 * *((_QWORD *)this + 4);
          if (v45 <= 0x20)
            v45 = 32;
          *((_QWORD *)this + 4) = v45;
          v46 = v45 + 8;
          v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
          v48 = (char *)v47 + v46;
          *v47 = *((_QWORD *)this + 3);
          v44 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v48;
          *((_QWORD *)this + 3) = v47;
        }
        *((_QWORD *)this + 1) = v44 + 24;
        *(_WORD *)(v44 + 16) = 102;
        *(_BYTE *)(v44 + 18) = 4;
        *(_QWORD *)v44 = v14;
        v49 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v49;
        if (!v49 || v49 + 24 > *((_QWORD *)this + 2))
        {
          v50 = 2 * *((_QWORD *)this + 4);
          if (v50 <= 0x20)
            v50 = 32;
          *((_QWORD *)this + 4) = v50;
          v51 = v50 + 8;
          v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
          *v52 = *((_QWORD *)this + 3);
          v49 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v52 + v51;
          *((_QWORD *)this + 3) = v52;
        }
        *((_QWORD *)this + 1) = v49 + 24;
        *(_WORD *)(v49 + 16) = 102;
        *(_BYTE *)(v49 + 18) = 4;
        *(_QWORD *)v49 = v40;
        v53 = *((_DWORD *)this + 24);
        if (v53)
        {
          v54 = v53 - 1;
          v55 = *((_QWORD *)this + 11);
          v56 = *(swift::Demangle::__runtime::Node **)(v55 + 8 * (v53 - 1));
          if (*((_WORD *)v56 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v54;
            if (v53 == 1)
              goto LABEL_103;
          }
          else
          {
            v56 = 0;
            v54 = *((_DWORD *)this + 24);
          }
          v57 = v54 - 1;
          v58 = *(swift::Demangle::__runtime::Node **)(v55 + 8 * v57);
          if (*((_WORD *)v58 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v57;
            return swift::Demangle::__runtime::Demangler::createWithChildren(this, 139, v58, v56, (char *)v44, (swift::Demangle::__runtime::Node *)v49);
          }
        }
        else
        {
          v56 = 0;
        }
LABEL_103:
        v58 = 0;
        return swift::Demangle::__runtime::Demangler::createWithChildren(this, 139, v58, v56, (char *)v44, (swift::Demangle::__runtime::Node *)v49);
      case 'a':
        goto LABEL_17;
      case 'b':
        v11 = 12;
        goto LABEL_17;
      case 'c':
        v11 = 28;
        goto LABEL_17;
      case 'e':
        v11 = 72;
        goto LABEL_17;
      case 'f':
        v12 = 0;
        v15 = (_DWORD *)((char *)this + 96);
        v16 = *((_DWORD *)this + 24);
        v11 = 74;
        if (v16)
        {
          v17 = 1;
          goto LABEL_19;
        }
        v20 = 0;
        v18 = 0;
        v21 = 0;
        goto LABEL_63;
      case 'm':
        v11 = 142;
        goto LABEL_17;
      case 'p':
        v11 = 172;
        goto LABEL_17;
      case 'q':
        v11 = 174;
        goto LABEL_17;
      case 'r':
        v11 = 143;
        goto LABEL_17;
      case 'u':
        v12 = 0;
        v11 = 140;
LABEL_17:
        v15 = (_DWORD *)((char *)this + 96);
        v16 = *((_DWORD *)this + 24);
        if (v16)
        {
          v17 = 0;
LABEL_19:
          v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v16 - 1));
          if (*(_WORD *)(v18 + 16) == 101)
          {
            *v15 = --v16;
            if (!v17)
            {
LABEL_44:
              v19 = v16;
              v20 = 0;
              if (!v12)
              {
LABEL_45:
                v21 = 0;
                if (!v19)
                  goto LABEL_63;
                goto LABEL_46;
              }
LABEL_30:
              if (!v19)
              {
                v21 = 0;
                v12 = 1;
                goto LABEL_63;
              }
              v22 = v19 - 1;
              v21 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v19 - 1));
              v23 = v21[8];
              v24 = (v23 - 173) > 0x3C
                 || ((1 << (v23 + 83)) & 0x100000010000010DLL) == 0;
              if (v24
                && ((v23 - 101) <= 0x24
                  ? (v25 = ((1 << (v23 - 101)) & 0x1000800001) == 0)
                  : (v25 = 1),
                    v25 && v23 != 347))
              {
                v21 = 0;
                v12 = 1;
              }
              else
              {
                *v15 = v22;
                v12 = 1;
                --v19;
                if (!v22)
                  goto LABEL_63;
              }
LABEL_46:
              v26 = v19 - 1;
              v27 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v19 - 1));
              v28 = v27[8];
              v29 = (v28 - 139) > 0x21 || ((1 << (v28 + 117)) & 0x200000019) == 0;
              if (!v29
                || ((v28 - 28) <= 0x2E
                  ? (v30 = ((1 << (v28 - 28)) & 0x500000000001) == 0)
                  : (v30 = 1),
                    v30 ? (v31 = v28 == 8) : (v31 = 1),
                    v31))
              {
                *((_DWORD *)this + 24) = v26;
                v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
                if ((v12 & 1) != 0)
                {
LABEL_64:
                  v8 = (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v11, (swift::Demangle::__runtime::Node *)v27, (swift::Demangle::__runtime::Node *)v21, (char *)v18, v32);
                  if (!v20)
                    return (unint64_t)v8;
LABEL_65:
                  swift::Demangle::__runtime::Node::addChild(v8, v20, this, v33, v34);
                  return (unint64_t)v8;
                }
LABEL_60:
                v8 = (unsigned int *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v11, (swift::Demangle::__runtime::Node *)v27, (swift::Demangle::__runtime::Node *)v18, (char *)v32);
                if (!v20)
                  return (unint64_t)v8;
                goto LABEL_65;
              }
LABEL_63:
              v27 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popContext(this, a2, a3, a4, a5);
              v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
              if (v12)
                goto LABEL_64;
              goto LABEL_60;
            }
          }
          else
          {
            v18 = 0;
            if (!v17)
              goto LABEL_44;
          }
          if (v16)
          {
            v19 = v16 - 1;
            v20 = *(swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * (v16 - 1));
            if (*((_WORD *)v20 + 8) == 176)
            {
              *v15 = v19;
              if ((v12 & 1) == 0)
              {
                v12 = 0;
                v21 = 0;
                if (v16 == 1)
                  goto LABEL_63;
                goto LABEL_46;
              }
              goto LABEL_30;
            }
            goto LABEL_44;
          }
        }
        else
        {
          v18 = 0;
        }
        v19 = 0;
        v20 = 0;
        if (!v12)
          goto LABEL_45;
        goto LABEL_30;
      default:
        return (unint64_t)v8;
    }
  }
  return 0;
}

void swift::Demangle::__runtime::NodeFactory::~NodeFactory(swift::Demangle::__runtime::NodeFactory *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_B5260;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
    *(_BYTE *)(v4 + 48) = 0;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_B5260;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
    *(_BYTE *)(v4 + 48) = 0;
  operator delete();
}

BOOL swift::Mangle::__runtime::isNonAscii(char *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;

  if (!a2)
    return 0;
  v2 = a2 - 1;
  do
  {
    v3 = *a1++;
    v4 = v3 < 0;
    if (v3 < 0)
      break;
  }
  while (v2--);
  return v4;
}

uint64_t swift::Mangle::__runtime::needsPunycodeEncoding(_BYTE *a1, uint64_t a2)
{
  int v4;

  if (!a2)
    return 0;
  while (1)
  {
    if ((*a1 - 48) >= 0xAu && ((*a1 & 0xDF) - 65) >= 0x1Au)
    {
      v4 = *a1;
      if (v4 != 95 && v4 != 36)
        break;
    }
    ++a1;
    if (!--a2)
      return 0;
  }
  return 1;
}

swift::Mangle::__runtime *swift::Mangle::__runtime::translateOperatorChar(swift::Mangle::__runtime *this)
{
  int v2;
  swift::Mangle::__runtime *result;

  v2 = (_DWORD)this - 33;
  result = (swift::Mangle::__runtime *)(&stru_20 + 65);
  switch(v2)
  {
    case 0:
      result = (swift::Mangle::__runtime *)(&stru_68 + 6);
      break;
    case 4:
      result = (swift::Mangle::__runtime *)(&stru_68 + 10);
      break;
    case 5:
      return result;
    case 9:
      result = (swift::Mangle::__runtime *)(&stru_68 + 5);
      break;
    case 10:
      result = (swift::Mangle::__runtime *)(&stru_68 + 8);
      break;
    case 12:
      result = (swift::Mangle::__runtime *)(&stru_68 + 11);
      break;
    case 13:
      result = (swift::Mangle::__runtime *)(&stru_68 + 18);
      break;
    case 14:
      result = (swift::Mangle::__runtime *)(&stru_20 + 68);
      break;
    case 27:
      result = (swift::Mangle::__runtime *)(&stru_68 + 4);
      break;
    case 28:
      result = (swift::Mangle::__runtime *)(&stru_20 + 69);
      break;
    case 29:
      result = (swift::Mangle::__runtime *)(&stru_20 + 71);
      break;
    case 30:
      result = (swift::Mangle::__runtime *)(&stru_68 + 9);
      break;
    case 31:
      result = (swift::Mangle::__runtime *)(&stru_20 + 67);
      break;
    case 61:
      result = (swift::Mangle::__runtime *)(&stru_68 + 16);
      break;
    case 91:
      result = (swift::Mangle::__runtime *)(&stru_68 + 7);
      break;
    case 93:
      result = (swift::Mangle::__runtime *)(&stru_68 + 12);
      break;
    default:
      result = this;
      break;
  }
  return result;
}

void swift::Mangle::__runtime::translateOperator(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  unsigned int v6;
  std::string::value_type v7;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    v3 = a2;
    do
    {
      v6 = *a1++;
      v7 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v6);
      std::string::push_back(a3, v7);
      --v3;
    }
    while (v3);
  }
}

_QWORD *swift::Mangle::__runtime::getStandardTypeSubst@<X0>(_QWORD *result@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  const char *v8;
  const char *v17;
  char v18;

  v6 = result;
  switch(a2)
  {
    case 3uLL:
      result = (_QWORD *)memcmp(result, "Set", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Int", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "i";
      }
      else
      {
        v8 = "h";
      }
      goto LABEL_167;
    case 4uLL:
      result = (_QWORD *)memcmp(result, "Bool", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "UInt", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "u";
      }
      else
      {
        v8 = "b";
      }
      goto LABEL_167;
    case 5uLL:
      result = (_QWORD *)memcmp(result, "Array", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Float", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "Range", a2);
          if ((_DWORD)result)
            goto LABEL_97;
          v8 = "n";
        }
        else
        {
          v8 = "f";
        }
      }
      else
      {
        v8 = "a";
      }
      goto LABEL_167;
    case 6uLL:
      result = (_QWORD *)memcmp(result, "Double", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "String", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "S";
      }
      else
      {
        v8 = "d";
      }
      goto LABEL_167;
    case 7uLL:
      result = (_QWORD *)memcmp(result, "Numeric", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "j";
      goto LABEL_167;
    case 8uLL:
      result = (_QWORD *)memcmp(result, "Optional", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Hashable", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "Sequence", a2);
          if ((_DWORD)result)
            goto LABEL_97;
          v8 = "T";
        }
        else
        {
          v8 = "H";
        }
      }
      else
      {
        v8 = "q";
      }
      goto LABEL_167;
    case 9uLL:
      result = (_QWORD *)memcmp(result, "Character", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Substring", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "Encodable", a2);
          if ((_DWORD)result)
          {
            if (*v6 == 0x6C6261646F636544 && *((_BYTE *)v6 + 8) == 101)
            {
              v8 = "e";
            }
            else
            {
              result = (_QWORD *)memcmp(v6, "Equatable", a2);
              if ((_DWORD)result)
                goto LABEL_97;
              v8 = "Q";
            }
          }
          else
          {
            v8 = "E";
          }
        }
        else
        {
          v8 = "s";
        }
      }
      else
      {
        v8 = "J";
      }
      goto LABEL_167;
    case 0xAuLL:
      result = (_QWORD *)memcmp(result, "Dictionary", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Comparable", a2);
        if ((_DWORD)result)
        {
          if (*v6 == 0x697463656C6C6F43 && *((_WORD *)v6 + 4) == 28271)
          {
            v8 = "l";
          }
          else
          {
            result = (_QWORD *)memcmp(v6, "Strideable", a2);
            if ((_DWORD)result)
              goto LABEL_97;
            v8 = "x";
          }
        }
        else
        {
          v8 = "L";
        }
      }
      else
      {
        v8 = "D";
      }
      goto LABEL_167;
    case 0xBuLL:
      result = (_QWORD *)memcmp(result, "ClosedRange", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "N";
      goto LABEL_167;
    case 0xDuLL:
      result = (_QWORD *)memcmp(result, "UnsafePointer", a2);
      if (!(_DWORD)result)
      {
        v8 = "P";
        goto LABEL_167;
      }
      result = (_QWORD *)memcmp(v6, "FloatingPoint", a2);
      if (!(_DWORD)result)
      {
        v8 = "F";
        goto LABEL_167;
      }
      result = (_QWORD *)memcmp(v6, "SignedInteger", a2);
      if (!(_DWORD)result)
      {
        v8 = "Z";
        goto LABEL_167;
      }
      if (*v6 == 0x6E497972616E6942 && *(_QWORD *)((char *)v6 + 5) == 0x72656765746E4979)
      {
        v8 = "z";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0xEuLL:
      result = (_QWORD *)memcmp(result, "DefaultIndices", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "StringProtocol", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "y";
      }
      else
      {
        v8 = "I";
      }
      goto LABEL_167;
    case 0xFuLL:
      result = (_QWORD *)memcmp(result, "UnsignedInteger", a2);
      if (!(_DWORD)result)
      {
        v8 = "U";
        goto LABEL_167;
      }
      if (*v6 == 0x70784565676E6152 && *(_QWORD *)((char *)v6 + 7) == 0x6E6F697373657270)
      {
        v8 = "X";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0x10uLL:
      result = (_QWORD *)memcmp(result, "ObjectIdentifier", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "UnsafeRawPointer", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "IteratorProtocol", a2);
          if ((_DWORD)result)
          {
            result = (_QWORD *)memcmp(v6, "RawRepresentable", a2);
            if ((_DWORD)result)
              goto LABEL_97;
            v8 = "Y";
          }
          else
          {
            v8 = "t";
          }
        }
        else
        {
          v8 = "V";
        }
      }
      else
      {
        v8 = "O";
      }
      goto LABEL_167;
    case 0x11uLL:
      result = (_QWORD *)memcmp(result, "MutableCollection", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "M";
      goto LABEL_167;
    case 0x13uLL:
      result = (_QWORD *)memcmp(result, "UnsafeBufferPointer", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "BinaryFloatingPoint", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "B";
      }
      else
      {
        v8 = "R";
      }
      goto LABEL_167;
    case 0x14uLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutablePointer", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "p";
      goto LABEL_167;
    case 0x15uLL:
      result = (_QWORD *)memcmp(result, "RandomNumberGenerator", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "G";
      goto LABEL_167;
    case 0x16uLL:
      result = (_QWORD *)memcmp(result, "UnsafeRawBufferPointer", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "RandomAccessCollection", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "k";
      }
      else
      {
        v8 = "W";
      }
      goto LABEL_167;
    case 0x17uLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutableRawPointer", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "BidirectionalCollection", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "K";
      }
      else
      {
        v8 = "v";
      }
      goto LABEL_167;
    case 0x1AuLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutableBufferPointer", a2);
      if (!(_DWORD)result)
      {
        v8 = "r";
        goto LABEL_167;
      }
      result = (_QWORD *)memcmp(v6, "RangeReplaceableCollection", a2);
      if (!(_DWORD)result)
      {
        v8 = "m";
LABEL_167:
        *(_QWORD *)a4 = v8;
        *(_QWORD *)(a4 + 8) = 1;
        v18 = 1;
        goto LABEL_168;
      }
LABEL_97:
      if (a3)
      {
        switch(a2)
        {
          case 4uLL:
            result = (_QWORD *)memcmp(v6, "Task", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cT";
            goto LABEL_171;
          case 5uLL:
            if (*(_DWORD *)v6 != 1869898561 || *((_BYTE *)v6 + 4) != 114)
              goto LABEL_150;
            v17 = "cA";
            goto LABEL_171;
          case 8uLL:
            result = (_QWORD *)memcmp(v6, "Executor", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cF";
            goto LABEL_171;
          case 9uLL:
            result = (_QWORD *)memcmp(v6, "TaskGroup", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "MainActor", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cM";
            }
            else
            {
              v17 = "cG";
            }
            goto LABEL_171;
          case 0xAuLL:
            result = (_QWORD *)memcmp(v6, "UnownedJob", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cJ";
            goto LABEL_171;
          case 0xBuLL:
            result = (_QWORD *)memcmp(v6, "AsyncStream", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cS";
            goto LABEL_171;
          case 0xCuLL:
            result = (_QWORD *)memcmp(v6, "TaskExecutor", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "TaskPriority", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cP";
            }
            else
            {
              v17 = "ch";
            }
            goto LABEL_171;
          case 0xDuLL:
            result = (_QWORD *)memcmp(v6, "AsyncSequence", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "ci";
            goto LABEL_171;
          case 0xEuLL:
            result = (_QWORD *)memcmp(v6, "SerialExecutor", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cf";
            goto LABEL_171;
          case 0x11uLL:
            result = (_QWORD *)memcmp(v6, "CancellationError", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "ThrowingTaskGroup", a2);
              if ((_DWORD)result)
              {
                result = (_QWORD *)memcmp(v6, "UnsafeCurrentTask", a2);
                if ((_DWORD)result)
                  goto LABEL_150;
                v17 = "ct";
              }
              else
              {
                v17 = "cg";
              }
            }
            else
            {
              v17 = "cE";
            }
            goto LABEL_171;
          case 0x12uLL:
            result = (_QWORD *)memcmp(v6, "UnsafeContinuation", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cc";
            goto LABEL_171;
          case 0x13uLL:
            result = (_QWORD *)memcmp(v6, "CheckedContinuation", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "AsyncThrowingStream", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cs";
            }
            else
            {
              v17 = "cC";
            }
            goto LABEL_171;
          case 0x15uLL:
            result = (_QWORD *)memcmp(v6, "UnownedSerialExecutor", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "AsyncIteratorProtocol", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cI";
            }
            else
            {
              v17 = "ce";
            }
LABEL_171:
            *(_QWORD *)a4 = v17;
            *(_QWORD *)(a4 + 8) = 2;
            v18 = 1;
            break;
          default:
            goto LABEL_150;
        }
      }
      else
      {
LABEL_150:
        v18 = 0;
        *(_BYTE *)a4 = 0;
      }
LABEL_168:
      *(_BYTE *)(a4 + 16) = v18;
      return result;
    case 0x1DuLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutableRawBufferPointer", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "w";
      goto LABEL_167;
    case 0x21uLL:
      if (*result != 0x656C65726F747541
        || result[1] != 0x736E55676E697361
        || result[2] != 0x626174754D656661
        || result[3] != 0x65746E696F50656CLL
        || *((_BYTE *)result + 32) != 114)
      {
        goto LABEL_97;
      }
      v18 = 1;
      *(_QWORD *)a4 = "A";
      *(_QWORD *)(a4 + 8) = 1;
      goto LABEL_168;
    default:
      goto LABEL_97;
  }
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, uint64_t a2)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

{
  char __str[32];

  snprintf(__str, 0x20uLL, "%lld", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::writeHex(std::string *a1, uint64_t a2)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%llX", a2);
  std::string::append(a1, __str);
  return a1;
}

double swift::Demangle::__runtime::genericParameterName@<D0>(swift::Demangle::__runtime *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  BOOL v6;
  double result;
  std::string v8;
  char __str[32];

  memset(&v8, 0, sizeof(v8));
  do
  {
    std::string::push_back(&v8, a2 % 0x1A + 65);
    v6 = a2 > 0x19;
    a2 /= 0x1AuLL;
  }
  while (v6);
  if (this)
  {
    snprintf(__str, 0x20uLL, "%llu", this);
    std::string::append(&v8, __str);
  }
  result = *(double *)&v8.__r_.__value_.__l.__data_;
  *a3 = v8;
  return result;
}

uint64_t **matchSequenceOfKinds(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *i;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  if (result)
  {
    v2 = ((uint64_t)(a2[1] - *a2) >> 4) + 1;
    for (i = (unint64_t *)(*a2 + 8); ; i += 2)
    {
      if (!--v2)
        return result;
      v4 = *((unsigned __int16 *)i - 4);
      v5 = *i;
      v6 = *((unsigned __int8 *)result + 18);
      v7 = v6 - 1;
      if ((_DWORD)v6 != 1)
      {
        if ((_DWORD)v6 == 5)
        {
          if (*((unsigned int *)result + 2) <= v5)
            return 0;
          goto LABEL_11;
        }
        if ((_DWORD)v6 != 2)
          return 0;
        v6 = 2;
      }
      if (v6 <= v5)
        return 0;
LABEL_11:
      if (v7 >= 2)
        result = (uint64_t **)*result;
      result = (uint64_t **)result[v5];
      if (!result)
        return result;
      if (*((unsigned __int16 *)result + 8) != v4)
        return 0;
    }
  }
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString(swift::Demangle::__runtime *this, const char *a2)
{
  _BYTE v2[8];
  uint64_t v3;
  char v4;

  v4 = 3;
  LODWORD(v3) = 2112095;
  swift::Demangle::__runtime::Context::Context((swift::Demangle::__runtime::Context *)v2);
}

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_1::operator()(_QWORD *a1@<X0>, char *a2@<X8>)
{
  int v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::string::size_type v7;
  const void *v8;
  unint64_t v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  std::string __p;
  std::string __dst;
  std::string v23;

  v3 = *((unsigned __int16 *)a1 + 8);
  if (v3 != 137)
  {
    if (v3 != 101)
    {
      a2[23] = 9;
      strcpy(a2, "<unknown>");
      return;
    }
    v4 = a1[1];
    if (v4 <= 0x7FFFFFFFFFFFFFF7)
    {
      v5 = (_QWORD *)*a1;
      if (v4 >= 0x17)
      {
        v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v11 = v4 | 7;
        v12 = v11 + 1;
        v13 = (char *)operator new(v11 + 1);
        *((_QWORD *)a2 + 1) = v4;
        *((_QWORD *)a2 + 2) = v12 | 0x8000000000000000;
        *(_QWORD *)a2 = v13;
        a2 = v13;
      }
      else
      {
        a2[23] = v4;
        if (!v4)
          goto LABEL_18;
      }
      memmove(a2, v5, v4);
LABEL_18:
      a2[v4] = 0;
      return;
    }
LABEL_36:
    abort();
  }
  if (*((_BYTE *)a1 + 18) == 5)
    a1 = (_QWORD *)*a1;
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_36;
  v8 = *(const void **)v6;
  v9 = *(_QWORD *)*a1 + 1;
  if (v7 >= 0x17)
  {
    v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v14 = v7 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v6 + 8);
  p_dst = &__dst;
  if (v7)
LABEL_22:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v16 = std::string::append(&__dst, " #");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  *(std::string *)a2 = *v20;
  v20->__r_.__value_.__r.__words[0] = 0;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_0::operator()(uint64_t **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;

  v3 = **a1;
  if (0xAAAAAAAAAAAAAAABLL * (((*a1)[1] - v3) >> 3) <= a2)
  {
    *(_BYTE *)(a3 + 23) = 9;
    strcpy((char *)a3, "<unknown>");
  }
  else
  {
    v4 = (__int128 *)(v3 + 24 * a2);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)a3 = v5;
    }
  }
}

_QWORD *std::string::basic_string<__swift::__runtime::llvm::StringRef,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v2;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v2;
    v5 = __dst;
    if (!v2)
      goto LABEL_9;
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((_BYTE *)v5 + v2) = 0;
  return __dst;
}

void swift::Demangle::__runtime::nodeToString(swift::Demangle::__runtime::Node *a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  std::string __p;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int16 v23;

  if (!a1)
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v12 = *a2;
  v13 = a2[1];
  v14 = *((_QWORD *)a2 + 4);
  v5 = v15;
  v6 = (__int128 *)*((_QWORD *)a2 + 8);
  if (v6)
  {
    if (v6 == (__int128 *)((char *)a2 + 40))
    {
      v16 = v15;
      (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v15);
      v7 = v16;
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v6 + 16))(v6);
      v16 = v7;
    }
    memset(&__p, 0, sizeof(__p));
    v18 = v12;
    v19 = v13;
    v20 = v14;
    v9 = v21;
    if (v7)
    {
      if (v7 == v15)
      {
        v22 = v21;
        (*(void (**)(_QWORD *, _BYTE *))(v15[0] + 24))(v15, v21);
      }
      else
      {
        v22 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v16 = 0;
    memset(&__p, 0, sizeof(__p));
    v8 = a2[1];
    v18 = *a2;
    v19 = v8;
    v20 = *((_QWORD *)a2 + 4);
    v9 = v21;
    v22 = 0;
  }
  v23 = 256;
  if (HIBYTE(v23))
  {
    *a3 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  if (v22 == v21)
  {
    v10 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v10 = 5;
    v9 = v22;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_21:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v16 == v15)
  {
    v11 = 4;
  }
  else
  {
    if (!v16)
      return;
    v11 = 5;
    v5 = v16;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v11))(v5);
}

swift::Demangle::__runtime::Node *`anonymous namespace'::NodePrinter::print(std::string *this, swift::Demangle::__runtime::Node *a2, unsigned int a3, char a4)
{
  __int16 *v4;
  uint64_t v6;
  unsigned int v8;
  char v9;
  swift::Demangle::__runtime::Node *v11;
  int v12;
  int v13;
  swift::Demangle::__runtime::Node **v14;
  swift::Demangle::__runtime::Node *v15;
  const std::string::value_type *v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  swift::Demangle::__runtime::Node *v27;
  unint64_t v28;
  const std::string::value_type *v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  int v34;
  uint64_t v35;
  int v36;
  swift::Demangle::__runtime::Node **v37;
  swift::Demangle::__runtime::Node *v38;
  int v39;
  swift::Demangle::__runtime::Node **v40;
  swift::Demangle::__runtime::Node *v41;
  int v42;
  swift::Demangle::__runtime::Node **v43;
  const std::string::value_type *v44;
  std::string *v45;
  std::string::size_type v46;
  int v47;
  swift::Demangle::__runtime::Node *v48;
  int v49;
  swift::Demangle::__runtime::Node **v50;
  swift::Demangle::__runtime::Node *v51;
  int v52;
  swift::Demangle::__runtime::Node *v53;
  swift::Demangle::__runtime::Node *v54;
  const std::string::value_type ***v55;
  int v56;
  int v57;
  swift::Demangle::__runtime::Node **v58;
  int v59;
  swift::Demangle::__runtime::Node **v60;
  int v61;
  swift::Demangle::__runtime::Node *v62;
  swift::Demangle::__runtime::Node *v63;
  int v64;
  swift::Demangle::__runtime::Node *v65;
  int v66;
  swift::Demangle::__runtime::Node **v67;
  int v68;
  swift::Demangle::__runtime::Node **v69;
  swift::Demangle::__runtime::Node *v70;
  uint64_t v71;
  const std::string::value_type *v72;
  std::string *v73;
  std::string::size_type v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  unsigned __int16 *v78;
  swift::Demangle::__runtime::Node *v79;
  int v80;
  const std::string::value_type *v81;
  std::string *v82;
  std::string::size_type v83;
  int v84;
  int v85;
  swift::Demangle::__runtime::Node **v86;
  swift::Demangle::__runtime::Node *v87;
  int v88;
  int v89;
  swift::Demangle::__runtime::Node *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const std::string::value_type *v95;
  std::string *v96;
  std::string::size_type v97;
  int v98;
  swift::Demangle::__runtime::Node *v99;
  swift::Demangle::__runtime::Node *v100;
  int v101;
  swift::Demangle::__runtime::Node **v102;
  swift::Demangle::__runtime::Node *v103;
  int v104;
  swift::Demangle::__runtime::Node **v105;
  swift::Demangle::__runtime::Node *v106;
  int v107;
  swift::Demangle::__runtime::Node *v108;
  unsigned int v109;
  int v110;
  swift::Demangle::__runtime::Node *v111;
  int v112;
  int v113;
  swift::Demangle::__runtime::Node **v114;
  swift::Demangle::__runtime::Node *v115;
  const std::string::value_type *v116;
  std::string *v117;
  std::string::size_type v118;
  int v119;
  unsigned int v120;
  swift::Demangle::__runtime::Node *v121;
  int v122;
  swift::Demangle::__runtime::Node **v123;
  swift::Demangle::__runtime::Node *v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  swift::Demangle::__runtime::Node **v129;
  swift::Demangle::__runtime::Node *v130;
  const std::string::value_type *v131;
  std::string *v132;
  std::string::size_type v133;
  int v134;
  swift::Demangle::__runtime::Node *v135;
  swift::Demangle::__runtime::Node *v136;
  int v137;
  swift::Demangle::__runtime::Node **v138;
  swift::Demangle::__runtime::Node *v139;
  int v140;
  swift::Demangle::__runtime::Node *v141;
  int v142;
  swift::Demangle::__runtime::Node **v143;
  swift::Demangle::__runtime::Node *v144;
  int v145;
  std::string *v146;
  swift::Demangle::__runtime::Node **v147;
  swift::Demangle::__runtime::Node *v148;
  swift::Demangle::__runtime::Node *v149;
  int v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  swift::Demangle::__runtime::Node *v154;
  int v155;
  swift::Demangle::__runtime::Node *v156;
  swift::Demangle::__runtime::Node *v157;
  const std::string::value_type *v158;
  std::string *v159;
  std::string::size_type v160;
  int v161;
  int v162;
  unint64_t v163;
  swift::Demangle::__runtime::Node *v164;
  swift::Demangle::__runtime::Node *v165;
  unint64_t v166;
  swift::Demangle::__runtime::Node *v167;
  swift::Demangle::__runtime::Node *v168;
  unint64_t v169;
  swift::Demangle::__runtime::Node *v170;
  swift::Demangle::__runtime::Node *v171;
  swift::Demangle::__runtime::Node *v172;
  unint64_t v173;
  unint64_t v174;
  swift::Demangle::__runtime::Node *v175;
  unint64_t v176;
  char v177;
  swift::Demangle::__runtime::Node *v178;
  unsigned int v179;
  swift::Demangle::__runtime::Node *v180;
  const std::string::value_type *v181;
  std::string *v182;
  std::string::size_type v183;
  int v184;
  __int16 *v185;
  unsigned __int16 *v186;
  swift::Demangle::__runtime::Node *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  const std::string::value_type *v192;
  int v193;
  int v194;
  int v195;
  swift::Demangle::__runtime::Node *v196;
  swift::Demangle::__runtime::Node *v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  swift::Demangle::__runtime::Node *v201;
  swift::Demangle::__runtime::Node *v202;
  const std::string::value_type *v203;
  std::string *v204;
  std::string::size_type v205;
  int v206;
  uint64_t v207;
  int v208;
  swift::Demangle::__runtime::Node *v209;
  swift::Demangle::__runtime::Node *v210;
  swift::Demangle::__runtime::Node *v211;
  unsigned int v212;
  swift::Demangle::__runtime::Node *v213;
  swift::Demangle::__runtime::Node *v214;
  unint64_t v215;
  unsigned int v216;
  swift::Demangle::__runtime::Node *v217;
  unsigned int v218;
  swift::Demangle::__runtime::Node *v219;
  swift::Demangle::__runtime::Node *v220;
  swift::Demangle::__runtime::Node *v221;
  unint64_t v222;
  unint64_t v223;
  std::string *v224;
  std::string::size_type v225;
  uint64_t v226;
  unint64_t v227;
  swift::Demangle::__runtime::Node *v228;
  unint64_t v229;
  char v230;
  swift::Demangle::__runtime::Node *v231;
  swift::Demangle::__runtime::Node *v232;
  unint64_t v233;
  unsigned int v234;
  unint64_t v235;
  swift::Demangle::__runtime::Node *v236;
  swift::Demangle::__runtime::Node *v237;
  unint64_t v238;
  unsigned int v239;
  unint64_t v240;
  swift::Demangle::__runtime::Node *v241;
  swift::Demangle::__runtime::Node *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unsigned int v246;
  int v247;
  swift::Demangle::__runtime::Node *v248;
  swift::Demangle::__runtime::Node *v249;
  swift::Demangle::__runtime::Node *v250;
  unint64_t v251;
  swift::Demangle::__runtime::Node *v252;
  swift::Demangle::__runtime::Node *v253;
  unsigned int v254;
  swift::Demangle::__runtime::Node *v255;
  __int16 *v256;
  swift::Demangle::__runtime::Node *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unsigned int v261;
  swift::Demangle::__runtime::Node *v262;
  unint64_t v263;
  unsigned int v264;
  swift::Demangle::__runtime::Node *v265;
  int v266;
  swift::Demangle::__runtime::Node **v267;
  swift::Demangle::__runtime::Node *v268;
  unint64_t v269;
  unsigned int v270;
  swift::Demangle::__runtime::Node *v271;
  swift::Demangle::__runtime::Node *v272;
  int v273;
  int v274;
  BOOL v275;
  const std::string::value_type *v276;
  std::string *v277;
  std::string::size_type v278;
  swift::Demangle::__runtime::Node *result;
  std::string *v280;
  swift::Demangle::__runtime::Node *v281;
  swift::Demangle::__runtime::Node *v282;
  std::string::value_type *v283;
  int v284;
  _anonymous_namespace_::NodePrinter *v285;
  uint64_t *v286;
  int v287;
  int v288;
  const std::string::value_type *v289;
  std::string *v290;
  uint64_t *v291;
  std::string::size_type v292;
  std::string::size_type v293;
  const std::string::value_type *v294;
  std::string *v295;
  const std::string::value_type *v296;
  int v297;
  swift::Demangle::__runtime::Node **v298;
  swift::Demangle::__runtime::Node *v299;
  const std::string::value_type *v300;
  std::string::size_type v301;
  const std::string::value_type *v302;
  std::string *v303;
  std::string::size_type v304;
  int v305;
  const std::string::value_type *v306;
  std::string::size_type v307;
  int v308;
  unsigned int v309;
  int v310;
  uint64_t v311;
  swift::Demangle::__runtime::Node *v312;
  const std::string::value_type *v313;
  std::string::size_type v314;
  uint64_t v315;
  int v316;
  int v317;
  swift::Demangle::__runtime::Node **v318;
  unsigned int v319;
  unint64_t v320;
  swift::Demangle::__runtime::Node *v321;
  unint64_t v322;
  int v323;
  unint64_t v324;
  unsigned int v325;
  swift::Demangle::__runtime::Node *v326;
  int v327;
  uint64_t v328;
  const std::string::value_type *v329;
  std::string *v330;
  uint64_t *v331;
  std::string::size_type v332;
  uint64_t v333;
  int v334;
  const std::string::value_type ***v335;
  int v336;
  swift::Demangle::__runtime::Node *v337;
  const std::string::value_type *v338;
  std::string *v339;
  std::string::size_type v340;
  const std::string::value_type *v341;
  std::string *v342;
  std::string::size_type v343;
  int v344;
  int v345;
  swift::Demangle::__runtime::Node **v346;
  unsigned int v347;
  unint64_t v348;
  char v349;
  int v350;
  swift::Demangle::__runtime::Node *v351;
  swift::Demangle::__runtime::Node *v352;
  int v353;
  swift::Demangle::__runtime::Node **v354;
  swift::Demangle::__runtime::Node *v355;
  int v356;
  swift::Demangle::__runtime::Node **v357;
  swift::Demangle::__runtime::Node *v358;
  int v359;
  unsigned int v360;
  swift::Demangle::__runtime::Node **v361;
  swift::Demangle::__runtime::Node *v362;
  const std::string::value_type *v363;
  std::string *v364;
  std::string::size_type v365;
  swift::Demangle::__runtime::Node *v366;
  int v367;
  int v368;
  int v369;
  swift::Demangle::__runtime::Node *v370;
  int v371;
  const std::string::value_type *v372;
  std::string *v373;
  std::string::size_type v374;
  uint64_t v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  swift::Demangle::__runtime::Node **v382;
  swift::Demangle::__runtime::Node *v383;
  int v384;
  swift::Demangle::__runtime::Node **v385;
  swift::Demangle::__runtime::Node *v386;
  uint64_t v387;
  int v388;
  int v389;
  swift::Demangle::__runtime::Node *v390;
  int v391;
  int v392;
  swift::Demangle::__runtime::Node **v393;
  unsigned int v394;
  unint64_t v395;
  char v396;
  int v397;
  int v398;
  int v399;
  swift::Demangle::__runtime::Node *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  const std::string::value_type *v404;
  std::string *v405;
  std::string::size_type v406;
  swift::Demangle::__runtime::Node *v407;
  size_t v408;
  int v409;
  swift::Demangle::__runtime::Node **v410;
  swift::Demangle::__runtime::Node *v411;
  const char *v412;
  int v413;
  int v414;
  swift::Demangle::__runtime::Node *v415;
  int v416;
  swift::Demangle::__runtime::Node *v417;
  int v418;
  int v419;
  swift::Demangle::__runtime::Node *v420;
  int v421;
  swift::Demangle::__runtime::Node *v422;
  swift::Demangle::__runtime::Node *v423;
  int v424;
  uint64_t v425;
  int v426;
  swift::Demangle::__runtime::Node *v427;
  uint64_t v428;
  unint64_t v429;
  std::string::value_type v430;
  int v431;
  unsigned int v432;
  swift::Demangle::__runtime::Node *v433;
  unsigned int v434;
  uint64_t v435;
  int v436;
  swift::Demangle::__runtime::Node *v437;
  unsigned int v438;
  _anonymous_namespace_::NodePrinter *v439;
  uint64_t v440;
  uint64_t v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  swift::Demangle::__runtime::Node *const *v446;
  int v447;
  unsigned int v448;
  int v449;
  swift::Demangle::__runtime::Node **v450;
  swift::Demangle::__runtime::Node *v451;
  int v452;
  int v453;
  swift::Demangle::__runtime::Node *v454;
  swift::Demangle::__runtime::Node *v455;
  int v456;
  int v457;
  swift::Demangle::__runtime::Node *v458;
  swift::Demangle::__runtime::Node *v459;
  int v460;
  std::string *p_str;
  std::string::size_type size;
  uint64_t ChildIf;
  swift::Demangle::__runtime::Node *v464;
  int v465;
  int v466;
  _DWORD *v467;
  int v468;
  swift::Demangle::__runtime::Node *v469;
  int v470;
  int v471;
  swift::Demangle::__runtime::Node *v472;
  int v473;
  swift::Demangle::__runtime::Node *v474;
  int v475;
  swift::Demangle::__runtime::Node *v476;
  std::string *v477;
  int v478;
  swift::Demangle::__runtime::Node **v479;
  swift::Demangle::__runtime::Node *v480;
  int v481;
  int v482;
  swift::Demangle::__runtime::Node **v483;
  swift::Demangle::__runtime::Node *v484;
  uint64_t v485;
  int v486;
  swift::Demangle::__runtime::Node *v487;
  int v488;
  swift::Demangle::__runtime::Node **v489;
  swift::Demangle::__runtime::Node *v490;
  int v491;
  swift::Demangle::__runtime::Node **v492;
  const std::string::value_type *v493;
  std::string *v494;
  std::string::size_type v495;
  std::string *v496;
  std::string::size_type v497;
  std::string::value_type *v498;
  size_t v499;
  uint64_t (***v500)();
  uint64_t v501;
  unsigned int v502;
  int v503;
  swift::Demangle::__runtime::Node *v504;
  swift::Demangle::__runtime::Node *v505;
  uint64_t v506;
  unsigned int v507;
  int v508;
  swift::Demangle::__runtime::Node *v509;
  swift::Demangle::__runtime::Node *v510;
  unint64_t v511;
  swift::Demangle::__runtime::Node *v512;
  int v513;
  std::string::value_type *v514;
  unsigned __int16 *v515;
  int v516;
  uint64_t v517;
  swift::Demangle::__runtime::Node *v518;
  unsigned int v519;
  int v520;
  swift::Demangle::__runtime::Node **v521;
  swift::Demangle::__runtime::Node *v522;
  const std::string::value_type *v523;
  uint64_t v524;
  unsigned int v525;
  int v526;
  unint64_t v527;
  swift::Demangle::__runtime::Node *v528;
  int v529;
  unint64_t v530;
  unsigned int v531;
  swift::Demangle::__runtime::Node *v532;
  int v533;
  _anonymous_namespace_::NodePrinter *v534;
  int v535;
  size_t v536;
  int v537;
  unsigned int v538;
  int v539;
  _anonymous_namespace_::NodePrinter *v540;
  unsigned int v541;
  swift::Demangle::__runtime::Node *v542;
  uint64_t v543;
  const std::string::value_type *v544;
  unsigned int v545;
  unsigned int v546;
  uint64_t v547;
  int v548;
  swift::Demangle::__runtime::Node *v549;
  swift::Demangle::__runtime::Node *v550;
  int v551;
  const std::string::value_type *v552;
  std::string *v553;
  int v554;
  swift::Demangle::__runtime::Node *v555;
  swift::Demangle::__runtime::Node *v556;
  unsigned int v557;
  swift::Demangle::__runtime::Node *v558;
  unsigned int v559;
  int v560;
  swift::Demangle::__runtime::Node *v561;
  std::string *v562;
  std::string::size_type v563;
  uint64_t v564;
  swift::Demangle::__runtime::Node *v565;
  int v566;
  swift::Demangle::__runtime::Node *v567;
  unint64_t v568;
  swift::Demangle::__runtime::Node *v569;
  int v570;
  unint64_t v571;
  unsigned int v572;
  swift::Demangle::__runtime::Node *v573;
  swift::Demangle::__runtime::Node *const *v574;
  swift::Demangle::__runtime::Node *const *v575;
  swift::Demangle::__runtime::Node *v576;
  _BYTE **v577;
  unsigned int *v578;
  uint64_t v579;
  unsigned int v580;
  unint64_t v581;
  swift::Demangle::__runtime::Node *v582;
  int v583;
  unint64_t v584;
  unsigned int v585;
  swift::Demangle::__runtime::Node *v586;
  swift::Demangle::__runtime::Node *v587;
  std::string *v588;
  std::string::value_type v589;
  unint64_t v590;
  swift::Demangle::__runtime::Node *v591;
  unint64_t v592;
  int v593;
  unint64_t v594;
  unsigned int v595;
  swift::Demangle::__runtime::Node *v596;
  swift::Demangle::__runtime::Node *v597;
  unsigned __int16 *v598;
  unsigned int v599;
  int v600;
  swift::Demangle::__runtime::Node **v601;
  swift::Demangle::__runtime::Node *v602;
  int v603;
  unsigned __int16 *v604;
  int v605;
  uint64_t v606;
  int v607;
  swift::Demangle::__runtime::Node *v608;
  unsigned int v609;
  unsigned int v610;
  const std::string::value_type *v611;
  std::string::size_type v612;
  int v613;
  int v614;
  int v615;
  swift::Demangle::__runtime::Node *v616;
  unsigned int *v617;
  uint64_t v618;
  unint64_t v619;
  swift::Demangle::__runtime::Node *v620;
  int v621;
  unint64_t v622;
  unsigned int v623;
  swift::Demangle::__runtime::Node **v624;
  swift::Demangle::__runtime::Node *v625;
  unsigned int v626;
  char *v627;
  std::string::size_type v628;
  swift::Demangle::__runtime::Node *v629;
  unsigned int v630;
  swift::Demangle::__runtime::Node *v631;
  std::string __p;
  std::string __str;
  uint64_t v634;
  uint64_t v635;
  uint64_t (**v636)();
  double (*v637)@<D0>(swift::Demangle::__runtime *@<X0>, unint64_t@<X1>, std::string *@<X8>);
  uint64_t (***v638)();
  std::string v639;
  std::string v640;
  __int128 v641;
  uint64_t v642;

  v6 = a3 < 0x301;
  if (a3 > 0x300)
  {
LABEL_823:
    std::string::append(this, "<<too complex>>", 0xFuLL);
    v11 = 0;
    v9 = v6;
    goto LABEL_827;
  }
  v8 = a3;
  v9 = 0;
  while (2)
  {
    if (!a2)
    {
      v276 = "<null node pointer>";
      v277 = this;
      v278 = 19;
LABEL_825:
      std::string::append(v277, v276, v278);
      goto LABEL_826;
    }
    v12 = *((unsigned __int16 *)a2 + 8);
    v11 = 0;
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        v407 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v407 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_WORD *)(*(_QWORD *)v407 + 16) == 24)
          v408 = 17;
        else
          v408 = 4;
        if (*(_WORD *)(*(_QWORD *)v407 + 16) == 24)
          v283 = "__allocating_init";
        else
          v283 = "init";
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 2;
        goto LABEL_1328;
      case 1:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2])
          goto LABEL_826;
        v350 = *((unsigned __int8 *)a2 + 18);
        v351 = a2;
        if (v350 == 2)
          goto LABEL_941;
        if (v350 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v351 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_941:
          v352 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v351 + 1);
        }
        else
        {
          v352 = 0;
        }
        v599 = v8 + 1;
        std::string::append(this, ".(unknown context at ", 0x15uLL);
        v600 = *((unsigned __int8 *)a2 + 18);
        v601 = (swift::Demangle::__runtime::Node **)a2;
        if ((v600 - 1) < 2)
          goto LABEL_1764;
        if (v600 == 5 && *((_DWORD *)a2 + 2))
        {
          v601 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1764:
          v602 = *v601;
        }
        else
        {
          v602 = 0;
        }
        std::string::append(this, ")", 1uLL);
        if (*((_BYTE *)a2 + 18) != 5)
          goto LABEL_826;
        if (*((_DWORD *)a2 + 2) < 3u)
          goto LABEL_826;
        v606 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        v607 = *(unsigned __int8 *)(v606 + 18);
        if ((v607 - 1) >= 2 && (v607 != 5 || !*(_DWORD *)(v606 + 8)))
          goto LABEL_826;
        std::string::push_back(this, 60);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v608 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
        else
          v608 = 0;
        v588 = this;
        v589 = 62;
        goto LABEL_1727;
      case 2:
        v316 = *((unsigned __int8 *)a2 + 18);
        if ((v316 - 1) >= 2 && (v316 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_826;
        std::string::append(this, "(", 1uLL);
        v317 = *((unsigned __int8 *)a2 + 18);
        v318 = (swift::Demangle::__runtime::Node **)a2;
        if ((v317 - 1) < 2)
          goto LABEL_883;
        if (v317 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_1495;
        v318 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_883:
        v319 = v8 + 1;
        v320 = 1;
        while (2)
        {
          v322 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v322 == 2)
            goto LABEL_889;
          if ((_DWORD)v322 != 5)
            goto LABEL_1495;
          v322 = *((unsigned int *)a2 + 2);
LABEL_889:
          if (v322 <= v320)
            goto LABEL_1495;
          std::string::append(this, ", ", 2uLL);
          v323 = *((unsigned __int8 *)a2 + 18);
          if (v323 == 2)
          {
            v324 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v323 != 5)
              goto LABEL_884;
            v324 = *((unsigned int *)a2 + 2);
          }
          if (v324 > v320)
          {
            v325 = v323 - 1;
            v326 = a2;
            if (v325 >= 2)
              v326 = *(swift::Demangle::__runtime::Node **)a2;
            v321 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v326 + v320);
            goto LABEL_885;
          }
LABEL_884:
          v321 = 0;
LABEL_885:
          ++v320;
          continue;
        }
      case 3:
        goto LABEL_826;
      case 4:
      case 0x72:
      case 0x122:
      case 0x155:
      case 0x156:
        goto LABEL_827;
      case 5:
        v488 = *((unsigned __int8 *)a2 + 18);
        v489 = (swift::Demangle::__runtime::Node **)a2;
        if ((v488 - 1) < 2)
          goto LABEL_1378;
        if (v488 == 5 && *((_DWORD *)a2 + 2))
        {
          v489 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1378:
          v490 = *v489;
        }
        else
        {
          v490 = 0;
        }
        std::string::push_back(this, 46);
        if (*((_BYTE *)a2 + 18) == 5)
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        v564 = *((_QWORD *)a2 + 1);
        v276 = *(const std::string::value_type **)v564;
        v278 = *(_QWORD *)(v564 + 8);
        v277 = this;
        goto LABEL_825;
      case 6:
        std::string::append(this, "associated type metadata accessor for ", 0x26uLL);
        v47 = *((unsigned __int8 *)a2 + 18);
        v48 = a2;
        if (v47 == 2)
          goto LABEL_91;
        if (v47 != 5)
          goto LABEL_92;
        goto LABEL_89;
      case 7:
        v44 = "default associated type metadata accessor for ";
        v45 = this;
        v46 = 46;
        goto LABEL_320;
      case 8:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v333 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v333 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v333, &__str);
        v493 = "accessor macro @";
        goto LABEL_1404;
      case 9:
        std::string::append(this, "associated type witness table accessor for ", 0x2BuLL);
        v134 = *((unsigned __int8 *)a2 + 18);
        v135 = a2;
        if (v134 == 2)
          goto LABEL_343;
        if (v134 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v135 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_343:
          v136 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v135 + 1);
        }
        else
        {
          v136 = 0;
        }
        std::string::append(this, " : ", 3uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v53 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
        else
          v53 = 0;
        goto LABEL_470;
      case 0xA:
        std::string::append(this, "base witness table accessor for ", 0x20uLL);
        v52 = *((unsigned __int8 *)a2 + 18);
        v48 = a2;
        if (v52 == 2)
          goto LABEL_91;
        if (v52 != 5)
          goto LABEL_92;
LABEL_89:
        if (*((_DWORD *)a2 + 2) < 2u)
        {
LABEL_92:
          v53 = 0;
        }
        else
        {
          v48 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_91:
          v53 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v48 + 1);
        }
        ++v8;
LABEL_470:
        v181 = " in ";
        v182 = this;
        v183 = 4;
        goto LABEL_471;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
      case 0xF5:
        v280 = this;
        v281 = 0;
        v282 = a2;
        goto LABEL_831;
      case 0xC:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v485 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v485 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v485, &__str);
        v493 = "body macro @";
        goto LABEL_1404;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        goto LABEL_826;
      case 0x13:
      case 0x4C:
        v283 = (std::string::value_type *)&unk_A9F1F;
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 2;
        goto LABEL_1482;
      case 0x14:
      case 0x17:
      case 0x65:
      case 0x6A:
      case 0x70:
      case 0x92:
        goto LABEL_1014;
      case 0x15:
        v276 = "Builtin.TheTupleType";
        v277 = this;
        v278 = 20;
        goto LABEL_825;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xB4:
      case 0xDB:
      case 0xEA:
      case 0x106:
        v283 = (std::string::value_type *)&unk_A9F1F;
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 0;
        goto LABEL_1482;
      case 0x19:
        v44 = "class metadata base offset for ";
        goto LABEL_109;
      case 0x1A:
        std::string::append(this, "concrete protocol conformance ", 0x1EuLL);
        v145 = *((unsigned __int8 *)a2 + 18);
        if (v145 == 4)
        {
          std::string::append(this, "#", 1uLL);
          v146 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(_QWORD *)a2);
          std::string::append(v146, " ", 1uLL);
          v145 = *((unsigned __int8 *)a2 + 18);
        }
        v147 = (swift::Demangle::__runtime::Node **)a2;
        if ((v145 - 1) < 2)
          goto LABEL_367;
        if (v145 == 5 && *((_DWORD *)a2 + 2))
        {
          v147 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_367:
          v148 = *v147;
        }
        else
        {
          v148 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        v195 = *((unsigned __int8 *)a2 + 18);
        v196 = a2;
        if (v195 == 2)
          goto LABEL_517;
        if (v195 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v196 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_517:
          v197 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v196 + 1);
        }
        else
        {
          v197 = 0;
        }
        if (*((_BYTE *)a2 + 18) != 5)
          goto LABEL_826;
        if (*((_DWORD *)a2 + 2) < 3u)
          goto LABEL_826;
        v198 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        v199 = *(unsigned __int8 *)(v198 + 18);
        if ((v199 - 1) >= 2 && (v199 != 5 || !*(_DWORD *)(v198 + 8)))
          goto LABEL_826;
        v158 = " with conditional requirements: ";
        v159 = this;
        v160 = 32;
        goto LABEL_525;
      case 0x1B:
        v363 = "pack protocol conformance ";
        v364 = this;
        v365 = 26;
        goto LABEL_1513;
      case 0x1C:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v375 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v375 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v375, &__str);
        v493 = "conformance macro @";
        goto LABEL_1404;
      case 0x1D:
        v486 = *((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u;
        goto LABEL_1485;
      case 0x1E:
        v29 = "coroutine continuation prototype for ";
        goto LABEL_119;
      case 0x1F:
        v476 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v476 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_WORD *)(*(_QWORD *)v476 + 16) == 24)
          v408 = 21;
        else
          v408 = 6;
        if (*(_WORD *)(*(_QWORD *)v476 + 16) == 24)
          v283 = "__deallocating_deinit";
        else
          v283 = "deinit";
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 0;
LABEL_1328:
        v424 = 0;
        goto LABEL_1484;
      case 0x20:
      case 0xE8:
        goto LABEL_313;
      case 0x21:
        v366 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v366 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_1485;
      case 0x22:
        v363 = "dependent associated conformance ";
        v364 = this;
        v365 = 33;
        goto LABEL_1513;
      case 0x23:
        v107 = *((unsigned __int8 *)a2 + 18);
        v108 = a2;
        if (v107 == 2)
          goto LABEL_253;
        if (v107 != 5)
          goto LABEL_254;
        v109 = *((_DWORD *)a2 + 2);
        if (v109 < 2)
          goto LABEL_257;
        v108 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_253:
        std::string::push_back(this, 46);
        v107 = *((unsigned __int8 *)a2 + 18);
LABEL_254:
        if ((v107 - 1) < 2)
          goto LABEL_301;
        if (v107 != 5)
          goto LABEL_498;
        v109 = *((_DWORD *)a2 + 2);
LABEL_257:
        if (!v109)
          goto LABEL_498;
        goto LABEL_300;
      case 0x24:
        v104 = *((unsigned __int8 *)a2 + 18);
        v105 = (swift::Demangle::__runtime::Node **)a2;
        if ((v104 - 1) < 2)
          goto LABEL_246;
        if (v104 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v106 = 0;
            goto LABEL_804;
          }
          v105 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_246:
          v106 = *v105;
        }
        else
        {
          v106 = 0;
        }
        if (v104 == 2)
          goto LABEL_634;
        if (v104 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_634:
          v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_805;
        }
LABEL_804:
        v11 = 0;
LABEL_805:
        std::string::append(this, ": ", 2uLL);
        goto LABEL_7;
      case 0x25:
      case 0x2A:
        printer_unreachable("should be printed as a child of a DependentGenericSignature");
      case 0x26:
        if (*((_BYTE *)a2 + 18) == 5)
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        std::function<std::string ()(unsigned long long,unsigned long long)>::operator()((uint64_t)&this[2].__r_.__value_.__r.__words[2], **(unsigned int **)a2, **((unsigned int **)a2 + 1));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        std::string::append(this, (const std::string::value_type *)p_str, size);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_826;
      case 0x27:
        v39 = *((unsigned __int8 *)a2 + 18);
        v40 = (swift::Demangle::__runtime::Node **)a2;
        if ((v39 - 1) < 2)
          goto LABEL_62;
        if (v39 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v41 = 0;
            goto LABEL_736;
          }
          v40 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_62:
          v41 = *v40;
        }
        else
        {
          v41 = 0;
        }
        if (v39 == 2)
          goto LABEL_603;
        if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_603:
          v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_737;
        }
LABEL_736:
        v11 = 0;
LABEL_737:
        std::string::append(this, " == ", 4uLL);
        goto LABEL_7;
      case 0x28:
        v356 = *((unsigned __int8 *)a2 + 18);
        v357 = (swift::Demangle::__runtime::Node **)a2;
        if ((v356 - 1) < 2)
          goto LABEL_954;
        if (v356 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v358 = 0;
LABEL_1806:
            v567 = 0;
LABEL_1807:
            v609 = v8 + 1;
            std::string::append(this, ".shape == ", 0xAuLL);
            v544 = ".shape";
            v562 = this;
            v563 = 6;
LABEL_1808:
            std::string::append(v562, v544, v563);
            return 0;
          }
          v357 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_954:
          v358 = *v357;
        }
        else
        {
          v358 = 0;
        }
        if (v356 == 2)
        {
LABEL_1656:
          v567 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_1807;
        }
        if (v356 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1656;
        }
        goto LABEL_1806;
      case 0x29:
        v482 = *((unsigned __int8 *)a2 + 18);
        v483 = (swift::Demangle::__runtime::Node **)a2;
        if ((v482 - 1) < 2)
          goto LABEL_1359;
        if (v482 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v484 = 0;
LABEL_1810:
            v577 = 0;
LABEL_1811:
            v610 = v8 + 1;
            std::string::append(this, ": ", 2uLL);
            v611 = "_UnknownLayout";
            v612 = 14;
            switch(**v577)
            {
              case 'C':
                v611 = "AnyObject";
                v612 = 9;
                break;
              case 'D':
                v611 = "_NativeClass";
                v612 = 12;
                break;
              case 'N':
                v611 = "_NativeRefCountedObject";
                v612 = 23;
                break;
              case 'R':
                v611 = "_RefCountedObject";
                v612 = 17;
                break;
              case 'T':
                goto LABEL_1816;
              case 'U':
                break;
              default:
                v613 = **v577 & 0xDF;
                if (v613 == 77)
                {
                  v611 = "_TrivialAtMost";
                  v612 = 14;
                }
                else if (v613 == 69)
                {
LABEL_1816:
                  v611 = "_Trivial";
                  v612 = 8;
                }
                else
                {
                  v612 = 0;
                  v611 = 0;
                }
                break;
            }
            std::string::append(this, v611, v612);
            if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
              goto LABEL_826;
            std::string::append(this, "(", 1uLL);
            if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
              v625 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
            else
              v625 = 0;
            if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
            {
              std::string::append(this, ", ", 2uLL);
              if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
                v437 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 24);
              else
                v437 = 0;
              v439 = (_anonymous_namespace_::NodePrinter *)this;
              v438 = v610;
LABEL_1198:
            }
            goto LABEL_1495;
          }
          v483 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1359:
          v484 = *v483;
        }
        else
        {
          v484 = 0;
        }
        v576 = a2;
        if (v482 == 2)
        {
LABEL_1698:
          v577 = (_BYTE **)*((_QWORD *)v576 + 1);
          goto LABEL_1811;
        }
        if (v482 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v576 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1698;
        }
        goto LABEL_1810;
      case 0x2B:
      case 0x2E:
        goto LABEL_826;
      case 0x2C:
        v142 = *((unsigned __int8 *)a2 + 18);
        v143 = (swift::Demangle::__runtime::Node **)a2;
        if ((v142 - 1) < 2)
          goto LABEL_360;
        if (v142 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v144 = 0;
LABEL_807:
            v11 = 0;
LABEL_808:
            v271 = v11;
            while (1)
            {
              while (1)
              {
                v272 = v271;
                v273 = *((unsigned __int16 *)v271 + 8);
                if (v273 != 232)
                {
                  v275 = (v273 - 44) > 0x26
                      || ((1 << (v273 - 44)) & 0x4000200001) == 0;
                  if (v275 && v273 != 245)
                    std::string::push_back(this, 32);
                  goto LABEL_7;
                }
                v274 = *((unsigned __int8 *)v272 + 18);
                if ((v274 - 1) >= 2)
                  break;
LABEL_811:
                v271 = *(swift::Demangle::__runtime::Node **)v272;
              }
              v271 = 0;
              if (v274 == 5)
              {
                v271 = 0;
                if (*((_DWORD *)v272 + 2))
                {
                  v272 = *(swift::Demangle::__runtime::Node **)v272;
                  goto LABEL_811;
                }
              }
            }
          }
          v143 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_360:
          v144 = *v143;
        }
        else
        {
          v144 = 0;
        }
        if (v142 == 2)
        {
LABEL_640:
          v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_808;
        }
        if (v142 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_640;
        }
        goto LABEL_807;
      case 0x2D:
        v140 = *((unsigned __int8 *)a2 + 18);
        v67 = (swift::Demangle::__runtime::Node **)a2;
        if ((v140 - 1) < 2)
          goto LABEL_355;
        if (v140 == 5 && *((_DWORD *)a2 + 2))
          goto LABEL_354;
        goto LABEL_405;
      case 0x2F:
        v95 = "dependent root protocol conformance ";
        v96 = this;
        v97 = 36;
        goto LABEL_326;
      case 0x30:
        v95 = "dependent inherited protocol conformance ";
        v96 = this;
        v97 = 41;
        goto LABEL_326;
      case 0x31:
        v95 = "dependent associated protocol conformance ";
        v96 = this;
        v97 = 42;
LABEL_326:
        std::string::append(v96, v95, v97);
        v127 = *((unsigned __int8 *)a2 + 18);
        if (v127 == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v128 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v128 = 0;
        if (*(_BYTE *)(v128 + 18) == 4)
        {
          std::string::append(this, "#", 1uLL);
          snprintf((char *)&__str, 0x20uLL, "%llu", *(_QWORD *)v128);
          std::string::append(this, (const std::string::value_type *)&__str);
          std::string::append(this, " ", 1uLL);
          v127 = *((unsigned __int8 *)a2 + 18);
        }
        v129 = (swift::Demangle::__runtime::Node **)a2;
        if ((v127 - 1) < 2)
          goto LABEL_336;
        if (v127 == 5 && *((_DWORD *)a2 + 2))
        {
          v129 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_336:
          v130 = *v129;
        }
        else
        {
          v130 = 0;
        }
        v131 = " to ";
        v132 = this;
        v133 = 4;
        goto LABEL_506;
      case 0x32:
        goto LABEL_1485;
      case 0x33:
        v367 = *((unsigned __int8 *)a2 + 18);
        if ((v367 - 1) < 2)
          goto LABEL_977;
        if (v367 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_977:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "didset";
        goto LABEL_1564;
      case 0x34:
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 != 1)
            printer_unreachable("bad directness");
          v313 = "indirect";
          v314 = 8;
        }
        else
        {
          v313 = "direct";
          v314 = 6;
        }
        std::string::append(this, v313, v314);
        v276 = " ";
        goto LABEL_1496;
      case 0x35:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "distributed thunk ";
LABEL_1354:
        v277 = this;
        v278 = 18;
        goto LABEL_825;
      case 0x36:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "distributed accessor for ";
LABEL_1216:
        v277 = this;
        v278 = 25;
        goto LABEL_825;
      case 0x37:
        v276 = "dynamic ";
        goto LABEL_1756;
      case 0x38:
        v276 = "super ";
        goto LABEL_1278;
      case 0x39:
      case 0x55:
        v276 = "Self";
        goto LABEL_1060;
      case 0x3A:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "dynamically replaceable thunk for ";
        v277 = this;
        v278 = 34;
        goto LABEL_825;
      case 0x3B:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "dynamically replaceable key for ";
        v277 = this;
        v278 = 32;
        goto LABEL_825;
      case 0x3C:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "dynamically replaceable variable for ";
        v277 = this;
        v278 = 37;
        goto LABEL_825;
      case 0x3E:
        v44 = "enum case for ";
        goto LABEL_210;
      case 0x3F:
        v276 = "<ERROR TYPE>";
        goto LABEL_1112;
      case 0x42:
        v276 = "@Sendable ";
        goto LABEL_1685;
      case 0x43:
        v413 = *((unsigned __int8 *)a2 + 18);
        if ((v413 - 1) >= 2 && (v413 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_826;
        std::string::push_back(this, 64);
        v414 = *((unsigned __int8 *)a2 + 18);
        if ((v414 - 1) < 2)
          goto LABEL_1139;
        if (v414 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1139:
          v415 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v415 = 0;
        }
        v588 = this;
        v589 = 32;
LABEL_1727:
        std::string::push_back(v588, v589);
        return 0;
      case 0x44:
        std::string::append(this, "@differentiable", 0xFuLL);
        v368 = *(unsigned __int8 *)a2;
        switch(v368)
        {
          case 'r':
            v294 = "(reverse)";
            break;
          case 'l':
            v294 = "(_linear)";
            break;
          case 'f':
            v294 = "(_forward)";
            v295 = this;
            v293 = 10;
LABEL_1660:
            std::string::append(v295, v294, v293);
LABEL_1661:
            std::string::push_back(this, 32);
            goto LABEL_826;
          default:
            goto LABEL_1661;
        }
        v295 = this;
        v293 = 9;
        goto LABEL_1660;
      case 0x45:
        v345 = *((unsigned __int8 *)a2 + 18);
        v346 = (swift::Demangle::__runtime::Node **)a2;
        if (v345 == 2)
          goto LABEL_934;
        switch(v345)
        {
          case 5:
            v347 = *((_DWORD *)a2 + 2);
            if (v347 != 2)
            {
              v348 = 0;
              goto LABEL_1769;
            }
            v346 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_934:
            v348 = 1;
            std::string::append(this, " ", 1uLL);
            v349 = 0;
            v345 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            v348 = 0;
            v597 = 0;
            if ((v349 & 1) == 0)
              goto LABEL_1773;
            goto LABEL_1771;
          case 2:
LABEL_1771:
            v597 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + v348);
            goto LABEL_1773;
          default:
            v348 = 0;
            v349 = 1;
            break;
        }
        if (v345 != 5)
        {
LABEL_1772:
          v597 = 0;
LABEL_1773:
          v544 = ".Type";
          v562 = this;
          v563 = 5;
          goto LABEL_1808;
        }
        v347 = *((_DWORD *)a2 + 2);
LABEL_1769:
        if (v348 < v347)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1771;
        }
        goto LABEL_1772;
      case 0x46:
        v487 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v487 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_1485;
      case 0x47:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2])
          goto LABEL_712;
        std::string::append(this, "(extension in ", 0xEuLL);
        v137 = *((unsigned __int8 *)a2 + 18);
        v138 = (swift::Demangle::__runtime::Node **)a2;
        if ((v137 - 1) < 2)
          goto LABEL_350;
        if (v137 == 5 && *((_DWORD *)a2 + 2))
        {
          v138 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_350:
          v139 = *v138;
        }
        else
        {
          v139 = 0;
        }
        std::string::append(this, "):", 2uLL);
LABEL_712:
        v247 = *((unsigned __int8 *)a2 + 18);
        v248 = a2;
        if (v247 == 2)
          goto LABEL_716;
        if (v247 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v248 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_716:
          v249 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v248 + 1);
        }
        else
        {
          v249 = 0;
        }
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3 && !this[1].__r_.__value_.__s.__data_[19])
          goto LABEL_721;
        goto LABEL_826;
      case 0x48:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v435 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v435 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v435, &__str);
        v493 = "extension macro @";
        goto LABEL_1404;
      case 0x49:
        v36 = *((unsigned __int8 *)a2 + 18);
        v37 = (swift::Demangle::__runtime::Node **)a2;
        if ((v36 - 1) < 2)
          goto LABEL_57;
        if (v36 == 5 && *((_DWORD *)a2 + 2))
        {
          v37 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_57:
          v38 = *v37;
        }
        else
        {
          v38 = 0;
        }
        v131 = "field offset for ";
        goto LABEL_501;
      case 0x4A:
        goto LABEL_1485;
      case 0x4B:
        v44 = "full type metadata for ";
        v45 = this;
        v46 = 23;
        goto LABEL_320;
      case 0x4D:
        v289 = "function signature specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 33;
        goto LABEL_1368;
      case 0x4E:
      case 0x4F:
        printer_unreachable("should be handled in printSpecializationPrefix");
      case 0x50:
        v315 = *(_QWORD *)a2;
        if ((*(_QWORD *)a2 & 0x400) != 0)
        {
          std::string::append(this, "Existential To Protocol Constrained Generic", 0x2BuLL);
          if ((v315 & 0x40) == 0)
          {
            if ((v315 & 0x80) == 0)
              goto LABEL_1644;
LABEL_1642:
            std::string::append(this, " and ", 5uLL);
LABEL_1643:
            std::string::append(this, "Owned To Guaranteed", 0x13uLL);
            goto LABEL_1644;
          }
          std::string::append(this, " and ", 5uLL);
        }
        else if ((v315 & 0x40) == 0)
        {
          if ((v315 & 0x80) == 0)
          {
            if ((v315 & 0x200) == 0)
            {
              if ((v315 & 0x100) == 0)
              {
                v11 = 0;
                if ((int)v315 <= 127)
                {
                  switch((int)v315)
                  {
                    case 0:
                      v276 = "Constant Propagated Function";
                      v277 = this;
                      v278 = 28;
                      goto LABEL_825;
                    case 1:
                      v276 = "Constant Propagated Global";
                      goto LABEL_1067;
                    case 2:
                      v276 = "Constant Propagated Integer";
                      goto LABEL_1878;
                    case 3:
                      v276 = "Constant Propagated Float";
                      goto LABEL_1216;
                    case 4:
                      v276 = "Constant Propagated String";
                      goto LABEL_1067;
                    case 5:
                      v276 = "Closure Propagated";
                      goto LABEL_1354;
                    case 6:
                      v276 = "Value Promoted from Box";
                      goto LABEL_1758;
                    case 7:
                      v276 = "Stack Promoted from Box";
                      goto LABEL_1758;
                    case 8:
                      v276 = "InOut Converted to Out";
                      goto LABEL_1075;
                    case 9:
                      v276 = "Constant Propagated KeyPath";
LABEL_1878:
                      v277 = this;
                      v278 = 27;
                      goto LABEL_825;
                    case 64:
                      goto LABEL_1885;
                    default:
                      goto LABEL_827;
                  }
                }
                if ((int)v315 > 511)
                {
                  if ((_DWORD)v315 != 512 && (_DWORD)v315 != 1024)
                    goto LABEL_827;
                }
                else if ((_DWORD)v315 != 128 && (_DWORD)v315 != 256)
                {
                  goto LABEL_827;
                }
LABEL_1885:
                printer_unreachable("option sets should have been handled earlier");
              }
              goto LABEL_1650;
            }
            goto LABEL_1648;
          }
          goto LABEL_1643;
        }
        std::string::append(this, "Dead", 4uLL);
        if ((v315 & 0x80) == 0)
        {
LABEL_1644:
          if ((v315 & 0x200) == 0)
          {
            if ((v315 & 0x100) == 0)
              goto LABEL_826;
LABEL_1649:
            std::string::append(this, " and ", 5uLL);
LABEL_1650:
            v276 = "Exploded";
LABEL_1756:
            v277 = this;
            v278 = 8;
            goto LABEL_825;
          }
          std::string::append(this, " and ", 5uLL);
LABEL_1648:
          std::string::append(this, "Guaranteed To Owned", 0x13uLL);
          if ((v315 & 0x100) == 0)
            goto LABEL_826;
          goto LABEL_1649;
        }
        goto LABEL_1642;
      case 0x51:
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::demangleSymbolAsString();
      case 0x53:
        std::string::append(this, "any ", 4uLL);
        v478 = *((unsigned __int8 *)a2 + 18);
        v479 = (swift::Demangle::__runtime::Node **)a2;
        if ((v478 - 1) < 2)
          goto LABEL_1346;
        if (v478 == 5 && *((_DWORD *)a2 + 2))
        {
          v479 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1346:
          v480 = *v479;
        }
        else
        {
          v480 = 0;
        }
        v559 = v8 + 1;
        std::string::append(this, "<", 1uLL);
        v560 = *((unsigned __int8 *)a2 + 18);
        if (v560 == 2)
          goto LABEL_1609;
        if (v560 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1609:
          v561 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
          v561 = 0;
        }
        v544 = ">";
        goto LABEL_1612;
      case 0x54:
        v412 = ", ";
        goto LABEL_1333;
      case 0x56:
        v329 = "generic partial specialization";
        v330 = this;
        v331 = (uint64_t *)a2;
        v332 = 30;
        goto LABEL_1361;
      case 0x57:
        v329 = "generic not-reabstracted partial specialization";
        v330 = this;
        v331 = (uint64_t *)a2;
        v332 = 47;
LABEL_1361:
        goto LABEL_826;
      case 0x58:
        v44 = "generic protocol witness table for ";
        goto LABEL_319;
      case 0x59:
        v44 = "instantiation function for generic protocol witness table for ";
        v45 = this;
        v46 = 62;
        goto LABEL_320;
      case 0x5A:
        v44 = "resilient protocol witness table for ";
        v45 = this;
        v46 = 37;
        goto LABEL_320;
      case 0x5B:
      case 0x5D:
        v289 = "generic specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 22;
        goto LABEL_1368;
      case 0x5C:
        v289 = "generic not re-abstracted specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 40;
        goto LABEL_1368;
      case 0x5E:
        v409 = *((unsigned __int8 *)a2 + 18);
        v410 = (swift::Demangle::__runtime::Node **)a2;
        if ((v409 - 1) < 2)
          goto LABEL_1129;
        if (v409 == 5 && *((_DWORD *)a2 + 2))
        {
          v410 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1129:
          v411 = *v410;
        }
        else
        {
          v411 = 0;
        }
        v545 = v8 + 1;
        v546 = *((unsigned __int8 *)a2 + 18);
        if (v546 != 2)
        {
          if (v546 != 5)
            goto LABEL_826;
          v546 = *((_DWORD *)a2 + 2);
          if (v546 < 2)
            goto LABEL_826;
        }
        v547 = v546;
        std::string::append(this, " with ", 6uLL);
        v548 = *((unsigned __int8 *)a2 + 18);
        v549 = a2;
        if (v548 == 2)
          goto LABEL_1575;
        if (v548 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v549 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1575:
          v550 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v549 + 1);
        }
        else
        {
          v550 = 0;
        }
        if ((_DWORD)v547 == 2)
          goto LABEL_826;
        v568 = 2;
        while (1)
        {
          std::string::append(this, " and ", 5uLL);
          v570 = *((unsigned __int8 *)a2 + 18);
          if (v570 == 2)
          {
            v571 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v570 != 5)
              goto LABEL_1665;
            v571 = *((unsigned int *)a2 + 2);
          }
          if (v571 > v568)
          {
            v572 = v570 - 1;
            v573 = a2;
            if (v572 >= 2)
              v573 = *(swift::Demangle::__runtime::Node **)a2;
            v569 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v573 + v568);
            goto LABEL_1666;
          }
LABEL_1665:
          v569 = 0;
LABEL_1666:
          if (v547 == ++v568)
            goto LABEL_826;
        }
      case 0x5F:
        v289 = "generic pre-specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 26;
        goto LABEL_1368;
      case 0x60:
        v289 = "inlined generic function";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 24;
LABEL_1368:
        goto LABEL_826;
      case 0x61:
        v44 = "generic type metadata pattern for ";
        v45 = this;
        v46 = 34;
        goto LABEL_320;
      case 0x62:
        v460 = *((unsigned __int8 *)a2 + 18);
        if ((v460 - 1) < 2)
          goto LABEL_1351;
        if (v460 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_1446;
        goto LABEL_1350;
      case 0x63:
      case 0xEB:
        goto LABEL_1514;
      case 0x64:
        v481 = *((unsigned __int8 *)a2 + 18);
        if ((v481 - 1) < 2)
          goto LABEL_1351;
        if (v481 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_1350:
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1351:
          v328 = *(_QWORD *)a2;
        }
        else
        {
LABEL_1446:
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "getter";
        goto LABEL_1564;
      case 0x66:
      case 0xA1:
      case 0xD8:
        goto LABEL_1168;
      case 0x67:
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = -1;
        v284 = a4 & 1;
        v283 = "__ivar_initializer";
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 0;
        goto LABEL_1165;
      case 0x68:
        goto LABEL_1485;
      case 0x69:
        v276 = "@escaping";
        goto LABEL_1788;
      case 0x6B:
        std::string::append(this, "@differentiable", 0xFuLL);
        v452 = *(unsigned __int8 *)a2;
        switch(v452)
        {
          case 'f':
            v276 = "(_forward)";
LABEL_1685:
            v277 = this;
            v278 = 10;
            goto LABEL_825;
          case 'r':
            v276 = "(reverse)";
            break;
          case 'l':
            v276 = "(_linear)";
            break;
          default:
            goto LABEL_826;
        }
        goto LABEL_1788;
      case 0x6C:
        v276 = "@isolated(any)";
        goto LABEL_1454;
      case 0x6D:
        v276 = "sending";
        goto LABEL_1634;
      case 0x6E:
      case 0x6F:
        v293 = *((_QWORD *)a2 + 1);
        if (!v293)
          goto LABEL_826;
        v294 = *(const std::string::value_type **)a2;
        v295 = this;
        goto LABEL_1660;
      case 0x71:
        std::string::append(this, "@convention(", 0xCuLL);
        v334 = *((unsigned __int8 *)a2 + 18);
        if (v334 == 1)
          goto LABEL_1692;
        v335 = (const std::string::value_type ***)a2;
        if (v334 == 2)
          goto LABEL_1829;
        if (v334 != 5)
          goto LABEL_1836;
        v336 = *((_DWORD *)a2 + 2);
        if (v336 != 2)
        {
          if (v336 == 1)
            goto LABEL_1691;
          goto LABEL_1836;
        }
        v335 = *(const std::string::value_type ****)a2;
LABEL_1829:
        std::string::append(this, **v335, (std::string::size_type)(*v335)[1]);
        std::string::append(this, ", mangledCType: \"", 0x11uLL);
        v615 = *((unsigned __int8 *)a2 + 18);
        if (v615 == 2)
          goto LABEL_1833;
        if (v615 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1833:
          v616 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
          v616 = 0;
        }
        std::string::push_back(this, 34);
        goto LABEL_1836;
      case 0x73:
        goto LABEL_826;
      case 0x74:
        std::string::append(this, "for <", 5uLL);
        v471 = *((unsigned __int8 *)a2 + 18);
        if ((v471 - 1) < 2)
          goto LABEL_1307;
        if (v471 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_1525;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1307:
        v472 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_1526;
      case 0x75:
        v288 = 2 * this[1].__r_.__value_.__s.__data_[15];
        v423 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v423 = *(swift::Demangle::__runtime::Node **)a2;
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = **((_DWORD **)v423 + 1) + 1;
        v284 = a4 & 1;
        v283 = "implicit closure #";
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
LABEL_1165:
        v424 = 0;
        v408 = 18;
        goto LABEL_1484;
      case 0x76:
      case 0x78:
        v13 = *((unsigned __int8 *)a2 + 18);
        v14 = (swift::Demangle::__runtime::Node **)a2;
        if ((v13 - 1) < 2)
          goto LABEL_14;
        if (v13 == 5 && *((_DWORD *)a2 + 2))
        {
          v14 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_14:
          v15 = *v14;
        }
        else
        {
          v15 = 0;
        }
        std::string::append(this, " ", 1uLL);
        v152 = *((unsigned __int8 *)a2 + 18);
        if (v152 != 5)
          goto LABEL_551;
        v153 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v153 != 3)
          goto LABEL_386;
        v152 = *((unsigned __int8 *)a2 + 18);
        if (v152 != 5)
          goto LABEL_551;
        v153 = *((unsigned int *)a2 + 2);
LABEL_386:
        if (v153 != 4)
          goto LABEL_555;
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v154 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
        else
          v154 = 0;
        v152 = *((unsigned __int8 *)a2 + 18);
LABEL_551:
        switch(v152)
        {
          case 1:
            v11 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_7;
          case 2:
            v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
            goto LABEL_7;
          case 5:
            v153 = *((unsigned int *)a2 + 2);
LABEL_555:
            if (v153)
            {
              v11 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 8 * (v153 - 1));
              goto LABEL_7;
            }
            break;
        }
        goto LABEL_597;
      case 0x77:
        std::string::append(this, "@substituted ", 0xDuLL);
        v353 = *((unsigned __int8 *)a2 + 18);
        v354 = (swift::Demangle::__runtime::Node **)a2;
        if ((v353 - 1) < 2)
          goto LABEL_949;
        if (v353 == 5 && *((_DWORD *)a2 + 2))
        {
          v354 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_949:
          v355 = *v354;
        }
        else
        {
          v355 = 0;
        }
        std::string::append(this, " for <", 6uLL);
        v537 = *((unsigned __int8 *)a2 + 18);
        if (v537 == 2)
          goto LABEL_1524;
        if (v537 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1524:
          v472 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
LABEL_1525:
          v472 = 0;
        }
LABEL_1526:
        goto LABEL_1527;
      case 0x79:
        v338 = "@yields ";
        v339 = this;
        v340 = 8;
        goto LABEL_1131;
      case 0x7A:
        v338 = "@error ";
        v339 = this;
        v340 = 7;
LABEL_1131:
        std::string::append(v339, v338, v340);
        v412 = " ";
LABEL_1333:
        v477 = this;
        v474 = a2;
        goto LABEL_1334;
      case 0x7B:
        v44 = "inout ";
        v45 = this;
        v46 = 6;
        goto LABEL_320;
      case 0x7C:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = " infix";
        goto LABEL_1278;
      case 0x7D:
        goto LABEL_1485;
      case 0x7E:
        v403 = *((unsigned __int8 *)a2 + 18);
        if ((v403 - 1) < 2)
          goto LABEL_1106;
        if (v403 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1106:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "init";
        goto LABEL_1602;
      case 0x7F:
        v44 = "isolated ";
        goto LABEL_294;
      case 0x80:
        v44 = "sending ";
        goto LABEL_292;
      case 0x81:
        v276 = "@isolated(any) ";
        v277 = this;
        v278 = 15;
        goto LABEL_825;
      case 0x82:
        v276 = "sending ";
        goto LABEL_1756;
      case 0x83:
      case 0x84:
        if (v12 == 131)
          v296 = "key path getter for ";
        else
          v296 = "key path setter for ";
        std::string::append(this, v296, 0x14uLL);
        v297 = *((unsigned __int8 *)a2 + 18);
        v298 = (swift::Demangle::__runtime::Node **)a2;
        if ((v297 - 1) < 2)
          goto LABEL_846;
        if (v297 == 5 && *((_DWORD *)a2 + 2))
        {
          v298 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_846:
          v299 = *v298;
        }
        else
        {
          v299 = 0;
        }
        v507 = v8 + 1;
        std::string::append(this, " : ", 3uLL);
        v508 = *((unsigned __int8 *)a2 + 18);
        v509 = a2;
        if (v508 == 2)
          goto LABEL_1438;
        if (v508 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v509 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1438:
          v510 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v509 + 1);
          if (*((_WORD *)v510 + 8) == 217)
            std::string::append(this, ", ", 2uLL);
          if (*((_BYTE *)a2 + 18) == 5)
          {
            v511 = 2;
            do
            {
              if (v511 >= *((unsigned int *)a2 + 2))
                break;
              v512 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 8 * v511);
              if (*((_WORD *)v512 + 8) == 217)
                std::string::append(this, ", ", 2uLL);
              ++v511;
            }
            while (*((_BYTE *)a2 + 18) == 5);
          }
        }
        goto LABEL_826;
      case 0x85:
      case 0x86:
        std::string::append(this, "key path index ", 0xFuLL);
        v305 = *((unsigned __int16 *)a2 + 8);
        if (v305 == 133)
          v306 = "equality";
        else
          v306 = "hash";
        if (v305 == 133)
          v307 = 8;
        else
          v307 = 4;
        std::string::append(this, v306, v307);
        std::string::append(this, " operator for ", 0xEuLL);
        v308 = *((unsigned __int8 *)a2 + 18);
        v309 = v308 - 1;
        switch(v308)
        {
          case 1:
            v311 = 0;
            v310 = 1;
            v312 = a2;
            goto LABEL_1459;
          case 5:
            v310 = *((_DWORD *)a2 + 2);
            if (v310)
            {
              v311 = (v310 - 1);
              v312 = *(swift::Demangle::__runtime::Node **)a2;
              v308 = *((_DWORD *)a2 + 2);
              goto LABEL_1459;
            }
            break;
          case 2:
            v310 = 2;
            v311 = 1;
            v308 = 2;
            v312 = a2;
LABEL_1459:
            v515 = (unsigned __int16 *)*((_QWORD *)v312 + v311);
            goto LABEL_1461;
        }
        v308 = 0;
        v310 = 0;
        v515 = 0;
LABEL_1461:
        v516 = v515[8];
        if (v516 == 217)
        {
          --v308;
          v517 = (v310 - 2);
          v518 = a2;
          if (v309 >= 2)
            v518 = *(swift::Demangle::__runtime::Node **)a2;
          v515 = (unsigned __int16 *)*((_QWORD *)v518 + v517);
          v516 = v515[8];
        }
        if (v516 == 43)
        {
          --v308;
        }
        std::string::append(this, "(", 1uLL);
        if (!v308)
          goto LABEL_1495;
        v519 = v8 + 1;
        v520 = *((unsigned __int8 *)a2 + 18);
        v521 = (swift::Demangle::__runtime::Node **)a2;
        if ((v520 - 1) < 2)
          goto LABEL_1472;
        if (v520 == 5 && *((_DWORD *)a2 + 2))
        {
          v521 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1472:
          v522 = *v521;
        }
        else
        {
          v522 = 0;
        }
        if (v308 == 1)
        {
LABEL_1495:
          v276 = ")";
LABEL_1496:
          v277 = this;
          v278 = 1;
          goto LABEL_825;
        }
        v527 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          v529 = *((unsigned __int8 *)a2 + 18);
          if (v529 == 2)
          {
            v530 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v529 != 5)
              goto LABEL_1498;
            v530 = *((unsigned int *)a2 + 2);
          }
          if (v530 > v527)
          {
            v531 = v529 - 1;
            v532 = a2;
            if (v531 >= 2)
              v532 = *(swift::Demangle::__runtime::Node **)a2;
            v528 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v532 + v527);
            goto LABEL_1499;
          }
LABEL_1498:
          v528 = 0;
LABEL_1499:
          if (v308 == ++v527)
            goto LABEL_1495;
        }
      case 0x87:
        std::string::append(this, "lazy protocol witness table accessor for type ", 0x2EuLL);
        v42 = *((unsigned __int8 *)a2 + 18);
        v43 = (swift::Demangle::__runtime::Node **)a2;
        if ((v42 - 1) < 2)
          goto LABEL_263;
        if (v42 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_390;
        goto LABEL_262;
      case 0x88:
        std::string::append(this, "lazy protocol witness table cache variable for type ", 0x34uLL);
        v110 = *((unsigned __int8 *)a2 + 18);
        v43 = (swift::Demangle::__runtime::Node **)a2;
        if ((v110 - 1) < 2)
          goto LABEL_263;
        if (v110 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_262:
          v43 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_263:
          v111 = *v43;
        }
        else
        {
LABEL_390:
          v111 = 0;
        }
        v131 = " and conformance ";
LABEL_501:
        v132 = this;
        v133 = 17;
        goto LABEL_506;
      case 0x89:
        v453 = *((unsigned __int8 *)a2 + 18);
        v454 = a2;
        if (v453 == 2)
          goto LABEL_1238;
        if (v453 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v454 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1238:
          v455 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v454 + 1);
        }
        else
        {
          v455 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[9])
          goto LABEL_826;
        std::string::append(this, " #", 2uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        v425 = **(_QWORD **)a2 + 1;
        goto LABEL_1169;
      case 0x8A:
        if (*((_BYTE *)a2 + 18) == 5)
        {
          if (*((_DWORD *)a2 + 2) == 3)
            v288 = 1;
          else
            v288 = 2;
        }
        else
        {
          v288 = 2;
        }
        v283 = (std::string::value_type *)&unk_A9F1F;
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        goto LABEL_1482;
      case 0x8B:
        v84 = *((unsigned __int8 *)a2 + 18);
        if ((v84 - 1) < 2)
          goto LABEL_184;
        if (v84 != 5)
          goto LABEL_561;
        if (!*((_DWORD *)a2 + 2))
          goto LABEL_826;
LABEL_184:
        std::string::append(this, "module ", 7uLL);
        v85 = *((unsigned __int8 *)a2 + 18);
        v86 = (swift::Demangle::__runtime::Node **)a2;
        if ((v85 - 1) < 2)
          goto LABEL_188;
        if (v85 == 5 && *((_DWORD *)a2 + 2))
        {
          v86 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_188:
          v87 = *v86;
        }
        else
        {
          v87 = 0;
        }
        v84 = *((unsigned __int8 *)a2 + 18);
LABEL_561:
        if (v84 == 2)
          goto LABEL_564;
        if (v84 != 5)
          goto LABEL_571;
        if (*((_DWORD *)a2 + 2) < 2u)
          goto LABEL_826;
LABEL_564:
        std::string::append(this, " file ", 6uLL);
        v208 = *((unsigned __int8 *)a2 + 18);
        v209 = a2;
        if (v208 == 2)
          goto LABEL_568;
        if (v208 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v209 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_568:
          v210 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v209 + 1);
        }
        else
        {
          v210 = 0;
        }
        v84 = *((unsigned __int8 *)a2 + 18);
LABEL_571:
        if (v84 != 5 || *((_DWORD *)a2 + 2) < 3u)
          goto LABEL_826;
        std::string::append(this, " line ", 6uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v211 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
        else
          v211 = 0;
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u)
          goto LABEL_826;
        std::string::append(this, " column ", 8uLL);
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u)
          goto LABEL_597;
        v11 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 24);
        goto LABEL_7;
      case 0x8C:
        goto LABEL_1485;
      case 0x8D:
        v456 = *((unsigned __int8 *)a2 + 18);
        if ((v456 - 1) < 2)
          goto LABEL_1243;
        if (v456 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1243:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "materializeForSet";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 17;
        goto LABEL_1603;
      case 0x8E:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v401 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v401 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v401, &__str);
        v493 = "member macro @";
        goto LABEL_1404;
      case 0x8F:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v387 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v387 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v387, &__str);
        v493 = "memberAttribute macro @";
        goto LABEL_1404;
      case 0x90:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "merged ";
        goto LABEL_1634;
      case 0x91:
        v392 = *((unsigned __int8 *)a2 + 18);
        v393 = (swift::Demangle::__runtime::Node **)a2;
        if (v392 == 2)
          goto LABEL_1072;
        switch(v392)
        {
          case 5:
            v394 = *((_DWORD *)a2 + 2);
            if (v394 != 2)
            {
              v395 = 0;
              goto LABEL_1775;
            }
            v393 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1072:
            v395 = 1;
            std::string::append(this, " ", 1uLL);
            v396 = 0;
            v392 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            v395 = 0;
            v598 = 0;
            if ((v396 & 1) == 0)
              goto LABEL_1779;
            goto LABEL_1777;
          case 2:
LABEL_1777:
            v598 = (unsigned __int16 *)*((_QWORD *)a2 + v395);
            goto LABEL_1779;
          default:
            v395 = 0;
            v396 = 1;
            break;
        }
        if (v392 != 5)
        {
LABEL_1778:
          v598 = 0;
LABEL_1779:
          v603 = *((unsigned __int8 *)v598 + 18);
          if ((v603 - 1) >= 2)
          {
            if (v603 != 5 || !*((_DWORD *)v598 + 2))
            {
              v604 = 0;
              goto LABEL_1785;
            }
            v598 = *(unsigned __int16 **)v598;
          }
          v604 = *(unsigned __int16 **)v598;
LABEL_1785:
          v605 = v604[8];
          if ((v605 - 190) < 3 || v605 == 69)
          {
            v276 = ".Protocol";
LABEL_1788:
            v277 = this;
            v278 = 9;
          }
          else
          {
            v276 = ".Type";
LABEL_1108:
            v277 = this;
            v278 = 5;
          }
          goto LABEL_825;
        }
        v394 = *((_DWORD *)a2 + 2);
LABEL_1775:
        if (v395 < v394)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1777;
        }
        goto LABEL_1778;
      case 0x93:
        v44 = "metaclass for ";
        goto LABEL_210;
      case 0x94:
        v16 = "method lookup function for ";
        goto LABEL_311;
      case 0x95:
        v16 = "ObjC metadata update function for ";
        v32 = this;
        v33 = 34;
        goto LABEL_312;
      case 0x96:
        v16 = "ObjC resilient class stub for ";
        v32 = this;
        v33 = 30;
        goto LABEL_312;
      case 0x97:
        v16 = "full ObjC resilient class stub for ";
        v32 = this;
        v33 = 35;
        goto LABEL_312;
      case 0x98:
        v378 = *((unsigned __int8 *)a2 + 18);
        if ((v378 - 1) < 2)
          goto LABEL_1010;
        if (v378 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1010:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "modify";
        goto LABEL_1564;
      case 0x99:
        if (!this[1].__r_.__value_.__s.__data_[4])
          goto LABEL_826;
        goto LABEL_1014;
      case 0x9A:
        v344 = *((unsigned __int8 *)a2 + 18);
        if ((v344 - 1) < 2)
          goto LABEL_929;
        if (v344 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_929:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "nativeOwningAddressor";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 21;
        goto LABEL_1603;
      case 0x9B:
        v327 = *((unsigned __int8 *)a2 + 18);
        if ((v327 - 1) < 2)
          goto LABEL_905;
        if (v327 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_905:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "nativeOwningMutableAddressor";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 28;
        goto LABEL_1603;
      case 0x9C:
        v377 = *((unsigned __int8 *)a2 + 18);
        if ((v377 - 1) < 2)
          goto LABEL_1005;
        if (v377 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1005:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "nativePinningAddressor";
        goto LABEL_1540;
      case 0x9D:
        v418 = *((unsigned __int8 *)a2 + 18);
        if ((v418 - 1) < 2)
          goto LABEL_1150;
        if (v418 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1150:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "nativePinningMutableAddressor";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 29;
        goto LABEL_1603;
      case 0x9E:
        v44 = "nominal type descriptor for ";
        v45 = this;
        v46 = 28;
        goto LABEL_320;
      case 0x9F:
        v44 = "nominal type descriptor runtime record for ";
        v45 = this;
        v46 = 43;
        goto LABEL_320;
      case 0xA0:
        v276 = "@nonobjc ";
        goto LABEL_1788;
      case 0xA2:
        goto LABEL_958;
      case 0xA3:
        std::string::append(this, "predefined ", 0xBuLL);
LABEL_958:
        std::string::append(this, "@objc completion handler block implementation for ", 0x32uLL);
        v359 = *((unsigned __int8 *)a2 + 18);
        if (v359 != 5)
          goto LABEL_961;
        v360 = *((_DWORD *)a2 + 2);
        if (v360 < 4)
          goto LABEL_964;
        v359 = *((unsigned __int8 *)a2 + 18);
LABEL_961:
        v361 = (swift::Demangle::__runtime::Node **)a2;
        if ((v359 - 1) < 2)
          goto LABEL_966;
        if (v359 != 5)
          goto LABEL_1421;
        v360 = *((_DWORD *)a2 + 2);
LABEL_964:
        if (v360)
        {
          v361 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_966:
          v362 = *v361;
        }
        else
        {
LABEL_1421:
          v362 = 0;
        }
        v502 = v8 + 1;
        std::string::append(this, " with result type ", 0x12uLL);
        v503 = *((unsigned __int8 *)a2 + 18);
        v504 = a2;
        if (v503 == 2)
          goto LABEL_1426;
        if (v503 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v504 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1426:
          v505 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v504 + 1);
        }
        else
        {
          v505 = 0;
        }
        v506 = **(_QWORD **)(*(_QWORD *)a2 + 16);
        switch(v506)
        {
          case 0:
            goto LABEL_826;
          case 2:
            v276 = " zero on error";
LABEL_1454:
            v277 = this;
            v278 = 14;
            break;
          case 1:
            v276 = " nonzero on error";
LABEL_1432:
            v277 = this;
            v278 = 17;
            break;
          default:
            v276 = " <invalid error flag>";
            v277 = this;
            v278 = 21;
            break;
        }
        goto LABEL_825;
      case 0xA4:
        v276 = "@objc ";
        goto LABEL_1278;
      case 0xA8:
        v397 = *((unsigned __int8 *)a2 + 18);
        if ((v397 - 1) < 2)
          goto LABEL_1080;
        if (v397 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1080:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "owningAddressor";
        goto LABEL_1561;
      case 0xA9:
        v371 = *((unsigned __int8 *)a2 + 18);
        if ((v371 - 1) < 2)
          goto LABEL_990;
        if (v371 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_990:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "owningMutableAddressor";
        goto LABEL_1540;
      case 0xAA:
        if (this[1].__r_.__value_.__s.__data_[10])
          goto LABEL_1082;
        v372 = "partial apply forwarder";
        v373 = this;
        v374 = 23;
        goto LABEL_1509;
      case 0xAB:
        if (this[1].__r_.__value_.__s.__data_[10])
        {
LABEL_1082:
          v372 = "partial apply";
          v373 = this;
          v374 = 13;
        }
        else
        {
          v372 = "partial apply ObjC forwarder";
          v373 = this;
          v374 = 28;
        }
LABEL_1509:
        std::string::append(v373, v372, v374);
        v533 = *((unsigned __int8 *)a2 + 18);
        if ((v533 - 1) >= 2 && (v533 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_826;
        v363 = " for ";
        v364 = this;
        v365 = 5;
        goto LABEL_1513;
      case 0xAC:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v444 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v444 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v444, &__str);
        v493 = "peer macro @";
        goto LABEL_1404;
      case 0xAD:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = " postfix";
        goto LABEL_1756;
      case 0xAE:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v402 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v402 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v634 = 0;
        v635 = 0;
        v636 = off_B4B28;
        v637 = swift::Demangle::__runtime::genericParameterName;
        v638 = &v636;
        swift::Demangle::__runtime::nodeToString(&v639, v402, &__str);
        v493 = "preamble macro @";
LABEL_1404:
        v494 = std::string::insert(&v639, 0, v493);
        v495 = v494->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v640.__r_.__value_.__l.__data_ = *(_OWORD *)&v494->__r_.__value_.__l.__data_;
        v640.__r_.__value_.__r.__words[2] = v495;
        v494->__r_.__value_.__l.__size_ = 0;
        v494->__r_.__value_.__r.__words[2] = 0;
        v494->__r_.__value_.__r.__words[0] = 0;
        v496 = std::string::append(&v640, " expansion #");
        v497 = v496->__r_.__value_.__r.__words[2];
        v641 = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
        v642 = v497;
        v496->__r_.__value_.__l.__size_ = 0;
        v496->__r_.__value_.__r.__words[2] = 0;
        v496->__r_.__value_.__r.__words[0] = 0;
        if (v642 >= 0)
          v498 = (std::string::value_type *)&v641;
        else
          v498 = (std::string::value_type *)v641;
        if (v642 >= 0)
          v499 = HIBYTE(v642);
        else
          v499 = *((_QWORD *)&v641 + 1);
        if (SHIBYTE(v642) < 0)
        {
          operator delete((void *)v641);
          if ((SHIBYTE(v640.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_1412:
            if ((SHIBYTE(v639.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_1413;
            goto LABEL_1420;
          }
        }
        else if ((SHIBYTE(v640.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_1412;
        }
        operator delete(v640.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v639.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1413;
LABEL_1420:
        operator delete(v639.__r_.__value_.__l.__data_);
LABEL_1413:
        v500 = v638;
        if (v638 == &v636)
        {
          v501 = 4;
          v500 = &v636;
        }
        else
        {
          if (!v638)
            goto LABEL_827;
          v501 = 5;
        }
        (*v500)[v501]();
        goto LABEL_827;
      case 0xAF:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = " prefix";
        goto LABEL_1634;
      case 0xB0:
        v457 = *((unsigned __int8 *)a2 + 18);
        if (v457 != 2 && (v457 != 5 || *((_DWORD *)a2 + 2) < 2u))
        {
          if (!this[1].__r_.__value_.__s.__data_[14])
            goto LABEL_826;
          v523 = "(in ";
          goto LABEL_1690;
        }
        if (this[1].__r_.__value_.__s.__data_[14])
        {
          std::string::push_back(this, 40);
          v457 = *((unsigned __int8 *)a2 + 18);
        }
        v458 = a2;
        if (v457 == 2)
          goto LABEL_1253;
        if (v457 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v458 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1253:
          v459 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v458 + 1);
        }
        else
        {
          v459 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[14])
          goto LABEL_826;
        v523 = " in ";
LABEL_1690:
        std::string::append(this, v523, 4uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
LABEL_1691:
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1692:
        std::string::append(this, **(const std::string::value_type ***)a2, *(_QWORD *)(*(_QWORD *)a2 + 8));
        goto LABEL_1836;
      case 0xB1:
        v44 = "property descriptor for ";
        goto LABEL_307;
      case 0xB2:
        goto LABEL_1485;
      case 0xB3:
        goto LABEL_1485;
      case 0xB5:
        v341 = "protocol symbolic reference 0x";
        v342 = this;
        v343 = 30;
        goto LABEL_1280;
      case 0xB6:
        v49 = *((unsigned __int8 *)a2 + 18);
        v50 = (swift::Demangle::__runtime::Node **)a2;
        if ((v49 - 1) < 2)
          goto LABEL_78;
        if (v49 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v11 = 0;
            v51 = 0;
            goto LABEL_739;
          }
          v50 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_78:
          v51 = *v50;
        }
        else
        {
          v51 = 0;
        }
        v11 = 0;
        if (v49 == 1)
        {
          v219 = 0;
          goto LABEL_740;
        }
        v217 = a2;
        if (v49 == 2)
          goto LABEL_610;
        if (v49 != 5)
          goto LABEL_611;
        if (*((_DWORD *)a2 + 2) < 2u)
        {
          v11 = 0;
        }
        else
        {
          v217 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_610:
          v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v217 + 1);
LABEL_611:
          if (v49 == 5)
          {
            v218 = *((_DWORD *)a2 + 2);
            if (v218 >= 3)
            {
              v219 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
              if (v218 == 4)
              {
                std::string::append(this, "property behavior storage of ", 0x1DuLL);
                std::string::append(this, " in ", 4uLL);
                std::string::append(this, " : ", 3uLL);
                goto LABEL_7;
              }
LABEL_740:
              if (this[1].__r_.__value_.__s.__data_[6])
              {
                std::string::append(this, " : ", 3uLL);
                std::string::append(this, " in ", 4uLL);
                v11 = v219;
                goto LABEL_7;
              }
              goto LABEL_826;
            }
          }
        }
LABEL_739:
        v219 = 0;
        goto LABEL_740;
      case 0xB7:
        v363 = "protocol conformance ref (type's module) ";
        v364 = this;
        v365 = 41;
        goto LABEL_1513;
      case 0xB8:
        v363 = "protocol conformance ref (protocol's module) ";
        v364 = this;
        v365 = 45;
        goto LABEL_1513;
      case 0xB9:
        v363 = "protocol conformance ref (retroactive) ";
        v364 = this;
        v365 = 39;
        goto LABEL_1513;
      case 0xBA:
        v44 = "protocol descriptor for ";
LABEL_307:
        v45 = this;
        v46 = 24;
        goto LABEL_320;
      case 0xBB:
        v44 = "protocol descriptor runtime record for ";
        v45 = this;
        v46 = 39;
        goto LABEL_320;
      case 0xBC:
        v44 = "protocol conformance descriptor for ";
        goto LABEL_317;
      case 0xBD:
        v44 = "protocol conformance descriptor runtime record for ";
        v45 = this;
        v46 = 51;
        goto LABEL_320;
      case 0xBE:
        v473 = *((unsigned __int8 *)a2 + 18);
        if ((v473 - 1) < 2)
          goto LABEL_1313;
        if (v473 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_826;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1313:
        v474 = *(swift::Demangle::__runtime::Node **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_826;
        v475 = *((unsigned __int8 *)v474 + 18);
        if ((v475 - 1) < 2 || v475 == 5 && *((_DWORD *)v474 + 2))
          goto LABEL_1628;
        v276 = "Any";
LABEL_1276:
        v277 = this;
        v278 = 3;
        goto LABEL_825;
      case 0xBF:
        v369 = *((unsigned __int8 *)a2 + 18);
        if (v369 == 2)
        {
          v370 = a2;
        }
        else
        {
          if (v369 != 5 || *((_DWORD *)a2 + 2) < 2u)
            goto LABEL_826;
          v370 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v565 = *(swift::Demangle::__runtime::Node **)v370;
        std::string::append(this, " & ", 3uLL);
        v566 = *((unsigned __int8 *)v565 + 18);
        if ((v566 - 1) >= 2)
        {
          if (v566 != 5 || !*((_DWORD *)v565 + 2))
            goto LABEL_826;
          v565 = *(swift::Demangle::__runtime::Node **)v565;
        }
        v474 = *(swift::Demangle::__runtime::Node **)v565;
LABEL_1628:
        v412 = " & ";
        v477 = this;
LABEL_1334:
        goto LABEL_826;
      case 0xC0:
        v466 = *((unsigned __int8 *)a2 + 18);
        if ((v466 - 1) < 2)
          goto LABEL_1291;
        if (v466 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_826;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1291:
        v467 = *(_DWORD **)a2;
        v468 = *(unsigned __int8 *)(*(_QWORD *)a2 + 18);
        if ((v468 - 1) < 2)
          goto LABEL_1295;
        if (v468 != 5 || !v467[2])
          goto LABEL_826;
        v467 = *(_DWORD **)v467;
LABEL_1295:
        v469 = *(swift::Demangle::__runtime::Node **)v467;
        v470 = *(unsigned __int8 *)(*(_QWORD *)v467 + 18);
        if ((v470 - 1) < 2 || v470 == 5 && *((_DWORD *)v469 + 2))
        {
          std::string::append(this, " & ", 3uLL);
        }
        if (this[1].__r_.__value_.__s.__data_[1] && this[1].__r_.__value_.__s.__data_[17])
        {
          std::string::append(this, "Swift", 5uLL);
          std::string::append(this, ".", 1uLL);
        }
        v276 = "AnyObject";
        goto LABEL_1788;
      case 0xC1:
        v44 = "protocol self-conformance descriptor for ";
        goto LABEL_221;
      case 0xC2:
        v44 = "protocol self-conformance witness for ";
        goto LABEL_248;
      case 0xC3:
        v44 = "protocol self-conformance witness table for ";
        v45 = this;
        v46 = 44;
        goto LABEL_320;
      case 0xC4:
        std::string::append(this, "protocol witness for ", 0x15uLL);
        v98 = *((unsigned __int8 *)a2 + 18);
        v99 = a2;
        if (v98 == 2)
          goto LABEL_227;
        if (v98 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v99 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_227:
          v100 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v99 + 1);
        }
        else
        {
          v100 = 0;
        }
        v181 = " in conformance ";
        goto LABEL_464;
      case 0xC5:
        v44 = "protocol witness table for ";
        goto LABEL_146;
      case 0xC6:
        v44 = "protocol witness table accessor for ";
        goto LABEL_317;
      case 0xC7:
        v44 = "protocol witness table pattern for ";
LABEL_319:
        v45 = this;
        v46 = 35;
        goto LABEL_320;
      case 0xC8:
      case 0xC9:
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "thunk for ", 0xAuLL);
          v34 = *((unsigned __int8 *)a2 + 18);
          if (v34 == 1)
          {
            v35 = 0;
          }
          else if (v34 == 5)
          {
            v207 = *((unsigned int *)a2 + 2);
            if (!(_DWORD)v207)
              goto LABEL_546;
            v35 = v207 - 1;
            a2 = *(swift::Demangle::__runtime::Node **)a2;
          }
          else
          {
            v11 = 0;
            if (v34 != 2)
              goto LABEL_6;
            v35 = 1;
          }
          v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + v35);
          goto LABEL_6;
        }
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_WORD *)a2 + 8) == 201)
          std::string::append(this, "helper ", 7uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          v75 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          v75 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        v162 = *((unsigned __int8 *)a2 + 18);
        if (v162 == 2)
        {
          v163 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v162 != 5)
            goto LABEL_587;
          v163 = *((unsigned int *)a2 + 2);
        }
        if (v163 > v75 + 1)
        {
          v212 = v162 - 1;
          v213 = a2;
          if (v212 >= 2)
            v213 = *(swift::Demangle::__runtime::Node **)a2;
          v214 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v213 + v75 + 1);
          goto LABEL_588;
        }
LABEL_587:
        v214 = 0;
LABEL_588:
        v203 = " to ";
        v204 = this;
        v205 = 4;
        goto LABEL_589;
      case 0xCA:
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 4)
        {
          v75 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          v75 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((unsigned int *)a2 + 2) > (v75 | 2))
          v149 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 8 * (v75 | 2));
        else
          v149 = 0;
        std::string::append(this, " to ", 4uLL);
        v150 = *((unsigned __int8 *)a2 + 18);
        if (v150 == 2)
        {
          v151 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v150 != 5)
            goto LABEL_533;
          v151 = *((unsigned int *)a2 + 2);
        }
        if (v151 > v75 + 1)
        {
          v200 = v150 - 1;
          v201 = a2;
          if (v200 >= 2)
            v201 = *(swift::Demangle::__runtime::Node **)a2;
          v202 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v201 + v75 + 1);
LABEL_534:
          v203 = " self ";
          v204 = this;
          v205 = 6;
LABEL_589:
          std::string::append(v204, v203, v205);
          v215 = *((unsigned __int8 *)a2 + 18);
          v216 = v215 - 1;
          if ((_DWORD)v215 != 1)
          {
            if ((_DWORD)v215 == 2)
            {
LABEL_596:
              v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + v75);
              goto LABEL_7;
            }
            if ((_DWORD)v215 != 5)
            {
LABEL_597:
              v11 = 0;
              goto LABEL_7;
            }
            v215 = *((unsigned int *)a2 + 2);
          }
          if (v215 > v75)
          {
            if (v216 >= 2)
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_596;
          }
          goto LABEL_597;
        }
LABEL_533:
        v202 = 0;
        goto LABEL_534;
      case 0xCB:
        v122 = *((unsigned __int8 *)a2 + 18);
        v123 = (swift::Demangle::__runtime::Node **)a2;
        if ((v122 - 1) < 2)
          goto LABEL_290;
        if (v122 == 5 && *((_DWORD *)a2 + 2))
        {
          v123 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_290:
          v124 = *v123;
        }
        else
        {
          v124 = 0;
        }
        v131 = " with global actor constraint ";
        v132 = this;
        v133 = 30;
        goto LABEL_506;
      case 0xCC:
        v465 = *((unsigned __int8 *)a2 + 18);
        if ((v465 - 1) < 2)
          goto LABEL_1286;
        if (v465 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1286:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "read";
LABEL_1602:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 4;
        goto LABEL_1603;
      case 0xCD:
        std::string::append(this, "related decl '", 0xEuLL);
        v55 = (const std::string::value_type ***)a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v55 = *(const std::string::value_type ****)a2;
        std::string::append(this, **v55, (std::string::size_type)(*v55)[1]);
        std::string::append(this, "' for ", 6uLL);
        v56 = *((unsigned __int8 *)a2 + 18);
        if (v56 == 2)
          goto LABEL_105;
        if (v56 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_315;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_105:
        v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        goto LABEL_6;
      case 0xCE:
        v112 = *((unsigned __int8 *)a2 + 18);
        if (v112 != 2 && (v112 != 5 || *((_DWORD *)a2 + 2) != 2))
          goto LABEL_826;
        std::string::append(this, "retroactive @ ", 0xEuLL);
        v113 = *((unsigned __int8 *)a2 + 18);
        v114 = (swift::Demangle::__runtime::Node **)a2;
        if ((v113 - 1) < 2)
          goto LABEL_272;
        if (v113 == 5 && *((_DWORD *)a2 + 2))
        {
          v114 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_272:
          v115 = *v114;
        }
        else
        {
          v115 = 0;
        }
        goto LABEL_507;
      case 0xCF:
        v379 = *((unsigned __int8 *)a2 + 18);
        if ((v379 - 1) < 2 || v379 == 5 && *((_DWORD *)a2 + 2))
          goto LABEL_1514;
LABEL_1014:
        v276 = *(const std::string::value_type **)a2;
        v278 = *((_QWORD *)a2 + 1);
        v277 = this;
        goto LABEL_825;
      case 0xD0:
        v44 = "__shared ";
LABEL_294:
        v45 = this;
        v46 = 9;
        goto LABEL_320;
      case 0xD1:
        v44 = "__owned ";
LABEL_292:
        v45 = this;
        v46 = 8;
        goto LABEL_320;
      case 0xD2:
        v29 = "@box ";
        v30 = this;
        v31 = 5;
        goto LABEL_297;
      case 0xD3:
        v68 = *((unsigned __int8 *)a2 + 18);
        v69 = (swift::Demangle::__runtime::Node **)a2;
        if ((v68 - 1) < 2)
          goto LABEL_152;
        if (v68 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
LABEL_498:
            v11 = 0;
            goto LABEL_6;
          }
          v69 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_152:
          v11 = *v69;
        }
        else
        {
          v11 = 0;
        }
        if (v68 == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          v524 = *(_QWORD *)(*(_QWORD *)a2 + 16);
          v525 = v8 + 1;
          std::string::push_back(this, 32);
          if (!v524)
            goto LABEL_826;
          std::string::append(this, " <", 2uLL);
          v526 = *(unsigned __int8 *)(v524 + 18);
          if (v526 == 5)
          {
            v617 = (unsigned int *)(v524 + 8);
            v618 = *(unsigned int *)(v524 + 8);
            if (!(_DWORD)v618
            {
LABEL_1527:
              std::string::push_back(this, 62);
              goto LABEL_826;
            }
          }
          else
          {
            if (v526 != 2)
            {
              if (v526 == 1)
              goto LABEL_1527;
            }
            v617 = (unsigned int *)(v524 + 8);
            v618 = 2;
          }
          v619 = 1;
          while (1)
          {
            std::string::append(this, ", ", 2uLL);
            v621 = *(unsigned __int8 *)(v524 + 18);
            if (v621 == 2)
            {
              v622 = *(unsigned __int8 *)(v524 + 18);
            }
            else
            {
              if (v621 != 5)
                goto LABEL_1842;
              v622 = *v617;
            }
            if (v622 > v619)
            {
              v623 = v621 - 1;
              v624 = (swift::Demangle::__runtime::Node **)v524;
              if (v623 >= 2)
                v624 = *(swift::Demangle::__runtime::Node ***)v524;
              v620 = v624[v619];
              goto LABEL_1843;
            }
LABEL_1842:
            v620 = 0;
LABEL_1843:
            if (v618 == ++v619)
              goto LABEL_1527;
          }
        }
        goto LABEL_6;
      case 0xD4:
        std::string::push_back(this, 123);
        v447 = *((unsigned __int8 *)a2 + 18);
        if ((v447 - 1) >= 2 && (v447 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_1744;
        v448 = v8 + 1;
        std::string::push_back(this, 32);
        v449 = *((unsigned __int8 *)a2 + 18);
        v450 = (swift::Demangle::__runtime::Node **)a2;
        if ((v449 - 1) < 2)
          goto LABEL_1224;
        if (v449 == 5 && *((_DWORD *)a2 + 2))
        {
          v450 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1224:
          v451 = *v450;
        }
        else
        {
          v451 = 0;
        }
        v590 = 1;
        while (2)
        {
          v592 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v592 == 2)
            goto LABEL_1735;
          if ((_DWORD)v592 == 5)
          {
            v592 = *((unsigned int *)a2 + 2);
LABEL_1735:
            if (v592 > v590)
            {
              std::string::push_back(this, 44);
              std::string::push_back(this, 32);
              v593 = *((unsigned __int8 *)a2 + 18);
              if (v593 == 2)
              {
                v594 = *((unsigned __int8 *)a2 + 18);
              }
              else
              {
                if (v593 != 5)
                  goto LABEL_1730;
                v594 = *((unsigned int *)a2 + 2);
              }
              if (v594 > v590)
              {
                v595 = v593 - 1;
                v596 = a2;
                if (v595 >= 2)
                  v596 = *(swift::Demangle::__runtime::Node **)a2;
                v591 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v596 + v590);
                goto LABEL_1731;
              }
LABEL_1730:
              v591 = 0;
LABEL_1731:
              ++v590;
              continue;
            }
          }
          break;
        }
LABEL_1744:
        v276 = " }";
LABEL_1745:
        v277 = this;
        v278 = 2;
        goto LABEL_825;
      case 0xD5:
      case 0xD6:
        if (v12 == 214)
          v29 = "let ";
        else
          v29 = "var ";
        v30 = this;
        v31 = 4;
        goto LABEL_297;
      case 0xD7:
        v398 = *((unsigned __int8 *)a2 + 18);
        if ((v398 - 1) < 2)
          goto LABEL_1087;
        if (v398 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1087:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "setter";
LABEL_1564:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 6;
        goto LABEL_1603;
      case 0xD9:
        v276 = "serialized";
        goto LABEL_1685;
      case 0xDA:
        v29 = "static ";
        v30 = this;
        v31 = 7;
        goto LABEL_297;
      case 0xDC:
        v627 = "subscript";
        v628 = 9;
        v626 = -1;
        v284 = a4 & 1;
        v283 = (std::string::value_type *)&unk_A9F1F;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 2;
        v424 = 0;
        goto LABEL_1483;
      case 0xDD:
        if (this[1].__r_.__value_.__s.__data_[3])
        {
          std::string::append(this, " with unmangled suffix ", 0x17uLL);
          v641 = *(_OWORD *)a2;
          __swift::__runtime::llvm::StringRef::str((const void **)&v641, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            __str = __p;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_826;
      case 0xDF:
        std::string::append(this, "(", 1uLL);
        goto LABEL_1495;
      case 0xE0:
        if (ChildIf)
        {
          std::string::append(this, *(const std::string::value_type **)ChildIf, *(_QWORD *)(ChildIf + 8));
          std::string::append(this, ": ", 2uLL);
        }
          goto LABEL_826;
        v276 = "...";
        goto LABEL_1276;
      case 0xE1:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = ": ";
        goto LABEL_1745;
      case 0xE2:
        v302 = "Pack{";
        v303 = this;
        v304 = 5;
        goto LABEL_956;
      case 0xE3:
      case 0xE4:
        if (v12 == 227)
          v300 = "@direct";
        else
          v300 = "@indirect";
        if (v12 == 227)
          v301 = 7;
        else
          v301 = 9;
        std::string::append(this, v300, v301);
        v302 = " Pack{";
        v303 = this;
        v304 = 6;
LABEL_956:
        std::string::append(v303, v302, v304);
        v276 = "}";
        goto LABEL_1496;
      case 0xE5:
        v44 = "repeat ";
        goto LABEL_206;
      case 0xE6:
        std::string::append(this, "/* level: ", 0xAuLL);
        v54 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v54 = *(swift::Demangle::__runtime::Node **)a2;
        snprintf((char *)&__str, 0x20uLL, "%llu", **((_QWORD **)v54 + 1));
        std::string::append(this, (const std::string::value_type *)&__str);
        std::string::append(this, " */ ", 4uLL);
        v44 = "each ";
        v45 = this;
        v46 = 5;
        goto LABEL_320;
      case 0xE7:
        printer_unreachable("should be handled in Node::Kind::PackElement");
      case 0xE9:
        v341 = "type symbolic reference 0x";
        v342 = this;
        v343 = 26;
        goto LABEL_1280;
      case 0xEC:
        v119 = *((unsigned __int8 *)a2 + 18);
        v120 = v119 - 1;
        v121 = a2;
        if ((v119 - 1) >= 2)
          v121 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_WORD *)(*(_QWORD *)v121 + 16) != 290)
        {
          if (v120 >= 2)
          {
LABEL_314:
            if (v119 != 5 || !*((_DWORD *)a2 + 2))
            {
LABEL_315:
              v11 = 0;
              goto LABEL_6;
            }
LABEL_4:
            a2 = *(swift::Demangle::__runtime::Node **)a2;
          }
LABEL_5:
          v11 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_6:
          ++v8;
          goto LABEL_7;
        }
        v492 = (swift::Demangle::__runtime::Node **)a2;
        if (v120 < 2)
          goto LABEL_1387;
        if (v119 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v281 = 0;
            goto LABEL_1820;
          }
          v492 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1387:
          v281 = *v492;
        }
        else
        {
          v281 = 0;
        }
        if (v119 == 2)
        {
LABEL_1719:
          v587 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_1821;
        }
        if (v119 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1719;
        }
LABEL_1820:
        v587 = 0;
LABEL_1821:
        v614 = *((unsigned __int8 *)v587 + 18);
        if ((v614 - 1) >= 2)
        {
          if (v614 != 5 || !*((_DWORD *)v587 + 2))
          {
            v282 = 0;
LABEL_1827:
            v280 = this;
LABEL_831:
            goto LABEL_826;
          }
          v587 = *(swift::Demangle::__runtime::Node **)v587;
        }
        v282 = *(swift::Demangle::__runtime::Node **)v587;
        goto LABEL_1827;
      case 0xED:
        v44 = "type metadata for ";
        v45 = this;
        v46 = 18;
        goto LABEL_320;
      case 0xEE:
        v44 = "type metadata accessor for ";
        goto LABEL_146;
      case 0xEF:
        v44 = "type metadata completion function for ";
        goto LABEL_248;
      case 0xF0:
        v44 = "type metadata instantiation cache for ";
LABEL_248:
        v45 = this;
        v46 = 38;
        goto LABEL_320;
      case 0xF1:
        v44 = "type metadata instantiation function for ";
        goto LABEL_221;
      case 0xF2:
        v44 = "type metadata singleton initialization cache for ";
        v45 = this;
        v46 = 49;
        goto LABEL_320;
      case 0xF3:
        v44 = "demangling cache variable for type metadata for ";
        v45 = this;
        v46 = 48;
        goto LABEL_320;
      case 0xF4:
        v44 = "lazy cache variable for type metadata for ";
        goto LABEL_278;
      case 0xF6:
        v276 = "unknown index";
        v277 = this;
        v278 = 13;
        goto LABEL_825;
      case 0xF7:
        v116 = "weak";
        v117 = this;
        v118 = 4;
        goto LABEL_280;
      case 0xF8:
        v116 = "unowned";
        v117 = this;
        v118 = 7;
        goto LABEL_280;
      case 0xF9:
        v116 = "unowned(unsafe)";
        v117 = this;
        v118 = 15;
LABEL_280:
        std::string::append(v117, v116, v118);
        v44 = " ";
        v45 = this;
        v46 = 1;
        goto LABEL_320;
      case 0xFA:
        v376 = *((unsigned __int8 *)a2 + 18);
        if ((v376 - 1) < 2)
          goto LABEL_1000;
        if (v376 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1000:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "unsafeAddressor";
LABEL_1561:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 15;
        goto LABEL_1603;
      case 0xFB:
        v380 = *((unsigned __int8 *)a2 + 18);
        if ((v380 - 1) < 2)
          goto LABEL_1023;
        if (v380 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1023:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "unsafeMutableAddressor";
LABEL_1540:
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 22;
        goto LABEL_1603;
      case 0xFC:
        v70 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v70 = *(swift::Demangle::__runtime::Node **)a2;
        v71 = **(_QWORD **)v70;
        if (v71 >= 0x18)
          printer_unreachable("bad value witness kind");
        std::string::append(this, off_B5360[(int)v71], qword_B2088[(int)v71]);
        if (this[1].__r_.__value_.__s.__data_[12])
        {
          v72 = " for ";
          v73 = this;
          v74 = 5;
        }
        else
        {
          v72 = " value witness for ";
          v73 = this;
          v74 = 19;
        }
        std::string::append(v73, v72, v74);
        v193 = *((unsigned __int8 *)a2 + 18);
        if (v193 == 2)
          goto LABEL_497;
        if (v193 == 5)
          goto LABEL_495;
        goto LABEL_498;
      case 0xFD:
        v29 = "value witness table for ";
        v30 = this;
        v31 = 24;
        goto LABEL_297;
      case 0xFE:
        v283 = (std::string::value_type *)&unk_A9F1F;
        v627 = (char *)&unk_A9F1F;
        v628 = 0;
        v626 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 1;
LABEL_1482:
        v424 = 1;
LABEL_1483:
        v408 = 0;
LABEL_1484:
LABEL_1485:
        v11 = v337;
        goto LABEL_827;
      case 0xFF:
        std::string::append(this, "vtable thunk for ", 0x11uLL);
        v61 = *((unsigned __int8 *)a2 + 18);
        v62 = a2;
        if (v61 == 2)
          goto LABEL_125;
        if (v61 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v62 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_125:
          v63 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v62 + 1);
        }
        else
        {
          v63 = 0;
        }
        v181 = " dispatching to ";
LABEL_464:
        v182 = this;
        v183 = 16;
LABEL_471:
        std::string::append(v182, v181, v183);
        v184 = *((unsigned __int8 *)a2 + 18);
        if ((v184 - 1) < 2)
          goto LABEL_475;
        if (v184 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_597;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_475:
        v11 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_7;
      case 0x100:
        v276 = "override ";
        goto LABEL_1788;
      case 0x101:
        v388 = *((unsigned __int8 *)a2 + 18);
        if ((v388 - 1) < 2)
          goto LABEL_1046;
        if (v388 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1046:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v513 = a4 & 1;
        v514 = "willset";
        v534 = (_anonymous_namespace_::NodePrinter *)this;
        v535 = v8;
        v536 = 7;
LABEL_1603:
        goto LABEL_827;
      case 0x102:
        v29 = "reflection metadata builtin descriptor ";
        v30 = this;
        v31 = 39;
        goto LABEL_297;
      case 0x103:
        v29 = "reflection metadata field descriptor ";
LABEL_119:
        v30 = this;
        v31 = 37;
        goto LABEL_297;
      case 0x104:
        v29 = "reflection metadata associated type descriptor ";
        v30 = this;
        v31 = 47;
        goto LABEL_297;
      case 0x105:
        v29 = "reflection metadata superclass descriptor ";
        v30 = this;
        v31 = 42;
        goto LABEL_297;
      case 0x107:
        v16 = "curry thunk of ";
        v32 = this;
        v33 = 15;
        goto LABEL_312;
      case 0x108:
        v16 = "dispatch thunk of ";
        goto LABEL_274;
      case 0x109:
        v16 = "method descriptor for ";
        v32 = this;
        v33 = 22;
        goto LABEL_312;
      case 0x10A:
        v44 = "protocol requirements base descriptor for ";
        goto LABEL_278;
      case 0x10B:
        std::string::append(this, "associated conformance descriptor for ", 0x26uLL);
        v59 = *((unsigned __int8 *)a2 + 18);
        v60 = (swift::Demangle::__runtime::Node **)a2;
        if ((v59 - 1) < 2)
          goto LABEL_130;
        if (v59 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_392;
        goto LABEL_129;
      case 0x10C:
        std::string::append(this, "default associated conformance accessor for ", 0x2CuLL);
        v64 = *((unsigned __int8 *)a2 + 18);
        v60 = (swift::Demangle::__runtime::Node **)a2;
        if ((v64 - 1) < 2)
          goto LABEL_130;
        if (v64 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_129:
          v60 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_130:
          v65 = *v60;
        }
        else
        {
LABEL_392:
          v65 = 0;
        }
        std::string::append(this, ".", 1uLL);
        v155 = *((unsigned __int8 *)a2 + 18);
        v156 = a2;
        if (v155 == 2)
          goto LABEL_397;
        if (v155 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v156 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_397:
          v157 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v156 + 1);
        }
        else
        {
          v157 = 0;
        }
        v158 = ": ";
        v159 = this;
        v160 = 2;
LABEL_525:
        std::string::append(v159, v158, v160);
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
          goto LABEL_597;
LABEL_721:
        v11 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
        goto LABEL_7;
      case 0x10D:
        std::string::append(this, "base conformance descriptor for ", 0x20uLL);
        v101 = *((unsigned __int8 *)a2 + 18);
        v102 = (swift::Demangle::__runtime::Node **)a2;
        if ((v101 - 1) < 2)
          goto LABEL_233;
        if (v101 == 5 && *((_DWORD *)a2 + 2))
        {
          v102 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_233:
          v103 = *v102;
        }
        else
        {
          v103 = 0;
        }
        v131 = ": ";
        v132 = this;
        v133 = 2;
LABEL_506:
        std::string::append(v132, v131, v133);
        goto LABEL_507;
      case 0x10E:
        v44 = "associated type descriptor for ";
LABEL_109:
        v45 = this;
        v46 = 31;
        goto LABEL_320;
      case 0x10F:
        v276 = " async";
LABEL_1278:
        v277 = this;
        v278 = 6;
        goto LABEL_825;
      case 0x110:
        v276 = " throws";
        goto LABEL_1634;
      case 0x111:
        std::string::append(this, " throws(", 8uLL);
        v436 = *((unsigned __int8 *)a2 + 18);
        if (v436 == 1)
          goto LABEL_1197;
        if (v436 != 5 || *((_DWORD *)a2 + 2) != 1)
          goto LABEL_1495;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1197:
        v437 = *(swift::Demangle::__runtime::Node **)a2;
        v438 = v8 + 1;
        v439 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1198;
      case 0x112:
        v276 = " empty-list ";
LABEL_1112:
        v277 = this;
        v278 = 12;
        goto LABEL_825;
      case 0x113:
        v276 = " first-element-marker ";
        goto LABEL_1075;
      case 0x114:
        v276 = " variadic-marker ";
        goto LABEL_1432;
      case 0x115:
        std::string::append(this, "outlined bridged method (", 0x19uLL);
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = ") of ";
        goto LABEL_1108;
      case 0x116:
        std::string::append(this, "outlined copy of ", 0x11uLL);
        v57 = *((unsigned __int8 *)a2 + 18);
        v58 = (swift::Demangle::__runtime::Node **)a2;
        if ((v57 - 1) < 2)
          goto LABEL_198;
        if (v57 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_400;
        goto LABEL_197;
      case 0x117:
        std::string::append(this, "outlined consume of ", 0x14uLL);
        v89 = *((unsigned __int8 *)a2 + 18);
        v58 = (swift::Demangle::__runtime::Node **)a2;
        if ((v89 - 1) < 2)
          goto LABEL_198;
        if (v89 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_197:
          v58 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_198:
          v90 = *v58;
        }
        else
        {
LABEL_400:
          v90 = 0;
        }
        v161 = *((unsigned __int8 *)a2 + 18);
        if (v161 == 2)
          goto LABEL_511;
        if (v161 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_826;
        goto LABEL_510;
      case 0x118:
        v16 = "outlined retain of ";
        v32 = this;
        v33 = 19;
        goto LABEL_312;
      case 0x119:
        v16 = "outlined release of ";
        goto LABEL_237;
      case 0x11A:
        v16 = "outlined init with take of ";
        goto LABEL_311;
      case 0x11B:
      case 0x15E:
        v16 = "outlined init with copy of ";
        goto LABEL_311;
      case 0x11C:
      case 0x15F:
        v16 = "outlined assign with take of ";
        goto LABEL_46;
      case 0x11D:
      case 0x160:
        v16 = "outlined assign with copy of ";
LABEL_46:
        v32 = this;
        v33 = 29;
        goto LABEL_312;
      case 0x11E:
      case 0x161:
        v16 = "outlined destroy of ";
LABEL_237:
        v32 = this;
        v33 = 20;
        goto LABEL_312;
      case 0x11F:
        v404 = "outlined variable #";
        v405 = this;
        v406 = 19;
        goto LABEL_1188;
      case 0x120:
        v404 = "outlined read-only object #";
        v405 = this;
        v406 = 27;
LABEL_1188:
        std::string::append(v405, v404, v406);
        v277 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(_QWORD *)a2);
        v276 = " of ";
        v278 = 4;
        goto LABEL_825;
      case 0x121:
        v445 = *((unsigned __int8 *)a2 + 18);
        v446 = (swift::Demangle::__runtime::Node *const *)a2;
        if ((v445 - 1) < 2)
          goto LABEL_1676;
        if (v445 == 5)
        {
          v446 = *(swift::Demangle::__runtime::Node *const **)a2;
        }
        else
        {
          v446 = 0;
LABEL_1676:
          if (v445 != 5)
          {
            v574 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 8);
            if (v445 != 1)
              v574 = 0;
            if (v445 == 2)
              v575 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 16);
            else
              v575 = v574;
LABEL_1683:
            goto LABEL_826;
          }
        }
        v575 = (swift::Demangle::__runtime::Node *const *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_1683;
      case 0x123:
        v29 = "module descriptor ";
        v30 = this;
        v31 = 18;
        goto LABEL_297;
      case 0x124:
        v29 = "extension descriptor ";
        goto LABEL_241;
      case 0x125:
        v29 = "anonymous descriptor ";
LABEL_241:
        v30 = this;
        v31 = 21;
        goto LABEL_297;
      case 0x126:
        v363 = "generic parameter reference for associated type ";
        v364 = this;
        v365 = 48;
LABEL_1513:
        std::string::append(v364, v363, v365);
LABEL_1514:
        goto LABEL_826;
      case 0x127:
        v419 = *((unsigned __int8 *)a2 + 18);
        if ((v419 - 1) < 2)
          goto LABEL_1155;
        if (v419 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1155:
          v420 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v420 = 0;
        }
        v276 = "?";
        goto LABEL_1496;
      case 0x128:
        std::string::append(this, "[", 1uLL);
        v416 = *((unsigned __int8 *)a2 + 18);
        if ((v416 - 1) < 2)
          goto LABEL_1145;
        if (v416 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1145:
          v417 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v417 = 0;
        }
        v541 = v8 + 1;
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1578;
      case 0x129:
        std::string::append(this, "[", 1uLL);
        v381 = *((unsigned __int8 *)a2 + 18);
        v382 = (swift::Demangle::__runtime::Node **)a2;
        if ((v381 - 1) < 2)
          goto LABEL_1029;
        if (v381 == 5 && *((_DWORD *)a2 + 2))
        {
          v382 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1029:
          v383 = *v382;
        }
        else
        {
          v383 = 0;
        }
        v538 = v8 + 1;
        std::string::append(this, " : ", 3uLL);
        v539 = *((unsigned __int8 *)a2 + 18);
        if (v539 == 2)
          goto LABEL_1546;
        if (v539 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1546:
          v417 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
          v417 = 0;
        }
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v538;
LABEL_1578:
        v544 = "]";
LABEL_1612:
        v562 = this;
        v563 = 1;
        goto LABEL_1808;
      case 0x12A:
        std::string::append(this, "(", 1uLL);
        v389 = *((unsigned __int8 *)a2 + 18);
        if ((v389 - 1) < 2)
          goto LABEL_1055;
        if (v389 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1055:
          v390 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v390 = 0;
        }
        v544 = ")";
        goto LABEL_1612;
      case 0x12B:
        std::string::append(this, "accessor function at ", 0x15uLL);
LABEL_1168:
        v425 = *(_QWORD *)a2;
LABEL_1169:
        swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v425);
        goto LABEL_826;
      case 0x12C:
        v66 = *((unsigned __int8 *)a2 + 18);
        v67 = (swift::Demangle::__runtime::Node **)a2;
        if ((v66 - 1) < 2)
          goto LABEL_355;
        if (v66 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_354:
          v67 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_355:
          v141 = *v67;
        }
        else
        {
LABEL_405:
          v141 = 0;
        }
        std::string::push_back(this, 46);
LABEL_507:
        v194 = *((unsigned __int8 *)a2 + 18);
        if (v194 == 2)
          goto LABEL_511;
        if (v194 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_597;
LABEL_510:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_511:
        v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        goto LABEL_7;
      case 0x12D:
        v341 = "opaque type symbolic reference 0x";
        v342 = this;
        v343 = 33;
        goto LABEL_1280;
      case 0x12E:
        v44 = "opaque type descriptor for ";
LABEL_146:
        v45 = this;
        v46 = 27;
        goto LABEL_320;
      case 0x12F:
        v44 = "opaque type descriptor runtime record for ";
LABEL_278:
        v45 = this;
        v46 = 42;
        goto LABEL_320;
      case 0x130:
        v44 = "opaque type descriptor accessor for ";
LABEL_317:
        v45 = this;
        v46 = 36;
        goto LABEL_320;
      case 0x131:
        v44 = "opaque type descriptor accessor impl for ";
LABEL_221:
        v45 = this;
        v46 = 41;
        goto LABEL_320;
      case 0x132:
        std::string::append(this, "opaque type descriptor accessor key for ", 0x28uLL);
        v88 = *((unsigned __int8 *)a2 + 18);
        if ((v88 - 1) < 2)
          goto LABEL_301;
        if (v88 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_546;
        goto LABEL_300;
      case 0x133:
        v29 = "opaque type descriptor accessor var for ";
        v30 = this;
        v31 = 40;
        goto LABEL_297;
      case 0x134:
        v276 = "some";
LABEL_1060:
        v277 = this;
        v278 = 4;
        goto LABEL_825;
      case 0x135:
        std::string::append(this, "<<opaque return type of ", 0x18uLL);
        v276 = ">>";
        goto LABEL_1745;
      case 0x136:
        v29 = "specialized generic metaclass for ";
        v30 = this;
        v31 = 34;
        goto LABEL_297;
      case 0x137:
        v29 = "canonical specialized generic type metadata accessor for ";
        v30 = this;
        v31 = 57;
        goto LABEL_297;
      case 0x138:
        v29 = "metadata instantiation cache for ";
        v30 = this;
        v31 = 33;
        goto LABEL_297;
      case 0x139:
        v29 = "noncanonical specialized generic type metadata for ";
        v30 = this;
        v31 = 51;
        goto LABEL_297;
      case 0x13A:
        v29 = "cache variable for noncanonical specialized generic type metadata for ";
        v30 = this;
        v31 = 70;
        goto LABEL_297;
      case 0x13B:
      case 0x13C:
        if (v12 == 316)
          v17 = "one-time initialization token for ";
        else
          v17 = "one-time initialization function for ";
        if (v12 == 316)
          v18 = 34;
        else
          v18 = 37;
        std::string::append(this, v17, v18);
        v19 = *((unsigned __int8 *)a2 + 18);
        if (v19 == 2)
          goto LABEL_497;
        if (v19 != 5)
          goto LABEL_498;
LABEL_495:
        if (*((_DWORD *)a2 + 2) < 2u)
          goto LABEL_498;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_497:
        v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        goto LABEL_6;
      case 0x13D:
        v76 = *((unsigned __int8 *)a2 + 18);
        if (v76 == 1)
          goto LABEL_5;
        if (v76 == 5 && *((_DWORD *)a2 + 2) == 1)
          goto LABEL_4;
        std::string::push_back(this, 40);
        v491 = *((unsigned __int8 *)a2 + 18);
        if (v491 == 5)
        {
          v578 = (unsigned int *)((char *)a2 + 8);
          v579 = *((unsigned int *)a2 + 2);
          if (!(_DWORD)v579
            || (v580 = v8 + 1,
          {
LABEL_1836:
            std::string::push_back(this, 41);
            goto LABEL_826;
          }
        }
        else
        {
          if (v491 != 2)
          {
            if (v491 == 1)
            goto LABEL_1836;
          }
          v578 = (unsigned int *)((char *)a2 + 8);
          v580 = v8 + 1;
          v579 = 2;
        }
        v581 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          v583 = *((unsigned __int8 *)a2 + 18);
          if (v583 == 2)
          {
            v584 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v583 != 5)
              goto LABEL_1704;
            v584 = *v578;
          }
          if (v584 > v581)
          {
            v585 = v583 - 1;
            v586 = a2;
            if (v585 >= 2)
              v586 = *(swift::Demangle::__runtime::Node **)a2;
            v582 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v586 + v581);
            goto LABEL_1705;
          }
LABEL_1704:
          v582 = 0;
LABEL_1705:
          if (v579 == ++v581)
            goto LABEL_1836;
        }
      case 0x13E:
        v29 = "flag for loading of canonical specialized generic type metadata for ";
        v30 = this;
        v31 = 68;
        goto LABEL_297;
      case 0x13F:
        v276 = "async function pointer to ";
        goto LABEL_1067;
      case 0x140:
      case 0x144:
        v630 = v6;
        v20 = 0;
        v21 = 0;
        v22 = *((unsigned __int8 *)a2 + 18);
        v23 = v22;
        v24 = v22 - 1;
        v25 = -1;
        while (2)
        {
          v26 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v22 == 1)
            goto LABEL_30;
          if ((_DWORD)v22 == 5)
          {
            if (v21 == *((_DWORD *)a2 + 2))
              break;
            goto LABEL_31;
          }
          v26 = 2;
          if ((_DWORD)v22 != 2)
            v26 = 0;
LABEL_30:
          if (v21 != v26)
          {
LABEL_31:
            v27 = a2;
            if ((v22 - 1) >= 2)
              v27 = *(swift::Demangle::__runtime::Node **)a2;
            if (*(_WORD *)(*((_QWORD *)v27 + v21) + 16) != 321)
            {
              ++v21;
              ++v25;
              ++v20;
              continue;
            }
          }
          break;
        }
        v28 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v22)
        {
          case 1:
            break;
          case 5:
            v28 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v28 = 2;
            break;
          default:
            goto LABEL_416;
        }
        if (v28 > v21)
        {
          v164 = a2;
          if (v24 >= 2)
            v164 = *(swift::Demangle::__runtime::Node **)a2;
          v165 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v164 + v21);
LABEL_417:
          if ((_DWORD)v22 != 1)
          {
            if ((_DWORD)v22 == 5)
            {
              v23 = *((unsigned int *)a2 + 2);
            }
            else
            {
              if ((_DWORD)v22 != 2)
                goto LABEL_426;
              v23 = 2;
            }
          }
          v166 = (v21 + 1);
          if (v23 > v166)
          {
            v167 = a2;
            if (v24 >= 2)
              v167 = *(swift::Demangle::__runtime::Node **)a2;
            v168 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v167 + v166);
LABEL_427:
            if ((_DWORD)v22 != 1)
            {
              if ((_DWORD)v22 == 5)
              {
                v22 = *((unsigned int *)a2 + 2);
              }
              else
              {
                if ((_DWORD)v22 != 2)
                  goto LABEL_436;
                v22 = 2;
              }
            }
            v169 = (v21 + 2);
            if (v22 > v169)
            {
              v170 = a2;
              if (v24 >= 2)
                v170 = *(swift::Demangle::__runtime::Node **)a2;
              v171 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v170 + v169);
              goto LABEL_437;
            }
LABEL_436:
            v171 = 0;
LABEL_437:
            if (v12 == 324)
              std::string::append(this, "vtable thunk for ", 0x11uLL);
            std::string::append(this, " of ", 4uLL);
            if (!(_DWORD)v21)
            {
              v11 = 0;
              v6 = v630;
              v4 = &jpt_59048;
              goto LABEL_731;
            }
            v629 = v171;
            v172 = v168;
            v173 = 0;
            v174 = (v21 - 1);
            while (1)
            {
              v176 = *((unsigned __int8 *)a2 + 18);
              if (v25 == v173)
              {
                if ((v176 - 1) >= 2)
                {
                  v177 = 0;
                  v178 = *(swift::Demangle::__runtime::Node **)a2;
                }
                else
                {
                  v177 = 1;
                  v178 = a2;
                }
                if (*(_WORD *)(*((_QWORD *)v178 + v174) + 16) == 43)
                {
                  if ((_DWORD)v176 == 1)
                  {
                    v6 = v630;
                    v4 = &jpt_59048;
                    v168 = v172;
                  }
                  else
                  {
                    v6 = v630;
                    v4 = &jpt_59048;
                    v168 = v172;
                    if ((_DWORD)v176 != 5)
                    {
                      v171 = v629;
                      if ((_DWORD)v176 == 2)
                      {
                        v176 = 2;
                        goto LABEL_726;
                      }
                      goto LABEL_730;
                    }
                    v176 = *((unsigned int *)a2 + 2);
                  }
                  v171 = v629;
LABEL_726:
                  if (v176 <= v174)
                  {
LABEL_730:
                    v11 = 0;
                  }
                  else
                  {
                    if ((v177 & 1) == 0)
                      a2 = *(swift::Demangle::__runtime::Node **)a2;
                    v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + v174);
                  }
LABEL_731:
                  if (this[1].__r_.__value_.__s.__data_[11])
                    goto LABEL_826;
                  std::string::append(this, " with respect to parameters ", 0x1CuLL);
                  std::string::append(this, " and results ", 0xDuLL);
                  if (v11)
                  {
                    if (this[1].__r_.__value_.__s.__data_[7])
                    {
LABEL_734:
                      std::string::append(this, " with ", 6uLL);
                      goto LABEL_7;
                    }
                    goto LABEL_826;
                  }
                  goto LABEL_827;
                }
              }
              v179 = v176 - 1;
              if ((_DWORD)v176 == 1)
                goto LABEL_452;
              if ((_DWORD)v176 != 5)
                break;
              if (*((unsigned int *)a2 + 2) > v173)
              {
LABEL_455:
                v180 = a2;
                if (v179 >= 2)
                  v180 = *(swift::Demangle::__runtime::Node **)a2;
                v175 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v180 + v173);
                goto LABEL_442;
              }
LABEL_441:
              v175 = 0;
LABEL_442:
              if (v20 == ++v173)
              {
                v11 = 0;
                v6 = v630;
                v4 = &jpt_59048;
                v168 = v172;
                v171 = v629;
                goto LABEL_731;
              }
            }
            if ((_DWORD)v176 != 2)
              goto LABEL_441;
            v176 = 2;
LABEL_452:
            if (v176 > v173)
              goto LABEL_455;
            goto LABEL_441;
          }
LABEL_426:
          v168 = 0;
          goto LABEL_427;
        }
LABEL_416:
        v165 = 0;
        goto LABEL_417;
      case 0x141:
        v11 = 0;
        HIDWORD(v429) = *(unsigned __int8 *)a2;
        LODWORD(v429) = (HIDWORD(v429) << 24) - 1677721600;
        switch((v429 >> 25))
        {
          case 0u:
            v276 = "differential";
            goto LABEL_1112;
          case 1u:
            v276 = "forward-mode derivative";
            goto LABEL_1758;
          case 6u:
            v276 = "pullback";
            goto LABEL_1756;
          case 7u:
            v276 = "reverse-mode derivative";
LABEL_1758:
            v277 = this;
            v278 = 23;
            goto LABEL_825;
          default:
            goto LABEL_827;
        }
      case 0x142:
        std::string::append(this, "autodiff self-reordering reabstraction thunk ", 0x2DuLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        v11 = *(swift::Demangle::__runtime::Node **)a2;
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "for ", 4uLL);
          goto LABEL_6;
        }
        v185 = v4;
        v187 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
        v186 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
        v188 = v186[8];
        if (v188 == 43)
          v189 = 24;
        else
          v189 = 16;
        std::string::append(this, "for ", 4uLL);
        if (v186 && v188 == 43)
        {
          std::string::push_back(this, 32);
        }
        std::string::append(this, " from ", 6uLL);
        std::string::append(this, " to ", 4uLL);
        v11 = v187;
        v4 = v185;
        goto LABEL_7;
      case 0x143:
        std::string::append(this, "autodiff subset parameters thunk for ", 0x25uLL);
        v91 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v91)
        {
          case 1:
            v94 = 0;
            v92 = -1;
            v93 = *((unsigned __int8 *)a2 + 18);
            goto LABEL_622;
          case 5:
            v93 = *((unsigned int *)a2 + 2);
            v92 = v93 - 2;
            if (!(_DWORD)v93)
            {
              v221 = 0;
              v93 = 0;
              v223 = 0;
              v222 = -3;
              goto LABEL_743;
            }
            v94 = v93 - 1;
            v220 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_623;
          case 2:
            v92 = 0;
            v93 = 2;
            v94 = 1;
LABEL_622:
            v220 = a2;
LABEL_623:
            v221 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v220 + v94);
            goto LABEL_625;
        }
        v93 = 0;
        v221 = 0;
        v92 = -2;
LABEL_625:
        v222 = v93 - 3;
        switch((_DWORD)v91)
        {
          case 1:
            v223 = *((unsigned __int8 *)a2 + 18);
            break;
          case 2:
            v223 = 2;
            break;
          case 5:
            v223 = *((unsigned int *)a2 + 2);
            break;
          default:
            goto LABEL_747;
        }
LABEL_743:
        if (v223 <= v92)
        {
LABEL_747:
          v631 = 0;
          goto LABEL_748;
        }
        v250 = a2;
        if ((v91 - 1) >= 2)
          v250 = *(swift::Demangle::__runtime::Node **)a2;
        v631 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v250 + v92);
LABEL_748:
        switch((_DWORD)v91)
        {
          case 1:
            v251 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            v251 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v251 = 2;
            break;
          default:
            goto LABEL_758;
        }
        if (v251 <= v222)
        {
LABEL_758:
          v253 = 0;
          goto LABEL_759;
        }
        v252 = a2;
        if ((v91 - 1) >= 2)
          v252 = *(swift::Demangle::__runtime::Node **)a2;
        v253 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v252 + v222);
LABEL_759:
        v254 = v91 - 1;
        switch((_DWORD)v91)
        {
          case 1:
            break;
          case 5:
            v91 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v91 = 2;
            break;
          default:
            goto LABEL_768;
        }
        if (v91 <= v93 - 4)
        {
LABEL_768:
          v256 = v4;
          v257 = 0;
          goto LABEL_769;
        }
        v255 = a2;
        if (v254 >= 2)
          v255 = *(swift::Demangle::__runtime::Node **)a2;
        v256 = v4;
        v257 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v255 + v93 - 4);
LABEL_769:
        v258 = v93 - 5;
        std::string::append(this, " from ", 6uLL);
        if (v258)
        {
          v259 = v6;
          v260 = 0;
          v261 = 1;
          while (1)
          {
            v263 = *((unsigned __int8 *)a2 + 18);
            v264 = v263 - 1;
            if ((_DWORD)v263 == 1)
              goto LABEL_777;
            if ((_DWORD)v263 != 5)
              break;
            if (*((unsigned int *)a2 + 2) > v260)
            {
LABEL_780:
              v265 = a2;
              if (v264 >= 2)
                v265 = *(swift::Demangle::__runtime::Node **)a2;
              v262 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v265 + v260);
              goto LABEL_772;
            }
LABEL_771:
            v262 = 0;
LABEL_772:
            v260 = v261++;
            if (v258 <= v260)
              goto LABEL_790;
          }
          if ((_DWORD)v263 != 2)
            goto LABEL_771;
          v263 = 2;
LABEL_777:
          if (v263 > v260)
            goto LABEL_780;
          goto LABEL_771;
        }
        v266 = *((unsigned __int8 *)a2 + 18);
        v267 = (swift::Demangle::__runtime::Node **)a2;
        if ((v266 - 1) < 2)
          goto LABEL_787;
        if (v266 == 5 && *((_DWORD *)a2 + 2))
        {
          v267 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_787:
          v259 = v6;
          v268 = *v267;
        }
        else
        {
          v259 = v6;
          v268 = 0;
        }
LABEL_790:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        std::string::append(this, " and results ", 0xDuLL);
        std::string::append(this, " to parameters ", 0xFuLL);
        if (!v258)
          goto LABEL_826;
        std::string::append(this, " of type ", 9uLL);
        v269 = *((unsigned __int8 *)a2 + 18);
        v270 = v269 - 1;
        if ((_DWORD)v269 == 1)
        {
          v6 = v259;
        }
        else
        {
          v6 = v259;
          if ((_DWORD)v269 == 5)
          {
            v269 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v269 != 2)
              goto LABEL_802;
            v269 = 2;
          }
        }
        if (v269 <= v258)
        {
LABEL_802:
          v11 = 0;
          v4 = v256;
          goto LABEL_7;
        }
        if (v270 >= 2)
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + v258);
        v4 = v256;
LABEL_7:
        a4 = 0;
        v9 = 1;
        a2 = v11;
        if (v8 > 0x300)
          goto LABEL_823;
        continue;
      case 0x145:
        v77 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v77)
          v78 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * v77 - 8) + 16);
        else
          v78 = (unsigned __int16 *)&dword_10;
        v275 = *v78 == 43;
        v190 = -4;
        if (!v275)
          v190 = -3;
        HIDWORD(v191) = **(unsigned __int8 **)(*(_QWORD *)a2 + 8 * (v190 + v77));
        LODWORD(v191) = (HIDWORD(v191) << 24) - 1677721600;
        switch((v191 >> 25))
        {
          case 0u:
            v192 = "normal";
            goto LABEL_645;
          case 1u:
            v192 = "forward-mode";
            goto LABEL_648;
          case 4u:
            v192 = "linear";
LABEL_645:
            v224 = this;
            v225 = 6;
            goto LABEL_649;
          case 7u:
            v192 = "reverse-mode";
LABEL_648:
            v224 = this;
            v225 = 12;
LABEL_649:
            std::string::append(v224, v192, v225);
            break;
          default:
            break;
        }
        std::string::append(this, " differentiability witness for ", 0x1FuLL);
        v226 = *((unsigned __int8 *)a2 + 18);
        if ((_DWORD)v226 == 1)
          goto LABEL_655;
        if ((_DWORD)v226 == 5)
        {
          v226 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v226)
            goto LABEL_655;
LABEL_672:
          LODWORD(v227) = 0;
          goto LABEL_674;
        }
        if ((_DWORD)v226 != 2)
          goto LABEL_672;
        v226 = 2;
LABEL_655:
        v227 = 0;
        while (1)
        {
          v229 = *((unsigned __int8 *)a2 + 18);
          if ((v229 - 1) >= 2)
          {
            v230 = 0;
            v231 = *(swift::Demangle::__runtime::Node **)a2;
          }
          else
          {
            v230 = 1;
            v231 = a2;
          }
          if (*(_WORD *)(*((_QWORD *)v231 + v227) + 16) == 102)
            break;
          if ((_DWORD)v229 == 1)
            goto LABEL_666;
          if ((_DWORD)v229 != 5)
          {
            if ((_DWORD)v229 != 2)
              goto LABEL_656;
            v229 = 2;
LABEL_666:
            if (v229 > v227)
              goto LABEL_669;
            goto LABEL_656;
          }
          if (*((unsigned int *)a2 + 2) > v227)
          {
LABEL_669:
            v232 = a2;
            if ((v230 & 1) == 0)
              v232 = *(swift::Demangle::__runtime::Node **)a2;
            v228 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v232 + v227);
            goto LABEL_657;
          }
LABEL_656:
          v228 = 0;
LABEL_657:
          if (v226 == ++v227)
          {
            LODWORD(v227) = v226;
            break;
          }
        }
LABEL_674:
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        v233 = *((unsigned __int8 *)a2 + 18);
        v234 = v233 - 1;
        if ((_DWORD)v233 == 1)
          goto LABEL_679;
        if ((_DWORD)v233 != 5)
        {
          if ((_DWORD)v233 == 2)
          {
            v233 = 2;
            goto LABEL_679;
          }
          goto LABEL_683;
        }
        v233 = *((unsigned int *)a2 + 2);
LABEL_679:
        v235 = (v227 + 1);
        if (v233 <= v235)
        {
LABEL_683:
          v237 = 0;
        }
        else
        {
          v236 = a2;
          if (v234 >= 2)
            v236 = *(swift::Demangle::__runtime::Node **)a2;
          v237 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v236 + v235);
        }
        std::string::append(this, " and results ", 0xDuLL);
        v238 = *((unsigned __int8 *)a2 + 18);
        v239 = v238 - 1;
        if ((_DWORD)v238 != 1)
        {
          if ((_DWORD)v238 != 5)
          {
            if ((_DWORD)v238 == 2)
            {
              v238 = 2;
              goto LABEL_689;
            }
LABEL_693:
            v242 = 0;
            goto LABEL_694;
          }
          v238 = *((unsigned int *)a2 + 2);
        }
LABEL_689:
        v240 = (v227 + 2);
        if (v238 <= v240)
          goto LABEL_693;
        v241 = a2;
        if (v239 >= 2)
          v241 = *(swift::Demangle::__runtime::Node **)a2;
        v242 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v241 + v240);
LABEL_694:
        v243 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v243)
        {
          case 1:
            v244 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            v244 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v244 = 2;
            break;
          default:
            goto LABEL_826;
        }
        v245 = (v227 + 3);
        if (v244 > v245)
        {
          v246 = v243 - 1;
          if ((_DWORD)v243 != 1)
          {
            if ((_DWORD)v243 == 5)
              v243 = *((unsigned int *)a2 + 2);
            else
              v243 = 2;
          }
          if (v243 <= v245)
          {
            v11 = 0;
          }
          else
          {
            if (v246 >= 2)
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + v245);
          }
          goto LABEL_734;
        }
LABEL_826:
        v11 = 0;
LABEL_827:
        if ((v9 & 1) != 0)
          return 0;
        else
          return v11;
      case 0x146:
        v44 = "@noDerivative ";
LABEL_210:
        v45 = this;
        v46 = 14;
        goto LABEL_320;
      case 0x147:
        std::string::push_back(this, 123);
        v440 = *((unsigned int *)a2 + 2);
        if (*((_DWORD *)a2 + 2))
        {
          v441 = 0;
          v442 = 0;
          v443 = *(_QWORD *)a2;
          do
          {
            if (*(_BYTE *)(v443 + v441) == 83)
            {
              if ((v442 & 1) != 0)
                std::string::append(this, ", ", 2uLL);
              swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v441);
              v442 = 1;
            }
            ++v441;
          }
          while (v440 != v441);
        }
        std::string::push_back(this, 125);
        goto LABEL_826;
      case 0x148:
        if (!this[1].__r_.__value_.__s.__data_[20])
          goto LABEL_826;
        std::string::append(this, "(", 1uLL);
        v421 = *((unsigned __int8 *)a2 + 18);
        if ((v421 - 1) < 2)
          goto LABEL_1161;
        if (v421 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1161:
          v422 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v422 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v544 = " await resume partial function for ";
        v562 = this;
        v563 = 35;
        goto LABEL_1808;
      case 0x149:
        if (!this[1].__r_.__value_.__s.__data_[20])
          goto LABEL_826;
        std::string::append(this, "(", 1uLL);
        v399 = *((unsigned __int8 *)a2 + 18);
        if ((v399 - 1) < 2)
          goto LABEL_1093;
        if (v399 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1093:
          v400 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v400 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v544 = " suspend resume partial function for ";
        v562 = this;
        v563 = 37;
        goto LABEL_1808;
      case 0x14A:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "accessible function runtime record for ";
        v277 = this;
        v278 = 39;
        goto LABEL_825;
      case 0x14B:
        v44 = "_const ";
LABEL_206:
        v45 = this;
        v46 = 7;
LABEL_320:
        std::string::append(v45, v44, v46);
        v126 = *((unsigned __int8 *)a2 + 18);
        if ((v126 - 1) < 2)
          goto LABEL_324;
        if (v126 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_546;
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_324:
        v11 = *(swift::Demangle::__runtime::Node **)a2;
        ++v8;
        goto LABEL_7;
      case 0x14C:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "back deployment thunk for ";
LABEL_1067:
        v277 = this;
        v278 = 26;
        goto LABEL_825;
      case 0x14D:
        v276 = "back deployment fallback for ";
        v277 = this;
        v278 = 29;
        goto LABEL_825;
      case 0x14E:
        v430 = this[1].__r_.__value_.__s.__data_[7];
        this[1].__r_.__value_.__s.__data_[7] = 1;
        v431 = *((unsigned __int8 *)a2 + 18);
        if (v431 == 2)
          goto LABEL_1184;
        if (v431 != 5)
          goto LABEL_1792;
        v432 = *((_DWORD *)a2 + 2);
        if (v432 == 2)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1184:
          v433 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
          std::string::append(this, "existential shape for ", 0x16uLL);
          if (v433)
          {
            v434 = v8 + 1;
            std::string::append(this, " ", 1uLL);
            v433 = 0;
            goto LABEL_1795;
          }
        }
        else
        {
          if (v432 < 2)
LABEL_1792:
            v433 = 0;
          else
            v433 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 8);
          std::string::append(this, "existential shape for ", 0x16uLL);
        }
        v434 = v8 + 1;
LABEL_1795:
        std::string::append(this, "any ", 4uLL);
        result = 0;
        this[1].__r_.__value_.__s.__data_[7] = v430;
        return result;
      case 0x14F:
        v29 = "uniquable ";
        v30 = this;
        v31 = 10;
LABEL_297:
        std::string::append(v30, v29, v31);
        v125 = *((unsigned __int8 *)a2 + 18);
        if ((v125 - 1) < 2)
          goto LABEL_301;
        if (v125 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_498;
LABEL_300:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_301:
        v11 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_6;
      case 0x150:
        v341 = "unique existential shape symbolic reference 0x";
        v342 = this;
        v343 = 46;
        goto LABEL_1280;
      case 0x151:
        v341 = "non-unique existential shape symbolic reference 0x";
        v342 = this;
        v343 = 50;
        goto LABEL_1280;
      case 0x152:
        v426 = *((unsigned __int8 *)a2 + 18);
        v427 = a2;
        if ((v426 - 1) < 2)
          goto LABEL_1174;
        if (v426 == 5 && *((_DWORD *)a2 + 2))
        {
          v427 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1174:
          v428 = *(_QWORD *)v427;
        }
        else
        {
          v428 = 0;
        }
        v551 = *(unsigned __int16 *)(v428 + 16);
        std::string::append(this, "symbolic existential type (", 0x1BuLL);
        if (v551 == 336)
          v552 = (const std::string::value_type *)&unk_A9F1F;
        else
          v552 = "non-";
        std::string::append(this, v552, 4 * (v551 != 336));
        std::string::append(this, "unique) 0x", 0xAuLL);
        v553 = swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(_QWORD *)v428);
        std::string::append(v553, " <", 2uLL);
        v554 = *((unsigned __int8 *)a2 + 18);
        v555 = a2;
        if (v554 == 2)
          goto LABEL_1591;
        if (v554 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v555 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1591:
          v556 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v555 + 1);
        }
        else
        {
          v556 = 0;
        }
        v557 = v8 + 1;
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
        {
          std::string::append(this, ", ", 2uLL);
          if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
            v558 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 16);
          else
            v558 = 0;
        }
        v276 = ">";
        goto LABEL_1496;
      case 0x153:
        v276 = "metatypes-removed";
        goto LABEL_1432;
      case 0x154:
        v276 = "#_hasSymbol query for ";
LABEL_1075:
        v277 = this;
        v278 = 22;
        goto LABEL_825;
      case 0x157:
        v16 = "outlined enum tag store of ";
LABEL_311:
        v32 = this;
        v33 = 27;
        goto LABEL_312;
      case 0x158:
        v16 = "outlined enum project data for load of ";
        v32 = this;
        v33 = 39;
        goto LABEL_312;
      case 0x159:
        v16 = "outlined enum get tag of ";
        v32 = this;
        v33 = 25;
        goto LABEL_312;
      case 0x15A:
        v16 = "async demotion of ";
LABEL_274:
        v32 = this;
        v33 = 18;
LABEL_312:
        std::string::append(v32, v16, v33);
LABEL_313:
        v119 = *((unsigned __int8 *)a2 + 18);
        if ((v119 - 1) >= 2)
          goto LABEL_314;
        goto LABEL_5;
      case 0x15B:
        v341 = "objective-c protocol symbolic reference 0x";
        v342 = this;
        v343 = 42;
LABEL_1280:
        std::string::append(v342, v341, v343);
        swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(_QWORD *)a2);
        goto LABEL_826;
      case 0x15C:
        std::string::append(this, "lifetime dependence: ", 0x15uLL);
        v79 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v79 = *(swift::Demangle::__runtime::Node **)a2;
        v80 = **(unsigned __int8 **)v79;
        if (v80 == 115)
        {
          v81 = "scope ";
          v82 = this;
          v83 = 6;
        }
        else
        {
          if (v80 != 105)
            goto LABEL_537;
          v81 = "inherit ";
          v82 = this;
          v83 = 8;
        }
        std::string::append(v82, v81, v83);
LABEL_537:
        v206 = *((unsigned __int8 *)a2 + 18);
        if (v206 == 2)
          goto LABEL_541;
        if (v206 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_541:
          v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
          ++v8;
        }
        else
        {
LABEL_546:
          v11 = 0;
          ++v8;
        }
        goto LABEL_7;
      case 0x15D:
        std::string::append(this, "(self lifetime dependence: ", 0x1BuLL);
        v391 = *(unsigned __int8 *)a2;
        if (v391 == 115)
        {
          v276 = "scope) ";
LABEL_1634:
          v277 = this;
          v278 = 7;
          goto LABEL_825;
        }
        if (v391 != 105)
          goto LABEL_826;
        v276 = "inherit) ";
        goto LABEL_1788;
      case 0x162:
        v384 = *((unsigned __int8 *)a2 + 18);
        v385 = (swift::Demangle::__runtime::Node **)a2;
        if ((v384 - 1) < 2)
          goto LABEL_1034;
        if (v384 == 5 && *((_DWORD *)a2 + 2))
        {
          v385 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1034:
          v386 = *v385;
        }
        else
        {
          v386 = 0;
        }
        std::string::append(this, ": ~", 3uLL);
        v542 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v542 = *(swift::Demangle::__runtime::Node **)a2;
        v543 = **((_QWORD **)v542 + 1);
        if (v543 == 1)
        {
          std::string::append(this, "Swift.", 6uLL);
          v276 = "Escapable";
          goto LABEL_1788;
        }
        if (!v543)
        {
          std::string::append(this, "Swift.", 6uLL);
          v276 = "Copyable";
          goto LABEL_1756;
        }
        std::string::append(this, "Swift.<bit ", 0xBuLL);
        if (*((_BYTE *)a2 + 18) == 5)
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        v277 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, **((_QWORD **)a2 + 1));
        v276 = ">";
        v278 = 1;
        goto LABEL_825;
      default:
        printer_unreachable("bad node kind!");
    }
  }
}

