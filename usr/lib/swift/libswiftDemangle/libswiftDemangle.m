uint64_t swift_demangle_getDemangledName(swift::Demangle *a1, char *a2, size_t a3)
{
  uint64_t DemangledName_Options;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9[2];
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;

  *(_QWORD *)&v13[1] = 0x101010101010101;
  v13[9] = 1;
  *(_QWORD *)&v13[10] = 0x101010100000000;
  v13[18] = 1;
  *(_WORD *)&v13[19] = 256;
  v13[21] = 1;
  v14 = 0;
  v15 = 0;
  v16[0] = &unk_24C358B70;
  v16[1] = swift::Demangle::genericParameterName;
  v17 = v16;
  v13[0] = 1;
  v9[0] = *(_OWORD *)v13;
  v9[1] = *(unint64_t *)&v13[16];
  v10 = 0;
  v11[0] = &unk_24C358B70;
  v12 = v11;
  v11[1] = swift::Demangle::genericParameterName;
  DemangledName_Options = swift_demangle_getDemangledName_Options(a1, a2, a3, v9);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
    goto LABEL_10;
  }
  if (v17)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return DemangledName_Options;
}

uint64_t swift_demangle_getDemangledName_Options(swift::Demangle *a1, char *a2, size_t a3, __int128 *a4)
{
  size_t v8;
  size_t v9;
  uint64_t v10;
  const char *p_s1;
  uint64_t v12;
  void *v13;
  void *__s1;
  uint64_t v16;
  unsigned __int8 v17;

  if (!swift::Demangle::isSwiftSymbol(a1, a2))
    return 0;
  if (a1)
    v8 = strlen((const char *)a1);
  else
    v8 = 0;
  swift::Demangle::demangleSymbolAsString(a1, v8, a4, &__s1);
  v9 = strlen((const char *)a1);
  v10 = v17;
  if ((char)v17 < 0)
  {
    v12 = v16;
    if (v9 == v16)
    {
      if (v9 == -1)
        goto LABEL_29;
      v13 = __s1;
      if (!memcmp(__s1, a1, v9))
      {
        v12 = 0;
        goto LABEL_26;
      }
      if (!a2 || !a3)
        goto LABEL_24;
    }
    else if (!a2 || !a3)
    {
      goto LABEL_25;
    }
    p_s1 = (const char *)__s1;
    goto LABEL_22;
  }
  if (v9 == v17)
  {
    if (v9 != -1)
    {
      if (memcmp(&__s1, a1, v9))
        goto LABEL_9;
      return 0;
    }
LABEL_29:
    abort();
  }
LABEL_9:
  if (a2 && a3)
  {
    p_s1 = (const char *)&__s1;
LABEL_22:
    strncpy(a2, p_s1, a3);
    a2[a3 - 1] = 0;
  }
  if ((v10 & 0x80) != 0)
  {
LABEL_24:
    v12 = v16;
LABEL_25:
    v13 = __s1;
LABEL_26:
    operator delete(v13);
    return v12;
  }
  return v10;
}

uint64_t swift_demangle_getSimplifiedDemangledName(swift::Demangle *a1, char *a2, size_t a3)
{
  uint64_t DemangledName_Options;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9[2];
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;

  v13[9] = 1;
  v13[18] = 1;
  *(_WORD *)&v13[19] = 0;
  v13[21] = 1;
  v14 = 0;
  v15 = 0;
  v16[0] = &unk_24C358B70;
  v16[1] = swift::Demangle::genericParameterName;
  v17 = v16;
  *(_WORD *)v13 = 257;
  *(_DWORD *)&v13[2] = 0;
  *(_DWORD *)&v13[5] = 0;
  *(_QWORD *)&v13[10] = 0x101000001010101;
  v9[0] = *(_OWORD *)v13;
  v9[1] = *(unint64_t *)&v13[16];
  v10 = 0;
  v11[0] = &unk_24C358B70;
  v12 = v11;
  v11[1] = swift::Demangle::genericParameterName;
  DemangledName_Options = swift_demangle_getDemangledName_Options(a1, a2, a3, v9);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
    goto LABEL_10;
  }
  if (v17)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return DemangledName_Options;
}

unint64_t swift_demangle_getModuleName(char *a1, char *a2, size_t a3)
{
  size_t v6;
  unint64_t v7;
  const char *v8;
  void *v10[2];
  unsigned __int8 v11;
  swift::Demangle::Node *v12;

  swift::Demangle::Context::Context((swift::Demangle::Context *)&v12);
  if (a1)
    v6 = strlen(a1);
  else
    v6 = 0;
  swift::Demangle::Context::getModuleName(&v12, a1, v6, v10);
  v7 = v11;
  if (a2 && a3)
  {
    if ((v11 & 0x80u) == 0)
      v8 = (const char *)v10;
    else
      v8 = (const char *)v10[0];
    strncpy(a2, v8, a3);
    a2[a3 - 1] = 0;
  }
  if ((v7 & 0x80) != 0)
  {
    v7 = (unint64_t)v10[1];
    operator delete(v10[0]);
  }
  swift::Demangle::Context::~Context((swift::Demangle::Context *)&v12);
  return v7;
}

uint64_t swift_demangle_hasSwiftCallingConvention(char *a1)
{
  size_t v2;
  uint64_t hasSwiftCallingConvention;
  swift::Demangle::NodeFactory *v5;

  swift::Demangle::Context::Context((swift::Demangle::Context *)&v5);
  if (a1)
    v2 = strlen(a1);
  else
    v2 = 0;
  hasSwiftCallingConvention = swift::Demangle::Context::hasSwiftCallingConvention(&v5, a1, v2);
  swift::Demangle::Context::~Context((swift::Demangle::Context *)&v5);
  return hasSwiftCallingConvention;
}

uint64_t fnd_get_demangled_name(swift::Demangle *a1, char *a2, size_t a3)
{
  uint64_t DemangledName_Options;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9[2];
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;

  v13[9] = 1;
  *(_QWORD *)&v13[1] = 0x101010101010101;
  *(_QWORD *)&v13[10] = 0x101010100000000;
  v13[18] = 1;
  *(_WORD *)&v13[19] = 256;
  v13[21] = 1;
  v14 = 0;
  v15 = 0;
  v16[0] = &unk_24C358B70;
  v16[1] = swift::Demangle::genericParameterName;
  v17 = v16;
  v13[0] = 1;
  v9[0] = *(_OWORD *)v13;
  v9[1] = *(unint64_t *)&v13[16];
  v10 = 0;
  v11[0] = &unk_24C358B70;
  v12 = v11;
  v11[1] = swift::Demangle::genericParameterName;
  DemangledName_Options = swift_demangle_getDemangledName_Options(a1, a2, a3, v9);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
    goto LABEL_10;
  }
  if (v17)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return DemangledName_Options;
}

void std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::~__func()
{
  JUMPOUT(0x20BD2A128);
}

_QWORD *std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C358B70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C358B70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long,unsigned long long),std::allocator<std::string (*)(unsigned long long,unsigned long long)>,std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

char *_swift_mangleSimpleClass(uint64_t a1, const char *a2)
{
  BOOL v4;
  char *v6;

  strlen((const char *)a1);
  strlen(a2);
  v6 = 0;
  if (a1
    && strlen((const char *)a1) == 5
    && (*(_DWORD *)a1 == 1718187859 ? (v4 = *(_BYTE *)(a1 + 4) == 116) : (v4 = 0), v4))
  {
    swift_asprintf(&v6, "_TtCs%zu%s");
  }
  else
  {
    swift_asprintf(&v6, "_TtC%zu%s%zu%s");
  }
  return v6;
}

void swift_asprintf(char **a1, const char *__format, ...)
{
  int v4;
  size_t v5;
  char *v6;
  char *v7;
  va_list va;

  va_start(va, __format);
  v4 = vsnprintf(0, 0, __format, va);
  *a1 = 0;
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 + 1);
    v6 = (char *)malloc_type_malloc(v5, 0x887381A9uLL);
    if (v6)
    {
      v7 = v6;
      if (vsnprintf(v6, v5, __format, va) < 0)
        free(v7);
      else
        *a1 = v7;
    }
  }
}

char *_swift_mangleSimpleProtocol(uint64_t a1, const char *a2)
{
  BOOL v4;
  char *v6;

  strlen((const char *)a1);
  strlen(a2);
  v6 = 0;
  if (a1
    && strlen((const char *)a1) == 5
    && (*(_DWORD *)a1 == 1718187859 ? (v4 = *(_BYTE *)(a1 + 4) == 116) : (v4 = 0), v4))
  {
    swift_asprintf(&v6, "_TtPs%zu%s_");
  }
  else
  {
    swift_asprintf(&v6, "_TtP%zu%s%zu%s_");
  }
  return v6;
}

void swift::Demangle::failAssert(swift::Demangle *this, const char *a2, swift::Demangle *a3, swift::Demangle::Node *a4, const char *a5)
{
  const char *v9;
  char *v10;
  double NodeTreeAsString;
  std::string *v12;
  std::string v13;

  NodeTreeAsString = swift::Demangle::getNodeTreeAsString(a3, &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v13;
  else
    v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  swift::Demangle::fatal(0, "%s:%u: assertion failed for Node %p: %s\n%s:%u: Node %p is:\n%s\n", v9, v10, NodeTreeAsString, this, a2, a3, a4, this, a2, a3, v12);
}

uint64_t swift::Demangle::isContext(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 21:
    case 24:
    case 29:
    case 31:
    case 33:
    case 50:
    case 51:
    case 61:
    case 70:
    case 71:
    case 76:
    case 98:
    case 100:
    case 103:
    case 104:
    case 117:
    case 125:
    case 126:
    case 141:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 167:
    case 168:
    case 169:
    case 178:
    case 179:
    case 180:
    case 181:
    case 204:
    case 215:
    case 218:
    case 219:
    case 220:
    case 233:
    case 234:
    case 250:
    case 251:
    case 254:
    case 257:
    case 309:
    case 320:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t swift::Demangle::isFunctionAttr(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 53;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 24:
    case 33:
    case 34:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 91:
    case 107:
    case 111:
    case 117:
    case 118:
    case 203:
    case 224:
    case 234:
    case 235:
    case 266:
    case 275:
    case 276:
    case 277:
    case 279:
    case 280:
    case 287:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

_BYTE *swift::Demangle::makeSymbolicMangledNameStringRef(_BYTE *this, const char *a2)
{
  unsigned int v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;

  if (this)
  {
    v2 = *this;
    if (*this)
    {
      v3 = this;
      do
      {
        if (v2 >= 0x18)
          v4 = 8 * ((v2 & 0xF8) == 24);
        else
          v4 = 4;
        v5 = &v3[v4];
        v6 = v5[1];
        v3 = v5 + 1;
        v2 = v6;
      }
      while (v6);
    }
  }
  return this;
}

uint64_t swift::Demangle::getManglingPrefixLength(uint64_t a1, unint64_t a2)
{
  if (!a2)
    return 0;
  if (a2 < 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 21284 && *(_WORD *)a1 != 29476)
      return 0;
    return 2;
  }
  if (*(_WORD *)a1 == 21599 && *(_BYTE *)(a1 + 2) == 48)
    return 3;
  if (*(_WORD *)a1 == 21284)
    return 2;
  if (*(_WORD *)a1 == 9311 && *(_BYTE *)(a1 + 2) == 83)
    return 3;
  if (*(_WORD *)a1 == 29476)
    return 2;
  if (*(_WORD *)a1 == 9311 && *(_BYTE *)(a1 + 2) == 115)
    return 3;
  if (a2 < 0xE)
    return 0;
  if (*(_QWORD *)a1 != 0x74666977735F5F40 || *(_QWORD *)(a1 + 6) != 0x5F6F7263616D7466)
    return 0;
  return 14;
}

BOOL swift::Demangle::isSwiftSymbol(_WORD *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599 || swift::Demangle::getManglingPrefixLength((uint64_t)a1, a2) != 0;
}

BOOL swift::Demangle::isOldFunctionTypeMangling(unsigned __int16 *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599;
}

BOOL swift::Demangle::isSwiftSymbol(swift::Demangle *this, const char *a2)
{
  size_t v3;

  if (this)
  {
    v3 = strlen((const char *)this);
    if (v3 >= 2 && *(_WORD *)this == 21599)
      return 1;
  }
  else
  {
    v3 = 0;
  }
  return swift::Demangle::getManglingPrefixLength((uint64_t)this, v3) != 0;
}

BOOL swift::Demangle::isObjCSymbol(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength;

  ManglingPrefixLength = (int)swift::Demangle::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength)
    ManglingPrefixLength = a2;
  if (a2 - ManglingPrefixLength < 2)
    return 0;
  if (*(_WORD *)(a1 + ManglingPrefixLength) == 28499)
    return 1;
  return *(unsigned __int16 *)(a1 + ManglingPrefixLength) == 17235;
}

unint64_t swift::Demangle::dropSwiftManglingPrefix(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength;

  ManglingPrefixLength = (int)swift::Demangle::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength)
    ManglingPrefixLength = a2;
  return a1 + ManglingPrefixLength;
}

BOOL swift::Demangle::isAlias(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _BYTE v54[24];
  _BYTE *v55;

  v16[2] = 0;
  v17 = 0;
  v18 = 2400;
  v19 = 0;
  v20 = 0;
  v16[0] = &off_24C358BE0;
  v16[1] = 0;
  v55 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v53 = 0;
  v15 = 0;
  v2 = swift::Demangle::Demangler::demangleType((uint64_t)v16, a1, a2, v14);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v6 = v4 == 234;
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v15)
  {
    v8 = 5;
    goto LABEL_13;
  }
  v16[0] = &off_24C358BE0;
  v9 = v55;
  if (v55 == v54)
  {
    v10 = 4;
    v9 = v54;
LABEL_18:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v55)
  {
    v10 = 5;
    goto LABEL_18;
  }
  v16[0] = &off_24C358BB8;
  v11 = v17;
  if (v17)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      free(v11);
      v11 = v12;
    }
    while (v12);
  }
  if (v19)
    *(_BYTE *)(v19 + 48) = 0;
  return v6;
}

unint64_t swift::Demangle::Demangler::demangleType(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int8x16_t *v15;
  int v16;
  unsigned int v17;
  unint64_t Node;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  int8x16_t *v35;

  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v26 = v25;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v25);
    }
    else
    {
      v26 = (_BYTE *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v26 = 0;
  }
  swift::Demangle::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)&v27, a1, a2, a3, (uint64_t)v25);
  v12 = v26;
  if (v26 == v25)
  {
    v13 = 4;
    v12 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = *(_QWORD *)(a1 + 64);
  while (*(_QWORD *)(a1 + 72) < v14)
  {
    v15 = swift::Demangle::Demangler::demangleOperator((swift::Demangle::Demangler *)a1, v8, v9, v10, v11);
    if (!v15)
      break;
    v35 = v15;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v35, (_QWORD *)a1);
  }
  v16 = *(_DWORD *)(a1 + 96);
  if (!v16 || (v17 = v16 - 1, Node = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v17), *(_DWORD *)(a1 + 96) = v17, !Node))
    Node = swift::Demangle::NodeFactory::createNode((_QWORD *)a1, 221, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  v19 = v27;
  *(_OWORD *)(v27 + 88) = v28;
  *(_OWORD *)(v19 + 104) = v29;
  *(_DWORD *)(v19 + 536) = v30;
  *(_OWORD *)(v19 + 56) = v31;
  *(_QWORD *)(v19 + 72) = v32;
  v20 = *(_QWORD **)(v19 + 568);
  *(_QWORD *)(v19 + 568) = 0;
  if (v20 == (_QWORD *)(v19 + 544))
  {
    v21 = 4;
    v20 = (_QWORD *)(v19 + 544);
  }
  else
  {
    if (!v20)
      goto LABEL_22;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_22:
  if (v34)
  {
    v22 = v33;
    if (v34 == v33)
    {
      *(_QWORD *)(v19 + 568) = v19 + 544;
      (*(void (**)(_QWORD *, uint64_t))(v33[0] + 24))(v33, v19 + 544);
      if (v34 == v33)
      {
        v23 = 4;
      }
      else
      {
        if (!v34)
          return Node;
        v23 = 5;
        v22 = v34;
      }
      (*(void (**)(_QWORD *))(*v22 + 8 * v23))(v22);
      return Node;
    }
    *(_QWORD *)(v19 + 568) = v34;
  }
  else
  {
    *(_QWORD *)(v19 + 568) = 0;
  }
  return Node;
}

void swift::Demangle::Demangler::~Demangler(swift::Demangle::Demangler *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C358BE0;
  v2 = (char *)this + 544;
  v3 = (char *)*((_QWORD *)this + 71);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = &off_24C358BB8;
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      free(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
    *(_BYTE *)(v7 + 48) = 0;
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C358BE0;
  v2 = (char *)this + 544;
  v3 = (char *)*((_QWORD *)this + 71);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = &off_24C358BB8;
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      free(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
    *(_BYTE *)(v7 + 48) = 0;
  JUMPOUT(0x20BD2A128);
}

BOOL swift::Demangle::isClass(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  _BYTE v55[24];
  _BYTE *v56;

  v17[2] = 0;
  v18 = 0;
  v19 = 2400;
  v20 = 0;
  v21 = 0;
  v17[0] = &off_24C358BE0;
  v17[1] = 0;
  v56 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v54 = 0;
  v16 = 0;
  v2 = swift::Demangle::Demangler::demangleType((uint64_t)v17, a1, a2, v15);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v7 = v4 == 13 || v4 == 24;
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
LABEL_19:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  else if (v16)
  {
    v9 = 5;
    goto LABEL_19;
  }
  v17[0] = &off_24C358BE0;
  v10 = v56;
  if (v56 == v55)
  {
    v11 = 4;
    v10 = v55;
LABEL_24:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  else if (v56)
  {
    v11 = 5;
    goto LABEL_24;
  }
  v17[0] = &off_24C358BB8;
  v12 = v18;
  if (v18)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      free(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (v20)
    *(_BYTE *)(v20 + 48) = 0;
  return v7;
}

BOOL swift::Demangle::isEnum(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _BYTE v54[24];
  _BYTE *v55;

  v16[2] = 0;
  v17 = 0;
  v18 = 2400;
  v19 = 0;
  v20 = 0;
  v16[0] = &off_24C358BE0;
  v16[1] = 0;
  v55 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v53 = 0;
  v15 = 0;
  v2 = swift::Demangle::Demangler::demangleType((uint64_t)v16, a1, a2, v14);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v6 = v4 == 14 || v4 == 61;
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
LABEL_17:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v15)
  {
    v8 = 5;
    goto LABEL_17;
  }
  v16[0] = &off_24C358BE0;
  v9 = v55;
  if (v55 == v54)
  {
    v10 = 4;
    v9 = v54;
LABEL_22:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v55)
  {
    v10 = 5;
    goto LABEL_22;
  }
  v16[0] = &off_24C358BB8;
  v11 = v17;
  if (v17)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      free(v11);
      v11 = v12;
    }
    while (v12);
  }
  if (v19)
    *(_BYTE *)(v19 + 48) = 0;
  return v6;
}

BOOL swift::Demangle::isProtocol(uint64_t a1, unint64_t a2)
{
  unint64_t ManglingPrefixLength;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  _BOOL8 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  _BYTE v57[24];
  _BYTE *v58;

  v19[2] = 0;
  v20 = 0;
  v21 = 2400;
  v22 = 0;
  v23 = 0;
  v19[0] = &off_24C358BE0;
  v19[1] = 0;
  v58 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v56 = 0;
  ManglingPrefixLength = (int)swift::Demangle::getManglingPrefixLength(a1, a2);
  if (a2 < ManglingPrefixLength)
    ManglingPrefixLength = a2;
  v18 = 0;
  v5 = swift::Demangle::Demangler::demangleType((uint64_t)v19, a1 + ManglingPrefixLength, a2 - ManglingPrefixLength, v17);
  while (1)
  {
    v7 = *(unsigned __int16 *)(v5 + 16);
    if (v7 != 232)
      break;
    v6 = v5;
    v8 = *(unsigned __int8 *)(v5 + 18);
    if ((v8 - 1) < 2)
    {
LABEL_6:
      v5 = *(_QWORD *)v6;
    }
    else
    {
      v5 = 0;
      if (v8 == 5)
      {
        v5 = 0;
        if (*(_DWORD *)(v6 + 8))
        {
          v6 = *(_QWORD *)v6;
          goto LABEL_6;
        }
      }
    }
  }
  v9 = (v7 - 180) < 2 || v7 == 347;
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  else if (v18)
  {
    v11 = 5;
    goto LABEL_19;
  }
  v19[0] = &off_24C358BE0;
  v12 = v58;
  if (v58 == v57)
  {
    v13 = 4;
    v12 = v57;
LABEL_24:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  else if (v58)
  {
    v13 = 5;
    goto LABEL_24;
  }
  v19[0] = &off_24C358BB8;
  v14 = v20;
  if (v20)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      free(v14);
      v14 = v15;
    }
    while (v15);
  }
  if (v22)
    *(_BYTE *)(v22 + 48) = 0;
  return v9;
}

BOOL swift::Demangle::isStruct(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _BYTE v54[24];
  _BYTE *v55;

  v16[2] = 0;
  v17 = 0;
  v18 = 2400;
  v19 = 0;
  v20 = 0;
  v16[0] = &off_24C358BE0;
  v16[1] = 0;
  v55 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v53 = 0;
  v15 = 0;
  v2 = swift::Demangle::Demangler::demangleType((uint64_t)v16, a1, a2, v14);
  while (1)
  {
    v4 = *(unsigned __int16 *)(v2 + 16);
    if (v4 != 232)
      break;
    v3 = v2;
    v5 = *(unsigned __int8 *)(v2 + 18);
    if ((v5 - 1) < 2)
    {
LABEL_4:
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v2 = 0;
      if (v5 == 5)
      {
        v2 = 0;
        if (*(_DWORD *)(v3 + 8))
        {
          v3 = *(_QWORD *)v3;
          goto LABEL_4;
        }
      }
    }
  }
  v6 = v4 == 15 || v4 == 219;
  v7 = v15;
  if (v15 == v14)
  {
    v8 = 4;
    v7 = v14;
LABEL_17:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v15)
  {
    v8 = 5;
    goto LABEL_17;
  }
  v16[0] = &off_24C358BE0;
  v9 = v55;
  if (v55 == v54)
  {
    v10 = 4;
    v9 = v54;
LABEL_22:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v55)
  {
    v10 = 5;
    goto LABEL_22;
  }
  v16[0] = &off_24C358BB8;
  v11 = v17;
  if (v17)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      free(v11);
      v11 = v12;
    }
    while (v12);
  }
  if (v19)
    *(_BYTE *)(v19 + 48) = 0;
  return v6;
}

_QWORD *swift::Demangle::mangledNameForTypeMetadataAccessor@<X0>(const void *a1@<X0>, size_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, __int16 a5@<W4>, std::string *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  size_t v20;
  const void *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  swift::Demangle::Node *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *result;
  _QWORD *v56;
  unint64_t v57;
  __int128 __p;
  std::string::size_type v62;
  void (**v63)(swift::Demangle::Demangler *__hidden);
  char *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  _BYTE v103[24];
  _BYTE *v104;

  v69 = 0;
  v63 = &off_24C358BE0;
  v64 = 0;
  v104 = 0;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v73 = 0;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v102 = 0;
  v9 = 4800;
  v67 = 4800;
  v68 = 0;
  v12 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  *v12 = 0;
  v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = (unint64_t)(v12 + 601);
  v66 = v12;
  *(_WORD *)(v13 + 16) = 99;
  *(_BYTE *)(v13 + 18) = 0;
  if (v13 + 48 <= v65)
  {
    v15 = v13 + 24;
  }
  else
  {
    v9 = 9600;
    v67 = 9600;
    v14 = malloc_type_malloc(0x2588uLL, 0xD0263BC5uLL);
    *v14 = v12;
    v15 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)(v14 + 1201);
    v66 = v14;
    v12 = v14;
  }
  v64 = (char *)(v15 + 24);
  *(_WORD *)(v15 + 16) = 238;
  *(_BYTE *)(v15 + 18) = 0;
  v16 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (!v16 || v16 + 24 > v65)
  {
    v9 *= 2;
    v67 = v9;
    v17 = malloc_type_malloc(v9 | 8, 0xD0263BC5uLL);
    *v17 = v12;
    v16 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v17 + (v9 | 8);
    v66 = v17;
    v12 = v17;
  }
  v18 = (char *)(v16 + 24);
  *(_WORD *)(v16 + 16) = 232;
  *(_BYTE *)(v16 + 18) = 0;
  v19 = v65;
  if (a2)
  {
    v57 = v13;
    v20 = a4;
    v21 = a1;
    v22 = &v18[a2];
    if ((unint64_t)&v18[a2] > v65)
    {
      if (2 * v9 <= a2 + 1)
        v9 = a2 + 1;
      else
        v9 *= 2;
      v67 = v9;
      v23 = (char *)malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      *(_QWORD *)v23 = v12;
      v18 = v23 + 8;
      v19 = (unint64_t)&v23[v9 + 8];
      v65 = v19;
      v66 = v23;
      v22 = &v23[a2 + 8];
      v12 = v23;
    }
    v24 = v18;
    memmove(v18, v21, a2);
    v18 = v22;
    a4 = v20;
    v13 = v57;
  }
  else
  {
    v24 = 0;
  }
  v25 = (unint64_t)(v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v25 || v25 + 24 > v19)
  {
    v26 = 2 * v9;
    if ((unint64_t)(2 * v9) <= 0x20)
      v26 = 32;
    v67 = v26;
    v27 = v26 + 8;
    v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    *v28 = v12;
    v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v28 + v27;
    v66 = v28;
  }
  v64 = (char *)(v25 + 24);
  *(_WORD *)(v25 + 16) = 153;
  *(_BYTE *)(v25 + 18) = 3;
  *(_QWORD *)v25 = v24;
  *(_QWORD *)(v25 + 8) = a2;
  v29 = v64;
  v30 = v65;
  if (a4)
  {
    if (!v64 || (v31 = &v64[a4], (unint64_t)&v64[a4] > v65))
    {
      v32 = 2 * v67;
      if (2 * v67 <= a4 + 1)
        v32 = a4 + 1;
      v67 = v32;
      v33 = v32 + 8;
      v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *v34 = v66;
      v29 = v34 + 1;
      v30 = (unint64_t)v34 + v33;
      v65 = (unint64_t)v34 + v33;
      v66 = v34;
      v31 = (char *)v34 + a4 + 8;
    }
    v35 = v29;
    memmove(v29, a3, a4);
    v29 = v31;
  }
  else
  {
    v35 = 0;
  }
  v36 = ((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v36 || v36 + 24 > v30)
  {
    v37 = 2 * v67;
    if ((unint64_t)(2 * v67) <= 0x20)
      v37 = 32;
    v67 = v37;
    v38 = v37 + 8;
    v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    *v39 = v66;
    v36 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v39 + v38;
    v66 = v39;
  }
  v64 = (char *)(v36 + 24);
  *(_WORD *)(v36 + 16) = 101;
  *(_BYTE *)(v36 + 18) = 3;
  *(_QWORD *)v36 = v35;
  *(_QWORD *)(v36 + 8) = a4;
  v40 = (unint64_t)(v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v40 || v40 + 24 > v65)
  {
    v41 = 2 * v67;
    if ((unint64_t)(2 * v67) <= 0x20)
      v41 = 32;
    v67 = v41;
    v42 = v41 + 8;
    v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
    *v43 = v66;
    v40 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (unint64_t)v43 + v42;
    v66 = v43;
  }
  v64 = (char *)(v40 + 24);
  *(_WORD *)(v40 + 16) = a5;
  *(_BYTE *)(v40 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v40, (swift::Demangle::Node *)v25, (swift::Demangle::NodeFactory *)&v63, v10, v11);
  swift::Demangle::Node::addChild((unsigned int *)v40, (swift::Demangle::Node *)v36, (swift::Demangle::NodeFactory *)&v63, v44, v45);
  swift::Demangle::Node::addChild((unsigned int *)v16, (swift::Demangle::Node *)v40, (swift::Demangle::NodeFactory *)&v63, v46, v47);
  swift::Demangle::Node::addChild((unsigned int *)v15, (swift::Demangle::Node *)v16, (swift::Demangle::NodeFactory *)&v63, v48, v49);
  swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v15, (swift::Demangle::NodeFactory *)&v63, v50, v51);
  swift::Demangle::mangleNode((swift::Demangle *)v13, v52);
  if (SHIBYTE(v62) < 0)
  {
    std::string::__init_copy_ctor_external(a6, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = __p;
    a6->__r_.__value_.__r.__words[2] = v62;
  }
  v63 = &off_24C358BE0;
  v53 = v104;
  if (v104 == v103)
  {
    v54 = 4;
    v53 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_46;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_46:
  v63 = &off_24C358BB8;
  result = v66;
  if (v66)
  {
    do
    {
      v56 = (_QWORD *)*result;
      free(result);
      result = v56;
    }
    while (v56);
  }
  if (v68)
    *(_BYTE *)(v68 + 48) = 0;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(_QWORD *a1, __int16 a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v5 = 2 * a1[4];
    if (v5 <= 0x20)
      v5 = 32;
    a1[4] = v5;
    v6 = v5 + 8;
    v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    *v7 = a1[3];
    result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v7 + v6;
    a1[3] = v7;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(_QWORD *a1, __int16 a2, void *__src, size_t __len)
{
  void *v8;
  size_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t result;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  if (__len)
  {
    v8 = (void *)a1[1];
    v9 = (size_t)v8 + __len;
    if (v8)
      v10 = v9 > a1[2];
    else
      v10 = 1;
    if (v10)
    {
      v11 = 2 * a1[4];
      if (v11 <= __len + 1)
        v11 = __len + 1;
      a1[4] = v11;
      v12 = v11 + 8;
      v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      v14 = (char *)v13 + v12;
      *v13 = a1[3];
      v8 = v13 + 1;
      a1[2] = v14;
      a1[3] = v13;
      v9 = (size_t)v13 + __len + 8;
    }
    a1[1] = v9;
    memmove(v8, __src, __len);
  }
  else
  {
    v8 = 0;
  }
  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v16 = 2 * a1[4];
    if (v16 <= 0x20)
      v16 = 32;
    a1[4] = v16;
    v17 = v16 + 8;
    v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
    *v18 = a1[3];
    result = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v18 + v17;
    a1[3] = v18;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = __len;
  return result;
}

unsigned int *swift::Demangle::Node::addChild(unsigned int *this, swift::Demangle::Node *a2, swift::Demangle::NodeFactory *a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;

  v5 = (uint64_t)this;
  if (!a2)
    swift::Demangle::failAssert((swift::Demangle *)"/Library/Caches/com.apple.xbs/Sources/swiftlang_embedded_utils/swift/lib/Demangling/Demangler.cpp", (const char *)0x166, (swift::Demangle *)this, (swift::Demangle::Node *)"Child", a5);
  switch(*((_BYTE *)this + 18))
  {
    case 0:
      *(_QWORD *)this = a2;
      *((_QWORD *)this + 1) = 0;
      *((_BYTE *)this + 18) = 1;
      return this;
    case 1:
      *((_QWORD *)this + 1) = a2;
      *((_BYTE *)this + 18) = 2;
      return this;
    case 2:
      v9 = *(char **)this;
      v8 = *((_QWORD *)this + 1);
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      v10 = *((_QWORD *)a3 + 1);
      v11 = *((_QWORD *)a3 + 2);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 0x18;
      if (v12)
      {
        *((_QWORD *)a3 + 1) = 24;
        v13 = *(_QWORD **)this;
        v23 = 3;
      }
      else
      {
        v13 = (_QWORD *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)a3 + 1) = v13;
        if (v13)
          v14 = (unint64_t)(v13 + 4) > v11;
        else
          v14 = 1;
        if (v14)
        {
          v15 = 2 * *((_QWORD *)a3 + 4);
          if (v15 <= 0x28)
            v15 = 40;
          *((_QWORD *)a3 + 4) = v15;
          v16 = v15 + 8;
          this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
          *(_QWORD *)this = *((_QWORD *)a3 + 3);
          v13 = (_QWORD *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8);
          *((_QWORD *)a3 + 2) = (char *)this + v16;
          *((_QWORD *)a3 + 3) = this;
          v23 = *(_DWORD *)(v5 + 12) + 4;
        }
        else
        {
          v23 = 4;
        }
        *((_QWORD *)a3 + 1) = v13 + 4;
        *(_QWORD *)v5 = v13;
      }
      *v13 = v9;
      *(_QWORD *)(*(_QWORD *)v5 + 8) = v8;
      *(_QWORD *)(*(_QWORD *)v5 + 16) = a2;
      *(_DWORD *)(v5 + 8) = 3;
      *(_DWORD *)(v5 + 12) = v23;
      *(_BYTE *)(v5 + 18) = 5;
      return this;
    case 5:
      v17 = this[2];
      v18 = this[3];
      v19 = *(char **)this;
      if (v17 < v18)
        goto LABEL_36;
      v20 = &v19[8 * v18];
      v21 = (char *)*((_QWORD *)a3 + 1);
      if (v20 == v21)
      {
        v24 = v20 + 8;
        v22 = *((_QWORD *)a3 + 2);
        if ((unint64_t)v24 <= v22)
        {
          *((_QWORD *)a3 + 1) = v24;
          v19 = *(char **)this;
          LODWORD(v25) = 1;
          goto LABEL_35;
        }
      }
      else
      {
        v22 = *((_QWORD *)a3 + 2);
      }
      if ((2 * v18) <= 4)
        v25 = 4;
      else
        v25 = (2 * v18);
      v26 = 8 * (v25 + v18);
      v19 = (char *)((unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a3 + 1) = v19;
      if (!v19 || (unint64_t)&v19[v26] > v22)
      {
        v27 = 2 * *((_QWORD *)a3 + 4);
        if (v27 <= v26 + 8)
          v27 = v26 + 8;
        *((_QWORD *)a3 + 4) = v27;
        v28 = v27 + 8;
        this = (unsigned int *)malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        v29 = (char *)this + v28;
        *(_QWORD *)this = *((_QWORD *)a3 + 3);
        v19 = (char *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)a3 + 2) = v29;
        *((_QWORD *)a3 + 3) = this;
      }
      *((_QWORD *)a3 + 1) = &v19[v26];
      if ((_DWORD)v18)
        this = (unsigned int *)memcpy(v19, *(const void **)v5, 8 * v18);
      *(_QWORD *)v5 = v19;
      LODWORD(v18) = *(_DWORD *)(v5 + 12);
LABEL_35:
      *(_DWORD *)(v5 + 12) = v18 + v25;
      v17 = *(_DWORD *)(v5 + 8);
LABEL_36:
      *(_DWORD *)(v5 + 8) = v17 + 1;
      *(_QWORD *)&v19[8 * v17] = a2;
      return this;
    default:
      return this;
  }
}

uint64_t swift::Demangle::Node::removeChildAt(uint64_t this, unsigned int a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(this + 18);
  switch(v2)
  {
    case 5:
      v3 = *(_DWORD *)(this + 8) - 1;
      if (v3 != a2)
      {
        do
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * a2) = *(_QWORD *)(*(_QWORD *)this + 8 * (a2 + 1));
          ++a2;
        }
        while (v3 != a2);
        v3 = *(_DWORD *)(this + 8) - 1;
      }
      *(_DWORD *)(this + 8) = v3;
      break;
    case 2:
      if (!a2)
        *(_QWORD *)this = *(_QWORD *)(this + 8);
      *(_BYTE *)(this + 18) = 1;
      break;
    case 1:
      *(_BYTE *)(this + 18) = 0;
      break;
  }
  return this;
}

uint64_t swift::Demangle::Node::replaceChild(uint64_t this, unsigned int a2, swift::Demangle::Node *a3)
{
  int v3;

  v3 = *(unsigned __int8 *)(this + 18);
  if (v3 != 1)
  {
    if (v3 == 5)
    {
      this = *(_QWORD *)this + 8 * a2;
    }
    else
    {
      if (v3 != 2)
        return this;
      this += 8 * a2;
    }
  }
  *(_QWORD *)this = a3;
  return this;
}

int8x16_t *swift::Demangle::Node::reverseChildren(int8x16_t *this, uint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = this[1].u8[2];
  if (v2 == 5)
  {
    v4 = this->i64[0] + 8 * a2;
    v5 = this->u32[2];
    v6 = (_QWORD *)(this->i64[0] + 8 * v5 - 8);
    if (v5 != a2 && (unint64_t)v6 > v4)
    {
      v8 = v4 + 8;
      do
      {
        v9 = *(_QWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 8) = *v6;
        *v6-- = v9;
        v10 = v8 >= (unint64_t)v6;
        v8 += 8;
      }
      while (!v10);
    }
  }
  else if (v2 == 2 && a2 == 0)
  {
    *this = vextq_s8(*this, *this, 8uLL);
  }
  return this;
}

uint64_t swift::Demangle::Node::findByKind(uint64_t result, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (_QWORD *)(result + 16);
  if (*(unsigned __int16 *)(result + 16) != (_DWORD)a2)
  {
    v4 = (a3 - 1);
    if (a3 < 1)
      return 0;
    v6 = *(unsigned __int8 *)(result + 18);
    v7 = (_QWORD *)result;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        v8 = *(_QWORD **)result;
        v7 = *(_QWORD **)result;
        goto LABEL_11;
      }
      v7 = 0;
    }
    switch(v6)
    {
      case 1:
        v3 = (_QWORD *)(result + 8);
        if (v7 != (_QWORD *)(result + 8))
          goto LABEL_12;
        return 0;
      case 2:
        goto LABEL_12;
      case 5:
        v8 = *(_QWORD **)result;
LABEL_11:
        v3 = &v8[*(unsigned int *)(result + 8)];
        if (v7 != v3)
          goto LABEL_12;
        return 0;
    }
    v3 = 0;
    if (!v7)
      return 0;
LABEL_12:
    while (1)
    {
      result = swift::Demangle::Node::findByKind(*v7, a2, v4);
      if (result)
        break;
      if (++v7 == v3)
        return 0;
    }
  }
  return result;
}

_QWORD *swift::Demangle::NodeFactory::freeSlabs(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    do
    {
      v1 = (_QWORD *)*result;
      free(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

_QWORD *swift::Demangle::NodeFactory::clear(_QWORD *this)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD **)this[3];
  if (v1)
  {
    v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        v3 = (_QWORD *)*this;
        free(this);
        this = v3;
      }
      while (v3);
      v1 = (_QWORD **)v2[3];
    }
    *v1 = 0;
    v2[1] = v1 + 1;
  }
  return this;
}

__n128 swift::Demangle::NodeFactory::pushCheckpoint@<Q0>(swift::Demangle::NodeFactory *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *((_QWORD *)this + 3);
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 swift::Demangle::NodeFactory::popCheckpoint(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD ***)(a1 + 24);
  if (*(_QWORD ***)a2 != v7)
  {
    if (v7)
    {
      if (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8) >= (unint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v7 - 8) >> 4)
      {
        v9 = 0;
        v8 = *(_QWORD **)(a1 + 24);
LABEL_10:
        while (*(_QWORD **)a2 != v8)
        {
          *(_QWORD *)(a1 + 24) = *v8;
          free(v8);
          v8 = *(_QWORD **)(a1 + 24);
          if (!v8)
          {
            v6 = *(_QWORD **)a2;
            v7 = v9;
            goto LABEL_13;
          }
        }
        v7 = v9;
        if (v9)
          goto LABEL_15;
LABEL_17:
        result = *(__n128 *)(a2 + 8);
        *(__n128 *)(a1 + 8) = result;
        return result;
      }
      v8 = *v7;
      *(_QWORD *)(a1 + 24) = *v7;
      v9 = v7;
      if (v8)
        goto LABEL_10;
    }
LABEL_13:
    if (v6)
      swift::Demangle::fatal(0, "Popping checkpoint {%p, %p, %p} with slab that is not within the allocator's slab chain.\n", a3, a4, v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
    v8 = 0;
    if (v7)
    {
LABEL_15:
      *v7 = v8;
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 8) = v7 + 1;
      return result;
    }
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (v10 > *(_QWORD *)(a1 + 8))
    swift::Demangle::fatal(0, "Popping checkpoint {%p, %p, %p} that is after the current pointer.\n", a3, a4, v6, v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  if (v11 != v12)
    swift::Demangle::fatal(0, "Popping checkpoint {%p, %p, %p} with End that does not match current End %p.\n", a3, a4, v6, v10, v11, v12);
  *(_QWORD *)(a1 + 8) = v10;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(_QWORD *a1, __int16 a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v7 = 2 * a1[4];
    if (v7 <= 0x20)
      v7 = 32;
    a1[4] = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *v9 = a1[3];
    result = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v9 + v8;
    a1[3] = v9;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 4;
  *(_QWORD *)result = a3;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNodeWithAllocatedText(_QWORD *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v9 = 2 * a1[4];
    if (v9 <= 0x20)
      v9 = 32;
    a1[4] = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    *v11 = a1[3];
    result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v11 + v10;
    a1[3] = v11;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a4;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(_QWORD *a1, __int16 a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v5 = *a3;
  v6 = *((unsigned int *)a3 + 2);
  result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    v8 = 2 * a1[4];
    if (v8 <= 0x20)
      v8 = 32;
    a1[4] = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    *v10 = a1[3];
    result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v10 + v9;
    a1[3] = v10;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v6;
  return result;
}

unint64_t swift::Demangle::NodeFactory::createNode(_QWORD *a1, __int16 a2, char *__s)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  size_t v11;

  v6 = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = v6;
  if (!v6 || v6 + 24 > a1[2])
  {
    v7 = 2 * a1[4];
    if (v7 <= 0x20)
      v7 = 32;
    a1[4] = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = a1[3];
    v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = v10;
    a1[3] = v9;
  }
  a1[1] = v6 + 24;
  if (__s)
    v11 = strlen(__s);
  else
    v11 = 0;
  *(_WORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 18) = 3;
  *(_QWORD *)v6 = __s;
  *(_QWORD *)(v6 + 8) = v11;
  return v6;
}

void *swift::Demangle::CharVector::append(char **a1, void *__src, size_t __n, _QWORD *a4)
{
  uint64_t v7;
  size_t v8;
  char *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  void *result;

  v7 = *((unsigned int *)a1 + 2);
  v8 = *((unsigned int *)a1 + 3);
  v9 = *a1;
  if (__n + v7 > v8)
  {
    v11 = (char *)a4[1];
    if (&v9[v8] == v11)
    {
      v13 = &v9[v8 + __n];
      v12 = a4[2];
      if ((unint64_t)v13 <= v12)
      {
        a4[1] = v13;
        LODWORD(v15) = __n;
LABEL_19:
        *((_DWORD *)a1 + 3) = v8 + v15;
        goto LABEL_20;
      }
    }
    else
    {
      v12 = a4[2];
    }
    v14 = (2 * v8);
    if (__n > v14)
      v14 = __n;
    if (v14 <= 4)
      v15 = 4;
    else
      v15 = v14;
    v16 = v15 + v8;
    if (!v11 || (unint64_t)&v11[v16] > v12)
    {
      v17 = 2 * a4[4];
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      a4[4] = v17;
      v18 = v17 + 8;
      v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v20 = (char *)v19 + v18;
      *v19 = a4[3];
      v11 = (char *)(v19 + 1);
      a4[2] = v20;
      a4[3] = v19;
    }
    a4[1] = &v11[v16];
    if ((_DWORD)v8)
      memcpy(v11, *a1, v8);
    *a1 = v11;
    v9 = v11;
    v7 = *((unsigned int *)a1 + 2);
    LODWORD(v8) = *((_DWORD *)a1 + 3);
    goto LABEL_19;
  }
LABEL_20:
  result = memcpy(&v9[v7], __src, __n);
  *((_DWORD *)a1 + 2) += __n;
  return result;
}

unsigned int *swift::Demangle::CharVector::append(unsigned int *this, unsigned int a2, swift::Demangle::NodeFactory *a3)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  char *v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  unsigned int v25;
  char *v26;
  unint64_t v27;
  char v28;

  v4 = (uint64_t)this;
  v5 = this[2];
  v6 = this[3];
  v7 = *(char **)this;
  if (v5 + 11 > v6)
  {
    v9 = (char *)*((_QWORD *)a3 + 1);
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 11];
      v10 = *((_QWORD *)a3 + 2);
      if (v11 <= v10)
      {
        *((_QWORD *)a3 + 1) = v11;
        LODWORD(v12) = 11;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      v10 = *((_QWORD *)a3 + 2);
    }
    if ((2 * v6) <= 0xB)
      v12 = 11;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      v14 = 2 * *((_QWORD *)a3 + 4);
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      *((_QWORD *)a3 + 4) = v14;
      v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)this + v15;
      *(_QWORD *)this = *((_QWORD *)a3 + 3);
      v9 = (char *)(this + 2);
      *((_QWORD *)a3 + 2) = v16;
      *((_QWORD *)a3 + 3) = this;
    }
    *((_QWORD *)a3 + 1) = &v9[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    *(_QWORD *)v4 = v9;
    v7 = v9;
    v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  v17 = v5;
  v18 = &v7[v5];
  if ((a2 & 0x80000000) != 0)
  {
    v19 = 0;
    *v18 = 45;
    v25 = -a2;
    do
    {
      v18[++v19] = (v25 % 0xA) | 0x30;
      v20 = v25 > 9;
      v25 /= 0xAu;
    }
    while (v20);
    v18[v19 + 1] = 0;
    v26 = &v18[v19 + 1];
    if (&v18[v19] > v18)
    {
      v27 = (unint64_t)&v7[v17 + 2];
      do
      {
        v28 = *--v26;
        *v26 = *(_BYTE *)(v27 - 1);
        *(_BYTE *)(v27 - 1) = v28;
        v24 = v27++ >= (unint64_t)v26;
      }
      while (!v24);
    }
  }
  else if (a2)
  {
    v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      v20 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v20);
    v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        v23 = *--v21;
        *v21 = *(_BYTE *)(v22 - 1);
        *(_BYTE *)(v22 - 1) = v23;
        v24 = v22++ >= (unint64_t)v21;
      }
      while (!v24);
    }
  }
  else
  {
    *(_WORD *)v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

unsigned int *swift::Demangle::CharVector::append(unsigned int *this, unint64_t a2, swift::Demangle::NodeFactory *a3)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  char *v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  char v23;

  v4 = (uint64_t)this;
  v5 = this[2];
  v6 = this[3];
  v7 = *(char **)this;
  if (v5 + 21 > v6)
  {
    v9 = (char *)*((_QWORD *)a3 + 1);
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 21];
      v10 = *((_QWORD *)a3 + 2);
      if (v11 <= v10)
      {
        *((_QWORD *)a3 + 1) = v11;
        LODWORD(v12) = 21;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      v10 = *((_QWORD *)a3 + 2);
    }
    if ((2 * v6) <= 0x15)
      v12 = 21;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      v14 = 2 * *((_QWORD *)a3 + 4);
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      *((_QWORD *)a3 + 4) = v14;
      v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)this + v15;
      *(_QWORD *)this = *((_QWORD *)a3 + 3);
      v9 = (char *)(this + 2);
      *((_QWORD *)a3 + 2) = v16;
      *((_QWORD *)a3 + 3) = this;
    }
    *((_QWORD *)a3 + 1) = &v9[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    *(_QWORD *)v4 = v9;
    v7 = v9;
    v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  v17 = v5;
  v18 = &v7[v5];
  if (a2)
  {
    v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      v20 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v20);
    v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        v23 = *--v21;
        *v21 = *(_BYTE *)(v22 - 1);
        *(_BYTE *)(v22 - 1) = v23;
      }
      while (v22++ < (unint64_t)v21);
    }
  }
  else
  {
    *(_WORD *)v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

void *swift::Demangle::Demangler::clear(void *this)
{
  void **v1;
  void *v2;
  void *v3;

  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 29) = 0;
  *((_QWORD *)this + 13) = 0;
  v1 = (void **)*((_QWORD *)this + 3);
  if (v1)
  {
    v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        v3 = *(void **)this;
        free(this);
        this = v3;
      }
      while (v3);
      v1 = (void **)*((_QWORD *)v2 + 3);
    }
    *v1 = 0;
    *((_QWORD *)v2 + 1) = v1 + 1;
  }
  return this;
}

uint64_t swift::Demangle::Demangler::DemangleInitRAII::DemangleInitRAII(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 72);
  v10 = (_QWORD *)(a2 + 544);
  v11 = *(_QWORD **)(a2 + 568);
  if (v11)
  {
    if (v11 == v10)
    {
      *(_QWORD *)(a1 + 96) = a1 + 72;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 568) + 24))(*(_QWORD *)(a2 + 568));
    }
    else
    {
      *(_QWORD *)(a1 + 96) = v11;
      *(_QWORD *)(a2 + 568) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  v12 = (*(_QWORD *)(a2 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a2 + 8) = v12;
  if (!v12 || (v13 = *(_QWORD *)(a2 + 16), v12 + 128 > v13))
  {
    v14 = 2 * *(_QWORD *)(a2 + 32);
    if (v14 <= 0x88)
      v14 = 136;
    *(_QWORD *)(a2 + 32) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v13 = (unint64_t)v16 + v15;
    *v16 = *(_QWORD *)(a2 + 24);
    v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 16) = (char *)v16 + v15;
    *(_QWORD *)(a2 + 24) = v16;
  }
  *(_QWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 96) = 0x1000000000;
  v17 = (v12 + 135) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a2 + 8) = v17;
  if (!v17 || v17 + 128 > v13)
  {
    v18 = 2 * *(_QWORD *)(a2 + 32);
    if (v18 <= 0x88)
      v18 = 136;
    *(_QWORD *)(a2 + 32) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *v20 = *(_QWORD *)(a2 + 24);
    v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 16) = (char *)v20 + v19;
    *(_QWORD *)(a2 + 24) = v20;
  }
  *(_QWORD *)(a2 + 8) = v17 + 128;
  *(_QWORD *)(a2 + 104) = v17;
  *(_QWORD *)(a2 + 112) = 0x1000000000;
  *(_DWORD *)(a2 + 536) = 0;
  *(_QWORD *)(a2 + 56) = a3;
  *(_QWORD *)(a2 + 64) = a4;
  *(_QWORD *)(a2 + 72) = 0;
  v21 = *(_QWORD **)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  if (v21 == v10)
  {
    v22 = 4;
    v21 = v10;
  }
  else
  {
    if (!v21)
      goto LABEL_21;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_21:
  v23 = *(_QWORD *)(a5 + 24);
  if (v23)
  {
    if (v23 == a5)
    {
      *(_QWORD *)(a2 + 568) = v10;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24), v10);
    }
    else
    {
      *(_QWORD *)(a2 + 568) = v23;
      *(_QWORD *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 568) = 0;
  }
  return a1;
}

void swift::Demangle::Demangler::DemangleInitRAII::~DemangleInitRAII(swift::Demangle::Demangler::DemangleInitRAII *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_OWORD *)(*(_QWORD *)this + 88) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(*(_QWORD *)this + 104) = *(_OWORD *)((char *)this + 24);
  v2 = *(_QWORD *)this;
  *(_DWORD *)(v2 + 536) = *((_DWORD *)this + 10);
  *(_OWORD *)(v2 + 56) = *((_OWORD *)this + 3);
  v3 = *(_QWORD **)this;
  v3[9] = *((_QWORD *)this + 8);
  v4 = (_QWORD *)v3[71];
  v3[71] = 0;
  if (v4 == v3 + 68)
  {
    v5 = 4;
    v4 = v3 + 68;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)this + 72;
  v7 = (char *)*((_QWORD *)this + 12);
  if (v7)
  {
    if (v7 != v6)
    {
      v3[71] = v7;
      *((_QWORD *)this + 12) = 0;
      return;
    }
    v3[71] = v3 + 68;
    (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12), v3 + 68);
  }
  else
  {
    v3[71] = 0;
  }
  v8 = (char *)*((_QWORD *)this + 12);
  if (v8 == v6)
  {
    v9 = 4;
    v8 = (char *)this + 72;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *(_OWORD *)(*(_QWORD *)this + 88) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(*(_QWORD *)this + 104) = *(_OWORD *)((char *)this + 24);
  v2 = *(_QWORD *)this;
  *(_DWORD *)(v2 + 536) = *((_DWORD *)this + 10);
  *(_OWORD *)(v2 + 56) = *((_OWORD *)this + 3);
  v3 = *(_QWORD **)this;
  v3[9] = *((_QWORD *)this + 8);
  v4 = (_QWORD *)v3[71];
  v3[71] = 0;
  if (v4 == v3 + 68)
  {
    v5 = 4;
    v4 = v3 + 68;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)this + 72;
  v7 = (char *)*((_QWORD *)this + 12);
  if (v7)
  {
    if (v7 != v6)
    {
      v3[71] = v7;
      *((_QWORD *)this + 12) = 0;
      return;
    }
    v3[71] = v3 + 68;
    (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12), v3 + 68);
  }
  else
  {
    v3[71] = 0;
  }
  v8 = (char *)*((_QWORD *)this + 12);
  if (v8 == v6)
  {
    v9 = 4;
    v8 = (char *)this + 72;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

unint64_t swift::Demangle::Demangler::demangleSymbol(uint64_t a1, _WORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  _WORD *v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  unsigned int ManglingPrefixLength;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  size_t v24;
  int8x16_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t **v32;
  unsigned __int16 *v33;
  uint64_t v34;
  const char *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[3];
  _QWORD *v55;
  int8x16_t *v56;

  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v47 = v46;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v46);
    }
    else
    {
      v47 = (_BYTE *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v47 = 0;
  }
  swift::Demangle::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)&v48, a1, (uint64_t)a2, a3, (uint64_t)v46);
  v8 = v47;
  if (v47 == v46)
  {
    v9 = 4;
    v8 = v46;
    goto LABEL_10;
  }
  if (v47)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  if (v10 >= v11)
    v12 = *(_QWORD *)(a1 + 72);
  else
    v12 = *(_QWORD *)(a1 + 64);
  if (v10 - v12 >= 3)
  {
    v13 = *(_WORD **)(a1 + 56);
    v14 = (_WORD *)((char *)v13 + v12);
    v15 = *v14;
    v16 = *((unsigned __int8 *)v14 + 2);
    if (v15 == 21599 && v16 == 116)
    {
      *(_QWORD *)(a1 + 72) = v11 + 3;
      v26 = (unint64_t)swift::Demangle::demangleOldSymbolAsNode(v13, v10, (swift::Demangle::NodeFactory *)a1);
      goto LABEL_42;
    }
  }
  ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  if (!ManglingPrefixLength)
    goto LABEL_40;
  v23 = a3 >= 2 && *a2 == 21599;
  *(_BYTE *)(a1 + 80) = v23;
  v24 = v11 + ManglingPrefixLength;
  *(_QWORD *)(a1 + 72) = v24;
  while (*(_QWORD *)(a1 + 72) < v10)
  {
    v25 = swift::Demangle::Demangler::demangleOperator((swift::Demangle::Demangler *)a1, v19, v20, v21, v22);
    if (!v25)
      goto LABEL_40;
    v56 = v25;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v56, (_QWORD *)a1);
  }
  v26 = (*(_QWORD *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a1 + 8) = v26;
  if (!v26 || v26 + 24 > *(_QWORD *)(a1 + 16))
  {
    v27 = 2 * *(_QWORD *)(a1 + 32);
    if (v27 <= 0x20)
      v27 = 32;
    *(_QWORD *)(a1 + 32) = v27;
    v28 = v27 + 8;
    v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
    *v29 = *(_QWORD *)(a1 + 24);
    v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 16) = (char *)v29 + v28;
    *(_QWORD *)(a1 + 24) = v29;
  }
  *(_QWORD *)(a1 + 8) = v26 + 24;
  *(_WORD *)(v26 + 16) = 99;
  *(_BYTE *)(v26 + 18) = 0;
  v30 = *(_DWORD *)(a1 + 96);
  if (!v30)
  {
LABEL_40:
    v26 = 0;
    goto LABEL_42;
  }
  v31 = (unsigned int *)v26;
  do
  {
    v32 = *(uint64_t ***)(a1 + 88);
    v33 = (unsigned __int16 *)v32[v30 - 1];
    if (!swift::Demangle::isFunctionAttr(v33[8]))
    {
      v42 = 8 * v30;
      while (1)
      {
        v43 = *v32;
        if (*((_WORD *)*v32 + 8) == 232)
        {
          v44 = *((unsigned __int8 *)v43 + 18);
          if ((v44 - 1) >= 2)
          {
            if (v44 != 5 || !*((_DWORD *)v43 + 2))
            {
              v43 = 0;
              goto LABEL_58;
            }
            v43 = (uint64_t *)*v43;
          }
          v43 = (uint64_t *)*v43;
        }
LABEL_58:
        swift::Demangle::Node::addChild(v31, (swift::Demangle::Node *)v43, (swift::Demangle::NodeFactory *)a1, v34, v35);
        ++v32;
        v42 -= 8;
        if (!v42)
          goto LABEL_37;
      }
    }
    *(_DWORD *)(a1 + 96) = v30 - 1;
    swift::Demangle::Node::addChild(v31, (swift::Demangle::Node *)v33, (swift::Demangle::NodeFactory *)a1, v34, v35);
    if ((v33[8] & 0xFFFE) == 0xAA)
      v31 = (unsigned int *)v33;
    v30 = *(_DWORD *)(a1 + 96);
  }
  while (v30);
LABEL_37:
  v36 = *(unsigned __int8 *)(v26 + 18);
  if ((v36 - 1) >= 2 && (v36 != 5 || !*(_DWORD *)(v26 + 8)))
    goto LABEL_40;
LABEL_42:
  v37 = v48;
  *(_OWORD *)(v48 + 88) = v49;
  *(_OWORD *)(v37 + 104) = v50;
  *(_DWORD *)(v37 + 536) = v51;
  *(_OWORD *)(v37 + 56) = v52;
  *(_QWORD *)(v37 + 72) = v53;
  v38 = *(_QWORD **)(v37 + 568);
  *(_QWORD *)(v37 + 568) = 0;
  if (v38 == (_QWORD *)(v37 + 544))
  {
    v39 = 4;
    v38 = (_QWORD *)(v37 + 544);
LABEL_46:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  else if (v38)
  {
    v39 = 5;
    goto LABEL_46;
  }
  if (v55)
  {
    v40 = v54;
    if (v55 == v54)
    {
      *(_QWORD *)(v37 + 568) = v37 + 544;
      (*(void (**)(_QWORD *, uint64_t))(v54[0] + 24))(v54, v37 + 544);
      if (v55 == v54)
      {
        v41 = 4;
      }
      else
      {
        if (!v55)
          return v26;
        v41 = 5;
        v40 = v55;
      }
      (*(void (**)(_QWORD *))(*v40 + 8 * v41))(v40);
      return v26;
    }
    *(_QWORD *)(v37 + 568) = v55;
  }
  else
  {
    *(_QWORD *)(v37 + 568) = 0;
  }
  return v26;
}

BOOL swift::Demangle::Demangler::parseAndPushNodes(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v5;
  const void **v7;
  int8x16_t *v8;
  _BOOL8 v9;
  int8x16_t *v11;

  v5 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) >= v5)
    return 1;
  v7 = (const void **)((char *)this + 88);
  do
  {
    v8 = swift::Demangle::Demangler::demangleOperator(this, a2, a3, a4, a5);
    v9 = v8 != 0;
    if (!v8)
      break;
    v11 = v8;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v7, (uint64_t *)&v11, this);
  }
  while (*((_QWORD *)this + 9) < v5);
  return v9;
}

int8x16_t *swift::Demangle::Demangler::demangleOperator(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *result;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unsigned __int16 *v25;
  int v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  __int16 v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  __int16 v66;
  int v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  char *v73;
  int v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  char *v81;
  unint64_t DependentGenericParamType;
  swift::Demangle::Node *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  char *v90;
  int v91;
  int v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  int v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  char *v129;
  int8x16_t *v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  unsigned int *v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  char *v139;
  int v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  char *v145;
  int v146;
  unsigned int v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  char *v161;
  swift::Demangle::NodeFactory *v162;
  __int16 v163;
  unsigned int v164;

  v7 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v7 <= v6)
    v8 = *((_QWORD *)this + 9);
  else
    v8 = *((_QWORD *)this + 8);
  while (2)
  {
    if (v8 == v6)
    {
      v6 = v8;
LABEL_8:
      v13 = v6 - 1;
LABEL_9:
      *((_QWORD *)this + 9) = v13;
      return (int8x16_t *)swift::Demangle::Demangler::demangleIdentifier(this);
    }
    else
    {
      v9 = v6++;
      *((_QWORD *)this + 9) = v6;
      v10 = *((_QWORD *)this + 7);
      v11 = *(unsigned __int8 *)(v10 + v9);
      switch(*(_BYTE *)(v10 + v9))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          return (int8x16_t *)swift::Demangle::Demangler::demangleSymbolicReference(this, v11);
        case 0x2E:
          v14 = v6 - 1;
          if (v7 < v14)
            v14 = v7;
          v15 = (char *)(v10 + v14);
          v16 = v7 - v14;
          *((_QWORD *)this + 9) = v7;
          v17 = 221;
          return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v17, v15, v16);
        case 0x41:
          return (int8x16_t *)swift::Demangle::Demangler::demangleMultiSubstitutions(this);
        case 0x42:
          return (int8x16_t *)swift::Demangle::Demangler::demangleBuiltinType(this, v11, a3, a4, a5);
        case 0x43:
          v18 = 24;
          return (int8x16_t *)swift::Demangle::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x44:
          return (int8x16_t *)swift::Demangle::Demangler::demangleTypeMangling(this, v11, a3, a4, a5);
        case 0x45:
          return (int8x16_t *)swift::Demangle::Demangler::demangleExtensionContext(this, v11, a3, a4, a5);
        case 0x46:
          return (int8x16_t *)swift::Demangle::Demangler::demanglePlainFunction(this, v11, a3, a4, a5);
        case 0x47:
          return (int8x16_t *)swift::Demangle::Demangler::demangleBoundGenericType(this, v11, a3, a4, a5);
        case 0x48:
          if (v6 < v7)
          {
            v19 = v6 + 1;
            *((_QWORD *)this + 9) = v6 + 1;
            switch(*(_BYTE *)(v10 + v6))
            {
              case 'A':
                v20 = (char *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
                v25 = (unsigned __int16 *)swift::Demangle::Demangler::popDependentAssociatedConformance(this, v21, v22, v23, v24);
                v26 = *((_DWORD *)this + 24);
                if (v26
                  && (v27 = v26 - 1,
                      v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v27),
                      v28[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v27;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 49;
                return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v162, v163, (swift::Demangle::Node *)v28, (swift::Demangle::Node *)v25, v20);
              case 'C':
                v20 = (char *)swift::Demangle::Demangler::popAnyProtocolConformanceList(this, v11, a3, a4, a5);
                v106 = *((_DWORD *)this + 24);
                if (v106
                  && ((v107 = v106 - 1,
                       v25 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v107),
                       v108 = v25[8],
                       v108 == 184)
                   || v108 == 183))
                {
                  *((_DWORD *)this + 24) = v107;
                }
                else
                {
                  v25 = (unsigned __int16 *)swift::Demangle::Demangler::demangleRetroactiveProtocolConformanceRef(this, v103, v104, (uint64_t)v25, v105);
                  v107 = *((_DWORD *)this + 24);
                }
                if (v107
                  && (v164 = v107 - 1, v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v164), v28[8] == 232))
                {
                  *((_DWORD *)this + 24) = v164;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 26;
                return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v162, v163, (swift::Demangle::Node *)v28, (swift::Demangle::Node *)v25, v20);
              case 'D':
                v20 = (char *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
                v25 = (unsigned __int16 *)swift::Demangle::Demangler::popProtocol(this, v109, v110, v111, v112);
                v113 = *((_DWORD *)this + 24);
                if (v113
                  && (v114 = v113 - 1, v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v114), v28[8] == 232))
                {
                  *((_DWORD *)this + 24) = v114;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 47;
                return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v162, v163, (swift::Demangle::Node *)v28, (swift::Demangle::Node *)v25, v20);
              case 'F':
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v115 = 2 * *((_QWORD *)this + 4);
                  if (v115 <= 0x20)
                    v115 = 32;
                  *((_QWORD *)this + 4) = v115;
                  v116 = v115 + 8;
                  v117 = malloc_type_malloc(v115 + 8, 0xD0263BC5uLL);
                  v118 = (char *)v117 + v116;
                  *v117 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v118;
                  *((_QWORD *)this + 3) = v117;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v34 = 330;
                goto LABEL_135;
              case 'I':
                v20 = (char *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
                v25 = (unsigned __int16 *)swift::Demangle::Demangler::popProtocol(this, v119, v120, v121, v122);
                v123 = *((_DWORD *)this + 24);
                if (v123
                  && (v124 = v123 - 1,
                      v28 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v124),
                      v28[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v124;
                }
                else
                {
                  v28 = 0;
                }
                v162 = this;
                v163 = 48;
                return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v162, v163, (swift::Demangle::Node *)v28, (swift::Demangle::Node *)v25, v20);
              case 'P':
                v125 = swift::Demangle::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v125)
                  goto LABEL_226;
                v37 = v125;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v126 = 2 * *((_QWORD *)this + 4);
                  if (v126 <= 0x20)
                    v126 = 32;
                  *((_QWORD *)this + 4) = v126;
                  v127 = v126 + 8;
                  v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
                  v129 = (char *)v128 + v127;
                  *v128 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v129;
                  *((_QWORD *)this + 3) = v128;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 183;
                goto LABEL_156;
              case 'X':
                v130 = swift::Demangle::Demangler::popAnyProtocolConformanceList(this, v11, a3, a4, a5);
                if (!v130)
                  goto LABEL_226;
                v37 = (unint64_t)v130;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v131 = 2 * *((_QWORD *)this + 4);
                  if (v131 <= 0x20)
                    v131 = 32;
                  *((_QWORD *)this + 4) = v131;
                  v132 = v131 + 8;
                  v133 = malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
                  v134 = (char *)v133 + v132;
                  *v133 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v134;
                  *((_QWORD *)this + 3) = v133;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 27;
                goto LABEL_156;
              case 'c':
                v135 = swift::Demangle::Demangler::popProtocolConformance(this, v11, a3, a4, a5);
                if (!v135)
                  goto LABEL_226;
                v37 = (unint64_t)v135;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v136 = 2 * *((_QWORD *)this + 4);
                  if (v136 <= 0x20)
                    v136 = 32;
                  *((_QWORD *)this + 4) = v136;
                  v137 = v136 + 8;
                  v138 = malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
                  v139 = (char *)v138 + v137;
                  *v138 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v138 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v139;
                  *((_QWORD *)this + 3) = v138;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 189;
                goto LABEL_156;
              case 'n':
                v140 = *((_DWORD *)this + 24);
                if (!v140)
                  goto LABEL_226;
                v141 = v140 - 1;
                v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v141);
                if (*(_WORD *)(v37 + 16) != 232)
                  goto LABEL_226;
                *((_DWORD *)this + 24) = v141;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v142 = 2 * *((_QWORD *)this + 4);
                  if (v142 <= 0x20)
                    v142 = 32;
                  *((_QWORD *)this + 4) = v142;
                  v143 = v142 + 8;
                  v144 = malloc_type_malloc(v142 + 8, 0xD0263BC5uLL);
                  v145 = (char *)v144 + v143;
                  *v144 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v145;
                  *((_QWORD *)this + 3) = v144;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 159;
                goto LABEL_156;
              case 'o':
                v146 = *((_DWORD *)this + 24);
                if (!v146)
                  goto LABEL_226;
                v147 = v146 - 1;
                v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v147);
                *((_DWORD *)this + 24) = v147;
                if (!v37)
                  goto LABEL_226;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v148 = 2 * *((_QWORD *)this + 4);
                  if (v148 <= 0x20)
                    v148 = 32;
                  *((_QWORD *)this + 4) = v148;
                  v149 = v148 + 8;
                  v150 = malloc_type_malloc(v148 + 8, 0xD0263BC5uLL);
                  v151 = (char *)v150 + v149;
                  *v150 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v150 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v151;
                  *((_QWORD *)this + 3) = v150;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 303;
                goto LABEL_156;
              case 'p':
                v152 = swift::Demangle::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v152)
                  goto LABEL_226;
                v37 = v152;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v153 = 2 * *((_QWORD *)this + 4);
                  if (v153 <= 0x20)
                    v153 = 32;
                  *((_QWORD *)this + 4) = v153;
                  v154 = v153 + 8;
                  v155 = malloc_type_malloc(v153 + 8, 0xD0263BC5uLL);
                  v156 = (char *)v155 + v154;
                  *v155 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v156;
                  *((_QWORD *)this + 3) = v155;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 184;
                goto LABEL_156;
              case 'r':
                v157 = swift::Demangle::Demangler::popProtocol(this, v11, a3, a4, a5);
                if (!v157)
                  goto LABEL_226;
                v37 = v157;
                v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 1) = v29;
                if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
                {
                  v158 = 2 * *((_QWORD *)this + 4);
                  if (v158 <= 0x20)
                    v158 = 32;
                  *((_QWORD *)this + 4) = v158;
                  v159 = v158 + 8;
                  v160 = malloc_type_malloc(v158 + 8, 0xD0263BC5uLL);
                  v161 = (char *)v160 + v159;
                  *v160 = *((_QWORD *)this + 3);
                  v29 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 2) = v161;
                  *((_QWORD *)this + 3) = v160;
                }
                *((_QWORD *)this + 1) = v29 + 24;
                v42 = 187;
                goto LABEL_156;
              default:
                goto LABEL_158;
            }
          }
          v19 = v6;
LABEL_158:
          v13 = v19 - 2;
          goto LABEL_9;
        case 0x49:
          return (int8x16_t *)swift::Demangle::Demangler::demangleImplFunctionType(this, v11, a3, a4, a5);
        case 0x4B:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v30 = 2 * *((_QWORD *)this + 4);
            if (v30 <= 0x20)
              v30 = 32;
            *((_QWORD *)this + 4) = v30;
            v31 = v30 + 8;
            v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
            v33 = (char *)v32 + v31;
            *v32 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v33;
            *((_QWORD *)this + 3) = v32;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 272;
          goto LABEL_135;
        case 0x4C:
          return (int8x16_t *)swift::Demangle::Demangler::demangleLocalIdentifier(this, v11, a3, a4, a5);
        case 0x4D:
          return (int8x16_t *)swift::Demangle::Demangler::demangleMetatype(this, v11, a3, a4, a5);
        case 0x4E:
          v35 = *((_DWORD *)this + 24);
          if (!v35)
            goto LABEL_226;
          v36 = v35 - 1;
          v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v36);
          if (*(_WORD *)(v37 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v36;
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v38 = 2 * *((_QWORD *)this + 4);
            if (v38 <= 0x20)
              v38 = 32;
            *((_QWORD *)this + 4) = v38;
            v39 = v38 + 8;
            v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
            v41 = (char *)v40 + v39;
            *v40 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v41;
            *((_QWORD *)this + 3) = v40;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v42 = 237;
          goto LABEL_156;
        case 0x4F:
          v18 = 61;
          return (int8x16_t *)swift::Demangle::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x50:
          v18 = 180;
          return (int8x16_t *)swift::Demangle::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x51:
          return (int8x16_t *)swift::Demangle::Demangler::demangleArchetype(this, v11, a3, a4, a5);
        case 0x52:
          return (int8x16_t *)swift::Demangle::Demangler::demangleGenericRequirement(this, v11, a3, a4, a5);
        case 0x53:
          return (int8x16_t *)swift::Demangle::Demangler::demangleStandardSubstitution(this);
        case 0x54:
          return swift::Demangle::Demangler::demangleThunkOrSpecialization(this, v11, a3, a4, a5);
        case 0x56:
          v18 = 219;
          return (int8x16_t *)swift::Demangle::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x57:
          return (int8x16_t *)swift::Demangle::Demangler::demangleWitness(this, v11, a3, a4, a5);
        case 0x58:
          return swift::Demangle::Demangler::demangleSpecialType(this, v11, a3, a4, a5);
        case 0x59:
          return (int8x16_t *)swift::Demangle::Demangler::demangleTypeAnnotation(this, v11, a3, a4, a5);
        case 0x5A:
          v43 = *((_DWORD *)this + 24);
          if (!v43)
            goto LABEL_226;
          v44 = v43 - 1;
          v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v43 - 1));
          v45 = *(unsigned __int16 *)(v37 + 16);
          if (v45 != 232 && !swift::Demangle::isContext(v45))
            goto LABEL_226;
          *((_DWORD *)this + 24) = v44;
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v46 = 2 * *((_QWORD *)this + 4);
            if (v46 <= 0x20)
              v46 = 32;
            *((_QWORD *)this + 4) = v46;
            v47 = v46 + 8;
            v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
            v49 = (char *)v48 + v47;
            *v48 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v49;
            *((_QWORD *)this + 3) = v48;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v42 = 218;
          goto LABEL_156;
        case 0x5F:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v50 = 2 * *((_QWORD *)this + 4);
            if (v50 <= 0x20)
              v50 = 32;
            *((_QWORD *)this + 4) = v50;
            v51 = v50 + 8;
            v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
            v53 = (char *)v52 + v51;
            *v52 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v53;
            *((_QWORD *)this + 3) = v52;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 275;
          goto LABEL_135;
        case 0x61:
          v18 = 234;
          return (int8x16_t *)swift::Demangle::Demangler::demangleAnyGenericType(this, v18, a3, a4, a5);
        case 0x63:
          return (int8x16_t *)swift::Demangle::Demangler::popFunctionType(this, 82, 0, a4, a5);
        case 0x64:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v54 = 2 * *((_QWORD *)this + 4);
            if (v54 <= 0x20)
              v54 = 32;
            *((_QWORD *)this + 4) = v54;
            v55 = v54 + 8;
            v56 = malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
            v57 = (char *)v56 + v55;
            *v56 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v57;
            *((_QWORD *)this + 3) = v56;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 276;
          goto LABEL_135;
        case 0x66:
          return (int8x16_t *)swift::Demangle::Demangler::demangleFunctionEntity(this, v11, a3, a4, a5);
        case 0x67:
          return (int8x16_t *)swift::Demangle::Demangler::demangleRetroactiveConformance(this);
        case 0x68:
          v58 = *((_DWORD *)this + 24);
          if (!v58)
            goto LABEL_226;
          v59 = v58 - 1;
          v60 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v58 - 1));
          if (*(_WORD *)(v60 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v59;
          v61 = *(unsigned __int8 *)(v60 + 18);
          if (v61 == 1)
            goto LABEL_84;
          if (v61 != 5 || *(_DWORD *)(v60 + 8) != 1)
            goto LABEL_226;
          v60 = *(_QWORD *)v60;
LABEL_84:
          v29 = *(_QWORD *)v60;
          if (!*(_QWORD *)v60)
            goto LABEL_227;
          v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v37;
          if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
          {
            v62 = 2 * *((_QWORD *)this + 4);
            if (v62 <= 0x20)
              v62 = 32;
            *((_QWORD *)this + 4) = v62;
            v63 = v62 + 8;
            v64 = malloc_type_malloc(v62 + 8, 0xD0263BC5uLL);
            v65 = (char *)v64 + v63;
            *v64 = *((_QWORD *)this + 3);
            v37 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v65;
            *((_QWORD *)this + 3) = v64;
          }
          *((_QWORD *)this + 1) = v37 + 24;
          v66 = 208;
          goto LABEL_149;
        case 0x69:
          return (int8x16_t *)swift::Demangle::Demangler::demangleSubscript(this, v11, a3, a4, a5);
        case 0x6C:
          v67 = 0;
          return swift::Demangle::Demangler::demangleGenericSignature(this, v67, a3, a4, a5);
        case 0x6D:
          v68 = *((_DWORD *)this + 24);
          if (!v68)
            goto LABEL_226;
          v69 = v68 - 1;
          v29 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v69);
          if (*(_WORD *)(v29 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v69;
          v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v37;
          if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
          {
            v70 = 2 * *((_QWORD *)this + 4);
            if (v70 <= 0x20)
              v70 = 32;
            *((_QWORD *)this + 4) = v70;
            v71 = v70 + 8;
            v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
            v73 = (char *)v72 + v71;
            *v72 = *((_QWORD *)this + 3);
            v37 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v73;
            *((_QWORD *)this + 3) = v72;
          }
          *((_QWORD *)this + 1) = v37 + 24;
          v66 = 145;
          goto LABEL_149;
        case 0x6E:
          v74 = *((_DWORD *)this + 24);
          if (!v74)
            goto LABEL_226;
          v75 = v74 - 1;
          v76 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v74 - 1));
          if (*(_WORD *)(v76 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v75;
          v77 = *(unsigned __int8 *)(v76 + 18);
          if (v77 == 1)
            goto LABEL_107;
          if (v77 != 5 || *(_DWORD *)(v76 + 8) != 1)
            goto LABEL_226;
          v76 = *(_QWORD *)v76;
LABEL_107:
          v29 = *(_QWORD *)v76;
          if (!*(_QWORD *)v76)
            goto LABEL_227;
          v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v37;
          if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
          {
            v78 = 2 * *((_QWORD *)this + 4);
            if (v78 <= 0x20)
              v78 = 32;
            *((_QWORD *)this + 4) = v78;
            v79 = v78 + 8;
            v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
            v81 = (char *)v80 + v79;
            *v80 = *((_QWORD *)this + 3);
            v37 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v81;
            *((_QWORD *)this + 3) = v80;
          }
          *((_QWORD *)this + 1) = v37 + 24;
          v66 = 209;
          goto LABEL_149;
        case 0x6F:
          return (int8x16_t *)swift::Demangle::Demangler::demangleOperatorIdentifier(this);
        case 0x70:
          DependentGenericParamType = swift::Demangle::Demangler::demangleProtocolList(this, v11, a3, a4, a5);
          if (!DependentGenericParamType)
            goto LABEL_226;
          goto LABEL_128;
        case 0x71:
          DependentGenericParamType = swift::Demangle::Demangler::demangleGenericParamIndex(this, v11, a3, a4, a5);
          if (!DependentGenericParamType)
            goto LABEL_226;
          goto LABEL_128;
        case 0x72:
          v67 = 1;
          return swift::Demangle::Demangler::demangleGenericSignature(this, v67, a3, a4, a5);
        case 0x73:
          v15 = "Swift";
          v17 = 153;
          v16 = 5;
          return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v17, v15, v16);
        case 0x74:
          return (int8x16_t *)swift::Demangle::Demangler::popTuple(this, v11, a3, a4, a5);
        case 0x75:
          return (int8x16_t *)swift::Demangle::Demangler::demangleGenericType(this, v11, a3, a4, a5);
        case 0x76:
          v83 = swift::Demangle::Demangler::demangleEntity(this, 254, a3, a4, a5);
          return (int8x16_t *)swift::Demangle::Demangler::demangleAccessor(this, v83, v84, v85, v86);
        case 0x77:
          return (int8x16_t *)swift::Demangle::Demangler::demangleValueWitness(this, v11, a3, a4, a5);
        case 0x78:
          DependentGenericParamType = swift::Demangle::Demangler::getDependentGenericParamType(this, 0, 0, a4, a5);
          if (!DependentGenericParamType)
            goto LABEL_226;
LABEL_128:
          v37 = DependentGenericParamType;
          goto LABEL_150;
        case 0x79:
          v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
          {
            v87 = 2 * *((_QWORD *)this + 4);
            if (v87 <= 0x20)
              v87 = 32;
            *((_QWORD *)this + 4) = v87;
            v88 = v87 + 8;
            v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
            v90 = (char *)v89 + v88;
            *v89 = *((_QWORD *)this + 3);
            v29 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v90;
            *((_QWORD *)this + 3) = v89;
          }
          *((_QWORD *)this + 1) = v29 + 24;
          v34 = 274;
LABEL_135:
          *(_WORD *)(v29 + 16) = v34;
          *(_BYTE *)(v29 + 18) = 0;
          goto LABEL_227;
        case 0x7A:
          v91 = *((_DWORD *)this + 24);
          if (!v91)
            goto LABEL_226;
          v92 = v91 - 1;
          v93 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v91 - 1));
          if (*(_WORD *)(v93 + 16) != 232)
            goto LABEL_226;
          *((_DWORD *)this + 24) = v92;
          v94 = *(unsigned __int8 *)(v93 + 18);
          if (v94 == 1)
            goto LABEL_142;
          if (v94 == 5 && *(_DWORD *)(v93 + 8) == 1)
          {
            v93 = *(_QWORD *)v93;
LABEL_142:
            v29 = *(_QWORD *)v93;
            if (*(_QWORD *)v93)
            {
              v37 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = v37;
              if (!v37 || v37 + 24 > *((_QWORD *)this + 2))
              {
                v95 = 2 * *((_QWORD *)this + 4);
                if (v95 <= 0x20)
                  v95 = 32;
                *((_QWORD *)this + 4) = v95;
                v96 = v95 + 8;
                v97 = malloc_type_malloc(v95 + 8, 0xD0263BC5uLL);
                v98 = (char *)v97 + v96;
                *v97 = *((_QWORD *)this + 3);
                v37 = ((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = v98;
                *((_QWORD *)this + 3) = v97;
              }
              *((_QWORD *)this + 1) = v37 + 24;
              v66 = 123;
LABEL_149:
              *(_WORD *)(v37 + 16) = v66;
              *(_BYTE *)(v37 + 18) = 0;
              swift::Demangle::Node::addChild((unsigned int *)v37, (swift::Demangle::Node *)v29, this, a4, a5);
LABEL_150:
              v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = v29;
              if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
              {
                v99 = 2 * *((_QWORD *)this + 4);
                if (v99 <= 0x20)
                  v99 = 32;
                *((_QWORD *)this + 4) = v99;
                v100 = v99 + 8;
                v101 = malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
                v102 = (char *)v101 + v100;
                *v101 = *((_QWORD *)this + 3);
                v29 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = v102;
                *((_QWORD *)this + 3) = v101;
              }
              *((_QWORD *)this + 1) = v29 + 24;
              v42 = 232;
LABEL_156:
              *(_WORD *)(v29 + 16) = v42;
              *(_BYTE *)(v29 + 18) = 0;
              swift::Demangle::Node::addChild((unsigned int *)v29, (swift::Demangle::Node *)v37, this, a4, a5);
            }
          }
          else
          {
LABEL_226:
            v29 = 0;
          }
LABEL_227:
          result = (int8x16_t *)v29;
          break;
        case 0xFF:
          continue;
        default:
          goto LABEL_8;
      }
    }
    return result;
  }
}

swift::Demangle::Node *swift::Demangle::Demangler::addChild(swift::Demangle::Demangler *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3, uint64_t a4, const char *a5)
{
  swift::Demangle::Node *result;

  result = 0;
  if (a2)
  {
    if (a3)
    {
      swift::Demangle::Node::addChild((unsigned int *)a2, a3, this, a4, a5);
      return a2;
    }
  }
  return result;
}

unint64_t swift::Demangle::Demangler::createWithChild(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3, uint64_t a4, const char *a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;

  if (!a3)
    return 0;
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v12;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v8, a3, a1, a4, a5);
  return v8;
}

unint64_t swift::Demangle::Demangler::createType(swift::Demangle::Demangler *this, swift::Demangle::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;

  if (!a2)
    return 0;
  v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
  {
    v8 = 2 * *((_QWORD *)this + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)this + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v11 = (char *)v10 + v9;
    *v10 = *((_QWORD *)this + 3);
    v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v11;
    *((_QWORD *)this + 3) = v10;
  }
  *((_QWORD *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 232;
  *(_BYTE *)(v7 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v7, a2, this, a4, a5);
  return v7;
}

unint64_t swift::Demangle::Demangler::createWithChildren(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3, swift::Demangle::Node *a4, const char *a5)
{
  unint64_t v5;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  const char *v15;

  v5 = 0;
  if (a3 && a4)
  {
    v5 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v5;
    if (!v5 || v5 + 24 > *((_QWORD *)a1 + 2))
    {
      v10 = 2 * *((_QWORD *)a1 + 4);
      if (v10 <= 0x20)
        v10 = 32;
      *((_QWORD *)a1 + 4) = v10;
      v11 = v10 + 8;
      v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
      v13 = (char *)v12 + v11;
      *v12 = *((_QWORD *)a1 + 3);
      v5 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v13;
      *((_QWORD *)a1 + 3) = v12;
    }
    *((_QWORD *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(_BYTE *)(v5 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v5, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::Node::addChild((unsigned int *)v5, a4, a1, v14, v15);
  }
  return v5;
}

unint64_t swift::Demangle::Demangler::createWithChildren(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3, swift::Demangle::Node *a4, char *a5)
{
  unint64_t v5;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;

  v5 = 0;
  if (a3 && a4 && a5)
  {
    v5 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v5;
    if (!v5 || v5 + 24 > *((_QWORD *)a1 + 2))
    {
      v11 = 2 * *((_QWORD *)a1 + 4);
      if (v11 <= 0x20)
        v11 = 32;
      *((_QWORD *)a1 + 4) = v11;
      v12 = v11 + 8;
      v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      v14 = (char *)v13 + v12;
      *v13 = *((_QWORD *)a1 + 3);
      v5 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v14;
      *((_QWORD *)a1 + 3) = v13;
    }
    *((_QWORD *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(_BYTE *)(v5 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v5, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::Node::addChild((unsigned int *)v5, a4, a1, v15, v16);
    swift::Demangle::Node::addChild((unsigned int *)v5, (swift::Demangle::Node *)a5, a1, v17, v18);
  }
  return v5;
}

unint64_t swift::Demangle::Demangler::createWithChildren(swift::Demangle::NodeFactory *a1, __int16 a2, swift::Demangle::Node *a3, swift::Demangle::Node *a4, char *a5, swift::Demangle::Node *a6)
{
  unint64_t v6;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;

  v6 = 0;
  if (a3 && a4 && a5 && a6)
  {
    v6 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v6;
    if (!v6 || v6 + 24 > *((_QWORD *)a1 + 2))
    {
      v13 = 2 * *((_QWORD *)a1 + 4);
      if (v13 <= 0x20)
        v13 = 32;
      *((_QWORD *)a1 + 4) = v13;
      v14 = v13 + 8;
      v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      v16 = (char *)v15 + v14;
      *v15 = *((_QWORD *)a1 + 3);
      v6 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v16;
      *((_QWORD *)a1 + 3) = v15;
    }
    *((_QWORD *)a1 + 1) = v6 + 24;
    *(_WORD *)(v6 + 16) = a2;
    *(_BYTE *)(v6 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v6, a3, a1, (uint64_t)a4, a5);
    swift::Demangle::Node::addChild((unsigned int *)v6, a4, a1, v17, v18);
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)a5, a1, v19, v20);
    swift::Demangle::Node::addChild((unsigned int *)v6, a6, a1, v21, v22);
  }
  return v6;
}

unint64_t swift::Demangle::Demangler::changeKind(swift::Demangle::NodeFactory *a1, swift::Demangle::Node **a2, __int16 a3, uint64_t a4, const char *a5)
{
  int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  swift::Demangle::Node *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  int v24;
  swift::Demangle::Node **v25;
  swift::Demangle::Node *v26;
  swift::Demangle::Node **v27;
  swift::Demangle::Node *v28;
  __int128 v30;

  if (!a2)
    return 0;
  v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 == 4)
  {
    v15 = *a2;
    v10 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)a1 + 2))
    {
      v16 = 2 * *((_QWORD *)a1 + 4);
      if (v16 <= 0x20)
        v16 = 32;
      *((_QWORD *)a1 + 4) = v16;
      v17 = v16 + 8;
      v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      v19 = (char *)v18 + v17;
      *v18 = *((_QWORD *)a1 + 3);
      v10 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v19;
      *((_QWORD *)a1 + 3) = v18;
    }
    *((_QWORD *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 4;
    *(_QWORD *)v10 = v15;
  }
  else if (v8 == 3)
  {
    v9 = *(_OWORD *)a2;
    v10 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)a1 + 2))
    {
      v11 = 2 * *((_QWORD *)a1 + 4);
      if (v11 <= 0x20)
        v11 = 32;
      *((_QWORD *)a1 + 4) = v11;
      v12 = v11 + 8;
      v30 = v9;
      v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      v9 = v30;
      v14 = (char *)v13 + v12;
      *v13 = *((_QWORD *)a1 + 3);
      v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v14;
      *((_QWORD *)a1 + 3) = v13;
    }
    *((_QWORD *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 3;
    *(_OWORD *)v10 = v9;
  }
  else
  {
    v10 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)a1 + 2))
    {
      v20 = 2 * *((_QWORD *)a1 + 4);
      if (v20 <= 0x20)
        v20 = 32;
      *((_QWORD *)a1 + 4) = v20;
      v21 = v20 + 8;
      v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v23 = (char *)v22 + v21;
      *v22 = *((_QWORD *)a1 + 3);
      v10 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v23;
      *((_QWORD *)a1 + 3) = v22;
    }
    *((_QWORD *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = a3;
    *(_BYTE *)(v10 + 18) = 0;
  }
  v24 = *((unsigned __int8 *)a2 + 18);
  v25 = a2;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      v26 = *a2;
      v25 = (swift::Demangle::Node **)*a2;
LABEL_31:
      v27 = (swift::Demangle::Node **)((char *)v26 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_36;
    }
    v25 = 0;
  }
  switch(v24)
  {
    case 1:
      v27 = a2 + 1;
      break;
    case 2:
      v27 = a2 + 2;
      break;
    case 5:
      v26 = *a2;
      goto LABEL_31;
    default:
      v27 = 0;
      break;
  }
LABEL_36:
  while (v25 != v27)
  {
    v28 = *v25++;
    swift::Demangle::Node::addChild((unsigned int *)v10, v28, a1, a4, a5);
  }
  return v10;
}

unint64_t swift::Demangle::Demangler::demangleTypeMangling(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  swift::Demangle::Node *v8;
  uint64_t v9;
  const char *v10;
  swift::Demangle::Node *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t result;

  v6 = *((_DWORD *)this + 24);
  if (v6
    && (v7 = v6 - 1, v8 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v7), *((_WORD *)v8 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v7;
  }
  else
  {
    v8 = 0;
  }
  v11 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, v8, a3, a4, a5);
  v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v12;
  if (!v12 || v12 + 24 > *((_QWORD *)this + 2))
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
  }
  *((_QWORD *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 236;
  *(_BYTE *)(v12 + 18) = 0;
  if (v11 && v12)
    swift::Demangle::Node::addChild((unsigned int *)v12, v11, this, v9, v10);
  result = 0;
  if (v8)
  {
    if (v12)
    {
      swift::Demangle::Node::addChild((unsigned int *)v12, v8, this, v9, v10);
      return v12;
    }
  }
  return result;
}

unint64_t swift::Demangle::Demangler::popFunctionParamLabels(swift::Demangle::Demangler *this, swift::Demangle::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int8x16_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  int v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  int v31;
  uint64_t **v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  int v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t *v64;
  __int128 *v65;
  int v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  __int128 v73;

  if (!*((_BYTE *)this + 80))
  {
    v8 = *((_DWORD *)this + 24);
    if (v8)
    {
      v9 = v8 - 1;
      if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v9) + 16) == 274)
      {
        *((_DWORD *)this + 24) = v9;
        v10 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 1) = v10;
        if (!v10 || (unint64_t)&v10[1].u64[1] > *((_QWORD *)this + 2))
        {
          v11 = 2 * *((_QWORD *)this + 4);
          if (v11 <= 0x20)
            v11 = 32;
          *((_QWORD *)this + 4) = v11;
          v12 = v11 + 8;
          v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
          v14 = (char *)v13 + v12;
          *v13 = *((_QWORD *)this + 3);
          v10 = (int8x16_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
          *((_QWORD *)this + 2) = v14;
          *((_QWORD *)this + 3) = v13;
        }
        *((_QWORD *)this + 1) = (char *)v10 + 24;
        v10[1].i16[0] = 290;
        v10[1].i8[2] = 0;
        return (unint64_t)v10;
      }
    }
  }
  if (!a2 || *((_WORD *)a2 + 8) != 232)
    return 0;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_8;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::Node **)a2;
LABEL_8:
    v7 = *(uint64_t **)a2;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_18:
  if (*((_WORD *)v7 + 8) != 44)
    goto LABEL_31;
  v15 = *((unsigned __int8 *)v7 + 18);
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v7 + 2) < 2u)
    {
      v16 = 0;
      goto LABEL_25;
    }
    v7 = (uint64_t *)*v7;
  }
  v16 = (uint64_t *)v7[1];
LABEL_25:
  v17 = *((unsigned __int8 *)v16 + 18);
  if ((v17 - 1) >= 2)
  {
    if (v17 != 5 || !*((_DWORD *)v16 + 2))
    {
      v7 = 0;
      goto LABEL_31;
    }
    v16 = (uint64_t *)*v16;
  }
  v7 = (uint64_t *)*v16;
LABEL_31:
  v18 = *((unsigned __int16 *)v7 + 8);
  if (v18 != 82 && v18 != 65)
    return 0;
  v19 = *((unsigned __int8 *)v7 + 18);
  v20 = v19 - 1;
  v21 = v7;
  if ((v19 - 1) >= 2)
    v21 = (uint64_t *)*v7;
  v22 = *(unsigned __int16 *)(*v21 + 16) == 349;
  if (v20 >= 2)
  {
    v23 = (uint64_t *)*v7;
    if (*(_WORD *)(*(_QWORD *)(*v7 + 8 * v22) + 16) == 67)
      v22 = (v22 + 1);
    else
      v22 = v22;
  }
  else
  {
    if (*(_WORD *)(v7[v22] + 16) == 67)
      v22 = (v22 + 1);
    else
      v22 = v22;
    v23 = v7;
  }
  if (*(_WORD *)(v23[v22] + 16) == 129)
    v22 = (v22 + 1);
  else
    v22 = v22;
  if (v19 == 5)
  {
    v24 = (uint64_t *)*v7;
    if (*(_WORD *)(*(_QWORD *)(*v7 + 8 * v22) + 16) == 130)
      LODWORD(v22) = v22 + 1;
    if (*(_WORD *)(v24[v22] + 16) == 68)
      v22 = (v22 + 1);
    else
      v22 = v22;
  }
  else
  {
    if (v19 == 2)
    {
      if (*(_WORD *)(v7[v22] + 16) == 130)
        v22 = (v22 + 1);
      else
        v22 = v22;
    }
    else
    {
      v22 = *(unsigned __int16 *)(v7[v22] + 16) == 130;
    }
    if (*(_WORD *)(v7[v22] + 16) == 68)
      v22 = (v22 + 1);
    else
      v22 = v22;
    v24 = v7;
  }
  if (*(_WORD *)(v24[v22] + 16) == 272)
    goto LABEL_65;
  v25 = v7;
  if (v20 >= 2)
    v25 = (uint64_t *)*v7;
  if (*(_WORD *)(v25[v22] + 16) == 273)
LABEL_65:
    v22 = (v22 + 1);
  if (v19 == 5)
  {
    v27 = *((unsigned int *)v7 + 2);
    v28 = (uint64_t *)*v7;
    if (*(_WORD *)(*(_QWORD *)(*v7 + 8 * v22) + 16) == 66)
      LODWORD(v22) = v22 + 1;
    if (*(_WORD *)(v28[v22] + 16) == 271)
      LODWORD(v22) = v22 + 1;
    if (*(_WORD *)(v28[v22] + 16) == 348)
      LODWORD(v22) = v22 + 1;
  }
  else if (v19 == 2)
  {
    if (*(_WORD *)(v7[v22] + 16) == 66)
      v26 = v22 + 1;
    else
      v26 = v22;
    if (*(_WORD *)(v7[v26] + 16) == 271)
      ++v26;
    if (*(_WORD *)(v7[v26] + 16) == 348)
      LODWORD(v22) = v26 + 1;
    else
      LODWORD(v22) = v26;
    v27 = 2;
  }
  else
  {
    if (*(_WORD *)(v7[v22] + 16) == 66)
      v29 = v22 + 1;
    else
      v29 = v22;
    LODWORD(v22) = *(unsigned __int16 *)(v7[*(_WORD *)(v7[v29] + 16) == 271] + 16) == 348;
    v27 = 1;
  }
  if (v27 <= v22)
  {
    v30 = 0;
  }
  else
  {
    if (v20 >= 2)
      v7 = (uint64_t *)*v7;
    v30 = (uint64_t *)v7[v22];
  }
  v31 = *((unsigned __int8 *)v30 + 18);
  v32 = (uint64_t **)v30;
  if ((v31 - 1) < 2)
    goto LABEL_97;
  if (v31 == 5 && *((_DWORD *)v30 + 2))
  {
    v32 = (uint64_t **)*v30;
LABEL_97:
    v33 = *v32;
    goto LABEL_99;
  }
  v33 = 0;
LABEL_99:
  v34 = *((unsigned __int8 *)v33 + 18);
  if ((v34 - 1) < 2)
  {
LABEL_103:
    v35 = (uint64_t *)*v33;
    goto LABEL_105;
  }
  if (v34 == 5 && *((_DWORD *)v33 + 2))
  {
    v33 = (uint64_t *)*v33;
    goto LABEL_103;
  }
  v35 = 0;
LABEL_105:
  if (*((_WORD *)v35 + 8) == 223)
  {
    v36 = *((unsigned __int8 *)v35 + 18);
    if (v36 != 1)
    {
      if (v36 == 5)
      {
        v36 = *((_DWORD *)v35 + 2);
        if (!v36)
          return 0;
      }
      else if (v36 != 2)
      {
        return 0;
      }
    }
  }
  else
  {
    v36 = 1;
  }
  v10 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v10;
  if (!v10 || (unint64_t)&v10[1].u64[1] > *((_QWORD *)this + 2))
  {
    v37 = 2 * *((_QWORD *)this + 4);
    if (v37 <= 0x20)
      v37 = 32;
    *((_QWORD *)this + 4) = v37;
    v38 = v37 + 8;
    v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    v40 = (char *)v39 + v38;
    *v39 = *((_QWORD *)this + 3);
    v10 = (int8x16_t *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v40;
    *((_QWORD *)this + 3) = v39;
  }
  *((_QWORD *)this + 1) = (char *)v10 + 24;
  v10[1].i16[0] = 290;
  v10[1].i8[2] = 0;
  v41 = *((unsigned __int8 *)v30 + 18);
  if ((v41 - 1) < 2)
    goto LABEL_120;
  if (v41 == 5 && *((_DWORD *)v30 + 2))
  {
    v30 = (uint64_t *)*v30;
LABEL_120:
    v42 = (uint64_t *)*v30;
    goto LABEL_122;
  }
  v42 = 0;
LABEL_122:
  v43 = *((unsigned __int8 *)v42 + 18);
  if ((v43 - 1) < 2)
    goto LABEL_126;
  if (v43 == 5 && *((_DWORD *)v42 + 2))
  {
    v42 = (uint64_t *)*v42;
LABEL_126:
    v44 = (uint64_t *)*v42;
    if (!*((_BYTE *)this + 80))
      goto LABEL_131;
LABEL_129:
    if (!v44 || *((_WORD *)v44 + 8) != 223)
      return (unint64_t)v10;
    goto LABEL_131;
  }
  v44 = 0;
  if (*((_BYTE *)this + 80))
    goto LABEL_129;
LABEL_131:
  v45 = 0;
  v46 = 0;
  do
  {
    if (!*((_BYTE *)this + 80))
    {
      v56 = *((_DWORD *)this + 24);
      if (v56)
      {
        v57 = v56 - 1;
        v51 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v57);
        *((_DWORD *)this + 24) = v57;
        if (v51)
        {
          v58 = *(unsigned __int16 *)(v51 + 16);
          if (v58 == 275 || v58 == 101)
            goto LABEL_136;
        }
      }
      return 0;
    }
    v52 = *((unsigned __int8 *)v44 + 18);
    v53 = v52 - 1;
    if ((_DWORD)v52 == 1)
      goto LABEL_142;
    if ((_DWORD)v52 != 5)
    {
      if ((_DWORD)v52 != 2)
        goto LABEL_152;
      v52 = 2;
LABEL_142:
      if (v52 > v45)
        goto LABEL_143;
      goto LABEL_152;
    }
    if (*((unsigned int *)v44 + 2) > v45)
    {
LABEL_143:
      v54 = v44;
      if (v53 >= 2)
        v54 = (uint64_t *)*v44;
      v55 = (uint64_t *)v54[v45];
      goto LABEL_153;
    }
LABEL_152:
    v55 = 0;
LABEL_153:
    v59 = *((unsigned __int8 *)v55 + 18);
    switch(v59)
    {
      case 1:
        v60 = *((unsigned __int8 *)v55 + 18);
        break;
      case 5:
        v60 = *((unsigned int *)v55 + 2);
        if (!(_DWORD)v60)
        {
LABEL_171:
          v51 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v51;
          if (!v51 || v51 + 24 > *((_QWORD *)this + 2))
          {
            v47 = 2 * *((_QWORD *)this + 4);
            if (v47 <= 0x20)
              v47 = 32;
            *((_QWORD *)this + 4) = v47;
            v48 = v47 + 8;
            v49 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
            v50 = (char *)v49 + v48;
            *v49 = *((_QWORD *)this + 3);
            v51 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v50;
            *((_QWORD *)this + 3) = v49;
          }
          *((_QWORD *)this + 1) = v51 + 24;
          *(_WORD *)(v51 + 16) = 275;
          *(_BYTE *)(v51 + 18) = 0;
          goto LABEL_136;
        }
        break;
      case 2:
        v60 = 2;
        break;
      default:
        goto LABEL_171;
    }
    v61 = 0;
    v62 = 1;
    while (1)
    {
      v63 = *((unsigned __int8 *)v55 + 18);
      if (v59 == 1)
        goto LABEL_163;
      if (v59 != 5)
      {
        v63 = 2;
LABEL_163:
        if (v63 <= v61)
          goto LABEL_168;
        goto LABEL_164;
      }
      if (*((unsigned int *)v55 + 2) <= v61)
      {
LABEL_168:
        v65 = 0;
        goto LABEL_169;
      }
LABEL_164:
      v64 = v55;
      if ((v59 - 1) >= 2)
        v64 = (uint64_t *)*v55;
      v65 = (__int128 *)v64[v61];
LABEL_169:
      if (*((_WORD *)v65 + 8) == 225)
        break;
      ++v61;
      ++v62;
      if (v60 == v61)
        goto LABEL_171;
    }
    if (v59 == 5)
    {
      v66 = *((_DWORD *)v55 + 2);
      if ((_DWORD)v61 - v66 == -1)
      {
        *((_DWORD *)v55 + 2) = v61;
      }
      else
      {
        do
        {
          *(_QWORD *)(*v55 + 8 * (v62 - 1)) = *(_QWORD *)(*v55 + 8 * v62);
          ++v62;
        }
        while (v66 != v62);
        --*((_DWORD *)v55 + 2);
      }
    }
    else if (v59 == 2)
    {
      if (!(_DWORD)v61)
        *v55 = v55[1];
      *((_BYTE *)v55 + 18) = 1;
    }
    else
    {
      *((_BYTE *)v55 + 18) = 0;
    }
    v67 = *v65;
    v51 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v51;
    if (!v51 || v51 + 24 > *((_QWORD *)this + 2))
    {
      v68 = 2 * *((_QWORD *)this + 4);
      if (v68 <= 0x20)
        v68 = 32;
      *((_QWORD *)this + 4) = v68;
      v69 = v68 + 8;
      v73 = v67;
      v70 = malloc_type_malloc(v68 + 8, 0xD0263BC5uLL);
      v67 = v73;
      v71 = (char *)v70 + v69;
      *v70 = *((_QWORD *)this + 3);
      v51 = ((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v71;
      *((_QWORD *)this + 3) = v70;
    }
    *((_QWORD *)this + 1) = v51 + 24;
    *(_WORD *)(v51 + 16) = 101;
    *(_BYTE *)(v51 + 18) = 3;
    *(_OWORD *)v51 = v67;
LABEL_136:
    swift::Demangle::Node::addChild((unsigned int *)v10, (swift::Demangle::Node *)v51, this, a4, a5);
    v46 |= *(unsigned __int16 *)(v51 + 16) != 275;
    ++v45;
  }
  while (v45 != v36);
  if ((v46 & 1) == 0)
    return swift::Demangle::NodeFactory::createNode(this, 290);
  if (!*((_BYTE *)this + 80))
    swift::Demangle::Node::reverseChildren(v10, 0);
  return (unint64_t)v10;
}

uint64_t swift::Demangle::Demangler::demangleSymbolicReference(swift::Demangle::Demangler *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  int v17;
  char v18;
  _DWORD *v19;

  v2 = *((_QWORD *)this + 9);
  v3 = v2 + 4;
  if ((unint64_t)(v2 + 4) > *((_QWORD *)this + 8))
    return 0;
  v5 = 0;
  v6 = (_DWORD *)(*((_QWORD *)this + 7) + v2);
  v7 = *v6;
  *((_QWORD *)this + 9) = v3;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  switch(a2)
  {
    case 1:
      goto LABEL_10;
    case 2:
      v8 = 0;
      v9 = 0;
      v10 = 1;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
      goto LABEL_11;
    case 9:
      v11 = 0;
      v8 = 0;
      v10 = 0;
      v9 = 1;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
      goto LABEL_11;
    case 10:
      v11 = 0;
      v8 = 0;
      v10 = 0;
      v9 = 2;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
      goto LABEL_11;
    case 11:
      v11 = 0;
      v8 = 0;
      v10 = 0;
      v9 = 3;
LABEL_10:
      v12 = *((_QWORD *)this + 71);
      if (v12)
        goto LABEL_11;
      return 0;
    case 12:
      v11 = 0;
      v10 = 0;
      v9 = 4;
      v8 = 1;
      v12 = *((_QWORD *)this + 71);
      if (!v12)
        return 0;
LABEL_11:
      v18 = v9;
      v16 = v7;
      v17 = v10;
      v19 = v6;
      v13 = (*(uint64_t (**)(uint64_t, char *, int *, int *, _DWORD **))(*(_QWORD *)v12 + 48))(v12, &v18, &v17, &v16, &v19);
      v5 = v13;
      if (v13)
      {
        if ((v11 | v8) == 1)
        {
          v14 = *(unsigned __int16 *)(v13 + 16);
          if (v14 != 301 && v14 != 309)
          {
            v19 = (_DWORD *)v13;
            swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v19, this);
          }
        }
      }
      break;
    default:
      return v5;
  }
  return v5;
}

unint64_t swift::Demangle::Demangler::demangleTypeAnnotation(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  __int16 v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  __int16 v59;
  int v61;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  int v77;
  int v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  char *v88;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v8 = 0;
  v9 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v10 = *((_QWORD *)this + 7);
  switch(*(_BYTE *)(v10 + v5))
  {
    case 'A':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v11 = 2 * *((_QWORD *)this + 4);
        if (v11 <= 0x20)
          v11 = 32;
        *((_QWORD *)this + 4) = v11;
        v12 = v11 + 8;
        v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        v14 = (char *)v13 + v12;
        *v13 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v14;
        *((_QWORD *)this + 3) = v13;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 129;
      goto LABEL_50;
    case 'K':
      v16 = *((_DWORD *)this + 24);
      if (!v16)
        return 0;
      v17 = v16 - 1;
      v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v16 - 1));
      if (*(_WORD *)(v18 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v17;
      v19 = *(unsigned __int8 *)(v18 + 18);
      if (v19 == 1)
        goto LABEL_15;
      if (v19 != 5 || *(_DWORD *)(v18 + 8) != 1)
        return 0;
      v18 = *(_QWORD *)v18;
LABEL_15:
      v20 = *(_QWORD *)v18;
      if (!*(_QWORD *)v18)
        return 0;
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v25 = 273;
      goto LABEL_124;
    case 'L':
      if (v9 >= v6)
        return 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v26 = *(char *)(v10 + v9);
      if ((_DWORD)v26 == 115)
        goto LABEL_26;
      if ((_DWORD)v26 != 105)
        return 0;
      v26 = 105;
LABEL_26:
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v27 = 2 * *((_QWORD *)this + 4);
        if (v27 <= 0x20)
          v27 = 32;
        *((_QWORD *)this + 4) = v27;
        v28 = v27 + 8;
        v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        v30 = (char *)v29 + v28;
        *v29 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v30;
        *((_QWORD *)this + 3) = v29;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 349;
      *(_BYTE *)(v8 + 18) = 4;
      *(_QWORD *)v8 = v26;
      return v8;
    case 'T':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v31 = 2 * *((_QWORD *)this + 4);
        if (v31 <= 0x20)
          v31 = 32;
        *((_QWORD *)this + 4) = v31;
        v32 = v31 + 8;
        v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        v34 = (char *)v33 + v32;
        *v33 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v34;
        *((_QWORD *)this + 3) = v33;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 130;
      goto LABEL_50;
    case 'a':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v35 = 2 * *((_QWORD *)this + 4);
        if (v35 <= 0x20)
          v35 = 32;
        *((_QWORD *)this + 4) = v35;
        v36 = v35 + 8;
        v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        v38 = (char *)v37 + v36;
        *v37 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v38;
        *((_QWORD *)this + 3) = v37;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 271;
      goto LABEL_50;
    case 'b':
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v39 = 2 * *((_QWORD *)this + 4);
        if (v39 <= 0x20)
          v39 = 32;
        *((_QWORD *)this + 4) = v39;
        v40 = v39 + 8;
        v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
        v42 = (char *)v41 + v40;
        *v41 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v42;
        *((_QWORD *)this + 3) = v41;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v15 = 66;
LABEL_50:
      *(_WORD *)(v8 + 16) = v15;
      *(_BYTE *)(v8 + 18) = 0;
      return v8;
    case 'c':
      v43 = *((_DWORD *)this + 24);
      if (!v43)
        return 0;
      v44 = v43 - 1;
      v45 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v43 - 1));
      if (*(_WORD *)(v45 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v44;
      v46 = *(unsigned __int8 *)(v45 + 18);
      if (v46 == 1)
        goto LABEL_57;
      if (v46 != 5 || *(_DWORD *)(v45 + 8) != 1)
        return 0;
      v45 = *(_QWORD *)v45;
LABEL_57:
      v20 = *(_QWORD *)v45;
      if (!*(_QWORD *)v45)
        return 0;
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v47 = 2 * *((_QWORD *)this + 4);
        if (v47 <= 0x20)
          v47 = 32;
        *((_QWORD *)this + 4) = v47;
        v48 = v47 + 8;
        v49 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
        v50 = (char *)v49 + v48;
        *v49 = *((_QWORD *)this + 3);
        v8 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v50;
        *((_QWORD *)this + 3) = v49;
      }
      *((_QWORD *)this + 1) = v8 + 24;
      v25 = 67;
      goto LABEL_124;
    case 'i':
      v51 = *((_DWORD *)this + 24);
      if (!v51)
        return 0;
      v52 = v51 - 1;
      v53 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v51 - 1));
      if (*(_WORD *)(v53 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v52;
      v54 = *(unsigned __int8 *)(v53 + 18);
      if (v54 == 1)
        goto LABEL_70;
      if (v54 != 5 || *(_DWORD *)(v53 + 8) != 1)
        return 0;
      v53 = *(_QWORD *)v53;
LABEL_70:
      v8 = *(_QWORD *)v53;
      if (!*(_QWORD *)v53)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v55 = 2 * *((_QWORD *)this + 4);
        if (v55 <= 0x20)
          v55 = 32;
        *((_QWORD *)this + 4) = v55;
        v56 = v55 + 8;
        v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
        v58 = (char *)v57 + v56;
        *v57 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v58;
        *((_QWORD *)this + 3) = v57;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 127;
      break;
    case 'j':
      return swift::Demangle::Demangler::demangleDifferentiableFunctionType(this);
    case 'k':
      v61 = *((_DWORD *)this + 24);
      if (!v61)
        return 0;
      v62 = v61 - 1;
      v63 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v61 - 1));
      if (*(_WORD *)(v63 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v62;
      v64 = *(unsigned __int8 *)(v63 + 18);
      if (v64 == 1)
        goto LABEL_84;
      if (v64 != 5 || *(_DWORD *)(v63 + 8) != 1)
        return 0;
      v63 = *(_QWORD *)v63;
LABEL_84:
      v8 = *(_QWORD *)v63;
      if (!*(_QWORD *)v63)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v65 = 2 * *((_QWORD *)this + 4);
        if (v65 <= 0x20)
          v65 = 32;
        *((_QWORD *)this + 4) = v65;
        v66 = v65 + 8;
        v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
        v68 = (char *)v67 + v66;
        *v67 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v68;
        *((_QWORD *)this + 3) = v67;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 326;
      break;
    case 'l':
      return swift::Demangle::Demangler::demangleLifetimeDependenceKind(this, 0, a3, a4, a5);
    case 't':
      v69 = *((_DWORD *)this + 24);
      if (!v69)
        return 0;
      v70 = v69 - 1;
      v71 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v69 - 1));
      if (*(_WORD *)(v71 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v70;
      v72 = *(unsigned __int8 *)(v71 + 18);
      if (v72 == 1)
        goto LABEL_98;
      if (v72 != 5 || *(_DWORD *)(v71 + 8) != 1)
        return 0;
      v71 = *(_QWORD *)v71;
LABEL_98:
      v8 = *(_QWORD *)v71;
      if (!*(_QWORD *)v71)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v73 = 2 * *((_QWORD *)this + 4);
        if (v73 <= 0x20)
          v73 = 32;
        *((_QWORD *)this + 4) = v73;
        v74 = v73 + 8;
        v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        v76 = (char *)v75 + v74;
        *v75 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v76;
        *((_QWORD *)this + 3) = v75;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 331;
      break;
    case 'u':
      v77 = *((_DWORD *)this + 24);
      if (!v77)
        return 0;
      v78 = v77 - 1;
      v79 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v77 - 1));
      if (*(_WORD *)(v79 + 16) != 232)
        return 0;
      *((_DWORD *)this + 24) = v78;
      v80 = *(unsigned __int8 *)(v79 + 18);
      if (v80 == 1)
        goto LABEL_111;
      if (v80 != 5 || *(_DWORD *)(v79 + 8) != 1)
        return 0;
      v79 = *(_QWORD *)v79;
LABEL_111:
      v8 = *(_QWORD *)v79;
      if (!*(_QWORD *)v79)
        return v8;
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v81 = 2 * *((_QWORD *)this + 4);
        if (v81 <= 0x20)
          v81 = 32;
        *((_QWORD *)this + 4) = v81;
        v82 = v81 + 8;
        v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
        v84 = (char *)v83 + v82;
        *v83 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v84;
        *((_QWORD *)this + 3) = v83;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      v59 = 128;
      break;
    default:
      return v8;
  }
  *(_WORD *)(v20 + 16) = v59;
  *(_BYTE *)(v20 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v20, (swift::Demangle::Node *)v8, this, a4, a5);
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
  {
    v85 = 2 * *((_QWORD *)this + 4);
    if (v85 <= 0x20)
      v85 = 32;
    *((_QWORD *)this + 4) = v85;
    v86 = v85 + 8;
    v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
    v88 = (char *)v87 + v86;
    *v87 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v88;
    *((_QWORD *)this + 3) = v87;
  }
  *((_QWORD *)this + 1) = v8 + 24;
  v25 = 232;
LABEL_124:
  *(_WORD *)(v8 + 16) = v25;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)v20, this, a4, a5);
  return v8;
}

uint64_t *swift::Demangle::Demangler::popTypeAndGetChild(swift::Demangle::Demangler *this)
{
  int v1;
  int v2;
  uint64_t *v3;
  int v4;

  v1 = *((_DWORD *)this + 24);
  if (v1)
  {
    v2 = v1 - 1;
    v3 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * (v1 - 1));
    if (*((_WORD *)v3 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v2;
      v4 = *((unsigned __int8 *)v3 + 18);
      if (v4 == 1)
        return (uint64_t *)*v3;
      if (v4 == 5 && *((_DWORD *)v3 + 2) == 1)
      {
        v3 = (uint64_t *)*v3;
        return (uint64_t *)*v3;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleDifferentiableFunctionType(swift::Demangle::Demangler *this)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v2 = *((_QWORD *)this + 9);
  if (v2 >= *((_QWORD *)this + 8))
  {
    v3 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v2 + 1;
    v3 = *(char *)(*((_QWORD *)this + 7) + v2);
  }
  HIDWORD(v5) = v3;
  LODWORD(v5) = v3 - 100;
  v4 = v5 >> 1;
  if (v4 > 7 || ((0x93u >> v4) & 1) == 0)
    return 0;
  v7 = qword_20AA55668[v4];
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v8 = 2 * *((_QWORD *)this + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)this + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    *v10 = *((_QWORD *)this + 3);
    result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v10 + v9;
    *((_QWORD *)this + 3) = v10;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 68;
  *(_BYTE *)(result + 18) = 4;
  *(_QWORD *)result = v7;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleLifetimeDependenceKind(swift::Demangle::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  int v17;
  int v18;
  swift::Demangle::Node *v19;
  int v20;
  swift::Demangle::Node *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;

  v5 = *((_QWORD *)this + 9);
  if (v5 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v5 + 1;
  v7 = *(char *)(*((_QWORD *)this + 7) + v5);
  if ((_DWORD)v7 != 115)
  {
    if ((_DWORD)v7 != 105)
      return 0;
    v7 = 105;
  }
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (a2)
  {
    if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
    {
      v9 = 2 * *((_QWORD *)this + 4);
      if (v9 <= 0x20)
        v9 = 32;
      *((_QWORD *)this + 4) = v9;
      v10 = v9 + 8;
      v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      v12 = (char *)v11 + v10;
      *v11 = *((_QWORD *)this + 3);
      v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v12;
      *((_QWORD *)this + 3) = v11;
    }
    *((_QWORD *)this + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = 349;
    *(_BYTE *)(v8 + 18) = 4;
    *(_QWORD *)v8 = v7;
    return v8;
  }
  if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
  }
  *((_QWORD *)this + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 102;
  *(_BYTE *)(v8 + 18) = 4;
  *(_QWORD *)v8 = v7;
  v17 = *((_DWORD *)this + 24);
  if (!v17)
    return 0;
  v18 = v17 - 1;
  v19 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v17 - 1));
  if (*((_WORD *)v19 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v18;
  v20 = *((unsigned __int8 *)v19 + 18);
  if (v20 != 1)
  {
    if (v20 != 5 || *((_DWORD *)v19 + 2) != 1)
      return 0;
    v19 = *(swift::Demangle::Node **)v19;
  }
  v21 = *(swift::Demangle::Node **)v19;
  if (!*(_QWORD *)v19)
    return 0;
  v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v22;
  if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
  {
    v23 = 2 * *((_QWORD *)this + 4);
    if (v23 <= 0x20)
      v23 = 32;
    *((_QWORD *)this + 4) = v23;
    v24 = v23 + 8;
    v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
    v26 = (char *)v25 + v24;
    *v25 = *((_QWORD *)this + 3);
    v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v25;
  }
  *((_QWORD *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 348;
  *(_BYTE *)(v22 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v22, (swift::Demangle::Node *)v8, this, a4, a5);
  swift::Demangle::Node::addChild((unsigned int *)v22, v21, this, v27, v28);
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
  {
    v31 = 2 * *((_QWORD *)this + 4);
    if (v31 <= 0x20)
      v31 = 32;
    *((_QWORD *)this + 4) = v31;
    v32 = v31 + 8;
    v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
    v34 = (char *)v33 + v32;
    *v33 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v34;
    *((_QWORD *)this + 3) = v33;
  }
  *((_QWORD *)this + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 232;
  *(_BYTE *)(v8 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)v22, this, v29, v30);
  return v8;
}

uint64_t swift::Demangle::Demangler::demangleMultiSubstitutions(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  const void **v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 < v2)
  {
    v4 = (const void **)((char *)this + 88);
    v5 = -1;
    do
    {
      *((_QWORD *)this + 9) = v1 + 1;
      v6 = *((_QWORD *)this + 7);
      v7 = *(char *)(v6 + v1);
      if (!*(_BYTE *)(v6 + v1))
        break;
      if ((v7 - 97) > 0x19u)
      {
        if ((v7 - 65) <= 0x19u)
        {
          v8 = 0;
          if (v5 <= 2048 && *((unsigned int *)this + 28) > (unint64_t)(*(char *)(v6 + v1) - 65))
          {
            v8 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*(char *)(v6 + v1) - 65));
            if (v5 >= 2)
            {
              v12 = v5 + 1;
              do
              {
                v15 = v8;
                swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v4, &v15, this);
                --v12;
              }
              while (v12 > 2);
            }
          }
          return v8;
        }
        if (v7 == 95)
        {
          v13 = v5 + 27;
          if (*((_DWORD *)this + 28) <= v13)
            return 0;
          return *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v13);
        }
        *((_QWORD *)this + 9) = v1;
        if (v1 >= v2 || *(unsigned __int8 *)(v6 + v1) - 48 > 9)
          return 0;
        v5 = 0;
        while (1)
        {
          v10 = *(unsigned __int8 *)(v6 + v1);
          if ((v10 - 48) > 9)
            break;
          v11 = v10 + 10 * v5 - 48;
          if (v11 < v5)
            return 0;
          *((_QWORD *)this + 9) = ++v1;
          v5 = v11;
          if (v2 == v1)
          {
            v1 = v2;
            v5 = v11;
            break;
          }
        }
        if (v5 < 0)
          return 0;
      }
      else
      {
        v8 = 0;
        if (v5 > 2048 || *((unsigned int *)this + 28) <= (unint64_t)(*(char *)(v6 + v1) - 97))
          return v8;
        v8 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*(char *)(v6 + v1) - 97));
        if (v5 >= 2)
        {
          v9 = v5 + 1;
          do
          {
            v15 = v8;
            swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v4, &v15, this);
            --v9;
          }
          while (v9 > 2);
        }
        if (!v8)
          return v8;
        v15 = v8;
        swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v4, &v15, this);
        v2 = *((_QWORD *)this + 8);
        v1 = *((_QWORD *)this + 9);
        v5 = -1;
      }
    }
    while (v1 < v2);
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleBuiltinType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  unint64_t Node;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  signed int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  signed int v28;
  int v29;
  int v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  char v52;
  char *v53;
  uint64_t v54;

  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 >= v5)
    return 0;
  v8 = 0;
  v9 = v6 + 1;
  *((_QWORD *)this + 9) = v6 + 1;
  v10 = *((_QWORD *)this + 7);
  switch(*(_BYTE *)(v10 + v6))
  {
    case 'B':
      v11 = "Builtin.UnsafeValueBuffer";
      v12 = 25;
      goto LABEL_45;
    case 'D':
      v11 = "Builtin.DefaultActorStorage";
      v12 = 27;
      goto LABEL_45;
    case 'I':
      v11 = "Builtin.IntLiteral";
      goto LABEL_38;
    case 'O':
      v11 = "Builtin.UnknownObject";
      v12 = 21;
      goto LABEL_45;
    case 'P':
      v11 = "Builtin.PackIndex";
      v12 = 17;
      goto LABEL_45;
    case 'T':
      Node = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)this + 2))
      {
        v14 = 2 * *((_QWORD *)this + 4);
        if (v14 <= 0x20)
          v14 = 32;
        *((_QWORD *)this + 4) = v14;
        v15 = v14 + 8;
        v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        *v16 = *((_QWORD *)this + 3);
        Node = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v16 + v15;
        *((_QWORD *)this + 3) = v16;
      }
      *((_QWORD *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 21;
      *(_BYTE *)(Node + 18) = 0;
      goto LABEL_46;
    case 'b':
      v11 = "Builtin.BridgeObject";
      goto LABEL_36;
    case 'c':
      v11 = "Builtin.RawUnsafeContinuation";
      v12 = 29;
      goto LABEL_45;
    case 'd':
      v11 = "Builtin.NonDefaultDistributedActorStorage";
      v12 = 41;
      goto LABEL_45;
    case 'e':
      v11 = "Builtin.Executor";
      goto LABEL_40;
    case 'f':
      if (v9 >= v5)
        return 0;
      v17 = *(unsigned __int8 *)(v10 + v9);
      if (v17 == 95)
        goto LABEL_43;
      if ((v17 - 48) > 9)
        return 0;
      v18 = 0;
      while (1)
      {
        v19 = *(unsigned __int8 *)(v10 + v9);
        if ((v19 - 48) > 9)
          break;
        v20 = v19 + 10 * v18 - 48;
        if (v20 < v18)
          return 0;
        v8 = 0;
        *((_QWORD *)this + 9) = ++v9;
        v18 = v20;
        if (v5 == v9)
          return v8;
      }
      v8 = 0;
      if (v18 < 0 || v9 >= v5 || v19 != 95)
        return v8;
      *((_QWORD *)this + 9) = v9 + 1;
      if ((v18 - 1) > 0xFFF)
        return 0;
      v53 = 0;
      v31 = (char *)*((_QWORD *)this + 1);
      if (!v31 || (unint64_t)(v31 + 14) > *((_QWORD *)this + 2))
      {
        v32 = 2 * *((_QWORD *)this + 4);
        if (v32 <= 0xF)
          v32 = 15;
        *((_QWORD *)this + 4) = v32;
        v33 = v32 + 8;
        v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        *v34 = *((_QWORD *)this + 3);
        v31 = (char *)(v34 + 1);
        *((_QWORD *)this + 2) = (char *)v34 + v33;
        *((_QWORD *)this + 3) = v34;
      }
      *((_QWORD *)this + 1) = v31 + 14;
      v53 = v31;
      qmemcpy(v31, "Builtin.FPIEEE", 14);
      v35 = 0xE0000000ELL;
      goto LABEL_78;
    case 'i':
      if (v9 >= v5)
        return 0;
      v21 = *(unsigned __int8 *)(v10 + v9);
      if (v21 == 95)
        goto LABEL_43;
      if ((v21 - 48) > 9)
        return 0;
      v18 = 0;
      while (1)
      {
        v22 = *(unsigned __int8 *)(v10 + v9);
        if ((v22 - 48) > 9)
          break;
        v23 = v22 + 10 * v18 - 48;
        if (v23 < v18)
          return 0;
        v8 = 0;
        *((_QWORD *)this + 9) = ++v9;
        v18 = v23;
        if (v5 == v9)
          return v8;
      }
      v8 = 0;
      if (v18 < 0 || v9 >= v5 || v22 != 95)
        return v8;
      *((_QWORD *)this + 9) = v9 + 1;
      if ((v18 - 1) > 0xFFF)
        return 0;
      v53 = 0;
      v36 = (_QWORD *)*((_QWORD *)this + 1);
      if (!v36 || (unint64_t)v36 + 11 > *((_QWORD *)this + 2))
      {
        v37 = 2 * *((_QWORD *)this + 4);
        if (v37 <= 0xC)
          v37 = 12;
        *((_QWORD *)this + 4) = v37;
        v38 = v37 + 8;
        v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        *v39 = *((_QWORD *)this + 3);
        v36 = v39 + 1;
        *((_QWORD *)this + 2) = (char *)v39 + v38;
        *((_QWORD *)this + 3) = v39;
      }
      *((_QWORD *)this + 1) = (char *)v36 + 11;
      v53 = (char *)v36;
      *(_DWORD *)((char *)v36 + 7) = 1953384750;
      *v36 = *(_QWORD *)"Builtin.Int";
      v35 = 0xB0000000BLL;
LABEL_78:
      v54 = v35;
      swift::Demangle::CharVector::append((unsigned int *)&v53, v18, this);
      v40 = v53;
      v41 = v54;
      Node = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)this + 2))
      {
        v42 = 2 * *((_QWORD *)this + 4);
        if (v42 <= 0x20)
          v42 = 32;
        *((_QWORD *)this + 4) = v42;
        v43 = v42 + 8;
        v44 = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        *v44 = *((_QWORD *)this + 3);
        Node = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v44 + v43;
        *((_QWORD *)this + 3) = v44;
      }
      *((_QWORD *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 20;
      *(_BYTE *)(Node + 18) = 3;
      *(_QWORD *)Node = v40;
      *(_QWORD *)(Node + 8) = v41;
      goto LABEL_46;
    case 'j':
      v11 = "Builtin.Job";
      v12 = 11;
      goto LABEL_45;
    case 'o':
      v11 = "Builtin.NativeObject";
LABEL_36:
      v12 = 20;
      goto LABEL_45;
    case 'p':
      v11 = "Builtin.RawPointer";
LABEL_38:
      v12 = 18;
      goto LABEL_45;
    case 't':
      v11 = "Builtin.SILToken";
LABEL_40:
      v12 = 16;
      goto LABEL_45;
    case 'v':
      if (v9 >= v5)
        return 0;
      v24 = *(unsigned __int8 *)(v10 + v9);
      if (v24 == 95)
      {
LABEL_43:
        v8 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
        return v8;
      }
      if ((v24 - 48) > 9)
        return 0;
      v28 = 0;
      break;
    case 'w':
      v11 = "Builtin.Word";
      v12 = 12;
LABEL_45:
      Node = swift::Demangle::NodeFactory::createNode(this, 20, v11, v12);
      if (Node)
        goto LABEL_46;
      return 0;
    default:
      return v8;
  }
  while (1)
  {
    v29 = *(unsigned __int8 *)(v10 + v9);
    if ((v29 - 48) > 9)
      break;
    v30 = v29 + 10 * v28 - 48;
    if (v30 < v28)
      return 0;
    v8 = 0;
    *((_QWORD *)this + 9) = ++v9;
    v28 = v30;
    if (v5 == v9)
      return v8;
  }
  v8 = 0;
  if (v28 < 0 || v9 >= v5 || v29 != 95)
    return v8;
  *((_QWORD *)this + 9) = v9 + 1;
  if ((v28 - 4097) < 0xFFFFF000)
    return 0;
  v45 = *((_DWORD *)this + 24);
  if (!v45)
    return 0;
  v46 = v45 - 1;
  v47 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v45 - 1));
  if (*(_WORD *)(v47 + 16) != 232)
    return 0;
  *((_DWORD *)this + 24) = v46;
  v48 = *(unsigned __int8 *)(v47 + 18);
  if (v48 == 1)
    goto LABEL_94;
  if (v48 != 5 || *(_DWORD *)(v47 + 8) != 1)
    return 0;
  v47 = *(_QWORD *)v47;
LABEL_94:
  v8 = *(_QWORD *)v47;
  if (*(_QWORD *)v47)
  {
    if (*(_WORD *)(v8 + 16) != 20 || *(_QWORD *)(v8 + 8) < 8uLL || **(_QWORD **)v8 != 0x2E6E69746C697542)
      return 0;
    v53 = 0;
    v54 = 0;
    swift::Demangle::CharVector::append(&v53, "Builtin.Vec", 0xBuLL, this);
    swift::Demangle::CharVector::append((unsigned int *)&v53, v28, this);
    v52 = 120;
    swift::Demangle::Vector<char>::push_back((unsigned int *)&v53, &v52, this);
    v49 = *(_QWORD *)(v8 + 8);
    v50 = 8;
    if (v49 < 8)
      v50 = *(_QWORD *)(v8 + 8);
    swift::Demangle::CharVector::append(&v53, (void *)(*(_QWORD *)v8 + v50), v49 - v50, this);
    Node = swift::Demangle::NodeFactory::createNode(this, 20, (uint64_t *)&v53);
    if (!Node)
      return 0;
LABEL_46:
    v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v8;
    if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
    {
      v25 = 2 * *((_QWORD *)this + 4);
      if (v25 <= 0x20)
        v25 = 32;
      *((_QWORD *)this + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      *v27 = *((_QWORD *)this + 3);
      v8 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v27 + v26;
      *((_QWORD *)this + 3) = v27;
    }
    *((_QWORD *)this + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = 232;
    *(_BYTE *)(v8 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)Node, this, a4, a5);
  }
  return v8;
}

unint64_t swift::Demangle::Demangler::demangleAnyGenericType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  __int16 v5;
  int v7;
  unsigned int v8;
  unsigned __int16 *v9;
  int v10;
  BOOL v11;
  BOOL v12;
  swift::Demangle::Node *v13;
  uint64_t v14;
  const char *v15;
  swift::Demangle::Node *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v32;

  v5 = a2;
  v7 = *((_DWORD *)this + 24);
  if (!v7
    || ((v8 = v7 - 1,
         v9 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v8),
         v10 = v9[8],
         (v10 - 173) <= 0x3C)
      ? (v11 = ((1 << (v10 + 83)) & 0x100000010000010DLL) == 0)
      : (v11 = 1),
        v11
     && ((v10 - 101) <= 0x24
       ? (v12 = ((1 << (v10 - 101)) & 0x1000800001) == 0)
       : (v12 = 1),
         v12 && v10 != 347)))
  {
    v9 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v8;
  }
  v13 = swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
  if (!v9)
    return 0;
  v16 = v13;
  if (!v13)
    return 0;
  v17 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v17;
  if (!v17 || v17 + 24 > *((_QWORD *)this + 2))
  {
    v18 = 2 * *((_QWORD *)this + 4);
    if (v18 <= 0x20)
      v18 = 32;
    *((_QWORD *)this + 4) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    v21 = (char *)v20 + v19;
    *v20 = *((_QWORD *)this + 3);
    v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v21;
    *((_QWORD *)this + 3) = v20;
  }
  *((_QWORD *)this + 1) = v17 + 24;
  *(_WORD *)(v17 + 16) = v5;
  *(_BYTE *)(v17 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v17, v16, this, v14, v15);
  swift::Demangle::Node::addChild((unsigned int *)v17, (swift::Demangle::Node *)v9, this, v22, v23);
  v26 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v26;
  if (!v26 || v26 + 24 > *((_QWORD *)this + 2))
  {
    v27 = 2 * *((_QWORD *)this + 4);
    if (v27 <= 0x20)
      v27 = 32;
    *((_QWORD *)this + 4) = v27;
    v28 = v27 + 8;
    v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
    v30 = (char *)v29 + v28;
    *v29 = *((_QWORD *)this + 3);
    v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v30;
    *((_QWORD *)this + 3) = v29;
  }
  *((_QWORD *)this + 1) = v26 + 24;
  *(_WORD *)(v26 + 16) = 232;
  *(_BYTE *)(v26 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v26, (swift::Demangle::Node *)v17, this, v24, v25);
  v32 = v26;
  swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v32, this);
  return v26;
}

unint64_t swift::Demangle::Demangler::demangleExtensionContext(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t *AnyGeneric;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  swift::Demangle::Node *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
  {
    v9 = 0;
LABEL_10:
    v11 = 0;
    goto LABEL_12;
  }
  v7 = v6 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(swift::Demangle::Node **)(v8 + 8 * (v6 - 1));
  if (*((_WORD *)v9 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7;
    if (v6 == 1)
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    v7 = *((_DWORD *)this + 24);
  }
  v10 = v7 - 1;
  v11 = *(_QWORD *)(v8 + 8 * v10);
  v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 == 153)
  {
    *((_DWORD *)this + 24) = v10;
    goto LABEL_12;
  }
  if (v12 != 101)
    goto LABEL_10;
  *((_DWORD *)this + 24) = v10;
  v11 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v11, 153, a4, a5);
LABEL_12:
  AnyGeneric = swift::Demangle::Demangler::popTypeAndGetAnyGeneric(this);
  v16 = 0;
  if (v11)
  {
    v17 = (swift::Demangle::Node *)AnyGeneric;
    if (AnyGeneric)
    {
      v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
      {
        v18 = 2 * *((_QWORD *)this + 4);
        if (v18 <= 0x20)
          v18 = 32;
        *((_QWORD *)this + 4) = v18;
        v19 = v18 + 8;
        v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
        v21 = (char *)v20 + v19;
        *v20 = *((_QWORD *)this + 3);
        v16 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v21;
        *((_QWORD *)this + 3) = v20;
      }
      *((_QWORD *)this + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 71;
      *(_BYTE *)(v16 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v16, (swift::Demangle::Node *)v11, this, v14, v15);
      swift::Demangle::Node::addChild((unsigned int *)v16, v17, this, v22, v23);
      if (v9)
        swift::Demangle::Node::addChild((unsigned int *)v16, v9, this, v24, v25);
    }
  }
  return v16;
}

swift::Demangle::Node *swift::Demangle::Demangler::demanglePlainFunction(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  swift::Demangle::Node *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned __int16 *v33;
  int v34;
  BOOL v35;
  BOOL v36;
  swift::Demangle::Node *v37;
  swift::Demangle::Node *v38;
  uint64_t v39;
  const char *v40;

  v6 = *((_DWORD *)this + 24);
  if (v6
    && (v7 = v6 - 1, v8 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v7), *((_WORD *)v8 + 8) == 43))
  {
    *((_DWORD *)this + 24) = v7;
  }
  else
  {
    v8 = 0;
  }
  v9 = swift::Demangle::Demangler::popFunctionType(this, 82, 0, a4, a5);
  v17 = (char *)swift::Demangle::Demangler::popFunctionParamLabels(this, (swift::Demangle::Node *)v9, v10, v11, v12);
  if (v8 && v9)
  {
    v18 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v18;
    if (!v18 || v18 + 24 > *((_QWORD *)this + 2))
    {
      v19 = 2 * *((_QWORD *)this + 4);
      if (v19 <= 0x20)
        v19 = 32;
      *((_QWORD *)this + 4) = v19;
      v20 = v19 + 8;
      v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v22 = (char *)v21 + v20;
      *v21 = *((_QWORD *)this + 3);
      v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v22;
      *((_QWORD *)this + 3) = v21;
    }
    *((_QWORD *)this + 1) = v18 + 24;
    *(_WORD *)(v18 + 16) = 44;
    *(_BYTE *)(v18 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v18, v8, this, v15, v16);
    swift::Demangle::Node::addChild((unsigned int *)v18, (swift::Demangle::Node *)v9, this, v23, v24);
    v9 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v9;
    if (!v9 || v9 + 24 > *((_QWORD *)this + 2))
    {
      v27 = 2 * *((_QWORD *)this + 4);
      if (v27 <= 0x20)
        v27 = 32;
      *((_QWORD *)this + 4) = v27;
      v28 = v27 + 8;
      v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
      v30 = (char *)v29 + v28;
      *v29 = *((_QWORD *)this + 3);
      v9 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v30;
      *((_QWORD *)this + 3) = v29;
    }
    *((_QWORD *)this + 1) = v9 + 24;
    *(_WORD *)(v9 + 16) = 232;
    *(_BYTE *)(v9 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v9, (swift::Demangle::Node *)v18, this, v25, v26);
  }
  v31 = *((_DWORD *)this + 24);
  if (!v31
    || ((v32 = v31 - 1,
         v33 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v32),
         v34 = v33[8],
         (v34 - 173) <= 0x3C)
      ? (v35 = ((1 << (v34 + 83)) & 0x100000010000010DLL) == 0)
      : (v35 = 1),
        v35
     && ((v34 - 101) <= 0x24
       ? (v36 = ((1 << (v34 - 101)) & 0x1000800001) == 0)
       : (v36 = 1),
         v36 && v34 != 347)))
  {
    v33 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v32;
  }
  v37 = swift::Demangle::Demangler::popContext(this, v13, v14, v15, v16);
  if (v17)
    v38 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, 76, v37, (swift::Demangle::Node *)v33, v17, (swift::Demangle::Node *)v9);
  else
    v38 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, 76, v37, (swift::Demangle::Node *)v33, (char *)v9);
  return setParentForOpaqueReturnTypeNodes(this, v38, (swift::Demangle::Node *)v9, v39, v40);
}

unint64_t swift::Demangle::Demangler::demangleBoundGenericType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *AnyGeneric;
  const char *v14;
  unsigned int *v15;
  uint64_t v16;
  const char *v17;
  swift::Demangle::Node *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  const void *v23[2];
  swift::Demangle::Node *v24;
  unint64_t v25;

  v6 = *((_QWORD *)this + 2);
  v7 = (char *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v7;
  if (v7)
    v8 = (unint64_t)(v7 + 32) > v6;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 2 * *((_QWORD *)this + 4);
    if (v9 <= 0x28)
      v9 = 40;
    *((_QWORD *)this + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    *v11 = *((_QWORD *)this + 3);
    v7 = (char *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = (char *)v11 + v10;
    *((_QWORD *)this + 3) = v11;
  }
  v24 = 0;
  *((_QWORD *)this + 1) = v7 + 32;
  v23[0] = v7;
  v23[1] = (const void *)0x400000000;
  v12 = 0;
  if (swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, v23, (int8x16_t **)&v24, a4, a5))
  {
    AnyGeneric = swift::Demangle::Demangler::popTypeAndGetAnyGeneric(this);
    if (AnyGeneric
      && (v15 = (unsigned int *)swift::Demangle::Demangler::demangleBoundGenericArgs(this, (unint64_t)AnyGeneric, (uint64_t)v23, 0, v14)) != 0)
    {
      v18 = (swift::Demangle::Node *)v15;
      if (v24)
        swift::Demangle::Node::addChild(v15, v24, this, v16, v17);
      v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v12;
      if (!v12 || v12 + 24 > *((_QWORD *)this + 2))
      {
        v19 = 2 * *((_QWORD *)this + 4);
        if (v19 <= 0x20)
          v19 = 32;
        *((_QWORD *)this + 4) = v19;
        v20 = v19 + 8;
        v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *v21 = *((_QWORD *)this + 3);
        v12 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v21 + v20;
        *((_QWORD *)this + 3) = v21;
      }
      *((_QWORD *)this + 1) = v12 + 24;
      *(_WORD *)(v12 + 16) = 232;
      *(_BYTE *)(v12 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v12, v18, this, v16, v17);
      v25 = v12;
      swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v25, this);
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

unint64_t swift::Demangle::Demangler::demangleDependentProtocolConformanceAssociated(swift::Demangle::Demangler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  swift::Demangle::Node *v7;
  int v8;
  unsigned int v9;
  unsigned __int16 *v10;

  v2 = (char *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
  v7 = (swift::Demangle::Node *)swift::Demangle::Demangler::popDependentAssociatedConformance(this, v3, v4, v5, v6);
  v8 = *((_DWORD *)this + 24);
  if (v8
    && (v9 = v8 - 1, v10 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v9), v10[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v9;
  }
  else
  {
    v10 = 0;
  }
  return swift::Demangle::Demangler::createWithChildren(this, 49, (swift::Demangle::Node *)v10, v7, v2);
}

unint64_t swift::Demangle::Demangler::demangleConcreteProtocolConformance(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  const char *v9;
  int8x16_t *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  swift::Demangle::Node *v15;

  v10 = swift::Demangle::Demangler::popAnyProtocolConformanceList(this, a2, a3, a4, a5);
  v11 = *((_DWORD *)this + 24);
  if (v11
    && ((v12 = v11 - 1, v8 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v12), v13 = v8[8], v13 == 184)
     || v13 == 183))
  {
    *((_DWORD *)this + 24) = v12;
    if (!v12)
      goto LABEL_9;
  }
  else
  {
    v8 = (unsigned __int16 *)swift::Demangle::Demangler::demangleRetroactiveProtocolConformanceRef(this, v6, v7, (uint64_t)v8, v9);
    v12 = *((_DWORD *)this + 24);
    if (!v12)
    {
LABEL_9:
      v15 = 0;
      return swift::Demangle::Demangler::createWithChildren(this, 26, v15, (swift::Demangle::Node *)v8, v10->i8);
    }
  }
  v14 = v12 - 1;
  v15 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v14);
  if (*((_WORD *)v15 + 8) != 232)
    goto LABEL_9;
  *((_DWORD *)this + 24) = v14;
  return swift::Demangle::Demangler::createWithChildren(this, 26, v15, (swift::Demangle::Node *)v8, v10->i8);
}

unint64_t swift::Demangle::Demangler::demangleDependentProtocolConformanceRoot(swift::Demangle::Demangler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  swift::Demangle::Node *v7;
  int v8;
  unsigned int v9;
  swift::Demangle::Node *v10;

  v2 = (char *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
  v7 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this, v3, v4, v5, v6);
  v8 = *((_DWORD *)this + 24);
  if (v8
    && (v9 = v8 - 1, v10 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v9), *((_WORD *)v10 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v9;
  }
  else
  {
    v10 = 0;
  }
  return swift::Demangle::Demangler::createWithChildren(this, 47, v10, v7, v2);
}

unint64_t swift::Demangle::Demangler::demangleDependentProtocolConformanceInherited(swift::Demangle::Demangler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  swift::Demangle::Node *v7;
  int v8;
  unsigned int v9;
  unsigned __int16 *v10;

  v2 = (char *)swift::Demangle::Demangler::demangleDependentConformanceIndex(this);
  v7 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this, v3, v4, v5, v6);
  v8 = *((_DWORD *)this + 24);
  if (v8
    && (v9 = v8 - 1, v10 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v9), v10[8] - 47 <= 2))
  {
    *((_DWORD *)this + 24) = v9;
  }
  else
  {
    v10 = 0;
  }
  return swift::Demangle::Demangler::createWithChildren(this, 48, (swift::Demangle::Node *)v10, v7, v2);
}

unint64_t swift::Demangle::Demangler::popProtocol(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  uint64_t *v13;
  unint64_t v15;
  swift::Demangle::Node *v16;
  uint64_t v17;
  const char *v18;
  swift::Demangle::Node *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
    goto LABEL_22;
  v7 = v6 - 1;
  v8 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * v7);
  v9 = *((unsigned __int16 *)v8 + 8);
  v10 = (v9 - 173);
  if (v10 > 0x3C)
  {
LABEL_14:
    if ((v9 - 101) <= 0x24 && ((1 << (v9 - 101)) & 0x1000800001) != 0)
      goto LABEL_18;
    if (v9 == 347)
    {
LABEL_20:
      *((_DWORD *)this + 24) = v7;
      return (unint64_t)v8;
    }
LABEL_22:
    v8 = 0;
    goto LABEL_23;
  }
  if (((1 << (v9 + 83)) & 0x100000010000000DLL) == 0)
  {
    if (v10 == 8)
      goto LABEL_20;
    if (v10 == 59)
    {
      *((_DWORD *)this + 24) = v7;
      v11 = *((unsigned __int8 *)v8 + 18);
      if ((v11 - 1) >= 2 && (v11 != 5 || !*((_DWORD *)v8 + 2)))
        return 0;
      v12 = 232;
      v13 = v8;
      while (v12 == 232)
      {
        if (*((unsigned __int8 *)v13 + 18) - 1 >= 2)
          v13 = (uint64_t *)*v13;
        v13 = (uint64_t *)*v13;
        v12 = *((_WORD *)v13 + 8);
      }
      if (v12 - 180 >= 2 && v12 != 347)
        return 0;
      return (unint64_t)v8;
    }
    goto LABEL_14;
  }
LABEL_18:
  *((_DWORD *)this + 24) = v7;
LABEL_23:
  v16 = swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
  v15 = 0;
  if (v8)
  {
    v19 = v16;
    if (v16)
    {
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
      }
      *((_QWORD *)this + 1) = v20 + 24;
      *(_WORD *)(v20 + 16) = 180;
      *(_BYTE *)(v20 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v20, v19, this, v17, v18);
      swift::Demangle::Node::addChild((unsigned int *)v20, (swift::Demangle::Node *)v8, this, v25, v26);
      v15 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v15;
      if (!v15 || v15 + 24 > *((_QWORD *)this + 2))
      {
        v29 = 2 * *((_QWORD *)this + 4);
        if (v29 <= 0x20)
          v29 = 32;
        *((_QWORD *)this + 4) = v29;
        v30 = v29 + 8;
        v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
        *v31 = *((_QWORD *)this + 3);
        v15 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v31 + v30;
        *((_QWORD *)this + 3) = v31;
      }
      *((_QWORD *)this + 1) = v15 + 24;
      *(_WORD *)(v15 + 16) = 232;
      *(_BYTE *)(v15 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v15, (swift::Demangle::Node *)v20, this, v27, v28);
    }
  }
  return v15;
}

unint64_t swift::Demangle::Demangler::demanglePackProtocolConformance(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  uint64_t v7;
  const char *v8;
  swift::Demangle::Node *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;

  v6 = swift::Demangle::Demangler::popAnyProtocolConformanceList(this, a2, a3, a4, a5);
  if (!v6)
    return 0;
  v9 = (swift::Demangle::Node *)v6;
  v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v10;
  if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
  {
    v11 = 2 * *((_QWORD *)this + 4);
    if (v11 <= 0x20)
      v11 = 32;
    *((_QWORD *)this + 4) = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    v14 = (char *)v13 + v12;
    *v13 = *((_QWORD *)this + 3);
    v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v14;
    *((_QWORD *)this + 3) = v13;
  }
  *((_QWORD *)this + 1) = v10 + 24;
  *(_WORD *)(v10 + 16) = 27;
  *(_BYTE *)(v10 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v10, v9, this, v7, v8);
  return v10;
}

unsigned int *swift::Demangle::Demangler::popProtocolConformance(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  const char *v14;
  swift::Demangle::Node *v15;
  int v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  unsigned int *v38;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
  {
    v9 = 0;
LABEL_10:
    v11 = 0;
    goto LABEL_12;
  }
  v7 = v6 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(swift::Demangle::Node **)(v8 + 8 * (v6 - 1));
  if (*((_WORD *)v9 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7;
    if (v6 == 1)
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    v7 = *((_DWORD *)this + 24);
  }
  v10 = v7 - 1;
  v11 = *(_QWORD *)(v8 + 8 * v10);
  v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 != 153)
  {
    if (v12 == 101)
    {
      *((_DWORD *)this + 24) = v10;
      v11 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v11, 153, a4, a5);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v10;
LABEL_12:
  v15 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
  v16 = *((_DWORD *)this + 24);
  if (v16)
  {
    v17 = 0;
    v18 = v16 - 1;
    v19 = *((_QWORD *)this + 11);
    v20 = *(unsigned __int16 **)(v19 + 8 * (v16 - 1));
    v21 = v20[8];
    if (v21 == 232)
      goto LABEL_18;
    if (v21 == 101)
    {
      *((_DWORD *)this + 24) = v18;
      if (v16 == 1)
      {
        v22 = 0;
        if (!v9)
          goto LABEL_37;
        goto LABEL_25;
      }
      v17 = v20;
      --v16;
    }
    v18 = v16 - 1;
    v20 = *(unsigned __int16 **)(v19 + 8 * (v16 - 1));
    if (v20[8] == 232)
    {
LABEL_18:
      *((_DWORD *)this + 24) = v18;
      v22 = (unint64_t)v20;
      v20 = v17;
      if (!v9)
        goto LABEL_37;
    }
    else
    {
      v22 = 0;
      v20 = v17;
      if (!v9)
        goto LABEL_37;
    }
  }
  else
  {
    v22 = 0;
    v20 = 0;
    if (!v9)
      goto LABEL_37;
  }
LABEL_25:
  if (v22)
  {
    v23 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v23;
    if (!v23 || v23 + 24 > *((_QWORD *)this + 2))
    {
      v24 = 2 * *((_QWORD *)this + 4);
      if (v24 <= 0x20)
        v24 = 32;
      *((_QWORD *)this + 4) = v24;
      v25 = v24 + 8;
      v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      v27 = (char *)v26 + v25;
      *v26 = *((_QWORD *)this + 3);
      v23 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v27;
      *((_QWORD *)this + 3) = v26;
    }
    *((_QWORD *)this + 1) = v23 + 24;
    *(_WORD *)(v23 + 16) = 44;
    *(_BYTE *)(v23 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v23, v9, this, v13, v14);
    swift::Demangle::Node::addChild((unsigned int *)v23, (swift::Demangle::Node *)v22, this, v28, v29);
    v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v22;
    if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
    {
      v32 = 2 * *((_QWORD *)this + 4);
      if (v32 <= 0x20)
        v32 = 32;
      *((_QWORD *)this + 4) = v32;
      v33 = v32 + 8;
      v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *v34 = *((_QWORD *)this + 3);
      v22 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v34 + v33;
      *((_QWORD *)this + 3) = v34;
    }
    *((_QWORD *)this + 1) = v22 + 24;
    *(_WORD *)(v22 + 16) = 232;
    *(_BYTE *)(v22 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v22, (swift::Demangle::Node *)v23, this, v30, v31);
  }
LABEL_37:
  v35 = (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, 182, (swift::Demangle::Node *)v22, v15, (char *)v11);
  v38 = v35;
  if (v20 && v35)
    swift::Demangle::Node::addChild(v35, (swift::Demangle::Node *)v20, this, v36, v37);
  return v38;
}

_WORD *swift::Demangle::Demangler::demangleIdentifier(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  char *v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t v37;
  const void *p_p;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  const void *v65;
  void *v66;
  const void *v67;
  _WORD *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v73;
  int v74;
  int v75;
  const void *v76;
  char v77;
  char *__src;
  char *__srca;
  char *__srcb;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  void *__p;
  size_t v85;
  uint64_t v86;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (v2 >= v1)
    return 0;
  v4 = *((_QWORD *)this + 7);
  v5 = *(unsigned __int8 *)(v4 + v2);
  if ((v5 - 48) > 9)
    return 0;
  if (v5 == 48)
  {
    *((_QWORD *)this + 9) = v2 + 1;
    if (v2 + 1 < v1 && *(_BYTE *)(v4 + v2 + 1) == 48)
    {
      v6 = 0;
      v2 += 2;
      *((_QWORD *)this + 9) = v2;
      v75 = 1;
    }
    else
    {
      v75 = 0;
      v6 = 1;
      ++v2;
    }
  }
  else
  {
    v75 = 0;
    v6 = 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    if ((v6 & 1) == 0)
    {
      v10 = 0;
      goto LABEL_40;
    }
    do
    {
      v2 = *((_QWORD *)this + 9);
      if (v2 >= *((_QWORD *)this + 8) || (v11 = *((_QWORD *)this + 7), (*(_BYTE *)(v11 + v2) & 0xDFu) - 65 > 0x19))
      {
        v10 = 1;
        goto LABEL_40;
      }
      *((_QWORD *)this + 9) = v2 + 1;
      v12 = *(char *)(v11 + v2);
      v13 = v12 - 97;
      if ((v12 - 97) >= 0x1A)
        v14 = -65;
      else
        v14 = -97;
      v15 = v14 + v12;
      if (v15 >= *((_DWORD *)this + 134))
        return 0;
      v16 = (char *)this + 16 * v15;
      v18 = (const void *)*((_QWORD *)v16 + 15);
      v17 = *((_QWORD *)v16 + 16);
      v19 = v8;
      v20 = v7;
      if (v17 + v8 > v7)
      {
        __src = v9;
        v21 = &v9[v7];
        v9 = (char *)*((_QWORD *)this + 1);
        if (v21 == v9)
        {
          v23 = &v21[v17];
          v22 = *((_QWORD *)this + 2);
          if ((unint64_t)v23 <= v22)
          {
            v24 = v7;
            *((_QWORD *)this + 1) = v23;
            LODWORD(v26) = v17;
            v9 = __src;
LABEL_13:
            v7 = v24 + v26;
            goto LABEL_14;
          }
        }
        else
        {
          v22 = *((_QWORD *)this + 2);
        }
        v81 = v8;
        v24 = v7;
        v25 = 2 * v7;
        if (v17 > v25)
          v25 = v17;
        if (v25 <= 4)
          v26 = 4;
        else
          v26 = v25;
        v27 = v26 + v20;
        if (!v9 || (unint64_t)&v9[v27] > v22)
        {
          v28 = 2 * *((_QWORD *)this + 4);
          if (v28 <= v27 + 1)
            v28 = v27 + 1;
          *((_QWORD *)this + 4) = v28;
          v76 = v18;
          v29 = v28 + 8;
          v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
          *v30 = *((_QWORD *)this + 3);
          v9 = (char *)(v30 + 1);
          v31 = (char *)v30 + v29;
          v18 = v76;
          *((_QWORD *)this + 2) = v31;
          *((_QWORD *)this + 3) = v30;
        }
        *((_QWORD *)this + 1) = &v9[v27];
        if (v24)
          memcpy(v9, __src, v20);
        v8 = v81;
        goto LABEL_13;
      }
LABEL_14:
      memcpy(&v9[v19], v18, v17);
      v8 += v17;
    }
    while (v13 < 0x1Au);
    v10 = 0;
    v2 = *((_QWORD *)this + 9);
LABEL_40:
    v32 = *((_QWORD *)this + 8);
    if (v2 >= v32)
      return 0;
    v33 = *((_QWORD *)this + 7);
    if (*(_BYTE *)(v33 + v2) == 48)
    {
      *((_QWORD *)this + 9) = v2 + 1;
      break;
    }
    if (*(unsigned __int8 *)(v33 + v2) - 48 > 9)
      return 0;
    LODWORD(v34) = 0;
    while (1)
    {
      v35 = *(unsigned __int8 *)(v33 + v2);
      if ((v35 - 48) > 9)
        break;
      v36 = v35 + 10 * v34 - 48;
      if (v36 < (int)v34)
        return 0;
      *((_QWORD *)this + 9) = ++v2;
      LODWORD(v34) = v36;
      if (v32 == v2)
      {
        v2 = v32;
        LODWORD(v34) = v36;
        break;
      }
    }
    if ((int)v34 < 1)
      return 0;
    v77 = v10;
    if (!v75)
    {
      v37 = v34;
      if (v2 + v34 <= v32)
      {
        v42 = v8;
        if (v34 + (unint64_t)v8 > v7)
        {
          __srca = v9;
          v43 = &v9[v7];
          v9 = (char *)*((_QWORD *)this + 1);
          if (v43 != v9)
          {
            v44 = *((_QWORD *)this + 2);
            goto LABEL_70;
          }
          v46 = &v43[v34];
          v44 = *((_QWORD *)this + 2);
          if ((unint64_t)v46 <= v44)
          {
            *((_QWORD *)this + 1) = v46;
            v51 = v34;
            v9 = __srca;
          }
          else
          {
LABEL_70:
            v82 = v8;
            LODWORD(v47) = 2 * v7;
            if (v34 > 2 * v7)
              LODWORD(v47) = v34;
            if (v47 <= 4)
              v47 = 4;
            else
              v47 = v47;
            v74 = v47;
            v48 = v47 + v7;
            if (!v9 || (unint64_t)&v9[v48] > v44)
            {
              v49 = 2 * *((_QWORD *)this + 4);
              if (v49 <= v48 + 1)
                v49 = v48 + 1;
              *((_QWORD *)this + 4) = v49;
              v73 = v49 + 8;
              v50 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
              *v50 = *((_QWORD *)this + 3);
              v9 = (char *)(v50 + 1);
              *((_QWORD *)this + 2) = (char *)v50 + v73;
              *((_QWORD *)this + 3) = v50;
            }
            *((_QWORD *)this + 1) = &v9[v48];
            if (v7)
              memcpy(v9, __srca, v7);
            v8 = v82;
            v51 = v74;
          }
          v7 += v51;
        }
        v52 = v33 + v2;
        memcpy(&v9[v42], (const void *)(v33 + v2), v34);
        v53 = 0;
        v54 = -1;
        while (2)
        {
          if (v53 >= v34)
          {
            v57 = 0;
            if ((v54 & 0x80000000) == 0)
              goto LABEL_99;
LABEL_86:
            if ((v57 - 58) < 0xFFFFFFF6 && v57 != 95 && v57 != 0)
              v54 = v53;
          }
          else
          {
            v57 = *(unsigned __int8 *)(v52 + v53);
            if ((v54 & 0x80000000) != 0)
              goto LABEL_86;
LABEL_99:
            if (!v57
              || v57 == 95
              || (v57 - 65) <= 0x19
              && *(unsigned __int8 *)(v52 + v53 - 1) - 91 <= 0xFFFFFFE5)
            {
              if ((int)(v53 - v54) >= 2)
              {
                v58 = *((int *)this + 134);
                if ((int)v58 <= 25)
                {
                  *((_DWORD *)this + 134) = v58 + 1;
                  v59 = (char *)this + 16 * v58;
                  *((_QWORD *)v59 + 15) = v52 + v54;
                  *((_QWORD *)v59 + 16) = v53 - v54;
                }
              }
              v54 = -1;
              goto LABEL_86;
            }
          }
          if ((_DWORD)v34 + 1 == ++v53)
          {
            v45 = v77;
            goto LABEL_124;
          }
          continue;
        }
      }
      return 0;
    }
    if (v2 < v32 && *(_BYTE *)(v33 + v2) == 95)
      *((_QWORD *)this + 9) = ++v2;
    v37 = v34;
    if (v2 + v34 > v32)
      return 0;
    __p = 0;
    v85 = 0;
    v86 = 0;
    if (!swift::Punycode::decodePunycodeUTF8((unsigned __int8 *)(v33 + v2), v34, (uint64_t)&__p))
    {
      if (v86 < 0)
        operator delete(__p);
      return 0;
    }
    if (v86 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v86 >= 0)
      v34 = HIBYTE(v86);
    else
      v34 = v85;
    v39 = v8;
    if (v34 + v8 <= v7)
    {
      v45 = v77;
    }
    else
    {
      v40 = (char *)*((_QWORD *)this + 1);
      if (&v9[v7] != v40)
      {
        v41 = *((_QWORD *)this + 2);
        goto LABEL_108;
      }
      v60 = &v9[v7 + v34];
      v41 = *((_QWORD *)this + 2);
      if ((unint64_t)v60 <= v41)
      {
        *((_QWORD *)this + 1) = v60;
        LODWORD(v62) = v34;
      }
      else
      {
LABEL_108:
        v83 = v8;
        v61 = 2 * v7;
        if (v34 > v61)
          v61 = v34;
        if (v61 <= 4)
          v62 = 4;
        else
          v62 = v61;
        v63 = v62 + v7;
        if (!v40 || (unint64_t)&v40[v63] > v41)
        {
          v64 = 2 * *((_QWORD *)this + 4);
          if (v64 <= v63 + 1)
            v64 = v63 + 1;
          *((_QWORD *)this + 4) = v64;
          __srcb = (char *)(v64 + 8);
          v65 = p_p;
          v66 = malloc_type_malloc(v64 + 8, 0xD0263BC5uLL);
          p_p = v65;
          *(_QWORD *)v66 = *((_QWORD *)this + 3);
          v40 = (char *)v66 + 8;
          *((_QWORD *)this + 2) = &__srcb[(_QWORD)v66];
          *((_QWORD *)this + 3) = v66;
        }
        *((_QWORD *)this + 1) = &v40[v63];
        if (v7)
        {
          v67 = p_p;
          memcpy(v40, v9, v7);
          p_p = v67;
        }
        v9 = v40;
        v8 = v83;
      }
      v45 = v77;
      v7 += v62;
    }
    memcpy(&v9[v39], p_p, v34);
    if (SHIBYTE(v86) < 0)
      operator delete(__p);
LABEL_124:
    v8 += v34;
    v2 = *((_QWORD *)this + 9) + v37;
    *((_QWORD *)this + 9) = v2;
    v6 = 1;
  }
  while ((v45 & 1) != 0);
  if (!v8)
    return 0;
  v68 = (_WORD *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v68;
  if (!v68 || (unint64_t)(v68 + 12) > *((_QWORD *)this + 2))
  {
    v69 = 2 * *((_QWORD *)this + 4);
    if (v69 <= 0x20)
      v69 = 32;
    *((_QWORD *)this + 4) = v69;
    v70 = v69 + 8;
    v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
    *v71 = *((_QWORD *)this + 3);
    v68 = (_WORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = (char *)v71 + v70;
    *((_QWORD *)this + 3) = v71;
  }
  *((_QWORD *)this + 1) = v68 + 12;
  v68[8] = 101;
  *((_BYTE *)v68 + 18) = 3;
  *(_QWORD *)v68 = v9;
  *((_QWORD *)v68 + 1) = v8;
  __p = v68;
  swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&__p, this);
  return v68;
}

unint64_t swift::Demangle::Demangler::demangleImplFunctionType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  unsigned int v15;
  swift::Demangle::Node *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  const char *v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  size_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  size_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  swift::Demangle::Node *v89;
  int v90;
  const char *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  const char *v106;
  swift::Demangle::Node *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  const char *v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  char *v121;
  size_t v122;
  uint64_t v123;
  const char *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  const char *v133;
  swift::Demangle::Node *v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  char *v139;
  size_t v140;
  uint64_t v141;
  const char *v142;
  unint64_t v143;
  const char *v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  swift::Demangle::Node *v148;
  swift::Demangle::Node *v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  int v153;
  unsigned int v154;
  swift::Demangle::Node *v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v165;
  int v166;
  unsigned int *v167;
  swift::Demangle::Node *v168;
  swift::Demangle::Node **v169;
  uint64_t v170;

  v6 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *v9 = *((_QWORD *)this + 3);
    v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v9 + v8;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 115;
  *(_BYTE *)(v6 + 18) = 0;
  v11 = *((_QWORD *)this + 8);
  v10 = *((_QWORD *)this + 9);
  if (v10 < v11 && *(_BYTE *)(*((_QWORD *)this + 7) + v10) == 115)
  {
    *((_QWORD *)this + 9) = v10 + 1;
    v169 = 0;
    v170 = 0;
    v168 = 0;
    if (!swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v169, (int8x16_t **)&v168, a4, a5))return 0;
    v14 = *((_DWORD *)this + 24);
    if (!v14)
      return 0;
    v15 = v14 - 1;
    v16 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v15);
    if (*((_WORD *)v16 + 8) != 43)
      return 0;
    *((_DWORD *)this + 24) = v15;
    v17 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v17;
    if (!v17 || v17 + 24 > *((_QWORD *)this + 2))
    {
      v18 = 2 * *((_QWORD *)this + 4);
      if (v18 <= 0x20)
        v18 = 32;
      *((_QWORD *)this + 4) = v18;
      v19 = v18 + 8;
      v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      *v20 = *((_QWORD *)this + 3);
      v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v20 + v19;
      *((_QWORD *)this + 3) = v20;
    }
    *((_QWORD *)this + 1) = v17 + 24;
    *(_WORD *)(v17 + 16) = 119;
    *(_BYTE *)(v17 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v17, v16, this, v12, v13);
    swift::Demangle::Node::addChild((unsigned int *)v17, *v169, this, v21, v22);
    if (v168)
      swift::Demangle::Node::addChild((unsigned int *)v17, v168, this, v23, v24);
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v17, this, v23, v24);
    v11 = *((_QWORD *)this + 8);
    v10 = *((_QWORD *)this + 9);
  }
  if (v10 < v11 && *(_BYTE *)(*((_QWORD *)this + 7) + v10) == 73)
  {
    *((_QWORD *)this + 9) = v10 + 1;
    v169 = 0;
    v170 = 0;
    v168 = 0;
    if (!swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v169, (int8x16_t **)&v168, a4, a5))return 0;
    v27 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v27;
    if (!v27 || v27 + 24 > *((_QWORD *)this + 2))
    {
      v28 = 2 * *((_QWORD *)this + 4);
      if (v28 <= 0x20)
        v28 = 32;
      *((_QWORD *)this + 4) = v28;
      v29 = v28 + 8;
      v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      *v30 = *((_QWORD *)this + 3);
      v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v30 + v29;
      *((_QWORD *)this + 3) = v30;
    }
    *((_QWORD *)this + 1) = v27 + 24;
    *(_WORD *)(v27 + 16) = 116;
    *(_BYTE *)(v27 + 18) = 0;
    if ((_DWORD)v170 != 1)
      return 0;
    swift::Demangle::Node::addChild((unsigned int *)v27, *v169, this, v25, v26);
    if (v168)
      swift::Demangle::Node::addChild((unsigned int *)v27, v168, this, v31, v32);
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v27, this, v31, v32);
  }
  v33 = *((_DWORD *)this + 24);
  if (v33 && (v34 = v33 - 1, v35 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v34), *(_WORD *)(v35 + 16) == 43))
  {
    *((_DWORD *)this + 24) = v34;
    v36 = *((_QWORD *)this + 9);
    if (v36 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v36) == 80)
    {
      *((_QWORD *)this + 9) = v36 + 1;
      v35 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v35, 46, a4, a5);
    }
  }
  else
  {
    v35 = 0;
  }
  v38 = *((_QWORD *)this + 8);
  v37 = *((_QWORD *)this + 9);
  if (v37 < v38 && *(_BYTE *)(*((_QWORD *)this + 7) + v37) == 101)
  {
    *((_QWORD *)this + 9) = v37 + 1;
    v39 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v39;
    if (!v39 || v39 + 24 > *((_QWORD *)this + 2))
    {
      v40 = 2 * *((_QWORD *)this + 4);
      if (v40 <= 0x20)
        v40 = 32;
      *((_QWORD *)this + 4) = v40;
      v41 = v40 + 8;
      v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
      *v42 = *((_QWORD *)this + 3);
      v39 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v42 + v41;
      *((_QWORD *)this + 3) = v42;
    }
    *((_QWORD *)this + 1) = v39 + 24;
    *(_WORD *)(v39 + 16) = 105;
    *(_BYTE *)(v39 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v39, this, a4, a5);
    v38 = *((_QWORD *)this + 8);
    v37 = *((_QWORD *)this + 9);
  }
  if (v37 < v38 && *(_BYTE *)(*((_QWORD *)this + 7) + v37) == 65)
  {
    *((_QWORD *)this + 9) = v37 + 1;
    v43 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v43;
    if (!v43 || v43 + 24 > *((_QWORD *)this + 2))
    {
      v44 = 2 * *((_QWORD *)this + 4);
      if (v44 <= 0x20)
        v44 = 32;
      *((_QWORD *)this + 4) = v44;
      v45 = v44 + 8;
      v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
      *v46 = *((_QWORD *)this + 3);
      v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v46 + v45;
      *((_QWORD *)this + 3) = v46;
    }
    *((_QWORD *)this + 1) = v43 + 24;
    *(_WORD *)(v43 + 16) = 108;
    *(_BYTE *)(v43 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v43, this, a4, a5);
    v38 = *((_QWORD *)this + 8);
    v37 = *((_QWORD *)this + 9);
  }
  if (v37 >= v38)
    v47 = 0;
  else
    v47 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v37);
  HIDWORD(v48) = v47;
  LODWORD(v48) = (v47 << 24) - 1677721600;
  v49 = (v48 >> 25);
  if (v49 <= 7 && ((1 << v49) & 0x93) != 0)
  {
    if (v37 >= v38)
    {
      v50 = 0;
    }
    else
    {
      *((_QWORD *)this + 9) = v37 + 1;
      v50 = *(_BYTE *)(*((_QWORD *)this + 7) + v37);
    }
    v51 = v50;
    v52 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v52;
    if (!v52 || v52 + 24 > *((_QWORD *)this + 2))
    {
      v53 = 2 * *((_QWORD *)this + 4);
      if (v53 <= 0x20)
        v53 = 32;
      *((_QWORD *)this + 4) = v53;
      v54 = v53 + 8;
      v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
      *v55 = *((_QWORD *)this + 3);
      v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v55 + v54;
      *((_QWORD *)this + 3) = v55;
    }
    *((_QWORD *)this + 1) = v52 + 24;
    *(_WORD *)(v52 + 16) = 107;
    *(_BYTE *)(v52 + 18) = 4;
    *(_QWORD *)v52 = v51;
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v52, this, a4, a5);
    v38 = *((_QWORD *)this + 8);
    v37 = *((_QWORD *)this + 9);
  }
  if (v37 >= v38)
    return 0;
  v56 = 0;
  *((_QWORD *)this + 9) = v37 + 1;
  v57 = "@callee_unowned";
  switch(*(_BYTE *)(*((_QWORD *)this + 7) + v37))
  {
    case 'g':
      v57 = "@callee_guaranteed";
      goto LABEL_72;
    case 't':
      v57 = "@convention(thin)";
      goto LABEL_72;
    case 'x':
      v57 = "@callee_owned";
      goto LABEL_72;
    case 'y':
LABEL_72:
      v58 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v58;
      v167 = (unsigned int *)v6;
      if (!v58 || v58 + 24 > *((_QWORD *)this + 2))
      {
        v59 = 2 * *((_QWORD *)this + 4);
        if (v59 <= 0x20)
          v59 = 32;
        *((_QWORD *)this + 4) = v59;
        v60 = v59 + 8;
        v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
        *v61 = *((_QWORD *)this + 3);
        v58 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
        v62 = (char *)v61 + v60;
        v6 = (unint64_t)v167;
        *((_QWORD *)this + 2) = v62;
        *((_QWORD *)this + 3) = v61;
      }
      *((_QWORD *)this + 1) = v58 + 24;
      v63 = strlen(v57);
      *(_WORD *)(v58 + 16) = 106;
      *(_BYTE *)(v58 + 18) = 3;
      *(_QWORD *)v58 = v57;
      *(_QWORD *)(v58 + 8) = v63;
      swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v58, this, v64, v65);
      v68 = *((_QWORD *)this + 8);
      v69 = *((_QWORD *)this + 9);
      if (v69 < v68)
      {
        v70 = v69 + 1;
        *((_QWORD *)this + 9) = v69 + 1;
        v71 = *((_QWORD *)this + 7);
        v72 = 0;
        v73 = "block";
        switch(*(_BYTE *)(v71 + v69))
        {
          case 'B':
            goto LABEL_89;
          case 'C':
            v72 = 0;
            goto LABEL_80;
          case 'K':
            v72 = 0;
            v73 = "closure";
            goto LABEL_89;
          case 'M':
            v72 = 0;
            v73 = "method";
            goto LABEL_89;
          case 'O':
            v72 = 0;
            v73 = "objc_method";
            goto LABEL_89;
          case 'W':
            v72 = 0;
            v73 = "witness_method";
            goto LABEL_89;
          case 'z':
            if (v70 >= v68)
              goto LABEL_220;
            v165 = v69 + 2;
            *((_QWORD *)this + 9) = v165;
            v166 = *(char *)(v71 + v70);
            if (v166 == 66)
            {
              v72 = 1;
            }
            else
            {
              v70 = v165;
              if (v166 != 67)
              {
LABEL_220:
                v74 = v70 - 2;
                goto LABEL_83;
              }
              v72 = 1;
LABEL_80:
              v73 = "c";
            }
LABEL_89:
            v75 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v75;
            if (!v75 || (v76 = *((_QWORD *)this + 2), v75 + 24 > v76))
            {
              v77 = 2 * *((_QWORD *)this + 4);
              if (v77 <= 0x20)
                v77 = 32;
              *((_QWORD *)this + 4) = v77;
              v78 = v77 + 8;
              v79 = malloc_type_malloc(v77 + 8, 0xD0263BC5uLL);
              *v79 = *((_QWORD *)this + 3);
              v75 = ((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFFFF8;
              v76 = (unint64_t)v79 + v78;
              *((_QWORD *)this + 2) = (char *)v79 + v78;
              *((_QWORD *)this + 3) = v79;
            }
            *(_WORD *)(v75 + 16) = 113;
            *(_BYTE *)(v75 + 18) = 0;
            v80 = (v75 + 31) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v80;
            if (!v80 || v80 + 24 > v76)
            {
              v81 = 2 * *((_QWORD *)this + 4);
              if (v81 <= 0x20)
                v81 = 32;
              *((_QWORD *)this + 4) = v81;
              v82 = v81 + 8;
              v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
              *v83 = *((_QWORD *)this + 3);
              v80 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v83 + v82;
              *((_QWORD *)this + 3) = v83;
            }
            *((_QWORD *)this + 1) = v80 + 24;
            v84 = strlen(v73);
            *(_WORD *)(v80 + 16) = 114;
            *(_BYTE *)(v80 + 18) = 3;
            *(_QWORD *)v80 = v73;
            *(_QWORD *)(v80 + 8) = v84;
            swift::Demangle::Node::addChild((unsigned int *)v75, (swift::Demangle::Node *)v80, this, v85, v86);
            if (v72)
            {
              v89 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleClangType(this);
              if (v89)
                swift::Demangle::Node::addChild((unsigned int *)v75, v89, this, v87, v88);
            }
            v6 = (unint64_t)v167;
            swift::Demangle::Node::addChild(v167, (swift::Demangle::Node *)v75, this, v87, v88);
            v68 = *((_QWORD *)this + 8);
            v74 = *((_QWORD *)this + 9);
            if (v74 < v68)
              goto LABEL_103;
            goto LABEL_113;
          default:
            goto LABEL_82;
        }
      }
      v70 = *((_QWORD *)this + 9);
LABEL_82:
      v74 = v70 - 1;
LABEL_83:
      *((_QWORD *)this + 9) = v74;
      if (v74 >= v68)
        goto LABEL_113;
LABEL_103:
      v90 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v74);
      if (v90 == 65)
      {
        v91 = "@yield_once";
      }
      else
      {
        if (v90 != 71)
          goto LABEL_113;
        v91 = "@yield_many";
      }
      *((_QWORD *)this + 9) = v74 + 1;
      v92 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v92;
      if (!v92 || v92 + 24 > *((_QWORD *)this + 2))
      {
        v93 = 2 * *((_QWORD *)this + 4);
        if (v93 <= 0x20)
          v93 = 32;
        *((_QWORD *)this + 4) = v93;
        v94 = v93 + 8;
        v95 = malloc_type_malloc(v93 + 8, 0xD0263BC5uLL);
        *v95 = *((_QWORD *)this + 3);
        v92 = ((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v95 + v94;
        *((_QWORD *)this + 3) = v95;
      }
      *((_QWORD *)this + 1) = v92 + 24;
      *(_WORD *)(v92 + 16) = 112;
      *(_BYTE *)(v92 + 18) = 3;
      *(_QWORD *)v92 = v91;
      *(_QWORD *)(v92 + 8) = 11;
      swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v92, this, v66, v67);
      v68 = *((_QWORD *)this + 8);
      v74 = *((_QWORD *)this + 9);
LABEL_113:
      if (v74 < v68 && *(_BYTE *)(*((_QWORD *)this + 7) + v74) == 104)
      {
        *((_QWORD *)this + 9) = v74 + 1;
        v96 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v96;
        if (!v96 || v96 + 24 > *((_QWORD *)this + 2))
        {
          v97 = 2 * *((_QWORD *)this + 4);
          if (v97 <= 0x20)
            v97 = 32;
          *((_QWORD *)this + 4) = v97;
          v98 = v97 + 8;
          v99 = malloc_type_malloc(v97 + 8, 0xD0263BC5uLL);
          *v99 = *((_QWORD *)this + 3);
          v96 = ((unint64_t)v99 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v99 + v98;
          *((_QWORD *)this + 3) = v99;
        }
        *((_QWORD *)this + 1) = v96 + 24;
        *(_WORD *)(v96 + 16) = 112;
        *(_BYTE *)(v96 + 18) = 3;
        *(_QWORD *)v96 = "@Sendable";
        *(_QWORD *)(v96 + 8) = 9;
        swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v96, this, v66, v67);
        v68 = *((_QWORD *)this + 8);
        v74 = *((_QWORD *)this + 9);
      }
      if (v74 < v68 && *(_BYTE *)(*((_QWORD *)this + 7) + v74) == 72)
      {
        *((_QWORD *)this + 9) = v74 + 1;
        v100 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v100;
        if (!v100 || v100 + 24 > *((_QWORD *)this + 2))
        {
          v101 = 2 * *((_QWORD *)this + 4);
          if (v101 <= 0x20)
            v101 = 32;
          *((_QWORD *)this + 4) = v101;
          v102 = v101 + 8;
          v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
          *v103 = *((_QWORD *)this + 3);
          v100 = ((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v103 + v102;
          *((_QWORD *)this + 3) = v103;
        }
        *((_QWORD *)this + 1) = v100 + 24;
        *(_WORD *)(v100 + 16) = 112;
        *(_BYTE *)(v100 + 18) = 3;
        *(_QWORD *)v100 = "@async";
        *(_QWORD *)(v100 + 8) = 6;
        swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v100, this, v66, v67);
      }
      if (v35)
        swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v35, this, v66, v67);
      v104 = swift::Demangle::Demangler::demangleImplParamConvention(this, 118);
      if (v104)
      {
        v107 = (swift::Demangle::Node *)v104;
        v108 = 0;
        do
        {
          swift::Demangle::Node::addChild((unsigned int *)v6, v107, this, v105, v106);
          v115 = *((_QWORD *)this + 9);
          v116 = (const char *)&unk_20AA50335;
          if (v115 < *((_QWORD *)this + 8))
          {
            v116 = (const char *)&unk_20AA50335;
            if (*(_BYTE *)(*((_QWORD *)this + 7) + v115) == 119)
            {
              *((_QWORD *)this + 9) = v115 + 1;
              v116 = "@noDerivative";
            }
          }
          v117 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v117;
          if (!v117 || v117 + 24 > *((_QWORD *)this + 2))
          {
            v118 = 2 * *((_QWORD *)this + 4);
            if (v118 <= 0x20)
              v118 = 32;
            *((_QWORD *)this + 4) = v118;
            v119 = v118 + 8;
            v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
            *v120 = *((_QWORD *)this + 3);
            v117 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
            v121 = (char *)v120 + v119;
            v6 = (unint64_t)v167;
            *((_QWORD *)this + 2) = v121;
            *((_QWORD *)this + 3) = v120;
          }
          *((_QWORD *)this + 1) = v117 + 24;
          v122 = strlen(v116);
          *(_WORD *)(v117 + 16) = 110;
          *(_BYTE *)(v117 + 18) = 3;
          *(_QWORD *)v117 = v116;
          *(_QWORD *)(v117 + 8) = v122;
          swift::Demangle::Node::addChild((unsigned int *)v107, (swift::Demangle::Node *)v117, this, v123, v124);
          v125 = *((_QWORD *)this + 9);
          if (v125 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v125) == 84)
          {
            *((_QWORD *)this + 9) = v125 + 1;
            v114 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v114;
            if (!v114 || v114 + 24 > *((_QWORD *)this + 2))
            {
              v109 = 2 * *((_QWORD *)this + 4);
              if (v109 <= 0x20)
                v109 = 32;
              *((_QWORD *)this + 4) = v109;
              v110 = v109 + 8;
              v111 = malloc_type_malloc(v109 + 8, 0xD0263BC5uLL);
              *v111 = *((_QWORD *)this + 3);
              v114 = ((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v111 + v110;
              *((_QWORD *)this + 3) = v111;
            }
            *((_QWORD *)this + 1) = v114 + 24;
            *(_WORD *)(v114 + 16) = 111;
            *(_BYTE *)(v114 + 18) = 3;
            *(_QWORD *)v114 = "sending";
            *(_QWORD *)(v114 + 8) = 7;
            swift::Demangle::Node::addChild((unsigned int *)v107, (swift::Demangle::Node *)v114, this, v112, v113);
          }
          ++v108;
          v107 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplParamConvention(this, 118);
        }
        while (v107);
      }
      else
      {
        v108 = 0;
      }
      v126 = *((_QWORD *)this + 9);
      if (v126 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v126) == 84)
      {
        *((_QWORD *)this + 9) = v126 + 1;
        v127 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v127;
        if (!v127 || v127 + 24 > *((_QWORD *)this + 2))
        {
          v128 = 2 * *((_QWORD *)this + 4);
          if (v128 <= 0x20)
            v128 = 32;
          *((_QWORD *)this + 4) = v128;
          v129 = v128 + 8;
          v130 = malloc_type_malloc(v128 + 8, 0xD0263BC5uLL);
          *v130 = *((_QWORD *)this + 3);
          v127 = ((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v130 + v129;
          *((_QWORD *)this + 3) = v130;
        }
        *((_QWORD *)this + 1) = v127 + 24;
        *(_WORD *)(v127 + 16) = 109;
        *(_BYTE *)(v127 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v127, this, v105, v106);
      }
      v131 = swift::Demangle::Demangler::demangleImplResultConvention(this, 120);
      if (v131)
      {
        v134 = (swift::Demangle::Node *)v131;
        do
        {
          if (v6)
            swift::Demangle::Node::addChild((unsigned int *)v6, v134, this, v132, v133);
          v143 = *((_QWORD *)this + 9);
          v144 = (const char *)&unk_20AA50335;
          if (v143 < *((_QWORD *)this + 8))
          {
            v144 = (const char *)&unk_20AA50335;
            if (*(_BYTE *)(*((_QWORD *)this + 7) + v143) == 119)
            {
              *((_QWORD *)this + 9) = v143 + 1;
              v144 = "@noDerivative";
            }
          }
          v138 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v138;
          if (!v138 || v138 + 24 > *((_QWORD *)this + 2))
          {
            v135 = 2 * *((_QWORD *)this + 4);
            if (v135 <= 0x20)
              v135 = 32;
            *((_QWORD *)this + 4) = v135;
            v136 = v135 + 8;
            v137 = malloc_type_malloc(v135 + 8, 0xD0263BC5uLL);
            *v137 = *((_QWORD *)this + 3);
            v138 = ((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8;
            v139 = (char *)v137 + v136;
            v6 = (unint64_t)v167;
            *((_QWORD *)this + 2) = v139;
            *((_QWORD *)this + 3) = v137;
          }
          *((_QWORD *)this + 1) = v138 + 24;
          v140 = strlen(v144);
          *(_WORD *)(v138 + 16) = 110;
          *(_BYTE *)(v138 + 18) = 3;
          *(_QWORD *)v138 = v144;
          *(_QWORD *)(v138 + 8) = v140;
          swift::Demangle::Node::addChild((unsigned int *)v134, (swift::Demangle::Node *)v138, this, v141, v142);
          ++v108;
          v134 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplResultConvention(this, 120);
        }
        while (v134);
      }
      v146 = *((_QWORD *)this + 8);
      v145 = *((_QWORD *)this + 9);
      if (v145 >= v146 || *(_BYTE *)(*((_QWORD *)this + 7) + v145) != 89)
        goto LABEL_182;
      v147 = v108 + 1;
      break;
    default:
      return v56;
  }
  do
  {
    v108 = v147;
    *((_QWORD *)this + 9) = v145 + 1;
    v148 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplParamConvention(this, 121);
    if (!v148)
      return 0;
    if (v6)
      swift::Demangle::Node::addChild((unsigned int *)v6, v148, this, v132, v133);
    v146 = *((_QWORD *)this + 8);
    v145 = *((_QWORD *)this + 9);
    if (v145 >= v146)
      break;
    v147 = v108 + 1;
  }
  while (*(_BYTE *)(*((_QWORD *)this + 7) + v145) == 89);
LABEL_182:
  if (v145 >= v146 || *(_BYTE *)(*((_QWORD *)this + 7) + v145) != 122)
    goto LABEL_188;
  *((_QWORD *)this + 9) = v145 + 1;
  v149 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleImplResultConvention(this, 122);
  if (!v149)
    return 0;
  if (v6)
    swift::Demangle::Node::addChild((unsigned int *)v6, v149, this, v132, v133);
  ++v108;
  v146 = *((_QWORD *)this + 8);
  v145 = *((_QWORD *)this + 9);
LABEL_188:
  if (v145 >= v146 || *(_BYTE *)(*((_QWORD *)this + 7) + v145) != 95)
    return 0;
  *((_QWORD *)this + 9) = v145 + 1;
  if (v108 >= 1)
  {
    v150 = 0;
    v151 = 0;
    do
    {
      v153 = *((_DWORD *)this + 24);
      if (!v153)
        return 0;
      v154 = v153 - 1;
      v155 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v154);
      if (*((_WORD *)v155 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v154;
      v156 = *(unsigned __int8 *)(v6 + 18);
      switch(v156)
      {
        case 5:
          v158 = *(unsigned int *)(v6 + 8);
          v157 = v158 + ~v151;
          if (v158 > v157)
            goto LABEL_204;
          break;
        case 2:
          v157 = 1 - v151;
          if ((unint64_t)(1 - v151) < 2)
            goto LABEL_204;
          break;
        case 1:
          v157 = v150;
          if (!v150)
          {
LABEL_204:
            v159 = v156 - 1;
            v160 = v6;
            if (v159 >= 2)
              v160 = *(_QWORD *)v6;
            v152 = *(unsigned int **)(v160 + 8 * v157);
            goto LABEL_193;
          }
          break;
      }
      v152 = 0;
LABEL_193:
      swift::Demangle::Node::addChild(v152, v155, this, v132, v133);
      ++v151;
      --v150;
    }
    while (-(uint64_t)v108 != v150);
  }
  if (!v6)
    return 0;
  v56 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v56;
  if (!v56 || v56 + 24 > *((_QWORD *)this + 2))
  {
    v161 = 2 * *((_QWORD *)this + 4);
    if (v161 <= 0x20)
      v161 = 32;
    *((_QWORD *)this + 4) = v161;
    v162 = v161 + 8;
    v163 = malloc_type_malloc(v161 + 8, 0xD0263BC5uLL);
    *v163 = *((_QWORD *)this + 3);
    v56 = ((unint64_t)v163 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v163 + v162;
    *((_QWORD *)this + 3) = v163;
  }
  *((_QWORD *)this + 1) = v56 + 24;
  *(_WORD *)(v56 + 16) = 232;
  *(_BYTE *)(v56 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v56, (swift::Demangle::Node *)v6, this, v132, v133);
  return v56;
}

unint64_t swift::Demangle::Demangler::demangleLocalIdentifier(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  swift::Demangle::Node *v12;
  int v13;
  unsigned int v14;
  swift::Demangle::Node *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unsigned int *v21;
  swift::Demangle::Node *v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned __int16 *v26;
  int v27;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  __int16 v34;
  uint64_t v35;
  const char *v36;
  swift::Demangle::Node *v37;
  int v38;
  unsigned int v39;
  swift::Demangle::Node *v40;
  unsigned int v41;
  int v42;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  char __src;

  v6 = *((_QWORD *)this + 9);
  if (v6 >= *((_QWORD *)this + 8))
    goto LABEL_18;
  v7 = *((_QWORD *)this + 7);
  v8 = *(unsigned __int8 *)(v7 + v6);
  if (v8 == 108)
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v13 = *((_DWORD *)this + 24);
    if (!v13)
      return 0;
    v14 = v13 - 1;
    v15 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v14);
    if (*((_WORD *)v15 + 8) != 101)
      return 0;
    *((_DWORD *)this + 24) = v14;
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v17 = 2 * *((_QWORD *)this + 4);
      if (v17 <= 0x20)
        v17 = 32;
      *((_QWORD *)this + 4) = v17;
      v18 = v17 + 8;
      v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v20 = (char *)v19 + v18;
      *v19 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v20;
      *((_QWORD *)this + 3) = v19;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 176;
    *(_BYTE *)(v16 + 18) = 0;
    v21 = (unsigned int *)v16;
    v22 = v15;
    goto LABEL_38;
  }
  if (v8 == 76)
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v9 = *((_DWORD *)this + 24);
    if (!v9)
      return 0;
    v10 = v9 - 1;
    v11 = *((_QWORD *)this + 11);
    v12 = *(swift::Demangle::Node **)(v11 + 8 * (v9 - 1));
    if (*((_WORD *)v12 + 8) == 101)
    {
      *((_DWORD *)this + 24) = v10;
      if (v9 == 1)
        return 0;
    }
    else
    {
      v12 = 0;
      v10 = *((_DWORD *)this + 24);
    }
    v41 = v10 - 1;
    v26 = *(unsigned __int16 **)(v11 + 8 * v41);
    v42 = v26[8];
    if ((v42 - 173) > 0x3C || ((1 << (v42 + 83)) & 0x100000010000010DLL) == 0)
    {
      v44 = (v42 - 101) > 0x24 || ((1 << (v42 - 101)) & 0x1000800001) == 0;
      if (v44 && v42 != 347)
        return 0;
    }
    *((_DWORD *)this + 24) = v41;
    if (!v12)
      return 0;
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v45 = 2 * *((_QWORD *)this + 4);
      if (v45 <= 0x20)
        v45 = 32;
      *((_QWORD *)this + 4) = v45;
      v46 = v45 + 8;
      v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
      v48 = (char *)v47 + v46;
      *v47 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v48;
      *((_QWORD *)this + 3) = v47;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    v34 = 176;
    goto LABEL_37;
  }
  if ((char)v8 < 97)
  {
    if (v8 - 65 > 9)
      goto LABEL_18;
  }
  else if (v8 >= 0x6B)
  {
LABEL_18:
    v23 = swift::Demangle::Demangler::demangleIndexAsNode(this);
    v24 = *((_DWORD *)this + 24);
    if (!v24)
      return 0;
    v12 = (swift::Demangle::Node *)v23;
    v25 = v24 - 1;
    v26 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v25);
    v27 = v26[8];
    if ((v27 - 173) > 0x3C || ((1 << (v27 + 83)) & 0x100000010000010DLL) == 0)
    {
      v29 = (v27 - 101) > 0x24 || ((1 << (v27 - 101)) & 0x1000800001) == 0;
      if (v29 && v27 != 347)
        return 0;
    }
    *((_DWORD *)this + 24) = v25;
    if (!v23)
      return 0;
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v30 = 2 * *((_QWORD *)this + 4);
      if (v30 <= 0x20)
        v30 = 32;
      *((_QWORD *)this + 4) = v30;
      v31 = v30 + 8;
      v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v33 = (char *)v32 + v31;
      *v32 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v33;
      *((_QWORD *)this + 3) = v32;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    v34 = 137;
LABEL_37:
    *(_WORD *)(v16 + 16) = v34;
    *(_BYTE *)(v16 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v16, v12, this, a4, a5);
    v21 = (unsigned int *)v16;
    v22 = (swift::Demangle::Node *)v26;
LABEL_38:
    swift::Demangle::Node::addChild(v21, v22, this, a4, a5);
    return v16;
  }
  *((_QWORD *)this + 9) = v6 + 1;
  __src = *(_BYTE *)(v7 + v6);
  v37 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this, 101, &__src, 1uLL);
  v38 = *((_DWORD *)this + 24);
  if (v38)
  {
    v39 = v38 - 1;
    v40 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v39);
    *((_DWORD *)this + 24) = v39;
  }
  else
  {
    v40 = 0;
  }
  v50 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v50;
  if (!v50 || v50 + 24 > *((_QWORD *)this + 2))
  {
    v51 = 2 * *((_QWORD *)this + 4);
    if (v51 <= 0x20)
      v51 = 32;
    *((_QWORD *)this + 4) = v51;
    v52 = v51 + 8;
    v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
    v54 = (char *)v53 + v52;
    *v53 = *((_QWORD *)this + 3);
    v50 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v54;
    *((_QWORD *)this + 3) = v53;
  }
  *((_QWORD *)this + 1) = v50 + 24;
  *(_WORD *)(v50 + 16) = 205;
  *(_BYTE *)(v50 + 18) = 0;
  if (v37 && v50)
    swift::Demangle::Node::addChild((unsigned int *)v50, v37, this, v35, v36);
  v16 = 0;
  if (v40 && v50)
  {
    swift::Demangle::Node::addChild((unsigned int *)v50, v40, this, v35, v36);
    return v50;
  }
  return v16;
}

unint64_t swift::Demangle::Demangler::demangleMetatype(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  unsigned int *v8;
  swift::Demangle::Node *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  __int16 v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  int v21;
  unsigned int v22;
  uint64_t *v23;
  int v24;
  swift::Demangle::Node *v25;
  uint64_t v26;
  const char *v27;
  swift::Demangle::Node *v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  int v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  char *v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  char *v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  char *v106;
  int v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  char *v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  char *v119;
  unsigned int *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  char *v124;
  int v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  char *v130;
  int v131;
  unsigned int v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  char *v136;
  int v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  int v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  char *v148;
  int v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  char *v154;
  int v155;
  unsigned int v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  char *v160;
  int v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  char *v166;
  int v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  char *v172;
  int v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  char *v178;
  int v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  char *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  char *v189;
  int v190;
  unsigned int v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  char *v195;
  int v196;
  unsigned int v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  char *v201;
  int v202;
  unsigned int v203;
  unint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  char *v207;
  int v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  char *v213;
  int v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  char *v219;
  int v220;
  unsigned int v221;
  unint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  char *v225;

  v5 = *((_QWORD *)this + 9);
  if (v5 < *((_QWORD *)this + 8))
  {
    v7 = 0;
    *((_QWORD *)this + 9) = v5 + 1;
    switch(*(_BYTE *)(*((_QWORD *)this + 7) + v5))
    {
      case 'A':
        v8 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
        if (!v8)
          return 0;
        v9 = (swift::Demangle::Node *)v8;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v10 = 2 * *((_QWORD *)this + 4);
          if (v10 <= 0x20)
            v10 = 32;
          *((_QWORD *)this + 4) = v10;
          v11 = v10 + 8;
          v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
          v13 = (char *)v12 + v11;
          *v12 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v13;
          *((_QWORD *)this + 3) = v12;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 260;
        goto LABEL_291;
      case 'B':
        v15 = *((_DWORD *)this + 24);
        if (!v15)
          return 0;
        v16 = v15 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v16);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v16;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v17 = 2 * *((_QWORD *)this + 4);
          if (v17 <= 0x20)
            v17 = 32;
          *((_QWORD *)this + 4) = v17;
          v18 = v17 + 8;
          v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
          v20 = (char *)v19 + v18;
          *v19 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v20;
          *((_QWORD *)this + 3) = v19;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 258;
        goto LABEL_291;
      case 'C':
        v21 = *((_DWORD *)this + 24);
        if (!v21)
          return 0;
        v22 = v21 - 1;
        v23 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * v22);
        if (*((_WORD *)v23 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v22;
        v24 = *((unsigned __int8 *)v23 + 18);
        v25 = (swift::Demangle::Node *)v23;
        if ((v24 - 1) >= 2)
          v25 = (swift::Demangle::Node *)*v23;
          return 0;
        if ((v24 - 1) < 2)
          goto LABEL_27;
        if (v24 == 5 && *((_DWORD *)v23 + 2))
        {
          v23 = (uint64_t *)*v23;
LABEL_27:
          v28 = (swift::Demangle::Node *)*v23;
        }
        else
        {
          v28 = 0;
        }
        return swift::Demangle::Demangler::createWithChild(this, 261, v28, v26, v27);
      case 'D':
        v29 = *((_DWORD *)this + 24);
        if (!v29)
          return 0;
        v30 = v29 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v30);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v30;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v31 = 2 * *((_QWORD *)this + 4);
          if (v31 <= 0x20)
            v31 = 32;
          *((_QWORD *)this + 4) = v31;
          v32 = v31 + 8;
          v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          v34 = (char *)v33 + v32;
          *v33 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v34;
          *((_QWORD *)this + 3) = v33;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 243;
        goto LABEL_291;
      case 'F':
        v35 = *((_DWORD *)this + 24);
        if (!v35)
          return 0;
        v36 = v35 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v36);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v36;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v37 = 2 * *((_QWORD *)this + 4);
          if (v37 <= 0x20)
            v37 = 32;
          *((_QWORD *)this + 4) = v37;
          v38 = v37 + 8;
          v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
          v40 = (char *)v39 + v38;
          *v39 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v40;
          *((_QWORD *)this + 3) = v39;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 259;
        goto LABEL_291;
      case 'I':
        v41 = *((_DWORD *)this + 24);
        if (!v41)
          return 0;
        v42 = v41 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v42);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v42;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v43 = 2 * *((_QWORD *)this + 4);
          if (v43 <= 0x20)
            v43 = 32;
          *((_QWORD *)this + 4) = v43;
          v44 = v43 + 8;
          v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
          v46 = (char *)v45 + v44;
          *v45 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v46;
          *((_QWORD *)this + 3) = v45;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 240;
        goto LABEL_291;
      case 'J':
        v47 = *((_DWORD *)this + 24);
        if (!v47)
          return 0;
        v48 = v47 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v48);
        *((_DWORD *)this + 24) = v48;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v49 = 2 * *((_QWORD *)this + 4);
          if (v49 <= 0x20)
            v49 = 32;
          *((_QWORD *)this + 4) = v49;
          v50 = v49 + 8;
          v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
          v52 = (char *)v51 + v50;
          *v51 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v52;
          *((_QWORD *)this + 3) = v51;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 314;
        goto LABEL_291;
      case 'K':
        v53 = *((_DWORD *)this + 24);
        if (!v53)
          return 0;
        v54 = v53 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v54);
        *((_DWORD *)this + 24) = v54;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v55 = 2 * *((_QWORD *)this + 4);
          if (v55 <= 0x20)
            v55 = 32;
          *((_QWORD *)this + 4) = v55;
          v56 = v55 + 8;
          v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
          v58 = (char *)v57 + v56;
          *v57 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v58;
          *((_QWORD *)this + 3) = v57;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 312;
        goto LABEL_291;
      case 'L':
        v59 = *((_DWORD *)this + 24);
        if (!v59)
          return 0;
        v60 = v59 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v60);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v60;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v61 = 2 * *((_QWORD *)this + 4);
          if (v61 <= 0x20)
            v61 = 32;
          *((_QWORD *)this + 4) = v61;
          v62 = v61 + 8;
          v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
          v64 = (char *)v63 + v62;
          *v63 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v64;
          *((_QWORD *)this + 3) = v63;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 244;
        goto LABEL_291;
      case 'M':
        v65 = *((_DWORD *)this + 24);
        if (!v65)
          return 0;
        v66 = v65 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v66);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v66;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v67 = 2 * *((_QWORD *)this + 4);
          if (v67 <= 0x20)
            v67 = 32;
          *((_QWORD *)this + 4) = v67;
          v68 = v67 + 8;
          v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
          v70 = (char *)v69 + v68;
          *v69 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v70;
          *((_QWORD *)this + 3) = v69;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 310;
        goto LABEL_291;
      case 'N':
        v71 = *((_DWORD *)this + 24);
        if (!v71)
          return 0;
        v72 = v71 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v72);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v72;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v73 = 2 * *((_QWORD *)this + 4);
          if (v73 <= 0x20)
            v73 = 32;
          *((_QWORD *)this + 4) = v73;
          v74 = v73 + 8;
          v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
          v76 = (char *)v75 + v74;
          *v75 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v76;
          *((_QWORD *)this + 3) = v75;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 313;
        goto LABEL_291;
      case 'P':
        v77 = *((_DWORD *)this + 24);
        if (!v77)
          return 0;
        v78 = v77 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v78);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v78;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v79 = 2 * *((_QWORD *)this + 4);
          if (v79 <= 0x20)
            v79 = 32;
          *((_QWORD *)this + 4) = v79;
          v80 = v79 + 8;
          v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          v82 = (char *)v81 + v80;
          *v81 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v82;
          *((_QWORD *)this + 3) = v81;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 97;
        goto LABEL_291;
      case 'Q':
        v83 = *((_DWORD *)this + 24);
        if (!v83)
          return 0;
        v84 = v83 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v84);
        *((_DWORD *)this + 24) = v84;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v85 = 2 * *((_QWORD *)this + 4);
          if (v85 <= 0x20)
            v85 = 32;
          *((_QWORD *)this + 4) = v85;
          v86 = v85 + 8;
          v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
          v88 = (char *)v87 + v86;
          *v87 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v88;
          *((_QWORD *)this + 3) = v87;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 302;
        goto LABEL_291;
      case 'S':
        v89 = swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
        if (!v89)
          return 0;
        v9 = (swift::Demangle::Node *)v89;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v90 = 2 * *((_QWORD *)this + 4);
          if (v90 <= 0x20)
            v90 = 32;
          *((_QWORD *)this + 4) = v90;
          v91 = v90 + 8;
          v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
          v93 = (char *)v92 + v91;
          *v92 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v93;
          *((_QWORD *)this + 3) = v92;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 193;
        goto LABEL_291;
      case 'U':
        v94 = *((_DWORD *)this + 24);
        if (!v94)
          return 0;
        v95 = v94 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v95);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v95;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v96 = 2 * *((_QWORD *)this + 4);
          if (v96 <= 0x20)
            v96 = 32;
          *((_QWORD *)this + 4) = v96;
          v97 = v96 + 8;
          v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
          v99 = (char *)v98 + v97;
          *v98 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v99;
          *((_QWORD *)this + 3) = v98;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 149;
        goto LABEL_291;
      case 'V':
        v100 = *((_DWORD *)this + 24);
        if (!v100)
          return 0;
        v101 = v100 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v100 - 1));
        v102 = *((unsigned __int16 *)v9 + 8);
        if (v102 != 232 && !swift::Demangle::isContext(v102))
          return 0;
        *((_DWORD *)this + 24) = v101;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v103 = 2 * *((_QWORD *)this + 4);
          if (v103 <= 0x20)
            v103 = 32;
          *((_QWORD *)this + 4) = v103;
          v104 = v103 + 8;
          v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
          v106 = (char *)v105 + v104;
          *v105 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v106;
          *((_QWORD *)this + 3) = v105;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 177;
        goto LABEL_291;
      case 'X':
        return swift::Demangle::Demangler::demanglePrivateContextDescriptor(this, a2, a3, a4, a5);
      case 'a':
        v108 = *((_DWORD *)this + 24);
        if (!v108)
          return 0;
        v109 = v108 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v109);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v109;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v110 = 2 * *((_QWORD *)this + 4);
          if (v110 <= 0x20)
            v110 = 32;
          *((_QWORD *)this + 4) = v110;
          v111 = v110 + 8;
          v112 = malloc_type_malloc(v110 + 8, 0xD0263BC5uLL);
          v113 = (char *)v112 + v111;
          *v112 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v113;
          *((_QWORD *)this + 3) = v112;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 238;
        goto LABEL_291;
      case 'b':
        v114 = *((_DWORD *)this + 24);
        if (!v114)
          return 0;
        v115 = v114 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v115);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v115;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v116 = 2 * *((_QWORD *)this + 4);
          if (v116 <= 0x20)
            v116 = 32;
          *((_QWORD *)this + 4) = v116;
          v117 = v116 + 8;
          v118 = malloc_type_malloc(v116 + 8, 0xD0263BC5uLL);
          v119 = (char *)v118 + v117;
          *v118 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v119;
          *((_QWORD *)this + 3) = v118;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 311;
        goto LABEL_291;
      case 'c':
        v120 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
        if (!v120)
          return 0;
        v9 = (swift::Demangle::Node *)v120;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v121 = 2 * *((_QWORD *)this + 4);
          if (v121 <= 0x20)
            v121 = 32;
          *((_QWORD *)this + 4) = v121;
          v122 = v121 + 8;
          v123 = malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
          v124 = (char *)v123 + v122;
          *v123 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v124;
          *((_QWORD *)this + 3) = v123;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 188;
        goto LABEL_291;
      case 'f':
        v125 = *((_DWORD *)this + 24);
        if (!v125)
          return 0;
        v126 = v125 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v126);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v126;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v127 = 2 * *((_QWORD *)this + 4);
          if (v127 <= 0x20)
            v127 = 32;
          *((_QWORD *)this + 4) = v127;
          v128 = v127 + 8;
          v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
          v130 = (char *)v129 + v128;
          *v129 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v130;
          *((_QWORD *)this + 3) = v129;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 75;
        goto LABEL_291;
      case 'g':
        v131 = *((_DWORD *)this + 24);
        if (!v131)
          return 0;
        v132 = v131 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v132);
        *((_DWORD *)this + 24) = v132;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v133 = 2 * *((_QWORD *)this + 4);
          if (v133 <= 0x20)
            v133 = 32;
          *((_QWORD *)this + 4) = v133;
          v134 = v133 + 8;
          v135 = malloc_type_malloc(v133 + 8, 0xD0263BC5uLL);
          v136 = (char *)v135 + v134;
          *v135 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v135 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v136;
          *((_QWORD *)this + 3) = v135;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 304;
        goto LABEL_291;
      case 'h':
        v137 = *((_DWORD *)this + 24);
        if (!v137)
          return 0;
        v138 = v137 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v138);
        *((_DWORD *)this + 24) = v138;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v139 = 2 * *((_QWORD *)this + 4);
          if (v139 <= 0x20)
            v139 = 32;
          *((_QWORD *)this + 4) = v139;
          v140 = v139 + 8;
          v141 = malloc_type_malloc(v139 + 8, 0xD0263BC5uLL);
          v142 = (char *)v141 + v140;
          *v141 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v142;
          *((_QWORD *)this + 3) = v141;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 305;
        goto LABEL_291;
      case 'i':
        v143 = *((_DWORD *)this + 24);
        if (!v143)
          return 0;
        v144 = v143 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v144);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v144;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v145 = 2 * *((_QWORD *)this + 4);
          if (v145 <= 0x20)
            v145 = 32;
          *((_QWORD *)this + 4) = v145;
          v146 = v145 + 8;
          v147 = malloc_type_malloc(v145 + 8, 0xD0263BC5uLL);
          v148 = (char *)v147 + v146;
          *v147 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v148;
          *((_QWORD *)this + 3) = v147;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 241;
        goto LABEL_291;
      case 'j':
        v149 = *((_DWORD *)this + 24);
        if (!v149)
          return 0;
        v150 = v149 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v150);
        *((_DWORD *)this + 24) = v150;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v151 = 2 * *((_QWORD *)this + 4);
          if (v151 <= 0x20)
            v151 = 32;
          *((_QWORD *)this + 4) = v151;
          v152 = v151 + 8;
          v153 = malloc_type_malloc(v151 + 8, 0xD0263BC5uLL);
          v154 = (char *)v153 + v152;
          *v153 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v154;
          *((_QWORD *)this + 3) = v153;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 306;
        goto LABEL_291;
      case 'k':
        v155 = *((_DWORD *)this + 24);
        if (!v155)
          return 0;
        v156 = v155 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v156);
        *((_DWORD *)this + 24) = v156;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v157 = 2 * *((_QWORD *)this + 4);
          if (v157 <= 0x20)
            v157 = 32;
          *((_QWORD *)this + 4) = v157;
          v158 = v157 + 8;
          v159 = malloc_type_malloc(v157 + 8, 0xD0263BC5uLL);
          v160 = (char *)v159 + v158;
          *v159 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v159 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v160;
          *((_QWORD *)this + 3) = v159;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 307;
        goto LABEL_291;
      case 'l':
        v161 = *((_DWORD *)this + 24);
        if (!v161)
          return 0;
        v162 = v161 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v162);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v162;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v163 = 2 * *((_QWORD *)this + 4);
          if (v163 <= 0x20)
            v163 = 32;
          *((_QWORD *)this + 4) = v163;
          v164 = v163 + 8;
          v165 = malloc_type_malloc(v163 + 8, 0xD0263BC5uLL);
          v166 = (char *)v165 + v164;
          *v165 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v166;
          *((_QWORD *)this + 3) = v165;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 242;
        goto LABEL_291;
      case 'm':
        v167 = *((_DWORD *)this + 24);
        if (!v167)
          return 0;
        v168 = v167 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v168);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v168;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v169 = 2 * *((_QWORD *)this + 4);
          if (v169 <= 0x20)
            v169 = 32;
          *((_QWORD *)this + 4) = v169;
          v170 = v169 + 8;
          v171 = malloc_type_malloc(v169 + 8, 0xD0263BC5uLL);
          v172 = (char *)v171 + v170;
          *v171 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v172;
          *((_QWORD *)this + 3) = v171;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 147;
        goto LABEL_291;
      case 'n':
        v173 = *((_DWORD *)this + 24);
        if (!v173)
          return 0;
        v174 = v173 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v174);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v174;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v175 = 2 * *((_QWORD *)this + 4);
          if (v175 <= 0x20)
            v175 = 32;
          *((_QWORD *)this + 4) = v175;
          v176 = v175 + 8;
          v177 = malloc_type_malloc(v175 + 8, 0xD0263BC5uLL);
          v178 = (char *)v177 + v176;
          *v177 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v178;
          *((_QWORD *)this + 3) = v177;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 158;
        goto LABEL_291;
      case 'o':
        v179 = *((_DWORD *)this + 24);
        if (!v179)
          return 0;
        v180 = v179 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v180);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v180;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v181 = 2 * *((_QWORD *)this + 4);
          if (v181 <= 0x20)
            v181 = 32;
          *((_QWORD *)this + 4) = v181;
          v182 = v181 + 8;
          v183 = malloc_type_malloc(v181 + 8, 0xD0263BC5uLL);
          v184 = (char *)v183 + v182;
          *v183 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v183 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v184;
          *((_QWORD *)this + 3) = v183;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 25;
        goto LABEL_291;
      case 'p':
        v185 = swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
        if (!v185)
          return 0;
        v9 = (swift::Demangle::Node *)v185;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v186 = 2 * *((_QWORD *)this + 4);
          if (v186 <= 0x20)
            v186 = 32;
          *((_QWORD *)this + 4) = v186;
          v187 = v186 + 8;
          v188 = malloc_type_malloc(v186 + 8, 0xD0263BC5uLL);
          v189 = (char *)v188 + v187;
          *v188 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v188 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v189;
          *((_QWORD *)this + 3) = v188;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 186;
        goto LABEL_291;
      case 'q':
        v190 = *((_DWORD *)this + 24);
        if (!v190)
          return 0;
        v191 = v190 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v191);
        *((_DWORD *)this + 24) = v191;
        if (!v9)
          return 0;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v192 = 2 * *((_QWORD *)this + 4);
          if (v192 <= 0x20)
            v192 = 32;
          *((_QWORD *)this + 4) = v192;
          v193 = v192 + 8;
          v194 = malloc_type_malloc(v192 + 8, 0xD0263BC5uLL);
          v195 = (char *)v194 + v193;
          *v194 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v195;
          *((_QWORD *)this + 3) = v194;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 335;
        goto LABEL_291;
      case 'r':
        v196 = *((_DWORD *)this + 24);
        if (!v196)
          return 0;
        v197 = v196 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v197);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v197;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v198 = 2 * *((_QWORD *)this + 4);
          if (v198 <= 0x20)
            v198 = 32;
          *((_QWORD *)this + 4) = v198;
          v199 = v198 + 8;
          v200 = malloc_type_malloc(v198 + 8, 0xD0263BC5uLL);
          v201 = (char *)v200 + v199;
          *v200 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v201;
          *((_QWORD *)this + 3) = v200;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 239;
        goto LABEL_291;
      case 's':
        v202 = *((_DWORD *)this + 24);
        if (!v202)
          return 0;
        v203 = v202 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v203);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v203;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v204 = 2 * *((_QWORD *)this + 4);
          if (v204 <= 0x20)
            v204 = 32;
          *((_QWORD *)this + 4) = v204;
          v205 = v204 + 8;
          v206 = malloc_type_malloc(v204 + 8, 0xD0263BC5uLL);
          v207 = (char *)v206 + v205;
          *v206 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v207;
          *((_QWORD *)this + 3) = v206;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 150;
        goto LABEL_291;
      case 't':
        v208 = *((_DWORD *)this + 24);
        if (!v208)
          return 0;
        v209 = v208 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v209);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v209;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v210 = 2 * *((_QWORD *)this + 4);
          if (v210 <= 0x20)
            v210 = 32;
          *((_QWORD *)this + 4) = v210;
          v211 = v210 + 8;
          v212 = malloc_type_malloc(v210 + 8, 0xD0263BC5uLL);
          v213 = (char *)v212 + v211;
          *v212 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v213;
          *((_QWORD *)this + 3) = v212;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 151;
        goto LABEL_291;
      case 'u':
        v214 = *((_DWORD *)this + 24);
        if (!v214)
          return 0;
        v215 = v214 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v215);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v215;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v216 = 2 * *((_QWORD *)this + 4);
          if (v216 <= 0x20)
            v216 = 32;
          *((_QWORD *)this + 4) = v216;
          v217 = v216 + 8;
          v218 = malloc_type_malloc(v216 + 8, 0xD0263BC5uLL);
          v219 = (char *)v218 + v217;
          *v218 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v219;
          *((_QWORD *)this + 3) = v218;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 148;
        goto LABEL_291;
      case 'z':
        v220 = *((_DWORD *)this + 24);
        if (!v220)
          return 0;
        v221 = v220 - 1;
        v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v221);
        if (*((_WORD *)v9 + 8) != 232)
          return 0;
        *((_DWORD *)this + 24) = v221;
        v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
        {
          v222 = 2 * *((_QWORD *)this + 4);
          if (v222 <= 0x20)
            v222 = 32;
          *((_QWORD *)this + 4) = v222;
          v223 = v222 + 8;
          v224 = malloc_type_malloc(v222 + 8, 0xD0263BC5uLL);
          v225 = (char *)v224 + v223;
          *v224 = *((_QWORD *)this + 3);
          v7 = ((unint64_t)v224 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v225;
          *((_QWORD *)this + 3) = v224;
        }
        *((_QWORD *)this + 1) = v7 + 24;
        v14 = 318;
LABEL_291:
        *(_WORD *)(v7 + 16) = v14;
        *(_BYTE *)(v7 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v7, v9, this, a4, a5);
        return v7;
      default:
        return v7;
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleArchetype(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  swift::Demangle::Demangler *v7;
  unint64_t Type;
  unint64_t v9;
  uint64_t v10;
  swift::Demangle::Node *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int16 v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  swift::Demangle::Node **v27;
  swift::Demangle::Node *DependentGenericParamType;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  int v33;
  uint64_t v34;
  swift::Demangle::Node *v35;
  int v36;
  int v37;
  swift::Demangle::Node *v38;
  int v39;
  swift::Demangle::Node *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  swift::Demangle::Node *v46;
  int v47;
  swift::Demangle::Node *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned int *v57;
  swift::Demangle::Node *v58;
  swift::Demangle::Node *v59;
  unint64_t v60;
  const void **v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  const char *v74;
  unsigned int *v75;
  swift::Demangle::Node *v76;
  unsigned int v77;
  swift::Demangle::Node *v78;
  int v79;
  swift::Demangle::Node *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  swift::Demangle::Node *Node;
  const char *v101;
  unsigned int *v102;
  uint64_t v103;
  const char *v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  swift::Demangle::Node *v115;
  int v116;
  swift::Demangle::Node *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  swift::Demangle::Node *v124;
  swift::Demangle::Node **v125;
  uint64_t v126;
  unint64_t v127;

  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 >= v5)
    return 0;
  v7 = this;
  Type = 0;
  v9 = v6 + 1;
  *((_QWORD *)this + 9) = v6 + 1;
  v10 = *((_QWORD *)this + 7);
  switch(*(_BYTE *)(v10 + v6))
  {
    case 'O':
      v11 = swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v11)
        return 0;
      v12 = (unint64_t)v11;
      Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
      {
        v13 = 2 * *((_QWORD *)v7 + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)v7 + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        *v15 = *((_QWORD *)v7 + 3);
        Type = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v15 + v14;
        *((_QWORD *)v7 + 3) = v15;
      }
      *((_QWORD *)v7 + 1) = Type + 24;
      v16 = 309;
      goto LABEL_67;
    case 'P':
      return swift::Demangle::Demangler::popPack(this, a2, a3, a4, a5);
    case 'R':
      if (v9 >= v5)
        return 0;
      v18 = *(unsigned __int8 *)(v10 + v9);
      if (v18 == 95)
      {
        v19 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
      }
      else
      {
        if ((v18 - 48) > 9)
          return 0;
        v92 = 0;
        while (1)
        {
          v93 = *(unsigned __int8 *)(v10 + v9);
          if ((v93 - 48) > 9)
            break;
          v94 = v93 + 10 * v92 - 48;
          if (v94 < v92)
            return 0;
          Type = 0;
          *((_QWORD *)this + 9) = ++v9;
          v92 = v94;
          if (v5 == v9)
            return Type;
        }
        Type = 0;
        if (v92 < 0 || v9 >= v5 || v93 != 95)
          return Type;
        *((_QWORD *)this + 9) = v9 + 1;
        v19 = (v92 + 1);
      }
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        *v23 = *((_QWORD *)v7 + 3);
        v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v23 + v22;
        *((_QWORD *)v7 + 3) = v23;
      }
      *((_QWORD *)v7 + 1) = v20 + 24;
      *(_WORD *)(v20 + 16) = 341;
      *(_BYTE *)(v20 + 18) = 4;
      *(_QWORD *)v20 = v19;
      v12 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v12;
      if (!v12 || v12 + 24 > *((_QWORD *)v7 + 2))
      {
        v24 = 2 * *((_QWORD *)v7 + 4);
        if (v24 <= 0x20)
          v24 = 32;
        *((_QWORD *)v7 + 4) = v24;
        v25 = v24 + 8;
        v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
        *v26 = *((_QWORD *)v7 + 3);
        v12 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v26 + v25;
        *((_QWORD *)v7 + 3) = v26;
      }
      *((_QWORD *)v7 + 1) = v12 + 24;
      *(_WORD *)(v12 + 16) = 308;
      *(_BYTE *)(v12 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v12, (swift::Demangle::Node *)v20, v7, a4, a5);
      Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
      {
LABEL_63:
        v54 = 2 * *((_QWORD *)v7 + 4);
        if (v54 <= 0x20)
          v54 = 32;
        *((_QWORD *)v7 + 4) = v54;
        v55 = v54 + 8;
        v56 = malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        *v56 = *((_QWORD *)v7 + 3);
        Type = ((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v56 + v55;
        *((_QWORD *)v7 + 3) = v56;
      }
LABEL_66:
      *((_QWORD *)v7 + 1) = Type + 24;
      v16 = 232;
LABEL_67:
      *(_WORD *)(Type + 16) = v16;
      *(_BYTE *)(Type + 18) = 0;
      v57 = (unsigned int *)Type;
      v58 = (swift::Demangle::Node *)v12;
      goto LABEL_68;
    case 'S':
      return swift::Demangle::Demangler::popSILPack(this, a2, a3, a4, a5);
    case 'X':
      v27 = (swift::Demangle::Node **)swift::Demangle::Demangler::demangleAssociatedTypeCompound(this, 0, a3, a4, a5);
      goto LABEL_74;
    case 'Y':
      DependentGenericParamType = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
      goto LABEL_31;
    case 'Z':
      DependentGenericParamType = (swift::Demangle::Node *)swift::Demangle::Demangler::getDependentGenericParamType(this, 0, 0, a4, a5);
LABEL_31:
      v27 = (swift::Demangle::Node **)swift::Demangle::Demangler::demangleAssociatedTypeCompound(v7, DependentGenericParamType, v29, v30, v31);
      goto LABEL_74;
    case 'a':
      v32 = *((_DWORD *)this + 24);
      if (!v32)
        return 0;
      v33 = v32 - 1;
      v34 = *((_QWORD *)this + 11);
      v35 = *(swift::Demangle::Node **)(v34 + 8 * (v32 - 1));
      if (*((_WORD *)v35 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v33;
        if (v32 == 1)
          return 0;
      }
      else
      {
        v35 = 0;
        v33 = *((_DWORD *)this + 24);
      }
      v77 = v33 - 1;
      v78 = *(swift::Demangle::Node **)(v34 + 8 * v77);
      if (*((_WORD *)v78 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v77;
      v79 = *((unsigned __int8 *)v78 + 18);
      if (v79 == 1)
        goto LABEL_99;
      if (v79 != 5 || *((_DWORD *)v78 + 2) != 1)
        return 0;
      v78 = *(swift::Demangle::Node **)v78;
LABEL_99:
      if (!v35)
        return 0;
      v80 = *(swift::Demangle::Node **)v78;
      if (!*(_QWORD *)v78)
        return 0;
      v81 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v81;
      if (!v81 || v81 + 24 > *((_QWORD *)this + 2))
      {
        v82 = 2 * *((_QWORD *)this + 4);
        if (v82 <= 0x20)
          v82 = 32;
        *((_QWORD *)this + 4) = v82;
        v83 = v82 + 8;
        v84 = malloc_type_malloc(v82 + 8, 0xD0263BC5uLL);
        *v84 = *((_QWORD *)v7 + 3);
        v81 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v84 + v83;
        *((_QWORD *)v7 + 3) = v84;
      }
      *((_QWORD *)v7 + 1) = v81 + 24;
      *(_WORD *)(v81 + 16) = 5;
      *(_BYTE *)(v81 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v81, v80, v7, a4, a5);
      swift::Demangle::Node::addChild((unsigned int *)v81, v35, v7, v85, v86);
      Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
      {
        v89 = 2 * *((_QWORD *)v7 + 4);
        if (v89 <= 0x20)
          v89 = 32;
        *((_QWORD *)v7 + 4) = v89;
        v90 = v89 + 8;
        v91 = malloc_type_malloc(v89 + 8, 0xD0263BC5uLL);
        *v91 = *((_QWORD *)v7 + 3);
        Type = ((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v91 + v90;
        *((_QWORD *)v7 + 3) = v91;
      }
      *((_QWORD *)v7 + 1) = Type + 24;
      *(_WORD *)(Type + 16) = 232;
      *(_BYTE *)(Type + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)Type, (swift::Demangle::Node *)v81, v7, v87, v88);
      v125 = (swift::Demangle::Node **)Type;
LABEL_75:
      v61 = (const void **)((char *)v7 + 104);
      v62 = (uint64_t *)&v125;
      goto LABEL_76;
    case 'e':
      v36 = *((_DWORD *)this + 24);
      if (!v36)
        goto LABEL_77;
      v37 = v36 - 1;
      v38 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v36 - 1));
      if (*((_WORD *)v38 + 8) != 232)
        goto LABEL_77;
      *((_DWORD *)this + 24) = v37;
      v39 = *((unsigned __int8 *)v38 + 18);
      if (v39 == 1)
        goto LABEL_42;
      if (v39 == 5 && *((_DWORD *)v38 + 2) == 1)
      {
        v38 = *(swift::Demangle::Node **)v38;
LABEL_42:
        v40 = *(swift::Demangle::Node **)v38;
      }
      else
      {
LABEL_77:
        v40 = 0;
      }
      if (v9 >= v5)
        return 0;
      v63 = *(unsigned __int8 *)(v10 + v9);
      if (v63 == 95)
      {
        v64 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
      }
      else
      {
        if ((v63 - 48) > 9)
          return 0;
        v111 = 0;
        while (1)
        {
          v112 = *(unsigned __int8 *)(v10 + v9);
          if ((v112 - 48) > 9)
            break;
          v113 = v112 + 10 * v111 - 48;
          if (v113 < v111)
            return 0;
          Type = 0;
          *((_QWORD *)this + 9) = ++v9;
          v111 = v113;
          if (v5 == v9)
            return Type;
        }
        Type = 0;
        if (v111 < 0 || v9 >= v5 || v112 != 95)
          return Type;
        *((_QWORD *)this + 9) = v9 + 1;
        v64 = (v111 + 1);
      }
      v65 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v65;
      if (!v65 || v65 + 24 > *((_QWORD *)this + 2))
      {
        v66 = 2 * *((_QWORD *)this + 4);
        if (v66 <= 0x20)
          v66 = 32;
        *((_QWORD *)this + 4) = v66;
        v67 = v66 + 8;
        v68 = malloc_type_malloc(v66 + 8, 0xD0263BC5uLL);
        *v68 = *((_QWORD *)v7 + 3);
        v65 = ((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v68 + v67;
        *((_QWORD *)v7 + 3) = v68;
      }
      *((_QWORD *)v7 + 1) = v65 + 24;
      *(_WORD *)(v65 + 16) = 231;
      *(_BYTE *)(v65 + 18) = 4;
      *(_QWORD *)v65 = v64;
      if (v40)
      {
        v69 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 1) = v69;
        if (!v69 || v69 + 24 > *((_QWORD *)v7 + 2))
        {
          v70 = 2 * *((_QWORD *)v7 + 4);
          if (v70 <= 0x20)
            v70 = 32;
          *((_QWORD *)v7 + 4) = v70;
          v71 = v70 + 8;
          v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
          *v72 = *((_QWORD *)v7 + 3);
          v69 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v7 + 2) = (char *)v72 + v71;
          *((_QWORD *)v7 + 3) = v72;
        }
        *((_QWORD *)v7 + 1) = v69 + 24;
        *(_WORD *)(v69 + 16) = 230;
        *(_BYTE *)(v69 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v69, v40, v7, a4, a5);
        v75 = (unsigned int *)v69;
        v76 = (swift::Demangle::Node *)v65;
        goto LABEL_156;
      }
      return 0;
    case 'o':
      if (v9 >= v5)
        goto LABEL_124;
      v41 = *(unsigned __int8 *)(v10 + v9);
      if (v41 == 95)
      {
        v42 = 0;
        *((_QWORD *)this + 9) = v6 + 2;
        goto LABEL_125;
      }
      if ((v41 - 48) > 9)
        goto LABEL_124;
      v95 = 0;
      break;
    case 'p':
      v43 = *((_DWORD *)this + 24);
      if (!v43)
        return 0;
      v44 = v43 - 1;
      v45 = *((_QWORD *)this + 11);
      v46 = *(swift::Demangle::Node **)(v45 + 8 * (v43 - 1));
      if (*((_WORD *)v46 + 8) != 232)
      {
        v48 = 0;
        v44 = *((_DWORD *)this + 24);
        goto LABEL_143;
      }
      *((_DWORD *)this + 24) = v44;
      v47 = *((unsigned __int8 *)v46 + 18);
      if (v47 == 1)
        goto LABEL_52;
      if (v47 == 5 && *((_DWORD *)v46 + 2) == 1)
      {
        v46 = *(swift::Demangle::Node **)v46;
LABEL_52:
        v48 = *(swift::Demangle::Node **)v46;
      }
      else
      {
        v48 = 0;
      }
      if (!v44)
        return 0;
LABEL_143:
      v114 = v44 - 1;
      v115 = *(swift::Demangle::Node **)(v45 + 8 * v114);
      if (*((_WORD *)v115 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v114;
      v116 = *((unsigned __int8 *)v115 + 18);
      if (v116 == 1)
        goto LABEL_148;
      if (v116 != 5 || *((_DWORD *)v115 + 2) != 1)
        return 0;
      v115 = *(swift::Demangle::Node **)v115;
LABEL_148:
      Type = 0;
      if (v48)
      {
        v117 = *(swift::Demangle::Node **)v115;
        if (*(_QWORD *)v115)
        {
          v69 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v69;
          if (!v69 || v69 + 24 > *((_QWORD *)this + 2))
          {
            v118 = 2 * *((_QWORD *)this + 4);
            if (v118 <= 0x20)
              v118 = 32;
            *((_QWORD *)this + 4) = v118;
            v119 = v118 + 8;
            v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
            *v120 = *((_QWORD *)v7 + 3);
            v69 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)v7 + 2) = (char *)v120 + v119;
            *((_QWORD *)v7 + 3) = v120;
          }
          *((_QWORD *)v7 + 1) = v69 + 24;
          *(_WORD *)(v69 + 16) = 229;
          *(_BYTE *)(v69 + 18) = 0;
          swift::Demangle::Node::addChild((unsigned int *)v69, v117, v7, a4, a5);
          v75 = (unsigned int *)v69;
          v76 = v48;
LABEL_156:
          swift::Demangle::Node::addChild(v75, v76, v7, v73, v74);
          Type = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v7 + 1) = Type;
          if (!Type || Type + 24 > *((_QWORD *)v7 + 2))
          {
            v121 = 2 * *((_QWORD *)v7 + 4);
            if (v121 <= 0x20)
              v121 = 32;
            *((_QWORD *)v7 + 4) = v121;
            v122 = v121 + 8;
            v123 = malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
            *v123 = *((_QWORD *)v7 + 3);
            Type = ((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)v7 + 2) = (char *)v123 + v122;
            *((_QWORD *)v7 + 3) = v123;
          }
          *((_QWORD *)v7 + 1) = Type + 24;
          *(_WORD *)(Type + 16) = 232;
          *(_BYTE *)(Type + 18) = 0;
          v57 = (unsigned int *)Type;
          v58 = (swift::Demangle::Node *)v69;
LABEL_68:
          swift::Demangle::Node::addChild(v57, v58, v7, a4, a5);
        }
      }
      return Type;
    case 'r':
      v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v12;
      if (!v12 || (v49 = *((_QWORD *)this + 2), v12 + 24 > v49))
      {
        v50 = 2 * *((_QWORD *)this + 4);
        if (v50 <= 0x20)
          v50 = 32;
        *((_QWORD *)this + 4) = v50;
        v51 = v50 + 8;
        v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
        *v52 = *((_QWORD *)v7 + 3);
        v12 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
        v49 = (unint64_t)v52 + v51;
        *((_QWORD *)v7 + 2) = (char *)v52 + v51;
        *((_QWORD *)v7 + 3) = v52;
      }
      *(_WORD *)(v12 + 16) = 308;
      *(_BYTE *)(v12 + 18) = 0;
      Type = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Type;
      if (Type)
        v53 = Type + 24 > v49;
      else
        v53 = 1;
      if (!v53)
        goto LABEL_66;
      goto LABEL_63;
    case 'x':
      v59 = 0;
      goto LABEL_73;
    case 'y':
      v60 = swift::Demangle::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
      goto LABEL_72;
    case 'z':
      v60 = swift::Demangle::Demangler::getDependentGenericParamType(this, 0, 0, a4, a5);
LABEL_72:
      v59 = (swift::Demangle::Node *)v60;
      this = v7;
LABEL_73:
      v27 = (swift::Demangle::Node **)swift::Demangle::Demangler::demangleAssociatedTypeSimple(this, v59, a3, a4, a5);
LABEL_74:
      Type = (unint64_t)v27;
      v125 = v27;
      if (v27)
        goto LABEL_75;
      return Type;
    default:
      return Type;
  }
  while (1)
  {
    v96 = *(unsigned __int8 *)(v10 + v9);
    if ((v96 - 48) > 9)
      break;
    v97 = v96 + 10 * v95 - 48;
    if (v97 >= v95)
    {
      *((_QWORD *)this + 9) = ++v9;
      v95 = v97;
      if (v5 != v9)
        continue;
    }
LABEL_124:
    v42 = -1000;
    goto LABEL_125;
  }
  v42 = -1000;
  if ((v95 & 0x80000000) == 0 && v9 < v5 && v96 == 95)
  {
    *((_QWORD *)this + 9) = v9 + 1;
    v42 = (v95 + 1);
  }
LABEL_125:
  v125 = 0;
  v126 = 0;
  v124 = 0;
  Type = 0;
  if (swift::Demangle::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v125, (int8x16_t **)&v124, a4, a5))
  {
    v98 = *((_DWORD *)v7 + 24);
    if (v98)
    {
      v99 = v98 - 1;
      Type = *(_QWORD *)(*((_QWORD *)v7 + 11) + 8 * v99);
      *((_DWORD *)v7 + 24) = v99;
      if (Type)
      {
        Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v7, 102, v42);
        v102 = (unsigned int *)swift::Demangle::Demangler::createWithChildren(v7, 300, (swift::Demangle::Node *)Type, Node, v101);
        v105 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v7, 235);
        if ((_DWORD)v126)
        {
          v106 = v126 - 1;
          do
          {
            v107 = v106;
            swift::Demangle::Node::addChild(v105, v125[v106--], v7, v103, v104);
          }
          while (v107);
        }
        swift::Demangle::Node::addChild(v102, (swift::Demangle::Node *)v105, v7, v103, v104);
        if (v124)
          swift::Demangle::Node::addChild(v102, v124, v7, v109, v110);
        Type = swift::Demangle::Demangler::createType(v7, (swift::Demangle::Node *)v102, v108, v109, v110);
        v127 = Type;
        if (Type)
        {
          v61 = (const void **)((char *)v7 + 104);
          v62 = (uint64_t *)&v127;
LABEL_76:
          swift::Demangle::Vector<swift::Demangle::Node *>::push_back(v61, v62, v7);
        }
      }
      return Type;
    }
    return 0;
  }
  return Type;
}

unint64_t swift::Demangle::Demangler::demangleGenericRequirement(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  swift::Demangle::Node *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  swift::Demangle::Node *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  swift::Demangle::Node *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  const char *v49;
  swift::Demangle::Node *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned int *v54;
  swift::Demangle::Node *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  unint64_t v75;

  v6 = *((_QWORD *)this + 9);
  if (v6 >= *((_QWORD *)this + 8))
  {
    v7 = *((_QWORD *)this + 9);
LABEL_6:
    v10 = 0;
    v8 = 0;
    *((_QWORD *)this + 9) = v7 - 1;
LABEL_7:
    v12 = swift::Demangle::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
    if (v12)
    {
      v13 = (swift::Demangle::Node *)v12;
      v14 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v14;
      if (!v14 || v14 + 24 > *((_QWORD *)this + 2))
      {
        v15 = 2 * *((_QWORD *)this + 4);
        if (v15 <= 0x20)
          v15 = 32;
        *((_QWORD *)this + 4) = v15;
        v16 = v15 + 8;
        v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        *v17 = *((_QWORD *)this + 3);
        v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v17 + v16;
        *((_QWORD *)this + 3) = v17;
      }
      *((_QWORD *)this + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 232;
      *(_BYTE *)(v14 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v14, v13, this, a4, a5);
    }
    else
    {
      v14 = 0;
    }
LABEL_40:
    switch(v10)
    {
      case 0:
        v30 = swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
        v31 = 0;
        if (!v14)
          return v31;
        v8 = (swift::Demangle::Node *)v30;
        if (!v30)
          return v31;
        goto LABEL_47;
      case 1:
        v32 = *((_DWORD *)this + 24);
        if (!v32)
          goto LABEL_122;
        v33 = v32 - 1;
        v8 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v33);
        if (*((_WORD *)v8 + 8) != 232)
          goto LABEL_122;
        *((_DWORD *)this + 24) = v33;
        if (!v14)
          goto LABEL_122;
LABEL_47:
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v34 = 2 * *((_QWORD *)this + 4);
          if (v34 <= 0x20)
            v34 = 32;
          *((_QWORD *)this + 4) = v34;
          v35 = v34 + 8;
          v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
          *v36 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v36 + v35;
          *((_QWORD *)this + 3) = v36;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 36;
        goto LABEL_89;
      case 2:
        v38 = *((_DWORD *)this + 24);
        if (!v38)
          goto LABEL_122;
        v39 = v38 - 1;
        v8 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v39);
        if (*((_WORD *)v8 + 8) != 232)
          goto LABEL_122;
        *((_DWORD *)this + 24) = v39;
        if (!v14)
          goto LABEL_122;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v40 = 2 * *((_QWORD *)this + 4);
          if (v40 <= 0x20)
            v40 = 32;
          *((_QWORD *)this + 4) = v40;
          v41 = v40 + 8;
          v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
          *v42 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v42 + v41;
          *((_QWORD *)this + 3) = v42;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 39;
        goto LABEL_89;
      case 3:
        v43 = *((_DWORD *)this + 24);
        if (!v43)
          goto LABEL_122;
        v44 = v43 - 1;
        v8 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v44);
        if (*((_WORD *)v8 + 8) != 232)
          goto LABEL_122;
        *((_DWORD *)this + 24) = v44;
        if (!v14)
          goto LABEL_122;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v45 = 2 * *((_QWORD *)this + 4);
          if (v45 <= 0x20)
            v45 = 32;
          *((_QWORD *)this + 4) = v45;
          v46 = v45 + 8;
          v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
          *v47 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v47 + v46;
          *((_QWORD *)this + 3) = v47;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 40;
        goto LABEL_89;
      case 4:
        v48 = *((_QWORD *)this + 9);
        if (v48 >= *((_QWORD *)this + 8))
          goto LABEL_122;
        v31 = 0;
        *((_QWORD *)this + 9) = v48 + 1;
        v49 = "U";
        v50 = 0;
        switch(*(_BYTE *)(*((_QWORD *)this + 7) + v48))
        {
          case 'B':
            v31 = 0;
            v50 = 0;
            v49 = "B";
            goto LABEL_106;
          case 'C':
            v31 = 0;
            v50 = 0;
            v49 = "C";
            goto LABEL_106;
          case 'D':
            v31 = 0;
            v50 = 0;
            v49 = "D";
            goto LABEL_106;
          case 'E':
            v31 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            if (!v31)
              return v31;
            v50 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
            v49 = "E";
            goto LABEL_106;
          case 'M':
            v31 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            if (!v31)
              return v31;
            v50 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
            v49 = "M";
            goto LABEL_106;
          case 'N':
            v31 = 0;
            v50 = 0;
            v49 = "N";
            goto LABEL_106;
          case 'R':
            v31 = 0;
            v50 = 0;
            v49 = "R";
            goto LABEL_106;
          case 'S':
            v59 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            v50 = 0;
            if (!v59)
              return 0;
            v31 = v59;
            v49 = "S";
            goto LABEL_106;
          case 'T':
            v31 = 0;
            v50 = 0;
            v49 = "T";
            goto LABEL_106;
          case 'U':
            goto LABEL_106;
          case 'e':
            v60 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            v50 = 0;
            if (!v60)
              return 0;
            v31 = v60;
            v49 = "e";
            goto LABEL_106;
          case 'm':
            v61 = swift::Demangle::Demangler::demangleIndexAsNode(this);
            v50 = 0;
            if (!v61)
              return 0;
            v31 = v61;
            v49 = "m";
LABEL_106:
            v62 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v62;
            if (!v62 || v62 + 24 > *((_QWORD *)this + 2))
            {
              v63 = 2 * *((_QWORD *)this + 4);
              if (v63 <= 0x20)
                v63 = 32;
              *((_QWORD *)this + 4) = v63;
              v64 = v63 + 8;
              v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
              *v65 = *((_QWORD *)this + 3);
              v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v65 + v64;
              *((_QWORD *)this + 3) = v65;
            }
            *((_QWORD *)this + 1) = v62 + 24;
            *(_WORD *)(v62 + 16) = 101;
            *(_BYTE *)(v62 + 18) = 3;
            *(_QWORD *)v62 = v49;
            *(_QWORD *)(v62 + 8) = 1;
            if (!v14)
              goto LABEL_122;
            v66 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 1) = v66;
            if (!v66 || v66 + 24 > *((_QWORD *)this + 2))
            {
              v67 = 2 * *((_QWORD *)this + 4);
              if (v67 <= 0x20)
                v67 = 32;
              *((_QWORD *)this + 4) = v67;
              v68 = v67 + 8;
              v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
              *v69 = *((_QWORD *)this + 3);
              v66 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 2) = (char *)v69 + v68;
              *((_QWORD *)this + 3) = v69;
            }
            *((_QWORD *)this + 1) = v66 + 24;
            *(_WORD *)(v66 + 16) = 41;
            *(_BYTE *)(v66 + 18) = 0;
            swift::Demangle::Node::addChild((unsigned int *)v66, (swift::Demangle::Node *)v14, this, a4, a5);
            swift::Demangle::Node::addChild((unsigned int *)v66, (swift::Demangle::Node *)v62, this, v70, v71);
            if (v31)
              swift::Demangle::Node::addChild((unsigned int *)v66, (swift::Demangle::Node *)v31, this, v72, v73);
            if (v50)
              swift::Demangle::Node::addChild((unsigned int *)v66, v50, this, v72, v73);
            v31 = v66;
            break;
          default:
            return v31;
        }
        return v31;
      case 5:
        if (!v14)
          goto LABEL_122;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v51 = 2 * *((_QWORD *)this + 4);
          if (v51 <= 0x20)
            v51 = 32;
          *((_QWORD *)this + 4) = v51;
          v52 = v51 + 8;
          v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
          *v53 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v53 + v52;
          *((_QWORD *)this + 3) = v53;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        *(_WORD *)(v31 + 16) = 42;
        *(_BYTE *)(v31 + 18) = 0;
        v54 = (unsigned int *)v31;
        v55 = (swift::Demangle::Node *)v14;
        goto LABEL_90;
      case 6:
        v31 = 0;
        if (!v8 || !v14)
          return v31;
        v31 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v31;
        if (!v31 || v31 + 24 > *((_QWORD *)this + 2))
        {
          v56 = 2 * *((_QWORD *)this + 4);
          if (v56 <= 0x20)
            v56 = 32;
          *((_QWORD *)this + 4) = v56;
          v57 = v56 + 8;
          v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
          *v58 = *((_QWORD *)this + 3);
          v31 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v58 + v57;
          *((_QWORD *)this + 3) = v58;
        }
        *((_QWORD *)this + 1) = v31 + 24;
        v37 = 354;
LABEL_89:
        *(_WORD *)(v31 + 16) = v37;
        *(_BYTE *)(v31 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v31, (swift::Demangle::Node *)v14, this, a4, a5);
        v54 = (unsigned int *)v31;
        v55 = v8;
LABEL_90:
        swift::Demangle::Node::addChild(v54, v55, this, a4, a5);
        break;
      default:
        goto LABEL_122;
    }
  }
  else
  {
    v7 = v6 + 1;
    *((_QWORD *)this + 9) = v6 + 1;
    v8 = 0;
    v9 = 1;
    v10 = 5;
    switch(*(_BYTE *)(*((_QWORD *)this + 7) + v6))
    {
      case 'B':
        goto LABEL_20;
      case 'C':
        goto LABEL_25;
      case 'I':
        v11 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        if (!v11)
          goto LABEL_122;
        v8 = (swift::Demangle::Node *)v11;
        v9 = 6;
LABEL_20:
        v18 = *((_DWORD *)this + 24);
        if (v18 && (v19 = v18 - 1, v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v19), *(_WORD *)(v14 + 16) == 232))
          *((_DWORD *)this + 24) = v19;
        else
          v14 = 0;
        goto LABEL_39;
      case 'L':
        v8 = 0;
        v9 = 4;
        goto LABEL_20;
      case 'M':
        v9 = 4;
        goto LABEL_25;
      case 'P':
        v9 = 0;
        goto LABEL_25;
      case 'Q':
        v9 = 0;
        v8 = 0;
        goto LABEL_20;
      case 'S':
        v8 = 0;
        v9 = 2;
        goto LABEL_20;
      case 'T':
        v9 = 2;
LABEL_25:
        v20 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
        v24 = swift::Demangle::Demangler::demangleAssociatedTypeCompound(this, v20, v21, v22, v23);
        goto LABEL_36;
      case 'b':
        v8 = 0;
        v10 = 1;
        goto LABEL_7;
      case 'c':
        goto LABEL_35;
      case 'h':
        v8 = 0;
        v10 = 3;
        goto LABEL_7;
      case 'i':
        v25 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        if (v25)
        {
          v8 = (swift::Demangle::Node *)v25;
          v10 = 6;
          goto LABEL_7;
        }
LABEL_122:
        v31 = 0;
        break;
      case 'l':
        v8 = 0;
        v10 = 4;
        goto LABEL_7;
      case 'm':
        v9 = 4;
        goto LABEL_35;
      case 'p':
        v9 = 0;
        goto LABEL_35;
      case 's':
        v8 = 0;
        v10 = 2;
        goto LABEL_7;
      case 't':
        v9 = 2;
LABEL_35:
        v26 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleGenericParamIndex(this, a2, a3, a4, a5);
        v24 = swift::Demangle::Demangler::demangleAssociatedTypeSimple(this, v26, v27, v28, v29);
LABEL_36:
        v14 = v24;
        v75 = v24;
        if (v24)
          swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v75, this);
        v8 = 0;
LABEL_39:
        v10 = v9;
        goto LABEL_40;
      case 'v':
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  return v31;
}

unint64_t swift::Demangle::Demangler::demangleStandardSubstitution(swift::Demangle::Demangler *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  unint64_t StandardSubstitution;
  unsigned int v15;
  unint64_t SwiftType;
  uint64_t v18;
  const char *v19;
  int v20;
  unsigned int v21;
  swift::Demangle::Node *v22;
  swift::Demangle::Node *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;

  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  if (v3 < v2)
  {
    *((_QWORD *)this + 9) = v3 + 1;
    v4 = *(char *)(*((_QWORD *)this + 7) + v3);
    if (v4 == 67)
    {
      v5 = "__C_Synthesized";
      v6 = 15;
      return swift::Demangle::NodeFactory::createNode(this, 153, v5, v6);
    }
    if (v4 == 103)
    {
      SwiftType = swift::Demangle::Demangler::createSwiftType(this, 61, "Optional");
      v20 = *((_DWORD *)this + 24);
      if (v20)
      {
        v21 = v20 - 1;
        v22 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v21);
        if (*((_WORD *)v22 + 8) == 232)
        {
          v23 = (swift::Demangle::Node *)SwiftType;
          *((_DWORD *)this + 24) = v21;
          v24 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v24;
          if (!v24 || v24 + 24 > *((_QWORD *)this + 2))
          {
            v25 = 2 * *((_QWORD *)this + 4);
            if (v25 <= 0x20)
              v25 = 32;
            *((_QWORD *)this + 4) = v25;
            v26 = v25 + 8;
            v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
            *v27 = *((_QWORD *)this + 3);
            v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = (char *)v27 + v26;
            *((_QWORD *)this + 3) = v27;
          }
          *((_QWORD *)this + 1) = v24 + 24;
          *(_WORD *)(v24 + 16) = 235;
          *(_BYTE *)(v24 + 18) = 0;
          swift::Demangle::Node::addChild((unsigned int *)v24, v22, this, v18, v19);
          if (v23)
          {
            if (v24)
            {
              v30 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = v30;
              if (!v30 || v30 + 24 > *((_QWORD *)this + 2))
              {
                v31 = 2 * *((_QWORD *)this + 4);
                if (v31 <= 0x20)
                  v31 = 32;
                *((_QWORD *)this + 4) = v31;
                v32 = v31 + 8;
                v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
                *v33 = *((_QWORD *)this + 3);
                v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = (char *)v33 + v32;
                *((_QWORD *)this + 3) = v33;
              }
              *((_QWORD *)this + 1) = v30 + 24;
              *(_WORD *)(v30 + 16) = 14;
              *(_BYTE *)(v30 + 18) = 0;
              swift::Demangle::Node::addChild((unsigned int *)v30, v23, this, v28, v29);
              swift::Demangle::Node::addChild((unsigned int *)v30, (swift::Demangle::Node *)v24, this, v34, v35);
              StandardSubstitution = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)this + 1) = StandardSubstitution;
              if (!StandardSubstitution || StandardSubstitution + 24 > *((_QWORD *)this + 2))
              {
                v38 = 2 * *((_QWORD *)this + 4);
                if (v38 <= 0x20)
                  v38 = 32;
                *((_QWORD *)this + 4) = v38;
                v39 = v38 + 8;
                v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
                *v40 = *((_QWORD *)this + 3);
                StandardSubstitution = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((_QWORD *)this + 2) = (char *)v40 + v39;
                *((_QWORD *)this + 3) = v40;
              }
              *((_QWORD *)this + 1) = StandardSubstitution + 24;
              *(_WORD *)(StandardSubstitution + 16) = 232;
              *(_BYTE *)(StandardSubstitution + 18) = 0;
              swift::Demangle::Node::addChild((unsigned int *)StandardSubstitution, (swift::Demangle::Node *)v30, this, v36, v37);
              v41 = StandardSubstitution;
              swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 13, (uint64_t *)&v41, this);
              return StandardSubstitution;
            }
          }
        }
      }
      return 0;
    }
    ++v3;
    if (v4 == 111)
    {
      v5 = "__C";
      v6 = 3;
      return swift::Demangle::NodeFactory::createNode(this, 153, v5, v6);
    }
  }
  v7 = v3 - 1;
  *((_QWORD *)this + 9) = v7;
  if (v7 >= v2 || (v8 = *((_QWORD *)this + 7), *(unsigned __int8 *)(v8 + v7) - 48 > 9))
  {
LABEL_16:
    v9 = -1000;
    if (v7 >= v2)
      goto LABEL_20;
    goto LABEL_17;
  }
  v9 = 0;
  while (1)
  {
    v10 = *(unsigned __int8 *)(v8 + v7);
    if ((v10 - 48) > 9)
      break;
    v11 = v10 + 10 * v9 - 48;
    if (v11 < v9)
      goto LABEL_16;
    *((_QWORD *)this + 9) = ++v7;
    v9 = v11;
    if (v2 == v7)
    {
      v7 = v2;
      v9 = v11;
      break;
    }
  }
  if (v9 <= 2048)
  {
    if (v7 >= v2)
      goto LABEL_20;
LABEL_17:
    if (*(_BYTE *)(*((_QWORD *)this + 7) + v7) == 99)
    {
      *((_QWORD *)this + 9) = ++v7;
      v12 = 1;
      if (v7 >= v2)
      {
LABEL_19:
        v13 = 0;
LABEL_22:
        StandardSubstitution = swift::Demangle::Demangler::createStandardSubstitution(this, v13, v12);
        if (StandardSubstitution && v9 >= 2)
        {
          v15 = v9 + 1;
          do
          {
            v41 = StandardSubstitution;
            swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 11, (uint64_t *)&v41, this);
            --v15;
          }
          while (v15 > 2);
        }
        return StandardSubstitution;
      }
LABEL_21:
      *((_QWORD *)this + 9) = v7 + 1;
      v13 = *(_BYTE *)(*((_QWORD *)this + 7) + v7);
      goto LABEL_22;
    }
LABEL_20:
    v12 = 0;
    if (v7 >= v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  return 0;
}

int8x16_t *swift::Demangle::Demangler::demangleThunkOrSpecialization(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  swift::Demangle::Demangler *v7;
  unint64_t Node;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  char v17;
  unint64_t v18;
  __int16 v19;
  swift::Demangle::Node *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  swift::Demangle::Node *v28;
  int v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  int v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t *v54;
  uint64_t v55;
  __int128 v56;
  __int16 v57;
  __int16 v58;
  int v59;
  unsigned int v60;
  swift::Demangle::Node *v61;
  int v62;
  __int16 v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  int8x16_t *v70;
  int v71;
  unsigned int v72;
  swift::Demangle::Node *v73;
  __int16 v74;
  int v75;
  int v76;
  swift::Demangle::Node *v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  swift::Demangle::Node *v82;
  uint64_t v83;
  const char *v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned __int16 *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  swift::Demangle::Node *v93;
  int v94;
  unsigned int v95;
  unsigned int *v96;
  int v97;
  int v98;
  int v99;
  char v100;
  size_t v101;
  std::string *p_p;
  int v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  const char *v114;
  unsigned int *v115;
  int v116;
  unsigned int v117;
  swift::Demangle::Node *v118;
  swift::Demangle::Node *v119;
  uint64_t v120;
  const char *v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  int v131;
  swift::Demangle::Node *v132;
  swift::Demangle::Node *v133;
  swift::Demangle::Node *v134;
  unsigned int v135;
  swift::Demangle::Node *v136;
  unsigned int *v137;
  swift::Demangle::NodeFactory *v138;
  __int16 v139;
  swift::Demangle::NodeFactory *v140;
  __int16 v141;
  __int16 v142;
  unsigned int v143;
  swift::Demangle::Node *v144;
  __int16 v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  const char *v149;
  std::string::size_type v150;
  std::string::size_type v151;
  swift::Demangle::Node *v152;
  swift::Demangle::Node *v153;
  uint64_t v154;
  const char *v155;
  std::string::size_type v156;
  uint64_t v157;
  _BYTE *size;
  std::string::size_type v159;
  std::string::size_type v160;
  uint64_t v161;
  unint64_t v162;
  int64_t v163;
  unint64_t v164;
  _BYTE *v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  _OWORD *v171;
  __int128 *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  unsigned int v176;
  swift::Demangle::Node *v177;
  unint64_t v178;
  uint64_t v179;
  const char *v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  swift::Demangle::Node *v184;
  swift::Demangle::Node *v185;
  uint64_t v186;
  const char *v187;
  __int16 v188;
  int v189;
  char v190;
  unsigned __int16 *v191;
  std::string __p;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v7 = this;
  Node = 0;
  v9 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v10 = *((_QWORD *)this + 7);
  v11 = *(unsigned __int8 *)(v10 + v5);
  switch(*(_BYTE *)(v10 + v5))
  {
    case 'A':
      v57 = 170;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'B':
      v58 = 93;
      return (int8x16_t *)swift::Demangle::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'C':
      v59 = *((_DWORD *)this + 24);
      if (v59
        && (v60 = v59 - 1,
            v61 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v60),
            *((_WORD *)v61 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v60;
      }
      else
      {
        v61 = 0;
      }
      v64 = 30;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'D':
      v57 = 55;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'E':
      v57 = 53;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'F':
      v57 = 54;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'G':
      v58 = 92;
      return (int8x16_t *)swift::Demangle::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'H':
    case 'h':
      if (v11 == 72)
        v14 = 133;
      else
        v14 = 134;
      if (v9 < v6 && *(_BYTE *)(v10 + v9) == 113)
      {
        *((_QWORD *)this + 9) = v5 + 2;
        v15 = 1;
      }
      else
      {
        v15 = 0;
      }
      memset(&__p, 0, sizeof(__p));
      v29 = *((_DWORD *)this + 24);
      if (!v29)
        goto LABEL_274;
      v30 = v29 - 1;
      v31 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v29 - 1));
      *((_DWORD *)this + 24) = v29 - 1;
      v191 = v31;
      if (!v31)
        goto LABEL_274;
      v32 = v31[8];
      if (v32 == 43)
      {
        v188 = v14;
        v189 = v15;
      }
      else
      {
        if (v32 != 232)
        {
LABEL_274:
          Node = 0;
          goto LABEL_275;
        }
        v188 = v14;
        v189 = v15;
        std::vector<swift::Demangle::Node *>::push_back[abi:nn180100]((void **)&__p.__r_.__value_.__l.__data_, &v191);
        v31 = 0;
        v30 = *((_DWORD *)v7 + 24);
      }
      for (; v30; __p.__r_.__value_.__l.__size_ = v156)
      {
        v157 = *(_QWORD *)(*((_QWORD *)v7 + 11) + 8 * --v30);
        *((_DWORD *)v7 + 24) = v30;
        if (!v157)
          break;
        if (*(_WORD *)(v157 + 16) != 232)
          goto LABEL_274;
        size = (_BYTE *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)__p.__r_.__value_.__l.__size_ = v157;
          v156 = (std::string::size_type)(size + 8);
        }
        else
        {
          v159 = __p.__r_.__value_.__r.__words[0];
          v160 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          v161 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          v162 = v161 + 1;
          if ((unint64_t)(v161 + 1) >> 61)
            goto LABEL_302;
          v163 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v162)
            v162 = v163 >> 2;
          if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
            v164 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v164 = v162;
          if (v164)
          {
            if (v164 >> 61)
              goto LABEL_303;
            v165 = operator new(8 * v164);
          }
          else
          {
            v165 = 0;
          }
          v166 = &v165[8 * v161];
          *v166 = v157;
          v156 = (std::string::size_type)(v166 + 1);
          if (size != (_BYTE *)v159)
          {
            v167 = (unint64_t)&size[-v159 - 8];
            if (v167 < 0x58)
              goto LABEL_306;
            if ((unint64_t)(size - &v165[v160]) < 0x20)
              goto LABEL_306;
            v168 = (v167 >> 3) + 1;
            v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
            v170 = &size[-v169];
            v166 = (_QWORD *)((char *)v166 - v169);
            v171 = &v165[8 * v161 - 16];
            v172 = (__int128 *)(size - 16);
            v173 = v168 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v174 = *v172;
              *(v171 - 1) = *(v172 - 1);
              *v171 = v174;
              v171 -= 2;
              v172 -= 2;
              v173 -= 4;
            }
            while (v173);
            size = v170;
            if (v168 != (v168 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_306:
              do
              {
                v175 = *((_QWORD *)size - 1);
                size -= 8;
                *--v166 = v175;
              }
              while (size != (_BYTE *)v159);
            }
            size = (_BYTE *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
          __p.__r_.__value_.__l.__size_ = v156;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v165[8 * v164];
          if (size)
          {
            operator delete(size);
            v30 = *((_DWORD *)v7 + 24);
          }
        }
      }
      Node = swift::Demangle::NodeFactory::createNode(v7, v188);
      v150 = __p.__r_.__value_.__l.__size_;
      v151 = __p.__r_.__value_.__r.__words[0];
      while (v150 != v151)
      {
        v152 = *(swift::Demangle::Node **)(v150 - 8);
        v150 -= 8;
        swift::Demangle::Node::addChild((unsigned int *)Node, v152, v7, v148, v149);
      }
      if (v31)
        swift::Demangle::Node::addChild((unsigned int *)Node, (swift::Demangle::Node *)v31, v7, v148, v149);
      if (v189)
      {
        v153 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v7, 217);
        swift::Demangle::Node::addChild((unsigned int *)Node, v153, v7, v154, v155);
      }
LABEL_275:
      v147 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        return (int8x16_t *)Node;
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      goto LABEL_277;
    case 'I':
      v57 = 58;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'J':
      if (v9 >= v6)
        goto LABEL_211;
      v62 = *(char *)(v10 + v9);
      if (v62 == 79)
      {
        *((_QWORD *)this + 9) = v5 + 2;
        return swift::Demangle::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(this, a2, a3, a4, a5);
      }
      else
      {
        if (v62 == 86)
        {
          *((_QWORD *)this + 9) = v5 + 2;
          v142 = 324;
        }
        else
        {
          if (v62 == 83)
          {
            *((_QWORD *)this + 9) = v5 + 2;
            return (int8x16_t *)swift::Demangle::Demangler::demangleAutoDiffSubsetParametersThunk(this, a2, a3, a4, a5);
          }
LABEL_211:
          v142 = 320;
        }
        return (int8x16_t *)swift::Demangle::Demangler::demangleAutoDiffFunctionOrSimpleThunk(this, v142, a3, a4, a5);
      }
    case 'K':
    case 'k':
      if (v11 == 75)
        v16 = 131;
      else
        v16 = 132;
      if (v9 < v6 && *(_BYTE *)(v10 + v9) == 113)
      {
        *((_QWORD *)this + 9) = v5 + 2;
        v17 = 1;
      }
      else
      {
        v17 = 0;
      }
      v33 = *((_DWORD *)this + 24);
      if (!v33)
        return 0;
      v34 = v33 - 1;
      Node = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v33 - 1));
      *((_DWORD *)this + 24) = v33 - 1;
      if (!Node)
        return (int8x16_t *)Node;
      if (*(_WORD *)(Node + 16) != 232)
        return 0;
      v190 = v17;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      break;
    case 'L':
      v61 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
      this = v7;
      v64 = 266;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'M':
      v61 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAssocTypeName(this, a2, a3, a4, a5);
      this = v7;
      v64 = 7;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'N':
      v65 = (char *)swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
      v70 = swift::Demangle::Demangler::popAssocTypePath(v7, v66, v67, v68, v69);
      v71 = *((_DWORD *)v7 + 24);
      if (v71
        && (v72 = v71 - 1,
            v73 = *(swift::Demangle::Node **)(*((_QWORD *)v7 + 11) + 8 * v72),
            *((_WORD *)v73 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v72;
      }
      else
      {
        v73 = 0;
      }
      v138 = v7;
      v139 = 268;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v138, v139, v73, (swift::Demangle::Node *)v70, v65);
    case 'O':
      v57 = 160;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'P':
      v74 = 87;
      goto LABEL_151;
    case 'Q':
    case 'Y':
      v18 = swift::Demangle::Demangler::demangleIndexAsNode(this);
      if (v11 == 81)
        v19 = 328;
      else
        v19 = 329;
      if (!v18)
        return 0;
      v20 = (swift::Demangle::Node *)v18;
      Node = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)v7 + 2))
      {
        v21 = 2 * *((_QWORD *)v7 + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)v7 + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        *v23 = *((_QWORD *)v7 + 3);
        Node = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v23 + v22;
        *((_QWORD *)v7 + 3) = v23;
      }
      *((_QWORD *)v7 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v19;
      *(_BYTE *)(Node + 18) = 0;
      goto LABEL_234;
    case 'R':
    case 'r':
    case 'y':
      if (v11 == 82)
      {
        v13 = 0;
        v12 = 201;
      }
      else if (v11 == 121)
      {
        v12 = 202;
        v13 = 1;
      }
      else
      {
        v13 = 0;
        v12 = 200;
      }
      Node = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = Node;
      if (!Node || Node + 24 > *((_QWORD *)this + 2))
      {
        v128 = 2 * *((_QWORD *)this + 4);
        if (v128 <= 0x20)
          v128 = 32;
        *((_QWORD *)this + 4) = v128;
        v129 = v128 + 8;
        v130 = malloc_type_malloc(v128 + 8, 0xD0263BC5uLL);
        *v130 = *((_QWORD *)v7 + 3);
        Node = ((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v130 + v129;
        *((_QWORD *)v7 + 3) = v130;
      }
      *((_QWORD *)v7 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v12;
      *(_BYTE *)(Node + 18) = 0;
      v131 = *((_DWORD *)v7 + 24);
      if (!v131)
        return (int8x16_t *)Node;
      v132 = *(swift::Demangle::Node **)(*((_QWORD *)v7 + 11) + 8 * (v131 - 1));
      if (*((_WORD *)v132 + 8) == 43)
      {
        *((_DWORD *)v7 + 24) = v131 - 1;
        swift::Demangle::Node::addChild((unsigned int *)Node, v132, v7, a4, a5);
        v131 = *((_DWORD *)v7 + 24);
      }
      if (!v13)
        goto LABEL_192;
      if (!v131)
        return (int8x16_t *)Node;
      v133 = *(swift::Demangle::Node **)(*((_QWORD *)v7 + 11) + 8 * (v131 - 1));
      if (*((_WORD *)v133 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v131 - 1;
        swift::Demangle::Node::addChild((unsigned int *)Node, v133, v7, a4, a5);
        v131 = *((_DWORD *)v7 + 24);
LABEL_192:
        if (!v131)
          return (int8x16_t *)Node;
      }
      v134 = *(swift::Demangle::Node **)(*((_QWORD *)v7 + 11) + 8 * (v131 - 1));
      if (*((_WORD *)v134 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v131 - 1;
        swift::Demangle::Node::addChild((unsigned int *)Node, v134, v7, a4, a5);
        v131 = *((_DWORD *)v7 + 24);
        if (!v131)
          return (int8x16_t *)Node;
      }
      v135 = v131 - 1;
      v136 = *(swift::Demangle::Node **)(*((_QWORD *)v7 + 11) + 8 * v135);
      if (*((_WORD *)v136 + 8) != 232)
        return (int8x16_t *)Node;
      *((_DWORD *)v7 + 24) = v135;
      v137 = (unsigned int *)Node;
      goto LABEL_235;
    case 'S':
      v75 = *((_DWORD *)this + 24);
      if (v75
        && ((v76 = v75 - 1,
             v77 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v75 - 1)),
             v78 = *((unsigned __int16 *)v77 + 8),
             v78 == 232)
         || swift::Demangle::isContext(v78)))
      {
        *((_DWORD *)v7 + 24) = v76;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 194;
      goto LABEL_223;
    case 'U':
      v79 = *((_DWORD *)this + 24);
      if (!v79)
        return 0;
      v80 = *((_QWORD *)this + 11);
      v20 = *(swift::Demangle::Node **)(v80 + 8 * (v79 - 1));
      if (*((_WORD *)v20 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v79 - 1;
      if (v79 == 1)
        return 0;
      v81 = v79 - 2;
      v82 = *(swift::Demangle::Node **)(v80 + 8 * v81);
      *((_DWORD *)this + 24) = v81;
      if (!v82)
        return 0;
      Node = swift::Demangle::NodeFactory::createNode(this, 203);
      swift::Demangle::Node::addChild((unsigned int *)Node, v82, v7, v83, v84);
      goto LABEL_234;
    case 'V':
      v85 = *((_DWORD *)this + 24);
      if (v85)
      {
        v86 = v85 - 1;
        v87 = *((_QWORD *)this + 11);
        v88 = *(unsigned __int16 **)(v87 + 8 * (v85 - 1));
        v89 = v88[8];
        if (v89 == 232 || swift::Demangle::isContext(v89))
        {
          *((_DWORD *)v7 + 24) = v86;
          if (v85 == 1)
            goto LABEL_287;
        }
        else
        {
          v88 = 0;
          v86 = v85;
        }
        v181 = v86 - 1;
        v182 = *(_QWORD *)(v87 + 8 * v181);
        v183 = *(unsigned __int16 *)(v182 + 16);
        if (v183 == 232 || swift::Demangle::isContext(v183))
        {
          *((_DWORD *)v7 + 24) = v181;
          goto LABEL_288;
        }
      }
      else
      {
        v88 = 0;
      }
LABEL_287:
      v182 = 0;
LABEL_288:
      v140 = v7;
      v141 = 255;
      v96 = (unsigned int *)v182;
LABEL_289:
      v93 = (swift::Demangle::Node *)v88;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v140, v141, (swift::Demangle::Node *)v96, v93, a5);
    case 'W':
      v90 = *((_DWORD *)this + 24);
      if (v90
        && ((v91 = v90 - 1,
             v88 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v90 - 1)),
             v92 = v88[8],
             v92 == 232)
         || swift::Demangle::isContext(v92)))
      {
        *((_DWORD *)v7 + 24) = v91;
      }
      else
      {
        v88 = 0;
      }
      v96 = swift::Demangle::Demangler::popProtocolConformance(v7, a2, a3, a4, a5);
      v140 = v7;
      v141 = 196;
      goto LABEL_289;
    case 'X':
      v57 = 60;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'Z':
    case 'z':
      v24 = (char *)swift::Demangle::Demangler::demangleIndexAsNode(this);
      v25 = *((_DWORD *)v7 + 24);
      if (!v25)
      {
        v28 = 0;
        v20 = 0;
        goto LABEL_228;
      }
      v26 = v25 - 1;
      v27 = *((_QWORD *)v7 + 11);
      v20 = *(swift::Demangle::Node **)(v27 + 8 * (v25 - 1));
      if (*((_WORD *)v20 + 8) == 43)
      {
        *((_DWORD *)v7 + 24) = v26;
        if (v25 == 1)
        {
          v28 = 0;
          goto LABEL_228;
        }
      }
      else
      {
        v20 = 0;
        v26 = *((_DWORD *)v7 + 24);
      }
      v28 = *(swift::Demangle::Node **)(v27 + 8 * (v26 - 1));
      if (*((_WORD *)v28 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v26 - 1;
        if (v26 == 1)
          goto LABEL_228;
        --v26;
      }
      else
      {
        v28 = 0;
      }
      v143 = v26 - 1;
      v144 = *(swift::Demangle::Node **)(v27 + 8 * v143);
      if (*((_WORD *)v144 + 8) == 232)
      {
        *((_DWORD *)v7 + 24) = v143;
        goto LABEL_229;
      }
LABEL_228:
      v144 = 0;
LABEL_229:
      if (v11 == 122)
        v145 = 162;
      else
        v145 = 163;
      v146 = swift::Demangle::Demangler::createWithChildren(v7, v145, v144, v28, v24);
      Node = v146;
      if (v20 && v146)
      {
LABEL_234:
        v137 = (unsigned int *)Node;
        v136 = v20;
LABEL_235:
        swift::Demangle::Node::addChild(v137, v136, v7, a4, a5);
      }
      return (int8x16_t *)Node;
    case 'a':
      v57 = 171;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'b':
      v93 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
      v94 = *((_DWORD *)v7 + 24);
      if (v94
        && (v95 = v94 - 1, v96 = *(unsigned int **)(*((_QWORD *)v7 + 11) + 8 * v95), *((_WORD *)v96 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v95;
      }
      else
      {
        v96 = 0;
      }
      v140 = v7;
      v141 = 269;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v140, v141, (swift::Demangle::Node *)v96, v93, a5);
    case 'c':
      v97 = *((_DWORD *)this + 24);
      if (v97
        && ((v98 = v97 - 1,
             v77 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v97 - 1)),
             v99 = *((unsigned __int16 *)v77 + 8),
             v99 == 232)
         || swift::Demangle::isContext(v99)))
      {
        *((_DWORD *)v7 + 24) = v98;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 263;
      goto LABEL_223;
    case 'd':
      v57 = 56;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'e':
      swift::Demangle::Demangler::demangleBridgedMethodParams(this, &__p);
      v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v101 = __p.__r_.__value_.__l.__size_;
      if (v101)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        Node = swift::Demangle::NodeFactory::createNode(v7, 277, p_p, v101);
        v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        Node = 0;
      }
      if ((v100 & 0x80) == 0)
        return (int8x16_t *)Node;
      v147 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_277;
    case 'f':
      return (int8x16_t *)swift::Demangle::Demangler::demangleFunctionSpecialization(this, a2, a3, a4, a5);
    case 'g':
      v58 = 91;
      return (int8x16_t *)swift::Demangle::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'i':
      v58 = 96;
      return (int8x16_t *)swift::Demangle::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'j':
      v103 = *((_DWORD *)this + 24);
      if (v103
        && ((v104 = v103 - 1,
             v77 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v103 - 1)),
             v105 = *((unsigned __int16 *)v77 + 8),
             v105 == 232)
         || swift::Demangle::isContext(v105)))
      {
        *((_DWORD *)v7 + 24) = v104;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 264;
      goto LABEL_223;
    case 'l':
      v106 = swift::Demangle::Demangler::popAssocTypeName(this, a2, a3, a4, a5);
      if (!v106)
        return 0;
      v61 = (swift::Demangle::Node *)v106;
      this = v7;
      v64 = 270;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 'm':
      v57 = 144;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'n':
      v65 = (char *)swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
      v70 = swift::Demangle::Demangler::popAssocTypePath(v7, v107, v108, v109, v110);
      v111 = *((_DWORD *)v7 + 24);
      if (v111
        && (v112 = v111 - 1,
            v73 = *(swift::Demangle::Node **)(*((_QWORD *)v7 + 11) + 8 * v112),
            *((_WORD *)v73 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v112;
      }
      else
      {
        v73 = 0;
      }
      v138 = v7;
      v139 = 267;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChildren(v138, v139, v73, (swift::Demangle::Node *)v70, v65);
    case 'o':
      v57 = 164;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'p':
      v74 = 86;
LABEL_151:
      v115 = (unsigned int *)swift::Demangle::Demangler::demangleSpecAttributes(this, v74, a3, a4, a5);
      v116 = *((_DWORD *)v7 + 24);
      if (v116
        && (v117 = v116 - 1,
            v118 = *(swift::Demangle::Node **)(*((_QWORD *)v7 + 11) + 8 * v117),
            *((_WORD *)v118 + 8) == 232))
      {
        *((_DWORD *)v7 + 24) = v117;
      }
      else
      {
        v118 = 0;
      }
      v119 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChild(v7, 94, v118, v113, v114);
      Node = 0;
      if (v115 && v119)
      {
        swift::Demangle::Node::addChild(v115, v119, v7, v120, v121);
        return (int8x16_t *)v115;
      }
      return (int8x16_t *)Node;
    case 'q':
      v122 = *((_DWORD *)this + 24);
      if (v122
        && ((v123 = v122 - 1,
             v77 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v122 - 1)),
             v124 = *((unsigned __int16 *)v77 + 8),
             v124 == 232)
         || swift::Demangle::isContext(v124)))
      {
        *((_DWORD *)v7 + 24) = v123;
      }
      else
      {
        v77 = 0;
      }
      this = v7;
      v64 = 265;
LABEL_223:
      v61 = v77;
      return (int8x16_t *)swift::Demangle::Demangler::createWithChild(this, v64, v61, a4, a5);
    case 's':
      v58 = 95;
      return (int8x16_t *)swift::Demangle::Demangler::demangleGenericSpecialization(this, v58, a3, a4, a5);
    case 'u':
      v57 = 319;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'v':
      v125 = swift::Demangle::Demangler::demangleIndex(this);
      if ((v125 & 0x80000000) != 0)
        return 0;
      v126 = *((_QWORD *)v7 + 9);
      if (v126 < *((_QWORD *)v7 + 8) && (*((_QWORD *)v7 + 9) = v126 + 1, *(_BYTE *)(*((_QWORD *)v7 + 7) + v126) == 114))
        return (int8x16_t *)swift::Demangle::NodeFactory::createNode(v7, 288, v125);
      else
        return (int8x16_t *)swift::Demangle::NodeFactory::createNode(v7, 287, v125);
    case 'w':
      if (v9 >= v6)
        return 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v127 = *(char *)(v10 + v9);
      switch(v127)
      {
        case 'B':
          v57 = 333;
          break;
        case 'S':
          v57 = 340;
          break;
        case 'b':
          v57 = 332;
          break;
        default:
          return 0;
      }
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    case 'x':
      v57 = 59;
      return (int8x16_t *)swift::Demangle::NodeFactory::createNode(this, v57);
    default:
      return (int8x16_t *)Node;
  }
  do
  {
    if (v36 < v35)
    {
      *v36++ = Node;
      v38 = v34;
      goto LABEL_64;
    }
    v39 = v36 - v37;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61)
LABEL_302:
      abort();
    if (((char *)v35 - (char *)v37) >> 2 > v40)
      v40 = ((char *)v35 - (char *)v37) >> 2;
    if ((unint64_t)((char *)v35 - (char *)v37) >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v40;
    if (v41)
    {
      if (v41 >> 61)
LABEL_303:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v42 = (char *)operator new(8 * v41);
    }
    else
    {
      v42 = 0;
    }
    v43 = (unint64_t *)&v42[8 * v39];
    *v43 = Node;
    v44 = v43 + 1;
    if (v36 != v37)
    {
      v45 = (char *)v36 - (char *)v37 - 8;
      if (v45 >= 0x168)
      {
        v50 = ((char *)(v36 - 1) - (char *)v37) & 0xFFFFFFFFFFFFFFF8;
        if (&v42[(char *)v36 - (char *)v37 - 8 - v50] > &v42[(char *)v36 - (char *)v37 - 8])
        {
          v46 = v36;
        }
        else if ((unint64_t *)((char *)v36 - v50 - 8) > v36 - 1)
        {
          v46 = v36;
        }
        else if ((unint64_t)((char *)v37 - v42) >= 0x20)
        {
          v51 = (v45 >> 3) + 1;
          v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v36[v52 / 0xFFFFFFFFFFFFFFF8];
          v43 = (unint64_t *)((char *)v43 - v52);
          v53 = &v42[8 * v39 - 16];
          v54 = v36 - 2;
          v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *(_OWORD *)v54;
            *((_OWORD *)v53 - 1) = *((_OWORD *)v54 - 1);
            *(_OWORD *)v53 = v56;
            v53 -= 32;
            v54 -= 4;
            v55 -= 4;
          }
          while (v55);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_59;
        }
        else
        {
          v46 = v36;
        }
      }
      else
      {
        v46 = v36;
      }
      do
      {
        v47 = *--v46;
        *--v43 = v47;
      }
      while (v46 != v37);
LABEL_59:
      v36 = v37;
    }
    v37 = v43;
    v35 = (unint64_t *)&v42[8 * v41];
    if (v36)
    {
      operator delete(v36);
      v38 = *((_DWORD *)v7 + 24);
    }
    else
    {
      v38 = v34;
    }
    v36 = v44;
LABEL_64:
    if (!v38)
      goto LABEL_282;
    v34 = v38 - 1;
    v48 = *((_QWORD *)v7 + 11);
    Node = *(_QWORD *)(v48 + 8 * (v38 - 1));
    *((_DWORD *)v7 + 24) = v38 - 1;
    if (!Node)
      goto LABEL_300;
    v49 = *(unsigned __int16 *)(Node + 16);
  }
  while (v49 == 232);
  if (v49 == 43)
  {
    if (v38 == 1
      || (v176 = v38 - 2, v177 = *(swift::Demangle::Node **)(v48 + 8 * v176), *((_DWORD *)v7 + 24) = v176, !v177))
    {
LABEL_282:
      Node = 0;
      goto LABEL_300;
    }
    v178 = swift::Demangle::Demangler::createWithChildren(v7, v16, v177, (swift::Demangle::Node *)Node, a5);
  }
  else
  {
    v178 = swift::Demangle::Demangler::createWithChild(v7, v16, (swift::Demangle::Node *)Node, a4, a5);
  }
  Node = v178;
  while (v36 != v37)
  {
    v184 = (swift::Demangle::Node *)*--v36;
    swift::Demangle::Node::addChild((unsigned int *)Node, v184, v7, v179, v180);
  }
  if ((v190 & 1) != 0)
  {
    v185 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v7, 217);
    swift::Demangle::Node::addChild((unsigned int *)Node, v185, v7, v186, v187);
  }
LABEL_300:
  if (v37)
  {
    v147 = v37;
LABEL_277:
    operator delete(v147);
  }
  return (int8x16_t *)Node;
}

unsigned int *swift::Demangle::Demangler::demangleWitness(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v5;
  unint64_t v6;
  swift::Demangle::Demangler *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  int v42;
  unsigned __int16 *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  __int16 v49;
  unsigned int *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  unsigned int *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  unsigned int *v61;
  uint64_t v62;
  const char *v63;
  int v64;
  unsigned int v65;
  unsigned int *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  __int16 v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned __int16 *v75;
  int v76;
  unsigned int v77;
  unsigned __int16 *v78;
  unsigned int *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  char *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  char *v97;
  unsigned int *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  int v103;
  unsigned int v104;
  unsigned int *v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  char *v111;
  unsigned int *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  char *v116;
  unsigned int *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  char *v121;
  int v122;
  unsigned int v123;
  int v124;
  BOOL v125;
  BOOL v126;
  int v127;
  uint64_t v128;
  int8x16_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  unsigned int *v134;
  swift::Demangle::NodeFactory *v135;
  __int16 v136;
  unsigned __int16 *v137;
  unsigned int *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  unsigned int *v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  char *v147;
  unsigned int *v148;
  swift::Demangle::Node *v149;
  swift::Demangle::Node *v150;
  swift::Demangle::Node *v151;
  uint64_t v152;
  const char *v153;
  __int16 v154;
  swift::Demangle::Node *v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  const char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  int v166;
  int v167;
  unsigned __int16 *v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  char *v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  unsigned int v218;
  int v219;
  int v220;
  uint64_t v221;
  int v222;
  unsigned int v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  int v229;
  int v230;
  uint64_t v231;
  int v232;
  unsigned int v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  unsigned int v243;
  int v244;
  int v245;
  uint64_t v246;
  int v247;
  unsigned int v248;
  __int16 v249;
  __int16 v250;
  char v251;
  unsigned int *v252;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v7 = this;
  v8 = 0;
  v9 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v10 = *((_QWORD *)this + 7);
  v11 = *(_BYTE *)(v10 + v5);
  switch(v11)
  {
    case 'C':
      v41 = *((_DWORD *)this + 24);
      if (!v41)
        return 0;
      v42 = v41 - 1;
      v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v41 - 1));
      v44 = v43[8];
      if (v44 != 232 && !swift::Demangle::isContext(v44))
        return 0;
      *((_DWORD *)v7 + 24) = v42;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v45 = 2 * *((_QWORD *)v7 + 4);
        if (v45 <= 0x20)
          v45 = 32;
        *((_QWORD *)v7 + 4) = v45;
        v46 = v45 + 8;
        v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
        v48 = (char *)v47 + v46;
        *v47 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v48;
        *((_QWORD *)v7 + 3) = v47;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 62;
      goto LABEL_152;
    case 'G':
      v50 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v50)
        return 0;
      v43 = (unsigned __int16 *)v50;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v51 = 2 * *((_QWORD *)v7 + 4);
        if (v51 <= 0x20)
          v51 = 32;
        *((_QWORD *)v7 + 4) = v51;
        v52 = v51 + 8;
        v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        v54 = (char *)v53 + v52;
        *v53 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v54;
        *((_QWORD *)v7 + 3) = v53;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 88;
      goto LABEL_152;
    case 'I':
      v55 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v55)
        return 0;
      v43 = (unsigned __int16 *)v55;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v56 = 2 * *((_QWORD *)v7 + 4);
        if (v56 <= 0x20)
          v56 = 32;
        *((_QWORD *)v7 + 4) = v56;
        v57 = v56 + 8;
        v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
        v59 = (char *)v58 + v57;
        *v58 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v59;
        *((_QWORD *)v7 + 3) = v58;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 89;
      goto LABEL_152;
    case 'J':
      return swift::Demangle::Demangler::demangleDifferentiabilityWitness(this, a2, a3, a4, a5);
    case 'L':
      v61 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v64 = *((_DWORD *)v7 + 24);
      if (!v64)
        return 0;
      v65 = v64 - 1;
      v66 = *(unsigned int **)(*((_QWORD *)v7 + 11) + 8 * v65);
      if (*((_WORD *)v66 + 8) != 232)
        return 0;
      v43 = (unsigned __int16 *)v61;
      *((_DWORD *)v7 + 24) = v65;
      if (!v61)
        return 0;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v67 = 2 * *((_QWORD *)v7 + 4);
        if (v67 <= 0x20)
          v67 = 32;
        *((_QWORD *)v7 + 4) = v67;
        v68 = v67 + 8;
        v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
        v70 = (char *)v69 + v68;
        *v69 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v70;
        *((_QWORD *)v7 + 3) = v69;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 136;
      goto LABEL_192;
    case 'O':
      if (v9 >= v6)
        return 0;
      v8 = 0;
      *((_QWORD *)this + 9) = v5 + 2;
      switch(*(_BYTE *)(v10 + v9))
      {
        case 'C':
          v72 = *((_DWORD *)this + 24);
          if (!v72)
            goto LABEL_323;
          v73 = v72 - 1;
          v74 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v74 + 8 * (v72 - 1));
          v76 = v75[8];
          if (v76 == 232)
          {
            *((_DWORD *)this + 24) = v73;
          }
          else
          {
            if (v76 == 43)
            {
              *((_DWORD *)this + 24) = v73;
              if (v72 == 1 || (v77 = v72 - 2, v78 = *(unsigned __int16 **)(v74 + 8 * v77), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v77;
              v250 = 350;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_323:
            v75 = 0;
          }
          v249 = 350;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'D':
          v174 = *((_DWORD *)this + 24);
          if (!v174)
            goto LABEL_324;
          v175 = v174 - 1;
          v176 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v176 + 8 * (v174 - 1));
          v177 = v75[8];
          if (v177 == 232)
          {
            *((_DWORD *)this + 24) = v175;
          }
          else
          {
            if (v177 == 43)
            {
              *((_DWORD *)this + 24) = v175;
              if (v174 == 1 || (v178 = v174 - 2, v78 = *(unsigned __int16 **)(v176 + 8 * v178), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v178;
              v250 = 351;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_324:
            v75 = 0;
          }
          v249 = 351;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'F':
          v179 = *((_DWORD *)this + 24);
          if (!v179)
            goto LABEL_325;
          v180 = v179 - 1;
          v181 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v181 + 8 * (v179 - 1));
          v182 = v75[8];
          if (v182 == 232)
          {
            *((_DWORD *)this + 24) = v180;
          }
          else
          {
            if (v182 == 43)
            {
              *((_DWORD *)this + 24) = v180;
              if (v179 == 1 || (v183 = v179 - 2, v78 = *(unsigned __int16 **)(v181 + 8 * v183), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v183;
              v250 = 352;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_325:
            v75 = 0;
          }
          v249 = 352;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'H':
          v184 = *((_DWORD *)this + 24);
          if (!v184)
            goto LABEL_326;
          v185 = v184 - 1;
          v186 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v186 + 8 * (v184 - 1));
          v187 = v75[8];
          if (v187 == 232)
          {
            *((_DWORD *)this + 24) = v185;
          }
          else
          {
            if (v187 == 43)
            {
              *((_DWORD *)this + 24) = v185;
              if (v184 == 1 || (v188 = v184 - 2, v78 = *(unsigned __int16 **)(v186 + 8 * v188), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v188;
              v250 = 353;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_326:
            v75 = 0;
          }
          v249 = 353;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'b':
          v189 = *((_DWORD *)this + 24);
          if (!v189)
            goto LABEL_327;
          v190 = v189 - 1;
          v191 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v191 + 8 * (v189 - 1));
          v192 = v75[8];
          if (v192 == 232)
          {
            *((_DWORD *)this + 24) = v190;
          }
          else
          {
            if (v192 == 43)
            {
              *((_DWORD *)this + 24) = v190;
              if (v189 == 1 || (v193 = v189 - 2, v78 = *(unsigned __int16 **)(v191 + 8 * v193), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v193;
              v250 = 282;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_327:
            v75 = 0;
          }
          v249 = 282;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'c':
          v194 = *((_DWORD *)this + 24);
          if (!v194)
            goto LABEL_328;
          v195 = v194 - 1;
          v196 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v196 + 8 * (v194 - 1));
          v197 = v75[8];
          if (v197 == 232)
          {
            *((_DWORD *)this + 24) = v195;
          }
          else
          {
            if (v197 == 43)
            {
              *((_DWORD *)this + 24) = v195;
              if (v194 == 1 || (v198 = v194 - 2, v78 = *(unsigned __int16 **)(v196 + 8 * v198), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v198;
              v250 = 283;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_328:
            v75 = 0;
          }
          v249 = 283;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'd':
          v199 = *((_DWORD *)this + 24);
          if (!v199)
            goto LABEL_329;
          v200 = v199 - 1;
          v201 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v201 + 8 * (v199 - 1));
          v202 = v75[8];
          if (v202 == 232)
          {
            *((_DWORD *)this + 24) = v200;
          }
          else
          {
            if (v202 == 43)
            {
              *((_DWORD *)this + 24) = v200;
              if (v199 == 1 || (v203 = v199 - 2, v78 = *(unsigned __int16 **)(v201 + 8 * v203), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v203;
              v250 = 284;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_329:
            v75 = 0;
          }
          v249 = 284;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'e':
          v204 = *((_DWORD *)this + 24);
          if (!v204)
            goto LABEL_330;
          v205 = v204 - 1;
          v206 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v206 + 8 * (v204 - 1));
          v207 = v75[8];
          if (v207 == 232)
          {
            *((_DWORD *)this + 24) = v205;
          }
          else
          {
            if (v207 == 43)
            {
              *((_DWORD *)this + 24) = v205;
              if (v204 == 1 || (v208 = v204 - 2, v78 = *(unsigned __int16 **)(v206 + 8 * v208), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v208;
              v250 = 279;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_330:
            v75 = 0;
          }
          v249 = 279;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'f':
          v209 = *((_DWORD *)this + 24);
          if (!v209)
            goto LABEL_331;
          v210 = v209 - 1;
          v211 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v211 + 8 * (v209 - 1));
          v212 = v75[8];
          if (v212 == 232)
          {
            *((_DWORD *)this + 24) = v210;
          }
          else
          {
            if (v212 == 43)
            {
              *((_DWORD *)this + 24) = v210;
              if (v209 == 1 || (v213 = v209 - 2, v78 = *(unsigned __int16 **)(v211 + 8 * v213), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v213;
              v250 = 285;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_331:
            v75 = 0;
          }
          v249 = 285;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'g':
          v214 = *((_DWORD *)this + 24);
          if (!v214)
            goto LABEL_332;
          v215 = v214 - 1;
          v216 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v216 + 8 * (v214 - 1));
          v217 = v75[8];
          if (v217 == 232)
          {
            *((_DWORD *)this + 24) = v215;
          }
          else
          {
            if (v217 == 43)
            {
              *((_DWORD *)this + 24) = v215;
              if (v214 == 1 || (v218 = v214 - 2, v78 = *(unsigned __int16 **)(v216 + 8 * v218), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v218;
              v250 = 345;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_332:
            v75 = 0;
          }
          v249 = 345;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'h':
          v219 = *((_DWORD *)this + 24);
          if (!v219)
            goto LABEL_333;
          v220 = v219 - 1;
          v221 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v221 + 8 * (v219 - 1));
          v222 = v75[8];
          if (v222 == 232)
          {
            *((_DWORD *)this + 24) = v220;
          }
          else
          {
            if (v222 == 43)
            {
              *((_DWORD *)this + 24) = v220;
              if (v219 == 1 || (v223 = v219 - 2, v78 = *(unsigned __int16 **)(v221 + 8 * v223), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v223;
              v250 = 286;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_333:
            v75 = 0;
          }
          v249 = 286;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'i':
          a5 = (char *)swift::Demangle::Demangler::demangleIndexAsNode(this);
          v224 = *((_DWORD *)v7 + 24);
          if (!v224)
            goto LABEL_334;
          v225 = v224 - 1;
          v226 = *((_QWORD *)v7 + 11);
          v137 = *(unsigned __int16 **)(v226 + 8 * (v224 - 1));
          v227 = v137[8];
          if (v227 == 232)
          {
            *((_DWORD *)v7 + 24) = v225;
            goto LABEL_362;
          }
          if (v227 != 43)
          {
LABEL_334:
            v137 = 0;
LABEL_362:
            this = v7;
            v250 = 343;
            goto LABEL_365;
          }
          *((_DWORD *)v7 + 24) = v225;
          if (v224 == 1 || (v228 = v224 - 2, v134 = *(unsigned int **)(v226 + 8 * v228), *((_WORD *)v134 + 8) != 232))
            v134 = 0;
          else
            *((_DWORD *)v7 + 24) = v228;
          v135 = v7;
          v136 = 343;
          return (unsigned int *)swift::Demangle::Demangler::createWithChildren(v135, v136, (swift::Demangle::Node *)v134, (swift::Demangle::Node *)v137, a5);
        case 'j':
          a5 = (char *)swift::Demangle::Demangler::demangleIndexAsNode(this);
          v229 = *((_DWORD *)v7 + 24);
          if (!v229)
            goto LABEL_335;
          v230 = v229 - 1;
          v231 = *((_QWORD *)v7 + 11);
          v137 = *(unsigned __int16 **)(v231 + 8 * (v229 - 1));
          v232 = v137[8];
          if (v232 == 232)
          {
            *((_DWORD *)v7 + 24) = v230;
          }
          else
          {
            if (v232 == 43)
            {
              *((_DWORD *)v7 + 24) = v230;
              if (v229 == 1
                || (v233 = v229 - 2, v134 = *(unsigned int **)(v231 + 8 * v233), *((_WORD *)v134 + 8) != 232))
              {
                v134 = 0;
              }
              else
              {
                *((_DWORD *)v7 + 24) = v233;
              }
              v135 = v7;
              v136 = 344;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(v135, v136, (swift::Demangle::Node *)v134, (swift::Demangle::Node *)v137, a5);
            }
LABEL_335:
            v137 = 0;
          }
          this = v7;
          v250 = 344;
LABEL_365:
          v78 = v137;
          v75 = (unsigned __int16 *)a5;
          return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
        case 'r':
          v234 = *((_DWORD *)this + 24);
          if (!v234)
            goto LABEL_336;
          v235 = v234 - 1;
          v236 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v236 + 8 * (v234 - 1));
          v237 = v75[8];
          if (v237 == 232)
          {
            *((_DWORD *)this + 24) = v235;
          }
          else
          {
            if (v237 == 43)
            {
              *((_DWORD *)this + 24) = v235;
              if (v234 == 1 || (v238 = v234 - 2, v78 = *(unsigned __int16 **)(v236 + 8 * v238), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v238;
              v250 = 280;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_336:
            v75 = 0;
          }
          v249 = 280;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 's':
          v239 = *((_DWORD *)this + 24);
          if (!v239)
            goto LABEL_337;
          v240 = v239 - 1;
          v241 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v241 + 8 * (v239 - 1));
          v242 = v75[8];
          if (v242 == 232)
          {
            *((_DWORD *)this + 24) = v240;
          }
          else
          {
            if (v242 == 43)
            {
              *((_DWORD *)this + 24) = v240;
              if (v239 == 1 || (v243 = v239 - 2, v78 = *(unsigned __int16 **)(v241 + 8 * v243), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v243;
              v250 = 281;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_337:
            v75 = 0;
          }
          v249 = 281;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        case 'y':
          v244 = *((_DWORD *)this + 24);
          if (!v244)
            goto LABEL_338;
          v245 = v244 - 1;
          v246 = *((_QWORD *)this + 11);
          v75 = *(unsigned __int16 **)(v246 + 8 * (v244 - 1));
          v247 = v75[8];
          if (v247 == 232)
          {
            *((_DWORD *)this + 24) = v245;
          }
          else
          {
            if (v247 == 43)
            {
              *((_DWORD *)this + 24) = v245;
              if (v244 == 1 || (v248 = v244 - 2, v78 = *(unsigned __int16 **)(v246 + 8 * v248), v78[8] != 232))
                v78 = 0;
              else
                *((_DWORD *)this + 24) = v248;
              v250 = 278;
              return (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v250, (swift::Demangle::Node *)v78, (swift::Demangle::Node *)v75, a5);
            }
LABEL_338:
            v75 = 0;
          }
          v249 = 278;
          return (unsigned int *)swift::Demangle::Demangler::createWithChild(this, v249, (swift::Demangle::Node *)v75, (uint64_t)v75, a5);
        default:
          return (unsigned int *)v8;
      }
    case 'P':
      v79 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v79)
        return 0;
      v43 = (unsigned __int16 *)v79;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v80 = 2 * *((_QWORD *)v7 + 4);
        if (v80 <= 0x20)
          v80 = 32;
        *((_QWORD *)v7 + 4) = v80;
        v81 = v80 + 8;
        v82 = malloc_type_malloc(v80 + 8, 0xD0263BC5uLL);
        v83 = (char *)v82 + v81;
        *v82 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v82 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v83;
        *((_QWORD *)v7 + 3) = v82;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 197;
      goto LABEL_152;
    case 'S':
      v84 = swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
      if (!v84)
        return 0;
      v43 = (unsigned __int16 *)v84;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v85 = 2 * *((_QWORD *)v7 + 4);
        if (v85 <= 0x20)
          v85 = 32;
        *((_QWORD *)v7 + 4) = v85;
        v86 = v85 + 8;
        v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
        v88 = (char *)v87 + v86;
        *v87 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v88;
        *((_QWORD *)v7 + 3) = v87;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 195;
      goto LABEL_152;
    case 'T':
      v89 = *((_DWORD *)this + 24);
      if (v89 && (v90 = v89 - 1, v91 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v90), *(_WORD *)(v91 + 16) == 232))
        *((_DWORD *)this + 24) = v90;
      else
        v91 = 0;
      v129 = swift::Demangle::Demangler::popAssocTypePath(this, a2, a3, a4, a5);
      v134 = swift::Demangle::Demangler::popProtocolConformance(v7, v130, v131, v132, v133);
      v135 = v7;
      v136 = 9;
      v137 = (unsigned __int16 *)v129;
      a5 = (char *)v91;
      return (unsigned int *)swift::Demangle::Demangler::createWithChildren(v135, v136, (swift::Demangle::Node *)v134, (swift::Demangle::Node *)v137, a5);
    case 'V':
      v92 = *((_DWORD *)this + 24);
      if (!v92)
        return 0;
      v93 = v92 - 1;
      v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v93);
      if (v43[8] != 232)
        return 0;
      *((_DWORD *)this + 24) = v93;
      v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
      {
        v94 = 2 * *((_QWORD *)this + 4);
        if (v94 <= 0x20)
          v94 = 32;
        *((_QWORD *)this + 4) = v94;
        v95 = v94 + 8;
        v96 = malloc_type_malloc(v94 + 8, 0xD0263BC5uLL);
        v97 = (char *)v96 + v95;
        *v96 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v97;
        *((_QWORD *)v7 + 3) = v96;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 253;
      goto LABEL_152;
    case 'Z':
    case 'z':
      v12 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v12;
      if (!v12 || v12 + 24 > *((_QWORD *)this + 2))
      {
        v13 = 2 * *((_QWORD *)this + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)this + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        *v15 = *((_QWORD *)v7 + 3);
        v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v15 + v14;
        *((_QWORD *)v7 + 3) = v15;
      }
      *((_QWORD *)v7 + 1) = v12 + 24;
      *(_WORD *)(v12 + 16) = 317;
      *(_BYTE *)(v12 + 18) = 0;
      v16 = *((_DWORD *)v7 + 24);
      if (!v16)
      {
        v17 = 0;
        goto LABEL_202;
      }
      v251 = v11;
      v252 = (unsigned int *)v12;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (2)
      {
        v21 = *((_QWORD *)v7 + 11);
        if (*(_WORD *)(*(_QWORD *)(v21 + 8 * (v16 - 1)) + 16) == 275)
        {
          *((_DWORD *)v7 + 24) = v16 - 1;
          if (v16 == 1)
            goto LABEL_214;
          v16 -= 2;
          v22 = *(_QWORD *)(v21 + 8 * v16);
          v23 = *(unsigned __int16 *)(v22 + 16);
          if ((v23 - 173) > 0x3C || ((1 << (v23 + 83)) & 0x100000010000010DLL) == 0)
          {
            v25 = (v23 - 101) > 0x24 || ((1 << (v23 - 101)) & 0x1000800001) == 0;
            if (v25 && v23 != 347)
              goto LABEL_214;
          }
          *((_DWORD *)v7 + 24) = v16;
          if (v18 < v19)
          {
            *(_QWORD *)v18 = v22;
            v20 = v18 + 8;
            v18 += 8;
            if (!v16)
              goto LABEL_196;
            continue;
          }
          v26 = (v18 - v17) >> 3;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
            abort();
          if ((v19 - v17) >> 2 > v27)
            v27 = (v19 - v17) >> 2;
          if ((unint64_t)(v19 - v17) >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
          {
            if (v28 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v29 = operator new(8 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * v26];
          *(_QWORD *)v30 = v22;
          v20 = v30 + 8;
          if (v18 == v17)
            goto LABEL_39;
          v31 = v18 - v17 - 8;
          if (v31 < 0x168)
          {
            v32 = v18;
            goto LABEL_38;
          }
          v34 = (v18 - 8 - v17) & 0xFFFFFFFFFFFFFFF8;
          if (&v29[v18 - v17 - 8 - v34] > &v29[v18 - v17 - 8])
          {
            v32 = v18;
          }
          else
          {
            if (&v18[-v34 - 8] <= v18 - 8)
            {
              if ((unint64_t)(v17 - v29) < 0x20)
              {
                v32 = v18;
                goto LABEL_38;
              }
              v35 = (v31 >> 3) + 1;
              v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
              v32 = &v18[-v36];
              v30 -= v36;
              v37 = &v29[8 * v26 - 16];
              v38 = v18 - 16;
              v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v40 = *(_OWORD *)v38;
                *(v37 - 1) = *((_OWORD *)v38 - 1);
                *v37 = v40;
                v37 -= 2;
                v38 -= 32;
                v39 -= 4;
              }
              while (v39);
              if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_38;
LABEL_39:
              v19 = &v29[8 * v28];
              if (v17)
              {
                operator delete(v17);
                v16 = *((_DWORD *)v7 + 24);
              }
              v17 = v30;
              v18 = v20;
              if (!v16)
                goto LABEL_196;
              continue;
            }
            v32 = v18;
          }
          do
          {
LABEL_38:
            v33 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v30 - 1) = v33;
            v30 -= 8;
          }
          while (v32 != v17);
          goto LABEL_39;
        }
        break;
      }
      v20 = v18;
LABEL_196:
      if (v20 == v17)
      {
        v12 = (unint64_t)v252;
      }
      else
      {
        v12 = (unint64_t)v252;
        do
        {
          v150 = (swift::Demangle::Node *)*((_QWORD *)v20 - 1);
          v20 -= 8;
          swift::Demangle::Node::addChild(v252, v150, v7, a4, a5);
        }
        while (v20 != v17);
      }
      v11 = v251;
LABEL_202:
      v151 = swift::Demangle::Demangler::popContext(v7, a2, a3, a4, a5);
      if (v151 && (v11 == 90 ? (v154 = 315) : (v154 = 316), v12))
      {
        v155 = v151;
        v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
        {
          v156 = 2 * *((_QWORD *)v7 + 4);
          if (v156 <= 0x20)
            v156 = 32;
          *((_QWORD *)v7 + 4) = v156;
          v157 = v156 + 8;
          v158 = malloc_type_malloc(v156 + 8, 0xD0263BC5uLL);
          v159 = (char *)v158 + v157;
          *v158 = *((_QWORD *)v7 + 3);
          v8 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v7 + 2) = v159;
          *((_QWORD *)v7 + 3) = v158;
        }
        *((_QWORD *)v7 + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = v154;
        *(_BYTE *)(v8 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v8, v155, v7, v152, v153);
        swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)v12, v7, v160, v161);
        if (!v17)
          return (unsigned int *)v8;
      }
      else
      {
LABEL_214:
        v8 = 0;
        if (!v17)
          return (unsigned int *)v8;
      }
      operator delete(v17);
      return (unsigned int *)v8;
    case 'a':
      v98 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v98)
        return 0;
      v43 = (unsigned __int16 *)v98;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v99 = 2 * *((_QWORD *)v7 + 4);
        if (v99 <= 0x20)
          v99 = 32;
        *((_QWORD *)v7 + 4) = v99;
        v100 = v99 + 8;
        v101 = malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
        v102 = (char *)v101 + v100;
        *v101 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v102;
        *((_QWORD *)v7 + 3) = v101;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 198;
      goto LABEL_152;
    case 'b':
      v103 = *((_DWORD *)this + 24);
      if (v103 && (v104 = v103 - 1, v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v104), v43[8] == 232))
        *((_DWORD *)this + 24) = v104;
      else
        v43 = 0;
      v138 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v8 = 0;
      if (!v43)
        return (unsigned int *)v8;
      v66 = v138;
      if (!v138)
        return (unsigned int *)v8;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v139 = 2 * *((_QWORD *)v7 + 4);
        if (v139 <= 0x20)
          v139 = 32;
        *((_QWORD *)v7 + 4) = v139;
        v140 = v139 + 8;
        v141 = malloc_type_malloc(v139 + 8, 0xD0263BC5uLL);
        v142 = (char *)v141 + v140;
        *v141 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v142;
        *((_QWORD *)v7 + 3) = v141;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 10;
      goto LABEL_192;
    case 'l':
      v105 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v106 = *((_DWORD *)v7 + 24);
      if (!v106)
        return 0;
      v107 = v106 - 1;
      v66 = *(unsigned int **)(*((_QWORD *)v7 + 11) + 8 * v107);
      if (*((_WORD *)v66 + 8) != 232)
        return 0;
      v43 = (unsigned __int16 *)v105;
      *((_DWORD *)v7 + 24) = v107;
      if (!v105)
        return 0;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v108 = 2 * *((_QWORD *)v7 + 4);
        if (v108 <= 0x20)
          v108 = 32;
        *((_QWORD *)v7 + 4) = v108;
        v109 = v108 + 8;
        v110 = malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
        v111 = (char *)v110 + v109;
        *v110 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v111;
        *((_QWORD *)v7 + 3) = v110;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 135;
      goto LABEL_192;
    case 'p':
      v112 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v112)
        return 0;
      v43 = (unsigned __int16 *)v112;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v113 = 2 * *((_QWORD *)v7 + 4);
        if (v113 <= 0x20)
          v113 = 32;
        *((_QWORD *)v7 + 4) = v113;
        v114 = v113 + 8;
        v115 = malloc_type_malloc(v113 + 8, 0xD0263BC5uLL);
        v116 = (char *)v115 + v114;
        *v115 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v116;
        *((_QWORD *)v7 + 3) = v115;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 199;
      goto LABEL_152;
    case 'r':
      v117 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      if (!v117)
        return 0;
      v43 = (unsigned __int16 *)v117;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v118 = 2 * *((_QWORD *)v7 + 4);
        if (v118 <= 0x20)
          v118 = 32;
        *((_QWORD *)v7 + 4) = v118;
        v119 = v118 + 8;
        v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
        v121 = (char *)v120 + v119;
        *v120 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v121;
        *((_QWORD *)v7 + 3) = v120;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v49 = 90;
LABEL_152:
      *(_WORD *)(v8 + 16) = v49;
      *(_BYTE *)(v8 + 18) = 0;
      goto LABEL_193;
    case 't':
      v122 = *((_DWORD *)this + 24);
      if (!v122
        || ((v123 = v122 - 1,
             v43 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v123),
             v124 = v43[8],
             (v124 - 173) <= 0x3C)
          ? (v125 = ((1 << (v124 + 83)) & 0x100000010000010DLL) == 0)
          : (v125 = 1),
            v125
         && ((v124 - 101) <= 0x24
           ? (v126 = ((1 << (v124 - 101)) & 0x1000800001) == 0)
           : (v126 = 1),
             v126 && v124 != 347)))
      {
        v43 = 0;
      }
      else
      {
        *((_DWORD *)this + 24) = v123;
      }
      v143 = swift::Demangle::Demangler::popProtocolConformance(this, a2, a3, a4, a5);
      v8 = 0;
      if (!v43)
        return (unsigned int *)v8;
      v66 = v143;
      if (!v143)
        return (unsigned int *)v8;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v144 = 2 * *((_QWORD *)v7 + 4);
        if (v144 <= 0x20)
          v144 = 32;
        *((_QWORD *)v7 + 4) = v144;
        v145 = v144 + 8;
        v146 = malloc_type_malloc(v144 + 8, 0xD0263BC5uLL);
        v147 = (char *)v146 + v145;
        *v146 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v147;
        *((_QWORD *)v7 + 3) = v146;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      v71 = 6;
LABEL_192:
      *(_WORD *)(v8 + 16) = v71;
      *(_BYTE *)(v8 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)v66, v7, v62, v63);
LABEL_193:
      v148 = (unsigned int *)v8;
      v149 = (swift::Demangle::Node *)v43;
      goto LABEL_194;
    case 'v':
      if (v9 >= v6)
        return 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v127 = *(char *)(v10 + v9);
      if (v127 == 100)
      {
        v128 = 0;
      }
      else
      {
        v8 = 0;
        if (v127 != 105)
          return (unsigned int *)v8;
        v128 = 1;
      }
      v162 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v162;
      if (!v162 || v162 + 24 > *((_QWORD *)this + 2))
      {
        v163 = 2 * *((_QWORD *)this + 4);
        if (v163 <= 0x20)
          v163 = 32;
        *((_QWORD *)this + 4) = v163;
        v164 = v163 + 8;
        v165 = malloc_type_malloc(v163 + 8, 0xD0263BC5uLL);
        *v165 = *((_QWORD *)v7 + 3);
        v162 = ((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = (char *)v165 + v164;
        *((_QWORD *)v7 + 3) = v165;
      }
      *((_QWORD *)v7 + 1) = v162 + 24;
      *(_WORD *)(v162 + 16) = 52;
      *(_BYTE *)(v162 + 18) = 4;
      *(_QWORD *)v162 = v128;
      v166 = *((_DWORD *)v7 + 24);
      if (!v166)
        return 0;
      v167 = v166 - 1;
      v168 = *(unsigned __int16 **)(*((_QWORD *)v7 + 11) + 8 * (v166 - 1));
      v169 = v168[8];
      if (v169 != 232 && !swift::Demangle::isContext(v169))
        return 0;
      *((_DWORD *)v7 + 24) = v167;
      v8 = (*((_QWORD *)v7 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v7 + 1) = v8;
      if (!v8 || v8 + 24 > *((_QWORD *)v7 + 2))
      {
        v170 = 2 * *((_QWORD *)v7 + 4);
        if (v170 <= 0x20)
          v170 = 32;
        *((_QWORD *)v7 + 4) = v170;
        v171 = v170 + 8;
        v172 = malloc_type_malloc(v170 + 8, 0xD0263BC5uLL);
        v173 = (char *)v172 + v171;
        *v172 = *((_QWORD *)v7 + 3);
        v8 = ((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v7 + 2) = v173;
        *((_QWORD *)v7 + 3) = v172;
      }
      *((_QWORD *)v7 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 73;
      *(_BYTE *)(v8 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)v162, v7, a4, a5);
      v148 = (unsigned int *)v8;
      v149 = (swift::Demangle::Node *)v168;
LABEL_194:
      swift::Demangle::Node::addChild(v148, v149, v7, a4, a5);
      return (unsigned int *)v8;
    default:
      return (unsigned int *)v8;
  }
}

int8x16_t *swift::Demangle::Demangler::demangleSpecialType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v13;
  unsigned int v14;
  swift::Demangle::Node *v15;
  int8x16_t *v16;
  swift::Demangle::Node *v17;
  __int16 v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  __int16 v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  int v30;
  unsigned int v31;
  swift::Demangle::Node *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  __int16 v37;
  int8x16_t *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  unsigned int v42;
  swift::Demangle::Node *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  int v48;
  int v49;
  unsigned int v50;
  swift::Demangle::Node *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  int8x16_t *v56;
  int v57;
  unsigned int v58;
  swift::Demangle::Node *v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  int v66;
  unsigned int v67;
  swift::Demangle::Node *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  char *v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  unsigned int *v86;
  swift::Demangle::Node *v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  char *v99;
  int v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  char *v105;
  int v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  char *v115;
  unsigned int *v116;
  swift::Demangle::Node *v117;
  int v118;
  int8x16_t *v119;
  uint64_t v120;
  const char *v121;
  int8x16_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  swift::Demangle::Node *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  const char *v143;
  swift::Demangle::Node *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  const char *v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  char *v154;
  int v155;
  unsigned int v156;
  unint64_t i;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  const char *v164;
  unint64_t v165;
  unsigned int v166;
  int8x16_t *v167;
  unint64_t v168;
  int v169;
  unint64_t v170;
  swift::Demangle::Node *v171;
  __int16 v172;
  int v173;
  swift::Demangle::Node *v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  char *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  char *v189;
  int v190;
  int v191;
  uint64_t v192;
  swift::Demangle::Node *v193;
  int v194;
  unsigned int v195;
  __int16 v196;
  swift::Demangle::Node *v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  unsigned int v201;
  swift::Demangle::Node *v202;
  swift::Demangle::Node *v203;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 < v6)
  {
    v8 = 0;
    v9 = v5 + 1;
    *((_QWORD *)this + 9) = v5 + 1;
    v10 = *((_QWORD *)this + 7);
    v11 = *(unsigned __int8 *)(v10 + v5);
    switch(*(_BYTE *)(v10 + v5))
    {
      case 'A':
        v18 = 64;
        goto LABEL_75;
      case 'B':
        v18 = 165;
        goto LABEL_75;
      case 'C':
        v18 = 22;
        goto LABEL_75;
      case 'D':
        v19 = *((_DWORD *)this + 24);
        if (!v19)
          return 0;
        v20 = v19 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v20);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v20;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v22 = 2 * *((_QWORD *)this + 4);
          if (v22 <= 0x20)
            v22 = 32;
          *((_QWORD *)this + 4) = v22;
          v23 = v22 + 8;
          v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
          v25 = (char *)v24 + v23;
          *v24 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v25;
          *((_QWORD *)this + 3) = v24;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 57;
        goto LABEL_127;
      case 'E':
        v18 = 65;
        goto LABEL_75;
      case 'G':
      case 'g':
        return (int8x16_t *)swift::Demangle::Demangler::demangleExtendedExistentialShape(this, (char)v11, a3, a4, a5);
      case 'K':
        v18 = 11;
        goto LABEL_75;
      case 'L':
        v18 = 166;
        goto LABEL_75;
      case 'M':
        v27 = swift::Demangle::Demangler::demangleMetatypeRepresentation(this);
        v30 = *((_DWORD *)this + 24);
        if (!v30)
          return 0;
        v31 = v30 - 1;
        v32 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v31);
        if (*((_WORD *)v32 + 8) != 232)
          return 0;
        v8 = v27;
        *((_DWORD *)this + 24) = v31;
        if (!v27)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v33 = 2 * *((_QWORD *)this + 4);
          if (v33 <= 0x20)
            v33 = 32;
          *((_QWORD *)this + 4) = v33;
          v34 = v33 + 8;
          v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
          v36 = (char *)v35 + v34;
          *v35 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v36;
          *((_QWORD *)this + 3) = v35;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v37 = 145;
        goto LABEL_94;
      case 'P':
        v38 = swift::Demangle::Demangler::demangleConstrainedExistentialRequirementList(this, a2, a3, a4, a5);
        v41 = *((_DWORD *)this + 24);
        if (!v41)
          return 0;
        v42 = v41 - 1;
        v43 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v42);
        if (*((_WORD *)v43 + 8) != 232)
          return 0;
        v8 = (unint64_t)v38;
        *((_DWORD *)this + 24) = v42;
        if (!v38)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v44 = 2 * *((_QWORD *)this + 4);
          if (v44 <= 0x20)
            v44 = 32;
          *((_QWORD *)this + 4) = v44;
          v45 = v44 + 8;
          v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
          v47 = (char *)v46 + v45;
          *v46 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v47;
          *((_QWORD *)this + 3) = v46;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        *(_WORD *)(v21 + 16) = 83;
        *(_BYTE *)(v21 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v21, v43, this, v39, v40);
        goto LABEL_128;
      case 'S':
        if (v9 >= v6)
          return 0;
        v8 = 0;
        *((_QWORD *)this + 9) = v5 + 2;
        v48 = *(char *)(v10 + v9);
        if (v48 > 111)
        {
          if (v48 == 112)
          {
            v194 = *((_DWORD *)this + 24);
            if (v194
              && (v195 = v194 - 1,
                  v51 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v195),
                  *((_WORD *)v51 + 8) == 232))
            {
              *((_DWORD *)this + 24) = v195;
            }
            else
            {
              v51 = 0;
            }
            v196 = 298;
          }
          else
          {
            if (v48 != 113)
              return (int8x16_t *)v8;
            v155 = *((_DWORD *)this + 24);
            if (v155
              && (v156 = v155 - 1,
                  v51 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v156),
                  *((_WORD *)v51 + 8) == 232))
            {
              *((_DWORD *)this + 24) = v156;
            }
            else
            {
              v51 = 0;
            }
            v196 = 295;
          }
          goto LABEL_253;
        }
        if (v48 != 68)
        {
          if (v48 != 97)
            return (int8x16_t *)v8;
          v49 = *((_DWORD *)this + 24);
          if (v49
            && (v50 = v49 - 1,
                v51 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v50),
                *((_WORD *)v51 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v50;
          }
          else
          {
            v51 = 0;
          }
          v196 = 296;
LABEL_253:
          v197 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChild(this, v196, v51, a4, a5);
          return (int8x16_t *)swift::Demangle::Demangler::createType(this, v197, v198, v199, v200);
        }
        v190 = *((_DWORD *)this + 24);
        if (v190)
        {
          v191 = v190 - 1;
          v192 = *((_QWORD *)this + 11);
          v193 = *(swift::Demangle::Node **)(v192 + 8 * (v190 - 1));
          if (*((_WORD *)v193 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v191;
            if (v190 == 1)
              goto LABEL_258;
          }
          else
          {
            v193 = 0;
            v191 = *((_DWORD *)this + 24);
          }
          v201 = v191 - 1;
          v202 = *(swift::Demangle::Node **)(v192 + 8 * v201);
          if (*((_WORD *)v202 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v201;
            goto LABEL_259;
          }
        }
        else
        {
          v193 = 0;
        }
LABEL_258:
        v202 = 0;
LABEL_259:
        v197 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, 297, v202, v193, a5);
        return (int8x16_t *)swift::Demangle::Demangler::createType(this, v197, v198, v199, v200);
      case 'U':
        v18 = 245;
        goto LABEL_75;
      case 'X':
      case 'x':
        if (v11 == 88)
        {
          v13 = *((_DWORD *)this + 24);
          if (!v13)
            return 0;
          v14 = v13 - 1;
          v15 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v14);
          if (*((_WORD *)v15 + 8) != 43)
            return 0;
          *((_DWORD *)this + 24) = v14;
          v16 = swift::Demangle::Demangler::popTypeList(this, a2, a3, a4, a5);
          if (!v16)
            return 0;
          v17 = (swift::Demangle::Node *)v16;
        }
        else
        {
          v17 = 0;
          v15 = 0;
        }
        v119 = swift::Demangle::Demangler::popTypeList(this, a2, a3, a4, a5);
        if (!v119)
          return 0;
        v122 = v119;
        v123 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v123;
        if (!v123 || v123 + 24 > *((_QWORD *)this + 2))
        {
          v124 = 2 * *((_QWORD *)this + 4);
          if (v124 <= 0x20)
            v124 = 32;
          *((_QWORD *)this + 4) = v124;
          v125 = v124 + 8;
          v126 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
          v127 = (char *)v126 + v125;
          *v126 = *((_QWORD *)this + 3);
          v123 = ((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v127;
          *((_QWORD *)this + 3) = v126;
        }
        v128 = v123 + 24;
        *((_QWORD *)this + 1) = v123 + 24;
        *(_WORD *)(v123 + 16) = 212;
        *(_BYTE *)(v123 + 18) = 0;
        v129 = v122[1].u8[2];
        switch((_DWORD)v129)
        {
          case 1:
            break;
          case 5:
            v129 = v122->u32[2];
            if (!(_DWORD)v129)
              goto LABEL_226;
            break;
          case 2:
            v129 = 2;
            break;
          default:
            goto LABEL_226;
        }
        v203 = v17;
        for (i = 0; i != v129; ++i)
        {
          v165 = v122[1].u8[2];
          v166 = v165 - 1;
          if ((_DWORD)v165 == 1)
            goto LABEL_193;
          if ((_DWORD)v165 != 5)
          {
            if ((_DWORD)v165 != 2)
              goto LABEL_198;
            v165 = 2;
LABEL_193:
            if (v165 <= i)
              goto LABEL_198;
            goto LABEL_194;
          }
          if (v122->u32[2] <= i)
          {
LABEL_198:
            v168 = 0;
            goto LABEL_199;
          }
LABEL_194:
          v167 = v122;
          if (v166 >= 2)
            v167 = (int8x16_t *)v122->i64[0];
          v168 = v167->u64[i];
LABEL_199:
          v169 = *(unsigned __int8 *)(v168 + 18);
          v170 = v168;
          if ((v169 - 1) >= 2)
            v170 = *(_QWORD *)v168;
          if (*(_WORD *)(*(_QWORD *)v170 + 16) == 123)
          {
            if ((v169 - 1) >= 2)
            {
              if (v169 != 5 || !*(_DWORD *)(v168 + 8))
              {
                v171 = 0;
LABEL_209:
                v173 = *((unsigned __int8 *)v171 + 18);
                if ((v173 - 1) >= 2)
                {
                  if (v173 != 5 || !*((_DWORD *)v171 + 2))
                    goto LABEL_220;
                  v171 = *(swift::Demangle::Node **)v171;
                }
                v174 = *(swift::Demangle::Node **)v171;
                if (*(_QWORD *)v171)
                {
                  v168 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)this + 1) = v168;
                  if (!v168 || v168 + 24 > *((_QWORD *)this + 2))
                  {
                    v175 = 2 * *((_QWORD *)this + 4);
                    if (v175 <= 0x20)
                      v175 = 32;
                    *((_QWORD *)this + 4) = v175;
                    v176 = v175 + 8;
                    v177 = malloc_type_malloc(v175 + 8, 0xD0263BC5uLL);
                    v178 = (char *)v177 + v176;
                    *v177 = *((_QWORD *)this + 3);
                    v168 = ((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *((_QWORD *)this + 2) = v178;
                    *((_QWORD *)this + 3) = v177;
                  }
                  *((_QWORD *)this + 1) = v168 + 24;
                  *(_WORD *)(v168 + 16) = 232;
                  *(_BYTE *)(v168 + 18) = 0;
                  swift::Demangle::Node::addChild((unsigned int *)v168, v174, this, v120, v121);
                  goto LABEL_221;
                }
LABEL_220:
                v168 = 0;
LABEL_221:
                v172 = 213;
                goto LABEL_222;
              }
              v168 = *(_QWORD *)v168;
            }
            v171 = *(swift::Demangle::Node **)v168;
            goto LABEL_209;
          }
          v172 = 214;
LABEL_222:
          v162 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v162;
          if (!v162 || v162 + 24 > *((_QWORD *)this + 2))
          {
            v158 = 2 * *((_QWORD *)this + 4);
            if (v158 <= 0x20)
              v158 = 32;
            *((_QWORD *)this + 4) = v158;
            v159 = v158 + 8;
            v160 = malloc_type_malloc(v158 + 8, 0xD0263BC5uLL);
            v161 = (char *)v160 + v159;
            *v160 = *((_QWORD *)this + 3);
            v162 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v161;
            *((_QWORD *)this + 3) = v160;
          }
          *((_QWORD *)this + 1) = v162 + 24;
          *(_WORD *)(v162 + 16) = v172;
          *(_BYTE *)(v162 + 18) = 0;
          swift::Demangle::Node::addChild((unsigned int *)v162, (swift::Demangle::Node *)v168, this, v120, v121);
          swift::Demangle::Node::addChild((unsigned int *)v123, (swift::Demangle::Node *)v162, this, v163, v164);
        }
        v128 = *((_QWORD *)this + 1);
        v17 = v203;
LABEL_226:
        v179 = (v128 + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v179;
        if (!v179 || v179 + 24 > *((_QWORD *)this + 2))
        {
          v180 = 2 * *((_QWORD *)this + 4);
          if (v180 <= 0x20)
            v180 = 32;
          *((_QWORD *)this + 4) = v180;
          v181 = v180 + 8;
          v182 = malloc_type_malloc(v180 + 8, 0xD0263BC5uLL);
          v183 = (char *)v182 + v181;
          *v182 = *((_QWORD *)this + 3);
          v179 = ((unint64_t)v182 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v183;
          *((_QWORD *)this + 3) = v182;
        }
        *((_QWORD *)this + 1) = v179 + 24;
        *(_WORD *)(v179 + 16) = 211;
        *(_BYTE *)(v179 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v179, (swift::Demangle::Node *)v123, this, v120, v121);
        if (v15)
        {
          swift::Demangle::Node::addChild((unsigned int *)v179, v15, this, a4, a5);
          swift::Demangle::Node::addChild((unsigned int *)v179, v17, this, v184, v185);
        }
        v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
        {
          v186 = 2 * *((_QWORD *)this + 4);
          if (v186 <= 0x20)
            v186 = 32;
          *((_QWORD *)this + 4) = v186;
          v187 = v186 + 8;
          v188 = malloc_type_malloc(v186 + 8, 0xD0263BC5uLL);
          v189 = (char *)v188 + v187;
          *v188 = *((_QWORD *)this + 3);
          v8 = ((unint64_t)v188 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v189;
          *((_QWORD *)this + 3) = v188;
        }
        *((_QWORD *)this + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = 232;
        *(_BYTE *)(v8 + 18) = 0;
        v116 = (unsigned int *)v8;
        v117 = (swift::Demangle::Node *)v179;
LABEL_135:
        swift::Demangle::Node::addChild(v116, v117, this, a4, a5);
        return (int8x16_t *)v8;
      case 'Y':
        return (int8x16_t *)swift::Demangle::Demangler::demangleAnyGenericType(this, 167, a3, a4, a5);
      case 'Z':
        v56 = swift::Demangle::Demangler::popTypeList(this, a2, a3, a4, a5);
        v57 = *((_DWORD *)this + 24);
        if (v57
          && (v58 = v57 - 1,
              v59 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v58),
              *((_WORD *)v59 + 8) == 101))
        {
          *((_DWORD *)this + 24) = v58;
        }
        else
        {
          v59 = 0;
        }
        v132 = swift::Demangle::Demangler::popContext(this, v52, v53, v54, v55);
        v133 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v133;
        if (!v133 || v133 + 24 > *((_QWORD *)this + 2))
        {
          v134 = 2 * *((_QWORD *)this + 4);
          if (v134 <= 0x20)
            v134 = 32;
          *((_QWORD *)this + 4) = v134;
          v135 = v134 + 8;
          v136 = malloc_type_malloc(v134 + 8, 0xD0263BC5uLL);
          *v136 = *((_QWORD *)this + 3);
          v133 = ((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v136 + v135;
          *((_QWORD *)this + 3) = v136;
        }
        v8 = 0;
        *((_QWORD *)this + 1) = v133 + 24;
        *(_WORD *)(v133 + 16) = 1;
        *(_BYTE *)(v133 + 18) = 0;
        if (!v59 || !v133)
          return (int8x16_t *)v8;
        swift::Demangle::Node::addChild((unsigned int *)v133, v59, this, v130, v131);
        if (!v132)
          return 0;
        swift::Demangle::Node::addChild((unsigned int *)v133, v132, this, v137, v138);
        if (!v56)
          return 0;
        swift::Demangle::Node::addChild((unsigned int *)v133, (swift::Demangle::Node *)v56, this, v139, v140);
        return (int8x16_t *)v133;
      case 'b':
        v60 = *((_DWORD *)this + 24);
        if (!v60)
          return 0;
        v61 = v60 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v61);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v61;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v62 = 2 * *((_QWORD *)this + 4);
          if (v62 <= 0x20)
            v62 = 32;
          *((_QWORD *)this + 4) = v62;
          v63 = v62 + 8;
          v64 = malloc_type_malloc(v62 + 8, 0xD0263BC5uLL);
          v65 = (char *)v64 + v63;
          *v64 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v65;
          *((_QWORD *)this + 3) = v64;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 210;
        goto LABEL_127;
      case 'c':
        v66 = *((_DWORD *)this + 24);
        if (v66
          && (v67 = v66 - 1,
              v68 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v67),
              *((_WORD *)v68 + 8) == 232))
        {
          *((_DWORD *)this + 24) = v67;
        }
        else
        {
          v68 = 0;
        }
        v141 = swift::Demangle::Demangler::demangleProtocolList(this, a2, a3, a4, a5);
        v8 = 0;
        if (!v68)
          return (int8x16_t *)v8;
        v144 = (swift::Demangle::Node *)v141;
        if (!v141)
          return (int8x16_t *)v8;
        v145 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v145;
        if (!v145 || v145 + 24 > *((_QWORD *)this + 2))
        {
          v146 = 2 * *((_QWORD *)this + 4);
          if (v146 <= 0x20)
            v146 = 32;
          *((_QWORD *)this + 4) = v146;
          v147 = v146 + 8;
          v148 = malloc_type_malloc(v146 + 8, 0xD0263BC5uLL);
          *v148 = *((_QWORD *)this + 3);
          v145 = ((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v148 + v147;
          *((_QWORD *)this + 3) = v148;
        }
        *((_QWORD *)this + 1) = v145 + 24;
        *(_WORD *)(v145 + 16) = 191;
        *(_BYTE *)(v145 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v145, v144, this, v142, v143);
        swift::Demangle::Node::addChild((unsigned int *)v145, v68, this, v149, v150);
        v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
        {
          v151 = 2 * *((_QWORD *)this + 4);
          if (v151 <= 0x20)
            v151 = 32;
          *((_QWORD *)this + 4) = v151;
          v152 = v151 + 8;
          v153 = malloc_type_malloc(v151 + 8, 0xD0263BC5uLL);
          v154 = (char *)v153 + v152;
          *v153 = *((_QWORD *)this + 3);
          v8 = ((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v154;
          *((_QWORD *)this + 3) = v153;
        }
        *((_QWORD *)this + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = 232;
        *(_BYTE *)(v8 + 18) = 0;
        v116 = (unsigned int *)v8;
        v117 = (swift::Demangle::Node *)v145;
        goto LABEL_135;
      case 'e':
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || (v69 = *((_QWORD *)this + 2), v21 + 24 > v69))
        {
          v70 = 2 * *((_QWORD *)this + 4);
          if (v70 <= 0x20)
            v70 = 32;
          *((_QWORD *)this + 4) = v70;
          v71 = v70 + 8;
          v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
          v69 = (unint64_t)v72 + v71;
          *v72 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v72 + v71;
          *((_QWORD *)this + 3) = v72;
        }
        *(_WORD *)(v21 + 16) = 63;
        *(_BYTE *)(v21 + 18) = 0;
        v8 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (v8)
          v73 = v8 + 24 > v69;
        else
          v73 = 1;
        if (!v73)
          goto LABEL_134;
        goto LABEL_131;
      case 'f':
        v18 = 222;
LABEL_75:
        v74 = 0;
        return (int8x16_t *)swift::Demangle::Demangler::popFunctionType(this, v18, v74, a4, a5);
      case 'j':
        return swift::Demangle::Demangler::demangleSymbolicExtendedExistentialType(this, a2, a3, a4, a5);
      case 'l':
        v8 = swift::Demangle::Demangler::demangleProtocolList(this, a2, a3, a4, a5);
        if (!v8)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v75 = 2 * *((_QWORD *)this + 4);
          if (v75 <= 0x20)
            v75 = 32;
          *((_QWORD *)this + 4) = v75;
          v76 = v75 + 8;
          v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
          v78 = (char *)v77 + v76;
          *v77 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v78;
          *((_QWORD *)this + 3) = v77;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 192;
        goto LABEL_127;
      case 'm':
        v79 = swift::Demangle::Demangler::demangleMetatypeRepresentation(this);
        v80 = *((_DWORD *)this + 24);
        if (!v80)
          return 0;
        v81 = v80 - 1;
        v32 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v81);
        if (*((_WORD *)v32 + 8) != 232)
          return 0;
        v8 = v79;
        *((_DWORD *)this + 24) = v81;
        if (!v79)
          return (int8x16_t *)v8;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v82 = 2 * *((_QWORD *)this + 4);
          if (v82 <= 0x20)
            v82 = 32;
          *((_QWORD *)this + 4) = v82;
          v83 = v82 + 8;
          v84 = malloc_type_malloc(v82 + 8, 0xD0263BC5uLL);
          v85 = (char *)v84 + v83;
          *v84 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v85;
          *((_QWORD *)this + 3) = v84;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v37 = 69;
LABEL_94:
        *(_WORD *)(v21 + 16) = v37;
        *(_BYTE *)(v21 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v21, (swift::Demangle::Node *)v8, this, v28, v29);
        v86 = (unsigned int *)v21;
        v87 = v32;
        goto LABEL_129;
      case 'o':
        v88 = *((_DWORD *)this + 24);
        if (!v88)
          return 0;
        v89 = v88 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v89);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v89;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v90 = 2 * *((_QWORD *)this + 4);
          if (v90 <= 0x20)
            v90 = 32;
          *((_QWORD *)this + 4) = v90;
          v91 = v90 + 8;
          v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
          v93 = (char *)v92 + v91;
          *v92 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v93;
          *((_QWORD *)this + 3) = v92;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 248;
        goto LABEL_127;
      case 'p':
        v94 = *((_DWORD *)this + 24);
        if (!v94)
          return 0;
        v95 = v94 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v95);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v95;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v96 = 2 * *((_QWORD *)this + 4);
          if (v96 <= 0x20)
            v96 = 32;
          *((_QWORD *)this + 4) = v96;
          v97 = v96 + 8;
          v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
          v99 = (char *)v98 + v97;
          *v98 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v99;
          *((_QWORD *)this + 3) = v98;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 69;
        goto LABEL_127;
      case 'u':
        v100 = *((_DWORD *)this + 24);
        if (!v100)
          return 0;
        v101 = v100 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v101);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v101;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v102 = 2 * *((_QWORD *)this + 4);
          if (v102 <= 0x20)
            v102 = 32;
          *((_QWORD *)this + 4) = v102;
          v103 = v102 + 8;
          v104 = malloc_type_malloc(v102 + 8, 0xD0263BC5uLL);
          v105 = (char *)v104 + v103;
          *v104 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v105;
          *((_QWORD *)this + 3) = v104;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 249;
        goto LABEL_127;
      case 'w':
        v106 = *((_DWORD *)this + 24);
        if (!v106)
          return 0;
        v107 = v106 - 1;
        v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v107);
        if (*(_WORD *)(v8 + 16) != 232)
          return 0;
        *((_DWORD *)this + 24) = v107;
        v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
        {
          v108 = 2 * *((_QWORD *)this + 4);
          if (v108 <= 0x20)
            v108 = 32;
          *((_QWORD *)this + 4) = v108;
          v109 = v108 + 8;
          v110 = malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
          v111 = (char *)v110 + v109;
          *v110 = *((_QWORD *)this + 3);
          v21 = ((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v111;
          *((_QWORD *)this + 3) = v110;
        }
        *((_QWORD *)this + 1) = v21 + 24;
        v26 = 247;
LABEL_127:
        *(_WORD *)(v21 + 16) = v26;
        *(_BYTE *)(v21 + 18) = 0;
LABEL_128:
        v86 = (unsigned int *)v21;
        v87 = (swift::Demangle::Node *)v8;
LABEL_129:
        swift::Demangle::Node::addChild(v86, v87, this, a4, a5);
        v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v8;
        if (!v8 || v8 + 24 > *((_QWORD *)this + 2))
        {
LABEL_131:
          v112 = 2 * *((_QWORD *)this + 4);
          if (v112 <= 0x20)
            v112 = 32;
          *((_QWORD *)this + 4) = v112;
          v113 = v112 + 8;
          v114 = malloc_type_malloc(v112 + 8, 0xD0263BC5uLL);
          v115 = (char *)v114 + v113;
          *v114 = *((_QWORD *)this + 3);
          v8 = ((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v115;
          *((_QWORD *)this + 3) = v114;
        }
LABEL_134:
        *((_QWORD *)this + 1) = v8 + 24;
        *(_WORD *)(v8 + 16) = 232;
        *(_BYTE *)(v8 + 18) = 0;
        v116 = (unsigned int *)v8;
        v117 = (swift::Demangle::Node *)v21;
        goto LABEL_135;
      case 'z':
        if (v9 >= v6)
          return 0;
        *((_QWORD *)this + 9) = v5 + 2;
        v118 = *(char *)(v10 + v9);
        if (v118 == 67)
        {
          v18 = 22;
          v74 = 1;
          return (int8x16_t *)swift::Demangle::Demangler::popFunctionType(this, v18, v74, a4, a5);
        }
        if (v118 == 66)
        {
          v18 = 165;
          v74 = 1;
          return (int8x16_t *)swift::Demangle::Demangler::popFunctionType(this, v18, v74, a4, a5);
        }
        break;
      default:
        return (int8x16_t *)v8;
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::popFunctionType(swift::Demangle::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  swift::Demangle::Node *v13;
  int v14;
  swift::Demangle::Node *v15;
  swift::Demangle::Node *v16;
  swift::Demangle::Node *v17;
  swift::Demangle::Node *v18;
  swift::Demangle::Node *v19;
  swift::Demangle::Node *v20;
  swift::Demangle::Node *v21;
  unsigned int v22;
  swift::Demangle::Node *v23;
  swift::Demangle::Node *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  swift::Demangle::Node *v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;

  v5 = a3;
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v12;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 18) = 0;
  if (v5)
  {
    v13 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleClangType(a1);
    if (v13)
      swift::Demangle::Node::addChild((unsigned int *)v8, v13, a1, a4, a5);
  }
  v14 = *((_DWORD *)a1 + 24);
  if (v14)
  {
    v15 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
    if (*((_WORD *)v15 + 8) != 349
      || (*((_DWORD *)a1 + 24) = v14 - 1,
          swift::Demangle::Node::addChild((unsigned int *)v8, v15, a1, a4, a5),
          (v14 = *((_DWORD *)a1 + 24)) != 0))
    {
      v16 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v16 + 8) != 67
        || (*((_DWORD *)a1 + 24) = v14 - 1,
            swift::Demangle::Node::addChild((unsigned int *)v8, v16, a1, a4, a5),
            (v14 = *((_DWORD *)a1 + 24)) != 0))
      {
        v17 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
        if (*((_WORD *)v17 + 8) != 129
          || (*((_DWORD *)a1 + 24) = v14 - 1,
              swift::Demangle::Node::addChild((unsigned int *)v8, v17, a1, a4, a5),
              (v14 = *((_DWORD *)a1 + 24)) != 0))
        {
          v18 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
          if (*((_WORD *)v18 + 8) != 130
            || (*((_DWORD *)a1 + 24) = v14 - 1,
                swift::Demangle::Node::addChild((unsigned int *)v8, v18, a1, a4, a5),
                (v14 = *((_DWORD *)a1 + 24)) != 0))
          {
            v19 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
            if (*((_WORD *)v19 + 8) != 68
              || (*((_DWORD *)a1 + 24) = v14 - 1,
                  swift::Demangle::Node::addChild((unsigned int *)v8, v19, a1, a4, a5),
                  (v14 = *((_DWORD *)a1 + 24)) != 0))
            {
              v20 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
              if ((*((_WORD *)v20 + 8) & 0xFFFE) != 0x110
                || (*((_DWORD *)a1 + 24) = v14 - 1,
                    swift::Demangle::Node::addChild((unsigned int *)v8, v20, a1, a4, a5),
                    (v14 = *((_DWORD *)a1 + 24)) != 0))
              {
                v21 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * (v14 - 1));
                if (*((_WORD *)v21 + 8) != 66
                  || (*((_DWORD *)a1 + 24) = v14 - 1,
                      swift::Demangle::Node::addChild((unsigned int *)v8, v21, a1, a4, a5),
                      (v14 = *((_DWORD *)a1 + 24)) != 0))
                {
                  v22 = v14 - 1;
                  v23 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * v22);
                  if (*((_WORD *)v23 + 8) == 271)
                  {
                    *((_DWORD *)a1 + 24) = v22;
                    swift::Demangle::Node::addChild((unsigned int *)v8, v23, a1, a4, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v24 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParams(a1, 3, a3, a4, a5);
  if (v24)
    swift::Demangle::Node::addChild((unsigned int *)v8, v24, a1, v26, v27);
  else
    v8 = 0;
  v28 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParams(a1, 207, v25, v26, v27);
  v31 = 0;
  if (v8 && v28)
  {
    swift::Demangle::Node::addChild((unsigned int *)v8, v28, a1, v29, v30);
    v31 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v31;
    if (!v31 || v31 + 24 > *((_QWORD *)a1 + 2))
    {
      v34 = 2 * *((_QWORD *)a1 + 4);
      if (v34 <= 0x20)
        v34 = 32;
      *((_QWORD *)a1 + 4) = v34;
      v35 = v34 + 8;
      v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
      v37 = (char *)v36 + v35;
      *v36 = *((_QWORD *)a1 + 3);
      v31 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v37;
      *((_QWORD *)a1 + 3) = v36;
    }
    *((_QWORD *)a1 + 1) = v31 + 24;
    *(_WORD *)(v31 + 16) = 232;
    *(_BYTE *)(v31 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v31, (swift::Demangle::Node *)v8, a1, v32, v33);
  }
  return v31;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleFunctionEntity(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  __int16 v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node *v14;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  swift::Demangle::Node *v23;
  swift::Demangle::Node *v24;
  uint64_t v25;
  const char *v26;
  swift::Demangle::Node *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  unsigned int *v33;
  swift::Demangle::Node *v34;

  v5 = *((_QWORD *)this + 9);
  if (v5 < *((_QWORD *)this + 8))
  {
    v7 = 0;
    *((_QWORD *)this + 9) = v5 + 1;
    v8 = *(char *)(*((_QWORD *)this + 7) + v5) - 65;
    v9 = 0;
    v10 = 0;
    v11 = 70;
    v12 = 31;
    v13 = 0;
    v14 = 0;
    switch(v8)
    {
      case 0:
        v7 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        v13 = 0;
        v14 = 0;
        v10 = 3;
        v12 = 33;
        goto LABEL_31;
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_31;
      case 4:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 104;
        goto LABEL_31;
      case 12:
        return (swift::Demangle::Node *)swift::Demangle::Demangler::demangleMacroExpansion(this, a2, a3, a4, a5);
      case 15:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 178;
        goto LABEL_31;
      case 20:
        goto LABEL_20;
      case 22:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 179;
        goto LABEL_31;
      case 34:
        v9 = 29;
LABEL_9:
        v12 = v9;
        v16 = *((_DWORD *)this + 24);
        if (v16)
        {
          v17 = v16 - 1;
          v18 = *((_QWORD *)this + 11);
          v7 = *(_QWORD *)(v18 + 8 * (v16 - 1));
          if (*(_WORD *)(v7 + 16) == 176)
          {
            *((_DWORD *)this + 24) = v17;
            if (v16 == 1)
              goto LABEL_29;
          }
          else
          {
            v7 = 0;
            v17 = *((_DWORD *)this + 24);
          }
          v22 = v17 - 1;
          v13 = *(swift::Demangle::Node **)(v18 + 8 * v22);
          if (*((_WORD *)v13 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v22;
            goto LABEL_30;
          }
        }
        else
        {
          v7 = 0;
        }
LABEL_29:
        v13 = 0;
LABEL_30:
        v14 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, v13, a3, a4, a5);
        v10 = 1;
LABEL_31:
        v23 = (swift::Demangle::Node *)v7;
        v24 = swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
        if (v24)
        {
          v27 = v24;
          v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = v28;
          if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
          {
            v29 = 2 * *((_QWORD *)this + 4);
            if (v29 <= 0x20)
              v29 = 32;
            *((_QWORD *)this + 4) = v29;
            v30 = v29 + 8;
            v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            v32 = (char *)v31 + v30;
            *v31 = *((_QWORD *)this + 3);
            v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)this + 2) = v32;
            *((_QWORD *)this + 3) = v31;
          }
          *((_QWORD *)this + 1) = v28 + 24;
          *(_WORD *)(v28 + 16) = v12;
          *(_BYTE *)(v28 + 18) = 0;
          swift::Demangle::Node::addChild((unsigned int *)v28, v27, this, v25, v26);
          if (v10 != 1)
          {
LABEL_38:
            if (v10 == 2)
            {
              v7 = 0;
              if (!v23 || !v28)
                return (swift::Demangle::Node *)v7;
              swift::Demangle::Node::addChild((unsigned int *)v28, v23, this, v25, v26);
              if (!v13)
                return 0;
              v33 = (unsigned int *)v28;
              v34 = v13;
              goto LABEL_55;
            }
            if (v10 == 3)
            {
              v7 = 0;
              if (!v23 || !v28)
                return (swift::Demangle::Node *)v7;
              goto LABEL_50;
            }
            return (swift::Demangle::Node *)v28;
          }
        }
        else
        {
          v28 = 0;
          if (v10 != 1)
            goto LABEL_38;
        }
        if (v14 && v28)
          swift::Demangle::Node::addChild((unsigned int *)v28, v14, this, v25, v26);
        v7 = 0;
        if (!v13 || !v28)
          return (swift::Demangle::Node *)v7;
        swift::Demangle::Node::addChild((unsigned int *)v28, v13, this, v25, v26);
        if (v23)
        {
LABEL_50:
          v33 = (unsigned int *)v28;
          v34 = v23;
LABEL_55:
          swift::Demangle::Node::addChild(v33, v34, this, v25, v26);
        }
        return (swift::Demangle::Node *)v28;
      case 35:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 50;
        goto LABEL_31;
      case 36:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 103;
        goto LABEL_31;
      case 40:
        v10 = 0;
        v7 = 0;
        v13 = 0;
        v14 = 0;
        v12 = 125;
        goto LABEL_31;
      case 44:
        v19 = 138;
        return swift::Demangle::Demangler::demangleEntity(this, v19, a3, a4, a5);
      case 47:
        v19 = 262;
        return swift::Demangle::Demangler::demangleEntity(this, v19, a3, a4, a5);
      case 52:
        v11 = 117;
LABEL_20:
        v7 = swift::Demangle::Demangler::demangleIndexAsNode(this);
        v20 = *((_DWORD *)this + 24);
        if (v20
          && (v21 = v20 - 1,
              v13 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v21),
              *((_WORD *)v13 + 8) == 232))
        {
          v14 = 0;
          *((_DWORD *)this + 24) = v21;
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
        v10 = 2;
        v12 = v11;
        goto LABEL_31;
      default:
        return (swift::Demangle::Node *)v7;
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleRetroactiveConformance(swift::Demangle::Demangler *this)
{
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  swift::Demangle::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;

  v2 = swift::Demangle::Demangler::demangleIndexAsNode(this);
  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v6 = v5 - 1;
  v7 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v6);
  v8 = v7[8];
  v9 = v8 > 0x31;
  v10 = (1 << v8) & 0x380000C000000;
  if (v9 || v10 == 0)
    return 0;
  v12 = (swift::Demangle::Node *)v2;
  *((_DWORD *)this + 24) = v6;
  if (!v2)
    return 0;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 206;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v13, v12, this, v3, v4);
  swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v7, this, v18, v19);
  return v13;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleSubscript(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  swift::Demangle::Node *v11;
  swift::Demangle::Node *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  swift::Demangle::Node *v17;
  uint64_t v18;
  const char *v19;
  swift::Demangle::Node *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  swift::Demangle::Node *v26;
  uint64_t v27;
  const char *v28;
  swift::Demangle::Node *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;

  v6 = *((_DWORD *)this + 24);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = *((_QWORD *)this + 11);
    v9 = *(swift::Demangle::Node **)(v8 + 8 * (v6 - 1));
    if (*((_WORD *)v9 + 8) == 176)
    {
      *((_DWORD *)this + 24) = v7;
      if (v6 == 1)
        goto LABEL_9;
    }
    else
    {
      v9 = 0;
      v7 = *((_DWORD *)this + 24);
    }
    v10 = v7 - 1;
    v11 = *(swift::Demangle::Node **)(v8 + 8 * v10);
    if (*((_WORD *)v11 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v10;
      goto LABEL_10;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_9:
  v11 = 0;
LABEL_10:
  v12 = (swift::Demangle::Node *)swift::Demangle::Demangler::popFunctionParamLabels(this, v11, a3, a4, a5);
  v17 = swift::Demangle::Demangler::popContext(this, v13, v14, v15, v16);
  if (!v11)
    return 0;
  v20 = v17;
  v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v21;
  if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
  {
    v22 = 2 * *((_QWORD *)this + 4);
    if (v22 <= 0x20)
      v22 = 32;
    *((_QWORD *)this + 4) = v22;
    v23 = v22 + 8;
    v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    v25 = (char *)v24 + v23;
    *v24 = *((_QWORD *)this + 3);
    v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v25;
    *((_QWORD *)this + 3) = v24;
  }
  v26 = 0;
  *((_QWORD *)this + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = 220;
  *(_BYTE *)(v21 + 18) = 0;
  if (v20 && v21)
  {
    swift::Demangle::Node::addChild((unsigned int *)v21, v20, this, v18, v19);
    if (v12)
      swift::Demangle::Node::addChild((unsigned int *)v21, v12, this, v27, v28);
    swift::Demangle::Node::addChild((unsigned int *)v21, v11, this, v27, v28);
    if (v9)
      swift::Demangle::Node::addChild((unsigned int *)v21, v9, this, v18, v19);
    v26 = (swift::Demangle::Node *)v21;
  }
  v29 = setParentForOpaqueReturnTypeNodes(this, v26, v11, v18, v19);
  return swift::Demangle::Demangler::demangleAccessor(this, v29, v30, v31, v32);
}

int8x16_t *swift::Demangle::Demangler::demangleGenericSignature(swift::Demangle::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int8x16_t *result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;

  v7 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v7;
  if (!v7 || (v8 = *((_QWORD *)this + 2), (unint64_t)&v7[1].u64[1] > v8))
  {
    v9 = 2 * *((_QWORD *)this + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)this + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v8 = (unint64_t)v11 + v10;
    *v11 = *((_QWORD *)this + 3);
    v7 = (int8x16_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v11;
  }
  *((_QWORD *)this + 1) = (char *)v7 + 24;
  v7[1].i16[0] = 43;
  v7[1].i8[2] = 0;
  if (!a2)
  {
    v25 = ((unint64_t)&v7[1].u64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v25;
    if (v25)
      v26 = v25 + 24 > v8;
    else
      v26 = 1;
    if (v26)
    {
      v27 = 2 * *((_QWORD *)this + 4);
      if (v27 <= 0x20)
        v27 = 32;
      *((_QWORD *)this + 4) = v27;
      v28 = v27 + 8;
      v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
      *v29 = *((_QWORD *)this + 3);
      v25 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v29 + v28;
      *((_QWORD *)this + 3) = v29;
    }
    *((_QWORD *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 37;
    *(_BYTE *)(v25 + 18) = 4;
    *(_QWORD *)v25 = 1;
    swift::Demangle::Node::addChild((unsigned int *)v7, (swift::Demangle::Node *)v25, this, a4, a5);
LABEL_39:
    v30 = v7[1].u8[2];
    v31 = v30;
    if ((_DWORD)v30 != 1)
    {
      if ((_DWORD)v30 != 5)
      {
        if ((_DWORD)v30 == 2)
        {
          v31 = 2;
          v32 = *((_DWORD *)this + 24);
          if (!v32)
            goto LABEL_49;
        }
        else
        {
          v31 = 0;
          v32 = *((_DWORD *)this + 24);
          if (!v32)
            goto LABEL_49;
        }
        goto LABEL_54;
      }
      v31 = v7->u32[2];
    }
    v32 = *((_DWORD *)this + 24);
    if (!v32)
    {
LABEL_49:
      if ((_DWORD)v30 != 5)
        goto LABEL_50;
      goto LABEL_58;
    }
    do
    {
LABEL_54:
      v33 = v32 - 1;
      v34 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v32 - 1));
      v35 = v34[8];
      if ((v35 - 39) >= 4 && v35 != 354 && v35 != 36)
        break;
      *((_DWORD *)this + 24) = v33;
      swift::Demangle::Node::addChild((unsigned int *)v7, (swift::Demangle::Node *)v34, this, a4, a5);
      v32 = *((_DWORD *)this + 24);
    }
    while (v32);
    LODWORD(v30) = v7[1].u8[2];
    if ((_DWORD)v30 != 5)
    {
LABEL_50:
      if ((_DWORD)v30 == 2 && !v31)
        *v7 = vextq_s8(*v7, *v7, 8uLL);
      return v7;
    }
LABEL_58:
    v36 = v7->u32[2];
    if (v31 != v36)
    {
      v37 = (_QWORD *)(v7->i64[0] + 8 * v36 - 8);
      if ((unint64_t)v37 > v7->i64[0] + 8 * v31)
      {
        v38 = v7->i64[0] + 8 * v31 + 8;
        do
        {
          v39 = *(_QWORD *)(v38 - 8);
          *(_QWORD *)(v38 - 8) = *v37;
          *v37-- = v39;
          v40 = v38 >= (unint64_t)v37;
          v38 += 8;
        }
        while (!v40);
      }
    }
    return v7;
  }
  v13 = *((_QWORD *)this + 8);
  v12 = *((_QWORD *)this + 9);
  if (v12 < v13)
  {
    while (1)
    {
      v14 = *((_QWORD *)this + 7);
      v15 = *(unsigned __int8 *)(v14 + v12);
      switch(v15)
      {
        case '_':
          *((_QWORD *)this + 9) = v12 + 1;
          v19 = 1;
          break;
        case 'z':
          v19 = 0;
          *((_QWORD *)this + 9) = v12 + 1;
          break;
        case 'l':
          *((_QWORD *)this + 9) = v12 + 1;
          goto LABEL_39;
        default:
          if ((v15 - 48) > 9)
            return 0;
          v16 = 0;
          while (1)
          {
            v17 = *(unsigned __int8 *)(v14 + v12);
            if ((v17 - 48) > 9)
              break;
            v18 = v17 + 10 * v16 - 48;
            if (v18 >= v16)
            {
              *((_QWORD *)this + 9) = ++v12;
              v16 = v18;
              if (v13 != v12)
                continue;
            }
            return 0;
          }
          result = 0;
          if (v16 < 0 || v12 >= v13 || v17 != 95)
            return result;
          *((_QWORD *)this + 9) = v12 + 1;
          v19 = v16 + 2;
          break;
      }
      v21 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v21;
      if (!v21 || v21 + 24 > *((_QWORD *)this + 2))
      {
        v22 = 2 * *((_QWORD *)this + 4);
        if (v22 <= 0x20)
          v22 = 32;
        *((_QWORD *)this + 4) = v22;
        v23 = v22 + 8;
        v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
        *v24 = *((_QWORD *)this + 3);
        v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v24 + v23;
        *((_QWORD *)this + 3) = v24;
      }
      *((_QWORD *)this + 1) = v21 + 24;
      *(_WORD *)(v21 + 16) = 37;
      *(_BYTE *)(v21 + 18) = 4;
      *(_QWORD *)v21 = v19;
      swift::Demangle::Node::addChild((unsigned int *)v7, (swift::Demangle::Node *)v21, this, a4, a5);
      result = 0;
      v13 = *((_QWORD *)this + 8);
      v12 = *((_QWORD *)this + 9);
      if (v12 >= v13)
        return result;
    }
  }
  return 0;
}

unint64_t swift::Demangle::Demangler::demangleOperatorIdentifier(swift::Demangle::Demangler *this)
{
  int v1;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  unint64_t result;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  v4 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 101)
    return 0;
  *((_DWORD *)this + 24) = v3;
  v5 = v4[1];
  if (!v5)
  {
    v21 = 0;
    v7 = 0;
    goto LABEL_29;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *v4;
  v41 = *v4;
  do
  {
    v10 = *(char *)(v9 + v6);
    if ((v10 & 0x8000000000000000) == 0)
    {
      if ((v10 - 97) > 0x19 || ((0x17007A2uLL >> (v10 - 97)) & 1) != 0)
        return 0;
      LOBYTE(v10) = swift::Demangle::Demangler::demangleOperatorIdentifier(void)::op_char_table[v10 - 97];
    }
    if (v6 >= v8)
    {
      v11 = &v7[v8];
      v12 = (char *)*((_QWORD *)this + 1);
      if (v11 == v12)
      {
        v14 = v11 + 1;
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v14 <= v13)
        {
          *((_QWORD *)this + 1) = v14;
          LODWORD(v15) = 1;
LABEL_6:
          v8 += v15;
          goto LABEL_7;
        }
      }
      else
      {
        v13 = *((_QWORD *)this + 2);
      }
      if (2 * v8 <= 4)
        v15 = 4;
      else
        v15 = 2 * v8;
      v16 = v15 + v8;
      if (!v12 || (unint64_t)&v12[v16] > v13)
      {
        v17 = 2 * *((_QWORD *)this + 4);
        if (v17 <= v16 + 1)
          v17 = v16 + 1;
        *((_QWORD *)this + 4) = v17;
        v18 = v17 + 8;
        v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        v20 = (char *)v19 + v18;
        *v19 = *((_QWORD *)this + 3);
        v12 = (char *)(v19 + 1);
        *((_QWORD *)this + 2) = v20;
        *((_QWORD *)this + 3) = v19;
      }
      *((_QWORD *)this + 1) = &v12[v16];
      if (v8)
        memcpy(v12, v7, v8);
      v7 = v12;
      v9 = v41;
      goto LABEL_6;
    }
LABEL_7:
    v7[v6++] = v10;
  }
  while (v5 != v6);
  v21 = v6;
LABEL_29:
  v22 = *((_QWORD *)this + 9);
  if (v22 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v22 + 1;
  v23 = *(char *)(*((_QWORD *)this + 7) + v22);
  if (v23 == 80)
  {
    v24 = (_QWORD *)((char *)this + 8);
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (result && result + 24 <= *((_QWORD *)this + 2))
    {
      v32 = 173;
      goto LABEL_50;
    }
    v33 = 2 * *((_QWORD *)this + 4);
    if (v33 <= 0x20)
      v33 = 32;
    *((_QWORD *)this + 4) = v33;
    v34 = v33 + 8;
    v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
    v36 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v35;
    v30 = (char *)v35 + v34;
    *v35 = v36;
    v31 = v35 + 1;
    v32 = 173;
    goto LABEL_49;
  }
  if (v23 == 112)
  {
    v24 = (_QWORD *)((char *)this + 8);
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (result && result + 24 <= *((_QWORD *)this + 2))
    {
      v32 = 175;
      goto LABEL_50;
    }
    v37 = 2 * *((_QWORD *)this + 4);
    if (v37 <= 0x20)
      v37 = 32;
    *((_QWORD *)this + 4) = v37;
    v38 = v37 + 8;
    v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    v40 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v39;
    v30 = (char *)v39 + v38;
    *v39 = v40;
    v31 = v39 + 1;
    v32 = 175;
LABEL_49:
    result = ((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v30;
    goto LABEL_50;
  }
  if (v23 != 105)
    return 0;
  v24 = (_QWORD *)((char *)this + 8);
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v26 = 2 * *((_QWORD *)this + 4);
    if (v26 <= 0x20)
      v26 = 32;
    *((_QWORD *)this + 4) = v26;
    v27 = v26 + 8;
    v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    v29 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v28;
    v30 = (char *)v28 + v27;
    *v28 = v29;
    v31 = v28 + 1;
    v32 = 124;
    goto LABEL_49;
  }
  v32 = 124;
LABEL_50:
  *v24 = result + 24;
  *(_WORD *)(result + 16) = v32;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v21;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleProtocolListType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  swift::Demangle::Node *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;

  v6 = swift::Demangle::Demangler::demangleProtocolList(this, a2, a3, a4, a5);
  if (!v6)
    return 0;
  v9 = (swift::Demangle::Node *)v6;
  v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v10;
  if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
  {
    v11 = 2 * *((_QWORD *)this + 4);
    if (v11 <= 0x20)
      v11 = 32;
    *((_QWORD *)this + 4) = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    v14 = (char *)v13 + v12;
    *v13 = *((_QWORD *)this + 3);
    v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v14;
    *((_QWORD *)this + 3) = v13;
  }
  *((_QWORD *)this + 1) = v10 + 24;
  *(_WORD *)(v10 + 16) = 232;
  *(_BYTE *)(v10 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v10, v9, this, v7, v8);
  return v10;
}

uint64_t swift::Demangle::Demangler::demangleGenericParamIndex(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v6 = *((_QWORD *)this + 8);
  v7 = *((_QWORD *)this + 9);
  if (v7 >= v6)
  {
LABEL_10:
    v9 = -999;
  }
  else
  {
    v8 = *((_QWORD *)this + 7);
    switch(*(_BYTE *)(v8 + v7))
    {
      case '_':
        *((_QWORD *)this + 9) = v7 + 1;
        v9 = 1;
        goto LABEL_11;
      case 'd':
        v15 = v7 + 1;
        *((_QWORD *)this + 9) = v7 + 1;
        if (v7 + 1 >= v6)
          goto LABEL_29;
        v16 = *(unsigned __int8 *)(v8 + v15);
        if (v16 == 95)
        {
          v15 = v7 + 2;
          *((_QWORD *)this + 9) = v7 + 2;
          v13 = 1;
          goto LABEL_30;
        }
        if ((v16 - 48) > 9)
          goto LABEL_29;
        v20 = 0;
        while (2)
        {
          v21 = *(unsigned __int8 *)(v8 + v15);
          if ((v21 - 48) > 9)
          {
            v13 = -999;
            if ((v20 & 0x80000000) == 0 && v15 < v6 && v21 == 95)
            {
              *((_QWORD *)this + 9) = ++v15;
              v13 = v20 + 2;
            }
          }
          else
          {
            v22 = v21 + 10 * v20 - 48;
            if (v22 >= v20)
            {
              *((_QWORD *)this + 9) = ++v15;
              v20 = v22;
              if (v6 == v15)
              {
                v9 = -1000;
                v13 = -999;
                return swift::Demangle::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
              }
              continue;
            }
LABEL_29:
            v13 = -999;
          }
          break;
        }
LABEL_30:
        if (v15 >= v6)
          goto LABEL_38;
        v23 = *(unsigned __int8 *)(v8 + v15);
        if (v23 == 95)
        {
          v9 = 0;
          *((_QWORD *)this + 9) = v15 + 1;
          return swift::Demangle::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
        }
        if ((v23 - 48) > 9)
          goto LABEL_38;
        v24 = 0;
        while (1)
        {
          v25 = *(unsigned __int8 *)(v8 + v15);
          if ((v25 - 48) > 9)
            break;
          v26 = v25 + 10 * v24 - 48;
          if (v26 >= v24)
          {
            *((_QWORD *)this + 9) = ++v15;
            v24 = v26;
            if (v6 != v15)
              continue;
          }
LABEL_38:
          v9 = -1000;
          return swift::Demangle::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
        }
        v9 = -1000;
        if ((v24 & 0x80000000) == 0 && v15 < v6 && v25 == 95)
        {
          *((_QWORD *)this + 9) = v15 + 1;
          v9 = v24 + 1;
        }
        return swift::Demangle::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
      case 's':
        *((_QWORD *)this + 9) = v7 + 1;
        result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = result;
        if (!result || (unint64_t)(result + 24) > *((_QWORD *)this + 2))
        {
          v17 = 2 * *((_QWORD *)this + 4);
          if (v17 <= 0x20)
            v17 = 32;
          *((_QWORD *)this + 4) = v17;
          v18 = v17 + 8;
          v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
          *v19 = *((_QWORD *)this + 3);
          result = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v19 + v18;
          *((_QWORD *)this + 3) = v19;
        }
        *((_QWORD *)this + 1) = result + 24;
        *(_WORD *)(result + 16) = 85;
        *(_BYTE *)(result + 18) = 0;
        return result;
      case 'z':
        *((_QWORD *)this + 9) = v7 + 1;
        v13 = 0;
        v9 = 0;
        return swift::Demangle::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
      default:
        if (*(unsigned __int8 *)(v8 + v7) - 48 > 9)
          goto LABEL_10;
        v10 = 0;
        v9 = -999;
        break;
    }
    while (1)
    {
      v11 = *(unsigned __int8 *)(v8 + v7);
      if ((v11 - 48) > 9)
        break;
      v12 = v11 + 10 * v10 - 48;
      if (v12 < v10)
        goto LABEL_10;
      *((_QWORD *)this + 9) = ++v7;
      v10 = v12;
      if (v6 == v7)
        goto LABEL_11;
    }
    v9 = -999;
    if ((v10 & 0x80000000) == 0 && v7 < v6 && v11 == 95)
    {
      *((_QWORD *)this + 9) = v7 + 1;
      v9 = v10 + 2;
    }
  }
LABEL_11:
  v13 = 0;
  return swift::Demangle::Demangler::getDependentGenericParamType(this, v13, v9, a4, a5);
}

unint64_t swift::Demangle::Demangler::popTuple(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  swift::Demangle::Node *v25;
  __int128 *v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  swift::Demangle::Node *v33;
  uint64_t v34;
  const char *v35;
  int v36;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  __int128 v43;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 223;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v18 = *((_DWORD *)this + 24);
      if (v18
        && (v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v18 - 1)), *(_WORD *)(v19 + 16) == 275))
      {
        *((_DWORD *)this + 24) = --v18;
      }
      else
      {
        v19 = 0;
      }
      v20 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v20;
      if (!v20 || v20 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
        v18 = *((_DWORD *)this + 24);
      }
      *((_QWORD *)this + 1) = v20 + 24;
      *(_WORD *)(v20 + 16) = 224;
      *(_BYTE *)(v20 + 18) = 0;
      if (!v18)
        return 0;
      v25 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v18 - 1));
      if (*((_WORD *)v25 + 8) == 276)
      {
        *((_DWORD *)this + 24) = v18 - 1;
        swift::Demangle::Node::addChild((unsigned int *)v20, v25, this, a4, a5);
        v18 = *((_DWORD *)this + 24);
        if (!v18)
          return 0;
      }
      v26 = *(__int128 **)(*((_QWORD *)this + 11) + 8 * (v18 - 1));
      if (*((_WORD *)v26 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v18 - 1;
        v27 = *v26;
        v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v28;
        if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
        {
          v29 = 2 * *((_QWORD *)this + 4);
          if (v29 <= 0x20)
            v29 = 32;
          *((_QWORD *)this + 4) = v29;
          v30 = v29 + 8;
          v43 = v27;
          v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
          v27 = v43;
          *v31 = *((_QWORD *)this + 3);
          v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v31 + v30;
          *((_QWORD *)this + 3) = v31;
        }
        *((_QWORD *)this + 1) = v28 + 24;
        *(_WORD *)(v28 + 16) = 225;
        *(_BYTE *)(v28 + 18) = 3;
        *(_OWORD *)v28 = v27;
        swift::Demangle::Node::addChild((unsigned int *)v20, (swift::Demangle::Node *)v28, this, a4, a5);
        v18 = *((_DWORD *)this + 24);
        if (!v18)
          return 0;
      }
      v32 = v18 - 1;
      v33 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v32);
      if (*((_WORD *)v33 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v32;
      swift::Demangle::Node::addChild((unsigned int *)v20, v33, this, a4, a5);
      swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v20, this, v34, v35);
    }
    while (!v19);
    v36 = v6[1].u8[2];
    if (v36 == 5)
    {
      v38 = v6->u32[2];
      if ((_DWORD)v38)
      {
        v39 = (_QWORD *)(v6->i64[0] + 8 * v38 - 8);
        if ((unint64_t)v39 > v6->i64[0])
        {
          v40 = v6->i64[0] + 8;
          do
          {
            v41 = *(_QWORD *)(v40 - 8);
            *(_QWORD *)(v40 - 8) = *v39;
            *v39-- = v41;
            v42 = v40 >= (unint64_t)v39;
            v40 += 8;
          }
          while (!v42);
        }
      }
    }
    else if (v36 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 232;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v6, this, a4, a5);
  return v13;
}

unint64_t swift::Demangle::Demangler::demangleGenericType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = v5 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(unsigned __int16 **)(v8 + 8 * (v5 - 1));
  v10 = v9[8];
  if (v10 == 232)
  {
    v22 = 0;
    *((_DWORD *)this + 24) = v7;
    return v22;
  }
  if (v10 != 43)
    return 0;
  *((_DWORD *)this + 24) = v7;
  if (v5 == 1)
    return 0;
  v11 = v5 - 2;
  v12 = *(swift::Demangle::Node **)(v8 + 8 * v11);
  if (*((_WORD *)v12 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v11;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 44;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v9, this, a4, a5);
  swift::Demangle::Node::addChild((unsigned int *)v13, v12, this, v18, v19);
  v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v22;
  if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
  {
    v23 = 2 * *((_QWORD *)this + 4);
    if (v23 <= 0x20)
      v23 = 32;
    *((_QWORD *)this + 4) = v23;
    v24 = v23 + 8;
    v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
    v26 = (char *)v25 + v24;
    *v25 = *((_QWORD *)this + 3);
    v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v25;
  }
  *((_QWORD *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 232;
  *(_BYTE *)(v22 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v22, (swift::Demangle::Node *)v13, this, v20, v21);
  return v22;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleVariable(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  swift::Demangle::Node *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v6 = swift::Demangle::Demangler::demangleEntity(this, 254, a3, a4, a5);
  return swift::Demangle::Demangler::demangleAccessor(this, v6, v7, v8, v9);
}

unint64_t swift::Demangle::Demangler::demangleValueWitness(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  int v23;
  unsigned int v24;
  swift::Demangle::Node *v25;
  unsigned __int16 v27;

  v7 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 >= v7)
  {
    v8 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v8 = *(_BYTE *)(*((_QWORD *)this + 7) + v6++);
  }
  LOBYTE(v27) = v8;
  if (v6 >= v7)
  {
    v9 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v6 + 1;
    v9 = *(_BYTE *)(*((_QWORD *)this + 7) + v6);
  }
  HIBYTE(v27) = v9;
  switch(v27)
  {
    case 0x6C61u:
      v10 = 0;
      break;
    case 0x6163u:
      v10 = 1;
      break;
    case 0x6174u:
      v10 = 2;
      break;
    case 0x6564u:
      v10 = 3;
      break;
    case 0x7878u:
      v10 = 4;
      break;
    case 0x5858u:
      v10 = 5;
      break;
    case 0x7858u:
      v10 = 6;
      break;
    case 0x5043u:
      v10 = 7;
      break;
    case 0x7043u:
      v10 = 8;
      break;
    case 0x7063u:
      v10 = 9;
      break;
    case 0x6B54u:
      v10 = 10;
      break;
    case 0x6B74u:
      v10 = 11;
      break;
    case 0x7270u:
      v10 = 12;
      break;
    case 0x4B54u:
      v10 = 13;
      break;
    case 0x6343u:
      v10 = 14;
      break;
    case 0x7454u:
      v10 = 15;
      break;
    case 0x5474u:
      v10 = 16;
      break;
    case 0x7378u:
      v10 = 17;
      break;
    case 0x6778u:
      v10 = 18;
      break;
    case 0x6775u:
      v10 = 19;
      break;
    case 0x7075u:
      v10 = 20;
      break;
    case 0x6975u:
      v10 = 21;
      break;
    case 0x7465u:
      v10 = 22;
      break;
    default:
      if (bswap32(v27) >> 16 != 29556)
        return 0;
      v10 = 23;
      break;
  }
  v11 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v11;
  if (!v11 || (v12 = *((_QWORD *)this + 2), v11 + 24 > v12))
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v12 = (unint64_t)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v12;
    *((_QWORD *)this + 3) = v15;
  }
  *(_WORD *)(v11 + 16) = 252;
  *(_BYTE *)(v11 + 18) = 0;
  v16 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v16;
  if (v16)
    v17 = v16 + 24 > v12;
  else
    v17 = 1;
  if (v17)
  {
    v18 = 2 * *((_QWORD *)this + 4);
    if (v18 <= 0x20)
      v18 = 32;
    *((_QWORD *)this + 4) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *v20 = *((_QWORD *)this + 3);
    v16 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v20 + v19;
    *((_QWORD *)this + 3) = v20;
  }
  *((_QWORD *)this + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = 102;
  *(_BYTE *)(v16 + 18) = 4;
  *(_QWORD *)v16 = v10;
  swift::Demangle::Node::addChild((unsigned int *)v11, (swift::Demangle::Node *)v16, this, a4, a5);
  v23 = *((_DWORD *)this + 24);
  if (!v23)
    return 0;
  v24 = v23 - 1;
  v25 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v24);
  if (*((_WORD *)v25 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v24;
  swift::Demangle::Node::addChild((unsigned int *)v11, v25, this, v21, v22);
  return v11;
}

unint64_t swift::Demangle::Demangler::getDependentGenericParamType(swift::Demangle::Demangler *this, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  if (((a3 | a2) & 0x80000000) != 0)
    return 0;
  v8 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v8;
  if (!v8 || (v9 = *((_QWORD *)this + 2), v8 + 24 > v9))
  {
    v10 = 2 * *((_QWORD *)this + 4);
    if (v10 <= 0x20)
      v10 = 32;
    *((_QWORD *)this + 4) = v10;
    v11 = v10 + 8;
    v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    v9 = (unint64_t)v12 + v11;
    *v12 = *((_QWORD *)this + 3);
    v8 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v9;
    *((_QWORD *)this + 3) = v12;
  }
  *(_WORD *)(v8 + 16) = 38;
  *(_BYTE *)(v8 + 18) = 0;
  v13 = a2;
  v14 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v14;
  if (v14)
    v15 = v14 + 24 > v9;
  else
    v15 = 1;
  if (v15)
  {
    v16 = 2 * *((_QWORD *)this + 4);
    if (v16 <= 0x20)
      v16 = 32;
    *((_QWORD *)this + 4) = v16;
    v17 = v16 + 8;
    v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
    *v18 = *((_QWORD *)this + 3);
    v14 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v18 + v17;
    *((_QWORD *)this + 3) = v18;
  }
  *((_QWORD *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 102;
  *(_BYTE *)(v14 + 18) = 4;
  *(_QWORD *)v14 = v13;
  swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)v14, this, a4, a5);
  v21 = a3;
  v22 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v22;
  if (!v22 || v22 + 24 > *((_QWORD *)this + 2))
  {
    v23 = 2 * *((_QWORD *)this + 4);
    if (v23 <= 0x20)
      v23 = 32;
    *((_QWORD *)this + 4) = v23;
    v24 = v23 + 8;
    v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
    *v25 = *((_QWORD *)this + 3);
    v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v25 + v24;
    *((_QWORD *)this + 3) = v25;
  }
  *((_QWORD *)this + 1) = v22 + 24;
  *(_WORD *)(v22 + 16) = 102;
  *(_BYTE *)(v22 + 18) = 4;
  *(_QWORD *)v22 = v21;
  swift::Demangle::Node::addChild((unsigned int *)v8, (swift::Demangle::Node *)v22, this, v19, v20);
  return v8;
}

uint64_t swift::Demangle::Demangler::demangleNatural(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 4294966296;
  v3 = *((_QWORD *)this + 7);
  if (*(unsigned __int8 *)(v3 + v1) - 48 > 9)
    return 4294966296;
  v4 = 0;
  while (1)
  {
    v5 = *(unsigned __int8 *)(v3 + v1);
    if ((v5 - 48) > 9)
      break;
    v6 = (v5 + 10 * v4 - 48);
    if ((int)v6 < (int)v4)
      return 4294966296;
    *((_QWORD *)this + 9) = ++v1;
    v4 = v6;
    if (v2 == v1)
      return v6;
  }
  return v4;
}

uint64_t swift::Demangle::Demangler::demangleIndex(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 < v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = *(unsigned __int8 *)(v3 + v1);
    if (v4 == 95)
    {
      *((_QWORD *)this + 9) = v1 + 1;
      return 0;
    }
    if ((v4 - 48) <= 9)
    {
      v6 = 0;
      while (1)
      {
        v7 = *(unsigned __int8 *)(v3 + v1);
        if ((v7 - 48) > 9)
          break;
        v8 = v7 + 10 * v6 - 48;
        if (v8 < v6)
          return 4294966296;
        *((_QWORD *)this + 9) = ++v1;
        v6 = v8;
        if (v2 == v1)
        {
          v1 = v2;
          v6 = v8;
          break;
        }
      }
      v9 = 4294966296;
      if (v6 < 0 || v1 >= v2)
        return v9;
      if (*(_BYTE *)(v3 + v1) == 95)
      {
        *((_QWORD *)this + 9) = v1 + 1;
        return (v6 + 1);
      }
    }
  }
  return 4294966296;
}

unint64_t swift::Demangle::Demangler::demangleIndexAsNode(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 0;
  v4 = *((_QWORD *)this + 7);
  v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    v6 = 0;
    *((_QWORD *)this + 9) = v1 + 1;
    goto LABEL_4;
  }
  if ((v5 - 48) > 9)
    return 0;
  v11 = 0;
  while (1)
  {
    v12 = *(unsigned __int8 *)(v4 + v1);
    if ((v12 - 48) > 9)
      break;
    v13 = v12 + 10 * v11 - 48;
    if (v13 >= v11)
    {
      *((_QWORD *)this + 9) = ++v1;
      v11 = v13;
      if (v2 != v1)
        continue;
    }
    return 0;
  }
  result = 0;
  if ((v11 & 0x80000000) == 0 && v1 < v2 && v12 == 95)
  {
    *((_QWORD *)this + 9) = v1 + 1;
    v6 = (v11 + 1);
LABEL_4:
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (!result || result + 24 > *((_QWORD *)this + 2))
    {
      v8 = 2 * *((_QWORD *)this + 4);
      if (v8 <= 0x20)
        v8 = 32;
      *((_QWORD *)this + 4) = v8;
      v9 = v8 + 8;
      v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      *v10 = *((_QWORD *)this + 3);
      result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v10 + v9;
      *((_QWORD *)this + 3) = v10;
    }
    *((_QWORD *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 161;
    *(_BYTE *)(result + 18) = 4;
    *(_QWORD *)result = v6;
  }
  return result;
}

uint64_t swift::Demangle::Demangler::pushMultiSubstitutions(swift::Demangle::Demangler *this, int a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v7;

  v3 = 0;
  if (a2 <= 2048 && *((unsigned int *)this + 28) > a3)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * a3);
    if (a2 >= 2)
    {
      v5 = a2 + 1;
      do
      {
        v7 = v3;
        swift::Demangle::Vector<swift::Demangle::Node *>::push_back((const void **)this + 11, &v7, this);
        --v5;
      }
      while (v5 > 2);
    }
  }
  return v3;
}

unint64_t swift::Demangle::Demangler::createSwiftType(swift::Demangle::NodeFactory *a1, __int16 a2, const char *a3)
{
  uint64_t v6;
  const char *v7;
  swift::Demangle::Node *Node;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;

  Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a1, 153, "Swift", 5uLL);
  v9 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v9;
  if (!v9 || v9 + 24 > *((_QWORD *)a1 + 2))
  {
    v10 = 2 * *((_QWORD *)a1 + 4);
    if (v10 <= 0x20)
      v10 = 32;
    *((_QWORD *)a1 + 4) = v10;
    v11 = v10 + 8;
    v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    v13 = (char *)v12 + v11;
    *v12 = *((_QWORD *)a1 + 3);
    v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v13;
    *((_QWORD *)a1 + 3) = v12;
  }
  *((_QWORD *)a1 + 1) = v9 + 24;
  if (a3)
    v14 = strlen(a3);
  else
    v14 = 0;
  *(_WORD *)(v9 + 16) = 101;
  *(_BYTE *)(v9 + 18) = 3;
  *(_QWORD *)v9 = a3;
  *(_QWORD *)(v9 + 8) = v14;
  if (!Node)
    return 0;
  v15 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v15;
  if (!v15 || v15 + 24 > *((_QWORD *)a1 + 2))
  {
    v16 = 2 * *((_QWORD *)a1 + 4);
    if (v16 <= 0x20)
      v16 = 32;
    *((_QWORD *)a1 + 4) = v16;
    v17 = v16 + 8;
    v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
    v19 = (char *)v18 + v17;
    *v18 = *((_QWORD *)a1 + 3);
    v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v19;
    *((_QWORD *)a1 + 3) = v18;
  }
  *((_QWORD *)a1 + 1) = v15 + 24;
  *(_WORD *)(v15 + 16) = a2;
  *(_BYTE *)(v15 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v15, Node, a1, v6, v7);
  swift::Demangle::Node::addChild((unsigned int *)v15, (swift::Demangle::Node *)v9, a1, v20, v21);
  v24 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v24;
  if (!v24 || v24 + 24 > *((_QWORD *)a1 + 2))
  {
    v25 = 2 * *((_QWORD *)a1 + 4);
    if (v25 <= 0x20)
      v25 = 32;
    *((_QWORD *)a1 + 4) = v25;
    v26 = v25 + 8;
    v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
    v28 = (char *)v27 + v26;
    *v27 = *((_QWORD *)a1 + 3);
    v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v28;
    *((_QWORD *)a1 + 3) = v27;
  }
  *((_QWORD *)a1 + 1) = v24 + 24;
  *(_WORD *)(v24 + 16) = 232;
  *(_BYTE *)(v24 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v24, (swift::Demangle::Node *)v15, a1, v22, v23);
  return v24;
}

unint64_t swift::Demangle::Demangler::createStandardSubstitution(swift::Demangle::Demangler *this, int a2, int a3)
{
  const char *v3;
  __int16 v4;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  if (a2 == 65 && a3 != 1)
  {
    v3 = "AutoreleasingUnsafeMutablePointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 97 && (a3 & 1) == 0)
  {
    v3 = "Array";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 98 && (a3 & 1) == 0)
  {
    v3 = "Bool";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 68 && (a3 & 1) == 0)
  {
    v3 = "Dictionary";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 100 && (a3 & 1) == 0)
  {
    v3 = "Double";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v6 = a3;
  if (a2 == 102)
    v7 = a3;
  else
    v7 = 1;
  if ((v7 & 1) == 0)
  {
    v3 = "Float";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 104)
    v6 = 1;
  if ((v6 & 1) == 0)
  {
    v3 = "Set";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v8 = a3;
  if (a2 == 73)
    v9 = a3;
  else
    v9 = 1;
  if ((v9 & 1) == 0)
  {
    v3 = "DefaultIndices";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 105)
    v8 = 1;
  if ((v8 & 1) == 0)
  {
    v3 = "Int";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v10 = a3;
  if (a2 != 74)
    v10 = 1;
  if ((v10 & 1) == 0)
  {
    v3 = "Character";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 78 && (a3 & 1) == 0)
  {
    v3 = "ClosedRange";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 110 && (a3 & 1) == 0)
  {
    v3 = "Range";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 79 && (a3 & 1) == 0)
  {
    v3 = "ObjectIdentifier";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v11 = a3;
  if (a2 != 80)
    v11 = 1;
  if ((v11 & 1) == 0)
  {
    v3 = "UnsafePointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 112 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutablePointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 82 && (a3 & 1) == 0)
  {
    v3 = "UnsafeBufferPointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 114 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutableBufferPointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v12 = a3;
  if (a2 == 83)
    v13 = a3;
  else
    v13 = 1;
  if ((v13 & 1) == 0)
  {
    v3 = "String";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 115)
    v12 = 1;
  if ((v12 & 1) == 0)
  {
    v3 = "Substring";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 117 && (a3 & 1) == 0)
  {
    v3 = "UInt";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 86 && (a3 & 1) == 0)
  {
    v3 = "UnsafeRawPointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 118 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutableRawPointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 87 && (a3 & 1) == 0)
  {
    v3 = "UnsafeRawBufferPointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 119 && (a3 & 1) == 0)
  {
    v3 = "UnsafeMutableRawBufferPointer";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 113 && (a3 & 1) == 0)
  {
    v3 = "Optional";
    v4 = 61;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 66 && (a3 & 1) == 0)
  {
    v3 = "BinaryFloatingPoint";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v14 = a3;
  if (a2 == 69)
    v15 = a3;
  else
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    v3 = "Encodable";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 101)
    v14 = 1;
  if ((v14 & 1) == 0)
  {
    v3 = "Decodable";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v16 = a3;
  if (a2 == 70)
    v17 = a3;
  else
    v17 = 1;
  if ((v17 & 1) == 0)
  {
    v3 = "FloatingPoint";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 71)
    v16 = 1;
  if ((v16 & 1) == 0)
  {
    v3 = "RandomNumberGenerator";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 72 && (a3 & 1) == 0)
  {
    v3 = "Hashable";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 106 && (a3 & 1) == 0)
  {
    v3 = "Numeric";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 75 && (a3 & 1) == 0)
  {
    v3 = "BidirectionalCollection";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 107 && (a3 & 1) == 0)
  {
    v3 = "RandomAccessCollection";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 76 && (a3 & 1) == 0)
  {
    v3 = "Comparable";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 108 && (a3 & 1) == 0)
  {
    v3 = "Collection";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v18 = a3;
  if (a2 != 77)
    v18 = 1;
  if ((v18 & 1) == 0)
  {
    v3 = "MutableCollection";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 109 && (a3 & 1) == 0)
  {
    v3 = "RangeReplaceableCollection";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 81 && (a3 & 1) == 0)
  {
    v3 = "Equatable";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  v19 = a3;
  if (a2 == 84)
    v20 = a3;
  else
    v20 = 1;
  if ((v20 & 1) == 0)
  {
    v3 = "Sequence";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 116)
    v19 = 1;
  if ((v19 & 1) == 0)
  {
    v3 = "IteratorProtocol";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 85 && (a3 & 1) == 0)
  {
    v3 = "UnsignedInteger";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 88 && (a3 & 1) == 0)
  {
    v3 = "RangeExpression";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 120 && (a3 & 1) == 0)
  {
    v3 = "Strideable";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 89 && (a3 & 1) == 0)
  {
    v3 = "RawRepresentable";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 121 && (a3 & 1) == 0)
  {
    v3 = "StringProtocol";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 90 && (a3 & 1) == 0)
  {
    v3 = "SignedInteger";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 122 && (a3 & 1) == 0)
  {
    v3 = "BinaryInteger";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 65 && a3)
  {
    v3 = "Actor";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 67 && a3)
  {
    v3 = "CheckedContinuation";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 99 && a3)
  {
    v3 = "UnsafeContinuation";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 69 && a3)
  {
    v3 = "CancellationError";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 101 && a3)
  {
    v3 = "UnownedSerialExecutor";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 70 && a3)
  {
    v3 = "Executor";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 102 && a3)
  {
    v3 = "SerialExecutor";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 71 && a3)
  {
    v3 = "TaskGroup";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 103 && a3)
  {
    v3 = "ThrowingTaskGroup";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 104 && a3)
  {
    v3 = "TaskExecutor";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 73 && a3)
  {
    v3 = "AsyncIteratorProtocol";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 105 && a3)
  {
    v3 = "AsyncSequence";
    v4 = 180;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 74 && a3)
  {
    v3 = "UnownedJob";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 77 && a3)
  {
    v3 = "MainActor";
    v4 = 24;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 80 && a3)
  {
    v3 = "TaskPriority";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 83 && a3)
  {
    v3 = "AsyncStream";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 115 && a3)
  {
    v3 = "AsyncThrowingStream";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 84 && a3)
  {
    v3 = "Task";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 116 && a3)
  {
    v3 = "UnsafeCurrentTask";
    v4 = 219;
    return swift::Demangle::Demangler::createSwiftType(this, v4, v3);
  }
  return 0;
}

unsigned int *swift::Demangle::Vector<char>::push_back(unsigned int *result, char *a2, _QWORD *a3)
{
  const void **v4;
  unsigned int v5;
  size_t v6;
  char *v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char v17;

  v4 = (const void **)result;
  v5 = result[2];
  v6 = result[3];
  v7 = *(char **)result;
  if (v5 >= v6)
  {
    v9 = (char *)a3[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = a3[2];
      if (v11 <= v10)
      {
        a3[1] = v11;
        LODWORD(v12) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      v10 = a3[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      v14 = 2 * a3[4];
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      a3[4] = v14;
      v15 = v14 + 8;
      result = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)result + v15;
      *(_QWORD *)result = a3[3];
      v9 = (char *)(result + 2);
      a3[2] = v16;
      a3[3] = result;
    }
    a3[1] = &v9[v13];
    if ((_DWORD)v6)
      result = (unsigned int *)memcpy(v9, *v4, v6);
    *v4 = v9;
    v7 = v9;
    v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  v17 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  v7[v5] = v17;
  return result;
}

unint64_t swift::Demangle::Demangler::popModule(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v6 = v5 - 1;
  v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v6);
  v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 != 153)
  {
    if (v8 == 101)
    {
      *((_DWORD *)this + 24) = v6;
      return swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v7, 153, a4, a5);
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v6;
  return v7;
}

swift::Demangle::Node *swift::Demangle::Demangler::popContext(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = v5 - 1;
  v8 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v5 - 1));
  v9 = *((unsigned __int16 *)v8 + 8);
  if (v9 == 101)
  {
    *((_DWORD *)this + 24) = v7;
    v8 = (swift::Demangle::Node *)swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v8, 153, a4, a5);
    if (v8)
      return v8;
    v5 = *((_DWORD *)this + 24);
    if (!v5)
      return 0;
  }
  else if (v9 == 153)
  {
    *((_DWORD *)this + 24) = v7;
    return v8;
  }
  v10 = v5 - 1;
  v8 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v5 - 1));
  v11 = *((unsigned __int16 *)v8 + 8);
  if (v11 != 232)
  {
    if (swift::Demangle::isContext(v11))
    {
      *((_DWORD *)this + 24) = v10;
      return v8;
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v10;
  v12 = *((unsigned __int8 *)v8 + 18);
  if (v12 == 1)
    goto LABEL_12;
  if (v12 != 5 || *((_DWORD *)v8 + 2) != 1)
    return 0;
  v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
  v8 = *(swift::Demangle::Node **)v8;
  if (!swift::Demangle::isContext(*((unsigned __int16 *)v8 + 8)))
    return 0;
  return v8;
}

uint64_t *swift::Demangle::Demangler::popTypeAndGetAnyGeneric(swift::Demangle::Demangler *this)
{
  int v1;
  int v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t *result;
  unsigned int v7;
  BOOL v8;
  BOOL v9;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v2 = v1 - 1;
  v3 = *(uint64_t **)(*((_QWORD *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v3 + 8) != 232)
    return 0;
  *((_DWORD *)this + 24) = v2;
  v4 = *((unsigned __int8 *)v3 + 18);
  if (v4 != 1)
  {
    if (v4 != 5 || *((_DWORD *)v3 + 2) != 1)
      return 0;
    v3 = (uint64_t *)*v3;
  }
  v5 = (uint64_t *)*v3;
  if (!v5)
    return 0;
  result = 0;
  v7 = *((unsigned __int16 *)v5 + 8);
  if (v7 > 0xB3)
  {
    v8 = v7 - 180 > 0x36 || ((1 << (v7 + 76)) & 0x60008000000003) == 0;
    if (v8 && v7 != 347)
      return result;
    return v5;
  }
  v9 = v7 > 0x3D || ((1 << v7) & 0x2000000001200000) == 0;
  if (!v9 || v7 == 167)
    return v5;
  return result;
}

uint64_t `anonymous namespace'::isAnyGeneric(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 179)
  {
    if ((a1 > 0x3D || ((1 << a1) & 0x2000000001200000) == 0) && a1 != 167)
      return 0;
  }
  else if (((a1 - 180) > 0x36 || ((1 << (a1 + 76)) & 0x60008000000003) == 0)
         && a1 != 347)
  {
    return 0;
  }
  return result;
}

swift::Demangle::Node *setParentForOpaqueReturnTypeNodes(swift::Demangle::Demangler *a1, swift::Demangle::Node *a2, swift::Demangle::Node *a3, uint64_t a4, const char *a5)
{
  swift::Demangle::Node *result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  swift::Demangle::Node *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  swift::Demangle::Node *v20;
  unint64_t v21;
  unsigned int v22;
  swift::Demangle::Node *v23;

  result = 0;
  if (a2 && a3)
  {
    v9 = *((unsigned __int16 *)a3 + 8);
    if (v9 <= 0xFD)
    {
      if (v9 != 76 && v9 != 220)
        goto LABEL_14;
      return a2;
    }
    if (v9 == 254)
      return a2;
    if (v9 != 308)
    {
LABEL_14:
      v14 = *((unsigned __int8 *)a3 + 18);
      switch((_DWORD)v14)
      {
        case 1:
LABEL_31:
          v19 = 0;
          while (1)
          {
            v21 = *((unsigned __int8 *)a3 + 18);
            v22 = v21 - 1;
            if ((_DWORD)v21 == 1)
              goto LABEL_38;
            if ((_DWORD)v21 != 5)
              break;
            if (*((unsigned int *)a3 + 2) > v19)
            {
LABEL_41:
              v23 = a3;
              if (v22 >= 2)
                v23 = *(swift::Demangle::Node **)a3;
              v20 = (swift::Demangle::Node *)*((_QWORD *)v23 + v19);
              goto LABEL_33;
            }
LABEL_32:
            v20 = 0;
LABEL_33:
            setParentForOpaqueReturnTypeNodes(a1, a2, v20);
            if (v14 == ++v19)
              return a2;
          }
          if ((_DWORD)v21 != 2)
            goto LABEL_32;
          v21 = 2;
LABEL_38:
          if (v21 > v19)
            goto LABEL_41;
          goto LABEL_32;
        case 5:
          v14 = *((unsigned int *)a3 + 2);
          if ((_DWORD)v14)
            goto LABEL_31;
          break;
        case 2:
          v14 = 2;
          goto LABEL_31;
      }
      return a2;
    }
    v10 = *((unsigned __int8 *)a3 + 18);
    switch(v10)
    {
      case 1:
        v12 = 0;
        break;
      case 2:
        v12 = 1;
        break;
      case 5:
        v11 = *((unsigned int *)a3 + 2);
        if (!(_DWORD)v11)
          goto LABEL_22;
        v12 = v11 - 1;
        v13 = *(swift::Demangle::Node **)a3;
LABEL_21:
        if (*(_WORD *)(*((_QWORD *)v13 + v12) + 16) == 342)
          return a2;
LABEL_22:
        v15 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 1) = v15;
        if (!v15 || v15 + 24 > *((_QWORD *)a1 + 2))
        {
          v16 = 2 * *((_QWORD *)a1 + 4);
          if (v16 <= 0x20)
            v16 = 32;
          *((_QWORD *)a1 + 4) = v16;
          v17 = v16 + 8;
          v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
          *v18 = *((_QWORD *)a1 + 3);
          v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)a1 + 2) = (char *)v18 + v17;
          *((_QWORD *)a1 + 3) = v18;
        }
        *((_QWORD *)a1 + 1) = v15 + 24;
        *(_WORD *)(v15 + 16) = 342;
        *(_BYTE *)(v15 + 18) = 4;
        *(_QWORD *)v15 = a2;
        swift::Demangle::Node::addChild((unsigned int *)a3, (swift::Demangle::Node *)v15, a1, a4, a5);
        return a2;
      default:
        goto LABEL_22;
    }
    v13 = a3;
    goto LABEL_21;
  }
  return result;
}

unint64_t swift::Demangle::Demangler::demangleClangType(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  size_t v8;
  unint64_t result;
  const void *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 0;
  v4 = *((_QWORD *)this + 7);
  if (*(unsigned __int8 *)(v4 + v1) - 48 > 9)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v4 + v1);
    if ((v6 - 48) > 9)
      break;
    v7 = v6 + 10 * v5 - 48;
    if (v7 < (int)v5)
      return 0;
    *((_QWORD *)this + 9) = ++v1;
    v5 = v7;
    if (v2 == v1)
    {
      v1 = v2;
      v5 = v7;
      break;
    }
  }
  if ((int)v5 < 1)
    return 0;
  v8 = v5;
  if (v1 + v5 > v2)
    return 0;
  v10 = (const void *)(v4 + v1);
  v11 = (char *)*((_QWORD *)this + 1);
  if (v11)
  {
    if (v5 <= 4uLL)
      v12 = 4;
    else
      v12 = v5;
    if ((unint64_t)&v11[v12] <= *((_QWORD *)this + 2))
    {
LABEL_24:
      v17 = &v11[v12];
      goto LABEL_26;
    }
LABEL_21:
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= v12 + 1)
      v13 = v12 + 1;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v11 = (char *)(v15 + 1);
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
    goto LABEL_24;
  }
  if ((unint64_t)v5 > *((_QWORD *)this + 2))
  {
    if (v5 <= 4uLL)
      v12 = 4;
    else
      v12 = v5;
    goto LABEL_21;
  }
  v11 = 0;
  v17 = (char *)v5;
LABEL_26:
  *((_QWORD *)this + 1) = v17;
  memcpy(v11, v10, v8);
  *((_QWORD *)this + 9) += v8;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v18 = 2 * *((_QWORD *)this + 4);
    if (v18 <= 0x20)
      v18 = 32;
    *((_QWORD *)this + 4) = v18;
    v19 = v18 + 8;
    v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *v20 = *((_QWORD *)this + 3);
    result = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v20 + v19;
    *((_QWORD *)this + 3) = v20;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 23;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = v11;
  *(_QWORD *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::Demangler::popFunctionParams(swift::Demangle::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  unsigned int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;

  v5 = *((_DWORD *)a1 + 24);
  if (!v5)
    return 0;
  v8 = v5 - 1;
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 8 * v8);
  v10 = *(unsigned __int16 *)(v9 + 16);
  if (v10 != 232)
  {
    if (v10 == 274)
    {
      *((_DWORD *)a1 + 24) = v8;
      v11 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v11;
      if (!v11 || (v12 = *((_QWORD *)a1 + 2), v11 + 24 > v12))
      {
        v13 = 2 * *((_QWORD *)a1 + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)a1 + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        v12 = (unint64_t)v15 + v14;
        *v15 = *((_QWORD *)a1 + 3);
        v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v15 + v14;
        *((_QWORD *)a1 + 3) = v15;
      }
      *(_WORD *)(v11 + 16) = 223;
      *(_BYTE *)(v11 + 18) = 0;
      v9 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v9;
      if (v9)
        v16 = v9 + 24 > v12;
      else
        v16 = 1;
      if (v16)
      {
        v17 = 2 * *((_QWORD *)a1 + 4);
        if (v17 <= 0x20)
          v17 = 32;
        *((_QWORD *)a1 + 4) = v17;
        v18 = v17 + 8;
        v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        v20 = (char *)v19 + v18;
        *v19 = *((_QWORD *)a1 + 3);
        v9 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = v20;
        *((_QWORD *)a1 + 3) = v19;
      }
      *((_QWORD *)a1 + 1) = v9 + 24;
      *(_WORD *)(v9 + 16) = 232;
      *(_BYTE *)(v9 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v9, (swift::Demangle::Node *)v11, a1, a4, a5);
      goto LABEL_20;
    }
    return 0;
  }
  *((_DWORD *)a1 + 24) = v8;
LABEL_20:
  v21 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v21;
  if (!v21 || v21 + 24 > *((_QWORD *)a1 + 2))
  {
    v22 = 2 * *((_QWORD *)a1 + 4);
    if (v22 <= 0x20)
      v22 = 32;
    *((_QWORD *)a1 + 4) = v22;
    v23 = v22 + 8;
    v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    v25 = (char *)v24 + v23;
    *v24 = *((_QWORD *)a1 + 3);
    v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v25;
    *((_QWORD *)a1 + 3) = v24;
  }
  *((_QWORD *)a1 + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = a2;
  *(_BYTE *)(v21 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v21, (swift::Demangle::Node *)v9, a1, a4, a5);
  return v21;
}

unint64_t swift::Demangle::Demangler::popPack(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  swift::Demangle::Node *v23;
  int v24;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 226;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v18 = *((_DWORD *)this + 24);
      if (!v18)
        return 0;
      v19 = v18 - 1;
      v20 = *((_QWORD *)this + 11);
      v21 = *(unsigned __int16 *)(*(_QWORD *)(v20 + 8 * (v18 - 1)) + 16);
      if (v21 == 275)
      {
        *((_DWORD *)this + 24) = v19;
        --v18;
        if (!v19)
          return 0;
      }
      v22 = v18 - 1;
      v23 = *(swift::Demangle::Node **)(v20 + 8 * v22);
      if (*((_WORD *)v23 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v22;
      swift::Demangle::Node::addChild((unsigned int *)v6, v23, this, a4, a5);
    }
    while (v21 != 275);
    v24 = v6[1].u8[2];
    if (v24 == 5)
    {
      v26 = v6->u32[2];
      if ((_DWORD)v26)
      {
        v27 = (_QWORD *)(v6->i64[0] + 8 * v26 - 8);
        if ((unint64_t)v27 > v6->i64[0])
        {
          v28 = v6->i64[0] + 8;
          do
          {
            v29 = *(_QWORD *)(v28 - 8);
            *(_QWORD *)(v28 - 8) = *v27;
            *v27-- = v29;
            v30 = v28 >= (unint64_t)v27;
            v28 += 8;
          }
          while (!v30);
        }
      }
    }
    else if (v24 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 232;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v6, this, a4, a5);
  return v13;
}

unint64_t swift::Demangle::Demangler::popSILPack(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  int v7;
  int8x16_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  swift::Demangle::Node *v28;
  int v29;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;

  v5 = *((_QWORD *)this + 9);
  if (v5 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v5 + 1;
  v7 = *(char *)(*((_QWORD *)this + 7) + v5);
  if (v7 == 105)
  {
    v8 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 1) = v8;
    if (v8 && (unint64_t)&v8[1].u64[1] <= *((_QWORD *)this + 2))
    {
      v13 = 228;
      goto LABEL_15;
    }
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v11 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *v11 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    v12 = (char *)v11 + v15;
    v13 = 228;
    goto LABEL_14;
  }
  if (v7 != 100)
    return 0;
  v8 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v8;
  if (v8 && (unint64_t)&v8[1].u64[1] <= *((_QWORD *)this + 2))
  {
    v13 = 227;
    goto LABEL_15;
  }
  v9 = 2 * *((_QWORD *)this + 4);
  if (v9 <= 0x20)
    v9 = 32;
  *((_QWORD *)this + 4) = v9;
  v10 = v9 + 8;
  v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
  *v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v11;
  v12 = (char *)v11 + v10;
  v13 = 227;
LABEL_14:
  v8 = (int8x16_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 2) = v12;
LABEL_15:
  *((_QWORD *)this + 1) = (char *)v8 + 24;
  v8[1].i16[0] = v13;
  v8[1].i8[2] = 0;
  v16 = *((_DWORD *)this + 24);
  if (!v16 || (v17 = v16 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v17) + 16) != 274))
  {
    while (1)
    {
      v23 = *((_DWORD *)this + 24);
      if (!v23)
        return 0;
      v24 = v23 - 1;
      v25 = *((_QWORD *)this + 11);
      v26 = *(unsigned __int16 *)(*(_QWORD *)(v25 + 8 * (v23 - 1)) + 16);
      if (v26 == 275)
      {
        *((_DWORD *)this + 24) = v24;
        --v23;
        if (!v24)
          return 0;
      }
      v27 = v23 - 1;
      v28 = *(swift::Demangle::Node **)(v25 + 8 * v27);
      if (*((_WORD *)v28 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v27;
      swift::Demangle::Node::addChild((unsigned int *)v8, v28, this, a4, a5);
      if (v26 == 275)
      {
        v29 = v8[1].u8[2];
        if (v29 == 5)
        {
          v31 = v8->u32[2];
          if ((_DWORD)v31)
          {
            v32 = (_QWORD *)(v8->i64[0] + 8 * v31 - 8);
            if ((unint64_t)v32 > v8->i64[0])
            {
              v33 = v8->i64[0] + 8;
              do
              {
                v34 = *(_QWORD *)(v33 - 8);
                *(_QWORD *)(v33 - 8) = *v32;
                *v32-- = v34;
                v35 = v33 >= (unint64_t)v32;
                v33 += 8;
              }
              while (!v35);
            }
          }
        }
        else if (v29 == 2)
        {
          *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        goto LABEL_18;
      }
    }
  }
  *((_DWORD *)this + 24) = v17;
LABEL_18:
  v18 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v18;
  if (!v18 || v18 + 24 > *((_QWORD *)this + 2))
  {
    v19 = 2 * *((_QWORD *)this + 4);
    if (v19 <= 0x20)
      v19 = 32;
    *((_QWORD *)this + 4) = v19;
    v20 = v19 + 8;
    v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    v22 = (char *)v21 + v20;
    *v21 = *((_QWORD *)this + 3);
    v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v22;
    *((_QWORD *)this + 3) = v21;
  }
  *((_QWORD *)this + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 232;
  *(_BYTE *)(v18 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v18, (swift::Demangle::Node *)v8, this, a4, a5);
  return v18;
}

int8x16_t *swift::Demangle::Demangler::popTypeList(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  swift::Demangle::Node *v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 235;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v13 = *((_DWORD *)this + 24);
      if (!v13)
        return 0;
      v14 = v13 - 1;
      v15 = *((_QWORD *)this + 11);
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 8 * (v13 - 1)) + 16);
      if (v16 == 275)
      {
        *((_DWORD *)this + 24) = v14;
        --v13;
        if (!v14)
          return 0;
      }
      v17 = v13 - 1;
      v18 = *(swift::Demangle::Node **)(v15 + 8 * v17);
      if (*((_WORD *)v18 + 8) != 232)
        return 0;
      *((_DWORD *)this + 24) = v17;
      swift::Demangle::Node::addChild((unsigned int *)v6, v18, this, a4, a5);
    }
    while (v16 != 275);
    v19 = v6[1].u8[2];
    if (v19 == 5)
    {
      v21 = v6->u32[2];
      if ((_DWORD)v21)
      {
        v22 = (_QWORD *)(v6->i64[0] + 8 * v21 - 8);
        if ((unint64_t)v22 > v6->i64[0])
        {
          v23 = v6->i64[0] + 8;
          do
          {
            v24 = *(_QWORD *)(v23 - 8);
            *(_QWORD *)(v23 - 8) = *v22;
            *v22-- = v24;
            v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  return v6;
}

int8x16_t *swift::Demangle::Demangler::popAnyProtocolConformanceList(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v23;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 2;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11 && (v12 = v11 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v12;
  }
  else
  {
    do
    {
      v13 = *((_DWORD *)this + 24);
      if (!v13)
        return 0;
      v14 = v13 - 1;
      v15 = *((_QWORD *)this + 11);
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 8 * (v13 - 1)) + 16);
      if (v16 == 275)
      {
        *((_DWORD *)this + 24) = v14;
        --v13;
        if (!v14)
          return 0;
      }
      v17 = v13 - 1;
      v18 = *(unsigned __int16 **)(v15 + 8 * v17);
      v19 = v18[8];
      v20 = v19 > 0x31;
      v21 = (1 << v19) & 0x380000C000000;
      if (v20 || v21 == 0)
        return 0;
      *((_DWORD *)this + 24) = v17;
      swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v18, this, a4, a5);
    }
    while (v16 != 275);
    v23 = v6[1].u8[2];
    if (v23 == 5)
    {
      v25 = v6->u32[2];
      if ((_DWORD)v25)
      {
        v26 = (_QWORD *)(v6->i64[0] + 8 * v25 - 8);
        if ((unint64_t)v26 > v6->i64[0])
        {
          v27 = v6->i64[0] + 8;
          do
          {
            v28 = *(_QWORD *)(v27 - 8);
            *(_QWORD *)(v27 - 8) = *v26;
            *v26-- = v28;
            v29 = v27 >= (unint64_t)v26;
            v27 += 8;
          }
          while (!v29);
        }
      }
    }
    else if (v23 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  return v6;
}

uint64_t swift::Demangle::Demangler::popAnyProtocolConformance(swift::Demangle::Demangler *this)
{
  int v1;
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  result = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v3);
  v5 = *(unsigned __int16 *)(result + 16);
  v6 = v5 > 0x31;
  v7 = (1 << v5) & 0x380000C000000;
  if (v6 || v7 == 0)
    return 0;
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleRetroactiveProtocolConformanceRef(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  swift::Demangle::Node *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  const char *v20;

  v6 = *((_DWORD *)this + 24);
  if (!v6)
    goto LABEL_5;
  v7 = v6 - 1;
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v7);
  v9 = *(unsigned __int16 *)(v8 + 16);
  if (v9 == 153)
  {
    *((_DWORD *)this + 24) = v7;
    goto LABEL_7;
  }
  if (v9 == 101)
  {
    *((_DWORD *)this + 24) = v7;
    v8 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v8, 153, a4, a5);
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
LABEL_7:
  v10 = swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
  v13 = 0;
  if (v8)
  {
    v14 = (swift::Demangle::Node *)v10;
    if (v10)
    {
      v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v13;
      if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
      {
        v15 = 2 * *((_QWORD *)this + 4);
        if (v15 <= 0x20)
          v15 = 32;
        *((_QWORD *)this + 4) = v15;
        v16 = v15 + 8;
        v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        v18 = (char *)v17 + v16;
        *v17 = *((_QWORD *)this + 3);
        v13 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v18;
        *((_QWORD *)this + 3) = v17;
      }
      *((_QWORD *)this + 1) = v13 + 24;
      *(_WORD *)(v13 + 16) = 185;
      *(_BYTE *)(v13 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v13, v14, this, v11, v12);
      swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v8, this, v19, v20);
    }
  }
  return v13;
}

uint64_t swift::Demangle::Demangler::popDependentProtocolConformance(swift::Demangle::Demangler *this)
{
  int v1;
  unsigned int v3;
  uint64_t result;

  v1 = *((_DWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  result = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v3);
  if (*(unsigned __int16 *)(result + 16) - 47 > 2)
    return 0;
  *((_DWORD *)this + 24) = v3;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleDependentConformanceIndex(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  unint64_t result;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v2 = *((_QWORD *)this + 8);
  v1 = *((_QWORD *)this + 9);
  if (v1 >= v2)
    return 0;
  v4 = *((_QWORD *)this + 7);
  v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    result = 0;
    *((_QWORD *)this + 9) = v1 + 1;
    return result;
  }
  if ((v5 - 48) > 9)
    return 0;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v4 + v1);
    if ((v8 - 48) > 9)
      break;
    v9 = v8 + 10 * v7 - 48;
    if (v9 >= v7)
    {
      *((_QWORD *)this + 9) = ++v1;
      v7 = v9;
      if (v2 != v1)
        continue;
    }
    return 0;
  }
  result = 0;
  if ((v7 & 0x80000000) == 0 && v1 < v2 && v8 == 95)
  {
    *((_QWORD *)this + 9) = v1 + 1;
    if (v7)
    {
      v10 = (v7 - 1);
      result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = result;
      if (!result || result + 24 > *((_QWORD *)this + 2))
      {
        v11 = 2 * *((_QWORD *)this + 4);
        if (v11 <= 0x20)
          v11 = 32;
        *((_QWORD *)this + 4) = v11;
        v12 = v11 + 8;
        v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *v13 = *((_QWORD *)this + 3);
        result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v13 + v12;
        *((_QWORD *)this + 3) = v13;
      }
      *((_QWORD *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 102;
      *(_BYTE *)(result + 18) = 4;
      *(_QWORD *)result = v10;
    }
    else
    {
      result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = result;
      if (!result || result + 24 > *((_QWORD *)this + 2))
      {
        v14 = 2 * *((_QWORD *)this + 4);
        if (v14 <= 0x20)
          v14 = 32;
        *((_QWORD *)this + 4) = v14;
        v15 = v14 + 8;
        v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        *v16 = *((_QWORD *)this + 3);
        result = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = (char *)v16 + v15;
        *((_QWORD *)this + 3) = v16;
      }
      *((_QWORD *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 246;
      *(_BYTE *)(result + 18) = 0;
    }
  }
  return result;
}

unint64_t swift::Demangle::Demangler::popDependentAssociatedConformance(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  unsigned int v10;
  swift::Demangle::Node *v11;
  swift::Demangle::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;

  v6 = swift::Demangle::Demangler::popProtocol(this, a2, a3, a4, a5);
  v9 = *((_DWORD *)this + 24);
  if (!v9)
    return 0;
  v10 = v9 - 1;
  v11 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v10);
  if (*((_WORD *)v11 + 8) != 232)
    return 0;
  v12 = (swift::Demangle::Node *)v6;
  *((_DWORD *)this + 24) = v10;
  if (!v6)
    return 0;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 34;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v13, v11, this, v7, v8);
  swift::Demangle::Node::addChild((unsigned int *)v13, v12, this, v18, v19);
  return v13;
}

int8x16_t *swift::Demangle::Demangler::popRetroactiveConformances(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unsigned int v12;
  swift::Demangle::Node *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = 0;
  while (1)
  {
    v12 = v5 - 1;
    v13 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v12);
    if (*((_WORD *)v13 + 8) != 206)
      break;
    *((_DWORD *)this + 24) = v12;
    if (!v7)
    {
      v7 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 1) = v7;
      if (!v7 || (unint64_t)&v7[1].u64[1] > *((_QWORD *)this + 2))
      {
        v8 = 2 * *((_QWORD *)this + 4);
        if (v8 <= 0x20)
          v8 = 32;
        *((_QWORD *)this + 4) = v8;
        v9 = v8 + 8;
        v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
        v11 = (char *)v10 + v9;
        *v10 = *((_QWORD *)this + 3);
        v7 = (int8x16_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 2) = v11;
        *((_QWORD *)this + 3) = v10;
      }
      *((_QWORD *)this + 1) = (char *)v7 + 24;
      v7[1].i16[0] = 235;
      v7[1].i8[2] = 0;
    }
    swift::Demangle::Node::addChild((unsigned int *)v7, v13, this, a4, a5);
    v5 = *((_DWORD *)this + 24);
    if (!v5)
      goto LABEL_15;
  }
  if (!v7)
    return v7;
LABEL_15:
  v14 = v7[1].u8[2];
  if (v14 == 5)
  {
    v15 = v7->u32[2];
    if ((_DWORD)v15)
    {
      v16 = (_QWORD *)(v7->i64[0] + 8 * v15 - 8);
      if ((unint64_t)v16 > v7->i64[0])
      {
        v17 = v7->i64[0] + 8;
        do
        {
          v18 = *(_QWORD *)(v17 - 8);
          *(_QWORD *)(v17 - 8) = *v16;
          *v16-- = v18;
          v19 = v17 >= (unint64_t)v16;
          v17 += 8;
        }
        while (!v19);
      }
    }
  }
  else if (v14 == 2)
  {
    *v7 = vextq_s8(*v7, *v7, 8uLL);
  }
  return v7;
}

uint64_t swift::Demangle::Demangler::demangleBoundGenerics(uint64_t a1, const void **a2, int8x16_t **a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  int i;
  swift::Demangle::Node *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  swift::Demangle::Node *v26;

  *a3 = swift::Demangle::Demangler::popRetroactiveConformances((swift::Demangle::Demangler *)a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  while (1)
  {
    v26 = 0;
    v7 = (*(_QWORD *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 8) = v7;
    if (!v7 || v7 + 24 > *(_QWORD *)(a1 + 16))
    {
      v8 = 2 * *(_QWORD *)(a1 + 32);
      if (v8 <= 0x20)
        v8 = 32;
      *(_QWORD *)(a1 + 32) = v8;
      v9 = v8 + 8;
      v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      *v10 = *(_QWORD *)(a1 + 24);
      v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a1 + 16) = (char *)v10 + v9;
      *(_QWORD *)(a1 + 24) = v10;
    }
    *(_QWORD *)(a1 + 8) = v7 + 24;
    *(_WORD *)(v7 + 16) = 235;
    *(_BYTE *)(v7 + 18) = 0;
    v26 = (swift::Demangle::Node *)v7;
    swift::Demangle::Vector<swift::Demangle::Node *>::push_back(a2, (uint64_t *)&v26, (_QWORD *)a1);
    for (i = *(_DWORD *)(a1 + 96); i; i = *(_DWORD *)(a1 + 96))
    {
      v14 = *(swift::Demangle::Node **)(*(_QWORD *)(a1 + 88) + 8 * (i - 1));
      if (*((_WORD *)v14 + 8) != 232)
        break;
      *(_DWORD *)(a1 + 96) = i - 1;
      swift::Demangle::Node::addChild((unsigned int *)v26, v14, (swift::Demangle::NodeFactory *)a1, v11, v12);
    }
    v15 = *((unsigned __int8 *)v26 + 18);
    if (v15 == 5)
    {
      v16 = *(_QWORD *)v26;
      v17 = *((unsigned int *)v26 + 2);
      v18 = (_QWORD *)(*(_QWORD *)v26 + 8 * v17 - 8);
      if ((_DWORD)v17 && (unint64_t)v18 > v16)
      {
        v20 = v16 + 8;
        do
        {
          v21 = *(_QWORD *)(v20 - 8);
          *(_QWORD *)(v20 - 8) = *v18;
          *v18-- = v21;
          v22 = v20 >= (unint64_t)v18;
          v20 += 8;
        }
        while (!v22);
      }
    }
    else if (v15 == 2)
    {
      *(int8x16_t *)v26 = vextq_s8(*(int8x16_t *)v26, *(int8x16_t *)v26, 8uLL);
    }
    if (!i)
      break;
    v23 = i - 1;
    v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v23) + 16);
    if (v24 != 275)
    {
      if (v24 == 274)
      {
        *(_DWORD *)(a1 + 96) = v23;
        return 1;
      }
      return 0;
    }
    *(_DWORD *)(a1 + 96) = v23;
  }
  return 0;
}

const void **swift::Demangle::Vector<swift::Demangle::Node *>::push_back(const void **result, uint64_t *a2, _QWORD *a3)
{
  const void **v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v4 = result;
  v5 = *((_DWORD *)result + 2);
  v6 = *((unsigned int *)result + 3);
  v7 = (char *)*result;
  if (v5 >= v6)
  {
    v9 = &v7[8 * v6];
    v10 = (char *)a3[1];
    if (v9 == v10)
    {
      v12 = v9 + 8;
      v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = a3[2];
    }
    if ((2 * v6) <= 4)
      v13 = 4;
    else
      v13 = (2 * v6);
    v14 = 8 * (v13 + v6);
    v7 = (char *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)&v7[v14] > v11)
    {
      v15 = 2 * a3[4];
      if (v15 <= v14 + 8)
        v15 = v14 + 8;
      a3[4] = v15;
      v16 = v15 + 8;
      result = (const void **)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)result + v16;
      *result = (const void *)a3[3];
      v7 = (char *)(((unint64_t)result + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v17;
      a3[3] = result;
    }
    a3[1] = &v7[v14];
    if ((_DWORD)v6)
      result = (const void **)memcpy(v7, *v4, 8 * v6);
    *v4 = v7;
    v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  v18 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  *(_QWORD *)&v7[8 * v5] = v18;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleBoundGenericArgs(swift::Demangle::NodeFactory *a1, unint64_t a2, uint64_t a3, unint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v21;
  int v22;
  swift::Demangle::Node **v23;
  swift::Demangle::Node *v24;
  swift::Demangle::Node **v25;
  swift::Demangle::Node *v26;
  int v27;
  _QWORD *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  swift::Demangle::Node *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  swift::Demangle::Node *v51;
  swift::Demangle::Node *v52;
  const char *v53;
  int v54;
  swift::Demangle::Node **v55;
  swift::Demangle::Node *v56;
  unsigned int *v57;
  swift::Demangle::Node *v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  unsigned int i;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  swift::Demangle::Node *v72;
  int v73;
  unsigned int v74;
  __int16 v75;
  swift::Demangle::NodeFactory *v76;
  __int16 v77;
  swift::Demangle::Node *Type;

  if (!a2)
    return 0;
  v5 = a4;
  v7 = *(unsigned int *)(a3 + 8);
  if (v7 <= a4)
    return 0;
  v8 = a2;
  v10 = *(unsigned __int16 *)(a2 + 16);
  if (v10 == 233 || v10 == 181)
  {
    v11 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v11;
    if (!v11 || v11 + 24 > *((_QWORD *)a1 + 2))
    {
      v12 = 2 * *((_QWORD *)a1 + 4);
      if (v12 <= 0x20)
        v12 = 32;
      *((_QWORD *)a1 + 4) = v12;
      v13 = v12 + 8;
      v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      v15 = (char *)v14 + v13;
      *v14 = *((_QWORD *)a1 + 3);
      v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v15;
      *((_QWORD *)a1 + 3) = v14;
    }
    v16 = v11 + 24;
    *((_QWORD *)a1 + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 235;
    *(_BYTE *)(v11 + 18) = 0;
    v17 = *(_DWORD *)(a3 + 8);
    v18 = v17 - 1;
    if (v18 >= v5 && v17 != 0)
    {
      while (1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v18);
        v22 = *(unsigned __int8 *)(v21 + 18);
        v23 = (swift::Demangle::Node **)v21;
        if ((v22 - 1) >= 2)
        {
          if (v22 == 5)
          {
            v24 = *(swift::Demangle::Node **)v21;
            v23 = *(swift::Demangle::Node ***)v21;
            goto LABEL_29;
          }
          v23 = 0;
        }
        switch(v22)
        {
          case 1:
            v25 = (swift::Demangle::Node **)(v21 + 8);
            if (v23 != (swift::Demangle::Node **)(v21 + 8))
              goto LABEL_36;
            break;
          case 2:
            v25 = (swift::Demangle::Node **)(v21 + 16);
            if (v23 != (swift::Demangle::Node **)(v21 + 16))
              goto LABEL_36;
            break;
          case 5:
            v24 = *(swift::Demangle::Node **)v21;
LABEL_29:
            v25 = (swift::Demangle::Node **)((char *)v24 + 8 * *(unsigned int *)(v21 + 8));
            if (v23 != v25)
              goto LABEL_36;
            break;
          default:
            v25 = 0;
            if (v23)
            {
              do
              {
LABEL_36:
                v26 = *v23++;
                swift::Demangle::Node::addChild((unsigned int *)v11, v26, a1, a4, a5);
              }
              while (v23 != v25);
              v17 = *(_DWORD *)(a3 + 8);
            }
            break;
        }
        v18 = (v18 - 1);
        if (v18 < v5 || v17 <= v18)
        {
          v16 = *((_QWORD *)a1 + 1);
          break;
        }
      }
    }
    v30 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v30;
    if (!v30 || v30 + 24 > *((_QWORD *)a1 + 2))
    {
      v31 = 2 * *((_QWORD *)a1 + 4);
      if (v31 <= 0x20)
        v31 = 32;
      *((_QWORD *)a1 + 4) = v31;
      v32 = v31 + 8;
      v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      v34 = (char *)v33 + v32;
      *v33 = *((_QWORD *)a1 + 3);
      v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v34;
      *((_QWORD *)a1 + 3) = v33;
    }
    *((_QWORD *)a1 + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 232;
    *(_BYTE *)(v30 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v30, (swift::Demangle::Node *)v8, a1, a4, a5);
    v37 = 0;
    if (v11 && v30)
    {
      v37 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v37;
      if (!v37 || v37 + 24 > *((_QWORD *)a1 + 2))
      {
        v38 = 2 * *((_QWORD *)a1 + 4);
        if (v38 <= 0x20)
          v38 = 32;
        *((_QWORD *)a1 + 4) = v38;
        v39 = v38 + 8;
        v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *v40 = *((_QWORD *)a1 + 3);
        v37 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v40 + v39;
        *((_QWORD *)a1 + 3) = v40;
      }
      *((_QWORD *)a1 + 1) = v37 + 24;
      *(_WORD *)(v37 + 16) = 17;
      *(_BYTE *)(v37 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v37, (swift::Demangle::Node *)v30, a1, v35, v36);
      swift::Demangle::Node::addChild((unsigned int *)v37, (swift::Demangle::Node *)v11, a1, v41, v42);
    }
    return v37;
  }
  v27 = *(unsigned __int8 *)(a2 + 18);
  v28 = (_QWORD *)a2;
  if ((v27 - 1) >= 2)
  {
    if (v27 == 5 && *(_DWORD *)(a2 + 8))
    {
      v28 = *(_QWORD **)a2;
      goto LABEL_42;
    }
    return 0;
  }
LABEL_42:
  v29 = 0;
  if (*(unsigned __int16 *)(a2 + 16) > 0xD9u)
  {
    v43 = v10 - 218;
    if (v43 > 0x24 || ((1 << v43) & 0x1000000005) == 0)
    {
LABEL_64:
      ++a4;
      v29 = 1;
    }
  }
  else if (((v10 - 117) > 0x3E || ((1 << (v10 - 117)) & 0x6000000000000101) == 0)
         && v10 != 33
         && v10 != 70)
  {
    goto LABEL_64;
  }
  v44 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v5);
  if (a4 < v7)
  {
    v45 = *v28;
    if (*(_WORD *)(*v28 + 16) != 71)
    {
      v51 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleBoundGenericArgs(a1, *v28, a3);
LABEL_85:
      if (v51)
      {
LABEL_86:
        v59 = *(_WORD *)(v8 + 16);
        v60 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 1) = v60;
        if (!v60 || v60 + 24 > *((_QWORD *)a1 + 2))
        {
          v61 = 2 * *((_QWORD *)a1 + 4);
          if (v61 <= 0x20)
            v61 = 32;
          *((_QWORD *)a1 + 4) = v61;
          v62 = v61 + 8;
          v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
          v64 = (char *)v63 + v62;
          *v63 = *((_QWORD *)a1 + 3);
          v60 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)a1 + 2) = v64;
          *((_QWORD *)a1 + 3) = v63;
        }
        *((_QWORD *)a1 + 1) = v60 + 24;
        *(_WORD *)(v60 + 16) = v59;
        *(_BYTE *)(v60 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v60, v51, a1, v49, v50);
        for (i = 1; ; i = v69 + 1)
        {
          v67 = *(unsigned __int8 *)(v8 + 18);
          switch((_DWORD)v67)
          {
            case 1:
              v68 = *(unsigned __int8 *)(v8 + 18);
              break;
            case 5:
              v68 = *(unsigned int *)(v8 + 8);
              break;
            case 2:
              v68 = 2;
              break;
            default:
              goto LABEL_112;
          }
          v69 = i;
          if (v68 <= i)
          {
LABEL_112:
            v8 = v60;
            goto LABEL_113;
          }
          v70 = v67 - 1;
          if ((_DWORD)v67 != 1)
          {
            if ((_DWORD)v67 == 5)
            {
              if (*(unsigned int *)(v8 + 8) <= v69)
                continue;
              goto LABEL_108;
            }
            v67 = 2;
          }
          if (v67 <= v69)
            continue;
LABEL_108:
          v71 = v8;
          if (v70 >= 2)
            v71 = *(_QWORD *)v8;
          v72 = *(swift::Demangle::Node **)(v71 + 8 * v69);
          if (v72)
            swift::Demangle::Node::addChild((unsigned int *)v60, v72, a1, a4, a5);
        }
      }
      return 0;
    }
    v46 = *(unsigned __int8 *)(v45 + 18);
    v47 = (swift::Demangle::Node *)v45;
    if (v46 != 2)
    {
      if (v46 != 5 || *(_DWORD *)(v45 + 8) < 2u)
      {
        v48 = 0;
LABEL_74:
        v52 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleBoundGenericArgs(a1, v48, a3);
        v54 = *(unsigned __int8 *)(v45 + 18);
        v55 = (swift::Demangle::Node **)v45;
        if ((v54 - 1) >= 2)
        {
          if (v54 != 5 || !*(_DWORD *)(v45 + 8))
          {
            v56 = 0;
            goto LABEL_80;
          }
          v55 = *(swift::Demangle::Node ***)v45;
        }
        v56 = *v55;
LABEL_80:
        v57 = (unsigned int *)swift::Demangle::Demangler::createWithChildren(a1, 71, v56, v52, v53);
        v51 = (swift::Demangle::Node *)v57;
        if (*(_BYTE *)(v45 + 18) == 5 && *(_DWORD *)(v45 + 8) == 3)
        {
          if (v57)
          {
            v58 = *(swift::Demangle::Node **)(*(_QWORD *)v45 + 16);
            if (v58)
            {
              swift::Demangle::Node::addChild(v57, v58, a1, v49, v50);
              goto LABEL_86;
            }
          }
        }
        goto LABEL_85;
      }
      v47 = *(swift::Demangle::Node **)v45;
    }
    v48 = *((_QWORD *)v47 + 1);
    goto LABEL_74;
  }
LABEL_113:
  if (!v29)
    return v8;
  v73 = *(unsigned __int8 *)(v44 + 18);
  if ((v73 - 1) >= 2 && (v73 != 5 || !*(_DWORD *)(v44 + 8)))
    return v8;
  v37 = 0;
  v74 = *(unsigned __int16 *)(v8 + 16);
  if (v74 > 0xA6)
  {
    if (*(unsigned __int16 *)(v8 + 16) > 0xDAu)
    {
      if (v74 == 234)
      {
        v75 = 18;
      }
      else
      {
        if (v74 != 219)
          return v37;
        v75 = 15;
      }
    }
    else if (v74 == 167)
    {
      v75 = 17;
    }
    else
    {
      if (v74 != 180)
        return v37;
      v75 = 16;
    }
    goto LABEL_137;
  }
  if (*(unsigned __int16 *)(v8 + 16) > 0x3Cu)
  {
    if (v74 != 61)
    {
      if (v74 != 76)
        return v37;
      goto LABEL_129;
    }
    v75 = 14;
LABEL_137:
    Type = (swift::Demangle::Node *)swift::Demangle::Demangler::createType(a1, (swift::Demangle::Node *)v8, a3, a4, a5);
    v76 = a1;
    v77 = v75;
    return swift::Demangle::Demangler::createWithChildren(v76, v77, Type, (swift::Demangle::Node *)v44, a5);
  }
  if (v74 == 24)
  {
    v75 = 13;
    goto LABEL_137;
  }
  if (v74 != 29)
    return v37;
LABEL_129:
  v76 = a1;
  v77 = 19;
  Type = (swift::Demangle::Node *)v8;
  return swift::Demangle::Demangler::createWithChildren(v76, v77, Type, (swift::Demangle::Node *)v44, a5);
}

uint64_t swift::Demangle::nodeConsumesGenericArgs(swift::Demangle *this, swift::Demangle::Node *a2)
{
  uint64_t result;
  int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  result = 0;
  v4 = *((unsigned __int16 *)this + 8);
  if (v4 > 217)
  {
    v6 = v4 - 218;
    v7 = v6 > 0x24;
    v8 = (1 << v6) & 0x1000000005;
    if (v7 || v8 == 0)
      return 1;
  }
  else
  {
    v5 = (v4 - 117) > 0x3E || ((1 << (v4 - 117)) & 0x6000000000000101) == 0;
    if (v5 && v4 != 33 && v4 != 70)
      return 1;
  }
  return result;
}

unint64_t swift::Demangle::Demangler::demangleImplParamConvention(swift::Demangle::NodeFactory *a1, __int16 a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;

  v3 = *((_QWORD *)a1 + 9);
  if (v3 >= *((_QWORD *)a1 + 8))
  {
    v4 = *((_QWORD *)a1 + 9);
LABEL_16:
    v16 = 0;
    *((_QWORD *)a1 + 9) = v4 - 1;
    return v16;
  }
  v4 = v3 + 1;
  *((_QWORD *)a1 + 9) = v3 + 1;
  v5 = *(char *)(*((_QWORD *)a1 + 7) + v3) - 98;
  if (v5 >= 0x18 || ((0xD05CABu >> v5) & 1) == 0)
    goto LABEL_16;
  v7 = (&off_24C358BF8)[v5];
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v12;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  v13 = strlen(v7);
  *(_WORD *)(v8 + 16) = 106;
  *(_BYTE *)(v8 + 18) = 3;
  *(_QWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = v13;
  v16 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v16;
  if (!v16 || v16 + 24 > *((_QWORD *)a1 + 2))
  {
    v17 = 2 * *((_QWORD *)a1 + 4);
    if (v17 <= 0x20)
      v17 = 32;
    *((_QWORD *)a1 + 4) = v17;
    v18 = v17 + 8;
    v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
    v20 = (char *)v19 + v18;
    *v19 = *((_QWORD *)a1 + 3);
    v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v20;
    *((_QWORD *)a1 + 3) = v19;
  }
  *((_QWORD *)a1 + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = a2;
  *(_BYTE *)(v16 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v16, (swift::Demangle::Node *)v8, a1, v14, v15);
  return v16;
}

unint64_t swift::Demangle::Demangler::demangleImplResultConvention(swift::Demangle::NodeFactory *a1, __int16 a2)
{
  unint64_t v3;
  unint64_t v4;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;

  v3 = *((_QWORD *)a1 + 9);
  if (v3 >= *((_QWORD *)a1 + 8))
  {
    v4 = *((_QWORD *)a1 + 9);
LABEL_5:
    v7 = 0;
    *((_QWORD *)a1 + 9) = v4 - 1;
  }
  else
  {
    v4 = v3 + 1;
    *((_QWORD *)a1 + 9) = v3 + 1;
    v6 = "@out";
    switch(*(_BYTE *)(*((_QWORD *)a1 + 7) + v3))
    {
      case 'a':
        v6 = "@autoreleased";
        break;
      case 'd':
        v6 = "@unowned";
        break;
      case 'k':
        v6 = "@pack_out";
        break;
      case 'o':
        v6 = "@owned";
        break;
      case 'r':
        break;
      case 'u':
        v6 = "@unowned_inner_pointer";
        break;
      default:
        goto LABEL_5;
    }
    v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
    {
      v9 = 2 * *((_QWORD *)a1 + 4);
      if (v9 <= 0x20)
        v9 = 32;
      *((_QWORD *)a1 + 4) = v9;
      v10 = v9 + 8;
      v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      v12 = (char *)v11 + v10;
      *v11 = *((_QWORD *)a1 + 3);
      v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v12;
      *((_QWORD *)a1 + 3) = v11;
    }
    *((_QWORD *)a1 + 1) = v8 + 24;
    v13 = strlen(v6);
    *(_WORD *)(v8 + 16) = 106;
    *(_BYTE *)(v8 + 18) = 3;
    *(_QWORD *)v8 = v6;
    *(_QWORD *)(v8 + 8) = v13;
    v7 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v7;
    if (!v7 || v7 + 24 > *((_QWORD *)a1 + 2))
    {
      v16 = 2 * *((_QWORD *)a1 + 4);
      if (v16 <= 0x20)
        v16 = 32;
      *((_QWORD *)a1 + 4) = v16;
      v17 = v16 + 8;
      v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      v19 = (char *)v18 + v17;
      *v18 = *((_QWORD *)a1 + 3);
      v7 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = v19;
      *((_QWORD *)a1 + 3) = v18;
    }
    *((_QWORD *)a1 + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = a2;
    *(_BYTE *)(v7 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v7, (swift::Demangle::Node *)v8, a1, v14, v15);
  }
  return v7;
}

unint64_t swift::Demangle::Demangler::demangleImplParameterSending(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  unint64_t result;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v1 = *((_QWORD *)this + 9);
  if (v1 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v1) != 84)
    return 0;
  *((_QWORD *)this + 9) = v1 + 1;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v4 = 2 * *((_QWORD *)this + 4);
    if (v4 <= 0x20)
      v4 = 32;
    *((_QWORD *)this + 4) = v4;
    v5 = v4 + 8;
    v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    *v6 = *((_QWORD *)this + 3);
    result = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v6 + v5;
    *((_QWORD *)this + 3) = v6;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 111;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = "sending";
  *(_QWORD *)(result + 8) = 7;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleImplParameterResultDifferentiability(swift::Demangle::Demangler *this)
{
  unint64_t v2;
  const char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  size_t v9;

  v2 = *((_QWORD *)this + 9);
  if (v2 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v2) == 119)
  {
    *((_QWORD *)this + 9) = v2 + 1;
    v3 = "@noDerivative";
  }
  else
  {
    v3 = (const char *)&unk_20AA50335;
  }
  v4 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((_QWORD *)this + 2))
  {
    v5 = 2 * *((_QWORD *)this + 4);
    if (v5 <= 0x20)
      v5 = 32;
    *((_QWORD *)this + 4) = v5;
    v6 = v5 + 8;
    v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    v8 = (char *)v7 + v6;
    *v7 = *((_QWORD *)this + 3);
    v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v7;
  }
  *((_QWORD *)this + 1) = v4 + 24;
  v9 = strlen(v3);
  *(_WORD *)(v4 + 16) = 110;
  *(_BYTE *)(v4 + 18) = 3;
  *(_QWORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = v9;
  return v4;
}

unint64_t swift::Demangle::Demangler::demanglePrivateContextDescriptor(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v7;
  int8x16_t *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  unsigned int v12;
  swift::Demangle::Node *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  __int16 v19;
  swift::Demangle::Node *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  int v28;
  swift::Demangle::Node *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  int v34;
  unsigned int v35;
  swift::Demangle::Node *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;

  v5 = *((_QWORD *)this + 9);
  if (v5 >= *((_QWORD *)this + 8))
    return 0;
  v7 = 0;
  *((_QWORD *)this + 9) = v5 + 1;
  switch(*(_BYTE *)(*((_QWORD *)this + 7) + v5))
  {
    case 'A':
      v8 = swift::Demangle::Demangler::popAssocTypePath(this, a2, a3, a4, a5);
      if (!v8)
        return 0;
      v11 = *((_DWORD *)this + 24);
      if (!v11)
        return 0;
      v12 = v11 - 1;
      v13 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v12);
      if (*((_WORD *)v13 + 8) != 232)
        return 0;
      v14 = (unint64_t)v8;
      *((_DWORD *)this + 24) = v12;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v15 = 2 * *((_QWORD *)this + 4);
        if (v15 <= 0x20)
          v15 = 32;
        *((_QWORD *)this + 4) = v15;
        v16 = v15 + 8;
        v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        v18 = (char *)v17 + v16;
        *v17 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v18;
        *((_QWORD *)this + 3) = v17;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v19 = 294;
      goto LABEL_39;
    case 'E':
      v20 = swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v20)
        return 0;
      v14 = (unint64_t)v20;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v21 = 2 * *((_QWORD *)this + 4);
        if (v21 <= 0x20)
          v21 = 32;
        *((_QWORD *)this + 4) = v21;
        v22 = v21 + 8;
        v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
        v24 = (char *)v23 + v22;
        *v23 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v24;
        *((_QWORD *)this + 3) = v23;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v25 = 292;
      goto LABEL_47;
    case 'M':
      v26 = *((_DWORD *)this + 24);
      if (!v26)
        return 0;
      v27 = v26 - 1;
      v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v27);
      v28 = *(unsigned __int16 *)(v14 + 16);
      if (v28 == 101)
      {
        *((_DWORD *)this + 24) = v27;
        v14 = swift::Demangle::Demangler::changeKind(this, (swift::Demangle::Node **)v14, 153, a4, a5);
        if (!v14)
          return 0;
      }
      else
      {
        if (v28 != 153)
          return 0;
        *((_DWORD *)this + 24) = v27;
      }
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v41 = 2 * *((_QWORD *)this + 4);
        if (v41 <= 0x20)
          v41 = 32;
        *((_QWORD *)this + 4) = v41;
        v42 = v41 + 8;
        v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
        v44 = (char *)v43 + v42;
        *v43 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v44;
        *((_QWORD *)this + 3) = v43;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v25 = 291;
LABEL_47:
      *(_WORD *)(v7 + 16) = v25;
      *(_BYTE *)(v7 + 18) = 0;
LABEL_48:
      swift::Demangle::Node::addChild((unsigned int *)v7, (swift::Demangle::Node *)v14, this, a4, a5);
      break;
    case 'X':
      v29 = swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v29)
        return 0;
      v14 = (unint64_t)v29;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v30 = 2 * *((_QWORD *)this + 4);
        if (v30 <= 0x20)
          v30 = 32;
        *((_QWORD *)this + 4) = v30;
        v31 = v30 + 8;
        v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
        v33 = (char *)v32 + v31;
        *v32 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v33;
        *((_QWORD *)this + 3) = v32;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v25 = 293;
      goto LABEL_47;
    case 'Y':
      v34 = *((_DWORD *)this + 24);
      if (!v34)
        return 0;
      v35 = v34 - 1;
      v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v35);
      *((_DWORD *)this + 24) = v35;
      if (!v14)
        return 0;
      v36 = swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
      if (!v36)
        return 0;
      v13 = v36;
      v7 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((_QWORD *)this + 2))
      {
        v37 = 2 * *((_QWORD *)this + 4);
        if (v37 <= 0x20)
          v37 = 32;
        *((_QWORD *)this + 4) = v37;
        v38 = v37 + 8;
        v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        v40 = (char *)v39 + v38;
        *v39 = *((_QWORD *)this + 3);
        v7 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v40;
        *((_QWORD *)this + 3) = v39;
      }
      *((_QWORD *)this + 1) = v7 + 24;
      v19 = 293;
LABEL_39:
      *(_WORD *)(v7 + 16) = v19;
      *(_BYTE *)(v7 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v7, v13, this, v9, v10);
      goto LABEL_48;
    default:
      return v7;
  }
  return v7;
}

int8x16_t *swift::Demangle::Demangler::popAssocTypePath(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  swift::Demangle::Node *v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 289;
  v6[1].i8[2] = 0;
  do
  {
    v11 = *((_DWORD *)this + 24);
    if (v11 && (v12 = v11 - 1, v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v12), *(_WORD *)(v13 + 16) == 275))
      *((_DWORD *)this + 24) = v12;
    else
      v13 = 0;
    v14 = (swift::Demangle::Node *)swift::Demangle::Demangler::popAssocTypeName(this, a2, a3, a4, a5);
    if (!v14)
      return 0;
    swift::Demangle::Node::addChild((unsigned int *)v6, v14, this, v15, v16);
  }
  while (!v13);
  v17 = v6[1].u8[2];
  if (v17 == 5)
  {
    v19 = v6->u32[2];
    if ((_DWORD)v19)
    {
      v20 = (_QWORD *)(v6->i64[0] + 8 * v19 - 8);
      if ((unint64_t)v20 > v6->i64[0])
      {
        v21 = v6->i64[0] + 8;
        do
        {
          v22 = *(_QWORD *)(v21 - 8);
          *(_QWORD *)(v21 - 8) = *v20;
          *v20-- = v22;
          v23 = v21 >= (unint64_t)v20;
          v21 += 8;
        }
        while (!v23);
      }
    }
  }
  else if (v17 == 2)
  {
    *v6 = vextq_s8(*v6, *v6, 8uLL);
  }
  return v6;
}

unint64_t swift::Demangle::Demangler::demangleAssociatedTypeSimple(swift::Demangle::Demangler *this, swift::Demangle::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  int v29;
  unsigned int v30;

  v7 = swift::Demangle::Demangler::popAssocTypeName(this, (uint64_t)a2, a3, a4, a5);
  v10 = v7;
  if (!a2)
  {
    v29 = *((_DWORD *)this + 24);
    if (!v29)
      return 0;
    v30 = v29 - 1;
    v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v30);
    if (*(_WORD *)(v11 + 16) != 232)
      return 0;
    *((_DWORD *)this + 24) = v30;
    if (!v7)
      return v10;
    goto LABEL_8;
  }
  v11 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((_QWORD *)this + 2))
  {
    v12 = 2 * *((_QWORD *)this + 4);
    if (v12 <= 0x20)
      v12 = 32;
    *((_QWORD *)this + 4) = v12;
    v13 = v12 + 8;
    v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    v15 = (char *)v14 + v13;
    *v14 = *((_QWORD *)this + 3);
    v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v15;
    *((_QWORD *)this + 3) = v14;
  }
  *((_QWORD *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 232;
  *(_BYTE *)(v11 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v11, a2, this, v8, v9);
  if (v10)
  {
LABEL_8:
    v16 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((_QWORD *)this + 2))
    {
      v17 = 2 * *((_QWORD *)this + 4);
      if (v17 <= 0x20)
        v17 = 32;
      *((_QWORD *)this + 4) = v17;
      v18 = v17 + 8;
      v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v20 = (char *)v19 + v18;
      *v19 = *((_QWORD *)this + 3);
      v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v20;
      *((_QWORD *)this + 3) = v19;
    }
    *((_QWORD *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 45;
    *(_BYTE *)(v16 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v16, (swift::Demangle::Node *)v11, this, v8, v9);
    swift::Demangle::Node::addChild((unsigned int *)v16, (swift::Demangle::Node *)v10, this, v21, v22);
    v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v10;
    if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
    {
      v25 = 2 * *((_QWORD *)this + 4);
      if (v25 <= 0x20)
        v25 = 32;
      *((_QWORD *)this + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      v28 = (char *)v27 + v26;
      *v27 = *((_QWORD *)this + 3);
      v10 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v28;
      *((_QWORD *)this + 3) = v27;
    }
    *((_QWORD *)this + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = 232;
    *(_BYTE *)(v10 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v10, (swift::Demangle::Node *)v16, this, v23, v24);
  }
  return v10;
}

unint64_t swift::Demangle::Demangler::demangleAssociatedTypeCompound(swift::Demangle::Demangler *this, swift::Demangle::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  const char *v46;
  swift::Demangle::Node *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  const char *v54;

  v6 = *((_QWORD *)this + 2);
  v7 = (char *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v7;
  if (v7)
    v8 = (unint64_t)(v7 + 32) > v6;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 2 * *((_QWORD *)this + 4);
    if (v9 <= 0x28)
      v9 = 40;
    *((_QWORD *)this + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v12 = (char *)v11 + v10;
    *v11 = *((_QWORD *)this + 3);
    v7 = (char *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v12;
    *((_QWORD *)this + 3) = v11;
  }
  v13 = 0;
  *((_QWORD *)this + 1) = v7 + 32;
  v14 = 4;
  do
  {
    v16 = *((_DWORD *)this + 24);
    if (v16 && (v17 = v16 - 1, v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v17), *(_WORD *)(v18 + 16) == 275))
      *((_DWORD *)this + 24) = v17;
    else
      v18 = 0;
    v19 = swift::Demangle::Demangler::popAssocTypeName(this, (uint64_t)a2, a3, a4, a5);
    if (!v19)
      return 0;
    v20 = v19;
    if (v13 >= v14)
    {
      v21 = &v7[8 * v14];
      v22 = (char *)*((_QWORD *)this + 1);
      if (v21 == v22)
      {
        v24 = v21 + 8;
        v23 = *((_QWORD *)this + 2);
        if ((unint64_t)v24 <= v23)
        {
          *((_QWORD *)this + 1) = v24;
          LODWORD(v25) = 1;
LABEL_11:
          v14 += v25;
          goto LABEL_12;
        }
      }
      else
      {
        v23 = *((_QWORD *)this + 2);
      }
      if (2 * v14 <= 4)
        v25 = 4;
      else
        v25 = 2 * v14;
      v26 = 8 * (v25 + v14);
      v27 = (char *)((unint64_t)(v22 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 1) = v27;
      if (!v27 || (unint64_t)&v27[v26] > v23)
      {
        v28 = 2 * *((_QWORD *)this + 4);
        if (v28 <= v26 + 8)
          v28 = v26 + 8;
        *((_QWORD *)this + 4) = v28;
        v29 = v28 + 8;
        v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
        v31 = (char *)v30 + v29;
        *v30 = *((_QWORD *)this + 3);
        v27 = (char *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 2) = v31;
        *((_QWORD *)this + 3) = v30;
      }
      *((_QWORD *)this + 1) = &v27[v26];
      if (v14)
        memcpy(v27, v7, 8 * v14);
      v7 = v27;
      goto LABEL_11;
    }
LABEL_12:
    v15 = v13 + 1;
    *(_QWORD *)&v7[8 * v13++] = v20;
  }
  while (!v18);
  if (a2)
  {
    v33 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v33;
    if (!v33 || v33 + 24 > *((_QWORD *)this + 2))
    {
      v34 = 2 * *((_QWORD *)this + 4);
      if (v34 <= 0x20)
        v34 = 32;
      *((_QWORD *)this + 4) = v34;
      v35 = v34 + 8;
      v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
      v37 = (char *)v36 + v35;
      *v36 = *((_QWORD *)this + 3);
      v33 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v37;
      *((_QWORD *)this + 3) = v36;
    }
    *((_QWORD *)this + 1) = v33 + 24;
    *(_WORD *)(v33 + 16) = 232;
    *(_BYTE *)(v33 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v33, a2, this, a4, a5);
    if (!v15)
      return v33;
LABEL_47:
    v40 = 8 * v15;
    v41 = v7 - 8;
    while (1)
    {
      v47 = *(swift::Demangle::Node **)&v41[v40];
      if (!v47)
        break;
      v48 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = v48;
      if (!v48 || v48 + 24 > *((_QWORD *)this + 2))
      {
        v49 = 2 * *((_QWORD *)this + 4);
        if (v49 <= 0x20)
          v49 = 32;
        *((_QWORD *)this + 4) = v49;
        v50 = v49 + 8;
        v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
        v52 = (char *)v51 + v50;
        *v51 = *((_QWORD *)this + 3);
        v48 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 2) = v52;
        *((_QWORD *)this + 3) = v51;
      }
      v32 = 0;
      *((_QWORD *)this + 1) = v48 + 24;
      *(_WORD *)(v48 + 16) = 45;
      *(_BYTE *)(v48 + 18) = 0;
      if (v33 && v48)
      {
        swift::Demangle::Node::addChild((unsigned int *)v48, (swift::Demangle::Node *)v33, this, a4, a5);
        swift::Demangle::Node::addChild((unsigned int *)v48, v47, this, v53, v54);
        v32 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v32;
        if (!v32 || v32 + 24 > *((_QWORD *)this + 2))
        {
          v42 = 2 * *((_QWORD *)this + 4);
          if (v42 <= 0x20)
            v42 = 32;
          *((_QWORD *)this + 4) = v42;
          v43 = v42 + 8;
          v44 = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
          *v44 = *((_QWORD *)this + 3);
          v32 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v44 + v43;
          *((_QWORD *)this + 3) = v44;
        }
        *((_QWORD *)this + 1) = v32 + 24;
        *(_WORD *)(v32 + 16) = 232;
        *(_BYTE *)(v32 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v32, (swift::Demangle::Node *)v48, this, v45, v46);
      }
      v33 = v32;
      v40 -= 8;
      if (!v40)
        return v32;
    }
    return v33;
  }
  v38 = *((_DWORD *)this + 24);
  if (v38 && (v39 = v38 - 1, v33 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v39), *(_WORD *)(v33 + 16) == 232))
  {
    *((_DWORD *)this + 24) = v39;
    if (v15)
      goto LABEL_47;
  }
  else
  {
    v33 = 0;
    if (v15)
      goto LABEL_47;
  }
  return v33;
}

unint64_t swift::Demangle::Demangler::popAssocTypeName(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 *v11;
  swift::Demangle::Node *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  const char *v19;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = v5 - 1;
  v8 = *((_QWORD *)this + 11);
  v9 = *(unsigned __int16 **)(v8 + 8 * (v5 - 1));
  v10 = v9[8];
  if (v10 == 181)
  {
LABEL_16:
    *((_DWORD *)this + 24) = v7;
    v5 = v7;
    if (!v7)
      return 0;
    goto LABEL_19;
  }
  if (v10 != 232)
  {
LABEL_15:
    v7 = v5 - 1;
    v9 = *(unsigned __int16 **)(v8 + 8 * (v5 - 1));
    if (v9[8] != 347)
    {
      v9 = 0;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *((_DWORD *)this + 24) = v7;
  v11 = v9;
  while ((unsigned __int16)v10 == 232)
  {
    if (*((unsigned __int8 *)v11 + 18) - 1 >= 2)
      v11 = *(unsigned __int16 **)v11;
    v11 = *(unsigned __int16 **)v11;
    LOWORD(v10) = v11[8];
  }
  if ((unsigned __int16)v10 - 180 >= 2 && (unsigned __int16)v10 != 347)
    return 0;
  if (!v9)
  {
    v5 = v7;
    if (!v7)
      return 0;
    goto LABEL_15;
  }
  v5 = v7;
  if (!v7)
    return 0;
LABEL_19:
  v12 = *(swift::Demangle::Node **)(v8 + 8 * (v5 - 1));
  if (*((_WORD *)v12 + 8) != 101)
    return 0;
  *((_DWORD *)this + 24) = v5 - 1;
  v13 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v13;
  if (!v13 || v13 + 24 > *((_QWORD *)this + 2))
  {
    v14 = 2 * *((_QWORD *)this + 4);
    if (v14 <= 0x20)
      v14 = 32;
    *((_QWORD *)this + 4) = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v17 = (char *)v16 + v15;
    *v16 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v16;
  }
  *((_QWORD *)this + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = 35;
  *(_BYTE *)(v13 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v13, v12, this, a4, a5);
  if (v9 && v13)
    swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v9, this, v18, v19);
  return v13;
}

unsigned int *swift::Demangle::Demangler::demangleGenericSpecialization(swift::Demangle::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  int8x16_t *v11;
  uint64_t v12;
  const char *v13;
  int v14;
  swift::Demangle::Node **v15;
  uint64_t v16;
  int8x16_t *v17;
  unint64_t v18;
  swift::Demangle::Node *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;

  v10 = (unsigned int *)swift::Demangle::Demangler::demangleSpecAttributes(a1, a2, a3, a4, a5);
  if (!v10)
    return v10;
  v11 = swift::Demangle::Demangler::popTypeList(a1, v6, v7, v8, v9);
  if (!v11)
    return 0;
  v14 = v11[1].u8[2];
  v15 = (swift::Demangle::Node **)v11;
  if ((v14 - 1) >= 2)
  {
    if (v14 == 5)
    {
      v16 = v11->i64[0];
      v15 = (swift::Demangle::Node **)v11->i64[0];
LABEL_12:
      v17 = (int8x16_t *)(v16 + 8 * v11->u32[2]);
      if (v15 == (swift::Demangle::Node **)v17)
        return v10;
      goto LABEL_22;
    }
    v15 = 0;
  }
  switch(v14)
  {
    case 1:
      v17 = (int8x16_t *)&v11->u64[1];
      if (v15 == (swift::Demangle::Node **)&v11->u64[1])
        return v10;
      break;
    case 2:
      v17 = v11 + 1;
      if (v15 == (swift::Demangle::Node **)&v11[1])
        return v10;
      break;
    case 5:
      v16 = v11->i64[0];
      goto LABEL_12;
    default:
      v17 = 0;
      if (!v15)
        return v10;
      goto LABEL_22;
  }
  do
  {
LABEL_22:
    v19 = *v15;
    if (*v15)
    {
      v18 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v18;
      if (!v18 || v18 + 24 > *((_QWORD *)a1 + 2))
      {
        v20 = 2 * *((_QWORD *)a1 + 4);
        if (v20 <= 0x20)
          v20 = 32;
        *((_QWORD *)a1 + 4) = v20;
        v21 = v20 + 8;
        v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        v23 = (char *)v22 + v21;
        *v22 = *((_QWORD *)a1 + 3);
        v18 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = v23;
        *((_QWORD *)a1 + 3) = v22;
      }
      *((_QWORD *)a1 + 1) = v18 + 24;
      *(_WORD *)(v18 + 16) = 94;
      *(_BYTE *)(v18 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v18, v19, a1, v12, v13);
    }
    else
    {
      v18 = 0;
    }
    swift::Demangle::Node::addChild(v10, (swift::Demangle::Node *)v18, a1, v12, v13);
    ++v15;
  }
  while (v15 != (swift::Demangle::Node **)v17);
  return v10;
}

unint64_t swift::Demangle::Demangler::demangleSpecAttributes(swift::Demangle::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;

  v8 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  if (v7 < v8 && *(_BYTE *)(*((_QWORD *)a1 + 7) + v7) == 109)
  {
    *((_QWORD *)a1 + 9) = ++v7;
    v9 = 1;
    if (v7 >= v8)
      goto LABEL_9;
  }
  else
  {
    v9 = 0;
    if (v7 >= v8)
      goto LABEL_9;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 7) + v7) == 113)
  {
    *((_QWORD *)a1 + 9) = ++v7;
    v10 = 1;
    if (v7 >= v8)
      goto LABEL_13;
    goto LABEL_10;
  }
LABEL_9:
  v10 = 0;
  if (v7 >= v8)
    goto LABEL_13;
LABEL_10:
  if (*(_BYTE *)(*((_QWORD *)a1 + 7) + v7) != 97)
  {
LABEL_13:
    v11 = 0;
    if (v7 < v8)
      goto LABEL_14;
    return 0;
  }
  *((_QWORD *)a1 + 9) = ++v7;
  v11 = 1;
  if (v7 >= v8)
    return 0;
LABEL_14:
  *((_QWORD *)a1 + 9) = v7 + 1;
  v12 = *(char *)(*((_QWORD *)a1 + 7) + v7);
  if ((v12 - 58) < 0xF6u)
    return 0;
  v13 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v13;
  if (!v13 || (v14 = *((_QWORD *)a1 + 2), v13 + 24 > v14))
  {
    v15 = 2 * *((_QWORD *)a1 + 4);
    if (v15 <= 0x20)
      v15 = 32;
    *((_QWORD *)a1 + 4) = v15;
    v16 = v15 + 8;
    v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    v14 = (unint64_t)v17 + v16;
    *v17 = *((_QWORD *)a1 + 3);
    v13 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v14;
    *((_QWORD *)a1 + 3) = v17;
  }
  v18 = v13 + 24;
  *(_WORD *)(v13 + 16) = a2;
  *(_BYTE *)(v13 + 18) = 0;
  if (!v9)
  {
    if (!v10)
      goto LABEL_28;
LABEL_31:
    v24 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v24;
    if (!v24 || v24 + 24 > *((_QWORD *)a1 + 2))
    {
      v25 = 2 * *((_QWORD *)a1 + 4);
      if (v25 <= 0x20)
        v25 = 32;
      *((_QWORD *)a1 + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      *v27 = *((_QWORD *)a1 + 3);
      v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = (char *)v27 + v26;
      *((_QWORD *)a1 + 3) = v27;
    }
    *((_QWORD *)a1 + 1) = v24 + 24;
    *(_WORD *)(v24 + 16) = 217;
    *(_BYTE *)(v24 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v24, a1, a4, a5);
    v18 = *((_QWORD *)a1 + 1);
    v23 = v12 - 48;
    if (!v11)
      goto LABEL_43;
    goto LABEL_37;
  }
  v19 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v19;
  if (!v19 || v19 + 24 > v14)
  {
    v20 = 2 * *((_QWORD *)a1 + 4);
    if (v20 <= 0x20)
      v20 = 32;
    *((_QWORD *)a1 + 4) = v20;
    v21 = v20 + 8;
    v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    *v22 = *((_QWORD *)a1 + 3);
    v19 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v22 + v21;
    *((_QWORD *)a1 + 3) = v22;
  }
  *((_QWORD *)a1 + 1) = v19 + 24;
  *(_WORD *)(v19 + 16) = 339;
  *(_BYTE *)(v19 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v19, a1, a4, a5);
  v18 = *((_QWORD *)a1 + 1);
  if (v10)
    goto LABEL_31;
LABEL_28:
  v23 = v12 - 48;
  if (v11)
  {
LABEL_37:
    v28 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v28;
    if (!v28 || v28 + 24 > *((_QWORD *)a1 + 2))
    {
      v29 = 2 * *((_QWORD *)a1 + 4);
      if (v29 <= 0x20)
        v29 = 32;
      *((_QWORD *)a1 + 4) = v29;
      v30 = v29 + 8;
      v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      *v31 = *((_QWORD *)a1 + 3);
      v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = (char *)v31 + v30;
      *((_QWORD *)a1 + 3) = v31;
    }
    *((_QWORD *)a1 + 1) = v28 + 24;
    *(_WORD *)(v28 + 16) = 346;
    *(_BYTE *)(v28 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v28, a1, a4, a5);
    v18 = *((_QWORD *)a1 + 1);
  }
LABEL_43:
  v32 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v32;
  if (!v32 || v32 + 24 > *((_QWORD *)a1 + 2))
  {
    v33 = 2 * *((_QWORD *)a1 + 4);
    if (v33 <= 0x20)
      v33 = 32;
    *((_QWORD *)a1 + 4) = v33;
    v34 = v33 + 8;
    v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
    *v35 = *((_QWORD *)a1 + 3);
    v32 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v35 + v34;
    *((_QWORD *)a1 + 3) = v35;
  }
  *((_QWORD *)a1 + 1) = v32 + 24;
  *(_WORD *)(v32 + 16) = 216;
  *(_BYTE *)(v32 + 18) = 4;
  *(_QWORD *)v32 = v23;
  swift::Demangle::Node::addChild((unsigned int *)v13, (swift::Demangle::Node *)v32, a1, a4, a5);
  return v13;
}

uint64_t swift::Demangle::Demangler::demangleFunctionSpecialization(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  swift::Demangle::Node *v11;
  unint64_t v12;
  uint64_t result;
  swift::Demangle::Node *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int v26;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;

  v9 = swift::Demangle::Demangler::demangleSpecAttributes(this, 77, a3, a4, a5);
  if (v9)
  {
    while (1)
    {
      v10 = *((_QWORD *)this + 9);
      if (v10 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v10) == 95)
        break;
      v11 = swift::Demangle::Demangler::demangleFuncSpecParam(this, 78, v6, v7, v8);
      if (!v11)
      {
        v9 = 0;
        goto LABEL_8;
      }
      swift::Demangle::Node::addChild((unsigned int *)v9, v11, this, v7, v8);
    }
    *((_QWORD *)this + 9) = v10 + 1;
  }
LABEL_8:
  v12 = *((_QWORD *)this + 9);
  if (v12 < *((_QWORD *)this + 8) && *(_BYTE *)(*((_QWORD *)this + 7) + v12) == 110)
  {
    *((_QWORD *)this + 9) = v12 + 1;
    if (!v9)
      return 0;
  }
  else
  {
    v14 = swift::Demangle::Demangler::demangleFuncSpecParam(this, 79, v6, v7, v8);
    result = 0;
    if (!v9 || !v14)
      return result;
    swift::Demangle::Node::addChild((unsigned int *)v9, v14, this, v15, v16);
  }
  v17 = *(unsigned __int8 *)(v9 + 18);
  if ((_DWORD)v17 == 1)
    goto LABEL_20;
  if ((_DWORD)v17 == 5)
  {
    v17 = *(unsigned int *)(v9 + 8);
    if ((_DWORD)v17)
      goto LABEL_20;
    return v9;
  }
  if ((_DWORD)v17 != 2)
    return v9;
  v17 = 2;
LABEL_20:
  v18 = 0;
  while (1)
  {
    v19 = *(unsigned __int8 *)(v9 + 18);
    v20 = v19 - 1;
    if ((_DWORD)v19 != 1)
    {
      if ((_DWORD)v19 == 5)
      {
        v19 = *(unsigned int *)(v9 + 8);
      }
      else
      {
        if ((_DWORD)v19 != 2)
          goto LABEL_31;
        v19 = 2;
      }
    }
    v21 = v17 + ~v18;
    if (v19 <= v21)
    {
LABEL_31:
      v23 = 0;
      goto LABEL_32;
    }
    v22 = v9;
    if (v20 >= 2)
      v22 = *(_QWORD *)v9;
    v23 = *(int8x16_t **)(v22 + 8 * v21);
LABEL_32:
    if (v23[1].i16[0] != 78)
      goto LABEL_21;
    v24 = v23[1].u8[2];
    v25 = (unsigned int **)v23;
    if ((v24 - 1) >= 2)
    {
      if ((_DWORD)v24 != 5 || !v23->i32[2])
        goto LABEL_21;
      v25 = (unsigned int **)v23->i64[0];
    }
    v26 = **v25;
    if (v26 > 9 || ((1 << v26) & 0x233) == 0)
      goto LABEL_21;
    if ((_DWORD)v24 == 1)
      goto LABEL_47;
    if ((_DWORD)v24 == 5)
      break;
    if ((_DWORD)v24 == 2)
    {
      v24 = 2;
      v28 = *((_DWORD *)this + 24);
      if (v28)
        goto LABEL_52;
      return 0;
    }
    v24 = 0;
    v28 = *((_DWORD *)this + 24);
    if (!v28)
      return 0;
LABEL_52:
    while (1)
    {
      v29 = v28 - 1;
      v30 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v29);
      v31 = *(unsigned __int16 *)(v30 + 16);
      if (v31 != 232)
        break;
      *((_DWORD *)this + 24) = v29;
      if (v26 == 9 || v26 == 5)
      {
        swift::Demangle::Node::addChild((unsigned int *)v23, (swift::Demangle::Node *)v30, this, v7, v8);
        v28 = *((_DWORD *)this + 24);
        if (v28)
          continue;
      }
      return 0;
    }
    if (v31 != 101)
      return 0;
    *((_DWORD *)this + 24) = v29;
    v33 = *(_BYTE **)v30;
    v32 = *(_QWORD *)(v30 + 8);
    if (v26 == 4 && v32 && *v33 == 95)
    {
      --v32;
      ++v33;
    }
    v34 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v34;
    if (!v34 || v34 + 24 > *((_QWORD *)this + 2))
    {
      v35 = 2 * *((_QWORD *)this + 4);
      if (v35 <= 0x20)
        v35 = 32;
      *((_QWORD *)this + 4) = v35;
      v36 = v35 + 8;
      v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      *v37 = *((_QWORD *)this + 3);
      v34 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v37 + v36;
      *((_QWORD *)this + 3) = v37;
    }
    *((_QWORD *)this + 1) = v34 + 24;
    *(_WORD *)(v34 + 16) = 81;
    *(_BYTE *)(v34 + 18) = 3;
    *(_QWORD *)v34 = v33;
    *(_QWORD *)(v34 + 8) = v32;
    swift::Demangle::Node::addChild((unsigned int *)v23, (swift::Demangle::Node *)v34, this, v7, v8);
    v38 = v23[1].u8[2];
    if (v38 == 5)
    {
      v39 = v23->u32[2];
      if (v24 != v39)
      {
        v40 = (_QWORD *)(v23->i64[0] + 8 * v39 - 8);
        if ((unint64_t)v40 > v23->i64[0] + 8 * v24)
        {
          v41 = v23->i64[0] + 8 * v24 + 8;
          do
          {
            v42 = *(_QWORD *)(v41 - 8);
            *(_QWORD *)(v41 - 8) = *v40;
            *v40-- = v42;
            v43 = v41 >= (unint64_t)v40;
            v41 += 8;
          }
          while (!v43);
        }
      }
    }
    else if (v38 == 2 && !v24)
    {
      *v23 = vextq_s8(*v23, *v23, 8uLL);
    }
LABEL_21:
    if (++v18 == v17)
      return v9;
  }
  v24 = v23->u32[2];
LABEL_47:
  v28 = *((_DWORD *)this + 24);
  if (v28)
    goto LABEL_52;
  return 0;
}

void std::vector<swift::Demangle::Node *>::push_back[abi:nn180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_28;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

double swift::Demangle::Demangler::demangleBridgedMethodParams@<D0>(swift::Demangle::Demangler *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  int v5;
  double result;
  unint64_t v8;
  int v9;
  int v10;
  std::string v12;

  v3 = *((_QWORD *)this + 9);
  if (v3 >= *((_QWORD *)this + 8))
    goto LABEL_22;
  if (*(_BYTE *)(*((_QWORD *)this + 7) + v3) == 95)
  {
    *((_QWORD *)this + 9) = v3 + 1;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    return result;
  }
  memset(&v12, 0, sizeof(v12));
  *((_QWORD *)this + 9) = v3 + 1;
  v5 = *(char *)(*((_QWORD *)this + 7) + v3);
  if ((v5 - 97) > 0xF || ((1 << (v5 - 97)) & 0xD001) == 0)
  {
LABEL_22:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return result;
  }
  std::string::push_back(&v12, v5);
  do
  {
    v8 = *((_QWORD *)this + 9);
    if (v8 >= *((_QWORD *)this + 8))
    {
      v10 = 0;
LABEL_17:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      continue;
    }
    v9 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v8);
    *((_QWORD *)this + 9) = v8 + 1;
    if (v9 == 95)
    {
      result = *(double *)&v12.__r_.__value_.__l.__data_;
      *a2 = v12;
      return result;
    }
    v10 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v8);
    if ((v10 - 98) > 0xC || ((1 << (v10 - 98)) & 0x1021) == 0)
      goto LABEL_17;
    std::string::push_back(&v12, v10);
  }
  while ((v10 - 98) <= 0xC && ((1 << (v10 - 98)) & 0x1021) != 0);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return result;
}

unsigned int *swift::Demangle::Demangler::demangleAutoDiffSubsetParametersThunk(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unsigned int v12;
  swift::Demangle::Node *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  swift::Demangle::Node *v33;
  uint64_t v34;
  const char *v35;
  unsigned int *v36;
  unint64_t v37;
  swift::Demangle::Node *v38;
  uint64_t v39;
  const char *v40;
  unsigned int *v41;
  unint64_t v42;
  swift::Demangle::Node *v43;
  uint64_t v44;
  const char *v45;
  unsigned int *result;
  unint64_t v47;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 323;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (v11)
  {
    do
    {
      v12 = v11 - 1;
      v13 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v12);
      *((_DWORD *)this + 24) = v12;
      if (!v13)
        break;
      swift::Demangle::Node::addChild((unsigned int *)v6, v13, this, a4, a5);
      v11 = *((_DWORD *)this + 24);
    }
    while (v11);
    v14 = v6[1].u8[2];
    if (v14 == 5)
    {
      v15 = v6->i64[0];
      v16 = v6->u32[2];
      v17 = (_QWORD *)(v6->i64[0] + 8 * v16 - 8);
      if ((_DWORD)v16)
        v18 = (unint64_t)v17 > v15;
      else
        v18 = 0;
      if (v18)
      {
        v19 = v15 + 8;
        do
        {
          v20 = *(_QWORD *)(v19 - 8);
          *(_QWORD *)(v19 - 8) = *v17;
          *v17-- = v20;
          v21 = v19 >= (unint64_t)v17;
          v19 += 8;
        }
        while (!v21);
      }
    }
    else if (v14 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  v22 = *((_QWORD *)this + 9);
  if (v22 >= *((_QWORD *)this + 8))
  {
    v23 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v22 + 1;
    v23 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v22);
  }
  HIDWORD(v24) = v23;
  LODWORD(v24) = (v23 << 24) - 1677721600;
  v25 = (v24 >> 25);
  v18 = v25 > 7;
  v26 = (1 << v25) & 0xC3;
  if (v18 || v26 == 0)
  {
    v6 = 0;
  }
  else
  {
    v28 = (char)v23;
    v29 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v29;
    if (!v29 || v29 + 24 > *((_QWORD *)this + 2))
    {
      v30 = 2 * *((_QWORD *)this + 4);
      if (v30 <= 0x20)
        v30 = 32;
      *((_QWORD *)this + 4) = v30;
      v31 = v30 + 8;
      v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      *v32 = *((_QWORD *)this + 3);
      v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v32 + v31;
      *((_QWORD *)this + 3) = v32;
    }
    *((_QWORD *)this + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 321;
    *(_BYTE *)(v29 + 18) = 4;
    *(_QWORD *)v29 = v28;
    if (v6)
      swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v29, this, a4, a5);
  }
  v33 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  v36 = 0;
  if (v6 && v33)
  {
    swift::Demangle::Node::addChild((unsigned int *)v6, v33, this, v34, v35);
    v36 = (unsigned int *)v6;
  }
  v37 = *((_QWORD *)this + 9);
  if (v37 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v37) != 112)
    return 0;
  *((_QWORD *)this + 9) = v37 + 1;
  v38 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  v41 = 0;
  if (v36 && v38)
  {
    swift::Demangle::Node::addChild(v36, v38, this, v39, v40);
    v41 = v36;
  }
  v42 = *((_QWORD *)this + 9);
  if (v42 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v42) != 114)
    return 0;
  *((_QWORD *)this + 9) = v42 + 1;
  v43 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  result = 0;
  if (v41 && v43)
  {
    swift::Demangle::Node::addChild(v41, v43, this, v44, v45);
    result = v41;
  }
  v47 = *((_QWORD *)this + 9);
  if (v47 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v47) != 80)
    return 0;
  *((_QWORD *)this + 9) = v47 + 1;
  return result;
}

int8x16_t *swift::Demangle::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  int v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node *v13;
  unsigned int v14;
  swift::Demangle::Node *v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 322;
  v6[1].i8[2] = 0;
  v11 = *((_DWORD *)this + 24);
  if (!v11)
    goto LABEL_18;
  v12 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v11 - 1));
  if (*((_WORD *)v12 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v11 - 1;
    swift::Demangle::Node::addChild((unsigned int *)v6, v12, this, a4, a5);
    v11 = *((_DWORD *)this + 24);
    if (!v11)
      goto LABEL_18;
  }
  v13 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v11 - 1));
  if (*((_WORD *)v13 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v11 - 1;
    swift::Demangle::Node::addChild((unsigned int *)v6, v13, this, a4, a5);
    v11 = *((_DWORD *)this + 24);
    if (!v11)
      goto LABEL_18;
  }
  else
  {
    v6 = 0;
  }
  v14 = v11 - 1;
  v15 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v14);
  if (*((_WORD *)v15 + 8) != 232)
  {
LABEL_18:
    v6 = 0;
    goto LABEL_19;
  }
  *((_DWORD *)this + 24) = v14;
  if (v6)
  {
    swift::Demangle::Node::addChild((unsigned int *)v6, v15, this, a4, a5);
    v16 = v6[1].u8[2];
    if (v16 == 5)
    {
      v30 = v6->u32[2];
      if ((_DWORD)v30)
      {
        v31 = (_QWORD *)(v6->i64[0] + 8 * v30 - 8);
        if ((unint64_t)v31 > v6->i64[0])
        {
          v32 = v6->i64[0] + 8;
          do
          {
            v33 = *(_QWORD *)(v32 - 8);
            *(_QWORD *)(v32 - 8) = *v31;
            *v31-- = v33;
            v34 = v32 >= (unint64_t)v31;
            v32 += 8;
          }
          while (!v34);
        }
      }
    }
    else if (v16 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
LABEL_19:
  v17 = *((_QWORD *)this + 9);
  if (v17 >= *((_QWORD *)this + 8))
  {
    v18 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v17 + 1;
    v18 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v17);
  }
  HIDWORD(v19) = v18;
  LODWORD(v19) = (v18 << 24) - 1677721600;
  v20 = (v19 >> 25);
  v21 = v20 > 7;
  v22 = (1 << v20) & 0xC3;
  if (v21 || v22 == 0)
    return 0;
  v24 = (char)v18;
  v25 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v25;
  if (!v25 || v25 + 24 > *((_QWORD *)this + 2))
  {
    v26 = 2 * *((_QWORD *)this + 4);
    if (v26 <= 0x20)
      v26 = 32;
    *((_QWORD *)this + 4) = v26;
    v27 = v26 + 8;
    v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    *v28 = *((_QWORD *)this + 3);
    v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v28 + v27;
    *((_QWORD *)this + 3) = v28;
  }
  *((_QWORD *)this + 1) = v25 + 24;
  *(_WORD *)(v25 + 16) = 321;
  *(_BYTE *)(v25 + 18) = 4;
  *(_QWORD *)v25 = v24;
  if (v6)
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v25, this, a4, a5);
  return v6;
}

unsigned int *swift::Demangle::Demangler::demangleAutoDiffFunctionOrSimpleThunk(swift::Demangle::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  int v12;
  unsigned int v13;
  swift::Demangle::Node *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  swift::Demangle::Node *v34;
  uint64_t v35;
  const char *v36;
  unsigned int *v37;
  unint64_t v38;
  swift::Demangle::Node *v39;
  uint64_t v40;
  const char *v41;
  unsigned int *result;
  unint64_t v43;

  v7 = (int8x16_t *)((*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)a1 + 1) = v7;
  if (!v7 || (unint64_t)&v7[1].u64[1] > *((_QWORD *)a1 + 2))
  {
    v8 = 2 * *((_QWORD *)a1 + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)a1 + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v11 = (char *)v10 + v9;
    *v10 = *((_QWORD *)a1 + 3);
    v7 = (int8x16_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)a1 + 2) = v11;
    *((_QWORD *)a1 + 3) = v10;
  }
  *((_QWORD *)a1 + 1) = (char *)v7 + 24;
  v7[1].i16[0] = a2;
  v7[1].i8[2] = 0;
  v12 = *((_DWORD *)a1 + 24);
  if (v12)
  {
    do
    {
      v13 = v12 - 1;
      v14 = *(swift::Demangle::Node **)(*((_QWORD *)a1 + 11) + 8 * v13);
      *((_DWORD *)a1 + 24) = v13;
      if (!v14)
        break;
      swift::Demangle::Node::addChild((unsigned int *)v7, v14, a1, a4, a5);
      v12 = *((_DWORD *)a1 + 24);
    }
    while (v12);
    v15 = v7[1].u8[2];
    if (v15 == 5)
    {
      v16 = v7->i64[0];
      v17 = v7->u32[2];
      v18 = (_QWORD *)(v7->i64[0] + 8 * v17 - 8);
      if ((_DWORD)v17)
        v19 = (unint64_t)v18 > v16;
      else
        v19 = 0;
      if (v19)
      {
        v20 = v16 + 8;
        do
        {
          v21 = *(_QWORD *)(v20 - 8);
          *(_QWORD *)(v20 - 8) = *v18;
          *v18-- = v21;
          v22 = v20 >= (unint64_t)v18;
          v20 += 8;
        }
        while (!v22);
      }
    }
    else if (v15 == 2)
    {
      *v7 = vextq_s8(*v7, *v7, 8uLL);
    }
  }
  v23 = *((_QWORD *)a1 + 9);
  if (v23 >= *((_QWORD *)a1 + 8))
  {
    v24 = 0;
  }
  else
  {
    *((_QWORD *)a1 + 9) = v23 + 1;
    v24 = *(unsigned __int8 *)(*((_QWORD *)a1 + 7) + v23);
  }
  HIDWORD(v25) = v24;
  LODWORD(v25) = (v24 << 24) - 1677721600;
  v26 = (v25 >> 25);
  v19 = v26 > 7;
  v27 = (1 << v26) & 0xC3;
  if (v19 || v27 == 0)
  {
    v7 = 0;
  }
  else
  {
    v29 = (char)v24;
    v30 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 1) = v30;
    if (!v30 || v30 + 24 > *((_QWORD *)a1 + 2))
    {
      v31 = 2 * *((_QWORD *)a1 + 4);
      if (v31 <= 0x20)
        v31 = 32;
      *((_QWORD *)a1 + 4) = v31;
      v32 = v31 + 8;
      v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      *v33 = *((_QWORD *)a1 + 3);
      v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 2) = (char *)v33 + v32;
      *((_QWORD *)a1 + 3) = v33;
    }
    *((_QWORD *)a1 + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 321;
    *(_BYTE *)(v30 + 18) = 4;
    *(_QWORD *)v30 = v29;
    if (v7)
      swift::Demangle::Node::addChild((unsigned int *)v7, (swift::Demangle::Node *)v30, a1, a4, a5);
  }
  v34 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(a1);
  v37 = 0;
  if (v7 && v34)
  {
    swift::Demangle::Node::addChild((unsigned int *)v7, v34, a1, v35, v36);
    v37 = (unsigned int *)v7;
  }
  v38 = *((_QWORD *)a1 + 9);
  if (v38 >= *((_QWORD *)a1 + 8) || *(_BYTE *)(*((_QWORD *)a1 + 7) + v38) != 112)
    return 0;
  *((_QWORD *)a1 + 9) = v38 + 1;
  v39 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(a1);
  result = 0;
  if (v37 && v39)
  {
    swift::Demangle::Node::addChild(v37, v39, a1, v40, v41);
    result = v37;
  }
  v43 = *((_QWORD *)a1 + 9);
  if (v43 >= *((_QWORD *)a1 + 8) || *(_BYTE *)(*((_QWORD *)a1 + 7) + v43) != 114)
    return 0;
  *((_QWORD *)a1 + 9) = v43 + 1;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleAutoDiffFunctionKind(swift::Demangle::Demangler *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v2 = *((_QWORD *)this + 9);
  if (v2 >= *((_QWORD *)this + 8))
  {
    v3 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v2 + 1;
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + v2);
  }
  HIDWORD(v4) = v3;
  LODWORD(v4) = (v3 << 24) - 1677721600;
  v5 = (v4 >> 25);
  v6 = v5 > 7;
  v7 = (1 << v5) & 0xC3;
  if (v6 || v7 == 0)
    return 0;
  v9 = (char)v3;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v11 = 2 * *((_QWORD *)this + 4);
    if (v11 <= 0x20)
      v11 = 32;
    *((_QWORD *)this + 4) = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *v13 = *((_QWORD *)this + 3);
    result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v13 + v12;
    *((_QWORD *)this + 3) = v13;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 321;
  *(_BYTE *)(result + 18) = 4;
  *(_QWORD *)result = v9;
  return result;
}

unint64_t swift::Demangle::Demangler::demangleIndexSubset(swift::Demangle::Demangler *this)
{
  unint64_t v2;
  std::string::value_type v3;
  unint64_t v4;
  unint64_t v5;
  size_t size;
  std::string *v7;
  unint64_t Node;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  v2 = *((_QWORD *)this + 9);
  if (v2 >= *((_QWORD *)this + 8))
    v3 = 0;
  else
    v3 = *(_BYTE *)(*((_QWORD *)this + 7) + v2);
  while (v3 == 83 || v3 == 85)
  {
    std::string::push_back(&v10, v3);
    v5 = *((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 9);
    if (v4 < v5)
      *((_QWORD *)this + 9) = ++v4;
    v3 = 0;
    if (v4 < v5)
      v3 = *(_BYTE *)(*((_QWORD *)this + 7) + v4);
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  else
    size = v10.__r_.__value_.__l.__size_;
  if (!size)
  {
    Node = 0;
    if ((*((_BYTE *)&v10.__r_.__value_.__s + 23) & 0x80) == 0)
      return Node;
    goto LABEL_18;
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v10;
  else
    v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  Node = swift::Demangle::NodeFactory::createNode(this, 327, v7, size);
  if ((*((_BYTE *)&v10.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_18:
    operator delete(v10.__r_.__value_.__l.__data_);
  return Node;
}

unsigned int *swift::Demangle::Demangler::demangleDifferentiabilityWitness(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  swift::Demangle::Node *v12;
  unsigned int v13;
  swift::Demangle::Node *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  swift::Demangle::Node *v32;
  uint64_t v33;
  const char *v34;
  unsigned int *v35;
  unint64_t v36;
  swift::Demangle::Node *v37;
  uint64_t v38;
  const char *v39;
  unsigned int *v40;
  unint64_t v41;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = (char *)v9 + v8;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 325;
  v6[1].i8[2] = 0;
  v10 = *((_DWORD *)this + 24);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v10 - 1));
    if (*((_WORD *)v12 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v11;
      if (v10 == 1)
        goto LABEL_25;
    }
    else
    {
      v12 = 0;
      v11 = *((_DWORD *)this + 24);
    }
    do
    {
      v13 = v11 - 1;
      v14 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v13);
      *((_DWORD *)this + 24) = v13;
      if (!v14)
        break;
      swift::Demangle::Node::addChild((unsigned int *)v6, v14, this, a4, a5);
      v11 = *((_DWORD *)this + 24);
    }
    while (v11);
    v15 = v6[1].u8[2];
    if (v15 == 5)
    {
      v16 = v6->i64[0];
      v17 = v6->u32[2];
      v18 = (_QWORD *)(v6->i64[0] + 8 * v17 - 8);
      if ((_DWORD)v17)
        v19 = (unint64_t)v18 > v16;
      else
        v19 = 0;
      if (v19)
      {
        v20 = v16 + 8;
        do
        {
          v21 = *(_QWORD *)(v20 - 8);
          *(_QWORD *)(v20 - 8) = *v18;
          *v18-- = v21;
          v22 = v20 >= (unint64_t)v18;
          v20 += 8;
        }
        while (!v22);
      }
    }
    else if (v15 == 2)
    {
      *v6 = vextq_s8(*v6, *v6, 8uLL);
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_25:
  v23 = *((_QWORD *)this + 9);
  if (v23 >= *((_QWORD *)this + 8))
  {
    v24 = 0;
  }
  else
  {
    *((_QWORD *)this + 9) = v23 + 1;
    v24 = *(char *)(*((_QWORD *)this + 7) + v23);
  }
  HIDWORD(v26) = v24;
  LODWORD(v26) = v24 - 100;
  v25 = v26 >> 1;
  if (v25 > 7 || ((0x93u >> v25) & 1) == 0)
    return 0;
  v27 = qword_20AA55668[v25];
  v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v28;
  if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
  {
    v29 = 2 * *((_QWORD *)this + 4);
    if (v29 <= 0x20)
      v29 = 32;
    *((_QWORD *)this + 4) = v29;
    v30 = v29 + 8;
    v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
    *v31 = *((_QWORD *)this + 3);
    v28 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v31 + v30;
    *((_QWORD *)this + 3) = v31;
  }
  *((_QWORD *)this + 1) = v28 + 24;
  *(_WORD *)(v28 + 16) = 102;
  *(_BYTE *)(v28 + 18) = 4;
  *(_QWORD *)v28 = v27;
  if (v6)
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v28, this, a4, a5);
  v32 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  v35 = 0;
  if (v6 && v32)
  {
    swift::Demangle::Node::addChild((unsigned int *)v6, v32, this, v33, v34);
    v35 = (unsigned int *)v6;
  }
  v36 = *((_QWORD *)this + 9);
  if (v36 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v36) != 112)
    return 0;
  *((_QWORD *)this + 9) = v36 + 1;
  v37 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexSubset(this);
  v40 = 0;
  if (v35 && v37)
  {
    swift::Demangle::Node::addChild(v35, v37, this, v38, v39);
    v40 = v35;
  }
  v41 = *((_QWORD *)this + 9);
  if (v41 >= *((_QWORD *)this + 8) || *(_BYTE *)(*((_QWORD *)this + 7) + v41) != 114)
    return 0;
  *((_QWORD *)this + 9) = v41 + 1;
  if (v12 && v40)
    swift::Demangle::Node::addChild(v40, v12, this, v38, v39);
  return v40;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleFuncSpecParam(swift::Demangle::NodeFactory *a1, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  swift::Demangle::Node *result;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  swift::Demangle::NodeFactory *v33;
  swift::Demangle::Node *v34;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  swift::Demangle::NodeFactory *v48;
  uint64_t v49;
  int v50;
  char *v51;
  swift::Demangle::Node *Node;
  uint64_t v53;
  const char *v54;

  v7 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v7;
  if (!v7 || (v8 = *((_QWORD *)a1 + 2), v7 + 24 > v8))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v8 = (unint64_t)v11 + v10;
    *v11 = *((_QWORD *)a1 + 3);
    v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = a2;
  *(_BYTE *)(v7 + 18) = 0;
  v12 = *((_QWORD *)a1 + 8);
  v13 = *((_QWORD *)a1 + 9);
  if (v13 >= v12)
    return 0;
  v14 = v13 + 1;
  *((_QWORD *)a1 + 9) = v13 + 1;
  v15 = *((_QWORD *)a1 + 7);
  result = (swift::Demangle::Node *)v7;
  switch(*(_BYTE *)(v15 + v13))
  {
    case 'c':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v18 = v17 + 24 > v8;
      else
        v18 = 1;
      if (v18)
      {
        v19 = 2 * *((_QWORD *)a1 + 4);
        if (v19 <= 0x20)
          v19 = 32;
        *((_QWORD *)a1 + 4) = v19;
        v20 = v19 + 8;
        v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *v21 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v21 + v20;
        *((_QWORD *)a1 + 3) = v21;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 5;
      break;
    case 'd':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 71)
      {
        v14 = v13 + 2;
        *((_QWORD *)a1 + 9) = v13 + 2;
        v22 = 192;
      }
      else
      {
        v22 = 64;
      }
      goto LABEL_74;
    case 'e':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 68)
      {
        v14 = v13 + 2;
        *((_QWORD *)a1 + 9) = v13 + 2;
        v22 = 1088;
      }
      else
      {
        v22 = 1024;
      }
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 71)
      {
        *((_QWORD *)a1 + 9) = ++v14;
        v22 |= 0x80u;
      }
LABEL_74:
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 79)
      {
        *((_QWORD *)a1 + 9) = ++v14;
        v22 |= 0x200u;
      }
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 88)
      {
        *((_QWORD *)a1 + 9) = v14 + 1;
        v22 |= 0x100u;
      }
      v23 = v22;
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (!v17 || v17 + 24 > v8)
        goto LABEL_89;
      goto LABEL_92;
    case 'g':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 88)
      {
        *((_QWORD *)a1 + 9) = v13 + 2;
        v23 = 384;
      }
      else
      {
        v23 = 128;
      }
      goto LABEL_84;
    case 'i':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v24 = v17 + 24 > v8;
      else
        v24 = 1;
      if (v24)
      {
        v25 = 2 * *((_QWORD *)a1 + 4);
        if (v25 <= 0x20)
          v25 = 32;
        *((_QWORD *)a1 + 4) = v25;
        v26 = v25 + 8;
        v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
        *v27 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v27 + v26;
        *((_QWORD *)a1 + 3) = v27;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 6;
      break;
    case 'n':
      return result;
    case 'o':
      if (v14 < v12 && *(_BYTE *)(v15 + v14) == 88)
      {
        *((_QWORD *)a1 + 9) = v13 + 2;
        v23 = 768;
      }
      else
      {
        v23 = 512;
      }
LABEL_84:
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v44 = v17 + 24 > v8;
      else
        v44 = 1;
      if (v44)
      {
LABEL_89:
        v45 = 2 * *((_QWORD *)a1 + 4);
        if (v45 <= 0x20)
          v45 = 32;
        *((_QWORD *)a1 + 4) = v45;
        v46 = v45 + 8;
        v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
        *v47 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v47 + v46;
        *((_QWORD *)a1 + 3) = v47;
      }
LABEL_92:
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = v23;
      break;
    case 'p':
      if (v14 >= v12)
        return 0;
      result = 0;
      v32 = v13 + 2;
      *((_QWORD *)a1 + 9) = v13 + 2;
      switch(*(_BYTE *)(v15 + v14))
      {
        case 'd':
          v33 = a1;
          v34 = (swift::Demangle::Node *)v7;
          v35 = 3;
          return swift::Demangle::Demangler::addFuncSpecParamNumber(v33, v34, v35, a4, a5);
        case 'f':
          v48 = a1;
          v49 = 0;
          goto LABEL_106;
        case 'g':
          v48 = a1;
          v49 = 1;
          goto LABEL_106;
        case 'i':
          v33 = a1;
          v34 = (swift::Demangle::Node *)v7;
          v35 = 2;
          return swift::Demangle::Demangler::addFuncSpecParamNumber(v33, v34, v35, a4, a5);
        case 'k':
          v48 = a1;
          v49 = 9;
LABEL_106:
          result = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v48, 80, v49);
          if (result)
            goto LABEL_107;
          return result;
        case 's':
          if (v32 >= v12)
            return 0;
          *((_QWORD *)a1 + 9) = v13 + 3;
          v50 = *(char *)(v15 + v32);
          switch(v50)
          {
            case 'b':
              v51 = "u8";
              break;
            case 'c':
              v51 = "objc";
              break;
            case 'w':
              v51 = "u16";
              break;
            default:
              return 0;
          }
          Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a1, 80, 4);
          if (Node)
            swift::Demangle::Node::addChild((unsigned int *)v7, Node, a1, v53, v54);
          result = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(a1, 81, v51);
          if (!result)
            return result;
LABEL_107:
          v17 = (unint64_t)result;
          break;
        default:
          return result;
      }
      break;
    case 'r':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v36 = v17 + 24 > v8;
      else
        v36 = 1;
      if (v36)
      {
        v37 = 2 * *((_QWORD *)a1 + 4);
        if (v37 <= 0x20)
          v37 = 32;
        *((_QWORD *)a1 + 4) = v37;
        v38 = v37 + 8;
        v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        *v39 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v39 + v38;
        *((_QWORD *)a1 + 3) = v39;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 8;
      break;
    case 's':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v40 = v17 + 24 > v8;
      else
        v40 = 1;
      if (v40)
      {
        v41 = 2 * *((_QWORD *)a1 + 4);
        if (v41 <= 0x20)
          v41 = 32;
        *((_QWORD *)a1 + 4) = v41;
        v42 = v41 + 8;
        v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
        *v43 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v43 + v42;
        *((_QWORD *)a1 + 3) = v43;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 7;
      break;
    case 'x':
      v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a1 + 1) = v17;
      if (v17)
        v28 = v17 + 24 > v8;
      else
        v28 = 1;
      if (v28)
      {
        v29 = 2 * *((_QWORD *)a1 + 4);
        if (v29 <= 0x20)
          v29 = 32;
        *((_QWORD *)a1 + 4) = v29;
        v30 = v29 + 8;
        v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
        *v31 = *((_QWORD *)a1 + 3);
        v17 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)a1 + 2) = (char *)v31 + v30;
        *((_QWORD *)a1 + 3) = v31;
      }
      *((_QWORD *)a1 + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 80;
      *(_BYTE *)(v17 + 18) = 4;
      *(_QWORD *)v17 = 256;
      break;
    default:
      return 0;
  }
  swift::Demangle::Node::addChild((unsigned int *)v7, (swift::Demangle::Node *)v17, a1, a4, a5);
  return (swift::Demangle::Node *)v7;
}

swift::Demangle::Node *swift::Demangle::Demangler::addFuncSpecParamNumber(swift::Demangle::NodeFactory *a1, swift::Demangle::Node *this, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  swift::Demangle::Node *v35;
  swift::Demangle::Node *v37;

  v7 = a3;
  v8 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((_QWORD *)a1 + 2))
  {
    v9 = 2 * *((_QWORD *)a1 + 4);
    if (v9 <= 0x20)
      v9 = 32;
    *((_QWORD *)a1 + 4) = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    *v11 = *((_QWORD *)a1 + 3);
    v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v11 + v10;
    *((_QWORD *)a1 + 3) = v11;
  }
  *((_QWORD *)a1 + 1) = v8 + 24;
  *(_WORD *)(v8 + 16) = 80;
  *(_BYTE *)(v8 + 18) = 4;
  *(_QWORD *)v8 = v7;
  swift::Demangle::Node::addChild((unsigned int *)this, (swift::Demangle::Node *)v8, a1, a4, a5);
  v14 = *((_QWORD *)a1 + 9);
  if (v14 >= *((_QWORD *)a1 + 8))
    return 0;
  v37 = this;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  while (1)
  {
    v19 = *((_QWORD *)a1 + 7);
    if (*(unsigned __int8 *)(v19 + v14) - 48 > 9)
      break;
    *((_QWORD *)a1 + 9) = v14 + 1;
    v20 = *(_BYTE *)(v19 + v14);
    if (v17 < v16)
      goto LABEL_10;
    v21 = &v15[v16];
    v22 = (char *)*((_QWORD *)a1 + 1);
    if (v21 != v22)
    {
      v23 = *((_QWORD *)a1 + 2);
LABEL_16:
      if (2 * v16 <= 4)
        v25 = 4;
      else
        v25 = 2 * v16;
      v26 = v25 + v16;
      if (!v22 || (unint64_t)&v22[v26] > v23)
      {
        v27 = 2 * *((_QWORD *)a1 + 4);
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        *((_QWORD *)a1 + 4) = v27;
        v28 = v27 + 8;
        v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        v30 = (char *)v29 + v28;
        *v29 = *((_QWORD *)a1 + 3);
        v22 = (char *)(v29 + 1);
        *((_QWORD *)a1 + 2) = v30;
        *((_QWORD *)a1 + 3) = v29;
      }
      *((_QWORD *)a1 + 1) = &v22[v26];
      if (v16)
        memcpy(v22, v15, v16);
      v15 = v22;
      goto LABEL_9;
    }
    v24 = v21 + 1;
    v23 = *((_QWORD *)a1 + 2);
    if ((unint64_t)v24 > v23)
      goto LABEL_16;
    *((_QWORD *)a1 + 1) = v24;
    LODWORD(v25) = 1;
LABEL_9:
    v16 += v25;
LABEL_10:
    v18 = v17 + 1;
    v15[v17] = v20;
    v14 = *((_QWORD *)a1 + 9);
    ++v17;
    if (v14 >= *((_QWORD *)a1 + 8))
      goto LABEL_28;
  }
  v18 = v17;
LABEL_28:
  if (!v18)
    return 0;
  v31 = (*((_QWORD *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)a1 + 1) = v31;
  if (!v31 || v31 + 24 > *((_QWORD *)a1 + 2))
  {
    v32 = 2 * *((_QWORD *)a1 + 4);
    if (v32 <= 0x20)
      v32 = 32;
    *((_QWORD *)a1 + 4) = v32;
    v33 = v32 + 8;
    v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
    *v34 = *((_QWORD *)a1 + 3);
    v31 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)a1 + 2) = (char *)v34 + v33;
    *((_QWORD *)a1 + 3) = v34;
  }
  *((_QWORD *)a1 + 1) = v31 + 24;
  *(_WORD *)(v31 + 16) = 81;
  *(_BYTE *)(v31 + 18) = 3;
  *(_QWORD *)v31 = v15;
  *(_QWORD *)(v31 + 8) = v18;
  v35 = v37;
  if (v37)
    swift::Demangle::Node::addChild((unsigned int *)v37, (swift::Demangle::Node *)v31, a1, v12, v13);
  return v35;
}

unint64_t swift::Demangle::Demangler::demangleExtendedExistentialShape(swift::Demangle::Demangler *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  swift::Demangle::Node *v7;
  unsigned int v8;
  swift::Demangle::Node *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;

  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 0;
  v7 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v5 - 1));
  if (*((_WORD *)v7 + 8) == 232)
  {
    *((_DWORD *)this + 24) = --v5;
    if (a2 != 71)
      goto LABEL_15;
  }
  else
  {
    v7 = 0;
    if (a2 != 71)
      goto LABEL_15;
  }
  if (v5)
  {
    v8 = v5 - 1;
    v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v8);
    if (*((_WORD *)v9 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v8;
      if (v7)
      {
        v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v10;
        if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
        {
          v11 = 2 * *((_QWORD *)this + 4);
          if (v11 <= 0x20)
            v11 = 32;
          *((_QWORD *)this + 4) = v11;
          v12 = v11 + 8;
          v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
          v14 = (char *)v13 + v12;
          *v13 = *((_QWORD *)this + 3);
          v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v14;
          *((_QWORD *)this + 3) = v13;
        }
        *((_QWORD *)this + 1) = v10 + 24;
        *(_WORD *)(v10 + 16) = 334;
        *(_BYTE *)(v10 + 18) = 0;
        swift::Demangle::Node::addChild((unsigned int *)v10, v9, this, a4, a5);
        goto LABEL_22;
      }
      return 0;
    }
  }
LABEL_15:
  if (!v7)
    return 0;
  v10 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v10;
  if (!v10 || v10 + 24 > *((_QWORD *)this + 2))
  {
    v15 = 2 * *((_QWORD *)this + 4);
    if (v15 <= 0x20)
      v15 = 32;
    *((_QWORD *)this + 4) = v15;
    v16 = v15 + 8;
    v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    v18 = (char *)v17 + v16;
    *v17 = *((_QWORD *)this + 3);
    v10 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v18;
    *((_QWORD *)this + 3) = v17;
  }
  *((_QWORD *)this + 1) = v10 + 24;
  *(_WORD *)(v10 + 16) = 334;
  *(_BYTE *)(v10 + 18) = 0;
LABEL_22:
  swift::Demangle::Node::addChild((unsigned int *)v10, v7, this, a4, a5);
  return v10;
}

int8x16_t *swift::Demangle::Demangler::demangleSymbolicExtendedExistentialType(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  const char *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  int v14;
  swift::Demangle::Node *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  swift::Demangle::Node *v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;

  v8 = swift::Demangle::Demangler::popRetroactiveConformances(this, a2, a3, a4, a5);
  v9 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v9;
  if (!v9 || (unint64_t)&v9[1].u64[1] > *((_QWORD *)this + 2))
  {
    v10 = 2 * *((_QWORD *)this + 4);
    if (v10 <= 0x20)
      v10 = 32;
    *((_QWORD *)this + 4) = v10;
    v11 = v10 + 8;
    v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    v13 = (char *)v12 + v11;
    *v12 = *((_QWORD *)this + 3);
    v9 = (int8x16_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v13;
    *((_QWORD *)this + 3) = v12;
  }
  *((_QWORD *)this + 1) = (char *)v9 + 24;
  v9[1].i16[0] = 235;
  v9[1].i8[2] = 0;
  v14 = *((_DWORD *)this + 24);
  if (!v14)
    return 0;
  do
  {
    v15 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v14 - 1));
    if (*((_WORD *)v15 + 8) != 232)
      break;
    *((_DWORD *)this + 24) = v14 - 1;
    swift::Demangle::Node::addChild((unsigned int *)v9, v15, this, v6, v7);
    v14 = *((_DWORD *)this + 24);
  }
  while (v14);
  v16 = v9[1].u8[2];
  if (v16 == 5)
  {
    v17 = v9->i64[0];
    v18 = v9->u32[2];
    v19 = (_QWORD *)(v9->i64[0] + 8 * v18 - 8);
    if ((_DWORD)v18)
      v20 = (unint64_t)v19 > v17;
    else
      v20 = 0;
    if (v20)
    {
      v21 = v17 + 8;
      do
      {
        v22 = *(_QWORD *)(v21 - 8);
        *(_QWORD *)(v21 - 8) = *v19;
        *v19-- = v22;
        v23 = v21 >= (unint64_t)v19;
        v21 += 8;
      }
      while (!v23);
    }
  }
  else if (v16 == 2)
  {
    *v9 = vextq_s8(*v9, *v9, 8uLL);
  }
  if (!v14)
    return 0;
  v24 = v14 - 1;
  v25 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v24);
  *((_DWORD *)this + 24) = v24;
  if (!v25 || (*((_WORD *)v25 + 8) & 0xFFFE) != 0x150)
    return 0;
  if (v8)
  {
    v28 = swift::Demangle::Demangler::createWithChildren(this, 338, v25, (swift::Demangle::Node *)v9, v8->i8);
    if (!v28)
      return 0;
  }
  else
  {
    if (!v9)
      return v9;
    v28 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = v28;
    if (!v28 || v28 + 24 > *((_QWORD *)this + 2))
    {
      v30 = 2 * *((_QWORD *)this + 4);
      if (v30 <= 0x20)
        v30 = 32;
      *((_QWORD *)this + 4) = v30;
      v31 = v30 + 8;
      v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v33 = (char *)v32 + v31;
      *v32 = *((_QWORD *)this + 3);
      v28 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = v33;
      *((_QWORD *)this + 3) = v32;
    }
    *((_QWORD *)this + 1) = v28 + 24;
    *(_WORD *)(v28 + 16) = 338;
    *(_BYTE *)(v28 + 18) = 0;
    swift::Demangle::Node::addChild((unsigned int *)v28, v25, this, v6, v7);
    swift::Demangle::Node::addChild((unsigned int *)v28, (swift::Demangle::Node *)v9, this, v34, v35);
  }
  v9 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v9;
  if (!v9 || (unint64_t)&v9[1].u64[1] > *((_QWORD *)this + 2))
  {
    v36 = 2 * *((_QWORD *)this + 4);
    if (v36 <= 0x20)
      v36 = 32;
    *((_QWORD *)this + 4) = v36;
    v37 = v36 + 8;
    v38 = malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
    v39 = (char *)v38 + v37;
    *v38 = *((_QWORD *)this + 3);
    v9 = (int8x16_t *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v39;
    *((_QWORD *)this + 3) = v38;
  }
  *((_QWORD *)this + 1) = (char *)v9 + 24;
  v9[1].i16[0] = 232;
  v9[1].i8[2] = 0;
  swift::Demangle::Node::addChild((unsigned int *)v9, (swift::Demangle::Node *)v28, this, v26, v27);
  return v9;
}

unint64_t swift::Demangle::Demangler::demangleMetatypeRepresentation(swift::Demangle::Demangler *this)
{
  unint64_t v1;
  int v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = *((_QWORD *)this + 9);
  if (v1 >= *((_QWORD *)this + 8))
    return 0;
  *((_QWORD *)this + 9) = v1 + 1;
  v3 = *(char *)(*((_QWORD *)this + 7) + v1);
  if (v3 == 84)
  {
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (!result || result + 24 > *((_QWORD *)this + 2))
    {
      v9 = 2 * *((_QWORD *)this + 4);
      if (v9 <= 0x20)
        v9 = 32;
      *((_QWORD *)this + 4) = v9;
      v10 = v9 + 8;
      v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      *v11 = *((_QWORD *)this + 3);
      result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v11 + v10;
      *((_QWORD *)this + 3) = v11;
    }
    *((_QWORD *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(_BYTE *)(result + 18) = 3;
    *(_QWORD *)result = "@thick";
    v8 = 6;
    goto LABEL_24;
  }
  if (v3 == 111)
  {
    result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = result;
    if (!result || result + 24 > *((_QWORD *)this + 2))
    {
      v12 = 2 * *((_QWORD *)this + 4);
      if (v12 <= 0x20)
        v12 = 32;
      *((_QWORD *)this + 4) = v12;
      v13 = v12 + 8;
      v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *v14 = *((_QWORD *)this + 3);
      result = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 2) = (char *)v14 + v13;
      *((_QWORD *)this + 3) = v14;
    }
    *((_QWORD *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(_BYTE *)(result + 18) = 3;
    *(_QWORD *)result = "@objc_metatype";
    v8 = 14;
    goto LABEL_24;
  }
  if (v3 != 116)
    return 0;
  result = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = result;
  if (!result || result + 24 > *((_QWORD *)this + 2))
  {
    v5 = 2 * *((_QWORD *)this + 4);
    if (v5 <= 0x20)
      v5 = 32;
    *((_QWORD *)this + 4) = v5;
    v6 = v5 + 8;
    v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    *v7 = *((_QWORD *)this + 3);
    result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = (char *)v7 + v6;
    *((_QWORD *)this + 3) = v7;
  }
  *((_QWORD *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 146;
  *(_BYTE *)(result + 18) = 3;
  *(_QWORD *)result = "@thin";
  v8 = 5;
LABEL_24:
  *(_QWORD *)(result + 8) = v8;
  return result;
}

int8x16_t *swift::Demangle::Demangler::demangleConstrainedExistentialRequirementList(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unsigned int v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;

  v6 = (int8x16_t *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (unint64_t)&v6[1].u64[1] > *((_QWORD *)this + 2))
  {
    v7 = 2 * *((_QWORD *)this + 4);
    if (v7 <= 0x20)
      v7 = 32;
    *((_QWORD *)this + 4) = v7;
    v8 = v7 + 8;
    v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    v10 = (char *)v9 + v8;
    *v9 = *((_QWORD *)this + 3);
    v6 = (int8x16_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v9;
  }
  *((_QWORD *)this + 1) = (char *)v6 + 24;
  v6[1].i16[0] = 84;
  v6[1].i8[2] = 0;
  do
  {
    v14 = *((_DWORD *)this + 24);
    if (!v14)
      return 0;
    v15 = v14 - 1;
    v16 = *((_QWORD *)this + 11);
    v17 = *(unsigned __int16 *)(*(_QWORD *)(v16 + 8 * (v14 - 1)) + 16);
    if (v17 == 275)
    {
      *((_DWORD *)this + 24) = v15;
      --v14;
      if (!v15)
        return 0;
    }
    v11 = v14 - 1;
    v12 = *(unsigned __int16 **)(v16 + 8 * v11);
    v13 = v12[8];
    if ((v13 - 39) >= 4 && v13 != 354 && v13 != 36)
      return 0;
    *((_DWORD *)this + 24) = v11;
    swift::Demangle::Node::addChild((unsigned int *)v6, (swift::Demangle::Node *)v12, this, a4, a5);
  }
  while (v17 != 275);
  v19 = v6[1].u8[2];
  if (v19 == 5)
  {
    v20 = v6->u32[2];
    if ((_DWORD)v20)
    {
      v21 = (_QWORD *)(v6->i64[0] + 8 * v20 - 8);
      if ((unint64_t)v21 > v6->i64[0])
      {
        v22 = v6->i64[0] + 8;
        do
        {
          v23 = *(_QWORD *)(v22 - 8);
          *(_QWORD *)(v22 - 8) = *v21;
          *v21-- = v23;
          v24 = v22 >= (unint64_t)v21;
          v22 += 8;
        }
        while (!v24);
      }
    }
  }
  else if (v19 == 2)
  {
    *v6 = vextq_s8(*v6, *v6, 8uLL);
  }
  return v6;
}

unint64_t swift::Demangle::Demangler::demangleProtocolList(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  swift::Demangle::Node *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;

  v6 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v6;
  if (!v6 || (v7 = *((_QWORD *)this + 2), v6 + 24 > v7))
  {
    v8 = 2 * *((_QWORD *)this + 4);
    if (v8 <= 0x20)
      v8 = 32;
    *((_QWORD *)this + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v7 = (unint64_t)v10 + v9;
    *v10 = *((_QWORD *)this + 3);
    v6 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v10;
  }
  *(_WORD *)(v6 + 16) = 235;
  *(_BYTE *)(v6 + 18) = 0;
  v11 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((_QWORD *)this + 1) = v11;
  if (v11)
    v12 = v11 + 24 > v7;
  else
    v12 = 1;
  if (v12)
  {
    v13 = 2 * *((_QWORD *)this + 4);
    if (v13 <= 0x20)
      v13 = 32;
    *((_QWORD *)this + 4) = v13;
    v14 = v13 + 8;
    v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    v16 = (char *)v15 + v14;
    *v15 = *((_QWORD *)this + 3);
    v11 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v15;
  }
  *((_QWORD *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 190;
  *(_BYTE *)(v11 + 18) = 0;
  swift::Demangle::Node::addChild((unsigned int *)v11, (swift::Demangle::Node *)v6, this, a4, a5);
  v21 = *((_DWORD *)this + 24);
  if (v21 && (v22 = v21 - 1, *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v22) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v22;
  }
  else
  {
    do
    {
      v23 = *((_DWORD *)this + 24);
      if (v23 && (v24 = v23 - 1, v25 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v24), *(_WORD *)(v25 + 16) == 275))
        *((_DWORD *)this + 24) = v24;
      else
        v25 = 0;
      v26 = (swift::Demangle::Node *)swift::Demangle::Demangler::popProtocol(this, v17, v18, v19, v20);
      if (!v26)
        return 0;
      swift::Demangle::Node::addChild((unsigned int *)v6, v26, this, v27, v28);
    }
    while (!v25);
    v29 = *(unsigned __int8 *)(v6 + 18);
    if (v29 == 5)
    {
      v31 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v31)
      {
        v32 = (_QWORD *)(*(_QWORD *)v6 + 8 * v31 - 8);
        if ((unint64_t)v32 > *(_QWORD *)v6)
        {
          v33 = *(_QWORD *)v6 + 8;
          do
          {
            v34 = *(_QWORD *)(v33 - 8);
            *(_QWORD *)(v33 - 8) = *v32;
            *v32-- = v34;
            v35 = v33 >= (unint64_t)v32;
            v33 += 8;
          }
          while (!v35);
        }
      }
    }
    else if (v29 == 2)
    {
      *(int8x16_t *)v6 = vextq_s8(*(int8x16_t *)v6, *(int8x16_t *)v6, 8uLL);
    }
  }
  return v11;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleAccessor(swift::Demangle::Demangler *this, swift::Demangle::Node *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  __int16 v11;
  swift::Demangle::Node *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 >= v6)
    return 0;
  v8 = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  v9 = *((_QWORD *)this + 7);
  v11 = 141;
  v12 = a2;
  switch(*(_BYTE *)(v9 + v5))
  {
    case 'G':
      v11 = 100;
      goto LABEL_17;
    case 'M':
      v11 = 152;
      goto LABEL_17;
    case 'W':
      v11 = 51;
      goto LABEL_17;
    case 'a':
      if (v8 >= v6)
        return 0;
      v12 = 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v11 = 169;
      switch(*(_BYTE *)(v9 + v8))
      {
        case 'O':
          goto LABEL_17;
        case 'P':
          v11 = 157;
          goto LABEL_17;
        case 'o':
          v11 = 155;
          goto LABEL_17;
        case 'u':
          v11 = 251;
          goto LABEL_17;
        default:
          return v12;
      }
      return v12;
    case 'g':
      v11 = 98;
      goto LABEL_17;
    case 'i':
      v11 = 126;
      goto LABEL_17;
    case 'l':
      if (v8 >= v6)
        return 0;
      v12 = 0;
      *((_QWORD *)this + 9) = v5 + 2;
      v11 = 168;
      switch(*(_BYTE *)(v9 + v8))
      {
        case 'O':
          goto LABEL_17;
        case 'o':
          v11 = 154;
          goto LABEL_17;
        case 'p':
          v11 = 156;
          goto LABEL_17;
        case 'u':
          v11 = 250;
          goto LABEL_17;
        default:
          return v12;
      }
      return v12;
    case 'm':
      goto LABEL_17;
    case 'p':
      return v12;
    case 'r':
      v11 = 204;
      goto LABEL_17;
    case 's':
      v11 = 215;
      goto LABEL_17;
    case 'w':
      v11 = 257;
LABEL_17:
      if (!a2)
        return 0;
      v12 = (swift::Demangle::Node *)((*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)this + 1) = v12;
      if (!v12 || (unint64_t)v12 + 24 > *((_QWORD *)this + 2))
      {
        v13 = 2 * *((_QWORD *)this + 4);
        if (v13 <= 0x20)
          v13 = 32;
        *((_QWORD *)this + 4) = v13;
        v14 = v13 + 8;
        v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
        v16 = (char *)v15 + v14;
        *v15 = *((_QWORD *)this + 3);
        v12 = (swift::Demangle::Node *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)this + 2) = v16;
        *((_QWORD *)this + 3) = v15;
      }
      *((_QWORD *)this + 1) = (char *)v12 + 24;
      *((_WORD *)v12 + 8) = v11;
      *((_BYTE *)v12 + 18) = 0;
      swift::Demangle::Node::addChild((unsigned int *)v12, a2, this, a4, a5);
      break;
    default:
      return 0;
  }
  return v12;
}

swift::Demangle::Node *swift::Demangle::Demangler::demangleEntity(swift::Demangle::Demangler *this, __int16 a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  unsigned int v8;
  swift::Demangle::Node *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  int v18;
  BOOL v19;
  BOOL v20;
  swift::Demangle::Node *v21;
  swift::Demangle::Node *v22;
  uint64_t v23;
  const char *v24;

  v7 = *((_DWORD *)this + 24);
  if (v7
    && (v8 = v7 - 1, v9 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v8), *((_WORD *)v9 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    v9 = 0;
  }
  v14 = (char *)swift::Demangle::Demangler::popFunctionParamLabels(this, v9, a3, a4, a5);
  v15 = *((_DWORD *)this + 24);
  if (!v15
    || ((v16 = v15 - 1,
         v17 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * v16),
         v18 = v17[8],
         (v18 - 173) <= 0x3C)
      ? (v19 = ((1 << (v18 + 83)) & 0x100000010000010DLL) == 0)
      : (v19 = 1),
        v19
     && ((v18 - 101) <= 0x24
       ? (v20 = ((1 << (v18 - 101)) & 0x1000800001) == 0)
       : (v20 = 1),
         v20 && v18 != 347)))
  {
    v17 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v16;
  }
  v21 = swift::Demangle::Demangler::popContext(this, v10, v11, v12, v13);
  if (v14)
    v22 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, a2, v21, (swift::Demangle::Node *)v17, v14, v9);
  else
    v22 = (swift::Demangle::Node *)swift::Demangle::Demangler::createWithChildren(this, a2, v21, (swift::Demangle::Node *)v17, (char *)v9);
  return setParentForOpaqueReturnTypeNodes(this, v22, v9, v23, v24);
}

unint64_t swift::Demangle::Demangler::demangleMacroExpansion(swift::Demangle::Demangler *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  swift::Demangle::Node *v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  int v26;
  unsigned __int16 *v27;
  int v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  swift::Demangle::Node *v32;
  uint64_t v33;
  const char *v34;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  swift::Demangle::Node *v56;
  unsigned int v57;
  swift::Demangle::Node *v58;

  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (v6 < v5)
  {
    v8 = 0;
    v9 = v6 + 1;
    *((_QWORD *)this + 9) = v6 + 1;
    v10 = *((_QWORD *)this + 7);
    v11 = 8;
    v12 = 1;
    switch(*(_BYTE *)(v10 + v6))
    {
      case 'X':
        if (v9 >= v5)
          goto LABEL_75;
        v13 = *(unsigned __int8 *)(v10 + v9);
        if (v13 == 95)
        {
          v14 = 0;
          v9 = v6 + 2;
          *((_QWORD *)this + 9) = v6 + 2;
        }
        else if ((v13 - 48) > 9)
        {
LABEL_75:
          v14 = -1000;
        }
        else
        {
          v36 = 0;
          while (1)
          {
            v37 = *(unsigned __int8 *)(v10 + v9);
            if ((v37 - 48) > 9)
              break;
            v38 = v37 + 10 * v36 - 48;
            if (v38 < v36)
              goto LABEL_75;
            *((_QWORD *)this + 9) = ++v9;
            v36 = v38;
            if (v5 == v9)
            {
              v14 = -1000;
LABEL_84:
              v40 = -1000;
              goto LABEL_85;
            }
          }
          v14 = -1000;
          if ((v36 & 0x80000000) == 0 && v9 < v5 && v37 == 95)
          {
            *((_QWORD *)this + 9) = ++v9;
            v14 = (v36 + 1);
          }
        }
        if (v9 >= v5)
          goto LABEL_84;
        v39 = *(unsigned __int8 *)(v10 + v9);
        if (v39 == 95)
        {
          v40 = 0;
          *((_QWORD *)this + 9) = v9 + 1;
          goto LABEL_85;
        }
        if ((v39 - 48) > 9)
          goto LABEL_84;
        v41 = 0;
        while (1)
        {
          v42 = *(unsigned __int8 *)(v10 + v9);
          if ((v42 - 48) > 9)
            break;
          v43 = v42 + 10 * v41 - 48;
          if (v43 >= v41)
          {
            *((_QWORD *)this + 9) = ++v9;
            v41 = v43;
            if (v5 != v9)
              continue;
          }
          goto LABEL_84;
        }
        v40 = -1000;
        if ((v41 & 0x80000000) == 0 && v9 < v5 && v42 == 95)
        {
          *((_QWORD *)this + 9) = v9 + 1;
          v40 = (v41 + 1);
        }
LABEL_85:
        v44 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v44;
        if (!v44 || v44 + 24 > *((_QWORD *)this + 2))
        {
          v45 = 2 * *((_QWORD *)this + 4);
          if (v45 <= 0x20)
            v45 = 32;
          *((_QWORD *)this + 4) = v45;
          v46 = v45 + 8;
          v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
          v48 = (char *)v47 + v46;
          *v47 = *((_QWORD *)this + 3);
          v44 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = v48;
          *((_QWORD *)this + 3) = v47;
        }
        *((_QWORD *)this + 1) = v44 + 24;
        *(_WORD *)(v44 + 16) = 102;
        *(_BYTE *)(v44 + 18) = 4;
        *(_QWORD *)v44 = v14;
        v49 = (*((_QWORD *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = v49;
        if (!v49 || v49 + 24 > *((_QWORD *)this + 2))
        {
          v50 = 2 * *((_QWORD *)this + 4);
          if (v50 <= 0x20)
            v50 = 32;
          *((_QWORD *)this + 4) = v50;
          v51 = v50 + 8;
          v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
          *v52 = *((_QWORD *)this + 3);
          v49 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 2) = (char *)v52 + v51;
          *((_QWORD *)this + 3) = v52;
        }
        *((_QWORD *)this + 1) = v49 + 24;
        *(_WORD *)(v49 + 16) = 102;
        *(_BYTE *)(v49 + 18) = 4;
        *(_QWORD *)v49 = v40;
        v53 = *((_DWORD *)this + 24);
        if (v53)
        {
          v54 = v53 - 1;
          v55 = *((_QWORD *)this + 11);
          v56 = *(swift::Demangle::Node **)(v55 + 8 * (v53 - 1));
          if (*((_WORD *)v56 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v54;
            if (v53 == 1)
              goto LABEL_103;
          }
          else
          {
            v56 = 0;
            v54 = *((_DWORD *)this + 24);
          }
          v57 = v54 - 1;
          v58 = *(swift::Demangle::Node **)(v55 + 8 * v57);
          if (*((_WORD *)v58 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v57;
            return swift::Demangle::Demangler::createWithChildren(this, 139, v58, v56, (char *)v44, (swift::Demangle::Node *)v49);
          }
        }
        else
        {
          v56 = 0;
        }
LABEL_103:
        v58 = 0;
        return swift::Demangle::Demangler::createWithChildren(this, 139, v58, v56, (char *)v44, (swift::Demangle::Node *)v49);
      case 'a':
        goto LABEL_17;
      case 'b':
        v11 = 12;
        goto LABEL_17;
      case 'c':
        v11 = 28;
        goto LABEL_17;
      case 'e':
        v11 = 72;
        goto LABEL_17;
      case 'f':
        v12 = 0;
        v15 = (_DWORD *)((char *)this + 96);
        v16 = *((_DWORD *)this + 24);
        v11 = 74;
        if (v16)
        {
          v17 = 1;
          goto LABEL_19;
        }
        v20 = 0;
        v18 = 0;
        v21 = 0;
        goto LABEL_63;
      case 'm':
        v11 = 142;
        goto LABEL_17;
      case 'p':
        v11 = 172;
        goto LABEL_17;
      case 'q':
        v11 = 174;
        goto LABEL_17;
      case 'r':
        v11 = 143;
        goto LABEL_17;
      case 'u':
        v12 = 0;
        v11 = 140;
LABEL_17:
        v15 = (_DWORD *)((char *)this + 96);
        v16 = *((_DWORD *)this + 24);
        if (v16)
        {
          v17 = 0;
LABEL_19:
          v18 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v16 - 1));
          if (*(_WORD *)(v18 + 16) == 101)
          {
            *v15 = --v16;
            if (!v17)
            {
LABEL_44:
              v19 = v16;
              v20 = 0;
              if (!v12)
              {
LABEL_45:
                v21 = 0;
                if (!v19)
                  goto LABEL_63;
                goto LABEL_46;
              }
LABEL_30:
              if (!v19)
              {
                v21 = 0;
                v12 = 1;
                goto LABEL_63;
              }
              v22 = v19 - 1;
              v21 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v19 - 1));
              v23 = v21[8];
              v24 = (v23 - 173) > 0x3C
                 || ((1 << (v23 + 83)) & 0x100000010000010DLL) == 0;
              if (v24
                && ((v23 - 101) <= 0x24
                  ? (v25 = ((1 << (v23 - 101)) & 0x1000800001) == 0)
                  : (v25 = 1),
                    v25 && v23 != 347))
              {
                v21 = 0;
                v12 = 1;
              }
              else
              {
                *v15 = v22;
                v12 = 1;
                --v19;
                if (!v22)
                  goto LABEL_63;
              }
LABEL_46:
              v26 = v19 - 1;
              v27 = *(unsigned __int16 **)(*((_QWORD *)this + 11) + 8 * (v19 - 1));
              v28 = v27[8];
              v29 = (v28 - 139) > 0x21 || ((1 << (v28 + 117)) & 0x200000019) == 0;
              if (!v29
                || ((v28 - 28) <= 0x2E
                  ? (v30 = ((1 << (v28 - 28)) & 0x500000000001) == 0)
                  : (v30 = 1),
                    v30 ? (v31 = v28 == 8) : (v31 = 1),
                    v31))
              {
                *((_DWORD *)this + 24) = v26;
                v32 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
                if ((v12 & 1) != 0)
                {
LABEL_64:
                  v8 = (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v11, (swift::Demangle::Node *)v27, (swift::Demangle::Node *)v21, (char *)v18, v32);
                  if (!v20)
                    return (unint64_t)v8;
LABEL_65:
                  swift::Demangle::Node::addChild(v8, v20, this, v33, v34);
                  return (unint64_t)v8;
                }
LABEL_60:
                v8 = (unsigned int *)swift::Demangle::Demangler::createWithChildren(this, v11, (swift::Demangle::Node *)v27, (swift::Demangle::Node *)v18, (char *)v32);
                if (!v20)
                  return (unint64_t)v8;
                goto LABEL_65;
              }
LABEL_63:
              v27 = (unsigned __int16 *)swift::Demangle::Demangler::popContext(this, a2, a3, a4, a5);
              v32 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleIndexAsNode(this);
              if (v12)
                goto LABEL_64;
              goto LABEL_60;
            }
          }
          else
          {
            v18 = 0;
            if (!v17)
              goto LABEL_44;
          }
          if (v16)
          {
            v19 = v16 - 1;
            v20 = *(swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * (v16 - 1));
            if (*((_WORD *)v20 + 8) == 176)
            {
              *v15 = v19;
              if ((v12 & 1) == 0)
              {
                v12 = 0;
                v21 = 0;
                if (v16 == 1)
                  goto LABEL_63;
                goto LABEL_46;
              }
              goto LABEL_30;
            }
            goto LABEL_44;
          }
        }
        else
        {
          v18 = 0;
        }
        v19 = 0;
        v20 = 0;
        if (!v12)
          goto LABEL_45;
        goto LABEL_30;
      default:
        return (unint64_t)v8;
    }
  }
  return 0;
}

void swift::Demangle::NodeFactory::~NodeFactory(swift::Demangle::NodeFactory *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C358BB8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
    *(_BYTE *)(v4 + 48) = 0;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C358BB8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
    *(_BYTE *)(v4 + 48) = 0;
  JUMPOUT(0x20BD2A128);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

swift::Demangle::Context *swift::Demangle::Context::Context(swift::Demangle::Context *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 2400;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_24C358BE0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 568) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_DWORD *)(v2 + 536) = 0;
  *(_QWORD *)this = v2;
  *(_OWORD *)(v2 + 88) = 0u;
  v2 += 88;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 2400;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_24C358BE0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 568) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_DWORD *)(v2 + 536) = 0;
  *(_QWORD *)this = v2;
  *(_OWORD *)(v2 + 88) = 0u;
  v2 += 88;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  return this;
}

void swift::Demangle::Context::~Context(swift::Demangle::Context *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t swift::Demangle::Context::clear(swift::Demangle::Context *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
}

unsigned int *swift::Demangle::Context::demangleSymbolAsNode(swift::Demangle::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength;
  swift::Demangle::NodeFactory *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;

  ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  v7 = *a1;
  if (!ManglingPrefixLength)
    return swift::Demangle::demangleOldSymbolAsNode(a2, a3, v7);
  v13 = 0;
  v8 = swift::Demangle::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v12);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_7;
  }
  if (v13)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return (unsigned int *)v8;
}

unint64_t swift::Demangle::Context::demangleTypeAsNode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;

  v3 = *a1;
  v9 = 0;
  v4 = swift::Demangle::Demangler::demangleType(v3, a2, a3, v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v4;
}

void swift::Demangle::Context::demangleSymbolAsString(swift::Demangle::NodeFactory **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X8>)
{
  int ManglingPrefixLength;
  swift::Demangle::NodeFactory *v11;
  swift::Demangle::Node *v12;
  std::string *p_p;
  uint64_t v14;
  std::string::size_type size;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::string __p;
  std::string *v24;

  ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  v11 = *a1;
  if (!ManglingPrefixLength)
  {
    v12 = (swift::Demangle::Node *)swift::Demangle::demangleOldSymbolAsNode(a2, a3, v11);
    goto LABEL_6;
  }
  v24 = 0;
  v12 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleSymbol((uint64_t)v11, a2, a3, &__p);
  p_p = v24;
  if (v24 != &__p)
  {
    if (v24)
    {
      v14 = 5;
      goto LABEL_12;
    }
LABEL_6:
    if (!v12)
      goto LABEL_13;
    goto LABEL_7;
  }
  v14 = 4;
  p_p = &__p;
LABEL_12:
  (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v14))();
  if (!v12)
  {
LABEL_13:
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v17 = a3 | 7;
        v18 = v17 + 1;
        v19 = operator new(v17 + 1);
        a5[1] = a3;
        a5[2] = v18 | 0x8000000000000000;
        *a5 = v19;
        a5 = v19;
      }
      else
      {
        *((_BYTE *)a5 + 23) = a3;
        if (!a3)
          goto LABEL_28;
      }
      memmove(a5, a2, a3);
LABEL_28:
      *((_BYTE *)a5 + a3) = 0;
      return;
    }
LABEL_38:
    abort();
  }
LABEL_7:
  swift::Demangle::nodeToString(v12, a4, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    *(std::string *)a5 = __p;
    return;
  }
  if (a2)
  {
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_38;
    if (a3 >= 0x17)
    {
      v20 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v20 = a3 | 7;
      v21 = v20 + 1;
      v22 = operator new(v20 + 1);
      a5[1] = a3;
      a5[2] = v21 | 0x8000000000000000;
      *a5 = v22;
      a5 = v22;
    }
    else
    {
      *((_BYTE *)a5 + 23) = a3;
      if (!a3)
      {
LABEL_35:
        *((_BYTE *)a5 + a3) = 0;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          return;
        goto LABEL_36;
      }
    }
    memmove(a5, a2, a3);
    goto LABEL_35;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v16 & 0x80) == 0)
    return;
LABEL_36:
  operator delete(__p.__r_.__value_.__l.__data_);
}

const void **llvm::StringRef::str@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = *this;
  if (!*this)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return this;
  }
  v4 = (size_t)this[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v5 = v4 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4)
      goto LABEL_11;
  }
  this = (const void **)memmove(v2, v3, v4);
LABEL_11:
  *((_BYTE *)v2 + v4) = 0;
  return this;
}

void swift::Demangle::Context::demangleTypeAsString(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  swift::Demangle::Node *v10;
  std::string *p_p;
  uint64_t v12;
  std::string::size_type size;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::string __p;
  std::string *v22;

  v9 = *a1;
  v22 = 0;
  v10 = (swift::Demangle::Node *)swift::Demangle::Demangler::demangleType(v9, (uint64_t)a2, a3, &__p);
  p_p = v22;
  if (v22 == &__p)
  {
    v12 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v12))();
LABEL_6:
  if (!v10)
  {
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_36;
    if (a3 >= 0x17)
    {
      v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v15 = a3 | 7;
      v16 = v15 + 1;
      v17 = operator new(v15 + 1);
      a5[1] = a3;
      a5[2] = v16 | 0x8000000000000000;
      *a5 = v17;
      a5 = v17;
    }
    else
    {
      *((_BYTE *)a5 + 23) = a3;
      if (!a3)
        goto LABEL_26;
    }
    memmove(a5, a2, a3);
LABEL_26:
    *((_BYTE *)a5 + a3) = 0;
    return;
  }
  swift::Demangle::nodeToString(v10, a4, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    *(std::string *)a5 = __p;
    return;
  }
  if (a2)
  {
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v18 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v18 = a3 | 7;
        v19 = v18 + 1;
        v20 = operator new(v18 + 1);
        a5[1] = a3;
        a5[2] = v19 | 0x8000000000000000;
        *a5 = v20;
        a5 = v20;
      }
      else
      {
        *((_BYTE *)a5 + 23) = a3;
        if (!a3)
        {
LABEL_33:
          *((_BYTE *)a5 + a3) = 0;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
            return;
          goto LABEL_34;
        }
      }
      memmove(a5, a2, a3);
      goto LABEL_33;
    }
LABEL_36:
    abort();
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v14 & 0x80) == 0)
    return;
LABEL_34:
  operator delete(__p.__r_.__value_.__l.__data_);
}

BOOL swift::Demangle::Context::isThunkSymbol(uint64_t *a1, char *a2, unint64_t a3)
{
  size_t v3;
  _BYTE *v6;
  size_t v7;
  unint64_t v8;
  _WORD *v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD v22[3];
  _QWORD *v23;

  v3 = a3;
  if (!swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3))
  {
    if (v3 < 2)
      return 0;
    if (*(_WORD *)a2 != 21599)
      return 0;
    v8 = v3 - 2;
    if (v3 - 2 < 2)
      return 0;
    v9 = a2 + 2;
    if (*((_WORD *)a2 + 1) != 28500 && *v9 != 20308)
    {
      if (v8 < 3)
        return 0;
      v10 = *v9 == 16720 && a2[4] == 95;
      if (!v10 && (v8 < 4 || *(_DWORD *)v9 != 1601126736))
        return 0;
    }
    return 1;
  }
  if (a2[v3 - 1] - 48 > 9)
  {
    if (!v3)
      return 0;
  }
  else
  {
    if (!v3)
      return 0;
    v6 = memchr(a2, 46, v3);
    v7 = v3 >= v6 - a2 ? v6 - a2 : v3;
    if (v6)
    {
      if (v6 - a2 != -1)
      {
        v3 = v7;
        if (!v7)
          return 0;
      }
    }
  }
  if (a2[v3 - 1] == 95)
  {
    v11 = v3 - 1;
    if (v3 < v3 - 1)
      v11 = v3;
    if (v11)
    {
      while (a2[v11 - 1] - 48 <= 9)
      {
        if (v11 >= v11 - 1)
          --v11;
        if (!v11)
          goto LABEL_40;
      }
      if (v11 >= 2 && (*(_WORD *)&a2[v11 - 2] == 20820 || *(_WORD *)&a2[v11 - 2] == 22868))
      {
        if (v11 >= v11 - 2)
          v3 = v11 - 2;
        else
          v3 = v11;
      }
    }
  }
LABEL_40:
  if (v3 < 2)
    return 0;
  v12 = &a2[v3];
  if (*(_WORD *)&a2[v3 - 2] != 16724
    && *((_WORD *)v12 - 1) != 24916
    && *((_WORD *)v12 - 1) != 28500
    && *((_WORD *)v12 - 1) != 20308
    && *((_WORD *)v12 - 1) != 21076
    && *((_WORD *)v12 - 1) != 29268
    && *((_WORD *)v12 - 1) != 22356
    && *((_WORD *)v12 - 1) != 17254)
  {
    return 0;
  }
  v13 = *a1;
  v23 = 0;
  v14 = swift::Demangle::Demangler::demangleSymbol(v13, a2, v3, v22);
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
    goto LABEL_53;
  }
  if (v23)
  {
    v16 = 5;
LABEL_53:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  if (v14 && *(_WORD *)(v14 + 16) == 99)
  {
    v17 = *(unsigned __int8 *)(v14 + 18);
    if ((v17 - 1) < 2)
      goto LABEL_60;
    if (v17 == 5 && *(_DWORD *)(v14 + 8))
    {
      v14 = *(_QWORD *)v14;
LABEL_60:
      v18 = *(unsigned __int16 *)(*(_QWORD *)v14 + 16);
      return (v18 - 160) <= 0x29 && ((1 << (v18 + 96)) & 0x31000000C11) != 0
          || v18 == 0;
    }
  }
  return 0;
}

void swift::Demangle::Context::getThunkTarget(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  int v7;
  _BYTE *v8;
  char *v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  std::string::size_type v20;
  void **v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *__p;
  size_t v40;
  unint64_t v41;
  std::string v42;
  const void *v43[2];

  v4 = (char *)a3;
  v43[0] = (const void *)a2;
  if (!swift::Demangle::Context::isThunkSymbol(a1, (char *)a2, a3))
    goto LABEL_81;
  if (!swift::Demangle::getManglingPrefixLength(a2, (unint64_t)v4))
  {
    if ((unint64_t)v4 >= 2)
      v12 = 2;
    else
      v12 = (uint64_t)v4;
    v13 = (char *)(a2 + v12);
    v14 = (unint64_t)&v4[-v12];
    if (v14 < 3)
    {
LABEL_26:
      *((_BYTE *)&v42.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v42, "_T");
      if (v14 >= 2)
        v16 = 2;
      else
        v16 = v14;
      if (!a2)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        __p = 0;
        v40 = 0;
        v41 = 0;
LABEL_51:
        if ((v22 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = v21;
        if ((v22 & 0x80u) == 0)
          v26 = v22;
        else
          v26 = v20;
        v27 = std::string::append(&v42, (const std::string::value_type *)p_p, v26);
        v28 = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)a4 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        *(_QWORD *)(a4 + 16) = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v41) < 0)
          operator delete(__p);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        return;
      }
      v17 = v14 - v16;
      if (v14 - v16 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v17 >= 0x17)
        {
          v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v23 = v17 | 7;
          v24 = v23 + 1;
          v18 = operator new(v23 + 1);
          v40 = v17;
          v41 = v24 | 0x8000000000000000;
          __p = v18;
        }
        else
        {
          HIBYTE(v41) = v14 - v16;
          v18 = &__p;
          if (v14 < 3)
            goto LABEL_50;
        }
        memmove(v18, &v13[v16], v17);
LABEL_50:
        *((_BYTE *)v18 + v17) = 0;
        v22 = HIBYTE(v41);
        v21 = (void **)__p;
        v20 = v40;
        goto LABEL_51;
      }
LABEL_96:
      abort();
    }
    if (*(_WORD *)v13 == 16720 && v13[2] == 95)
    {
      v34 = 3;
      v35 = v14 - 3;
      if (v14 - 3 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_96;
      if (v35 < 0x17)
      {
        *(_BYTE *)(a4 + 23) = v35;
        if (v14 < 4)
          goto LABEL_95;
        goto LABEL_94;
      }
    }
    else
    {
      if (v14 < 4 || *(_DWORD *)v13 != 1601126736)
        goto LABEL_26;
      v34 = 4;
      v35 = v14 - 4;
      if (v14 - 4 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_96;
      if (v35 < 0x17)
      {
        *(_BYTE *)(a4 + 23) = v35;
        if (v14 < 5)
          goto LABEL_95;
        goto LABEL_94;
      }
    }
    v36 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v36 = v35 | 7;
    v37 = v36 + 1;
    v38 = operator new(v36 + 1);
    *(_QWORD *)(a4 + 8) = v35;
    *(_QWORD *)(a4 + 16) = v37 | 0x8000000000000000;
    *(_QWORD *)a4 = v38;
    a4 = (uint64_t)v38;
LABEL_94:
    memmove((void *)a4, &v13[v34], v35);
LABEL_95:
    *(_BYTE *)(a4 + v35) = 0;
    return;
  }
  v7 = v4[a2 - 1];
  if ((v7 - 48) <= 9 && v4)
  {
    v8 = memchr((void *)a2, 46, (size_t)v4);
    v9 = v4 >= &v8[-a2] ? &v8[-a2] : v4;
    v10 = &v8[-a2] == (_BYTE *)-1 || v8 == 0;
    v11 = v10 ? v4 : v9;
    if (v11 != v4)
      goto LABEL_81;
  }
  if (!v4)
    goto LABEL_68;
  if (v4 >= v4 - 1)
    v19 = (unint64_t)(v4 - 1);
  else
    v19 = (unint64_t)v4;
  if (v19 && v7 == 95)
  {
    while (*(unsigned __int8 *)(a2 + v19 - 1) - 48 <= 9)
    {
      if (v19 >= v19 - 1)
        --v19;
      if (!v19)
        goto LABEL_67;
    }
    if (v19 >= 2 && (*(_WORD *)(a2 + v19 - 2) == 20820 || *(_WORD *)(a2 + v19 - 2) == 22868))
    {
      if (v19 >= v19 - 2)
        v4 = (char *)(v19 - 2);
      else
        v4 = (char *)v19;
    }
  }
LABEL_67:
  v43[1] = v4;
  if ((unint64_t)v4 < 2)
    goto LABEL_68;
  v30 = &v4[a2];
  if (*(_WORD *)&v4[a2 - 2] == 21076 || *((_WORD *)v30 - 1) == 29268 || *((_WORD *)v30 - 1) == 22356)
  {
LABEL_81:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  if (*((_WORD *)v30 - 1) != 17254)
  {
LABEL_68:
    v29 = (std::string::size_type)(v4 - 2);
    if (v4 < v4 - 2)
      v29 = (std::string::size_type)v4;
    v42.__r_.__value_.__r.__words[0] = a2;
    v42.__r_.__value_.__l.__size_ = v29;
    llvm::StringRef::str((const void **)&v42.__r_.__value_.__l.__data_, a4);
    return;
  }
  llvm::StringRef::str(v43, a4);
  v31 = *(unsigned __int8 *)(a4 + 23);
  v32 = (v31 & 0x80u) != 0;
  if ((v31 & 0x80u) != 0)
    v31 = *(_QWORD *)(a4 + 8);
  if (v32)
    v33 = *(_QWORD *)a4;
  else
    v33 = a4;
  *(_BYTE *)(v31 + v33 - 1) = 99;
}

uint64_t swift::Demangle::Context::hasSwiftCallingConvention(swift::Demangle::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength;
  swift::Demangle::NodeFactory *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  _QWORD v16[3];
  _QWORD *v17;

  ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  v7 = *a1;
  if (!ManglingPrefixLength)
  {
    v8 = (unint64_t)swift::Demangle::demangleOldSymbolAsNode(a2, a3, v7);
    goto LABEL_6;
  }
  v17 = 0;
  v8 = swift::Demangle::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v16);
  v9 = v17;
  if (v17 != v16)
  {
    if (v17)
    {
      v10 = 5;
      goto LABEL_9;
    }
LABEL_6:
    if (!v8)
      return 0;
    goto LABEL_10;
  }
  v10 = 4;
  v9 = v16;
LABEL_9:
  (*(void (**)(void))(*v9 + 8 * v10))();
  if (!v8)
    return 0;
LABEL_10:
  if (*(_WORD *)(v8 + 16) != 99)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 18);
  if ((v11 - 1) < 2)
    goto LABEL_15;
  if (v11 != 5 || !*(_DWORD *)(v8 + 8))
    return 0;
  v8 = *(_QWORD *)v8;
LABEL_15:
  result = 0;
  v13 = *(unsigned __int16 *)(*(_QWORD *)v8 + 16);
  if (v13 <= 0x86)
  {
    v15 = v13 > 0xA || ((1 << v13) & 0x640) == 0;
    if (v15 && v13 != 89)
      return 1;
  }
  else
  {
    v14 = v13 - 135 > 0x3F || ((1 << (v13 + 121)) & 0x8000000020000001) == 0;
    if (v14 && v13 != 238 && v13 != 252)
      return 1;
  }
  return result;
}

uint64_t swift::Demangle::Context::getModuleName@<X0>(swift::Demangle::Node **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int ManglingPrefixLength;
  swift::Demangle::NodeFactory *v9;
  swift::Demangle::Node *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned __int16 *v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;

  ManglingPrefixLength = swift::Demangle::getManglingPrefixLength((uint64_t)a2, a3);
  v9 = *a1;
  if (!ManglingPrefixLength)
  {
    result = (uint64_t)swift::Demangle::demangleOldSymbolAsNode(a2, a3, v9);
    v11 = result;
    goto LABEL_6;
  }
  v26 = 0;
  v11 = swift::Demangle::Demangler::demangleSymbol((uint64_t)v9, a2, a3, v25);
  result = (uint64_t)v26;
  if (v26 != v25)
  {
    if (v26)
    {
      v13 = 5;
      goto LABEL_9;
    }
LABEL_6:
    if (v11)
      goto LABEL_15;
    goto LABEL_10;
  }
  v13 = 4;
  result = (uint64_t)v25;
LABEL_9:
  result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v13))();
  if (!v11)
  {
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  while (1)
  {
LABEL_15:
    v16 = (unsigned __int16 *)(v11 + 16);
    v15 = *(unsigned __int16 *)(v11 + 16);
    if (v15 > 0xE7)
    {
      if (v15 == 232 || v15 == 236)
        goto LABEL_12;
      goto LABEL_27;
    }
    if (v15 == 99)
    {
      v17 = *(unsigned __int8 *)(v11 + 18);
      v18 = (unint64_t *)v11;
      if ((v17 - 1) >= 2)
      {
        if (v17 == 5)
        {
          v19 = *(_QWORD *)v11;
          v18 = *(unint64_t **)v11;
          goto LABEL_35;
        }
        v18 = 0;
      }
      if (v17 == 1)
      {
        v16 = (unsigned __int16 *)(v11 + 8);
        goto LABEL_39;
      }
      if (v17 == 2)
        goto LABEL_39;
      if (v17 != 5)
      {
        v16 = 0;
LABEL_39:
        while (v18 != (unint64_t *)v16)
        {
          v11 = *v18;
          result = swift::Demangle::isFunctionAttr(*(unsigned __int16 *)(*v18 + 16));
          if ((result & 1) == 0)
            goto LABEL_14;
          ++v18;
        }
        goto LABEL_10;
      }
      v19 = *(_QWORD *)v11;
LABEL_35:
      v16 = (unsigned __int16 *)(v19 + 8 * *(unsigned int *)(v11 + 8));
      goto LABEL_39;
    }
    if (v15 == 153)
      break;
LABEL_27:
    if (swift::Demangle::isSpecialized((swift::Demangle *)v11, v10))
    {
      result = swift::Demangle::getUnspecialized(v11, *a1, (uint64_t)v25);
      if (LODWORD(v25[0]))
        goto LABEL_10;
      v11 = (unint64_t)v26;
      goto LABEL_14;
    }
    result = swift::Demangle::isContext(*v16);
    if (!(_DWORD)result)
      goto LABEL_10;
LABEL_12:
    v14 = *(unsigned __int8 *)(v11 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*(_DWORD *)(v11 + 8))
        goto LABEL_10;
      v11 = *(_QWORD *)v11;
    }
    v11 = *(_QWORD *)v11;
LABEL_14:
    if (!v11)
      goto LABEL_10;
  }
  v20 = *(const void **)v11;
  if (!*(_QWORD *)v11)
    goto LABEL_10;
  v21 = *(_QWORD *)(v11 + 8);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v22 = v21 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    a4[1] = v21;
    a4[2] = v23 | 0x8000000000000000;
    *a4 = v24;
    a4 = v24;
    goto LABEL_50;
  }
  *((_BYTE *)a4 + 23) = v21;
  if (v21)
LABEL_50:
    result = (uint64_t)memmove(a4, v20, v21);
  *((_BYTE *)a4 + v21) = 0;
  return result;
}

uint64_t swift::Demangle::demangleSymbolAsString@<X0>(_WORD *a1@<X0>, unint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  swift::Demangle::NodeFactory *v10;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 2400;
  *(_QWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 0;
  *(_QWORD *)v8 = &off_24C358BE0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 568) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_DWORD *)(v8 + 536) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  v10 = (swift::Demangle::NodeFactory *)v8;
  swift::Demangle::Context::demangleSymbolAsString(&v10, a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t swift::Demangle::demangleTypeAsString@<X0>(const void *a1@<X0>, size_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v10;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 2400;
  *(_QWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 0;
  *(_QWORD *)v8 = &off_24C358BE0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 568) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_DWORD *)(v8 + 536) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  v10 = v8;
  swift::Demangle::Context::demangleTypeAsString(&v10, a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

BOOL swift::Mangle::isNonAscii(char *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;

  if (!a2)
    return 0;
  v2 = a2 - 1;
  do
  {
    v3 = *a1++;
    v4 = v3 < 0;
    if (v3 < 0)
      break;
  }
  while (v2--);
  return v4;
}

uint64_t swift::Mangle::needsPunycodeEncoding(_BYTE *a1, uint64_t a2)
{
  int v4;

  if (!a2)
    return 0;
  while (1)
  {
    if ((*a1 - 48) >= 0xAu && ((*a1 & 0xDF) - 65) >= 0x1Au)
    {
      v4 = *a1;
      if (v4 != 95 && v4 != 36)
        break;
    }
    ++a1;
    if (!--a2)
      return 0;
  }
  return 1;
}

uint64_t swift::Mangle::translateOperatorChar(swift::Mangle *this)
{
  int v2;
  uint64_t result;

  v2 = (_DWORD)this - 33;
  result = 97;
  switch(v2)
  {
    case 0:
      result = 110;
      break;
    case 4:
      result = 114;
      break;
    case 5:
      return result;
    case 9:
      result = 109;
      break;
    case 10:
      result = 112;
      break;
    case 12:
      result = 115;
      break;
    case 13:
      result = 122;
      break;
    case 14:
      result = 100;
      break;
    case 27:
      result = 108;
      break;
    case 28:
      result = 101;
      break;
    case 29:
      result = 103;
      break;
    case 30:
      result = 113;
      break;
    case 31:
      result = 99;
      break;
    case 61:
      result = 120;
      break;
    case 91:
      result = 111;
      break;
    case 93:
      result = 116;
      break;
    default:
      result = (uint64_t)this;
      break;
  }
  return result;
}

void swift::Mangle::translateOperator(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  unsigned int v6;
  std::string::value_type v7;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    v3 = a2;
    do
    {
      v6 = *a1++;
      v7 = swift::Mangle::translateOperatorChar((swift::Mangle *)v6);
      std::string::push_back(a3, v7);
      --v3;
    }
    while (v3);
  }
}

_QWORD *swift::Mangle::getStandardTypeSubst@<X0>(_QWORD *result@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  const char *v8;
  const char *v17;
  char v18;

  v6 = result;
  switch(a2)
  {
    case 3uLL:
      result = (_QWORD *)memcmp(result, "Set", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Int", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "i";
      }
      else
      {
        v8 = "h";
      }
      goto LABEL_167;
    case 4uLL:
      result = (_QWORD *)memcmp(result, "Bool", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "UInt", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "u";
      }
      else
      {
        v8 = "b";
      }
      goto LABEL_167;
    case 5uLL:
      result = (_QWORD *)memcmp(result, "Array", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Float", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "Range", a2);
          if ((_DWORD)result)
            goto LABEL_97;
          v8 = "n";
        }
        else
        {
          v8 = "f";
        }
      }
      else
      {
        v8 = "a";
      }
      goto LABEL_167;
    case 6uLL:
      result = (_QWORD *)memcmp(result, "Double", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "String", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "S";
      }
      else
      {
        v8 = "d";
      }
      goto LABEL_167;
    case 7uLL:
      result = (_QWORD *)memcmp(result, "Numeric", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "j";
      goto LABEL_167;
    case 8uLL:
      result = (_QWORD *)memcmp(result, "Optional", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Hashable", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "Sequence", a2);
          if ((_DWORD)result)
            goto LABEL_97;
          v8 = "T";
        }
        else
        {
          v8 = "H";
        }
      }
      else
      {
        v8 = "q";
      }
      goto LABEL_167;
    case 9uLL:
      result = (_QWORD *)memcmp(result, "Character", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Substring", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "Encodable", a2);
          if ((_DWORD)result)
          {
            if (*v6 == 0x6C6261646F636544 && *((_BYTE *)v6 + 8) == 101)
            {
              v8 = "e";
            }
            else
            {
              result = (_QWORD *)memcmp(v6, "Equatable", a2);
              if ((_DWORD)result)
                goto LABEL_97;
              v8 = "Q";
            }
          }
          else
          {
            v8 = "E";
          }
        }
        else
        {
          v8 = "s";
        }
      }
      else
      {
        v8 = "J";
      }
      goto LABEL_167;
    case 0xAuLL:
      result = (_QWORD *)memcmp(result, "Dictionary", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "Comparable", a2);
        if ((_DWORD)result)
        {
          if (*v6 == 0x697463656C6C6F43 && *((_WORD *)v6 + 4) == 28271)
          {
            v8 = "l";
          }
          else
          {
            result = (_QWORD *)memcmp(v6, "Strideable", a2);
            if ((_DWORD)result)
              goto LABEL_97;
            v8 = "x";
          }
        }
        else
        {
          v8 = "L";
        }
      }
      else
      {
        v8 = "D";
      }
      goto LABEL_167;
    case 0xBuLL:
      result = (_QWORD *)memcmp(result, "ClosedRange", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "N";
      goto LABEL_167;
    case 0xDuLL:
      result = (_QWORD *)memcmp(result, "UnsafePointer", a2);
      if (!(_DWORD)result)
      {
        v8 = "P";
        goto LABEL_167;
      }
      result = (_QWORD *)memcmp(v6, "FloatingPoint", a2);
      if (!(_DWORD)result)
      {
        v8 = "F";
        goto LABEL_167;
      }
      result = (_QWORD *)memcmp(v6, "SignedInteger", a2);
      if (!(_DWORD)result)
      {
        v8 = "Z";
        goto LABEL_167;
      }
      if (*v6 == 0x6E497972616E6942 && *(_QWORD *)((char *)v6 + 5) == 0x72656765746E4979)
      {
        v8 = "z";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0xEuLL:
      result = (_QWORD *)memcmp(result, "DefaultIndices", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "StringProtocol", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "y";
      }
      else
      {
        v8 = "I";
      }
      goto LABEL_167;
    case 0xFuLL:
      result = (_QWORD *)memcmp(result, "UnsignedInteger", a2);
      if (!(_DWORD)result)
      {
        v8 = "U";
        goto LABEL_167;
      }
      if (*v6 == 0x70784565676E6152 && *(_QWORD *)((char *)v6 + 7) == 0x6E6F697373657270)
      {
        v8 = "X";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0x10uLL:
      result = (_QWORD *)memcmp(result, "ObjectIdentifier", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "UnsafeRawPointer", a2);
        if ((_DWORD)result)
        {
          result = (_QWORD *)memcmp(v6, "IteratorProtocol", a2);
          if ((_DWORD)result)
          {
            result = (_QWORD *)memcmp(v6, "RawRepresentable", a2);
            if ((_DWORD)result)
              goto LABEL_97;
            v8 = "Y";
          }
          else
          {
            v8 = "t";
          }
        }
        else
        {
          v8 = "V";
        }
      }
      else
      {
        v8 = "O";
      }
      goto LABEL_167;
    case 0x11uLL:
      result = (_QWORD *)memcmp(result, "MutableCollection", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "M";
      goto LABEL_167;
    case 0x13uLL:
      result = (_QWORD *)memcmp(result, "UnsafeBufferPointer", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "BinaryFloatingPoint", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "B";
      }
      else
      {
        v8 = "R";
      }
      goto LABEL_167;
    case 0x14uLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutablePointer", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "p";
      goto LABEL_167;
    case 0x15uLL:
      result = (_QWORD *)memcmp(result, "RandomNumberGenerator", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "G";
      goto LABEL_167;
    case 0x16uLL:
      result = (_QWORD *)memcmp(result, "UnsafeRawBufferPointer", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "RandomAccessCollection", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "k";
      }
      else
      {
        v8 = "W";
      }
      goto LABEL_167;
    case 0x17uLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutableRawPointer", a2);
      if ((_DWORD)result)
      {
        result = (_QWORD *)memcmp(v6, "BidirectionalCollection", a2);
        if ((_DWORD)result)
          goto LABEL_97;
        v8 = "K";
      }
      else
      {
        v8 = "v";
      }
      goto LABEL_167;
    case 0x1AuLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutableBufferPointer", a2);
      if (!(_DWORD)result)
      {
        v8 = "r";
        goto LABEL_167;
      }
      result = (_QWORD *)memcmp(v6, "RangeReplaceableCollection", a2);
      if (!(_DWORD)result)
      {
        v8 = "m";
LABEL_167:
        *(_QWORD *)a4 = v8;
        *(_QWORD *)(a4 + 8) = 1;
        v18 = 1;
        goto LABEL_168;
      }
LABEL_97:
      if (a3)
      {
        switch(a2)
        {
          case 4uLL:
            result = (_QWORD *)memcmp(v6, "Task", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cT";
            goto LABEL_171;
          case 5uLL:
            if (*(_DWORD *)v6 != 1869898561 || *((_BYTE *)v6 + 4) != 114)
              goto LABEL_150;
            v17 = "cA";
            goto LABEL_171;
          case 8uLL:
            result = (_QWORD *)memcmp(v6, "Executor", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cF";
            goto LABEL_171;
          case 9uLL:
            result = (_QWORD *)memcmp(v6, "TaskGroup", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "MainActor", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cM";
            }
            else
            {
              v17 = "cG";
            }
            goto LABEL_171;
          case 0xAuLL:
            result = (_QWORD *)memcmp(v6, "UnownedJob", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cJ";
            goto LABEL_171;
          case 0xBuLL:
            result = (_QWORD *)memcmp(v6, "AsyncStream", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cS";
            goto LABEL_171;
          case 0xCuLL:
            result = (_QWORD *)memcmp(v6, "TaskExecutor", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "TaskPriority", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cP";
            }
            else
            {
              v17 = "ch";
            }
            goto LABEL_171;
          case 0xDuLL:
            result = (_QWORD *)memcmp(v6, "AsyncSequence", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "ci";
            goto LABEL_171;
          case 0xEuLL:
            result = (_QWORD *)memcmp(v6, "SerialExecutor", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cf";
            goto LABEL_171;
          case 0x11uLL:
            result = (_QWORD *)memcmp(v6, "CancellationError", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "ThrowingTaskGroup", a2);
              if ((_DWORD)result)
              {
                result = (_QWORD *)memcmp(v6, "UnsafeCurrentTask", a2);
                if ((_DWORD)result)
                  goto LABEL_150;
                v17 = "ct";
              }
              else
              {
                v17 = "cg";
              }
            }
            else
            {
              v17 = "cE";
            }
            goto LABEL_171;
          case 0x12uLL:
            result = (_QWORD *)memcmp(v6, "UnsafeContinuation", a2);
            if ((_DWORD)result)
              goto LABEL_150;
            v17 = "cc";
            goto LABEL_171;
          case 0x13uLL:
            result = (_QWORD *)memcmp(v6, "CheckedContinuation", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "AsyncThrowingStream", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cs";
            }
            else
            {
              v17 = "cC";
            }
            goto LABEL_171;
          case 0x15uLL:
            result = (_QWORD *)memcmp(v6, "UnownedSerialExecutor", a2);
            if ((_DWORD)result)
            {
              result = (_QWORD *)memcmp(v6, "AsyncIteratorProtocol", a2);
              if ((_DWORD)result)
                goto LABEL_150;
              v17 = "cI";
            }
            else
            {
              v17 = "ce";
            }
LABEL_171:
            *(_QWORD *)a4 = v17;
            *(_QWORD *)(a4 + 8) = 2;
            v18 = 1;
            break;
          default:
            goto LABEL_150;
        }
      }
      else
      {
LABEL_150:
        v18 = 0;
        *(_BYTE *)a4 = 0;
      }
LABEL_168:
      *(_BYTE *)(a4 + 16) = v18;
      return result;
    case 0x1DuLL:
      result = (_QWORD *)memcmp(result, "UnsafeMutableRawBufferPointer", a2);
      if ((_DWORD)result)
        goto LABEL_97;
      v8 = "w";
      goto LABEL_167;
    case 0x21uLL:
      if (*result != 0x656C65726F747541
        || result[1] != 0x736E55676E697361
        || result[2] != 0x626174754D656661
        || result[3] != 0x65746E696F50656CLL
        || *((_BYTE *)result + 32) != 114)
      {
        goto LABEL_97;
      }
      v18 = 1;
      *(_QWORD *)a4 = "A";
      *(_QWORD *)(a4 + 8) = 1;
      goto LABEL_168;
    default:
      goto LABEL_97;
  }
}

const char *swift::Demangle::getNodeKindString(unsigned int a1)
{
  if (a1 > 0x162)
    return "Demangle::Node::Kind::???";
  else
    return (&off_24C358CB8)[(__int16)a1];
}

double swift::Demangle::getNodeTreeAsString@<D0>(swift::Demangle *this@<X0>, std::string *a2@<X8>)
{
  double result;
  std::string v5;

  memset(&v5, 0, sizeof(v5));
  printNode(&v5, this, 0);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *a2 = v5;
  return result;
}

void printNode(std::string *a1, const swift::Demangle::Node *a2, int a3)
{
  int i;
  const std::string::value_type *v7;
  const char *NodeKindString;
  size_t v9;
  int v10;
  int v11;
  const std::string::value_type *v12;
  const std::string::value_type *v13;
  unsigned int v14;
  const swift::Demangle::Node *v15;

  for (i = 2 * a3; i; --i)
    std::string::push_back(a1, 32);
  if (!a2)
  {
    std::string::append(a1, "<<NULL>>", 8uLL);
    return;
  }
  std::string::append(a1, "kind=", 5uLL);
  v7 = (char *)a2 + 16;
  NodeKindString = swift::Demangle::getNodeKindString(*((unsigned __int16 *)a2 + 8));
  v9 = strlen(NodeKindString);
  std::string::append(a1, NodeKindString, v9);
  v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    std::string::append(a1, ", text=\"", 8uLL);
    std::string::append(a1, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    std::string::push_back(a1, 34);
    v10 = *((unsigned __int8 *)a2 + 18);
  }
  if (v10 == 4)
  {
    std::string::append(a1, ", index=", 8uLL);
    swift::Demangle::DemanglerPrinter::operator<<(a1, *(_QWORD *)a2);
  }
  std::string::push_back(a1, 10);
  v11 = *((unsigned __int8 *)a2 + 18);
  v12 = (const std::string::value_type *)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      v13 = *(const std::string::value_type **)a2;
      v12 = *(const std::string::value_type **)a2;
      goto LABEL_17;
    }
    v12 = 0;
  }
  switch(v11)
  {
    case 1:
      v7 = (char *)a2 + 8;
LABEL_20:
      if (v12 == v7)
        return;
      goto LABEL_21;
    case 2:
      goto LABEL_20;
    case 5:
      v13 = *(const std::string::value_type **)a2;
LABEL_17:
      v7 = &v13[8 * *((unsigned int *)a2 + 2)];
      if (v12 == v7)
        return;
      goto LABEL_21;
  }
  v7 = 0;
  if (!v12)
    return;
LABEL_21:
  v14 = a3 + 1;
  do
  {
    v15 = *(const swift::Demangle::Node **)v12;
    v12 += 8;
    printNode((swift::Demangle::DemanglerPrinter *)a1, v15, v14);
  }
  while (v12 != v7);
}

void swift::Demangle::Node::dump(swift::Demangle::Node *this)
{
  std::string *p_p;
  std::string __p;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  printNode(&v3, this, 0);
  __p = v3;
  if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v3.__r_.__value_.__r.__words[0];
  fputs((const char *)p_p, (FILE *)*MEMORY[0x24BDAC8D8]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t swift::Demangle::Demangler::dump(swift::Demangle::Demangler *this)
{
  FILE **v2;
  uint64_t v3;
  const swift::Demangle::Node *v4;
  std::string *p_p;
  uint64_t v6;
  const swift::Demangle::Node *v7;
  std::string *v8;
  std::string __p;
  std::string v11;

  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  if (*((_DWORD *)this + 28))
  {
    v3 = 0;
    do
    {
      fprintf(*v2, "Substitution[%c]:\n", v3 + 65);
      v4 = *(const swift::Demangle::Node **)(*((_QWORD *)this + 13) + 8 * v3);
      memset(&v11, 0, sizeof(v11));
      printNode(&v11, v4, 0);
      __p = v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)v11.__r_.__value_.__r.__words[0];
      fputs((const char *)p_p, *v2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      fputc(10, *v2);
      ++v3;
    }
    while (*((_DWORD *)this + 28) > v3);
  }
  if (*((_DWORD *)this + 24))
  {
    v6 = 0;
    do
    {
      fprintf(*v2, "NodeStack[%u]:\n", v6);
      v7 = *(const swift::Demangle::Node **)(*((_QWORD *)this + 11) + 8 * v6);
      memset(&v11, 0, sizeof(v11));
      printNode(&v11, v7, 0);
      __p = v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &__p;
      else
        v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
      fputs((const char *)v8, *v2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      fputc(10, *v2);
      ++v6;
    }
    while (*((_DWORD *)this + 24) > v6);
  }
  return fprintf(*v2, "Position = %zd:\n%.*s\n%*s\n", *((_QWORD *)this + 9), *((_QWORD *)this + 8), *((const char **)this + 7), *((_QWORD *)this + 9) + 1, "^");
}

std::string *swift::Demangle::DemanglerPrinter::operator<<(std::string *a1, uint64_t a2)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

{
  char __str[32];

  snprintf(__str, 0x20uLL, "%lld", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *swift::Demangle::DemanglerPrinter::writeHex(std::string *a1, uint64_t a2)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%llX", a2);
  std::string::append(a1, __str);
  return a1;
}

double swift::Demangle::genericParameterName@<D0>(swift::Demangle *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  BOOL v6;
  double result;
  std::string v8;
  char __str[32];

  memset(&v8, 0, sizeof(v8));
  do
  {
    std::string::push_back(&v8, a2 % 0x1A + 65);
    v6 = a2 > 0x19;
    a2 /= 0x1AuLL;
  }
  while (v6);
  if (this)
  {
    snprintf(__str, 0x20uLL, "%llu", this);
    std::string::append(&v8, __str);
  }
  result = *(double *)&v8.__r_.__value_.__l.__data_;
  *a3 = v8;
  return result;
}

uint64_t **matchSequenceOfKinds(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *i;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  if (result)
  {
    v2 = ((uint64_t)(a2[1] - *a2) >> 4) + 1;
    for (i = (unint64_t *)(*a2 + 8); ; i += 2)
    {
      if (!--v2)
        return result;
      v4 = *((unsigned __int16 *)i - 4);
      v5 = *i;
      v6 = *((unsigned __int8 *)result + 18);
      v7 = v6 - 1;
      if ((_DWORD)v6 != 1)
      {
        if ((_DWORD)v6 == 5)
        {
          if (*((unsigned int *)result + 2) <= v5)
            return 0;
          goto LABEL_11;
        }
        if ((_DWORD)v6 != 2)
          return 0;
        v6 = 2;
      }
      if (v6 <= v5)
        return 0;
LABEL_11:
      if (v7 >= 2)
        result = (uint64_t **)*result;
      result = (uint64_t **)result[v5];
      if (!result)
        return result;
      if (*((unsigned __int16 *)result + 8) != v4)
        return 0;
    }
  }
  return result;
}

void swift::Demangle::keyPathSourceString(swift::Demangle *this@<X0>, const char *a2@<X1>, char *a3@<X8>)
{
  swift::Demangle::NodeFactory **v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  int v18;
  int v19;
  unsigned int *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t **v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t **v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t **v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t **v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t **v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  int v56;
  uint64_t *v57;
  int v58;
  _QWORD *v59;
  _OWORD *v60;
  __int128 v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string *v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string::size_type size;
  BOOL v72;
  std::string *p_p;
  std::string::size_type v74;
  int v75;
  size_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  std::string *v81;
  char *v82;
  char *v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  void **v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  char *v93;
  __int128 v94;
  std::string::size_type v95;
  const void *v96;
  std::string *p_dst;
  uint64_t v98;
  uint64_t v99;
  std::string *v100;
  std::string::size_type v101;
  char *v102;
  __int128 v103;
  const std::string::value_type *v104;
  std::string::size_type v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  std::string::size_type v113;
  std::string *v114;
  std::string::size_type v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t *v121;
  int v122;
  uint64_t *v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  int v130;
  uint64_t *v131;
  int v132;
  _QWORD *v133;
  std::string *v134;
  std::string *v135;
  std::string *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  __int128 v143;
  char *v144;
  std::string *v145;
  char *v146;
  __int128 v147;
  char *v148;
  std::string v149;
  std::string __dst;
  std::string v151;
  std::string __p;
  void **v153;
  void *v154;
  char *v155;
  char *v156;
  std::string v157;
  char v158[8];
  std::string::value_type *v159;
  std::string::size_type v160;
  char v161;

  v161 = 3;
  LODWORD(v159) = 2112095;
  v6 = (swift::Demangle::NodeFactory **)swift::Demangle::Context::Context((swift::Demangle::Context *)v158);
  v7 = swift::Demangle::Context::demangleSymbolAsNode(v6, this, (unint64_t)a2);
  if (!v7)
    goto LABEL_33;
  v8 = *((unsigned __int8 *)v7 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !v7[2])
      goto LABEL_33;
    v7 = *(unsigned int **)v7;
  }
  v9 = *(unsigned int **)v7;
  if (*(_WORD *)(*(_QWORD *)v7 + 16) != 131)
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v9 + 18);
  if ((v10 - 1) < 2)
    goto LABEL_11;
  if (v10 == 5 && v9[2])
  {
    v9 = *(unsigned int **)v9;
LABEL_11:
    v11 = *(unsigned int **)v9;
    goto LABEL_13;
  }
  v11 = 0;
LABEL_13:
  v12 = *((unsigned __int16 *)v11 + 8);
  if (v12 == 254)
  {
    v16 = *((unsigned __int8 *)v11 + 18);
    if (v16 != 2)
    {
      if (v16 != 5 || v11[2] < 2)
        goto LABEL_33;
      v11 = *(unsigned int **)v11;
    }
    v17 = (uint64_t *)*((_QWORD *)v11 + 1);
    if (v17)
    {
      v18 = *((unsigned __int16 *)v17 + 8);
      if (v18 == 101)
        goto LABEL_32;
      if (v18 == 176)
      {
        v19 = *((unsigned __int8 *)v17 + 18);
        if (v19 != 2)
        {
          if (v19 != 5 || *((_DWORD *)v17 + 2) < 2u)
            goto LABEL_33;
          v17 = (uint64_t *)*v17;
        }
        v17 = (uint64_t *)v17[1];
        if (v17)
        {
          if (*((_WORD *)v17 + 8) == 101)
          {
LABEL_32:
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
            std::string::basic_string<llvm::StringRef,0>(a3, (uint64_t)&v157);
            goto LABEL_34;
          }
        }
      }
    }
LABEL_33:
    *(_QWORD *)a3 = 0;
    a3[23] = 0;
    goto LABEL_34;
  }
  if (v12 != 220)
    goto LABEL_33;
  *((_BYTE *)&v157.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v157, "subscript(");
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v153 = &v154;
  v13 = (unsigned __int16 *)operator new(0x50uLL);
  *v13 = 232;
  *((_QWORD *)v13 + 1) = 2;
  v13[8] = 82;
  *((_QWORD *)v13 + 3) = 0;
  v13[16] = 3;
  *((_QWORD *)v13 + 5) = 0;
  v13[24] = 232;
  *((_QWORD *)v13 + 7) = 0;
  v13[32] = 223;
  *((_QWORD *)v13 + 9) = 0;
  v14 = *((unsigned __int8 *)v11 + 18);
  v15 = v14 - 1;
  if ((_DWORD)v14 != 1)
  {
    if ((_DWORD)v14 == 5)
    {
      v14 = v11[2];
    }
    else
    {
      if ((_DWORD)v14 != 2)
        goto LABEL_87;
      v14 = 2;
    }
  }
  if (v14 > 2)
  {
    v20 = v11;
    if (v15 >= 2)
      v20 = *(unsigned int **)v11;
    v21 = (uint64_t *)*((_QWORD *)v20 + 2);
    if (v21)
    {
      if (*((_WORD *)v21 + 8) == 232)
      {
        v22 = *((_QWORD *)v13 + 3);
        v23 = *((unsigned __int8 *)v21 + 18);
        v24 = v23 - 1;
        if ((_DWORD)v23 != 1)
        {
          if ((_DWORD)v23 == 2)
          {
            v23 = 2;
          }
          else
          {
            if ((_DWORD)v23 != 5)
              goto LABEL_87;
            v23 = *((unsigned int *)v21 + 2);
          }
        }
        if (v23 > v22)
        {
          if (v24 >= 2)
            v21 = (uint64_t *)*v21;
          v25 = (uint64_t **)v21[v22];
          if (v25)
          {
            if (*((unsigned __int16 *)v25 + 8) == v13[8])
            {
              v26 = *((_QWORD *)v13 + 5);
              v27 = *((unsigned __int8 *)v25 + 18);
              v28 = v27 - 1;
              if ((_DWORD)v27 != 1)
              {
                if ((_DWORD)v27 == 2)
                {
                  v27 = 2;
                }
                else
                {
                  if ((_DWORD)v27 != 5)
                    goto LABEL_87;
                  v27 = *((unsigned int *)v25 + 2);
                }
              }
              if (v27 > v26)
              {
                if (v28 >= 2)
                  v25 = (uint64_t **)*v25;
                v29 = (uint64_t **)v25[v26];
                if (v29)
                {
                  if (*((unsigned __int16 *)v29 + 8) == v13[16])
                  {
                    v30 = *((_QWORD *)v13 + 7);
                    v31 = *((unsigned __int8 *)v29 + 18);
                    v32 = v31 - 1;
                    if ((_DWORD)v31 != 1)
                    {
                      if ((_DWORD)v31 == 2)
                      {
                        v31 = 2;
                      }
                      else
                      {
                        if ((_DWORD)v31 != 5)
                          goto LABEL_87;
                        v31 = *((unsigned int *)v29 + 2);
                      }
                    }
                    if (v31 > v30)
                    {
                      if (v32 >= 2)
                        v29 = (uint64_t **)*v29;
                      v33 = (uint64_t **)v29[v30];
                      if (v33)
                      {
                        if (*((unsigned __int16 *)v33 + 8) == v13[24])
                        {
                          v34 = *((_QWORD *)v13 + 9);
                          v35 = *((unsigned __int8 *)v33 + 18);
                          v36 = v35 - 1;
                          if ((_DWORD)v35 != 1)
                          {
                            if ((_DWORD)v35 == 2)
                            {
                              v35 = 2;
                            }
                            else
                            {
                              if ((_DWORD)v35 != 5)
                                goto LABEL_87;
                              v35 = *((unsigned int *)v33 + 2);
                            }
                          }
                          if (v35 > v34)
                          {
                            if (v36 >= 2)
                              v33 = (uint64_t **)*v33;
                            v37 = v33[v34];
                            if (v37)
                            {
                              if (*((unsigned __int16 *)v37 + 8) == v13[32])
                              {
                                operator delete(v13);
                                v38 = *((unsigned __int8 *)v37 + 18);
                                switch((_DWORD)v38)
                                {
                                  case 1:
LABEL_274:
                                    v116 = 0;
                                    while (1)
                                    {
                                      v118 = *((unsigned __int8 *)v37 + 18);
                                      v119 = v118 - 1;
                                      if ((_DWORD)v118 != 1)
                                      {
                                        if ((_DWORD)v118 == 5)
                                        {
                                          v118 = *((unsigned int *)v37 + 2);
                                        }
                                        else
                                        {
                                          if ((_DWORD)v118 != 2)
                                            goto LABEL_287;
                                          v118 = 2;
                                        }
                                      }
                                      if (v118 <= v116)
                                      {
LABEL_287:
                                        v121 = 0;
                                        goto LABEL_288;
                                      }
                                      v120 = v37;
                                      if (v119 >= 2)
                                        v120 = (uint64_t *)*v37;
                                      v121 = (uint64_t *)v120[v116];
LABEL_288:
                                      if (*((_WORD *)v121 + 8) != 224)
                                      {
                                        v124 = v155;
                                        if (v155 < v156)
                                        {
                                          *(_QWORD *)v155 = 0x6E776F6E6B6E553CLL;
                                          *((_WORD *)v124 + 4) = 62;
                                          v117 = v124 + 24;
                                          v124[23] = 9;
                                        }
                                        else
                                        {
                                          v125 = (char *)v154;
                                          v126 = 0xAAAAAAAAAAAAAAABLL * ((v155 - (_BYTE *)v154) >> 3);
                                          v127 = v126 + 1;
                                          if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
                                            goto LABEL_352;
                                          if (0x5555555555555556 * ((v156 - (_BYTE *)v154) >> 3) > v127)
                                            v127 = 0x5555555555555556 * ((v156 - (_BYTE *)v154) >> 3);
                                          if (0xAAAAAAAAAAAAAAABLL * ((v156 - (_BYTE *)v154) >> 3) >= 0x555555555555555)
                                            v128 = 0xAAAAAAAAAAAAAAALL;
                                          else
                                            v128 = v127;
                                          if (v128)
                                          {
                                            if (v128 > 0xAAAAAAAAAAAAAAALL)
                                              goto LABEL_353;
                                            v129 = (char *)operator new(24 * v128);
                                          }
                                          else
                                          {
                                            v129 = 0;
                                          }
                                          v141 = &v129[24 * v126];
                                          strcpy(v141, "<Unknown>");
                                          v142 = &v129[24 * v128];
                                          v141[23] = 9;
                                          v117 = v141 + 24;
                                          if (v124 == v125)
                                          {
                                            v154 = v141;
                                            v155 = v141 + 24;
                                            v156 = &v129[24 * v128];
                                          }
                                          else
                                          {
                                            do
                                            {
                                              v143 = *(_OWORD *)(v124 - 24);
                                              *((_QWORD *)v141 - 1) = *((_QWORD *)v124 - 1);
                                              *(_OWORD *)(v141 - 24) = v143;
                                              v141 -= 24;
                                              *((_QWORD *)v124 - 2) = 0;
                                              *((_QWORD *)v124 - 1) = 0;
                                              *((_QWORD *)v124 - 3) = 0;
                                              v124 -= 24;
                                            }
                                            while (v124 != v125);
                                            v124 = (char *)v154;
                                            v144 = v155;
                                            v154 = v141;
                                            v155 = v117;
                                            v156 = v142;
                                            while (v144 != v124)
                                            {
                                              if (*(v144 - 1) < 0)
                                                operator delete(*((void **)v144 - 3));
                                              v144 -= 24;
                                            }
                                          }
                                          if (v124)
                                            operator delete(v124);
                                        }
                                        v155 = v117;
                                        goto LABEL_277;
                                      }
                                      v122 = *((unsigned __int8 *)v121 + 18);
                                      if ((v122 - 1) < 2)
                                        goto LABEL_293;
                                      if (v122 == 5 && *((_DWORD *)v121 + 2))
                                      {
                                        v121 = (uint64_t *)*v121;
LABEL_293:
                                        v123 = (uint64_t *)*v121;
                                        goto LABEL_305;
                                      }
                                      v123 = 0;
LABEL_305:
                                      v130 = *((unsigned __int8 *)v123 + 18);
                                      if ((v130 - 1) < 2)
                                        goto LABEL_309;
                                      if (v130 == 5 && *((_DWORD *)v123 + 2))
                                      {
                                        v123 = (uint64_t *)*v123;
LABEL_309:
                                        v131 = (uint64_t *)*v123;
                                        goto LABEL_311;
                                      }
                                      v131 = 0;
LABEL_311:
                                      v132 = *((unsigned __int8 *)v131 + 18);
                                      if (v132 != 2)
                                      {
                                        if (v132 != 5 || *((_DWORD *)v131 + 2) < 2u)
                                        {
                                          v133 = 0;
                                          goto LABEL_317;
                                        }
                                        v131 = (uint64_t *)*v131;
                                      }
                                      v133 = (_QWORD *)v131[1];
LABEL_317:
                                      swift::Demangle::keyPathSourceString(char const*,unsigned long)::$_1::operator()(v133, (char *)&__p);
                                      v134 = (std::string *)v155;
                                      if (v155 >= v156)
                                      {
                                        v136 = (std::string *)v154;
                                        v137 = 0xAAAAAAAAAAAAAAABLL * ((v155 - (_BYTE *)v154) >> 3);
                                        v138 = v137 + 1;
                                        if (v137 + 1 > 0xAAAAAAAAAAAAAAALL)
                                          goto LABEL_352;
                                        if (0x5555555555555556 * ((v156 - (_BYTE *)v154) >> 3) > v138)
                                          v138 = 0x5555555555555556 * ((v156 - (_BYTE *)v154) >> 3);
                                        if (0xAAAAAAAAAAAAAAABLL * ((v156 - (_BYTE *)v154) >> 3) >= 0x555555555555555)
                                          v139 = 0xAAAAAAAAAAAAAAALL;
                                        else
                                          v139 = v138;
                                        if (v139)
                                        {
                                          if (v139 > 0xAAAAAAAAAAAAAAALL)
LABEL_353:
                                            std::__throw_bad_array_new_length[abi:nn180100]();
                                          v140 = (char *)operator new(24 * v139);
                                        }
                                        else
                                        {
                                          v140 = 0;
                                        }
                                        v145 = (std::string *)&v140[24 * v137];
                                        *v145 = __p;
                                        v146 = &v140[24 * v139];
                                        memset(&__p, 0, sizeof(__p));
                                        v135 = v145 + 1;
                                        if (v134 == v136)
                                        {
                                          v154 = v145;
                                          v155 = (char *)&v145[1];
                                          v156 = &v140[24 * v139];
                                        }
                                        else
                                        {
                                          do
                                          {
                                            v147 = *(_OWORD *)&v134[-1].__r_.__value_.__l.__data_;
                                            v145[-1].__r_.__value_.__r.__words[2] = v134[-1].__r_.__value_.__r.__words[2];
                                            *(_OWORD *)&v145[-1].__r_.__value_.__l.__data_ = v147;
                                            --v145;
                                            v134[-1].__r_.__value_.__l.__size_ = 0;
                                            v134[-1].__r_.__value_.__r.__words[2] = 0;
                                            v134[-1].__r_.__value_.__r.__words[0] = 0;
                                            --v134;
                                          }
                                          while (v134 != v136);
                                          v134 = (std::string *)v154;
                                          v148 = v155;
                                          v154 = v145;
                                          v155 = (char *)v135;
                                          v156 = v146;
                                          while (v148 != (char *)v134)
                                          {
                                            if (*(v148 - 1) < 0)
                                              operator delete(*((void **)v148 - 3));
                                            v148 -= 24;
                                          }
                                        }
                                        if (v134)
                                          operator delete(v134);
                                      }
                                      else
                                      {
                                        *(_OWORD *)v155 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                                        v134->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                                        memset(&__p, 0, sizeof(__p));
                                        v135 = v134 + 1;
                                      }
                                      v155 = (char *)v135;
                                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_277:
                                      if (++v116 == v38)
                                        goto LABEL_144;
                                    }
                                  case 5:
                                    v38 = *((unsigned int *)v37 + 2);
                                    if ((_DWORD)v38)
                                      goto LABEL_274;
                                    break;
                                  case 2:
                                    v38 = 2;
                                    goto LABEL_274;
                                }
                                goto LABEL_144;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_87:
  operator delete(v13);
  v39 = (unsigned __int16 *)operator new(0x40uLL);
  *v39 = 232;
  *((_QWORD *)v39 + 1) = 2;
  v39[8] = 82;
  *((_QWORD *)v39 + 3) = 0;
  v39[16] = 3;
  *((_QWORD *)v39 + 5) = 0;
  v39[24] = 232;
  *((_QWORD *)v39 + 7) = 0;
  v40 = *((unsigned __int8 *)v11 + 18);
  v41 = v40 - 1;
  if ((_DWORD)v40 != 1)
  {
    if ((_DWORD)v40 == 5)
    {
      v40 = v11[2];
    }
    else
    {
      if ((_DWORD)v40 != 2)
        goto LABEL_143;
      v40 = 2;
    }
  }
  if (v40 <= 2)
    goto LABEL_143;
  v42 = v11;
  if (v41 >= 2)
    v42 = *(unsigned int **)v11;
  v43 = (uint64_t *)*((_QWORD *)v42 + 2);
  if (!v43 || *((_WORD *)v43 + 8) != 232)
    goto LABEL_143;
  v44 = *((_QWORD *)v39 + 3);
  v45 = *((unsigned __int8 *)v43 + 18);
  v46 = v45 - 1;
  if ((_DWORD)v45 != 1)
  {
    if ((_DWORD)v45 == 2)
    {
      v45 = 2;
    }
    else
    {
      if ((_DWORD)v45 != 5)
        goto LABEL_143;
      v45 = *((unsigned int *)v43 + 2);
    }
  }
  if (v45 <= v44)
    goto LABEL_143;
  if (v46 >= 2)
    v43 = (uint64_t *)*v43;
  v47 = (uint64_t **)v43[v44];
  if (!v47 || *((unsigned __int16 *)v47 + 8) != v39[8])
    goto LABEL_143;
  v48 = *((_QWORD *)v39 + 5);
  v49 = *((unsigned __int8 *)v47 + 18);
  v50 = v49 - 1;
  if ((_DWORD)v49 != 1)
  {
    if ((_DWORD)v49 == 2)
    {
      v49 = 2;
    }
    else
    {
      if ((_DWORD)v49 != 5)
        goto LABEL_143;
      v49 = *((unsigned int *)v47 + 2);
    }
  }
  if (v49 <= v48)
    goto LABEL_143;
  if (v50 >= 2)
    v47 = (uint64_t **)*v47;
  v51 = (uint64_t **)v47[v48];
  if (!v51 || *((unsigned __int16 *)v51 + 8) != v39[16])
    goto LABEL_143;
  v52 = *((_QWORD *)v39 + 7);
  v53 = *((unsigned __int8 *)v51 + 18);
  v54 = v53 - 1;
  if ((_DWORD)v53 != 1)
  {
    if ((_DWORD)v53 == 2)
    {
      v53 = 2;
      goto LABEL_122;
    }
    if ((_DWORD)v53 == 5)
    {
      v53 = *((unsigned int *)v51 + 2);
      goto LABEL_122;
    }
LABEL_143:
    operator delete(v39);
    goto LABEL_144;
  }
LABEL_122:
  if (v53 <= v52)
    goto LABEL_143;
  if (v54 >= 2)
    v51 = (uint64_t **)*v51;
  v55 = v51[v52];
  if (!v55 || *((unsigned __int16 *)v55 + 8) != v39[24])
    goto LABEL_143;
  operator delete(v39);
  v56 = *((unsigned __int8 *)v55 + 18);
  if ((v56 - 1) < 2)
    goto LABEL_131;
  if (v56 == 5 && *((_DWORD *)v55 + 2))
  {
    v55 = (uint64_t *)*v55;
LABEL_131:
    v57 = (uint64_t *)*v55;
    goto LABEL_133;
  }
  v57 = 0;
LABEL_133:
  v58 = *((unsigned __int8 *)v57 + 18);
  if (v58 == 2)
  {
LABEL_137:
    v59 = (_QWORD *)v57[1];
    goto LABEL_139;
  }
  if (v58 == 5 && *((_DWORD *)v57 + 2) >= 2u)
  {
    v57 = (uint64_t *)*v57;
    goto LABEL_137;
  }
  v59 = 0;
LABEL_139:
  swift::Demangle::keyPathSourceString(char const*,unsigned long)::$_1::operator()(v59, (char *)&__p);
  v60 = v155;
  if (v155 < v156)
  {
    v61 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v155 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *v60 = v61;
    v155 = (char *)v60 + 24;
    goto LABEL_144;
  }
  v155 = std::vector<std::string>::__push_back_slow_path<std::string>(&v154, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v39 = (unsigned __int16 *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_143;
  }
LABEL_144:
  v62 = *((unsigned __int8 *)v11 + 18);
  if (v62 != 2)
  {
    if (v62 != 5 || v11[2] < 2)
    {
LABEL_154:
      if (v155 == v154)
      {
        *((_BYTE *)&v151.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&v151, "<unknown>");
      }
      else if (*((char *)v154 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v154, *((_QWORD *)v154 + 1));
      }
      else
      {
        v65 = *(_OWORD *)v154;
        v151.__r_.__value_.__r.__words[2] = *((_QWORD *)v154 + 2);
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v65;
      }
      if (v161 >= 0)
        v66 = (const std::string::value_type *)&v159;
      else
        v66 = v159;
      if (v161 >= 0)
        v67 = v161;
      else
        v67 = v160;
      v68 = std::string::insert(&v151, 0, v66, v67);
      v69 = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      size = __p.__r_.__value_.__l.__size_;
      v72 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_168;
    }
    v11 = *(unsigned int **)v11;
  }
  v63 = (uint64_t *)*((_QWORD *)v11 + 1);
  if (!v63)
    goto LABEL_154;
  if (*((_WORD *)v63 + 8) != 290)
    goto LABEL_175;
  v64 = *((unsigned __int8 *)v63 + 18);
  switch((_DWORD)v64)
  {
    case 1:
LABEL_200:
      v85 = 0;
      v86 = 0;
      v87 = &v154;
      while (1)
      {
        v88 = *((unsigned __int8 *)v63 + 18);
        v89 = v88 - 1;
        if ((_DWORD)v88 == 1)
          goto LABEL_206;
        if ((_DWORD)v88 != 5)
          break;
        if (*((unsigned int *)v63 + 2) <= v86)
        {
LABEL_211:
          v91 = 0;
          goto LABEL_212;
        }
LABEL_207:
        v90 = v63;
        if (v89 >= 2)
          v90 = (uint64_t *)*v63;
        v91 = v90[v86];
LABEL_212:
        v92 = *(unsigned __int16 *)(v91 + 16);
        if ((v92 - 275) >= 2)
        {
          if (v92 == 101)
          {
            v95 = *(_QWORD *)(v91 + 8);
            if (v95 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_352;
            v96 = *(const void **)v91;
            if (v95 >= 0x17)
            {
              v98 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v98 = v95 | 7;
              v99 = v98 + 1;
              p_dst = (std::string *)operator new(v98 + 1);
              __dst.__r_.__value_.__l.__size_ = v95;
              __dst.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v91 + 8);
              p_dst = &__dst;
              if (!v95)
              {
LABEL_226:
                p_dst->__r_.__value_.__s.__data_[v95] = 0;
                v100 = std::string::append(&__dst, ": ");
                v101 = v100->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v101;
                v100->__r_.__value_.__l.__size_ = 0;
                v100->__r_.__value_.__r.__words[2] = 0;
                v100->__r_.__value_.__r.__words[0] = 0;
                v87 = v153;
                if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v153[1] - (_BYTE *)*v153) >> 3) <= v86)
                {
                  *((_BYTE *)&v149.__r_.__value_.__s + 23) = 9;
                  strcpy((char *)&v149, "<unknown>");
                }
                else
                {
                  v102 = (char *)*v153 + v85;
                  if (v102[23] < 0)
                  {
                    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v102, *((_QWORD *)v102 + 1));
                  }
                  else
                  {
                    v103 = *(_OWORD *)v102;
                    v149.__r_.__value_.__r.__words[2] = *((_QWORD *)v102 + 2);
                    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v103;
                  }
                }
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v110 = &v149;
                else
                  v110 = (std::string *)v149.__r_.__value_.__r.__words[0];
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v111 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                else
                  v111 = v149.__r_.__value_.__l.__size_;
                v112 = std::string::append(&v151, (const std::string::value_type *)v110, v111);
                v113 = v112->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v113;
                v112->__r_.__value_.__l.__size_ = 0;
                v112->__r_.__value_.__r.__words[2] = 0;
                v112->__r_.__value_.__r.__words[0] = 0;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v114 = &__p;
                else
                  v114 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v115 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v115 = __p.__r_.__value_.__l.__size_;
                std::string::append(&v157, (const std::string::value_type *)v114, v115);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_267;
LABEL_262:
                  if ((SHIBYTE(v151.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_263;
LABEL_268:
                  operator delete(v151.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_264:
                    if (v64 - 1 != v86)
                      std::string::append(&v157, ", ");
                    goto LABEL_201;
                  }
                }
                else
                {
                  if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_262;
LABEL_267:
                  operator delete(v149.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_268;
LABEL_263:
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_264;
                }
                operator delete(__dst.__r_.__value_.__l.__data_);
                goto LABEL_264;
              }
            }
            memmove(p_dst, v96, v95);
            goto LABEL_226;
          }
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v87[1] - (_BYTE *)*v87) >> 3) <= v86)
          {
            *((_BYTE *)&v151.__r_.__value_.__s + 23) = 9;
            strcpy((char *)&v151, "<unknown>");
          }
          else
          {
            v93 = (char *)*v87 + v85;
            if (v93[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
            }
            else
            {
              v94 = *(_OWORD *)v93;
              v151.__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
              *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v94;
            }
          }
          if (v161 >= 0)
            v104 = (const std::string::value_type *)&v159;
          else
            v104 = v159;
          if (v161 >= 0)
            v105 = v161;
          else
            v105 = v160;
          v106 = std::string::insert(&v151, 0, v104, v105);
          v107 = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = &__p;
          else
            v108 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v109 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v157, (const std::string::value_type *)v108, v109);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v151.__r_.__value_.__l.__data_);
        }
LABEL_201:
        ++v86;
        v85 += 24;
        if (v64 == v86)
          goto LABEL_175;
      }
      if ((_DWORD)v88 != 2)
        goto LABEL_211;
      v88 = 2;
LABEL_206:
      if (v88 <= v86)
        goto LABEL_211;
      goto LABEL_207;
    case 5:
      v64 = *((unsigned int *)v63 + 2);
      if ((_DWORD)v64)
        goto LABEL_200;
      break;
    case 2:
      v64 = 2;
      goto LABEL_200;
  }
  swift::Demangle::keyPathSourceString(char const*,unsigned long)::$_0::operator()((uint64_t **)&v153, 0, (uint64_t)&v151);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v151, (uint64_t)&v159, &__p);
  v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  v72 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_168:
  if (v72)
    v74 = size;
  else
    v74 = v70;
  std::string::append(&v157, (const std::string::value_type *)p_p, v74);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
LABEL_175:
  v75 = SHIBYTE(v157.__r_.__value_.__r.__words[2]);
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v76 = v157.__r_.__value_.__l.__size_;
  v77 = v76 + 1;
  if (v76 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_352:
    abort();
  if (v77 >= 0x17)
  {
    v78 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v77 | 7) != 0x17)
      v78 = v77 | 7;
    v79 = v78 + 1;
    v80 = (char *)operator new(v78 + 1);
    *((_QWORD *)a3 + 1) = v77;
    *((_QWORD *)a3 + 2) = v79 | 0x8000000000000000;
    *(_QWORD *)a3 = v80;
    a3 = v80;
    goto LABEL_185;
  }
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  a3[23] = v77;
  if (v76)
  {
LABEL_185:
    if (v75 >= 0)
      v81 = &v157;
    else
      v81 = (std::string *)v157.__r_.__value_.__r.__words[0];
    memmove(a3, v81, v76);
  }
  *(_WORD *)&a3[v76] = 41;
  v82 = (char *)v154;
  if (v154)
  {
    v83 = v155;
    v84 = v154;
    if (v155 != v154)
    {
      do
      {
        if (*(v83 - 1) < 0)
          operator delete(*((void **)v83 - 3));
        v83 -= 24;
      }
      while (v83 != v82);
      v84 = v154;
    }
    v155 = v82;
    operator delete(v84);
    LOBYTE(v75) = *((_BYTE *)&v157.__r_.__value_.__s + 23);
  }
  if ((v75 & 0x80) != 0)
    operator delete(v157.__r_.__value_.__l.__data_);
LABEL_34:
  swift::Demangle::Context::~Context((swift::Demangle::Context *)v158);
  if (v161 < 0)
    operator delete(v159);
}

void swift::Demangle::keyPathSourceString(char const*,unsigned long)::$_1::operator()(_QWORD *a1@<X0>, char *a2@<X8>)
{
  int v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::string::size_type v7;
  const void *v8;
  unint64_t v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  std::string __p;
  std::string __dst;
  std::string v23;

  v3 = *((unsigned __int16 *)a1 + 8);
  if (v3 != 137)
  {
    if (v3 != 101)
    {
      a2[23] = 9;
      strcpy(a2, "<unknown>");
      return;
    }
    v4 = a1[1];
    if (v4 <= 0x7FFFFFFFFFFFFFF7)
    {
      v5 = (_QWORD *)*a1;
      if (v4 >= 0x17)
      {
        v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17)
          v11 = v4 | 7;
        v12 = v11 + 1;
        v13 = (char *)operator new(v11 + 1);
        *((_QWORD *)a2 + 1) = v4;
        *((_QWORD *)a2 + 2) = v12 | 0x8000000000000000;
        *(_QWORD *)a2 = v13;
        a2 = v13;
      }
      else
      {
        a2[23] = v4;
        if (!v4)
          goto LABEL_18;
      }
      memmove(a2, v5, v4);
LABEL_18:
      a2[v4] = 0;
      return;
    }
LABEL_36:
    abort();
  }
  if (*((_BYTE *)a1 + 18) == 5)
    a1 = (_QWORD *)*a1;
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_36;
  v8 = *(const void **)v6;
  v9 = *(_QWORD *)*a1 + 1;
  if (v7 >= 0x17)
  {
    v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v14 = v7 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v6 + 8);
  p_dst = &__dst;
  if (v7)
LABEL_22:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v16 = std::string::append(&__dst, " #");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  *(std::string *)a2 = *v20;
  v20->__r_.__value_.__r.__words[0] = 0;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void swift::Demangle::keyPathSourceString(char const*,unsigned long)::$_0::operator()(uint64_t **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;

  v3 = **a1;
  if (0xAAAAAAAAAAAAAAABLL * (((*a1)[1] - v3) >> 3) <= a2)
  {
    *(_BYTE *)(a3 + 23) = 9;
    strcpy((char *)a3, "<unknown>");
  }
  else
  {
    v4 = (__int128 *)(v3 + 24 * a2);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)a3 = v5;
    }
  }
}

_QWORD *std::string::basic_string<llvm::StringRef,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v2;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v2;
    v5 = __dst;
    if (!v2)
      goto LABEL_9;
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((_BYTE *)v5 + v2) = 0;
  return __dst;
}

void swift::Demangle::nodeToString(swift::Demangle::Node *a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  std::string __p;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int16 v23;

  if (!a1)
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v12 = *a2;
  v13 = a2[1];
  v14 = *((_QWORD *)a2 + 4);
  v5 = v15;
  v6 = (__int128 *)*((_QWORD *)a2 + 8);
  if (v6)
  {
    if (v6 == (__int128 *)((char *)a2 + 40))
    {
      v16 = v15;
      (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v15);
      v7 = v16;
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v6 + 16))(v6);
      v16 = v7;
    }
    memset(&__p, 0, sizeof(__p));
    v18 = v12;
    v19 = v13;
    v20 = v14;
    v9 = v21;
    if (v7)
    {
      if (v7 == v15)
      {
        v22 = v21;
        (*(void (**)(_QWORD *, _BYTE *))(v15[0] + 24))(v15, v21);
      }
      else
      {
        v22 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      }
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v16 = 0;
    memset(&__p, 0, sizeof(__p));
    v8 = a2[1];
    v18 = *a2;
    v19 = v8;
    v20 = *((_QWORD *)a2 + 4);
    v9 = v21;
    v22 = 0;
  }
  v23 = 256;
  if (HIBYTE(v23))
  {
    *a3 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  if (v22 == v21)
  {
    v10 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v10 = 5;
    v9 = v22;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_21:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v16 == v15)
  {
    v11 = 4;
  }
  else
  {
    if (!v16)
      return;
    v11 = 5;
    v5 = v16;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v11))(v5);
}

swift::Demangle::Node *`anonymous namespace'::NodePrinter::print(std::string *this, swift::Demangle::Node *a2, unsigned int a3, char a4)
{
  __int16 *v4;
  uint64_t v6;
  unsigned int v8;
  char v9;
  swift::Demangle::Node *v11;
  int v12;
  int v13;
  swift::Demangle::Node **v14;
  swift::Demangle::Node *v15;
  const std::string::value_type *v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  swift::Demangle::Node *v27;
  unint64_t v28;
  const std::string::value_type *v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  int v34;
  uint64_t v35;
  int v36;
  swift::Demangle::Node **v37;
  swift::Demangle::Node *v38;
  int v39;
  swift::Demangle::Node **v40;
  swift::Demangle::Node *v41;
  int v42;
  swift::Demangle::Node **v43;
  const std::string::value_type *v44;
  std::string *v45;
  std::string::size_type v46;
  int v47;
  swift::Demangle::Node *v48;
  int v49;
  swift::Demangle::Node **v50;
  swift::Demangle::Node *v51;
  int v52;
  swift::Demangle::Node *v53;
  swift::Demangle::Node *v54;
  const std::string::value_type ***v55;
  int v56;
  int v57;
  swift::Demangle::Node **v58;
  int v59;
  swift::Demangle::Node **v60;
  int v61;
  swift::Demangle::Node *v62;
  swift::Demangle::Node *v63;
  int v64;
  swift::Demangle::Node *v65;
  int v66;
  swift::Demangle::Node **v67;
  int v68;
  swift::Demangle::Node **v69;
  swift::Demangle::Node *v70;
  uint64_t v71;
  const std::string::value_type *v72;
  std::string *v73;
  std::string::size_type v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  swift::Demangle::Node *v79;
  int v80;
  const std::string::value_type *v81;
  std::string *v82;
  std::string::size_type v83;
  int v84;
  int v85;
  swift::Demangle::Node **v86;
  swift::Demangle::Node *v87;
  int v88;
  int v89;
  swift::Demangle::Node *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const std::string::value_type *v95;
  std::string *v96;
  std::string::size_type v97;
  int v98;
  swift::Demangle::Node *v99;
  swift::Demangle::Node *v100;
  int v101;
  swift::Demangle::Node **v102;
  swift::Demangle::Node *v103;
  int v104;
  swift::Demangle::Node **v105;
  swift::Demangle::Node *v106;
  int v107;
  swift::Demangle::Node *v108;
  unsigned int v109;
  int v110;
  swift::Demangle::Node *v111;
  int v112;
  int v113;
  swift::Demangle::Node **v114;
  swift::Demangle::Node *v115;
  const std::string::value_type *v116;
  std::string *v117;
  std::string::size_type v118;
  int v119;
  unsigned int v120;
  swift::Demangle::Node *v121;
  int v122;
  swift::Demangle::Node **v123;
  swift::Demangle::Node *v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  swift::Demangle::Node **v129;
  swift::Demangle::Node *v130;
  const std::string::value_type *v131;
  std::string *v132;
  std::string::size_type v133;
  int v134;
  swift::Demangle::Node *v135;
  swift::Demangle::Node *v136;
  int v137;
  swift::Demangle::Node **v138;
  swift::Demangle::Node *v139;
  int v140;
  swift::Demangle::Node *v141;
  int v142;
  swift::Demangle::Node **v143;
  swift::Demangle::Node *v144;
  int v145;
  std::string *v146;
  swift::Demangle::Node **v147;
  swift::Demangle::Node *v148;
  swift::Demangle::Node *v149;
  int v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  swift::Demangle::Node *v154;
  int v155;
  swift::Demangle::Node *v156;
  swift::Demangle::Node *v157;
  const std::string::value_type *v158;
  std::string *v159;
  std::string::size_type v160;
  int v161;
  int v162;
  unint64_t v163;
  swift::Demangle::Node *v164;
  swift::Demangle::Node *v165;
  unint64_t v166;
  swift::Demangle::Node *v167;
  swift::Demangle::Node *v168;
  unint64_t v169;
  swift::Demangle::Node *v170;
  swift::Demangle::Node *v171;
  swift::Demangle::Node *v172;
  unint64_t v173;
  unint64_t v174;
  swift::Demangle::Node *v175;
  unint64_t v176;
  char v177;
  swift::Demangle::Node *v178;
  unsigned int v179;
  swift::Demangle::Node *v180;
  const std::string::value_type *v181;
  std::string *v182;
  std::string::size_type v183;
  int v184;
  __int16 *v185;
  unsigned __int16 *v186;
  swift::Demangle::Node *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  const std::string::value_type *v192;
  int v193;
  int v194;
  int v195;
  swift::Demangle::Node *v196;
  swift::Demangle::Node *v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  swift::Demangle::Node *v201;
  swift::Demangle::Node *v202;
  const std::string::value_type *v203;
  std::string *v204;
  std::string::size_type v205;
  int v206;
  uint64_t v207;
  int v208;
  swift::Demangle::Node *v209;
  swift::Demangle::Node *v210;
  swift::Demangle::Node *v211;
  unsigned int v212;
  swift::Demangle::Node *v213;
  swift::Demangle::Node *v214;
  unint64_t v215;
  unsigned int v216;
  swift::Demangle::Node *v217;
  unsigned int v218;
  swift::Demangle::Node *v219;
  swift::Demangle::Node *v220;
  swift::Demangle::Node *v221;
  unint64_t v222;
  unint64_t v223;
  std::string *v224;
  std::string::size_type v225;
  uint64_t v226;
  unint64_t v227;
  swift::Demangle::Node *v228;
  unint64_t v229;
  char v230;
  swift::Demangle::Node *v231;
  swift::Demangle::Node *v232;
  unint64_t v233;
  unsigned int v234;
  unint64_t v235;
  swift::Demangle::Node *v236;
  swift::Demangle::Node *v237;
  unint64_t v238;
  unsigned int v239;
  unint64_t v240;
  swift::Demangle::Node *v241;
  swift::Demangle::Node *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unsigned int v246;
  int v247;
  swift::Demangle::Node *v248;
  swift::Demangle::Node *v249;
  swift::Demangle::Node *v250;
  unint64_t v251;
  swift::Demangle::Node *v252;
  swift::Demangle::Node *v253;
  unsigned int v254;
  swift::Demangle::Node *v255;
  __int16 *v256;
  swift::Demangle::Node *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unsigned int v261;
  swift::Demangle::Node *v262;
  unint64_t v263;
  unsigned int v264;
  swift::Demangle::Node *v265;
  int v266;
  swift::Demangle::Node **v267;
  swift::Demangle::Node *v268;
  unint64_t v269;
  unsigned int v270;
  swift::Demangle::Node *v271;
  swift::Demangle::Node *v272;
  int v273;
  int v274;
  BOOL v275;
  const std::string::value_type *v276;
  std::string *v277;
  std::string::size_type v278;
  swift::Demangle::Node *result;
  std::string *v280;
  swift::Demangle::Node *v281;
  swift::Demangle::Node *v282;
  std::string::value_type *v283;
  int v284;
  _anonymous_namespace_::NodePrinter *v285;
  uint64_t *v286;
  int v287;
  int v288;
  const std::string::value_type *v289;
  std::string *v290;
  uint64_t *v291;
  std::string::size_type v292;
  std::string::size_type v293;
  const std::string::value_type *v294;
  std::string *v295;
  const std::string::value_type *v296;
  int v297;
  swift::Demangle::Node **v298;
  swift::Demangle::Node *v299;
  const std::string::value_type *v300;
  std::string::size_type v301;
  const std::string::value_type *v302;
  std::string *v303;
  std::string::size_type v304;
  int v305;
  const std::string::value_type *v306;
  std::string::size_type v307;
  int v308;
  unsigned int v309;
  int v310;
  uint64_t v311;
  swift::Demangle::Node *v312;
  const std::string::value_type *v313;
  std::string::size_type v314;
  uint64_t v315;
  int v316;
  int v317;
  swift::Demangle::Node **v318;
  unsigned int v319;
  unint64_t v320;
  swift::Demangle::Node *v321;
  unint64_t v322;
  int v323;
  unint64_t v324;
  unsigned int v325;
  swift::Demangle::Node *v326;
  int v327;
  uint64_t v328;
  const std::string::value_type *v329;
  std::string *v330;
  uint64_t *v331;
  std::string::size_type v332;
  uint64_t v333;
  int v334;
  const std::string::value_type ***v335;
  int v336;
  swift::Demangle::Node *v337;
  const std::string::value_type *v338;
  std::string *v339;
  std::string::size_type v340;
  const std::string::value_type *v341;
  std::string *v342;
  std::string::size_type v343;
  int v344;
  int v345;
  swift::Demangle::Node **v346;
  unsigned int v347;
  unint64_t v348;
  char v349;
  int v350;
  swift::Demangle::Node *v351;
  swift::Demangle::Node *v352;
  int v353;
  swift::Demangle::Node **v354;
  swift::Demangle::Node *v355;
  int v356;
  swift::Demangle::Node **v357;
  swift::Demangle::Node *v358;
  int v359;
  unsigned int v360;
  swift::Demangle::Node **v361;
  swift::Demangle::Node *v362;
  const std::string::value_type *v363;
  std::string *v364;
  std::string::size_type v365;
  swift::Demangle::Node *v366;
  int v367;
  int v368;
  int v369;
  swift::Demangle::Node *v370;
  int v371;
  const std::string::value_type *v372;
  std::string *v373;
  std::string::size_type v374;
  uint64_t v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  swift::Demangle::Node **v382;
  swift::Demangle::Node *v383;
  int v384;
  swift::Demangle::Node **v385;
  swift::Demangle::Node *v386;
  uint64_t v387;
  int v388;
  int v389;
  swift::Demangle::Node *v390;
  int v391;
  int v392;
  swift::Demangle::Node **v393;
  unsigned int v394;
  unint64_t v395;
  char v396;
  int v397;
  int v398;
  int v399;
  swift::Demangle::Node *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  const std::string::value_type *v404;
  std::string *v405;
  std::string::size_type v406;
  swift::Demangle::Node *v407;
  size_t v408;
  int v409;
  swift::Demangle::Node **v410;
  swift::Demangle::Node *v411;
  const char *v412;
  int v413;
  int v414;
  swift::Demangle::Node *v415;
  int v416;
  swift::Demangle::Node *v417;
  int v418;
  int v419;
  swift::Demangle::Node *v420;
  int v421;
  swift::Demangle::Node *v422;
  swift::Demangle::Node *v423;
  int v424;
  uint64_t v425;
  int v426;
  swift::Demangle::Node *v427;
  uint64_t v428;
  unint64_t v429;
  std::string::value_type v430;
  int v431;
  unsigned int v432;
  swift::Demangle::Node *v433;
  unsigned int v434;
  uint64_t v435;
  int v436;
  swift::Demangle::Node *v437;
  unsigned int v438;
  _anonymous_namespace_::NodePrinter *v439;
  uint64_t v440;
  uint64_t v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  swift::Demangle::Node *const *v446;
  int v447;
  unsigned int v448;
  int v449;
  swift::Demangle::Node **v450;
  swift::Demangle::Node *v451;
  int v452;
  int v453;
  swift::Demangle::Node *v454;
  swift::Demangle::Node *v455;
  int v456;
  int v457;
  swift::Demangle::Node *v458;
  swift::Demangle::Node *v459;
  int v460;
  std::string *p_str;
  std::string::size_type size;
  uint64_t ChildIf;
  swift::Demangle::Node *v464;
  int v465;
  int v466;
  _DWORD *v467;
  int v468;
  swift::Demangle::Node *v469;
  int v470;
  int v471;
  swift::Demangle::Node *v472;
  int v473;
  swift::Demangle::Node *v474;
  int v475;
  swift::Demangle::Node *v476;
  std::string *v477;
  uint64_t v478;
  uint64_t v479;
  void **v480;
  uint64_t v481;
  int v482;
  swift::Demangle::Node **v483;
  swift::Demangle::Node *v484;
  int v485;
  int v486;
  swift::Demangle::Node **v487;
  swift::Demangle::Node *v488;
  uint64_t v489;
  int v490;
  swift::Demangle::Node *v491;
  int v492;
  swift::Demangle::Node **v493;
  swift::Demangle::Node *v494;
  int v495;
  swift::Demangle::Node **v496;
  const std::string::value_type *v497;
  std::string *v498;
  std::string::size_type v499;
  std::string *v500;
  std::string::size_type v501;
  std::string::value_type *v502;
  size_t v503;
  void **v504;
  uint64_t v505;
  unsigned int v506;
  int v507;
  swift::Demangle::Node *v508;
  swift::Demangle::Node *v509;
  uint64_t v510;
  unsigned int v511;
  int v512;
  swift::Demangle::Node *v513;
  swift::Demangle::Node *v514;
  unint64_t v515;
  swift::Demangle::Node *v516;
  int v517;
  std::string::value_type *v518;
  unsigned __int16 *v519;
  int v520;
  uint64_t v521;
  swift::Demangle::Node *v522;
  unsigned int v523;
  int v524;
  swift::Demangle::Node **v525;
  swift::Demangle::Node *v526;
  const std::string::value_type *v527;
  uint64_t v528;
  unsigned int v529;
  int v530;
  unint64_t v531;
  swift::Demangle::Node *v532;
  int v533;
  unint64_t v534;
  unsigned int v535;
  swift::Demangle::Node *v536;
  int v537;
  std::string::size_type v538;
  const std::string::value_type *v539;
  _anonymous_namespace_::NodePrinter *v540;
  int v541;
  size_t v542;
  int v543;
  unsigned int v544;
  int v545;
  _anonymous_namespace_::NodePrinter *v546;
  unsigned int v547;
  swift::Demangle::Node *v548;
  uint64_t v549;
  const std::string::value_type *v550;
  unsigned int v551;
  unsigned int v552;
  uint64_t v553;
  int v554;
  swift::Demangle::Node *v555;
  swift::Demangle::Node *v556;
  int v557;
  const std::string::value_type *v558;
  std::string *v559;
  int v560;
  swift::Demangle::Node *v561;
  swift::Demangle::Node *v562;
  unsigned int v563;
  swift::Demangle::Node *v564;
  unsigned int v565;
  int v566;
  swift::Demangle::Node *v567;
  std::string *v568;
  std::string::size_type v569;
  uint64_t v570;
  swift::Demangle::Node *v571;
  int v572;
  swift::Demangle::Node *v573;
  unint64_t v574;
  swift::Demangle::Node *v575;
  int v576;
  unint64_t v577;
  unsigned int v578;
  swift::Demangle::Node *v579;
  swift::Demangle::Node *const *v580;
  swift::Demangle::Node *const *v581;
  swift::Demangle::Node *v582;
  _BYTE **v583;
  unsigned int *v584;
  uint64_t v585;
  unsigned int v586;
  unint64_t v587;
  swift::Demangle::Node *v588;
  int v589;
  unint64_t v590;
  unsigned int v591;
  swift::Demangle::Node *v592;
  swift::Demangle::Node *v593;
  std::string *v594;
  std::string::value_type v595;
  unint64_t v596;
  swift::Demangle::Node *v597;
  unint64_t v598;
  int v599;
  unint64_t v600;
  unsigned int v601;
  swift::Demangle::Node *v602;
  swift::Demangle::Node *v603;
  unsigned __int16 *v604;
  unsigned int v605;
  int v606;
  swift::Demangle::Node **v607;
  swift::Demangle::Node *v608;
  int v609;
  unsigned __int16 *v610;
  int v611;
  uint64_t v612;
  int v613;
  swift::Demangle::Node *v614;
  unsigned int v615;
  unsigned int v616;
  const std::string::value_type *v617;
  std::string::size_type v618;
  int v619;
  int v620;
  int v621;
  swift::Demangle::Node *v622;
  unsigned int *v623;
  uint64_t v624;
  unint64_t v625;
  swift::Demangle::Node *v626;
  int v627;
  unint64_t v628;
  unsigned int v629;
  swift::Demangle::Node **v630;
  swift::Demangle::Node *v631;
  unsigned int v632;
  char *v633;
  std::string::size_type v634;
  swift::Demangle::Node *v635;
  unsigned int v636;
  swift::Demangle::Node *v637;
  std::string __p;
  std::string __str;
  uint64_t v640;
  uint64_t v641;
  void *v642;
  double (*v643)@<D0>(swift::Demangle *@<X0>, unint64_t@<X1>, std::string *@<X8>);
  void **v644;
  std::string v645;
  std::string v646;
  __int128 v647;
  uint64_t v648;

  v6 = a3 < 0x301;
  if (a3 > 0x300)
  {
LABEL_823:
    std::string::append(this, "<<too complex>>", 0xFuLL);
    v11 = 0;
    v9 = v6;
    goto LABEL_827;
  }
  v8 = a3;
  v9 = 0;
  while (2)
  {
    if (!a2)
    {
      v276 = "<null node pointer>";
      v277 = this;
      v278 = 19;
LABEL_825:
      std::string::append(v277, v276, v278);
      goto LABEL_826;
    }
    v12 = *((unsigned __int16 *)a2 + 8);
    v11 = 0;
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        v407 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v407 = *(swift::Demangle::Node **)a2;
        if (*(_WORD *)(*(_QWORD *)v407 + 16) == 24)
          v408 = 17;
        else
          v408 = 4;
        if (*(_WORD *)(*(_QWORD *)v407 + 16) == 24)
          v283 = "__allocating_init";
        else
          v283 = "init";
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 2;
        goto LABEL_1328;
      case 1:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2])
          goto LABEL_826;
        v350 = *((unsigned __int8 *)a2 + 18);
        v351 = a2;
        if (v350 == 2)
          goto LABEL_941;
        if (v350 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v351 = *(swift::Demangle::Node **)a2;
LABEL_941:
          v352 = (swift::Demangle::Node *)*((_QWORD *)v351 + 1);
        }
        else
        {
          v352 = 0;
        }
        v605 = v8 + 1;
        std::string::append(this, ".(unknown context at ", 0x15uLL);
        v606 = *((unsigned __int8 *)a2 + 18);
        v607 = (swift::Demangle::Node **)a2;
        if ((v606 - 1) < 2)
          goto LABEL_1778;
        if (v606 == 5 && *((_DWORD *)a2 + 2))
        {
          v607 = *(swift::Demangle::Node ***)a2;
LABEL_1778:
          v608 = *v607;
        }
        else
        {
          v608 = 0;
        }
        std::string::append(this, ")", 1uLL);
        if (*((_BYTE *)a2 + 18) != 5)
          goto LABEL_826;
        if (*((_DWORD *)a2 + 2) < 3u)
          goto LABEL_826;
        v612 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        v613 = *(unsigned __int8 *)(v612 + 18);
        if ((v613 - 1) >= 2 && (v613 != 5 || !*(_DWORD *)(v612 + 8)))
          goto LABEL_826;
        std::string::push_back(this, 60);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v614 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
        else
          v614 = 0;
        v594 = this;
        v595 = 62;
        goto LABEL_1741;
      case 2:
        v316 = *((unsigned __int8 *)a2 + 18);
        if ((v316 - 1) >= 2 && (v316 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_826;
        std::string::append(this, "(", 1uLL);
        v317 = *((unsigned __int8 *)a2 + 18);
        v318 = (swift::Demangle::Node **)a2;
        if ((v317 - 1) < 2)
          goto LABEL_883;
        if (v317 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_1497;
        v318 = *(swift::Demangle::Node ***)a2;
LABEL_883:
        v319 = v8 + 1;
        v320 = 1;
        while (2)
        {
          v322 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v322 == 2)
            goto LABEL_889;
          if ((_DWORD)v322 != 5)
            goto LABEL_1497;
          v322 = *((unsigned int *)a2 + 2);
LABEL_889:
          if (v322 <= v320)
            goto LABEL_1497;
          std::string::append(this, ", ", 2uLL);
          v323 = *((unsigned __int8 *)a2 + 18);
          if (v323 == 2)
          {
            v324 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v323 != 5)
              goto LABEL_884;
            v324 = *((unsigned int *)a2 + 2);
          }
          if (v324 > v320)
          {
            v325 = v323 - 1;
            v326 = a2;
            if (v325 >= 2)
              v326 = *(swift::Demangle::Node **)a2;
            v321 = (swift::Demangle::Node *)*((_QWORD *)v326 + v320);
            goto LABEL_885;
          }
LABEL_884:
          v321 = 0;
LABEL_885:
          ++v320;
          continue;
        }
      case 3:
        goto LABEL_826;
      case 4:
      case 0x72:
      case 0x122:
      case 0x155:
      case 0x156:
        goto LABEL_827;
      case 5:
        v492 = *((unsigned __int8 *)a2 + 18);
        v493 = (swift::Demangle::Node **)a2;
        if ((v492 - 1) < 2)
          goto LABEL_1380;
        if (v492 == 5 && *((_DWORD *)a2 + 2))
        {
          v493 = *(swift::Demangle::Node ***)a2;
LABEL_1380:
          v494 = *v493;
        }
        else
        {
          v494 = 0;
        }
        std::string::push_back(this, 46);
        if (*((_BYTE *)a2 + 18) == 5)
          a2 = *(swift::Demangle::Node **)a2;
        v570 = *((_QWORD *)a2 + 1);
        v276 = *(const std::string::value_type **)v570;
        v278 = *(_QWORD *)(v570 + 8);
        v277 = this;
        goto LABEL_825;
      case 6:
        std::string::append(this, "associated type metadata accessor for ", 0x26uLL);
        v47 = *((unsigned __int8 *)a2 + 18);
        v48 = a2;
        if (v47 == 2)
          goto LABEL_91;
        if (v47 != 5)
          goto LABEL_92;
        goto LABEL_89;
      case 7:
        v44 = "default associated type metadata accessor for ";
        v45 = this;
        v46 = 46;
        goto LABEL_320;
      case 8:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v333 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v333 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v333, &__str);
        v497 = "accessor macro @";
        goto LABEL_1406;
      case 9:
        std::string::append(this, "associated type witness table accessor for ", 0x2BuLL);
        v134 = *((unsigned __int8 *)a2 + 18);
        v135 = a2;
        if (v134 == 2)
          goto LABEL_343;
        if (v134 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v135 = *(swift::Demangle::Node **)a2;
LABEL_343:
          v136 = (swift::Demangle::Node *)*((_QWORD *)v135 + 1);
        }
        else
        {
          v136 = 0;
        }
        std::string::append(this, " : ", 3uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v53 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
        else
          v53 = 0;
        goto LABEL_470;
      case 0xA:
        std::string::append(this, "base witness table accessor for ", 0x20uLL);
        v52 = *((unsigned __int8 *)a2 + 18);
        v48 = a2;
        if (v52 == 2)
          goto LABEL_91;
        if (v52 != 5)
          goto LABEL_92;
LABEL_89:
        if (*((_DWORD *)a2 + 2) < 2u)
        {
LABEL_92:
          v53 = 0;
        }
        else
        {
          v48 = *(swift::Demangle::Node **)a2;
LABEL_91:
          v53 = (swift::Demangle::Node *)*((_QWORD *)v48 + 1);
        }
        ++v8;
LABEL_470:
        v181 = " in ";
        v182 = this;
        v183 = 4;
        goto LABEL_471;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
      case 0xF5:
        v280 = this;
        v281 = 0;
        v282 = a2;
        goto LABEL_831;
      case 0xC:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v489 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v489 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v489, &__str);
        v497 = "body macro @";
        goto LABEL_1406;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        goto LABEL_826;
      case 0x13:
      case 0x4C:
        v283 = (std::string::value_type *)&unk_20AA50335;
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 2;
        goto LABEL_1484;
      case 0x14:
      case 0x17:
      case 0x65:
      case 0x6A:
      case 0x70:
      case 0x92:
        goto LABEL_1014;
      case 0x15:
        v276 = "Builtin.TheTupleType";
        v277 = this;
        v278 = 20;
        goto LABEL_825;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xB4:
      case 0xDB:
      case 0xEA:
      case 0x106:
        v283 = (std::string::value_type *)&unk_20AA50335;
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 0;
        goto LABEL_1484;
      case 0x19:
        v44 = "class metadata base offset for ";
        goto LABEL_109;
      case 0x1A:
        std::string::append(this, "concrete protocol conformance ", 0x1EuLL);
        v145 = *((unsigned __int8 *)a2 + 18);
        if (v145 == 4)
        {
          std::string::append(this, "#", 1uLL);
          v146 = swift::Demangle::DemanglerPrinter::operator<<(this, *(_QWORD *)a2);
          std::string::append(v146, " ", 1uLL);
          v145 = *((unsigned __int8 *)a2 + 18);
        }
        v147 = (swift::Demangle::Node **)a2;
        if ((v145 - 1) < 2)
          goto LABEL_367;
        if (v145 == 5 && *((_DWORD *)a2 + 2))
        {
          v147 = *(swift::Demangle::Node ***)a2;
LABEL_367:
          v148 = *v147;
        }
        else
        {
          v148 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        v195 = *((unsigned __int8 *)a2 + 18);
        v196 = a2;
        if (v195 == 2)
          goto LABEL_517;
        if (v195 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v196 = *(swift::Demangle::Node **)a2;
LABEL_517:
          v197 = (swift::Demangle::Node *)*((_QWORD *)v196 + 1);
        }
        else
        {
          v197 = 0;
        }
        if (*((_BYTE *)a2 + 18) != 5)
          goto LABEL_826;
        if (*((_DWORD *)a2 + 2) < 3u)
          goto LABEL_826;
        v198 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        v199 = *(unsigned __int8 *)(v198 + 18);
        if ((v199 - 1) >= 2 && (v199 != 5 || !*(_DWORD *)(v198 + 8)))
          goto LABEL_826;
        v158 = " with conditional requirements: ";
        v159 = this;
        v160 = 32;
        goto LABEL_525;
      case 0x1B:
        v363 = "pack protocol conformance ";
        v364 = this;
        v365 = 26;
        goto LABEL_1515;
      case 0x1C:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v375 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v375 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v375, &__str);
        v497 = "conformance macro @";
        goto LABEL_1406;
      case 0x1D:
        v490 = *((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u;
        goto LABEL_1487;
      case 0x1E:
        v29 = "coroutine continuation prototype for ";
        goto LABEL_119;
      case 0x1F:
        v476 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v476 = *(swift::Demangle::Node **)a2;
        if (*(_WORD *)(*(_QWORD *)v476 + 16) == 24)
          v408 = 21;
        else
          v408 = 6;
        if (*(_WORD *)(*(_QWORD *)v476 + 16) == 24)
          v283 = "__deallocating_deinit";
        else
          v283 = "deinit";
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 0;
LABEL_1328:
        v424 = 0;
        goto LABEL_1486;
      case 0x20:
      case 0xE8:
        goto LABEL_313;
      case 0x21:
        v366 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v366 = *(swift::Demangle::Node **)a2;
        goto LABEL_1487;
      case 0x22:
        v363 = "dependent associated conformance ";
        v364 = this;
        v365 = 33;
        goto LABEL_1515;
      case 0x23:
        v107 = *((unsigned __int8 *)a2 + 18);
        v108 = a2;
        if (v107 == 2)
          goto LABEL_253;
        if (v107 != 5)
          goto LABEL_254;
        v109 = *((_DWORD *)a2 + 2);
        if (v109 < 2)
          goto LABEL_257;
        v108 = *(swift::Demangle::Node **)a2;
LABEL_253:
        std::string::push_back(this, 46);
        v107 = *((unsigned __int8 *)a2 + 18);
LABEL_254:
        if ((v107 - 1) < 2)
          goto LABEL_301;
        if (v107 != 5)
          goto LABEL_498;
        v109 = *((_DWORD *)a2 + 2);
LABEL_257:
        if (!v109)
          goto LABEL_498;
        goto LABEL_300;
      case 0x24:
        v104 = *((unsigned __int8 *)a2 + 18);
        v105 = (swift::Demangle::Node **)a2;
        if ((v104 - 1) < 2)
          goto LABEL_246;
        if (v104 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v106 = 0;
            goto LABEL_804;
          }
          v105 = *(swift::Demangle::Node ***)a2;
LABEL_246:
          v106 = *v105;
        }
        else
        {
          v106 = 0;
        }
        if (v104 == 2)
          goto LABEL_634;
        if (v104 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_634:
          v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_805;
        }
LABEL_804:
        v11 = 0;
LABEL_805:
        std::string::append(this, ": ", 2uLL);
        goto LABEL_7;
      case 0x25:
      case 0x2A:
        printer_unreachable("should be printed as a child of a DependentGenericSignature");
      case 0x26:
        if (*((_BYTE *)a2 + 18) == 5)
          a2 = *(swift::Demangle::Node **)a2;
        std::function<std::string ()(unsigned long long,unsigned long long)>::operator()((uint64_t)&this[2].__r_.__value_.__r.__words[2], **(unsigned int **)a2, **((unsigned int **)a2 + 1));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        std::string::append(this, (const std::string::value_type *)p_str, size);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_826;
      case 0x27:
        v39 = *((unsigned __int8 *)a2 + 18);
        v40 = (swift::Demangle::Node **)a2;
        if ((v39 - 1) < 2)
          goto LABEL_62;
        if (v39 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v41 = 0;
            goto LABEL_736;
          }
          v40 = *(swift::Demangle::Node ***)a2;
LABEL_62:
          v41 = *v40;
        }
        else
        {
          v41 = 0;
        }
        if (v39 == 2)
          goto LABEL_603;
        if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_603:
          v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_737;
        }
LABEL_736:
        v11 = 0;
LABEL_737:
        std::string::append(this, " == ", 4uLL);
        goto LABEL_7;
      case 0x28:
        v356 = *((unsigned __int8 *)a2 + 18);
        v357 = (swift::Demangle::Node **)a2;
        if ((v356 - 1) < 2)
          goto LABEL_954;
        if (v356 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v358 = 0;
LABEL_1820:
            v573 = 0;
LABEL_1821:
            v615 = v8 + 1;
            std::string::append(this, ".shape == ", 0xAuLL);
            v550 = ".shape";
            v568 = this;
            v569 = 6;
LABEL_1822:
            std::string::append(v568, v550, v569);
            return 0;
          }
          v357 = *(swift::Demangle::Node ***)a2;
LABEL_954:
          v358 = *v357;
        }
        else
        {
          v358 = 0;
        }
        if (v356 == 2)
        {
LABEL_1670:
          v573 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_1821;
        }
        if (v356 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1670;
        }
        goto LABEL_1820;
      case 0x29:
        v486 = *((unsigned __int8 *)a2 + 18);
        v487 = (swift::Demangle::Node **)a2;
        if ((v486 - 1) < 2)
          goto LABEL_1361;
        if (v486 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v488 = 0;
LABEL_1824:
            v583 = 0;
LABEL_1825:
            v616 = v8 + 1;
            std::string::append(this, ": ", 2uLL);
            v617 = "_UnknownLayout";
            v618 = 14;
            switch(**v583)
            {
              case 'C':
                v617 = "AnyObject";
                v618 = 9;
                break;
              case 'D':
                v617 = "_NativeClass";
                v618 = 12;
                break;
              case 'N':
                v617 = "_NativeRefCountedObject";
                v618 = 23;
                break;
              case 'R':
                v617 = "_RefCountedObject";
                v618 = 17;
                break;
              case 'T':
                goto LABEL_1830;
              case 'U':
                break;
              default:
                v619 = **v583 & 0xDF;
                if (v619 == 77)
                {
                  v617 = "_TrivialAtMost";
                  v618 = 14;
                }
                else if (v619 == 69)
                {
LABEL_1830:
                  v617 = "_Trivial";
                  v618 = 8;
                }
                else
                {
                  v618 = 0;
                  v617 = 0;
                }
                break;
            }
            std::string::append(this, v617, v618);
            if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
              goto LABEL_826;
            std::string::append(this, "(", 1uLL);
            if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
              v631 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
            else
              v631 = 0;
            if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
            {
              std::string::append(this, ", ", 2uLL);
              if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
                v437 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 24);
              else
                v437 = 0;
              v439 = (_anonymous_namespace_::NodePrinter *)this;
              v438 = v616;
LABEL_1198:
            }
            goto LABEL_1497;
          }
          v487 = *(swift::Demangle::Node ***)a2;
LABEL_1361:
          v488 = *v487;
        }
        else
        {
          v488 = 0;
        }
        v582 = a2;
        if (v486 == 2)
        {
LABEL_1712:
          v583 = (_BYTE **)*((_QWORD *)v582 + 1);
          goto LABEL_1825;
        }
        if (v486 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v582 = *(swift::Demangle::Node **)a2;
          goto LABEL_1712;
        }
        goto LABEL_1824;
      case 0x2B:
      case 0x2E:
        goto LABEL_826;
      case 0x2C:
        v142 = *((unsigned __int8 *)a2 + 18);
        v143 = (swift::Demangle::Node **)a2;
        if ((v142 - 1) < 2)
          goto LABEL_360;
        if (v142 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v144 = 0;
LABEL_807:
            v11 = 0;
LABEL_808:
            v271 = v11;
            while (1)
            {
              while (1)
              {
                v272 = v271;
                v273 = *((unsigned __int16 *)v271 + 8);
                if (v273 != 232)
                {
                  v275 = (v273 - 44) > 0x26
                      || ((1 << (v273 - 44)) & 0x4000200001) == 0;
                  if (v275 && v273 != 245)
                    std::string::push_back(this, 32);
                  goto LABEL_7;
                }
                v274 = *((unsigned __int8 *)v272 + 18);
                if ((v274 - 1) >= 2)
                  break;
LABEL_811:
                v271 = *(swift::Demangle::Node **)v272;
              }
              v271 = 0;
              if (v274 == 5)
              {
                v271 = 0;
                if (*((_DWORD *)v272 + 2))
                {
                  v272 = *(swift::Demangle::Node **)v272;
                  goto LABEL_811;
                }
              }
            }
          }
          v143 = *(swift::Demangle::Node ***)a2;
LABEL_360:
          v144 = *v143;
        }
        else
        {
          v144 = 0;
        }
        if (v142 == 2)
        {
LABEL_640:
          v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_808;
        }
        if (v142 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_640;
        }
        goto LABEL_807;
      case 0x2D:
        v140 = *((unsigned __int8 *)a2 + 18);
        v67 = (swift::Demangle::Node **)a2;
        if ((v140 - 1) < 2)
          goto LABEL_355;
        if (v140 == 5 && *((_DWORD *)a2 + 2))
          goto LABEL_354;
        goto LABEL_405;
      case 0x2F:
        v95 = "dependent root protocol conformance ";
        v96 = this;
        v97 = 36;
        goto LABEL_326;
      case 0x30:
        v95 = "dependent inherited protocol conformance ";
        v96 = this;
        v97 = 41;
        goto LABEL_326;
      case 0x31:
        v95 = "dependent associated protocol conformance ";
        v96 = this;
        v97 = 42;
LABEL_326:
        std::string::append(v96, v95, v97);
        v127 = *((unsigned __int8 *)a2 + 18);
        if (v127 == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v128 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v128 = 0;
        if (*(_BYTE *)(v128 + 18) == 4)
        {
          std::string::append(this, "#", 1uLL);
          snprintf((char *)&__str, 0x20uLL, "%llu", *(_QWORD *)v128);
          std::string::append(this, (const std::string::value_type *)&__str);
          std::string::append(this, " ", 1uLL);
          v127 = *((unsigned __int8 *)a2 + 18);
        }
        v129 = (swift::Demangle::Node **)a2;
        if ((v127 - 1) < 2)
          goto LABEL_336;
        if (v127 == 5 && *((_DWORD *)a2 + 2))
        {
          v129 = *(swift::Demangle::Node ***)a2;
LABEL_336:
          v130 = *v129;
        }
        else
        {
          v130 = 0;
        }
        v131 = " to ";
        v132 = this;
        v133 = 4;
        goto LABEL_506;
      case 0x32:
        goto LABEL_1487;
      case 0x33:
        v367 = *((unsigned __int8 *)a2 + 18);
        if ((v367 - 1) < 2)
          goto LABEL_977;
        if (v367 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_977:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "didset";
        goto LABEL_1578;
      case 0x34:
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 != 1)
            printer_unreachable("bad directness");
          v313 = "indirect";
          v314 = 8;
        }
        else
        {
          v313 = "direct";
          v314 = 6;
        }
        std::string::append(this, v313, v314);
        v276 = " ";
        goto LABEL_1498;
      case 0x35:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "distributed thunk ";
LABEL_1356:
        v277 = this;
        v278 = 18;
        goto LABEL_825;
      case 0x36:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "distributed accessor for ";
LABEL_1216:
        v277 = this;
        v278 = 25;
        goto LABEL_825;
      case 0x37:
        v276 = "dynamic ";
        goto LABEL_1770;
      case 0x38:
        v276 = "super ";
        goto LABEL_1278;
      case 0x39:
      case 0x55:
        v276 = "Self";
        goto LABEL_1060;
      case 0x3A:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "dynamically replaceable thunk for ";
        v277 = this;
        v278 = 34;
        goto LABEL_825;
      case 0x3B:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "dynamically replaceable key for ";
        v277 = this;
        v278 = 32;
        goto LABEL_825;
      case 0x3C:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "dynamically replaceable variable for ";
        v277 = this;
        v278 = 37;
        goto LABEL_825;
      case 0x3E:
        v44 = "enum case for ";
        goto LABEL_210;
      case 0x3F:
        v276 = "<ERROR TYPE>";
        goto LABEL_1112;
      case 0x42:
        v276 = "@Sendable ";
        goto LABEL_1699;
      case 0x43:
        v413 = *((unsigned __int8 *)a2 + 18);
        if ((v413 - 1) >= 2 && (v413 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_826;
        std::string::push_back(this, 64);
        v414 = *((unsigned __int8 *)a2 + 18);
        if ((v414 - 1) < 2)
          goto LABEL_1139;
        if (v414 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1139:
          v415 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v415 = 0;
        }
        v594 = this;
        v595 = 32;
LABEL_1741:
        std::string::push_back(v594, v595);
        return 0;
      case 0x44:
        std::string::append(this, "@differentiable", 0xFuLL);
        v368 = *(unsigned __int8 *)a2;
        switch(v368)
        {
          case 'r':
            v294 = "(reverse)";
            break;
          case 'l':
            v294 = "(_linear)";
            break;
          case 'f':
            v294 = "(_forward)";
            v295 = this;
            v293 = 10;
LABEL_1674:
            std::string::append(v295, v294, v293);
LABEL_1675:
            std::string::push_back(this, 32);
            goto LABEL_826;
          default:
            goto LABEL_1675;
        }
        v295 = this;
        v293 = 9;
        goto LABEL_1674;
      case 0x45:
        v345 = *((unsigned __int8 *)a2 + 18);
        v346 = (swift::Demangle::Node **)a2;
        if (v345 == 2)
          goto LABEL_934;
        switch(v345)
        {
          case 5:
            v347 = *((_DWORD *)a2 + 2);
            if (v347 != 2)
            {
              v348 = 0;
              goto LABEL_1783;
            }
            v346 = *(swift::Demangle::Node ***)a2;
LABEL_934:
            v348 = 1;
            std::string::append(this, " ", 1uLL);
            v349 = 0;
            v345 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            v348 = 0;
            v603 = 0;
            if ((v349 & 1) == 0)
              goto LABEL_1787;
            goto LABEL_1785;
          case 2:
LABEL_1785:
            v603 = (swift::Demangle::Node *)*((_QWORD *)a2 + v348);
            goto LABEL_1787;
          default:
            v348 = 0;
            v349 = 1;
            break;
        }
        if (v345 != 5)
        {
LABEL_1786:
          v603 = 0;
LABEL_1787:
          v550 = ".Type";
          v568 = this;
          v569 = 5;
          goto LABEL_1822;
        }
        v347 = *((_DWORD *)a2 + 2);
LABEL_1783:
        if (v348 < v347)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1785;
        }
        goto LABEL_1786;
      case 0x46:
        v491 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v491 = *(swift::Demangle::Node **)a2;
        goto LABEL_1487;
      case 0x47:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2])
          goto LABEL_712;
        std::string::append(this, "(extension in ", 0xEuLL);
        v137 = *((unsigned __int8 *)a2 + 18);
        v138 = (swift::Demangle::Node **)a2;
        if ((v137 - 1) < 2)
          goto LABEL_350;
        if (v137 == 5 && *((_DWORD *)a2 + 2))
        {
          v138 = *(swift::Demangle::Node ***)a2;
LABEL_350:
          v139 = *v138;
        }
        else
        {
          v139 = 0;
        }
        std::string::append(this, "):", 2uLL);
LABEL_712:
        v247 = *((unsigned __int8 *)a2 + 18);
        v248 = a2;
        if (v247 == 2)
          goto LABEL_716;
        if (v247 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v248 = *(swift::Demangle::Node **)a2;
LABEL_716:
          v249 = (swift::Demangle::Node *)*((_QWORD *)v248 + 1);
        }
        else
        {
          v249 = 0;
        }
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3 && !this[1].__r_.__value_.__s.__data_[19])
          goto LABEL_721;
        goto LABEL_826;
      case 0x48:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v435 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v435 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v435, &__str);
        v497 = "extension macro @";
        goto LABEL_1406;
      case 0x49:
        v36 = *((unsigned __int8 *)a2 + 18);
        v37 = (swift::Demangle::Node **)a2;
        if ((v36 - 1) < 2)
          goto LABEL_57;
        if (v36 == 5 && *((_DWORD *)a2 + 2))
        {
          v37 = *(swift::Demangle::Node ***)a2;
LABEL_57:
          v38 = *v37;
        }
        else
        {
          v38 = 0;
        }
        v131 = "field offset for ";
        goto LABEL_501;
      case 0x4A:
        goto LABEL_1487;
      case 0x4B:
        v44 = "full type metadata for ";
        v45 = this;
        v46 = 23;
        goto LABEL_320;
      case 0x4D:
        v289 = "function signature specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 33;
        goto LABEL_1370;
      case 0x4E:
      case 0x4F:
        printer_unreachable("should be handled in printSpecializationPrefix");
      case 0x50:
        v315 = *(_QWORD *)a2;
        if ((*(_QWORD *)a2 & 0x400) != 0)
        {
          std::string::append(this, "Existential To Protocol Constrained Generic", 0x2BuLL);
          if ((v315 & 0x40) == 0)
          {
            if ((v315 & 0x80) == 0)
              goto LABEL_1658;
LABEL_1656:
            std::string::append(this, " and ", 5uLL);
LABEL_1657:
            std::string::append(this, "Owned To Guaranteed", 0x13uLL);
            goto LABEL_1658;
          }
          std::string::append(this, " and ", 5uLL);
        }
        else if ((v315 & 0x40) == 0)
        {
          if ((v315 & 0x80) == 0)
          {
            if ((v315 & 0x200) == 0)
            {
              if ((v315 & 0x100) == 0)
              {
                v11 = 0;
                if ((int)v315 <= 127)
                {
                  switch((int)v315)
                  {
                    case 0:
                      v276 = "Constant Propagated Function";
                      v277 = this;
                      v278 = 28;
                      goto LABEL_825;
                    case 1:
                      v276 = "Constant Propagated Global";
                      goto LABEL_1067;
                    case 2:
                      v276 = "Constant Propagated Integer";
                      goto LABEL_1892;
                    case 3:
                      v276 = "Constant Propagated Float";
                      goto LABEL_1216;
                    case 4:
                      v276 = "Constant Propagated String";
                      goto LABEL_1067;
                    case 5:
                      v276 = "Closure Propagated";
                      goto LABEL_1356;
                    case 6:
                      v276 = "Value Promoted from Box";
                      goto LABEL_1772;
                    case 7:
                      v276 = "Stack Promoted from Box";
                      goto LABEL_1772;
                    case 8:
                      v276 = "InOut Converted to Out";
                      goto LABEL_1075;
                    case 9:
                      v276 = "Constant Propagated KeyPath";
LABEL_1892:
                      v277 = this;
                      v278 = 27;
                      goto LABEL_825;
                    case 64:
                      goto LABEL_1899;
                    default:
                      goto LABEL_827;
                  }
                }
                if ((int)v315 > 511)
                {
                  if ((_DWORD)v315 != 512 && (_DWORD)v315 != 1024)
                    goto LABEL_827;
                }
                else if ((_DWORD)v315 != 128 && (_DWORD)v315 != 256)
                {
                  goto LABEL_827;
                }
LABEL_1899:
                printer_unreachable("option sets should have been handled earlier");
              }
              goto LABEL_1664;
            }
            goto LABEL_1662;
          }
          goto LABEL_1657;
        }
        std::string::append(this, "Dead", 4uLL);
        if ((v315 & 0x80) == 0)
        {
LABEL_1658:
          if ((v315 & 0x200) == 0)
          {
            if ((v315 & 0x100) == 0)
              goto LABEL_826;
LABEL_1663:
            std::string::append(this, " and ", 5uLL);
LABEL_1664:
            v276 = "Exploded";
LABEL_1770:
            v277 = this;
            v278 = 8;
            goto LABEL_825;
          }
          std::string::append(this, " and ", 5uLL);
LABEL_1662:
          std::string::append(this, "Guaranteed To Owned", 0x13uLL);
          if ((v315 & 0x100) == 0)
            goto LABEL_826;
          goto LABEL_1663;
        }
        goto LABEL_1656;
      case 0x51:
        v478 = *(_QWORD *)a2;
        v479 = *((_QWORD *)a2 + 1);
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::demangleSymbolAsString(&v647, v478, v479, &__str);
        v480 = v644;
        if (v644 == &v642)
        {
          v481 = 4;
          v480 = &v642;
        }
        else
        {
          if (!v644)
            goto LABEL_1519;
          v481 = 5;
        }
        (*((void (**)(void))*v480 + v481))();
LABEL_1519:
        if (v648 >= 0)
          v538 = HIBYTE(v648);
        else
          v538 = *((_QWORD *)&v647 + 1);
        if (v538)
        {
          if (v648 >= 0)
            v539 = (const std::string::value_type *)&v647;
          else
            v539 = (const std::string::value_type *)v647;
        }
        else
        {
          v539 = *(const std::string::value_type **)a2;
          v538 = *((_QWORD *)a2 + 1);
        }
        std::string::append(this, v539, v538);
        if (SHIBYTE(v648) < 0)
          operator delete((void *)v647);
        goto LABEL_826;
      case 0x53:
        std::string::append(this, "any ", 4uLL);
        v482 = *((unsigned __int8 *)a2 + 18);
        v483 = (swift::Demangle::Node **)a2;
        if ((v482 - 1) < 2)
          goto LABEL_1348;
        if (v482 == 5 && *((_DWORD *)a2 + 2))
        {
          v483 = *(swift::Demangle::Node ***)a2;
LABEL_1348:
          v484 = *v483;
        }
        else
        {
          v484 = 0;
        }
        v565 = v8 + 1;
        std::string::append(this, "<", 1uLL);
        v566 = *((unsigned __int8 *)a2 + 18);
        if (v566 == 2)
          goto LABEL_1623;
        if (v566 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1623:
          v567 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
          v567 = 0;
        }
        v550 = ">";
        goto LABEL_1626;
      case 0x54:
        v412 = ", ";
        goto LABEL_1333;
      case 0x56:
        v329 = "generic partial specialization";
        v330 = this;
        v331 = (uint64_t *)a2;
        v332 = 30;
        goto LABEL_1363;
      case 0x57:
        v329 = "generic not-reabstracted partial specialization";
        v330 = this;
        v331 = (uint64_t *)a2;
        v332 = 47;
LABEL_1363:
        goto LABEL_826;
      case 0x58:
        v44 = "generic protocol witness table for ";
        goto LABEL_319;
      case 0x59:
        v44 = "instantiation function for generic protocol witness table for ";
        v45 = this;
        v46 = 62;
        goto LABEL_320;
      case 0x5A:
        v44 = "resilient protocol witness table for ";
        v45 = this;
        v46 = 37;
        goto LABEL_320;
      case 0x5B:
      case 0x5D:
        v289 = "generic specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 22;
        goto LABEL_1370;
      case 0x5C:
        v289 = "generic not re-abstracted specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 40;
        goto LABEL_1370;
      case 0x5E:
        v409 = *((unsigned __int8 *)a2 + 18);
        v410 = (swift::Demangle::Node **)a2;
        if ((v409 - 1) < 2)
          goto LABEL_1129;
        if (v409 == 5 && *((_DWORD *)a2 + 2))
        {
          v410 = *(swift::Demangle::Node ***)a2;
LABEL_1129:
          v411 = *v410;
        }
        else
        {
          v411 = 0;
        }
        v551 = v8 + 1;
        v552 = *((unsigned __int8 *)a2 + 18);
        if (v552 != 2)
        {
          if (v552 != 5)
            goto LABEL_826;
          v552 = *((_DWORD *)a2 + 2);
          if (v552 < 2)
            goto LABEL_826;
        }
        v553 = v552;
        std::string::append(this, " with ", 6uLL);
        v554 = *((unsigned __int8 *)a2 + 18);
        v555 = a2;
        if (v554 == 2)
          goto LABEL_1589;
        if (v554 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v555 = *(swift::Demangle::Node **)a2;
LABEL_1589:
          v556 = (swift::Demangle::Node *)*((_QWORD *)v555 + 1);
        }
        else
        {
          v556 = 0;
        }
        if ((_DWORD)v553 == 2)
          goto LABEL_826;
        v574 = 2;
        while (1)
        {
          std::string::append(this, " and ", 5uLL);
          v576 = *((unsigned __int8 *)a2 + 18);
          if (v576 == 2)
          {
            v577 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v576 != 5)
              goto LABEL_1679;
            v577 = *((unsigned int *)a2 + 2);
          }
          if (v577 > v574)
          {
            v578 = v576 - 1;
            v579 = a2;
            if (v578 >= 2)
              v579 = *(swift::Demangle::Node **)a2;
            v575 = (swift::Demangle::Node *)*((_QWORD *)v579 + v574);
            goto LABEL_1680;
          }
LABEL_1679:
          v575 = 0;
LABEL_1680:
          if (v553 == ++v574)
            goto LABEL_826;
        }
      case 0x5F:
        v289 = "generic pre-specialization";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 26;
        goto LABEL_1370;
      case 0x60:
        v289 = "inlined generic function";
        v290 = this;
        v291 = (uint64_t *)a2;
        v292 = 24;
LABEL_1370:
        goto LABEL_826;
      case 0x61:
        v44 = "generic type metadata pattern for ";
        v45 = this;
        v46 = 34;
        goto LABEL_320;
      case 0x62:
        v460 = *((unsigned __int8 *)a2 + 18);
        if ((v460 - 1) < 2)
          goto LABEL_1353;
        if (v460 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_1448;
        goto LABEL_1352;
      case 0x63:
      case 0xEB:
        goto LABEL_1516;
      case 0x64:
        v485 = *((unsigned __int8 *)a2 + 18);
        if ((v485 - 1) < 2)
          goto LABEL_1353;
        if (v485 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_1352:
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1353:
          v328 = *(_QWORD *)a2;
        }
        else
        {
LABEL_1448:
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "getter";
        goto LABEL_1578;
      case 0x66:
      case 0xA1:
      case 0xD8:
        goto LABEL_1168;
      case 0x67:
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = -1;
        v284 = a4 & 1;
        v283 = "__ivar_initializer";
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 0;
        goto LABEL_1165;
      case 0x68:
        goto LABEL_1487;
      case 0x69:
        v276 = "@escaping";
        goto LABEL_1802;
      case 0x6B:
        std::string::append(this, "@differentiable", 0xFuLL);
        v452 = *(unsigned __int8 *)a2;
        switch(v452)
        {
          case 'f':
            v276 = "(_forward)";
LABEL_1699:
            v277 = this;
            v278 = 10;
            goto LABEL_825;
          case 'r':
            v276 = "(reverse)";
            break;
          case 'l':
            v276 = "(_linear)";
            break;
          default:
            goto LABEL_826;
        }
        goto LABEL_1802;
      case 0x6C:
        v276 = "@isolated(any)";
        goto LABEL_1456;
      case 0x6D:
        v276 = "sending";
        goto LABEL_1648;
      case 0x6E:
      case 0x6F:
        v293 = *((_QWORD *)a2 + 1);
        if (!v293)
          goto LABEL_826;
        v294 = *(const std::string::value_type **)a2;
        v295 = this;
        goto LABEL_1674;
      case 0x71:
        std::string::append(this, "@convention(", 0xCuLL);
        v334 = *((unsigned __int8 *)a2 + 18);
        if (v334 == 1)
          goto LABEL_1706;
        v335 = (const std::string::value_type ***)a2;
        if (v334 == 2)
          goto LABEL_1843;
        if (v334 != 5)
          goto LABEL_1850;
        v336 = *((_DWORD *)a2 + 2);
        if (v336 != 2)
        {
          if (v336 == 1)
            goto LABEL_1705;
          goto LABEL_1850;
        }
        v335 = *(const std::string::value_type ****)a2;
LABEL_1843:
        std::string::append(this, **v335, (std::string::size_type)(*v335)[1]);
        std::string::append(this, ", mangledCType: \"", 0x11uLL);
        v621 = *((unsigned __int8 *)a2 + 18);
        if (v621 == 2)
          goto LABEL_1847;
        if (v621 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1847:
          v622 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
          v622 = 0;
        }
        std::string::push_back(this, 34);
        goto LABEL_1850;
      case 0x73:
        goto LABEL_826;
      case 0x74:
        std::string::append(this, "for <", 5uLL);
        v471 = *((unsigned __int8 *)a2 + 18);
        if ((v471 - 1) < 2)
          goto LABEL_1307;
        if (v471 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_1539;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1307:
        v472 = *(swift::Demangle::Node **)a2;
        goto LABEL_1540;
      case 0x75:
        v288 = 2 * this[1].__r_.__value_.__s.__data_[15];
        v423 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v423 = *(swift::Demangle::Node **)a2;
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = **((_DWORD **)v423 + 1) + 1;
        v284 = a4 & 1;
        v283 = "implicit closure #";
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
LABEL_1165:
        v424 = 0;
        v408 = 18;
        goto LABEL_1486;
      case 0x76:
      case 0x78:
        v13 = *((unsigned __int8 *)a2 + 18);
        v14 = (swift::Demangle::Node **)a2;
        if ((v13 - 1) < 2)
          goto LABEL_14;
        if (v13 == 5 && *((_DWORD *)a2 + 2))
        {
          v14 = *(swift::Demangle::Node ***)a2;
LABEL_14:
          v15 = *v14;
        }
        else
        {
          v15 = 0;
        }
        std::string::append(this, " ", 1uLL);
        v152 = *((unsigned __int8 *)a2 + 18);
        if (v152 != 5)
          goto LABEL_551;
        v153 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v153 != 3)
          goto LABEL_386;
        v152 = *((unsigned __int8 *)a2 + 18);
        if (v152 != 5)
          goto LABEL_551;
        v153 = *((unsigned int *)a2 + 2);
LABEL_386:
        if (v153 != 4)
          goto LABEL_555;
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v154 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
        else
          v154 = 0;
        v152 = *((unsigned __int8 *)a2 + 18);
LABEL_551:
        switch(v152)
        {
          case 1:
            v11 = *(swift::Demangle::Node **)a2;
            goto LABEL_7;
          case 2:
            v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
            goto LABEL_7;
          case 5:
            v153 = *((unsigned int *)a2 + 2);
LABEL_555:
            if (v153)
            {
              v11 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 8 * (v153 - 1));
              goto LABEL_7;
            }
            break;
        }
        goto LABEL_597;
      case 0x77:
        std::string::append(this, "@substituted ", 0xDuLL);
        v353 = *((unsigned __int8 *)a2 + 18);
        v354 = (swift::Demangle::Node **)a2;
        if ((v353 - 1) < 2)
          goto LABEL_949;
        if (v353 == 5 && *((_DWORD *)a2 + 2))
        {
          v354 = *(swift::Demangle::Node ***)a2;
LABEL_949:
          v355 = *v354;
        }
        else
        {
          v355 = 0;
        }
        std::string::append(this, " for <", 6uLL);
        v543 = *((unsigned __int8 *)a2 + 18);
        if (v543 == 2)
          goto LABEL_1538;
        if (v543 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1538:
          v472 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
LABEL_1539:
          v472 = 0;
        }
LABEL_1540:
        goto LABEL_1541;
      case 0x79:
        v338 = "@yields ";
        v339 = this;
        v340 = 8;
        goto LABEL_1131;
      case 0x7A:
        v338 = "@error ";
        v339 = this;
        v340 = 7;
LABEL_1131:
        std::string::append(v339, v338, v340);
        v412 = " ";
LABEL_1333:
        v477 = this;
        v474 = a2;
        goto LABEL_1334;
      case 0x7B:
        v44 = "inout ";
        v45 = this;
        v46 = 6;
        goto LABEL_320;
      case 0x7C:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = " infix";
        goto LABEL_1278;
      case 0x7D:
        goto LABEL_1487;
      case 0x7E:
        v403 = *((unsigned __int8 *)a2 + 18);
        if ((v403 - 1) < 2)
          goto LABEL_1106;
        if (v403 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1106:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "init";
        goto LABEL_1616;
      case 0x7F:
        v44 = "isolated ";
        goto LABEL_294;
      case 0x80:
        v44 = "sending ";
        goto LABEL_292;
      case 0x81:
        v276 = "@isolated(any) ";
        v277 = this;
        v278 = 15;
        goto LABEL_825;
      case 0x82:
        v276 = "sending ";
        goto LABEL_1770;
      case 0x83:
      case 0x84:
        if (v12 == 131)
          v296 = "key path getter for ";
        else
          v296 = "key path setter for ";
        std::string::append(this, v296, 0x14uLL);
        v297 = *((unsigned __int8 *)a2 + 18);
        v298 = (swift::Demangle::Node **)a2;
        if ((v297 - 1) < 2)
          goto LABEL_846;
        if (v297 == 5 && *((_DWORD *)a2 + 2))
        {
          v298 = *(swift::Demangle::Node ***)a2;
LABEL_846:
          v299 = *v298;
        }
        else
        {
          v299 = 0;
        }
        v511 = v8 + 1;
        std::string::append(this, " : ", 3uLL);
        v512 = *((unsigned __int8 *)a2 + 18);
        v513 = a2;
        if (v512 == 2)
          goto LABEL_1440;
        if (v512 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v513 = *(swift::Demangle::Node **)a2;
LABEL_1440:
          v514 = (swift::Demangle::Node *)*((_QWORD *)v513 + 1);
          if (*((_WORD *)v514 + 8) == 217)
            std::string::append(this, ", ", 2uLL);
          if (*((_BYTE *)a2 + 18) == 5)
          {
            v515 = 2;
            do
            {
              if (v515 >= *((unsigned int *)a2 + 2))
                break;
              v516 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 8 * v515);
              if (*((_WORD *)v516 + 8) == 217)
                std::string::append(this, ", ", 2uLL);
              ++v515;
            }
            while (*((_BYTE *)a2 + 18) == 5);
          }
        }
        goto LABEL_826;
      case 0x85:
      case 0x86:
        std::string::append(this, "key path index ", 0xFuLL);
        v305 = *((unsigned __int16 *)a2 + 8);
        if (v305 == 133)
          v306 = "equality";
        else
          v306 = "hash";
        if (v305 == 133)
          v307 = 8;
        else
          v307 = 4;
        std::string::append(this, v306, v307);
        std::string::append(this, " operator for ", 0xEuLL);
        v308 = *((unsigned __int8 *)a2 + 18);
        v309 = v308 - 1;
        switch(v308)
        {
          case 1:
            v311 = 0;
            v310 = 1;
            v312 = a2;
            goto LABEL_1461;
          case 5:
            v310 = *((_DWORD *)a2 + 2);
            if (v310)
            {
              v311 = (v310 - 1);
              v312 = *(swift::Demangle::Node **)a2;
              v308 = *((_DWORD *)a2 + 2);
              goto LABEL_1461;
            }
            break;
          case 2:
            v310 = 2;
            v311 = 1;
            v308 = 2;
            v312 = a2;
LABEL_1461:
            v519 = (unsigned __int16 *)*((_QWORD *)v312 + v311);
            goto LABEL_1463;
        }
        v308 = 0;
        v310 = 0;
        v519 = 0;
LABEL_1463:
        v520 = v519[8];
        if (v520 == 217)
        {
          --v308;
          v521 = (v310 - 2);
          v522 = a2;
          if (v309 >= 2)
            v522 = *(swift::Demangle::Node **)a2;
          v519 = (unsigned __int16 *)*((_QWORD *)v522 + v521);
          v520 = v519[8];
        }
        if (v520 == 43)
        {
          --v308;
        }
        std::string::append(this, "(", 1uLL);
        if (!v308)
          goto LABEL_1497;
        v523 = v8 + 1;
        v524 = *((unsigned __int8 *)a2 + 18);
        v525 = (swift::Demangle::Node **)a2;
        if ((v524 - 1) < 2)
          goto LABEL_1474;
        if (v524 == 5 && *((_DWORD *)a2 + 2))
        {
          v525 = *(swift::Demangle::Node ***)a2;
LABEL_1474:
          v526 = *v525;
        }
        else
        {
          v526 = 0;
        }
        if (v308 == 1)
        {
LABEL_1497:
          v276 = ")";
LABEL_1498:
          v277 = this;
          v278 = 1;
          goto LABEL_825;
        }
        v531 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          v533 = *((unsigned __int8 *)a2 + 18);
          if (v533 == 2)
          {
            v534 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v533 != 5)
              goto LABEL_1500;
            v534 = *((unsigned int *)a2 + 2);
          }
          if (v534 > v531)
          {
            v535 = v533 - 1;
            v536 = a2;
            if (v535 >= 2)
              v536 = *(swift::Demangle::Node **)a2;
            v532 = (swift::Demangle::Node *)*((_QWORD *)v536 + v531);
            goto LABEL_1501;
          }
LABEL_1500:
          v532 = 0;
LABEL_1501:
          if (v308 == ++v531)
            goto LABEL_1497;
        }
      case 0x87:
        std::string::append(this, "lazy protocol witness table accessor for type ", 0x2EuLL);
        v42 = *((unsigned __int8 *)a2 + 18);
        v43 = (swift::Demangle::Node **)a2;
        if ((v42 - 1) < 2)
          goto LABEL_263;
        if (v42 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_390;
        goto LABEL_262;
      case 0x88:
        std::string::append(this, "lazy protocol witness table cache variable for type ", 0x34uLL);
        v110 = *((unsigned __int8 *)a2 + 18);
        v43 = (swift::Demangle::Node **)a2;
        if ((v110 - 1) < 2)
          goto LABEL_263;
        if (v110 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_262:
          v43 = *(swift::Demangle::Node ***)a2;
LABEL_263:
          v111 = *v43;
        }
        else
        {
LABEL_390:
          v111 = 0;
        }
        v131 = " and conformance ";
LABEL_501:
        v132 = this;
        v133 = 17;
        goto LABEL_506;
      case 0x89:
        v453 = *((unsigned __int8 *)a2 + 18);
        v454 = a2;
        if (v453 == 2)
          goto LABEL_1238;
        if (v453 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v454 = *(swift::Demangle::Node **)a2;
LABEL_1238:
          v455 = (swift::Demangle::Node *)*((_QWORD *)v454 + 1);
        }
        else
        {
          v455 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[9])
          goto LABEL_826;
        std::string::append(this, " #", 2uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          a2 = *(swift::Demangle::Node **)a2;
        v425 = **(_QWORD **)a2 + 1;
        goto LABEL_1169;
      case 0x8A:
        if (*((_BYTE *)a2 + 18) == 5)
        {
          if (*((_DWORD *)a2 + 2) == 3)
            v288 = 1;
          else
            v288 = 2;
        }
        else
        {
          v288 = 2;
        }
        v283 = (std::string::value_type *)&unk_20AA50335;
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        goto LABEL_1484;
      case 0x8B:
        v84 = *((unsigned __int8 *)a2 + 18);
        if ((v84 - 1) < 2)
          goto LABEL_184;
        if (v84 != 5)
          goto LABEL_561;
        if (!*((_DWORD *)a2 + 2))
          goto LABEL_826;
LABEL_184:
        std::string::append(this, "module ", 7uLL);
        v85 = *((unsigned __int8 *)a2 + 18);
        v86 = (swift::Demangle::Node **)a2;
        if ((v85 - 1) < 2)
          goto LABEL_188;
        if (v85 == 5 && *((_DWORD *)a2 + 2))
        {
          v86 = *(swift::Demangle::Node ***)a2;
LABEL_188:
          v87 = *v86;
        }
        else
        {
          v87 = 0;
        }
        v84 = *((unsigned __int8 *)a2 + 18);
LABEL_561:
        if (v84 == 2)
          goto LABEL_564;
        if (v84 != 5)
          goto LABEL_571;
        if (*((_DWORD *)a2 + 2) < 2u)
          goto LABEL_826;
LABEL_564:
        std::string::append(this, " file ", 6uLL);
        v208 = *((unsigned __int8 *)a2 + 18);
        v209 = a2;
        if (v208 == 2)
          goto LABEL_568;
        if (v208 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v209 = *(swift::Demangle::Node **)a2;
LABEL_568:
          v210 = (swift::Demangle::Node *)*((_QWORD *)v209 + 1);
        }
        else
        {
          v210 = 0;
        }
        v84 = *((unsigned __int8 *)a2 + 18);
LABEL_571:
        if (v84 != 5 || *((_DWORD *)a2 + 2) < 3u)
          goto LABEL_826;
        std::string::append(this, " line ", 6uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v211 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
        else
          v211 = 0;
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u)
          goto LABEL_826;
        std::string::append(this, " column ", 8uLL);
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u)
          goto LABEL_597;
        v11 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 24);
        goto LABEL_7;
      case 0x8C:
        goto LABEL_1487;
      case 0x8D:
        v456 = *((unsigned __int8 *)a2 + 18);
        if ((v456 - 1) < 2)
          goto LABEL_1243;
        if (v456 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1243:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "materializeForSet";
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 17;
        goto LABEL_1617;
      case 0x8E:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v401 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v401 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v401, &__str);
        v497 = "member macro @";
        goto LABEL_1406;
      case 0x8F:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v387 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v387 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v387, &__str);
        v497 = "memberAttribute macro @";
        goto LABEL_1406;
      case 0x90:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "merged ";
        goto LABEL_1648;
      case 0x91:
        v392 = *((unsigned __int8 *)a2 + 18);
        v393 = (swift::Demangle::Node **)a2;
        if (v392 == 2)
          goto LABEL_1072;
        switch(v392)
        {
          case 5:
            v394 = *((_DWORD *)a2 + 2);
            if (v394 != 2)
            {
              v395 = 0;
              goto LABEL_1789;
            }
            v393 = *(swift::Demangle::Node ***)a2;
LABEL_1072:
            v395 = 1;
            std::string::append(this, " ", 1uLL);
            v396 = 0;
            v392 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            v395 = 0;
            v604 = 0;
            if ((v396 & 1) == 0)
              goto LABEL_1793;
            goto LABEL_1791;
          case 2:
LABEL_1791:
            v604 = (unsigned __int16 *)*((_QWORD *)a2 + v395);
            goto LABEL_1793;
          default:
            v395 = 0;
            v396 = 1;
            break;
        }
        if (v392 != 5)
        {
LABEL_1792:
          v604 = 0;
LABEL_1793:
          v609 = *((unsigned __int8 *)v604 + 18);
          if ((v609 - 1) >= 2)
          {
            if (v609 != 5 || !*((_DWORD *)v604 + 2))
            {
              v610 = 0;
              goto LABEL_1799;
            }
            v604 = *(unsigned __int16 **)v604;
          }
          v610 = *(unsigned __int16 **)v604;
LABEL_1799:
          v611 = v610[8];
          if ((v611 - 190) < 3 || v611 == 69)
          {
            v276 = ".Protocol";
LABEL_1802:
            v277 = this;
            v278 = 9;
          }
          else
          {
            v276 = ".Type";
LABEL_1108:
            v277 = this;
            v278 = 5;
          }
          goto LABEL_825;
        }
        v394 = *((_DWORD *)a2 + 2);
LABEL_1789:
        if (v395 < v394)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1791;
        }
        goto LABEL_1792;
      case 0x93:
        v44 = "metaclass for ";
        goto LABEL_210;
      case 0x94:
        v16 = "method lookup function for ";
        goto LABEL_311;
      case 0x95:
        v16 = "ObjC metadata update function for ";
        v32 = this;
        v33 = 34;
        goto LABEL_312;
      case 0x96:
        v16 = "ObjC resilient class stub for ";
        v32 = this;
        v33 = 30;
        goto LABEL_312;
      case 0x97:
        v16 = "full ObjC resilient class stub for ";
        v32 = this;
        v33 = 35;
        goto LABEL_312;
      case 0x98:
        v378 = *((unsigned __int8 *)a2 + 18);
        if ((v378 - 1) < 2)
          goto LABEL_1010;
        if (v378 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1010:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "modify";
        goto LABEL_1578;
      case 0x99:
        if (!this[1].__r_.__value_.__s.__data_[4])
          goto LABEL_826;
        goto LABEL_1014;
      case 0x9A:
        v344 = *((unsigned __int8 *)a2 + 18);
        if ((v344 - 1) < 2)
          goto LABEL_929;
        if (v344 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_929:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "nativeOwningAddressor";
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 21;
        goto LABEL_1617;
      case 0x9B:
        v327 = *((unsigned __int8 *)a2 + 18);
        if ((v327 - 1) < 2)
          goto LABEL_905;
        if (v327 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_905:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "nativeOwningMutableAddressor";
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 28;
        goto LABEL_1617;
      case 0x9C:
        v377 = *((unsigned __int8 *)a2 + 18);
        if ((v377 - 1) < 2)
          goto LABEL_1005;
        if (v377 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1005:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "nativePinningAddressor";
        goto LABEL_1554;
      case 0x9D:
        v418 = *((unsigned __int8 *)a2 + 18);
        if ((v418 - 1) < 2)
          goto LABEL_1150;
        if (v418 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1150:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "nativePinningMutableAddressor";
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 29;
        goto LABEL_1617;
      case 0x9E:
        v44 = "nominal type descriptor for ";
        v45 = this;
        v46 = 28;
        goto LABEL_320;
      case 0x9F:
        v44 = "nominal type descriptor runtime record for ";
        v45 = this;
        v46 = 43;
        goto LABEL_320;
      case 0xA0:
        v276 = "@nonobjc ";
        goto LABEL_1802;
      case 0xA2:
        goto LABEL_958;
      case 0xA3:
        std::string::append(this, "predefined ", 0xBuLL);
LABEL_958:
        std::string::append(this, "@objc completion handler block implementation for ", 0x32uLL);
        v359 = *((unsigned __int8 *)a2 + 18);
        if (v359 != 5)
          goto LABEL_961;
        v360 = *((_DWORD *)a2 + 2);
        if (v360 < 4)
          goto LABEL_964;
        v359 = *((unsigned __int8 *)a2 + 18);
LABEL_961:
        v361 = (swift::Demangle::Node **)a2;
        if ((v359 - 1) < 2)
          goto LABEL_966;
        if (v359 != 5)
          goto LABEL_1423;
        v360 = *((_DWORD *)a2 + 2);
LABEL_964:
        if (v360)
        {
          v361 = *(swift::Demangle::Node ***)a2;
LABEL_966:
          v362 = *v361;
        }
        else
        {
LABEL_1423:
          v362 = 0;
        }
        v506 = v8 + 1;
        std::string::append(this, " with result type ", 0x12uLL);
        v507 = *((unsigned __int8 *)a2 + 18);
        v508 = a2;
        if (v507 == 2)
          goto LABEL_1428;
        if (v507 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v508 = *(swift::Demangle::Node **)a2;
LABEL_1428:
          v509 = (swift::Demangle::Node *)*((_QWORD *)v508 + 1);
        }
        else
        {
          v509 = 0;
        }
        v510 = **(_QWORD **)(*(_QWORD *)a2 + 16);
        switch(v510)
        {
          case 0:
            goto LABEL_826;
          case 2:
            v276 = " zero on error";
LABEL_1456:
            v277 = this;
            v278 = 14;
            break;
          case 1:
            v276 = " nonzero on error";
LABEL_1434:
            v277 = this;
            v278 = 17;
            break;
          default:
            v276 = " <invalid error flag>";
            v277 = this;
            v278 = 21;
            break;
        }
        goto LABEL_825;
      case 0xA4:
        v276 = "@objc ";
        goto LABEL_1278;
      case 0xA8:
        v397 = *((unsigned __int8 *)a2 + 18);
        if ((v397 - 1) < 2)
          goto LABEL_1080;
        if (v397 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1080:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "owningAddressor";
        goto LABEL_1575;
      case 0xA9:
        v371 = *((unsigned __int8 *)a2 + 18);
        if ((v371 - 1) < 2)
          goto LABEL_990;
        if (v371 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_990:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "owningMutableAddressor";
        goto LABEL_1554;
      case 0xAA:
        if (this[1].__r_.__value_.__s.__data_[10])
          goto LABEL_1082;
        v372 = "partial apply forwarder";
        v373 = this;
        v374 = 23;
        goto LABEL_1511;
      case 0xAB:
        if (this[1].__r_.__value_.__s.__data_[10])
        {
LABEL_1082:
          v372 = "partial apply";
          v373 = this;
          v374 = 13;
        }
        else
        {
          v372 = "partial apply ObjC forwarder";
          v373 = this;
          v374 = 28;
        }
LABEL_1511:
        std::string::append(v373, v372, v374);
        v537 = *((unsigned __int8 *)a2 + 18);
        if ((v537 - 1) >= 2 && (v537 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_826;
        v363 = " for ";
        v364 = this;
        v365 = 5;
        goto LABEL_1515;
      case 0xAC:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v444 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v444 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v444, &__str);
        v497 = "peer macro @";
        goto LABEL_1406;
      case 0xAD:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = " postfix";
        goto LABEL_1770;
      case 0xAE:
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
          v402 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        else
          v402 = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        v640 = 0;
        v641 = 0;
        v642 = &unk_24C358B70;
        v643 = swift::Demangle::genericParameterName;
        v644 = &v642;
        swift::Demangle::nodeToString(&v645, v402, &__str);
        v497 = "preamble macro @";
LABEL_1406:
        v498 = std::string::insert(&v645, 0, v497);
        v499 = v498->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v646.__r_.__value_.__l.__data_ = *(_OWORD *)&v498->__r_.__value_.__l.__data_;
        v646.__r_.__value_.__r.__words[2] = v499;
        v498->__r_.__value_.__l.__size_ = 0;
        v498->__r_.__value_.__r.__words[2] = 0;
        v498->__r_.__value_.__r.__words[0] = 0;
        v500 = std::string::append(&v646, " expansion #");
        v501 = v500->__r_.__value_.__r.__words[2];
        v647 = *(_OWORD *)&v500->__r_.__value_.__l.__data_;
        v648 = v501;
        v500->__r_.__value_.__l.__size_ = 0;
        v500->__r_.__value_.__r.__words[2] = 0;
        v500->__r_.__value_.__r.__words[0] = 0;
        if (v648 >= 0)
          v502 = (std::string::value_type *)&v647;
        else
          v502 = (std::string::value_type *)v647;
        if (v648 >= 0)
          v503 = HIBYTE(v648);
        else
          v503 = *((_QWORD *)&v647 + 1);
        if (SHIBYTE(v648) < 0)
        {
          operator delete((void *)v647);
          if ((SHIBYTE(v646.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_1414:
            if ((SHIBYTE(v645.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_1415;
            goto LABEL_1422;
          }
        }
        else if ((SHIBYTE(v646.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_1414;
        }
        operator delete(v646.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v645.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1415;
LABEL_1422:
        operator delete(v645.__r_.__value_.__l.__data_);
LABEL_1415:
        v504 = v644;
        if (v644 == &v642)
        {
          v505 = 4;
          v504 = &v642;
        }
        else
        {
          if (!v644)
            goto LABEL_827;
          v505 = 5;
        }
        (*((void (**)(void))*v504 + v505))();
        goto LABEL_827;
      case 0xAF:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = " prefix";
        goto LABEL_1648;
      case 0xB0:
        v457 = *((unsigned __int8 *)a2 + 18);
        if (v457 != 2 && (v457 != 5 || *((_DWORD *)a2 + 2) < 2u))
        {
          if (!this[1].__r_.__value_.__s.__data_[14])
            goto LABEL_826;
          v527 = "(in ";
          goto LABEL_1704;
        }
        if (this[1].__r_.__value_.__s.__data_[14])
        {
          std::string::push_back(this, 40);
          v457 = *((unsigned __int8 *)a2 + 18);
        }
        v458 = a2;
        if (v457 == 2)
          goto LABEL_1253;
        if (v457 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v458 = *(swift::Demangle::Node **)a2;
LABEL_1253:
          v459 = (swift::Demangle::Node *)*((_QWORD *)v458 + 1);
        }
        else
        {
          v459 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[14])
          goto LABEL_826;
        v527 = " in ";
LABEL_1704:
        std::string::append(this, v527, 4uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
LABEL_1705:
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1706:
        std::string::append(this, **(const std::string::value_type ***)a2, *(_QWORD *)(*(_QWORD *)a2 + 8));
        goto LABEL_1850;
      case 0xB1:
        v44 = "property descriptor for ";
        goto LABEL_307;
      case 0xB2:
        goto LABEL_1487;
      case 0xB3:
        goto LABEL_1487;
      case 0xB5:
        v341 = "protocol symbolic reference 0x";
        v342 = this;
        v343 = 30;
        goto LABEL_1280;
      case 0xB6:
        v49 = *((unsigned __int8 *)a2 + 18);
        v50 = (swift::Demangle::Node **)a2;
        if ((v49 - 1) < 2)
          goto LABEL_78;
        if (v49 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v11 = 0;
            v51 = 0;
            goto LABEL_739;
          }
          v50 = *(swift::Demangle::Node ***)a2;
LABEL_78:
          v51 = *v50;
        }
        else
        {
          v51 = 0;
        }
        v11 = 0;
        if (v49 == 1)
        {
          v219 = 0;
          goto LABEL_740;
        }
        v217 = a2;
        if (v49 == 2)
          goto LABEL_610;
        if (v49 != 5)
          goto LABEL_611;
        if (*((_DWORD *)a2 + 2) < 2u)
        {
          v11 = 0;
        }
        else
        {
          v217 = *(swift::Demangle::Node **)a2;
LABEL_610:
          v11 = (swift::Demangle::Node *)*((_QWORD *)v217 + 1);
LABEL_611:
          if (v49 == 5)
          {
            v218 = *((_DWORD *)a2 + 2);
            if (v218 >= 3)
            {
              v219 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
              if (v218 == 4)
              {
                std::string::append(this, "property behavior storage of ", 0x1DuLL);
                std::string::append(this, " in ", 4uLL);
                std::string::append(this, " : ", 3uLL);
                goto LABEL_7;
              }
LABEL_740:
              if (this[1].__r_.__value_.__s.__data_[6])
              {
                std::string::append(this, " : ", 3uLL);
                std::string::append(this, " in ", 4uLL);
                v11 = v219;
                goto LABEL_7;
              }
              goto LABEL_826;
            }
          }
        }
LABEL_739:
        v219 = 0;
        goto LABEL_740;
      case 0xB7:
        v363 = "protocol conformance ref (type's module) ";
        v364 = this;
        v365 = 41;
        goto LABEL_1515;
      case 0xB8:
        v363 = "protocol conformance ref (protocol's module) ";
        v364 = this;
        v365 = 45;
        goto LABEL_1515;
      case 0xB9:
        v363 = "protocol conformance ref (retroactive) ";
        v364 = this;
        v365 = 39;
        goto LABEL_1515;
      case 0xBA:
        v44 = "protocol descriptor for ";
LABEL_307:
        v45 = this;
        v46 = 24;
        goto LABEL_320;
      case 0xBB:
        v44 = "protocol descriptor runtime record for ";
        v45 = this;
        v46 = 39;
        goto LABEL_320;
      case 0xBC:
        v44 = "protocol conformance descriptor for ";
        goto LABEL_317;
      case 0xBD:
        v44 = "protocol conformance descriptor runtime record for ";
        v45 = this;
        v46 = 51;
        goto LABEL_320;
      case 0xBE:
        v473 = *((unsigned __int8 *)a2 + 18);
        if ((v473 - 1) < 2)
          goto LABEL_1313;
        if (v473 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_826;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1313:
        v474 = *(swift::Demangle::Node **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_826;
        v475 = *((unsigned __int8 *)v474 + 18);
        if ((v475 - 1) < 2 || v475 == 5 && *((_DWORD *)v474 + 2))
          goto LABEL_1642;
        v276 = "Any";
LABEL_1276:
        v277 = this;
        v278 = 3;
        goto LABEL_825;
      case 0xBF:
        v369 = *((unsigned __int8 *)a2 + 18);
        if (v369 == 2)
        {
          v370 = a2;
        }
        else
        {
          if (v369 != 5 || *((_DWORD *)a2 + 2) < 2u)
            goto LABEL_826;
          v370 = *(swift::Demangle::Node **)a2;
        }
        v571 = *(swift::Demangle::Node **)v370;
        std::string::append(this, " & ", 3uLL);
        v572 = *((unsigned __int8 *)v571 + 18);
        if ((v572 - 1) >= 2)
        {
          if (v572 != 5 || !*((_DWORD *)v571 + 2))
            goto LABEL_826;
          v571 = *(swift::Demangle::Node **)v571;
        }
        v474 = *(swift::Demangle::Node **)v571;
LABEL_1642:
        v412 = " & ";
        v477 = this;
LABEL_1334:
        goto LABEL_826;
      case 0xC0:
        v466 = *((unsigned __int8 *)a2 + 18);
        if ((v466 - 1) < 2)
          goto LABEL_1291;
        if (v466 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_826;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1291:
        v467 = *(_DWORD **)a2;
        v468 = *(unsigned __int8 *)(*(_QWORD *)a2 + 18);
        if ((v468 - 1) < 2)
          goto LABEL_1295;
        if (v468 != 5 || !v467[2])
          goto LABEL_826;
        v467 = *(_DWORD **)v467;
LABEL_1295:
        v469 = *(swift::Demangle::Node **)v467;
        v470 = *(unsigned __int8 *)(*(_QWORD *)v467 + 18);
        if ((v470 - 1) < 2 || v470 == 5 && *((_DWORD *)v469 + 2))
        {
          std::string::append(this, " & ", 3uLL);
        }
        if (this[1].__r_.__value_.__s.__data_[1] && this[1].__r_.__value_.__s.__data_[17])
        {
          std::string::append(this, "Swift", 5uLL);
          std::string::append(this, ".", 1uLL);
        }
        v276 = "AnyObject";
        goto LABEL_1802;
      case 0xC1:
        v44 = "protocol self-conformance descriptor for ";
        goto LABEL_221;
      case 0xC2:
        v44 = "protocol self-conformance witness for ";
        goto LABEL_248;
      case 0xC3:
        v44 = "protocol self-conformance witness table for ";
        v45 = this;
        v46 = 44;
        goto LABEL_320;
      case 0xC4:
        std::string::append(this, "protocol witness for ", 0x15uLL);
        v98 = *((unsigned __int8 *)a2 + 18);
        v99 = a2;
        if (v98 == 2)
          goto LABEL_227;
        if (v98 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v99 = *(swift::Demangle::Node **)a2;
LABEL_227:
          v100 = (swift::Demangle::Node *)*((_QWORD *)v99 + 1);
        }
        else
        {
          v100 = 0;
        }
        v181 = " in conformance ";
        goto LABEL_464;
      case 0xC5:
        v44 = "protocol witness table for ";
        goto LABEL_146;
      case 0xC6:
        v44 = "protocol witness table accessor for ";
        goto LABEL_317;
      case 0xC7:
        v44 = "protocol witness table pattern for ";
LABEL_319:
        v45 = this;
        v46 = 35;
        goto LABEL_320;
      case 0xC8:
      case 0xC9:
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "thunk for ", 0xAuLL);
          v34 = *((unsigned __int8 *)a2 + 18);
          if (v34 == 1)
          {
            v35 = 0;
          }
          else if (v34 == 5)
          {
            v207 = *((unsigned int *)a2 + 2);
            if (!(_DWORD)v207)
              goto LABEL_546;
            v35 = v207 - 1;
            a2 = *(swift::Demangle::Node **)a2;
          }
          else
          {
            v11 = 0;
            if (v34 != 2)
              goto LABEL_6;
            v35 = 1;
          }
          v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + v35);
          goto LABEL_6;
        }
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_WORD *)a2 + 8) == 201)
          std::string::append(this, "helper ", 7uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          v75 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          v75 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        v162 = *((unsigned __int8 *)a2 + 18);
        if (v162 == 2)
        {
          v163 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v162 != 5)
            goto LABEL_587;
          v163 = *((unsigned int *)a2 + 2);
        }
        if (v163 > v75 + 1)
        {
          v212 = v162 - 1;
          v213 = a2;
          if (v212 >= 2)
            v213 = *(swift::Demangle::Node **)a2;
          v214 = (swift::Demangle::Node *)*((_QWORD *)v213 + v75 + 1);
          goto LABEL_588;
        }
LABEL_587:
        v214 = 0;
LABEL_588:
        v203 = " to ";
        v204 = this;
        v205 = 4;
        goto LABEL_589;
      case 0xCA:
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 4)
        {
          v75 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          v75 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        if (*((_BYTE *)a2 + 18) == 5 && *((unsigned int *)a2 + 2) > (v75 | 2))
          v149 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 8 * (v75 | 2));
        else
          v149 = 0;
        std::string::append(this, " to ", 4uLL);
        v150 = *((unsigned __int8 *)a2 + 18);
        if (v150 == 2)
        {
          v151 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v150 != 5)
            goto LABEL_533;
          v151 = *((unsigned int *)a2 + 2);
        }
        if (v151 > v75 + 1)
        {
          v200 = v150 - 1;
          v201 = a2;
          if (v200 >= 2)
            v201 = *(swift::Demangle::Node **)a2;
          v202 = (swift::Demangle::Node *)*((_QWORD *)v201 + v75 + 1);
LABEL_534:
          v203 = " self ";
          v204 = this;
          v205 = 6;
LABEL_589:
          std::string::append(v204, v203, v205);
          v215 = *((unsigned __int8 *)a2 + 18);
          v216 = v215 - 1;
          if ((_DWORD)v215 != 1)
          {
            if ((_DWORD)v215 == 2)
            {
LABEL_596:
              v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + v75);
              goto LABEL_7;
            }
            if ((_DWORD)v215 != 5)
            {
LABEL_597:
              v11 = 0;
              goto LABEL_7;
            }
            v215 = *((unsigned int *)a2 + 2);
          }
          if (v215 > v75)
          {
            if (v216 >= 2)
              a2 = *(swift::Demangle::Node **)a2;
            goto LABEL_596;
          }
          goto LABEL_597;
        }
LABEL_533:
        v202 = 0;
        goto LABEL_534;
      case 0xCB:
        v122 = *((unsigned __int8 *)a2 + 18);
        v123 = (swift::Demangle::Node **)a2;
        if ((v122 - 1) < 2)
          goto LABEL_290;
        if (v122 == 5 && *((_DWORD *)a2 + 2))
        {
          v123 = *(swift::Demangle::Node ***)a2;
LABEL_290:
          v124 = *v123;
        }
        else
        {
          v124 = 0;
        }
        v131 = " with global actor constraint ";
        v132 = this;
        v133 = 30;
        goto LABEL_506;
      case 0xCC:
        v465 = *((unsigned __int8 *)a2 + 18);
        if ((v465 - 1) < 2)
          goto LABEL_1286;
        if (v465 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1286:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "read";
LABEL_1616:
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 4;
        goto LABEL_1617;
      case 0xCD:
        std::string::append(this, "related decl '", 0xEuLL);
        v55 = (const std::string::value_type ***)a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v55 = *(const std::string::value_type ****)a2;
        std::string::append(this, **v55, (std::string::size_type)(*v55)[1]);
        std::string::append(this, "' for ", 6uLL);
        v56 = *((unsigned __int8 *)a2 + 18);
        if (v56 == 2)
          goto LABEL_105;
        if (v56 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_315;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_105:
        v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        goto LABEL_6;
      case 0xCE:
        v112 = *((unsigned __int8 *)a2 + 18);
        if (v112 != 2 && (v112 != 5 || *((_DWORD *)a2 + 2) != 2))
          goto LABEL_826;
        std::string::append(this, "retroactive @ ", 0xEuLL);
        v113 = *((unsigned __int8 *)a2 + 18);
        v114 = (swift::Demangle::Node **)a2;
        if ((v113 - 1) < 2)
          goto LABEL_272;
        if (v113 == 5 && *((_DWORD *)a2 + 2))
        {
          v114 = *(swift::Demangle::Node ***)a2;
LABEL_272:
          v115 = *v114;
        }
        else
        {
          v115 = 0;
        }
        goto LABEL_507;
      case 0xCF:
        v379 = *((unsigned __int8 *)a2 + 18);
        if ((v379 - 1) < 2 || v379 == 5 && *((_DWORD *)a2 + 2))
          goto LABEL_1516;
LABEL_1014:
        v276 = *(const std::string::value_type **)a2;
        v278 = *((_QWORD *)a2 + 1);
        v277 = this;
        goto LABEL_825;
      case 0xD0:
        v44 = "__shared ";
LABEL_294:
        v45 = this;
        v46 = 9;
        goto LABEL_320;
      case 0xD1:
        v44 = "__owned ";
LABEL_292:
        v45 = this;
        v46 = 8;
        goto LABEL_320;
      case 0xD2:
        v29 = "@box ";
        v30 = this;
        v31 = 5;
        goto LABEL_297;
      case 0xD3:
        v68 = *((unsigned __int8 *)a2 + 18);
        v69 = (swift::Demangle::Node **)a2;
        if ((v68 - 1) < 2)
          goto LABEL_152;
        if (v68 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
LABEL_498:
            v11 = 0;
            goto LABEL_6;
          }
          v69 = *(swift::Demangle::Node ***)a2;
LABEL_152:
          v11 = *v69;
        }
        else
        {
          v11 = 0;
        }
        if (v68 == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          v528 = *(_QWORD *)(*(_QWORD *)a2 + 16);
          v529 = v8 + 1;
          std::string::push_back(this, 32);
          if (!v528)
            goto LABEL_826;
          std::string::append(this, " <", 2uLL);
          v530 = *(unsigned __int8 *)(v528 + 18);
          if (v530 == 5)
          {
            v623 = (unsigned int *)(v528 + 8);
            v624 = *(unsigned int *)(v528 + 8);
            if (!(_DWORD)v624
            {
LABEL_1541:
              std::string::push_back(this, 62);
              goto LABEL_826;
            }
          }
          else
          {
            if (v530 != 2)
            {
              if (v530 == 1)
              goto LABEL_1541;
            }
            v623 = (unsigned int *)(v528 + 8);
            v624 = 2;
          }
          v625 = 1;
          while (1)
          {
            std::string::append(this, ", ", 2uLL);
            v627 = *(unsigned __int8 *)(v528 + 18);
            if (v627 == 2)
            {
              v628 = *(unsigned __int8 *)(v528 + 18);
            }
            else
            {
              if (v627 != 5)
                goto LABEL_1856;
              v628 = *v623;
            }
            if (v628 > v625)
            {
              v629 = v627 - 1;
              v630 = (swift::Demangle::Node **)v528;
              if (v629 >= 2)
                v630 = *(swift::Demangle::Node ***)v528;
              v626 = v630[v625];
              goto LABEL_1857;
            }
LABEL_1856:
            v626 = 0;
LABEL_1857:
            if (v624 == ++v625)
              goto LABEL_1541;
          }
        }
        goto LABEL_6;
      case 0xD4:
        std::string::push_back(this, 123);
        v447 = *((unsigned __int8 *)a2 + 18);
        if ((v447 - 1) >= 2 && (v447 != 5 || !*((_DWORD *)a2 + 2)))
          goto LABEL_1758;
        v448 = v8 + 1;
        std::string::push_back(this, 32);
        v449 = *((unsigned __int8 *)a2 + 18);
        v450 = (swift::Demangle::Node **)a2;
        if ((v449 - 1) < 2)
          goto LABEL_1224;
        if (v449 == 5 && *((_DWORD *)a2 + 2))
        {
          v450 = *(swift::Demangle::Node ***)a2;
LABEL_1224:
          v451 = *v450;
        }
        else
        {
          v451 = 0;
        }
        v596 = 1;
        while (2)
        {
          v598 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v598 == 2)
            goto LABEL_1749;
          if ((_DWORD)v598 == 5)
          {
            v598 = *((unsigned int *)a2 + 2);
LABEL_1749:
            if (v598 > v596)
            {
              std::string::push_back(this, 44);
              std::string::push_back(this, 32);
              v599 = *((unsigned __int8 *)a2 + 18);
              if (v599 == 2)
              {
                v600 = *((unsigned __int8 *)a2 + 18);
              }
              else
              {
                if (v599 != 5)
                  goto LABEL_1744;
                v600 = *((unsigned int *)a2 + 2);
              }
              if (v600 > v596)
              {
                v601 = v599 - 1;
                v602 = a2;
                if (v601 >= 2)
                  v602 = *(swift::Demangle::Node **)a2;
                v597 = (swift::Demangle::Node *)*((_QWORD *)v602 + v596);
                goto LABEL_1745;
              }
LABEL_1744:
              v597 = 0;
LABEL_1745:
              ++v596;
              continue;
            }
          }
          break;
        }
LABEL_1758:
        v276 = " }";
LABEL_1759:
        v277 = this;
        v278 = 2;
        goto LABEL_825;
      case 0xD5:
      case 0xD6:
        if (v12 == 214)
          v29 = "let ";
        else
          v29 = "var ";
        v30 = this;
        v31 = 4;
        goto LABEL_297;
      case 0xD7:
        v398 = *((unsigned __int8 *)a2 + 18);
        if ((v398 - 1) < 2)
          goto LABEL_1087;
        if (v398 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1087:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "setter";
LABEL_1578:
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 6;
        goto LABEL_1617;
      case 0xD9:
        v276 = "serialized";
        goto LABEL_1699;
      case 0xDA:
        v29 = "static ";
        v30 = this;
        v31 = 7;
        goto LABEL_297;
      case 0xDC:
        v633 = "subscript";
        v634 = 9;
        v632 = -1;
        v284 = a4 & 1;
        v283 = (std::string::value_type *)&unk_20AA50335;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 2;
        v424 = 0;
        goto LABEL_1485;
      case 0xDD:
        if (this[1].__r_.__value_.__s.__data_[3])
        {
          std::string::append(this, " with unmangled suffix ", 0x17uLL);
          v647 = *(_OWORD *)a2;
          llvm::StringRef::str((const void **)&v647, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            __str = __p;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_826;
      case 0xDF:
        std::string::append(this, "(", 1uLL);
        goto LABEL_1497;
      case 0xE0:
        if (ChildIf)
        {
          std::string::append(this, *(const std::string::value_type **)ChildIf, *(_QWORD *)(ChildIf + 8));
          std::string::append(this, ": ", 2uLL);
        }
          goto LABEL_826;
        v276 = "...";
        goto LABEL_1276;
      case 0xE1:
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = ": ";
        goto LABEL_1759;
      case 0xE2:
        v302 = "Pack{";
        v303 = this;
        v304 = 5;
        goto LABEL_956;
      case 0xE3:
      case 0xE4:
        if (v12 == 227)
          v300 = "@direct";
        else
          v300 = "@indirect";
        if (v12 == 227)
          v301 = 7;
        else
          v301 = 9;
        std::string::append(this, v300, v301);
        v302 = " Pack{";
        v303 = this;
        v304 = 6;
LABEL_956:
        std::string::append(v303, v302, v304);
        v276 = "}";
        goto LABEL_1498;
      case 0xE5:
        v44 = "repeat ";
        goto LABEL_206;
      case 0xE6:
        std::string::append(this, "/* level: ", 0xAuLL);
        v54 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v54 = *(swift::Demangle::Node **)a2;
        snprintf((char *)&__str, 0x20uLL, "%llu", **((_QWORD **)v54 + 1));
        std::string::append(this, (const std::string::value_type *)&__str);
        std::string::append(this, " */ ", 4uLL);
        v44 = "each ";
        v45 = this;
        v46 = 5;
        goto LABEL_320;
      case 0xE7:
        printer_unreachable("should be handled in Node::Kind::PackElement");
      case 0xE9:
        v341 = "type symbolic reference 0x";
        v342 = this;
        v343 = 26;
        goto LABEL_1280;
      case 0xEC:
        v119 = *((unsigned __int8 *)a2 + 18);
        v120 = v119 - 1;
        v121 = a2;
        if ((v119 - 1) >= 2)
          v121 = *(swift::Demangle::Node **)a2;
        if (*(_WORD *)(*(_QWORD *)v121 + 16) != 290)
        {
          if (v120 >= 2)
          {
LABEL_314:
            if (v119 != 5 || !*((_DWORD *)a2 + 2))
            {
LABEL_315:
              v11 = 0;
              goto LABEL_6;
            }
LABEL_4:
            a2 = *(swift::Demangle::Node **)a2;
          }
LABEL_5:
          v11 = *(swift::Demangle::Node **)a2;
LABEL_6:
          ++v8;
          goto LABEL_7;
        }
        v496 = (swift::Demangle::Node **)a2;
        if (v120 < 2)
          goto LABEL_1389;
        if (v119 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v281 = 0;
            goto LABEL_1834;
          }
          v496 = *(swift::Demangle::Node ***)a2;
LABEL_1389:
          v281 = *v496;
        }
        else
        {
          v281 = 0;
        }
        if (v119 == 2)
        {
LABEL_1733:
          v593 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
          goto LABEL_1835;
        }
        if (v119 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
          goto LABEL_1733;
        }
LABEL_1834:
        v593 = 0;
LABEL_1835:
        v620 = *((unsigned __int8 *)v593 + 18);
        if ((v620 - 1) >= 2)
        {
          if (v620 != 5 || !*((_DWORD *)v593 + 2))
          {
            v282 = 0;
LABEL_1841:
            v280 = this;
LABEL_831:
            goto LABEL_826;
          }
          v593 = *(swift::Demangle::Node **)v593;
        }
        v282 = *(swift::Demangle::Node **)v593;
        goto LABEL_1841;
      case 0xED:
        v44 = "type metadata for ";
        v45 = this;
        v46 = 18;
        goto LABEL_320;
      case 0xEE:
        v44 = "type metadata accessor for ";
        goto LABEL_146;
      case 0xEF:
        v44 = "type metadata completion function for ";
        goto LABEL_248;
      case 0xF0:
        v44 = "type metadata instantiation cache for ";
LABEL_248:
        v45 = this;
        v46 = 38;
        goto LABEL_320;
      case 0xF1:
        v44 = "type metadata instantiation function for ";
        goto LABEL_221;
      case 0xF2:
        v44 = "type metadata singleton initialization cache for ";
        v45 = this;
        v46 = 49;
        goto LABEL_320;
      case 0xF3:
        v44 = "demangling cache variable for type metadata for ";
        v45 = this;
        v46 = 48;
        goto LABEL_320;
      case 0xF4:
        v44 = "lazy cache variable for type metadata for ";
        goto LABEL_278;
      case 0xF6:
        v276 = "unknown index";
        v277 = this;
        v278 = 13;
        goto LABEL_825;
      case 0xF7:
        v116 = "weak";
        v117 = this;
        v118 = 4;
        goto LABEL_280;
      case 0xF8:
        v116 = "unowned";
        v117 = this;
        v118 = 7;
        goto LABEL_280;
      case 0xF9:
        v116 = "unowned(unsafe)";
        v117 = this;
        v118 = 15;
LABEL_280:
        std::string::append(v117, v116, v118);
        v44 = " ";
        v45 = this;
        v46 = 1;
        goto LABEL_320;
      case 0xFA:
        v376 = *((unsigned __int8 *)a2 + 18);
        if ((v376 - 1) < 2)
          goto LABEL_1000;
        if (v376 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1000:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "unsafeAddressor";
LABEL_1575:
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 15;
        goto LABEL_1617;
      case 0xFB:
        v380 = *((unsigned __int8 *)a2 + 18);
        if ((v380 - 1) < 2)
          goto LABEL_1023;
        if (v380 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1023:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "unsafeMutableAddressor";
LABEL_1554:
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 22;
        goto LABEL_1617;
      case 0xFC:
        v70 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v70 = *(swift::Demangle::Node **)a2;
        v71 = **(_QWORD **)v70;
        if (v71 >= 0x18)
          printer_unreachable("bad value witness kind");
        std::string::append(this, (&off_24C3597D0)[(int)v71], qword_20AA55CA0[(int)v71]);
        if (this[1].__r_.__value_.__s.__data_[12])
        {
          v72 = " for ";
          v73 = this;
          v74 = 5;
        }
        else
        {
          v72 = " value witness for ";
          v73 = this;
          v74 = 19;
        }
        std::string::append(v73, v72, v74);
        v193 = *((unsigned __int8 *)a2 + 18);
        if (v193 == 2)
          goto LABEL_497;
        if (v193 == 5)
          goto LABEL_495;
        goto LABEL_498;
      case 0xFD:
        v29 = "value witness table for ";
        v30 = this;
        v31 = 24;
        goto LABEL_297;
      case 0xFE:
        v283 = (std::string::value_type *)&unk_20AA50335;
        v633 = (char *)&unk_20AA50335;
        v634 = 0;
        v632 = -1;
        v284 = a4 & 1;
        v285 = (_anonymous_namespace_::NodePrinter *)this;
        v286 = (uint64_t *)a2;
        v287 = v8;
        v288 = 1;
LABEL_1484:
        v424 = 1;
LABEL_1485:
        v408 = 0;
LABEL_1486:
LABEL_1487:
        v11 = v337;
        goto LABEL_827;
      case 0xFF:
        std::string::append(this, "vtable thunk for ", 0x11uLL);
        v61 = *((unsigned __int8 *)a2 + 18);
        v62 = a2;
        if (v61 == 2)
          goto LABEL_125;
        if (v61 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v62 = *(swift::Demangle::Node **)a2;
LABEL_125:
          v63 = (swift::Demangle::Node *)*((_QWORD *)v62 + 1);
        }
        else
        {
          v63 = 0;
        }
        v181 = " dispatching to ";
LABEL_464:
        v182 = this;
        v183 = 16;
LABEL_471:
        std::string::append(v182, v181, v183);
        v184 = *((unsigned __int8 *)a2 + 18);
        if ((v184 - 1) < 2)
          goto LABEL_475;
        if (v184 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_597;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_475:
        v11 = *(swift::Demangle::Node **)a2;
        goto LABEL_7;
      case 0x100:
        v276 = "override ";
        goto LABEL_1802;
      case 0x101:
        v388 = *((unsigned __int8 *)a2 + 18);
        if ((v388 - 1) < 2)
          goto LABEL_1046;
        if (v388 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1046:
          v328 = *(_QWORD *)a2;
        }
        else
        {
          v328 = 0;
        }
        v517 = a4 & 1;
        v518 = "willset";
        v540 = (_anonymous_namespace_::NodePrinter *)this;
        v541 = v8;
        v542 = 7;
LABEL_1617:
        goto LABEL_827;
      case 0x102:
        v29 = "reflection metadata builtin descriptor ";
        v30 = this;
        v31 = 39;
        goto LABEL_297;
      case 0x103:
        v29 = "reflection metadata field descriptor ";
LABEL_119:
        v30 = this;
        v31 = 37;
        goto LABEL_297;
      case 0x104:
        v29 = "reflection metadata associated type descriptor ";
        v30 = this;
        v31 = 47;
        goto LABEL_297;
      case 0x105:
        v29 = "reflection metadata superclass descriptor ";
        v30 = this;
        v31 = 42;
        goto LABEL_297;
      case 0x107:
        v16 = "curry thunk of ";
        v32 = this;
        v33 = 15;
        goto LABEL_312;
      case 0x108:
        v16 = "dispatch thunk of ";
        goto LABEL_274;
      case 0x109:
        v16 = "method descriptor for ";
        v32 = this;
        v33 = 22;
        goto LABEL_312;
      case 0x10A:
        v44 = "protocol requirements base descriptor for ";
        goto LABEL_278;
      case 0x10B:
        std::string::append(this, "associated conformance descriptor for ", 0x26uLL);
        v59 = *((unsigned __int8 *)a2 + 18);
        v60 = (swift::Demangle::Node **)a2;
        if ((v59 - 1) < 2)
          goto LABEL_130;
        if (v59 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_392;
        goto LABEL_129;
      case 0x10C:
        std::string::append(this, "default associated conformance accessor for ", 0x2CuLL);
        v64 = *((unsigned __int8 *)a2 + 18);
        v60 = (swift::Demangle::Node **)a2;
        if ((v64 - 1) < 2)
          goto LABEL_130;
        if (v64 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_129:
          v60 = *(swift::Demangle::Node ***)a2;
LABEL_130:
          v65 = *v60;
        }
        else
        {
LABEL_392:
          v65 = 0;
        }
        std::string::append(this, ".", 1uLL);
        v155 = *((unsigned __int8 *)a2 + 18);
        v156 = a2;
        if (v155 == 2)
          goto LABEL_397;
        if (v155 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v156 = *(swift::Demangle::Node **)a2;
LABEL_397:
          v157 = (swift::Demangle::Node *)*((_QWORD *)v156 + 1);
        }
        else
        {
          v157 = 0;
        }
        v158 = ": ";
        v159 = this;
        v160 = 2;
LABEL_525:
        std::string::append(v159, v158, v160);
        if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
          goto LABEL_597;
LABEL_721:
        v11 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
        goto LABEL_7;
      case 0x10D:
        std::string::append(this, "base conformance descriptor for ", 0x20uLL);
        v101 = *((unsigned __int8 *)a2 + 18);
        v102 = (swift::Demangle::Node **)a2;
        if ((v101 - 1) < 2)
          goto LABEL_233;
        if (v101 == 5 && *((_DWORD *)a2 + 2))
        {
          v102 = *(swift::Demangle::Node ***)a2;
LABEL_233:
          v103 = *v102;
        }
        else
        {
          v103 = 0;
        }
        v131 = ": ";
        v132 = this;
        v133 = 2;
LABEL_506:
        std::string::append(v132, v131, v133);
        goto LABEL_507;
      case 0x10E:
        v44 = "associated type descriptor for ";
LABEL_109:
        v45 = this;
        v46 = 31;
        goto LABEL_320;
      case 0x10F:
        v276 = " async";
LABEL_1278:
        v277 = this;
        v278 = 6;
        goto LABEL_825;
      case 0x110:
        v276 = " throws";
        goto LABEL_1648;
      case 0x111:
        std::string::append(this, " throws(", 8uLL);
        v436 = *((unsigned __int8 *)a2 + 18);
        if (v436 == 1)
          goto LABEL_1197;
        if (v436 != 5 || *((_DWORD *)a2 + 2) != 1)
          goto LABEL_1497;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_1197:
        v437 = *(swift::Demangle::Node **)a2;
        v438 = v8 + 1;
        v439 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1198;
      case 0x112:
        v276 = " empty-list ";
LABEL_1112:
        v277 = this;
        v278 = 12;
        goto LABEL_825;
      case 0x113:
        v276 = " first-element-marker ";
        goto LABEL_1075;
      case 0x114:
        v276 = " variadic-marker ";
        goto LABEL_1434;
      case 0x115:
        std::string::append(this, "outlined bridged method (", 0x19uLL);
        std::string::append(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        v276 = ") of ";
        goto LABEL_1108;
      case 0x116:
        std::string::append(this, "outlined copy of ", 0x11uLL);
        v57 = *((unsigned __int8 *)a2 + 18);
        v58 = (swift::Demangle::Node **)a2;
        if ((v57 - 1) < 2)
          goto LABEL_198;
        if (v57 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_400;
        goto LABEL_197;
      case 0x117:
        std::string::append(this, "outlined consume of ", 0x14uLL);
        v89 = *((unsigned __int8 *)a2 + 18);
        v58 = (swift::Demangle::Node **)a2;
        if ((v89 - 1) < 2)
          goto LABEL_198;
        if (v89 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_197:
          v58 = *(swift::Demangle::Node ***)a2;
LABEL_198:
          v90 = *v58;
        }
        else
        {
LABEL_400:
          v90 = 0;
        }
        v161 = *((unsigned __int8 *)a2 + 18);
        if (v161 == 2)
          goto LABEL_511;
        if (v161 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_826;
        goto LABEL_510;
      case 0x118:
        v16 = "outlined retain of ";
        v32 = this;
        v33 = 19;
        goto LABEL_312;
      case 0x119:
        v16 = "outlined release of ";
        goto LABEL_237;
      case 0x11A:
        v16 = "outlined init with take of ";
        goto LABEL_311;
      case 0x11B:
      case 0x15E:
        v16 = "outlined init with copy of ";
        goto LABEL_311;
      case 0x11C:
      case 0x15F:
        v16 = "outlined assign with take of ";
        goto LABEL_46;
      case 0x11D:
      case 0x160:
        v16 = "outlined assign with copy of ";
LABEL_46:
        v32 = this;
        v33 = 29;
        goto LABEL_312;
      case 0x11E:
      case 0x161:
        v16 = "outlined destroy of ";
LABEL_237:
        v32 = this;
        v33 = 20;
        goto LABEL_312;
      case 0x11F:
        v404 = "outlined variable #";
        v405 = this;
        v406 = 19;
        goto LABEL_1188;
      case 0x120:
        v404 = "outlined read-only object #";
        v405 = this;
        v406 = 27;
LABEL_1188:
        std::string::append(v405, v404, v406);
        v277 = swift::Demangle::DemanglerPrinter::operator<<(this, *(_QWORD *)a2);
        v276 = " of ";
        v278 = 4;
        goto LABEL_825;
      case 0x121:
        v445 = *((unsigned __int8 *)a2 + 18);
        v446 = (swift::Demangle::Node *const *)a2;
        if ((v445 - 1) < 2)
          goto LABEL_1690;
        if (v445 == 5)
        {
          v446 = *(swift::Demangle::Node *const **)a2;
        }
        else
        {
          v446 = 0;
LABEL_1690:
          if (v445 != 5)
          {
            v580 = (swift::Demangle::Node *const *)((char *)a2 + 8);
            if (v445 != 1)
              v580 = 0;
            if (v445 == 2)
              v581 = (swift::Demangle::Node *const *)((char *)a2 + 16);
            else
              v581 = v580;
LABEL_1697:
            goto LABEL_826;
          }
        }
        v581 = (swift::Demangle::Node *const *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_1697;
      case 0x123:
        v29 = "module descriptor ";
        v30 = this;
        v31 = 18;
        goto LABEL_297;
      case 0x124:
        v29 = "extension descriptor ";
        goto LABEL_241;
      case 0x125:
        v29 = "anonymous descriptor ";
LABEL_241:
        v30 = this;
        v31 = 21;
        goto LABEL_297;
      case 0x126:
        v363 = "generic parameter reference for associated type ";
        v364 = this;
        v365 = 48;
LABEL_1515:
        std::string::append(v364, v363, v365);
LABEL_1516:
        goto LABEL_826;
      case 0x127:
        v419 = *((unsigned __int8 *)a2 + 18);
        if ((v419 - 1) < 2)
          goto LABEL_1155;
        if (v419 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1155:
          v420 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v420 = 0;
        }
        v276 = "?";
        goto LABEL_1498;
      case 0x128:
        std::string::append(this, "[", 1uLL);
        v416 = *((unsigned __int8 *)a2 + 18);
        if ((v416 - 1) < 2)
          goto LABEL_1145;
        if (v416 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1145:
          v417 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v417 = 0;
        }
        v547 = v8 + 1;
        v546 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1592;
      case 0x129:
        std::string::append(this, "[", 1uLL);
        v381 = *((unsigned __int8 *)a2 + 18);
        v382 = (swift::Demangle::Node **)a2;
        if ((v381 - 1) < 2)
          goto LABEL_1029;
        if (v381 == 5 && *((_DWORD *)a2 + 2))
        {
          v382 = *(swift::Demangle::Node ***)a2;
LABEL_1029:
          v383 = *v382;
        }
        else
        {
          v383 = 0;
        }
        v544 = v8 + 1;
        std::string::append(this, " : ", 3uLL);
        v545 = *((unsigned __int8 *)a2 + 18);
        if (v545 == 2)
          goto LABEL_1560;
        if (v545 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1560:
          v417 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        }
        else
        {
          v417 = 0;
        }
        v546 = (_anonymous_namespace_::NodePrinter *)this;
        v547 = v544;
LABEL_1592:
        v550 = "]";
LABEL_1626:
        v568 = this;
        v569 = 1;
        goto LABEL_1822;
      case 0x12A:
        std::string::append(this, "(", 1uLL);
        v389 = *((unsigned __int8 *)a2 + 18);
        if ((v389 - 1) < 2)
          goto LABEL_1055;
        if (v389 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1055:
          v390 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v390 = 0;
        }
        v550 = ")";
        goto LABEL_1626;
      case 0x12B:
        std::string::append(this, "accessor function at ", 0x15uLL);
LABEL_1168:
        v425 = *(_QWORD *)a2;
LABEL_1169:
        swift::Demangle::DemanglerPrinter::operator<<(this, v425);
        goto LABEL_826;
      case 0x12C:
        v66 = *((unsigned __int8 *)a2 + 18);
        v67 = (swift::Demangle::Node **)a2;
        if ((v66 - 1) < 2)
          goto LABEL_355;
        if (v66 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_354:
          v67 = *(swift::Demangle::Node ***)a2;
LABEL_355:
          v141 = *v67;
        }
        else
        {
LABEL_405:
          v141 = 0;
        }
        std::string::push_back(this, 46);
LABEL_507:
        v194 = *((unsigned __int8 *)a2 + 18);
        if (v194 == 2)
          goto LABEL_511;
        if (v194 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_597;
LABEL_510:
        a2 = *(swift::Demangle::Node **)a2;
LABEL_511:
        v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        goto LABEL_7;
      case 0x12D:
        v341 = "opaque type symbolic reference 0x";
        v342 = this;
        v343 = 33;
        goto LABEL_1280;
      case 0x12E:
        v44 = "opaque type descriptor for ";
LABEL_146:
        v45 = this;
        v46 = 27;
        goto LABEL_320;
      case 0x12F:
        v44 = "opaque type descriptor runtime record for ";
LABEL_278:
        v45 = this;
        v46 = 42;
        goto LABEL_320;
      case 0x130:
        v44 = "opaque type descriptor accessor for ";
LABEL_317:
        v45 = this;
        v46 = 36;
        goto LABEL_320;
      case 0x131:
        v44 = "opaque type descriptor accessor impl for ";
LABEL_221:
        v45 = this;
        v46 = 41;
        goto LABEL_320;
      case 0x132:
        std::string::append(this, "opaque type descriptor accessor key for ", 0x28uLL);
        v88 = *((unsigned __int8 *)a2 + 18);
        if ((v88 - 1) < 2)
          goto LABEL_301;
        if (v88 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_546;
        goto LABEL_300;
      case 0x133:
        v29 = "opaque type descriptor accessor var for ";
        v30 = this;
        v31 = 40;
        goto LABEL_297;
      case 0x134:
        v276 = "some";
LABEL_1060:
        v277 = this;
        v278 = 4;
        goto LABEL_825;
      case 0x135:
        std::string::append(this, "<<opaque return type of ", 0x18uLL);
        v276 = ">>";
        goto LABEL_1759;
      case 0x136:
        v29 = "specialized generic metaclass for ";
        v30 = this;
        v31 = 34;
        goto LABEL_297;
      case 0x137:
        v29 = "canonical specialized generic type metadata accessor for ";
        v30 = this;
        v31 = 57;
        goto LABEL_297;
      case 0x138:
        v29 = "metadata instantiation cache for ";
        v30 = this;
        v31 = 33;
        goto LABEL_297;
      case 0x139:
        v29 = "noncanonical specialized generic type metadata for ";
        v30 = this;
        v31 = 51;
        goto LABEL_297;
      case 0x13A:
        v29 = "cache variable for noncanonical specialized generic type metadata for ";
        v30 = this;
        v31 = 70;
        goto LABEL_297;
      case 0x13B:
      case 0x13C:
        if (v12 == 316)
          v17 = "one-time initialization token for ";
        else
          v17 = "one-time initialization function for ";
        if (v12 == 316)
          v18 = 34;
        else
          v18 = 37;
        std::string::append(this, v17, v18);
        v19 = *((unsigned __int8 *)a2 + 18);
        if (v19 == 2)
          goto LABEL_497;
        if (v19 != 5)
          goto LABEL_498;
LABEL_495:
        if (*((_DWORD *)a2 + 2) < 2u)
          goto LABEL_498;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_497:
        v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        goto LABEL_6;
      case 0x13D:
        v76 = *((unsigned __int8 *)a2 + 18);
        if (v76 == 1)
          goto LABEL_5;
        if (v76 == 5 && *((_DWORD *)a2 + 2) == 1)
          goto LABEL_4;
        std::string::push_back(this, 40);
        v495 = *((unsigned __int8 *)a2 + 18);
        if (v495 == 5)
        {
          v584 = (unsigned int *)((char *)a2 + 8);
          v585 = *((unsigned int *)a2 + 2);
          if (!(_DWORD)v585
            || (v586 = v8 + 1,
          {
LABEL_1850:
            std::string::push_back(this, 41);
            goto LABEL_826;
          }
        }
        else
        {
          if (v495 != 2)
          {
            if (v495 == 1)
            goto LABEL_1850;
          }
          v584 = (unsigned int *)((char *)a2 + 8);
          v586 = v8 + 1;
          v585 = 2;
        }
        v587 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          v589 = *((unsigned __int8 *)a2 + 18);
          if (v589 == 2)
          {
            v590 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v589 != 5)
              goto LABEL_1718;
            v590 = *v584;
          }
          if (v590 > v587)
          {
            v591 = v589 - 1;
            v592 = a2;
            if (v591 >= 2)
              v592 = *(swift::Demangle::Node **)a2;
            v588 = (swift::Demangle::Node *)*((_QWORD *)v592 + v587);
            goto LABEL_1719;
          }
LABEL_1718:
          v588 = 0;
LABEL_1719:
          if (v585 == ++v587)
            goto LABEL_1850;
        }
      case 0x13E:
        v29 = "flag for loading of canonical specialized generic type metadata for ";
        v30 = this;
        v31 = 68;
        goto LABEL_297;
      case 0x13F:
        v276 = "async function pointer to ";
        goto LABEL_1067;
      case 0x140:
      case 0x144:
        v636 = v6;
        v20 = 0;
        v21 = 0;
        v22 = *((unsigned __int8 *)a2 + 18);
        v23 = v22;
        v24 = v22 - 1;
        v25 = -1;
        while (2)
        {
          v26 = *((unsigned __int8 *)a2 + 18);
          if ((_DWORD)v22 == 1)
            goto LABEL_30;
          if ((_DWORD)v22 == 5)
          {
            if (v21 == *((_DWORD *)a2 + 2))
              break;
            goto LABEL_31;
          }
          v26 = 2;
          if ((_DWORD)v22 != 2)
            v26 = 0;
LABEL_30:
          if (v21 != v26)
          {
LABEL_31:
            v27 = a2;
            if ((v22 - 1) >= 2)
              v27 = *(swift::Demangle::Node **)a2;
            if (*(_WORD *)(*((_QWORD *)v27 + v21) + 16) != 321)
            {
              ++v21;
              ++v25;
              ++v20;
              continue;
            }
          }
          break;
        }
        v28 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v22)
        {
          case 1:
            break;
          case 5:
            v28 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v28 = 2;
            break;
          default:
            goto LABEL_416;
        }
        if (v28 > v21)
        {
          v164 = a2;
          if (v24 >= 2)
            v164 = *(swift::Demangle::Node **)a2;
          v165 = (swift::Demangle::Node *)*((_QWORD *)v164 + v21);
LABEL_417:
          if ((_DWORD)v22 != 1)
          {
            if ((_DWORD)v22 == 5)
            {
              v23 = *((unsigned int *)a2 + 2);
            }
            else
            {
              if ((_DWORD)v22 != 2)
                goto LABEL_426;
              v23 = 2;
            }
          }
          v166 = (v21 + 1);
          if (v23 > v166)
          {
            v167 = a2;
            if (v24 >= 2)
              v167 = *(swift::Demangle::Node **)a2;
            v168 = (swift::Demangle::Node *)*((_QWORD *)v167 + v166);
LABEL_427:
            if ((_DWORD)v22 != 1)
            {
              if ((_DWORD)v22 == 5)
              {
                v22 = *((unsigned int *)a2 + 2);
              }
              else
              {
                if ((_DWORD)v22 != 2)
                  goto LABEL_436;
                v22 = 2;
              }
            }
            v169 = (v21 + 2);
            if (v22 > v169)
            {
              v170 = a2;
              if (v24 >= 2)
                v170 = *(swift::Demangle::Node **)a2;
              v171 = (swift::Demangle::Node *)*((_QWORD *)v170 + v169);
              goto LABEL_437;
            }
LABEL_436:
            v171 = 0;
LABEL_437:
            if (v12 == 324)
              std::string::append(this, "vtable thunk for ", 0x11uLL);
            std::string::append(this, " of ", 4uLL);
            if (!(_DWORD)v21)
            {
              v11 = 0;
              v6 = v636;
              v4 = &jpt_20AA1D930;
              goto LABEL_731;
            }
            v635 = v171;
            v172 = v168;
            v173 = 0;
            v174 = (v21 - 1);
            while (1)
            {
              v176 = *((unsigned __int8 *)a2 + 18);
              if (v25 == v173)
              {
                if ((v176 - 1) >= 2)
                {
                  v177 = 0;
                  v178 = *(swift::Demangle::Node **)a2;
                }
                else
                {
                  v177 = 1;
                  v178 = a2;
                }
                if (*(_WORD *)(*((_QWORD *)v178 + v174) + 16) == 43)
                {
                  if ((_DWORD)v176 == 1)
                  {
                    v6 = v636;
                    v4 = &jpt_20AA1D930;
                    v168 = v172;
                  }
                  else
                  {
                    v6 = v636;
                    v4 = &jpt_20AA1D930;
                    v168 = v172;
                    if ((_DWORD)v176 != 5)
                    {
                      v171 = v635;
                      if ((_DWORD)v176 == 2)
                      {
                        v176 = 2;
                        goto LABEL_726;
                      }
                      goto LABEL_730;
                    }
                    v176 = *((unsigned int *)a2 + 2);
                  }
                  v171 = v635;
LABEL_726:
                  if (v176 <= v174)
                  {
LABEL_730:
                    v11 = 0;
                  }
                  else
                  {
                    if ((v177 & 1) == 0)
                      a2 = *(swift::Demangle::Node **)a2;
                    v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + v174);
                  }
LABEL_731:
                  if (this[1].__r_.__value_.__s.__data_[11])
                    goto LABEL_826;
                  std::string::append(this, " with respect to parameters ", 0x1CuLL);
                  std::string::append(this, " and results ", 0xDuLL);
                  if (v11)
                  {
                    if (this[1].__r_.__value_.__s.__data_[7])
                    {
LABEL_734:
                      std::string::append(this, " with ", 6uLL);
                      goto LABEL_7;
                    }
                    goto LABEL_826;
                  }
                  goto LABEL_827;
                }
              }
              v179 = v176 - 1;
              if ((_DWORD)v176 == 1)
                goto LABEL_452;
              if ((_DWORD)v176 != 5)
                break;
              if (*((unsigned int *)a2 + 2) > v173)
              {
LABEL_455:
                v180 = a2;
                if (v179 >= 2)
                  v180 = *(swift::Demangle::Node **)a2;
                v175 = (swift::Demangle::Node *)*((_QWORD *)v180 + v173);
                goto LABEL_442;
              }
LABEL_441:
              v175 = 0;
LABEL_442:
              if (v20 == ++v173)
              {
                v11 = 0;
                v6 = v636;
                v4 = &jpt_20AA1D930;
                v168 = v172;
                v171 = v635;
                goto LABEL_731;
              }
            }
            if ((_DWORD)v176 != 2)
              goto LABEL_441;
            v176 = 2;
LABEL_452:
            if (v176 > v173)
              goto LABEL_455;
            goto LABEL_441;
          }
LABEL_426:
          v168 = 0;
          goto LABEL_427;
        }
LABEL_416:
        v165 = 0;
        goto LABEL_417;
      case 0x141:
        v11 = 0;
        HIDWORD(v429) = *(unsigned __int8 *)a2;
        LODWORD(v429) = (HIDWORD(v429) << 24) - 1677721600;
        switch((v429 >> 25))
        {
          case 0u:
            v276 = "differential";
            goto LABEL_1112;
          case 1u:
            v276 = "forward-mode derivative";
            goto LABEL_1772;
          case 6u:
            v276 = "pullback";
            goto LABEL_1770;
          case 7u:
            v276 = "reverse-mode derivative";
LABEL_1772:
            v277 = this;
            v278 = 23;
            goto LABEL_825;
          default:
            goto LABEL_827;
        }
      case 0x142:
        std::string::append(this, "autodiff self-reordering reabstraction thunk ", 0x2DuLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          a2 = *(swift::Demangle::Node **)a2;
        v11 = *(swift::Demangle::Node **)a2;
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "for ", 4uLL);
          goto LABEL_6;
        }
        v185 = v4;
        v187 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
        v186 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
        v188 = v186[8];
        if (v188 == 43)
          v189 = 24;
        else
          v189 = 16;
        std::string::append(this, "for ", 4uLL);
        if (v186 && v188 == 43)
        {
          std::string::push_back(this, 32);
        }
        std::string::append(this, " from ", 6uLL);
        std::string::append(this, " to ", 4uLL);
        v11 = v187;
        v4 = v185;
        goto LABEL_7;
      case 0x143:
        std::string::append(this, "autodiff subset parameters thunk for ", 0x25uLL);
        v91 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v91)
        {
          case 1:
            v94 = 0;
            v92 = -1;
            v93 = *((unsigned __int8 *)a2 + 18);
            goto LABEL_622;
          case 5:
            v93 = *((unsigned int *)a2 + 2);
            v92 = v93 - 2;
            if (!(_DWORD)v93)
            {
              v221 = 0;
              v93 = 0;
              v223 = 0;
              v222 = -3;
              goto LABEL_743;
            }
            v94 = v93 - 1;
            v220 = *(swift::Demangle::Node **)a2;
            goto LABEL_623;
          case 2:
            v92 = 0;
            v93 = 2;
            v94 = 1;
LABEL_622:
            v220 = a2;
LABEL_623:
            v221 = (swift::Demangle::Node *)*((_QWORD *)v220 + v94);
            goto LABEL_625;
        }
        v93 = 0;
        v221 = 0;
        v92 = -2;
LABEL_625:
        v222 = v93 - 3;
        switch((_DWORD)v91)
        {
          case 1:
            v223 = *((unsigned __int8 *)a2 + 18);
            break;
          case 2:
            v223 = 2;
            break;
          case 5:
            v223 = *((unsigned int *)a2 + 2);
            break;
          default:
            goto LABEL_747;
        }
LABEL_743:
        if (v223 <= v92)
        {
LABEL_747:
          v637 = 0;
          goto LABEL_748;
        }
        v250 = a2;
        if ((v91 - 1) >= 2)
          v250 = *(swift::Demangle::Node **)a2;
        v637 = (swift::Demangle::Node *)*((_QWORD *)v250 + v92);
LABEL_748:
        switch((_DWORD)v91)
        {
          case 1:
            v251 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            v251 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v251 = 2;
            break;
          default:
            goto LABEL_758;
        }
        if (v251 <= v222)
        {
LABEL_758:
          v253 = 0;
          goto LABEL_759;
        }
        v252 = a2;
        if ((v91 - 1) >= 2)
          v252 = *(swift::Demangle::Node **)a2;
        v253 = (swift::Demangle::Node *)*((_QWORD *)v252 + v222);
LABEL_759:
        v254 = v91 - 1;
        switch((_DWORD)v91)
        {
          case 1:
            break;
          case 5:
            v91 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v91 = 2;
            break;
          default:
            goto LABEL_768;
        }
        if (v91 <= v93 - 4)
        {
LABEL_768:
          v256 = v4;
          v257 = 0;
          goto LABEL_769;
        }
        v255 = a2;
        if (v254 >= 2)
          v255 = *(swift::Demangle::Node **)a2;
        v256 = v4;
        v257 = (swift::Demangle::Node *)*((_QWORD *)v255 + v93 - 4);
LABEL_769:
        v258 = v93 - 5;
        std::string::append(this, " from ", 6uLL);
        if (v258)
        {
          v259 = v6;
          v260 = 0;
          v261 = 1;
          while (1)
          {
            v263 = *((unsigned __int8 *)a2 + 18);
            v264 = v263 - 1;
            if ((_DWORD)v263 == 1)
              goto LABEL_777;
            if ((_DWORD)v263 != 5)
              break;
            if (*((unsigned int *)a2 + 2) > v260)
            {
LABEL_780:
              v265 = a2;
              if (v264 >= 2)
                v265 = *(swift::Demangle::Node **)a2;
              v262 = (swift::Demangle::Node *)*((_QWORD *)v265 + v260);
              goto LABEL_772;
            }
LABEL_771:
            v262 = 0;
LABEL_772:
            v260 = v261++;
            if (v258 <= v260)
              goto LABEL_790;
          }
          if ((_DWORD)v263 != 2)
            goto LABEL_771;
          v263 = 2;
LABEL_777:
          if (v263 > v260)
            goto LABEL_780;
          goto LABEL_771;
        }
        v266 = *((unsigned __int8 *)a2 + 18);
        v267 = (swift::Demangle::Node **)a2;
        if ((v266 - 1) < 2)
          goto LABEL_787;
        if (v266 == 5 && *((_DWORD *)a2 + 2))
        {
          v267 = *(swift::Demangle::Node ***)a2;
LABEL_787:
          v259 = v6;
          v268 = *v267;
        }
        else
        {
          v259 = v6;
          v268 = 0;
        }
LABEL_790:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        std::string::append(this, " and results ", 0xDuLL);
        std::string::append(this, " to parameters ", 0xFuLL);
        if (!v258)
          goto LABEL_826;
        std::string::append(this, " of type ", 9uLL);
        v269 = *((unsigned __int8 *)a2 + 18);
        v270 = v269 - 1;
        if ((_DWORD)v269 == 1)
        {
          v6 = v259;
        }
        else
        {
          v6 = v259;
          if ((_DWORD)v269 == 5)
          {
            v269 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v269 != 2)
              goto LABEL_802;
            v269 = 2;
          }
        }
        if (v269 <= v258)
        {
LABEL_802:
          v11 = 0;
          v4 = v256;
          goto LABEL_7;
        }
        if (v270 >= 2)
          a2 = *(swift::Demangle::Node **)a2;
        v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + v258);
        v4 = v256;
LABEL_7:
        a4 = 0;
        v9 = 1;
        a2 = v11;
        if (v8 > 0x300)
          goto LABEL_823;
        continue;
      case 0x145:
        v77 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v77)
          v78 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v77 - 8) + 16;
        else
          v78 = 16;
        v275 = *(unsigned __int16 *)v78 == 43;
        v190 = -4;
        if (!v275)
          v190 = -3;
        HIDWORD(v191) = **(unsigned __int8 **)(*(_QWORD *)a2 + 8 * (v190 + v77));
        LODWORD(v191) = (HIDWORD(v191) << 24) - 1677721600;
        switch((v191 >> 25))
        {
          case 0u:
            v192 = "normal";
            goto LABEL_645;
          case 1u:
            v192 = "forward-mode";
            goto LABEL_648;
          case 4u:
            v192 = "linear";
LABEL_645:
            v224 = this;
            v225 = 6;
            goto LABEL_649;
          case 7u:
            v192 = "reverse-mode";
LABEL_648:
            v224 = this;
            v225 = 12;
LABEL_649:
            std::string::append(v224, v192, v225);
            break;
          default:
            break;
        }
        std::string::append(this, " differentiability witness for ", 0x1FuLL);
        v226 = *((unsigned __int8 *)a2 + 18);
        if ((_DWORD)v226 == 1)
          goto LABEL_655;
        if ((_DWORD)v226 == 5)
        {
          v226 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v226)
            goto LABEL_655;
LABEL_672:
          LODWORD(v227) = 0;
          goto LABEL_674;
        }
        if ((_DWORD)v226 != 2)
          goto LABEL_672;
        v226 = 2;
LABEL_655:
        v227 = 0;
        while (1)
        {
          v229 = *((unsigned __int8 *)a2 + 18);
          if ((v229 - 1) >= 2)
          {
            v230 = 0;
            v231 = *(swift::Demangle::Node **)a2;
          }
          else
          {
            v230 = 1;
            v231 = a2;
          }
          if (*(_WORD *)(*((_QWORD *)v231 + v227) + 16) == 102)
            break;
          if ((_DWORD)v229 == 1)
            goto LABEL_666;
          if ((_DWORD)v229 != 5)
          {
            if ((_DWORD)v229 != 2)
              goto LABEL_656;
            v229 = 2;
LABEL_666:
            if (v229 > v227)
              goto LABEL_669;
            goto LABEL_656;
          }
          if (*((unsigned int *)a2 + 2) > v227)
          {
LABEL_669:
            v232 = a2;
            if ((v230 & 1) == 0)
              v232 = *(swift::Demangle::Node **)a2;
            v228 = (swift::Demangle::Node *)*((_QWORD *)v232 + v227);
            goto LABEL_657;
          }
LABEL_656:
          v228 = 0;
LABEL_657:
          if (v226 == ++v227)
          {
            LODWORD(v227) = v226;
            break;
          }
        }
LABEL_674:
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        v233 = *((unsigned __int8 *)a2 + 18);
        v234 = v233 - 1;
        if ((_DWORD)v233 == 1)
          goto LABEL_679;
        if ((_DWORD)v233 != 5)
        {
          if ((_DWORD)v233 == 2)
          {
            v233 = 2;
            goto LABEL_679;
          }
          goto LABEL_683;
        }
        v233 = *((unsigned int *)a2 + 2);
LABEL_679:
        v235 = (v227 + 1);
        if (v233 <= v235)
        {
LABEL_683:
          v237 = 0;
        }
        else
        {
          v236 = a2;
          if (v234 >= 2)
            v236 = *(swift::Demangle::Node **)a2;
          v237 = (swift::Demangle::Node *)*((_QWORD *)v236 + v235);
        }
        std::string::append(this, " and results ", 0xDuLL);
        v238 = *((unsigned __int8 *)a2 + 18);
        v239 = v238 - 1;
        if ((_DWORD)v238 != 1)
        {
          if ((_DWORD)v238 != 5)
          {
            if ((_DWORD)v238 == 2)
            {
              v238 = 2;
              goto LABEL_689;
            }
LABEL_693:
            v242 = 0;
            goto LABEL_694;
          }
          v238 = *((unsigned int *)a2 + 2);
        }
LABEL_689:
        v240 = (v227 + 2);
        if (v238 <= v240)
          goto LABEL_693;
        v241 = a2;
        if (v239 >= 2)
          v241 = *(swift::Demangle::Node **)a2;
        v242 = (swift::Demangle::Node *)*((_QWORD *)v241 + v240);
LABEL_694:
        v243 = *((unsigned __int8 *)a2 + 18);
        switch((_DWORD)v243)
        {
          case 1:
            v244 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            v244 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            v244 = 2;
            break;
          default:
            goto LABEL_826;
        }
        v245 = (v227 + 3);
        if (v244 > v245)
        {
          v246 = v243 - 1;
          if ((_DWORD)v243 != 1)
          {
            if ((_DWORD)v243 == 5)
              v243 = *((unsigned int *)a2 + 2);
            else
              v243 = 2;
          }
          if (v243 <= v245)
          {
            v11 = 0;
          }
          else
          {
            if (v246 >= 2)
              a2 = *(swift::Demangle::Node **)a2;
            v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + v245);
          }
          goto LABEL_734;
        }
LABEL_826:
        v11 = 0;
LABEL_827:
        if ((v9 & 1) != 0)
          return 0;
        else
          return v11;
      case 0x146:
        v44 = "@noDerivative ";
LABEL_210:
        v45 = this;
        v46 = 14;
        goto LABEL_320;
      case 0x147:
        std::string::push_back(this, 123);
        v440 = *((unsigned int *)a2 + 2);
        if (*((_DWORD *)a2 + 2))
        {
          v441 = 0;
          v442 = 0;
          v443 = *(_QWORD *)a2;
          do
          {
            if (*(_BYTE *)(v443 + v441) == 83)
            {
              if ((v442 & 1) != 0)
                std::string::append(this, ", ", 2uLL);
              swift::Demangle::DemanglerPrinter::operator<<(this, v441);
              v442 = 1;
            }
            ++v441;
          }
          while (v440 != v441);
        }
        std::string::push_back(this, 125);
        goto LABEL_826;
      case 0x148:
        if (!this[1].__r_.__value_.__s.__data_[20])
          goto LABEL_826;
        std::string::append(this, "(", 1uLL);
        v421 = *((unsigned __int8 *)a2 + 18);
        if ((v421 - 1) < 2)
          goto LABEL_1161;
        if (v421 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1161:
          v422 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v422 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v550 = " await resume partial function for ";
        v568 = this;
        v569 = 35;
        goto LABEL_1822;
      case 0x149:
        if (!this[1].__r_.__value_.__s.__data_[20])
          goto LABEL_826;
        std::string::append(this, "(", 1uLL);
        v399 = *((unsigned __int8 *)a2 + 18);
        if ((v399 - 1) < 2)
          goto LABEL_1093;
        if (v399 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1093:
          v400 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v400 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v550 = " suspend resume partial function for ";
        v568 = this;
        v569 = 37;
        goto LABEL_1822;
      case 0x14A:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "accessible function runtime record for ";
        v277 = this;
        v278 = 39;
        goto LABEL_825;
      case 0x14B:
        v44 = "_const ";
LABEL_206:
        v45 = this;
        v46 = 7;
LABEL_320:
        std::string::append(v45, v44, v46);
        v126 = *((unsigned __int8 *)a2 + 18);
        if ((v126 - 1) < 2)
          goto LABEL_324;
        if (v126 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_546;
        a2 = *(swift::Demangle::Node **)a2;
LABEL_324:
        v11 = *(swift::Demangle::Node **)a2;
        ++v8;
        goto LABEL_7;
      case 0x14C:
        if (this[1].__r_.__value_.__s.__data_[11])
          goto LABEL_826;
        v276 = "back deployment thunk for ";
LABEL_1067:
        v277 = this;
        v278 = 26;
        goto LABEL_825;
      case 0x14D:
        v276 = "back deployment fallback for ";
        v277 = this;
        v278 = 29;
        goto LABEL_825;
      case 0x14E:
        v430 = this[1].__r_.__value_.__s.__data_[7];
        this[1].__r_.__value_.__s.__data_[7] = 1;
        v431 = *((unsigned __int8 *)a2 + 18);
        if (v431 == 2)
          goto LABEL_1184;
        if (v431 != 5)
          goto LABEL_1806;
        v432 = *((_DWORD *)a2 + 2);
        if (v432 == 2)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_1184:
          v433 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
          std::string::append(this, "existential shape for ", 0x16uLL);
          if (v433)
          {
            v434 = v8 + 1;
            std::string::append(this, " ", 1uLL);
            v433 = 0;
            goto LABEL_1809;
          }
        }
        else
        {
          if (v432 < 2)
LABEL_1806:
            v433 = 0;
          else
            v433 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 8);
          std::string::append(this, "existential shape for ", 0x16uLL);
        }
        v434 = v8 + 1;
LABEL_1809:
        std::string::append(this, "any ", 4uLL);
        result = 0;
        this[1].__r_.__value_.__s.__data_[7] = v430;
        return result;
      case 0x14F:
        v29 = "uniquable ";
        v30 = this;
        v31 = 10;
LABEL_297:
        std::string::append(v30, v29, v31);
        v125 = *((unsigned __int8 *)a2 + 18);
        if ((v125 - 1) < 2)
          goto LABEL_301;
        if (v125 != 5 || !*((_DWORD *)a2 + 2))
          goto LABEL_498;
LABEL_300:
        a2 = *(swift::Demangle::Node **)a2;
LABEL_301:
        v11 = *(swift::Demangle::Node **)a2;
        goto LABEL_6;
      case 0x150:
        v341 = "unique existential shape symbolic reference 0x";
        v342 = this;
        v343 = 46;
        goto LABEL_1280;
      case 0x151:
        v341 = "non-unique existential shape symbolic reference 0x";
        v342 = this;
        v343 = 50;
        goto LABEL_1280;
      case 0x152:
        v426 = *((unsigned __int8 *)a2 + 18);
        v427 = a2;
        if ((v426 - 1) < 2)
          goto LABEL_1174;
        if (v426 == 5 && *((_DWORD *)a2 + 2))
        {
          v427 = *(swift::Demangle::Node **)a2;
LABEL_1174:
          v428 = *(_QWORD *)v427;
        }
        else
        {
          v428 = 0;
        }
        v557 = *(unsigned __int16 *)(v428 + 16);
        std::string::append(this, "symbolic existential type (", 0x1BuLL);
        if (v557 == 336)
          v558 = (const std::string::value_type *)&unk_20AA50335;
        else
          v558 = "non-";
        std::string::append(this, v558, 4 * (v557 != 336));
        std::string::append(this, "unique) 0x", 0xAuLL);
        v559 = swift::Demangle::DemanglerPrinter::writeHex(this, *(_QWORD *)v428);
        std::string::append(v559, " <", 2uLL);
        v560 = *((unsigned __int8 *)a2 + 18);
        v561 = a2;
        if (v560 == 2)
          goto LABEL_1605;
        if (v560 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v561 = *(swift::Demangle::Node **)a2;
LABEL_1605:
          v562 = (swift::Demangle::Node *)*((_QWORD *)v561 + 1);
        }
        else
        {
          v562 = 0;
        }
        v563 = v8 + 1;
        if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
        {
          std::string::append(this, ", ", 2uLL);
          if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
            v564 = *(swift::Demangle::Node **)(*(_QWORD *)a2 + 16);
          else
            v564 = 0;
        }
        v276 = ">";
        goto LABEL_1498;
      case 0x153:
        v276 = "metatypes-removed";
        goto LABEL_1434;
      case 0x154:
        v276 = "#_hasSymbol query for ";
LABEL_1075:
        v277 = this;
        v278 = 22;
        goto LABEL_825;
      case 0x157:
        v16 = "outlined enum tag store of ";
LABEL_311:
        v32 = this;
        v33 = 27;
        goto LABEL_312;
      case 0x158:
        v16 = "outlined enum project data for load of ";
        v32 = this;
        v33 = 39;
        goto LABEL_312;
      case 0x159:
        v16 = "outlined enum get tag of ";
        v32 = this;
        v33 = 25;
        goto LABEL_312;
      case 0x15A:
        v16 = "async demotion of ";
LABEL_274:
        v32 = this;
        v33 = 18;
LABEL_312:
        std::string::append(v32, v16, v33);
LABEL_313:
        v119 = *((unsigned __int8 *)a2 + 18);
        if ((v119 - 1) >= 2)
          goto LABEL_314;
        goto LABEL_5;
      case 0x15B:
        v341 = "objective-c protocol symbolic reference 0x";
        v342 = this;
        v343 = 42;
LABEL_1280:
        std::string::append(v342, v341, v343);
        swift::Demangle::DemanglerPrinter::writeHex(this, *(_QWORD *)a2);
        goto LABEL_826;
      case 0x15C:
        std::string::append(this, "lifetime dependence: ", 0x15uLL);
        v79 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
          v79 = *(swift::Demangle::Node **)a2;
        v80 = **(unsigned __int8 **)v79;
        if (v80 == 115)
        {
          v81 = "scope ";
          v82 = this;
          v83 = 6;
        }
        else
        {
          if (v80 != 105)
            goto LABEL_537;
          v81 = "inherit ";
          v82 = this;
          v83 = 8;
        }
        std::string::append(v82, v81, v83);
LABEL_537:
        v206 = *((unsigned __int8 *)a2 + 18);
        if (v206 == 2)
          goto LABEL_541;
        if (v206 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::Node **)a2;
LABEL_541:
          v11 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
          ++v8;
        }
        else
        {
LABEL_546:
          v11 = 0;
          ++v8;
        }
        goto LABEL_7;
      case 0x15D:
        std::string::append(this, "(self lifetime dependence: ", 0x1BuLL);
        v391 = *(unsigned __int8 *)a2;
        if (v391 == 115)
        {
          v276 = "scope) ";
LABEL_1648:
          v277 = this;
          v278 = 7;
          goto LABEL_825;
        }
        if (v391 != 105)
          goto LABEL_826;
        v276 = "inherit) ";
        goto LABEL_1802;
      case 0x162:
        v384 = *((unsigned __int8 *)a2 + 18);
        v385 = (swift::Demangle::Node **)a2;
        if ((v384 - 1) < 2)
          goto LABEL_1034;
        if (v384 == 5 && *((_DWORD *)a2 + 2))
        {
          v385 = *(swift::Demangle::Node ***)a2;
LABEL_1034:
          v386 = *v385;
        }
        else
        {
          v386 = 0;
        }
        std::string::append(this, ": ~", 3uLL);
        v548 = a2;
        if (*((_BYTE *)a2 + 18) == 5)
          v548 = *(swift::Demangle::Node **)a2;
        v549 = **((_QWORD **)v548 + 1);
        if (v549 == 1)
        {
          std::string::append(this, "Swift.", 6uLL);
          v276 = "Escapable";
          goto LABEL_1802;
        }
        if (!v549)
        {
          std::string::append(this, "Swift.", 6uLL);
          v276 = "Copyable";
          goto LABEL_1770;
        }
        std::string::append(this, "Swift.<bit ", 0xBuLL);
        if (*((_BYTE *)a2 + 18) == 5)
          a2 = *(swift::Demangle::Node **)a2;
        v277 = swift::Demangle::DemanglerPrinter::operator<<(this, **((_QWORD **)a2 + 1));
        v276 = ">";
        v278 = 1;
        goto LABEL_825;
      default:
        printer_unreachable("bad node kind!");
    }
  }
}

swift::Demangle::Node *`anonymous namespace'::NodePrinter::printEntity(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, std::string::value_type *__s, size_t __n, unsigned int a9, std::string::value_type *__sa, std::string::size_type __na)
{
  std::string::size_type v11;
  const std::string::value_type *v12;
  uint64_t *v17;
  unint64_t v19;
  int v20;
  uint64_t *v21;
  unsigned int v22;
  _BYTE *v23;
  BOOL v24;
  int v25;
  uint64_t *v26;
  int v27;
  char v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  swift::Demangle::Node *v34;
  swift::Demangle::Node *v35;
  _BYTE *v36;
  std::string::size_type v38;
  int v40;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  swift::Demangle::Node *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  swift::Demangle::Node **v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  swift::Demangle::Node *v59;
  swift::Demangle::Node **v60;
  uint64_t *v61;
  swift::Demangle::Node **v62;
  swift::Demangle::Node **v63;
  swift::Demangle::Node **v64;
  swift::Demangle::Node *v65;
  int v66;
  swift::Demangle::Node *v67;
  swift::Demangle::Node *v68;
  swift::Demangle::Node *v69;
  int v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  swift::Demangle::Node **v75;
  swift::Demangle::Node *v76;
  swift::Demangle::Node *v77;
  int v78;
  int v79;
  BOOL v80;
  int v81;
  const std::string::value_type *v82;
  uint64_t v84;
  int v85;
  int v86;
  char v87;
  unint64_t v88;
  char __str[32];

  v11 = __n;
  v12 = __s;
  v17 = a2;
  if (*((_WORD *)a2 + 8) != 19)
  {
    v19 = 0;
    if (!__n)
      goto LABEL_25;
    goto LABEL_15;
  }
  v19 = 0;
  v20 = *((unsigned __int8 *)a2 + 18);
  if (v20 == 1)
    goto LABEL_12;
  v21 = a2;
  if (v20 != 2)
  {
    if (v20 != 5)
      goto LABEL_8;
    v22 = *((_DWORD *)a2 + 2);
    if (v22 < 2)
    {
      v19 = 0;
      if (v22)
        goto LABEL_11;
LABEL_24:
      v17 = 0;
      if (!__n)
        goto LABEL_25;
      goto LABEL_15;
    }
    v21 = (uint64_t *)*a2;
  }
  v19 = v21[1];
LABEL_8:
  if (v20 == 2)
    goto LABEL_12;
  if (v20 != 5 || !*((_DWORD *)a2 + 2))
    goto LABEL_24;
LABEL_11:
  v17 = (uint64_t *)*a2;
LABEL_12:
  v17 = (uint64_t *)*v17;
  if (!__n)
  {
LABEL_25:
    v25 = 0;
    if (a6)
      goto LABEL_26;
LABEL_32:
    v27 = 0;
    goto LABEL_33;
  }
LABEL_15:
  v23 = memchr(__s, 32, __n);
  if (v23)
    v24 = v23 - v12 == -1;
  else
    v24 = 1;
  v25 = !v24;
  if (!a6)
    goto LABEL_32;
LABEL_26:
  v26 = v17;
  if (*((_BYTE *)v17 + 18) == 5)
    v26 = (uint64_t *)*v17;
  if (*(_WORD *)(v26[1] + 16) != 137)
    goto LABEL_32;
  if (*(_BYTE *)(a1 + 33))
    v25 = 1;
  v27 = 1;
LABEL_33:
  if (a5)
    v28 = 1;
  else
    v28 = v25;
  if (a4 && (v28 & 1) != 0)
    return (swift::Demangle::Node *)v17;
  v29 = *((unsigned __int8 *)v17 + 18);
  v30 = v17;
  v85 = v27;
  v88 = v19;
  if ((v29 - 1) < 2)
    goto LABEL_42;
  if (v29 == 5 && *((_DWORD *)v17 + 2))
  {
    v30 = (uint64_t *)*v17;
LABEL_42:
    v31 = *v30;
    goto LABEL_44;
  }
  v31 = 0;
LABEL_44:
  v32 = a9;
  v86 = v25;
  v87 = a4;
  if (!*(_BYTE *)(a1 + 25))
  {
    v35 = 0;
    v38 = __na;
    if ((a6 & 1) != 0)
      goto LABEL_96;
    goto LABEL_93;
  }
  v33 = a5;
  v34 = (swift::Demangle::Node *)v31;
  if (*(_WORD *)(v31 + 16) == 153)
  {
    v36 = *(_BYTE **)v31;
    v35 = *(swift::Demangle::Node **)(v31 + 8);
    if (v35 == (swift::Demangle::Node *)3)
    {
      if (*(_WORD *)v36 == 24415 && v36[2] == 67)
      {
        v42 = *(unsigned __int8 *)(a1 + 42);
        goto LABEL_77;
      }
      if (*(_QWORD *)(a1 + 56) != 3)
        goto LABEL_70;
    }
    else if (v35 == (swift::Demangle::Node *)5)
    {
      if (*(_DWORD *)v36 == 1718187859 && v36[4] == 116)
      {
        v42 = *(unsigned __int8 *)(a1 + 41);
        goto LABEL_77;
      }
      if (*(_QWORD *)(a1 + 56) != 5)
        goto LABEL_70;
    }
    else
    {
      if (v35 != *(swift::Demangle::Node **)(a1 + 56))
      {
LABEL_65:
        if ((unint64_t)v35 < 0xC)
          goto LABEL_70;
        if (*(_QWORD *)v36 != 0x655F62646C6C5F5FLL || *((_DWORD *)v36 + 2) != 1601335416)
          goto LABEL_70;
        v42 = *(unsigned __int8 *)(a1 + 40);
LABEL_77:
        if (v42)
          v43 = v25;
        else
          v43 = 1;
        if (v42)
          v35 = v34;
        else
          v35 = 0;
        if ((v43 & 1) != 0)
          goto LABEL_72;
        goto LABEL_84;
      }
      if (!v35)
      {
LABEL_72:
        a5 = v33;
        goto LABEL_92;
      }
    }
    v40 = memcmp(*(const void **)v31, *(const void **)(a1 + 48), *(_QWORD *)(v31 + 8));
    v25 = v86;
    if (!v40)
    {
      v35 = 0;
      goto LABEL_72;
    }
    goto LABEL_65;
  }
LABEL_70:
  if ((v25 & 1) != 0)
  {
    v35 = v34;
    goto LABEL_72;
  }
LABEL_84:
  if (*(char *)(a1 + 23) >= 0)
    v44 = *(unsigned __int8 *)(a1 + 23);
  else
    v44 = *(_QWORD *)(a1 + 8);
  v46 = *(unsigned __int8 *)(a1 + 23);
  if ((v46 & 0x80u) != 0)
    v46 = *(_QWORD *)(a1 + 8);
  if (v46 != v44)
    std::string::push_back((std::string *)a1, 46);
  v35 = (swift::Demangle::Node *)v45;
  a5 = v33;
  v25 = v86;
LABEL_92:
  v32 = a9;
  v38 = __na;
  if ((a6 & 1) != 0)
    goto LABEL_96;
LABEL_93:
  if (!v38)
  {
    v47 = a3;
    v48 = v88;
    if (!v11)
      goto LABEL_117;
    goto LABEL_115;
  }
LABEL_96:
  if (v11)
    v49 = v25;
  else
    v49 = 0;
  v50 = a5;
  v51 = v35;
  if (v49 == 1)
  {
    std::string::append((std::string *)a1, v12, v11);
    if ((v32 & 0x80000000) == 0)
    {
      snprintf(__str, 0x20uLL, "%lld", v32);
      std::string::append((std::string *)a1, __str);
    }
    std::string::append((std::string *)a1, " of ", 4uLL);
    v11 = 0;
    LODWORD(v32) = -1;
    v12 = (const std::string::value_type *)&unk_20AA50335;
  }
  if (*(char *)(a1 + 23) >= 0)
    v52 = *(unsigned __int8 *)(a1 + 23);
  else
    v52 = *(_QWORD *)(a1 + 8);
  if (v38)
  {
    std::string::append((std::string *)a1, __sa, v38);
    v47 = a3;
    v48 = v88;
    goto LABEL_108;
  }
  v57 = *((unsigned __int8 *)v17 + 18);
  v58 = v17;
  if (v57 == 5)
    v58 = (uint64_t *)*v17;
  v59 = (swift::Demangle::Node *)v58[1];
  v47 = a3;
  if (*((_WORD *)v59 + 8) != 176)
  {
    v57 = *((unsigned __int8 *)v17 + 18);
  }
  v60 = (swift::Demangle::Node **)v17;
  v48 = v88;
  if ((v57 - 1) >= 2)
  {
    if (v57 == 5)
    {
      v61 = (uint64_t *)*v17;
      v60 = (swift::Demangle::Node **)*v17;
      goto LABEL_194;
    }
    v60 = 0;
  }
  if (v57 == 1)
  {
    v75 = (swift::Demangle::Node **)(v17 + 1);
    goto LABEL_224;
  }
  if (v57 == 2)
  {
    v75 = (swift::Demangle::Node **)(v17 + 2);
    goto LABEL_224;
  }
  if (v57 != 5)
  {
    v75 = 0;
    goto LABEL_224;
  }
  v61 = (uint64_t *)*v17;
LABEL_194:
  v75 = (swift::Demangle::Node **)&v61[*((unsigned int *)v17 + 2)];
LABEL_224:
  if (v60 != v75)
  {
    while (*((_WORD *)*v60 + 8) != 176)
    {
      if (++v60 == v75)
      {
        v60 = v75;
        break;
      }
    }
  }
  switch(v57)
  {
    case 5:
      v84 = *v17 + 8 * *((unsigned int *)v17 + 2);
      break;
    case 2:
      v84 = (uint64_t)(v17 + 2);
      break;
    case 1:
      v84 = (uint64_t)(v17 + 1);
      break;
    default:
      v84 = 0;
      break;
  }
  if (v60 != (swift::Demangle::Node **)v84 && *v60)
LABEL_108:
  v53 = *(unsigned __int8 *)(a1 + 23);
  if ((v53 & 0x80u) != 0)
    v53 = *(_QWORD *)(a1 + 8);
  if (v53 == v52)
  {
    v35 = v51;
    a5 = v50;
    if (!v11)
      goto LABEL_117;
  }
  else
  {
    v35 = v51;
    a5 = v50;
    if (!v11)
      goto LABEL_117;
    std::string::push_back((std::string *)a1, 46);
  }
LABEL_115:
  std::string::append((std::string *)a1, v12, v11);
  if ((v32 & 0x80000000) == 0)
  {
    snprintf(__str, 0x20uLL, "%lld", v32);
    std::string::append((std::string *)a1, __str);
  }
LABEL_117:
  if (!a5)
    goto LABEL_210;
  v54 = *((unsigned __int8 *)v17 + 18);
  v55 = (swift::Demangle::Node **)v17;
  if ((v54 - 1) >= 2)
  {
    if (v54 == 5)
    {
      v56 = (uint64_t *)*v17;
      v55 = (swift::Demangle::Node **)*v17;
      goto LABEL_133;
    }
    v55 = 0;
  }
  switch(v54)
  {
    case 1:
      v62 = (swift::Demangle::Node **)(v17 + 1);
      if (v55 != (swift::Demangle::Node **)(v17 + 1))
        goto LABEL_140;
      break;
    case 2:
      v62 = (swift::Demangle::Node **)(v17 + 2);
      if (v55 != (swift::Demangle::Node **)(v17 + 2))
        goto LABEL_140;
      break;
    case 5:
      v56 = (uint64_t *)*v17;
LABEL_133:
      v62 = (swift::Demangle::Node **)&v56[*((unsigned int *)v17 + 2)];
      if (v55 != v62)
        goto LABEL_140;
      break;
    default:
      v62 = 0;
      if (v55)
      {
LABEL_140:
        while (*((_WORD *)*v55 + 8) != 232)
        {
          if (++v55 == v62)
          {
            v55 = v62;
            goto LABEL_143;
          }
        }
      }
      break;
  }
LABEL_143:
  if (v54 == 5)
  {
    if (v55 == (swift::Demangle::Node **)(*v17 + 8 * *((unsigned int *)v17 + 2)))
    {
LABEL_159:
      v17 = 0;
      *(_BYTE *)(a1 + 97) = 0;
      return (swift::Demangle::Node *)v17;
    }
  }
  else
  {
    v63 = (swift::Demangle::Node **)(v17 + 1);
    if (v54 != 1)
      v63 = 0;
    if (v54 == 2)
      v64 = (swift::Demangle::Node **)(v17 + 2);
    else
      v64 = v63;
    if (v55 == v64)
      goto LABEL_159;
  }
  v65 = *v55;
  if (!v65)
    goto LABEL_159;
  v66 = *((unsigned __int8 *)v65 + 18);
  if ((v66 - 1) < 2)
    goto LABEL_157;
  if (v66 == 5 && *((_DWORD *)v65 + 2))
  {
    v65 = *(swift::Demangle::Node **)v65;
LABEL_157:
    v67 = *(swift::Demangle::Node **)v65;
    if (a5 != 2)
      goto LABEL_187;
    goto LABEL_161;
  }
  v67 = 0;
  if (a5 != 2)
    goto LABEL_187;
LABEL_161:
  v68 = v67;
  while (1)
  {
    v70 = *((unsigned __int16 *)v68 + 8);
    if (v70 != 44)
      break;
    v71 = *((unsigned __int8 *)v68 + 18);
    if (v71 != 2)
    {
      if (v71 != 5 || *((_DWORD *)v68 + 2) < 2u)
      {
        v69 = 0;
        goto LABEL_172;
      }
      v68 = *(swift::Demangle::Node **)v68;
    }
    v69 = (swift::Demangle::Node *)*((_QWORD *)v68 + 1);
LABEL_172:
    v72 = *((unsigned __int8 *)v69 + 18);
    if ((v72 - 1) < 2)
    {
LABEL_164:
      v68 = *(swift::Demangle::Node **)v69;
    }
    else
    {
      v68 = 0;
      if (v72 == 5)
      {
        v68 = 0;
        if (*((_DWORD *)v69 + 2))
        {
          v69 = *(swift::Demangle::Node **)v69;
          goto LABEL_164;
        }
      }
    }
  }
  v73 = (v70 - 22) > 0x3C || ((1 << (v70 - 22)) & 0x1000080000000001) == 0;
  if (!v73 || v70 == 222 || v70 == 245)
  {
    v74 = *((unsigned __int16 *)v17 + 8);
    if ((v74 == 117 || v74 == 70) && !*(_BYTE *)(a1 + 45))
      goto LABEL_210;
    if ((v86 & 1) != 0)
      goto LABEL_186;
    v76 = v67;
    while (1)
    {
LABEL_199:
      v77 = v76;
      v78 = *((unsigned __int16 *)v76 + 8);
      if (v78 != 232)
      {
        v80 = (v78 - 44) > 0x26 || ((1 << (v78 - 44)) & 0x4000200001) == 0;
        if (!v80 || v78 == 245)
        {
LABEL_209:
          goto LABEL_210;
        }
LABEL_186:
        std::string::push_back((std::string *)a1, 32);
        goto LABEL_209;
      }
      v79 = *((unsigned __int8 *)v77 + 18);
      if ((v79 - 1) < 2)
        goto LABEL_198;
      v76 = 0;
      if (v79 == 5)
      {
        v76 = 0;
        if (*((_DWORD *)v77 + 2))
          break;
      }
    }
    v77 = *(swift::Demangle::Node **)v77;
LABEL_198:
    v76 = *(swift::Demangle::Node **)v77;
    goto LABEL_199;
  }
LABEL_187:
  if (*(_BYTE *)(a1 + 32))
  {
    std::string::append((std::string *)a1, " : ", 3uLL);
    goto LABEL_209;
  }
LABEL_210:
  if ((v87 & 1) != 0 || !v35 || v85 && !*(_BYTE *)(a1 + 33))
    return v35;
  v81 = *((unsigned __int16 *)v17 + 8);
  v82 = " of ";
  if (((v81 - 125) > 0x36 || ((1 << (v81 - 125)) & 0x60000000000001) == 0)
    && v81 != 33)
  {
    v82 = " in ";
  }
  std::string::append((std::string *)a1, v82, 4uLL);
  return 0;
}

std::string *`anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::Node *a2, int a3, const char *a4)
{
  _anonymous_namespace_::NodePrinter *v5;
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  swift::Demangle::Node *v11;
  size_t v12;

  if (!a2)
    return this;
  v5 = (_anonymous_namespace_::NodePrinter *)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_10;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        return this;
      goto LABEL_17;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        return this;
      goto LABEL_17;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_10:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        return this;
      goto LABEL_17;
  }
  v9 = 0;
  if (!v7)
    return this;
LABEL_17:
  v10 = a3 + 1;
  do
  {
    v11 = *(swift::Demangle::Node **)v7;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (a4)
    {
      if (v7 != v9)
      {
        v12 = strlen(a4);
        this = std::string::append((std::string *)v5, a4, v12);
      }
    }
  }
  while (v7 != v9);
  return this;
}

std::string *`anonymous namespace'::operator<<(std::string *a1, uint64_t a2)
{
  int v4;
  std::string::value_type *v5;
  uint64_t v6;
  std::string *v7;
  const std::string::value_type *v8;
  int v9;
  unint64_t v10;
  std::string::value_type v11;

  std::string::push_back(a1, 34);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (std::string::value_type *)a2;
  else
    v5 = *(std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    while (2)
    {
      v9 = *v5;
      switch(*v5)
      {
        case 0:
          v7 = a1;
          v8 = "\\0";
          goto LABEL_10;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_16;
        case 9:
          v7 = a1;
          v8 = "\\t";
          goto LABEL_10;
        case 10:
          v7 = a1;
          v8 = "\\n";
          goto LABEL_10;
        case 13:
          v7 = a1;
          v8 = "\\r";
          goto LABEL_10;
        case 34:
          v7 = a1;
          v8 = "\\\"";
          goto LABEL_10;
        default:
          if (v9 == 92)
          {
            v7 = a1;
            v8 = "\\\\";
LABEL_10:
            std::string::append(v7, v8, 2uLL);
          }
          else
          {
LABEL_16:
            v10 = *v5;
            if ((v9 - 127) > 0xA0u)
            {
              v11 = *v5;
            }
            else
            {
              std::string::append(a1, "\\x", 2uLL);
            }
            std::string::push_back(a1, v11);
          }
          ++v5;
          if (--v6)
            continue;
          goto LABEL_23;
      }
    }
  }
LABEL_23:
  std::string::push_back(a1, 34);
  return a1;
}

void `anonymous namespace'::NodePrinter::printFunctionType(std::string *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3, int a4)
{
  swift::Demangle::Node *v5;
  int v8;
  unsigned int v9;
  const char *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  swift::Demangle::Node *v14;
  uint64_t v15;
  unsigned int v16;
  swift::Demangle::Node *v17;
  swift::Demangle::Node *v18;
  unint64_t v19;
  char v20;
  swift::Demangle::Node *v21;
  swift::Demangle::Node *v22;
  swift::Demangle::Node *v23;
  char v24;
  swift::Demangle::Node *v25;
  swift::Demangle::Node *v26;
  char v27;
  unsigned __int8 v28;
  swift::Demangle::Node *v29;
  swift::Demangle::Node *v30;
  swift::Demangle::Node *v31;
  char v32;
  swift::Demangle::Node *v33;
  swift::Demangle::Node *v34;
  swift::Demangle::Node *v35;
  swift::Demangle::Node *v36;
  swift::Demangle::Node *v37;
  int v38;
  uint64_t v39;
  swift::Demangle::Node *v40;
  int v41;
  swift::Demangle::Node *v42;
  int v43;
  const std::string::value_type *v44;
  std::string *v45;
  std::string::size_type v46;
  unint64_t v47;
  unsigned int v48;
  swift::Demangle::Node *v49;
  swift::Demangle::Node *v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  swift::Demangle::Node *v54;
  unsigned int v55;
  _QWORD v56[2];
  int v57;

  v5 = a3;
  v8 = *((unsigned __int8 *)a3 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a3 + 2) <= 1u))
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  v56[0] = this;
  v56[1] = a3;
  v57 = a4;
  v9 = *((unsigned __int16 *)a3 + 8);
  if (v9 <= 0xA4)
  {
    if (v9 == 11)
    {
LABEL_9:
      std::string::append(this, "@autoclosure ", 0xDuLL);
      goto LABEL_18;
    }
    if (v9 != 22)
    {
      if (v9 != 64)
        goto LABEL_18;
      goto LABEL_9;
    }
    v10 = "c";
    goto LABEL_17;
  }
  switch(v9)
  {
    case 0xA5u:
LABEL_16:
      v10 = "block";
LABEL_17:
      break;
    case 0xA6u:
      std::string::append(this, "@escaping ", 0xAuLL);
      goto LABEL_16;
    case 0xDEu:
      std::string::append(this, "@convention(thin) ", 0x12uLL);
      break;
  }
LABEL_18:
  v11 = *((unsigned __int8 *)v5 + 18);
  if ((_DWORD)v11 == 5)
  {
    v13 = *((_DWORD *)v5 + 2);
    v55 = v13 - 2;
    if (v13)
    {
      v15 = **(_QWORD **)v5 + 16;
    }
    else
    {
      v13 = 0;
      v15 = 16;
    }
    v12 = *(unsigned __int16 *)v15 == 23;
    v14 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    v12 = *(unsigned __int16 *)(*(_QWORD *)v5 + 16) == 23;
    if ((_DWORD)v11 == 2)
    {
      v55 = 0;
      v13 = 2;
    }
    else
    {
      v55 = -1;
      v13 = 1;
    }
    v14 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v14 + v12) + 16) == 129)
  {
    v16 = v11 - 1;
    if ((_DWORD)v11 != 1)
    {
      v17 = v5;
      if ((_DWORD)v11 == 2)
      {
LABEL_35:
        v18 = (swift::Demangle::Node *)*((_QWORD *)v17 + v12);
LABEL_37:
        if (v12)
          v12 = 2;
        else
          v12 = 1;
        LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
        goto LABEL_41;
      }
      if ((_DWORD)v11 != 5)
      {
LABEL_36:
        v18 = 0;
        goto LABEL_37;
      }
      v11 = *((unsigned int *)v5 + 2);
    }
    if (v11 > v12)
    {
      v17 = v5;
      if (v16 >= 2)
        v17 = *(swift::Demangle::Node **)v5;
      goto LABEL_35;
    }
    goto LABEL_36;
  }
LABEL_41:
  v19 = v12;
  if ((v11 - 1) >= 2)
  {
    v20 = 0;
    v21 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    v20 = 1;
    v21 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v21 + v12) + 16) == 67)
  {
    if ((_DWORD)v11 == 1)
    {
      if (!v12)
        goto LABEL_53;
    }
    else
    {
      if ((_DWORD)v11 != 5)
      {
        if ((_DWORD)v11 != 2 || v12 >= 2uLL)
          goto LABEL_51;
LABEL_53:
        v23 = v5;
        if ((v20 & 1) == 0)
          v23 = *(swift::Demangle::Node **)v5;
        v22 = (swift::Demangle::Node *)*((_QWORD *)v23 + v12);
        goto LABEL_56;
      }
      if (*((unsigned int *)v5 + 2) > (unint64_t)v12)
        goto LABEL_53;
    }
LABEL_51:
    v22 = 0;
LABEL_56:
    v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    v24 = 0;
    v25 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    v24 = 1;
    v25 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v25 + v19) + 16) != 68)
  {
    v28 = -100;
    v29 = v5;
    if ((v24 & 1) != 0)
      goto LABEL_67;
    goto LABEL_66;
  }
  v26 = v5;
  if ((v24 & 1) == 0)
    v26 = *(swift::Demangle::Node **)v5;
  v27 = **((_BYTE **)v26 + v19);
  v19 = v12 + 1;
  v28 = v27 - 100;
  ++v12;
  v29 = v5;
  if ((v24 & 1) == 0)
LABEL_66:
    v29 = *(swift::Demangle::Node **)v5;
LABEL_67:
  if (*(_WORD *)(*((_QWORD *)v29 + v19) + 16) == 349)
  {
    if ((_DWORD)v11 == 1)
    {
      if (!v19)
        goto LABEL_76;
    }
    else
    {
      if ((_DWORD)v11 != 5)
      {
        if ((_DWORD)v11 != 2 || v19 >= 2)
          goto LABEL_74;
LABEL_76:
        v31 = v5;
        if ((v24 & 1) == 0)
          v31 = *(swift::Demangle::Node **)v5;
        v30 = (swift::Demangle::Node *)*((_QWORD *)v31 + v19);
        goto LABEL_79;
      }
      if (*((unsigned int *)v5 + 2) > v19)
        goto LABEL_76;
    }
LABEL_74:
    v30 = 0;
LABEL_79:
    v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    v32 = 0;
    v33 = *(swift::Demangle::Node **)v5;
  }
  else
  {
    v32 = 1;
    v33 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v33 + v19) + 16) == 272)
    goto LABEL_87;
  v34 = v5;
  if ((v32 & 1) == 0)
    v34 = *(swift::Demangle::Node **)v5;
  if (*(_WORD *)(*((_QWORD *)v34 + v19) + 16) == 273)
  {
LABEL_87:
    if ((_DWORD)v11 == 1)
    {
      if (!v19)
        goto LABEL_97;
    }
    else
    {
      if ((_DWORD)v11 != 5)
      {
        if ((_DWORD)v11 != 2 || v19 >= 2)
          goto LABEL_95;
LABEL_97:
        v37 = v5;
        if ((v32 & 1) == 0)
          v37 = *(swift::Demangle::Node **)v5;
        v35 = (swift::Demangle::Node *)*((_QWORD *)v37 + v19);
LABEL_100:
        v19 = ++v12;
        v36 = v5;
        if ((v32 & 1) != 0)
          goto LABEL_102;
        goto LABEL_101;
      }
      if (*((unsigned int *)v5 + 2) > v19)
        goto LABEL_97;
    }
LABEL_95:
    v35 = 0;
    goto LABEL_100;
  }
  v35 = 0;
  v36 = v5;
  if ((v32 & 1) == 0)
LABEL_101:
    v36 = *(swift::Demangle::Node **)v5;
LABEL_102:
  v38 = *(unsigned __int16 *)(*((_QWORD *)v36 + v19) + 16);
  if (v38 == 66)
    v39 = v12 + 1;
  else
    v39 = v12;
  v40 = v5;
  if ((v32 & 1) == 0)
    v40 = *(swift::Demangle::Node **)v5;
  v41 = *(unsigned __int16 *)(*((_QWORD *)v40 + v39) + 16);
  if (v41 == 271)
    v39 = (v39 + 1);
  else
    v39 = v39;
  v42 = v5;
  if ((v32 & 1) == 0)
    v42 = *(swift::Demangle::Node **)v5;
  v43 = *(unsigned __int16 *)(*((_QWORD *)v42 + v39) + 16);
  switch((v28 >> 1) | (v28 << 7))
  {
    case 0:
      v44 = "@differentiable ";
      v45 = this;
      v46 = 16;
      goto LABEL_118;
    case 1:
      v44 = "@differentiable(_forward) ";
      v45 = this;
      v46 = 26;
      goto LABEL_118;
    case 4:
      v44 = "@differentiable(_linear) ";
      goto LABEL_117;
    case 7:
      v44 = "@differentiable(reverse) ";
LABEL_117:
      v45 = this;
      v46 = 25;
LABEL_118:
      std::string::append(v45, v44, v46);
      break;
    default:
      break;
  }
  if (v38 == 66)
    std::string::append(this, "@Sendable ", 0xAuLL);
  v47 = *((unsigned __int8 *)v5 + 18);
  v48 = v47 - 1;
  if ((_DWORD)v47 != 1)
  {
    if ((_DWORD)v47 == 5)
    {
      v47 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if ((_DWORD)v47 != 2)
      {
LABEL_130:
        v50 = 0;
        goto LABEL_131;
      }
      v47 = 2;
    }
  }
  if (v47 <= v55)
    goto LABEL_130;
  v49 = v5;
  if (v48 >= 2)
    v49 = *(swift::Demangle::Node **)v5;
  v50 = (swift::Demangle::Node *)*((_QWORD *)v49 + v55);
LABEL_131:
  if (!this[1].__r_.__value_.__s.__data_[15])
    return;
  if (v41 == 271)
    std::string::append(this, " async", 6uLL);
  if (v35)
  std::string::append(this, " -> ", 4uLL);
  if (v43 == 130)
    std::string::append(this, "sending ", 8uLL);
  v51 = *((unsigned __int8 *)v5 + 18);
  v52 = v51 - 1;
  if ((_DWORD)v51 != 1)
  {
    if ((_DWORD)v51 == 5)
    {
      v51 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if ((_DWORD)v51 != 2)
        goto LABEL_147;
      v51 = 2;
    }
  }
  v53 = (v13 - 1);
  if (v51 > v53)
  {
    if (v52 >= 2)
      v5 = *(swift::Demangle::Node **)v5;
    v54 = (swift::Demangle::Node *)*((_QWORD *)v5 + v53);
    goto LABEL_148;
  }
LABEL_147:
  v54 = 0;
LABEL_148:
}

void `anonymous namespace'::NodePrinter::printFunctionParameters(std::string *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3, int a4, int a5)
{
  int v7;
  uint64_t *v8;
  int v9;
  swift::Demangle::Node **v10;
  swift::Demangle::Node **v11;
  int v12;
  BOOL v13;
  int v14;
  swift::Demangle::Node **v15;
  swift::Demangle::Node *v16;
  swift::Demangle::Node **v17;
  swift::Demangle::Node *v18;
  const std::string::value_type *v19;
  swift::Demangle::Node *v20;
  _QWORD v21[6];
  BOOL v22;
  int v23;
  swift::Demangle::Node **v24;
  unsigned __int8 v25;
  int v26;
  swift::Demangle::Node *v27;

  v27 = a2;
  v26 = a4;
  v25 = a5;
  if (*((_WORD *)a3 + 8) != 3)
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  v7 = *((unsigned __int8 *)a3 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_6;
  if (v7 == 5 && *((_DWORD *)a3 + 2))
  {
    a3 = *(swift::Demangle::Node **)a3;
LABEL_6:
    v8 = *(uint64_t **)a3;
    goto LABEL_9;
  }
  v8 = 0;
LABEL_9:
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)v8 + 2))
    {
      v10 = 0;
      goto LABEL_15;
    }
    v8 = (uint64_t *)*v8;
  }
  v10 = (swift::Demangle::Node **)*v8;
LABEL_15:
  v11 = v10 + 2;
  if (*((_WORD *)v10 + 8) != 223)
  {
    if (a5)
    {
      std::string::push_back(this, 40);
      std::string::push_back(this, 41);
    }
    else
    {
      std::string::append(this, "(_:)", 4uLL);
    }
    return;
  }
  v24 = &v27;
  v23 = 0;
  if (!a2)
    goto LABEL_24;
  v12 = *((unsigned __int8 *)a2 + 18);
  if ((v12 - 1) < 2)
  {
    v13 = 1;
    goto LABEL_25;
  }
  if (v12 == 5)
    v13 = *((_DWORD *)a2 + 2) != 0;
  else
LABEL_24:
    v13 = 0;
LABEL_25:
  v22 = v13;
  std::string::push_back(this, 40);
  v14 = *((unsigned __int8 *)v10 + 18);
  v15 = v10;
  if ((v14 - 1) >= 2)
  {
    if (v14 == 5)
    {
      v16 = *v10;
      v15 = (swift::Demangle::Node **)*v10;
LABEL_33:
      v11 = (swift::Demangle::Node **)((char *)v16 + 8 * *((unsigned int *)v10 + 2));
      goto LABEL_36;
    }
    v15 = 0;
  }
  switch(v14)
  {
    case 1:
      v11 = v10 + 1;
      break;
    case 2:
      break;
    case 5:
      v16 = *v10;
      goto LABEL_33;
    default:
      v11 = 0;
      break;
  }
LABEL_36:
  v21[0] = &v22;
  v21[1] = this;
  v21[2] = &v24;
  v21[3] = &v23;
  v21[4] = &v25;
  v21[5] = &v26;
  if (v15 != v11)
  {
    v18 = *v15;
    v17 = v15 + 1;
    while (v17 != v11)
    {
      if (v25)
        v19 = ", ";
      else
        v19 = (const std::string::value_type *)&unk_20AA50335;
      std::string::append(this, v19, 2 * v25);
      v20 = *v17++;
    }
  }
  std::string::push_back(this, 41);
}

uint64_t `anonymous namespace'::NodePrinter::getChildIf(uint64_t *a1, int a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v2 = *((unsigned __int8 *)a1 + 18);
  v3 = a1;
  if ((v2 - 1) >= 2)
  {
    if (v2 == 5)
    {
      v4 = *a1;
      v3 = (uint64_t *)*a1;
      goto LABEL_9;
    }
    v3 = 0;
  }
  switch(v2)
  {
    case 1:
      v5 = a1 + 1;
      if (v3 != a1 + 1)
        goto LABEL_16;
      break;
    case 2:
      v5 = a1 + 2;
      if (v3 != a1 + 2)
        goto LABEL_16;
      break;
    case 5:
      v4 = *a1;
LABEL_9:
      v5 = (uint64_t *)(v4 + 8 * *((unsigned int *)a1 + 2));
      if (v3 != v5)
        goto LABEL_16;
      break;
    default:
      v5 = 0;
      if (v3)
      {
LABEL_16:
        while (*(unsigned __int16 *)(*v3 + 16) != a2)
        {
          if (++v3 == v5)
          {
            v3 = v5;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v2 == 5)
  {
    if (v3 != (uint64_t *)(*a1 + 8 * *((unsigned int *)a1 + 2)))
      return *v3;
  }
  else
  {
    v6 = a1 + 1;
    if (v2 != 1)
      v6 = 0;
    if (v2 == 2)
      v7 = a1 + 2;
    else
      v7 = v6;
    if (v3 != v7)
      return *v3;
  }
  return 0;
}

void printer_unreachable(const char *a1)
{
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "fatal error: %s\n", a1);
  abort();
}

std::string *`anonymous namespace'::NodePrinter::printSpecializationPrefix(std::string *result, uint64_t *a2, const std::string::value_type *a3, std::string::size_type a4, int a5, const std::string::value_type *a6, std::string::size_type a7)
{
  std::string *v7;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  const char *v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  size_t v22;
  int v23;
  size_t v24;
  int v25;
  std::string *v26;
  char __str[32];

  v7 = result;
  if (result[1].__r_.__value_.__s.__data_[5])
  {
    std::string::append(result, a3, a4);
    std::string::append(v7, " <", 2uLL);
    v11 = *((unsigned __int8 *)a2 + 18);
    v12 = a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        v13 = (uint64_t *)*a2;
        v12 = (uint64_t *)*a2;
LABEL_12:
        v14 = &v13[*((unsigned int *)a2 + 2)];
        if (v12 == v14)
          return std::string::append(v7, "> of ", 5uLL);
        goto LABEL_19;
      }
      v12 = 0;
    }
    switch(v11)
    {
      case 1:
        v14 = a2 + 1;
        if (v12 == a2 + 1)
          return std::string::append(v7, "> of ", 5uLL);
        break;
      case 2:
        v14 = a2 + 2;
        if (v12 == a2 + 2)
          return std::string::append(v7, "> of ", 5uLL);
        break;
      case 5:
        v13 = (uint64_t *)*a2;
        goto LABEL_12;
      default:
        v14 = 0;
        if (!v12)
          return std::string::append(v7, "> of ", 5uLL);
        break;
    }
LABEL_19:
    v15 = 0;
    v16 = a5 + 1;
    v17 = (const char *)&unk_20AA50335;
    while (1)
    {
      v20 = *v12;
      v21 = *(unsigned __int16 *)(*v12 + 16);
      if (v21 == 216 || v21 == 339)
        goto LABEL_24;
      if (v21 == 217)
      {
        if (v17)
          v22 = strlen(v17);
        else
          v22 = 0;
        std::string::append(v7, v17, v22);
        v17 = ", ";
        goto LABEL_24;
      }
      v23 = *(unsigned __int8 *)(v20 + 18);
      if ((v23 - 1) < 2 || v23 == 5 && *(_DWORD *)(v20 + 8))
        break;
LABEL_23:
      ++v15;
LABEL_24:
      if (++v12 == v14)
        return std::string::append(v7, "> of ", 5uLL);
    }
    if (v17)
      v24 = strlen(v17);
    else
      v24 = 0;
    std::string::append(v7, v17, v24);
    std::string::append(v7, a6, a7);
    v25 = *(unsigned __int16 *)(v20 + 16);
    v26 = v7;
    if (v25 == 79)
    {
      v18 = "Return = ";
      v19 = 9;
    }
    else
    {
      if (v25 != 78)
      {
        goto LABEL_22;
      }
      std::string::append(v7, "Arg[", 4uLL);
      snprintf(__str, 0x20uLL, "%lld", v15);
      std::string::append(v7, __str);
      v26 = v7;
      v18 = "] = ";
      v19 = 4;
    }
    std::string::append(v26, v18, v19);
LABEL_22:
    v17 = ", ";
    goto LABEL_23;
  }
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    result = std::string::append(result, "specialized ", 0xCuLL);
    v7[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *swift::Demangle::DemanglerPrinter::operator<<(std::string *a1, unsigned int a2)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *`anonymous namespace'::NodePrinter::printBoundGeneric(std::string *this, swift::Demangle::Node *a2, int a3)
{
  swift::Demangle::Node *v4;
  std::string *v5;
  int v6;
  unsigned int v7;
  int v8;
  swift::Demangle::Node *v9;
  uint64_t v10;
  int v11;
  swift::Demangle::Node **v12;
  swift::Demangle::Node *v13;
  int v14;
  swift::Demangle::Node *i;
  int v16;
  int v17;
  swift::Demangle::Node *v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  swift::Demangle::Node **v28;
  uint64_t *v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  swift::Demangle::Node *v51;
  int v52;
  swift::Demangle::Node *v53;
  int v54;
  int ***v55;
  int **v56;
  int v57;
  uint64_t **v58;
  uint64_t *v59;
  int v60;
  uint64_t *v61;
  int *v62;
  int v63;
  int v64;
  const char *v66;
  int *v67;
  int v68;
  int v69;
  swift::Demangle::Node *v71;
  int *v72;
  int v73;
  int v74;
  swift::Demangle::Node *v76;
  int *v77;
  int v78;
  int v79;
  swift::Demangle::Node *v81;
  swift::Demangle::Node *v82;
  int v83;
  swift::Demangle::Node *v84;
  std::string *v85;
  const std::string::value_type *v86;
  int v87;
  swift::Demangle::Node *v88;
  int v89;
  swift::Demangle::Node *v90;
  unsigned int v91;
  _anonymous_namespace_::NodePrinter *v92;
  swift::Demangle::Node *v93;
  uint64_t *v94;
  int v95;
  swift::Demangle::Node *v96;
  unsigned int v97;

  v4 = a2;
  v5 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 2)
  {
LABEL_6:
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      v8 = *((unsigned __int16 *)a2 + 8);
      if (v8 != 13)
      {
        if (v8 == 16)
        {
          v9 = a2;
          if (v6 != 2)
          {
            if (*((_DWORD *)a2 + 2) < 2u)
              goto LABEL_120;
            v9 = *(swift::Demangle::Node **)a2;
          }
          v10 = *((_QWORD *)v9 + 1);
          if (!v10)
          {
LABEL_120:
            std::string::append(v5, " as ", 4uLL);
            v52 = *((unsigned __int8 *)v4 + 18);
            if ((v52 - 1) >= 2)
            {
              if (v52 != 5 || !*((_DWORD *)v4 + 2))
              {
                v53 = 0;
              }
              v4 = *(swift::Demangle::Node **)v4;
            }
            v53 = *(swift::Demangle::Node **)v4;
          }
          v11 = *(unsigned __int8 *)(v10 + 18);
          v12 = (swift::Demangle::Node **)v10;
          if ((v11 - 1) >= 2)
          {
            if (v11 == 5)
            {
              v13 = *(swift::Demangle::Node **)v10;
              v12 = *(swift::Demangle::Node ***)v10;
LABEL_63:
              v28 = (swift::Demangle::Node **)((char *)v13 + 8 * *(unsigned int *)(v10 + 8));
              goto LABEL_118;
            }
            v12 = 0;
          }
          switch(v11)
          {
            case 1:
              v28 = (swift::Demangle::Node **)(v10 + 8);
              break;
            case 2:
              v28 = (swift::Demangle::Node **)(v10 + 16);
              break;
            case 5:
              v13 = *(swift::Demangle::Node **)v10;
              goto LABEL_63;
            default:
              v28 = 0;
              break;
          }
LABEL_118:
          while (v12 != v28)
          {
            v51 = *v12++;
          }
          goto LABEL_120;
        }
        v14 = *((unsigned __int8 *)a2 + 18);
        for (i = a2; ; v14 = *((unsigned __int8 *)i + 18))
        {
          if (v14 != 1)
          {
            if (v14 != 5)
            {
              if (v14 != 2)
              goto LABEL_30;
            }
            v16 = *((_DWORD *)i + 2);
            if (v16 != 1)
              break;
          }
          if (*((_WORD *)i + 8) != 232)
          {
            if (v14 != 5)
            v16 = *((_DWORD *)i + 2);
            break;
          }
          if ((v14 - 1) >= 2)
            i = *(swift::Demangle::Node **)i;
          i = *(swift::Demangle::Node **)i;
        }
        if (v16 != 2)
        v14 = 5;
LABEL_30:
        v17 = *((unsigned __int16 *)i + 8);
        if ((v17 & 0xFFFE) == 0xE)
        {
          v18 = i;
          if (v14 != 2)
          {
            if (!*((_DWORD *)i + 2))
            {
              v19 = 0;
LABEL_36:
              v20 = *((unsigned __int8 *)v19 + 18);
              if ((v20 - 1) >= 2)
              {
                if (v20 != 5 || !*((_DWORD *)v19 + 2))
                {
                  v21 = 0;
LABEL_42:
                  if (v14 != 2)
                  {
                    if (*((_DWORD *)i + 2) < 2u)
                    {
                      v22 = 0;
LABEL_47:
                      v23 = *((unsigned __int8 *)v21 + 18);
                      if (v17 == 14)
                      {
                        v24 = v21;
                        if (v23 != 2)
                        {
                          if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                          {
                            v25 = 0;
                            goto LABEL_65;
                          }
                          v24 = (uint64_t *)*v21;
                        }
                        v25 = v24[1];
LABEL_65:
                        if (*(_WORD *)(v25 + 16) != 101)
                          goto LABEL_68;
                        if (*(_QWORD *)(v25 + 8) != 8)
                          goto LABEL_68;
                        if (**(_QWORD **)v25 != 0x6C616E6F6974704FLL)
                          goto LABEL_68;
                        v54 = *(unsigned __int8 *)(v22 + 18);
                        if (v54 != 1 && (v54 != 5 || *(_DWORD *)(v22 + 8) != 1))
                          goto LABEL_68;
                        v55 = (int ***)v21;
                        if ((v23 - 1) >= 2)
                        {
                          if (v23 != 5 || !*((_DWORD *)v21 + 2))
                          {
                            v56 = 0;
LABEL_152:
                            if (*((_WORD *)v56 + 8) == 153 && v56[1] == (int *)5)
                            {
                              v62 = *v56;
                              v63 = *v62;
                              v64 = *((unsigned __int8 *)v62 + 4);
                              if (v63 == 1718187859 && v64 == 116)
                              {
                                v66 = "?";
                                goto LABEL_181;
                              }
                            }
LABEL_68:
                            v29 = v21;
                            if (v23 != 2)
                            {
                              if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                              {
                                v30 = 0;
LABEL_86:
                                if (*(_WORD *)(v30 + 16) != 101 || *(_QWORD *)(v30 + 8) != 27)
                                v37 = *(uint64_t **)v30;
                                v38 = *v37;
                                v39 = v37[1];
                                v40 = v37[2];
                                v41 = *(uint64_t *)((char *)v37 + 19);
                                v42 = v38 == 0x746963696C706D49 && v39 == 0x706172776E55796CLL;
                                v43 = v42 && v40 == 0x6F6974704F646570;
                                if (!v43 || v41 != 0x6C616E6F6974704FLL)
                                v45 = *(unsigned __int8 *)(v22 + 18);
                                if (v45 != 1 && (v45 != 5 || *(_DWORD *)(v22 + 8) != 1))
                                if ((v23 - 1) >= 2)
                                {
                                  if (v23 != 5 || !*((_DWORD *)v21 + 2))
                                  {
                                    v46 = 0;
                                    goto LABEL_173;
                                  }
                                  v21 = (uint64_t *)*v21;
                                }
                                v46 = (uint64_t *)*v21;
LABEL_173:
                                if (*((_WORD *)v46 + 8) != 153 || v46[1] != 5)
                                v72 = (int *)*v46;
                                v73 = *v72;
                                v74 = *((unsigned __int8 *)v72 + 4);
                                if (v73 != 1718187859 || v74 != 116)
                                v66 = "!";
LABEL_181:
                                if (v6 != 2)
                                {
                                  if (*((_DWORD *)a2 + 2) < 2u)
                                  {
                                    v76 = 0;
LABEL_198:
                                    v83 = *((unsigned __int8 *)v76 + 18);
                                    if ((v83 - 1) >= 2)
                                    {
                                      if (v83 != 5 || !*((_DWORD *)v76 + 2))
                                      {
                                        v84 = 0;
                                        goto LABEL_204;
                                      }
                                      v76 = *(swift::Demangle::Node **)v76;
                                    }
                                    v84 = *(swift::Demangle::Node **)v76;
LABEL_204:
                                    v85 = v5;
                                    v86 = v66;
                                    return std::string::append(v85, v86, 1uLL);
                                  }
                                  v4 = *(swift::Demangle::Node **)a2;
                                }
                                v76 = (swift::Demangle::Node *)*((_QWORD *)v4 + 1);
                                goto LABEL_198;
                              }
                              v29 = (uint64_t *)*v21;
                            }
                            v30 = v29[1];
                            goto LABEL_86;
                          }
                          v55 = (int ***)*v21;
                        }
                        v56 = *v55;
                        goto LABEL_152;
                      }
                      v26 = v21;
                      if (v23 != 2)
                      {
                        if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                        {
                          v27 = 0;
LABEL_74:
                          if (*((_WORD *)v27 + 8) != 101
                            || v27[1] != 5
                            || ((v31 = (int *)*v27, v32 = *v31, v33 = *((unsigned __int8 *)v31 + 4), v32 == 1634890305)
                              ? (v34 = v33 == 121)
                              : (v34 = 0),
                                !v34
                             || (v57 = *(unsigned __int8 *)(v22 + 18), v57 != 1)
                             && (v57 != 5 || *(_DWORD *)(v22 + 8) != 1)))
                          {
LABEL_80:
                            v35 = v21;
                            if (v23 != 2)
                            {
                              if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                              {
                                v36 = 0;
LABEL_108:
                                if (*((_WORD *)v36 + 8) != 101 || v36[1] != (uint64_t *)10)
                                v47 = *v36;
                                v48 = *v47;
                                v49 = *((unsigned __int16 *)v47 + 4);
                                if (v48 != 0x616E6F6974636944 || v49 != 31090)
                                v60 = *(unsigned __int8 *)(v22 + 18);
                                if (v60 != 2 && (v60 != 5 || *(_DWORD *)(v22 + 8) != 2))
                                if ((v23 - 1) >= 2)
                                {
                                  if (v23 != 5 || !*((_DWORD *)v21 + 2))
                                  {
                                    v61 = 0;
LABEL_186:
                                    if (*((_WORD *)v61 + 8) != 153 || v61[1] != 5)
                                    v77 = (int *)*v61;
                                    v78 = *v77;
                                    v79 = *((unsigned __int8 *)v77 + 4);
                                    if (v78 != 1718187859 || v79 != 116)
                                    v81 = a2;
                                    if (v6 != 2)
                                    {
                                      if (*((_DWORD *)a2 + 2) < 2u)
                                      {
                                        v82 = 0;
LABEL_212:
                                        v89 = *((unsigned __int8 *)v82 + 18);
                                        if ((v89 - 1) >= 2)
                                        {
                                          if (v89 != 5 || !*((_DWORD *)v82 + 2))
                                          {
                                            v90 = 0;
LABEL_220:
                                            if (v6 != 2)
                                            {
                                              if (*((_DWORD *)a2 + 2) < 2u)
                                              {
                                                v94 = 0;
LABEL_225:
                                                v95 = *((unsigned __int8 *)v94 + 18);
                                                if (v95 != 2)
                                                {
                                                  if (v95 != 5 || *((_DWORD *)v94 + 2) < 2u)
                                                  {
                                                    v96 = 0;
                                                    goto LABEL_231;
                                                  }
                                                  v94 = (uint64_t *)*v94;
                                                }
                                                v96 = (swift::Demangle::Node *)v94[1];
LABEL_231:
                                                std::string::append(this, "[", 1uLL);
                                                v97 = a3 + 1;
                                                std::string::append(v5, " : ", 3uLL);
                                                v92 = (_anonymous_namespace_::NodePrinter *)v5;
                                                v93 = v96;
                                                v91 = v97;
                                                goto LABEL_232;
                                              }
                                              v4 = *(swift::Demangle::Node **)a2;
                                            }
                                            v94 = (uint64_t *)*((_QWORD *)v4 + 1);
                                            goto LABEL_225;
                                          }
                                          v82 = *(swift::Demangle::Node **)v82;
                                        }
                                        v90 = *(swift::Demangle::Node **)v82;
                                        goto LABEL_220;
                                      }
                                      v81 = *(swift::Demangle::Node **)a2;
                                    }
                                    v82 = (swift::Demangle::Node *)*((_QWORD *)v81 + 1);
                                    goto LABEL_212;
                                  }
                                  v21 = (uint64_t *)*v21;
                                }
                                v61 = (uint64_t *)*v21;
                                goto LABEL_186;
                              }
                              v35 = (uint64_t *)*v21;
                            }
                            v36 = (uint64_t **)v35[1];
                            goto LABEL_108;
                          }
                          v58 = (uint64_t **)v21;
                          if ((v23 - 1) >= 2)
                          {
                            if (v23 != 5 || !*((_DWORD *)v21 + 2))
                            {
                              v59 = 0;
LABEL_161:
                              if (*((_WORD *)v59 + 8) != 153 || v59[1] != 5)
                                goto LABEL_80;
                              v67 = (int *)*v59;
                              v68 = *v67;
                              v69 = *((unsigned __int8 *)v67 + 4);
                              if (v68 != 1718187859 || v69 != 116)
                                goto LABEL_80;
                              if (v6 != 2)
                              {
                                if (*((_DWORD *)a2 + 2) < 2u)
                                {
                                  v71 = 0;
LABEL_206:
                                  v87 = *((unsigned __int8 *)v71 + 18);
                                  if ((v87 - 1) >= 2)
                                  {
                                    if (v87 != 5 || !*((_DWORD *)v71 + 2))
                                    {
                                      v88 = 0;
                                      goto LABEL_218;
                                    }
                                    v71 = *(swift::Demangle::Node **)v71;
                                  }
                                  v88 = *(swift::Demangle::Node **)v71;
LABEL_218:
                                  std::string::append(this, "[", 1uLL);
                                  v91 = a3 + 1;
                                  v92 = (_anonymous_namespace_::NodePrinter *)v5;
                                  v93 = v88;
LABEL_232:
                                  v86 = "]";
                                  v85 = v5;
                                  return std::string::append(v85, v86, 1uLL);
                                }
                                v4 = *(swift::Demangle::Node **)a2;
                              }
                              v71 = (swift::Demangle::Node *)*((_QWORD *)v4 + 1);
                              goto LABEL_206;
                            }
                            v58 = (uint64_t **)*v21;
                          }
                          v59 = *v58;
                          goto LABEL_161;
                        }
                        v26 = (uint64_t *)*v21;
                      }
                      v27 = (uint64_t *)v26[1];
                      goto LABEL_74;
                    }
                    i = *(swift::Demangle::Node **)i;
                  }
                  v22 = *((_QWORD *)i + 1);
                  goto LABEL_47;
                }
                v19 = (uint64_t *)*v19;
              }
              v21 = (uint64_t *)*v19;
              goto LABEL_42;
            }
            v18 = *(swift::Demangle::Node **)i;
          }
          v19 = *(uint64_t **)v18;
          goto LABEL_36;
        }
      }
    }
  }
  if (v6 == 5)
  {
    v7 = *((_DWORD *)a2 + 2);
    if (v7 >= 2)
    {
      if (v7 != 2)
      goto LABEL_6;
    }
  }
  return this;
}

std::string *`anonymous namespace'::NodePrinter::printWithParens(_anonymous_namespace_::NodePrinter *this, swift::Demangle::Node *a2, int a3)
{
  swift::Demangle::Node *v6;
  swift::Demangle::Node *v7;
  int v8;
  int v9;
  swift::Demangle::Node *v10;
  int v11;
  swift::Demangle::Node *v12;
  int v13;
  int v14;
  swift::Demangle::Node *v15;
  int v16;

  v6 = a2;
  while (2)
  {
    v7 = v6;
    switch(*((_WORD *)v6 + 8))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCE:
      case 0xD0:
      case 0xD1:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xE0:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        goto LABEL_33;
      case 4:
      case 5:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x18:
      case 0x26:
      case 0x2C:
      case 0x2D:
      case 0x39:
      case 0x3D:
      case 0x3F:
      case 0x45:
      case 0x54:
      case 0x55:
      case 0x91:
      case 0x92:
      case 0x99:
      case 0xA7:
      case 0xB4:
      case 0xB5:
      case 0xCF:
      case 0xD2:
      case 0xD3:
      case 0xDB:
      case 0xDF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0x122:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0xBE:
        v9 = *((unsigned __int8 *)v6 + 18);
        if ((v9 - 1) < 2)
          goto LABEL_12;
        if (v9 == 5 && *((_DWORD *)v6 + 2))
        {
          v7 = *(swift::Demangle::Node **)v6;
LABEL_12:
          v10 = *(swift::Demangle::Node **)v7;
        }
        else
        {
          v10 = 0;
        }
        v13 = *((unsigned __int8 *)v10 + 18);
        if (v13 == 2 || v13 == 5 && *((_DWORD *)v10 + 2) >= 2u)
          goto LABEL_33;
      case 0xC0:
        v11 = *((unsigned __int8 *)v6 + 18);
        if ((v11 - 1) < 2)
          goto LABEL_17;
        if (v11 == 5 && *((_DWORD *)v6 + 2))
        {
          v7 = *(swift::Demangle::Node **)v6;
LABEL_17:
          v12 = *(swift::Demangle::Node **)v7;
        }
        else
        {
          v12 = 0;
        }
        v14 = *((unsigned __int8 *)v12 + 18);
        if ((v14 - 1) < 2)
          goto LABEL_28;
        if (v14 == 5 && *((_DWORD *)v12 + 2))
        {
          v12 = *(swift::Demangle::Node **)v12;
LABEL_28:
          v15 = *(swift::Demangle::Node **)v12;
        }
        else
        {
          v15 = 0;
        }
        v16 = *((unsigned __int8 *)v15 + 18);
        if ((v16 - 1) >= 2 && (v16 != 5 || !*((_DWORD *)v15 + 2)))
LABEL_33:
        std::string::append((std::string *)this, "(", 1uLL);
        return std::string::append((std::string *)this, ")", 1uLL);
      case 0xE8:
        v8 = *((unsigned __int8 *)v6 + 18);
        if ((v8 - 1) < 2)
          goto LABEL_7;
        v6 = 0;
        if (v8 == 5)
        {
          v6 = 0;
          if (*((_DWORD *)v7 + 2))
          {
            v7 = *(swift::Demangle::Node **)v7;
LABEL_7:
            v6 = *(swift::Demangle::Node **)v7;
          }
        }
        continue;
      default:
        printer_unreachable("bad node kind");
    }
  }
}

swift::Demangle::Node *`anonymous namespace'::NodePrinter::printAbstractStorage(uint64_t a1, uint64_t a2, int a3, int a4, std::string::value_type *a5, size_t a6)
{
  int v6;

  v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 == 220)
  if (v6 != 254)
    printer_unreachable("Not an abstract storage node");
}

void `anonymous namespace'::NodePrinter::printImplFunctionType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::Node *a2, int a3)
{
  int v4;
  swift::Demangle::Node *v5;
  uint64_t v6;
  swift::Demangle::Node *v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node **v9;
  int v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  swift::Demangle::Node **v15;
  swift::Demangle::Node *v16;
  swift::Demangle::Node **v17;
  unsigned int v18;
  swift::Demangle::Node *v19;
  int v20;
  swift::Demangle::Node *v21;
  int v22;
  swift::Demangle::Node **v23;
  swift::Demangle::Node **v24;
  swift::Demangle::Node **v25;
  unsigned int v26;
  swift::Demangle::Node *v27;
  int *v28[5];
  int v29;
  swift::Demangle::Node **v30;
  swift::Demangle::Node **v31;
  int v32;

  v32 = a3;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v28[0] = &v29;
  v28[1] = (int *)&v31;
  v28[2] = (int *)this;
  v28[3] = &v32;
  v28[4] = (int *)&v30;
  v4 = *((unsigned __int8 *)a2 + 18);
  v5 = a2;
  if ((v4 - 1) >= 2)
  {
    if (v4 == 5)
    {
      v6 = *(_QWORD *)a2;
      v5 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v5 = 0;
  }
  if (v4 == 1)
  {
    v7 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v5 == (swift::Demangle::Node *)((char *)a2 + 8))
      goto LABEL_29;
    goto LABEL_14;
  }
  if (v4 == 2)
  {
    v7 = (swift::Demangle::Node *)((char *)a2 + 16);
    if (v5 != (swift::Demangle::Node *)((char *)a2 + 16))
      goto LABEL_14;
    goto LABEL_29;
  }
  if (v4 != 5)
  {
    v7 = 0;
    if (v5)
      goto LABEL_14;
LABEL_29:
    v9 = 0;
    goto LABEL_30;
  }
  v6 = *(_QWORD *)a2;
LABEL_9:
  v7 = (swift::Demangle::Node *)(v6 + 8 * *((unsigned int *)a2 + 2));
  if (v5 == v7)
    goto LABEL_29;
LABEL_14:
  v8 = 0;
  do
  {
    v9 = *(swift::Demangle::Node ***)v5;
    switch(*(_WORD *)(*(_QWORD *)v5 + 16))
    {
      case 'm':
        v30 = *(swift::Demangle::Node ***)v5;
        break;
      case 't':
        goto LABEL_17;
      case 'v':
        if (v29 == 1)
          std::string::append((std::string *)this, ", ", 2uLL);
        v10 = 1;
        goto LABEL_26;
      case 'w':
        v31 = *(swift::Demangle::Node ***)v5;
        break;
      case 'x':
      case 'y':
      case 'z':
        if (v29 == 2)
          std::string::append((std::string *)this, ", ", 2uLL);
        v10 = 2;
LABEL_26:
        break;
      default:
        std::string::push_back((std::string *)this, 32);
        break;
    }
    v9 = v8;
LABEL_17:
    v5 = (swift::Demangle::Node *)((char *)v5 + 8);
    v8 = v9;
  }
  while (v5 != v7);
LABEL_30:
  std::string::push_back((std::string *)this, 41);
  if (!v31)
    goto LABEL_52;
  std::string::append((std::string *)this, " for <", 6uLL);
  v11 = v31;
  v12 = *((unsigned __int8 *)v31 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v31 + 2) < 2u)
      goto LABEL_51;
    v11 = *v31;
  }
  v13 = v11[1];
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 18);
    v15 = (swift::Demangle::Node **)v13;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        v16 = *(swift::Demangle::Node **)v13;
        v15 = *(swift::Demangle::Node ***)v13;
LABEL_44:
        v17 = (swift::Demangle::Node **)((char *)v16 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_48;
      }
      v15 = 0;
    }
    switch(v14)
    {
      case 1:
        v17 = (swift::Demangle::Node **)(v13 + 8);
        break;
      case 2:
        v17 = (swift::Demangle::Node **)(v13 + 16);
        break;
      case 5:
        v16 = *(swift::Demangle::Node **)v13;
        goto LABEL_44;
      default:
        v17 = 0;
        break;
    }
LABEL_48:
    if (v15 != v17)
    {
      v18 = v32 + 1;
      do
      {
        v19 = *v15++;
      }
      while (v15 != v17);
    }
  }
LABEL_51:
  std::string::push_back((std::string *)this, 62);
LABEL_52:
  if (!v9)
    return;
  std::string::append((std::string *)this, " for <", 6uLL);
  v20 = *((unsigned __int8 *)v9 + 18);
  if ((v20 - 1) >= 2)
  {
    if (v20 != 5 || !*((_DWORD *)v9 + 2))
      goto LABEL_73;
    v9 = (swift::Demangle::Node **)*v9;
  }
  v21 = *v9;
  if (*v9)
  {
    v22 = *((unsigned __int8 *)v21 + 18);
    v23 = (swift::Demangle::Node **)*v9;
    if ((v22 - 1) >= 2)
    {
      if (v22 == 5)
      {
        v24 = *(swift::Demangle::Node ***)v21;
        v23 = *(swift::Demangle::Node ***)v21;
LABEL_66:
        v25 = &v24[*((unsigned int *)v21 + 2)];
        goto LABEL_70;
      }
      v23 = 0;
    }
    switch(v22)
    {
      case 1:
        v25 = (swift::Demangle::Node **)((char *)v21 + 8);
        break;
      case 2:
        v25 = (swift::Demangle::Node **)((char *)v21 + 16);
        break;
      case 5:
        v24 = *(swift::Demangle::Node ***)v21;
        goto LABEL_66;
      default:
        v25 = 0;
        break;
    }
LABEL_70:
    if (v23 != v25)
    {
      v26 = v32 + 1;
      do
      {
        v27 = *v23++;
      }
      while (v23 != v25);
    }
  }
LABEL_73:
  std::string::push_back((std::string *)this, 62);
}

void `anonymous namespace'::NodePrinter::printGenericSignature(std::string *this, swift::Demangle::Node *a2, int a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  swift::Demangle::Node *v11;
  unint64_t v12;
  swift::Demangle::Node *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  swift::Demangle::Node *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  swift::Demangle::Node *v26;
  uint64_t *v27;
  int v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  int v32;
  _QWORD **v33;
  std::string::size_type v34;
  void **v35;
  std::string::size_type v36;
  unint64_t v37;
  unsigned int v38;
  swift::Demangle::Node *v39;
  swift::Demangle::Node *v40;
  unint64_t v41;
  unsigned int v42;
  swift::Demangle::Node *v43;
  unint64_t v44;
  unsigned int v45;
  swift::Demangle::Node *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  void *__p[2];
  unsigned __int8 v51;
  unint64_t v52;
  uint64_t v53;

  std::string::push_back(this, 60);
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = v6 - 1;
  v48 = a3;
  if (v6 == 1)
  {
    v8 = 1;
    goto LABEL_7;
  }
  if (v6 != 5)
  {
    if (v6 != 2)
      goto LABEL_106;
    v8 = 2;
LABEL_7:
    v9 = 0;
    LODWORD(v10) = v8;
    while (1)
    {
      v11 = a2;
      if (v7 >= 2)
        v11 = *(swift::Demangle::Node **)a2;
      if (*(_WORD *)(*((_QWORD *)v11 + v9) + 16) != 37)
        goto LABEL_14;
      if (v8 == ++v9)
      {
        v49 = v8;
        LODWORD(v9) = v8;
        goto LABEL_35;
      }
    }
  }
  v8 = *((_DWORD *)a2 + 2);
  if (v8)
    goto LABEL_7;
  LODWORD(v9) = 0;
LABEL_14:
  v49 = v8;
  if (v9 >= v8)
  {
    LODWORD(v10) = v9;
    if (!(_DWORD)v9)
      goto LABEL_92;
    goto LABEL_35;
  }
  v10 = v9;
  do
  {
    v12 = *((unsigned __int8 *)a2 + 18);
    if (v6 == 1)
      goto LABEL_19;
    if (v6 != 5)
    {
      v12 = 2;
LABEL_19:
      if (v12 <= v10)
        goto LABEL_24;
      goto LABEL_20;
    }
    if (*((unsigned int *)a2 + 2) <= v10)
    {
LABEL_24:
      v14 = 0;
      goto LABEL_25;
    }
LABEL_20:
    v13 = a2;
    if (v7 >= 2)
      v13 = *(swift::Demangle::Node **)a2;
    v14 = (uint64_t *)*((_QWORD *)v13 + v10);
LABEL_25:
    v15 = *((unsigned __int16 *)v14 + 8);
    if (v15 == 232)
    {
      if (*((unsigned __int8 *)v14 + 18) - 1 >= 2)
        v14 = (uint64_t *)*v14;
      v15 = *(unsigned __int16 *)(*v14 + 16);
    }
    if (v15 != 42)
      goto LABEL_32;
    ++v10;
  }
  while (v8 != (_DWORD)v10);
  LODWORD(v10) = v8;
LABEL_32:
  if (!(_DWORD)v9)
  {
LABEL_92:
    if ((_DWORD)v10 == v49)
      goto LABEL_106;
    if (!this[1].__r_.__value_.__s.__data_[7])
      goto LABEL_106;
    std::string::append(this, " where ", 7uLL);
    if (v10 >= v49)
      goto LABEL_106;
    v37 = *((unsigned __int8 *)a2 + 18);
    v38 = v37 - 1;
    switch((_DWORD)v37)
    {
      case 1:
        goto LABEL_99;
      case 2:
        if (v10 < 2uLL)
          goto LABEL_100;
        break;
      case 5:
        v37 = *((unsigned int *)a2 + 2);
LABEL_99:
        if (v37 > v10)
        {
LABEL_100:
          v39 = a2;
          if (v38 >= 2)
            v39 = *(swift::Demangle::Node **)a2;
          v40 = (swift::Demangle::Node *)*((_QWORD *)v39 + v10);
LABEL_105:
          v41 = v10 + 1;
          if (v49 == (_DWORD)v10 + 1)
          {
LABEL_106:
            std::string::push_back(this, 62);
            return;
          }
          v42 = ~(_DWORD)v10 + v49;
          while (2)
          {
            if (v41 > v10)
              std::string::append(this, ", ", 2uLL);
            v44 = *((unsigned __int8 *)a2 + 18);
            if ((_DWORD)v44 == 2)
            {
              if (v44 <= v41)
                goto LABEL_108;
            }
            else if ((_DWORD)v44 != 5 || *((unsigned int *)a2 + 2) <= v41)
            {
LABEL_108:
              v43 = 0;
              goto LABEL_109;
            }
            v45 = v44 - 1;
            v46 = a2;
            if (v45 >= 2)
              v46 = *(swift::Demangle::Node **)a2;
            v43 = (swift::Demangle::Node *)*((_QWORD *)v46 + v41);
LABEL_109:
            ++v41;
            if (!--v42)
              goto LABEL_106;
            continue;
          }
        }
        break;
    }
    v40 = 0;
    goto LABEL_105;
  }
LABEL_35:
  v16 = 0;
  while (2)
  {
    if (v16)
      std::string::append(this, "><", 2uLL);
    v17 = a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
      v17 = *(swift::Demangle::Node **)a2;
    v18 = (_DWORD *)*((_QWORD *)v17 + v16);
    v19 = *v18;
    if (!*v18)
    {
LABEL_37:
      if (++v16 == v9)
        goto LABEL_92;
      continue;
    }
    break;
  }
  v20 = 0;
  while (2)
  {
    if (v20)
    {
      std::string::append(this, ", ", 2uLL);
      if (v20 >= 0x80)
      {
        std::string::append(this, "...", 3uLL);
        goto LABEL_37;
      }
    }
    if (v10 <= v9)
      goto LABEL_83;
    v21 = *((unsigned __int8 *)a2 + 18);
    v22 = 1;
    v23 = v10 - v9;
    v24 = v9;
    while (2)
    {
      v25 = *((unsigned __int8 *)a2 + 18);
      switch(v21)
      {
        case 1:
LABEL_55:
          if (v25 <= v24)
            break;
LABEL_56:
          v26 = a2;
          if ((v21 - 1) >= 2)
            v26 = *(swift::Demangle::Node **)a2;
          v27 = (uint64_t *)*((_QWORD *)v26 + v24);
          goto LABEL_61;
        case 5:
          if (*((unsigned int *)a2 + 2) <= v24)
            break;
          goto LABEL_56;
        case 2:
          v25 = 2;
          goto LABEL_55;
      }
      v27 = 0;
LABEL_61:
      if (*((_WORD *)v27 + 8) != 42)
        goto LABEL_50;
      v28 = *((unsigned __int8 *)v27 + 18);
      if ((v28 - 1) < 2)
        goto LABEL_66;
      if (v28 == 5 && *((_DWORD *)v27 + 2))
      {
        v27 = (uint64_t *)*v27;
LABEL_66:
        v29 = (_QWORD *)*v27;
      }
      else
      {
        v29 = 0;
      }
      if (*((_WORD *)v29 + 8) != 232)
        goto LABEL_50;
      v30 = *((unsigned __int8 *)v29 + 18);
      if ((v30 - 1) < 2)
        goto LABEL_73;
      if (v30 == 5 && *((_DWORD *)v29 + 2))
      {
        v29 = (_QWORD *)*v29;
LABEL_73:
        v31 = (_QWORD *)*v29;
      }
      else
      {
        v31 = 0;
      }
      if (*((_WORD *)v31 + 8) != 38)
        goto LABEL_50;
      v32 = *((unsigned __int8 *)v31 + 18);
      v33 = (_QWORD **)v31;
      if ((v32 - 1) >= 2)
        v33 = (_QWORD **)*v31;
      if (**v33 != v20)
        goto LABEL_50;
      if (v32 == 5)
        v31 = (_QWORD *)*v31;
      if (*(_QWORD *)v31[1] != v16)
      {
LABEL_50:
        v22 = ++v24 < v10;
        if (!--v23)
          break;
        continue;
      }
      break;
    }
    if (v22)
      std::string::append(this, "each ", 5uLL);
LABEL_83:
    v52 = v20;
    v53 = v16;
    v34 = this[3].__r_.__value_.__r.__words[2];
    if (v34)
    {
      (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t *, unint64_t *))(*(_QWORD *)v34 + 48))(__p, v34, &v53, &v52);
      if ((v51 & 0x80u) == 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      if ((v51 & 0x80u) == 0)
        v36 = v51;
      else
        v36 = (std::string::size_type)__p[1];
      std::string::append(this, (const std::string::value_type *)v35, v36);
      if ((char)v51 < 0)
        operator delete(__p[0]);
      if (++v20 == v19)
        goto LABEL_37;
      continue;
    }
    break;
  }
  v47 = std::__throw_bad_function_call[abi:nn180100]();
  std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(v47);
}

uint64_t std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _anonymous_namespace_::NodePrinter *v5;
  swift::Demangle::Node *const *v6;
  swift::Demangle::Node *const *v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v11, &v10);
  v5 = (_anonymous_namespace_::NodePrinter *)std::__throw_bad_function_call[abi:nn180100]();
}

std::string *`anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::Node *const *a2, swift::Demangle::Node *const *a3, int a4, const char *a5)
{
  swift::Demangle::Node *const *v7;
  _anonymous_namespace_::NodePrinter *v8;
  unsigned int v9;
  swift::Demangle::Node *v10;
  size_t v11;

  if (a2 != a3)
  {
    v7 = a2;
    v8 = (_anonymous_namespace_::NodePrinter *)this;
    v9 = a4 + 1;
    do
    {
      v10 = *v7++;
      if (a5)
      {
        if (v7 != a3)
        {
          v11 = strlen(a5);
          this = std::string::append((std::string *)v8, a5, v11);
        }
      }
    }
    while (v7 != a3);
  }
  return this;
}

void `anonymous namespace'::NodePrinter::printEntityType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3, unint64_t a4, int a5)
{
  swift::Demangle::Node *v7;
  int v9;
  swift::Demangle::Node *v10;
  uint64_t v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node *v14;
  swift::Demangle::Node *v15;
  int v16;
  swift::Demangle::Node *v17;
  swift::Demangle::Node *v18;
  int v19;
  swift::Demangle::Node **v20;
  swift::Demangle::Node *v21;
  char *v22;
  swift::Demangle::Node **v23;
  swift::Demangle::Node *v24;
  swift::Demangle::Node *v25;
  int v26;
  swift::Demangle::Node *v27;
  swift::Demangle::Node *v28;
  swift::Demangle::Node *v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;

  v7 = a3;
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v10 = 0;
  }
  switch(v9)
  {
    case 1:
      v12 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 != (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_16;
      break;
    case 2:
      v12 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v10 != (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_16;
      break;
    case 5:
      v11 = *(_QWORD *)a2;
LABEL_9:
      v12 = (swift::Demangle::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 != v12)
        goto LABEL_16;
      break;
    default:
      v12 = 0;
      if (v10)
      {
LABEL_16:
        while (*(_WORD *)(*(_QWORD *)v10 + 16) != 290)
        {
          v10 = (swift::Demangle::Node *)((char *)v10 + 8);
          if (v10 == v12)
          {
            v10 = v12;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v9 == 5)
  {
    if (v10 != (swift::Demangle::Node *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2)))
      goto LABEL_26;
  }
  else
  {
    v13 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v9 != 1)
      v13 = 0;
    if (v9 == 2)
      v14 = (swift::Demangle::Node *)((char *)a2 + 16);
    else
      v14 = v13;
    if (v10 != v14)
    {
LABEL_26:
      v15 = *(swift::Demangle::Node **)v10;
      if (a4 | *(_QWORD *)v10)
        goto LABEL_27;
LABEL_33:
      return;
    }
  }
  v15 = 0;
  if (!a4)
    goto LABEL_33;
LABEL_27:
  if (!a4)
  {
    if (*((_WORD *)a3 + 8) != 44)
      goto LABEL_85;
    v19 = *((unsigned __int8 *)a3 + 18);
    v20 = (swift::Demangle::Node **)a3;
    if ((v19 - 1) >= 2)
    {
      if (v19 != 5 || !*((_DWORD *)a3 + 2))
      {
        v21 = 0;
        goto LABEL_57;
      }
      v20 = *(swift::Demangle::Node ***)a3;
    }
    v21 = *v20;
LABEL_57:
    goto LABEL_58;
  }
  std::string::append((std::string *)this, "<", 1uLL);
  v16 = *(unsigned __int8 *)(a4 + 18);
  v17 = (swift::Demangle::Node *)a4;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      v18 = *(swift::Demangle::Node **)a4;
      v17 = *(swift::Demangle::Node **)a4;
      goto LABEL_45;
    }
    v17 = 0;
  }
  switch(v16)
  {
    case 1:
      v22 = (char *)(a4 + 8);
      if (v17 == (swift::Demangle::Node *)(a4 + 8))
        goto LABEL_54;
      goto LABEL_52;
    case 2:
      v22 = (char *)(a4 + 16);
      if (v17 == (swift::Demangle::Node *)(a4 + 16))
        goto LABEL_54;
      goto LABEL_52;
    case 5:
      v18 = *(swift::Demangle::Node **)a4;
LABEL_45:
      v22 = (char *)v18 + 8 * *(unsigned int *)(a4 + 8);
      if (v17 == (swift::Demangle::Node *)v22)
        goto LABEL_54;
      goto LABEL_52;
  }
  v22 = 0;
  if (!v17)
    goto LABEL_54;
LABEL_52:
  v24 = *(swift::Demangle::Node **)v17;
  v23 = (swift::Demangle::Node **)((char *)v17 + 8);
  while (v23 != (swift::Demangle::Node **)v22)
  {
    std::string::append((std::string *)this, ", ", 2uLL);
    v25 = *v23++;
  }
LABEL_54:
  std::string::append((std::string *)this, ">", 1uLL);
  if (*((_WORD *)v7 + 8) != 44)
    goto LABEL_85;
LABEL_58:
  v26 = *((unsigned __int8 *)v7 + 18);
  if (v26 != 2)
  {
    if (v26 != 5 || *((_DWORD *)v7 + 2) < 2u)
    {
      v27 = 0;
      goto LABEL_64;
    }
    v7 = *(swift::Demangle::Node **)v7;
  }
  v27 = (swift::Demangle::Node *)*((_QWORD *)v7 + 1);
LABEL_64:
  v28 = v27;
  while (1)
  {
    v29 = v28;
    v30 = *((unsigned __int16 *)v28 + 8);
    if (v30 != 232)
      break;
    v31 = *((unsigned __int8 *)v29 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_67:
      v28 = *(swift::Demangle::Node **)v29;
    }
    else
    {
      v28 = 0;
      if (v31 == 5)
      {
        v28 = 0;
        if (*((_DWORD *)v29 + 2))
        {
          v29 = *(swift::Demangle::Node **)v29;
          goto LABEL_67;
        }
      }
    }
  }
  v32 = (v30 - 44) > 0x26 || ((1 << (v30 - 44)) & 0x4000200001) == 0;
  if (v32 && v30 != 245)
    std::string::push_back((std::string *)this, 32);
  v33 = *((unsigned __int8 *)v27 + 18);
  if ((v33 - 1) < 2)
  {
LABEL_83:
    v7 = *(swift::Demangle::Node **)v27;
  }
  else
  {
    if (v33 == 5 && *((_DWORD *)v27 + 2))
    {
      v27 = *(swift::Demangle::Node **)v27;
      goto LABEL_83;
    }
    v7 = 0;
  }
LABEL_85:
}

std::string *`anonymous namespace'::NodePrinter::printFunctionType(swift::Demangle::Node *,swift::Demangle::Node *,unsigned int)::{lambda(char const*)#1}::operator()(uint64_t a1, const char *a2)
{
  std::string *v4;
  size_t v5;
  unsigned __int8 *v6;
  swift::Demangle::Node *v7;
  int v8;
  swift::Demangle::Node *v9;

  v4 = *(std::string **)a1;
  std::string::append(*(std::string **)a1, "@convention(", 0xCuLL);
  if (a2)
    v5 = strlen(a2);
  else
    v5 = 0;
  std::string::append(v4, a2, v5);
  v6 = *(unsigned __int8 **)(a1 + 8);
  if (v6[18] - 1 >= 2)
    v6 = *(unsigned __int8 **)v6;
  if (*(_WORD *)(*(_QWORD *)v6 + 16) == 23)
  {
    std::string::append(v4, ", mangledCType: \"", 0x11uLL);
    v7 = *(swift::Demangle::Node **)(a1 + 8);
    v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        v9 = 0;
        goto LABEL_13;
      }
      v7 = *(swift::Demangle::Node **)v7;
    }
    v9 = *(swift::Demangle::Node **)v7;
LABEL_13:
    std::string::push_back(v4, 34);
  }
  return std::string::append(v4, ") ", 2uLL);
}

void `anonymous namespace'::NodePrinter::printFunctionParameters(swift::Demangle::Node *,swift::Demangle::Node *,unsigned int,BOOL)::{lambda(swift::Demangle::Node *)#1}::operator()(uint64_t a1, swift::Demangle::Node *a2)
{
  std::string *v4;
  unint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  int v10;
  swift::Demangle::Node *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  void **p_dst;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  swift::Demangle::Node *v22;
  swift::Demangle::Node *v23;
  swift::Demangle::Node *v24;
  uint64_t v25;
  const std::string::value_type *v26;
  std::string *v27;
  std::string::size_type v28;
  void **__dst;
  size_t v30;
  unint64_t v31;

  v4 = *(std::string **)(a1 + 8);
  if (!**(_BYTE **)a1)
  {
    if (**(_BYTE **)(a1 + 32))
      goto LABEL_63;
    v10 = *((unsigned __int8 *)a2 + 18);
    v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        v12 = *(_QWORD *)a2;
        v11 = *(swift::Demangle::Node **)a2;
LABEL_42:
        v22 = (swift::Demangle::Node *)(v12 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_46;
      }
      v11 = 0;
    }
    switch(v10)
    {
      case 1:
        v22 = (swift::Demangle::Node *)((char *)a2 + 8);
        break;
      case 2:
        v22 = (swift::Demangle::Node *)((char *)a2 + 16);
        break;
      case 5:
        v12 = *(_QWORD *)a2;
        goto LABEL_42;
      default:
        v22 = 0;
        break;
    }
LABEL_46:
    if (v11 != v22)
    {
      while (*(_WORD *)(*(_QWORD *)v11 + 16) != 225)
      {
        v11 = (swift::Demangle::Node *)((char *)v11 + 8);
        if (v11 == v22)
        {
          v11 = v22;
          break;
        }
      }
    }
    if (v10 == 5)
    {
      if (v11 == (swift::Demangle::Node *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2)))
        goto LABEL_61;
    }
    else
    {
      v23 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 != 1)
        v23 = 0;
      if (v10 == 2)
        v24 = (swift::Demangle::Node *)((char *)a2 + 16);
      else
        v24 = v23;
      if (v11 == v24)
        goto LABEL_61;
    }
    v25 = *(_QWORD *)v11;
    if (v25)
    {
      std::string::append(*(std::string **)(a1 + 8), *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
      v26 = ":";
      v27 = v4;
      v28 = 1;
LABEL_62:
      std::string::append(v27, v26, v28);
      goto LABEL_63;
    }
LABEL_61:
    v26 = "_:";
    v27 = *(std::string **)(a1 + 8);
    v28 = 2;
    goto LABEL_62;
  }
  v5 = **(unsigned int **)(a1 + 24);
  v6 = ***(uint64_t *****)(a1 + 16);
  v7 = *((unsigned __int8 *)v6 + 18);
  v8 = v7 - 1;
  if ((_DWORD)v7 == 1)
    goto LABEL_6;
  if ((_DWORD)v7 == 5)
  {
    if (*((unsigned int *)v6 + 2) > v5)
      goto LABEL_7;
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  if ((_DWORD)v7 != 2)
    goto LABEL_15;
  v7 = 2;
LABEL_6:
  if (v7 <= v5)
    goto LABEL_15;
LABEL_7:
  if (v8 >= 2)
    v6 = (uint64_t **)*v6;
  v9 = v6[v5];
LABEL_16:
  if (*((_WORD *)v9 + 8) != 101)
  {
    v16 = 1;
    HIBYTE(v31) = 1;
    v17 = 95;
    LOWORD(__dst) = 95;
    goto LABEL_29;
  }
  v13 = (const void *)*v9;
  if (!*v9)
  {
    v17 = 0;
    v16 = 0;
    __dst = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_29;
  }
  v14 = v9[1];
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    p_dst = (void **)operator new(v18 + 1);
    v30 = v14;
    v31 = v19 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = v9[1];
    p_dst = (void **)&__dst;
    if (!v14)
      goto LABEL_28;
  }
  memmove(p_dst, v13, v14);
LABEL_28:
  *((_BYTE *)p_dst + v14) = 0;
  v16 = HIBYTE(v31);
  v17 = v30;
LABEL_29:
  if ((v16 & 0x80u) == 0)
    v20 = (const std::string::value_type *)&__dst;
  else
    v20 = (const std::string::value_type *)__dst;
  if ((v16 & 0x80u) == 0)
    v21 = v16;
  else
    v21 = v17;
  std::string::append(v4, v20, v21);
  std::string::push_back(v4, 58);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst);
LABEL_63:
  if (**(_BYTE **)a1 && **(_BYTE **)(a1 + 32))
    std::string::push_back(v4, 32);
  ++**(_DWORD **)(a1 + 24);
  if (**(_BYTE **)(a1 + 32))
}

void `anonymous namespace'::NodePrinter::printFunctionSigSpecializationParams(std::string *this, swift::Demangle::Node *a2, int a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  const std::string::value_type *v9;
  const std::string::value_type *v10;
  swift::Demangle::Node *v11;
  unint64_t v12;
  char v13;
  swift::Demangle::Node *v14;
  swift::Demangle::Node *v15;
  swift::Demangle::Node *v16;
  unint64_t v17;
  unsigned int v18;
  swift::Demangle::Node *v19;
  swift::Demangle::Node *v20;
  unint64_t v21;
  unsigned int v22;
  swift::Demangle::Node *v23;
  swift::Demangle::Node *v24;
  unint64_t v25;
  unsigned int v26;
  swift::Demangle::Node *v27;
  swift::Demangle::Node *v28;
  unint64_t v29;
  unsigned int v30;
  swift::Demangle::Node *v31;
  swift::Demangle::Node *v32;
  unint64_t v33;
  unsigned int v34;
  swift::Demangle::Node *v35;
  swift::Demangle::Node *v36;
  swift::Demangle::Node *v37;
  uint64_t v38;
  const std::string::value_type *v39;
  const std::string::value_type *v40;
  const std::string::value_type **v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  _QWORD *v44;
  uint64_t v45;
  std::string::size_type v46;
  const std::string::value_type *v47;
  std::string *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  swift::Demangle::Node *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  swift::Demangle::Node *v58;
  swift::Demangle::Node *v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  swift::Demangle::Node *v66;
  swift::Demangle::Node *v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  swift::Demangle::Node *v73;
  swift::Demangle::Node *v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  swift::Demangle::Node *v78;
  swift::Demangle::Node *v79;
  swift::Demangle::Node *v80;
  swift::Demangle::Node *v81;
  uint64_t v82;
  swift::Demangle::Node *v83;
  unint64_t v84;
  swift::Demangle::Node *v85;
  swift::Demangle::Node *v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;
  swift::Demangle::Node *v90;
  swift::Demangle::Node *v91;
  unsigned int v92;
  char v93;
  uint64_t v94;
  char v95;
  int v96;
  int v97;
  char v98;
  __int16 v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  _QWORD *v104;
  void *v105[2];
  unsigned __int8 v106;

  v6 = *((unsigned __int8 *)a2 + 18);
  switch(v6)
  {
    case 1u:
      goto LABEL_6;
    case 5u:
      v6 = *((_DWORD *)a2 + 2);
      if (!v6)
        return;
LABEL_6:
      LODWORD(v7) = 0;
      v8 = a3 + 1;
      v9 = "[";
      v10 = " : ";
      v92 = a3 + 1;
      while (2)
      {
        v12 = *((unsigned __int8 *)a2 + 18);
        if ((v12 - 1) >= 2)
        {
          v13 = 0;
          v14 = *(swift::Demangle::Node **)a2;
        }
        else
        {
          v13 = 1;
          v14 = a2;
        }
        switch(**((_DWORD **)v14 + v7))
        {
          case 0:
          case 1:
            std::string::append(this, v9, 1uLL);
            v17 = *((unsigned __int8 *)a2 + 18);
            v18 = v17 - 1;
            switch((_DWORD)v17)
            {
              case 1:
                goto LABEL_27;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v7)
                  goto LABEL_69;
                break;
              case 2:
                v17 = 2;
LABEL_27:
                if (v17 <= v7)
                {
LABEL_69:
                  v20 = 0;
                  goto LABEL_70;
                }
                break;
              default:
                goto LABEL_69;
            }
            v19 = a2;
            if (v18 >= 2)
              v19 = *(swift::Demangle::Node **)a2;
            v20 = (swift::Demangle::Node *)*((_QWORD *)v19 + v7);
LABEL_70:
            std::string::append(this, v10, 3uLL);
            v37 = a2;
            if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
              v37 = *(swift::Demangle::Node **)a2;
            v38 = v3;
            v39 = v10;
            v40 = v9;
            v41 = (const std::string::value_type **)*((_QWORD *)v37 + (v7 + 1));
            v42 = *v41;
            v43 = (std::string::size_type)v41[1];
            v93 = 0;
            v94 = 0x101010101010101;
            v95 = 1;
            v96 = 0;
            v97 = 16843009;
            v98 = 1;
            v99 = 256;
            v100 = 1;
            v101 = 0;
            v102 = 0;
            v103[0] = &unk_24C358B70;
            v103[1] = swift::Demangle::genericParameterName;
            v104 = v103;
            swift::Demangle::demangleSymbolAsString(v105, v42, v43, &v93);
            v44 = v104;
            if (v104 == v103)
            {
              v44 = v103;
              v45 = 4;
LABEL_76:
              (*(void (**)(void))(*v44 + 8 * v45))();
            }
            else if (v104)
            {
              v45 = 5;
              goto LABEL_76;
            }
            if ((v106 & 0x80u) == 0)
              v46 = v106;
            else
              v46 = (std::string::size_type)v105[1];
            if (v46)
            {
              if ((v106 & 0x80u) == 0)
                v47 = (const std::string::value_type *)v105;
              else
                v47 = (const std::string::value_type *)v105[0];
              v48 = this;
            }
            else
            {
              v48 = this;
              v47 = v42;
              v46 = v43;
            }
            std::string::append(v48, v47, v46);
            v9 = v40;
            v10 = v39;
            v3 = v38;
            v8 = v92;
            std::string::append(this, "]", 1uLL);
            if ((char)v106 < 0)
              operator delete(v105[0]);
            LODWORD(v7) = v7 + 2;
            goto LABEL_10;
          case 2:
          case 3:
            std::string::append(this, v9, 1uLL);
            v21 = *((unsigned __int8 *)a2 + 18);
            v22 = v21 - 1;
            switch((_DWORD)v21)
            {
              case 1:
                goto LABEL_35;
              case 5:
                if (*((unsigned int *)a2 + 2) > (unint64_t)v7)
                  goto LABEL_36;
                break;
              case 2:
                v21 = 2;
LABEL_35:
                if (v21 > v7)
                {
LABEL_36:
                  v23 = a2;
                  if (v22 >= 2)
                    v23 = *(swift::Demangle::Node **)a2;
                  v24 = (swift::Demangle::Node *)*((_QWORD *)v23 + v7);
LABEL_91:
                  std::string::append(this, v10, 3uLL);
                  v49 = *((unsigned __int8 *)a2 + 18);
                  if (v49 != 2)
                  {
                    if (v49 == 5)
                    {
                      v50 = *((unsigned int *)a2 + 2);
                      goto LABEL_95;
                    }
                    goto LABEL_7;
                  }
                  v50 = *((unsigned __int8 *)a2 + 18);
LABEL_95:
                  v51 = (v7 + 1);
                  if (v50 <= v51)
                  {
LABEL_7:
                    v11 = 0;
                  }
                  else
                  {
                    v52 = v49 - 1;
                    v53 = a2;
                    if (v52 >= 2)
                      v53 = *(swift::Demangle::Node **)a2;
                    v11 = (swift::Demangle::Node *)*((_QWORD *)v53 + v51);
                  }
                  LODWORD(v7) = v7 + 2;
                  goto LABEL_9;
                }
                break;
            }
            v24 = 0;
            goto LABEL_91;
          case 4:
            std::string::append(this, v9, 1uLL);
            v25 = *((unsigned __int8 *)a2 + 18);
            v26 = v25 - 1;
            switch((_DWORD)v25)
            {
              case 1:
                goto LABEL_48;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v7)
                  goto LABEL_100;
                break;
              case 2:
                v25 = 2;
LABEL_48:
                if (v25 <= v7)
                {
LABEL_100:
                  v28 = 0;
                  goto LABEL_101;
                }
                break;
              default:
                goto LABEL_100;
            }
            v27 = a2;
            if (v26 >= 2)
              v27 = *(swift::Demangle::Node **)a2;
            v28 = (swift::Demangle::Node *)*((_QWORD *)v27 + v7);
LABEL_101:
            std::string::append(this, v10, 3uLL);
            v54 = *((unsigned __int8 *)a2 + 18);
            if (v54 == 2)
            {
              v55 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v54 != 5)
                goto LABEL_109;
              v55 = *((unsigned int *)a2 + 2);
            }
            v56 = (v7 + 1);
            if (v55 > v56)
            {
              v57 = v54 - 1;
              v58 = a2;
              if (v57 >= 2)
                v58 = *(swift::Demangle::Node **)a2;
              v59 = (swift::Demangle::Node *)*((_QWORD *)v58 + v56);
LABEL_110:
              std::string::append(this, "'", 1uLL);
              v60 = *((unsigned __int8 *)a2 + 18);
              v61 = v60 - 1;
              if ((_DWORD)v60 != 1)
              {
                if ((_DWORD)v60 == 5)
                {
                  v60 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if ((_DWORD)v60 != 2)
                    goto LABEL_150;
                  v60 = 2;
                }
              }
              v77 = (v7 + 2);
              if (v60 > v77)
              {
                v78 = a2;
                if (v61 >= 2)
                  v78 = *(swift::Demangle::Node **)a2;
                v79 = (swift::Demangle::Node *)*((_QWORD *)v78 + v77);
                goto LABEL_151;
              }
LABEL_150:
              v79 = 0;
LABEL_151:
              LODWORD(v7) = v7 + 3;
              std::string::append(this, "'", 1uLL);
              goto LABEL_9;
            }
LABEL_109:
            v59 = 0;
            goto LABEL_110;
          case 5:
            std::string::append(this, v9, 1uLL);
            v29 = *((unsigned __int8 *)a2 + 18);
            v30 = v29 - 1;
            switch((_DWORD)v29)
            {
              case 1:
                goto LABEL_56;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v7)
                  goto LABEL_115;
                break;
              case 2:
                v29 = 2;
LABEL_56:
                if (v29 <= v7)
                {
LABEL_115:
                  v32 = 0;
                  goto LABEL_116;
                }
                break;
              default:
                goto LABEL_115;
            }
            v31 = a2;
            if (v30 >= 2)
              v31 = *(swift::Demangle::Node **)a2;
            v32 = (swift::Demangle::Node *)*((_QWORD *)v31 + v7);
LABEL_116:
            std::string::append(this, v10, 3uLL);
            v62 = *((unsigned __int8 *)a2 + 18);
            if (v62 == 2)
            {
              v63 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v62 != 5)
                goto LABEL_124;
              v63 = *((unsigned int *)a2 + 2);
            }
            v64 = (v7 + 1);
            if (v63 > v64)
            {
              v65 = v62 - 1;
              v66 = a2;
              if (v65 >= 2)
                v66 = *(swift::Demangle::Node **)a2;
              v67 = (swift::Demangle::Node *)*((_QWORD *)v66 + v64);
              goto LABEL_125;
            }
LABEL_124:
            v67 = 0;
LABEL_125:
            v7 = (v7 + 2);
            std::string::append(this, ", Argument Types : [", 0x14uLL);
            v68 = *((unsigned __int8 *)a2 + 18);
            switch(v68)
            {
              case 1u:
                goto LABEL_128;
              case 5u:
                v68 = *((_DWORD *)a2 + 2);
                if (v7 < v68)
                {
                  while (1)
                  {
LABEL_155:
                    v80 = a2;
                    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
                      v80 = *(swift::Demangle::Node **)a2;
                    v81 = (swift::Demangle::Node *)*((_QWORD *)v80 + v7);
                    if (*((_WORD *)v81 + 8) != 232)
                      break;
                    v82 = (v7 + 1);
                    if (v82 < v68)
                    {
                      v83 = a2;
                      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
                        v83 = *(swift::Demangle::Node **)a2;
                      if (*(_BYTE *)(*((_QWORD *)v83 + v82) + 18) == 3)
                        std::string::append(this, ", ", 2uLL);
                    }
                    if (v68 == (_DWORD)++v7)
                    {
                      LODWORD(v7) = v68;
                      goto LABEL_9;
                    }
                  }
                }
                break;
              case 2u:
LABEL_128:
                if (v7 < v68)
                  goto LABEL_155;
                break;
            }
LABEL_9:
            std::string::append(this, "]", 1uLL);
LABEL_10:
            if (v7 >= v6)
              return;
            continue;
          case 6:
          case 7:
          case 8:
            if ((_DWORD)v12 == 1)
              goto LABEL_19;
            if ((_DWORD)v12 != 5)
              goto LABEL_17;
            goto LABEL_41;
          case 9:
            std::string::append(this, v9, 1uLL);
            v33 = *((unsigned __int8 *)a2 + 18);
            v34 = v33 - 1;
            switch((_DWORD)v33)
            {
              case 1:
                goto LABEL_64;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v7)
                  goto LABEL_131;
                break;
              case 2:
                v33 = 2;
LABEL_64:
                if (v33 <= v7)
                {
LABEL_131:
                  v36 = 0;
                  goto LABEL_132;
                }
                break;
              default:
                goto LABEL_131;
            }
            v35 = a2;
            if (v34 >= 2)
              v35 = *(swift::Demangle::Node **)a2;
            v36 = (swift::Demangle::Node *)*((_QWORD *)v35 + v7);
LABEL_132:
            std::string::append(this, v10, 3uLL);
            v69 = *((unsigned __int8 *)a2 + 18);
            if (v69 == 2)
            {
              v70 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v69 != 5)
                goto LABEL_140;
              v70 = *((unsigned int *)a2 + 2);
            }
            v71 = (v7 + 1);
            if (v70 > v71)
            {
              v72 = v69 - 1;
              v73 = a2;
              if (v72 >= 2)
                v73 = *(swift::Demangle::Node **)a2;
              v74 = (swift::Demangle::Node *)*((_QWORD *)v73 + v71);
LABEL_141:
              std::string::append(this, "<", 1uLL);
              v75 = *((unsigned __int8 *)a2 + 18);
              v76 = v75 - 1;
              if ((_DWORD)v75 != 1)
              {
                if ((_DWORD)v75 == 5)
                {
                  v75 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if ((_DWORD)v75 != 2)
                    goto LABEL_168;
                  v75 = 2;
                }
              }
              v84 = (v7 + 2);
              if (v75 > v84)
              {
                v85 = a2;
                if (v76 >= 2)
                  v85 = *(swift::Demangle::Node **)a2;
                v86 = (swift::Demangle::Node *)*((_QWORD *)v85 + v84);
LABEL_169:
                std::string::append(this, ",", 1uLL);
                v87 = *((unsigned __int8 *)a2 + 18);
                v88 = v87 - 1;
                if ((_DWORD)v87 != 1)
                {
                  if ((_DWORD)v87 == 5)
                  {
                    v87 = *((unsigned int *)a2 + 2);
                  }
                  else
                  {
                    if ((_DWORD)v87 != 2)
                      goto LABEL_178;
                    v87 = 2;
                  }
                }
                v89 = (v7 + 3);
                if (v87 > v89)
                {
                  v90 = a2;
                  if (v88 >= 2)
                    v90 = *(swift::Demangle::Node **)a2;
                  v91 = (swift::Demangle::Node *)*((_QWORD *)v90 + v89);
                  goto LABEL_179;
                }
LABEL_178:
                v91 = 0;
LABEL_179:
                LODWORD(v7) = v7 + 4;
                std::string::append(this, ">]", 2uLL);
                goto LABEL_10;
              }
LABEL_168:
              v86 = 0;
              goto LABEL_169;
            }
LABEL_140:
            v74 = 0;
            goto LABEL_141;
          default:
            if ((_DWORD)v12 == 1)
              goto LABEL_19;
            if ((_DWORD)v12 == 5)
            {
LABEL_41:
              if (*((unsigned int *)a2 + 2) <= (unint64_t)v7)
                goto LABEL_42;
            }
            else
            {
LABEL_17:
              if ((_DWORD)v12 != 2)
                goto LABEL_42;
              v12 = 2;
LABEL_19:
              if (v12 <= v7)
              {
LABEL_42:
                v16 = 0;
                goto LABEL_43;
              }
            }
            v15 = a2;
            if ((v13 & 1) == 0)
              v15 = *(swift::Demangle::Node **)a2;
            v16 = (swift::Demangle::Node *)*((_QWORD *)v15 + v7);
LABEL_43:
            LODWORD(v7) = v7 + 1;
            goto LABEL_10;
        }
      }
    case 2u:
      goto LABEL_6;
  }
}

std::string *`anonymous namespace'::NodePrinter::printBoundGenericNoSugar(std::string *this, swift::Demangle::Node *a2, int a3)
{
  std::string *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  swift::Demangle::Node **v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node *v13;

  v3 = this;
  v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 2)
  {
LABEL_6:
    v5 = *((_QWORD *)a2 + 1);
    v6 = a3 + 1;
    std::string::append(v3, "<", 1uLL);
    if (v5)
    {
      v7 = *(unsigned __int8 *)(v5 + 18);
      v8 = (swift::Demangle::Node **)v5;
      if ((v7 - 1) >= 2)
      {
        if (v7 == 5)
        {
          v9 = *(swift::Demangle::Node **)v5;
          v8 = *(swift::Demangle::Node ***)v5;
          goto LABEL_15;
        }
        v8 = 0;
      }
      switch(v7)
      {
        case 1:
          v10 = (swift::Demangle::Node **)(v5 + 8);
          if (v8 == (swift::Demangle::Node **)(v5 + 8))
            return std::string::append(v3, ">", 1uLL);
          goto LABEL_22;
        case 2:
          v10 = (swift::Demangle::Node **)(v5 + 16);
          if (v8 == (swift::Demangle::Node **)(v5 + 16))
            return std::string::append(v3, ">", 1uLL);
          goto LABEL_22;
        case 5:
          v9 = *(swift::Demangle::Node **)v5;
LABEL_15:
          v10 = (swift::Demangle::Node **)((char *)v9 + 8 * *(unsigned int *)(v5 + 8));
          if (v8 == v10)
            return std::string::append(v3, ">", 1uLL);
LABEL_22:
          v12 = *v8;
          v11 = v8 + 1;
          while (v11 != v10)
          {
            std::string::append(v3, ", ", 2uLL);
            v13 = *v11++;
          }
          return std::string::append(v3, ">", 1uLL);
      }
      v10 = 0;
      if (v8)
        goto LABEL_22;
    }
    return std::string::append(v3, ">", 1uLL);
  }
  if (v4 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_6;
  }
  return this;
}

void `anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::Node *,unsigned int)::{lambda(`anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::Node *,unsigned int)::State)#1}::operator()(int **a1, int a2)
{
  int v2;
  std::string *v5;
  swift::Demangle::Node *v6;
  swift::Demangle::Node *v7;
  int v8;
  swift::Demangle::Node *v9;

  v2 = **a1;
  if (v2 != a2)
  {
    v5 = (std::string *)a1[2];
    while (1)
    {
      if (v2)
      {
        if (v2 != 1)
        {
          if (v2 == 2)
            printer_unreachable("no state after Results");
          printer_unreachable("bad state");
        }
        std::string::append(v5, ") -> ", 5uLL);
        v6 = *(swift::Demangle::Node **)a1[4];
        if (v6)
        {
          std::string::append(v5, " ", 1uLL);
        }
        std::string::append(v5, "(", 1uLL);
        goto LABEL_5;
      }
      if (*(_QWORD *)a1[1])
        break;
LABEL_18:
      std::string::push_back(v5, 40);
LABEL_5:
      v2 = ++**a1;
      if (v2 == a2)
        return;
    }
    std::string::append(v5, "@substituted ", 0xDuLL);
    v7 = *(swift::Demangle::Node **)a1[1];
    v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        v9 = 0;
        goto LABEL_17;
      }
      v7 = *(swift::Demangle::Node **)v7;
    }
    v9 = *(swift::Demangle::Node **)v7;
LABEL_17:
    std::string::push_back(v5, 32);
    goto LABEL_18;
  }
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::vector<std::string>::__push_back_slow_path<std::string>();
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

unsigned int *swift::Demangle::demangleOldSymbolAsNode(_WORD *a1, size_t a2, swift::Demangle::NodeFactory *a3)
{
  unsigned int *v3;
  _WORD *v6;
  unint64_t v7;
  unsigned int *Node;
  swift::Demangle::NodeFactory *v9;
  __int16 v10;
  unsigned __int8 *v11;
  size_t v12;
  const char *v13;
  int v14;
  __int16 v15;
  unsigned int *v16;
  size_t v17;
  char *v18;
  int v19;
  swift::Demangle::Node *v20;
  uint64_t v21;
  const char *v22;
  swift::Demangle::NodeFactory *v23;
  size_t v24;
  char *v25;
  int v26;
  swift::Demangle::Node *v27;
  uint64_t v28;
  const char *v29;
  swift::Demangle::NodeFactory *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  swift::Demangle::Node *v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  char *v38;
  unsigned int *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  swift::Demangle::Node *v47;
  size_t v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t v51;
  swift::Demangle::Node *v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  size_t v56;
  _WORD *v57;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  swift::Demangle::Node *v62;
  uint64_t v63;
  const char *v64;
  swift::Demangle::NodeFactory *v65;
  size_t v66;
  const void *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  swift::Demangle::NodeFactory *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  size_t v80;
  int v81;
  int v82;
  const std::string::value_type *v83;
  _BYTE *v84;
  size_t v85;
  unint64_t v86;
  unint64_t v87;
  swift::Demangle::Node *v88;
  uint64_t v89;
  const char *v90;
  swift::Demangle::NodeFactory *v91;
  std::string *v92;
  std::string::size_type v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  swift::Demangle::Node *v99;
  uint64_t v100;
  const char *v101;
  unsigned int *v102;
  swift::Demangle::Node *v103;
  unsigned int *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  unint64_t v108;
  swift::Demangle::Node *v109;
  uint64_t v110;
  const char *v111;
  swift::Demangle::NodeFactory *v112;
  size_t v113;
  const void *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  swift::Demangle::Node *v120;
  uint64_t v121;
  const char *v122;
  swift::Demangle::Node *v123;
  uint64_t v124;
  const char *v125;
  swift::Demangle::NodeFactory *v126;
  std::string *v127;
  std::string::size_type size;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  unsigned __int8 *v134;
  size_t v135;
  int v136;
  char v137;
  swift::Demangle::Node *v138;
  uint64_t v139;
  const char *v140;
  swift::Demangle::Node *v141;
  uint64_t v142;
  const char *v143;
  swift::Demangle::NodeFactory *v144;
  std::string *v145;
  size_t v146;
  char *v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  swift::Demangle::NodeFactory *v152;
  uint64_t v153;
  uint64_t v154;
  swift::Demangle::Node *v155;
  uint64_t v156;
  const char *v157;
  swift::Demangle::NodeFactory *v158;
  size_t v159;
  const void *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  swift::Demangle::Node *v166;
  uint64_t v167;
  const char *v168;
  _WORD *v169;
  swift::Demangle::Node *v170;
  uint64_t v171;
  const char *v172;
  unsigned int *v173;
  uint64_t v174;
  const char *v175;
  size_t v176;
  swift::Demangle::NodeFactory *v177;
  void *v178;
  char *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  swift::Demangle::Node *NodeWithAllocatedText;
  uint64_t v185;
  const char *v186;
  void *__p;
  void *v188;
  uint64_t v189;
  void *__src;
  size_t __len;
  swift::Demangle::NodeFactory *v192;
  std::string v193;

  v3 = 0;
  __p = 0;
  v188 = 0;
  v189 = 0;
  __src = a1;
  __len = a2;
  v192 = a3;
  if (a2 < 2)
    goto LABEL_4;
  if (*a1 != 21599)
    goto LABEL_3;
  v6 = a1 + 1;
  v7 = a2 - 2;
  __src = a1 + 1;
  __len = a2 - 2;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(a3, 99);
  if (v7 < 2)
    goto LABEL_228;
  if (*v6 != 21332)
  {
    switch(*v6)
    {
      case 0x6F54:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 164;
        break;
      case 0x4F54:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 160;
        break;
      case 0x4454:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 55;
        break;
      case 0x6454:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 56;
        break;
      case 0x5654:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 256;
        break;
      default:
        goto LABEL_228;
    }
    v170 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v9, v10);
    swift::Demangle::Node::addChild(Node, v170, a3, v171, v172);
LABEL_228:
    if (!v173)
      goto LABEL_3;
    swift::Demangle::Node::addChild(Node, (swift::Demangle::Node *)v173, v192, v174, v175);
    v176 = __len;
    if (__len)
    {
      v177 = v192;
      v178 = __src;
      __src = (char *)__src + __len;
      __len = 0;
      v179 = (char *)*((_QWORD *)v192 + 1);
      if (!v179 || (v180 = &v179[v176], (unint64_t)&v179[v176] > *((_QWORD *)v192 + 2)))
      {
        v181 = 2 * *((_QWORD *)v192 + 4);
        if (v181 <= v176 + 1)
          v181 = v176 + 1;
        *((_QWORD *)v192 + 4) = v181;
        v182 = v181 + 8;
        v183 = malloc_type_malloc(v181 + 8, 0xD0263BC5uLL);
        *v183 = *((_QWORD *)v177 + 3);
        v179 = (char *)(v183 + 1);
        *((_QWORD *)v177 + 2) = (char *)v183 + v182;
        *((_QWORD *)v177 + 3) = v183;
        v180 = (char *)v183 + v176 + 8;
      }
      *((_QWORD *)v177 + 1) = v180;
      memmove(v179, v178, v176);
      NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v177, 221, (uint64_t)v179, v176);
      swift::Demangle::Node::addChild(Node, NodeWithAllocatedText, v192, v185, v186);
    }
    v3 = Node;
    goto LABEL_4;
  }
  v11 = (unsigned __int8 *)(v6 + 1);
  v12 = v7 - 2;
  __src = v6 + 1;
  __len = v7 - 2;
  if (v7 == 2)
    goto LABEL_3;
  v13 = "u16";
  while (1)
  {
    v14 = *v11;
    switch(v14)
    {
      case 'f':
        __src = v11 + 1;
        __len = v12 - 1;
        v16 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v192, 77);
        v17 = __len;
        if (__len)
        {
          v18 = (char *)__src;
          v19 = *(unsigned __int8 *)__src;
          if (v19 == 113)
          {
            __src = (char *)__src + 1;
            --__len;
            v20 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 217);
            swift::Demangle::Node::addChild(v16, v20, v192, v21, v22);
            v17 = __len;
            v23 = v192;
            if (!__len)
            {
              v44 = 4294967294;
              goto LABEL_46;
            }
            v18 = (char *)__src;
            LOBYTE(v19) = *(_BYTE *)__src;
          }
          else
          {
            v23 = v192;
          }
          __src = v18 + 1;
          __len = v17 - 1;
          v44 = ((char)v19 - 48);
        }
        else
        {
          v23 = v192;
          v44 = 4294967294;
        }
LABEL_46:
        v47 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v23, 216, v44);
        while (1)
        {
          while (1)
          {
            swift::Demangle::Node::addChild(v16, v47, v192, v45, v46);
            v37 = __len;
            if (__len)
            {
              v38 = (char *)__src;
              if (*(_BYTE *)__src == 95)
                goto LABEL_217;
            }
            v47 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 78);
            v48 = __len;
            if (__len < 2)
            {
              if (!__len)
                goto LABEL_3;
              v49 = (unsigned __int8 *)__src;
              goto LABEL_52;
            }
            v49 = (unsigned __int8 *)__src;
            if (*(_WORD *)__src == 24430)
            {
              v55 = (char *)__src + 2;
              v56 = __len - 2;
              goto LABEL_146;
            }
            if (*(_WORD *)__src == 28771)
              break;
            switch(*(_WORD *)__src)
            {
              case 0x6C63:
                __src = (char *)__src + 2;
                __len -= 2;
                if (!v59)
                  goto LABEL_3;
                v60 = v59;
                v61 = v13;
                v62 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, 5);
                swift::Demangle::Node::addChild((unsigned int *)v47, v62, v192, v63, v64);
                v65 = v192;
                v66 = *(_QWORD *)(v60 + 8);
                if (v66)
                {
                  v67 = *(const void **)v60;
                  v68 = (char *)*((_QWORD *)v192 + 1);
                  if (!v68 || (v69 = &v68[v66], (unint64_t)&v68[v66] > *((_QWORD *)v192 + 2)))
                  {
                    v70 = 2 * *((_QWORD *)v192 + 4);
                    if (v70 <= v66 + 1)
                      v70 = v66 + 1;
                    *((_QWORD *)v192 + 4) = v70;
                    v71 = v70 + 8;
                    v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
                    *v72 = *((_QWORD *)v65 + 3);
                    v68 = (char *)(v72 + 1);
                    *((_QWORD *)v65 + 2) = (char *)v72 + v71;
                    *((_QWORD *)v65 + 3) = v72;
                    v69 = (char *)v72 + v66 + 8;
                  }
                  *((_QWORD *)v65 + 1) = v69;
                  memmove(v68, v67, v66);
                }
                else
                {
                  v68 = 0;
                }
                v99 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v65, 81, (uint64_t)v68, v66);
                swift::Demangle::Node::addChild((unsigned int *)v47, v99, v192, v100, v101);
                v13 = v61;
                if (__len)
                {
LABEL_138:
                  if (*(_BYTE *)__src != 95)
                    goto LABEL_139;
                }
                else
                {
LABEL_139:
                  while (1)
                  {
                    if (!v102)
                      break;
                    v103 = (swift::Demangle::Node *)v102;
                    v104 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v192, 232);
                    swift::Demangle::Node::addChild(v104, v103, v192, v105, v106);
                    if (!v104)
                      break;
                    swift::Demangle::Node::addChild((unsigned int *)v47, (swift::Demangle::Node *)v104, v192, v45, v46);
                    if (__len)
                      goto LABEL_138;
                  }
                }
                if (!__len || *(_BYTE *)__src != 95)
                  goto LABEL_3;
                v55 = (char *)__src + 1;
                v56 = __len - 1;
LABEL_146:
                __src = v55;
                __len = v56;
                break;
              case 0x5F69:
                __src = (char *)__src + 2;
                __len -= 2;
                v52 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, 6);
                if (!v52)
                  goto LABEL_3;
                goto LABEL_76;
              case 0x5F6B:
                __src = (char *)__src + 2;
                __len -= 2;
                v52 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, 7);
                if (!v52)
                  goto LABEL_3;
                goto LABEL_76;
              case 0x5F72:
                __src = (char *)__src + 2;
                __len -= 2;
                v52 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, 8);
                if (!v52)
                  goto LABEL_3;
                goto LABEL_76;
              default:
LABEL_52:
                v50 = *v49;
                if (v50 == 100)
                {
                  ++v49;
                  v48 = __len - 1;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v50 = *v49;
                  v51 = 64;
                }
                else
                {
                  v51 = 0;
                }
                if (v50 == 103)
                {
                  ++v49;
                  --v48;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v51 |= 0x80uLL;
                  v50 = *v49;
                }
                if (v50 == 111)
                {
                  ++v49;
                  --v48;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v51 |= 0x200uLL;
                  v50 = *v49;
                }
                if (v50 == 115)
                {
                  ++v49;
                  --v48;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v51 |= 0x100uLL;
                  v50 = *v49;
                }
                if (v50 != 95)
                  goto LABEL_3;
                __src = v49 + 1;
                __len = v48 - 1;
                if (!v51)
                  goto LABEL_3;
                v52 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, v51);
                if (!v52)
                  goto LABEL_3;
LABEL_76:
                swift::Demangle::Node::addChild((unsigned int *)v47, v52, v192, v53, v54);
                break;
            }
          }
          v57 = (char *)__src + 2;
          v58 = __len - 2;
          __src = (char *)__src + 2;
          __len -= 2;
          if (v48 - 2 >= 2)
          {
            if (*v57 != 29286)
              goto LABEL_90;
            if (v58 >= 2)
              v107 = 2;
            else
              v107 = v58;
            __src = (char *)v57 + v107;
            __len = v58 - v107;
            if (!v108 || !__len || *(_BYTE *)__src != 95)
              goto LABEL_3;
            v75 = v108;
            v76 = v13;
            __src = (char *)__src + 1;
            --__len;
            v77 = v192;
            v78 = 0;
LABEL_154:
            v109 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v77, 80, v78);
            swift::Demangle::Node::addChild((unsigned int *)v47, v109, v192, v110, v111);
            v112 = v192;
            v113 = *(_QWORD *)(v75 + 8);
            if (v113)
            {
              v114 = *(const void **)v75;
              v115 = (char *)*((_QWORD *)v192 + 1);
              if (!v115 || (v116 = &v115[v113], (unint64_t)&v115[v113] > *((_QWORD *)v192 + 2)))
              {
                v117 = 2 * *((_QWORD *)v192 + 4);
                if (v117 <= v113 + 1)
                  v117 = v113 + 1;
                *((_QWORD *)v192 + 4) = v117;
                v118 = v117 + 8;
                v119 = malloc_type_malloc(v117 + 8, 0xD0263BC5uLL);
                *v119 = *((_QWORD *)v112 + 3);
                v115 = (char *)(v119 + 1);
                *((_QWORD *)v112 + 2) = (char *)v119 + v118;
                *((_QWORD *)v112 + 3) = v119;
                v116 = (char *)v119 + v113 + 8;
              }
              *((_QWORD *)v112 + 1) = v116;
              memmove(v115, v114, v113);
            }
            else
            {
              v115 = 0;
            }
            v120 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v112, 81, (uint64_t)v115, v113);
            swift::Demangle::Node::addChild((unsigned int *)v47, v120, v192, v121, v122);
            v13 = v76;
          }
          else
          {
            if (v48 < 3)
              goto LABEL_3;
LABEL_90:
            v73 = *(unsigned __int8 *)v57;
            if (v73 == 105)
            {
              v79 = (unsigned __int8 *)v57 + 1;
              memset(&v193, 0, sizeof(v193));
              v80 = v58 - 1;
              __src = (char *)v57 + 1;
              __len = v80;
              if (v80)
              {
                while (1)
                {
                  v81 = *v79;
                  if (v81 == 95)
                    break;
                  std::string::push_back(&v193, v81);
                  v79 = (unsigned __int8 *)__src;
                  if (__len)
                    v79 = (unsigned __int8 *)__src + 1;
                  v80 = __len - (__len != 0);
                  __src = v79;
                  __len = v80;
                  if (!v80)
                    goto LABEL_181;
                }
                __src = v79 + 1;
                __len = v80 - 1;
                v123 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, 2);
                swift::Demangle::Node::addChild((unsigned int *)v47, v123, v192, v124, v125);
                v126 = v192;
                if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v127 = &v193;
                else
                  v127 = (std::string *)v193.__r_.__value_.__r.__words[0];
                if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v193.__r_.__value_.__r.__words[2]);
                else
                  size = v193.__r_.__value_.__l.__size_;
                if (size)
                {
                  v129 = (char *)*((_QWORD *)v192 + 1);
                  if (!v129 || (v130 = &v129[size], (unint64_t)&v129[size] > *((_QWORD *)v192 + 2)))
                  {
                    v131 = 2 * *((_QWORD *)v192 + 4);
                    if (v131 <= size + 1)
                      v131 = size + 1;
                    *((_QWORD *)v192 + 4) = v131;
                    v132 = v131 + 8;
                    v133 = malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
                    *v133 = *((_QWORD *)v126 + 3);
                    v129 = (char *)(v133 + 1);
                    *((_QWORD *)v126 + 2) = (char *)v133 + v132;
                    *((_QWORD *)v126 + 3) = v133;
                    v130 = (char *)v133 + size + 8;
                  }
                  *((_QWORD *)v126 + 1) = v130;
                  memmove(v129, v127, size);
                }
                else
                {
                  v129 = 0;
                }
                v138 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v126, 81, (uint64_t)v129, size);
                swift::Demangle::Node::addChild((unsigned int *)v47, v138, v192, v139, v140);
                v137 = 1;
                v13 = "u16";
                goto LABEL_182;
              }
            }
            else
            {
              if (v73 == 103)
              {
                __src = (char *)v57 + 1;
                __len = v58 - 1;
                if (!v74 || !__len || *(_BYTE *)__src != 95)
                  goto LABEL_3;
                v75 = v74;
                v76 = v13;
                __src = (char *)__src + 1;
                --__len;
                v77 = v192;
                v78 = 1;
                goto LABEL_154;
              }
              if (v58 >= 2 && *v57 == 27750)
              {
                v134 = (unsigned __int8 *)(v57 + 1);
                v135 = v58 - 2;
                __src = v134;
                __len = v58 - 2;
                memset(&v193, 0, sizeof(v193));
                if (v58 >= 3)
                {
                  while (1)
                  {
                    v136 = *v134;
                    if (v136 == 95)
                      break;
                    std::string::push_back(&v193, v136);
                    v134 = (unsigned __int8 *)__src;
                    if (__len)
                      v134 = (unsigned __int8 *)__src + 1;
                    v135 = __len - (__len != 0);
                    __src = v134;
                    __len = v135;
                    if (!v135)
                      goto LABEL_181;
                  }
                  if (v135)
                  {
                    __src = v134 + 1;
                    __len = v135 - 1;
                    v141 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, 3);
                    swift::Demangle::Node::addChild((unsigned int *)v47, v141, v192, v142, v143);
                    v144 = v192;
                    if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v145 = &v193;
                    else
                      v145 = (std::string *)v193.__r_.__value_.__r.__words[0];
                    if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v146 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
                    else
                      v146 = v193.__r_.__value_.__l.__size_;
                    if (v146)
                    {
                      v147 = (char *)*((_QWORD *)v192 + 1);
                      if (!v147 || (v148 = &v147[v146], (unint64_t)&v147[v146] > *((_QWORD *)v192 + 2)))
                      {
                        v149 = 2 * *((_QWORD *)v192 + 4);
                        if (v149 <= v146 + 1)
                          v149 = v146 + 1;
                        *((_QWORD *)v192 + 4) = v149;
                        v150 = v149 + 8;
                        v151 = malloc_type_malloc(v149 + 8, 0xD0263BC5uLL);
                        *v151 = *((_QWORD *)v144 + 3);
                        v147 = (char *)(v151 + 1);
                        *((_QWORD *)v144 + 2) = (char *)v151 + v150;
                        *((_QWORD *)v144 + 3) = v151;
                        v148 = (char *)v151 + v146 + 8;
                      }
                      *((_QWORD *)v144 + 1) = v148;
                      memmove(v147, v145, v146);
                    }
                    else
                    {
                      v147 = 0;
                    }
                    v152 = v144;
                    v153 = (uint64_t)v147;
                    v154 = v146;
                    goto LABEL_215;
                  }
                  goto LABEL_202;
                }
              }
              else
              {
                if (v73 != 115)
                  goto LABEL_3;
                __src = (char *)v57 + 1;
                __len = v58 - 1;
                if (v58 == 1)
                  goto LABEL_3;
                if (*((_BYTE *)v57 + 1) != 101)
                  goto LABEL_3;
                __src = v57 + 1;
                __len = v58 - 2;
                if (v58 == 2)
                  goto LABEL_3;
                v82 = *((unsigned __int8 *)v57 + 2);
                if ((v82 - 50) < 0xFFFFFFFE)
                  goto LABEL_3;
                memset(&v193, 0, sizeof(v193));
                if (v82 == 48)
                  v83 = "u8";
                else
                  v83 = v13;
                std::string::append(&v193, v83);
                v84 = __src;
                if (__len)
                  v84 = (char *)__src + 1;
                v85 = __len - (__len != 0);
                __src = v84;
                __len = v85;
                if (v85)
                {
                  if (*v84 == 118)
                  {
                    __src = v84 + 1;
                    __len = v85 - 1;
                    if (v86)
                    {
                      if (__len)
                      {
                        if (*(_BYTE *)__src == 95)
                        {
                          v87 = v86;
                          __src = (char *)__src + 1;
                          --__len;
                          v88 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 80, 4);
                          swift::Demangle::Node::addChild((unsigned int *)v47, v88, v192, v89, v90);
                          v91 = v192;
                          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v92 = &v193;
                          else
                            v92 = (std::string *)v193.__r_.__value_.__r.__words[0];
                          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v93 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
                          else
                            v93 = v193.__r_.__value_.__l.__size_;
                          if (v93)
                          {
                            v94 = (char *)*((_QWORD *)v192 + 1);
                            if (!v94 || (v95 = &v94[v93], (unint64_t)&v94[v93] > *((_QWORD *)v192 + 2)))
                            {
                              v96 = 2 * *((_QWORD *)v192 + 4);
                              if (v96 <= v93 + 1)
                                v96 = v93 + 1;
                              *((_QWORD *)v192 + 4) = v96;
                              v97 = v96 + 8;
                              v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
                              *v98 = *((_QWORD *)v91 + 3);
                              v94 = (char *)(v98 + 1);
                              *((_QWORD *)v91 + 2) = (char *)v98 + v97;
                              *((_QWORD *)v91 + 3) = v98;
                              v95 = (char *)v98 + v93 + 8;
                            }
                            *((_QWORD *)v91 + 1) = v95;
                            memmove(v94, v92, v93);
                          }
                          else
                          {
                            v94 = 0;
                          }
                          v155 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v91, 81, (uint64_t)v94, v93);
                          swift::Demangle::Node::addChild((unsigned int *)v47, v155, v192, v156, v157);
                          v158 = v192;
                          v159 = *(_QWORD *)(v87 + 8);
                          if (v159)
                          {
                            v160 = *(const void **)v87;
                            v161 = (char *)*((_QWORD *)v192 + 1);
                            if (!v161 || (v162 = &v161[v159], (unint64_t)&v161[v159] > *((_QWORD *)v192 + 2)))
                            {
                              v163 = 2 * *((_QWORD *)v192 + 4);
                              if (v163 <= v159 + 1)
                                v163 = v159 + 1;
                              *((_QWORD *)v192 + 4) = v163;
                              v164 = v163 + 8;
                              v165 = malloc_type_malloc(v163 + 8, 0xD0263BC5uLL);
                              *v165 = *((_QWORD *)v158 + 3);
                              v161 = (char *)(v165 + 1);
                              *((_QWORD *)v158 + 2) = (char *)v165 + v164;
                              *((_QWORD *)v158 + 3) = v165;
                              v162 = (char *)v165 + v159 + 8;
                            }
                            *((_QWORD *)v158 + 1) = v162;
                            memmove(v161, v160, v159);
                          }
                          else
                          {
                            v161 = 0;
                          }
                          v152 = v158;
                          v153 = (uint64_t)v161;
                          v154 = v159;
LABEL_215:
                          v166 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v152, 81, v153, v154);
                          swift::Demangle::Node::addChild((unsigned int *)v47, v166, v192, v167, v168);
                          v137 = 1;
                          v13 = "u16";
                          goto LABEL_182;
                        }
LABEL_202:
                        v137 = 0;
                        goto LABEL_182;
                      }
                    }
                  }
                }
              }
            }
LABEL_181:
            v137 = 0;
LABEL_182:
            if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v193.__r_.__value_.__l.__data_);
            v3 = 0;
            if ((v137 & 1) == 0)
              goto LABEL_4;
          }
        }
      case 'g':
        v15 = 91;
        break;
      case 'r':
        v15 = 92;
        break;
      default:
        goto LABEL_3;
    }
    __src = v11 + 1;
    __len = v12 - 1;
    v16 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v192, v15);
    v24 = __len;
    if (!__len)
    {
      v30 = v192;
      v31 = 4294967294;
      goto LABEL_33;
    }
    v25 = (char *)__src;
    v26 = *(unsigned __int8 *)__src;
    if (v26 != 113)
    {
      v30 = v192;
      goto LABEL_32;
    }
    __src = (char *)__src + 1;
    --__len;
    v27 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 217);
    swift::Demangle::Node::addChild(v16, v27, v192, v28, v29);
    v24 = __len;
    v30 = v192;
    if (__len)
    {
      v25 = (char *)__src;
      LOBYTE(v26) = *(_BYTE *)__src;
LABEL_32:
      __src = v25 + 1;
      __len = v24 - 1;
      v31 = ((char)v26 - 48);
      goto LABEL_33;
    }
    v31 = 4294967294;
LABEL_33:
    v34 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v30, 216, v31);
    while (1)
    {
      swift::Demangle::Node::addChild(v16, v34, v192, v32, v33);
      v37 = __len;
      if (__len)
      {
        v38 = (char *)__src;
        if (*(_BYTE *)__src == 95)
          break;
      }
      v34 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v192, 94);
      if (!v3)
        goto LABEL_4;
      v39 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v192, 232);
      swift::Demangle::Node::addChild(v39, (swift::Demangle::Node *)v3, v192, v40, v41);
      if (!v39)
        goto LABEL_3;
      while (1)
      {
        swift::Demangle::Node::addChild((unsigned int *)v34, (swift::Demangle::Node *)v39, v192, v42, v43);
        if (__len)
        {
          if (*(_BYTE *)__src == 95)
            break;
        }
        v3 = 0;
        if (!v39)
          goto LABEL_4;
      }
      __src = (char *)__src + 1;
      --__len;
    }
LABEL_217:
    __src = v38 + 1;
    __len = v37 - 1;
    if (!v16)
      goto LABEL_3;
    swift::Demangle::Node::addChild(Node, (swift::Demangle::Node *)v16, v192, v35, v36);
    v188 = __p;
    if (__len < 4)
      break;
    v169 = __src;
    if (*(_DWORD *)__src != 1398035551)
      goto LABEL_239;
    v3 = 0;
    v11 = (unsigned __int8 *)__src + 4;
    v12 = __len - 4;
    __src = (char *)__src + 4;
    __len = v12;
    if (!v12)
      goto LABEL_4;
  }
  if (__len >= 2)
  {
    v169 = __src;
LABEL_239:
    if (*v169 == 21599)
    {
      __src = v169 + 1;
      __len -= 2;
      goto LABEL_228;
    }
  }
LABEL_3:
  v3 = 0;
LABEL_4:
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }
  return v3;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleGlobal(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  unint64_t v3;
  _BYTE *v5;
  _QWORD *v6;
  __int16 v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  unsigned int *Node;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  swift::Demangle::Node *v17;
  swift::Demangle::NodeFactory *v18;
  unsigned int *v19;
  _BYTE *v20;
  __int16 v21;
  unint64_t v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  unint64_t v28;
  unsigned int v29;
  swift::Demangle::Node *v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v36;
  swift::Demangle::Node *v37;
  unsigned int *v38;
  uint64_t v39;
  const char *v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  const char *v44;
  _QWORD *v45;
  __int16 v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  const char *v50;
  swift::Demangle::Node *v51;
  uint64_t v52;
  const char *v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  const char *v57;
  unsigned int *v58;
  uint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  swift::Demangle::Node *v67;
  uint64_t v68;
  const char *v69;
  unsigned int *v70;
  uint64_t v71;
  const char *v72;

  if (a2 > 0x400)
    return 0;
  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return 0;
  v5 = (_BYTE *)*((_QWORD *)this + 3);
  if (*v5 != 77)
  {
    v8 = v3 - 2;
    if (v3 < 2 || *(_WORD *)v5 != 16720)
    {
      switch(*v5)
      {
        case 'T':
          v9 = v3 - 1;
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v9;
          if (!v9)
            return 0;
          v10 = v5[1];
          switch(v10)
          {
            case 'r':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v8;
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = 200;
              break;
            case 'W':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v8;
              Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 196);
              v41 = a2 + 1;
              if (v42)
              {
                swift::Demangle::Node::addChild(Node, (swift::Demangle::Node *)v42, *((swift::Demangle::NodeFactory **)this + 5), v43, v44);
                if (v14)
                  goto LABEL_17;
              }
              return 0;
            case 'R':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v8;
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = 201;
              break;
            default:
              return 0;
          }
          Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, v12);
          return Node;
        case 'W':
          v23 = v3 - 1;
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v23;
          Node = 0;
          if (v23)
          {
            switch(v5[1])
            {
              case 'G':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 88;
                goto LABEL_65;
              case 'I':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 89;
                goto LABEL_65;
              case 'L':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v45 = (_QWORD *)*((_QWORD *)this + 5);
                v46 = 136;
                goto LABEL_68;
              case 'P':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 197;
                goto LABEL_65;
              case 'T':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 9);
                v47 = a2 + 1;
                if (!v48)
                  return 0;
                swift::Demangle::Node::addChild(Node, (swift::Demangle::Node *)v48, *((swift::Demangle::NodeFactory **)this + 5), v49, v50);
                if (!v51)
                  return 0;
                swift::Demangle::Node::addChild(Node, v51, *((swift::Demangle::NodeFactory **)this + 5), v52, v53);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 'V':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v6 = (_QWORD *)*((_QWORD *)this + 5);
                v7 = 253;
                goto LABEL_16;
              case 'a':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 198;
LABEL_65:
                Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(v24, v25);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 'l':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v45 = (_QWORD *)*((_QWORD *)this + 5);
                v46 = 135;
LABEL_68:
                Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(v45, v46);
                v54 = a2 + 1;
                if (!v55)
                  return 0;
                swift::Demangle::Node::addChild(Node, (swift::Demangle::Node *)v55, *((swift::Demangle::NodeFactory **)this + 5), v56, v57);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 't':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 6);
                if (!v58)
                  return 0;
                swift::Demangle::Node::addChild(Node, (swift::Demangle::Node *)v58, *((swift::Demangle::NodeFactory **)this + 5), v59, v60);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 'v':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v61 = swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 73);
                v62 = *((_QWORD *)this + 4);
                if (!v62)
                  return 0;
                v63 = (unsigned int *)v61;
                v64 = (unsigned __int8 *)*((_QWORD *)this + 3);
                v65 = *v64;
                if (v65 == 100)
                {
                  v66 = 0;
                }
                else
                {
                  Node = 0;
                  if (v65 != 105)
                    return Node;
                  v66 = 1;
                }
                *((_QWORD *)this + 3) = v64 + 1;
                *((_QWORD *)this + 4) = v62 - 1;
                v67 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 52, v66);
                swift::Demangle::Node::addChild(v63, v67, *((swift::Demangle::NodeFactory **)this + 5), v68, v69);
                if (!v70)
                  return 0;
                swift::Demangle::Node::addChild(v63, (swift::Demangle::Node *)v70, *((swift::Demangle::NodeFactory **)this + 5), v71, v72);
                Node = v63;
                break;
              default:
                return Node;
            }
          }
          return Node;
        case 't':
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v3 - 1;
          v26 = (_QWORD *)*((_QWORD *)this + 5);
          v27 = 236;
LABEL_41:
          Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(v26, v27);
          if (!v36)
            return 0;
          v37 = (swift::Demangle::Node *)v36;
          v38 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
          swift::Demangle::Node::addChild(v38, v37, *((swift::Demangle::NodeFactory **)this + 5), v39, v40);
          if (!v38)
            return 0;
          v18 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
          v19 = Node;
          v17 = (swift::Demangle::Node *)v38;
          goto LABEL_18;
        case 'w':
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v3 - 1;
          if ((v28 & 0xFF00000000) == 0)
            return 0;
          v29 = v28;
          Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 252);
          v30 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 102, v29);
          swift::Demangle::Node::addChild(Node, v30, *((swift::Demangle::NodeFactory **)this + 5), v31, v32);
          if (!v14)
            return 0;
          goto LABEL_17;
        default:
      }
    }
    v20 = v5 + 2;
    *((_QWORD *)this + 3) = v20;
    *((_QWORD *)this + 4) = v3 - 2;
    if (v3 >= 3 && *v20 == 111)
    {
      *((_QWORD *)this + 3) = v20 + 1;
      *((_QWORD *)this + 4) = v3 - 3;
      v21 = 171;
    }
    else
    {
      v21 = 170;
    }
    Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), v21);
    v33 = *((_QWORD *)this + 4);
    if (v33 < 3)
      return Node;
    v34 = *((_QWORD *)this + 3);
    if (*(_WORD *)v34 != 24415 || *(_BYTE *)(v34 + 2) != 84)
      return Node;
    *((_QWORD *)this + 3) = v34 + 3;
    *((_QWORD *)this + 4) = v33 - 3;
    if (v14)
      goto LABEL_17;
    return 0;
  }
  *((_QWORD *)this + 3) = v5 + 1;
  *((_QWORD *)this + 4) = v3 - 1;
  if (v3 != 1)
  {
    switch(v5[1])
    {
      case 'L':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 244;
        goto LABEL_16;
      case 'P':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v26 = (_QWORD *)*((_QWORD *)this + 5);
        v27 = 97;
        goto LABEL_41;
      case 'a':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v26 = (_QWORD *)*((_QWORD *)this + 5);
        v27 = 238;
        goto LABEL_41;
      case 'f':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 75;
        goto LABEL_16;
      case 'm':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 147;
        goto LABEL_16;
      case 'n':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 158;
        goto LABEL_16;
      case 'p':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 186);
        if (!v14)
          return 0;
        goto LABEL_17;
      default:
        break;
    }
  }
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v7 = 237;
LABEL_16:
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(v6, v7);
  if (!v14)
    return 0;
LABEL_17:
  v17 = (swift::Demangle::Node *)v14;
  v18 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
  v19 = Node;
LABEL_18:
  swift::Demangle::Node::addChild(v19, v17, v18, v15, v16);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleType(swift::Demangle::NodeFactory **this, unsigned int a2)
{
  unsigned int *v3;
  swift::Demangle::Node *v4;
  unsigned int *Node;
  uint64_t v6;
  const char *v7;

  if (!v3)
    return 0;
  v4 = (swift::Demangle::Node *)v3;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(Node, v4, this[5], v6, v7);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolConformance(swift::Demangle::NodeFactory **this, int a2)
{
  unsigned int v3;
  unsigned int *v4;
  swift::Demangle::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  unsigned int *v9;
  swift::Demangle::Node *v10;
  unsigned int *v11;
  uint64_t v12;
  const char *v13;
  unsigned int *v14;
  swift::Demangle::Node *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;

  v3 = a2 + 1;
  if (!v4)
    return 0;
  v5 = (swift::Demangle::Node *)v4;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(Node, v5, this[5], v7, v8);
  if (!Node)
    return 0;
  if (!v9)
    return 0;
  v10 = (swift::Demangle::Node *)v9;
  v11 = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(v11, v10, this[5], v12, v13);
  if (!v11)
    return 0;
  if (!v14)
    return 0;
  v15 = (swift::Demangle::Node *)v14;
  v16 = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 182);
  swift::Demangle::Node::addChild(v16, (swift::Demangle::Node *)Node, this[5], v17, v18);
  swift::Demangle::Node::addChild(v16, (swift::Demangle::Node *)v11, this[5], v19, v20);
  swift::Demangle::Node::addChild(v16, v15, this[5], v21, v22);
  return v16;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleTypeImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  uint64_t v3;
  char *v5;
  _BYTE *v6;
  char v7;
  int v8;
  swift::Demangle::Node *v9;
  int v10;
  _QWORD *v11;
  char *v12;
  __int16 v14;
  unsigned int *Node;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  std::string *v21;
  __int16 v22;
  size_t v23;
  int v24;
  __int16 v25;
  unsigned int *v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  const char *v32;
  swift::Demangle::NodeFactory *v33;
  swift::Demangle::Node *v34;
  int v35;
  _QWORD *v36;
  __int16 v37;
  int v38;
  int v39;
  unsigned __int16 *v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned __int16 *v44;
  swift::Demangle::Node *v45;
  uint64_t v46;
  swift::Demangle::Node *v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  swift::Demangle::Node *v52;
  _QWORD *v53;
  __int16 v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  const char *v59;
  swift::Demangle::NodeFactory *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  unint64_t v68;
  std::string *v69;
  std::string *v70;
  size_t v71;
  BOOL v72;
  size_t size;
  uint64_t v74;
  _BYTE *v75;
  int v76;
  std::string *v77;
  std::string *v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned __int8 *v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  swift::Demangle::Node *v89;
  unsigned int *v90;
  uint64_t v91;
  const char *v92;
  unsigned int *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  unsigned int *v98;
  uint64_t v99;
  _BYTE *v100;
  swift::Demangle::Node *v101;
  uint64_t v102;
  const char *v103;
  std::string *v104;
  uint64_t v105;
  const char *v106;
  unint64_t v107;
  std::string v108;
  unint64_t v109;

  if (a2 <= 0x400)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      v5 = (char *)*((_QWORD *)this + 3);
      v8 = *v5;
      v6 = v5 + 1;
      v7 = *v5;
      *((_QWORD *)this + 3) = v5 + 1;
      *((_QWORD *)this + 4) = v3 - 1;
      switch(v8)
      {
        case 'B':
          v9 = 0;
          if (v3 == 1)
            return (unsigned int *)v9;
          v10 = v5[1];
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          switch(v10)
          {
            case 'B':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.UnsafeValueBuffer";
              return (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            case 'O':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.UnknownObject";
              return (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            case 'b':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.BridgeObject";
              return (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            case 'f':
              v109 = 0;
                return 0;
              v65 = (_QWORD *)*((_QWORD *)this + 5);
              memset(&v108, 0, sizeof(v108));
              v66 = "Builtin.FPIEEE";
              v67 = 14;
              goto LABEL_100;
            case 'i':
              v109 = 0;
                return 0;
              v65 = (_QWORD *)*((_QWORD *)this + 5);
              memset(&v108, 0, sizeof(v108));
              v66 = "Builtin.Int";
              v67 = 11;
LABEL_100:
              std::string::append(&v108, v66, v67);
              v68 = v109;
              v69 = &v108;
              goto LABEL_101;
            case 'o':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.NativeObject";
              return (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            case 'p':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.RawPointer";
              return (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            case 't':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.SILToken";
              return (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            case 'v':
              v109 = 0;
                return 0;
              v74 = *((_QWORD *)this + 4);
              if (!v74)
                return 0;
              v75 = (_BYTE *)*((_QWORD *)this + 3);
              if (*v75 != 66)
                return 0;
              *((_QWORD *)this + 3) = v75 + 1;
              *((_QWORD *)this + 4) = v74 - 1;
              if (v74 == 1)
                return 0;
              v76 = v75[1];
              if (v76 == 102)
              {
                *((_QWORD *)this + 3) = v75 + 2;
                *((_QWORD *)this + 4) = v74 - 2;
                v107 = 0;
                v9 = 0;
                  return (unsigned int *)v9;
                v65 = (_QWORD *)*((_QWORD *)this + 5);
                memset(&v108, 0, sizeof(v108));
                std::string::append(&v108, "Builtin.Vec", 0xBuLL);
                v77 = swift::Demangle::DemanglerPrinter::operator<<(&v108, v109);
                v78 = v77;
                v79 = "xFPIEEE";
                v80 = 7;
                goto LABEL_147;
              }
              if (v76 == 112)
              {
                *((_QWORD *)this + 3) = v75 + 2;
                *((_QWORD *)this + 4) = v74 - 2;
                v65 = (_QWORD *)*((_QWORD *)this + 5);
                memset(&v108, 0, sizeof(v108));
                std::string::append(&v108, "Builtin.Vec", 0xBuLL);
                v104 = swift::Demangle::DemanglerPrinter::operator<<(&v108, v109);
                std::string::append(v104, "xRawPointer", 0xBuLL);
                v71 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
                v72 = (v71 & 0x80u) != 0;
                size = v104->__r_.__value_.__l.__size_;
                if ((v71 & 0x80u) == 0)
                  v21 = v104;
                else
                  v21 = (std::string *)v104->__r_.__value_.__r.__words[0];
LABEL_104:
                if (v72)
                  v23 = size;
                else
                  v23 = v71;
                v20 = v65;
                v22 = 20;
                goto LABEL_108;
              }
              if (v76 != 105)
                return 0;
              *((_QWORD *)this + 3) = v75 + 2;
              *((_QWORD *)this + 4) = v74 - 2;
              v107 = 0;
              v9 = 0;
              {
                v65 = (_QWORD *)*((_QWORD *)this + 5);
                memset(&v108, 0, sizeof(v108));
                std::string::append(&v108, "Builtin.Vec", 0xBuLL);
                v77 = swift::Demangle::DemanglerPrinter::operator<<(&v108, v109);
                v78 = v77;
                v79 = "xInt";
                v80 = 4;
LABEL_147:
                std::string::append(v77, v79, v80);
                v68 = v107;
                v69 = v78;
LABEL_101:
                v70 = swift::Demangle::DemanglerPrinter::operator<<(v69, v68);
                v71 = HIBYTE(v70->__r_.__value_.__r.__words[2]);
                v72 = (v71 & 0x80u) != 0;
                size = v70->__r_.__value_.__l.__size_;
                if ((v71 & 0x80u) == 0)
                  v21 = v70;
                else
                  v21 = (std::string *)v70->__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
              break;
            case 'w':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.Word";
              return (unsigned int *)swift::Demangle::NodeFactory::createNode(v11, 20, v12);
            default:
              return (unsigned int *)v9;
          }
          return (unsigned int *)v9;
        case 'D':
          if (!v9)
            return (unsigned int *)v9;
          Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
          swift::Demangle::Node::addChild(Node, v9, *((swift::Demangle::NodeFactory **)this + 5), v16, v17);
          if (!Node)
            return 0;
          v18 = (_QWORD *)*((_QWORD *)this + 5);
          v19 = 57;
          goto LABEL_33;
        case 'E':
          if (v3 == 1)
            return 0;
          if (*v6 != 82)
            return 0;
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          if (v3 == 2 || v5[2] != 82)
            return 0;
          *((_QWORD *)this + 3) = v5 + 3;
          *((_QWORD *)this + 4) = v3 - 3;
          v20 = (_QWORD *)*((_QWORD *)this + 5);
          memset(&v108, 0, sizeof(v108));
          v21 = &v108;
          v22 = 63;
          v23 = 0;
LABEL_108:
          v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v20, v22, v21, v23);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v108.__r_.__value_.__l.__data_);
          return (unsigned int *)v9;
        case 'F':
          v24 = a2 + 1;
          v25 = 82;
        case 'G':
          if (!v26)
            return 0;
        case 'K':
          v24 = a2 + 1;
          v25 = 11;
        case 'M':
          if (!v28)
            return 0;
          Node = (unsigned int *)v28;
          v18 = (_QWORD *)*((_QWORD *)this + 5);
          v19 = 145;
          goto LABEL_33;
        case 'P':
          if (v3 == 1 || *v6 != 77)
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          if (!v29)
            return 0;
          Node = (unsigned int *)v29;
          v18 = (_QWORD *)*((_QWORD *)this + 5);
          v19 = 69;
LABEL_33:
          v30 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v18, v19);
          v9 = (swift::Demangle::Node *)v30;
          v33 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
          v34 = (swift::Demangle::Node *)Node;
          goto LABEL_62;
        case 'Q':
          if (v3 == 1)
          v35 = *v6;
          if (v35 != 85)
          {
            if (v35 != 117)
            *((_QWORD *)this + 3) = v5 + 2;
            *((_QWORD *)this + 4) = v3 - 2;
            return (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 308);
          }
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          v108.__r_.__value_.__r.__words[0] = 0;
          v9 = 0;
            return (unsigned int *)v9;
          v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 308);
          v42 = swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 341, (uint64_t)v108.__r_.__value_.__l.__data_);
LABEL_55:
          v34 = (swift::Demangle::Node *)v42;
          v33 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
          v30 = (unsigned int *)v9;
          goto LABEL_62;
        case 'R':
          v36 = (_QWORD *)*((_QWORD *)this + 5);
          v37 = 123;
          goto LABEL_54;
        case 'S':
        case 'T':
          v38 = a2 + 1;
          v39 = 0;
        case 'W':
        case 'X':
          v9 = 0;
          if (v3 == 1)
            return (unsigned int *)v9;
          switch(*v6)
          {
            case 'B':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 71)
              {
                v40 = 0;
              }
              else
              {
                *((_QWORD *)this + 3) = v5 + 3;
                *((_QWORD *)this + 4) = v3 - 3;
                if (!v40)
                  return 0;
              }
              v81 = swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 212);
              v82 = *((_QWORD *)this + 4);
              if (!v82)
                return 0;
              v83 = (unsigned int *)v81;
              v84 = a2 + 1;
              break;
            case 'F':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
            case 'M':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v50)
                return 0;
              v40 = (unsigned __int16 *)v50;
              if (!v51)
                return 0;
              v52 = (swift::Demangle::Node *)v51;
              v53 = (_QWORD *)*((_QWORD *)this + 5);
              v54 = 145;
              goto LABEL_82;
            case 'P':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 77)
              *((_QWORD *)this + 3) = v5 + 3;
              *((_QWORD *)this + 4) = v3 - 3;
              if (!v55)
                return 0;
              v40 = (unsigned __int16 *)v55;
              if (!v56)
                return 0;
              v52 = (swift::Demangle::Node *)v56;
              v53 = (_QWORD *)*((_QWORD *)this + 5);
              v54 = 69;
LABEL_82:
              v57 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v53, v54);
              v9 = (swift::Demangle::Node *)v57;
              v60 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
              goto LABEL_83;
            case 'b':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v61)
                return 0;
              Node = (unsigned int *)v61;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 210;
              goto LABEL_33;
            case 'f':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              v24 = a2 + 1;
              v25 = 222;
            case 'o':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v62)
                return 0;
              Node = (unsigned int *)v62;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 248;
              goto LABEL_33;
            case 'u':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v63)
                return 0;
              Node = (unsigned int *)v63;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 249;
              goto LABEL_33;
            case 'w':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v64)
                return 0;
              Node = (unsigned int *)v64;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 247;
              goto LABEL_33;
            default:
              return (unsigned int *)v9;
          }
          while (2)
          {
            v85 = (unsigned __int8 *)*((_QWORD *)this + 3);
            v86 = *v85;
            if (v86 == 105)
            {
              v87 = 214;
              goto LABEL_131;
            }
            if (v86 == 109)
            {
              v87 = 213;
LABEL_131:
              *((_QWORD *)this + 3) = v85 + 1;
              *((_QWORD *)this + 4) = v82 - 1;
              if (v88)
              {
                v89 = (swift::Demangle::Node *)v88;
                v90 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                swift::Demangle::Node::addChild(v90, v89, *((swift::Demangle::NodeFactory **)this + 5), v91, v92);
                if (v90)
                {
                  v93 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), v87);
                  swift::Demangle::Node::addChild(v93, (swift::Demangle::Node *)v90, *((swift::Demangle::NodeFactory **)this + 5), v94, v95);
                  swift::Demangle::Node::addChild(v83, (swift::Demangle::Node *)v93, *((swift::Demangle::NodeFactory **)this + 5), v96, v97);
                  v9 = 0;
                  v82 = *((_QWORD *)this + 4);
                  if (!v82)
                    return (unsigned int *)v9;
                  continue;
                }
              }
              return 0;
            }
            break;
          }
          if (v86 != 95)
            return 0;
          *((_QWORD *)this + 3) = v85 + 1;
          *((_QWORD *)this + 4) = v82 - 1;
          if (v40)
          {
            v98 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 235);
            v99 = *((_QWORD *)this + 4);
            if (!v99)
              goto LABEL_139;
LABEL_138:
            v100 = (_BYTE *)*((_QWORD *)this + 3);
            if (*v100 != 95)
            {
LABEL_139:
              while (1)
              {
                if (!v101)
                  return 0;
                swift::Demangle::Node::addChild(v98, v101, *((swift::Demangle::NodeFactory **)this + 5), v102, v103);
                v99 = *((_QWORD *)this + 4);
                if (v99)
                  goto LABEL_138;
              }
            }
            v52 = (swift::Demangle::Node *)v98;
            *((_QWORD *)this + 3) = v100 + 1;
            *((_QWORD *)this + 4) = v99 - 1;
          }
          else
          {
            v52 = 0;
          }
          v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 211);
          swift::Demangle::Node::addChild((unsigned int *)v9, (swift::Demangle::Node *)v83, *((swift::Demangle::NodeFactory **)this + 5), v105, v106);
          if (v40)
          {
            v60 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
            v57 = (unsigned int *)v9;
LABEL_83:
            swift::Demangle::Node::addChild(v57, (swift::Demangle::Node *)v40, v60, v58, v59);
            v33 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
            v30 = (unsigned int *)v9;
            v34 = v52;
LABEL_62:
            swift::Demangle::Node::addChild(v30, v34, v33, v31, v32);
          }
          return (unsigned int *)v9;
        case 'a':
          v41 = a2 + 1;
          v14 = 234;
        case 'b':
          v24 = a2 + 1;
          v25 = 165;
        case 'c':
          v24 = a2 + 1;
          v25 = 22;
        case 'f':
          v24 = a2 + 1;
          v25 = 245;
        case 'k':
          v36 = (_QWORD *)*((_QWORD *)this + 5);
          v37 = 326;
LABEL_54:
          v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(v36, v37);
          if (v42)
            goto LABEL_55;
          return 0;
        case 'q':
        case 't':
          v38 = a2 + 1;
          v39 = 1;
        case 'u':
          v43 = a2 + 1;
          if (!v44)
            return 0;
          v45 = (swift::Demangle::Node *)v44;
          if (!v46)
            return 0;
          v47 = (swift::Demangle::Node *)v46;
          v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 44);
          swift::Demangle::Node::addChild((unsigned int *)v9, v45, *((swift::Demangle::NodeFactory **)this + 5), v48, v49);
          v33 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
          v30 = (unsigned int *)v9;
          v34 = v47;
          goto LABEL_62;
        case 'w':
        case 'x':
        default:
          if ((v7 - 67) > 0x13 || ((1 << (v7 - 67)) & 0x81001) == 0)
            return 0;
          switch(v7)
          {
            case 'C':
              v14 = 24;
              break;
            case 'O':
              v14 = 61;
              break;
            case 'V':
              v14 = 219;
              break;
            default:
              v14 = 101;
              break;
          }
          v41 = a2 + 1;
      }
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::OldDemangler::demangleBuiltinSize(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = v3 + 1;
  v5 = *v3;
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9)
    return 0;
  v6 = (v5 - 48);
  *a2 = v6;
  if (v2 == 1)
    return 0;
  v7 = v3 + 2;
  v8 = v2 - 2;
  while (1)
  {
    v9 = *v4;
    if ((v9 - 58) < 0xFFFFFFF6)
      break;
    v6 = (v9 - 48) + 10 * v6;
    *a2 = v6;
    ++v4;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v8;
    ++v7;
    if (--v8 == -1)
      return 0;
  }
  if (v9 != 95)
    return 0;
  *((_QWORD *)this + 3) = v7;
  *((_QWORD *)this + 4) = v8;
  return 1;
}

uint64_t `anonymous namespace'::OldDemangler::demangleNatural(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = v3 + 1;
  v5 = *v3;
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9)
    return 0;
  v6 = (v5 - 48);
  *a2 = v6;
  if (v2 != 1)
  {
    v7 = v3 + 2;
    v8 = v2 - 2;
    do
    {
      v9 = *v4;
      if ((v9 - 58) < 0xFFFFFFF6)
        break;
      v6 = (v9 - 48) + 10 * v6;
      *a2 = v6;
      ++v4;
      *((_QWORD *)this + 3) = v7;
      *((_QWORD *)this + 4) = v8;
      ++v7;
      --v8;
    }
    while (v8 != -1);
  }
  return 1;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleDeclarationName(uint64_t a1, __int16 a2, int a3)
{
  unsigned int *v5;
  swift::Demangle::Node *v6;
  unint64_t v7;
  swift::Demangle::Node *v8;
  unsigned int *Node;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  unsigned int **v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int **v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int **v29;
  _OWORD *v30;
  unsigned int **v31;
  uint64_t v32;
  __int128 v33;
  unsigned int *v34;

  if (!v5)
    return 0;
  v6 = (swift::Demangle::Node *)v5;
  if (!v7)
    return 0;
  v8 = (swift::Demangle::Node *)v7;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), a2);
  swift::Demangle::Node::addChild(Node, v6, *(swift::Demangle::NodeFactory **)(a1 + 40), v10, v11);
  swift::Demangle::Node::addChild(Node, v8, *(swift::Demangle::NodeFactory **)(a1 + 40), v12, v13);
  v15 = *(unsigned int ***)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(char **)a1;
    v18 = (uint64_t)v15 - *(_QWORD *)a1;
    v19 = v18 >> 3;
    v20 = (v18 >> 3) + 1;
    if (v20 >> 61)
      abort();
    v21 = v14 - (_QWORD)v17;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v23 = operator new(8 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = (unsigned int **)&v23[8 * v19];
    v25 = &v23[8 * v22];
    *v24 = Node;
    v16 = v24 + 1;
    if (v15 != (unsigned int **)v17)
    {
      v26 = (char *)v15 - v17 - 8;
      if (v26 < 0x58)
        goto LABEL_32;
      if ((unint64_t)((char *)v15 - v23 - v18) < 0x20)
        goto LABEL_32;
      v27 = (v26 >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v15[v28 / 0xFFFFFFFFFFFFFFF8];
      v24 = (unsigned int **)((char *)v24 - v28);
      v30 = &v23[8 * v19 - 16];
      v31 = v15 - 2;
      v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 4;
        v32 -= 4;
      }
      while (v32);
      v15 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v34 = *--v15;
          *--v24 = v34;
        }
        while (v15 != (unsigned int **)v17);
      }
      v15 = *(unsigned int ***)a1;
    }
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v25;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = Node;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 8) = v16;
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleFunctionType(_anonymous_namespace_::OldDemangler *this, __int16 a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;
  int v13;
  unsigned int *Node;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  swift::Demangle::Node *v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  swift::Demangle::Node *v23;
  unsigned int *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  swift::Demangle::Node *v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  unsigned int *v32;
  swift::Demangle::Node *v33;
  uint64_t v34;
  const char *v35;
  swift::Demangle::Node *v36;
  uint64_t v37;
  const char *v38;
  swift::Demangle::Node *v40;
  uint64_t v41;
  const char *v42;
  swift::Demangle::Node *v43;
  uint64_t v44;
  const char *v45;
  unsigned int *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  swift::Demangle::Node *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  unsigned int *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;

  v6 = *((_QWORD *)this + 4);
  if (!v6)
  {
    v10 = 0;
    v12 = 0;
    v13 = 0;
    Node = 0;
    v9 = 0;
    goto LABEL_28;
  }
  v7 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v8 = *v7;
  v9 = v8 == 122;
  if (v8 == 122)
  {
    ++v7;
    --v6;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v6;
    if (!v6)
    {
      v10 = 0;
      v12 = 0;
      v13 = 0;
      Node = 0;
      v9 = 1;
      goto LABEL_28;
    }
    v8 = *v7;
  }
  v10 = v8 == 121;
  if (v8 == 121)
  {
    ++v7;
    --v6;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v6;
    if (!v6)
    {
      v12 = 0;
      v13 = 0;
      Node = 0;
      v10 = 1;
      goto LABEL_28;
    }
  }
  v11 = *v7;
  v12 = v11 == 90;
  if (v11 == 90)
  {
    ++v7;
    --v6;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v6;
    if (!v6)
    {
      v13 = 0;
      Node = 0;
      v12 = 1;
      goto LABEL_28;
    }
    v11 = *v7;
  }
  if (v11 == 68)
  {
    *((_QWORD *)this + 3) = v7 + 1;
    *((_QWORD *)this + 4) = v6 - 1;
    if (v6 == 1)
    {
      v6 = 0;
      v13 = 46;
      ++v7;
    }
    else
    {
      v13 = v7[1];
      v7 += 2;
      v6 -= 2;
      *((_QWORD *)this + 3) = v7;
      *((_QWORD *)this + 4) = v6;
    }
    HIDWORD(v15) = v13;
    LODWORD(v15) = (v13 << 24) - 1677721600;
    v16 = (v15 >> 25);
    if (v16 <= 7 && ((1 << v16) & 0x93) != 0)
    {
      if (!v6)
      {
LABEL_27:
        Node = 0;
        goto LABEL_28;
      }
    }
    else
    {
      v13 = 0;
      if (!v6)
        goto LABEL_27;
    }
  }
  else
  {
    v13 = 0;
  }
  if (*v7 != 89)
    goto LABEL_27;
  *((_QWORD *)this + 3) = v7 + 1;
  *((_QWORD *)this + 4) = v6 - 1;
  if (!v17)
    return 0;
  v18 = (swift::Demangle::Node *)v17;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
  swift::Demangle::Node::addChild(Node, v18, *((swift::Demangle::NodeFactory **)this + 5), v19, v20);
  if (!Node)
    return 0;
LABEL_28:
  v21 = a3 + 1;
  if (!v22)
    return 0;
  v23 = (swift::Demangle::Node *)v22;
  v24 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
  swift::Demangle::Node::addChild(v24, v23, *((swift::Demangle::NodeFactory **)this + 5), v25, v26);
  if (!v24)
    return 0;
  if (!v27)
    return 0;
  v28 = (swift::Demangle::Node *)v27;
  v29 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
  swift::Demangle::Node::addChild(v29, v28, *((swift::Demangle::NodeFactory **)this + 5), v30, v31);
  if (!v29)
    return 0;
  v32 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), a2);
  if (v9)
  {
    v33 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 272);
    swift::Demangle::Node::addChild(v32, v33, *((swift::Demangle::NodeFactory **)this + 5), v34, v35);
    if (!v12)
      goto LABEL_34;
  }
  else if (!v12)
  {
LABEL_34:
    if (v10)
      goto LABEL_35;
    goto LABEL_41;
  }
  v40 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 271);
  swift::Demangle::Node::addChild(v32, v40, *((swift::Demangle::NodeFactory **)this + 5), v41, v42);
  if (v10)
  {
LABEL_35:
    v36 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 66);
    swift::Demangle::Node::addChild(v32, v36, *((swift::Demangle::NodeFactory **)this + 5), v37, v38);
    if (!v13)
      goto LABEL_43;
    goto LABEL_42;
  }
LABEL_41:
  if (v13)
  {
LABEL_42:
    v43 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 68, (char)v13);
    swift::Demangle::Node::addChild(v32, v43, *((swift::Demangle::NodeFactory **)this + 5), v44, v45);
  }
LABEL_43:
  if (Node)
  {
    v46 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 67);
    swift::Demangle::Node::addChild(v46, (swift::Demangle::Node *)Node, *((swift::Demangle::NodeFactory **)this + 5), v47, v48);
    swift::Demangle::Node::addChild(v32, (swift::Demangle::Node *)v46, *((swift::Demangle::NodeFactory **)this + 5), v49, v50);
  }
  v51 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 3);
  swift::Demangle::Node::addChild(v32, v51, *((swift::Demangle::NodeFactory **)this + 5), v52, v53);
  swift::Demangle::Node::addChild((unsigned int *)v51, (swift::Demangle::Node *)v24, *((swift::Demangle::NodeFactory **)this + 5), v54, v55);
  v56 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 207);
  swift::Demangle::Node::addChild(v56, (swift::Demangle::Node *)v29, *((swift::Demangle::NodeFactory **)this + 5), v57, v58);
  swift::Demangle::Node::addChild(v32, (swift::Demangle::Node *)v56, *((swift::Demangle::NodeFactory **)this + 5), v59, v60);
  return v32;
}

unsigned __int16 *`anonymous namespace'::OldDemangler::demangleGenericSignature(_anonymous_namespace_::OldDemangler *this, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v6;
  __int16 v7;
  unint64_t Node;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  swift::Demangle::Node *v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  swift::Demangle::Node *v24;
  uint64_t v25;
  const char *v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned __int16 *result;
  swift::Demangle::Node *v33;
  unsigned int *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _BYTE *v38;
  swift::Demangle::Node *v39;
  unsigned int *v40;
  uint64_t v41;
  const char *v42;
  unsigned int *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  swift::Demangle::Node *v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  const char *v55;
  swift::Demangle::Node *v56;
  uint64_t v57;
  const char *v58;
  _QWORD *v59;
  __int16 v60;
  unsigned int *v61;
  uint64_t v62;
  const char *v63;
  swift::Demangle::Node *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _QWORD *v75;
  char *v76;
  _BYTE *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t NodeWithAllocatedText;
  swift::Demangle::Node *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  swift::Demangle::Node *v87;
  uint64_t v88;
  const char *v89;
  swift::Demangle::Node *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  unint64_t v94;

  v6 = (_QWORD *)*((_QWORD *)this + 5);
  if (a3)
    v7 = 46;
  else
    v7 = 43;
  Node = swift::Demangle::NodeFactory::createNode(v6, v7);
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v10 = (unsigned int *)Node;
    v11 = -1;
    while (1)
    {
      v15 = (unsigned __int8 *)*((_QWORD *)this + 3);
      v16 = *v15;
      if (v16 == 122)
      {
        v11 = 0;
        *((_QWORD *)this + 3) = v15 + 1;
        *((_QWORD *)this + 4) = v9 - 1;
        goto LABEL_7;
      }
      if (v16 == 82 || v16 == 114)
        break;
      v17 = v15 + 1;
      *((_QWORD *)this + 3) = v15 + 1;
      *((_QWORD *)this + 4) = v9 - 1;
      if (v16 == 95)
      {
        v18 = 0;
      }
      else
      {
        if ((v16 - 58) < 0xFFFFFFF6 || v9 == 1)
          return 0;
        v20 = (v16 - 48);
        v21 = v15 + 2;
        v22 = v9 - 2;
        while (1)
        {
          v23 = *v17;
          if ((v23 - 58) < 0xFFFFFFF6)
            break;
          v20 = (v23 - 48) + 10 * v20;
          ++v17;
          *((_QWORD *)this + 3) = v21;
          *((_QWORD *)this + 4) = v22;
          ++v21;
          if (--v22 == -1)
            return 0;
        }
        if (v23 != 95)
          return 0;
        *((_QWORD *)this + 3) = v21;
        *((_QWORD *)this + 4) = v22;
        v18 = v20 + 1;
      }
      v11 = v18 + 1;
LABEL_7:
      v12 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 37, v11);
      swift::Demangle::Node::addChild(v10, v12, *((swift::Demangle::NodeFactory **)this + 5), v13, v14);
      v9 = *((_QWORD *)this + 4);
      if (!v9)
        return 0;
    }
    if (v11 != -1
      || (v24 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 37, 1),
          swift::Demangle::Node::addChild(v10, v24, *((swift::Demangle::NodeFactory **)this + 5), v25, v26),
          (v9 = *((_QWORD *)this + 4)) != 0))
    {
      v27 = (unsigned __int8 *)*((_QWORD *)this + 3);
      v28 = *v27;
      if (v28 == 114)
      {
LABEL_105:
        *((_QWORD *)this + 3) = v27 + 1;
        *((_QWORD *)this + 4) = v9 - 1;
        return (unsigned __int16 *)v10;
      }
      if (v28 == 82)
      {
        --v9;
        v29 = a2 + 2;
        v30 = a2 + 4;
        *((_QWORD *)this + 3) = v27 + 1;
        *((_QWORD *)this + 4) = v9;
        if (v9)
          goto LABEL_29;
LABEL_42:
        if (v33)
        {
          while (1)
          {
            v43 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
            swift::Demangle::Node::addChild(v43, v33, *((swift::Demangle::NodeFactory **)this + 5), v44, v45);
            if (!v43)
              return 0;
            v48 = *((_QWORD *)this + 4);
            if (!v48)
              return 0;
            v49 = (unsigned __int8 *)*((_QWORD *)this + 3);
            v50 = *v49;
            if (v50 <= 0x6B)
              break;
            if (v50 != 108)
            {
              if (v50 == 122)
              {
                *((_QWORD *)this + 3) = v49 + 1;
                *((_QWORD *)this + 4) = v48 - 1;
                if (!result)
                  return result;
                v56 = (swift::Demangle::Node *)result;
                v53 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                swift::Demangle::Node::addChild(v53, v56, *((swift::Demangle::NodeFactory **)this + 5), v57, v58);
                if (!v53)
                  return 0;
                v59 = (_QWORD *)*((_QWORD *)this + 5);
                v60 = 39;
                goto LABEL_67;
              }
LABEL_64:
              if (!result)
                return result;
LABEL_65:
              v64 = (swift::Demangle::Node *)result;
              v53 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
              swift::Demangle::Node::addChild(v53, v64, *((swift::Demangle::NodeFactory **)this + 5), v65, v66);
              if (!v53)
                return 0;
              goto LABEL_66;
            }
            v93 = -1;
            v94 = -1;
            *((_QWORD *)this + 3) = v49 + 1;
            *((_QWORD *)this + 4) = v48 - 1;
            if (v48 == 1)
            {
              v62 = v3;
LABEL_99:
              v61 = 0;
LABEL_100:
              v3 = v62;
              if (!v61)
                return 0;
              goto LABEL_101;
            }
            v61 = 0;
            v62 = v3;
            v63 = "U";
            switch(v49[1])
            {
              case 'B':
                v63 = "B";
                goto LABEL_85;
              case 'C':
              case 'D':
              case 'F':
              case 'G':
              case 'H':
              case 'I':
              case 'J':
              case 'K':
              case 'L':
              case 'O':
              case 'P':
              case 'Q':
              case 'V':
              case 'W':
              case 'X':
              case 'Y':
              case 'Z':
              case '[':
              case '\\':
              case ']':
              case '^':
              case '_':
              case 'a':
              case 'b':
              case 'c':
              case 'd':
              case 'f':
              case 'g':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'l':
                goto LABEL_100;
              case 'E':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                  goto LABEL_99;
                v71 = *((_QWORD *)this + 4);
                if (!v71)
                  goto LABEL_99;
                v72 = (_BYTE *)*((_QWORD *)this + 3);
                if (*v72 != 95)
                  goto LABEL_99;
                *((_QWORD *)this + 3) = v72 + 1;
                *((_QWORD *)this + 4) = v71 - 1;
                v63 = "E";
                  goto LABEL_99;
                break;
              case 'M':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                  goto LABEL_99;
                v73 = *((_QWORD *)this + 4);
                if (!v73)
                  goto LABEL_99;
                v74 = (_BYTE *)*((_QWORD *)this + 3);
                if (*v74 != 95)
                  goto LABEL_99;
                *((_QWORD *)this + 3) = v74 + 1;
                *((_QWORD *)this + 4) = v73 - 1;
                v63 = "M";
                  goto LABEL_99;
                break;
              case 'N':
                v63 = "N";
                goto LABEL_85;
              case 'R':
                v63 = "R";
                goto LABEL_85;
              case 'S':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                v63 = "S";
                  goto LABEL_99;
                break;
              case 'T':
                v63 = "T";
                goto LABEL_85;
              case 'U':
LABEL_85:
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                break;
              case 'e':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                v63 = "e";
                  goto LABEL_99;
                break;
              case 'm':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                v63 = "m";
                  goto LABEL_99;
                break;
              default:
                return 0;
            }
            v75 = (_QWORD *)*((_QWORD *)this + 5);
            v76 = (char *)v75[1];
            if (!v76 || (v77 = v76 + 1, (unint64_t)(v76 + 1) > v75[2]))
            {
              v78 = 2 * v75[4];
              if (v78 <= 2)
                v78 = 2;
              v75[4] = v78;
              v79 = v78 + 8;
              v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
              *v80 = v75[3];
              v77 = (char *)v80 + 9;
              v76 = (char *)(v80 + 1);
              v75[2] = (char *)v80 + v79;
              v75[3] = v80;
            }
            v75[1] = v77;
            *v76 = *v63;
            NodeWithAllocatedText = swift::Demangle::NodeFactory::createNodeWithAllocatedText(v75, 101, (uint64_t)v76, 1);
            if (!NodeWithAllocatedText)
              goto LABEL_99;
            v82 = (swift::Demangle::Node *)NodeWithAllocatedText;
            v61 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 41);
            swift::Demangle::Node::addChild(v61, (swift::Demangle::Node *)v43, *((swift::Demangle::NodeFactory **)this + 5), v83, v84);
            swift::Demangle::Node::addChild(v61, v82, *((swift::Demangle::NodeFactory **)this + 5), v85, v86);
            if (v94 == -1)
              goto LABEL_100;
            v87 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 161, v94);
            swift::Demangle::Node::addChild(v61, v87, *((swift::Demangle::NodeFactory **)this + 5), v88, v89);
            if (v93 == -1)
              goto LABEL_100;
            v90 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 161, v93);
            swift::Demangle::Node::addChild(v61, v90, *((swift::Demangle::NodeFactory **)this + 5), v91, v92);
            v3 = v62;
            if (!v61)
              return 0;
LABEL_101:
            swift::Demangle::Node::addChild(v10, (swift::Demangle::Node *)v61, *((swift::Demangle::NodeFactory **)this + 5), v46, v47);
            v9 = *((_QWORD *)this + 4);
            if (!v9)
              goto LABEL_42;
LABEL_29:
            v27 = (unsigned __int8 *)*((_QWORD *)this + 3);
            v31 = *v27;
            switch(v31)
            {
              case 'W':
                *((_QWORD *)this + 3) = v27 + 1;
                *((_QWORD *)this + 4) = v9 - 1;
                if (!result)
                  return result;
                v33 = (swift::Demangle::Node *)result;
                while (1)
                {
                  v37 = *((_QWORD *)this + 4);
                  if (v37)
                  {
                    v38 = (_BYTE *)*((_QWORD *)this + 3);
                    if (*v38 == 95)
                      break;
                  }
                  v34 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                  swift::Demangle::Node::addChild(v34, v33, *((swift::Demangle::NodeFactory **)this + 5), v35, v36);
                  result = 0;
                  if (!v33)
                    return result;
                }
                *((_QWORD *)this + 3) = v38 + 1;
                *((_QWORD *)this + 4) = v37 - 1;
                break;
              case 'w':
                *((_QWORD *)this + 3) = v27 + 1;
                *((_QWORD *)this + 4) = v9 - 1;
                if (!result)
                  return result;
                v39 = (swift::Demangle::Node *)result;
                v40 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                swift::Demangle::Node::addChild(v40, v39, *((swift::Demangle::NodeFactory **)this + 5), v41, v42);
                if (!v33)
                  return 0;
                break;
              case 'r':
                goto LABEL_105;
              default:
                goto LABEL_42;
            }
          }
          if (v50 == 67)
          {
            if (!result)
              return result;
            goto LABEL_65;
          }
          if (v50 != 83)
            goto LABEL_64;
          *((_QWORD *)this + 3) = v49 + 1;
          *((_QWORD *)this + 4) = v48 - 1;
          if (!result)
            return result;
          v51 = (swift::Demangle::Node *)result;
          v52 = result[8];
          if (v52 != 24 && v52 != 180)
          {
            if (v52 != 153)
              return 0;
            v51 = (swift::Demangle::Node *)result;
            if (!result)
              return result;
          }
          v53 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
          swift::Demangle::Node::addChild(v53, v51, *((swift::Demangle::NodeFactory **)this + 5), v54, v55);
LABEL_66:
          v59 = (_QWORD *)*((_QWORD *)this + 5);
          v60 = 36;
LABEL_67:
          v61 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v59, v60);
          swift::Demangle::Node::addChild(v61, (swift::Demangle::Node *)v43, *((swift::Demangle::NodeFactory **)this + 5), v67, v68);
          swift::Demangle::Node::addChild(v61, (swift::Demangle::Node *)v53, *((swift::Demangle::NodeFactory **)this + 5), v69, v70);
          if (!v61)
            return 0;
          goto LABEL_101;
        }
      }
    }
  }
  return 0;
}

unint64_t `anonymous namespace'::OldDemangler::demangleMetatypeRepresentation(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  char *v4;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v3 = *v2;
  if (v3 == 116)
  {
    v4 = "@thin";
    goto LABEL_9;
  }
  if (v3 == 111)
  {
    v4 = "@objc_metatype";
    goto LABEL_9;
  }
  if (v3 != 84)
    return 0;
  v4 = "@thick";
LABEL_9:
  *((_QWORD *)this + 3) = v2 + 1;
  *((_QWORD *)this + 4) = v1 - 1;
  return swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 146, v4);
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolList(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unsigned int *Node;
  swift::Demangle::Node *v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int *v11;
  swift::Demangle::Node *v12;
  unsigned int *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;

  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 190);
  v5 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 235);
  swift::Demangle::Node::addChild(Node, v5, *((swift::Demangle::NodeFactory **)this + 5), v6, v7);
  v8 = a2 + 1;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
LABEL_2:
    v10 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v10 != 95)
      goto LABEL_3;
    *((_QWORD *)this + 3) = v10 + 1;
    *((_QWORD *)this + 4) = v9 - 1;
  }
  else
  {
LABEL_3:
    while (1)
    {
      if (!v11)
        return 0;
      v12 = (swift::Demangle::Node *)v11;
      v13 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
      swift::Demangle::Node::addChild(v13, v12, *((swift::Demangle::NodeFactory **)this + 5), v14, v15);
      if (!v13)
        return 0;
      swift::Demangle::Node::addChild((unsigned int *)v5, (swift::Demangle::Node *)v13, *((swift::Demangle::NodeFactory **)this + 5), v16, v17);
      v9 = *((_QWORD *)this + 4);
      if (v9)
        goto LABEL_2;
    }
  }
  return Node;
}

uint64_t `anonymous namespace'::OldDemangler::demangleIndex(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v4 = v3 + 1;
    v5 = *v3;
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    if (v5 == 95)
    {
      v6 = 0;
LABEL_4:
      *a2 = v6;
      return 1;
    }
    if ((v5 - 48) <= 9)
    {
      v8 = (v5 - 48);
      *a2 = v8;
      if (v2 != 1)
      {
        v9 = v3 + 2;
        v10 = v2 - 2;
        while (1)
        {
          v11 = *v4;
          if ((v11 - 58) < 0xFFFFFFF6)
            break;
          v8 = (v11 - 48) + 10 * v8;
          *a2 = v8;
          ++v4;
          *((_QWORD *)this + 3) = v9;
          *((_QWORD *)this + 4) = v10;
          ++v9;
          if (--v10 == -1)
            return 0;
        }
        if (v11 == 95)
        {
          *((_QWORD *)this + 3) = v9;
          *((_QWORD *)this + 4) = v10;
          v6 = v8 + 1;
          goto LABEL_4;
        }
      }
    }
  }
  return 0;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleArchetypeType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  unsigned int *result;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13[2];
  int v14;

  v14 = a2;
  v13[0] = this;
  v13[1] = &v14;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = *v3;
  if (v4 == 115)
  {
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    v6 = (_QWORD *)*((_QWORD *)this + 5);
    v7 = v6[1];
    v8 = (char *)(v7 + 5);
    if (v7)
      v9 = (unint64_t)v8 > v6[2];
    else
      v9 = 1;
    if (v9)
    {
      v10 = 2 * v6[4];
      if (v10 <= 6)
        v10 = 6;
      v6[4] = v10;
      v11 = v10 + 8;
      v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
      *v12 = v6[3];
      v8 = (char *)v12 + 13;
      v7 = (uint64_t)(v12 + 1);
      v6[2] = (char *)v12 + v11;
      v6[3] = v12;
    }
    v6[1] = v8;
    *(_BYTE *)(v7 + 4) = 116;
    *(_DWORD *)v7 = 1718187859;
    result = (unsigned int *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 5);
  }
  if (v4 != 83)
  {
    if (v4 == 81)
    {
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      if (!result)
        return result;
    }
    return 0;
  }
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if (result)
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleDependentType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  int v3;
  int v5;
  uint64_t v6;
  swift::Demangle::Node *v7;
  swift::Demangle::Node *Node;
  uint64_t v9;
  const char *v10;

  if (!*((_QWORD *)this + 4))
    return 0;
  v3 = **((unsigned __int8 **)this + 3);
  if (v3 == 95 || v3 == 100 || (v3 - 48) < 0xA)
  v5 = a2 + 1;
  if (v6
    && (v7 = (swift::Demangle::Node *)v6,
        Node = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232),
        swift::Demangle::Node::addChild((unsigned int *)Node, v7, *((swift::Demangle::NodeFactory **)this + 5), v9, v10),
        Node))
  {
  }
  else
  {
    return 0;
  }
}

unsigned int *`anonymous namespace'::OldDemangler::getDependentGenericParamType(_anonymous_namespace_::OldDemangler *this, swift::Demangle *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  unsigned int *Node;
  swift::Demangle::Node *v9;
  uint64_t v10;
  const char *v11;
  swift::Demangle::Node *v12;
  uint64_t v13;
  const char *v14;
  std::string __p;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  v4 = a2;
  v5 = a3;
  swift::Demangle::genericParameterName((swift::Demangle *)a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(&v17, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 38);
  v9 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 102, v4);
  swift::Demangle::Node::addChild(Node, v9, *((swift::Demangle::NodeFactory **)this + 5), v10, v11);
  v12 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 102, v5);
  swift::Demangle::Node::addChild(Node, v12, *((swift::Demangle::NodeFactory **)this + 5), v13, v14);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleAssociatedTypeSimple(swift::Demangle::NodeFactory **this, int a2)
{
  unsigned int *result;
  swift::Demangle::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;

  if (result)
  {
    v5 = (swift::Demangle::Node *)result;
    Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
    swift::Demangle::Node::addChild(Node, v5, this[5], v7, v8);
  }
  return result;
}

swift::Demangle::Node *`anonymous namespace'::OldDemangler::demangleAssociatedTypeCompound(swift::Demangle::NodeFactory **this, int a2)
{
  swift::Demangle::Node *v4;
  int v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  swift::Demangle::NodeFactory *v9;
  swift::Demangle::NodeFactory *v10;

  if (v4)
  {
    v5 = a2 + 1;
    while (1)
    {
      v9 = this[4];
      if (v9)
      {
        v10 = this[3];
        if (*(_BYTE *)v10 == 95)
          break;
      }
      Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
      swift::Demangle::Node::addChild(Node, v4, this[5], v7, v8);
      if (!v4)
        return v4;
    }
    this[3] = (swift::Demangle::NodeFactory *)((char *)v10 + 1);
    this[4] = (swift::Demangle::NodeFactory *)((char *)v9 - 1);
  }
  return v4;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleSubstitutionIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1;
  _BYTE *v3;
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  size_t v15;
  _QWORD *v16;
  _BYTE *v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned int *result;
  int v23;
  unint64_t v24;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v3 = (_BYTE *)*((_QWORD *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v4 = (_QWORD *)*((_QWORD *)this + 5);
      v5 = (_BYTE *)v4[1];
      v6 = v5 + 15;
      if (v5)
        v7 = (unint64_t)v6 > v4[2];
      else
        v7 = 1;
      if (v7)
      {
        v8 = 2 * v4[4];
        if (v8 <= 0x10)
          v8 = 16;
        v4[4] = v8;
        v9 = v8 + 8;
        v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
        v5 = v10 + 1;
        *v10 = v4[3];
        v6 = (char *)v10 + 23;
        v4[2] = (char *)v10 + v9;
        v4[3] = v10;
      }
      v4[1] = v6;
      qmemcpy(v5, "__C_Synthesized", 15);
      v11 = v4;
      v12 = 15;
      return (unsigned int *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v11, 153, (uint64_t)v5, v12);
    case 'P':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafePointer";
      goto LABEL_39;
    case 'Q':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "ImplicitlyUnwrappedOptional";
      v14 = 61;
      v15 = 27;
    case 'R':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeBufferPointer";
      v14 = 219;
      v15 = 19;
    case 'S':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "String";
      goto LABEL_41;
    case 'V':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeRawPointer";
      v14 = 219;
      v15 = 16;
    case 'a':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Array";
      goto LABEL_36;
    case 'b':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Bool";
      goto LABEL_45;
    case 'c':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnicodeScalar";
LABEL_39:
      v14 = 219;
      v15 = 13;
    case 'd':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Double";
LABEL_41:
      v14 = 219;
      v15 = 6;
    case 'f':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Float";
LABEL_36:
      v14 = 219;
      v15 = 5;
    case 'i':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Int";
      v14 = 219;
      v15 = 3;
    case 'o':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v16 = (_QWORD *)*((_QWORD *)this + 5);
      v5 = (_BYTE *)v16[1];
      v17 = v5 + 3;
      if (v5)
        v18 = (unint64_t)v17 > v16[2];
      else
        v18 = 1;
      if (v18)
      {
        v19 = 2 * v16[4];
        if (v19 <= 4)
          v19 = 4;
        v16[4] = v19;
        v20 = v19 + 8;
        v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        v5 = v21 + 1;
        *v21 = v16[3];
        v17 = (char *)v21 + 11;
        v16[2] = (char *)v21 + v20;
        v16[3] = v21;
      }
      v16[1] = v17;
      v5[2] = 67;
      *(_WORD *)v5 = 24415;
      v11 = v16;
      v12 = 3;
      return (unsigned int *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v11, 153, (uint64_t)v5, v12);
    case 'p':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeMutablePointer";
      v14 = 219;
      v15 = 20;
    case 'q':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Optional";
      v14 = 61;
      v15 = 8;
    case 'r':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeMutableBufferPointer";
      v14 = 219;
      v15 = 26;
    case 'u':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UInt";
LABEL_45:
      v14 = 219;
      v15 = 4;
    case 'v':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeMutableRawPointer";
      v14 = 219;
      v15 = 23;
    default:
      v24 = 0;
      result = 0;
      if (!v23)
        return result;
      if (v24 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
        return 0;
      result = *(unsigned int **)(*(_QWORD *)this + 8 * v24);
      break;
  }
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleTuple(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t Node;
  uint64_t v8;
  unsigned int *v9;
  _BYTE *v10;
  int8x16_t *v11;
  swift::Demangle::Node *v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  int v16;
  swift::Demangle::Node *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  swift::Demangle::Node *v21;
  unsigned int *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;

  Node = swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 223);
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    return 0;
  v9 = (unsigned int *)Node;
  v10 = *(_BYTE **)(a1 + 24);
  if (*v10 != 95)
  {
    v15 = a3 + 1;
    while (1)
    {
      v11 = (int8x16_t *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 224);
      if (!*(_QWORD *)(a1 + 32))
        break;
      v16 = **(unsigned __int8 **)(a1 + 24);
      if (v16 != 111)
        goto LABEL_12;
LABEL_13:
      v3 = v3 & 0xFFFFFFFF00000000 | 0x100E1;
      if (!v17)
        return 0;
      swift::Demangle::Node::addChild((unsigned int *)v11, v17, *(swift::Demangle::NodeFactory **)(a1 + 40), v18, v19);
LABEL_15:
      if (!v20)
        return 0;
      v21 = (swift::Demangle::Node *)v20;
      v22 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 232);
      swift::Demangle::Node::addChild(v22, v21, *(swift::Demangle::NodeFactory **)(a1 + 40), v23, v24);
      if (!v22)
        return 0;
      swift::Demangle::Node::addChild((unsigned int *)v11, (swift::Demangle::Node *)v22, *(swift::Demangle::NodeFactory **)(a1 + 40), v25, v26);
      swift::Demangle::Node::addChild(v9, (swift::Demangle::Node *)v11, *(swift::Demangle::NodeFactory **)(a1 + 40), v27, v28);
      v8 = *(_QWORD *)(a1 + 32);
      if (!v8)
        return 0;
      v10 = *(_BYTE **)(a1 + 24);
      if (*v10 == 95)
        goto LABEL_4;
    }
    v16 = 46;
LABEL_12:
    if ((v16 - 48) > 9)
      goto LABEL_15;
    goto LABEL_13;
  }
  v11 = 0;
LABEL_4:
  *(_QWORD *)(a1 + 24) = v10 + 1;
  *(_QWORD *)(a1 + 32) = v8 - 1;
  if (a2 == 1 && v11)
  {
    swift::Demangle::Node::reverseChildren(v11, 0);
    v12 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 276);
    swift::Demangle::Node::addChild((unsigned int *)v11, v12, *(swift::Demangle::NodeFactory **)(a1 + 40), v13, v14);
    swift::Demangle::Node::reverseChildren(v11, 0);
  }
  return v9;
}

swift::Demangle::Node *`anonymous namespace'::OldDemangler::demangleImplFunctionType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unsigned int *Node;
  uint64_t v5;
  _BYTE *v6;
  const char *v7;
  size_t v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  swift::Demangle::Node *NodeWithAllocatedText;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  _BYTE *v23;
  swift::Demangle::Node *result;
  const char *v25;
  size_t v26;
  unsigned int *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  swift::Demangle::Node *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  swift::Demangle::Node *v48;
  uint64_t v49;
  const char *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  swift::Demangle::Node *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  const char *v70;

  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 115);
  v5 = *((_QWORD *)this + 4);
  if (v5 && (v6 = (_BYTE *)*((_QWORD *)this + 3), *v6 == 116))
  {
    *((_QWORD *)this + 3) = v6 + 1;
    *((_QWORD *)this + 4) = v5 - 1;
    v7 = "@convention(thin)";
    v8 = 17;
  }
  else
  {
    if (!v10)
      return 0;
    v7 = v9;
    v8 = v10;
  }
  v11 = (_QWORD *)*((_QWORD *)this + 5);
  v12 = (char *)v11[1];
  v13 = &v12[v8];
  if (v12)
    v14 = (unint64_t)v13 > v11[2];
  else
    v14 = 1;
  if (v14)
  {
    v15 = 2 * v11[4];
    if (v15 <= v8 + 1)
      v15 = v8 + 1;
    v11[4] = v15;
    v16 = v15 + 8;
    v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    v18 = (char *)v17 + v16;
    *v17 = v11[3];
    v12 = (char *)(v17 + 1);
    v11[2] = v18;
    v11[3] = v17;
    v13 = (char *)v17 + v8 + 8;
  }
  v11[1] = v13;
  memmove(v12, v7, v8);
  NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v11, 106, (uint64_t)v12, v8);
  swift::Demangle::Node::addChild(Node, NodeWithAllocatedText, *((swift::Demangle::NodeFactory **)this + 5), v20, v21);
  v22 = *((_QWORD *)this + 4);
  if (!v22)
    return 0;
  v23 = (_BYTE *)*((_QWORD *)this + 3);
  if (*v23 == 67)
  {
    *((_QWORD *)this + 3) = v23 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    result = 0;
    if (v22 != 1)
    {
      v25 = "block";
      v26 = 5;
      switch(v23[1])
      {
        case 'O':
          v25 = "objc_method";
          v26 = 11;
          goto LABEL_22;
        case 'b':
          goto LABEL_22;
        case 'c':
          v25 = "c";
          v26 = 1;
          goto LABEL_22;
        case 'm':
          v25 = "method";
          v26 = 6;
          goto LABEL_22;
        case 'w':
          v25 = "witness_method";
          v26 = 14;
LABEL_22:
          *((_QWORD *)this + 3) = v23 + 2;
          *((_QWORD *)this + 4) = v22 - 2;
          v27 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 113);
          v28 = (_QWORD *)*((_QWORD *)this + 5);
          v29 = (char *)v28[1];
          if (!v29 || (v30 = &v29[v26], (unint64_t)&v29[v26] > v28[2]))
          {
            v31 = 2 * v28[4];
            if (v31 <= v26 + 1)
              v31 = v26 + 1;
            v28[4] = v31;
            v32 = v31 + 8;
            v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
            v34 = (char *)v33 + v32;
            *v33 = v28[3];
            v29 = (char *)(v33 + 1);
            v28[2] = v34;
            v28[3] = v33;
            v30 = (char *)v33 + v26 + 8;
          }
          v28[1] = v30;
          memmove(v29, v25, v26);
          v35 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v28, 114, (uint64_t)v29, v26);
          swift::Demangle::Node::addChild(v27, v35, *((swift::Demangle::NodeFactory **)this + 5), v36, v37);
          swift::Demangle::Node::addChild(Node, (swift::Demangle::Node *)v27, *((swift::Demangle::NodeFactory **)this + 5), v38, v39);
          v22 = *((_QWORD *)this + 4);
          if (v22)
            goto LABEL_28;
          return 0;
        default:
          return result;
      }
    }
    return result;
  }
LABEL_28:
  v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v41 = *v40;
  if (v41 == 104)
  {
    *((_QWORD *)this + 3) = v40 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    v42 = (_QWORD *)*((_QWORD *)this + 5);
    v43 = v42[1];
    if (!v43 || (v44 = (char *)(v43 + 9), (unint64_t)(v43 + 9) > v42[2]))
    {
      v45 = 2 * v42[4];
      if (v45 <= 0xA)
        v45 = 10;
      v42[4] = v45;
      v46 = v45 + 8;
      v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
      v43 = (uint64_t)(v47 + 1);
      *v47 = v42[3];
      v44 = (char *)v47 + 17;
      v42[2] = (char *)v47 + v46;
      v42[3] = v47;
    }
    v42[1] = v44;
    *(_QWORD *)v43 = *(_QWORD *)"@Sendable";
    *(_BYTE *)(v43 + 8) = 101;
    v48 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v42, 112, v43, 9);
    swift::Demangle::Node::addChild(Node, v48, *((swift::Demangle::NodeFactory **)this + 5), v49, v50);
    v22 = *((_QWORD *)this + 4);
    if (!v22)
      return 0;
    v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v41 = *v40;
  }
  if (v41 == 72)
  {
    *((_QWORD *)this + 3) = v40 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    v51 = (_QWORD *)*((_QWORD *)this + 5);
    v52 = v51[1];
    if (!v52 || (v53 = (char *)(v52 + 6), (unint64_t)(v52 + 6) > v51[2]))
    {
      v54 = 2 * v51[4];
      if (v54 <= 7)
        v54 = 7;
      v51[4] = v54;
      v55 = v54 + 8;
      v56 = malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
      v52 = (uint64_t)(v56 + 1);
      *v56 = v51[3];
      v53 = (char *)v56 + 14;
      v51[2] = (char *)v56 + v55;
      v51[3] = v56;
    }
    v51[1] = v53;
    *(_WORD *)(v52 + 4) = 25454;
    *(_DWORD *)v52 = 2037604672;
    v57 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v51, 112, v52, 6);
    swift::Demangle::Node::addChild(Node, v57, *((swift::Demangle::NodeFactory **)this + 5), v58, v59);
    v22 = *((_QWORD *)this + 4);
    if (!v22)
      return 0;
    v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v41 = *v40;
  }
  if ((v41 | 0x20) == 0x67)
  {
    *((_QWORD *)this + 3) = v40 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    if (!result)
      return result;
    swift::Demangle::Node::addChild(Node, result, *((swift::Demangle::NodeFactory **)this + 5), v60, v61);
    v22 = *((_QWORD *)this + 4);
    if (!v22)
      return 0;
    v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v41 = *v40;
  }
  if (v41 != 95)
    return 0;
  v62 = v22 - 1;
  *((_QWORD *)this + 3) = v40 + 1;
  *((_QWORD *)this + 4) = v62;
  v63 = a2 + 2;
  if (!v62)
    goto LABEL_51;
LABEL_50:
  v64 = (_BYTE *)*((_QWORD *)this + 3);
  if (*v64 == 95)
  {
    v67 = v62 - 1;
    *((_QWORD *)this + 3) = v64 + 1;
    *((_QWORD *)this + 4) = v67;
    if (!v67)
      goto LABEL_58;
LABEL_57:
    v68 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v68 == 95)
    {
      *((_QWORD *)this + 3) = v68 + 1;
      *((_QWORD *)this + 4) = v67 - 1;
      return (swift::Demangle::Node *)Node;
    }
    else
    {
LABEL_58:
      while (1)
      {
        if (!result)
          break;
        swift::Demangle::Node::addChild(Node, result, *((swift::Demangle::NodeFactory **)this + 5), v69, v70);
        v67 = *((_QWORD *)this + 4);
        if (v67)
          goto LABEL_57;
      }
    }
  }
  else
  {
LABEL_51:
    while (1)
    {
      if (!result)
        break;
      swift::Demangle::Node::addChild(Node, result, *((swift::Demangle::NodeFactory **)this + 5), v65, v66);
      v62 = *((_QWORD *)this + 4);
      if (v62)
        goto LABEL_50;
    }
  }
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleContext(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2;
  _BYTE *v5;
  unsigned int *Node;
  unsigned int v7;
  unint64_t v8;
  swift::Demangle::Node *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  swift::Demangle::Node *v13;
  uint64_t v14;
  const char *v15;
  swift::Demangle::NodeFactory *v16;
  unsigned int *v17;
  swift::Demangle::Node *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  swift::Demangle::Node *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  swift::Demangle::Node *v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 3);
    switch(*v5)
    {
      case 'E':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 71);
        v7 = a2 + 1;
        if (!v8)
          return 0;
        v9 = (swift::Demangle::Node *)v8;
        if (!v10)
          return 0;
        v13 = (swift::Demangle::Node *)v10;
        swift::Demangle::Node::addChild(Node, v9, *((swift::Demangle::NodeFactory **)this + 5), v11, v12);
        v16 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
        v17 = Node;
        v18 = v13;
        goto LABEL_18;
      case 'G':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        if (!v24)
          return 0;
      case 'S':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
      case 'e':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 71);
        v25 = a2 + 1;
        if (!v26)
          return 0;
        v27 = (swift::Demangle::Node *)v26;
        if (!v28)
          return 0;
        v29 = v28;
        if (!v30)
          return 0;
        v33 = (swift::Demangle::Node *)v30;
        swift::Demangle::Node::addChild(Node, v27, *((swift::Demangle::NodeFactory **)this + 5), v31, v32);
        swift::Demangle::Node::addChild(Node, v33, *((swift::Demangle::NodeFactory **)this + 5), v34, v35);
        v16 = (swift::Demangle::NodeFactory *)*((_QWORD *)this + 5);
        v17 = Node;
        v18 = (swift::Demangle::Node *)v29;
LABEL_18:
        swift::Demangle::Node::addChild(v17, v18, v16, v14, v15);
        return Node;
      case 's':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        v36 = (_QWORD *)*((_QWORD *)this + 5);
        v37 = v36[1];
        v38 = (char *)(v37 + 5);
        if (v37)
          v39 = (unint64_t)v38 > v36[2];
        else
          v39 = 1;
        if (v39)
        {
          v40 = 2 * v36[4];
          if (v40 <= 6)
            v40 = 6;
          v36[4] = v40;
          v41 = v40 + 8;
          v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
          v37 = (uint64_t)(v42 + 1);
          *v42 = v36[3];
          v38 = (char *)v42 + 13;
          v36[2] = (char *)v42 + v41;
          v36[3] = v42;
        }
        v36[1] = v38;
        *(_BYTE *)(v37 + 4) = 116;
        *(_DWORD *)v37 = 1718187859;
        return (unsigned int *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v36, 153, v37, 5);
      default:
        v19 = (char)*v5 - 67;
        v39 = v19 > 0x33;
        v20 = (1 << v19) & 0x9000000883049;
        v21 = a2 + 1;
        if (v39 || v20 == 0)
        else
    }
  }
  return 0;
}

unint64_t `anonymous namespace'::OldDemangler::demangleDeclName(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t Node;
  swift::Demangle::Node *v9;
  unint64_t v10;
  swift::Demangle::Node *v11;
  _QWORD *v12;
  __int16 v13;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = *v3;
  if (v4 == 80)
  {
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    if (v15)
    {
      v9 = (swift::Demangle::Node *)v15;
      if (v16)
      {
        v11 = (swift::Demangle::Node *)v16;
        v12 = (_QWORD *)*((_QWORD *)this + 5);
        v13 = 176;
        goto LABEL_14;
      }
    }
    return 0;
  }
  if (v4 != 76)
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if (v2 == 1)
    return 0;
  v5 = v3[1];
  v6 = v3 + 2;
  *((_QWORD *)this + 3) = v3 + 2;
  *((_QWORD *)this + 4) = v2 - 2;
  if (v5 == 95)
  {
    v7 = 0;
  }
  else
  {
    v17 = 0;
    if (v2 == 2 || (v5 - 58) < 0xFFFFFFF6)
      return (unint64_t)v17;
    v22 = (v5 - 48);
    v23 = v3 + 3;
    v24 = v2 - 3;
    while (1)
    {
      v25 = *v6;
      if ((v25 - 58) < 0xFFFFFFF6)
        break;
      v22 = (v25 - 48) + 10 * v22;
      ++v6;
      *((_QWORD *)this + 3) = v23;
      *((_QWORD *)this + 4) = v24;
      ++v23;
      if (--v24 == -1)
        return 0;
    }
    if (v25 != 95)
      return 0;
    *((_QWORD *)this + 3) = v23;
    *((_QWORD *)this + 4) = v24;
    v7 = v22 + 1;
  }
  Node = swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 161, v7);
  if (!Node)
    return 0;
  v9 = (swift::Demangle::Node *)Node;
  if (!v10)
    return 0;
  v11 = (swift::Demangle::Node *)v10;
  v12 = (_QWORD *)*((_QWORD *)this + 5);
  v13 = 137;
LABEL_14:
  v17 = (unsigned int *)swift::Demangle::NodeFactory::createNode(v12, v13);
  swift::Demangle::Node::addChild(v17, v9, *((swift::Demangle::NodeFactory **)this + 5), v18, v19);
  swift::Demangle::Node::addChild(v17, v11, *((swift::Demangle::NodeFactory **)this + 5), v20, v21);
  return (unint64_t)v17;
}

unint64_t `anonymous namespace'::OldDemangler::demangleModule(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unsigned int *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  _OWORD *v32;
  unint64_t *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_13;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = *v3;
  if (v4 == 83)
  {
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    if (!v18)
      return 0;
    if (*((_WORD *)v18 + 8) == 153)
      return (unint64_t)v18;
    return 0;
  }
  if (v4 != 115)
  {
LABEL_13:
    v14 = v13;
    if (v13)
    {
      v16 = (unint64_t *)*((_QWORD *)this + 1);
      v15 = *((_QWORD *)this + 2);
      if ((unint64_t)v16 >= v15)
      {
        v19 = *(unint64_t **)this;
        v20 = (uint64_t)v16 - *(_QWORD *)this;
        v21 = v20 >> 3;
        v22 = (v20 >> 3) + 1;
        if (v22 >> 61)
          abort();
        v23 = v15 - (_QWORD)v19;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = operator new(8 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = (unint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v14;
        v17 = v26 + 1;
        if (v16 != v19)
        {
          v28 = (char *)v16 - (char *)v19 - 8;
          if (v28 < 0x58)
            goto LABEL_47;
          if ((unint64_t)((char *)v16 - v25 - v20) < 0x20)
            goto LABEL_47;
          v29 = (v28 >> 3) + 1;
          v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = &v16[v30 / 0xFFFFFFFFFFFFFFF8];
          v26 = (unint64_t *)((char *)v26 - v30);
          v32 = &v25[8 * v21 - 16];
          v33 = v16 - 2;
          v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *v32 = v35;
            v32 -= 2;
            v33 -= 4;
            v34 -= 4;
          }
          while (v34);
          v16 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_47:
            do
            {
              v36 = *--v16;
              *--v26 = v36;
            }
            while (v16 != v19);
          }
          v16 = *(unint64_t **)this;
        }
        *(_QWORD *)this = v26;
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v27;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v16 = v13;
        v17 = v16 + 1;
      }
      *((_QWORD *)this + 1) = v17;
    }
    return v14;
  }
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  v6 = v5[1];
  v7 = (char *)(v6 + 5);
  if (v6)
    v8 = (unint64_t)v7 > v5[2];
  else
    v8 = 1;
  if (v8)
  {
    v9 = 2 * v5[4];
    if (v9 <= 6)
      v9 = 6;
    v5[4] = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v6 = (uint64_t)(v11 + 1);
    *v11 = v5[3];
    v7 = (char *)v11 + 13;
    v5[2] = (char *)v11 + v10;
    v5[3] = v11;
  }
  v5[1] = v7;
  *(_BYTE *)(v6 + 4) = 116;
  *(_DWORD *)v6 = 1718187859;
  return swift::Demangle::NodeFactory::createNodeWithAllocatedText(v5, 153, v6, 5);
}

unsigned int *`anonymous namespace'::OldDemangler::demangleEntity(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  unsigned int *Node;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;
  swift::Demangle::Node *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  swift::Demangle::Node *v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  swift::Demangle::NodeFactory **v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  swift::Demangle::Node *v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  swift::Demangle::NodeFactory *v40;
  unsigned int *v41;
  swift::Demangle::Node *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v51;
  _DWORD *v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  unsigned int *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  char v63;
  uint64_t v64;
  swift::Demangle::Node *v65;
  unsigned int *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  char v71;
  unsigned int *v72;
  uint64_t v73;
  const char *v74;
  swift::Demangle::Node *v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  const char *v79;

  if (a2 > 0x400)
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (!v5)
  v6 = (_BYTE *)*((_QWORD *)this + 3);
  v7 = *v6;
  if (v7 != 90)
  {
    if (v7 != 70)
      goto LABEL_8;
LABEL_14:
    v9 = 0;
    v10 = 76;
    goto LABEL_17;
  }
  ++v6;
  --v5;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = v5;
  if (!v5)
  if (*v6 == 70)
    goto LABEL_14;
LABEL_8:
  v8 = *v6;
  switch(v8)
  {
    case 'I':
      v10 = 125;
      v9 = 1;
      goto LABEL_17;
    case 'i':
      v9 = 0;
      v10 = 220;
LABEL_17:
      *((_QWORD *)this + 3) = v6 + 1;
      *((_QWORD *)this + 4) = v5 - 1;
      v11 = a2 + 1;
      if (v12)
      {
        v13 = (swift::Demangle::Node *)v12;
        v14 = *((_QWORD *)this + 4);
        if (v14)
        {
          v15 = (unsigned __int8 *)*((_QWORD *)this + 3);
          v16 = *v15;
          v17 = 0;
          v18 = 31;
          switch(*v15)
          {
            case 'C':
              v18 = 0;
              v17 = 1;
              goto LABEL_44;
            case 'D':
              goto LABEL_44;
            case 'E':
              v17 = 0;
              v18 = 104;
              goto LABEL_44;
            case 'G':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v22)
                return 0;
              v23 = (_DWORD *)v22;
              v24 = 100;
              goto LABEL_72;
            case 'M':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v25)
                return 0;
              v23 = (_DWORD *)v25;
              v24 = 152;
              goto LABEL_72;
            case 'U':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v26)
                return 0;
              v20 = (swift::Demangle::Node *)v26;
              v10 = 70;
              v17 = 1;
              goto LABEL_45;
            case 'W':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v27)
                return 0;
              v23 = (_DWORD *)v27;
              v24 = 51;
              goto LABEL_72;
            case 'a':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              Node = 0;
              if (v14 != 1)
              {
                v24 = 169;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_71;
                  case 'o':
                    v24 = 155;
                    goto LABEL_71;
                  case 'p':
                    v24 = 157;
                    goto LABEL_71;
                  case 'u':
                    v24 = 251;
                    goto LABEL_71;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'c':
              v18 = 29;
              v17 = 1;
              goto LABEL_44;
            case 'd':
              v17 = 0;
              v18 = 50;
              goto LABEL_44;
            case 'e':
              v17 = 0;
              v18 = 103;
              goto LABEL_44;
            case 'g':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v43)
                return 0;
              v23 = (_DWORD *)v43;
              v24 = 98;
              goto LABEL_72;
            case 'l':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              Node = 0;
              if (v14 != 1)
              {
                v24 = 168;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_71;
                  case 'o':
                    v24 = 154;
                    goto LABEL_71;
                  case 'p':
                    v24 = 156;
                    goto LABEL_71;
                  case 'u':
                    v24 = 250;
LABEL_71:
                    *((_QWORD *)this + 3) = v15 + 2;
                    *((_QWORD *)this + 4) = v14 - 2;
                    if (v23)
                      goto LABEL_72;
                    return 0;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'm':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v44)
                return 0;
              v23 = (_DWORD *)v44;
              v24 = 141;
              goto LABEL_72;
            case 'r':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v45)
                return 0;
              v23 = (_DWORD *)v45;
              v24 = 204;
              goto LABEL_72;
            case 's':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v46)
                return 0;
              v23 = (_DWORD *)v46;
              v24 = 215;
              goto LABEL_72;
            case 'u':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v47)
                return 0;
              v20 = (swift::Demangle::Node *)v47;
              v10 = 117;
              v17 = 1;
              goto LABEL_45;
            case 'w':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v48)
                return 0;
              v23 = (_DWORD *)v48;
              v24 = 257;
LABEL_72:
              v28 = (swift::Demangle::NodeFactory **)((char *)this + 40);
              Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), v24);
              v49 = *((unsigned __int16 *)v23 + 8);
              if (v49 != 176)
              {
                if (v49 != 101 || *((_QWORD *)v23 + 1) != 9)
                  goto LABEL_90;
                if (**(_QWORD **)v23 != 0x7069726373627573 || *(_BYTE *)(*(_QWORD *)v23 + 8) != 116)
                  goto LABEL_90;
                v23 = 0;
                goto LABEL_107;
              }
              v51 = *((unsigned __int8 *)v23 + 18);
              v52 = v23;
              if (v51 != 2)
              {
                if (v51 != 5 || v23[2] < 2u)
                {
LABEL_90:
                  v58 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*v28, 254);
                  swift::Demangle::Node::addChild(v58, v13, *v28, v59, v60);
                  swift::Demangle::Node::addChild(v58, (swift::Demangle::Node *)v23, *v28, v61, v62);
                  v63 = 0;
                  goto LABEL_91;
                }
                v52 = *(_DWORD **)v23;
              }
              v53 = (uint64_t **)*((_QWORD *)v52 + 1);
              if (v53[1] != (uint64_t *)9)
                goto LABEL_90;
              v54 = *v53;
              v55 = *v54;
              v56 = *((unsigned __int8 *)v54 + 8);
              if (v55 != 0x7069726373627573 || v56 != 116)
                goto LABEL_90;
              if (v51 == 2)
                goto LABEL_104;
              if (v23[2])
              {
                v23 = *(_DWORD **)v23;
LABEL_104:
                v75 = *(swift::Demangle::Node **)v23;
              }
              else
              {
                v75 = 0;
              }
              v23 = (_DWORD *)swift::Demangle::NodeFactory::createNode(*v28, 176);
              swift::Demangle::Node::addChild(v23, v75, *v28, v76, v77);
LABEL_107:
              v58 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*v28, 220);
              swift::Demangle::Node::addChild(v58, v13, *v28, v78, v79);
              v63 = 1;
LABEL_91:
              if (!v64)
                return 0;
              v65 = (swift::Demangle::Node *)v64;
              v66 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*v28, 232);
              swift::Demangle::Node::addChild(v66, v65, *v28, v67, v68);
              if (!v66)
                return 0;
              swift::Demangle::Node::addChild(v58, (swift::Demangle::Node *)v66, *v28, v69, v70);
              v71 = v63 ^ 1;
              if (!v23)
                v71 = 1;
              if ((v71 & 1) == 0)
                swift::Demangle::Node::addChild(v58, (swift::Demangle::Node *)v23, *v28, v38, v39);
              v40 = *v28;
              v41 = Node;
              v42 = (swift::Demangle::Node *)v58;
              goto LABEL_98;
            default:
              if (!v9)
                goto LABEL_22;
              if (v16 == 105)
              {
                v17 = 0;
                v18 = 125;
LABEL_44:
                v20 = 0;
                *((_QWORD *)this + 3) = v15 + 1;
                *((_QWORD *)this + 4) = v14 - 1;
                v10 = v18;
                goto LABEL_45;
              }
              if (v16 == 65)
              {
                *((_QWORD *)this + 3) = v15 + 1;
                *((_QWORD *)this + 4) = v14 - 1;
                if (v21)
                {
                  v20 = (swift::Demangle::Node *)v21;
                  v17 = 0;
                  v10 = 33;
                  goto LABEL_45;
                }
              }
              return 0;
          }
        }
        if ((v9 & 1) == 0)
        {
LABEL_22:
          if (v19)
          {
            v20 = (swift::Demangle::Node *)v19;
            v17 = 1;
LABEL_45:
            v28 = (swift::Demangle::NodeFactory **)((char *)this + 40);
            Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), v10);
            swift::Demangle::Node::addChild(Node, v13, *((swift::Demangle::NodeFactory **)this + 5), v29, v30);
            if (v20)
              swift::Demangle::Node::addChild(Node, v20, *v28, v31, v32);
            if (!v17)
              goto LABEL_99;
            if (v33)
            {
              v34 = (swift::Demangle::Node *)v33;
              v35 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*v28, 232);
              swift::Demangle::Node::addChild(v35, v34, *v28, v36, v37);
              if (v35)
              {
                v40 = *v28;
                v41 = Node;
                v42 = (swift::Demangle::Node *)v35;
LABEL_98:
                swift::Demangle::Node::addChild(v41, v42, v40, v38, v39);
LABEL_99:
                if (v7 == 90)
                {
                  v72 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*v28, 218);
                  swift::Demangle::Node::addChild(v72, (swift::Demangle::Node *)Node, *v28, v73, v74);
                  return v72;
                }
                return Node;
              }
            }
          }
        }
      }
      return 0;
    case 'v':
      v9 = 0;
      v10 = 254;
      goto LABEL_17;
  }
}

unint64_t `anonymous namespace'::OldDemangler::demangleIdentifier(_QWORD *a1, int a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  unint64_t NodeWithAllocatedText;
  int v7;
  __int16 v8;
  char v9;
  int v10;
  std::string *p_p;
  unint64_t v12;
  unint64_t size;
  unsigned __int8 *v14;
  int v15;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  std::string v25;
  void *__p;
  unint64_t v27;
  uint64_t v28;

  v2 = a1[4];
  if (!v2)
    return 0;
  v4 = (unsigned __int8 *)a1[3];
  v5 = *v4;
  if (v5 == 88)
  {
    ++v4;
    __p = 0;
    v27 = 0;
    v28 = 0;
    --v2;
    a1[3] = v4;
    a1[4] = v2;
    if (!v2)
    {
LABEL_14:
      v9 = 0;
      if (BYTE2(a2))
        v8 = a2;
      else
        v8 = 101;
      if (!v2)
        goto LABEL_39;
      goto LABEL_22;
    }
  }
  else
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
  }
  if (*v4 != 111)
    goto LABEL_14;
  NodeWithAllocatedText = 0;
  a1[3] = v4 + 1;
  a1[4] = v2 - 1;
  if (!BYTE2(a2) && v2 != 1)
  {
    v7 = (char)v4[1];
    v4 += 2;
    v2 -= 2;
    a1[3] = v4;
    a1[4] = v2;
    switch(v7)
    {
      case 'p':
        v8 = 175;
        break;
      case 'i':
        v8 = 124;
        break;
      case 'P':
        v8 = 173;
        break;
      default:
        goto LABEL_39;
    }
    v9 = 1;
    if (!v2)
      goto LABEL_39;
LABEL_22:
    p_p = (std::string *)(v4 + 1);
    v10 = *v4;
    v12 = v2 - 1;
    a1[3] = v4 + 1;
    a1[4] = v12;
    if ((v10 - 48) > 9)
      goto LABEL_39;
    size = (v10 - 48);
    if (v12)
    {
      v14 = v4 + 2;
      do
      {
        v15 = p_p->__r_.__value_.__s.__data_[0];
        if ((v15 - 58) < 0xFFFFFFF6)
          break;
        size = (v15 - 48) + 10 * size;
        p_p = (std::string *)((char *)p_p + 1);
        --v12;
        a1[3] = v14;
        a1[4] = v12;
        ++v14;
      }
      while (v12);
    }
    if (v12 < size)
      goto LABEL_39;
    a1[3] = (char *)p_p + size;
    a1[4] = v12 - size;
    if (v5 != 88)
    {
LABEL_36:
      if (size)
      {
        memset(&v25, 0, sizeof(v25));
        if ((v9 & 1) != 0)
        {
          std::string::reserve(&v25, size);
          do
          {
            v17 = p_p->__r_.__value_.__s.__data_[0];
            if ((v17 & 0x8000000000000000) == 0)
            {
              if ((v17 - 123) < 0xE6u
                || (v17 = (v17 - 97), ((0x17007A2uLL >> v17) & 1) != 0))
              {
                NodeWithAllocatedText = 0;
                if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_40;
                goto LABEL_68;
              }
            }
            std::string::push_back(&v25, v17);
            p_p = (std::string *)((char *)p_p + 1);
            --size;
          }
          while (size);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &v25;
          else
            p_p = (std::string *)v25.__r_.__value_.__r.__words[0];
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          else
            size = v25.__r_.__value_.__l.__size_;
          v18 = (_QWORD *)a1[5];
          if (!size)
          {
            v19 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          v18 = (_QWORD *)a1[5];
        }
        v19 = (char *)v18[1];
        v20 = &v19[size];
        if (v19)
          v21 = (unint64_t)v20 > v18[2];
        else
          v21 = 1;
        if (v21)
        {
          v22 = 2 * v18[4];
          if (v22 <= size + 1)
            v22 = size + 1;
          v18[4] = v22;
          v23 = v22 + 8;
          v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
          *v24 = v18[3];
          v19 = (char *)(v24 + 1);
          v18[2] = (char *)v24 + v23;
          v18[3] = v24;
          v20 = (char *)v24 + size + 8;
        }
        v18[1] = v20;
        memmove(v19, p_p, size);
LABEL_67:
        NodeWithAllocatedText = swift::Demangle::NodeFactory::createNodeWithAllocatedText(v18, v8, (uint64_t)v19, size);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
LABEL_68:
          operator delete(v25.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (swift::Punycode::decodePunycodeUTF8((unsigned __int8 *)p_p, size, (uint64_t)&__p))
    {
      if (v28 >= 0)
        p_p = (std::string *)&__p;
      else
        p_p = (std::string *)__p;
      if (v28 >= 0)
        size = HIBYTE(v28);
      else
        size = v27;
      goto LABEL_36;
    }
LABEL_39:
    NodeWithAllocatedText = 0;
  }
LABEL_40:
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  return NodeWithAllocatedText;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleNominalType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (_BYTE *)*((_QWORD *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 24;
      goto LABEL_4;
    case 'O':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 61;
      goto LABEL_4;
    case 'P':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 180;
      goto LABEL_4;
    case 'S':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
    case 'V':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 219;
LABEL_4:
      break;
    default:
      return 0;
  }
  return result;
}

unint64_t `anonymous namespace'::OldDemangler::demangleIndexAsNode(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(unsigned __int8 **)(a1 + 24);
    v3 = v2 + 1;
    v4 = *v2;
    *(_QWORD *)(a1 + 24) = v2 + 1;
    *(_QWORD *)(a1 + 32) = v1 - 1;
    if (v4 == 95)
    {
      v5 = 0;
      return swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 161, v5);
    }
    if ((v4 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      v8 = (v4 - 48);
      v9 = v2 + 2;
      v10 = v1 - 2;
      while (1)
      {
        v11 = *v3;
        if ((v11 - 58) < 0xFFFFFFF6)
          break;
        v8 = (v11 - 48) + 10 * v8;
        ++v3;
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = v10;
        ++v9;
        if (--v10 == -1)
          return 0;
      }
      if (v11 == 95)
      {
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = v10;
        v5 = v8 + 1;
        return swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 161, v5);
      }
    }
  }
  return 0;
}

swift::Demangle::Node *`anonymous namespace'::OldDemangler::demangleBoundGenericArgs(swift::Demangle::NodeFactory **this, swift::Demangle::Node *a2, int a3)
{
  swift::Demangle::Node *v4;
  int v6;
  swift::Demangle::Node *v7;
  swift::Demangle::Node *v8;
  int v9;
  uint64_t v10;
  swift::Demangle::Node *v11;
  unsigned int *Node;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  unint64_t i;
  swift::Demangle::Node *v18;
  unint64_t v19;
  unsigned int v20;
  swift::Demangle::Node *v21;
  unint64_t v22;
  unsigned int v23;
  swift::Demangle::NodeFactory *v24;
  swift::Demangle::NodeFactory *v25;
  uint64_t v26;
  swift::Demangle::Node *v27;
  unsigned int *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;

  v4 = a2;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2))
      return 0;
    v7 = *(swift::Demangle::Node **)a2;
  }
  v8 = *(swift::Demangle::Node **)v7;
  v9 = *(unsigned __int16 *)(*(_QWORD *)v7 + 16);
  if (v9 == 71 || v9 == 76 || v9 == 153)
    goto LABEL_30;
  if (!v10)
    return 0;
  v11 = (swift::Demangle::Node *)v10;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], *((_WORD *)v4 + 8));
  swift::Demangle::Node::addChild(Node, v11, this[5], v13, v14);
  for (i = 1; ; ++i)
  {
    v19 = *((unsigned __int8 *)v4 + 18);
    if ((_DWORD)v19 == 1)
    {
      if (v19 <= i)
        goto LABEL_29;
      goto LABEL_20;
    }
    if ((_DWORD)v19 != 5)
      break;
    if (*((unsigned int *)v4 + 2) <= i)
      goto LABEL_29;
LABEL_20:
    v20 = v19 - 1;
    if ((_DWORD)v19 == 1)
      goto LABEL_23;
    if ((_DWORD)v19 != 5)
    {
      v19 = 2;
LABEL_23:
      if (v19 <= i)
        goto LABEL_10;
      goto LABEL_26;
    }
    if (*((unsigned int *)v4 + 2) <= i)
    {
LABEL_10:
      v18 = 0;
      goto LABEL_11;
    }
LABEL_26:
    v21 = v4;
    if (v20 >= 2)
      v21 = *(swift::Demangle::Node **)v4;
    v18 = (swift::Demangle::Node *)*((_QWORD *)v21 + i);
LABEL_11:
    swift::Demangle::Node::addChild(Node, v18, this[5], v15, v16);
  }
  if ((_DWORD)v19 == 2 && i < 2)
    goto LABEL_20;
LABEL_29:
  v4 = (swift::Demangle::Node *)Node;
LABEL_30:
  v22 = swift::Demangle::NodeFactory::createNode(this[5], 235);
  v23 = a3 + 1;
  v24 = this[4];
  while (1)
  {
    if (v24)
    {
      v25 = this[3];
      if (*(_BYTE *)v25 == 95)
        break;
    }
    if (v26)
    {
      v27 = (swift::Demangle::Node *)v26;
      v28 = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
      swift::Demangle::Node::addChild(v28, v27, this[5], v29, v30);
      if (v28)
      {
        swift::Demangle::Node::addChild((unsigned int *)v22, (swift::Demangle::Node *)v28, this[5], v31, v32);
        v24 = this[4];
        if (v24)
          continue;
      }
    }
    return 0;
  }
  this[3] = (swift::Demangle::NodeFactory *)((char *)v25 + 1);
  this[4] = (swift::Demangle::NodeFactory *)((char *)v24 - 1);
  v34 = *(unsigned __int8 *)(v22 + 18);
  if ((v34 - 1) < 2 || v34 == 5 && *(_DWORD *)(v22 + 8))
  {
    v35 = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
    swift::Demangle::Node::addChild(v35, v4, this[5], v36, v37);
    v38 = *((unsigned __int16 *)v4 + 8);
    switch(v38)
    {
      case 24:
        v39 = 13;
        break;
      case 61:
        v39 = 14;
        break;
      case 219:
        v39 = 15;
        break;
      default:
        return 0;
    }
    v4 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(this[5], v39);
    swift::Demangle::Node::addChild((unsigned int *)v4, (swift::Demangle::Node *)v35, this[5], v40, v41);
    swift::Demangle::Node::addChild((unsigned int *)v4, (swift::Demangle::Node *)v22, this[5], v42, v43);
  }
  return v4;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolNameGivenContext(swift::Demangle::NodeFactory **this, swift::Demangle::Node *a2)
{
  unint64_t v4;
  swift::Demangle::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  swift::Demangle::NodeFactory *v11;
  char *v12;
  swift::Demangle::NodeFactory *v13;
  swift::Demangle::NodeFactory *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unsigned int **v21;
  swift::Demangle::NodeFactory *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  unsigned int *v31;

  if (!v4)
    return 0;
  v5 = (swift::Demangle::Node *)v4;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 180);
  swift::Demangle::Node::addChild(Node, a2, this[5], v7, v8);
  swift::Demangle::Node::addChild(Node, v5, this[5], v9, v10);
  v12 = (char *)this[1];
  v11 = this[2];
  if (v12 >= (char *)v11)
  {
    v14 = *this;
    v15 = v12 - (char *)*this;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      abort();
    v18 = v11 - v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (unsigned int **)&v20[8 * v16];
    v22 = (swift::Demangle::NodeFactory *)&v20[8 * v19];
    *v21 = Node;
    v13 = (swift::Demangle::NodeFactory *)(v21 + 1);
    if (v12 != (char *)v14)
    {
      v23 = v12 - (char *)v14 - 8;
      if (v23 < 0x58)
        goto LABEL_31;
      if ((unint64_t)(v12 - v20 - v15) < 0x20)
        goto LABEL_31;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = &v12[-v25];
      v21 = (unsigned int **)((char *)v21 - v25);
      v27 = &v20[8 * v16 - 16];
      v28 = v12 - 16;
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      v12 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v31 = (unsigned int *)*((_QWORD *)v12 - 1);
          v12 -= 8;
          *--v21 = v31;
        }
        while (v12 != (char *)v14);
      }
      v12 = (char *)*this;
    }
    *this = (swift::Demangle::NodeFactory *)v21;
    this[1] = v13;
    this[2] = v22;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v12 = Node;
    v13 = (swift::Demangle::NodeFactory *)(v12 + 8);
  }
  this[1] = v13;
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolName(swift::Demangle::NodeFactory **this, unsigned int a2)
{
  unsigned int *v3;
  swift::Demangle::Node *v4;
  unsigned int *Node;
  uint64_t v6;
  const char *v7;

  if (!v3)
    return 0;
  v4 = (swift::Demangle::Node *)v3;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(this[5], 232);
  swift::Demangle::Node::addChild(Node, v4, this[5], v6, v7);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleGenericParamIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *i;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v3 = *v2;
  if (v3 == 120)
  {
    v8 = 0;
    v11 = 0;
    *((_QWORD *)this + 3) = v2 + 1;
    *((_QWORD *)this + 4) = v1 - 1;
  }
  v4 = v2 + 1;
  if (v3 == 100)
  {
    *((_QWORD *)this + 3) = v4;
    *((_QWORD *)this + 4) = v1 - 1;
    if (v1 != 1)
    {
      v5 = v2[1];
      i = v2 + 2;
      v7 = v1 - 2;
      *((_QWORD *)this + 3) = v2 + 2;
      *((_QWORD *)this + 4) = v1 - 2;
      if (v5 == 95)
      {
        v8 = 1;
        if (v1 == 2)
          return 0;
      }
      else
      {
        if ((v5 - 58) < 0xFFFFFFF6 || v1 == 2)
          return 0;
        v19 = v5 - 48;
        v20 = v2 + 3;
        v7 = v1 - 3;
        for (i = v20; ; ++i)
        {
          v21 = *(i - 1);
          if ((v21 - 58) < 0xFFFFFFF6)
            break;
          v19 = v21 + 10 * v19 - 48;
          *((_QWORD *)this + 3) = v20;
          *((_QWORD *)this + 4) = v7;
          ++v20;
          if (--v7 == -1)
            return 0;
        }
        if (v21 != 95)
          return 0;
        *((_QWORD *)this + 3) = v20;
        *((_QWORD *)this + 4) = v7;
        v8 = (v19 + 2);
        if (!v7)
          return 0;
      }
      v9 = i + 1;
      v10 = *i;
      *((_QWORD *)this + 3) = i + 1;
      *((_QWORD *)this + 4) = v7 - 1;
      if (v10 == 95)
      {
        v11 = 0;
      }
      if ((v10 - 58) >= 0xFFFFFFF6 && v7 != 1)
      {
        v23 = v10 - 48;
        v24 = i + 2;
        v25 = v7 - 2;
        while (1)
        {
          v26 = *v9;
          if ((v26 - 58) < 0xFFFFFFF6)
            break;
          v23 = v26 + 10 * v23 - 48;
          ++v9;
          *((_QWORD *)this + 3) = v24;
          *((_QWORD *)this + 4) = v25;
          ++v24;
          if (--v25 == -1)
            return 0;
        }
        if (v26 == 95)
        {
          *((_QWORD *)this + 3) = v24;
          *((_QWORD *)this + 4) = v25;
          v11 = v23 + 1;
        }
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = v4;
    *((_QWORD *)this + 4) = v1 - 1;
    if (v3 == 95)
    {
      v8 = 0;
      v11 = 1;
    }
    if ((v3 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      v14 = v3 - 48;
      v15 = v2 + 2;
      v16 = v1 - 2;
      while (1)
      {
        v17 = *v4;
        if ((v17 - 58) < 0xFFFFFFF6)
          break;
        v14 = v17 + 10 * v14 - 48;
        ++v4;
        *((_QWORD *)this + 3) = v15;
        *((_QWORD *)this + 4) = v16;
        ++v15;
        if (--v16 == -1)
          return 0;
      }
      if (v17 == 95)
      {
        v8 = 0;
        *((_QWORD *)this + 3) = v15;
        *((_QWORD *)this + 4) = v16;
        v11 = v14 + 2;
      }
    }
  }
  return 0;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolNameImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  swift::Demangle::Node *NodeWithAllocatedText;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  if (a2 > 0x400)
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (!v5)
  v6 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v7 = *v6;
  if (v7 != 115)
  {
    if (v7 == 83)
    {
      *((_QWORD *)this + 3) = v6 + 1;
      *((_QWORD *)this + 4) = v5 - 1;
      NodeWithAllocatedText = (swift::Demangle::Node *)v8;
      if (!v8)
        return (unsigned int *)NodeWithAllocatedText;
      v9 = *((unsigned __int16 *)v8 + 8);
      if (v9 == 180)
        return (unsigned int *)NodeWithAllocatedText;
      if (v9 != 153)
        return 0;
    }
  }
  *((_QWORD *)this + 3) = v6 + 1;
  *((_QWORD *)this + 4) = v5 - 1;
  v10 = (_QWORD *)*((_QWORD *)this + 5);
  v11 = v10[1];
  v12 = (char *)(v11 + 5);
  if (v11)
    v13 = (unint64_t)v12 > v10[2];
  else
    v13 = 1;
  if (v13)
  {
    v14 = 2 * v10[4];
    if (v14 <= 6)
      v14 = 6;
    v10[4] = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v11 = (uint64_t)(v16 + 1);
    *v16 = v10[3];
    v12 = (char *)v16 + 13;
    v10[2] = (char *)v16 + v15;
    v10[3] = v16;
  }
  v10[1] = v12;
  *(_BYTE *)(v11 + 4) = 116;
  *(_DWORD *)v11 = 1718187859;
  NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v10, 153, v11, 5);
}

unsigned int *`anonymous namespace'::OldDemangler::demangleArchetypeType(unsigned int)::{lambda(swift::Demangle::Node *)#1}::operator()(_QWORD **a1, swift::Demangle::Node *a2)
{
  uint64_t v3;
  unint64_t v4;
  swift::Demangle::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unsigned int **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  unsigned int *v31;

  v3 = (uint64_t)*a1;
  if (!v4)
    return 0;
  v5 = (swift::Demangle::Node *)v4;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(v3 + 40), 5);
  swift::Demangle::Node::addChild(Node, a2, *(swift::Demangle::NodeFactory **)(v3 + 40), v7, v8);
  swift::Demangle::Node::addChild(Node, v5, *(swift::Demangle::NodeFactory **)(v3 + 40), v9, v10);
  v12 = *(char **)(v3 + 8);
  v11 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v12 >= v11)
  {
    v14 = *(char **)v3;
    v15 = (uint64_t)&v12[-*(_QWORD *)v3];
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      abort();
    v18 = v11 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (unsigned int **)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = Node;
    v13 = v21 + 1;
    if (v12 != v14)
    {
      v23 = v12 - v14 - 8;
      if (v23 < 0x58)
        goto LABEL_31;
      if ((unint64_t)(v12 - &v20[v15]) < 0x20)
        goto LABEL_31;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = &v12[-v25];
      v21 = (unsigned int **)((char *)v21 - v25);
      v27 = &v20[8 * v16 - 16];
      v28 = v12 - 16;
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      v12 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v31 = (unsigned int *)*((_QWORD *)v12 - 1);
          v12 -= 8;
          *--v21 = v31;
        }
        while (v12 != v14);
      }
      v12 = *(char **)v3;
    }
    *(_QWORD *)v3 = v21;
    *(_QWORD *)(v3 + 8) = v13;
    *(_QWORD *)(v3 + 16) = v22;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v12 = Node;
    v13 = v12 + 8;
  }
  *(_QWORD *)(v3 + 8) = v13;
  return Node;
}

swift::Demangle::Node *`anonymous namespace'::OldDemangler::demangleDependentMemberTypeName(_anonymous_namespace_::OldDemangler *this, swift::Demangle::Node *a2, int a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  swift::Demangle::Node *v10;
  unint64_t v11;
  swift::Demangle::Node *v12;
  unsigned int *Node;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  unsigned int **v19;
  _QWORD *v20;
  unsigned int *v21;
  swift::Demangle::Node *v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int **v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int **v37;
  _OWORD *v38;
  unsigned int **v39;
  uint64_t v40;
  __int128 v41;
  unsigned int *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;

  v5 = *((_QWORD *)this + 4);
  if (!v5)
  {
LABEL_7:
    v10 = 0;
LABEL_8:
    if (!v11)
      return 0;
    v12 = (swift::Demangle::Node *)v11;
    Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 35);
    if (!Node)
      return 0;
    v9 = Node;
    swift::Demangle::Node::addChild(Node, v12, *((swift::Demangle::NodeFactory **)this + 5), v14, v15);
    if (v10)
      swift::Demangle::Node::addChild(v9, v10, *((swift::Demangle::NodeFactory **)this + 5), v16, v17);
    v19 = (unsigned int **)*((_QWORD *)this + 1);
    v18 = *((_QWORD *)this + 2);
    if ((unint64_t)v19 >= v18)
    {
      v25 = *(char **)this;
      v26 = (uint64_t)v19 - *(_QWORD *)this;
      v27 = v26 >> 3;
      v28 = (v26 >> 3) + 1;
      if (v28 >> 61)
        abort();
      v29 = v18 - (_QWORD)v25;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v31 = operator new(8 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = (unsigned int **)&v31[8 * v27];
      v33 = &v31[8 * v30];
      *v32 = v9;
      v20 = v32 + 1;
      if (v19 != (unsigned int **)v25)
      {
        v34 = (char *)v19 - v25 - 8;
        if (v34 < 0x58)
          goto LABEL_45;
        if ((unint64_t)((char *)v19 - v31 - v26) < 0x20)
          goto LABEL_45;
        v35 = (v34 >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v37 = &v19[v36 / 0xFFFFFFFFFFFFFFF8];
        v32 = (unsigned int **)((char *)v32 - v36);
        v38 = &v31[8 * v27 - 16];
        v39 = v19 - 2;
        v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 4;
          v40 -= 4;
        }
        while (v40);
        v19 = v37;
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            v42 = *--v19;
            *--v32 = v42;
          }
          while (v19 != (unsigned int **)v25);
        }
        v19 = *(unsigned int ***)this;
      }
      *(_QWORD *)this = v32;
      *((_QWORD *)this + 1) = v20;
      *((_QWORD *)this + 2) = v33;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v19 = v9;
      v20 = v19 + 1;
    }
    *((_QWORD *)this + 1) = v20;
    goto LABEL_39;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v7 = *v6;
  if (v7 != 80)
  {
    if (v7 == 83)
    {
      *((_QWORD *)this + 3) = v6 + 1;
      *((_QWORD *)this + 4) = v5 - 1;
      if (!v8)
        return 0;
      v9 = v8;
      if (*((_WORD *)v8 + 8) != 35)
        return 0;
LABEL_39:
      v10 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 45);
      swift::Demangle::Node::addChild((unsigned int *)v10, a2, *((swift::Demangle::NodeFactory **)this + 5), v43, v44);
      swift::Demangle::Node::addChild((unsigned int *)v10, (swift::Demangle::Node *)v9, *((swift::Demangle::NodeFactory **)this + 5), v45, v46);
      return v10;
    }
    goto LABEL_7;
  }
  *((_QWORD *)this + 3) = v6 + 1;
  *((_QWORD *)this + 4) = v5 - 1;
  if (v21)
  {
    v22 = (swift::Demangle::Node *)v21;
    v10 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
    swift::Demangle::Node::addChild((unsigned int *)v10, v22, *((swift::Demangle::NodeFactory **)this + 5), v23, v24);
    if (!v10)
      return v10;
    goto LABEL_8;
  }
  return 0;
}

unsigned int *`anonymous namespace'::OldDemangler::createSwiftType(uint64_t a1, __int16 a2, const void *a3, size_t a4)
{
  unsigned int *Node;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  swift::Demangle::Node *NodeWithAllocatedText;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  swift::Demangle::Node *v26;
  uint64_t v27;
  const char *v28;

  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), a2);
  v8 = *(_QWORD **)(a1 + 40);
  v9 = v8[1];
  v10 = (char *)(v9 + 5);
  if (v9)
    v11 = (unint64_t)v10 > v8[2];
  else
    v11 = 1;
  if (v11)
  {
    v12 = 2 * v8[4];
    if (v12 <= 6)
      v12 = 6;
    v8[4] = v12;
    v13 = v12 + 8;
    v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    v9 = (uint64_t)(v14 + 1);
    *v14 = v8[3];
    v10 = (char *)v14 + 13;
    v8[2] = (char *)v14 + v13;
    v8[3] = v14;
  }
  v8[1] = v10;
  *(_BYTE *)(v9 + 4) = 116;
  *(_DWORD *)v9 = 1718187859;
  NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v8, 153, v9, 5);
  swift::Demangle::Node::addChild(Node, NodeWithAllocatedText, *(swift::Demangle::NodeFactory **)(a1 + 40), v16, v17);
  v18 = *(_QWORD **)(a1 + 40);
  if (a4)
  {
    v19 = (char *)v18[1];
    v20 = &v19[a4];
    if (v19)
      v21 = (unint64_t)v20 > v18[2];
    else
      v21 = 1;
    if (v21)
    {
      v22 = 2 * v18[4];
      if (v22 <= a4 + 1)
        v22 = a4 + 1;
      v18[4] = v22;
      v23 = v22 + 8;
      v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      v25 = (char *)v24 + v23;
      *v24 = v18[3];
      v19 = (char *)(v24 + 1);
      v18[2] = v25;
      v18[3] = v24;
      v20 = (char *)v24 + a4 + 8;
    }
    v18[1] = v20;
    memmove(v19, a3, a4);
  }
  else
  {
    v19 = 0;
  }
  v26 = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v18, 101, (uint64_t)v19, a4);
  swift::Demangle::Node::addChild(Node, v26, *(swift::Demangle::NodeFactory **)(a1 + 40), v27, v28);
  return Node;
}

const char *`anonymous namespace'::OldDemangler::demangleImplConvention(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  const char *result;
  _BYTE *v5;
  const char *v6;
  BOOL v7;
  const char *v8;
  const char *v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    return 0;
  result = 0;
  v5 = *(_BYTE **)(a1 + 24);
  switch(*v5)
  {
    case 'D':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 == 2)
        return "@unowned_inner_pointer";
      else
        return 0;
    case 'a':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v6 = "@autoreleased";
      v7 = a2 == 2;
      goto LABEL_10;
    case 'd':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 >= 3)
        return 0;
      return (&off_24C359890)[a2];
    case 'e':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v6 = "@deallocating";
      v7 = a2 == 1;
LABEL_10:
      if (v7)
        return v6;
      else
        return 0;
    case 'g':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v8 = "@guaranteed";
      v9 = "@callee_guaranteed";
      if (a2)
        v9 = 0;
      v10 = a2 == 1;
      goto LABEL_25;
    case 'i':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v8 = "@out";
      v9 = "@in";
      if (a2 != 1)
        v9 = 0;
      v10 = a2 == 2;
LABEL_25:
      if (v10)
        result = v8;
      else
        result = v9;
      break;
    case 'l':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 == 1)
        result = "@inout";
      else
        result = 0;
      break;
    case 'o':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 >= 3)
        return 0;
      result = (&off_24C3598A8)[a2];
      break;
    default:
      return result;
  }
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleImplParameterOrResult(uint64_t a1, int a2, int a3)
{
  __int16 v4;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  const char *v9;
  size_t v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  swift::Demangle::Node *v14;
  unsigned int *Node;
  uint64_t v16;
  const char *v17;
  unsigned int *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  swift::Demangle::Node *NodeWithAllocatedText;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6 || (v7 = *(_BYTE **)(a1 + 24), *v7 != 122))
  {
    if (a2 == 118)
    {
      v8 = 1;
      goto LABEL_9;
    }
    if ((a2 & 0xFFFFFFFD) == 0x78)
    {
      v8 = 2;
      goto LABEL_9;
    }
    return 0;
  }
  *(_QWORD *)(a1 + 24) = v7 + 1;
  *(_QWORD *)(a1 + 32) = v6 - 1;
  if (a2 != 120)
    return 0;
  v8 = 2;
  v4 = 122;
LABEL_9:
  if (!v10)
    return 0;
  v11 = v9;
  v12 = v10;
  if (!v13)
    return 0;
  v14 = (swift::Demangle::Node *)v13;
  Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 232);
  swift::Demangle::Node::addChild(Node, v14, *(swift::Demangle::NodeFactory **)(a1 + 40), v16, v17);
  if (!Node)
    return 0;
  v18 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*(_QWORD **)(a1 + 40), v4);
  v19 = *(_QWORD **)(a1 + 40);
  v20 = (char *)v19[1];
  if (!v20 || (v21 = &v20[v12], (unint64_t)&v20[v12] > v19[2]))
  {
    v22 = 2 * v19[4];
    if (v22 <= v12 + 1)
      v22 = v12 + 1;
    v19[4] = v22;
    v23 = v22 + 8;
    v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    v25 = (char *)v24 + v23;
    *v24 = v19[3];
    v20 = (char *)(v24 + 1);
    v19[2] = v25;
    v19[3] = v24;
    v21 = (char *)v24 + v12 + 8;
  }
  v19[1] = v21;
  memmove(v20, v11, v12);
  NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v19, 106, (uint64_t)v20, v12);
  swift::Demangle::Node::addChild(v18, NodeWithAllocatedText, *(swift::Demangle::NodeFactory **)(a1 + 40), v27, v28);
  swift::Demangle::Node::addChild(v18, (swift::Demangle::Node *)Node, *(swift::Demangle::NodeFactory **)(a1 + 40), v29, v30);
  return v18;
}

unint64_t `anonymous namespace'::OldDemangler::demangleValueWitnessKind(_anonymous_namespace_::OldDemangler *this)
{
  unint64_t v1;
  _BYTE *v2;
  char v3;
  uint64_t v4;
  __int16 v6;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = (_BYTE *)*((_QWORD *)this + 3);
    LOBYTE(v6) = *v2;
    *((_QWORD *)this + 3) = v2 + 1;
    *((_QWORD *)this + 4) = v1 - 1;
    if (v1 == 1)
    {
      v1 = 0;
      v4 = 0;
    }
    else
    {
      v3 = v2[1];
      *((_QWORD *)this + 3) = v2 + 2;
      *((_QWORD *)this + 4) = v1 - 2;
      HIBYTE(v6) = v3;
      switch(v6)
      {
        case 27745:
          v4 = 0;
          v1 = 0x100000000;
          break;
        case 24931:
          v1 = 0x100000000;
          v4 = 1;
          break;
        case 24948:
          v1 = 0x100000000;
          v4 = 2;
          break;
        case 25956:
          v1 = 0x100000000;
          v4 = 3;
          break;
        case 30840:
          v1 = 0x100000000;
          v4 = 4;
          break;
        case 22616:
          v1 = 0x100000000;
          v4 = 5;
          break;
        case 30808:
          v1 = 0x100000000;
          v4 = 6;
          break;
        case 20547:
          v1 = 0x100000000;
          v4 = 7;
          break;
        case 28739:
          v1 = 0x100000000;
          v4 = 8;
          break;
        case 28771:
          v1 = 0x100000000;
          v4 = 9;
          break;
        case 27476:
          v1 = 0x100000000;
          v4 = 10;
          break;
        case 27508:
          v1 = 0x100000000;
          v4 = 11;
          break;
        case 29296:
          v1 = 0x100000000;
          v4 = 12;
          break;
        case 19284:
          v1 = 0x100000000;
          v4 = 13;
          break;
        case 25411:
          v1 = 0x100000000;
          v4 = 14;
          break;
        case 29780:
          v1 = 0x100000000;
          v4 = 15;
          break;
        case 21620:
          v1 = 0x100000000;
          v4 = 16;
          break;
        case 29560:
          v1 = 0x100000000;
          v4 = 17;
          break;
        case 26488:
          v1 = 0x100000000;
          v4 = 18;
          break;
        case 26485:
          v1 = 0x100000000;
          v4 = 19;
          break;
        case 28789:
          v1 = 0x100000000;
          v4 = 20;
          break;
        case 26997:
          v1 = 0x100000000;
          v4 = 21;
          break;
        case 29797:
          v1 = 0x100000000;
          v4 = 22;
          break;
        default:
          v1 = (unint64_t)(v6 == 29811) << 32;
          v4 = 23;
          if (v6 != 29811)
            v4 = 0;
          break;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | v1;
}

uint64_t `anonymous namespace'::OldDemangler::demangleReabstractSignature(_anonymous_namespace_::OldDemangler *this, swift::Demangle::Node *a2, int a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;
  uint64_t v9;
  const char *v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  unsigned int *Node;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  swift::Demangle::Node *v18;
  unsigned int *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;

  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v7 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v7 == 71)
    {
      *((_QWORD *)this + 3) = v7 + 1;
      *((_QWORD *)this + 4) = v6 - 1;
      if (!result)
        return result;
      swift::Demangle::Node::addChild((unsigned int *)a2, (swift::Demangle::Node *)result, *((swift::Demangle::NodeFactory **)this + 5), v9, v10);
    }
  }
  v11 = a3 + 1;
  if (result)
  {
    v12 = (swift::Demangle::Node *)result;
    Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
    swift::Demangle::Node::addChild(Node, v12, *((swift::Demangle::NodeFactory **)this + 5), v14, v15);
    if (!Node)
      return 0;
    swift::Demangle::Node::addChild((unsigned int *)a2, (swift::Demangle::Node *)Node, *((swift::Demangle::NodeFactory **)this + 5), v16, v17);
    if (!result)
      return result;
    v18 = (swift::Demangle::Node *)result;
    v19 = (unsigned int *)swift::Demangle::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
    swift::Demangle::Node::addChild(v19, v18, *((swift::Demangle::NodeFactory **)this + 5), v20, v21);
    if (v19)
    {
      swift::Demangle::Node::addChild((unsigned int *)a2, (swift::Demangle::Node *)v19, *((swift::Demangle::NodeFactory **)this + 5), v22, v23);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t swift::Punycode::decodePunycode(unsigned __int8 *a1, unint64_t a2, std::vector<unsigned int> *this)
{
  std::vector<unsigned int> *v3;
  unint64_t v4;
  std::vector<unsigned int>::pointer begin;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *value;
  char *end;
  unsigned __int8 *v19;
  unint64_t v20;
  std::vector<unsigned int>::pointer v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  std::vector<unsigned int>::pointer v49;
  uint64_t v50;
  int v51;
  signed int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  std::vector<unsigned int>::value_type v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::vector<unsigned int>::const_iterator v62;
  uint64_t result;
  std::vector<unsigned int> *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  std::vector<unsigned int>::value_type __x;

  v3 = this;
  v4 = a2;
  begin = this->__begin_;
  this->__end_ = this->__begin_;
  if (a2 > this->__end_cap_.__value_ - begin)
  {
    if (a2 >> 62)
LABEL_71:
      abort();
    v7 = a2;
    v8 = (unsigned int *)operator new(4 * a2);
    v3->__begin_ = v8;
    v3->__end_ = v8;
    v3->__end_cap_.__value_ = &v8[v7];
    if (begin)
      operator delete(begin);
  }
  __x = 128;
  v9 = v4;
  do
  {
    if (!v9)
      goto LABEL_41;
    v10 = v9 - 1;
    v11 = a1[--v9];
  }
  while (v11 != 95);
  if (v10 >= v4)
    v12 = v4;
  else
    v12 = v10;
  if (v12)
  {
    v13 = (char *)&a1[v12];
    v14 = a1;
    v64 = v3;
    v65 = (char *)&a1[v12];
    while (1)
    {
      if ((char)*v14 < 0)
        return 0;
      v16 = *v14;
      end = (char *)v3->__end_;
      value = v3->__end_cap_.__value_;
      if (end >= (char *)value)
        break;
      *(_DWORD *)end = v16;
      v15 = (unsigned int *)(end + 4);
LABEL_14:
      v3->__end_ = v15;
      if (++v14 == (unsigned __int8 *)v13)
        goto LABEL_38;
    }
    v19 = a1;
    v20 = v4;
    v21 = v3->__begin_;
    v22 = end - (char *)v3->__begin_;
    v23 = v22 >> 2;
    v24 = (v22 >> 2) + 1;
    if (v24 >> 62)
      goto LABEL_71;
    v25 = (char *)value - (char *)v21;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    v66 = v24;
    if (v24)
    {
      if (v24 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v26 = operator new(4 * v24);
    }
    else
    {
      v26 = 0;
    }
    v27 = (unsigned int *)&v26[4 * v23];
    *v27 = v16;
    v15 = v27 + 1;
    if (end == (char *)v21)
    {
      v4 = v20;
      a1 = v19;
    }
    else
    {
      v28 = end - (char *)v21 - 4;
      if (v28 >= 0x2C)
      {
        v29 = end - &v26[v22];
        v4 = v20;
        a1 = v19;
        if (v29 >= 0x20)
        {
          v30 = (v28 >> 2) + 1;
          v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          v32 = &end[-v31];
          v27 = (unsigned int *)((char *)v27 - v31);
          v33 = &v26[4 * v23 - 16];
          v34 = end - 16;
          v35 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 8;
          }
          while (v35);
          end = v32;
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_35;
        }
      }
      else
      {
        v4 = v20;
        a1 = v19;
      }
      do
      {
        v37 = *((_DWORD *)end - 1);
        end -= 4;
        *--v27 = v37;
      }
      while (end != (char *)v21);
    }
LABEL_35:
    v3 = v64;
    v64->__begin_ = v27;
    v64->__end_ = v15;
    v64->__end_cap_.__value_ = (unsigned int *)&v26[4 * v66];
    if (v21)
      operator delete(v21);
    v13 = v65;
    goto LABEL_14;
  }
LABEL_38:
  v38 = v10 + 1;
  if (v4 < v10 + 1)
    v38 = v4;
  a1 += v38;
  v4 -= v38;
LABEL_41:
  if (!v4)
    return 1;
  v39 = 0;
  v40 = 72;
LABEL_43:
  v41 = 0;
  v42 = 1;
  v43 = 36;
  v44 = v39;
  while (1)
  {
    v45 = (char)a1[v41];
    v46 = v45 - 97;
    if ((v45 - 97) > 0x19)
    {
      if ((v45 - 65) > 9)
        return 0;
      v46 = v45 - 39;
    }
    if (v46 < 0 || v46 > (v44 ^ 0x7FFFFFFF) / v42)
      return 0;
    v44 += v46 * v42;
    v47 = v43 - v40;
    if (v43 >= v40 + 26)
      v47 = 26;
    if (v43 <= v40)
      v47 = 1;
    if (v46 < v47)
    {
      v48 = v44 - v39;
      v49 = v3->__begin_;
      v50 = v3->__end_ - v3->__begin_;
      if (v39)
        v51 = 2;
      else
        v51 = 700;
      v52 = v48 / v51 / ((int)v50 + 1) + v48 / v51;
      if (v52 < 456)
      {
        v53 = 0;
      }
      else
      {
        v53 = 0;
        v54 = v52;
        do
        {
          v52 = v54 / 0x23;
          v53 += 36;
          v55 = v54 >> 3;
          v54 /= 0x23u;
        }
        while (v55 > 0x7CA);
      }
      v56 = v50 + 1;
      v57 = v44 / v56;
      v58 = __x;
      if (v57 > (__x ^ 0x7FFFFFFF))
        return 0;
      __x += v57;
      if (v58 + v57 < 0x80)
        return 0;
      v67 = v4 - 1;
      v59 = (uint64_t)&a1[v41 + 1];
      v40 = 36 * v52 / (v52 + 38) + v53;
      v60 = ~v41 + v4;
      v61 = v44 % v56;
      v62.__i_ = &v49[(int)v61];
      std::vector<unsigned int>::insert(v3, v62, &__x);
      v39 = v61 + 1;
      v4 = v60;
      a1 = (unsigned __int8 *)v59;
      result = 1;
      if (v67 != v41)
        goto LABEL_43;
      return result;
    }
    if (v42 <= 0x7FFFFFFF / (36 - v47))
    {
      v42 *= 36 - v47;
      v43 += 36;
      if (v4 != ++v41)
        continue;
    }
    return 0;
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  unsigned int *v3;
  std::vector<unsigned int>::pointer end;
  unsigned int *begin;
  int64_t v7;
  uint64_t v8;
  std::vector<unsigned int>::pointer v9;
  unsigned int *value;
  int64_t v11;
  uint64_t v12;
  std::vector<unsigned int>::pointer v13;
  unint64_t v14;
  std::vector<unsigned int>::pointer v15;
  unint64_t v16;
  std::vector<unsigned int>::pointer v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  std::vector<unsigned int>::pointer v26;
  unsigned int *v27;
  char *v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  const unsigned int *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  std::vector<unsigned int>::pointer v38;
  int64_t v39;
  std::vector<unsigned int>::pointer v40;
  size_t v41;
  unsigned int *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  const unsigned int *v50;
  uint64_t v51;
  __int128 v52;
  unsigned int v53;

  v3 = (unsigned int *)__x;
  begin = this->__begin_;
  end = this->__end_;
  v7 = (char *)__position.__i_ - (char *)this->__begin_;
  v8 = v7 >> 2;
  v9 = (std::vector<unsigned int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      *v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<unsigned int>::iterator)v9;
    }
    v11 = (char *)end - (char *)(v9 + 1);
    v12 = v11 >> 2;
    v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      v17 = this->__end_;
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = (unsigned int *)((char *)begin + v14 + 4);
      if (end > v15)
        v15 = this->__end_;
      v16 = (unint64_t)v15 + ~(unint64_t)begin - v14;
      if (v16 >= 0x2C)
      {
        v17 = this->__end_;
        if ((unint64_t)((char *)(v9 + 1) - ((char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL))) >= 0x20)
        {
          v47 = (v16 >> 2) + 1;
          v48 = v47 & 0x7FFFFFFFFFFFFFF8;
          v13 = (std::vector<unsigned int>::pointer)((char *)v13 + v48 * 4);
          v17 = &end[v48];
          v49 = end + 4;
          v50 = &begin[v12 + 4 + v8];
          v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 += 2;
            v50 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = this->__end_;
      }
      do
      {
        v53 = *v13++;
        *v17++ = v53;
      }
      while (v13 < end);
    }
LABEL_49:
    this->__end_ = v17;
    if (end != v9 + 1)
      memmove(&end[-v12], v9, v11);
    if (v9 <= v3)
      v3 += this->__end_ > v3;
    *v9 = *v3;
    return (std::vector<unsigned int>::iterator)v9;
  }
  v18 = end - begin + 1;
  if (v18 >> 62)
    abort();
  v20 = (char *)value - (char *)begin;
  if (v20 >> 1 > v18)
    v18 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 62)
      goto LABEL_56;
    v22 = (char *)operator new(4 * v21);
  }
  else
  {
    v22 = 0;
  }
  v23 = (unsigned int *)&v22[4 * v8];
  v24 = (unsigned int *)&v22[4 * v21];
  if (v8 != v21)
  {
LABEL_24:
    v26 = begin;
    goto LABEL_25;
  }
  if (v7 >= 1)
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= v25 >> 1;
    goto LABEL_24;
  }
  if (begin == __position.__i_)
    v43 = 1;
  else
    v43 = v7 >> 1;
  if (v43 >> 62)
LABEL_56:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v44 = 4 * v43;
  v45 = (char *)operator new(4 * v43);
  v23 = (unsigned int *)&v45[v43 & 0xFFFFFFFFFFFFFFFCLL];
  v24 = (unsigned int *)&v45[v44];
  if (!v22)
    goto LABEL_24;
  v46 = (unsigned int *)&v45[v44];
  operator delete(v22);
  v24 = v46;
  v26 = this->__begin_;
LABEL_25:
  *v23 = *v3;
  v27 = v23;
  if (v26 != v9)
  {
    v28 = (char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = v28 - (char *)v26 - 4;
    v30 = v9;
    v27 = v23;
    if (v29 < 0x2C)
      goto LABEL_60;
    v30 = v9;
    v27 = v23;
    if ((unint64_t)(v28 - (char *)v23) < 0x20)
      goto LABEL_60;
    v31 = (v29 >> 2) + 1;
    v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v9[v32 / 0xFFFFFFFFFFFFFFFCLL];
    v27 = &v23[v32 / 0xFFFFFFFFFFFFFFFCLL];
    v33 = v23 - 4;
    v34 = &begin[v8 - 4];
    v35 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 8;
      v34 -= 8;
      v35 -= 8;
    }
    while (v35);
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_60:
      do
      {
        v37 = *--v30;
        *--v27 = v37;
      }
      while (v30 != v26);
    }
  }
  v38 = this->__end_;
  v39 = (char *)v38 - (char *)v9;
  if (v38 != v9)
  {
    v40 = v9;
    v41 = (char *)v38 - (char *)v9;
    v42 = v24;
    memmove(v23 + 1, v40, v41);
    v24 = v42;
    v26 = this->__begin_;
  }
  this->__begin_ = v27;
  this->__end_ = (unsigned int *)((char *)v23 + v39 + 4);
  this->__end_cap_.__value_ = v24;
  if (v26)
    operator delete(v26);
  return (std::vector<unsigned int>::iterator)v23;
}

BOOL swift::Punycode::encodePunycode(unsigned int **a1, std::string *this)
{
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  _BOOL8 result;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int *i;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  char v30;
  int v31;
  signed int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int **v35;
  unint64_t v36;
  unsigned int *v37;
  unint64_t v38;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4;
      if (*v4 <= 0x7F)
      {
        ++v6;
        std::string::push_back(this, v7);
      }
      else if (v7 >> 7 >= 0x1B1 && v7 - 57344 >= 0x102000)
      {
        result = 0;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          *this->__r_.__value_.__l.__data_ = 0;
          this->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          this->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
        }
        return result;
      }
      ++v4;
    }
    while (v4 != v5);
    if (v6)
      std::string::push_back(this, 95);
  }
  v10 = *a1;
  v9 = a1[1];
  if (v6 >= v9 - *a1)
    return 1;
  v35 = a1;
  v11 = 0;
  v12 = 72;
  v13 = 128;
  v14 = v6;
  v36 = v6;
  do
  {
    v15 = 1114111;
    for (i = v10; i != v9; ++i)
    {
      v18 = *i;
      v17 = v18;
      if (v18 < v15 && v17 >= v13)
        v15 = v17;
    }
    v20 = v15 - v13;
    v21 = (v11 ^ 0x7FFFFFFFu) / (v14 + 1);
    result = v21 >= v20;
    if (v21 < v20)
      break;
    v22 = v11 + v20 * (v14 + 1);
    if (v10 != v9)
    {
      v37 = v9;
      while (1)
      {
        if (*v10 < v15)
        {
          if (v22 == 0x7FFFFFFF)
            return 0;
          ++v22;
        }
        if (*v10 == v15)
        {
          v38 = v14;
          v24 = 36 - v12;
          if (v12 <= 10)
            v24 = 26;
          if (v12 >= 36)
            v24 = 1;
          v25 = v22;
          if (v22 >= v24)
          {
            v26 = 72;
            v25 = v22;
            do
            {
              v27 = v25 - v24;
              v25 = (v25 - v24) / (36 - v24);
              v28 = v27 - v25 * (36 - v24) + v24;
              if (v28 >= 26)
                v29 = 39;
              else
                v29 = 97;
              std::string::push_back(this, v29 + v28);
              if (v26 - 26 >= v12)
                v24 = 26;
              else
                v24 = v26 - v12;
              if (v26 <= v12)
                v24 = 1;
              v26 += 36;
            }
            while (v25 >= v24);
          }
          if (v25 >= 26)
            v30 = 39;
          else
            v30 = 97;
          std::string::push_back(this, v30 + v25);
          if (v38 == v36)
            v31 = 700;
          else
            v31 = 2;
          v32 = v22 / v31 / ((int)v38 + 1) + v22 / v31;
          if (v32 < 456)
          {
            v23 = 0;
          }
          else
          {
            v23 = 0;
            v33 = v32;
            do
            {
              v32 = v33 / 0x23;
              v23 += 36;
              v34 = v33 >> 3;
              v33 /= 0x23u;
            }
            while (v34 > 0x7CA);
          }
          v22 = 0;
          v12 = 36 * v32 / (v32 + 38) + v23;
          v14 = v38 + 1;
          v9 = v37;
        }
        if (++v10 == v9)
        {
          v10 = *v35;
          v9 = v35[1];
          goto LABEL_19;
        }
      }
    }
    v9 = v10;
LABEL_19:
    v11 = v22 + 1;
    v13 = v15 + 1;
    result = 1;
  }
  while (v14 < v9 - v10);
  return result;
}

uint64_t swift::Punycode::decodePunycodeUTF8(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::string::value_type v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  std::string *v10;
  unsigned int v11;
  unsigned int v12;
  std::string *v13;
  unsigned int v14;
  uint64_t v15;
  std::vector<unsigned int> v17;

  memset(&v17, 0, sizeof(v17));
  if (swift::Punycode::decodePunycode(a1, a2, &v17))
  {
    begin = v17.__begin_;
    end = v17.__end_;
    if (v17.__begin_ == v17.__end_)
    {
      v15 = 1;
      if (!v17.__begin_)
        return v15;
      goto LABEL_26;
    }
    while (1)
    {
      v7 = *begin;
      v8 = *begin >> 7;
      if (v8 >= 0x1B1 && v7 - 57344 >= 0x102000)
        break;
      if (v8 == 432)
        v7 -= 55296;
      if (v7 < 0x80)
      {
        v6 = v7;
      }
      else
      {
        v6 = v7 & 0x3F | 0x80;
        if (v7 >= 0x800)
        {
          v11 = (v7 >> 6) & 0x3F | 0xFFFFFF80;
          if (v7 >= 0x10000)
          {
            v14 = (v7 >> 12) & 0x3F | 0xFFFFFF80;
            std::string::push_back((std::string *)a3, (v7 >> 18) | 0xF0);
            v13 = (std::string *)a3;
            LOBYTE(v12) = v14;
          }
          else
          {
            v12 = (v7 >> 12) | 0xFFFFFFE0;
            v13 = (std::string *)a3;
          }
          std::string::push_back(v13, v12);
          v10 = (std::string *)a3;
          LOBYTE(v9) = v11;
        }
        else
        {
          v9 = (v7 >> 6) | 0xFFFFFFC0;
          v10 = (std::string *)a3;
        }
        std::string::push_back(v10, v9);
      }
      std::string::push_back((std::string *)a3, v6);
      if (++begin == end)
      {
        v15 = 1;
        goto LABEL_25;
      }
    }
    v15 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      **(_BYTE **)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 23) = 0;
    }
  }
  else
  {
    v15 = 0;
  }
LABEL_25:
  begin = v17.__begin_;
  if (v17.__begin_)
  {
LABEL_26:
    v17.__end_ = begin;
    operator delete(begin);
  }
  return v15;
}

BOOL swift::Punycode::encodePunycodeUTF8(char *a1, unint64_t a2, std::string *a3, char a4)
{
  unsigned int *v7;
  char *v8;
  unsigned __int8 *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;
  _BOOL8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  unsigned int *v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  char v44;
  void *__p;
  unsigned int *v46;
  char *v47;

  __p = 0;
  v46 = 0;
  v47 = 0;
  if (!a2)
  {
LABEL_68:
    v19 = swift::Punycode::encodePunycode((unsigned int **)&__p, a3);
LABEL_69:
    v41 = __p;
    if (__p)
      goto LABEL_70;
    return v19;
  }
  if (a2 >> 62)
LABEL_74:
    abort();
  v7 = (unsigned int *)operator new(4 * a2);
  v8 = (char *)&v7[a2];
  __p = v7;
  v46 = v7;
  v9 = (unsigned __int8 *)&a1[a2];
  v44 = a4 ^ 1;
  v47 = v8;
  v10 = v7;
  while (1)
  {
    v12 = (unsigned __int8 *)(a1 + 1);
    v13 = *a1;
    if ((*a1 & 0x80000000) == 0)
    {
      if ((v13 & 0xFFFFFFDF) - 65 < 0x1A)
        goto LABEL_18;
      v15 = v13 == 95 || v13 - 48 < 0xA || v13 == 36;
      v16 = v44;
      if (v15)
        v16 = 1;
      if ((v16 & 1) != 0)
      {
LABEL_18:
        ++a1;
        goto LABEL_40;
      }
      v13 |= 0xD800u;
      ++a1;
      goto LABEL_38;
    }
    if (v13 < 0xC0)
      goto LABEL_72;
    if (v13 <= 0xDF)
      break;
    v18 = v9 - v12;
    if (v13 > 0xEF)
    {
      v19 = 0;
      if (v13 > 0xF7 || v18 < 3)
        goto LABEL_69;
      v23 = a1[1];
      if ((v23 & 0xC0) != 0x80)
        goto LABEL_69;
      v24 = a1[2];
      if ((v24 & 0xC0) != 0x80)
        goto LABEL_69;
      v25 = a1[3];
      if ((v25 & 0xC0) != 0x80)
        goto LABEL_69;
      a1 += 4;
      v13 = ((v13 & 7) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6) | v25 & 0x3F;
    }
    else
    {
      if (v18 < 2)
        goto LABEL_72;
      v19 = 0;
      v20 = a1[1];
      if ((v20 & 0xC0) != 0x80)
        goto LABEL_69;
      v21 = a1[2];
      if ((v21 & 0xC0) != 0x80)
        goto LABEL_69;
      a1 += 3;
      v13 = ((v13 & 0xF) << 12) | ((v20 & 0x3F) << 6) | v21 & 0x3F;
    }
LABEL_38:
    if (v13 >> 7 >= 0x1B1 && (v13 - 57344) >> 13 > 0x80)
      goto LABEL_72;
LABEL_40:
    if (v7 >= (unsigned int *)v8)
    {
      v26 = v7 - v10;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        goto LABEL_74;
      if ((v8 - (char *)v10) >> 1 > v27)
        v27 = (v8 - (char *)v10) >> 1;
      if ((unint64_t)(v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
      {
        if (v28 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v29 = operator new(4 * v28);
      }
      else
      {
        v29 = 0;
      }
      v30 = (unsigned int *)&v29[4 * v26];
      *v30 = v13;
      v11 = v30 + 1;
      if (v7 == v10)
        goto LABEL_55;
      v31 = (char *)v7 - (char *)v10 - 4;
      if (v31 >= 0xBC)
      {
        v34 = ((char *)(v7 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v7 - (char *)v10 - 4 - v34] > &v29[(char *)v7 - (char *)v10 - 4])
        {
          v32 = v7;
        }
        else if ((unsigned int *)((char *)v7 - v34 - 4) > v7 - 1)
        {
          v32 = v7;
        }
        else if ((unint64_t)((char *)v10 - v29) >= 0x20)
        {
          v35 = (v31 >> 2) + 1;
          v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          v32 = &v7[v36 / 0xFFFFFFFFFFFFFFFCLL];
          v30 = (unsigned int *)((char *)v30 - v36);
          v37 = &v29[4 * v26 - 16];
          v38 = v7 - 4;
          v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *v37 = v40;
            v37 -= 2;
            v38 -= 8;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_55;
        }
        else
        {
          v32 = v7;
        }
      }
      else
      {
        v32 = v7;
      }
      do
      {
        v33 = *--v32;
        *--v30 = v33;
      }
      while (v32 != v10);
LABEL_55:
      v8 = &v29[4 * v28];
      __p = v30;
      v47 = v8;
      if (v10)
        operator delete(v10);
      v10 = v30;
      goto LABEL_5;
    }
    *v7 = v13;
    v11 = v7 + 1;
LABEL_5:
    v46 = v11;
    v7 = v11;
    if (a1 >= (char *)v9)
      goto LABEL_68;
  }
  if (v12 != v9)
  {
    v17 = *v12;
    if ((v17 & 0xC0) == 0x80)
    {
      a1 += 2;
      v13 = v17 & 0x3F | ((v13 & 0x1F) << 6);
      goto LABEL_40;
    }
  }
LABEL_72:
  v19 = 0;
  v41 = __p;
  if (!__p)
    return v19;
LABEL_70:
  operator delete(v41);
  return v19;
}

BOOL swift::Demangle::SubstitutionEntry::identifierEquals(swift::Demangle::SubstitutionEntry *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3)
{
  size_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v8;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  char v15;
  unsigned int v16;
  char v17;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)a2 + 1);
  v5 = v3;
  if (v4 != v3)
    return 0;
  if (*((unsigned __int16 *)this + 8) == *((unsigned __int16 *)a2 + 8))
  {
    if (v3 == v4)
    {
      if (v3)
        return memcmp(*(const void **)this, *(const void **)a2, v3) == 0;
      return 1;
    }
    return 0;
  }
  if (!*((_QWORD *)this + 1))
    return 1;
  v10 = 0;
  v8 = 0;
  do
  {
    v11 = *((unsigned __int16 *)this + 8) - 124;
    v12 = v11 > 0x33;
    v13 = (1 << v11) & 0xA000000000001;
    if (v12 || v13 == 0)
      v15 = *(_BYTE *)(*(_QWORD *)this + v10);
    else
      v15 = swift::Mangle::translateOperatorChar((swift::Mangle *)*(char *)(*(_QWORD *)this + v10));
    v16 = *((unsigned __int16 *)a2 + 8) - 124;
    if (v16 <= 0x33 && ((1 << v16) & 0xA000000000001) != 0)
      v17 = swift::Mangle::translateOperatorChar((swift::Mangle *)*(char *)(*(_QWORD *)a2 + v10));
    else
      v17 = *(_BYTE *)(*(_QWORD *)a2 + v10);
    if (v15 != v17)
      break;
    v8 = ++v10 >= v5;
  }
  while (v5 != v10);
  return v8;
}

uint64_t swift::Demangle::SubstitutionEntry::deepEquals(swift::Demangle::SubstitutionEntry *this, swift::Demangle::Node *a2, swift::Demangle::Node *a3)
{
  char *v3;
  swift::Demangle::Node *v4;
  int v6;
  unsigned int v8;
  swift::Demangle::Node *v9;
  size_t v10;
  uint64_t result;
  char *v12;
  swift::Demangle::Node *v13;
  BOOL v14;

  v3 = (char *)a2 + 16;
  if (*((unsigned __int16 *)a2 + 8) != *((unsigned __int16 *)a3 + 8))
    return 0;
  v4 = a3;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != *((unsigned __int8 *)a3 + 18))
    return 0;
  v8 = v6 - 1;
  v9 = a2;
  switch(*((_BYTE *)a2 + 18))
  {
    case 1:
    case 2:
      if (v8 >= 2)
        goto LABEL_13;
      goto LABEL_5;
    case 3:
      v10 = *((_QWORD *)a2 + 1);
      if (v10 != *((_QWORD *)v4 + 1) || v10 && memcmp(*(const void **)a2, *(const void **)v4, v10))
        return 0;
      goto LABEL_12;
    case 4:
      if (*(_QWORD *)a2 != *(_QWORD *)a3)
        return 0;
      goto LABEL_12;
    case 5:
      if (*((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2))
        return 0;
      v9 = *(swift::Demangle::Node **)a2;
      goto LABEL_23;
    default:
LABEL_12:
      v9 = 0;
      if (v8 < 2)
      {
LABEL_5:
        if (v6 != 5)
        {
LABEL_15:
          if (v6 != 2)
          {
            v3 = v6 == 1 ? (char *)a2 + 8 : 0;
            if (v9 == (swift::Demangle::Node *)v3)
              return 1;
          }
          goto LABEL_25;
        }
      }
      else
      {
LABEL_13:
        if (v6 != 5)
        {
          v4 = 0;
          goto LABEL_15;
        }
LABEL_23:
        v4 = *(swift::Demangle::Node **)v4;
      }
      v3 = (char *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == (swift::Demangle::Node *)v3)
        return 1;
LABEL_25:
      v12 = (char *)v9 + 8;
      do
      {
        v13 = *(swift::Demangle::Node **)v4;
        v4 = (swift::Demangle::Node *)((char *)v4 + 8);
        result = swift::Demangle::SubstitutionEntry::deepEquals(this, *((swift::Demangle::Node **)v12 - 1), v13);
        if ((_DWORD)result)
          v14 = v12 == v3;
        else
          v14 = 1;
        v12 += 8;
      }
      while (!v14);
      break;
  }
  return result;
}

uint64_t swift::Demangle::RemanglerBase::hashForNode(swift::Demangle::RemanglerBase *this, swift::Demangle::Node *a2, _BOOL4 a3)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  swift::Demangle::Node **v14;
  swift::Demangle::Node **v15;
  uint64_t v16;
  swift::Demangle::Node *v17;
  uint64_t v19[3];

  v3 = a3;
  v5 = *((unsigned __int16 *)a2 + 8);
  if (a3)
  {
    if ((v5 - 124) <= 0x33 && ((1 << (v5 - 124)) & 0xA000000000001) != 0)
    {
      v7 = *((_QWORD *)a2 + 1);
      if (!v7)
        return 101;
      v8 = *(char **)a2;
      v5 = 101;
      do
      {
        v9 = *v8++;
        v5 = 33 * v5 + swift::Mangle::translateOperatorChar((swift::Mangle *)v9);
        --v7;
      }
      while (v7);
      return v5;
    }
    v5 = 101;
  }
  v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    v11 = *((_QWORD *)a2 + 1);
    if (!v11)
      goto LABEL_23;
    v12 = *(unsigned __int8 **)a2;
    do
    {
      v13 = *v12++;
      v5 = 33 * v5 + v13;
      --v11;
    }
    while (v11);
  }
  else if (v10 == 4)
  {
    v5 = *(_QWORD *)a2 + 33 * v5;
    goto LABEL_23;
  }
  if ((v10 - 1) < 2)
  {
    v14 = (swift::Demangle::Node **)a2;
    if (v10 != 1)
      goto LABEL_24;
LABEL_20:
    v15 = (swift::Demangle::Node **)((char *)a2 + 8);
    goto LABEL_31;
  }
  if (v10 == 5)
  {
    v16 = *(_QWORD *)a2;
    v14 = *(swift::Demangle::Node ***)a2;
LABEL_27:
    v15 = (swift::Demangle::Node **)(v16 + 8 * *((unsigned int *)a2 + 2));
    goto LABEL_31;
  }
LABEL_23:
  v14 = 0;
  if (v10 == 1)
    goto LABEL_20;
LABEL_24:
  if (v10 == 2)
  {
    v15 = (swift::Demangle::Node **)((char *)a2 + 16);
  }
  else
  {
    if (v10 == 5)
    {
      v16 = *(_QWORD *)a2;
      goto LABEL_27;
    }
    v15 = 0;
  }
LABEL_31:
  while (v14 != v15)
  {
    v17 = *v14++;
    swift::Demangle::RemanglerBase::entryForNode(v19, this, v17, v3);
    v5 = v19[1] + 33 * v5;
  }
  return v5;
}

__n128 swift::Demangle::RemanglerBase::entryForNode@<Q0>(uint64_t *__return_ptr a1@<X8>, swift::Demangle::RemanglerBase *this@<X0>, swift::Demangle::Node *a3@<X1>, int a4@<W2>)
{
  char v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  __n128 result;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = a4;
  v7 = 4;
  if (!a4)
    v7 = 0;
  v8 = v7 + ((unint64_t)(2043 * (_QWORD)a3) >> 12);
  v9 = (char *)this + 24 * (v8 & 0x1FF);
  result = *(__n128 *)(v9 + 8);
  *(__n128 *)a1 = result;
  a1[2] = *((_QWORD *)v9 + 3);
  if (!*a1)
    goto LABEL_30;
  if ((swift::Demangle::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
  {
    v9 = (char *)this + 24 * (((unsigned __int16)v8 + 1) & 0x1FF);
    result = *(__n128 *)(v9 + 8);
    *(__n128 *)a1 = result;
    a1[2] = *((_QWORD *)v9 + 3);
    if (*a1)
    {
      if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
        return result;
      v9 = (char *)this + 24 * (((unsigned __int16)v8 + 2) & 0x1FF);
      result = *(__n128 *)(v9 + 8);
      *(__n128 *)a1 = result;
      a1[2] = *((_QWORD *)v9 + 3);
      if (*a1)
      {
        if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
          return result;
        v9 = (char *)this + 24 * (((unsigned __int16)v8 + 3) & 0x1FF);
        result = *(__n128 *)(v9 + 8);
        *(__n128 *)a1 = result;
        a1[2] = *((_QWORD *)v9 + 3);
        if (*a1)
        {
          if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
            return result;
          v9 = (char *)this + 24 * (((unsigned __int16)v8 + 4) & 0x1FF);
          result = *(__n128 *)(v9 + 8);
          *(__n128 *)a1 = result;
          a1[2] = *((_QWORD *)v9 + 3);
          if (*a1)
          {
            if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
              return result;
            v9 = (char *)this + 24 * (((unsigned __int16)v8 + 5) & 0x1FF);
            result = *(__n128 *)(v9 + 8);
            *(__n128 *)a1 = result;
            a1[2] = *((_QWORD *)v9 + 3);
            if (*a1)
            {
              if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
                return result;
              v9 = (char *)this + 24 * (((unsigned __int16)v8 + 6) & 0x1FF);
              result = *(__n128 *)(v9 + 8);
              *(__n128 *)a1 = result;
              a1[2] = *((_QWORD *)v9 + 3);
              if (*a1)
              {
                if ((swift::Demangle::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
                  return result;
                v12 = (char *)this + 24 * (((unsigned __int16)v8 + 7) & 0x1FF);
                result = *(__n128 *)(v12 + 8);
                *(__n128 *)a1 = result;
                a1[2] = *((_QWORD *)v12 + 3);
                if (*a1)
                {
                  if ((swift::Demangle::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
                  {
                    v13 = swift::Demangle::RemanglerBase::hashForNode(this, a3, a4);
                    *((_BYTE *)a1 + 16) = v4;
                    *a1 = (uint64_t)a3;
                    a1[1] = v13;
                  }
                  return result;
                }
                v14 = v12 + 8;
LABEL_31:
                v15 = swift::Demangle::RemanglerBase::hashForNode(this, a3, a4);
                *((_BYTE *)a1 + 16) = v4;
                *a1 = (uint64_t)a3;
                a1[1] = v15;
                v14[16] = v4;
                result = *(__n128 *)a1;
                *(_OWORD *)v14 = *(_OWORD *)a1;
                return result;
              }
            }
          }
        }
      }
    }
LABEL_30:
    v14 = v9 + 8;
    goto LABEL_31;
  }
  return result;
}

unint64_t swift::Demangle::RemanglerBase::findSubstitution(swift::Demangle::RemanglerBase *this, swift::Demangle::Node **a2)
{
  swift::Demangle::SubstitutionEntry *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  swift::Demangle::SubstitutionEntry *v8;
  swift::Demangle::Node *v9;
  unint64_t result;
  uint64_t *v11;

  v4 = (swift::Demangle::RemanglerBase *)((char *)this + 12296);
  v5 = *((_QWORD *)this + 1585);
  if (v5)
  {
    v6 = (char *)v4 + 24 * v5;
    v7 = 24 * v5;
    v8 = (swift::Demangle::RemanglerBase *)((char *)this + 12296);
    do
    {
      if (*((swift::Demangle::Node **)v8 + 1) == a2[1]
        && *((unsigned __int8 *)v8 + 16) == *((unsigned __int8 *)a2 + 16))
      {
        v9 = *a2;
        if (*((_BYTE *)v8 + 16))
        {
          if (swift::Demangle::SubstitutionEntry::identifierEquals(*(swift::Demangle::SubstitutionEntry **)v8, *a2, v9))
            goto LABEL_11;
        }
        else if ((swift::Demangle::SubstitutionEntry::deepEquals(v8, *(swift::Demangle::Node **)v8, v9) & 1) != 0)
        {
          goto LABEL_11;
        }
      }
      v8 = (swift::Demangle::SubstitutionEntry *)((char *)v8 + 24);
      v7 -= 24;
    }
    while (v7);
    v8 = (swift::Demangle::SubstitutionEntry *)v6;
LABEL_11:
    v5 = *((_QWORD *)this + 1585);
  }
  else
  {
    v8 = (swift::Demangle::RemanglerBase *)((char *)this + 12296);
  }
  result = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
  if (result == v5)
  {
    v11 = std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::SubstitutionEntry>((_QWORD *)this + 1586, (uint64_t)a2);
    if (v11)
      return *((unsigned int *)v11 + 10);
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

char *swift::Demangle::RemanglerBase::addSubstitution(char *this, const swift::Demangle::SubstitutionEntry *a2)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)this + 1585);
  if (v2 > 0xF)
  {
    v5 = *((_DWORD *)this + 3178) + 16;
    v6 = *(_OWORD *)a2;
    v7 = *((_QWORD *)a2 + 2);
    v8 = v5;
    return std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 12688), (uint64_t)&v6, &v6);
  }
  else
  {
    *((_QWORD *)this + 1585) = v2 + 1;
    v3 = (uint64_t)&this[24 * v2 + 12296];
    v4 = *(_OWORD *)a2;
    *(_BYTE *)(v3 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)v3 = v4;
  }
  return this;
}

size_t *swift::Demangle::mangleNode(swift::Demangle *this, swift::Demangle::Node *a2)
{
  return swift::Demangle::mangleNode();
}

size_t *swift::Demangle::mangleNode()
{
  size_t *result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  size_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void (***v21)(swift::Demangle::NodeFactory *__hidden);
  _QWORD v22[1541];
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  void *__src;
  size_t __len;
  void (***v72)(swift::Demangle::NodeFactory *__hidden);
  char v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[25];
  uint64_t v77;
  uint64_t v78;
  void (**v79)(swift::Demangle::NodeFactory *__hidden);
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  result = (size_t *)MEMORY[0x24BDAC7A8]();
  v4 = v3;
  if (!result)
  {
    *(_DWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    return result;
  }
  v5 = v2;
  v6 = v1;
  v7 = result;
  v79 = &off_24C358BB8;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v84 = 0;
  v85 = 0;
  v23 = 0;
  v22[1540] = 0;
  v21 = &v79;
  v22[1539] = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v44 = 0;
  v42 = 0;
  v43 = 0;
  v47 = 0;
  v45 = 0;
  v46 = 0;
  v50 = 0;
  v48 = 0;
  v49 = 0;
  v53 = 0;
  v51 = 0;
  v52 = 0;
  v56 = 0;
  v54 = 0;
  v55 = 0;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v62 = 0;
  v60 = 0;
  v61 = 0;
  v65 = 0;
  v63 = 0;
  v64 = 0;
  v66 = 0u;
  v67 = 0u;
  v68 = 0;
  bzero(v22, 0x3011uLL);
  v69 = 1065353216;
  v72 = &v79;
  v83 = 4800;
  v8 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  v9 = v82;
  v82 = v8;
  *v8 = v9;
  v80 = v8 + 5;
  v81 = v8 + 601;
  __src = v8 + 1;
  __len = 0x2000000000;
  v73 = 1;
  v74 = 0u;
  v75 = 0u;
  memset(v76, 0, sizeof(v76));
  v77 = v6;
  v78 = v5;
  if ((_DWORD)v19)
  {
    *(_OWORD *)v4 = v19;
    *(_QWORD *)(v4 + 16) = v20;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    v10 = (_QWORD *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
      goto LABEL_4;
    goto LABEL_5;
  }
  v13 = __src;
  if (!__src)
  {
    v17 = 0uLL;
    v18 = 0;
    goto LABEL_22;
  }
  v14 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17)
      v16 = (__len & 0xFFFFFFF8) + 8;
    else
      v16 = __len | 7;
    v15 = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&v17 + 1) = v14;
    v18 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v17 = v15;
  }
  else
  {
    HIBYTE(v18) = __len;
    v15 = &v17;
    if (!(_DWORD)__len)
      goto LABEL_21;
  }
  memmove(v15, v13, v14);
LABEL_21:
  *((_BYTE *)v15 + v14) = 0;
LABEL_22:
  *(_DWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = v17;
  *(_QWORD *)(v4 + 40) = v18;
  v10 = (_QWORD *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    do
    {
LABEL_4:
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
LABEL_5:
  v12 = (void *)*((_QWORD *)&v66 + 1);
  *((_QWORD *)&v66 + 1) = 0;
  if (v12)
    operator delete(v12);
  v79 = &off_24C358BB8;
  result = swift::Demangle::NodeFactory::freeSlabs(v82);
  if (v84)
    *(_BYTE *)(v84 + 48) = 0;
  return result;
}

void `anonymous namespace'::Remangler::mangle(uint64_t *__return_ptr a1@<X8>, _anonymous_namespace_::Remangler *this@<X0>, size_t *a3@<X1>, unsigned int a4@<W2>)
{
  int v5;
  int v6;
  uint64_t v8;
  char **v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  int v13;
  uint64_t *v14;
  char **v15;
  char v16;
  uint64_t *v17;
  unsigned int *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  char **v24;
  int v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  char *v30;
  uint64_t *v31;
  _anonymous_namespace_::Remangler *v32;
  size_t v33;

  if (a4 <= 0x400)
  {
    v6 = a4;
    while (2)
    {
      v8 = 0;
      switch(*((_WORD *)a3 + 8))
      {
        case 0:
          v13 = v6 + 1;
          v14 = a1;
          v15 = (char **)this;
          v16 = 67;
          goto LABEL_41;
        case 1:
          return;
        case 2:
          return;
        case 3:
          v17 = a1;
          v18 = (unsigned int *)this;
          v19 = v6;
          goto LABEL_20;
        case 4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 733;
          goto LABEL_3;
        case 5:
          return;
        case 6:
          return;
        case 7:
          return;
        case 8:
          return;
        case 9:
          return;
        case 0xA:
          return;
        case 0xB:
          return;
        case 0xC:
          return;
        case 0xD:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x3D:
        case 0xA7:
        case 0xDB:
        case 0xEA:
          return;
        case 0xE:
          return;
        case 0x13:
          return;
        case 0x14:
          return;
        case 0x15:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "BT";
          goto LABEL_329;
        case 0x16:
          return;
        case 0x17:
          return;
        case 0x19:
          return;
        case 0x1A:
          return;
        case 0x1B:
          return;
        case 0x1C:
          return;
        case 0x1D:
          v14 = a1;
          v15 = (char **)this;
          v16 = 99;
          v13 = v6;
LABEL_41:
          return;
        case 0x1E:
          return;
        case 0x1F:
          return;
        case 0x20:
        case 0xE8:
          return;
        case 0x21:
          return;
        case 0x22:
          return;
        case 0x23:
          return;
        case 0x24:
          return;
        case 0x25:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1138;
          goto LABEL_3;
        case 0x26:
          return;
        case 0x27:
          return;
        case 0x28:
          return;
        case 0x29:
          return;
        case 0x2A:
          return;
        case 0x2B:
          v20 = a1;
          v21 = (uint64_t *)this;
          v22 = v6;
          goto LABEL_59;
        case 0x2C:
          return;
        case 0x2D:
          return;
        case 0x2E:
          v22 = v6 + 1;
          v20 = a1;
          v21 = (uint64_t *)this;
LABEL_59:
          return;
        case 0x2F:
          return;
        case 0x30:
          return;
        case 0x31:
          return;
        case 0x32:
          return;
        case 0x33:
          return;
        case 0x34:
          return;
        case 0x35:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TE";
          goto LABEL_329;
        case 0x36:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TF";
          goto LABEL_329;
        case 0x37:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TD";
          goto LABEL_329;
        case 0x38:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Td";
          goto LABEL_329;
        case 0x39:
          return;
        case 0x3A:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TI";
          goto LABEL_329;
        case 0x3B:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Tx";
          goto LABEL_329;
        case 0x3C:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TX";
          goto LABEL_329;
        case 0x3E:
          return;
        case 0x3F:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Xe";
          goto LABEL_329;
        case 0x40:
          return;
        case 0x41:
          return;
        case 0x42:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Yb";
          goto LABEL_329;
        case 0x43:
          return;
        case 0x44:
          return;
        case 0x45:
          return;
        case 0x46:
          return;
        case 0x47:
          return;
        case 0x48:
          return;
        case 0x49:
          return;
        case 0x4A:
          return;
        case 0x4B:
          return;
        case 0x4C:
          return;
        case 0x4D:
          return;
        case 0x4E:
        case 0x4F:
          return;
        case 0x50:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1634;
          goto LABEL_3;
        case 0x51:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1641;
          goto LABEL_3;
        case 0x52:
        case 0xF5:
          return;
        case 0x53:
          return;
        case 0x54:
          return;
        case 0x55:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "s";
          v10 = 1;
          goto LABEL_330;
        case 0x56:
          v23 = a1;
          v24 = (char **)this;
          v25 = v6;
          goto LABEL_98;
        case 0x57:
          v25 = v6 + 1;
          v23 = a1;
          v24 = (char **)this;
LABEL_98:
          return;
        case 0x58:
          return;
        case 0x59:
          return;
        case 0x5A:
          return;
        case 0x5B:
          v26 = "Tg";
          goto LABEL_108;
        case 0x5C:
          v26 = "TG";
          goto LABEL_108;
        case 0x5D:
          v26 = "TB";
          goto LABEL_108;
        case 0x5E:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1749;
          goto LABEL_3;
        case 0x5F:
          v26 = "Ts";
          goto LABEL_108;
        case 0x60:
          v26 = "Ti";
LABEL_108:
          return;
        case 0x61:
          return;
        case 0x62:
          return;
        case 0x63:
          return;
        case 0x64:
          return;
        case 0x65:
        case 0xE1:
          return;
        case 0x66:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1834;
          goto LABEL_3;
        case 0x67:
          return;
        case 0x68:
          return;
        case 0x69:
          return;
        case 0x6A:
          return;
        case 0x6B:
        case 0x141:
          return;
        case 0x6C:
          return;
        case 0x6D:
          return;
        case 0x6E:
          return;
        case 0x6F:
          return;
        case 0x70:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1919;
          goto LABEL_3;
        case 0x71:
          return;
        case 0x72:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1949;
          goto LABEL_3;
        case 0x73:
          return;
        case 0x74:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1960;
          goto LABEL_3;
        case 0x75:
          return;
        case 0x76:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2165;
          goto LABEL_3;
        case 0x77:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1966;
          goto LABEL_3;
        case 0x78:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2170;
          goto LABEL_3;
        case 0x79:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2175;
          goto LABEL_3;
        case 0x7A:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2180;
          goto LABEL_3;
        case 0x7B:
          return;
        case 0x7C:
          return;
        case 0x7D:
          return;
        case 0x7E:
          return;
        case 0x7F:
          return;
        case 0x80:
          return;
        case 0x81:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "YA";
          goto LABEL_329;
        case 0x82:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "YT";
          goto LABEL_329;
        case 0x83:
          v27 = v6 + 1;
          v28 = "TK";
          goto LABEL_147;
        case 0x84:
          v27 = v6 + 1;
          v28 = "Tk";
          goto LABEL_147;
        case 0x85:
          v27 = v6 + 1;
          v28 = "TH";
          goto LABEL_147;
        case 0x86:
          v27 = v6 + 1;
          v28 = "Th";
LABEL_147:
          return;
        case 0x87:
          return;
        case 0x88:
          return;
        case 0x89:
          return;
        case 0x8A:
          return;
        case 0x8B:
          return;
        case 0x8C:
          return;
        case 0x8D:
          return;
        case 0x8E:
          return;
        case 0x8F:
          return;
        case 0x90:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Tm";
          goto LABEL_329;
        case 0x91:
          return;
        case 0x92:
          return;
        case 0x93:
          return;
        case 0x94:
          return;
        case 0x95:
          return;
        case 0x96:
          return;
        case 0x97:
          return;
        case 0x98:
          return;
        case 0x99:
          return;
        case 0x9A:
          return;
        case 0x9B:
          return;
        case 0x9C:
          return;
        case 0x9D:
          return;
        case 0x9E:
          return;
        case 0x9F:
          return;
        case 0xA0:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TO";
          goto LABEL_329;
        case 0xA1:
        case 0xE7:
          goto LABEL_331;
        case 0xA2:
          return;
        case 0xA3:
          return;
        case 0xA4:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "To";
          goto LABEL_329;
        case 0xA5:
          return;
        case 0xA6:
          return;
        case 0xA8:
          return;
        case 0xA9:
          return;
        case 0xAA:
          return;
        case 0xAB:
          return;
        case 0xAC:
          return;
        case 0xAD:
          return;
        case 0xAE:
          return;
        case 0xAF:
          return;
        case 0xB0:
          return;
        case 0xB1:
          return;
        case 0xB2:
          return;
        case 0xB3:
          return;
        case 0xB4:
          return;
        case 0xB5:
        case 0xE9:
        case 0x12D:
          goto LABEL_7;
        case 0xB6:
          return;
        case 0xB7:
          return;
        case 0xB8:
          return;
        case 0xB9:
          return;
        case 0xBA:
          return;
        case 0xBB:
          return;
        case 0xBC:
          return;
        case 0xBD:
          return;
        case 0xBE:
          return;
        case 0xBF:
          return;
        case 0xC0:
          return;
        case 0xC1:
          return;
        case 0xC2:
          return;
        case 0xC3:
          return;
        case 0xC4:
          return;
        case 0xC5:
          return;
        case 0xC6:
          return;
        case 0xC7:
          return;
        case 0xC8:
          return;
        case 0xC9:
          return;
        case 0xCA:
          return;
        case 0xCB:
          return;
        case 0xCC:
          return;
        case 0xCD:
          return;
        case 0xCE:
          return;
        case 0xCF:
          v19 = v6 + 1;
          v17 = a1;
          v18 = (unsigned int *)this;
LABEL_20:
          return;
        case 0xD0:
          return;
        case 0xD1:
          return;
        case 0xD2:
          return;
        case 0xD3:
          return;
        case 0xD4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3634;
          goto LABEL_3;
        case 0xD5:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3639;
          goto LABEL_3;
        case 0xD6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3645;
          goto LABEL_3;
        case 0xD7:
          return;
        case 0xD8:
          swift::Demangle::CharVector::append((unsigned int *)this + 3182, *a3, *((swift::Demangle::NodeFactory **)this + 1593));
          goto LABEL_331;
        case 0xD9:
          return;
        case 0xDA:
          return;
        case 0xDC:
        case 0xFE:
          return;
        case 0xDD:
        case 0x147:
          v9 = (char **)((char *)this + 12728);
          v10 = a3[1];
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = (char *)*a3;
          goto LABEL_330;
        case 0xDE:
          return;
        case 0xDF:
          return;
        case 0xE0:
          return;
        case 0xE2:
          return;
        case 0xE3:
          return;
        case 0xE4:
          return;
        case 0xE5:
          return;
        case 0xE6:
          return;
        case 0xEB:
          return;
        case 0xEC:
          return;
        case 0xED:
          return;
        case 0xEE:
          return;
        case 0xEF:
          return;
        case 0xF0:
          return;
        case 0xF1:
          return;
        case 0xF2:
          return;
        case 0xF3:
          return;
        case 0xF4:
          return;
        case 0xF6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1839;
          goto LABEL_3;
        case 0xF7:
          return;
        case 0xF8:
          return;
        case 0xF9:
          return;
        case 0xFA:
          return;
        case 0xFB:
          return;
        case 0xFC:
          return;
        case 0xFD:
          return;
        case 0xFF:
          return;
        case 0x100:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3281;
          goto LABEL_3;
        case 0x101:
          return;
        case 0x102:
          return;
        case 0x103:
          return;
        case 0x104:
          return;
        case 0x105:
          return;
        case 0x106:
          return;
        case 0x107:
          return;
        case 0x108:
          return;
        case 0x109:
          return;
        case 0x10A:
          return;
        case 0x10B:
          return;
        case 0x10C:
          return;
        case 0x10D:
          return;
        case 0x10E:
          return;
        case 0x10F:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Ya";
          goto LABEL_329;
        case 0x110:
          return;
        case 0x111:
          return;
        case 0x112:
          return;
        case 0x113:
          return;
        case 0x114:
          return;
        case 0x115:
          return;
        case 0x116:
          return;
        case 0x117:
          return;
        case 0x118:
          return;
        case 0x119:
          return;
        case 0x11A:
          return;
        case 0x11B:
          return;
        case 0x11C:
          return;
        case 0x11D:
          return;
        case 0x11E:
          return;
        case 0x11F:
          return;
        case 0x120:
          return;
        case 0x121:
          return;
        case 0x122:
          return;
        case 0x123:
          return;
        case 0x124:
          return;
        case 0x125:
          return;
        case 0x126:
          return;
        case 0x127:
          return;
        case 0x128:
          return;
        case 0x129:
          return;
        case 0x12A:
          return;
        case 0x12B:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3792;
          goto LABEL_3;
        case 0x12C:
          return;
        case 0x12E:
          return;
        case 0x12F:
          return;
        case 0x130:
          return;
        case 0x131:
          return;
        case 0x132:
          return;
        case 0x133:
          return;
        case 0x134:
          return;
        case 0x135:
          return;
        case 0x136:
          return;
        case 0x137:
          return;
        case 0x138:
          return;
        case 0x139:
          return;
        case 0x13A:
          return;
        case 0x13B:
          return;
        case 0x13C:
          return;
        case 0x13D:
          return;
        case 0x13E:
          return;
        case 0x13F:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Tu";
          goto LABEL_329;
        case 0x140:
          v29 = v6 + 1;
          v30 = "TJ";
          v31 = a1;
          v32 = this;
          v33 = 2;
          goto LABEL_323;
        case 0x142:
          return;
        case 0x143:
          return;
        case 0x144:
          v29 = v6 + 1;
          v30 = "TJV";
          v31 = a1;
          v32 = this;
          v33 = 3;
LABEL_323:
          return;
        case 0x145:
          return;
        case 0x146:
          return;
        case 0x148:
          return;
        case 0x149:
          return;
        case 0x14A:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "HF";
LABEL_329:
          v10 = 2;
          goto LABEL_330;
        case 0x14B:
          return;
        case 0x14C:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Twb";
          v10 = 3;
          goto LABEL_330;
        case 0x14D:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TwB";
          v10 = 3;
          goto LABEL_330;
        case 0x14E:
          return;
        case 0x14F:
          return;
        case 0x150:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3931;
          goto LABEL_3;
        case 0x151:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3937;
          goto LABEL_3;
        case 0x152:
          return;
        case 0x153:
          return;
        case 0x154:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TwS";
          v10 = 3;
LABEL_330:
          swift::Demangle::CharVector::append(v9, v12, v10, v11);
LABEL_331:
          *(_DWORD *)a1 = 0;
          goto LABEL_332;
        case 0x155:
        case 0x156:
          *(_DWORD *)a1 = 11;
LABEL_332:
          a1[1] = 0;
          *((_DWORD *)a1 + 4) = 0;
          return;
        case 0x157:
          return;
        case 0x158:
          return;
        case 0x159:
          return;
        case 0x15A:
          return;
        case 0x15B:
          v8 = 4;
LABEL_7:
          a3 = (size_t *)(*((uint64_t (**)(_QWORD, uint64_t, size_t))this + 1603))(*((_QWORD *)this + 1604), v8, *a3);
          if (++v6 == 1025)
            break;
          continue;
        case 0x15C:
          return;
        case 0x15D:
          return;
        case 0x15E:
          return;
        case 0x15F:
          return;
        case 0x160:
          return;
        case 0x161:
          return;
        case 0x162:
          return;
        default:
          *(_DWORD *)a1 = 4;
          a1[1] = (uint64_t)a3;
          v5 = 401;
          goto LABEL_3;
      }
      break;
    }
  }
  *(_DWORD *)a1 = 3;
  a1[1] = (uint64_t)a3;
  v5 = 392;
LABEL_3:
  *((_DWORD *)a1 + 4) = v5;
}

void swift::Demangle::mangleNode()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  size_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v23[1541];
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[25];
  uint64_t v78;
  uint64_t v79;

  v0 = MEMORY[0x24BDAC7A8]();
  v5 = v4;
  if (!v0)
  {
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_DWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v9 = (size_t *)v0;
  v24 = 0;
  v23[1540] = 0;
  v22 = v3;
  v23[1539] = 0;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v45 = 0;
  v43 = 0;
  v44 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v51 = 0;
  v49 = 0;
  v50 = 0;
  v54 = 0;
  v52 = 0;
  v53 = 0;
  v57 = 0;
  v55 = 0;
  v56 = 0;
  v60 = 0;
  v59 = 0;
  v58 = 0;
  v63 = 0;
  v61 = 0;
  v62 = 0;
  v66 = 0;
  v64 = 0;
  v65 = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  bzero(v23, 0x3011uLL);
  v70 = 1065353216;
  v73 = v6;
  v10 = (_QWORD *)v6[1];
  if (!v10 || (unint64_t)(v10 + 4) > v6[2])
  {
    v11 = 2 * v6[4];
    if (v11 <= 0x21)
      v11 = 33;
    v6[4] = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *v13 = v6[3];
    v10 = v13 + 1;
    v6[2] = (char *)v13 + v12;
    v6[3] = v13;
  }
  v6[1] = v10 + 4;
  v71 = v10;
  v72 = 0x2000000000;
  v74 = 1;
  v75 = 0u;
  v76 = 0u;
  memset(v77, 0, sizeof(v77));
  v78 = v8;
  v79 = v7;
  if ((_DWORD)v20)
  {
    *(_OWORD *)v5 = v20;
    v14 = v21;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = v14;
    v15 = (_QWORD *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
      goto LABEL_9;
  }
  else
  {
    v18 = v71;
    v19 = v72;
    *(_DWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = v18;
    *(_QWORD *)(v5 + 32) = v19;
    v15 = (_QWORD *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      do
      {
LABEL_9:
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
  }
  v17 = (void *)*((_QWORD *)&v67 + 1);
  *((_QWORD *)&v67 + 1) = 0;
  if (v17)
    operator delete(v17);
}

uint64_t swift::Demangle::isSpecialized(swift::Demangle *this, swift::Demangle::Node *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (this)
  {
    while (2)
    {
      v2 = 1;
      switch(*((_WORD *)this + 8))
      {
        case 0:
        case 0x18:
        case 0x1D:
        case 0x21:
        case 0x32:
        case 0x33:
        case 0x3D:
        case 0x46:
        case 0x4C:
        case 0x62:
        case 0x75:
        case 0x7D:
        case 0x98:
        case 0xA7:
        case 0xB2:
        case 0xB3:
        case 0xB4:
        case 0xCC:
        case 0xD7:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xEA:
        case 0xFA:
        case 0xFB:
        case 0xFE:
        case 0x101:
          v3 = *((unsigned __int8 *)this + 18);
          if ((v3 - 1) < 2)
            goto LABEL_4;
          if (v3 != 5)
            return 0;
          v2 = *((unsigned int *)this + 2);
          if (!(_DWORD)v2)
            return v2;
          this = *(swift::Demangle **)this;
LABEL_4:
          this = *(swift::Demangle **)this;
          if (this)
            continue;
          return 0;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x53:
          return v2;
        case 0x47:
          v4 = *((unsigned __int8 *)this + 18);
          if (v4 == 2)
            goto LABEL_3;
          if (v4 != 5 || *((_DWORD *)this + 2) < 2u)
            return 0;
          this = *(swift::Demangle **)this;
LABEL_3:
          this = (swift::Demangle *)((char *)this + 8);
          goto LABEL_4;
        default:
          return 0;
      }
    }
  }
  return 0;
}

uint64_t swift::Demangle::getUnspecialized@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  swift::Demangle::Node *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  swift::Demangle::Node *v15;
  unsigned int *v16;
  int v17;
  swift::Demangle **v18;
  swift::Demangle *v19;
  swift::Demangle::NodeFactory *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  unint64_t v26;
  swift::Demangle::Node *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  swift::Demangle *v33;
  swift::Demangle::NodeFactory *v34;
  int v35;
  uint64_t v36;
  unsigned int *Node;
  uint64_t v38;
  const char *v39;
  int v40;
  swift::Demangle::Node **v41;
  swift::Demangle::Node *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  __int128 v47;
  uint64_t v48;
  swift::Demangle::Node *v49;

  v5 = this;
  while (2)
  {
    v7 = (swift::Demangle::Node *)*(unsigned __int16 *)(v5 + 16);
    if (((_DWORD)v7 - 13) < 6)
    {
      v8 = *(unsigned __int8 *)(v5 + 18);
      if ((v8 - 1) >= 2)
      {
        if (v8 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4090;
          goto LABEL_71;
        }
        v5 = *(_QWORD *)v5;
      }
      v9 = *(_QWORD *)v5;
      if (*(_WORD *)(*(_QWORD *)v5 + 16) != 232)
      {
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v9;
        v13 = 4092;
        goto LABEL_71;
      }
      v10 = *(unsigned __int8 *)(v9 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*(_DWORD *)(v9 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v9;
          v13 = 4093;
          goto LABEL_71;
        }
        v9 = *(_QWORD *)v9;
      }
      v5 = *(_QWORD *)v9;
      goto LABEL_13;
    }
    switch(*(_WORD *)(v5 + 16))
    {
      case 0:
      case 0x1D:
      case 0x21:
      case 0x32:
      case 0x33:
      case 0x46:
      case 0x4C:
      case 0x62:
      case 0x75:
      case 0x7D:
      case 0x98:
      case 0xB2:
      case 0xB3:
      case 0xCC:
      case 0xD7:
      case 0xDA:
      case 0xDC:
      case 0xFA:
      case 0xFB:
      case 0xFE:
      case 0x101:
        v14 = *(unsigned __int8 *)(v5 + 18);
        if (v14 != 1)
        {
          if (v14 == 5)
          {
            v14 = *(_DWORD *)(v5 + 8);
          }
          else if (v14 != 2)
          {
            v14 = 0;
          }
        }
        goto LABEL_30;
      case 0x13:
        v11 = *(unsigned __int8 *)(v5 + 18);
        if ((v11 - 1) < 2)
          goto LABEL_20;
        if (v11 == 5 && *(_DWORD *)(v5 + 8))
        {
          v5 = *(_QWORD *)v5;
LABEL_20:
          v5 = *(_QWORD *)v5;
          v12 = *(unsigned __int16 *)(v5 + 16);
          if (v12 != 29 && v12 != 76)
          {
            *(_DWORD *)a3 = 1;
            *(_QWORD *)(a3 + 8) = v5;
            v13 = 4113;
            goto LABEL_71;
          }
LABEL_13:
          this = swift::Demangle::isSpecialized((swift::Demangle *)v5, v7);
          if ((this & 1) == 0)
          {
LABEL_59:
            *(_DWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(_QWORD *)(a3 + 24) = v5;
            return this;
          }
          continue;
        }
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v5;
        v13 = 4108;
LABEL_71:
        *(_DWORD *)(a3 + 16) = v13;
        return this;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        v14 = 2;
LABEL_30:
        this = swift::Demangle::NodeFactory::createNode(a2, (__int16)v7);
        v16 = (unsigned int *)this;
        v17 = *(unsigned __int8 *)(v5 + 18);
        v18 = (swift::Demangle **)v5;
        if ((v17 - 1) < 2)
          goto LABEL_34;
        if (v17 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4069;
          goto LABEL_71;
        }
        v18 = *(swift::Demangle ***)v5;
LABEL_34:
        v19 = *v18;
        if (swift::Demangle::isSpecialized(*v18, v15))
        {
          this = ((uint64_t (*)(swift::Demangle *__hidden, swift::Demangle::Node *, swift::Demangle::NodeFactory *))swift::Demangle::getUnspecialized)(v19, a2, v20);
          if (*(_DWORD *)a3)
            return this;
          v19 = *(swift::Demangle **)(a3 + 24);
        }
        this = (uint64_t)swift::Demangle::Node::addChild(v16, v19, a2, v21, v22);
        if (v14 < 2)
        {
LABEL_81:
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 16) = 0;
          *(_QWORD *)(a3 + 24) = v16;
          return this;
        }
        v25 = v14;
        v26 = 1;
        while (1)
        {
          v28 = *(unsigned __int8 *)(v5 + 18);
          if ((_DWORD)v28 == 2)
          {
            if (v28 > v26)
              goto LABEL_46;
          }
          else if ((_DWORD)v28 == 5 && *(unsigned int *)(v5 + 8) > v26)
          {
LABEL_46:
            v29 = v28 - 1;
            v30 = v5;
            if (v29 >= 2)
              v30 = *(_QWORD *)v5;
            v27 = *(swift::Demangle::Node **)(v30 + 8 * v26);
            goto LABEL_40;
          }
          v27 = 0;
LABEL_40:
          this = (uint64_t)swift::Demangle::Node::addChild(v16, v27, a2, v23, v24);
          if (v25 == ++v26)
            goto LABEL_81;
        }
      case 0x47:
        v31 = *(unsigned __int8 *)(v5 + 18);
        v32 = v5;
        if (v31 == 2)
          goto LABEL_56;
        if (v31 != 5 || *(_DWORD *)(v5 + 8) <= 1u)
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4120;
          goto LABEL_71;
        }
        v32 = *(_QWORD *)v5;
LABEL_56:
        v33 = *(swift::Demangle **)(v32 + 8);
        this = swift::Demangle::isSpecialized(v33, v7);
        if ((this & 1) == 0)
          goto LABEL_59;
        this = (uint64_t)swift::Demangle::getUnspecialized((uint64_t *)&v47, v33, a2, v34);
        if ((_DWORD)v47)
        {
          *(_OWORD *)a3 = v47;
          *(_QWORD *)(a3 + 16) = v48;
          return this;
        }
        Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(a2, 71);
        v16 = Node;
        v40 = *(unsigned __int8 *)(v5 + 18);
        v41 = (swift::Demangle::Node **)v5;
        if ((v40 - 1) < 2)
          goto LABEL_76;
        if (v40 == 5 && *(_DWORD *)(v5 + 8))
        {
          v41 = *(swift::Demangle::Node ***)v5;
LABEL_76:
          v42 = *v41;
        }
        else
        {
          v42 = 0;
        }
        swift::Demangle::Node::addChild(Node, v42, a2, v38, v39);
        this = (uint64_t)swift::Demangle::Node::addChild(v16, v49, a2, v43, v44);
        if (*(_BYTE *)(v5 + 18) == 5 && *(_DWORD *)(v5 + 8) == 3)
          this = (uint64_t)swift::Demangle::Node::addChild(v16, *(swift::Demangle::Node **)(*(_QWORD *)v5 + 16), a2, v45, v46);
        goto LABEL_81;
      case 0x53:
        v35 = *(unsigned __int8 *)(v5 + 18);
        if ((v35 - 1) < 2)
          goto LABEL_64;
        if (v35 == 5 && *(_DWORD *)(v5 + 8))
        {
          v5 = *(_QWORD *)v5;
LABEL_64:
          v36 = *(_QWORD *)v5;
          if (*(_WORD *)(*(_QWORD *)v5 + 16) == 232)
          {
            *(_DWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(_QWORD *)(a3 + 24) = v36;
            return this;
          }
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v36;
          v13 = 4103;
        }
        else
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4101;
        }
        goto LABEL_71;
      default:
        *(_DWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v5;
        v13 = 4137;
        goto LABEL_71;
    }
  }
}

void *`anonymous namespace'::Remangler::mangleAnonymousContext@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node *v9;
  void *result;
  swift::Demangle::Node **v11;
  unsigned int v12;
  size_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v11 = *(swift::Demangle::Node ***)a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)a2 + 18) != 5)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_36;
  }
LABEL_19:
  v12 = *((_DWORD *)this + 3184);
  v13 = *((unsigned int *)this + 3185);
  v14 = (char *)this[1591];
  if (v12 >= v13)
  {
    v15 = this[1593];
    v16 = (char *)v15[1];
    if (&v14[v13] == v16)
    {
      v18 = (unint64_t)&v14[v13 + 1];
      v17 = v15[2];
      if (v18 <= v17)
      {
        v15[1] = v18;
        LODWORD(v19) = 1;
LABEL_34:
        *((_DWORD *)this + 3185) = v13 + v19;
        goto LABEL_35;
      }
    }
    else
    {
      v17 = v15[2];
    }
    if ((2 * v13) <= 4)
      v19 = 4;
    else
      v19 = (2 * v13);
    v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      v21 = 2 * v15[4];
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      v15[4] = v21;
      v22 = v21 + 8;
      v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      v24 = (char *)v23 + v22;
      *v23 = v15[3];
      v16 = (char *)(v23 + 1);
      v15[2] = v24;
      v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if ((_DWORD)v13)
      memcpy(v16, this[1591], v13);
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    v14 = v16;
    v12 = *((_DWORD *)this + 3184);
    goto LABEL_34;
  }
LABEL_35:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 121;
LABEL_36:
  result = swift::Demangle::CharVector::append((char **)this + 1591, "XZ", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleAnyProtocolConformanceList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  int v10;
  void *result;
  _BOOL4 v12;
  BOOL v13;

  v13 = 1;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_14;
    }
    v7 = 0;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_14;
    }
    if (v6 != 5)
    {
      v9 = 0;
      if (!v7)
        goto LABEL_19;
      goto LABEL_14;
    }
    v8 = *(_QWORD *)a2;
    goto LABEL_9;
  }
  v9 = (swift::Demangle::Node *)((char *)a2 + 8);
  if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
  {
LABEL_19:
    v12 = 1;
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_14:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
    {
      v12 = v13;
      goto LABEL_20;
    }
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleArgumentTuple@<X0>(unsigned int *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v4;
  int v6;
  swift::Demangle::Node *v7;
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (*((_WORD *)v7 + 8) == 232)
  {
    v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        v7 = 0;
        goto LABEL_14;
      }
      v7 = *(swift::Demangle::Node **)v7;
    }
    v7 = *(swift::Demangle::Node **)v7;
  }
LABEL_14:
  if (*((_WORD *)v7 + 8) != 223)
  v9 = *((unsigned __int8 *)v7 + 18);
  if ((v9 - 1) < 2 || v9 == 5 && *((_DWORD *)v7 + 2))
  v10 = this[3184];
  v11 = this[3185];
  v12 = (char *)*((_QWORD *)this + 1591);
  if (v10 >= v11)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 1593);
    v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      v16 = (unint64_t)&v12[v11 + 1];
      v15 = v13[2];
      if (v16 <= v15)
      {
        v13[1] = v16;
        LODWORD(v17) = 1;
LABEL_35:
        v4[3185] = v11 + v17;
        goto LABEL_36;
      }
    }
    else
    {
      v15 = v13[2];
    }
    if ((2 * v11) <= 4)
      v17 = 4;
    else
      v17 = (2 * v11);
    v18 = v17 + v11;
    if (!v14 || (unint64_t)&v14[v18] > v15)
    {
      v19 = 2 * v13[4];
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      v13[4] = v19;
      v20 = v19 + 8;
      this = (unsigned int *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v13[3];
      v14 = (char *)(this + 2);
      v13[2] = v21;
      v13[3] = this;
    }
    v13[1] = &v14[v18];
    if ((_DWORD)v11)
      this = (unsigned int *)memcpy(v14, *((const void **)v4 + 1591), v11);
    *((_QWORD *)v4 + 1591) = v14;
    LODWORD(v11) = v4[3185];
    v12 = v14;
    v10 = v4[3184];
    goto LABEL_35;
  }
LABEL_36:
  v4[3184] = v10 + 1;
  v12[v10] = 121;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t `anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  swift::Demangle::Node **v10;
  uint64_t v11;
  swift::Demangle::Node **v12;
  unsigned int v13;
  unint64_t v14;
  char **v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v17 = 0uLL;
  LOBYTE(v18) = 0;
  if ((result & 1) != 0)
    goto LABEL_23;
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = (swift::Demangle::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::Node ***)a2;
      goto LABEL_10;
    }
    v10 = 0;
  }
  if (v9 == 1)
  {
    v12 = (swift::Demangle::Node **)((char *)a2 + 8);
    if (v10 != v12)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (v9 == 2)
  {
    v12 = (swift::Demangle::Node **)((char *)a2 + 16);
    if (v10 != v12)
      goto LABEL_17;
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t)swift::Demangle::CharVector::append(this + 1591, "Qa", 2uLL, this[1593]);
    v14 = (unint64_t)this[1585];
    if (v14 > 0xF)
    {
      v16 = *((_DWORD *)this + 3178) + 16;
      v19 = v17;
      v20 = v18;
      v21 = v16;
      result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v19, &v19);
    }
    else
    {
      this[1585] = (char *)(v14 + 1);
      v15 = &this[3 * v14 + 1537];
      *(_OWORD *)v15 = v17;
      *((_BYTE *)v15 + 16) = v18;
    }
LABEL_23:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (v9 != 5)
  {
    v12 = 0;
    if (!v10)
      goto LABEL_20;
    goto LABEL_17;
  }
  v11 = *(_QWORD *)a2;
LABEL_10:
  v12 = (swift::Demangle::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
  if (v10 == v12)
    goto LABEL_20;
LABEL_17:
  v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v10 == v12)
      goto LABEL_20;
  }
}

void *`anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleDefaultAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::CharVector::append(this + 1591, "TM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  void *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = swift::Demangle::CharVector::append(this + 1591, "fMa", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::CharVector::append(this + 1591, "WT", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleBaseWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  void *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = swift::Demangle::CharVector::append(this + 1591, "XK", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  void *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = swift::Demangle::CharVector::append(this + 1591, "fMb", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t `anonymous namespace'::Remangler::mangleBoundGenericEnum@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v5;
  uint64_t v6;
  int v8;
  swift::Demangle::Node *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  swift::Demangle::Node *v22;
  _QWORD v23[2];
  char v24;

  v5 = a2;
  v6 = this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::Node **)a2;
LABEL_5:
    v10 = *(uint64_t **)v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if ((v11 - 1) < 2)
  {
LABEL_11:
    v12 = (uint64_t *)*v10;
    goto LABEL_13;
  }
  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    v10 = (uint64_t *)*v10;
    goto LABEL_11;
  }
  v12 = 0;
LABEL_13:
  if (*((_WORD *)v12 + 8) != 61)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 843;
    return this;
  }
  v13 = *((unsigned __int8 *)v12 + 18);
  v14 = (uint64_t **)v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 != 5)
    {
      v15 = 0;
      if (v13 == 2)
      {
LABEL_26:
        v16 = v12[1];
        goto LABEL_29;
      }
      goto LABEL_23;
    }
    if (!*((_DWORD *)v12 + 2))
    {
      v15 = 0;
      goto LABEL_28;
    }
    v14 = (uint64_t **)*v12;
  }
  v15 = *v14;
  if (v13 == 2)
    goto LABEL_26;
LABEL_23:
  if (v13 == 5 && *((_DWORD *)v12 + 2) >= 2u)
  {
    v12 = (uint64_t *)*v12;
    goto LABEL_26;
  }
LABEL_28:
  v16 = 0;
LABEL_29:
  if (*((_WORD *)v15 + 8) != 153 || v15[1] != 5)
  v17 = (int *)*v15;
  v18 = *v17;
  v19 = *((unsigned __int8 *)v17 + 4);
  v20 = v18 == 1718187859 && v19 == 116;
  if (!v20 || *(_WORD *)(v16 + 16) != 101 || *(_QWORD *)(v16 + 8) != 8 || **(_QWORD **)v16 != 0x6C616E6F6974704FLL)
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  if ((this & 1) != 0)
    goto LABEL_49;
  v21 = *((unsigned __int8 *)v5 + 18);
  if (v21 == 2)
    goto LABEL_45;
  if (v21 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    v5 = *(swift::Demangle::Node **)v5;
LABEL_45:
    v22 = (swift::Demangle::Node *)*((_QWORD *)v5 + 1);
    goto LABEL_47;
  }
  v22 = 0;
LABEL_47:
  if (!*(_DWORD *)a4)
  {
    swift::Demangle::CharVector::append((char **)(v6 + 12728), "Sg", 2uLL, *(_QWORD **)(v6 + 12744));
    this = (uint64_t)swift::Demangle::RemanglerBase::addSubstitution((char *)v6, (const swift::Demangle::SubstitutionEntry *)v23);
LABEL_49:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return this;
}

_QWORD *`anonymous namespace'::Remangler::mangleBoundGenericFunction@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  int v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void **v22;
  int v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  swift::Demangle::Node *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;

  v28 = 0uLL;
  LOBYTE(v29) = 0;
  if ((_DWORD)result)
    goto LABEL_2;
  result = (_QWORD *)swift::Demangle::getUnspecialized((uint64_t)a2, (swift::Demangle::Node *)*this, (uint64_t)&v25);
  if ((_DWORD)v25)
  {
    *(_OWORD *)a4 = v25;
    *(_QWORD *)(a4 + 16) = v26;
    return result;
  }
  v9 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    v24 = 121;
    if (!*(_DWORD *)a4)
    {
      v10 = *((_DWORD *)this + 3184);
      v11 = *((unsigned int *)this + 3185);
      v12 = (char *)this[1591];
      if (v10 < v11)
        goto LABEL_24;
      v13 = this[1593];
      v14 = (char *)v13[1];
      if (&v12[v11] == v14)
      {
        v16 = (unint64_t)&v12[v11 + 1];
        v15 = v13[2];
        if (v16 <= v15)
        {
          v13[1] = v16;
          LODWORD(v17) = 1;
LABEL_23:
          *((_DWORD *)this + 3185) = v11 + v17;
LABEL_24:
          *((_DWORD *)this + 3184) = v10 + 1;
          v12[v10] = 71;
          v21 = (unint64_t)this[1585];
          if (v21 > 0xF)
          {
            v23 = *((_DWORD *)this + 3178) + 16;
            v30 = v28;
            v31 = v29;
            v32 = v23;
            result = std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v30, &v30);
          }
          else
          {
            this[1585] = (const void *)(v21 + 1);
            v22 = &this[3 * v21 + 1537];
            *(_OWORD *)v22 = v28;
            *((_BYTE *)v22 + 16) = v29;
          }
LABEL_2:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          return result;
        }
      }
      else
      {
        v15 = v13[2];
      }
      if ((2 * v11) <= 4)
        v17 = 4;
      else
        v17 = (2 * v11);
      v18 = v17 + v11;
      if (!v14 || (unint64_t)&v14[v18] > v15)
      {
        v19 = 2 * v13[4];
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        v13[4] = v19;
        v20 = v19 + 8;
        result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *result = v13[3];
        v14 = (char *)(result + 1);
        v13[2] = (char *)result + v20;
        v13[3] = result;
      }
      v13[1] = &v14[v18];
      if ((_DWORD)v11)
        result = memcpy(v14, this[1591], v11);
      this[1591] = v14;
      LODWORD(v11) = *((_DWORD *)this + 3185);
      v12 = v14;
      v10 = *((_DWORD *)this + 3184);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::Remangler::mangleBuiltinTypeName@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const void **v6;
  unsigned int v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v22;
  char v23;
  unsigned int v36;
  size_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unsigned int v44;
  size_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unsigned int v53;
  size_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  int v73;
  uint64_t v74;
  void *v75;
  size_t v76;
  char **v77;
  char v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char **v84;
  char *v85;
  void *v86;
  size_t v87;
  _BYTE *v88;
  BOOL v89;
  size_t v90;
  unsigned __int16 *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  char **v96;
  char v97;
  char **v98;
  char **v99;
  char v100;
  unsigned int v101;
  size_t v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  unint64_t v106;
  unsigned int v107;
  size_t v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  size_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  size_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  size_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  size_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned __int16 *v138;
  size_t v139;

  v4 = this;
  v6 = (const void **)(this + 12728);
  v7 = *(_DWORD *)(this + 12736);
  v8 = *(unsigned int *)(this + 12740);
  v9 = *(char **)(this + 12728);
  if (v7 < v8)
    goto LABEL_20;
  v10 = *(_QWORD **)(this + 12744);
  v11 = (char *)v10[1];
  if (&v9[v8] != v11)
  {
    v12 = v10[2];
LABEL_5:
    if ((2 * v8) <= 4)
      v14 = 4;
    else
      v14 = (2 * v8);
    v15 = v14 + v8;
    if (v11)
      v16 = (unint64_t)&v11[v14 + v8] > v12;
    else
      v16 = 1;
    v9 = (char *)v10[1];
    if (v16)
    {
      v17 = 2 * v10[4];
      if (v17 <= v15 + 1)
        v17 = v15 + 1;
      v10[4] = v17;
      v18 = v17 + 8;
      this = (uint64_t)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      *(_QWORD *)this = v10[3];
      v9 = (char *)(this + 8);
      v10[2] = this + v18;
      v10[3] = this;
    }
    v10[1] = &v9[v15];
    if ((_DWORD)v8)
      this = (uint64_t)memcpy(v9, *v6, v8);
    *(_QWORD *)(v4 + 12728) = v9;
    LODWORD(v8) = *(_DWORD *)(v4 + 12740);
    v7 = *(_DWORD *)(v4 + 12736);
    goto LABEL_19;
  }
  v13 = (unint64_t)&v9[v8 + 1];
  v12 = v10[2];
  if (v13 > v12)
    goto LABEL_5;
  v10[1] = v13;
  LODWORD(v14) = 1;
LABEL_19:
  *(_DWORD *)(v4 + 12740) = v8 + v14;
LABEL_20:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  v20 = *(_QWORD *)a2;
  v19 = *((_QWORD *)a2 + 1);
  switch(v19)
  {
    case 0xBuLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x626F4A2E6E69746CLL)
        goto LABEL_29;
      v22 = (char **)v6;
      v23 = 106;
      goto LABEL_213;
    case 0xCuLL:
      this = memcmp(*(const void **)a2, "Builtin.Word", *((_QWORD *)a2 + 1));
      if (!(_DWORD)this)
      {
        v22 = (char **)v6;
        v23 = 119;
        goto LABEL_213;
      }
LABEL_29:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x746E492E6E69746CLL)
        goto LABEL_162;
      goto LABEL_168;
    case 0x10uLL:
      if (*(_QWORD *)v20 == 0x2E6E69746C697542 && *(_QWORD *)(v20 + 8) == 0x726F747563657845)
      {
        v22 = (char **)v6;
        v23 = 101;
        goto LABEL_213;
      }
      if (*(_QWORD *)v20 == 0x2E6E69746C697542 && *(_QWORD *)(v20 + 8) == 0x6E656B6F544C4953)
      {
        v22 = (char **)v6;
        v23 = 116;
        goto LABEL_213;
      }
      goto LABEL_153;
    case 0x11uLL:
      this = memcmp(*(const void **)a2, "Builtin.PackIndex", *((_QWORD *)a2 + 1));
      if (!(_DWORD)this)
      {
        v22 = (char **)v6;
        v23 = 80;
        goto LABEL_213;
      }
      if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x746E492E6E69746CLL)
        goto LABEL_158;
      goto LABEL_168;
    case 0x12uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x746E696F50776152
        || *(_WORD *)(v20 + 16) != 29285)
      {
        if (*(_QWORD *)v20 == 0x2E6E69746C697542
          && *(_QWORD *)(v20 + 8) == 0x726574694C746E49
          && *(_WORD *)(v20 + 16) == 27745)
        {
          v22 = (char **)v6;
          v23 = 73;
          goto LABEL_213;
        }
LABEL_153:
        if (*(_QWORD *)v20 == 0x2E6E69746C697542 && *(_QWORD *)(v20 + 3) == 0x746E492E6E69746CLL)
        {
LABEL_168:
          v74 = 11;
          if (v19 < 0xB)
            v74 = v19;
          v75 = (void *)(v20 + v74);
          v76 = v19 - v74;
          v77 = (char **)v6;
          v78 = 105;
        }
        else
        {
          if (v19 < 0xE)
          {
LABEL_162:
            if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x6365562E6E69746CLL)
            {
LABEL_166:
              *(_DWORD *)a3 = 9;
              *(_QWORD *)(a3 + 8) = a2;
              v73 = 949;
LABEL_167:
              *(_DWORD *)(a3 + 16) = v73;
              return this;
            }
            v79 = 11;
            if (v19 < 0xB)
              v79 = v19;
            v80 = (char *)(v20 + v79);
            v81 = v19 - v79;
            if (v19 >= 0xC)
            {
              v88 = memchr(v80, 120, v19 - v79);
              v82 = v88 - v80;
              if (!v88)
                v82 = -1;
            }
            else
            {
              v82 = -1;
            }
            v89 = v81 > v82;
            if (v81 >= v82)
              v90 = v82;
            else
              v90 = v81;
            v91 = (unsigned __int16 *)&v80[v90];
            v92 = v89;
            if (v89)
              v91 = (unsigned __int16 *)((char *)v91 + 1);
            v138 = v91;
            v139 = v81 - v90 - v92;
            if (v139 == 10
              && ((v93 = *(_QWORD *)v91, v94 = v91[4], v93 == 0x746E696F50776152) ? (v95 = v94 == 29285) : (v95 = 0),
                  v95))
            {
              v99 = (char **)v6;
              v100 = 112;
            }
            else
            {
              if (llvm::StringRef::consume_front((const void **)&v138, "FPIEEE", 6uLL))
              {
                v96 = (char **)v6;
                v97 = 102;
              }
              else
              {
                this = llvm::StringRef::consume_front((const void **)&v138, "Int", 3uLL);
                if (!(_DWORD)this)
                {
                  *(_DWORD *)a3 = 8;
                  *(_QWORD *)(a3 + 8) = a2;
                  v73 = 945;
                  goto LABEL_167;
                }
                v96 = (char **)v6;
                v97 = 105;
              }
              v98 = swift::Demangle::RemanglerBuffer::operator<<(v96, v97);
              swift::Demangle::CharVector::append(v98, v138, v139, v98[2]);
              v99 = v98;
              v100 = 95;
            }
            swift::Demangle::RemanglerBuffer::operator<<(v99, v100);
            swift::Demangle::CharVector::append((char **)v6, "Bv", 2uLL, *(_QWORD **)(v4 + 12744));
            v85 = *(char **)(v4 + 12744);
            v84 = (char **)v6;
            v86 = v80;
            v87 = v90;
            goto LABEL_212;
          }
LABEL_158:
          if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 6) != 0x4545454950462E6ELL)
            goto LABEL_162;
          v83 = 14;
          if (v19 < 0xE)
            v83 = v19;
          v75 = (void *)(v20 + v83);
          v76 = v19 - v83;
          v77 = (char **)v6;
          v78 = 102;
        }
        v84 = swift::Demangle::RemanglerBuffer::operator<<(v77, v78);
        v6 = (const void **)v84;
        v85 = v84[2];
        v86 = v75;
        v87 = v76;
LABEL_212:
        swift::Demangle::CharVector::append(v84, v86, v87, v85);
        v22 = (char **)v6;
        v23 = 95;
LABEL_213:
        this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<(v22, v23);
        goto LABEL_214;
      }
      v101 = *(_DWORD *)(v4 + 12736);
      v102 = *(unsigned int *)(v4 + 12740);
      v103 = *(char **)(v4 + 12728);
      if (v101 < v102)
        goto LABEL_257;
      v104 = *(_QWORD **)(v4 + 12744);
      v105 = (char *)v104[1];
      if (&v103[v102] == v105)
      {
        v123 = (unint64_t)&v103[v102 + 1];
        v106 = v104[2];
        if (v123 <= v106)
        {
          v104[1] = v123;
          LODWORD(v124) = 1;
LABEL_256:
          *(_DWORD *)(v4 + 12740) = v102 + v124;
LABEL_257:
          *(_DWORD *)(v4 + 12736) = v101 + 1;
          v103[v101] = 112;
          goto LABEL_214;
        }
      }
      else
      {
        v106 = v104[2];
      }
      if ((2 * v102) <= 4)
        v124 = 4;
      else
        v124 = (2 * v102);
      v125 = v124 + v102;
      if (!v105 || (unint64_t)&v105[v125] > v106)
      {
        v126 = 2 * v104[4];
        if (v126 <= v125 + 1)
          v126 = v125 + 1;
        v104[4] = v126;
        v127 = v126 + 8;
        this = (uint64_t)malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        *(_QWORD *)this = v104[3];
        v105 = (char *)(this + 8);
        v104[2] = this + v127;
        v104[3] = this;
      }
      v104[1] = &v105[v125];
      if ((_DWORD)v102)
        this = (uint64_t)memcpy(v105, *v6, v102);
      *(_QWORD *)(v4 + 12728) = v105;
      LODWORD(v102) = *(_DWORD *)(v4 + 12740);
      v103 = v105;
      v101 = *(_DWORD *)(v4 + 12736);
      goto LABEL_256;
    case 0x14uLL:
      if (*(_QWORD *)v20 == 0x2E6E69746C697542
        && *(_QWORD *)(v20 + 8) == 0x624F656764697242
        && *(_DWORD *)(v20 + 16) == 1952671082)
      {
        v107 = *(_DWORD *)(v4 + 12736);
        v108 = *(unsigned int *)(v4 + 12740);
        v109 = *(char **)(v4 + 12728);
        if (v107 < v108)
        {
LABEL_271:
          *(_DWORD *)(v4 + 12736) = v107 + 1;
          v109[v107] = 98;
          goto LABEL_214;
        }
        v110 = *(_QWORD **)(v4 + 12744);
        v111 = (char *)v110[1];
        if (&v109[v108] == v111)
        {
          v128 = (unint64_t)&v109[v108 + 1];
          v112 = v110[2];
          if (v128 <= v112)
          {
            v110[1] = v128;
            LODWORD(v129) = 1;
LABEL_270:
            *(_DWORD *)(v4 + 12740) = v108 + v129;
            goto LABEL_271;
          }
        }
        else
        {
          v112 = v110[2];
        }
        if ((2 * v108) <= 4)
          v129 = 4;
        else
          v129 = (2 * v108);
        v130 = v129 + v108;
        if (!v111 || (unint64_t)&v111[v130] > v112)
        {
          v131 = 2 * v110[4];
          if (v131 <= v130 + 1)
            v131 = v130 + 1;
          v110[4] = v131;
          v132 = v131 + 8;
          this = (uint64_t)malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
          *(_QWORD *)this = v110[3];
          v111 = (char *)(this + 8);
          v110[2] = this + v132;
          v110[3] = this;
        }
        v110[1] = &v111[v130];
        if ((_DWORD)v108)
          this = (uint64_t)memcpy(v111, *v6, v108);
        *(_QWORD *)(v4 + 12728) = v111;
        LODWORD(v108) = *(_DWORD *)(v4 + 12740);
        v109 = v111;
        v107 = *(_DWORD *)(v4 + 12736);
        goto LABEL_270;
      }
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x624F65766974614ELL
        || *(_DWORD *)(v20 + 16) != 1952671082)
      {
        goto LABEL_153;
      }
      v36 = *(_DWORD *)(v4 + 12736);
      v37 = *(unsigned int *)(v4 + 12740);
      v38 = *(char **)(v4 + 12728);
      if (v36 >= v37)
      {
        v39 = *(_QWORD **)(v4 + 12744);
        v40 = (char *)v39[1];
        if (&v38[v37] == v40)
        {
          v133 = (unint64_t)&v38[v37 + 1];
          v41 = v39[2];
          if (v133 <= v41)
          {
            v39[1] = v133;
            LODWORD(v134) = 1;
LABEL_289:
            *(_DWORD *)(v4 + 12740) = v37 + v134;
            goto LABEL_290;
          }
        }
        else
        {
          v41 = v39[2];
        }
        if ((2 * v37) <= 4)
          v134 = 4;
        else
          v134 = (2 * v37);
        v135 = v134 + v37;
        if (!v40 || (unint64_t)&v40[v135] > v41)
        {
          v136 = 2 * v39[4];
          if (v136 <= v135 + 1)
            v136 = v135 + 1;
          v39[4] = v136;
          v137 = v136 + 8;
          this = (uint64_t)malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
          *(_QWORD *)this = v39[3];
          v40 = (char *)(this + 8);
          v39[2] = this + v137;
          v39[3] = this;
        }
        v39[1] = &v40[v135];
        if ((_DWORD)v37)
          this = (uint64_t)memcpy(v40, *v6, v37);
        *(_QWORD *)(v4 + 12728) = v40;
        LODWORD(v37) = *(_DWORD *)(v4 + 12740);
        v38 = v40;
        v36 = *(_DWORD *)(v4 + 12736);
        goto LABEL_289;
      }
LABEL_290:
      *(_DWORD *)(v4 + 12736) = v36 + 1;
      v38[v36] = 111;
LABEL_214:
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return this;
    case 0x15uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x4F6E776F6E6B6E55
        || *(_QWORD *)(v20 + 13) != 0x7463656A624F6E77)
      {
        goto LABEL_153;
      }
      v44 = *(_DWORD *)(v4 + 12736);
      v45 = *(unsigned int *)(v4 + 12740);
      v46 = *(char **)(v4 + 12728);
      if (v44 < v45)
        goto LABEL_229;
      v47 = *(_QWORD **)(v4 + 12744);
      v48 = (char *)v47[1];
      if (&v46[v45] == v48)
      {
        v113 = (unint64_t)&v46[v45 + 1];
        v49 = v47[2];
        if (v113 <= v49)
        {
          v47[1] = v113;
          LODWORD(v114) = 1;
          goto LABEL_228;
        }
      }
      else
      {
        v49 = v47[2];
      }
      if ((2 * v45) <= 4)
        v114 = 4;
      else
        v114 = (2 * v45);
      v115 = v114 + v45;
      if (!v48 || (unint64_t)&v48[v115] > v49)
      {
        v116 = 2 * v47[4];
        if (v116 <= v115 + 1)
          v116 = v115 + 1;
        v47[4] = v116;
        v117 = v116 + 8;
        this = (uint64_t)malloc_type_malloc(v116 + 8, 0xD0263BC5uLL);
        *(_QWORD *)this = v47[3];
        v48 = (char *)(this + 8);
        v47[2] = this + v117;
        v47[3] = this;
      }
      v47[1] = &v48[v115];
      if ((_DWORD)v45)
        this = (uint64_t)memcpy(v48, *v6, v45);
      *(_QWORD *)(v4 + 12728) = v48;
      LODWORD(v45) = *(_DWORD *)(v4 + 12740);
      v46 = v48;
      v44 = *(_DWORD *)(v4 + 12736);
LABEL_228:
      *(_DWORD *)(v4 + 12740) = v45 + v114;
LABEL_229:
      *(_DWORD *)(v4 + 12736) = v44 + 1;
      v46[v44] = 79;
      goto LABEL_214;
    case 0x19uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x6156656661736E55
        || *(_QWORD *)(v20 + 16) != 0x656666754265756CLL
        || *(_BYTE *)(v20 + 24) != 114)
      {
        goto LABEL_153;
      }
      v53 = *(_DWORD *)(v4 + 12736);
      v54 = *(unsigned int *)(v4 + 12740);
      v55 = *(char **)(v4 + 12728);
      if (v53 < v54)
        goto LABEL_243;
      v56 = *(_QWORD **)(v4 + 12744);
      v57 = (char *)v56[1];
      if (&v55[v54] == v57)
      {
        v118 = (unint64_t)&v55[v54 + 1];
        v58 = v56[2];
        if (v118 <= v58)
        {
          v56[1] = v118;
          LODWORD(v119) = 1;
          goto LABEL_242;
        }
      }
      else
      {
        v58 = v56[2];
      }
      if ((2 * v54) <= 4)
        v119 = 4;
      else
        v119 = (2 * v54);
      v120 = v119 + v54;
      if (!v57 || (unint64_t)&v57[v120] > v58)
      {
        v121 = 2 * v56[4];
        if (v121 <= v120 + 1)
          v121 = v120 + 1;
        v56[4] = v121;
        v122 = v121 + 8;
        this = (uint64_t)malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
        *(_QWORD *)this = v56[3];
        v57 = (char *)(this + 8);
        v56[2] = this + v122;
        v56[3] = this;
      }
      v56[1] = &v57[v120];
      if ((_DWORD)v54)
        this = (uint64_t)memcpy(v57, *v6, v54);
      *(_QWORD *)(v4 + 12728) = v57;
      LODWORD(v54) = *(_DWORD *)(v4 + 12740);
      v55 = v57;
      v53 = *(_DWORD *)(v4 + 12736);
LABEL_242:
      *(_DWORD *)(v4 + 12740) = v54 + v119;
LABEL_243:
      *(_DWORD *)(v4 + 12736) = v53 + 1;
      v55[v53] = 66;
      goto LABEL_214;
    case 0x1BuLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x41746C7561666544
        || *(_QWORD *)(v20 + 16) != 0x726F7453726F7463
        || *(_QWORD *)(v20 + 19) != 0x656761726F745372)
      {
        goto LABEL_153;
      }
      v22 = (char **)v6;
      v23 = 68;
      goto LABEL_213;
    case 0x1DuLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x6661736E55776152
        || *(_QWORD *)(v20 + 16) != 0x756E69746E6F4365
        || *(_QWORD *)(v20 + 21) != 0x6E6F697461756E69)
      {
        goto LABEL_153;
      }
      v22 = (char **)v6;
      v23 = 99;
      goto LABEL_213;
    case 0x29uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x75616665446E6F4ELL
        || *(_QWORD *)(v20 + 16) != 0x697274736944746CLL
        || *(_QWORD *)(v20 + 24) != 0x7463416465747562
        || *(_QWORD *)(v20 + 32) != 0x6761726F7453726FLL
        || *(_BYTE *)(v20 + 40) != 101)
      {
        goto LABEL_153;
      }
      v22 = (char **)v6;
      v23 = 100;
      goto LABEL_213;
    default:
      if (v19 < 0xB)
        goto LABEL_166;
      goto LABEL_153;
  }
}

void *`anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>(swift::Demangle::NodeFactory **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t v7;
  swift::Demangle::Node *v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  swift::Demangle::Node *v14;
  void *result;
  char **v16;
  swift::Demangle::NodeFactory *v17;
  char *v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  swift::Demangle::Node *v24;
  int v25;
  swift::Demangle::Node *v26;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_11:
      switch((_DWORD)v7)
      {
        case 1:
LABEL_16:
          v10 = a3 + 1;
          v11 = v7 - 1;
          while (1)
          {
            v12 = *((unsigned __int8 *)v4 + 18);
            v13 = v12 - 1;
            if ((_DWORD)v12 != 1)
            {
              if ((_DWORD)v12 == 5)
              {
                v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if ((_DWORD)v12 != 2)
                  goto LABEL_17;
                v12 = 2;
              }
            }
            if (v12 > v11)
            {
              v14 = v4;
              if (v13 >= 2)
                v14 = *(swift::Demangle::Node **)v4;
              if (*(_DWORD *)a4)
                return result;
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1)
              goto LABEL_29;
          }
        case 5:
          v7 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v7)
            goto LABEL_16;
          break;
        case 2:
          v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      v16 = (char **)(this + 1591);
      v17 = this[1593];
      v18 = "XC";
      v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2))
      goto LABEL_29;
    v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v8 + 16) != 23)
    goto LABEL_11;
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      v9 = (_DWORD)v7 == 2;
      v7 = 2;
      if (!v9)
        v7 = 0;
    }
  }
  v20 = a3 + 1;
  v21 = v7 - 1;
  while (v21)
  {
    v22 = *((unsigned __int8 *)v4 + 18);
    v23 = v22 - 1;
    if ((_DWORD)v22 != 1)
    {
      if ((_DWORD)v22 == 5)
      {
        v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if ((_DWORD)v22 != 2)
          goto LABEL_32;
        v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      v24 = v4;
      if (v23 >= 2)
        v24 = *(swift::Demangle::Node **)v4;
      if (*(_DWORD *)a4)
        return result;
    }
  }
  swift::Demangle::CharVector::append((char **)this + 1591, "XzC", 3uLL, this[1593]);
  v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2)
    goto LABEL_48;
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::Node **)v4;
LABEL_48:
    v26 = *(swift::Demangle::Node **)v4;
  }
  else
  {
    v26 = 0;
  }
  swift::Demangle::CharVector::append((unsigned int *)this + 3182, *((_QWORD *)v26 + 1), this[1593]);
  v18 = *(char **)v26;
  v19 = *((_QWORD *)v26 + 1);
  v17 = this[1593];
  v16 = (char **)(this + 1591);
LABEL_51:
  result = swift::Demangle::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleClangType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  char **v6;
  void *result;

  v6 = (char **)((char *)this + 12728);
  swift::Demangle::CharVector::append((unsigned int *)this + 3182, *((_QWORD *)a2 + 1), *((swift::Demangle::NodeFactory **)this + 1593));
  result = swift::Demangle::CharVector::append(v6, *(void **)a2, *((_QWORD *)a2 + 1), *((_QWORD **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mo", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleConcreteProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v6;
  int v8;
  swift::Demangle::Node **v9;
  swift::Demangle::Node *v10;
  int v11;
  unsigned int v12;
  int v13;
  swift::Demangle::Node *v14;
  swift::Demangle::Node *v15;
  int v16;
  int v17;

  v6 = this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      v16 = 321;
      v17 = 10;
LABEL_18:
      *(_DWORD *)a4 = v17;
      *(_QWORD *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v16;
      return this;
    }
    v10 = *(swift::Demangle::Node **)v10;
  }
  if (*(_DWORD *)a4)
    return this;
  v12 = a3 + 1;
  v13 = *((unsigned __int8 *)a2 + 18);
  v14 = (swift::Demangle::Node *)a2;
  if (v13 == 2)
    goto LABEL_16;
  if (v13 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v14 = *a2;
LABEL_16:
    v15 = (swift::Demangle::Node *)*((_QWORD *)v14 + 1);
    goto LABEL_21;
  }
  v15 = 0;
LABEL_21:
  if (!*(_DWORD *)a4)
  {
    if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
    {
      swift::Demangle::CharVector::append((char **)v6 + 1591, "y", 1uLL, *((_QWORD **)v6 + 1593));
LABEL_27:
      this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v6 + 1591, "HC", 2uLL, *((_QWORD **)v6 + 1593));
      v17 = 0;
      v10 = 0;
      v16 = 0;
      goto LABEL_18;
    }
    if (!*(_DWORD *)a4)
      goto LABEL_27;
  }
  return this;
}

void *`anonymous namespace'::Remangler::manglePackProtocolConformance@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::CharVector::append(this + 1591, "HX", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  void *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = swift::Demangle::CharVector::append(this + 1591, "fMc", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleDeallocator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::CharVector::append(this + 1591, "fD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleDefaultArgumentInitializer@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  void *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = swift::Demangle::CharVector::append(this + 1591, "fA", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t `anonymous namespace'::Remangler::mangleDependentAssociatedConformance@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v5;
  _anonymous_namespace_::Remangler *v6;
  int v8;
  swift::Demangle::Node **v9;
  swift::Demangle::Node *v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  swift::Demangle::Node **v18;
  uint64_t *v19;
  swift::Demangle::Node **v20;
  unsigned int v21;

  v5 = a2;
  v6 = (_anonymous_namespace_::Remangler *)this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      v14 = 321;
      v15 = 10;
LABEL_44:
      *(_DWORD *)a4 = v15;
      *(_QWORD *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v14;
      return this;
    }
    v10 = *(swift::Demangle::Node **)v10;
  }
  if (*(_DWORD *)a4)
    return this;
  v12 = *((unsigned __int8 *)v5 + 18);
  if (v12 == 2)
    goto LABEL_16;
  if (v12 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    v5 = *(swift::Demangle::Node **)v5;
LABEL_16:
    v13 = (uint64_t *)*((_QWORD *)v5 + 1);
    goto LABEL_19;
  }
  v13 = 0;
LABEL_19:
  if (*((_WORD *)v13 + 8) != 232)
    goto LABEL_26;
  v16 = *((unsigned __int8 *)v13 + 18);
  if ((v16 - 1) < 2)
    goto LABEL_24;
  if (v16 == 5 && *((_DWORD *)v13 + 2))
  {
    v13 = (uint64_t *)*v13;
LABEL_24:
    v13 = (uint64_t *)*v13;
    goto LABEL_26;
  }
  v13 = 0;
LABEL_26:
  if ((this & 1) != 0)
  {
LABEL_43:
    v15 = 0;
    v10 = 0;
    v14 = 0;
    goto LABEL_44;
  }
  v17 = *((unsigned __int8 *)v13 + 18);
  v18 = (swift::Demangle::Node **)v13;
  if ((v17 - 1) >= 2)
  {
    if (v17 == 5)
    {
      v19 = (uint64_t *)*v13;
      v18 = (swift::Demangle::Node **)*v13;
LABEL_35:
      v20 = (swift::Demangle::Node **)&v19[*((unsigned int *)v13 + 2)];
      goto LABEL_39;
    }
    v18 = 0;
  }
  switch(v17)
  {
    case 1:
      v20 = (swift::Demangle::Node **)(v13 + 1);
      break;
    case 2:
      v20 = (swift::Demangle::Node **)(v13 + 2);
      break;
    case 5:
      v19 = (uint64_t *)*v13;
      goto LABEL_35;
    default:
      v20 = 0;
      break;
  }
LABEL_39:
  if (v18 == v20)
    goto LABEL_43;
  v21 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    if (++v18 == v20)
      goto LABEL_43;
  }
}

void `anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v5;
  int v8;
  swift::Demangle::Node *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v5 = a2;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::Node **)a2;
LABEL_5:
    v10 = *(_QWORD *)v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v15 = 0uLL;
  LOBYTE(v16) = 0;
  {
    v11 = *((_QWORD *)this + 1585);
    if (v11 > 0xF)
    {
      v13 = *((_DWORD *)this + 3178) + 16;
      v17 = v15;
      v18 = v16;
      v19 = v13;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v17, &v17);
    }
    else
    {
      *((_QWORD *)this + 1585) = v11 + 1;
      v12 = (char *)this + 24 * v11 + 12296;
      *(_OWORD *)v12 = v15;
      v12[16] = v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v14 = *((unsigned __int8 *)v5 + 18);
  if (v14 == 2)
    goto LABEL_15;
  if (v14 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    v5 = *(swift::Demangle::Node **)v5;
LABEL_15:
    return;
  }
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  int v7;
  swift::Demangle::Node *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  swift::Demangle::Node **v14;
  swift::Demangle::Node *v15;
  int v16;
  swift::Demangle::Node **v17;
  uint64_t *v18;
  uint64_t **v19;
  swift::Demangle::Node **v20;
  int v21;
  swift::Demangle::Node **v22;
  swift::Demangle::Node *v23;
  char **v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  size_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t **v32;

  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1048;
      return this;
    }
    v8 = *(swift::Demangle::Node **)a2;
  }
  v9 = (uint64_t *)*((_QWORD *)v8 + 1);
  v10 = *((unsigned __int8 *)v9 + 18);
  v11 = v9;
  if ((v10 - 1) >= 2)
  {
    if (v10 != 5 || !*((_DWORD *)v9 + 2))
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = 1050;
      return this;
    }
    v11 = (uint64_t *)*v9;
  }
  v12 = a3 + 1;
  if (*(_WORD *)(*v11 + 16) != 180)
  {
    if (*(_DWORD *)a4)
      return this;
    v13 = *((unsigned __int8 *)a2 + 18);
    v14 = (swift::Demangle::Node **)a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        v15 = 0;
LABEL_30:
        if ((_DWORD)v29)
        {
LABEL_52:
          *(_OWORD *)a4 = v29;
          *(_QWORD *)(a4 + 16) = v30;
          return this;
        }
        v19 = v32;
        if ((v31 & 0x80000000) == 0 && !v32)
        {
          *(_DWORD *)a4 = 1;
          *(_QWORD *)(a4 + 8) = a2;
          *(_DWORD *)(a4 + 16) = 1082;
          return this;
        }
        if (v31 == 1)
        {
          v27 = "Rc";
        }
        else if (v31)
        {
          if (v31 == -1)
          {
            v24 = (char **)(v5 + 1591);
            v25 = (_QWORD *)v5[1593];
            v26 = "RB";
            goto LABEL_65;
          }
          v27 = "RC";
        }
        else
        {
          v27 = "Rb";
        }
        goto LABEL_72;
      }
      v14 = *(swift::Demangle::Node ***)a2;
    }
    v15 = *v14;
    goto LABEL_30;
  }
  if (*((_WORD *)v9 + 8) != 232)
    goto LABEL_25;
  if ((v10 - 1) < 2)
    goto LABEL_15;
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    v9 = (uint64_t *)*v9;
LABEL_15:
    v9 = (uint64_t *)*v9;
    goto LABEL_25;
  }
  v9 = 0;
LABEL_25:
  {
    v16 = *((unsigned __int8 *)v9 + 18);
    v17 = (swift::Demangle::Node **)v9;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        v18 = (uint64_t *)*v9;
        v17 = (swift::Demangle::Node **)*v9;
LABEL_39:
        v20 = (swift::Demangle::Node **)&v18[*((unsigned int *)v9 + 2)];
        goto LABEL_45;
      }
      v17 = 0;
    }
    switch(v16)
    {
      case 1:
        v20 = (swift::Demangle::Node **)(v9 + 1);
        goto LABEL_45;
      case 2:
        v20 = (swift::Demangle::Node **)(v9 + 2);
        goto LABEL_45;
      case 5:
        v18 = (uint64_t *)*v9;
        goto LABEL_39;
    }
    v20 = 0;
LABEL_45:
    while (v17 != v20)
    {
      if (*(_DWORD *)a4)
        return this;
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v21 = *((unsigned __int8 *)a2 + 18);
  v22 = (swift::Demangle::Node **)a2;
  if ((v21 - 1) < 2)
    goto LABEL_50;
  v23 = 0;
  if (v21 != 5)
    goto LABEL_51;
  if (*((_DWORD *)a2 + 2))
  {
    v22 = *(swift::Demangle::Node ***)a2;
LABEL_50:
    v23 = *v22;
    goto LABEL_51;
  }
  v23 = 0;
LABEL_51:
  if ((_DWORD)v29)
    goto LABEL_52;
  v19 = v32;
  if ((v31 & 0x80000000) == 0 && !v32)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1058;
    return this;
  }
  if (v31 == 1)
  {
    v27 = "Rp";
LABEL_72:
    v28 = 2;
    goto LABEL_73;
  }
  if (!v31)
  {
    v27 = "R";
    v28 = 1;
LABEL_73:
    swift::Demangle::CharVector::append((char **)v5 + 1591, v27, v28, (_QWORD *)v5[1593]);
    goto LABEL_74;
  }
  if (v31 != -1)
  {
    v27 = "RP";
    goto LABEL_72;
  }
  v24 = (char **)(v5 + 1591);
  v25 = (_QWORD *)v5[1593];
  v26 = "RQ";
LABEL_65:
  this = (uint64_t *)swift::Demangle::CharVector::append(v24, v26, 2uLL, v25);
LABEL_74:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t *v7;
  uint64_t **v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  unsigned int v23;
  size_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;

  v4 = (uint64_t)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = (uint64_t *)a2;
  if ((v6 - 1) >= 2)
    v7 = *a2;
  if (!*(_QWORD *)*v7)
  {
    v8 = a2;
    if (v6 == 5)
      v8 = (uint64_t **)*a2;
    if (!*v8[1])
    {
      v23 = this[3184];
      v24 = this[3185];
      v25 = (char *)*((_QWORD *)this + 1591);
      if (v23 < v24)
      {
LABEL_46:
        *(_DWORD *)(v4 + 12736) = v23 + 1;
        v25[v23] = 120;
        goto LABEL_27;
      }
      v26 = (_QWORD *)*((_QWORD *)this + 1593);
      v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        v29 = (unint64_t)&v25[v24 + 1];
        v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v30) = 1;
LABEL_45:
          *(_DWORD *)(v4 + 12740) = v24 + v30;
          goto LABEL_46;
        }
      }
      else
      {
        v28 = v26[2];
      }
      if ((2 * v24) <= 4)
        v30 = 4;
      else
        v30 = (2 * v24);
      v31 = v30 + v24;
      if (!v27 || (unint64_t)&v27[v31] > v28)
      {
        v32 = 2 * v26[4];
        if (v32 <= v31 + 1)
          v32 = v31 + 1;
        v26[4] = v32;
        v33 = v32 + 8;
        this = (unsigned int *)malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        v34 = (char *)this + v33;
        *(_QWORD *)this = v26[3];
        v27 = (char *)(this + 2);
        v26[2] = v34;
        v26[3] = this;
      }
      v26[1] = &v27[v31];
      if ((_DWORD)v24)
        this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
      *(_QWORD *)(v4 + 12728) = v27;
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      v25 = v27;
      v23 = *(_DWORD *)(v4 + 12736);
      goto LABEL_45;
    }
  }
  v9 = this[3184];
  v10 = this[3185];
  v11 = (char *)*((_QWORD *)this + 1591);
  if (v9 >= v10)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 1593);
    v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 12740) = v10 + v16;
        goto LABEL_26;
      }
    }
    else
    {
      v14 = v12[2];
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (v13)
      v18 = (unint64_t)&v13[v16 + v10] > v14;
    else
      v18 = 1;
    v11 = (char *)v12[1];
    if (v18)
    {
      v19 = 2 * v12[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v12[4] = v19;
      v20 = v19 + 8;
      v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v22 = (char *)v21 + v20;
      *v21 = v12[3];
      v11 = (char *)(v21 + 1);
      v12[2] = v22;
      v12[3] = v21;
    }
    v12[1] = &v11[v17];
    if ((_DWORD)v10)
      memcpy(v11, *(const void **)(v4 + 12728), v10);
    *(_QWORD *)(v4 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v4 + 12740);
    v9 = *(_DWORD *)(v4 + 12736);
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(v4 + 12736) = v9 + 1;
  v11[v9] = 113;
LABEL_27:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  swift::Demangle::Node *v9;
  uint64_t *result;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  uint64_t **v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t **v18;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v11 = *(swift::Demangle::Node ***)a2;
    goto LABEL_12;
  }
  v12 = 0;
LABEL_14:
  if ((_DWORD)v15)
  {
    *(_OWORD *)a4 = v15;
    *(_QWORD *)(a4 + 16) = v16;
    return result;
  }
  v13 = v18;
  if ((v17 & 0x80000000) == 0 && !v18)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1162;
    return result;
  }
  if (v17 == 1)
  {
    v14 = "Rt";
LABEL_26:
    swift::Demangle::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
    goto LABEL_27;
  }
  if (!v17)
  {
    v14 = "Rs";
    goto LABEL_26;
  }
  if (v17 != -1)
  {
    v14 = "RT";
    goto LABEL_26;
  }
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "RS", 2uLL, this[1593]);
LABEL_27:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericSameShapeRequirement@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  swift::Demangle::Node *v9;
  uint64_t *result;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  uint64_t **v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t **v17;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v11 = *(swift::Demangle::Node ***)a2;
    goto LABEL_12;
  }
  v12 = 0;
LABEL_14:
  if ((_DWORD)v14)
  {
    *(_OWORD *)a4 = v14;
    *(_QWORD *)(a4 + 16) = v15;
  }
  else
  {
    v13 = v17;
    if (v16 < 0 || v17)
    {
      if (v16)
      {
        *(_DWORD *)a4 = 1;
      }
      else
      {
        swift::Demangle::CharVector::append(this + 1591, "Rh", 2uLL, this[1593]);
        *(_DWORD *)a4 = 0;
      }
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
    }
    else
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1190;
    }
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t **v12;
  const char *v13;
  char *v14;
  swift::Demangle::Node *v15;
  uint64_t v16;
  swift::Demangle::Node *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t **v36;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if ((_DWORD)v33)
  {
    *(_OWORD *)a4 = v33;
    a4[2] = v34;
    return result;
  }
  v12 = v36;
  if ((v35 & 0x80000000) == 0 && !v36)
  {
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1210;
    return result;
  }
  if (v35 == -1)
  {
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "RL", 2uLL, this[1593]);
  }
  else
  {
    v13 = "RM";
    if (v35 == 1)
      v13 = "Rm";
    if (v35)
      v14 = (char *)v13;
    else
      v14 = "Rl";
    swift::Demangle::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  }
  if (*((_BYTE *)a2 + 18) != 5)
  {
    v17 = a2[1];
    if (*((_WORD *)v17 + 8) == 101)
    {
      v18 = *((_QWORD *)v17 + 1);
      v15 = (swift::Demangle::Node *)a2;
      if (v18 != 1)
        goto LABEL_23;
      goto LABEL_26;
    }
LABEL_29:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1221;
    return result;
  }
  v15 = *a2;
  v16 = *((_QWORD *)*a2 + 1);
  if (*(_WORD *)(v16 + 16) != 101)
    goto LABEL_29;
  if (*(_QWORD *)(v16 + 8) != 1)
  {
LABEL_23:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1222;
    return result;
  }
LABEL_26:
  v19 = ***((_BYTE ***)v15 + 1);
  v20 = *((_DWORD *)this + 3184);
  v21 = *((unsigned int *)this + 3185);
  v22 = this[1591];
  if (v20 < v21)
    goto LABEL_44;
  v23 = this[1593];
  v24 = (char *)*((_QWORD *)v23 + 1);
  if (&v22[v21] != v24)
  {
    v25 = *((_QWORD *)v23 + 2);
LABEL_31:
    if ((2 * v21) <= 4)
      v27 = 4;
    else
      v27 = (2 * v21);
    v28 = v27 + v21;
    if (!v24 || (unint64_t)&v24[v28] > v25)
    {
      v29 = 2 * *((_QWORD *)v23 + 4);
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      *((_QWORD *)v23 + 4) = v29;
      v32 = v19;
      v30 = v29 + 8;
      result = (uint64_t *)malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      *result = *((_QWORD *)v23 + 3);
      v24 = (char *)(result + 1);
      v31 = (char *)result + v30;
      v19 = v32;
      *((_QWORD *)v23 + 2) = v31;
      *((_QWORD *)v23 + 3) = result;
    }
    *((_QWORD *)v23 + 1) = &v24[v28];
    if ((_DWORD)v21)
      result = (uint64_t *)memcpy(v24, this[1591], v21);
    this[1591] = v24;
    LODWORD(v21) = *((_DWORD *)this + 3185);
    v22 = v24;
    v20 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  v26 = (unint64_t)&v22[v21 + 1];
  v25 = *((_QWORD *)v23 + 2);
  if (v26 > v25)
    goto LABEL_31;
  *((_QWORD *)v23 + 1) = v26;
  LODWORD(v27) = 1;
LABEL_43:
  *((_DWORD *)this + 3185) = v21 + v27;
LABEL_44:
  *((_DWORD *)this + 3184) = v20 + 1;
  v22[v20] = v19;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_50;
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)a2 + 18) != 5)
      goto LABEL_50;
  }
  if (*((_DWORD *)a2 + 2) < 4u
  {
LABEL_50:
    *(_DWORD *)a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
  }
  return result;
}

char *`anonymous namespace'::Remangler::mangleDependentGenericParamPackMarker@<X0>(char *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::Node *v3;
  char *v4;
  int v6;
  swift::Demangle::Node *v7;
  int v8;
  uint64_t **v9;
  int v10;
  int v11;
  int v12;
  uint64_t **v13;

  v3 = a2;
  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v10 = 1265;
      v11 = 1;
      goto LABEL_21;
    }
    v7 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v7 + 16) == 232)
  {
    swift::Demangle::CharVector::append((char **)this + 1591, "Rv", 2uLL, *((_QWORD **)this + 1593));
    v8 = *((unsigned __int8 *)v3 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v3 + 2))
      {
        v9 = 0;
LABEL_14:
        v12 = *((unsigned __int8 *)v9 + 18);
        if ((v12 - 1) >= 2)
        {
          if (v12 != 5 || !*((_DWORD *)v9 + 2))
          {
            v13 = 0;
            goto LABEL_20;
          }
          v9 = (uint64_t **)*v9;
        }
        v13 = (uint64_t **)*v9;
LABEL_20:
        v11 = 0;
        v3 = 0;
        v10 = 0;
        goto LABEL_21;
      }
      v3 = *(swift::Demangle::Node **)v3;
    }
    v9 = *(uint64_t ***)v3;
    goto LABEL_14;
  }
  v10 = 1266;
  v11 = 1;
LABEL_21:
  *(_DWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v10;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>(uint64_t *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  char v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node *v14;
  swift::Demangle::Node *v15;
  _DWORD *v16;
  unsigned int v17;
  size_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  size_t v30;
  unsigned int v31;
  swift::Demangle::Node *v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  size_t v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  if ((_DWORD)v7 == 1)
    goto LABEL_6;
  if ((_DWORD)v7 == 5)
  {
    v7 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v7)
      goto LABEL_6;
LABEL_29:
    v8 = 0;
    goto LABEL_31;
  }
  if ((_DWORD)v7 != 2)
    goto LABEL_29;
  v7 = 2;
LABEL_6:
  v8 = 0;
  v9 = 0;
  v10 = a3 + 1;
  do
  {
    v11 = *((unsigned __int8 *)a2 + 18);
    if ((v11 - 1) >= 2)
    {
      v12 = 0;
      v13 = *a2;
    }
    else
    {
      v12 = 1;
      v13 = (swift::Demangle::Node *)a2;
    }
    if (*(_WORD *)(*((_QWORD *)v13 + v9) + 16) == 37)
    {
      v8 = v9 + 1;
      goto LABEL_8;
    }
    if ((_DWORD)v11 == 1)
      goto LABEL_17;
    if ((_DWORD)v11 != 5)
    {
      if ((_DWORD)v11 != 2)
        goto LABEL_23;
      v11 = 2;
LABEL_17:
      if (v11 <= v9)
        goto LABEL_23;
      goto LABEL_18;
    }
    if (*((unsigned int *)a2 + 2) <= v9)
    {
LABEL_23:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
LABEL_18:
    v14 = (swift::Demangle::Node *)a2;
    if ((v12 & 1) == 0)
      v14 = *a2;
    if (*(_DWORD *)a4)
      return this;
LABEL_8:
    ++v9;
  }
  while (v7 != v9);
  if (v8 == 1)
  {
    v15 = (swift::Demangle::Node *)a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
      v15 = *a2;
    if (**(_QWORD **)v15 == 1)
    {
      v16 = (_DWORD *)(v5 + 12736);
      goto LABEL_76;
    }
    v8 = 1;
  }
LABEL_31:
  v16 = (_DWORD *)(v5 + 12736);
  v17 = *(_DWORD *)(v5 + 12736);
  v18 = *(unsigned int *)(v5 + 12740);
  v19 = *(char **)(v5 + 12728);
  if (v17 >= v18)
  {
    v20 = *(_QWORD **)(v5 + 12744);
    v21 = (char *)v20[1];
    if (&v19[v18] != v21)
    {
      v22 = v20[2];
      goto LABEL_35;
    }
    v23 = (unint64_t)&v19[v18 + 1];
    v22 = v20[2];
    if (v23 <= v22)
    {
      v20[1] = v23;
      LODWORD(v24) = 1;
    }
    else
    {
LABEL_35:
      if ((2 * v18) <= 4)
        v24 = 4;
      else
        v24 = (2 * v18);
      v25 = v24 + v18;
      if (!v21 || (unint64_t)&v21[v25] > v22)
      {
        v26 = 2 * v20[4];
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        v20[4] = v26;
        v27 = v26 + 8;
        this = (uint64_t *)malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        v28 = (char *)this + v27;
        *this = v20[3];
        v21 = (char *)(this + 1);
        v20[2] = v28;
        v20[3] = this;
      }
      v20[1] = &v21[v25];
      if ((_DWORD)v18)
        this = (uint64_t *)memcpy(v21, *(const void **)(v5 + 12728), v18);
      *(_QWORD *)(v5 + 12728) = v21;
      LODWORD(v18) = *(_DWORD *)(v5 + 12740);
      v19 = v21;
      v17 = *(_DWORD *)(v5 + 12736);
    }
    v16 = (_DWORD *)(v5 + 12736);
    *(_DWORD *)(v5 + 12740) = v18 + v24;
  }
  *v16 = v17 + 1;
  v19[v17] = 114;
  if (v8)
  {
    v29 = 0;
    while (1)
    {
      v32 = (swift::Demangle::Node *)a2;
      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
        v32 = *a2;
      v33 = **((_QWORD **)v32 + v29);
      if (v33)
      {
        goto LABEL_53;
      }
      v31 = *(_DWORD *)(v5 + 12736);
      v30 = *(unsigned int *)(v5 + 12740);
      v34 = *(_BYTE **)(v5 + 12728);
      if (v31 >= v30)
        break;
LABEL_52:
      *v16 = v31 + 1;
      v34[v31] = 122;
LABEL_53:
      if (v8 == ++v29)
        goto LABEL_76;
    }
    v35 = *(_QWORD **)(v5 + 12744);
    v36 = (_BYTE *)v35[1];
    if (&v34[v30] != v36)
    {
      v37 = v35[2];
      goto LABEL_62;
    }
    v38 = (unint64_t)&v34[v30 + 1];
    v37 = v35[2];
    if (v38 <= v37)
    {
      v35[1] = v38;
      LODWORD(v39) = 1;
    }
    else
    {
LABEL_62:
      if ((2 * v30) <= 4)
        v39 = 4;
      else
        v39 = (2 * v30);
      v40 = v39 + v30;
      if (v36)
        v41 = (unint64_t)&v36[v39 + v30] > v37;
      else
        v41 = 1;
      v34 = (_BYTE *)v35[1];
      if (v41)
      {
        v42 = 2 * v35[4];
        if (v42 <= v40 + 1)
          v42 = v40 + 1;
        v35[4] = v42;
        v43 = v42 + 8;
        this = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        v44 = (char *)this + v43;
        *this = v35[3];
        v34 = this + 1;
        v35[2] = v44;
        v35[3] = this;
      }
      v35[1] = &v34[v40];
      if ((_DWORD)v30)
        this = (uint64_t *)memcpy(v34, *(const void **)(v5 + 12728), v30);
      *(_QWORD *)(v5 + 12728) = v34;
      LODWORD(v30) = *(_DWORD *)(v5 + 12740);
      v31 = *(_DWORD *)(v5 + 12736);
      v16 = (_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v30 + v39;
    goto LABEL_52;
  }
LABEL_76:
  v45 = *(_DWORD *)(v5 + 12736);
  v46 = *(unsigned int *)(v5 + 12740);
  v47 = *(char **)(v5 + 12728);
  if (v45 >= v46)
  {
    v48 = *(_QWORD **)(v5 + 12744);
    v49 = (char *)v48[1];
    if (&v47[v46] != v49)
    {
      v50 = v48[2];
      goto LABEL_80;
    }
    v51 = (unint64_t)&v47[v46 + 1];
    v50 = v48[2];
    if (v51 <= v50)
    {
      v48[1] = v51;
      LODWORD(v52) = 1;
    }
    else
    {
LABEL_80:
      if ((2 * v46) <= 4)
        v52 = 4;
      else
        v52 = (2 * v46);
      v53 = v52 + v46;
      if (!v49 || (unint64_t)&v49[v53] > v50)
      {
        v54 = 2 * v48[4];
        if (v54 <= v53 + 1)
          v54 = v53 + 1;
        v48[4] = v54;
        v55 = v54 + 8;
        this = (uint64_t *)malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        v56 = (char *)this + v55;
        *this = v48[3];
        v49 = (char *)(this + 1);
        v48[2] = v56;
        v48[3] = this;
      }
      v48[1] = &v49[v53];
      if ((_DWORD)v46)
        this = (uint64_t *)memcpy(v49, *(const void **)(v5 + 12728), v46);
      *(_QWORD *)(v5 + 12728) = v49;
      LODWORD(v46) = *(_DWORD *)(v5 + 12740);
      v47 = v49;
      v45 = *(_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v46 + v52;
  }
  *v16 = v45 + 1;
  v47[v45] = 108;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericType@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  unsigned int v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v13 = *(_DWORD *)(v5 + 12736);
  v14 = *(unsigned int *)(v5 + 12740);
  v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    v16 = *(_QWORD **)(v5 + 12744);
    v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      v19 = (unint64_t)&v15[v14 + 1];
      v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      v18 = v16[2];
    }
    if ((2 * v14) <= 4)
      v20 = 4;
    else
      v20 = (2 * v14);
    v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      v22 = 2 * v16[4];
      if (v22 <= v21 + 1)
        v22 = v21 + 1;
      v16[4] = v22;
      v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      v24 = (char *)this + v23;
      *this = v16[3];
      v17 = (char *)(this + 1);
      v16[2] = v24;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if ((_DWORD)v14)
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    *(_QWORD *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    v15 = v17;
    v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 117;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_QWORD *`anonymous namespace'::Remangler::mangleDependentMemberType@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t **v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  size_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  size_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  swift::Demangle::Node *v55;

  if ((_DWORD)v52)
  {
    *(_OWORD *)a4 = v52;
    *(_QWORD *)(a4 + 16) = v53;
    return result;
  }
  if (v54 == -1)
    goto LABEL_82;
  v8 = (uint64_t **)v55;
  if (v54 != 1)
  {
    if (!v54)
    {
      *(_DWORD *)a4 = 12;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1289;
      return result;
    }
    v15 = *((_DWORD *)this + 3184);
    v16 = *((unsigned int *)this + 3185);
    v17 = (char *)this[1591];
    if (v15 < v16)
    {
LABEL_44:
      *((_DWORD *)this + 3184) = v15 + 1;
      v17[v15] = 81;
      if (v8)
      {
        goto LABEL_82;
      }
      v26 = *((_DWORD *)this + 3184);
      v37 = *((unsigned int *)this + 3185);
      v28 = (char *)this[1591];
      if (v26 < v37)
        goto LABEL_80;
      v38 = this[1593];
      v39 = (char *)v38[1];
      if (&v28[v37] == v39)
      {
        v46 = (unint64_t)&v28[v37 + 1];
        v40 = v38[2];
        if (v46 <= v40)
        {
          v38[1] = v46;
          LODWORD(v47) = 1;
LABEL_79:
          *((_DWORD *)this + 3185) = v37 + v47;
LABEL_80:
          *((_DWORD *)this + 3184) = v26 + 1;
          v51 = 88;
          goto LABEL_81;
        }
      }
      else
      {
        v40 = v38[2];
      }
      if ((2 * v37) <= 4)
        v47 = 4;
      else
        v47 = (2 * v37);
      v48 = v47 + v37;
      if (!v39 || (unint64_t)&v39[v48] > v40)
      {
        v49 = 2 * v38[4];
        if (v49 <= v48 + 1)
          v49 = v48 + 1;
        v38[4] = v49;
        v50 = v49 + 8;
        result = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
        *result = v38[3];
        v39 = (char *)(result + 1);
        v38[2] = (char *)result + v50;
        v38[3] = result;
      }
      v38[1] = &v39[v48];
      if ((_DWORD)v37)
        result = memcpy(v39, this[1591], v37);
      this[1591] = v39;
      LODWORD(v37) = *((_DWORD *)this + 3185);
      v28 = v39;
      v26 = *((_DWORD *)this + 3184);
      goto LABEL_79;
    }
    v18 = this[1593];
    v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      v32 = (unint64_t)&v17[v16 + 1];
      v20 = v18[2];
      if (v32 <= v20)
      {
        v18[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *((_DWORD *)this + 3185) = v16 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      v20 = v18[2];
    }
    if ((2 * v16) <= 4)
      v33 = 4;
    else
      v33 = (2 * v16);
    v34 = v33 + v16;
    if (!v19 || (unint64_t)&v19[v34] > v20)
    {
      v35 = 2 * v18[4];
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      v18[4] = v35;
      v36 = v35 + 8;
      result = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      *result = v18[3];
      v19 = (char *)(result + 1);
      v18[2] = (char *)result + v36;
      v18[3] = result;
    }
    v18[1] = &v19[v34];
    if ((_DWORD)v16)
      result = memcpy(v19, this[1591], v16);
    this[1591] = v19;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    v17 = v19;
    v15 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  v9 = *((_DWORD *)this + 3184);
  v10 = *((unsigned int *)this + 3185);
  v11 = (char *)this[1591];
  if (v9 >= v10)
  {
    v12 = this[1593];
    v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      v21 = (unint64_t)&v11[v10 + 1];
      v14 = v12[2];
      if (v21 <= v14)
      {
        v12[1] = v21;
        LODWORD(v22) = 1;
LABEL_25:
        *((_DWORD *)this + 3185) = v10 + v22;
        goto LABEL_26;
      }
    }
    else
    {
      v14 = v12[2];
    }
    if ((2 * v10) <= 4)
      v22 = 4;
    else
      v22 = (2 * v10);
    v23 = v22 + v10;
    if (!v13 || (unint64_t)&v13[v23] > v14)
    {
      v24 = 2 * v12[4];
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      v12[4] = v24;
      v25 = v24 + 8;
      result = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      *result = v12[3];
      v13 = (char *)(result + 1);
      v12[2] = (char *)result + v25;
      v12[3] = result;
    }
    v12[1] = &v13[v23];
    if ((_DWORD)v10)
      result = memcpy(v13, this[1591], v10);
    this[1591] = v13;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    v11 = v13;
    v9 = *((_DWORD *)this + 3184);
    goto LABEL_25;
  }
LABEL_26:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = 81;
  if (!v8)
  {
    v26 = *((_DWORD *)this + 3184);
    v27 = *((unsigned int *)this + 3185);
    v28 = (char *)this[1591];
    if (v26 < v27)
    {
LABEL_77:
      *((_DWORD *)this + 3184) = v26 + 1;
      v51 = 120;
LABEL_81:
      v28[v26] = v51;
      goto LABEL_82;
    }
    v29 = this[1593];
    v30 = (char *)v29[1];
    if (&v28[v27] == v30)
    {
      v41 = (unint64_t)&v28[v27 + 1];
      v31 = v29[2];
      if (v41 <= v31)
      {
        v29[1] = v41;
        LODWORD(v42) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v27 + v42;
        goto LABEL_77;
      }
    }
    else
    {
      v31 = v29[2];
    }
    if ((2 * v27) <= 4)
      v42 = 4;
    else
      v42 = (2 * v27);
    v43 = v42 + v27;
    if (!v30 || (unint64_t)&v30[v43] > v31)
    {
      v44 = 2 * v29[4];
      if (v44 <= v43 + 1)
        v44 = v43 + 1;
      v29[4] = v44;
      v45 = v44 + 8;
      result = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
      *result = v29[3];
      v30 = (char *)(result + 1);
      v29[2] = (char *)result + v45;
      v29[3] = result;
    }
    v29[1] = &v30[v43];
    if ((_DWORD)v27)
      result = memcpy(v30, this[1591], v27);
    this[1591] = v30;
    LODWORD(v27) = *((_DWORD *)this + 3185);
    v28 = v30;
    v26 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
LABEL_82:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDependentProtocolConformanceRoot@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v8;
  swift::Demangle::Node **v9;
  swift::Demangle::Node *v10;
  int v11;
  int v12;
  swift::Demangle::Node *v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  swift::Demangle::Node **v19;
  uint64_t *v20;
  swift::Demangle::Node **v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;

  v6 = (uint64_t)this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      v15 = 321;
      v16 = 10;
LABEL_18:
      *(_DWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v15;
      return this;
    }
    v10 = *(swift::Demangle::Node **)v10;
  }
  if (*(_DWORD *)a4)
    return this;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2)
    goto LABEL_16;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_16:
    v14 = (uint64_t *)*((_QWORD *)v13 + 1);
    goto LABEL_21;
  }
  v14 = 0;
LABEL_21:
  if (*((_WORD *)v14 + 8) != 232)
    goto LABEL_28;
  v17 = *((unsigned __int8 *)v14 + 18);
  if ((v17 - 1) < 2)
    goto LABEL_26;
  if (v17 == 5 && *((_DWORD *)v14 + 2))
  {
    v14 = (uint64_t *)*v14;
LABEL_26:
    v14 = (uint64_t *)*v14;
    goto LABEL_28;
  }
  v14 = 0;
LABEL_28:
  {
LABEL_45:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)(v6 + 12728), "HD", 2uLL, *(_QWORD **)(v6 + 12744));
    v10 = 0;
    if (*((_BYTE *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u)
        v10 = 0;
      else
        v10 = (swift::Demangle::Node *)*((_QWORD *)*a2 + 2);
    }
    v23 = *((unsigned __int16 *)v10 + 8);
    if (v23 == 246 || v23 == 102)
    {
      v24 = *((unsigned __int8 *)v10 + 18);
      if ((v23 != 102) == (v24 == 4))
      {
        v15 = 2713;
        v16 = 1;
      }
      else
      {
        if (v24 == 4)
          v25 = *(_QWORD *)v10 + 2;
        else
          v25 = 1;
        v16 = 0;
        v10 = 0;
        v15 = 0;
      }
    }
    else
    {
      v15 = 2711;
      v16 = 1;
    }
    goto LABEL_18;
  }
  v18 = *((unsigned __int8 *)v14 + 18);
  v19 = (swift::Demangle::Node **)v14;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 5)
    {
      v20 = (uint64_t *)*v14;
      v19 = (swift::Demangle::Node **)*v14;
LABEL_37:
      v21 = (swift::Demangle::Node **)&v20[*((unsigned int *)v14 + 2)];
      goto LABEL_41;
    }
    v19 = 0;
  }
  switch(v18)
  {
    case 1:
      v21 = (swift::Demangle::Node **)(v14 + 1);
      break;
    case 2:
      v21 = (swift::Demangle::Node **)(v14 + 2);
      break;
    case 5:
      v20 = (uint64_t *)*v14;
      goto LABEL_37;
    default:
      v21 = 0;
      break;
  }
LABEL_41:
  if (v19 == v21)
    goto LABEL_45;
  v22 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    if (++v19 == v21)
      goto LABEL_45;
  }
}

void *`anonymous namespace'::Remangler::mangleDependentProtocolConformanceInherited@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  void *result;
  int v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node *v14;
  int v15;
  int v16;
  swift::Demangle::Node **v17;
  swift::Demangle::Node *v18;
  swift::Demangle::Node **v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  if (*((_WORD *)v14 + 8) == 232)
  {
    v15 = *((unsigned __int8 *)v14 + 18);
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v14 + 2))
      {
        v14 = 0;
        goto LABEL_21;
      }
      v14 = *(swift::Demangle::Node **)v14;
    }
    v14 = *(swift::Demangle::Node **)v14;
  }
LABEL_21:
  {
    v16 = *((unsigned __int8 *)v14 + 18);
    v17 = (swift::Demangle::Node **)v14;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        v18 = *(swift::Demangle::Node **)v14;
        v17 = *(swift::Demangle::Node ***)v14;
LABEL_30:
        v19 = (swift::Demangle::Node **)((char *)v18 + 8 * *((unsigned int *)v14 + 2));
        goto LABEL_36;
      }
      v17 = 0;
    }
    switch(v16)
    {
      case 1:
        v19 = (swift::Demangle::Node **)((char *)v14 + 8);
        goto LABEL_36;
      case 2:
        v19 = (swift::Demangle::Node **)((char *)v14 + 16);
        goto LABEL_36;
      case 5:
        v18 = *(swift::Demangle::Node **)v14;
        goto LABEL_30;
    }
    v19 = 0;
LABEL_36:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = swift::Demangle::CharVector::append(this + 1591, "HI", 2uLL, this[1593]);
  v20 = 0;
  if (*((_BYTE *)a2 + 18) == 5)
  {
    if (*((_DWORD *)a2 + 2) < 3u)
      v20 = 0;
    else
      v20 = *((_QWORD *)*a2 + 2);
  }
  v21 = *(unsigned __int16 *)(v20 + 16);
  if (v21 == 246 || v21 == 102)
  {
    v22 = *(unsigned __int8 *)(v20 + 18);
    if ((v21 != 102) == (v22 == 4))
    {
      v24 = 2713;
      v25 = 1;
    }
    else
    {
      if (v22 == 4)
        v23 = *(_QWORD *)v20 + 2;
      else
        v23 = 1;
      v25 = 0;
      v20 = 0;
      v24 = 0;
    }
  }
  else
  {
    v24 = 2711;
    v25 = 1;
  }
  *(_DWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v20;
  *(_DWORD *)(a4 + 16) = v24;
  return result;
}

void *`anonymous namespace'::Remangler::mangleDependentProtocolConformanceAssociated@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  swift::Demangle::Node **v9;
  swift::Demangle::Node *v10;
  void *result;
  int v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node *v14;
  int v15;
  swift::Demangle::Node **v16;
  swift::Demangle::Node *v17;
  int v18;
  int v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  swift::Demangle::Node **v25;
  uint64_t *v26;
  swift::Demangle::Node **v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;

  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  v15 = *((unsigned __int8 *)v14 + 18);
  v16 = (swift::Demangle::Node **)v14;
  if ((v15 - 1) < 2)
  {
LABEL_18:
    v17 = *v16;
    goto LABEL_20;
  }
  if (v15 == 5 && *((_DWORD *)v14 + 2))
  {
    v16 = *(swift::Demangle::Node ***)v14;
    goto LABEL_18;
  }
  v17 = 0;
LABEL_20:
  v18 = *((unsigned __int8 *)v17 + 18);
  if (v18 != 1)
  {
    if (v18 != 5 || *((_DWORD *)v17 + 2) != 1)
    {
      v21 = 321;
      v22 = 10;
LABEL_31:
      *(_DWORD *)a4 = v22;
      *(_QWORD *)(a4 + 8) = v17;
      *(_DWORD *)(a4 + 16) = v21;
      return result;
    }
    v17 = *(swift::Demangle::Node **)v17;
  }
  if (*(_DWORD *)a4)
    return result;
  v19 = *((unsigned __int8 *)v14 + 18);
  if (v19 == 2)
    goto LABEL_29;
  if (v19 == 5 && *((_DWORD *)v14 + 2) >= 2u)
  {
    v14 = *(swift::Demangle::Node **)v14;
LABEL_29:
    v20 = (uint64_t *)*((_QWORD *)v14 + 1);
    goto LABEL_34;
  }
  v20 = 0;
LABEL_34:
  if (*((_WORD *)v20 + 8) != 232)
    goto LABEL_41;
  v23 = *((unsigned __int8 *)v20 + 18);
  if ((v23 - 1) < 2)
    goto LABEL_39;
  if (v23 == 5 && *((_DWORD *)v20 + 2))
  {
    v20 = (uint64_t *)*v20;
LABEL_39:
    v20 = (uint64_t *)*v20;
    goto LABEL_41;
  }
  v20 = 0;
LABEL_41:
  {
LABEL_58:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::CharVector::append(this + 1591, "HA", 2uLL, this[1593]);
    v17 = 0;
    if (*((_BYTE *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u)
        v17 = 0;
      else
        v17 = (swift::Demangle::Node *)*((_QWORD *)*a2 + 2);
    }
    v29 = *((unsigned __int16 *)v17 + 8);
    if (v29 == 246 || v29 == 102)
    {
      v30 = *((unsigned __int8 *)v17 + 18);
      if ((v29 != 102) == (v30 == 4))
      {
        v21 = 2713;
        v22 = 1;
      }
      else
      {
        if (v30 == 4)
          v31 = *(_QWORD *)v17 + 2;
        else
          v31 = 1;
        v22 = 0;
        v17 = 0;
        v21 = 0;
      }
    }
    else
    {
      v21 = 2711;
      v22 = 1;
    }
    goto LABEL_31;
  }
  v24 = *((unsigned __int8 *)v20 + 18);
  v25 = (swift::Demangle::Node **)v20;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      v26 = (uint64_t *)*v20;
      v25 = (swift::Demangle::Node **)*v20;
LABEL_50:
      v27 = (swift::Demangle::Node **)&v26[*((unsigned int *)v20 + 2)];
      goto LABEL_54;
    }
    v25 = 0;
  }
  switch(v24)
  {
    case 1:
      v27 = (swift::Demangle::Node **)(v20 + 1);
      break;
    case 2:
      v27 = (swift::Demangle::Node **)(v20 + 2);
      break;
    case 5:
      v26 = (uint64_t *)*v20;
      goto LABEL_50;
    default:
      v27 = 0;
      break;
  }
LABEL_54:
  if (v25 == v27)
    goto LABEL_58;
  v28 = a3 + 2;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v25 == v27)
      goto LABEL_58;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleDestructor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fd", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleDidSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_DWORD *`anonymous namespace'::Remangler::mangleDirectness@<X0>(_DWORD *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  _DWORD *v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  char v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;

  v3 = this;
  if (*(_QWORD *)a2 == 1)
  {
    v5 = this + 3184;
    v6 = this[3184];
    v10 = this[3185];
    v8 = (char *)*((_QWORD *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      v9 = 105;
      goto LABEL_43;
    }
    v11 = (_QWORD *)*((_QWORD *)this + 1593);
    v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      v24 = (unint64_t)&v8[v10 + 1];
      v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }
    else
    {
      v13 = v11[2];
    }
    if ((2 * v10) <= 4)
      v25 = 4;
    else
      v25 = (2 * v10);
    v26 = v25 + v10;
    if (v12)
      v27 = (unint64_t)&v12[v25 + v10] > v13;
    else
      v27 = 1;
    v8 = (char *)v11[1];
    if (v27)
    {
      v28 = 2 * v11[4];
      if (v28 <= v26 + 1)
        v28 = v26 + 1;
      v11[4] = v28;
      v29 = v28 + 8;
      this = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      v30 = (char *)this + v29;
      *(_QWORD *)this = v11[3];
      v8 = (char *)(this + 2);
      v11[2] = v30;
      v11[3] = this;
    }
    v11[1] = &v8[v26];
    if ((_DWORD)v10)
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
    *((_QWORD *)v3 + 1591) = v8;
    LODWORD(v10) = *((_DWORD *)v3 + 3185);
    v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_41;
  }
  if (!*(_QWORD *)a2)
  {
    v5 = this + 3184;
    v6 = this[3184];
    v7 = this[3185];
    v8 = (char *)*((_QWORD *)this + 1591);
    if (v6 < v7)
    {
      v9 = 100;
LABEL_43:
      v15 = 0;
      a2 = 0;
      v14 = 0;
      *v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }
    v16 = (_QWORD *)*((_QWORD *)this + 1593);
    v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      v19 = (unint64_t)&v8[v7 + 1];
      v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        v9 = 100;
        goto LABEL_43;
      }
    }
    else
    {
      v18 = v16[2];
    }
    if ((2 * v7) <= 4)
      v20 = 4;
    else
      v20 = (2 * v7);
    v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      v22 = 2 * v16[4];
      if (v22 <= v21 + 1)
        v22 = v21 + 1;
      v16[4] = v22;
      v23 = v22 + 8;
      this = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *(_QWORD *)this = v16[3];
      v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if ((_DWORD)v7)
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
    *((_QWORD *)v3 + 1591) = v17;
    LODWORD(v7) = *((_DWORD *)v3 + 3185);
    v8 = v17;
    v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_39;
  }
  v14 = 1335;
  v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDynamicSelf@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XD", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleEnumCase@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WC", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleEscapingAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XE", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Yc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_QWORD *`anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v6;
  _QWORD *result;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v6 = (const void **)(this + 1591);
  result = swift::Demangle::CharVector::append(this + 1591, "Yj", 2uLL, this[1593]);
  v8 = *(_QWORD *)a2;
  v9 = *((_DWORD *)this + 3184);
  v10 = *((unsigned int *)this + 3185);
  v11 = this[1591];
  if (v9 >= v10)
  {
    v12 = this[1593];
    v13 = (char *)*((_QWORD *)v12 + 1);
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = *((_QWORD *)v12 + 2);
      if (v15 <= v14)
      {
        *((_QWORD *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      v14 = *((_QWORD *)v12 + 2);
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (v13)
      v18 = (unint64_t)&v13[v16 + v10] > v14;
    else
      v18 = 1;
    v11 = (char *)*((_QWORD *)v12 + 1);
    if (v18)
    {
      v19 = 2 * *((_QWORD *)v12 + 4);
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      *((_QWORD *)v12 + 4) = v19;
      v20 = v19 + 8;
      result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)result + v20;
      *result = *((_QWORD *)v12 + 3);
      v11 = (char *)(result + 1);
      *((_QWORD *)v12 + 2) = v21;
      *((_QWORD *)v12 + 3) = result;
    }
    *((_QWORD *)v12 + 1) = &v11[v17];
    if ((_DWORD)v10)
      result = memcpy(v11, *v6, v10);
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::Node *v8;
  unsigned int v9;
  swift::Demangle::Node *v10;
  int v11;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
    v8 = *(swift::Demangle::Node **)a2;
  v9 = a3 + 1;
  if (*(_WORD *)(*(_QWORD *)v8 + 16) == 146)
  {
    v10 = a2;
    if (v7 != 2)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_17:
        this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "Xm", 2uLL, (_QWORD *)v5[1593]);
        v11 = *((unsigned __int8 *)v4 + 18);
        if ((v11 - 1) < 2)
        if (v11 == 5 && *((_DWORD *)v4 + 2))
        {
          v4 = *(swift::Demangle::Node **)v4;
        }
        goto LABEL_23;
      }
      v10 = *(swift::Demangle::Node **)a2;
    }
    if (*(_DWORD *)a4)
      return this;
    goto LABEL_17;
  }
  if (v7 != 1)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 321;
      return this;
    }
    v4 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "Xp", 2uLL, (_QWORD *)v5[1593]);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleExplicitClosure@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)v4 + 18) != 5)
      goto LABEL_12;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u)
    goto LABEL_12;
  if (*(_DWORD *)a4)
    return result;
LABEL_13:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fU", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtension@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  unsigned int v7;
  int v8;
  swift::Demangle::Node *v9;
  swift::Demangle::Node **v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;

  v5 = this;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v10 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_18;
      goto LABEL_16;
    }
    v10 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  if (*((_BYTE *)a2 + 18) != 5)
  {
LABEL_18:
    v11 = *((_DWORD *)v5 + 3184);
    v12 = *((unsigned int *)v5 + 3185);
    v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_35:
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 69;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    v14 = (_QWORD *)v5[1593];
    v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      v17 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_34:
        *((_DWORD *)v5 + 3185) = v12 + v18;
        goto LABEL_35;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      v20 = 2 * v14[4];
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      v14[4] = v20;
      v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v22 = (char *)this + v21;
      *this = v14[3];
      v15 = (char *)(this + 1);
      v14[2] = v22;
      v14[3] = this;
    }
    v14[1] = &v15[v19];
    if ((_DWORD)v12)
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    v13 = v15;
    v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_34;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) != 3)
    goto LABEL_18;
  if (!*(_DWORD *)a4)
    goto LABEL_18;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMe", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleFieldOffset@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::Node *v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) < 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;
  swift::Demangle::Node *v12;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5)
      goto LABEL_13;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
    goto LABEL_13;
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (v11 = (swift::Demangle::Node *)*((_QWORD *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4)
        return result;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  v12 = (swift::Demangle::Node *)a2;
  if (v8 == 2)
    goto LABEL_17;
  if (v8 == 5)
    goto LABEL_15;
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMf", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mf", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *`anonymous namespace'::Remangler::mangleFunction@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  void *result;
  swift::Demangle::Node *v11;
  swift::Demangle::Node *v12;
  _BOOL4 v13;
  unint64_t v14;
  int v15;
  swift::Demangle::Node *v16;
  int v17;
  swift::Demangle::Node *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  swift::Demangle::Node *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t *v32;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 == 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5)
      goto LABEL_14;
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_14:
    v12 = 0;
    v13 = MEMORY[0x10] == 290;
    goto LABEL_21;
  }
LABEL_16:
  v13 = *(unsigned __int16 *)(*((_QWORD *)*a2 + 2) + 16) == 290;
  v14 = 2;
  if (*(_WORD *)(*((_QWORD *)*a2 + 2) + 16) == 290)
    v14 = 3;
  if (v14 >= *((unsigned int *)a2 + 2))
    v12 = 0;
  else
    v12 = (swift::Demangle::Node *)*((_QWORD *)*a2 + v14);
LABEL_21:
  v15 = *((unsigned __int8 *)v12 + 18);
  if ((v15 - 1) < 2)
    goto LABEL_25;
  if (v15 == 5 && *((_DWORD *)v12 + 2))
  {
    v12 = *(swift::Demangle::Node **)v12;
LABEL_25:
    v16 = *(swift::Demangle::Node **)v12;
    if (!v13)
      goto LABEL_33;
    goto LABEL_28;
  }
  v16 = 0;
  if (!v13)
    goto LABEL_33;
LABEL_28:
  if (v8 == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
LABEL_33:
  if (*((_WORD *)v16 + 8) != 44)
  {
    v20 = *((unsigned __int8 *)v16 + 18);
    if ((_DWORD)v20 != 1)
    {
      if ((_DWORD)v20 == 5)
      {
        v20 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v20)
          goto LABEL_55;
      }
      else if ((_DWORD)v20 == 2)
      {
        v20 = 2;
        goto LABEL_55;
      }
LABEL_68:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v28 = (_DWORD *)(a4 + 16);
      goto LABEL_91;
    }
LABEL_55:
    v24 = v20 - 1;
    while (1)
    {
      v25 = *((unsigned __int8 *)v16 + 18);
      v26 = v25 - 1;
      if ((_DWORD)v25 != 1)
      {
        if ((_DWORD)v25 == 5)
        {
          v25 = *((unsigned int *)v16 + 2);
        }
        else
        {
          if ((_DWORD)v25 != 2)
            goto LABEL_56;
          v25 = 2;
        }
      }
      if (v25 > v24)
      {
        v27 = v16;
        if (v26 >= 2)
          v27 = *(swift::Demangle::Node **)v16;
        if (*(_DWORD *)a4)
          return result;
        goto LABEL_57;
      }
LABEL_56:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
LABEL_57:
      if (--v24 == -1)
        goto LABEL_68;
    }
  }
  v17 = *((unsigned __int8 *)v16 + 18);
  v18 = v16;
  if (v17 == 2)
  {
LABEL_38:
    v19 = (uint64_t *)*((_QWORD *)v18 + 1);
    goto LABEL_44;
  }
  if (v17 == 5 && *((_DWORD *)v16 + 2) >= 2u)
  {
    v18 = *(swift::Demangle::Node **)v16;
    goto LABEL_38;
  }
  v19 = 0;
LABEL_44:
  v21 = *((unsigned __int8 *)v19 + 18);
  if ((v21 - 1) >= 2)
  {
    if (v21 != 5 || !*((_DWORD *)v19 + 2))
    {
      v22 = 0;
      goto LABEL_50;
    }
    v19 = (uint64_t *)*v19;
  }
  v22 = (uint64_t *)*v19;
LABEL_50:
  v23 = *((unsigned __int8 *)v22 + 18);
  if ((_DWORD)v23 != 1)
  {
    if ((_DWORD)v23 == 5)
    {
      v23 = *((unsigned int *)v22 + 2);
      if (!(_DWORD)v23)
        goto LABEL_84;
    }
    else
    {
      if ((_DWORD)v23 != 2)
        goto LABEL_84;
      v23 = 2;
    }
  }
  v29 = v23 - 1;
  do
  {
    v30 = *((unsigned __int8 *)v22 + 18);
    v31 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      if ((_DWORD)v30 == 5)
      {
        v30 = *((unsigned int *)v22 + 2);
      }
      else
      {
        if ((_DWORD)v30 != 2)
          goto LABEL_71;
        v30 = 2;
      }
    }
    if (v30 <= v29)
    {
LABEL_71:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_72;
    }
    v32 = v22;
    if (v31 >= 2)
      v32 = (uint64_t *)*v22;
    if (*(_DWORD *)a4)
      return result;
LABEL_72:
    --v29;
  }
  while (v29 != -1);
  v17 = *((unsigned __int8 *)v16 + 18);
LABEL_84:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v28 = (_DWORD *)(a4 + 16);
  if ((v17 - 1) < 2)
  {
LABEL_88:
    if (!*(_DWORD *)a4)
      goto LABEL_92;
  }
  else
  {
    if (v17 == 5 && *((_DWORD *)v16 + 2))
    {
      v16 = *(swift::Demangle::Node **)v16;
      goto LABEL_88;
    }
    *(_QWORD *)(a4 + 8) = 0;
LABEL_91:
    *v28 = 0;
LABEL_92:
    result = swift::Demangle::CharVector::append(this + 1591, "F", 1uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void `anonymous namespace'::Remangler::mangleFunctionSignatureSpecialization(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  swift::Demangle::Node *v5;
  int v8;
  swift::Demangle::Node *v9;
  uint64_t v10;
  swift::Demangle::Node *v11;
  unsigned int v12;
  int v13;
  _DWORD **v14;
  int v15;
  _DWORD **v16;
  swift::Demangle::Node *NodeWithAllocatedText;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  int v22;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type size;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  _DWORD **v41;
  swift::Demangle::Node *v42;
  int v43;
  unint64_t v44;
  char *v45;
  char **v46;
  int v47;
  swift::Demangle::Node *v48;
  unint64_t v49;
  swift::Demangle::Node *v50;
  char v51;
  uint64_t v52;
  swift::Demangle::Node *v53;
  uint64_t v54;
  unsigned int v55;
  size_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  size_t v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  int v69;
  char *v70;
  swift::Demangle::Node *v71;
  swift::Demangle::Node *v72;
  uint64_t v73;
  std::string v74;
  std::string v75;
  int v76;

  v4 = a3;
  v5 = a2;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      v10 = *(_QWORD *)a2;
      v9 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v9 = 0;
  }
  switch(v8)
  {
    case 1:
      v11 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v9 != (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_16;
      break;
    case 2:
      v11 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v9 != (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_16;
      break;
    case 5:
      v10 = *(_QWORD *)a2;
LABEL_9:
      v11 = (swift::Demangle::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == v11)
        break;
      goto LABEL_16;
    default:
      v11 = 0;
      if (!v9)
        break;
LABEL_16:
      v70 = (char *)this + 12688;
      v12 = a3 + 2;
      while (1)
      {
        v14 = *(_DWORD ***)v9;
        if (*(_WORD *)(*(_QWORD *)v9 + 16) == 78)
        {
          v15 = *((unsigned __int8 *)v14 + 18);
          v16 = *(_DWORD ***)v9;
          if ((v15 - 1) < 2)
            goto LABEL_25;
          if (v15 == 5 && *((_DWORD *)v14 + 2))
            break;
        }
LABEL_19:
        v9 = (swift::Demangle::Node *)((char *)v9 + 8);
        if (v9 == v11)
          goto LABEL_90;
      }
      v16 = (_DWORD **)*v14;
LABEL_25:
      switch(**v16)
      {
        case 0:
        case 1:
          if (v15 == 2)
            goto LABEL_30;
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            v14 = (_DWORD **)*v14;
LABEL_30:
            NodeWithAllocatedText = (swift::Demangle::Node *)v14[1];
          }
          else
          {
            NodeWithAllocatedText = 0;
          }
LABEL_87:
          memset(&v74, 0, 17);
          {
            v44 = *((_QWORD *)this + 1585);
            if (v44 > 0xF)
            {
              v13 = *((_DWORD *)this + 3178) + 16;
              v75 = v74;
              v76 = v13;
              std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((_QWORD *)this + 1585) = v44 + 1;
              v45 = (char *)this + 24 * v44 + 12296;
              *(_OWORD *)v45 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v45[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_19;
        case 4:
          NodeWithAllocatedText = (swift::Demangle::Node *)*((_QWORD *)*v14 + 2);
          v20 = *((_QWORD *)NodeWithAllocatedText + 1);
          if (v20)
          {
            v21 = *(const std::string::value_type **)NodeWithAllocatedText;
            v22 = **(unsigned __int8 **)NodeWithAllocatedText;
            if (v22 == 95 || (v22 - 48) <= 9)
            {
              v69 = v4;
              *((_BYTE *)&v75.__r_.__value_.__s + 23) = 1;
              LOWORD(v75.__r_.__value_.__l.__data_) = 95;
              std::string::append(&v75, v21, v20);
              v24 = *(_QWORD **)this;
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v25 = &v75;
              else
                v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
              else
                size = v75.__r_.__value_.__l.__size_;
              if (size)
              {
                v27 = (char *)v24[1];
                if (!v27 || (v28 = &v27[size], (unint64_t)&v27[size] > v24[2]))
                {
                  v29 = 2 * v24[4];
                  if (v29 <= size + 1)
                    v29 = size + 1;
                  v24[4] = v29;
                  v30 = v29 + 8;
                  v31 = v25;
                  v32 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
                  v25 = v31;
                  *v32 = v24[3];
                  v27 = (char *)(v32 + 1);
                  v24[2] = (char *)v32 + v30;
                  v24[3] = v32;
                  v28 = (char *)v32 + size + 8;
                }
                v24[1] = v28;
                memmove(v27, v25, size);
              }
              else
              {
                v27 = 0;
              }
              NodeWithAllocatedText = (swift::Demangle::Node *)swift::Demangle::NodeFactory::createNodeWithAllocatedText(v24, 101, (uint64_t)v27, size);
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v75.__r_.__value_.__l.__data_);
              v4 = v69;
            }
          }
          goto LABEL_87;
        case 5:
        case 9:
          v18 = *(_QWORD *)v9;
          if (v15 == 2)
            goto LABEL_35;
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            v18 = (uint64_t)*v14;
LABEL_35:
            v19 = *(_QWORD *)(v18 + 8);
          }
          else
          {
            v19 = 0;
          }
          memset(&v74, 0, 17);
          {
            v33 = *((_QWORD *)this + 1585);
            if (v33 > 0xF)
            {
              v35 = *((_DWORD *)this + 3178) + 16;
              v75 = v74;
              v76 = v35;
              std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((_QWORD *)this + 1585) = v33 + 1;
              v34 = (char *)this + 24 * v33 + 12296;
              *(_OWORD *)v34 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v34[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          v36 = *((unsigned __int8 *)v14 + 18);
          switch(v36)
          {
            case 1:
              goto LABEL_64;
            case 2:
              goto LABEL_19;
            case 5:
              v36 = *((_DWORD *)v14 + 2);
              if (v36 == 2)
                goto LABEL_19;
LABEL_64:
              v37 = 2;
              break;
            default:
              v36 = 0;
              v37 = 2;
              break;
          }
          break;
        default:
          goto LABEL_19;
      }
      while (1)
      {
        v38 = v37;
        v39 = *((unsigned __int8 *)v14 + 18);
        v40 = v39 - 1;
        if ((_DWORD)v39 == 1)
          goto LABEL_70;
        if ((_DWORD)v39 != 5)
          break;
        if (*((unsigned int *)v14 + 2) > v38)
        {
LABEL_71:
          v41 = v14;
          if (v40 >= 2)
            v41 = (_DWORD **)*v14;
          v42 = (swift::Demangle::Node *)v41[v38];
          goto LABEL_76;
        }
LABEL_75:
        v42 = 0;
LABEL_76:
        v43 = *((unsigned __int8 *)v42 + 18);
        if (v43 != 1)
        {
          if (v43 != 5 || *((_DWORD *)v42 + 2) != 1)
          {
            *(_DWORD *)a4 = 10;
            *(_QWORD *)(a4 + 8) = v42;
            *(_DWORD *)(a4 + 16) = 321;
            return;
          }
          v42 = *(swift::Demangle::Node **)v42;
        }
        if (*(_DWORD *)a4)
          return;
        v37 = v38 + 1;
        if (v36 == (_DWORD)v38 + 1)
          goto LABEL_19;
      }
      if ((_DWORD)v39 != 2)
        goto LABEL_75;
      v39 = 2;
LABEL_70:
      if (v39 > v38)
        goto LABEL_71;
      goto LABEL_75;
  }
LABEL_90:
  v46 = (char **)((char *)this + 12728);
  swift::Demangle::CharVector::append((char **)this + 1591, "Tf", 2uLL, *((_QWORD **)this + 1593));
  v47 = *((unsigned __int8 *)v5 + 18);
  v48 = v5;
  if ((v47 - 1) >= 2)
  {
    if (v47 == 5)
    {
      v49 = *(_QWORD *)v5;
      v48 = *(swift::Demangle::Node **)v5;
      goto LABEL_99;
    }
    v48 = 0;
  }
  switch(v47)
  {
    case 1:
      v50 = (swift::Demangle::Node *)((char *)v5 + 8);
      if (v48 == (swift::Demangle::Node *)((char *)v5 + 8))
        goto LABEL_135;
      break;
    case 2:
      v50 = (swift::Demangle::Node *)((char *)v5 + 16);
      if (v48 == (swift::Demangle::Node *)((char *)v5 + 16))
        goto LABEL_135;
      break;
    case 5:
      v49 = *(_QWORD *)v5;
LABEL_99:
      v50 = (swift::Demangle::Node *)(v49 + 8 * *((unsigned int *)v5 + 2));
      if (v48 == v50)
      {
LABEL_135:
        swift::Demangle::CharVector::append(v46, "_n", 2uLL, *((_QWORD **)this + 1593));
        goto LABEL_136;
      }
      break;
    default:
      v50 = 0;
      if (!v48)
        goto LABEL_135;
      break;
  }
  v51 = 0;
  v52 = (v4 + 1);
  v71 = v50;
  v72 = v5;
  v73 = a4;
  do
  {
    v53 = *(swift::Demangle::Node **)v48;
    if (*(_WORD *)(*(_QWORD *)v48 + 16) != 79)
      goto LABEL_129;
    v54 = v52;
    v55 = *((_DWORD *)this + 3184);
    v56 = *((unsigned int *)this + 3185);
    v57 = (char *)*((_QWORD *)this + 1591);
    if (v55 >= v56)
    {
      v58 = (_QWORD *)*((_QWORD *)this + 1593);
      v59 = (char *)v58[1];
      if (&v57[v56] == v59)
      {
        v61 = (unint64_t)&v57[v56 + 1];
        v60 = v58[2];
        if (v61 <= v60)
        {
          v58[1] = v61;
          LODWORD(v62) = 1;
          v5 = v72;
LABEL_127:
          *((_DWORD *)this + 3185) = v56 + v62;
          goto LABEL_128;
        }
      }
      else
      {
        v60 = v58[2];
      }
      if ((2 * v56) <= 4)
        v62 = 4;
      else
        v62 = (2 * v56);
      v63 = v62 + v56;
      if (v59)
        v64 = (unint64_t)&v59[v62 + v56] > v60;
      else
        v64 = 1;
      v57 = (char *)v58[1];
      if (v64)
      {
        v65 = 2 * v58[4];
        if (v65 <= v63 + 1)
          v65 = v63 + 1;
        v58[4] = v65;
        v66 = v65 + 8;
        v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
        *v67 = v58[3];
        v57 = (char *)(v67 + 1);
        v68 = (char *)v67 + v66;
        v46 = (char **)((char *)this + 12728);
        v58[2] = v68;
        v58[3] = v67;
      }
      v58[1] = &v57[v63];
      if ((_DWORD)v56)
        memcpy(v57, *v46, v56);
      *((_QWORD *)this + 1591) = v57;
      LODWORD(v56) = *((_DWORD *)this + 3185);
      v55 = *((_DWORD *)this + 3184);
      v50 = v71;
      v5 = v72;
      goto LABEL_127;
    }
LABEL_128:
    *((_DWORD *)this + 3184) = v55 + 1;
    v57[v55] = 95;
    v51 = 1;
    v52 = v54;
    a4 = v73;
LABEL_129:
    if (*(_DWORD *)a4)
      return;
    if (*((_WORD *)v53 + 8) == 216 && *((_BYTE *)v5 + 18) == 4)
      swift::Demangle::CharVector::append((unsigned int *)v46, *(_QWORD *)v5, *((swift::Demangle::NodeFactory **)this + 1593));
    v48 = (swift::Demangle::Node *)((char *)v48 + 8);
  }
  while (v48 != v50);
  if ((v51 & 1) == 0)
    goto LABEL_135;
LABEL_136:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t `anonymous namespace'::Remangler::mangleFunctionSignatureSpecializationParam@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::Node *v3;
  uint64_t v4;
  int v6;
  swift::Demangle::Node *v7;
  int v8;
  char **v9;
  _QWORD *v10;
  char *v11;
  unsigned int v12;
  size_t v13;
  _BYTE *v14;
  _QWORD *v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int v18;
  size_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char **v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  size_t v37;
  const void **v38;
  swift::Demangle::Node *v39;
  uint64_t *v40;
  uint64_t v41;
  size_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  size_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  size_t v50;
  _QWORD *v51;
  char *v52;
  unint64_t v53;
  size_t v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  size_t v58;
  _QWORD *v59;
  char *v60;
  unint64_t v61;
  char **v62;
  char v63;
  const void **v64;
  unsigned int v65;
  size_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  size_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  size_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  size_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  size_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  size_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  size_t v108;
  _QWORD *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  size_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  size_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;

  v3 = a2;
  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 != 5 || !*((_DWORD *)a2 + 2))
  {
    v12 = *(_DWORD *)(this + 12736);
    v13 = *(unsigned int *)(this + 12740);
    v14 = *(_BYTE **)(this + 12728);
    if (v12 < v13)
    {
LABEL_30:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v12 + 1;
      v14[v12] = 110;
      goto LABEL_194;
    }
    v15 = *(_QWORD **)(this + 12744);
    v16 = (_BYTE *)v15[1];
    if (&v14[v13] == v16)
    {
      v24 = (unint64_t)&v14[v13 + 1];
      v17 = v15[2];
      if (v24 <= v17)
      {
        v15[1] = v24;
        LODWORD(v25) = 1;
LABEL_29:
        *(_DWORD *)(v4 + 12740) = v13 + v25;
        goto LABEL_30;
      }
    }
    else
    {
      v17 = v15[2];
    }
    if ((2 * v13) <= 4)
      v25 = 4;
    else
      v25 = (2 * v13);
    v26 = v25 + v13;
    if (v16)
      v27 = (unint64_t)&v16[v25 + v13] > v17;
    else
      v27 = 1;
    v14 = (_BYTE *)v15[1];
    if (v27)
    {
      v28 = 2 * v15[4];
      if (v28 <= v26 + 1)
        v28 = v26 + 1;
      v15[4] = v28;
      v29 = v28 + 8;
      this = (uint64_t)malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      v30 = this + v29;
      *(_QWORD *)this = v15[3];
      v14 = (_BYTE *)(this + 8);
      v15[2] = v30;
      v15[3] = this;
    }
    v15[1] = &v14[v26];
    if ((_DWORD)v13)
      this = (uint64_t)memcpy(v14, *(const void **)(v4 + 12728), v13);
    *(_QWORD *)(v4 + 12728) = v14;
    LODWORD(v13) = *(_DWORD *)(v4 + 12740);
    v12 = *(_DWORD *)(v4 + 12736);
    goto LABEL_29;
  }
  v7 = *(swift::Demangle::Node **)a2;
LABEL_5:
  v8 = **(_DWORD **)v7;
  switch(v8)
  {
    case 0:
      v9 = (char **)(this + 12728);
      v10 = *(_QWORD **)(v4 + 12744);
      v11 = "pf";
      goto LABEL_59;
    case 1:
      v9 = (char **)(this + 12728);
      v10 = *(_QWORD **)(v4 + 12744);
      v11 = "pg";
      goto LABEL_59;
    case 2:
      v33 = (char **)(this + 12728);
      v34 = *(_QWORD **)(this + 12744);
      v35 = "pi";
      goto LABEL_34;
    case 3:
      v33 = (char **)(this + 12728);
      v34 = *(_QWORD **)(this + 12744);
      v35 = "pd";
LABEL_34:
      swift::Demangle::CharVector::append(v33, v35, 2uLL, v34);
      if (*((_BYTE *)v3 + 18) == 5)
        v3 = *(swift::Demangle::Node **)v3;
      v36 = *((_QWORD *)v3 + 1);
      v11 = *(char **)v36;
      v37 = *(_QWORD *)(v36 + 8);
      v10 = *(_QWORD **)(v4 + 12744);
      v9 = v33;
      goto LABEL_60;
    case 4:
      v38 = (const void **)(this + 12728);
      swift::Demangle::CharVector::append((char **)(this + 12728), "ps", 2uLL, *(_QWORD **)(this + 12744));
      v39 = v3;
      if (*((_BYTE *)v3 + 18) == 5)
        v39 = *(swift::Demangle::Node **)v3;
      v40 = (uint64_t *)*((_QWORD *)v39 + 1);
      this = *v40;
      v41 = v40[1];
      if (v41 == 4)
      {
        this = memcmp((const void *)this, "objc", 4uLL);
        if (!(_DWORD)this)
        {
          this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 99);
          goto LABEL_61;
        }
        goto LABEL_74;
      }
      if (v41 != 3)
      {
        if (v41 == 2 && *(_WORD *)this == 14453)
        {
          v18 = *(_DWORD *)(v4 + 12736);
          v42 = *(unsigned int *)(v4 + 12740);
          v20 = *(char **)(v4 + 12728);
          if (v18 < v42)
          {
LABEL_210:
            v31 = 0;
            v3 = 0;
            v32 = 0;
            *(_DWORD *)(v4 + 12736) = v18 + 1;
            v77 = 98;
            goto LABEL_193;
          }
          v43 = *(_QWORD **)(v4 + 12744);
          v44 = (char *)v43[1];
          if (&v20[v42] == v44)
          {
            v118 = (unint64_t)&v20[v42 + 1];
            v45 = v43[2];
            if (v118 <= v45)
            {
              v43[1] = v118;
              LODWORD(v119) = 1;
LABEL_209:
              *(_DWORD *)(v4 + 12740) = v42 + v119;
              goto LABEL_210;
            }
          }
          else
          {
            v45 = v43[2];
          }
          if ((2 * v42) <= 4)
            v119 = 4;
          else
            v119 = (2 * v42);
          v120 = v119 + v42;
          if (!v44 || (unint64_t)&v44[v120] > v45)
          {
            v121 = 2 * v43[4];
            if (v121 <= v120 + 1)
              v121 = v120 + 1;
            v43[4] = v121;
            v122 = v121 + 8;
            this = (uint64_t)malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
            v123 = this + v122;
            *(_QWORD *)this = v43[3];
            v44 = (char *)(this + 8);
            v43[2] = v123;
            v43[3] = this;
          }
          v43[1] = &v44[v120];
          if ((_DWORD)v42)
            this = (uint64_t)memcpy(v44, *v38, v42);
          *(_QWORD *)(v4 + 12728) = v44;
          LODWORD(v42) = *(_DWORD *)(v4 + 12740);
          v20 = v44;
          v18 = *(_DWORD *)(v4 + 12736);
          goto LABEL_209;
        }
LABEL_74:
        v32 = 1570;
        v31 = 14;
        goto LABEL_194;
      }
      this = memcmp((const void *)this, "u16", 3uLL);
      if ((_DWORD)this)
        goto LABEL_74;
      this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 119);
      goto LABEL_61;
    case 5:
      v18 = *(_DWORD *)(this + 12736);
      v46 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v46)
        goto LABEL_104;
      v47 = *(_QWORD **)(this + 12744);
      v48 = (char *)v47[1];
      if (&v20[v46] == v48)
      {
        v78 = (unint64_t)&v20[v46 + 1];
        v49 = v47[2];
        if (v78 <= v49)
        {
          v47[1] = v78;
          LODWORD(v79) = 1;
          goto LABEL_103;
        }
      }
      else
      {
        v49 = v47[2];
      }
      if ((2 * v46) <= 4)
        v79 = 4;
      else
        v79 = (2 * v46);
      v80 = v79 + v46;
      if (!v48 || (unint64_t)&v48[v80] > v49)
      {
        v81 = 2 * v47[4];
        if (v81 <= v80 + 1)
          v81 = v80 + 1;
        v47[4] = v81;
        v82 = v81 + 8;
        this = (uint64_t)malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
        v83 = this + v82;
        *(_QWORD *)this = v47[3];
        v48 = (char *)(this + 8);
        v47[2] = v83;
        v47[3] = this;
      }
      v47[1] = &v48[v80];
      if ((_DWORD)v46)
        this = (uint64_t)memcpy(v48, *(const void **)(v4 + 12728), v46);
      *(_QWORD *)(v4 + 12728) = v48;
      LODWORD(v46) = *(_DWORD *)(v4 + 12740);
      v20 = v48;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_103:
      *(_DWORD *)(v4 + 12740) = v46 + v79;
LABEL_104:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 99;
      goto LABEL_193;
    case 6:
      v18 = *(_DWORD *)(this + 12736);
      v50 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v50)
        goto LABEL_118;
      v51 = *(_QWORD **)(this + 12744);
      v52 = (char *)v51[1];
      if (&v20[v50] == v52)
      {
        v84 = (unint64_t)&v20[v50 + 1];
        v53 = v51[2];
        if (v84 <= v53)
        {
          v51[1] = v84;
          LODWORD(v85) = 1;
          goto LABEL_117;
        }
      }
      else
      {
        v53 = v51[2];
      }
      if ((2 * v50) <= 4)
        v85 = 4;
      else
        v85 = (2 * v50);
      v86 = v85 + v50;
      if (!v52 || (unint64_t)&v52[v86] > v53)
      {
        v87 = 2 * v51[4];
        if (v87 <= v86 + 1)
          v87 = v86 + 1;
        v51[4] = v87;
        v88 = v87 + 8;
        this = (uint64_t)malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        v89 = this + v88;
        *(_QWORD *)this = v51[3];
        v52 = (char *)(this + 8);
        v51[2] = v89;
        v51[3] = this;
      }
      v51[1] = &v52[v86];
      if ((_DWORD)v50)
        this = (uint64_t)memcpy(v52, *(const void **)(v4 + 12728), v50);
      *(_QWORD *)(v4 + 12728) = v52;
      LODWORD(v50) = *(_DWORD *)(v4 + 12740);
      v20 = v52;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_117:
      *(_DWORD *)(v4 + 12740) = v50 + v85;
LABEL_118:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 105;
      goto LABEL_193;
    case 7:
      v18 = *(_DWORD *)(this + 12736);
      v54 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v54)
        goto LABEL_132;
      v55 = *(_QWORD **)(this + 12744);
      v56 = (char *)v55[1];
      if (&v20[v54] == v56)
      {
        v90 = (unint64_t)&v20[v54 + 1];
        v57 = v55[2];
        if (v90 <= v57)
        {
          v55[1] = v90;
          LODWORD(v91) = 1;
          goto LABEL_131;
        }
      }
      else
      {
        v57 = v55[2];
      }
      if ((2 * v54) <= 4)
        v91 = 4;
      else
        v91 = (2 * v54);
      v92 = v91 + v54;
      if (!v56 || (unint64_t)&v56[v92] > v57)
      {
        v93 = 2 * v55[4];
        if (v93 <= v92 + 1)
          v93 = v92 + 1;
        v55[4] = v93;
        v94 = v93 + 8;
        this = (uint64_t)malloc_type_malloc(v93 + 8, 0xD0263BC5uLL);
        v95 = this + v94;
        *(_QWORD *)this = v55[3];
        v56 = (char *)(this + 8);
        v55[2] = v95;
        v55[3] = this;
      }
      v55[1] = &v56[v92];
      if ((_DWORD)v54)
        this = (uint64_t)memcpy(v56, *(const void **)(v4 + 12728), v54);
      *(_QWORD *)(v4 + 12728) = v56;
      LODWORD(v54) = *(_DWORD *)(v4 + 12740);
      v20 = v56;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_131:
      *(_DWORD *)(v4 + 12740) = v54 + v91;
LABEL_132:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 115;
      goto LABEL_193;
    case 8:
      v18 = *(_DWORD *)(this + 12736);
      v58 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v58)
        goto LABEL_146;
      v59 = *(_QWORD **)(this + 12744);
      v60 = (char *)v59[1];
      if (&v20[v58] == v60)
      {
        v96 = (unint64_t)&v20[v58 + 1];
        v61 = v59[2];
        if (v96 <= v61)
        {
          v59[1] = v96;
          LODWORD(v97) = 1;
          goto LABEL_145;
        }
      }
      else
      {
        v61 = v59[2];
      }
      if ((2 * v58) <= 4)
        v97 = 4;
      else
        v97 = (2 * v58);
      v98 = v97 + v58;
      if (!v60 || (unint64_t)&v60[v98] > v61)
      {
        v99 = 2 * v59[4];
        if (v99 <= v98 + 1)
          v99 = v98 + 1;
        v59[4] = v99;
        v100 = v99 + 8;
        this = (uint64_t)malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
        v101 = this + v100;
        *(_QWORD *)this = v59[3];
        v60 = (char *)(this + 8);
        v59[2] = v101;
        v59[3] = this;
      }
      v59[1] = &v60[v98];
      if ((_DWORD)v58)
        this = (uint64_t)memcpy(v60, *(const void **)(v4 + 12728), v58);
      *(_QWORD *)(v4 + 12728) = v60;
      LODWORD(v58) = *(_DWORD *)(v4 + 12740);
      v20 = v60;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_145:
      *(_DWORD *)(v4 + 12740) = v58 + v97;
LABEL_146:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 114;
      goto LABEL_193;
    case 9:
      v9 = (char **)(this + 12728);
      v10 = *(_QWORD **)(v4 + 12744);
      v11 = "pk";
LABEL_59:
      v37 = 2;
LABEL_60:
      this = (uint64_t)swift::Demangle::CharVector::append(v9, v11, v37, v10);
      goto LABEL_61;
    default:
      if (v8 == 256)
      {
        v18 = *(_DWORD *)(this + 12736);
        v19 = *(unsigned int *)(this + 12740);
        v20 = *(char **)(this + 12728);
        if (v18 < v19)
        {
LABEL_90:
          v31 = 0;
          v3 = 0;
          v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          v77 = 120;
          goto LABEL_193;
        }
        v21 = *(_QWORD **)(this + 12744);
        v22 = (char *)v21[1];
        if (&v20[v19] == v22)
        {
          v71 = (unint64_t)&v20[v19 + 1];
          v23 = v21[2];
          if (v71 <= v23)
          {
            v21[1] = v71;
            LODWORD(v72) = 1;
LABEL_89:
            *(_DWORD *)(v4 + 12740) = v19 + v72;
            goto LABEL_90;
          }
        }
        else
        {
          v23 = v21[2];
        }
        if ((2 * v19) <= 4)
          v72 = 4;
        else
          v72 = (2 * v19);
        v73 = v72 + v19;
        if (!v22 || (unint64_t)&v22[v73] > v23)
        {
          v74 = 2 * v21[4];
          if (v74 <= v73 + 1)
            v74 = v73 + 1;
          v21[4] = v74;
          v75 = v74 + 8;
          this = (uint64_t)malloc_type_malloc(v74 + 8, 0xD0263BC5uLL);
          v76 = this + v75;
          *(_QWORD *)this = v21[3];
          v22 = (char *)(this + 8);
          v21[2] = v76;
          v21[3] = this;
        }
        v21[1] = &v22[v73];
        if ((_DWORD)v19)
          this = (uint64_t)memcpy(v22, *(const void **)(v4 + 12728), v19);
        *(_QWORD *)(v4 + 12728) = v22;
        LODWORD(v19) = *(_DWORD *)(v4 + 12740);
        v20 = v22;
        v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_89;
      }
      if ((v8 & 0x400) != 0)
      {
        v64 = (const void **)(this + 12728);
        v65 = *(_DWORD *)(this + 12736);
        v66 = *(unsigned int *)(this + 12740);
        v67 = *(char **)(this + 12728);
        if (v65 < v66)
          goto LABEL_161;
        v68 = *(_QWORD **)(this + 12744);
        v69 = (char *)v68[1];
        if (&v67[v66] == v69)
        {
          v102 = (unint64_t)&v67[v66 + 1];
          v70 = v68[2];
          if (v102 <= v70)
          {
            v68[1] = v102;
            LODWORD(v103) = 1;
LABEL_160:
            *(_DWORD *)(v4 + 12740) = v66 + v103;
LABEL_161:
            *(_DWORD *)(v4 + 12736) = v65 + 1;
            v67[v65] = 101;
            if ((v8 & 0x40) != 0)
            {
              this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 68);
              if ((v8 & 0x80) == 0)
                goto LABEL_163;
            }
            else if ((v8 & 0x80) == 0)
            {
              goto LABEL_163;
            }
            this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
            if ((v8 & 0x200) == 0)
              goto LABEL_169;
            goto LABEL_167;
          }
        }
        else
        {
          v70 = v68[2];
        }
        if ((2 * v66) <= 4)
          v103 = 4;
        else
          v103 = (2 * v66);
        v104 = v103 + v66;
        if (!v69 || (unint64_t)&v69[v104] > v70)
        {
          v105 = 2 * v68[4];
          if (v105 <= v104 + 1)
            v105 = v104 + 1;
          v68[4] = v105;
          v106 = v105 + 8;
          this = (uint64_t)malloc_type_malloc(v105 + 8, 0xD0263BC5uLL);
          v107 = this + v106;
          *(_QWORD *)this = v68[3];
          v69 = (char *)(this + 8);
          v68[2] = v107;
          v68[3] = this;
        }
        v68[1] = &v69[v104];
        if ((_DWORD)v66)
          this = (uint64_t)memcpy(v69, *v64, v66);
        *(_QWORD *)(v4 + 12728) = v69;
        LODWORD(v66) = *(_DWORD *)(v4 + 12740);
        v67 = v69;
        v65 = *(_DWORD *)(v4 + 12736);
        goto LABEL_160;
      }
      if ((v8 & 0x40) != 0)
      {
        v64 = (const void **)(this + 12728);
        this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(this + 12728), 100);
        if ((v8 & 0x80) != 0)
          this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
LABEL_163:
        if ((v8 & 0x200) == 0)
          goto LABEL_169;
LABEL_167:
        v62 = (char **)v64;
        v63 = 79;
        goto LABEL_168;
      }
      if ((v8 & 0x80) != 0)
      {
        v62 = (char **)(this + 12728);
        v63 = 103;
      }
      else
      {
        if ((v8 & 0x200) == 0)
          goto LABEL_169;
        v62 = (char **)(this + 12728);
        v63 = 111;
      }
LABEL_168:
      this = (uint64_t)swift::Demangle::RemanglerBuffer::operator<<(v62, v63);
LABEL_169:
      if ((v8 & 0x100) != 0)
      {
        v18 = *(_DWORD *)(v4 + 12736);
        v108 = *(unsigned int *)(v4 + 12740);
        v20 = *(char **)(v4 + 12728);
        if (v18 < v108)
        {
LABEL_192:
          v31 = 0;
          v3 = 0;
          v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          v77 = 88;
LABEL_193:
          v20[v18] = v77;
          goto LABEL_194;
        }
        v109 = *(_QWORD **)(v4 + 12744);
        v110 = (char *)v109[1];
        if (&v20[v108] == v110)
        {
          v112 = (unint64_t)&v20[v108 + 1];
          v111 = v109[2];
          if (v112 <= v111)
          {
            v109[1] = v112;
            LODWORD(v113) = 1;
LABEL_191:
            *(_DWORD *)(v4 + 12740) = v108 + v113;
            goto LABEL_192;
          }
        }
        else
        {
          v111 = v109[2];
        }
        if ((2 * v108) <= 4)
          v113 = 4;
        else
          v113 = (2 * v108);
        v114 = v113 + v108;
        if (!v110 || (unint64_t)&v110[v114] > v111)
        {
          v115 = 2 * v109[4];
          if (v115 <= v114 + 1)
            v115 = v114 + 1;
          v109[4] = v115;
          v116 = v115 + 8;
          this = (uint64_t)malloc_type_malloc(v115 + 8, 0xD0263BC5uLL);
          v117 = this + v116;
          *(_QWORD *)this = v109[3];
          v110 = (char *)(this + 8);
          v109[2] = v117;
          v109[3] = this;
        }
        v109[1] = &v110[v114];
        if ((_DWORD)v108)
          this = (uint64_t)memcpy(v110, *(const void **)(v4 + 12728), v108);
        *(_QWORD *)(v4 + 12728) = v110;
        LODWORD(v108) = *(_DWORD *)(v4 + 12740);
        v20 = v110;
        v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_191;
      }
LABEL_61:
      v31 = 0;
      v3 = 0;
      v32 = 0;
LABEL_194:
      *(_DWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v32;
      return this;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  unsigned int v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v13 = *(_DWORD *)(v5 + 12736);
  v14 = *(unsigned int *)(v5 + 12740);
  v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    v16 = *(_QWORD **)(v5 + 12744);
    v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      v19 = (unint64_t)&v15[v14 + 1];
      v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      v18 = v16[2];
    }
    if ((2 * v14) <= 4)
      v20 = 4;
    else
      v20 = (2 * v14);
    v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      v22 = 2 * v16[4];
      if (v22 <= v21 + 1)
        v22 = v21 + 1;
      v16[4] = v22;
      v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      v24 = (char *)this + v23;
      *this = v16[3];
      v17 = (char *)(this + 1);
      v16[2] = v24;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if ((_DWORD)v14)
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    *(_QWORD *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    v15 = v17;
    v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 99;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleConstrainedExistential@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 == 2)
        goto LABEL_12;
      goto LABEL_9;
    }
    v9 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)v4 + 18);
  if (v8 == 2)
  {
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_15;
  }
LABEL_9:
  if (v8 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
    goto LABEL_12;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XP", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleConstrainedExistentialRequirementList@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  BOOL v13;

  v5 = (_anonymous_namespace_::Remangler *)this;
  v13 = 1;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = 0;
      v9 = a3 + 1;
      while (1)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 == 1)
          goto LABEL_13;
        if ((_DWORD)v10 != 5)
          break;
        if (*((unsigned int *)a2 + 2) <= v8)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_8;
        }
LABEL_16:
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
LABEL_8:
        if (v7 == ++v8)
          goto LABEL_20;
      }
      if ((_DWORD)v10 != 2)
        goto LABEL_7;
      v10 = 2;
LABEL_13:
      if (v10 <= v8)
        goto LABEL_7;
      goto LABEL_16;
  }
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGenericPartialSpecialization@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  swift::Demangle::Node *v9;
  uint64_t v10;
  swift::Demangle::Node *v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  char *v14;
  uint64_t *result;
  int v16;
  swift::Demangle::Node **v17;
  uint64_t v18;
  int v19;
  unsigned int v20;

  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      v10 = *(_QWORD *)a2;
      v9 = *(swift::Demangle::Node **)a2;
LABEL_9:
      v11 = (swift::Demangle::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    v9 = 0;
  }
  switch(v8)
  {
    case 1:
      v11 = (swift::Demangle::Node *)((char *)a2 + 8);
      goto LABEL_15;
    case 2:
      v11 = (swift::Demangle::Node *)((char *)a2 + 16);
      goto LABEL_15;
    case 5:
      v10 = *(_QWORD *)a2;
      goto LABEL_9;
  }
  v11 = 0;
LABEL_15:
  while (v9 != v11)
  {
    v12 = *(swift::Demangle::Node **)v9;
    if (*(_WORD *)(*(_QWORD *)v9 + 16) == 94)
    {
      v19 = *((unsigned __int8 *)v12 + 18);
      if ((v19 - 1) >= 2)
      {
        if (v19 != 5 || !*((_DWORD *)v12 + 2))
        {
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          break;
        }
        v12 = *(swift::Demangle::Node **)v12;
      }
      if (*(_DWORD *)a4)
        return result;
      break;
    }
    v9 = (swift::Demangle::Node *)((char *)v9 + 8);
  }
  v13 = (swift::Demangle::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) == 87)
    v14 = "TP";
  else
    v14 = "Tp";
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  v16 = *((unsigned __int8 *)a2 + 18);
  v17 = (swift::Demangle::Node **)a2;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      v18 = *(_QWORD *)a2;
      v17 = *(swift::Demangle::Node ***)a2;
      goto LABEL_33;
    }
    v17 = 0;
  }
  if (v16 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)a2 + 8);
LABEL_36:
    if (v17 != v13)
      goto LABEL_37;
    goto LABEL_43;
  }
  if (v16 == 2)
    goto LABEL_36;
  if (v16 != 5)
  {
    v13 = 0;
    if (v17)
      goto LABEL_37;
LABEL_43:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v18 = *(_QWORD *)a2;
LABEL_33:
  v13 = (swift::Demangle::Node **)(v18 + 8 * *((unsigned int *)a2 + 2));
  if (v17 == v13)
    goto LABEL_43;
LABEL_37:
  v20 = a3 + 1;
  while (1)
  {
    if (*((_WORD *)*v17 + 8) != 94)
    {
      if (*(_DWORD *)a4)
        return result;
    }
    if (++v17 == v13)
      goto LABEL_43;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WG", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WI", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleResilientProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Wr", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MP", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobal@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  int v9;
  swift::Demangle::Node *v10;
  uint64_t v11;
  swift::Demangle::Node *v12;
  char v13;
  unsigned int v14;
  char v15;
  swift::Demangle::Node *v16;
  int v17;
  swift::Demangle::Node *v18;
  swift::Demangle::Node *v19;

  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "$s", 2uLL, this[1593]);
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v10 = 0;
  }
  switch(v9)
  {
    case 1:
      v12 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_31;
      goto LABEL_16;
    case 2:
      v12 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_31;
      goto LABEL_16;
    case 5:
      v11 = *(_QWORD *)a2;
LABEL_9:
      v12 = (swift::Demangle::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12)
        goto LABEL_31;
      goto LABEL_16;
  }
  v12 = 0;
  if (v10)
  {
LABEL_16:
    v13 = 0;
    v14 = a3 + 1;
    do
    {
      v15 = 1;
      switch(*(_WORD *)(*(_QWORD *)v10 + 16))
      {
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x4D:
        case 0x56:
        case 0x57:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5F:
        case 0x60:
        case 0x90:
        case 0xA0:
        case 0xA4:
        case 0x100:
        case 0x115:
        case 0x11F:
        case 0x120:
        case 0x13F:
        case 0x148:
        case 0x149:
        case 0x14A:
        case 0x14C:
        case 0x14D:
        case 0x154:
          goto LABEL_18;
        default:
          if (*(_DWORD *)a4)
            return result;
          if ((v13 & 1) == 0)
            goto LABEL_30;
          v16 = v10;
          break;
      }
      while (1)
      {
        v17 = *((unsigned __int8 *)a2 + 18);
        v18 = a2;
        if ((v17 - 1) < 2)
          goto LABEL_26;
        if (v17 != 5)
          break;
        v18 = *(swift::Demangle::Node **)a2;
LABEL_26:
        if (v16 == v18)
          goto LABEL_30;
LABEL_27:
        v19 = (swift::Demangle::Node *)*((_QWORD *)v16 - 1);
        v16 = (swift::Demangle::Node *)((char *)v16 - 8);
        if (*(_DWORD *)a4)
          return result;
      }
      if (v16)
        goto LABEL_27;
LABEL_30:
      v15 = 0;
LABEL_18:
      v10 = (swift::Demangle::Node *)((char *)v10 + 8);
      v13 = v15;
    }
    while (v10 != v12);
  }
LABEL_31:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

void `anonymous namespace'::Remangler::mangleIdentifier(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  char *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v9 = 0uLL;
  LOBYTE(v10) = 0;
  {
    v6 = *((_QWORD *)this + 1585);
    if (v6 > 0xF)
    {
      v8 = *((_DWORD *)this + 3178) + 16;
      v11 = v9;
      v12 = v10;
      v13 = v8;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v11, &v11);
    }
    else
    {
      *((_QWORD *)this + 1585) = v6 + 1;
      v7 = (char *)this + 24 * v6 + 12296;
      *(_OWORD *)v7 = v9;
      v7[16] = v10;
    }
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleIVarInitializer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "fe", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleIVarDestroyer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "fE", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplEscaping@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 101;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplConvention@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v19;
  int v20;
  unsigned int v21;
  size_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;

  v3 = this;
  v5 = *a2;
  v6 = a2[1];
  if (v6 == (uint64_t *)13)
  {
    v11 = *v5;
    v12 = *(uint64_t *)((char *)v5 + 5);
    if (v11 != 0x5F65656C6C616340 || v12 != 0x64656E776F5F6565)
      goto LABEL_23;
    v10 = 120;
    goto LABEL_25;
  }
  if (v6 == (uint64_t *)18)
  {
    v14 = *v5;
    v15 = v5[1];
    v16 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 0x5F65656C6C616340 || v15 != 0x65746E6172617567 || v16 != 25701)
      goto LABEL_23;
    v10 = 103;
LABEL_25:
    v21 = this[3184];
    v22 = this[3185];
    v23 = (char *)*((_QWORD *)this + 1591);
    if (v21 < v22)
    {
LABEL_42:
      v20 = 0;
      a2 = 0;
      v19 = 0;
      v3[3184] = v21 + 1;
      v23[v21] = v10;
      goto LABEL_43;
    }
    v24 = (_QWORD *)*((_QWORD *)this + 1593);
    v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      v27 = (unint64_t)&v23[v22 + 1];
      v26 = v24[2];
      if (v27 <= v26)
      {
        v24[1] = v27;
        LODWORD(v28) = 1;
LABEL_41:
        v3[3185] = v22 + v28;
        goto LABEL_42;
      }
    }
    else
    {
      v26 = v24[2];
    }
    if ((2 * v22) <= 4)
      v28 = 4;
    else
      v28 = (2 * v22);
    v29 = v28 + v22;
    if (!v25 || (unint64_t)&v25[v29] > v26)
    {
      v30 = 2 * v24[4];
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      v24[4] = v30;
      v31 = v30 + 8;
      this = (unsigned int *)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v32 = (char *)this + v31;
      *(_QWORD *)this = v24[3];
      v25 = (char *)(this + 2);
      v24[2] = v32;
      v24[3] = this;
    }
    v24[1] = &v25[v29];
    if ((_DWORD)v22)
      this = (unsigned int *)memcpy(v25, *((const void **)v3 + 1591), v22);
    *((_QWORD *)v3 + 1591) = v25;
    LODWORD(v22) = v3[3185];
    v23 = v25;
    v21 = v3[3184];
    goto LABEL_41;
  }
  if (v6 == (uint64_t *)15)
  {
    v7 = *v5;
    v8 = *(uint64_t *)((char *)v5 + 7);
    if (v7 == 0x5F65656C6C616340 && v8 == 0x64656E776F6E755FLL)
    {
      v10 = 121;
      goto LABEL_25;
    }
  }
LABEL_23:
  v19 = 1882;
  v20 = 15;
LABEL_43:
  *(_DWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v19;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplDifferentiabilityKind@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;

  v3 = this;
  v5 = *(_QWORD *)a2;
  v6 = this[3184];
  v7 = this[3185];
  v8 = (char *)*((_QWORD *)this + 1591);
  if (v6 >= v7)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 1593);
    v10 = (char *)v9[1];
    if (&v8[v7] == v10)
    {
      v12 = (unint64_t)&v8[v7 + 1];
      v11 = v9[2];
      if (v12 <= v11)
      {
        v9[1] = v12;
        LODWORD(v13) = 1;
LABEL_20:
        v3[3185] = v7 + v13;
        goto LABEL_21;
      }
    }
    else
    {
      v11 = v9[2];
    }
    if ((2 * v7) <= 4)
      v13 = 4;
    else
      v13 = (2 * v7);
    v14 = v13 + v7;
    if (v10)
      v15 = (unint64_t)&v10[v13 + v7] > v11;
    else
      v15 = 1;
    v8 = (char *)v9[1];
    if (v15)
    {
      v16 = 2 * v9[4];
      if (v16 <= v14 + 1)
        v16 = v14 + 1;
      v9[4] = v16;
      v17 = v16 + 8;
      this = (unsigned int *)malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      v18 = (char *)this + v17;
      *(_QWORD *)this = v9[3];
      v8 = (char *)(this + 2);
      v9[2] = v18;
      v9[3] = this;
    }
    v9[1] = &v8[v14];
    if ((_DWORD)v7)
      this = (unsigned int *)memcpy(v8, *((const void **)v3 + 1591), v7);
    *((_QWORD *)v3 + 1591) = v8;
    LODWORD(v7) = v3[3185];
    v6 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v6 + 1;
  v8[v6] = v5;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplErasedIsolation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 65;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplSendingResult@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 84;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplParameterResultDifferentiability@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  if (*((_BYTE *)a2 + 18) != 3)
  {
    v6 = 1890;
    v7 = 1;
    goto LABEL_29;
  }
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
  {
    v7 = 0;
    a2 = 0;
    v6 = 0;
    goto LABEL_29;
  }
  if (v4 == 13 && **(_QWORD **)a2 == 0x76697265446F6E40 && *(_QWORD *)(*(_QWORD *)a2 + 5) == 0x6576697461766972)
  {
    v8 = this;
    v9 = this[3184];
    v10 = this[3185];
    v11 = (char *)*((_QWORD *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      v7 = 0;
      a2 = 0;
      v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }
    v12 = (_QWORD *)*((_QWORD *)this + 1593);
    v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }
    else
    {
      v14 = v12[2];
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      v18 = 2 * v12[4];
      if (v18 <= v17 + 1)
        v18 = v17 + 1;
      v12[4] = v18;
      v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      v20 = (char *)this + v19;
      *(_QWORD *)this = v12[3];
      v13 = (char *)(this + 2);
      v12[2] = v20;
      v12[3] = this;
    }
    v12[1] = &v13[v17];
    if ((_DWORD)v10)
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
    *((_QWORD *)v8 + 1591) = v13;
    LODWORD(v10) = v8[3185];
    v11 = v13;
    v9 = v8[3184];
    goto LABEL_27;
  }
  v6 = 1898;
  v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplParameterSending@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  size_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;

  if (*((_BYTE *)a2 + 18) != 3)
  {
    v5 = 1906;
    v6 = 1;
    goto LABEL_9;
  }
  if (*((_QWORD *)a2 + 1) == 7 && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(_QWORD *)a2 + 3) == 1735289188)
  {
    v7 = this;
    v8 = this[3184];
    v9 = this[3185];
    v10 = (char *)*((_QWORD *)this + 1591);
    if (v8 < v9)
    {
LABEL_27:
      v6 = 0;
      a2 = 0;
      v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_9;
    }
    v11 = (_QWORD *)*((_QWORD *)this + 1593);
    v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      v14 = (unint64_t)&v10[v9 + 1];
      v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_26:
        v7[3185] = v9 + v15;
        goto LABEL_27;
      }
    }
    else
    {
      v13 = v11[2];
    }
    if ((2 * v9) <= 4)
      v15 = 4;
    else
      v15 = (2 * v9);
    v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      v17 = 2 * v11[4];
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      v11[4] = v17;
      v18 = v17 + 8;
      this = (unsigned int *)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v19 = (char *)this + v18;
      *(_QWORD *)this = v11[3];
      v12 = (char *)(this + 2);
      v11[2] = v19;
      v11[3] = this;
    }
    v11[1] = &v12[v16];
    if ((_DWORD)v9)
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
    *((_QWORD *)v7 + 1591) = v12;
    LODWORD(v9) = v7[3185];
    v10 = v12;
    v8 = v7[3184];
    goto LABEL_26;
  }
  v5 = 1910;
  v6 = 19;
LABEL_9:
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

char *`anonymous namespace'::Remangler::mangleImplFunctionConvention@<X0>(char *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::Node *v3;
  unsigned int *v4;
  int v6;
  swift::Demangle::Node *v7;
  swift::Demangle::Node *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  swift::Demangle::Node *v16;
  const void **v17;
  unsigned int v18;
  size_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  unsigned int v28;
  size_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  unsigned int v47;
  size_t v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  int v60;
  uint64_t v61;

  v3 = a2;
  v4 = (unsigned int *)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2))
      goto LABEL_47;
    v7 = *(swift::Demangle::Node **)a2;
  }
  if (*(_BYTE *)(*(_QWORD *)v7 + 18) != 3)
  {
LABEL_47:
    v11 = 1936;
    v12 = 1;
    goto LABEL_48;
  }
  v8 = a2;
  if ((v6 - 1) >= 2)
    v8 = *(swift::Demangle::Node **)a2;
  v9 = *(uint64_t **)v8;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
  v11 = 1936;
  v12 = 1;
  v13 = *v9;
  switch(v10)
  {
    case 1:
      if (*(_BYTE *)v13 == 99)
      {
        v14 = 67;
        goto LABEL_17;
      }
      v11 = 1936;
      break;
    case 5:
      if (*(_DWORD *)v13 != 1668246626 || *(_BYTE *)(v13 + 4) != 107)
        goto LABEL_47;
      v14 = 66;
LABEL_17:
      v16 = a2;
      if (v6 != 2)
      {
        if (v6 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_51;
        v16 = *(swift::Demangle::Node **)a2;
      }
      if (*(_WORD *)(*((_QWORD *)v16 + 1) + 16) != 23)
        goto LABEL_51;
      v17 = (const void **)(this + 12728);
      v18 = *((_DWORD *)this + 3184);
      v19 = *((unsigned int *)this + 3185);
      v20 = (char *)*((_QWORD *)this + 1591);
      if (v18 < v19)
        goto LABEL_83;
      v21 = (_QWORD *)*((_QWORD *)this + 1593);
      v22 = (char *)v21[1];
      if (&v20[v19] == v22)
      {
        v40 = (unint64_t)&v20[v19 + 1];
        v23 = v21[2];
        if (v40 <= v23)
        {
          v21[1] = v40;
          LODWORD(v41) = 1;
          goto LABEL_82;
        }
      }
      else
      {
        v23 = v21[2];
      }
      if ((2 * v19) <= 4)
        v41 = 4;
      else
        v41 = (2 * v19);
      v42 = v41 + v19;
      if (!v22 || (unint64_t)&v22[v42] > v23)
      {
        v43 = 2 * v21[4];
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        v21[4] = v43;
        v44 = v43 + 8;
        v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        v46 = (char *)v45 + v44;
        *v45 = v21[3];
        v22 = (char *)(v45 + 1);
        v21[2] = v46;
        v21[3] = v45;
      }
      v21[1] = &v22[v42];
      if ((_DWORD)v19)
        memcpy(v22, *v17, v19);
      *((_QWORD *)v4 + 1591) = v22;
      LODWORD(v19) = v4[3185];
      v20 = v22;
      v18 = v4[3184];
LABEL_82:
      v4[3185] = v19 + v41;
LABEL_83:
      v4[3184] = v18 + 1;
      v20[v18] = 122;
      v47 = v4[3184];
      v48 = v4[3185];
      v49 = (char *)*((_QWORD *)v4 + 1591);
      if (v47 < v48)
        goto LABEL_100;
      v50 = (_QWORD *)*((_QWORD *)v4 + 1593);
      v51 = (char *)v50[1];
      if (&v49[v48] == v51)
      {
        v53 = (unint64_t)&v49[v48 + 1];
        v52 = v50[2];
        if (v53 <= v52)
        {
          v50[1] = v53;
          LODWORD(v54) = 1;
          goto LABEL_99;
        }
      }
      else
      {
        v52 = v50[2];
      }
      if ((2 * v48) <= 4)
        v54 = 4;
      else
        v54 = (2 * v48);
      v55 = v54 + v48;
      if (!v51 || (unint64_t)&v51[v55] > v52)
      {
        v56 = 2 * v50[4];
        if (v56 <= v55 + 1)
          v56 = v55 + 1;
        v50[4] = v56;
        v57 = v56 + 8;
        v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
        v59 = (char *)v58 + v57;
        *v58 = v50[3];
        v51 = (char *)(v58 + 1);
        v50[2] = v59;
        v50[3] = v58;
      }
      v50[1] = &v51[v55];
      if ((_DWORD)v48)
        memcpy(v51, *v17, v48);
      *((_QWORD *)v4 + 1591) = v51;
      LODWORD(v48) = v4[3185];
      v49 = v51;
      v47 = v4[3184];
LABEL_99:
      v4[3185] = v48 + v54;
LABEL_100:
      v4[3184] = v47 + 1;
      v49[v47] = v14;
      v60 = *((unsigned __int8 *)v3 + 18);
      if (v60 == 2)
        goto LABEL_104;
      if (v60 == 5 && *((_DWORD *)v3 + 2) >= 2u)
      {
        v3 = *(swift::Demangle::Node **)v3;
LABEL_104:
        v61 = *((_QWORD *)v3 + 1);
      }
      else
      {
        v61 = 0;
      }
      swift::Demangle::CharVector::append(v4 + 3182, *(_QWORD *)(v61 + 8), *((swift::Demangle::NodeFactory **)v4 + 1593));
      this = (char *)swift::Demangle::CharVector::append((char **)v4 + 1591, *(void **)v61, *(_QWORD *)(v61 + 8), *((_QWORD **)v4 + 1593));
      v12 = 0;
      v3 = 0;
      v11 = 0;
      break;
    case 6:
      if (*(_DWORD *)v13 != 1752458605 || *(_WORD *)(v13 + 4) != 25711)
        goto LABEL_47;
      v14 = 77;
      goto LABEL_51;
    case 7:
      if (*(_DWORD *)v13 != 1936682083 || *(_DWORD *)(v13 + 3) != 1701999987)
        goto LABEL_47;
      v14 = 75;
      goto LABEL_51;
    case 11:
      if (*(_QWORD *)v13 != 0x74656D5F636A626FLL || *(_QWORD *)(v13 + 3) != 0x646F6874656D5F63)
        goto LABEL_47;
      v14 = 79;
      goto LABEL_51;
    case 14:
      if (*(_QWORD *)v13 != 0x5F7373656E746977 || *(_QWORD *)(v13 + 6) != 0x646F6874656D5F73)
        goto LABEL_47;
      v14 = 87;
LABEL_51:
      v28 = *((_DWORD *)this + 3184);
      v29 = *((unsigned int *)this + 3185);
      v30 = (char *)*((_QWORD *)this + 1591);
      if (v28 < v29)
        goto LABEL_67;
      v31 = (_QWORD *)*((_QWORD *)this + 1593);
      v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        v34 = (unint64_t)&v30[v29 + 1];
        v33 = v31[2];
        if (v34 <= v33)
        {
          v31[1] = v34;
          LODWORD(v35) = 1;
          goto LABEL_66;
        }
      }
      else
      {
        v33 = v31[2];
      }
      if ((2 * v29) <= 4)
        v35 = 4;
      else
        v35 = (2 * v29);
      v36 = v35 + v29;
      if (!v32 || (unint64_t)&v32[v36] > v33)
      {
        v37 = 2 * v31[4];
        if (v37 <= v36 + 1)
          v37 = v36 + 1;
        v31[4] = v37;
        v38 = v37 + 8;
        this = (char *)malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        v39 = &this[v38];
        *(_QWORD *)this = v31[3];
        v32 = this + 8;
        v31[2] = v39;
        v31[3] = this;
      }
      v31[1] = &v32[v36];
      if ((_DWORD)v29)
        this = (char *)memcpy(v32, *((const void **)v4 + 1591), v29);
      *((_QWORD *)v4 + 1591) = v32;
      LODWORD(v29) = v4[3185];
      v30 = v32;
      v28 = v4[3184];
LABEL_66:
      v4[3185] = v29 + v35;
LABEL_67:
      v12 = 0;
      v3 = 0;
      v11 = 0;
      v4[3184] = v28 + 1;
      v30[v28] = v14;
      break;
    default:
      break;
  }
LABEL_48:
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v11;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleImplFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t v5;
  int v7;
  swift::Demangle::Node *v8;
  uint64_t v9;
  swift::Demangle::Node *v10;
  swift::Demangle::Node *v11;
  swift::Demangle::Node *v12;
  unsigned int v13;
  uint64_t v14;
  swift::Demangle::Node *v15;
  swift::Demangle::Node *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  size_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  size_t v42;
  unsigned int v43;
  size_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  char *v51;
  BOOL v52;
  uint64_t v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  unsigned int v59;
  size_t v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  size_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  int v72;
  swift::Demangle::Node **v73;
  swift::Demangle::Node **v74;
  swift::Demangle::Node **v75;
  size_t v76;
  char *v77;
  unsigned int v78;
  int v79;
  size_t v80;
  char v81;
  swift::Demangle::Node **v82;
  _QWORD *v84;
  char *v85;
  unint64_t v86;
  size_t v87;
  size_t v88;
  swift::Demangle::Node **v89;
  uint64_t v90;
  swift::Demangle::Node *v92;
  uint64_t v93;
  unsigned int v95;
  size_t v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  unint64_t v100;
  unsigned int v101;
  size_t v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  unint64_t v106;
  _QWORD *v107;
  char *v108;
  unint64_t v109;
  _QWORD *v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  char *v114;
  unint64_t v115;
  int v116;
  int v117;
  swift::Demangle::Node *v119;
  int v120;
  swift::Demangle::Node *v123;
  swift::Demangle::Node *v124;
  int v125;
  swift::Demangle::Node *v128;
  swift::Demangle::Node *v129;
  int v130;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  BOOL v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  size_t v142;
  BOOL v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  char *v147;
  int v148;
  swift::Demangle::Node **v149;
  char v150;
  swift::Demangle::Node *v151;
  size_t v152;
  int v153;
  unint64_t v162;
  uint64_t v163;
  size_t v164;
  BOOL v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  int v169;
  swift::Demangle::Node **v170;
  swift::Demangle::Node *v171;
  uint64_t v172;
  int *v173;
  int v174;
  int v175;
  uint64_t v177;
  int v178;
  uint64_t v180;
  uint64_t v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v188;
  uint64_t v189;
  size_t v190;
  BOOL v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  size_t v197;
  BOOL v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  unint64_t v202;
  uint64_t v203;
  size_t v204;
  BOOL v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  _QWORD *v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  size_t v213;
  unint64_t v214;
  unint64_t v215;
  char v217;
  char v218;
  char v220;
  unsigned int v221;
  size_t v222;
  char *v223;
  _QWORD *v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  size_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  int v233;
  swift::Demangle::Node *v234;
  unsigned int v235;
  size_t v236;
  _BYTE *v237;
  _QWORD *v238;
  _BYTE *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  size_t v243;
  BOOL v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  unint64_t v248;
  uint64_t v249;
  size_t v250;
  unint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  char *v254;
  int v255;
  swift::Demangle::Node *v256;
  uint64_t v257;
  int v258;
  swift::Demangle::Node **v259;
  swift::Demangle::Node *v260;
  swift::Demangle::Node **v261;
  int v262;
  swift::Demangle::Node **v263;
  swift::Demangle::Node *v264;
  unsigned int v265;
  size_t v266;
  char *v267;
  swift::Demangle::Node **v268;
  BOOL v269;
  _QWORD *v270;
  char *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  size_t v275;
  unint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  char *v279;
  int v280;
  _QWORD *v281;
  uint64_t v282;
  int v283;
  swift::Demangle::Node **v284;
  swift::Demangle::Node *v285;
  swift::Demangle::Node **v286;
  swift::Demangle::Node **v287;
  uint64_t v288;
  const char *v289;
  char *v290;
  swift::Demangle::Node **v291;
  int v292[2];
  const void **v293;

  v4 = a2;
  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      v9 = *(_QWORD *)a2;
      v8 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v8 = 0;
  }
  switch(v7)
  {
    case 1:
      v10 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v8 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_30;
      break;
    case 2:
      v10 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v8 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_30;
      break;
    case 5:
      v9 = *(_QWORD *)a2;
LABEL_9:
      v10 = (swift::Demangle::Node *)(v9 + 8 * *((unsigned int *)a2 + 2));
      if (v8 != v10)
        break;
LABEL_30:
      v26 = (char *)&unk_20AA50335;
      v27 = 1;
      v19 = 1;
      goto LABEL_31;
    default:
      v10 = 0;
      if (!v8)
        goto LABEL_30;
      break;
  }
  v11 = 0;
  v12 = 0;
  v13 = a3 + 1;
  v289 = (const char *)&unk_20AA50335;
  *(_QWORD *)v292 = 0;
  while (2)
  {
    v16 = v11;
    v15 = *(swift::Demangle::Node **)v8;
    v11 = *(swift::Demangle::Node **)v8;
    switch(*(_WORD *)(*(_QWORD *)v8 + 16))
    {
      case '+':
        goto LABEL_13;
      case '.':
        v289 = "P";
        v11 = *(swift::Demangle::Node **)v8;
        goto LABEL_13;
      case 't':
        v11 = v16;
        v12 = *(swift::Demangle::Node **)v8;
        goto LABEL_13;
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        v17 = *((unsigned __int8 *)v15 + 18);
        v14 = 1;
        if (v17 == 2)
          goto LABEL_12;
        if (v17 != 5)
        {
          v49 = 1984;
          goto LABEL_475;
        }
        v18 = *((unsigned int *)v15 + 2);
        if ((v18 - 2) > 2)
        {
          v49 = 1984;
          LODWORD(v14) = 1;
          goto LABEL_475;
        }
        v14 = v18 - 1;
        v15 = *(swift::Demangle::Node **)v15;
LABEL_12:
        v11 = v16;
        if (*(_DWORD *)a4)
          return this;
LABEL_13:
        v8 = (swift::Demangle::Node *)((char *)v8 + 8);
        if (v8 != v10)
          continue;
        if (v11)
        {
          if (*(_DWORD *)a4)
            return this;
        }
        v19 = v12 == 0;
        if (!v12)
          goto LABEL_528;
        v20 = *(_DWORD *)(v5 + 12736);
        v21 = *(unsigned int *)(v5 + 12740);
        v22 = *(char **)(v5 + 12728);
        if (v20 < v21)
          goto LABEL_501;
        v23 = *(_QWORD **)(v5 + 12744);
        v24 = (char *)v23[1];
        if (&v22[v21] == v24)
        {
          v248 = (unint64_t)&v22[v21 + 1];
          v25 = v23[2];
          if (v248 <= v25)
          {
            v23[1] = v248;
            LODWORD(v249) = 1;
            goto LABEL_500;
          }
        }
        else
        {
          v25 = v23[2];
        }
        if ((2 * v21) <= 4)
          v249 = 4;
        else
          v249 = (2 * v21);
        v250 = v249 + v21;
        if (!v24 || (unint64_t)&v24[v250] > v25)
        {
          v251 = 2 * v23[4];
          if (v251 <= v250 + 1)
            v251 = v250 + 1;
          v23[4] = v251;
          v252 = v251 + 8;
          v253 = malloc_type_malloc(v251 + 8, 0xD0263BC5uLL);
          v254 = (char *)v253 + v252;
          *v253 = v23[3];
          v24 = (char *)(v253 + 1);
          v23[2] = v254;
          v23[3] = v253;
        }
        v23[1] = &v24[v250];
        if ((_DWORD)v21)
          memcpy(v24, *(const void **)(v5 + 12728), v21);
        *(_QWORD *)(v5 + 12728) = v24;
        LODWORD(v21) = *(_DWORD *)(v5 + 12740);
        v22 = v24;
        v20 = *(_DWORD *)(v5 + 12736);
LABEL_500:
        v19 = v12 == 0;
        *(_DWORD *)(v5 + 12740) = v21 + v249;
LABEL_501:
        *(_DWORD *)(v5 + 12736) = v20 + 1;
        v22[v20] = 121;
        v255 = *((unsigned __int8 *)v12 + 18);
        v256 = v12;
        if ((v255 - 1) < 2)
          goto LABEL_505;
        if (v255 == 5 && *((_DWORD *)v12 + 2))
        {
          v256 = *(swift::Demangle::Node **)v12;
LABEL_505:
          v257 = *(_QWORD *)v256;
        }
        else
        {
          v257 = 0;
        }
        v258 = *(unsigned __int8 *)(v257 + 18);
        v259 = (swift::Demangle::Node **)v257;
        if ((v258 - 1) < 2)
          goto LABEL_511;
        if (v258 == 5)
        {
          v260 = *(swift::Demangle::Node **)v257;
          v259 = *(swift::Demangle::Node ***)v257;
LABEL_515:
          v261 = (swift::Demangle::Node **)((char *)v260 + 8 * *(unsigned int *)(v257 + 8));
          goto LABEL_519;
        }
        v259 = 0;
LABEL_511:
        switch(v258)
        {
          case 1:
            v261 = (swift::Demangle::Node **)(v257 + 8);
            break;
          case 2:
            v261 = (swift::Demangle::Node **)(v257 + 16);
            break;
          case 5:
            v260 = *(swift::Demangle::Node **)v257;
            goto LABEL_515;
          default:
            v261 = 0;
            break;
        }
LABEL_519:
        if (v259 != v261)
        {
          do
          {
            if (*(_DWORD *)a4)
              return this;
            ++v259;
          }
          while (v259 != v261);
          v255 = *((unsigned __int8 *)v12 + 18);
        }
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v255 == 2)
          goto LABEL_527;
        if (v255 == 5 && *((_DWORD *)v12 + 2) >= 2u)
        {
          v12 = *(swift::Demangle::Node **)v12;
LABEL_527:
          if (*(_DWORD *)a4)
            return this;
        }
LABEL_528:
        if (!*(_QWORD *)v292)
        {
          v27 = 1;
LABEL_535:
          v26 = (char *)v289;
          goto LABEL_31;
        }
        v262 = *(unsigned __int8 *)(*(_QWORD *)v292 + 18);
        v263 = *(swift::Demangle::Node ***)v292;
        if ((v262 - 1) < 2)
          goto LABEL_533;
        if (v262 == 5 && *(_DWORD *)(*(_QWORD *)v292 + 8))
        {
          v263 = **(swift::Demangle::Node ****)v292;
LABEL_533:
          v264 = *v263;
        }
        else
        {
          v264 = 0;
        }
        if (*(_DWORD *)a4)
          return this;
        v265 = *(_DWORD *)(v5 + 12736);
        v266 = *(unsigned int *)(v5 + 12740);
        v267 = *(char **)(v5 + 12728);
        if (v265 < v266)
        {
          v268 = *(swift::Demangle::Node ***)v292;
          goto LABEL_564;
        }
        v269 = v19;
        v270 = *(_QWORD **)(v5 + 12744);
        v271 = (char *)v270[1];
        if (&v267[v266] == v271)
        {
          v273 = (unint64_t)&v267[v266 + 1];
          v272 = v270[2];
          if (v273 <= v272)
          {
            v270[1] = v273;
            LODWORD(v274) = 1;
            goto LABEL_563;
          }
        }
        else
        {
          v272 = v270[2];
        }
        if ((2 * v266) <= 4)
          v274 = 4;
        else
          v274 = (2 * v266);
        v275 = v274 + v266;
        if (!v271 || (unint64_t)&v271[v275] > v272)
        {
          v276 = 2 * v270[4];
          if (v276 <= v275 + 1)
            v276 = v275 + 1;
          v270[4] = v276;
          v277 = v276 + 8;
          v278 = malloc_type_malloc(v276 + 8, 0xD0263BC5uLL);
          v279 = (char *)v278 + v277;
          *v278 = v270[3];
          v271 = (char *)(v278 + 1);
          v270[2] = v279;
          v270[3] = v278;
        }
        v270[1] = &v271[v275];
        if ((_DWORD)v266)
          memcpy(v271, *(const void **)(v5 + 12728), v266);
        *(_QWORD *)(v5 + 12728) = v271;
        LODWORD(v266) = *(_DWORD *)(v5 + 12740);
        v267 = v271;
        v265 = *(_DWORD *)(v5 + 12736);
LABEL_563:
        v19 = v269;
        v268 = *(swift::Demangle::Node ***)v292;
        *(_DWORD *)(v5 + 12740) = v266 + v274;
LABEL_564:
        *(_DWORD *)(v5 + 12736) = v265 + 1;
        v267[v265] = 121;
        v280 = *((unsigned __int8 *)v268 + 18);
        v281 = v268;
        if (v280 == 2)
          goto LABEL_568;
        if (v280 == 5 && *((_DWORD *)v268 + 2) >= 2u)
        {
          v281 = *v268;
LABEL_568:
          v282 = v281[1];
        }
        else
        {
          v282 = 0;
        }
        v283 = *(unsigned __int8 *)(v282 + 18);
        v284 = (swift::Demangle::Node **)v282;
        if ((v283 - 1) < 2)
          goto LABEL_574;
        if (v283 == 5)
        {
          v285 = *(swift::Demangle::Node **)v282;
          v284 = *(swift::Demangle::Node ***)v282;
LABEL_578:
          v286 = (swift::Demangle::Node **)((char *)v285 + 8 * *(unsigned int *)(v282 + 8));
          goto LABEL_582;
        }
        v284 = 0;
LABEL_574:
        switch(v283)
        {
          case 1:
            v286 = (swift::Demangle::Node **)(v282 + 8);
            break;
          case 2:
            v286 = (swift::Demangle::Node **)(v282 + 16);
            break;
          case 5:
            v285 = *(swift::Demangle::Node **)v282;
            goto LABEL_578;
          default:
            v286 = 0;
            break;
        }
LABEL_582:
        if (v284 == v286)
        {
          v26 = (char *)v289;
          v287 = *(swift::Demangle::Node ***)v292;
        }
        else
        {
          do
          {
            if (*(_DWORD *)a4)
              return this;
            ++v284;
          }
          while (v284 != v286);
          v26 = (char *)v289;
          v287 = *(swift::Demangle::Node ***)v292;
          v280 = *(unsigned __int8 *)(*(_QWORD *)v292 + 18);
        }
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v280 == 5 && *((_DWORD *)v287 + 2) >= 3u)
        {
          v288 = *((_QWORD *)*v287 + 2);
          if (*(_WORD *)(v288 + 16) == 235)
          else
          if (*(_DWORD *)a4)
            return this;
          v27 = 0;
          goto LABEL_535;
        }
        v27 = 0;
        break;
      case 'w':
        v11 = v16;
        *(_QWORD *)v292 = *(_QWORD *)v8;
        goto LABEL_13;
      default:
        v11 = v16;
        goto LABEL_13;
    }
    break;
  }
LABEL_31:
  v293 = (const void **)(v5 + 12728);
  v28 = *(_DWORD *)(v5 + 12736);
  v29 = *(unsigned int *)(v5 + 12740);
  v30 = *(char **)(v5 + 12728);
  if (v28 < v29)
    goto LABEL_51;
  v31 = *(_QWORD **)(v5 + 12744);
  v32 = (char *)v31[1];
  if (&v30[v29] != v32)
  {
    v33 = v31[2];
LABEL_39:
    v290 = v26;
    v35 = v19;
    if ((2 * v29) <= 4)
      v36 = 4;
    else
      v36 = (2 * v29);
    v37 = v36 + v29;
    if (!v32 || (unint64_t)&v32[v37] > v33)
    {
      v38 = 2 * v31[4];
      if (v38 <= v37 + 1)
        v38 = v37 + 1;
      v31[4] = v38;
      v39 = v38 + 8;
      v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
      v41 = (char *)v40 + v39;
      *v40 = v31[3];
      v32 = (char *)(v40 + 1);
      v31[2] = v41;
      v31[3] = v40;
    }
    v31[1] = &v32[v37];
    if ((_DWORD)v29)
      memcpy(v32, *v293, v29);
    *(_QWORD *)(v5 + 12728) = v32;
    LODWORD(v29) = *(_DWORD *)(v5 + 12740);
    v30 = v32;
    v28 = *(_DWORD *)(v5 + 12736);
    v19 = v35;
    v26 = v290;
    goto LABEL_50;
  }
  v34 = (unint64_t)&v30[v29 + 1];
  v33 = v31[2];
  if (v34 > v33)
    goto LABEL_39;
  v31[1] = v34;
  LODWORD(v36) = 1;
LABEL_50:
  *(_DWORD *)(v5 + 12740) = v29 + v36;
LABEL_51:
  *(_DWORD *)(v5 + 12736) = v28 + 1;
  v30[v28] = 73;
  if ((v27 & 1) != 0)
  {
    if (v19)
      goto LABEL_53;
LABEL_74:
    v59 = *(_DWORD *)(v5 + 12736);
    v60 = *(unsigned int *)(v5 + 12740);
    v61 = *(char **)(v5 + 12728);
    if (v59 < v60)
      goto LABEL_90;
    v62 = *(_QWORD **)(v5 + 12744);
    v63 = (char *)v62[1];
    if (&v61[v60] == v63)
    {
      v65 = (unint64_t)&v61[v60 + 1];
      v64 = v62[2];
      if (v65 <= v64)
      {
        v62[1] = v65;
        LODWORD(v66) = 1;
LABEL_89:
        *(_DWORD *)(v5 + 12740) = v60 + v66;
LABEL_90:
        *(_DWORD *)(v5 + 12736) = v59 + 1;
        v61[v59] = 73;
        if (v26)
          goto LABEL_54;
        goto LABEL_91;
      }
    }
    else
    {
      v64 = v62[2];
    }
    if ((2 * v60) <= 4)
      v66 = 4;
    else
      v66 = (2 * v60);
    v67 = v66 + v60;
    if (!v63 || (unint64_t)&v63[v67] > v64)
    {
      v68 = 2 * v62[4];
      if (v68 <= v67 + 1)
        v68 = v67 + 1;
      v62[4] = v68;
      v69 = v68 + 8;
      v70 = malloc_type_malloc(v68 + 8, 0xD0263BC5uLL);
      v71 = (char *)v70 + v69;
      *v70 = v62[3];
      v63 = (char *)(v70 + 1);
      v62[2] = v71;
      v62[3] = v70;
    }
    v62[1] = &v63[v67];
    if ((_DWORD)v60)
      memcpy(v63, *v293, v60);
    *(_QWORD *)(v5 + 12728) = v63;
    LODWORD(v60) = *(_DWORD *)(v5 + 12740);
    v61 = v63;
    v59 = *(_DWORD *)(v5 + 12736);
    goto LABEL_89;
  }
  v43 = *(_DWORD *)(v5 + 12736);
  v44 = *(unsigned int *)(v5 + 12740);
  v45 = *(char **)(v5 + 12728);
  if (v43 >= v44)
  {
    v46 = *(_QWORD **)(v5 + 12744);
    v47 = (char *)v46[1];
    if (&v45[v44] == v47)
    {
      v50 = (unint64_t)&v45[v44 + 1];
      v48 = v46[2];
      if (v50 <= v48)
      {
        v46[1] = v50;
        LODWORD(v53) = 1;
LABEL_72:
        *(_DWORD *)(v5 + 12740) = v44 + v53;
        goto LABEL_73;
      }
    }
    else
    {
      v48 = v46[2];
    }
    v51 = v26;
    v52 = v19;
    if ((2 * v44) <= 4)
      v53 = 4;
    else
      v53 = (2 * v44);
    v54 = v53 + v44;
    if (!v47 || (unint64_t)&v47[v54] > v48)
    {
      v55 = 2 * v46[4];
      if (v55 <= v54 + 1)
        v55 = v54 + 1;
      v46[4] = v55;
      v56 = v55 + 8;
      v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
      v58 = (char *)v57 + v56;
      *v57 = v46[3];
      v47 = (char *)(v57 + 1);
      v46[2] = v58;
      v46[3] = v57;
    }
    v46[1] = &v47[v54];
    if ((_DWORD)v44)
      memcpy(v47, *v293, v44);
    *(_QWORD *)(v5 + 12728) = v47;
    LODWORD(v44) = *(_DWORD *)(v5 + 12740);
    v45 = v47;
    v43 = *(_DWORD *)(v5 + 12736);
    v19 = v52;
    v26 = v51;
    goto LABEL_72;
  }
LABEL_73:
  *(_DWORD *)(v5 + 12736) = v43 + 1;
  v45[v43] = 115;
  if (!v19)
    goto LABEL_74;
LABEL_53:
  if (v26)
  {
LABEL_54:
    v42 = strlen(v26);
    goto LABEL_92;
  }
LABEL_91:
  v42 = 0;
LABEL_92:
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v293, v26, v42, *(_QWORD **)(v5 + 12744));
  v72 = *((unsigned __int8 *)v4 + 18);
  v73 = (swift::Demangle::Node **)v4;
  if ((v72 - 1) >= 2)
  {
    if (v72 == 5)
    {
      v74 = *(swift::Demangle::Node ***)v4;
      v73 = *(swift::Demangle::Node ***)v4;
      goto LABEL_100;
    }
    v73 = 0;
  }
  if (v72 == 1)
  {
    v75 = (swift::Demangle::Node **)((char *)v4 + 8);
    if (v73 != (swift::Demangle::Node **)((char *)v4 + 8))
      goto LABEL_107;
    goto LABEL_455;
  }
  if (v72 == 2)
  {
    v75 = (swift::Demangle::Node **)((char *)v4 + 16);
    if (v73 != (swift::Demangle::Node **)((char *)v4 + 16))
      goto LABEL_107;
LABEL_455:
    v235 = *(_DWORD *)(v5 + 12736);
    v236 = *(unsigned int *)(v5 + 12740);
    v237 = *(_BYTE **)(v5 + 12728);
    if (v235 < v236)
    {
LABEL_474:
      LODWORD(v14) = 0;
      v4 = 0;
      v49 = 0;
      *(_DWORD *)(v5 + 12736) = v235 + 1;
      v237[v235] = 95;
      goto LABEL_475;
    }
    v238 = *(_QWORD **)(v5 + 12744);
    v239 = (_BYTE *)v238[1];
    if (&v237[v236] == v239)
    {
      v241 = (unint64_t)&v237[v236 + 1];
      v240 = v238[2];
      if (v241 <= v240)
      {
        v238[1] = v241;
        LODWORD(v242) = 1;
LABEL_473:
        *(_DWORD *)(v5 + 12740) = v236 + v242;
        goto LABEL_474;
      }
    }
    else
    {
      v240 = v238[2];
    }
    if ((2 * v236) <= 4)
      v242 = 4;
    else
      v242 = (2 * v236);
    v243 = v242 + v236;
    if (v239)
      v244 = (unint64_t)&v239[v242 + v236] > v240;
    else
      v244 = 1;
    v237 = (_BYTE *)v238[1];
    if (v244)
    {
      v245 = 2 * v238[4];
      if (v245 <= v243 + 1)
        v245 = v243 + 1;
      v238[4] = v245;
      v246 = v245 + 8;
      this = (uint64_t *)malloc_type_malloc(v245 + 8, 0xD0263BC5uLL);
      v247 = (char *)this + v246;
      *this = v238[3];
      v237 = this + 1;
      v238[2] = v247;
      v238[3] = this;
    }
    v238[1] = &v237[v243];
    if ((_DWORD)v236)
      this = (uint64_t *)memcpy(v237, *v293, v236);
    *(_QWORD *)(v5 + 12728) = v237;
    LODWORD(v236) = *(_DWORD *)(v5 + 12740);
    v235 = *(_DWORD *)(v5 + 12736);
    goto LABEL_473;
  }
  if (v72 != 5)
  {
    v75 = 0;
    if (!v73)
      goto LABEL_455;
    goto LABEL_107;
  }
  v74 = *(swift::Demangle::Node ***)v4;
LABEL_100:
  v75 = &v74[*((unsigned int *)v4 + 2)];
  if (v73 == v75)
    goto LABEL_455;
LABEL_107:
  v291 = v75;
  while (2)
  {
    v4 = *v73;
    switch(*((_WORD *)*v73 + 8))
    {
      case 'i':
        v78 = *(_DWORD *)(v5 + 12736);
        v80 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v80)
        {
          v81 = 101;
          goto LABEL_111;
        }
        v107 = *(_QWORD **)(v5 + 12744);
        v108 = (char *)v107[1];
        if (&v77[v80] == v108)
        {
          v188 = (unint64_t)&v77[v80 + 1];
          v109 = v107[2];
          if (v188 <= v109)
          {
            v107[1] = v188;
            LODWORD(v189) = 1;
            goto LABEL_338;
          }
        }
        else
        {
          v109 = v107[2];
        }
        if ((2 * v80) <= 4)
          v189 = 4;
        else
          v189 = (2 * v80);
        v190 = v189 + v80;
        if (v108)
          v191 = (unint64_t)&v108[v189 + v80] > v109;
        else
          v191 = 1;
        v77 = (char *)v107[1];
        if (v191)
        {
          v192 = 2 * v107[4];
          if (v192 <= v190 + 1)
            v192 = v190 + 1;
          v107[4] = v192;
          v193 = v192 + 8;
          this = (uint64_t *)malloc_type_malloc(v192 + 8, 0xD0263BC5uLL);
          v194 = (char *)this + v193;
          *this = v107[3];
          v77 = (char *)(this + 1);
          v107[2] = v194;
          v107[3] = this;
        }
        v107[1] = &v77[v190];
        if ((_DWORD)v80)
          this = (uint64_t *)memcpy(v77, *v293, v80);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v80) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
LABEL_338:
        v79 = v80 + v189;
        v81 = 101;
        goto LABEL_110;
      case 'j':
        v49 = 2059;
        LODWORD(v14) = 15;
        v82 = *(swift::Demangle::Node ***)v4;
        switch(*((_QWORD *)v4 + 1))
        {
          case 0xDLL:
            if (*v82 != (swift::Demangle::Node *)0x5F65656C6C616340
              || *(swift::Demangle::Node **)((char *)v82 + 5) != (swift::Demangle::Node *)0x64656E776F5F6565)
            {
              goto LABEL_545;
            }
            v81 = 120;
            goto LABEL_372;
          case 0xFLL:
            if (*v82 != (swift::Demangle::Node *)0x5F65656C6C616340
              || *(swift::Demangle::Node **)((char *)v82 + 7) != (swift::Demangle::Node *)0x64656E776F6E755FLL)
            {
              goto LABEL_545;
            }
            v81 = 121;
            goto LABEL_372;
          case 0x11:
            v123 = *v82;
            v124 = v82[1];
            v125 = *((unsigned __int8 *)v82 + 16);
            if (v123 != (swift::Demangle::Node *)0x746E65766E6F6340
              || v124 != (swift::Demangle::Node *)0x6E696874286E6F69
              || v125 != 41)
            {
              goto LABEL_545;
            }
            v81 = 116;
            goto LABEL_372;
          case 0x12:
            v128 = *v82;
            v129 = v82[1];
            v130 = *((unsigned __int16 *)v82 + 8);
            if (v128 != (swift::Demangle::Node *)0x5F65656C6C616340
              || v129 != (swift::Demangle::Node *)0x65746E6172617567
              || v130 != 25701)
            {
LABEL_545:
              v49 = 2059;
              LODWORD(v14) = 15;
              goto LABEL_475;
            }
            v81 = 103;
LABEL_372:
            v78 = *(_DWORD *)(v5 + 12736);
            v76 = *(unsigned int *)(v5 + 12740);
            v77 = *(char **)(v5 + 12728);
            if (v78 < v76)
              goto LABEL_111;
            v209 = *(_QWORD **)(v5 + 12744);
            v210 = (char *)v209[1];
            if (&v77[v76] != v210)
            {
              v211 = v209[2];
LABEL_376:
              if ((2 * v76) <= 4)
                v134 = 4;
              else
                v134 = (2 * v76);
              v213 = v134 + v76;
              if (!v210 || (unint64_t)&v210[v213] > v211)
              {
                v214 = 2 * v209[4];
                if (v214 <= v213 + 1)
                  v214 = v213 + 1;
                v209[4] = v214;
                v215 = v214 + 8;
                this = (uint64_t *)malloc_type_malloc(v214 + 8, 0xD0263BC5uLL);
                *this = v209[3];
                v210 = (char *)(this + 1);
                v209[2] = (char *)this + v215;
                v209[3] = this;
              }
              v209[1] = &v210[v213];
              if ((_DWORD)v76)
                this = (uint64_t *)memcpy(v210, *v293, v76);
              *(_QWORD *)(v5 + 12728) = v210;
              LODWORD(v76) = *(_DWORD *)(v5 + 12740);
              v77 = v210;
              v78 = *(_DWORD *)(v5 + 12736);
              v75 = v291;
              goto LABEL_109;
            }
            v212 = (unint64_t)&v77[v76 + 1];
            v211 = v209[2];
            if (v212 > v211)
              goto LABEL_376;
            v209[1] = v212;
LABEL_388:
            LODWORD(v134) = 1;
LABEL_109:
            v79 = v76 + v134;
LABEL_110:
            *(_DWORD *)(v5 + 12740) = v79;
LABEL_111:
            *(_DWORD *)(v5 + 12736) = v78 + 1;
            v77[v78] = v81;
            break;
          default:
            goto LABEL_475;
        }
        goto LABEL_112;
      case 'k':
        v81 = *(_BYTE *)v4;
        v78 = *(_DWORD *)(v5 + 12736);
        v76 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v76)
          goto LABEL_111;
        v84 = *(_QWORD **)(v5 + 12744);
        v85 = (char *)v84[1];
        if (&v77[v76] == v85)
        {
          v133 = (unint64_t)&v77[v76 + 1];
          v86 = v84[2];
          if (v133 <= v86)
          {
            v84[1] = v133;
            goto LABEL_388;
          }
        }
        else
        {
          v86 = v84[2];
        }
        if ((2 * v76) <= 4)
          v134 = 4;
        else
          v134 = (2 * v76);
        v135 = v134 + v76;
        if (v85)
          v136 = (unint64_t)&v85[v134 + v76] > v86;
        else
          v136 = 1;
        v77 = (char *)v84[1];
        if (v136)
        {
          v137 = 2 * v84[4];
          if (v137 <= v135 + 1)
            v137 = v135 + 1;
          v84[4] = v137;
          v138 = v137 + 8;
          this = (uint64_t *)malloc_type_malloc(v137 + 8, 0xD0263BC5uLL);
          v139 = (char *)this + v138;
          *this = v84[3];
          v77 = (char *)(this + 1);
          v84[2] = v139;
          v84[3] = this;
        }
        v84[1] = &v77[v135];
        if ((_DWORD)v76)
          this = (uint64_t *)memcpy(v77, *v293, v76);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v76) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
        goto LABEL_109;
      case 'l':
        v78 = *(_DWORD *)(v5 + 12736);
        v87 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v87)
        {
          v81 = 65;
          goto LABEL_111;
        }
        v110 = *(_QWORD **)(v5 + 12744);
        v111 = (char *)v110[1];
        if (&v77[v87] == v111)
        {
          v195 = (unint64_t)&v77[v87 + 1];
          v112 = v110[2];
          if (v195 <= v112)
          {
            v110[1] = v195;
            LODWORD(v196) = 1;
            goto LABEL_354;
          }
        }
        else
        {
          v112 = v110[2];
        }
        if ((2 * v87) <= 4)
          v196 = 4;
        else
          v196 = (2 * v87);
        v197 = v196 + v87;
        if (v111)
          v198 = (unint64_t)&v111[v196 + v87] > v112;
        else
          v198 = 1;
        v77 = (char *)v110[1];
        if (v198)
        {
          v199 = 2 * v110[4];
          if (v199 <= v197 + 1)
            v199 = v197 + 1;
          v110[4] = v199;
          v200 = v199 + 8;
          this = (uint64_t *)malloc_type_malloc(v199 + 8, 0xD0263BC5uLL);
          v201 = (char *)this + v200;
          *this = v110[3];
          v77 = (char *)(this + 1);
          v110[2] = v201;
          v110[3] = this;
        }
        v110[1] = &v77[v197];
        if ((_DWORD)v87)
          this = (uint64_t *)memcpy(v77, *v293, v87);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v87) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
LABEL_354:
        v79 = v87 + v196;
        v81 = 65;
        goto LABEL_110;
      case 'm':
        v78 = *(_DWORD *)(v5 + 12736);
        v88 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v88)
        {
          v81 = 84;
          goto LABEL_111;
        }
        v113 = *(_QWORD **)(v5 + 12744);
        v114 = (char *)v113[1];
        if (&v77[v88] == v114)
        {
          v202 = (unint64_t)&v77[v88 + 1];
          v115 = v113[2];
          if (v202 <= v115)
          {
            v113[1] = v202;
            LODWORD(v203) = 1;
            goto LABEL_370;
          }
        }
        else
        {
          v115 = v113[2];
        }
        if ((2 * v88) <= 4)
          v203 = 4;
        else
          v203 = (2 * v88);
        v204 = v203 + v88;
        if (v114)
          v205 = (unint64_t)&v114[v203 + v88] > v115;
        else
          v205 = 1;
        v77 = (char *)v113[1];
        if (v205)
        {
          v206 = 2 * v113[4];
          if (v206 <= v204 + 1)
            v206 = v204 + 1;
          v113[4] = v206;
          v207 = v206 + 8;
          this = (uint64_t *)malloc_type_malloc(v206 + 8, 0xD0263BC5uLL);
          v208 = (char *)this + v207;
          *this = v113[3];
          v77 = (char *)(this + 1);
          v113[2] = v208;
          v113[3] = this;
        }
        v113[1] = &v77[v204];
        if ((_DWORD)v88)
          this = (uint64_t *)memcpy(v77, *v293, v88);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v88) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
LABEL_370:
        v79 = v88 + v203;
        v81 = 84;
        goto LABEL_110;
      case 'p':
        v89 = *(swift::Demangle::Node ***)v4;
        v90 = *((_QWORD *)v4 + 1);
        switch(v90)
        {
          case 6:
            v116 = *(_DWORD *)v89;
            v117 = *((unsigned __int16 *)v89 + 2);
            if (v116 != 2037604672 || v117 != 25454)
            {
LABEL_542:
              v49 = 2076;
              LODWORD(v14) = 17;
              goto LABEL_475;
            }
            v81 = 72;
            break;
          case 9:
            v119 = *v89;
            v120 = *((unsigned __int8 *)v89 + 8);
            if (v119 != (swift::Demangle::Node *)0x6C6261646E655340 || v120 != 101)
              goto LABEL_542;
            v81 = 104;
            break;
          case 11:
            if (*v89 == (swift::Demangle::Node *)0x6F5F646C65697940
              && *(swift::Demangle::Node **)((char *)v89 + 3) == (swift::Demangle::Node *)0x65636E6F5F646C65)
            {
              v81 = 65;
            }
            else
            {
              v92 = *v89;
              v93 = *(uint64_t *)((char *)v89 + 3);
              if (v92 != (swift::Demangle::Node *)0x6D5F646C65697940 || v93 != 0x796E616D5F646C65)
                goto LABEL_542;
              v81 = 71;
            }
            break;
          default:
            goto LABEL_542;
        }
        goto LABEL_372;
      case 'q':
        goto LABEL_452;
      case 'v':
        goto LABEL_224;
      case 'x':
        goto LABEL_289;
      case 'y':
        v95 = *(_DWORD *)(v5 + 12736);
        v96 = *(unsigned int *)(v5 + 12740);
        v97 = *(char **)(v5 + 12728);
        if (v95 < v96)
          goto LABEL_223;
        v98 = *(_QWORD **)(v5 + 12744);
        v99 = (char *)v98[1];
        if (&v97[v96] == v99)
        {
          v140 = (unint64_t)&v97[v96 + 1];
          v100 = v98[2];
          if (v140 <= v100)
          {
            v98[1] = v140;
            LODWORD(v141) = 1;
            goto LABEL_222;
          }
        }
        else
        {
          v100 = v98[2];
        }
        if ((2 * v96) <= 4)
          v141 = 4;
        else
          v141 = (2 * v96);
        v142 = v141 + v96;
        if (v99)
          v143 = (unint64_t)&v99[v141 + v96] > v100;
        else
          v143 = 1;
        v97 = (char *)v98[1];
        if (v143)
        {
          v144 = 2 * v98[4];
          if (v144 <= v142 + 1)
            v144 = v142 + 1;
          v98[4] = v144;
          v145 = v144 + 8;
          v146 = malloc_type_malloc(v144 + 8, 0xD0263BC5uLL);
          v147 = (char *)v146 + v145;
          *v146 = v98[3];
          v97 = (char *)(v146 + 1);
          v98[2] = v147;
          v98[3] = v146;
        }
        v98[1] = &v97[v142];
        if ((_DWORD)v96)
          memcpy(v97, *v293, v96);
        *(_QWORD *)(v5 + 12728) = v97;
        LODWORD(v96) = *(_DWORD *)(v5 + 12740);
        v95 = *(_DWORD *)(v5 + 12736);
LABEL_222:
        *(_DWORD *)(v5 + 12740) = v96 + v141;
LABEL_223:
        *(_DWORD *)(v5 + 12736) = v95 + 1;
        v97[v95] = 89;
LABEL_224:
        v148 = *((unsigned __int8 *)v4 + 18);
        v149 = (swift::Demangle::Node **)v4;
        if ((v148 - 1) >= 2)
          v149 = *(swift::Demangle::Node ***)v4;
        break;
      case 'z':
        v101 = *(_DWORD *)(v5 + 12736);
        v102 = *(unsigned int *)(v5 + 12740);
        v103 = *(char **)(v5 + 12728);
        if (v101 < v102)
          goto LABEL_288;
        v104 = *(_QWORD **)(v5 + 12744);
        v105 = (char *)v104[1];
        if (&v103[v102] == v105)
        {
          v162 = (unint64_t)&v103[v102 + 1];
          v106 = v104[2];
          if (v162 <= v106)
          {
            v104[1] = v162;
            LODWORD(v163) = 1;
            goto LABEL_287;
          }
        }
        else
        {
          v106 = v104[2];
        }
        if ((2 * v102) <= 4)
          v163 = 4;
        else
          v163 = (2 * v102);
        v164 = v163 + v102;
        if (v105)
          v165 = (unint64_t)&v105[v163 + v102] > v106;
        else
          v165 = 1;
        v103 = (char *)v104[1];
        if (v165)
        {
          v166 = 2 * v104[4];
          if (v166 <= v164 + 1)
            v166 = v164 + 1;
          v104[4] = v166;
          v167 = v166 + 8;
          this = (uint64_t *)malloc_type_malloc(v166 + 8, 0xD0263BC5uLL);
          v168 = (char *)this + v167;
          *this = v104[3];
          v103 = (char *)(this + 1);
          v104[2] = v168;
          v104[3] = this;
        }
        v104[1] = &v103[v164];
        if ((_DWORD)v102)
          this = (uint64_t *)memcpy(v103, *v293, v102);
        *(_QWORD *)(v5 + 12728) = v103;
        LODWORD(v102) = *(_DWORD *)(v5 + 12740);
        v101 = *(_DWORD *)(v5 + 12736);
LABEL_287:
        *(_DWORD *)(v5 + 12740) = v102 + v163;
LABEL_288:
        *(_DWORD *)(v5 + 12736) = v101 + 1;
        v103[v101] = 122;
LABEL_289:
        v169 = *((unsigned __int8 *)v4 + 18);
        v170 = (swift::Demangle::Node **)v4;
        if ((v169 - 1) >= 2)
          v170 = *(swift::Demangle::Node ***)v4;
        v171 = *v170;
        v172 = *((_QWORD *)v171 + 1) - 4;
        v173 = *(int **)v171;
        switch(v172)
        {
          case 0:
            if (*v173 != 1953853248)
              goto LABEL_477;
            v150 = 114;
            goto LABEL_426;
          case 2:
            v174 = *v173;
            v175 = *((unsigned __int16 *)v173 + 2);
            if (v174 != 1853321024 || v175 != 25701)
              goto LABEL_477;
            v150 = 111;
            goto LABEL_426;
          case 4:
            if (*(_QWORD *)v173 != 0x64656E776F6E7540)
              goto LABEL_477;
            v150 = 100;
            goto LABEL_426;
          case 5:
            v177 = *(_QWORD *)v173;
            v178 = *((unsigned __int8 *)v173 + 8);
            if (v177 != 0x756F5F6B63617040 || v178 != 116)
              goto LABEL_477;
            v150 = 107;
            goto LABEL_426;
          case 9:
            v180 = *(_QWORD *)v173;
            v181 = *(_QWORD *)((char *)v173 + 5);
            if (v180 != 0x6C65726F74756140 || v181 != 0x64657361656C6572)
              goto LABEL_477;
            v150 = 97;
            goto LABEL_426;
          case 18:
            v183 = *(_QWORD *)v173;
            v184 = *((_QWORD *)v173 + 1);
            v185 = *(_QWORD *)((char *)v173 + 14);
            if (v183 != 0x64656E776F6E7540 || v184 != 0x705F72656E6E695FLL || v185 != 0x7265746E696F705FLL)
              goto LABEL_477;
            v150 = 117;
            goto LABEL_426;
          default:
LABEL_477:
            if ((v169 - 1) < 2)
              goto LABEL_481;
            if (v169 == 5 && *((_DWORD *)v4 + 2))
            {
              v4 = *(swift::Demangle::Node **)v4;
LABEL_481:
              v4 = *(swift::Demangle::Node **)v4;
            }
            else
            {
              v4 = 0;
            }
            v49 = 2132;
            LODWORD(v14) = 18;
            break;
        }
        goto LABEL_475;
      default:
        goto LABEL_112;
    }
    v150 = 0;
    v151 = *v149;
    this = *(uint64_t **)v151;
    v152 = *((_QWORD *)v151 + 1);
    v153 = 1;
    switch(v152)
    {
      case 3uLL:
        if (*(_WORD *)this != 26944 || *((_BYTE *)this + 2) != 110)
          goto LABEL_483;
        v153 = 0;
        v150 = 105;
        goto LABEL_391;
      case 6uLL:
        if (*(_DWORD *)this == 1869506880 && *((_WORD *)this + 2) == 29813)
        {
          v153 = 0;
          v150 = 108;
        }
        else
        {
          if (*(_DWORD *)this == 1853321024 && *((_WORD *)this + 2) == 25701)
          {
            v150 = 120;
            goto LABEL_426;
          }
LABEL_247:
          v150 = 0;
          v153 = 1;
        }
LABEL_391:
        if (v152 == 8 && v153 != 0)
        {
          if (*this == 0x64656E776F6E7540)
          {
            v150 = 121;
          }
          else if (((v153 ^ 1) & 1) == 0)
          {
            goto LABEL_483;
          }
          goto LABEL_426;
        }
        v217 = v153 ^ 1;
        if (v152 == 16)
          v218 = v153 ^ 1;
        else
          v218 = 1;
        if ((v218 & 1) == 0)
        {
LABEL_400:
          this = (uint64_t *)memcmp(this, "@pack_guaranteed", v152);
          if ((_DWORD)this)
            goto LABEL_483;
          v150 = 112;
          goto LABEL_426;
        }
        if (v152 != 11)
          v217 = 1;
        if ((v217 & 1) == 0)
        {
          if (*this == 0x776F5F6B63617040 && *(uint64_t *)((char *)this + 3) == 0x64656E776F5F6B63)
          {
            v150 = 118;
            goto LABEL_426;
          }
          goto LABEL_418;
        }
        v220 = v153 ^ 1;
        if (v152 != 11)
          v220 = 1;
        if ((v220 & 1) == 0)
        {
LABEL_418:
          this = (uint64_t *)memcmp(this, "@pack_inout", v152);
          if ((_DWORD)this)
            goto LABEL_483;
          v150 = 109;
LABEL_426:
          v221 = *(_DWORD *)(v5 + 12736);
          v222 = *(unsigned int *)(v5 + 12740);
          v223 = *(char **)(v5 + 12728);
          if (v221 < v222)
            goto LABEL_442;
          v224 = *(_QWORD **)(v5 + 12744);
          v225 = (char *)v224[1];
          if (&v223[v222] != v225)
          {
            v226 = v224[2];
LABEL_430:
            if ((2 * v222) <= 4)
              v228 = 4;
            else
              v228 = (2 * v222);
            v229 = v228 + v222;
            if (!v225 || (unint64_t)&v225[v229] > v226)
            {
              v230 = 2 * v224[4];
              if (v230 <= v229 + 1)
                v230 = v229 + 1;
              v224[4] = v230;
              v231 = v230 + 8;
              this = (uint64_t *)malloc_type_malloc(v230 + 8, 0xD0263BC5uLL);
              v232 = (char *)this + v231;
              *this = v224[3];
              v225 = (char *)(this + 1);
              v224[2] = v232;
              v224[3] = this;
            }
            v224[1] = &v225[v229];
            if ((_DWORD)v222)
              this = (uint64_t *)memcpy(v225, *v293, v222);
            *(_QWORD *)(v5 + 12728) = v225;
            LODWORD(v222) = *(_DWORD *)(v5 + 12740);
            v223 = v225;
            v221 = *(_DWORD *)(v5 + 12736);
            v75 = v291;
            goto LABEL_441;
          }
          v227 = (unint64_t)&v223[v222 + 1];
          v226 = v224[2];
          if (v227 > v226)
            goto LABEL_430;
          v224[1] = v227;
          LODWORD(v228) = 1;
LABEL_441:
          *(_DWORD *)(v5 + 12740) = v222 + v228;
LABEL_442:
          *(_DWORD *)(v5 + 12736) = v221 + 1;
          v223[v221] = v150;
          if (*((_BYTE *)v4 + 18) == 5)
          {
            v233 = *((_DWORD *)v4 + 2);
            if (v233 == 4)
            {
              if (*(_DWORD *)a4)
                return this;
              if (*((_BYTE *)v4 + 18) == 5 && *((_DWORD *)v4 + 2) >= 3u)
                v234 = *(swift::Demangle::Node **)(*(_QWORD *)v4 + 16);
              else
                v234 = 0;
            }
            else
            {
              if (v233 != 3)
                goto LABEL_112;
            }
LABEL_452:
            if (*(_DWORD *)a4)
              return this;
          }
LABEL_112:
          if (++v73 == v75)
            goto LABEL_455;
          continue;
        }
        if (!v153)
          goto LABEL_426;
LABEL_483:
        if ((v148 - 1) < 2)
          goto LABEL_487;
        if (v148 == 5 && *((_DWORD *)v4 + 2))
        {
          v4 = *(swift::Demangle::Node **)v4;
LABEL_487:
          v4 = *(swift::Demangle::Node **)v4;
        }
        else
        {
          v4 = 0;
        }
        v49 = 2103;
        LODWORD(v14) = 18;
LABEL_475:
        *(_DWORD *)a4 = v14;
        *(_QWORD *)(a4 + 8) = v4;
        *(_DWORD *)(a4 + 16) = v49;
        return this;
      case 0xBuLL:
        if (*this != 0x746E617261756740 || *(uint64_t *)((char *)this + 3) != 0x646565746E617261)
          goto LABEL_247;
        v150 = 103;
        goto LABEL_426;
      case 0xCuLL:
        if (*this != 0x736E6F635F6E6940 || *((_DWORD *)this + 2) != 1953390964)
          goto LABEL_483;
        v150 = 99;
        goto LABEL_426;
      case 0xDuLL:
        if (*this != 0x636F6C6C61656440 || *(uint64_t *)((char *)this + 5) != 0x676E697461636F6CLL)
          goto LABEL_483;
        v150 = 101;
        goto LABEL_426;
      case 0xEuLL:
        if (*this != 0x726175675F6E6940 || *(uint64_t *)((char *)this + 6) != 0x646565746E617261)
          goto LABEL_483;
        v150 = 110;
        goto LABEL_426;
      case 0x10uLL:
        if (*this != 0x615F74756F6E6940 || this[1] != 0x656C62617361696CLL)
          goto LABEL_400;
        v150 = 98;
        goto LABEL_426;
      default:
        goto LABEL_391;
    }
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleImplicitClosure@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)v4 + 18) != 5)
      goto LABEL_12;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u)
    goto LABEL_12;
  if (*(_DWORD *)a4)
    return result;
LABEL_13:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fu", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleInOut@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 122;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

void *`anonymous namespace'::Remangler::mangleInfixOperator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;

  result = swift::Demangle::CharVector::append(this + 1591, "oi", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleInitializer@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fi", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleInitAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleIsolated@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yi", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSending@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yu", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleLocalDeclName@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t *v5;
  unsigned int v7;
  int v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;

  v4 = a2;
  v5 = this;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
LABEL_8:
  v10 = *((_DWORD *)v5 + 3184);
  v11 = *((unsigned int *)v5 + 3185);
  v12 = (char *)v5[1591];
  if (v10 < v11)
    goto LABEL_28;
  v13 = (_QWORD *)v5[1593];
  v14 = (char *)v13[1];
  if (&v12[v11] != v14)
  {
    v15 = v13[2];
LABEL_12:
    if ((2 * v11) <= 4)
      v17 = 4;
    else
      v17 = (2 * v11);
    v18 = v17 + v11;
    if (v14)
      v19 = (unint64_t)&v14[v17 + v11] > v15;
    else
      v19 = 1;
    v12 = (char *)v13[1];
    if (v19)
    {
      v20 = 2 * v13[4];
      if (v20 <= v18 + 1)
        v20 = v18 + 1;
      v13[4] = v20;
      v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v22 = (char *)this + v21;
      *this = v13[3];
      v12 = (char *)(this + 1);
      v13[2] = v22;
      v13[3] = this;
    }
    v13[1] = &v12[v18];
    if ((_DWORD)v11)
      this = (uint64_t *)memcpy(v12, (const void *)v5[1591], v11);
    v5[1591] = (uint64_t)v12;
    LODWORD(v11) = *((_DWORD *)v5 + 3185);
    v10 = *((_DWORD *)v5 + 3184);
    goto LABEL_27;
  }
  v16 = (unint64_t)&v12[v11 + 1];
  v15 = v13[2];
  if (v16 > v15)
    goto LABEL_12;
  v13[1] = v16;
  LODWORD(v17) = 1;
LABEL_27:
  *((_DWORD *)v5 + 3185) = v11 + v17;
LABEL_28:
  *((_DWORD *)v5 + 3184) = v10 + 1;
  v12[v10] = 76;
  v23 = *((unsigned __int8 *)v4 + 18);
  if ((v23 - 1) < 2)
  if (v23 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleMacro@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleMacroExpansionLoc@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 == 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_15;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  v12 = (uint64_t *)*((_QWORD *)*a2 + 3);
  v13 = **((_QWORD **)*a2 + 2);
  v14 = *v12;
  swift::Demangle::CharVector::append(this + 1591, "fMX", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;
  swift::Demangle::Node *v12;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5)
      goto LABEL_13;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
    goto LABEL_13;
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (v11 = (swift::Demangle::Node *)*((_QWORD *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4)
        return result;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  v12 = (swift::Demangle::Node *)a2;
  if (v8 == 2)
    goto LABEL_17;
  if (v8 == 5)
    goto LABEL_15;
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMu", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMm", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMr", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::Node *v8;
  unsigned int v9;
  swift::Demangle::Node *v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
    v8 = *(swift::Demangle::Node **)a2;
  v9 = a3 + 1;
  if (*(_WORD *)(*(_QWORD *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        v19 = 321;
        v18 = 10;
        goto LABEL_41;
      }
      v4 = *(swift::Demangle::Node **)a2;
    }
    if (*(_DWORD *)a4)
      return this;
    v11 = *((_DWORD *)v5 + 3184);
    v12 = *((unsigned int *)v5 + 3185);
    v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_40:
      v18 = 0;
      v4 = 0;
      v19 = 0;
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 109;
      goto LABEL_41;
    }
    v14 = (_QWORD *)v5[1593];
    v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      v20 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v20 <= v16)
      {
        v14[1] = v20;
        LODWORD(v21) = 1;
LABEL_39:
        *((_DWORD *)v5 + 3185) = v12 + v21;
        goto LABEL_40;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v21 = 4;
    else
      v21 = (2 * v12);
    v22 = v21 + v12;
    if (!v15 || (unint64_t)&v15[v22] > v16)
    {
      v23 = 2 * v14[4];
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      v14[4] = v23;
      v24 = v23 + 8;
      this = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      v25 = (char *)this + v24;
      *this = v14[3];
      v15 = (char *)(this + 1);
      v14[2] = v25;
      v14[3] = this;
    }
    v14[1] = &v15[v22];
    if ((_DWORD)v12)
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    v13 = v15;
    v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_39;
  }
  v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_19;
    }
    v10 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
LABEL_19:
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "XM", 2uLL, (_QWORD *)v5[1593]);
  v17 = *((unsigned __int8 *)v4 + 18);
  if ((v17 - 1) < 2)
    goto LABEL_23;
  if (v17 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::Node **)v4;
LABEL_23:
    if (*(_DWORD *)a4)
      return this;
  }
  v18 = 0;
  v4 = 0;
  v19 = 0;
LABEL_41:
  *(_DWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v19;
  return this;
}

uint64_t `anonymous namespace'::Remangler::mangleMetatypeRepresentation@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::Node *v3;
  uint64_t result;
  uint64_t v7;
  _DWORD *v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  int v20;
  int v21;
  size_t v22;
  char v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v3 = a2;
  result = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  if (v7 == 14)
  {
    result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if ((_DWORD)result)
      goto LABEL_17;
    v9 = (_DWORD *)((char *)this + 12736);
    v10 = *((_DWORD *)this + 3184);
    v16 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v16)
      goto LABEL_60;
    v17 = (_QWORD *)*((_QWORD *)this + 1593);
    v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      v27 = (unint64_t)&v12[v16 + 1];
      v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        v23 = 111;
        goto LABEL_66;
      }
    }
    else
    {
      v19 = v17[2];
    }
    if ((2 * v16) <= 4)
      v28 = 4;
    else
      v28 = (2 * v16);
    v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      v30 = 2 * v17[4];
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      v17[4] = v30;
      v31 = v30 + 8;
      result = (uint64_t)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v32 = result + v31;
      *(_QWORD *)result = v17[3];
      v18 = (char *)(result + 8);
      v17[2] = v32;
      v17[3] = result;
    }
    v17[1] = &v18[v29];
    if ((_DWORD)v16)
      result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
    *((_QWORD *)this + 1591) = v18;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    v12 = v18;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_59;
  }
  if (v7 != 6)
  {
    if (v7 != 5)
      goto LABEL_17;
    if (*(_DWORD *)result != 1768453184 || *(_BYTE *)(result + 4) != 110)
      goto LABEL_17;
    v9 = (_DWORD *)((char *)this + 12736);
    v10 = *((_DWORD *)this + 3184);
    v11 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v11)
      goto LABEL_65;
    v13 = (_QWORD *)*((_QWORD *)this + 1593);
    v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      v39 = (unint64_t)&v12[v11 + 1];
      v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        v23 = 116;
        goto LABEL_66;
      }
    }
    else
    {
      v15 = v13[2];
    }
    if ((2 * v11) <= 4)
      v40 = 4;
    else
      v40 = (2 * v11);
    v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      v42 = 2 * v13[4];
      if (v42 <= v41 + 1)
        v42 = v41 + 1;
      v13[4] = v42;
      v43 = v42 + 8;
      result = (uint64_t)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
      v44 = result + v43;
      *(_QWORD *)result = v13[3];
      v14 = (char *)(result + 8);
      v13[2] = v44;
      v13[3] = result;
    }
    v13[1] = &v14[v41];
    if ((_DWORD)v11)
      result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
    *((_QWORD *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    v12 = v14;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_64;
  }
  result = memcmp((const void *)result, "@thick", 6uLL);
  if (!(_DWORD)result)
  {
    v9 = (_DWORD *)((char *)this + 12736);
    v10 = *((_DWORD *)this + 3184);
    v22 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v22)
    {
      v23 = 84;
LABEL_66:
      v21 = 0;
      v3 = 0;
      v20 = 0;
      *v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }
    v24 = (_QWORD *)*((_QWORD *)this + 1593);
    v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      v33 = (unint64_t)&v12[v22 + 1];
      v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        v23 = 84;
        goto LABEL_66;
      }
    }
    else
    {
      v26 = v24[2];
    }
    if ((2 * v22) <= 4)
      v34 = 4;
    else
      v34 = (2 * v22);
    v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      v36 = 2 * v24[4];
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      v24[4] = v36;
      v37 = v36 + 8;
      result = (uint64_t)malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      v38 = result + v37;
      *(_QWORD *)result = v24[3];
      v25 = (char *)(result + 8);
      v24[2] = v38;
      v24[3] = result;
    }
    v24[1] = &v25[v35];
    if ((_DWORD)v22)
      result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
    *((_QWORD *)this + 1591) = v25;
    LODWORD(v22) = *((_DWORD *)this + 3185);
    v12 = v25;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_62;
  }
LABEL_17:
  v20 = 2316;
  v21 = 20;
LABEL_67:
  *(_DWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v20;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMetaclass@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleMethodLookupFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mu", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleObjCMetadataUpdateFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MU", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ms", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleFullObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mt", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleModifyAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

void `anonymous namespace'::Remangler::mangleModule(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  int v17;
  int v18;
  char **v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;

  v6 = *(unsigned __int16 **)a2;
  v7 = *((_QWORD *)a2 + 1);
  switch(v7)
  {
    case 3:
      v17 = *v6;
      v18 = *((unsigned __int8 *)v6 + 2);
      if (v17 != 24415 || v18 != 67)
        break;
      v20 = (char **)((char *)this + 12728);
      v21 = (_QWORD *)*((_QWORD *)this + 1593);
      v22 = "So";
      goto LABEL_27;
    case 15:
      v23 = *(_QWORD *)v6;
      v24 = *(_QWORD *)((char *)v6 + 7);
      if (v23 != 0x746E79535F435F5FLL || v24 != 0x64657A6973656874)
        break;
      v20 = (char **)((char *)this + 12728);
      v21 = (_QWORD *)*((_QWORD *)this + 1593);
      v22 = "SC";
LABEL_27:
      swift::Demangle::CharVector::append(v20, v22, 2uLL, v21);
      goto LABEL_43;
    case 5:
      v8 = *(_DWORD *)v6;
      v9 = *((unsigned __int8 *)v6 + 4);
      if (v8 == 1718187859 && v9 == 116)
      {
        v11 = *((_DWORD *)this + 3184);
        v12 = *((unsigned int *)this + 3185);
        v13 = (char *)*((_QWORD *)this + 1591);
        if (v11 < v12)
        {
LABEL_42:
          *((_DWORD *)this + 3184) = v11 + 1;
          v13[v11] = 115;
          goto LABEL_43;
        }
        v14 = (_QWORD *)*((_QWORD *)this + 1593);
        v15 = (char *)v14[1];
        if (&v13[v12] == v15)
        {
          v29 = (unint64_t)&v13[v12 + 1];
          v16 = v14[2];
          if (v29 <= v16)
          {
            v14[1] = v29;
            LODWORD(v30) = 1;
LABEL_41:
            *((_DWORD *)this + 3185) = v12 + v30;
            goto LABEL_42;
          }
        }
        else
        {
          v16 = v14[2];
        }
        if ((2 * v12) <= 4)
          v30 = 4;
        else
          v30 = (2 * v12);
        v31 = v30 + v12;
        if (!v15 || (unint64_t)&v15[v31] > v16)
        {
          v32 = 2 * v14[4];
          if (v32 <= v31 + 1)
            v32 = v31 + 1;
          v14[4] = v32;
          v33 = v32 + 8;
          v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          *v34 = v14[3];
          v15 = (char *)(v34 + 1);
          v14[2] = (char *)v34 + v33;
          v14[3] = v34;
        }
        v14[1] = &v15[v31];
        if ((_DWORD)v12)
          memcpy(v15, *((const void **)this + 1591), v12);
        *((_QWORD *)this + 1591) = v15;
        LODWORD(v12) = *((_DWORD *)this + 3185);
        v13 = v15;
        v11 = *((_DWORD *)this + 3184);
        goto LABEL_41;
      }
      break;
  }
  v35 = 0uLL;
  LOBYTE(v36) = 0;
  {
    v26 = *((_QWORD *)this + 1585);
    if (v26 > 0xF)
    {
      v28 = *((_DWORD *)this + 3178) + 16;
      v37 = v35;
      v38 = v36;
      v39 = v28;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v37, &v37);
    }
    else
    {
      *((_QWORD *)this + 1585) = v26 + 1;
      v27 = (char *)this + 24 * v26 + 12296;
      *(_OWORD *)v27 = v35;
      v27[16] = v36;
    }
  }
LABEL_43:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mn", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Hn", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 == 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)a2 + 18) != 5)
      goto LABEL_18;
LABEL_16:
    if (*((_DWORD *)a2 + 2) == 4)
    {
      if (*(_DWORD *)a4)
        return result;
    }
    goto LABEL_18;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 == 5)
    goto LABEL_16;
LABEL_18:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tz", 2uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePredefinedObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleObjCBlock@<X0>(swift::Demangle::NodeFactory **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t v7;
  swift::Demangle::Node *v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  swift::Demangle::Node *v14;
  uint64_t *result;
  char **v16;
  swift::Demangle::NodeFactory *v17;
  char *v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  swift::Demangle::Node *v24;
  int v25;
  swift::Demangle::Node *v26;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_11:
      switch((_DWORD)v7)
      {
        case 1:
LABEL_16:
          v10 = a3 + 1;
          v11 = v7 - 1;
          while (1)
          {
            v12 = *((unsigned __int8 *)v4 + 18);
            v13 = v12 - 1;
            if ((_DWORD)v12 != 1)
            {
              if ((_DWORD)v12 == 5)
              {
                v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if ((_DWORD)v12 != 2)
                  goto LABEL_17;
                v12 = 2;
              }
            }
            if (v12 > v11)
            {
              v14 = v4;
              if (v13 >= 2)
                v14 = *(swift::Demangle::Node **)v4;
              if (*(_DWORD *)a4)
                return result;
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1)
              goto LABEL_29;
          }
        case 5:
          v7 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v7)
            goto LABEL_16;
          break;
        case 2:
          v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      v16 = (char **)(this + 1591);
      v17 = this[1593];
      v18 = "XB";
      v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2))
      goto LABEL_29;
    v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v8 + 16) != 23)
    goto LABEL_11;
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      v9 = (_DWORD)v7 == 2;
      v7 = 2;
      if (!v9)
        v7 = 0;
    }
  }
  v20 = a3 + 1;
  v21 = v7 - 1;
  while (v21)
  {
    v22 = *((unsigned __int8 *)v4 + 18);
    v23 = v22 - 1;
    if ((_DWORD)v22 != 1)
    {
      if ((_DWORD)v22 == 5)
      {
        v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if ((_DWORD)v22 != 2)
          goto LABEL_32;
        v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      v24 = v4;
      if (v23 >= 2)
        v24 = *(swift::Demangle::Node **)v4;
      if (*(_DWORD *)a4)
        return result;
    }
  }
  swift::Demangle::CharVector::append((char **)this + 1591, "XzB", 3uLL, this[1593]);
  v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2)
    goto LABEL_48;
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::Node **)v4;
LABEL_48:
    v26 = *(swift::Demangle::Node **)v4;
  }
  else
  {
    v26 = 0;
  }
  swift::Demangle::CharVector::append((unsigned int *)this + 3182, *((_QWORD *)v26 + 1), this[1593]);
  v18 = *(char **)v26;
  v19 = *((_QWORD *)v26 + 1);
  v17 = this[1593];
  v16 = (char **)(this + 1591);
LABEL_51:
  result = (uint64_t *)swift::Demangle::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleEscapingObjCBlock@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "XL", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Ta", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMp", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::manglePostfixOperator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;

  result = swift::Demangle::CharVector::append(this + 1591, "oP", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  swift::Demangle::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fMq", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::manglePrefixOperator@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;

  result = swift::Demangle::CharVector::append(this + 1591, "op", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePrivateDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;
  char **v14;
  char *v15;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      v7 = *((unsigned int *)a2 + 2);
      if (!(_DWORD)v7)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        v14 = (char **)((char *)this + 12728);
        goto LABEL_24;
      }
    }
    else
    {
      if ((_DWORD)v7 != 2)
        goto LABEL_20;
      v7 = 2;
    }
  }
  v8 = a3 + 1;
  v9 = v7 - 1;
  do
  {
    v10 = *((unsigned __int8 *)a2 + 18);
    v11 = v10 - 1;
    if ((_DWORD)v10 != 1)
    {
      if ((_DWORD)v10 == 5)
      {
        v10 = *((unsigned int *)a2 + 2);
      }
      else
      {
        if ((_DWORD)v10 != 2)
          goto LABEL_7;
        v10 = 2;
      }
    }
    if (v10 <= v9)
    {
LABEL_7:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v12 = a2;
    if (v11 >= 2)
      v12 = *(swift::Demangle::Node **)a2;
    if (*(_DWORD *)a4)
      return result;
LABEL_8:
    --v9;
  }
  while (v9 != -1);
  LODWORD(v7) = *((unsigned __int8 *)a2 + 18);
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v14 = (char **)((char *)this + 12728);
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_26:
      v15 = "LL";
      goto LABEL_27;
    }
LABEL_24:
    if (*((_DWORD *)a2 + 2) != 1)
      goto LABEL_26;
  }
  v15 = "Ll";
LABEL_27:
  result = (uint64_t *)swift::Demangle::CharVector::append(v14, v15, 2uLL, *((_QWORD **)this + 1593));
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::manglePropertyDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MV", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  swift::Demangle::Node *v9;
  int v10;
  swift::Demangle::Node *v11;
  int v12;
  swift::Demangle::Node **v13;
  swift::Demangle::Node *v14;
  unsigned int v15;
  uint64_t *result;
  int v17;
  swift::Demangle::Node *v18;
  uint64_t *v19;
  int v20;
  int v21;
  swift::Demangle::Node **v22;
  uint64_t *v23;
  swift::Demangle::Node **v24;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::Node **)a2;
LABEL_5:
    v9 = *(swift::Demangle::Node **)v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = *((unsigned __int8 *)v9 + 18);
  if ((v10 - 1) < 2)
  {
LABEL_11:
    v11 = *(swift::Demangle::Node **)v9;
    goto LABEL_13;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    v9 = *(swift::Demangle::Node **)v9;
    goto LABEL_11;
  }
  v11 = 0;
LABEL_13:
  if (*((_WORD *)v11 + 8) != 44)
  {
LABEL_27:
    v14 = 0;
    goto LABEL_28;
  }
  v12 = *((unsigned __int8 *)v11 + 18);
  v13 = (swift::Demangle::Node **)v11;
  if ((v12 - 1) < 2)
    goto LABEL_18;
  if (v12 != 5)
  {
    v14 = 0;
    if (v12 == 2)
    {
LABEL_24:
      v11 = (swift::Demangle::Node *)*((_QWORD *)v11 + 1);
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (!*((_DWORD *)v11 + 2))
  {
    v11 = 0;
    goto LABEL_27;
  }
  v13 = *(swift::Demangle::Node ***)v11;
LABEL_18:
  v14 = *v13;
  if (v12 == 2)
    goto LABEL_24;
LABEL_21:
  if (v12 == 5 && *((_DWORD *)v11 + 2) >= 2u)
  {
    v11 = *(swift::Demangle::Node **)v11;
    goto LABEL_24;
  }
  v11 = 0;
LABEL_28:
  v15 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v17 = *((unsigned __int8 *)a2 + 18);
  if (v17 == 5)
  {
    if (*((_DWORD *)a2 + 2) != 4)
    {
LABEL_36:
      if (*((_DWORD *)a2 + 2) >= 2u)
      {
        v18 = *(swift::Demangle::Node **)a2;
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (*(_DWORD *)a4)
      return result;
    v17 = *((unsigned __int8 *)a2 + 18);
  }
  v18 = a2;
  if (v17 == 2)
  {
LABEL_38:
    v19 = (uint64_t *)*((_QWORD *)v18 + 1);
    goto LABEL_40;
  }
  if (v17 == 5)
    goto LABEL_36;
LABEL_39:
  v19 = 0;
LABEL_40:
  if (*((_WORD *)v19 + 8) != 232)
    goto LABEL_47;
  v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2)
    goto LABEL_45;
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    v19 = (uint64_t *)*v19;
LABEL_45:
    v19 = (uint64_t *)*v19;
    goto LABEL_47;
  }
  v19 = 0;
LABEL_47:
  if ((result & 1) == 0)
  {
    v21 = *((unsigned __int8 *)v19 + 18);
    v22 = (swift::Demangle::Node **)v19;
    if ((v21 - 1) >= 2)
    {
      if (v21 == 5)
      {
        v23 = (uint64_t *)*v19;
        v22 = (swift::Demangle::Node **)*v19;
LABEL_56:
        v24 = (swift::Demangle::Node **)&v23[*((unsigned int *)v19 + 2)];
        goto LABEL_62;
      }
      v22 = 0;
    }
    switch(v21)
    {
      case 1:
        v24 = (swift::Demangle::Node **)(v19 + 1);
        goto LABEL_62;
      case 2:
        v24 = (swift::Demangle::Node **)(v19 + 2);
        goto LABEL_62;
      case 5:
        v23 = (uint64_t *)*v19;
        goto LABEL_56;
    }
    v24 = 0;
LABEL_62:
    while (v22 != v24)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v22;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformanceRefInTypeModule@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::Node **)v8;
      v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "HP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformanceRefInProtocolModule@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::Node **)v8;
      v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Hp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformanceRefInOtherModule@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node *v8;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  uint64_t *result;
  int v13;
  swift::Demangle::Node **v14;
  uint64_t *v15;
  swift::Demangle::Node **v16;
  int v17;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::Node **)a2;
LABEL_5:
    v9 = *(uint64_t **)v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*((_WORD *)v9 + 8) != 232)
    goto LABEL_14;
  v11 = *((unsigned __int8 *)v9 + 18);
  if ((v11 - 1) < 2)
    goto LABEL_12;
  if (v11 == 5 && *((_DWORD *)v9 + 2))
  {
    v9 = (uint64_t *)*v9;
LABEL_12:
    v9 = (uint64_t *)*v9;
    goto LABEL_14;
  }
  v9 = 0;
LABEL_14:
  if ((result & 1) == 0)
  {
    v13 = *((unsigned __int8 *)v9 + 18);
    v14 = (swift::Demangle::Node **)v9;
    if ((v13 - 1) >= 2)
    {
      if (v13 == 5)
      {
        v15 = (uint64_t *)*v9;
        v14 = (swift::Demangle::Node **)*v9;
LABEL_23:
        v16 = (swift::Demangle::Node **)&v15[*((unsigned int *)v9 + 2)];
        goto LABEL_29;
      }
      v14 = 0;
    }
    switch(v13)
    {
      case 1:
        v16 = (swift::Demangle::Node **)(v9 + 1);
        goto LABEL_29;
      case 2:
        v16 = (swift::Demangle::Node **)(v9 + 2);
        goto LABEL_29;
      case 5:
        v15 = (uint64_t *)*v9;
        goto LABEL_23;
    }
    v16 = 0;
LABEL_29:
    while (v14 != v16)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v14;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v17 = *((unsigned __int8 *)v4 + 18);
  if (v17 == 2)
  if (v17 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::Node **)v8;
      v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Mp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::Node **)v8;
      v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Hr", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

void *`anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::CharVector::append(this + 1591, "Mc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::CharVector::append(this + 1591, "Hc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolListWithClass@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v5;
  swift::Demangle::Node **v6;
  swift::Demangle::Node *v7;
  swift::Demangle::Node *v8;

  v4 = a2;
  v5 = *((unsigned __int8 *)a2 + 18);
  v6 = (swift::Demangle::Node **)a2;
  if ((v5 - 1) < 2)
  {
LABEL_5:
    v7 = *v6;
    if (v5 == 2)
      goto LABEL_11;
LABEL_8:
    if (v5 == 5 && *((_DWORD *)v4 + 2) >= 2u)
    {
      v4 = *(swift::Demangle::Node **)v4;
      goto LABEL_11;
    }
LABEL_13:
    v8 = 0;
  }
  if (v5 == 5)
  {
    if (!*((_DWORD *)a2 + 2))
    {
      v7 = 0;
      goto LABEL_13;
    }
    v6 = *(swift::Demangle::Node ***)a2;
    goto LABEL_5;
  }
  v7 = 0;
  if (v5 != 2)
    goto LABEL_8;
LABEL_11:
  v8 = (swift::Demangle::Node *)*((_QWORD *)v4 + 1);
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolListWithAnyObject@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  swift::Demangle::Node *v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(swift::Demangle::Node **)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::Node **)v8;
      v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "TS", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::Node **)v8;
      v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WP", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Wa", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolWitnessTablePattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Wp", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tr", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunkHelper@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TR", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithSelf@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Ty", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithGlobalActor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TU", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleReadAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  _anonymous_namespace_::Remangler *v5;
  int v7;
  swift::Demangle::Node *v8;
  swift::Demangle::Node *v9;
  int v10;
  int v11;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5 || !*((_DWORD *)v4 + 2))
    {
      v9 = 0;
      goto LABEL_14;
    }
    v4 = *(swift::Demangle::Node **)v4;
  }
  v9 = *(swift::Demangle::Node **)v4;
LABEL_14:
  if (*((_QWORD *)v9 + 1) == 1)
  {
    swift::Demangle::CharVector::append((char **)v5 + 1591, "L", 1uLL, *((_QWORD **)v5 + 1593));
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v5 + 1591, *(void **)v9, *((_QWORD *)v9 + 1), *((_QWORD **)v5 + 1593));
    v10 = 0;
    v9 = 0;
    v11 = 0;
  }
  else
  {
    v11 = 3024;
    v10 = 21;
  }
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

void *`anonymous namespace'::Remangler::mangleRetroactiveConformance@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  int v7;
  swift::Demangle::Node *v8;
  swift::Demangle::Node *v9;
  void *result;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;

  v4 = (uint64_t *)a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 == 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v8 = *(swift::Demangle::Node **)a2;
LABEL_5:
    v9 = (swift::Demangle::Node *)*((_QWORD *)v8 + 1);
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4)
    return result;
  v11 = *((_DWORD *)this + 3184);
  v12 = *((unsigned int *)this + 3185);
  v13 = (char *)this[1591];
  if (v11 >= v12)
  {
    v14 = this[1593];
    v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      v17 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v12 + v18;
        goto LABEL_25;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      v20 = 2 * v14[4];
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      v14[4] = v20;
      v21 = v20 + 8;
      v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v23 = (char *)v22 + v21;
      *v22 = v14[3];
      v15 = (char *)(v22 + 1);
      v14[2] = v23;
      v14[3] = v22;
    }
    v14[1] = &v15[v19];
    if ((_DWORD)v12)
      memcpy(v15, this[1591], v12);
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    v13 = v15;
    v11 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = 103;
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2)
    v4 = (uint64_t *)*v4;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleShared@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 104;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOwned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 110;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSILBoxType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xb", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

char **`anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v5;
  char **v6;
  int v8;
  swift::Demangle::Node *v9;
  swift::Demangle::Node *v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  swift::Demangle::Node *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  swift::Demangle::Node *v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  swift::Demangle::Node *v29;
  int v30;
  unint64_t *v31;
  unint64_t *v32;
  unsigned int *Node;
  uint64_t v34;
  const char *v35;
  swift::Demangle::Node *v36;
  int v37;
  int v38;
  uint64_t v39;
  swift::Demangle::Node *v40;
  char *v41;

  v5 = a2;
  v6 = this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 1)
  {
    if (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3)
    {
      v12 = 3591;
      goto LABEL_13;
    }
    v9 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v9 + 16) != 212)
  {
    v12 = 3593;
    goto LABEL_13;
  }
  v10 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      v11 = 0;
      goto LABEL_17;
    }
    v10 = *(swift::Demangle::Node **)a2;
  }
  v11 = *(uint64_t **)v10;
LABEL_17:
  this = (char **)swift::Demangle::NodeFactory::createNode(*this, 235);
  v16 = (swift::Demangle::Node *)this;
  v17 = *((unsigned __int8 *)v11 + 18);
  if (v17 != 1)
  {
    if (v17 == 5)
    {
      v17 = *((_DWORD *)v11 + 2);
      if (!v17)
        goto LABEL_60;
    }
    else if (v17 != 2)
    {
LABEL_60:
      v38 = a3 + 1;
      if (*(_DWORD *)a4)
        return this;
      if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) == 3)
      {
        v39 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (*(_WORD *)(v39 + 16) != 43)
        {
          v12 = 3621;
          goto LABEL_13;
        }
        v40 = *(swift::Demangle::Node **)(*(_QWORD *)v5 + 16);
        if (*((_WORD *)v40 + 8) != 235)
        {
          v12 = 3622;
          goto LABEL_13;
        }
        if (*(_DWORD *)a4)
          return this;
        if (*(_DWORD *)a4)
          return this;
        v41 = "XX";
      }
      else
      {
        v41 = "Xx";
      }
      this = (char **)swift::Demangle::CharVector::append(v6 + 1591, v41, 2uLL, v6[1593]);
      v13 = 0;
      v5 = 0;
      v12 = 0;
      goto LABEL_14;
    }
  }
  v18 = 0;
  v19 = v17;
  while (1)
  {
    v24 = *((unsigned __int8 *)v11 + 18);
    if ((v24 - 1) >= 2)
    {
      v25 = 0;
      v26 = (uint64_t *)*v11;
    }
    else
    {
      v25 = 1;
      v26 = v11;
    }
    if (*(_WORD *)(v26[v18] + 16) != 214)
    {
      v27 = v11;
      if ((v25 & 1) == 0)
        v27 = (uint64_t *)*v11;
      if (*(_WORD *)(v27[v18] + 16) != 213)
        break;
    }
    if ((_DWORD)v24 == 1)
      goto LABEL_39;
    if ((_DWORD)v24 != 5)
    {
      if ((_DWORD)v24 != 2)
        goto LABEL_44;
      v24 = 2;
LABEL_39:
      if (v24 <= v18)
        goto LABEL_44;
      goto LABEL_40;
    }
    if (*((unsigned int *)v11 + 2) <= v18)
    {
LABEL_44:
      v29 = 0;
      goto LABEL_45;
    }
LABEL_40:
    v28 = v11;
    if ((v25 & 1) == 0)
      v28 = (uint64_t *)*v11;
    v29 = (swift::Demangle::Node *)v28[v18];
LABEL_45:
    v30 = *((unsigned __int8 *)v29 + 18);
    v31 = (unint64_t *)v29;
    if (v30 != 1)
    {
      if (v30 != 5 || *((_DWORD *)v29 + 2) != 1)
      {
LABEL_68:
        v12 = 3604;
        v13 = 1;
        v5 = v29;
        goto LABEL_14;
      }
      v31 = *(unint64_t **)v29;
    }
    if (*(_WORD *)(*v31 + 16) != 232)
      goto LABEL_68;
    v32 = (unint64_t *)v29;
    if ((v30 - 1) < 2)
      goto LABEL_54;
    if (v30 == 5 && *((_DWORD *)v29 + 2))
    {
      v32 = *(unint64_t **)v29;
LABEL_54:
      v20 = *v32;
      goto LABEL_56;
    }
    v20 = 0;
LABEL_56:
    if (*((_WORD *)v29 + 8) != 213)
      goto LABEL_27;
    Node = (unsigned int *)swift::Demangle::NodeFactory::createNode(*v6, 123);
    v36 = (swift::Demangle::Node *)Node;
    v37 = *(unsigned __int8 *)(v20 + 18);
    if ((v37 - 1) >= 2)
    {
      if (v37 != 5 || !*(_DWORD *)(v20 + 8))
      {
        v21 = 0;
        goto LABEL_26;
      }
      v20 = *(_QWORD *)v20;
    }
    v21 = *(swift::Demangle::Node **)v20;
LABEL_26:
    swift::Demangle::Node::addChild(Node, v21, (swift::Demangle::NodeFactory *)*v6, v34, v35);
    v20 = swift::Demangle::NodeFactory::createNode(*v6, 232);
    swift::Demangle::Node::addChild((unsigned int *)v20, v36, (swift::Demangle::NodeFactory *)*v6, v22, v23);
LABEL_27:
    this = (char **)swift::Demangle::Node::addChild((unsigned int *)v16, (swift::Demangle::Node *)v20, (swift::Demangle::NodeFactory *)*v6, v14, v15);
    if (v19 == ++v18)
      goto LABEL_60;
  }
  if ((_DWORD)v24 == 1)
    goto LABEL_77;
  if ((_DWORD)v24 != 5)
  {
    if ((_DWORD)v24 == 2)
    {
      v24 = 2;
      goto LABEL_77;
    }
    goto LABEL_81;
  }
  v24 = *((unsigned int *)v11 + 2);
LABEL_77:
  if (v24 <= v18)
  {
LABEL_81:
    v5 = 0;
  }
  else
  {
    if ((v25 & 1) == 0)
      v11 = (uint64_t *)*v11;
    v5 = (swift::Demangle::Node *)v11[v18];
  }
  v12 = 3600;
LABEL_13:
  v13 = 1;
LABEL_14:
  *(_DWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v12;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleSetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

unsigned int *`anonymous namespace'::Remangler::mangleIsSerialized@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 113;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleStatic@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 90;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleThinFunctionType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_QWORD *`anonymous namespace'::Remangler::mangleTuple@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;

  if (!*(_DWORD *)a4)
  {
    v7 = *((_DWORD *)this + 3184);
    v8 = *((unsigned int *)this + 3185);
    v9 = this[1591];
    if (v7 < v8)
    {
LABEL_22:
      *((_DWORD *)this + 3184) = v7 + 1;
      v9[v7] = 116;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    v10 = this[1593];
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v13 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v13 <= v12)
      {
        v10[1] = v13;
        LODWORD(v14) = 1;
LABEL_21:
        *((_DWORD *)this + 3185) = v8 + v14;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v14 = 4;
    else
      v14 = (2 * v8);
    v15 = v14 + v8;
    if (v11)
      v16 = (unint64_t)&v11[v14 + v8] > v12;
    else
      v16 = 1;
    v9 = (_BYTE *)v10[1];
    if (v16)
    {
      v17 = 2 * v10[4];
      if (v17 <= v15 + 1)
        v17 = v15 + 1;
      v10[4] = v17;
      v18 = v17 + 8;
      result = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v19 = (char *)result + v18;
      *result = v10[3];
      v9 = result + 1;
      v10[2] = v19;
      v10[3] = result;
    }
    v10[1] = &v9[v15];
    if ((_DWORD)v8)
      result = memcpy(v9, this[1591], v8);
    this[1591] = v9;
    LODWORD(v8) = *((_DWORD *)this + 3185);
    v7 = *((_DWORD *)this + 3184);
    goto LABEL_21;
  }
  return result;
}

void *`anonymous namespace'::Remangler::manglePack@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *result;

  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::CharVector::append(this + 1591, "QP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleSILPackDirect@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *result;

  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::CharVector::append(this + 1591, "QSd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleSILPackIndirect@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *result;

  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::CharVector::append(this + 1591, "QSi", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePackExpansion@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Qp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::manglePackElement@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::Node **v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Qe", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
    goto LABEL_12;
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleTypeList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  swift::Demangle::Node *v13;
  unsigned int *result;
  BOOL v15;

  v7 = 1;
  v15 = 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v8 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v8)
        goto LABEL_6;
      break;
    case 2:
      v8 = 2;
LABEL_6:
      v9 = 0;
      v10 = a3 + 1;
      while (1)
      {
        v11 = *((unsigned __int8 *)a2 + 18);
        v12 = v11 - 1;
        if ((_DWORD)v11 == 1)
          goto LABEL_13;
        if ((_DWORD)v11 != 5)
          break;
        if (*((unsigned int *)a2 + 2) > v9)
        {
LABEL_16:
          v13 = a2;
          if (v12 >= 2)
            v13 = *(swift::Demangle::Node **)a2;
          if (*(_DWORD *)a4)
            return result;
          goto LABEL_8;
        }
LABEL_7:
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_8:
        if (v8 == ++v9)
        {
          v7 = v15;
          goto LABEL_21;
        }
      }
      if ((_DWORD)v11 != 2)
        goto LABEL_7;
      v11 = 2;
LABEL_13:
      if (v11 > v9)
        goto LABEL_16;
      goto LABEL_7;
  }
LABEL_21:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleTypeMangling@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;

  v4 = (uint64_t)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  if (v6 == 1)
  {
    v9 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v7 != (swift::Demangle::Node *)((char *)a2 + 8))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v6 == 2)
  {
    v9 = (swift::Demangle::Node *)((char *)a2 + 16);
    if (v7 != (swift::Demangle::Node *)((char *)a2 + 16))
      goto LABEL_16;
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    v11 = *(_DWORD *)(v4 + 12736);
    v12 = *(unsigned int *)(v4 + 12740);
    v13 = *(_BYTE **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 68;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    v14 = *(_QWORD **)(v4 + 12744);
    v15 = (_BYTE *)v14[1];
    if (&v13[v12] == v15)
    {
      v17 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (v15)
      v20 = (unint64_t)&v15[v18 + v12] > v16;
    else
      v20 = 1;
    v13 = (_BYTE *)v14[1];
    if (v20)
    {
      v21 = 2 * v14[4];
      if (v21 <= v19 + 1)
        v21 = v19 + 1;
      v14[4] = v21;
      v22 = v21 + 8;
      this = (uint64_t *)malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      v23 = (char *)this + v22;
      *this = v14[3];
      v13 = this + 1;
      v14[2] = v23;
      v14[3] = this;
    }
    v14[1] = &v13[v19];
    if ((_DWORD)v12)
      this = (uint64_t *)memcpy(v13, *(const void **)(v4 + 12728), v12);
    *(_QWORD *)(v4 + 12728) = v13;
    LODWORD(v12) = *(_DWORD *)(v4 + 12740);
    v11 = *(_DWORD *)(v4 + 12736);
    goto LABEL_38;
  }
  if (v6 != 5)
  {
    v9 = 0;
    if (!v7)
      goto LABEL_19;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)a2;
LABEL_9:
  v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
  if (v7 == v9)
    goto LABEL_19;
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "N", 1uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ma", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mr", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MI", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mi", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ml", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleTypeMetadataDemanglingCache@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleWeak@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xw", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleUnowned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xo", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleUnmanaged@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Xu", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleValueWitness@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node *v8;
  uint64_t *result;
  char v10;
  char *v11;
  unsigned int v12;
  size_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  size_t v25;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
    v4 = *(swift::Demangle::Node **)v4;
  switch(**(_DWORD **)v4)
  {
    case 0:
      v10 = 0;
      v11 = "al";
      break;
    case 1:
      v10 = 0;
      v11 = "ca";
      break;
    case 2:
      v10 = 0;
      v11 = "ta";
      break;
    case 3:
      v10 = 0;
      v11 = "de";
      break;
    case 4:
      v10 = 0;
      v11 = "xx";
      break;
    case 5:
      v10 = 0;
      v11 = "XX";
      break;
    case 6:
      v10 = 0;
      v11 = "Xx";
      break;
    case 7:
      v10 = 0;
      v11 = "CP";
      break;
    case 8:
      v10 = 0;
      v11 = "Cp";
      break;
    case 9:
      v10 = 0;
      v11 = "cp";
      break;
    case 0xA:
      v10 = 0;
      v11 = "Tk";
      break;
    case 0xB:
      v10 = 0;
      v11 = "tk";
      break;
    case 0xC:
      v10 = 0;
      v11 = "pr";
      break;
    case 0xD:
      v10 = 0;
      v11 = "TK";
      break;
    case 0xE:
      v10 = 0;
      v11 = "Cc";
      break;
    case 0xF:
      v10 = 0;
      v11 = "Tt";
      break;
    case 0x10:
      v10 = 0;
      v11 = "tT";
      break;
    case 0x11:
      v10 = 0;
      v11 = "xs";
      break;
    case 0x12:
      v10 = 0;
      v11 = "xg";
      break;
    case 0x13:
      v10 = 0;
      v11 = "ug";
      break;
    case 0x14:
      v10 = 0;
      v11 = "up";
      break;
    case 0x15:
      v10 = 0;
      v11 = "ui";
      break;
    case 0x16:
      v10 = 0;
      v11 = "et";
      break;
    case 0x17:
      v10 = 0;
      v11 = "st";
      break;
    default:
      v11 = 0;
      v10 = 1;
      break;
  }
  v12 = *((_DWORD *)this + 3184);
  v13 = *((unsigned int *)this + 3185);
  v14 = (char *)this[1591];
  if (v12 < v13)
    goto LABEL_52;
  v15 = this[1593];
  v16 = (char *)v15[1];
  if (&v14[v13] != v16)
  {
    v17 = v15[2];
LABEL_40:
    if ((2 * v13) <= 4)
      v19 = 4;
    else
      v19 = (2 * v13);
    v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      v21 = 2 * v15[4];
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      v15[4] = v21;
      v22 = v21 + 8;
      v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      v24 = (char *)v23 + v22;
      *v23 = v15[3];
      v16 = (char *)(v23 + 1);
      v15[2] = v24;
      v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if ((_DWORD)v13)
      memcpy(v16, this[1591], v13);
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    v14 = v16;
    v12 = *((_DWORD *)this + 3184);
    goto LABEL_51;
  }
  v18 = (unint64_t)&v14[v13 + 1];
  v17 = v15[2];
  if (v18 > v17)
    goto LABEL_40;
  v15[1] = v18;
  LODWORD(v19) = 1;
LABEL_51:
  *((_DWORD *)this + 3185) = v13 + v19;
LABEL_52:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 119;
  if ((v10 & 1) != 0)
    v25 = 0;
  else
    v25 = strlen(v11);
  result = (uint64_t *)swift::Demangle::CharVector::append((char **)this + 1591, v11, v25, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "WV", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleVTableThunk@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleWillSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataBuiltinDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MB", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataFieldDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MF", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataAssocTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MA", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataSuperclassDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MC", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGenericTypeParamDecl@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "fp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCurryThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Tc", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDispatchThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Tj", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleMethodDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Tq", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolRequirementsBaseDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node *v8;
  int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::Node **)v8;
      v11 = *(swift::Demangle::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleAssociatedConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node *v14;
  swift::Demangle::Node *v15;
  int v16;
  int v17;
  swift::Demangle::Node **v18;
  swift::Demangle::Node *v19;
  swift::Demangle::Node **v20;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
    v15 = (swift::Demangle::Node *)*((_QWORD *)*a2 + 2);
  else
    v15 = 0;
  if (*((_WORD *)v15 + 8) == 232)
  {
    v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        v15 = 0;
        goto LABEL_26;
      }
      v15 = *(swift::Demangle::Node **)v15;
    }
    v15 = *(swift::Demangle::Node **)v15;
  }
LABEL_26:
  {
    v17 = *((unsigned __int8 *)v15 + 18);
    v18 = (swift::Demangle::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        v19 = *(swift::Demangle::Node **)v15;
        v18 = *(swift::Demangle::Node ***)v15;
LABEL_35:
        v20 = (swift::Demangle::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      v18 = 0;
    }
    switch(v17)
    {
      case 1:
        v20 = (swift::Demangle::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        v20 = (swift::Demangle::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        v19 = *(swift::Demangle::Node **)v15;
        goto LABEL_35;
    }
    v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tn", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDefaultAssociatedConformanceAccessor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node *v14;
  swift::Demangle::Node *v15;
  int v16;
  int v17;
  swift::Demangle::Node **v18;
  swift::Demangle::Node *v19;
  swift::Demangle::Node **v20;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
    v15 = (swift::Demangle::Node *)*((_QWORD *)*a2 + 2);
  else
    v15 = 0;
  if (*((_WORD *)v15 + 8) == 232)
  {
    v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        v15 = 0;
        goto LABEL_26;
      }
      v15 = *(swift::Demangle::Node **)v15;
    }
    v15 = *(swift::Demangle::Node **)v15;
  }
LABEL_26:
  {
    v17 = *((unsigned __int8 *)v15 + 18);
    v18 = (swift::Demangle::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        v19 = *(swift::Demangle::Node **)v15;
        v18 = *(swift::Demangle::Node ***)v15;
LABEL_35:
        v20 = (swift::Demangle::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      v18 = 0;
    }
    switch(v17)
    {
      case 1:
        v20 = (swift::Demangle::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        v20 = (swift::Demangle::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        v19 = *(swift::Demangle::Node **)v15;
        goto LABEL_35;
    }
    v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TN", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleBaseConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::Node *v13;
  int v14;
  int v15;
  swift::Demangle::Node **v16;
  swift::Demangle::Node *v17;
  swift::Demangle::Node **v18;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
LABEL_12:
    v13 = (swift::Demangle::Node *)*((_QWORD *)v4 + 1);
    goto LABEL_14;
  }
  v13 = 0;
LABEL_14:
  if (*((_WORD *)v13 + 8) == 232)
  {
    v14 = *((unsigned __int8 *)v13 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)v13 + 2))
      {
        v13 = 0;
        goto LABEL_21;
      }
      v13 = *(swift::Demangle::Node **)v13;
    }
    v13 = *(swift::Demangle::Node **)v13;
  }
LABEL_21:
  {
    v15 = *((unsigned __int8 *)v13 + 18);
    v16 = (swift::Demangle::Node **)v13;
    if ((v15 - 1) >= 2)
    {
      if (v15 == 5)
      {
        v17 = *(swift::Demangle::Node **)v13;
        v16 = *(swift::Demangle::Node ***)v13;
LABEL_30:
        v18 = (swift::Demangle::Node **)((char *)v17 + 8 * *((unsigned int *)v13 + 2));
        goto LABEL_36;
      }
      v16 = 0;
    }
    switch(v15)
    {
      case 1:
        v18 = (swift::Demangle::Node **)((char *)v13 + 8);
        goto LABEL_36;
      case 2:
        v18 = (swift::Demangle::Node **)((char *)v13 + 16);
        goto LABEL_36;
      case 5:
        v17 = *(swift::Demangle::Node **)v13;
        goto LABEL_30;
    }
    v18 = 0;
LABEL_36:
    while (v16 != v18)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tb", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAssociatedTypeDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Tl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleThrowsAnnotation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 75;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleTypedThrowsAnnotation@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "YK", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleEmptyList@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 121;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleFirstElementMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 95;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleVariadicMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 100;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

void *`anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  char **v6;
  void *result;

  v6 = this + 1591;
  swift::Demangle::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  swift::Demangle::CharVector::append(v6, *(void **)a2, *((_QWORD *)a2 + 1), this[1593]);
  result = swift::Demangle::CharVector::append(v6, "_", 1uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOy", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOe", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOr", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOs", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOb", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOc", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOf", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOh", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

char *`anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  char *result;

  swift::Demangle::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_QWORD *`anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v6;
  _QWORD *result;
  unsigned int v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  v6 = (const void **)(this + 1591);
  swift::Demangle::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  v8 = *((_DWORD *)this + 3184);
  v9 = *((unsigned int *)this + 3185);
  v10 = this[1591];
  if (v8 >= v9)
  {
    v11 = this[1593];
    v12 = (char *)*((_QWORD *)v11 + 1);
    if (&v10[v9] == v12)
    {
      v14 = (unint64_t)&v10[v9 + 1];
      v13 = *((_QWORD *)v11 + 2);
      if (v14 <= v13)
      {
        *((_QWORD *)v11 + 1) = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = *((_QWORD *)v11 + 2);
    }
    if ((2 * v9) <= 4)
      v15 = 4;
    else
      v15 = (2 * v9);
    v16 = v15 + v9;
    if (v12)
      v17 = (unint64_t)&v12[v15 + v9] > v13;
    else
      v17 = 1;
    v10 = (char *)*((_QWORD *)v11 + 1);
    if (v17)
    {
      v18 = 2 * *((_QWORD *)v11 + 4);
      if (v18 <= v16 + 1)
        v18 = v16 + 1;
      *((_QWORD *)v11 + 4) = v18;
      v19 = v18 + 8;
      result = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      v20 = (char *)result + v19;
      *result = *((_QWORD *)v11 + 3);
      v10 = (char *)(result + 1);
      *((_QWORD *)v11 + 2) = v20;
      *((_QWORD *)v11 + 3) = result;
    }
    *((_QWORD *)v11 + 1) = &v10[v16];
    if ((_DWORD)v9)
      result = memcpy(v10, *v6, v9);
    this[1591] = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    v8 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 114;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleAssocTypePath@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  BOOL v11;

  v4 = (_anonymous_namespace_::Remangler *)this;
  v11 = 1;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleLabelList@<X0>(uint64_t *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node **v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  swift::Demangle::Node **v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = a2;
  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
LABEL_10:
      v14 = &v4[v7];
      v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4)
          return this;
        if (++v4 == v14)
          goto LABEL_29;
      }
    case 2:
      v7 = 2;
      goto LABEL_10;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
      {
        v4 = (swift::Demangle::Node **)*a2;
        goto LABEL_10;
      }
      break;
  }
  v8 = *((_DWORD *)this + 3184);
  v9 = *((unsigned int *)this + 3185);
  v10 = (char *)this[1591];
  if (v8 >= v9)
  {
    v11 = (_QWORD *)this[1593];
    v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      v16 = (unint64_t)&v10[v9 + 1];
      v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(v17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 12740) = v9 + v17;
        goto LABEL_28;
      }
    }
    else
    {
      v13 = v11[2];
    }
    if ((2 * v9) <= 4)
      v17 = 4;
    else
      v17 = (2 * v9);
    v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      v19 = 2 * v11[4];
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      v11[4] = v19;
      v20 = v19 + 8;
      this = (uint64_t *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *this = v11[3];
      v12 = (char *)(this + 1);
      v11[2] = v21;
      v11[3] = this;
    }
    v11[1] = &v12[v18];
    if ((_DWORD)v9)
      this = (uint64_t *)memcpy(v12, *(const void **)(v5 + 12728), v9);
    *(_QWORD *)(v5 + 12728) = v12;
    LODWORD(v9) = *(_DWORD *)(v5 + 12740);
    v10 = v12;
    v8 = *(_DWORD *)(v5 + 12736);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 12736) = v8 + 1;
  v10[v8] = 121;
LABEL_29:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleModuleDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MXM", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtensionDescriptor@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MXE", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAnonymousDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  uint64_t *result;
  int v11;
  int v12;
  char **v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4)
    return result;
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 1)
    goto LABEL_13;
  if (v11 == 2)
    goto LABEL_16;
  if (v11 != 5 || (v12 = *((_DWORD *)v4 + 2)) == 0)
  {
    v16 = 0;
LABEL_17:
    v20 = 0uLL;
    LOBYTE(v21) = 0;
    {
      v17 = *((_QWORD *)this + 1585);
      if (v17 > 0xF)
      {
        v19 = *((_DWORD *)this + 3178) + 16;
        v22 = v20;
        v23 = v21;
        v24 = v19;
        std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v22, &v22);
      }
      else
      {
        *((_QWORD *)this + 1585) = v17 + 1;
        v18 = (char *)this + 24 * v17 + 12296;
        *(_OWORD *)v18 = v20;
        v18[16] = v21;
      }
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    v13 = (char **)((char *)this + 12728);
    v14 = (_QWORD *)*((_QWORD *)this + 1593);
    v15 = "MXY";
    goto LABEL_22;
  }
  if (v12 != 1)
  {
    v4 = *(swift::Demangle::Node **)v4;
LABEL_16:
    v16 = *((_QWORD *)v4 + 1);
    goto LABEL_17;
  }
LABEL_13:
  v13 = (char **)((char *)this + 12728);
  v14 = (_QWORD *)*((_QWORD *)this + 1593);
  v15 = "MXX";
LABEL_22:
  result = (uint64_t *)swift::Demangle::CharVector::append(v13, v15, 3uLL, v14);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAssociatedTypeGenericParamRef@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  swift::Demangle::Node **v17;
  swift::Demangle::Node *v18;
  swift::Demangle::Node **v19;
  BOOL v20;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 == 1)
    goto LABEL_11;
  if (v10 == 5 && *((_DWORD *)v9 + 2) == 1)
  {
    v9 = *(swift::Demangle::Node **)v9;
LABEL_11:
    v11 = a3 + 2;
    if (*(_DWORD *)a4)
      return this;
    v12 = *((unsigned __int8 *)v4 + 18);
    if (v12 != 2)
    {
      if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
      {
        v13 = 0;
        goto LABEL_19;
      }
      v4 = *(swift::Demangle::Node **)v4;
    }
    v13 = *((_QWORD *)v4 + 1);
LABEL_19:
    v20 = 1;
    v16 = *(unsigned __int8 *)(v13 + 18);
    v17 = (swift::Demangle::Node **)v13;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        v18 = *(swift::Demangle::Node **)v13;
        v17 = *(swift::Demangle::Node ***)v13;
LABEL_27:
        v19 = (swift::Demangle::Node **)((char *)v18 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_33;
      }
      v17 = 0;
    }
    switch(v16)
    {
      case 1:
        v19 = (swift::Demangle::Node **)(v13 + 8);
        goto LABEL_33;
      case 2:
        v19 = (swift::Demangle::Node **)(v13 + 16);
        goto LABEL_33;
      case 5:
        v18 = *(swift::Demangle::Node **)v13;
        goto LABEL_27;
    }
    v19 = 0;
LABEL_33:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4)
        return this;
      ++v17;
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "MXA", 3uLL, (_QWORD *)v5[1593]);
    v15 = 0;
    v9 = 0;
    v14 = 0;
    goto LABEL_35;
  }
  v14 = 321;
  v15 = 10;
LABEL_35:
  *(_DWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSugaredOptional@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::Node *v7;
  int v8;
  int v9;
  int v10;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      v10 = 321;
      v9 = 10;
      goto LABEL_14;
    }
    v7 = *(swift::Demangle::Node **)v7;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XSq", 3uLL, *((_QWORD **)v4 + 1593));
  v9 = 0;
  v7 = 0;
  v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSugaredArray@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::Node *v7;
  int v8;
  int v9;
  int v10;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      v10 = 321;
      v9 = 10;
      goto LABEL_14;
    }
    v7 = *(swift::Demangle::Node **)v7;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XSa", 3uLL, *((_QWORD **)v4 + 1593));
  v9 = 0;
  v7 = 0;
  v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleSugaredDictionary@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)v9 + 2) != 1)
      goto LABEL_24;
    v9 = *(swift::Demangle::Node **)v9;
  }
  v11 = a3 + 2;
  if (*(_DWORD *)a4)
    return this;
  v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2)
    goto LABEL_16;
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::Node **)v4;
LABEL_16:
    v9 = (swift::Demangle::Node *)*((_QWORD *)v4 + 1);
    goto LABEL_18;
  }
  v9 = 0;
LABEL_18:
  v13 = *((unsigned __int8 *)v9 + 18);
  if (v13 != 1)
  {
    if (v13 == 5 && *((_DWORD *)v9 + 2) == 1)
    {
      v9 = *(swift::Demangle::Node **)v9;
      goto LABEL_22;
    }
LABEL_24:
    v15 = 321;
    v14 = 10;
    goto LABEL_25;
  }
LABEL_22:
  if (*(_DWORD *)a4)
    return this;
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)v5 + 1591, "XSD", 3uLL, (_QWORD *)v5[1593]);
  v14 = 0;
  v9 = 0;
  v15 = 0;
LABEL_25:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v15;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSugaredParen@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::Node *v7;
  int v8;
  int v9;
  int v10;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      v10 = 321;
      v9 = 10;
      goto LABEL_14;
    }
    v7 = *(swift::Demangle::Node **)v7;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "XSp", 3uLL, *((_QWORD **)v4 + 1593));
  v9 = 0;
  v7 = 0;
  v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleOpaqueType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node **v5;
  uint64_t *result;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  const void **v12;
  unint64_t v13;
  char v14;
  unsigned int v15;
  size_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  char *v28;
  char v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  swift::Demangle::Node **v35;
  swift::Demangle::Node *v36;
  swift::Demangle::Node **v37;
  unint64_t v38;
  uint64_t *v39;
  swift::Demangle::Node *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  char *v46;
  int v47;
  const void **v48;
  uint64_t *v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int v55;

  v5 = a2;
  v51 = 0uLL;
  LOBYTE(v52) = 0;
  if ((_DWORD)result)
    goto LABEL_2;
  if (*((_BYTE *)v5 + 18) != 5 || *((_DWORD *)v5 + 2) <= 2u)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = 3771;
    return result;
  }
  v9 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 3u)
    v10 = (uint64_t *)*((_QWORD *)*v5 + 2);
  else
    v10 = 0;
  v11 = 0;
  v12 = (const void **)((char *)this + 12728);
  v49 = v10;
  while (1)
  {
    v13 = *((unsigned __int8 *)v10 + 18);
    if ((_DWORD)v13 != 1)
    {
      if ((_DWORD)v13 == 5)
      {
        v13 = *((unsigned int *)v10 + 2);
      }
      else
      {
        if ((_DWORD)v13 != 2)
          break;
        v13 = 2;
      }
    }
    if (v13 <= v11)
      break;
    if (v11)
      v14 = 95;
    else
      v14 = 121;
    v15 = *((_DWORD *)this + 3184);
    v16 = *((unsigned int *)this + 3185);
    v17 = (char *)*((_QWORD *)this + 1591);
    if (v15 >= v16)
    {
      v50 = v11;
      v18 = (_QWORD *)*((_QWORD *)this + 1593);
      v19 = (char *)v18[1];
      if (&v17[v16] != v19)
      {
        v20 = v18[2];
        goto LABEL_26;
      }
      v21 = (unint64_t)&v17[v16 + 1];
      v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v22) = 1;
      }
      else
      {
LABEL_26:
        if ((2 * v16) <= 4)
          v22 = 4;
        else
          v22 = (2 * v16);
        v23 = v22 + v16;
        if (!v19 || (unint64_t)&v19[v23] > v20)
        {
          v24 = 2 * v18[4];
          if (v24 <= v23 + 1)
            v24 = v23 + 1;
          v18[4] = v24;
          v48 = v12;
          v25 = v24 + 8;
          v26 = v14;
          v27 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          v14 = v26;
          *v27 = v18[3];
          v19 = (char *)(v27 + 1);
          v28 = (char *)v27 + v25;
          v12 = v48;
          v18[2] = v28;
          v18[3] = v27;
        }
        v18[1] = &v19[v23];
        if ((_DWORD)v16)
        {
          v29 = v14;
          memcpy(v19, *v12, v16);
          v14 = v29;
        }
        *((_QWORD *)this + 1591) = v19;
        LODWORD(v16) = *((_DWORD *)this + 3185);
        v17 = v19;
        v15 = *((_DWORD *)this + 3184);
        v10 = v49;
      }
      v11 = v50;
      *((_DWORD *)this + 3185) = v16 + v22;
    }
    *((_DWORD *)this + 3184) = v15 + 1;
    v17[v15] = v14;
    v30 = *((unsigned __int8 *)v10 + 18);
    v31 = v30 - 1;
    if ((_DWORD)v30 == 1)
      goto LABEL_42;
    if ((_DWORD)v30 != 5)
    {
      if ((_DWORD)v30 != 2)
        goto LABEL_47;
      v30 = 2;
LABEL_42:
      if (v30 <= v11)
        goto LABEL_47;
      goto LABEL_43;
    }
    if (*((unsigned int *)v10 + 2) <= v11)
    {
LABEL_47:
      v33 = 0;
      goto LABEL_48;
    }
LABEL_43:
    v32 = v10;
    if (v31 >= 2)
      v32 = (uint64_t *)*v10;
    v33 = v32[v11];
LABEL_48:
    v34 = *(unsigned __int8 *)(v33 + 18);
    v35 = (swift::Demangle::Node **)v33;
    if ((v34 - 1) >= 2)
    {
      if (v34 == 5)
      {
        v36 = *(swift::Demangle::Node **)v33;
        v35 = *(swift::Demangle::Node ***)v33;
LABEL_56:
        v37 = (swift::Demangle::Node **)((char *)v36 + 8 * *(unsigned int *)(v33 + 8));
        goto LABEL_62;
      }
      v35 = 0;
    }
    switch(v34)
    {
      case 1:
        v37 = (swift::Demangle::Node **)(v33 + 8);
        goto LABEL_62;
      case 2:
        v37 = (swift::Demangle::Node **)(v33 + 16);
        goto LABEL_62;
      case 5:
        v36 = *(swift::Demangle::Node **)v33;
        goto LABEL_56;
    }
    v37 = 0;
LABEL_62:
    while (v35 != v37)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v35;
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    ++v11;
    *(_DWORD *)(a4 + 16) = 0;
  }
  if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 4u)
  {
    v38 = 0;
    v39 = (uint64_t *)*((_QWORD *)*v5 + 3);
    while (1)
    {
      v41 = *((unsigned __int8 *)v39 + 18);
      switch((_DWORD)v41)
      {
        case 1:
          v42 = *((unsigned __int8 *)v39 + 18);
          break;
        case 5:
          v42 = *((unsigned int *)v39 + 2);
          break;
        case 2:
          v42 = 2;
          break;
        default:
          goto LABEL_85;
      }
      if (v42 <= v38)
        break;
      v43 = v41 - 1;
      if ((_DWORD)v41 != 1)
      {
        if ((_DWORD)v41 == 5)
          v41 = *((unsigned int *)v39 + 2);
        else
          v41 = 2;
      }
      if (v41 <= v38)
      {
        v40 = 0;
      }
      else
      {
        v44 = v39;
        if (v43 >= 2)
          v44 = (uint64_t *)*v39;
        v40 = (swift::Demangle::Node *)v44[v38];
      }
      ++v38;
      if (*(_DWORD *)a4)
        return result;
    }
  }
LABEL_85:
  swift::Demangle::CharVector::append((char **)v12, "Qo", 2uLL, *((_QWORD **)this + 1593));
  if (*((_BYTE *)v5 + 18) == 5)
    v5 = (swift::Demangle::Node **)*v5;
  v45 = *((_QWORD *)this + 1585);
  if (v45 > 0xF)
  {
    v47 = *((_DWORD *)this + 3178) + 16;
    v53 = v51;
    v54 = v52;
    v55 = v47;
    result = (uint64_t *)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v53, &v53);
  }
  else
  {
    *((_QWORD *)this + 1585) = v45 + 1;
    v46 = (char *)this + 24 * v45 + 12296;
    *(_OWORD *)v46 = v51;
    v46[16] = v52;
  }
LABEL_2:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MQ", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Ho", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mg", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorImpl@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mh", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorKey@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mj", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorVar@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mk", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *`anonymous namespace'::Remangler::mangleOpaqueReturnType@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  int v6;
  swift::Demangle::Node *v7;
  void *result;

  v3 = (uint64_t *)a2;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2))
      goto LABEL_9;
    v7 = *(swift::Demangle::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v7 + 16) != 341)
  {
LABEL_9:
    result = swift::Demangle::CharVector::append(this + 1591, "Qr", 2uLL, this[1593]);
    goto LABEL_10;
  }
  swift::Demangle::CharVector::append(this + 1591, "QR", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v3 + 18) - 1 >= 2)
    v3 = (uint64_t *)*v3;
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOpaqueReturnTypeOf@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "QO", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "MM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mb", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MK", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MN", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadataCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "MJ", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalVariableOnceFunction@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalVariableOnceToken@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Wz", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalVariableOnceDeclList@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  swift::Demangle::Node *v16;
  swift::Demangle::Node *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1)
    goto LABEL_6;
  if (v7 != 5)
  {
    if (v7 != 2)
      goto LABEL_36;
    goto LABEL_6;
  }
  v7 = *((_DWORD *)a2 + 2);
  if (v7)
  {
LABEL_6:
    v8 = 0;
    v9 = a3 + 1;
    v10 = v7;
    v27 = a3 + 1;
    while (1)
    {
      v14 = *((unsigned __int8 *)a2 + 18);
      v15 = v14 - 1;
      if ((_DWORD)v14 == 1)
        goto LABEL_14;
      if ((_DWORD)v14 != 5)
        break;
      if (*((unsigned int *)a2 + 2) <= v8)
      {
LABEL_19:
        v17 = 0;
        goto LABEL_20;
      }
LABEL_15:
      v16 = a2;
      if (v15 >= 2)
        v16 = *(swift::Demangle::Node **)a2;
      v17 = (swift::Demangle::Node *)*((_QWORD *)v16 + v8);
LABEL_20:
      if (*(_DWORD *)a4)
        return this;
      v13 = *(_DWORD *)(v5 + 12736);
      v11 = *(unsigned int *)(v5 + 12740);
      v12 = *(char **)(v5 + 12728);
      if (v13 >= v11)
      {
        v18 = *(_QWORD **)(v5 + 12744);
        v19 = (char *)v18[1];
        if (&v12[v11] != v19)
        {
          v20 = v18[2];
          goto LABEL_25;
        }
        v21 = (unint64_t)&v12[v11 + 1];
        v20 = v18[2];
        if (v21 <= v20)
        {
          v18[1] = v21;
          LODWORD(v22) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v11) <= 4)
            v22 = 4;
          else
            v22 = (2 * v11);
          v23 = v22 + v11;
          if (!v19 || (unint64_t)&v19[v23] > v20)
          {
            v24 = 2 * v18[4];
            if (v24 <= v23 + 1)
              v24 = v23 + 1;
            v18[4] = v24;
            v25 = v24 + 8;
            this = (uint64_t *)malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
            v26 = (char *)this + v25;
            *this = v18[3];
            v19 = (char *)(this + 1);
            v18[2] = v26;
            v18[3] = this;
          }
          v18[1] = &v19[v23];
          if ((_DWORD)v11)
            this = (uint64_t *)memcpy(v19, *(const void **)(v5 + 12728), v11);
          *(_QWORD *)(v5 + 12728) = v19;
          LODWORD(v11) = *(_DWORD *)(v5 + 12740);
          v12 = v19;
          v13 = *(_DWORD *)(v5 + 12736);
        }
        *(_DWORD *)(v5 + 12740) = v11 + v22;
        v9 = v27;
      }
      *(_DWORD *)(v5 + 12736) = v13 + 1;
      v12[v13] = 95;
      if (v10 == ++v8)
        goto LABEL_36;
    }
    if ((_DWORD)v14 != 2)
      goto LABEL_19;
    v14 = 2;
LABEL_14:
    if (v14 <= v8)
      goto LABEL_19;
    goto LABEL_15;
  }
LABEL_36:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCanonicalPrespecializedGenericTypeCachingOnceToken@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Mz", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAutoDiffSelfReorderingReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  swift::Demangle::Node **v11;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
      v4 = *(swift::Demangle::Node **)a2;
    else
      v4 = 0;
  }
  v8 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      v11 = (swift::Demangle::Node **)((char *)v4 + 16);
      v10 = *((_QWORD *)v4 + 2);
      if (*(_WORD *)(v10 + 16) == 43)
      {
        if (*(_DWORD *)a4)
          return result;
        v11 = (swift::Demangle::Node **)((char *)v4 + 24);
      }
      swift::Demangle::CharVector::append(this + 1591, "TJO", 3uLL, this[1593]);
    }
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAutoDiffSubsetParametersThunk@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node **v8;
  unsigned int v9;
  int v10;
  swift::Demangle::Node **v11;
  swift::Demangle::Node **v12;
  swift::Demangle::Node *v13;
  uint64_t *result;
  const void **v15;
  unsigned int v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unsigned int v29;
  size_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  unsigned int v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
      v8 = (swift::Demangle::Node **)*a2;
    else
      v8 = 0;
  }
  v9 = a3 + 1;
  while (1)
  {
    v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 != 5)
      break;
    if (v8 == (swift::Demangle::Node **)((char *)*a2 + 8 * *((unsigned int *)a2 + 2)))
      goto LABEL_19;
LABEL_16:
    v13 = *v8;
    if (*((_WORD *)*v8 + 8) == 321)
      goto LABEL_19;
    ++v8;
    if (*(_DWORD *)a4)
      return result;
  }
  if (v10 == 1)
    v11 = a2 + 1;
  else
    v11 = 0;
  if (v10 == 2)
    v12 = a2 + 2;
  else
    v12 = v11;
  if (v8 != v12)
    goto LABEL_16;
LABEL_19:
  v15 = (const void **)(this + 1591);
  swift::Demangle::CharVector::append(this + 1591, "TJS", 3uLL, this[1593]);
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      v16 = *((_DWORD *)this + 3184);
      v17 = *((unsigned int *)this + 3185);
      v18 = this[1591];
      if (v16 >= v17)
      {
        v19 = this[1593];
        v20 = (char *)*((_QWORD *)v19 + 1);
        if (&v18[v17] != v20)
        {
          v21 = *((_QWORD *)v19 + 2);
          goto LABEL_25;
        }
        v22 = (unint64_t)&v18[v17 + 1];
        v21 = *((_QWORD *)v19 + 2);
        if (v22 <= v21)
        {
          *((_QWORD *)v19 + 1) = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v17) <= 4)
            v23 = 4;
          else
            v23 = (2 * v17);
          v24 = v23 + v17;
          if (!v20 || (unint64_t)&v20[v24] > v21)
          {
            v25 = 2 * *((_QWORD *)v19 + 4);
            if (v25 <= v24 + 1)
              v25 = v24 + 1;
            *((_QWORD *)v19 + 4) = v25;
            v26 = v25 + 8;
            v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
            v28 = (char *)v27 + v26;
            *v27 = *((_QWORD *)v19 + 3);
            v20 = (char *)(v27 + 1);
            *((_QWORD *)v19 + 2) = v28;
            *((_QWORD *)v19 + 3) = v27;
          }
          *((_QWORD *)v19 + 1) = &v20[v24];
          if ((_DWORD)v17)
            memcpy(v20, *v15, v17);
          this[1591] = v20;
          LODWORD(v17) = *((_DWORD *)this + 3185);
          v18 = v20;
          v16 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v17 + v23;
      }
      *((_DWORD *)this + 3184) = v16 + 1;
      v18[v16] = 112;
      if (!*(_DWORD *)a4)
      {
        v29 = *((_DWORD *)this + 3184);
        v30 = *((unsigned int *)this + 3185);
        v31 = this[1591];
        if (v29 >= v30)
        {
          v32 = this[1593];
          v33 = (char *)*((_QWORD *)v32 + 1);
          if (&v31[v30] != v33)
          {
            v34 = *((_QWORD *)v32 + 2);
            goto LABEL_43;
          }
          v35 = (unint64_t)&v31[v30 + 1];
          v34 = *((_QWORD *)v32 + 2);
          if (v35 <= v34)
          {
            *((_QWORD *)v32 + 1) = v35;
            LODWORD(v36) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v30) <= 4)
              v36 = 4;
            else
              v36 = (2 * v30);
            v37 = v36 + v30;
            if (!v33 || (unint64_t)&v33[v37] > v34)
            {
              v38 = 2 * *((_QWORD *)v32 + 4);
              if (v38 <= v37 + 1)
                v38 = v37 + 1;
              *((_QWORD *)v32 + 4) = v38;
              v39 = v38 + 8;
              v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
              v41 = (char *)v40 + v39;
              *v40 = *((_QWORD *)v32 + 3);
              v33 = (char *)(v40 + 1);
              *((_QWORD *)v32 + 2) = v41;
              *((_QWORD *)v32 + 3) = v40;
            }
            *((_QWORD *)v32 + 1) = &v33[v37];
            if ((_DWORD)v30)
              memcpy(v33, *v15, v30);
            this[1591] = v33;
            LODWORD(v30) = *((_DWORD *)this + 3185);
            v31 = v33;
            v29 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v30 + v36;
        }
        *((_DWORD *)this + 3184) = v29 + 1;
        v31[v29] = 114;
        if (!*(_DWORD *)a4)
        {
          v42 = *((_DWORD *)this + 3184);
          v43 = *((unsigned int *)this + 3185);
          v44 = this[1591];
          if (v42 >= v43)
          {
            v45 = this[1593];
            v46 = (char *)*((_QWORD *)v45 + 1);
            if (&v44[v43] != v46)
            {
              v47 = *((_QWORD *)v45 + 2);
              goto LABEL_61;
            }
            v48 = (unint64_t)&v44[v43 + 1];
            v47 = *((_QWORD *)v45 + 2);
            if (v48 <= v47)
            {
              *((_QWORD *)v45 + 1) = v48;
              LODWORD(v49) = 1;
            }
            else
            {
LABEL_61:
              if ((2 * v43) <= 4)
                v49 = 4;
              else
                v49 = (2 * v43);
              v50 = v49 + v43;
              if (!v46 || (unint64_t)&v46[v50] > v47)
              {
                v51 = 2 * *((_QWORD *)v45 + 4);
                if (v51 <= v50 + 1)
                  v51 = v50 + 1;
                *((_QWORD *)v45 + 4) = v51;
                v52 = v51 + 8;
                result = (uint64_t *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
                v53 = (char *)result + v52;
                *result = *((_QWORD *)v45 + 3);
                v46 = (char *)(result + 1);
                *((_QWORD *)v45 + 2) = v53;
                *((_QWORD *)v45 + 3) = result;
              }
              *((_QWORD *)v45 + 1) = &v46[v50];
              if ((_DWORD)v43)
                result = (uint64_t *)memcpy(v46, *v15, v43);
              this[1591] = v46;
              LODWORD(v43) = *((_DWORD *)this + 3185);
              v44 = v46;
              v42 = *((_DWORD *)this + 3184);
            }
            *((_DWORD *)this + 3185) = v43 + v49;
          }
          *((_DWORD *)this + 3184) = v42 + 1;
          v44[v42] = 80;
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDifferentiabilityWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node *v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  swift::Demangle::Node *v12;
  swift::Demangle::Node *v13;
  uint64_t *result;
  uint64_t v15;
  swift::Demangle::Node *v16;
  swift::Demangle::Node *v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  char v21;
  unsigned int v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  unsigned int v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unsigned int v48;
  size_t v49;
  char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
      v8 = *(swift::Demangle::Node **)a2;
    else
      v8 = 0;
  }
  v9 = (unsigned int *)((char *)a2 + 8);
  v10 = a3 + 1;
  while (1)
  {
    v11 = *((unsigned __int8 *)v4 + 18);
    if (v11 != 5)
      break;
    if (v8 == (swift::Demangle::Node *)(*(_QWORD *)v4 + 8 * *((unsigned int *)v4 + 2)))
      goto LABEL_18;
LABEL_15:
    v13 = *(swift::Demangle::Node **)v8;
    if (*(_WORD *)(*(_QWORD *)v8 + 16) == 102)
      goto LABEL_18;
    v8 = (swift::Demangle::Node *)((char *)v8 + 8);
    if (*(_DWORD *)a4)
      return result;
  }
  if (v11 == 1)
    v12 = (swift::Demangle::Node *)((char *)v4 + 8);
  else
    v12 = 0;
  if (v11 == 2)
    v12 = (swift::Demangle::Node *)((char *)v4 + 16);
  if (v8 != v12)
    goto LABEL_15;
LABEL_18:
  if (v11 == 1)
  {
    v15 = 0;
  }
  else
  {
    if (v11 == 5)
    {
      v15 = *((unsigned int *)v4 + 2) - 1;
      v16 = *(swift::Demangle::Node **)v4;
      goto LABEL_24;
    }
    v15 = 1;
  }
  v16 = v4;
LABEL_24:
  if (*(_WORD *)(*((_QWORD *)v16 + v15) + 16) != 43)
    goto LABEL_34;
  if (v11 == 1)
  {
    v18 = 0;
    goto LABEL_32;
  }
  if (v11 == 5)
  {
    v19 = *v9;
    if (!(_DWORD)v19)
    {
      v17 = 0;
      goto LABEL_33;
    }
    v18 = v19 - 1;
    v4 = *(swift::Demangle::Node **)v4;
LABEL_32:
    v17 = (swift::Demangle::Node *)*((_QWORD *)v4 + v18);
    goto LABEL_33;
  }
  v17 = 0;
  if (v11 == 2)
  {
    v18 = 1;
    goto LABEL_32;
  }
LABEL_33:
  if (!*(_DWORD *)a4)
  {
LABEL_34:
    v20 = (const void **)(this + 1591);
    swift::Demangle::CharVector::append(this + 1591, "WJ", 2uLL, this[1593]);
    v21 = **(_BYTE **)v8;
    v22 = *((_DWORD *)this + 3184);
    v23 = *((unsigned int *)this + 3185);
    v24 = this[1591];
    if (v22 >= v23)
    {
      v25 = this[1593];
      v26 = (char *)*((_QWORD *)v25 + 1);
      if (&v24[v23] != v26)
      {
        v27 = *((_QWORD *)v25 + 2);
        goto LABEL_38;
      }
      v28 = (unint64_t)&v24[v23 + 1];
      v27 = *((_QWORD *)v25 + 2);
      if (v28 <= v27)
      {
        *((_QWORD *)v25 + 1) = v28;
        LODWORD(v29) = 1;
        v20 = (const void **)(this + 1591);
      }
      else
      {
LABEL_38:
        if ((2 * v23) <= 4)
          v29 = 4;
        else
          v29 = (2 * v23);
        v30 = v29 + v23;
        if (!v26 || (unint64_t)&v26[v30] > v27)
        {
          v31 = 2 * *((_QWORD *)v25 + 4);
          if (v31 <= v30 + 1)
            v31 = v30 + 1;
          *((_QWORD *)v25 + 4) = v31;
          v32 = v31 + 8;
          v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          v34 = (char *)v33 + v32;
          *v33 = *((_QWORD *)v25 + 3);
          v26 = (char *)(v33 + 1);
          *((_QWORD *)v25 + 2) = v34;
          *((_QWORD *)v25 + 3) = v33;
        }
        *((_QWORD *)v25 + 1) = &v26[v30];
        v20 = (const void **)(this + 1591);
        if ((_DWORD)v23)
          memcpy(v26, this[1591], v23);
        this[1591] = v26;
        LODWORD(v23) = *((_DWORD *)this + 3185);
        v24 = v26;
        v22 = *((_DWORD *)this + 3184);
      }
      *((_DWORD *)this + 3185) = v23 + v29;
    }
    *((_DWORD *)this + 3184) = v22 + 1;
    v24[v22] = v21;
    if (!*(_DWORD *)a4)
    {
      v35 = *((_DWORD *)this + 3184);
      v36 = *((unsigned int *)this + 3185);
      v37 = this[1591];
      if (v35 >= v36)
      {
        v38 = this[1593];
        v39 = (char *)*((_QWORD *)v38 + 1);
        if (&v37[v36] != v39)
        {
          v40 = *((_QWORD *)v38 + 2);
          goto LABEL_56;
        }
        v41 = (unint64_t)&v37[v36 + 1];
        v40 = *((_QWORD *)v38 + 2);
        if (v41 <= v40)
        {
          *((_QWORD *)v38 + 1) = v41;
          LODWORD(v42) = 1;
        }
        else
        {
LABEL_56:
          if ((2 * v36) <= 4)
            v42 = 4;
          else
            v42 = (2 * v36);
          v43 = v42 + v36;
          if (!v39 || (unint64_t)&v39[v43] > v40)
          {
            v44 = 2 * *((_QWORD *)v38 + 4);
            if (v44 <= v43 + 1)
              v44 = v43 + 1;
            *((_QWORD *)v38 + 4) = v44;
            v45 = v44 + 8;
            v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            v47 = (char *)v46 + v45;
            *v46 = *((_QWORD *)v38 + 3);
            v39 = (char *)(v46 + 1);
            *((_QWORD *)v38 + 2) = v47;
            *((_QWORD *)v38 + 3) = v46;
          }
          *((_QWORD *)v38 + 1) = &v39[v43];
          if ((_DWORD)v36)
            memcpy(v39, *v20, v36);
          this[1591] = v39;
          LODWORD(v36) = *((_DWORD *)this + 3185);
          v37 = v39;
          v35 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v36 + v42;
      }
      *((_DWORD *)this + 3184) = v35 + 1;
      v37[v35] = 112;
      if (!*(_DWORD *)a4)
      {
        v48 = *((_DWORD *)this + 3184);
        v49 = *((unsigned int *)this + 3185);
        v50 = this[1591];
        if (v48 >= v49)
        {
          v51 = this[1593];
          v52 = (char *)*((_QWORD *)v51 + 1);
          if (&v50[v49] != v52)
          {
            v53 = *((_QWORD *)v51 + 2);
            goto LABEL_75;
          }
          v54 = (unint64_t)&v50[v49 + 1];
          v53 = *((_QWORD *)v51 + 2);
          if (v54 <= v53)
          {
            *((_QWORD *)v51 + 1) = v54;
            LODWORD(v55) = 1;
          }
          else
          {
LABEL_75:
            if ((2 * v49) <= 4)
              v55 = 4;
            else
              v55 = (2 * v49);
            v56 = v55 + v49;
            if (!v52 || (unint64_t)&v52[v56] > v53)
            {
              v57 = 2 * *((_QWORD *)v51 + 4);
              if (v57 <= v56 + 1)
                v57 = v56 + 1;
              *((_QWORD *)v51 + 4) = v57;
              v58 = v57 + 8;
              result = (uint64_t *)malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              v59 = (char *)result + v58;
              *result = *((_QWORD *)v51 + 3);
              v52 = (char *)(result + 1);
              *((_QWORD *)v51 + 2) = v59;
              *((_QWORD *)v51 + 3) = result;
            }
            *((_QWORD *)v51 + 1) = &v52[v56];
            if ((_DWORD)v49)
              result = (uint64_t *)memcpy(v52, *v20, v49);
            this[1591] = v52;
            LODWORD(v49) = *((_DWORD *)this + 3185);
            v50 = v52;
            v48 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v49 + v55;
        }
        *((_DWORD *)this + 3184) = v48 + 1;
        v50[v48] = 114;
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
      }
    }
  }
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNoDerivative@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yk", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAsyncAwaitResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  int v9;

  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TQ", 2uLL, this[1593]);
  v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) < 2)
  if (v9 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::Node **)a2;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAsyncSuspendResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  int v9;

  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "TY", 2uLL, this[1593]);
  v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) < 2)
  if (v9 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::Node **)a2;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v4 + 1591, "Yt", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtendedExistentialTypeShape@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node **v8;
  int v9;
  swift::Demangle::Node *v10;
  swift::Demangle::Node *v11;
  char *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1)
    goto LABEL_7;
  v8 = (swift::Demangle::Node **)a2;
  if (v7 == 2)
    goto LABEL_11;
  if (v7 == 5)
  {
    v9 = *((_DWORD *)a2 + 2);
    if (!v9)
    {
      v10 = 0;
      goto LABEL_16;
    }
    if (v9 == 1)
    {
      a2 = *(swift::Demangle::Node **)a2;
LABEL_7:
      v10 = *(swift::Demangle::Node **)a2;
LABEL_16:
      v12 = "Xg";
      goto LABEL_17;
    }
    v8 = *(swift::Demangle::Node ***)a2;
LABEL_11:
    v11 = *v8;
    if (v7 == 2)
      goto LABEL_15;
    goto LABEL_12;
  }
  v11 = 0;
LABEL_12:
  if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
  {
    v10 = 0;
    if (!v11)
      goto LABEL_16;
    goto LABEL_20;
  }
  a2 = *(swift::Demangle::Node **)a2;
LABEL_15:
  v10 = (swift::Demangle::Node *)*((_QWORD *)a2 + 1);
  if (!v11)
    goto LABEL_16;
LABEL_20:
  if (*(_DWORD *)a4)
    return result;
  v12 = "XG";
LABEL_17:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, v12, 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleUniquable@<X0>(char **this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Mq", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleSymbolicExtendedExistentialType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::Node *v13;
  uint64_t v14;
  int v15;
  swift::Demangle::Node **v16;
  swift::Demangle::Node *v17;
  swift::Demangle::Node **v18;
  uint64_t v19;
  int v20;
  swift::Demangle::Node **v21;
  swift::Demangle::Node *v22;
  swift::Demangle::Node **v23;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = *((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  v15 = *(unsigned __int8 *)(v14 + 18);
  v16 = (swift::Demangle::Node **)v14;
  if ((v15 - 1) >= 2)
  {
    if (v15 == 5)
    {
      v17 = *(swift::Demangle::Node **)v14;
      v16 = *(swift::Demangle::Node ***)v14;
      goto LABEL_22;
    }
    v16 = 0;
  }
  switch(v15)
  {
    case 1:
      v18 = (swift::Demangle::Node **)(v14 + 8);
      if (v16 != (swift::Demangle::Node **)(v14 + 8))
        goto LABEL_30;
      goto LABEL_27;
    case 2:
      v18 = (swift::Demangle::Node **)(v14 + 16);
      if (v16 != (swift::Demangle::Node **)(v14 + 16))
        goto LABEL_30;
LABEL_27:
      if (v12 == 5)
        goto LABEL_33;
      goto LABEL_49;
    case 5:
      v17 = *(swift::Demangle::Node **)v14;
LABEL_22:
      v18 = (swift::Demangle::Node **)((char *)v17 + 8 * *(unsigned int *)(v14 + 8));
      if (v16 != v18)
        goto LABEL_30;
      goto LABEL_27;
  }
  v18 = 0;
  if (!v16)
    goto LABEL_27;
  do
  {
LABEL_30:
    if (*(_DWORD *)a4)
      return result;
    ++v16;
  }
  while (v16 != v18);
  if (*((_BYTE *)a2 + 18) == 5)
  {
LABEL_33:
    if (*((_DWORD *)a2 + 2) >= 3u)
    {
      v19 = *((_QWORD *)*a2 + 2);
      v20 = *(unsigned __int8 *)(v19 + 18);
      v21 = (swift::Demangle::Node **)v19;
      if ((v20 - 1) >= 2)
      {
        if (v20 == 5)
        {
          v22 = *(swift::Demangle::Node **)v19;
          v21 = *(swift::Demangle::Node ***)v19;
LABEL_42:
          v23 = (swift::Demangle::Node **)((char *)v22 + 8 * *(unsigned int *)(v19 + 8));
          goto LABEL_48;
        }
        v21 = 0;
      }
      switch(v20)
      {
        case 1:
          v23 = (swift::Demangle::Node **)(v19 + 8);
          goto LABEL_48;
        case 2:
          v23 = (swift::Demangle::Node **)(v19 + 16);
          goto LABEL_48;
        case 5:
          v22 = *(swift::Demangle::Node **)v19;
          goto LABEL_42;
      }
      v23 = 0;
LABEL_48:
      while (v21 != v23)
      {
        if (*(_DWORD *)a4)
          return result;
        ++v21;
      }
    }
  }
LABEL_49:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleMetatypeParamsRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 109;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node **v9;
  int v10;
  uint64_t *result;
  uint64_t **v12;
  swift::Demangle::Node *v13;
  unsigned int v14;
  int v15;
  swift::Demangle::Node *v16;
  swift::Demangle::Node *v17;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::Node **)a2;
  if (v7 != 1)
  {
    v9 = (swift::Demangle::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4)
        return result;
      swift::Demangle::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
      if (*((_BYTE *)v4 + 18) == 5)
        v4 = *(swift::Demangle::Node **)v4;
      v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      v9 = *(swift::Demangle::Node ***)a2;
      goto LABEL_7;
    }
    v8 = *(swift::Demangle::Node ***)a2;
  }
  v13 = *v8;
LABEL_14:
  v14 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v15 = *((unsigned __int8 *)v4 + 18);
  v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      v17 = 0;
      goto LABEL_21;
    }
    v16 = *(swift::Demangle::Node **)v4;
  }
  v17 = (swift::Demangle::Node *)*((_QWORD *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4)
    return result;
  swift::Demangle::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
  v12 = (uint64_t **)(*(_QWORD *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node **v9;
  int v10;
  uint64_t *result;
  uint64_t **v12;
  swift::Demangle::Node *v13;
  unsigned int v14;
  int v15;
  swift::Demangle::Node *v16;
  swift::Demangle::Node *v17;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::Node **)a2;
  if (v7 != 1)
  {
    v9 = (swift::Demangle::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4)
        return result;
      swift::Demangle::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
      if (*((_BYTE *)v4 + 18) == 5)
        v4 = *(swift::Demangle::Node **)v4;
      v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      v9 = *(swift::Demangle::Node ***)a2;
      goto LABEL_7;
    }
    v8 = *(swift::Demangle::Node ***)a2;
  }
  v13 = *v8;
LABEL_14:
  v14 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v15 = *((unsigned __int8 *)v4 + 18);
  v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      v17 = 0;
      goto LABEL_21;
    }
    v16 = *(swift::Demangle::Node **)v4;
  }
  v17 = (swift::Demangle::Node *)*((_QWORD *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4)
    return result;
  swift::Demangle::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
  v12 = (uint64_t **)(*(_QWORD *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOg", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleAsyncRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 97;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleParamLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  int v7;
  swift::Demangle::Node *v8;
  uint64_t *result;
  char v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v8 = *(swift::Demangle::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "Yl", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2)
    v4 = *(swift::Demangle::Node **)v4;
  v10 = **(_BYTE **)v4;
  v11 = *((_DWORD *)this + 3184);
  v12 = *((unsigned int *)this + 3185);
  v13 = this[1591];
  if (v11 < v12)
    goto LABEL_27;
  v14 = this[1593];
  v15 = (char *)*((_QWORD *)v14 + 1);
  if (&v13[v12] != v15)
  {
    v16 = *((_QWORD *)v14 + 2);
LABEL_14:
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      v20 = 2 * *((_QWORD *)v14 + 4);
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      *((_QWORD *)v14 + 4) = v20;
      v21 = v20 + 8;
      result = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v22 = (char *)result + v21;
      *result = *((_QWORD *)v14 + 3);
      v15 = (char *)(result + 1);
      *((_QWORD *)v14 + 2) = v22;
      *((_QWORD *)v14 + 3) = result;
    }
    *((_QWORD *)v14 + 1) = &v15[v19];
    if ((_DWORD)v12)
      result = (uint64_t *)memcpy(v15, this[1591], v12);
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    v13 = v15;
    v11 = *((_DWORD *)this + 3184);
    goto LABEL_26;
  }
  v17 = (unint64_t)&v13[v12 + 1];
  v16 = *((_QWORD *)v14 + 2);
  if (v17 > v16)
    goto LABEL_14;
  *((_QWORD *)v14 + 1) = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = v10;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_QWORD *`anonymous namespace'::Remangler::mangleSelfLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v6;
  _QWORD *result;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v6 = (const void **)(this + 1591);
  result = swift::Demangle::CharVector::append(this + 1591, "YL", 2uLL, this[1593]);
  v8 = *(_QWORD *)a2;
  v9 = *((_DWORD *)this + 3184);
  v10 = *((unsigned int *)this + 3185);
  v11 = this[1591];
  if (v9 >= v10)
  {
    v12 = this[1593];
    v13 = (char *)*((_QWORD *)v12 + 1);
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = *((_QWORD *)v12 + 2);
      if (v15 <= v14)
      {
        *((_QWORD *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      v14 = *((_QWORD *)v12 + 2);
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (v13)
      v18 = (unint64_t)&v13[v16 + v10] > v14;
    else
      v18 = 1;
    v11 = (char *)*((_QWORD *)v12 + 1);
    if (v18)
    {
      v19 = 2 * *((_QWORD *)v12 + 4);
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      *((_QWORD *)v12 + 4) = v19;
      v20 = v19 + 8;
      result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)result + v20;
      *result = *((_QWORD *)v12 + 3);
      v11 = (char *)(result + 1);
      *((_QWORD *)v12 + 2) = v21;
      *((_QWORD *)v12 + 3) = result;
    }
    *((_QWORD *)v12 + 1) = &v11[v17];
    if ((_DWORD)v10)
      result = memcpy(v11, *v6, v10);
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOC", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithTakeNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOD", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOF", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedDestroyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::Node *v7;
  uint64_t v8;
  swift::Demangle::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "WOH", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDependentGenericInverseConformanceRequirement@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v4;
  uint64_t v5;
  int v7;
  swift::Demangle::Node **v8;
  uint64_t **v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t **v14;

  v4 = a2;
  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
    v8 = (swift::Demangle::Node **)a2;
  }
  else
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1103;
      return this;
    }
    v8 = *(swift::Demangle::Node ***)a2;
  }
  if ((_DWORD)v11)
  {
    *(_OWORD *)a4 = v11;
    *(_QWORD *)(a4 + 16) = v12;
    return this;
  }
  v9 = v14;
  if ((v13 & 0x80000000) == 0 && !v14)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v4;
    *(_DWORD *)(a4 + 16) = 1112;
    return this;
  }
  if (v13 == 1)
  {
    v10 = "Rj";
LABEL_21:
    swift::Demangle::CharVector::append((char **)(v5 + 12728), v10, 2uLL, *(_QWORD **)(v5 + 12744));
    if (*((_BYTE *)v4 + 18) == 5)
      v4 = *(swift::Demangle::Node **)v4;
    goto LABEL_24;
  }
  if (!v13)
  {
    v10 = "Ri";
    goto LABEL_21;
  }
  if (v13 != -1)
  {
    v10 = "RJ";
    goto LABEL_21;
  }
  swift::Demangle::CharVector::append((char **)(v5 + 12728), "RI", 2uLL, *(_QWORD **)(v5 + 12744));
  if (*((_BYTE *)v4 + 18) == 5)
    v4 = *(swift::Demangle::Node **)v4;
LABEL_24:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAnyConstructor@<X0>(char **this@<X0>, swift::Demangle::Node *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v8;
  swift::Demangle::Node *v9;
  uint64_t v10;
  swift::Demangle::Node *v11;
  unsigned int v12;
  uint64_t *result;
  unsigned int v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      v10 = *(_QWORD *)a2;
      v9 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v9 = 0;
  }
  if (v8 == 1)
  {
    v11 = (swift::Demangle::Node *)((char *)a2 + 8);
    if (v9 != (swift::Demangle::Node *)((char *)a2 + 8))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v8 == 2)
  {
    v11 = (swift::Demangle::Node *)((char *)a2 + 16);
    if (v9 != (swift::Demangle::Node *)((char *)a2 + 16))
      goto LABEL_16;
LABEL_19:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    result = (uint64_t *)swift::Demangle::CharVector::append(this + 1591, "f", 1uLL, this[1593]);
    v14 = *((_DWORD *)this + 3184);
    v15 = *((unsigned int *)this + 3185);
    v16 = this[1591];
    if (v14 < v15)
    {
LABEL_36:
      *((_DWORD *)this + 3184) = v14 + 1;
      v16[v14] = a3;
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 0;
      return result;
    }
    v17 = this[1593];
    v18 = (char *)*((_QWORD *)v17 + 1);
    if (&v16[v15] == v18)
    {
      v20 = (unint64_t)&v16[v15 + 1];
      v19 = *((_QWORD *)v17 + 2);
      if (v20 <= v19)
      {
        *((_QWORD *)v17 + 1) = v20;
        LODWORD(v21) = 1;
LABEL_35:
        *((_DWORD *)this + 3185) = v15 + v21;
        goto LABEL_36;
      }
    }
    else
    {
      v19 = *((_QWORD *)v17 + 2);
    }
    if ((2 * v15) <= 4)
      v21 = 4;
    else
      v21 = (2 * v15);
    v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      v23 = 2 * *((_QWORD *)v17 + 4);
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      *((_QWORD *)v17 + 4) = v23;
      v24 = v23 + 8;
      result = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      v25 = (char *)result + v24;
      *result = *((_QWORD *)v17 + 3);
      v18 = (char *)(result + 1);
      *((_QWORD *)v17 + 2) = v25;
      *((_QWORD *)v17 + 3) = result;
    }
    *((_QWORD *)v17 + 1) = &v18[v22];
    if ((_DWORD)v15)
      result = (uint64_t *)memcpy(v18, this[1591], v15);
    this[1591] = v18;
    LODWORD(v15) = *((_DWORD *)this + 3185);
    v16 = v18;
    v14 = *((_DWORD *)this + 3184);
    goto LABEL_35;
  }
  if (v8 != 5)
  {
    v11 = 0;
    if (!v9)
      goto LABEL_19;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)a2;
LABEL_9:
  v11 = (swift::Demangle::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
  if (v9 == v11)
    goto LABEL_19;
LABEL_16:
  v12 = a4 + 1;
  while (1)
  {
    if (*(_DWORD *)a5)
      return result;
    v9 = (swift::Demangle::Node *)((char *)v9 + 8);
    if (v9 == v11)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleChildNodes@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v5;
  int v7;
  swift::Demangle::Node **v8;
  swift::Demangle::Node *v9;
  swift::Demangle::Node **v10;

  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      v9 = *a2;
      v8 = (swift::Demangle::Node **)*a2;
LABEL_9:
      v10 = (swift::Demangle::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    v8 = 0;
  }
  switch(v7)
  {
    case 1:
      v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      v9 = *a2;
      goto LABEL_9;
  }
  v10 = 0;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4)
      return this;
    ++v8;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

char **swift::Demangle::RemanglerBuffer::operator<<(char **a1, char a2)
{
  unsigned int v4;
  size_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *((unsigned int *)a1 + 3);
  v6 = *a1;
  if (v4 >= v5)
  {
    v7 = a1[2];
    v8 = (char *)*((_QWORD *)v7 + 1);
    if (&v6[v5] == v8)
    {
      v10 = (unint64_t)&v6[v5 + 1];
      v9 = *((_QWORD *)v7 + 2);
      if (v10 <= v9)
      {
        *((_QWORD *)v7 + 1) = v10;
        LODWORD(v11) = 1;
LABEL_20:
        *((_DWORD *)a1 + 3) = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      v9 = *((_QWORD *)v7 + 2);
    }
    if ((2 * v5) <= 4)
      v11 = 4;
    else
      v11 = (2 * v5);
    v12 = v11 + v5;
    if (v8)
      v13 = (unint64_t)&v8[v11 + v5] > v9;
    else
      v13 = 1;
    v6 = (char *)*((_QWORD *)v7 + 1);
    if (v13)
    {
      v14 = 2 * *((_QWORD *)v7 + 4);
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      *((_QWORD *)v7 + 4) = v14;
      v15 = v14 + 8;
      v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v17 = (char *)v16 + v15;
      *v16 = *((_QWORD *)v7 + 3);
      v6 = (char *)(v16 + 1);
      *((_QWORD *)v7 + 2) = v17;
      *((_QWORD *)v7 + 3) = v16;
    }
    *((_QWORD *)v7 + 1) = &v6[v12];
    if ((_DWORD)v5)
      memcpy(v6, *a1, v5);
    *a1 = v6;
    v4 = *((_DWORD *)a1 + 2);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)a1 + 2) = v4 + 1;
  v6[v4] = a2;
  return a1;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleAnyProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v5;
  int v6;
  swift::Demangle::Node *v7;

  v5 = this;
  switch(*((_WORD *)a2 + 8))
  {
    case 0x1A:
    case 0x1B:
      v6 = *((unsigned __int8 *)a2 + 18);
      if ((v6 - 1) < 2)
        goto LABEL_7;
      if (v6 == 5 && *((_DWORD *)a2 + 2))
      {
        a2 = *(swift::Demangle::Node **)a2;
LABEL_7:
        v7 = *(swift::Demangle::Node **)a2;
      }
      else
      {
        v7 = 0;
      }
      if (!*(_DWORD *)a4)
      {
        this = (_anonymous_namespace_::Remangler *)swift::Demangle::CharVector::append((char **)v5 + 1591, "HX", 2uLL, *((_QWORD **)v5 + 1593));
        goto LABEL_14;
      }
      return this;
    case 0x2F:
    case 0x30:
    case 0x31:
    default:
LABEL_14:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleListSeparator(unsigned int *this, BOOL *a2)
{
  unsigned int *v3;
  unsigned int v4;
  size_t v5;
  _BYTE *v6;
  _QWORD *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;

  if (*a2)
  {
    v3 = this;
    v4 = this[3184];
    v5 = this[3185];
    v6 = (_BYTE *)*((_QWORD *)this + 1591);
    if (v4 < v5)
    {
LABEL_21:
      v3[3184] = v4 + 1;
      v6[v4] = 95;
      *a2 = 0;
      return this;
    }
    v7 = (_QWORD *)*((_QWORD *)this + 1593);
    v8 = (_BYTE *)v7[1];
    if (&v6[v5] == v8)
    {
      v10 = (unint64_t)&v6[v5 + 1];
      v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_20:
        v3[3185] = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      v9 = v7[2];
    }
    if ((2 * v5) <= 4)
      v11 = 4;
    else
      v11 = (2 * v5);
    v12 = v11 + v5;
    if (v8)
      v13 = (unint64_t)&v8[v11 + v5] > v9;
    else
      v13 = 1;
    v6 = (_BYTE *)v7[1];
    if (v13)
    {
      v14 = 2 * v7[4];
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      v7[4] = v14;
      v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)this + v15;
      *(_QWORD *)this = v7[3];
      v6 = this + 2;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if ((_DWORD)v5)
      this = (unsigned int *)memcpy(v6, *((const void **)v3 + 1591), v5);
    *((_QWORD *)v3 + 1591) = v6;
    LODWORD(v5) = v3[3185];
    v4 = v3[3184];
    goto LABEL_20;
  }
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleEndOfList(unsigned int *this, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  size_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;

  if (a2)
  {
    v2 = this;
    v3 = this[3184];
    v4 = this[3185];
    v5 = (_BYTE *)*((_QWORD *)this + 1591);
    if (v3 < v4)
    {
LABEL_21:
      v2[3184] = v3 + 1;
      v5[v3] = 121;
      return this;
    }
    v6 = (_QWORD *)*((_QWORD *)this + 1593);
    v7 = (_BYTE *)v6[1];
    if (&v5[v4] == v7)
    {
      v9 = (unint64_t)&v5[v4 + 1];
      v8 = v6[2];
      if (v9 <= v8)
      {
        v6[1] = v9;
        LODWORD(v10) = 1;
LABEL_20:
        v2[3185] = v4 + v10;
        goto LABEL_21;
      }
    }
    else
    {
      v8 = v6[2];
    }
    if ((2 * v4) <= 4)
      v10 = 4;
    else
      v10 = (2 * v4);
    v11 = v10 + v4;
    if (v7)
      v12 = (unint64_t)&v7[v10 + v4] > v8;
    else
      v12 = 1;
    v5 = (_BYTE *)v6[1];
    if (v12)
    {
      v13 = 2 * v6[4];
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      v6[4] = v13;
      v14 = v13 + 8;
      this = (unsigned int *)malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      v15 = (char *)this + v14;
      *(_QWORD *)this = v6[3];
      v5 = this + 2;
      v6[2] = v15;
      v6[3] = this;
    }
    v6[1] = &v5[v11];
    if ((_DWORD)v4)
      this = (unsigned int *)memcpy(v5, *((const void **)v2 + 1591), v4);
    *((_QWORD *)v2 + 1591) = v5;
    LODWORD(v4) = v2[3185];
    v3 = v2[3184];
    goto LABEL_20;
  }
  return this;
}

uint64_t `anonymous namespace'::Remangler::trySubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::Node *a2, swift::Demangle::SubstitutionEntry *a3, int a4)
{
  unsigned int Substitution;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unsigned int v17;
  size_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 __src;
  char v36;

    return 1;
  swift::Demangle::RemanglerBase::entryForNode((uint64_t *)&__src, this, a2, a4);
  *(_OWORD *)a3 = __src;
  *((_BYTE *)a3 + 16) = v36;
  Substitution = swift::Demangle::RemanglerBase::findSubstitution(this, (swift::Demangle::Node **)a3);
  if ((Substitution & 0x80000000) != 0)
    return 0;
  v9 = Substitution - 26;
  if (Substitution >= 0x1A)
  {
    v10 = *((_DWORD *)this + 3184);
    v11 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v11)
    {
LABEL_25:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 65;
      return 1;
    }
    v13 = (_QWORD *)*((_QWORD *)this + 1593);
    v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      v23 = (unint64_t)&v12[v11 + 1];
      v15 = v13[2];
      if (v23 <= v15)
      {
        v13[1] = v23;
        LODWORD(v24) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v11 + v24;
        goto LABEL_25;
      }
    }
    else
    {
      v15 = v13[2];
    }
    if ((2 * v11) <= 4)
      v24 = 4;
    else
      v24 = (2 * v11);
    v25 = v24 + v11;
    if (!v14 || (unint64_t)&v14[v25] > v15)
    {
      v26 = 2 * v13[4];
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      v13[4] = v26;
      v27 = v26 + 8;
      v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *v28 = v13[3];
      v14 = (char *)(v28 + 1);
      v13[2] = (char *)v28 + v27;
      v13[3] = v28;
    }
    v13[1] = &v14[v25];
    if ((_DWORD)v11)
      memcpy(v14, *((const void **)this + 1591), v11);
    *((_QWORD *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    v12 = v14;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
  LOBYTE(__src) = Substitution + 65;
  {
    v17 = *((_DWORD *)this + 3184);
    v18 = *((unsigned int *)this + 3185);
    v19 = (char *)*((_QWORD *)this + 1591);
    if (v17 < v18)
    {
LABEL_41:
      *((_DWORD *)this + 3184) = v17 + 1;
      v19[v17] = 65;
      swift::Demangle::CharVector::append((char **)this + 1591, &__src, 1uLL, *((_QWORD **)this + 1593));
      return 1;
    }
    v20 = (_QWORD *)*((_QWORD *)this + 1593);
    v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      v29 = (unint64_t)&v19[v18 + 1];
      v22 = v20[2];
      if (v29 <= v22)
      {
        v20[1] = v29;
        LODWORD(v30) = 1;
LABEL_40:
        *((_DWORD *)this + 3185) = v18 + v30;
        goto LABEL_41;
      }
    }
    else
    {
      v22 = v20[2];
    }
    if ((2 * v18) <= 4)
      v30 = 4;
    else
      v30 = (2 * v18);
    v31 = v30 + v18;
    if (!v21 || (unint64_t)&v21[v31] > v22)
    {
      v32 = 2 * v20[4];
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      v20[4] = v32;
      v33 = v32 + 8;
      v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *v34 = v20[3];
      v21 = (char *)(v34 + 1);
      v20[2] = (char *)v34 + v33;
      v20[3] = v34;
    }
    v20[1] = &v21[v31];
    if ((_DWORD)v18)
      memcpy(v21, *((const void **)this + 1591), v18);
    *((_QWORD *)this + 1591) = v21;
    LODWORD(v18) = *((_DWORD *)this + 3185);
    v19 = v21;
    v17 = *((_DWORD *)this + 3184);
    goto LABEL_40;
  }
  return 1;
}

BOOL `anonymous namespace'::Remangler::mangleStandardSubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::Node *a2)
{
  _BOOL8 v3;
  unsigned int v4;
  int v5;
  swift::Demangle::Node *v6;
  uint64_t *v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  size_t v26;
  char v27;

  v3 = 0;
  v4 = *((unsigned __int16 *)a2 + 8);
  if (v4 <= 0xB3)
  {
    if (v4 != 24 && v4 != 61)
      return v3;
LABEL_7:
    v5 = *((unsigned __int8 *)a2 + 18);
    v6 = a2;
    if ((v5 - 1) >= 2)
    {
      if (v5 != 5 || !*((_DWORD *)a2 + 2))
      {
        v7 = 0;
LABEL_13:
        if (*((_WORD *)v7 + 8) != 153 || v7[1] != 5)
          return 0;
        v8 = (int *)*v7;
        v9 = *v8;
        v10 = *((unsigned __int8 *)v8 + 4);
        if (v9 != 1718187859 || v10 != 116)
          return 0;
        if (v5 == 5)
        {
          if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 16) == 101)
          {
            a2 = *(swift::Demangle::Node **)a2;
LABEL_25:
            swift::Mangle::getStandardTypeSubst(**((_QWORD ***)a2 + 1), *(_QWORD *)(*((_QWORD *)a2 + 1) + 8), 1, (uint64_t)&v25);
            v3 = v27 != 0;
            if (!v27
            {
              return v3;
            }
            v13 = *((_DWORD *)this + 3184);
            v14 = *((unsigned int *)this + 3185);
            v15 = (char *)*((_QWORD *)this + 1591);
            if (v13 < v14)
            {
LABEL_44:
              *((_DWORD *)this + 3184) = v13 + 1;
              v15[v13] = 83;
              swift::Demangle::CharVector::append((char **)this + 1591, v25, v26, *((_QWORD **)this + 1593));
              return v3;
            }
            v16 = (_QWORD *)*((_QWORD *)this + 1593);
            v17 = (char *)v16[1];
            if (&v15[v14] == v17)
            {
              v19 = (unint64_t)&v15[v14 + 1];
              v18 = v16[2];
              if (v19 <= v18)
              {
                v16[1] = v19;
                LODWORD(v20) = 1;
LABEL_43:
                *((_DWORD *)this + 3185) = v14 + v20;
                goto LABEL_44;
              }
            }
            else
            {
              v18 = v16[2];
            }
            if ((2 * v14) <= 4)
              v20 = 4;
            else
              v20 = (2 * v14);
            v21 = v20 + v14;
            if (!v17 || (unint64_t)&v17[v21] > v18)
            {
              v22 = 2 * v16[4];
              if (v22 <= v21 + 1)
                v22 = v21 + 1;
              v16[4] = v22;
              v23 = v22 + 8;
              v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
              *v24 = v16[3];
              v17 = (char *)(v24 + 1);
              v16[2] = (char *)v24 + v23;
              v16[3] = v24;
            }
            v16[1] = &v17[v21];
            if ((_DWORD)v14)
              memcpy(v17, *((const void **)this + 1591), v14);
            *((_QWORD *)this + 1591) = v17;
            LODWORD(v14) = *((_DWORD *)this + 3185);
            v15 = v17;
            v13 = *((_DWORD *)this + 3184);
            goto LABEL_43;
          }
        }
        else if (*(_WORD *)(*((_QWORD *)a2 + 1) + 16) == 101)
        {
          goto LABEL_25;
        }
        return 0;
      }
      v6 = *(swift::Demangle::Node **)a2;
    }
    v7 = *(uint64_t **)v6;
    goto LABEL_13;
  }
  if (v4 == 219 || v4 == 180)
    goto LABEL_7;
  return v3;
}

char *`anonymous namespace'::Remangler::mangleIndex(char *this, uint64_t a2)
{
  unsigned int *v2;
  const void **v3;
  unsigned int v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;

  v2 = (unsigned int *)this;
  v3 = (const void **)(this + 12728);
  if (a2)
    this = (char *)swift::Demangle::CharVector::append((unsigned int *)this + 3182, a2 - 1, *((swift::Demangle::NodeFactory **)this + 1593));
  v4 = v2[3184];
  v5 = v2[3185];
  v6 = (char *)*((_QWORD *)v2 + 1591);
  if (v4 >= v5)
  {
    v7 = (_QWORD *)*((_QWORD *)v2 + 1593);
    v8 = (char *)v7[1];
    if (&v6[v5] == v8)
    {
      v10 = (unint64_t)&v6[v5 + 1];
      v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_21:
        v2[3185] = v5 + v11;
        goto LABEL_22;
      }
    }
    else
    {
      v9 = v7[2];
    }
    if ((2 * v5) <= 4)
      v11 = 4;
    else
      v11 = (2 * v5);
    v12 = v11 + v5;
    if (v8)
      v13 = (unint64_t)&v8[v11 + v5] > v9;
    else
      v13 = 1;
    v6 = (char *)v7[1];
    if (v13)
    {
      v14 = 2 * v7[4];
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      v7[4] = v14;
      v15 = v14 + 8;
      this = (char *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = &this[v15];
      *(_QWORD *)this = v7[3];
      v6 = this + 8;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if ((_DWORD)v5)
      this = (char *)memcpy(v6, *v3, v5);
    *((_QWORD *)v2 + 1591) = v6;
    LODWORD(v5) = v2[3185];
    v4 = v2[3184];
    goto LABEL_21;
  }
LABEL_22:
  v2[3184] = v4 + 1;
  v6[v4] = 95;
  return this;
}

uint64_t swift::Mangle::SubstitutionMerging::tryMergeSubst<`anonymous namespace'::Remangler>(unint64_t *a1, uint64_t a2, void *__s2, size_t __n, int a5)
{
  char v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  int v23;
  uint64_t result;
  unsigned int v25;
  char v26;
  size_t v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  char **v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unsigned int *v38;
  _QWORD *v39;
  char *v40;
  size_t v41;
  unsigned int *v42;
  int v43[2];
  int v44;

  v5 = a5;
  v8 = *(unsigned int *)(a2 + 12736);
  v9 = a1[2];
  if (v9 - 1 > 0x7FE)
    goto LABEL_24;
  v11 = *a1;
  v10 = a1[1];
  if (v10 + *a1 != v8 || *((unsigned __int8 *)a1 + 24) != a5)
    goto LABEL_24;
  v14 = (unsigned int *)(a2 + 12728);
  v15 = *(char **)(a2 + 12728);
  v16 = v8 - v10;
  if (v8 < v8 - v10)
    v16 = *(unsigned int *)(a2 + 12736);
  if (v8 <= v10)
    v16 = 0;
  v17 = v8 - v16;
  if (v8 == v16)
  {
    if (!__n)
      goto LABEL_29;
    v22 = 0;
    v21 = &v15[v8];
  }
  else
  {
    v18 = 0;
    v19 = &v15[v16];
    while (v19[v18] - 48 <= 9)
    {
      if (v17 == ++v18)
      {
        v18 = -1;
        break;
      }
    }
    if (v17 >= v18)
      v20 = v18;
    else
      v20 = v17;
    v21 = &v19[v20];
    v22 = v17 - v20;
    if (v17 - v20 == __n)
    {
      if (v17 <= v18)
        goto LABEL_29;
      *(_QWORD *)v43 = a2 + 12728;
      v23 = memcmp(v21, __s2, __n);
      if (v23 && (v5 & 1) == 0)
      {
        v22 = __n;
        v14 = *(unsigned int **)v43;
        goto LABEL_25;
      }
      v14 = *(unsigned int **)v43;
      if (!v23)
      {
LABEL_29:
        a1[2] = v9 + 1;
        *(_DWORD *)(a2 + 12736) = v11;
        v31 = (char **)v14;
        swift::Demangle::CharVector::append(v14, v9 + 1, *(swift::Demangle::NodeFactory **)(a2 + 12744));
        swift::Demangle::CharVector::append(v31, __s2, __n, *(_QWORD **)(a2 + 12744));
        a1[1] = *(unsigned int *)(a2 + 12736) - *a1;
        return 1;
      }
LABEL_24:
      result = 0;
      *a1 = v8 + 1;
      a1[1] = __n;
      a1[2] = 1;
      *((_BYTE *)a1 + 24) = v5;
      return result;
    }
  }
  if ((a5 & 1) != 0)
    goto LABEL_24;
LABEL_25:
  *a1 = v8;
  a1[2] = 1;
  v25 = v8 - 1;
  *(_DWORD *)(a2 + 12736) = v8 - 1;
  v26 = v21[v22 - 1] + 32;
  v27 = *(unsigned int *)(a2 + 12740);
  if (v25 >= v27)
  {
    v28 = *(_QWORD **)(a2 + 12744);
    v29 = (char *)v28[1];
    if (&v15[v27] == v29)
    {
      v32 = (unint64_t)&v15[v27 + 1];
      v30 = v28[2];
      if (v32 <= v30)
      {
        v28[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *(_DWORD *)(a2 + 12740) = v27 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      v30 = v28[2];
    }
    if ((2 * v27) <= 4)
      v33 = 4;
    else
      v33 = (2 * v27);
    v34 = v33 + v27;
    if (!v29 || (unint64_t)&v29[v34] > v30)
    {
      v35 = 2 * v28[4];
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      v28[4] = v35;
      v36 = v35 + 8;
      v44 = v33;
      v37 = v26;
      v38 = v14;
      v39 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      v14 = v38;
      v26 = v37;
      LODWORD(v33) = v44;
      v40 = (char *)v39 + v36;
      *v39 = v28[3];
      v29 = (char *)(v39 + 1);
      v28[2] = v40;
      v28[3] = v39;
    }
    v28[1] = &v29[v34];
    if ((_DWORD)v27)
    {
      v41 = v27;
      v42 = v14;
      memcpy(v29, *(const void **)v14, v41);
      v14 = v42;
    }
    *(_QWORD *)(a2 + 12728) = v29;
    LODWORD(v27) = *(_DWORD *)(a2 + 12740);
    v15 = v29;
    v25 = *(_DWORD *)(a2 + 12736);
    goto LABEL_43;
  }
LABEL_44:
  *(_DWORD *)(a2 + 12736) = v25 + 1;
  v15[v25] = v26;
  swift::Demangle::CharVector::append((char **)v14, __s2, __n, *(_QWORD **)(a2 + 12744));
  result = 1;
  a1[1] = 1;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleChildNodesReversed@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v6;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::Node *v12;

  v6 = (_anonymous_namespace_::Remangler *)this;
  v8 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v8 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v8)
        goto LABEL_6;
      break;
    case 2:
      v8 = 2;
LABEL_6:
      for (i = v8 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t `anonymous namespace'::Remangler::mangleAnyNominalType@<X0>(uint64_t this@<X0>, swift::Demangle::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  swift::Demangle::Node **v13;
  size_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  swift::Demangle::Node *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  swift::Demangle::Node *v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  swift::Demangle *v27;
  _QWORD v28[2];
  char v29;

  if (a3 >= 0x401)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = a2;
    v6 = 542;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v6;
    return this;
  }
  v8 = this;
  this = swift::Demangle::isSpecialized(a2, a2);
  if (!(_DWORD)this)
  {
    v9 = *((unsigned __int16 *)a2 + 8);
    if (v9 > 0xDA)
    {
      switch(v9)
      {
        case 0xEAu:
          v10 = "a";
          break;
        case 0xE9u:
          v19 = (swift::Demangle::Node *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v8 + 12824))(*(_QWORD *)(v8 + 12832), 0, *(_QWORD *)a2);
        case 0xDBu:
          v10 = "V";
          break;
        default:
          goto LABEL_33;
      }
    }
    else
    {
      switch(v9)
      {
        case 0x18u:
          v10 = "C";
          break;
        case 0x3Du:
          v10 = "O";
          break;
        case 0xA7u:
          v10 = "XY";
          v11 = a4;
          v12 = v8;
          v13 = (swift::Demangle::Node **)a2;
          v14 = 2;
        default:
LABEL_33:
          *(_DWORD *)a4 = 5;
          *(_QWORD *)(a4 + 8) = a2;
          v6 = 584;
          goto LABEL_3;
      }
    }
    v11 = a4;
    v12 = v8;
    v13 = (swift::Demangle::Node **)a2;
    v14 = 1;
  }
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  if ((_DWORD)this)
  {
LABEL_7:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  this = swift::Demangle::getUnspecialized((uint64_t)a2, *(swift::Demangle::Node **)v8, (uint64_t)&v25);
  if ((_DWORD)v25)
  {
    *(_OWORD *)a4 = v25;
    *(_QWORD *)(a4 + 16) = v26;
    return this;
  }
  v15 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    v24 = 121;
    if (!*(_DWORD *)a4)
    {
      if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3)
        goto LABEL_48;
      v16 = *(uint64_t **)(*(_QWORD *)a2 + 16);
      v17 = *((unsigned __int8 *)v16 + 18);
      if ((_DWORD)v17 != 1)
      {
        if ((_DWORD)v17 != 5)
        {
          if ((_DWORD)v17 == 2)
          {
            v17 = 2;
            v18 = 0;
            goto LABEL_36;
          }
          goto LABEL_48;
        }
        v17 = *((unsigned int *)v16 + 2);
        if (!(_DWORD)v17)
        {
LABEL_48:
          swift::Demangle::RemanglerBuffer::operator<<((char **)(v8 + 12728), 71);
          this = (uint64_t)swift::Demangle::RemanglerBase::addSubstitution((char *)v8, (const swift::Demangle::SubstitutionEntry *)v28);
          goto LABEL_7;
        }
      }
      v18 = 0;
      while (1)
      {
LABEL_36:
        v20 = *((unsigned __int8 *)v16 + 18);
        v21 = v20 - 1;
        if ((_DWORD)v20 != 1)
        {
          if ((_DWORD)v20 == 5)
          {
            v20 = *((unsigned int *)v16 + 2);
          }
          else
          {
            if ((_DWORD)v20 != 2)
              goto LABEL_45;
            v20 = 2;
          }
        }
        if (v20 > v18)
        {
          v22 = v16;
          if (v21 >= 2)
            v22 = (uint64_t *)*v16;
          v23 = (swift::Demangle::Node *)v22[v18];
          goto LABEL_46;
        }
LABEL_45:
        v23 = 0;
LABEL_46:
        if (*(_DWORD *)a4)
          return this;
        if (v17 == ++v18)
          goto LABEL_48;
      }
    }
  }
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleGenericArgs@<X0>(unsigned int *this@<X0>, swift::Demangle::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, _BOOL4 a5@<W4>, uint64_t a6@<X8>)
{
  swift::Demangle::Node *v7;
  int v8;
  int v9;
  swift::Demangle::Node *v12;
  uint64_t v13;
  int v14;
  int v15;
  swift::Demangle::Node **v16;
  swift::Demangle::Node *v17;
  BOOL v18;
  int v19;
  swift::Demangle::Node *v20;
  uint64_t v21;
  int v22;
  swift::Demangle::Node *v23;
  swift::Demangle::Node *v24;
  int v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  swift::Demangle::Node *v37;
  swift::Demangle::Node *v38;
  int v39;
  swift::Demangle::Node *v40;
  char v41;
  unsigned int v42;
  size_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  int v54;
  swift::Demangle::Node *v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  size_t v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  unint64_t v63;
  int v64;
  int v66;
  swift::Demangle::Node *v67;
  unsigned int v68;
  int v69;
  swift::Demangle::Node **v70;
  unint64_t v71;
  uint64_t v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  int v79;
  swift::Demangle::Node **v80;
  swift::Demangle::Node *v81;
  swift::Demangle::Node **v82;
  unint64_t v83;
  uint64_t v84;
  size_t v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  int v92;
  swift::Demangle::Node **v93;
  swift::Demangle::Node *v94;
  swift::Demangle::Node **v95;
  char v96;
  char v97;

  v7 = 0;
  v8 = 0;
  v9 = *((unsigned __int16 *)a2 + 8);
  v12 = a2;
  v13 = (uint64_t)this;
  v14 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0:
    case 0x1D:
    case 0x21:
    case 0x32:
    case 0x33:
    case 0x46:
    case 0x4C:
    case 0x62:
    case 0x75:
    case 0x7D:
    case 0x98:
    case 0xB2:
    case 0xB3:
    case 0xCC:
    case 0xD7:
    case 0xDA:
    case 0xDC:
    case 0xFA:
    case 0xFB:
    case 0xFE:
    case 0x101:
      if (!a5)
        goto LABEL_26;
      v15 = *((unsigned __int8 *)a2 + 18);
      v16 = (swift::Demangle::Node **)a2;
      if ((v15 - 1) < 2)
        goto LABEL_7;
      if (v15 == 5 && *((_DWORD *)a2 + 2))
      {
        v16 = *(swift::Demangle::Node ***)a2;
LABEL_7:
        v17 = *v16;
      }
      else
      {
        v17 = 0;
      }
      if (!*(_DWORD *)a6)
      {
        this = (unsigned int *)swift::Demangle::nodeConsumesGenericArgs(v12, v24);
        if ((_DWORD)this)
          goto LABEL_38;
        goto LABEL_26;
      }
      return this;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFC:
    case 0xFD:
    case 0xFF:
    case 0x100:
      goto LABEL_75;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      v18 = v9 == 18 || a5;
      v19 = *((unsigned __int8 *)a2 + 18);
      v20 = a2;
      if ((v19 - 1) < 2)
        goto LABEL_15;
      if (v19 == 5 && *((_DWORD *)a2 + 2))
      {
        v20 = *(swift::Demangle::Node **)a2;
LABEL_15:
        v21 = *(_QWORD *)v20;
      }
      else
      {
        v21 = 0;
      }
      if (*(_WORD *)(v21 + 16) != 232)
      {
        v14 = 653;
        goto LABEL_35;
      }
      v25 = *(unsigned __int8 *)(v21 + 18);
      if ((v25 - 1) < 2)
        goto LABEL_33;
      if (v25 == 5 && *(_DWORD *)(v21 + 8))
      {
        v21 = *(_QWORD *)v21;
LABEL_33:
        v26 = *(_QWORD *)v21;
      }
      else
      {
        v26 = 0;
      }
      if (*(_WORD *)(v26 + 16) != 233)
        goto LABEL_78;
      v34 = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD))this + 1603))(*((_QWORD *)this + 1604), 0, *(_QWORD *)v26);
      v35 = *(unsigned __int8 *)(v34 + 18);
      if ((v35 - 1) < 2)
        goto LABEL_47;
      if (v35 == 5 && *(_DWORD *)(v34 + 8))
      {
        v34 = *(_QWORD *)v34;
LABEL_47:
        v26 = *(_QWORD *)v34;
      }
      else
      {
        v26 = 0;
      }
LABEL_78:
      v54 = *(unsigned __int8 *)(v26 + 18);
      if ((v54 - 1) < 2)
        goto LABEL_82;
      if (v54 == 5 && *(_DWORD *)(v26 + 8))
      {
        v26 = *(_QWORD *)v26;
LABEL_82:
        v55 = *(swift::Demangle::Node **)v26;
      }
      else
      {
        v55 = 0;
      }
      v56 = a4 + 1;
      if (*(_DWORD *)a6)
        return this;
      v57 = *a3;
      v58 = *(_DWORD *)(v13 + 12736);
      v59 = *(unsigned int *)(v13 + 12740);
      v60 = *(char **)(v13 + 12728);
      if (v58 < v59)
        goto LABEL_125;
      v61 = *(_QWORD **)(v13 + 12744);
      v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        v71 = (unint64_t)&v60[v59 + 1];
        v63 = v61[2];
        if (v71 <= v63)
        {
          v61[1] = v71;
          LODWORD(v72) = 1;
          goto LABEL_124;
        }
      }
      else
      {
        v63 = v61[2];
      }
      v96 = *a3;
      if ((2 * v59) <= 4)
        v72 = 4;
      else
        v72 = (2 * v59);
      v73 = v72 + v59;
      if (!v62 || (unint64_t)&v62[v73] > v63)
      {
        v74 = 2 * v61[4];
        if (v74 <= v73 + 1)
          v74 = v73 + 1;
        v61[4] = v74;
        v75 = v74 + 8;
        this = (unsigned int *)malloc_type_malloc(v74 + 8, 0xD0263BC5uLL);
        v76 = (char *)this + v75;
        *(_QWORD *)this = v61[3];
        v62 = (char *)(this + 2);
        v61[2] = v76;
        v61[3] = this;
      }
      v61[1] = &v62[v73];
      if ((_DWORD)v59)
        this = (unsigned int *)memcpy(v62, *(const void **)(v13 + 12728), v59);
      *(_QWORD *)(v13 + 12728) = v62;
      LODWORD(v59) = *(_DWORD *)(v13 + 12740);
      v60 = v62;
      v58 = *(_DWORD *)(v13 + 12736);
      v57 = v96;
LABEL_124:
      *(_DWORD *)(v13 + 12740) = v59 + v72;
LABEL_125:
      *(_DWORD *)(v13 + 12736) = v58 + 1;
      v60[v58] = v57;
      *a3 = 95;
      v77 = *((unsigned __int8 *)v12 + 18);
      if (v77 == 2)
        goto LABEL_129;
      if (v77 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::Node **)v12;
LABEL_129:
        v78 = *((_QWORD *)v12 + 1);
      }
      else
      {
        v78 = 0;
      }
      v79 = *(unsigned __int8 *)(v78 + 18);
      v80 = (swift::Demangle::Node **)v78;
      if ((v79 - 1) < 2)
        goto LABEL_135;
      if (v79 == 5)
      {
        v81 = *(swift::Demangle::Node **)v78;
        v80 = *(swift::Demangle::Node ***)v78;
LABEL_139:
        v82 = (swift::Demangle::Node **)((char *)v81 + 8 * *(unsigned int *)(v78 + 8));
        goto LABEL_143;
      }
      v80 = 0;
LABEL_135:
      switch(v79)
      {
        case 1:
          v82 = (swift::Demangle::Node **)(v78 + 8);
          break;
        case 2:
          v82 = (swift::Demangle::Node **)(v78 + 16);
          break;
        case 5:
          v81 = *(swift::Demangle::Node **)v78;
          goto LABEL_139;
        default:
          v82 = 0;
          break;
      }
LABEL_143:
      if (v80 == v82)
        goto LABEL_26;
      while (1)
      {
        if (*(_DWORD *)a6)
          return this;
        v8 = 0;
        v7 = 0;
        v14 = 0;
        if (++v80 == v82)
          goto LABEL_75;
      }
    case 0x13:
      v36 = *((unsigned __int8 *)a2 + 18);
      v37 = a2;
      if ((v36 - 1) < 2)
        goto LABEL_52;
      if (v36 == 5 && *((_DWORD *)a2 + 2))
      {
        v37 = *(swift::Demangle::Node **)a2;
LABEL_52:
        v38 = *(swift::Demangle::Node **)v37;
      }
      else
      {
        v38 = 0;
      }
      v64 = *((unsigned __int16 *)v38 + 8);
      if (v64 != 76 && v64 != 29)
      {
        v14 = 682;
LABEL_35:
        v8 = 1;
        v7 = a2;
        goto LABEL_75;
      }
      v66 = *((unsigned __int8 *)v38 + 18);
      if ((v66 - 1) < 2)
        goto LABEL_104;
      if (v66 == 5 && *((_DWORD *)v38 + 2))
      {
        v38 = *(swift::Demangle::Node **)v38;
LABEL_104:
        v67 = *(swift::Demangle::Node **)v38;
      }
      else
      {
        v67 = 0;
      }
      v68 = a4 + 1;
      if (*(_DWORD *)a6)
        return this;
      swift::Demangle::RemanglerBuffer::operator<<((char **)(v13 + 12728), *a3);
      *a3 = 95;
      v69 = *((unsigned __int8 *)v12 + 18);
      if (v69 == 2)
        goto LABEL_111;
      if (v69 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::Node **)v12;
LABEL_111:
        v70 = (swift::Demangle::Node **)*((_QWORD *)v12 + 1);
      }
      else
      {
        v70 = 0;
      }
LABEL_91:
      if (*(_DWORD *)a6)
        return this;
      goto LABEL_26;
    case 0x18:
    case 0x3D:
    case 0xB4:
    case 0xDB:
    case 0xEA:
      if (v9 == 234)
        LOBYTE(a5) = 1;
      v22 = *((unsigned __int8 *)a2 + 18);
      if ((v22 - 1) < 2)
        goto LABEL_22;
      if (v22 == 5 && *((_DWORD *)a2 + 2))
      {
        v12 = *(swift::Demangle::Node **)a2;
LABEL_22:
        v23 = *(swift::Demangle::Node **)v12;
      }
      else
      {
        v23 = 0;
      }
      if (*(_DWORD *)a6)
        return this;
LABEL_38:
      v27 = *a3;
      v28 = *(_DWORD *)(v13 + 12736);
      v29 = *(unsigned int *)(v13 + 12740);
      v30 = *(char **)(v13 + 12728);
      if (v28 < v29)
        goto LABEL_74;
      v31 = *(_QWORD **)(v13 + 12744);
      v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        v48 = (unint64_t)&v30[v29 + 1];
        v33 = v31[2];
        if (v48 <= v33)
        {
          v31[1] = v48;
          LODWORD(v49) = 1;
          goto LABEL_73;
        }
      }
      else
      {
        v33 = v31[2];
      }
      if ((2 * v29) <= 4)
        v49 = 4;
      else
        v49 = (2 * v29);
      v50 = v49 + v29;
      if (!v32 || (unint64_t)&v32[v50] > v33)
      {
        v51 = 2 * v31[4];
        if (v51 <= v50 + 1)
          v51 = v50 + 1;
        v31[4] = v51;
        v52 = v51 + 8;
        this = (unsigned int *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        v53 = (char *)this + v52;
        *(_QWORD *)this = v31[3];
        v32 = (char *)(this + 2);
        v31[2] = v53;
        v31[3] = this;
      }
      v31[1] = &v32[v50];
      if ((_DWORD)v29)
        this = (unsigned int *)memcpy(v32, *(const void **)(v13 + 12728), v29);
      *(_QWORD *)(v13 + 12728) = v32;
      LODWORD(v29) = *(_DWORD *)(v13 + 12740);
      v30 = v32;
      v28 = *(_DWORD *)(v13 + 12736);
LABEL_73:
      *(_DWORD *)(v13 + 12740) = v29 + v49;
LABEL_74:
      v8 = 0;
      v7 = 0;
      v14 = 0;
      *(_DWORD *)(v13 + 12736) = v28 + 1;
      v30[v28] = v27;
      *a3 = 95;
      goto LABEL_75;
    case 0x47:
      v39 = *((unsigned __int8 *)a2 + 18);
      if (v39 == 2)
        goto LABEL_57;
      if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::Node **)a2;
LABEL_57:
        v40 = (swift::Demangle::Node *)*((_QWORD *)v12 + 1);
      }
      else
      {
        v40 = 0;
      }
      goto LABEL_91;
    case 0x53:
      v41 = *a3;
      v42 = this[3184];
      v43 = this[3185];
      v44 = (char *)*((_QWORD *)this + 1591);
      if (v42 < v43)
        goto LABEL_163;
      v45 = (_QWORD *)*((_QWORD *)this + 1593);
      v46 = (char *)v45[1];
      if (&v44[v43] == v46)
      {
        v83 = (unint64_t)&v44[v43 + 1];
        v47 = v45[2];
        if (v83 <= v47)
        {
          v45[1] = v83;
          LODWORD(v84) = 1;
          goto LABEL_162;
        }
      }
      else
      {
        v47 = v45[2];
      }
      v97 = *a3;
      if ((2 * v43) <= 4)
        v84 = 4;
      else
        v84 = (2 * v43);
      v85 = v84 + v43;
      if (v46)
        v86 = (unint64_t)&v46[v84 + v43] > v47;
      else
        v86 = 1;
      v44 = (char *)v45[1];
      if (v86)
      {
        v87 = 2 * v45[4];
        if (v87 <= v85 + 1)
          v87 = v85 + 1;
        v45[4] = v87;
        v88 = v87 + 8;
        this = (unsigned int *)malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        v89 = (char *)this + v88;
        *(_QWORD *)this = v45[3];
        v44 = (char *)(this + 2);
        v45[2] = v89;
        v45[3] = this;
      }
      v45[1] = &v44[v85];
      if ((_DWORD)v43)
        this = (unsigned int *)memcpy(v44, *(const void **)(v13 + 12728), v43);
      *(_QWORD *)(v13 + 12728) = v44;
      LODWORD(v43) = *(_DWORD *)(v13 + 12740);
      v42 = *(_DWORD *)(v13 + 12736);
      v41 = v97;
LABEL_162:
      *(_DWORD *)(v13 + 12740) = v43 + v84;
LABEL_163:
      *(_DWORD *)(v13 + 12736) = v42 + 1;
      v44[v42] = v41;
      *a3 = 95;
      v90 = *((unsigned __int8 *)v12 + 18);
      if (v90 == 2)
        goto LABEL_167;
      if (v90 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::Node **)v12;
LABEL_167:
        v91 = *((_QWORD *)v12 + 1);
      }
      else
      {
        v91 = 0;
      }
      v92 = *(unsigned __int8 *)(v91 + 18);
      v93 = (swift::Demangle::Node **)v91;
      if ((v92 - 1) < 2)
        goto LABEL_173;
      if (v92 == 5)
      {
        v94 = *(swift::Demangle::Node **)v91;
        v93 = *(swift::Demangle::Node ***)v91;
LABEL_177:
        v95 = (swift::Demangle::Node **)((char *)v94 + 8 * *(unsigned int *)(v91 + 8));
        goto LABEL_181;
      }
      v93 = 0;
LABEL_173:
      switch(v92)
      {
        case 1:
          v95 = (swift::Demangle::Node **)(v91 + 8);
          break;
        case 2:
          v95 = (swift::Demangle::Node **)(v91 + 16);
          break;
        case 5:
          v94 = *(swift::Demangle::Node **)v91;
          goto LABEL_177;
        default:
          v95 = 0;
          break;
      }
LABEL_181:
      if (v93 == v95)
      {
LABEL_26:
        v8 = 0;
        v7 = 0;
        v14 = 0;
LABEL_75:
        *(_DWORD *)a6 = v8;
        *(_QWORD *)(a6 + 8) = v7;
        *(_DWORD *)(a6 + 16) = v14;
      }
      else
      {
        while (1)
        {
          if (*(_DWORD *)a6)
            break;
          v8 = 0;
          v7 = 0;
          v14 = 0;
          if (++v93 == v95)
            goto LABEL_75;
        }
      }
      return this;
    default:
      v14 = 0;
      goto LABEL_75;
  }
}

uint64_t `anonymous namespace'::Remangler::mangleAnyGenericType@<X0>(uint64_t a1@<X0>, swift::Demangle::Node **a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result;
  int v13;
  swift::Demangle::Node **v14;
  swift::Demangle::Node *v15;
  swift::Demangle::Node **v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v21 = 0uLL;
  LOBYTE(v22) = 0;
  if ((result & 1) != 0)
    goto LABEL_23;
  v13 = *((unsigned __int8 *)a2 + 18);
  v14 = a2;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      v15 = *a2;
      v14 = (swift::Demangle::Node **)*a2;
      goto LABEL_10;
    }
    v14 = 0;
  }
  if (v13 == 1)
  {
    v16 = a2 + 1;
    if (v14 != v16)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (v13 == 2)
  {
    v16 = a2 + 2;
    if (v14 != v16)
      goto LABEL_17;
LABEL_20:
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    result = (uint64_t)swift::Demangle::CharVector::append((char **)(a1 + 12728), a3, a4, *(_QWORD **)(a1 + 12744));
    v18 = *(_QWORD *)(a1 + 12680);
    if (v18 > 0xF)
    {
      v20 = *(_DWORD *)(a1 + 12712) + 16;
      v23 = v21;
      v24 = v22;
      v25 = v20;
      result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>(a1 + 12688, (uint64_t)&v23, &v23);
    }
    else
    {
      *(_QWORD *)(a1 + 12680) = v18 + 1;
      v19 = a1 + 24 * v18 + 12296;
      *(_OWORD *)v19 = v21;
      *(_BYTE *)(v19 + 16) = v22;
    }
LABEL_23:
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    return result;
  }
  if (v13 != 5)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_20;
    goto LABEL_17;
  }
  v15 = *a2;
LABEL_10:
  v16 = (swift::Demangle::Node **)((char *)v15 + 8 * *((unsigned int *)a2 + 2));
  if (v14 == v16)
    goto LABEL_20;
LABEL_17:
  v17 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6)
      return result;
    if (++v14 == v16)
      goto LABEL_20;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSingleChildNode@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1)
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::Node **)a2;
  }
  *(_DWORD *)a4 = 10;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 321;
  return this;
}

uint64_t llvm::StringRef::consume_front(const void **a1, const void *a2, size_t a3)
{
  size_t v3;
  char *v6;
  size_t v8;

  v3 = (size_t)a1[1];
  if (v3 < a3)
    return 0;
  v6 = (char *)*a1;
  if (a3)
  {
    if (memcmp(*a1, a2, a3))
      return 0;
  }
  if (v3 >= a3)
    v8 = a3;
  else
    v8 = v3;
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

uint64_t `anonymous namespace'::Remangler::mangleConstrainedType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::Node *v5;
  _anonymous_namespace_::Remangler *v6;
  int v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  swift::Demangle::Node *v13;
  int v14;
  int v15;
  swift::Demangle::Node *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  unint64_t v27;
  _anonymous_namespace_::Remangler *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  void *__src;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;

  v5 = a2;
  v6 = this;
  if (*((_WORD *)a2 + 8) != 232)
    goto LABEL_8;
  v8 = *((unsigned __int8 *)a2 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
      goto LABEL_8;
    }
    v5 = *(swift::Demangle::Node **)a2;
  }
  v5 = *(swift::Demangle::Node **)v5;
LABEL_8:
  v42 = 0uLL;
  LOBYTE(v43) = 0;
  if ((result & 1) != 0)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = -1;
    *(_QWORD *)(a4 + 32) = 0;
    return result;
  }
  v38 = a3;
  v39 = a4;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v14 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 45)
      break;
    v15 = *((unsigned __int8 *)v5 + 18);
    v16 = v5;
    if (v15 != 2)
    {
      if (v15 != 5 || *((_DWORD *)v5 + 2) < 2u)
      {
        v17 = 0;
        if (v11 < v10)
          goto LABEL_40;
LABEL_22:
        v18 = *(_QWORD **)v6;
        v19 = &v12[8 * v10];
        v20 = *(char **)(*(_QWORD *)v6 + 8);
        if (v19 != v20)
        {
          v21 = v18[2];
          goto LABEL_25;
        }
        v22 = v19 + 8;
        v21 = v18[2];
        if ((unint64_t)v22 <= v21)
        {
          v18[1] = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          __src = v12;
          if (2 * v10 <= 4)
            v23 = 4;
          else
            v23 = 2 * v10;
          v24 = 8 * (v23 + v10);
          v25 = (char *)((unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8);
          v18[1] = v25;
          if (v25)
            v26 = (unint64_t)&v25[v24] > v21;
          else
            v26 = 1;
          if (v26)
          {
            v27 = 2 * v18[4];
            if (v27 <= v24 + 8)
              v27 = v24 + 8;
            v18[4] = v27;
            v40 = v11;
            v28 = v6;
            v29 = v27 + 8;
            result = (uint64_t)malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
            *(_QWORD *)result = v18[3];
            v25 = (char *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
            v30 = result + v29;
            v6 = v28;
            v11 = v40;
            v18[2] = v30;
            v18[3] = result;
          }
          v18[1] = &v25[v24];
          if (v10)
            result = (uint64_t)memcpy(v25, __src, 8 * v10);
          v12 = v25;
        }
        v10 += v23;
        v15 = *((unsigned __int8 *)v5 + 18);
        goto LABEL_40;
      }
      v16 = *(swift::Demangle::Node **)v5;
    }
    v17 = *((_QWORD *)v16 + 1);
    if (v11 >= v10)
      goto LABEL_22;
LABEL_40:
    *(_QWORD *)&v12[8 * v11] = v17;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v5 + 2))
      {
        v13 = 0;
        goto LABEL_46;
      }
      v5 = *(swift::Demangle::Node **)v5;
    }
    v13 = *(swift::Demangle::Node **)v5;
LABEL_46:
    v31 = *((unsigned __int8 *)v13 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_13:
      v5 = *(swift::Demangle::Node **)v13;
      ++v11;
    }
    else
    {
      if (v31 == 5 && *((_DWORD *)v13 + 2))
      {
        v13 = *(swift::Demangle::Node **)v13;
        goto LABEL_13;
      }
      v5 = 0;
      ++v11;
    }
  }
  if (v14 != 38 && v14 != 85)
  {
    if (!(_DWORD)v44)
    {
      if (!v11)
      {
        *(_DWORD *)v39 = 0;
        *(_QWORD *)(v39 + 8) = 0;
        *(_DWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 24) = -1;
        *(_QWORD *)(v39 + 32) = 0;
        return result;
      }
      v5 = 0;
LABEL_53:
      if (!(_DWORD)v44)
      {
        if (v11 == 1)
          v32 = (char *)&unk_20AA50335;
        else
          v32 = "_";
        result = (uint64_t)swift::Demangle::CharVector::append((char **)v6 + 1591, v32, v11 != 1, *((_QWORD **)v6 + 1593));
        if (v11 < 2)
        {
LABEL_61:
          v35 = *((_QWORD *)v6 + 1585);
          if (v35 > 0xF)
          {
            v37 = *((_DWORD *)v6 + 3178) + 16;
            v44 = v42;
            v45 = v43;
            v46 = v37;
            result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)v6 + 12688, (uint64_t)&v44, &v44);
          }
          else
          {
            *((_QWORD *)v6 + 1585) = v35 + 1;
            v36 = (uint64_t)v6 + 24 * v35 + 12296;
            *(_OWORD *)v36 = v42;
            *(_BYTE *)(v36 + 16) = v43;
          }
          goto LABEL_68;
        }
        v33 = v11 - 2;
        v34 = 2;
        while (1)
        {
          if ((_DWORD)v44)
            break;
          result = (uint64_t)swift::Demangle::CharVector::append((char **)v6 + 1591, &unk_20AA50335, 0, *((_QWORD **)v6 + 1593));
          ++v34;
          --v33;
          if (v34 > v11)
            goto LABEL_61;
        }
      }
    }
    *(_OWORD *)v39 = v44;
    *(_QWORD *)(v39 + 16) = v45;
    *(_DWORD *)(v39 + 24) = 0;
    *(_QWORD *)(v39 + 32) = 0;
    return result;
  }
  if (v11)
    goto LABEL_53;
LABEL_68:
  *(_DWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_DWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = v11;
  *(_QWORD *)(v39 + 32) = v5;
  return result;
}

char *`anonymous namespace'::Remangler::mangleDependentGenericParamIndex(char *this, uint64_t **a2, char *__s, char a4)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  int v13;
  swift::Demangle::Node *v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  size_t v18;
  char **v19;
  size_t v20;
  unsigned int v21;
  size_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int v34;
  size_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;

  v4 = (uint64_t)this;
  if (*((_WORD *)a2 + 8) == 85)
  {
    v5 = *((_DWORD *)this + 3184);
    v6 = *((unsigned int *)this + 3185);
    v7 = (_BYTE *)*((_QWORD *)this + 1591);
    if (v5 < v6)
    {
LABEL_37:
      *(_DWORD *)(v4 + 12736) = v5 + 1;
      v7[v5] = 115;
      return this;
    }
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (_BYTE *)v8[1];
    if (&v7[v6] == v9)
    {
      v27 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v27 <= v10)
      {
        v8[1] = v27;
        LODWORD(v28) = 1;
LABEL_36:
        *(_DWORD *)(v4 + 12740) = v6 + v28;
        goto LABEL_37;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v28 = 4;
    else
      v28 = (2 * v6);
    v29 = v28 + v6;
    if (v9)
      v30 = (unint64_t)&v9[v28 + v6] > v10;
    else
      v30 = 1;
    v7 = (_BYTE *)v8[1];
    if (v30)
    {
      v31 = 2 * v8[4];
      if (v31 <= v29 + 1)
        v31 = v29 + 1;
      v8[4] = v31;
      v32 = v31 + 8;
      this = (char *)malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      v33 = &this[v32];
      *(_QWORD *)this = v8[3];
      v7 = this + 8;
      v8[2] = v33;
      v8[3] = this;
    }
    v8[1] = &v7[v29];
    if ((_DWORD)v6)
      this = (char *)memcpy(v7, *(const void **)(v4 + 12728), v6);
    *(_QWORD *)(v4 + 12728) = v7;
    LODWORD(v6) = *(_DWORD *)(v4 + 12740);
    v5 = *(_DWORD *)(v4 + 12736);
    goto LABEL_36;
  }
  v13 = *((unsigned __int8 *)a2 + 18);
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
      v14 = (swift::Demangle::Node *)*a2;
    else
      v14 = (swift::Demangle::Node *)a2;
    a2 = (uint64_t **)*a2;
  }
  else
  {
    v14 = (swift::Demangle::Node *)a2;
  }
  v15 = **a2;
  v16 = **((_QWORD **)v14 + 1);
  if (v15)
  {
    v17 = (char **)(this + 12728);
    if (__s)
      v18 = strlen(__s);
    else
      v18 = 0;
    swift::Demangle::CharVector::append(v17, __s, v18, *(_QWORD **)(v4 + 12744));
    v21 = *(_DWORD *)(v4 + 12736);
    v22 = *(unsigned int *)(v4 + 12740);
    v23 = *(char **)(v4 + 12728);
    if (v21 < v22)
      goto LABEL_54;
    v24 = *(_QWORD **)(v4 + 12744);
    v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      v40 = (unint64_t)&v23[v22 + 1];
      v26 = v24[2];
      if (v40 <= v26)
      {
        v24[1] = v40;
        LODWORD(v41) = 1;
LABEL_53:
        *(_DWORD *)(v4 + 12740) = v22 + v41;
LABEL_54:
        *(_DWORD *)(v4 + 12736) = v21 + 1;
        v23[v21] = 100;
        v47 = (char *)v4;
        v48 = v16;
      }
    }
    else
    {
      v26 = v24[2];
    }
    if ((2 * v22) <= 4)
      v41 = 4;
    else
      v41 = (2 * v22);
    v42 = v41 + v22;
    if (!v25 || (unint64_t)&v25[v42] > v26)
    {
      v43 = 2 * v24[4];
      if (v43 <= v42 + 1)
        v43 = v42 + 1;
      v24[4] = v43;
      v44 = v43 + 8;
      v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
      v46 = (char *)v45 + v44;
      *v45 = v24[3];
      v25 = (char *)(v45 + 1);
      v24[2] = v46;
      v24[3] = v45;
    }
    v24[1] = &v25[v42];
    if ((_DWORD)v22)
      memcpy(v25, *v17, v22);
    *(_QWORD *)(v4 + 12728) = v25;
    LODWORD(v22) = *(_DWORD *)(v4 + 12740);
    v23 = v25;
    v21 = *(_DWORD *)(v4 + 12736);
    goto LABEL_53;
  }
  v19 = (char **)(this + 12728);
  if (v16)
  {
    if (__s)
      v20 = strlen(__s);
    else
      v20 = 0;
    swift::Demangle::CharVector::append(v19, __s, v20, *(_QWORD **)(v4 + 12744));
    v48 = v16 - 1;
    v47 = (char *)v4;
  }
  v34 = *((_DWORD *)this + 3184);
  v35 = *((unsigned int *)this + 3185);
  v36 = (char *)*((_QWORD *)this + 1591);
  if (v34 >= v35)
  {
    v37 = (_QWORD *)*((_QWORD *)this + 1593);
    v38 = (char *)v37[1];
    if (&v36[v35] == v38)
    {
      v49 = (unint64_t)&v36[v35 + 1];
      v39 = v37[2];
      if (v49 <= v39)
      {
        v37[1] = v49;
        LODWORD(v50) = 1;
LABEL_73:
        *(_DWORD *)(v4 + 12740) = v35 + v50;
        goto LABEL_74;
      }
    }
    else
    {
      v39 = v37[2];
    }
    if ((2 * v35) <= 4)
      v50 = 4;
    else
      v50 = (2 * v35);
    v51 = v50 + v35;
    if (!v38 || (unint64_t)&v38[v51] > v39)
    {
      v52 = 2 * v37[4];
      if (v52 <= v51 + 1)
        v52 = v51 + 1;
      v37[4] = v52;
      v53 = v52 + 8;
      this = (char *)malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
      v54 = &this[v53];
      *(_QWORD *)this = v37[3];
      v38 = this + 8;
      v37[2] = v54;
      v37[3] = this;
    }
    v37[1] = &v38[v51];
    if ((_DWORD)v35)
      this = (char *)memcpy(v38, *v19, v35);
    *(_QWORD *)(v4 + 12728) = v38;
    LODWORD(v35) = *(_DWORD *)(v4 + 12740);
    v36 = v38;
    v34 = *(_DWORD *)(v4 + 12736);
    goto LABEL_73;
  }
LABEL_74:
  *(_DWORD *)(v4 + 12736) = v34 + 1;
  v36[v34] = a4;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAbstractStorage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  int v11;
  swift::Demangle::Node **v12;
  swift::Demangle::Node *v13;
  swift::Demangle::Node **v14;
  unsigned int v15;
  int v16;
  char *v17;
  int v18;
  int v19;

  v8 = a2;
  v9 = result;
  v11 = *(unsigned __int8 *)(a2 + 18);
  v12 = (swift::Demangle::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      v13 = *(swift::Demangle::Node **)a2;
      v12 = *(swift::Demangle::Node ***)a2;
      goto LABEL_9;
    }
    v12 = 0;
  }
  if (v11 == 1)
  {
    v14 = (swift::Demangle::Node **)(a2 + 8);
    if (v12 != (swift::Demangle::Node **)(a2 + 8))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    v14 = (swift::Demangle::Node **)(a2 + 16);
    if (v12 != (swift::Demangle::Node **)(a2 + 16))
      goto LABEL_16;
LABEL_19:
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    v16 = *(unsigned __int16 *)(v8 + 16);
    if (v16 == 220)
    {
      v17 = "i";
    }
    else
    {
      if (v16 != 254)
      {
        v19 = 712;
        v18 = 6;
        goto LABEL_25;
      }
      v17 = "v";
    }
    swift::Demangle::CharVector::append((char **)v9 + 1591, v17, 1uLL, (_QWORD *)v9[1593]);
    result = (uint64_t *)swift::Demangle::CharVector::append((char **)v9 + 1591, a3, a4, (_QWORD *)v9[1593]);
    v18 = 0;
    v8 = 0;
    v19 = 0;
LABEL_25:
    *(_DWORD *)a6 = v18;
    *(_QWORD *)(a6 + 8) = v8;
    *(_DWORD *)(a6 + 16) = v19;
    return result;
  }
  if (v11 != 5)
  {
    v14 = 0;
    if (!v12)
      goto LABEL_19;
    goto LABEL_16;
  }
  v13 = *(swift::Demangle::Node **)a2;
LABEL_9:
  v14 = (swift::Demangle::Node **)((char *)v13 + 8 * *(unsigned int *)(a2 + 8));
  if (v12 == v14)
    goto LABEL_19;
LABEL_16:
  v15 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6)
      return result;
    if (++v12 == v14)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleGenericSpecializationNode@<X0>(uint64_t *this@<X0>, swift::Demangle::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  swift::Demangle::Node *v6;
  uint64_t v7;
  int v9;
  swift::Demangle::Node *v10;
  uint64_t v11;
  swift::Demangle::Node *v12;
  unsigned int v13;
  swift::Demangle::Node *v14;
  int v15;
  int v16;
  int v17;
  size_t v18;
  int v19;
  swift::Demangle::Node **v20;
  swift::Demangle::Node **v21;
  swift::Demangle::Node **v22;
  BOOL v23;

  v6 = a2;
  v7 = (uint64_t)this;
  v23 = 1;
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::Node **)a2;
      goto LABEL_9;
    }
    v10 = 0;
  }
  switch(v9)
  {
    case 1:
      v12 = (swift::Demangle::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 8))
        goto LABEL_27;
      break;
    case 2:
      v12 = (swift::Demangle::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::Node *)((char *)a2 + 16))
        goto LABEL_27;
      break;
    case 5:
      v11 = *(_QWORD *)a2;
LABEL_9:
      v12 = (swift::Demangle::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12)
      {
LABEL_27:
        v16 = 1706;
        v17 = 1;
        goto LABEL_28;
      }
      break;
    default:
      v12 = 0;
      if (!v10)
        goto LABEL_27;
      break;
  }
  v13 = a4 + 1;
  do
  {
    v14 = *(swift::Demangle::Node **)v10;
    if (*(_WORD *)(*(_QWORD *)v10 + 16) == 94)
    {
      v15 = *((unsigned __int8 *)v14 + 18);
      if ((v15 - 1) >= 2)
      {
        if (v15 != 5 || !*((_DWORD *)v14 + 2))
        {
          *(_DWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = 0;
LABEL_20:
          goto LABEL_21;
        }
        v14 = *(swift::Demangle::Node **)v14;
      }
      if (*(_DWORD *)a5)
        return this;
      goto LABEL_20;
    }
LABEL_21:
    v10 = (swift::Demangle::Node *)((char *)v10 + 8);
  }
  while (v10 != v12);
  if (v23)
    goto LABEL_27;
  if (a3)
    v18 = strlen(a3);
  else
    v18 = 0;
  this = (uint64_t *)swift::Demangle::CharVector::append((char **)(v7 + 12728), a3, v18, *(_QWORD **)(v7 + 12744));
  v19 = *((unsigned __int8 *)v6 + 18);
  v20 = (swift::Demangle::Node **)v6;
  if ((v19 - 1) >= 2)
  {
    if (v19 == 5)
    {
      v21 = *(swift::Demangle::Node ***)v6;
      v20 = *(swift::Demangle::Node ***)v6;
LABEL_41:
      v22 = &v21[*((unsigned int *)v6 + 2)];
      goto LABEL_46;
    }
    v20 = 0;
  }
  switch(v19)
  {
    case 1:
      v22 = (swift::Demangle::Node **)((char *)v6 + 8);
      goto LABEL_46;
    case 2:
      v22 = (swift::Demangle::Node **)((char *)v6 + 16);
      goto LABEL_46;
    case 5:
      v21 = *(swift::Demangle::Node ***)v6;
      goto LABEL_41;
  }
  v22 = 0;
LABEL_46:
  while (v20 != v22)
  {
    if (*((_WORD *)*v20 + 8) != 94)
    {
      if (*(_DWORD *)a5)
        return this;
    }
    ++v20;
  }
  v17 = 0;
  v6 = 0;
  v16 = 0;
LABEL_28:
  *(_DWORD *)a5 = v17;
  *(_QWORD *)(a5 + 8) = v6;
  *(_DWORD *)(a5 + 16) = v16;
  return this;
}

void `anonymous namespace'::Remangler::mangleIdentifierImpl(_anonymous_namespace_::Remangler *this, swift::Demangle::Node *a2, int a3)
{
  std::string *p_p;
  std::string::size_type size;
  unint64_t v8;
  char *v9;
  int v10;
  std::string v11;
  std::string __p;
  int v13;

  memset(&v11, 0, 17);
  {
    if (a3)
    {
      swift::Mangle::translateOperator(*(char **)a2, *((_QWORD *)a2 + 1), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
    }
    v8 = *((_QWORD *)this + 1585);
    if (v8 > 0xF)
    {
      v10 = *((_DWORD *)this + 3178) + 16;
      __p = v11;
      v13 = v10;
      std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&__p, &__p);
    }
    else
    {
      *((_QWORD *)this + 1585) = v8 + 1;
      v9 = (char *)this + 24 * v8 + 12296;
      *(_OWORD *)v9 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      v9[16] = v11.__r_.__value_.__s.__data_[16];
    }
  }
}

void swift::Mangle::mangleIdentifier<`anonymous namespace'::Remangler>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  std::string *p_p;
  std::string::size_type size;
  const void **v10;
  int v11;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v21;
  std::string::size_type v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  size_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unsigned int v57;
  int v58;
  int v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  size_t v65;
  unsigned int v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  size_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  size_t v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  size_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  char v96;
  char *v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  size_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  size_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  char *v117;
  size_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  size_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  std::string::size_type v143;
  unint64_t v144;
  const void **v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  _QWORD *v150;
  std::string __p;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = *(unsigned int *)(a1 + 12768);
  v147 = v6;
  if (!*(_BYTE *)(a1 + 12752) || (v7 = swift::Mangle::needsPunycodeEncoding(a2, a3), v6 = v147, !v7))
  {
    v17 = 0;
    v150 = (_QWORD *)(v5 + 12760);
    v145 = (const void **)(v5 + 12728);
    v146 = v4;
    v142 = (_QWORD *)(v5 + 12776);
    v18 = -1;
    v140 = (16 * v6) | 8;
    while (1)
    {
      if (v17 >= v3)
      {
        v21 = 0;
        if (v18 == -1)
          goto LABEL_19;
      }
      else
      {
        v21 = v4[v17];
        if (v18 == -1)
          goto LABEL_19;
      }
      if (!v21
        || v21 == 95
        || (v21 - 65) <= 0x19 && v4[v17 - 1] - 91 <= 0xFFFFFFE5)
      {
        break;
      }
LABEL_28:
      if (++v17 > v3)
      {
        if (*(_DWORD *)(v5 + 12784))
        {
          v40 = *(_DWORD *)(v5 + 12736);
          v41 = *(unsigned int *)(v5 + 12740);
          v42 = *(char **)(v5 + 12728);
          if (v40 >= v41)
          {
            v43 = *(_QWORD **)(v5 + 12744);
            v44 = (char *)v43[1];
            if (&v42[v41] != v44)
            {
              v45 = v43[2];
              goto LABEL_74;
            }
            v46 = (unint64_t)&v42[v41 + 1];
            v45 = v43[2];
            if (v46 <= v45)
            {
              v43[1] = v46;
              LODWORD(v47) = 1;
            }
            else
            {
LABEL_74:
              if ((2 * v41) <= 4)
                v47 = 4;
              else
                v47 = (2 * v41);
              v48 = v47 + v41;
              if (!v44 || (unint64_t)&v44[v48] > v45)
              {
                v49 = 2 * v43[4];
                if (v49 <= v48 + 1)
                  v49 = v48 + 1;
                v43[4] = v49;
                v50 = v49 + 8;
                v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
                *v51 = v43[3];
                v44 = (char *)(v51 + 1);
                v52 = (char *)v51 + v50;
                v4 = v146;
                v43[2] = v52;
                v43[3] = v51;
              }
              v43[1] = &v44[v48];
              if ((_DWORD)v41)
                memcpy(v44, *v145, v41);
              *(_QWORD *)(v5 + 12728) = v44;
              LODWORD(v41) = *(_DWORD *)(v5 + 12740);
              v42 = v44;
              v40 = *(_DWORD *)(v5 + 12736);
            }
            *(_DWORD *)(v5 + 12740) = v41 + v47;
          }
          *(_DWORD *)(v5 + 12736) = v40 + 1;
          v42[v40] = 48;
        }
        __p.__r_.__value_.__r.__words[0] = v3;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = -1;
        swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(_QWORD **)v5);
        v53 = v147;
        v141 = *(unsigned int *)(v5 + 12784);
        if (!(_DWORD)v141)
        {
LABEL_195:
          *(_DWORD *)(v5 + 12784) = 0;
          return;
        }
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v61 = *v142 + 16 * v54;
          v62 = *(_QWORD *)v61 - v55;
          v144 = v54;
          if (*(_QWORD *)v61 > v55)
          {
            v148 = *v142 + 16 * v54;
            v63 = v53;
            swift::Demangle::CharVector::append((unsigned int *)v145, v62, *(swift::Demangle::NodeFactory **)(v5 + 12744));
            v53 = v63;
            v61 = v148;
            v64 = 1;
            while (1)
            {
              if (v53 < *(unsigned int *)(v5 + 12768))
              {
                v68 = (_QWORD *)(*v150 + 16 * v53);
                if (v55 == *v68)
                {
                  *v68 = *(unsigned int *)(v5 + 12736);
                  ++v53;
                }
              }
              LODWORD(v69) = v4[v55];
              if ((v64 & 1) != 0)
              {
                v66 = *(_DWORD *)(v5 + 12736);
                if ((v69 - 48) <= 9)
                {
                  v70 = *(unsigned int *)(v5 + 12740);
                  v71 = *(char **)(v5 + 12728);
                  if (v66 < v70)
                  {
                    LOBYTE(v69) = 88;
                    goto LABEL_99;
                  }
                  v85 = *(_QWORD **)(v5 + 12744);
                  v86 = (char *)v85[1];
                  if (&v71[v70] != v86)
                  {
                    v87 = v85[2];
                    goto LABEL_129;
                  }
                  v88 = (unint64_t)&v71[v70 + 1];
                  v87 = v85[2];
                  if (v88 <= v87)
                  {
                    v85[1] = v88;
                    LODWORD(v69) = 1;
                    v86 = v71;
                  }
                  else
                  {
LABEL_129:
                    v89 = v53;
                    if ((2 * v70) <= 4)
                      v69 = 4;
                    else
                      v69 = (2 * v70);
                    v90 = v69 + v70;
                    if (!v86 || (unint64_t)&v86[v90] > v87)
                    {
                      v91 = 2 * v85[4];
                      if (v91 <= v90 + 1)
                        v91 = v90 + 1;
                      v85[4] = v91;
                      v92 = v91 + 8;
                      v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                      *v93 = v85[3];
                      v86 = (char *)(v93 + 1);
                      v85[2] = (char *)v93 + v92;
                      v85[3] = v93;
                    }
                    v85[1] = &v86[v90];
                    if ((_DWORD)v70)
                      memcpy(v86, *v145, v70);
                    v5 = a1;
                    *(_QWORD *)(a1 + 12728) = v86;
                    LODWORD(v70) = *(_DWORD *)(a1 + 12740);
                    v66 = *(_DWORD *)(a1 + 12736);
                    v53 = v89;
                  }
                  v67 = v70 + v69;
                  LOBYTE(v69) = 88;
                  v71 = v86;
                  v4 = v146;
                  goto LABEL_98;
                }
              }
              else
              {
                v66 = *(_DWORD *)(v5 + 12736);
              }
              v65 = *(unsigned int *)(v5 + 12740);
              v71 = *(char **)(v5 + 12728);
              if (v66 < v65)
                goto LABEL_99;
              v72 = *(_QWORD **)(v5 + 12744);
              v73 = (char *)v72[1];
              if (&v71[v65] != v73)
                break;
              v75 = (unint64_t)&v71[v65 + 1];
              v74 = v72[2];
              if (v75 > v74)
                goto LABEL_112;
              v72[1] = v75;
              LODWORD(v78) = 1;
              v5 = a1;
LABEL_97:
              v67 = v65 + v78;
LABEL_98:
              *(_DWORD *)(v5 + 12740) = v67;
LABEL_99:
              v64 = 0;
              *(_DWORD *)(v5 + 12736) = v66 + 1;
              v71[v66] = v69;
              if (++v55 >= *(_QWORD *)v61)
                goto LABEL_142;
            }
            v74 = v72[2];
LABEL_112:
            v76 = v53;
            v77 = v3;
            if ((2 * v65) <= 4)
              v78 = 4;
            else
              v78 = (2 * v65);
            v79 = v78 + v65;
            if (v73)
              v80 = (unint64_t)&v73[v78 + v65] > v74;
            else
              v80 = 1;
            v71 = (char *)v72[1];
            if (v80)
            {
              v81 = 2 * v72[4];
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              v72[4] = v81;
              v82 = v81 + 8;
              v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
              *v83 = v72[3];
              v71 = (char *)(v83 + 1);
              v84 = (char *)v83 + v82;
              v4 = v146;
              v72[2] = v84;
              v72[3] = v83;
            }
            v72[1] = &v71[v79];
            if ((_DWORD)v65)
              memcpy(v71, *v145, v65);
            v5 = a1;
            *(_QWORD *)(a1 + 12728) = v71;
            LODWORD(v65) = *(_DWORD *)(a1 + 12740);
            v66 = *(_DWORD *)(a1 + 12736);
            v3 = v77;
            v53 = v76;
            v61 = v148;
            goto LABEL_97;
          }
LABEL_142:
          v94 = *(unsigned int *)(v61 + 8);
          if ((v94 & 0x80000000) != 0)
            goto LABEL_93;
          v55 += *(_QWORD *)(*(_QWORD *)(v5 + 12760) + 16 * v94 + 8);
          v95 = *(_QWORD **)(v5 + 12744);
          v57 = *(_DWORD *)(v5 + 12736);
          v56 = *(unsigned int *)(v5 + 12740);
          v60 = *(char **)(v5 + 12728);
          if (v144 < v141 - 2)
          {
            v96 = v94 + 97;
            if (v57 >= v56)
            {
              v97 = (char *)v95[1];
              if (&v60[v56] != v97)
              {
                v98 = v95[2];
                goto LABEL_151;
              }
              v101 = (unint64_t)&v60[v56 + 1];
              v98 = v95[2];
              if (v101 <= v98)
              {
                v95[1] = v101;
                v58 = 1;
                v97 = v60;
              }
              else
              {
LABEL_151:
                LODWORD(v102) = 2 * v56;
                if ((2 * v56) <= 4)
                  v102 = 4;
                else
                  v102 = v102;
                v149 = v102;
                v103 = v102 + v56;
                if (!v97 || (unint64_t)&v97[v103] > v98)
                {
                  v104 = 2 * v95[4];
                  if (v104 <= v103 + 1)
                    v104 = v103 + 1;
                  v95[4] = v104;
                  v105 = v104 + 8;
                  v106 = v53;
                  v107 = malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
                  v53 = v106;
                  *v107 = v95[3];
                  v97 = (char *)(v107 + 1);
                  v108 = (char *)v107 + v105;
                  v4 = v146;
                  v95[2] = v108;
                  v95[3] = v107;
                }
                v95[1] = &v97[v103];
                if ((_DWORD)v56)
                {
                  v109 = v53;
                  memcpy(v97, *v145, v56);
                  v53 = v109;
                }
                *(_QWORD *)(v5 + 12728) = v97;
                LODWORD(v56) = *(_DWORD *)(v5 + 12740);
                v57 = *(_DWORD *)(v5 + 12736);
                v58 = v149;
              }
              v59 = v56 + v58;
LABEL_91:
              *(_DWORD *)(v5 + 12740) = v59;
              v60 = v97;
            }
LABEL_92:
            *(_DWORD *)(v5 + 12736) = v57 + 1;
            v60[v57] = v96;
LABEL_93:
            v54 = v144 + 1;
            if (v144 + 1 == v141)
              goto LABEL_195;
            continue;
          }
          break;
        }
        if (v57 >= v56)
        {
          v99 = (char *)v95[1];
          if (&v60[v56] != v99)
          {
            v100 = v95[2];
            goto LABEL_162;
          }
          v110 = (unint64_t)&v60[v56 + 1];
          v100 = v95[2];
          if (v110 <= v100)
          {
            v95[1] = v110;
            LODWORD(v112) = 1;
          }
          else
          {
LABEL_162:
            v111 = v53;
            if ((2 * v56) <= 4)
              v112 = 4;
            else
              v112 = (2 * v56);
            v113 = v112 + v56;
            if (!v99 || (unint64_t)&v99[v113] > v100)
            {
              v114 = 2 * v95[4];
              if (v114 <= v113 + 1)
                v114 = v113 + 1;
              v95[4] = v114;
              v115 = v114 + 8;
              v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
              *v116 = v95[3];
              v99 = (char *)(v116 + 1);
              v117 = (char *)v116 + v115;
              v4 = v146;
              v95[2] = v117;
              v95[3] = v116;
            }
            v95[1] = &v99[v113];
            if ((_DWORD)v56)
              memcpy(v99, *v145, v56);
            *(_QWORD *)(a1 + 12728) = v99;
            LODWORD(v56) = *(_DWORD *)(a1 + 12740);
            v60 = v99;
            v57 = *(_DWORD *)(a1 + 12736);
            v53 = v111;
            v5 = a1;
          }
          *(_DWORD *)(v5 + 12740) = v56 + v112;
        }
        *(_DWORD *)(v5 + 12736) = v57 + 1;
        v60[v57] = v94 + 65;
        if (v55 != v3)
          goto LABEL_93;
        v57 = *(_DWORD *)(v5 + 12736);
        v118 = *(unsigned int *)(v5 + 12740);
        v60 = *(char **)(v5 + 12728);
        if (v57 < v118)
        {
          v96 = 48;
          v55 = v3;
          goto LABEL_92;
        }
        v119 = *(_QWORD **)(v5 + 12744);
        v97 = (char *)v119[1];
        if (&v60[v118] != v97)
        {
          v120 = v119[2];
          goto LABEL_182;
        }
        v121 = (unint64_t)&v60[v118 + 1];
        v120 = v119[2];
        if (v121 <= v120)
        {
          v119[1] = v121;
          LODWORD(v122) = 1;
          v97 = v60;
        }
        else
        {
LABEL_182:
          if ((2 * v118) <= 4)
            v122 = 4;
          else
            v122 = (2 * v118);
          v123 = v122 + v118;
          if (!v97 || (unint64_t)&v97[v123] > v120)
          {
            v124 = 2 * v119[4];
            if (v124 <= v123 + 1)
              v124 = v123 + 1;
            v119[4] = v124;
            v125 = v124 + 8;
            v126 = v53;
            v127 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
            v53 = v126;
            *v127 = v119[3];
            v97 = (char *)(v127 + 1);
            v128 = (char *)v127 + v125;
            v4 = v146;
            v119[2] = v128;
            v119[3] = v127;
          }
          v119[1] = &v97[v123];
          if ((_DWORD)v118)
          {
            v129 = v53;
            memcpy(v97, *v145, v118);
            v53 = v129;
          }
          *(_QWORD *)(v5 + 12728) = v97;
          LODWORD(v118) = *(_DWORD *)(v5 + 12740);
          v57 = *(_DWORD *)(v5 + 12736);
        }
        v59 = v118 + v122;
        v96 = 48;
        v55 = v3;
        goto LABEL_91;
      }
    }
    v22 = v18;
    if (v3 >= v18)
      v23 = v18;
    else
      v23 = v3;
    v24 = &v4[v23];
    v25 = v3 - v23;
    v143 = v17 - v18;
    if (v25 >= v17 - v18)
      v26 = v17 - v18;
    else
      v26 = v25;
    if (!(_DWORD)v6)
      goto LABEL_54;
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 12728);
    v29 = *(unsigned int *)(a1 + 12736);
    v30 = (unint64_t *)(*v150 + 8);
    while (1)
    {
      v31 = *(v30 - 1);
      v32 = *v30;
      if (v29 < v31)
        v31 = v29;
      if (v29 - v31 < v32)
        v32 = v29 - v31;
      if (v26 == v32)
      {
        if (!v26)
          break;
        v33 = memcmp(v24, (const void *)(v28 + v31), v26);
        v6 = v147;
        if (!v33)
          break;
      }
      v30 += 2;
      if (v6 == ++v27)
        goto LABEL_54;
    }
    if ((v27 & 0x80000000) == 0)
    {
      v4 = v146;
    }
    else
    {
LABEL_54:
      v34 = *(unsigned int *)(a1 + 12768);
      v4 = v146;
      if (v6 >= v34)
        goto LABEL_66;
      v35 = (unint64_t *)(*v150 + v140);
      v36 = v6;
      while (1)
      {
        v37 = *(v35 - 1);
        v38 = *v35;
        if (v3 < v37)
          v37 = v3;
        if (v3 - v37 < v38)
          v38 = v3 - v37;
        if (v26 == v38)
        {
          if (!v26)
            break;
          v39 = memcmp(v24, &v146[v37], v26);
          v6 = v147;
          if (!v39)
            break;
        }
        v35 += 2;
        if (v34 == ++v36)
          goto LABEL_66;
      }
      if ((v36 & 0x80000000) != 0)
      {
LABEL_66:
        v5 = a1;
        if (v143 < 2 || v34 > 0x19)
        {
LABEL_19:
          if ((v21 - 58) >= 0xFFFFFFF6 || v21 == 95 || v21 == 0)
            v18 = -1;
          else
            v18 = v17;
          goto LABEL_28;
        }
        __p.__r_.__value_.__r.__words[0] = v22;
        __p.__r_.__value_.__l.__size_ = v143;
        swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back((uint64_t)v150, (__n128 *)&__p, *(_QWORD **)a1);
LABEL_18:
        v6 = v147;
        goto LABEL_19;
      }
      LODWORD(v27) = v36;
    }
    v5 = a1;
    __p.__r_.__value_.__r.__words[0] = v22;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v27;
    swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(_QWORD **)a1);
    goto LABEL_18;
  }
  memset(&__p, 0, sizeof(__p));
  swift::Punycode::encodePunycodeUTF8(v4, v3, &__p, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = (const void **)(v5 + 12728);
  swift::Demangle::CharVector::append((char **)(v5 + 12728), "00", 2uLL, *(_QWORD **)(v5 + 12744));
  swift::Demangle::CharVector::append((unsigned int *)(v5 + 12728), size, *(swift::Demangle::NodeFactory **)(v5 + 12744));
  v11 = p_p->__r_.__value_.__s.__data_[0];
  if (v11 != 95 && (v11 - 48) > 9)
    goto LABEL_214;
  v13 = *(_DWORD *)(v5 + 12736);
  v14 = v5;
  v15 = *(unsigned int *)(v5 + 12740);
  v16 = *(char **)(v14 + 12728);
  if (v13 >= v15)
  {
    v130 = *(_QWORD **)(v14 + 12744);
    v131 = (char *)v130[1];
    if (&v16[v15] == v131)
    {
      v133 = (unint64_t)&v16[v15 + 1];
      v132 = v130[2];
      if (v133 <= v132)
      {
        v130[1] = v133;
        LODWORD(v134) = 1;
        v139 = a1;
LABEL_212:
        *(_DWORD *)(v139 + 12740) = v15 + v134;
        v5 = v139;
        goto LABEL_213;
      }
    }
    else
    {
      v132 = v130[2];
    }
    if ((2 * v15) <= 4)
      v134 = 4;
    else
      v134 = (2 * v15);
    v135 = v134 + v15;
    if (!v131 || (unint64_t)&v131[v135] > v132)
    {
      v136 = 2 * v130[4];
      if (v136 <= v135 + 1)
        v136 = v135 + 1;
      v130[4] = v136;
      v137 = v136 + 8;
      v138 = malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
      *v138 = v130[3];
      v131 = (char *)(v138 + 1);
      v130[2] = (char *)v138 + v137;
      v130[3] = v138;
    }
    v130[1] = &v131[v135];
    if ((_DWORD)v15)
      memcpy(v131, *v10, v15);
    v139 = a1;
    *(_QWORD *)(a1 + 12728) = v131;
    LODWORD(v15) = *(_DWORD *)(a1 + 12740);
    v16 = v131;
    v13 = *(_DWORD *)(a1 + 12736);
    goto LABEL_212;
  }
  v5 = v14;
LABEL_213:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v16[v13] = 95;
LABEL_214:
  swift::Demangle::CharVector::append((char **)v10, p_p, size, *(_QWORD **)(v5 + 12744));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

__n128 swift::Demangle::Vector<swift::Mangle::WordReplacement>::push_back(uint64_t a1, __n128 *a2, _QWORD *a3)
{
  unsigned int v5;
  uint64_t v6;
  __n128 *v7;
  __n128 *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  __n128 result;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  v7 = *(__n128 **)a1;
  if (v5 >= v6)
  {
    v9 = &v7[v6];
    v10 = (char *)a3[1];
    if (v9 == (__n128 *)v10)
    {
      v12 = (char *)&v9[1];
      v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *(_DWORD *)(a1 + 12) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = a3[2];
    }
    if ((2 * v6) <= 4)
      v13 = 4;
    else
      v13 = (2 * v6);
    v14 = v13 + v6;
    v7 = (__n128 *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)v7[v14].n128_u64 > v11)
    {
      v15 = 2 * a3[4];
      if (v15 <= ((v14 * 16) | 8uLL))
        v15 = (v14 * 16) | 8;
      a3[4] = v15;
      v16 = v15 + 8;
      v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v18 = (char *)v17 + v16;
      *v17 = a3[3];
      v7 = (__n128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v18;
      a3[3] = v17;
    }
    a3[1] = &v7[v14];
    if ((_DWORD)v6)
      memcpy(v7, *(const void **)a1, 16 * v6);
    *(_QWORD *)a1 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  result = *a2;
  v7[v5] = *a2;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleKeyPathThunkHelper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  swift::Demangle::Node **v13;
  swift::Demangle::Node *v14;
  swift::Demangle::Node **v15;
  uint64_t *result;
  int v17;
  swift::Demangle::Node **v18;
  swift::Demangle::Node *v19;
  swift::Demangle::Node **v20;
  unsigned int v21;

  v12 = *(unsigned __int8 *)(a2 + 18);
  v13 = (swift::Demangle::Node **)a2;
  if ((v12 - 1) >= 2)
  {
    if (v12 == 5)
    {
      v14 = *(swift::Demangle::Node **)a2;
      v13 = *(swift::Demangle::Node ***)a2;
      goto LABEL_9;
    }
    v13 = 0;
  }
  if (v12 == 1)
  {
    v15 = (swift::Demangle::Node **)(a2 + 8);
    if (v13 != (swift::Demangle::Node **)(a2 + 8))
      goto LABEL_18;
LABEL_21:
    result = (uint64_t *)swift::Demangle::CharVector::append((char **)(a1 + 12728), a3, a4, *(_QWORD **)(a1 + 12744));
    v17 = *(unsigned __int8 *)(a2 + 18);
    v18 = (swift::Demangle::Node **)a2;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        v19 = *(swift::Demangle::Node **)a2;
        v18 = *(swift::Demangle::Node ***)a2;
LABEL_29:
        v20 = (swift::Demangle::Node **)((char *)v19 + 8 * *(unsigned int *)(a2 + 8));
        if (v18 == v20)
          goto LABEL_41;
        goto LABEL_36;
      }
      v18 = 0;
    }
    switch(v17)
    {
      case 1:
        v20 = (swift::Demangle::Node **)(a2 + 8);
        if (v18 == v20)
          goto LABEL_41;
        break;
      case 2:
        v20 = (swift::Demangle::Node **)(a2 + 16);
        if (v18 == v20)
          goto LABEL_41;
        break;
      case 5:
        v19 = *(swift::Demangle::Node **)a2;
        goto LABEL_29;
      default:
        v20 = 0;
        if (!v18)
        {
LABEL_41:
          *(_DWORD *)a6 = 0;
          *(_QWORD *)(a6 + 8) = 0;
          *(_DWORD *)(a6 + 16) = 0;
          return result;
        }
        break;
    }
LABEL_36:
    v21 = a5 + 1;
    while (1)
    {
      if (*((_WORD *)*v18 + 8) == 217)
      {
        if (*(_DWORD *)a6)
          return result;
      }
      if (++v18 == v20)
        goto LABEL_41;
    }
  }
  if (v12 == 2)
  {
    v15 = (swift::Demangle::Node **)(a2 + 16);
    if (v13 != (swift::Demangle::Node **)(a2 + 16))
      goto LABEL_18;
    goto LABEL_21;
  }
  if (v12 != 5)
  {
    v15 = 0;
    if (v13)
      goto LABEL_18;
    goto LABEL_21;
  }
  v14 = *(swift::Demangle::Node **)a2;
LABEL_9:
  v15 = (swift::Demangle::Node **)((char *)v14 + 8 * *(unsigned int *)(a2 + 8));
  if (v13 == v15)
    goto LABEL_21;
LABEL_18:
  while (1)
  {
    if (*((_WORD *)*v13 + 8) != 217)
    {
      if (*(_DWORD *)a6)
        return result;
    }
    if (++v13 == v15)
      goto LABEL_21;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolList@<X0>(const void **this@<X0>, swift::Demangle::Node *a2@<X1>, swift::Demangle::Node *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  swift::Demangle::Node **v12;
  int v13;
  swift::Demangle::Node **v14;
  swift::Demangle::Node *v15;
  swift::Demangle::Node **v16;
  swift::Demangle::Node *v17;
  int v18;
  int v19;
  swift::Demangle::Node **v20;
  swift::Demangle::Node *v21;
  swift::Demangle::Node **v22;
  uint64_t *result;
  _BOOL4 v24;
  int v25;
  char **v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  int v30;
  int v31;
  unsigned int v32;
  size_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  BOOL v43;

  v11 = *((unsigned __int8 *)a2 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)a2 + 2))
    {
      v12 = 0;
      goto LABEL_7;
    }
    a2 = *(swift::Demangle::Node **)a2;
  }
  v12 = *(swift::Demangle::Node ***)a2;
LABEL_7:
  v43 = 1;
  v13 = *((unsigned __int8 *)v12 + 18);
  v14 = v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      v15 = *v12;
      v14 = (swift::Demangle::Node **)*v12;
      goto LABEL_15;
    }
    v14 = 0;
  }
  switch(v13)
  {
    case 1:
      v16 = v12 + 1;
      if (v14 != v12 + 1)
        goto LABEL_18;
      goto LABEL_43;
    case 2:
      v16 = v12 + 2;
      if (v14 != v12 + 2)
        goto LABEL_18;
      goto LABEL_43;
    case 5:
      v15 = *v12;
LABEL_15:
      v16 = (swift::Demangle::Node **)((char *)v15 + 8 * *((unsigned int *)v12 + 2));
      if (v14 != v16)
        goto LABEL_18;
      goto LABEL_43;
  }
  v16 = 0;
  if (!v14)
  {
LABEL_43:
    v24 = 1;
    goto LABEL_44;
  }
  do
  {
LABEL_18:
    v17 = *v14;
    if (*((_WORD *)*v14 + 8) != 232)
      goto LABEL_25;
    v18 = *((unsigned __int8 *)v17 + 18);
    if ((v18 - 1) < 2)
      goto LABEL_23;
    if (v18 == 5 && *((_DWORD *)v17 + 2))
    {
      v17 = *(swift::Demangle::Node **)v17;
LABEL_23:
      v17 = *(swift::Demangle::Node **)v17;
      goto LABEL_25;
    }
    v17 = 0;
LABEL_25:
    {
      v19 = *((unsigned __int8 *)v17 + 18);
      v20 = (swift::Demangle::Node **)v17;
      if ((v19 - 1) >= 2)
      {
        if (v19 == 5)
        {
          v21 = *(swift::Demangle::Node **)v17;
          v20 = *(swift::Demangle::Node ***)v17;
LABEL_34:
          v22 = (swift::Demangle::Node **)((char *)v21 + 8 * *((unsigned int *)v17 + 2));
          goto LABEL_40;
        }
        v20 = 0;
      }
      switch(v19)
      {
        case 1:
          v22 = (swift::Demangle::Node **)((char *)v17 + 8);
          goto LABEL_40;
        case 2:
          v22 = (swift::Demangle::Node **)((char *)v17 + 16);
          goto LABEL_40;
        case 5:
          v21 = *(swift::Demangle::Node **)v17;
          goto LABEL_34;
      }
      v22 = 0;
LABEL_40:
      while (v20 != v22)
      {
        if (*(_DWORD *)a6)
          return result;
        ++v20;
      }
    }
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    ++v14;
  }
  while (v14 != v16);
  v24 = v43;
LABEL_44:
  if (!a3)
  {
    v29 = this[1593];
    if (a4)
    {
      v28 = "Xl";
      v26 = (char **)(this + 1591);
      v27 = this[1593];
LABEL_57:
      result = (uint64_t *)swift::Demangle::CharVector::append(v26, v28, 2uLL, v27);
      v30 = 0;
      a3 = 0;
      v31 = 0;
      goto LABEL_78;
    }
    v32 = *((_DWORD *)this + 3184);
    v33 = *((unsigned int *)this + 3185);
    v34 = (char *)this[1591];
    if (v32 < v33)
      goto LABEL_77;
    v35 = (char *)v29[1];
    if (&v34[v33] == v35)
    {
      v37 = (unint64_t)&v34[v33 + 1];
      v36 = v29[2];
      if (v37 <= v36)
      {
        v29[1] = v37;
        LODWORD(v38) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v33 + v38;
LABEL_77:
        v30 = 0;
        a3 = 0;
        v31 = 0;
        *((_DWORD *)this + 3184) = v32 + 1;
        v34[v32] = 112;
        goto LABEL_78;
      }
    }
    else
    {
      v36 = v29[2];
    }
    if ((2 * v33) <= 4)
      v38 = 4;
    else
      v38 = (2 * v33);
    v39 = v38 + v33;
    if (!v35 || (unint64_t)&v35[v39] > v36)
    {
      v40 = 2 * v29[4];
      if (v40 <= v39 + 1)
        v40 = v39 + 1;
      v29[4] = v40;
      v41 = v40 + 8;
      result = (uint64_t *)malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
      v42 = (char *)result + v41;
      *result = v29[3];
      v35 = (char *)(result + 1);
      v29[2] = v42;
      v29[3] = result;
    }
    v29[1] = &v35[v39];
    if ((_DWORD)v33)
      result = (uint64_t *)memcpy(v35, this[1591], v33);
    this[1591] = v35;
    LODWORD(v33) = *((_DWORD *)this + 3185);
    v34 = v35;
    v32 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
  v25 = *((unsigned __int8 *)a3 + 18);
  if (v25 == 1)
    goto LABEL_49;
  if (v25 != 5 || *((_DWORD *)a3 + 2) != 1)
  {
    v31 = 321;
    v30 = 10;
LABEL_78:
    *(_DWORD *)a6 = v30;
    *(_QWORD *)(a6 + 8) = a3;
    *(_DWORD *)(a6 + 16) = v31;
    return result;
  }
  a3 = *(swift::Demangle::Node **)a3;
LABEL_49:
  if (!*(_DWORD *)a6)
  {
    v26 = (char **)(this + 1591);
    v27 = this[1593];
    v28 = "Xc";
    goto LABEL_57;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAutoDiffFunctionOrSimpleThunk@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  swift::Demangle::Node **v12;
  unsigned int v13;
  int v14;
  swift::Demangle::Node **v15;
  swift::Demangle::Node **v16;
  swift::Demangle::Node *v17;
  uint64_t *result;
  const void **v19;
  unsigned int v20;
  size_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  unsigned int v33;
  size_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;

  v11 = *(unsigned __int8 *)(a2 + 18);
  v12 = (swift::Demangle::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
      v12 = *(swift::Demangle::Node ***)a2;
    else
      v12 = 0;
  }
  v13 = a5 + 1;
  while (1)
  {
    v14 = *(unsigned __int8 *)(a2 + 18);
    if (v14 != 5)
      break;
    if (v12 == (swift::Demangle::Node **)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8)))
      goto LABEL_19;
LABEL_16:
    v17 = *v12;
    if (*((_WORD *)*v12 + 8) == 321)
      goto LABEL_19;
    ++v12;
    if (*(_DWORD *)a6)
      return result;
  }
  if (v14 == 1)
    v15 = (swift::Demangle::Node **)(a2 + 8);
  else
    v15 = 0;
  if (v14 == 2)
    v16 = (swift::Demangle::Node **)(a2 + 16);
  else
    v16 = v15;
  if (v12 != v16)
    goto LABEL_16;
LABEL_19:
  v19 = (const void **)(a1 + 12728);
  swift::Demangle::CharVector::append((char **)(a1 + 12728), a3, a4, *(_QWORD **)(a1 + 12744));
  if (!*(_DWORD *)a6)
  {
    if (!*(_DWORD *)a6)
    {
      v20 = *(_DWORD *)(a1 + 12736);
      v21 = *(unsigned int *)(a1 + 12740);
      v22 = *(char **)(a1 + 12728);
      if (v20 >= v21)
      {
        v23 = *(_QWORD **)(a1 + 12744);
        v24 = (char *)v23[1];
        if (&v22[v21] != v24)
        {
          v25 = v23[2];
          goto LABEL_25;
        }
        v26 = (unint64_t)&v22[v21 + 1];
        v25 = v23[2];
        if (v26 <= v25)
        {
          v23[1] = v26;
          LODWORD(v27) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v21) <= 4)
            v27 = 4;
          else
            v27 = (2 * v21);
          v28 = v27 + v21;
          if (!v24 || (unint64_t)&v24[v28] > v25)
          {
            v29 = 2 * v23[4];
            if (v29 <= v28 + 1)
              v29 = v28 + 1;
            v23[4] = v29;
            v30 = v29 + 8;
            v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            v32 = (char *)v31 + v30;
            *v31 = v23[3];
            v24 = (char *)(v31 + 1);
            v23[2] = v32;
            v23[3] = v31;
          }
          v23[1] = &v24[v28];
          if ((_DWORD)v21)
            memcpy(v24, *v19, v21);
          *(_QWORD *)(a1 + 12728) = v24;
          LODWORD(v21) = *(_DWORD *)(a1 + 12740);
          v22 = v24;
          v20 = *(_DWORD *)(a1 + 12736);
        }
        *(_DWORD *)(a1 + 12740) = v21 + v27;
      }
      *(_DWORD *)(a1 + 12736) = v20 + 1;
      v22[v20] = 112;
      if (!*(_DWORD *)a6)
      {
        v33 = *(_DWORD *)(a1 + 12736);
        v34 = *(unsigned int *)(a1 + 12740);
        v35 = *(char **)(a1 + 12728);
        if (v33 >= v34)
        {
          v36 = *(_QWORD **)(a1 + 12744);
          v37 = (char *)v36[1];
          if (&v35[v34] != v37)
          {
            v38 = v36[2];
            goto LABEL_43;
          }
          v39 = (unint64_t)&v35[v34 + 1];
          v38 = v36[2];
          if (v39 <= v38)
          {
            v36[1] = v39;
            LODWORD(v40) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v34) <= 4)
              v40 = 4;
            else
              v40 = (2 * v34);
            v41 = v40 + v34;
            if (!v37 || (unint64_t)&v37[v41] > v38)
            {
              v42 = 2 * v36[4];
              if (v42 <= v41 + 1)
                v42 = v41 + 1;
              v36[4] = v42;
              v43 = v42 + 8;
              result = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
              v44 = (char *)result + v43;
              *result = v36[3];
              v37 = (char *)(result + 1);
              v36[2] = v44;
              v36[3] = result;
            }
            v36[1] = &v37[v41];
            if ((_DWORD)v34)
              result = (uint64_t *)memcpy(v37, *v19, v34);
            *(_QWORD *)(a1 + 12728) = v37;
            LODWORD(v34) = *(_DWORD *)(a1 + 12740);
            v35 = v37;
            v33 = *(_DWORD *)(a1 + 12736);
          }
          *(_DWORD *)(a1 + 12740) = v34 + v40;
        }
        *(_DWORD *)(a1 + 12736) = v33 + 1;
        v35[v33] = 114;
        *(_DWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = 0;
        *(_DWORD *)(a6 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::SubstitutionEntry>(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  swift::Demangle::Node *v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v4 >= *(_QWORD *)&v2)
      v7 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = (uint64_t *)*i)
  {
    v10 = i[1];
    if (v10 == v4)
    {
      if (i[3] == *(_QWORD *)(a2 + 8) && *((unsigned __int8 *)i + 32) == *(unsigned __int8 *)(a2 + 16))
      {
        v11 = *(swift::Demangle::Node **)a2;
        if (*((_BYTE *)i + 32))
        {
          if (swift::Demangle::SubstitutionEntry::identifierEquals((swift::Demangle::SubstitutionEntry *)i[2], *(swift::Demangle::Node **)a2, v11))
          {
            return i;
          }
        }
        else if ((swift::Demangle::SubstitutionEntry::deepEquals((swift::Demangle::SubstitutionEntry *)(i + 2), (swift::Demangle::Node *)i[2], v11) & 1) != 0)
        {
          return i;
        }
      }
    }
    else
    {
      if (v6 <= 1)
      {
        v10 &= *(_QWORD *)&v2 - 1;
      }
      else if (v10 >= *(_QWORD *)&v2)
      {
        v10 %= *(_QWORD *)&v2;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::SubstitutionEntry,std::pair<swift::Demangle::SubstitutionEntry const,unsigned int>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  swift::Demangle::Node *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = *(_QWORD *)(a2 + 8);
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v6)
          {
            if (*((_QWORD *)v12 + 3) == *(_QWORD *)(a2 + 8) && v12[32] == *(_BYTE *)(a2 + 16))
            {
              v14 = *(swift::Demangle::Node **)a2;
              if (v12[32])
              {
                if (swift::Demangle::SubstitutionEntry::identifierEquals(*((swift::Demangle::SubstitutionEntry **)v12 + 2), *(swift::Demangle::Node **)a2, v14))
                {
                  return v12;
                }
              }
              else if ((swift::Demangle::SubstitutionEntry::deepEquals((swift::Demangle::SubstitutionEntry *)(v12 + 16), *((swift::Demangle::Node **)v12 + 2), v14) & 1) != 0)
              {
                return v12;
              }
            }
          }
          else
          {
            if (v10 <= 1)
            {
              v13 &= v7 - 1;
            }
            else if (v13 >= v7)
            {
              v13 %= v7;
            }
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v6;
  v15 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_36;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_36:
        std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)v12 = *v27;
LABEL_60:
    *v27 = v12;
    goto LABEL_61;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_60;
  }
LABEL_61:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void std::__hash_table<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,swift::Demangle::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::SubstitutionEntry,std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::SubstitutionEntry>,swift::Demangle::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::SubstitutionEntry,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *v7 = *v11;
            v12 = 8 * v13;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + v12);
            **(_QWORD **)(*(_QWORD *)a1 + v12) = v11;
            v11 = v7;
          }
          v13 = v8;
LABEL_19:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t llvm::function_ref<swift::Demangle::Node * ()(swift::Demangle::SymbolicReferenceKind,void const*)>::callback_fn<swift::Demangle::mangleNode(swift::Demangle::Node *)::$_0>()
{
  return 0;
}

void swift::Demangle::fatal(swift::Demangle *this, char *a2, const char *a3, char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  swift::Demangle::fatalv(this, a2, va, a4);
}

void swift::Demangle::fatalv(swift::Demangle *this, char *__format, va_list a3, char *a4)
{
  demangleFatal(__format, a3, a3);
}

void swift::Demangle::warn(swift::Demangle *this, char *a2, const char *a3, char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  swift::Demangle::warnv(this, a2, va, a4);
}

void swift::Demangle::warnv(swift::Demangle *this, char *__format, va_list a3, char *a4)
{
  int v5;
  size_t v6;
  char *v7;
  char *v8;
  FILE **v9;
  FILE **v10;

  v5 = vsnprintf(0, 0, __format, a3);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = (v5 + 1);
    v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      v8 = v7;
      if ((vsnprintf(v7, v6, __format, a3) & 0x80000000) == 0)
      {
        v9 = (FILE **)MEMORY[0x24BDAC8D8];
        fputs(v8, (FILE *)*MEMORY[0x24BDAC8D8]);
        fflush(*v9);
        free(v8);
        return;
      }
      free(v8);
    }
  }
  v10 = (FILE **)MEMORY[0x24BDAC8D8];
  fputs("unable to format warning message", (FILE *)*MEMORY[0x24BDAC8D8]);
  fflush(*v10);
}

void demangleFatal(char *__format, va_list a2, char *a3)
{
  int v4;
  const char *v5;
  size_t v6;
  char *v7;
  char *v8;
  const char *v9;

  v4 = vsnprintf(0, 0, __format, a2);
  if ((v4 & 0x80000000) == 0)
  {
    v6 = (v4 + 1);
    v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      v8 = v7;
      if ((vsnprintf(v7, v6, __format, a2) & 0x80000000) == 0)
      {
        reportError(v8, v9);
        abort();
      }
      free(v8);
    }
  }
  reportError("unable to format fatal error message", v5);
  abort();
}

void reportError(const char *a1, const char *a2)
{
  FILE **v3;
  const char *v4;
  char *v5;
  void *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;

  v3 = (FILE **)MEMORY[0x24BDAC8D8];
  fputs(a1, (FILE *)*MEMORY[0x24BDAC8D8]);
  fflush(*v3);
  v5 = 0;
  v10 = 0;
  v6 = (void *)qword_2546134A0[0];
  while (1)
  {
LABEL_2:
    if (v5)
    {
      free(v5);
      v10 = 0;
    }
    if (v6)
      break;
    v9 = strdup(a1);
    v10 = v9;
    while (1)
    {
      v6 = (void *)__ldxr(qword_2546134A0);
      if (v6)
        break;
      if (!__stlxr((unint64_t)v9, qword_2546134A0))
        return;
    }
    __clrex();
    v5 = v10;
  }
  demangle_asprintf(&v10, v4, v6, a1);
  v7 = v10;
  do
  {
    v8 = __ldxr(qword_2546134A0);
    if ((void *)v8 != v6)
    {
      __clrex();
      v6 = (void *)v8;
      v5 = v10;
      goto LABEL_2;
    }
  }
  while (__stlxr((unint64_t)v7, qword_2546134A0));
  if (malloc_size(v6))
    free(v6);
}

void demangle_asprintf(char **a1, const char *a2, ...)
{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v3 = vsnprintf(0, 0, "%s%s", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    v4 = (v3 + 1);
    v5 = (char *)malloc_type_malloc(v4, 0xAB2EFD28uLL);
    if (v5)
    {
      v6 = v5;
      if (vsnprintf(v5, v4, "%s%s", va) < 0)
        free(v6);
      else
        *a1 = v6;
    }
  }
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x24BEDB1B8](__format);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

void operator delete(void *__p)
{
  off_24C358AA0(__p);
}

uint64_t operator delete()
{
  return off_24C358AA8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C358AB0(__sz);
}

uint64_t operator new()
{
  return off_24C358AB8();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x24BDAE438](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

