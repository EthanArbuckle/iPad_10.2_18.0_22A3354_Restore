void support::misc::safe_timer::create(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, dispatch_qos_class_t a4@<W3>, support::misc::safe_timer **a5@<X8>)
{
  __int128 v10;
  support::misc::safe_timer *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  uint8_t v19[16];
  void *v20[2];
  uint64_t v21;
  void *__p[2];
  char v23;
  void *v24;
  __int128 v25;
  _OWORD v26[3];
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v10;
  v28 = v10;
  v26[1] = v10;
  v26[2] = v10;
  v26[0] = v10;
  v24 = operator new(0x30uLL);
  v25 = xmmword_24B9AA780;
  strcpy((char *)v24, "com.apple.telephony.basebandservices.support");
  v23 = 10;
  strcpy((char *)__p, "safe-timer");
  support::log::client::client(v26, (uint64_t)&v24, (uint64_t)__p);
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v24);
LABEL_3:
  *a5 = 0;
  v11 = (support::misc::safe_timer *)operator new(0xD0uLL);
  *(_OWORD *)v20 = *(_OWORD *)a1;
  v21 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v12 = (_QWORD *)a3[3];
  if (v12)
  {
    if (v12 == a3)
    {
      v30 = v29;
      (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v29);
    }
    else
    {
      v30 = (_BYTE *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v30 = 0;
  }
  support::misc::safe_timer::safe_timer((uint64_t)v11, (const std::string::value_type *)v20, a2, 0, (uint64_t)v29, a4);
  v13 = v30;
  if (v30 == v29)
  {
    v14 = 4;
    v13 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_15;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_15:
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (support::misc::safe_timer::init(v11))
  {
    *a5 = v11;
    *(_QWORD *)&v26[0] = &unk_251CC2740;
    v15 = (std::__shared_weak_count *)v28;
    if (!(_QWORD)v28)
      return;
    goto LABEL_19;
  }
  v18 = *(NSObject **)v27;
  if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v19 = 0;
    _os_log_error_impl(&dword_24B97E000, v18, OS_LOG_TYPE_ERROR, "error: failed to init safe_timer object", v19, 2u);
  }
  (*(void (**)(support::misc::safe_timer *))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)&v26[0] = &unk_251CC2740;
  v15 = (std::__shared_weak_count *)v28;
  if ((_QWORD)v28)
  {
LABEL_19:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_24B97F238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

BOOL support::misc::safe_timer::init(support::misc::safe_timer *this)
{
  void *v1;
  _BOOL8 result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  if (!*((_QWORD *)this + 17))
  {
    v3 = **((_QWORD **)this + 13);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v4 = "error: invalid timeout value";
    v5 = (uint8_t *)&v9;
    goto LABEL_15;
  }
  if (!*((_QWORD *)this + 22))
  {
    v3 = **((_QWORD **)this + 13);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v8 = 0;
    v4 = "error: invalid timeout callback";
    v5 = (uint8_t *)&v8;
    goto LABEL_15;
  }
  v1 = (void *)*((_QWORD *)this + 23);
  if (!v1)
  {
    v3 = **((_QWORD **)this + 13);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v7 = 0;
    v4 = "error: failed to create dispatch queue";
    v5 = (uint8_t *)&v7;
LABEL_15:
    _os_log_error_impl(&dword_24B97E000, v3, OS_LOG_TYPE_ERROR, v4, v5, 2u);
    return 0;
  }
  if (*((_QWORD *)this + 24))
  {
    dispatch_queue_set_specific(*((dispatch_queue_t *)this + 23), "CurrentQueue", v1, 0);
    return 1;
  }
  v3 = **((_QWORD **)this + 13);
  result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v6 = 0;
    v4 = "error: failed to create dispatch safe_timer object";
    v5 = (uint8_t *)&v6;
    goto LABEL_15;
  }
  return result;
}

void support::log::client::~client(support::log::client *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_251CC2740;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &unk_251CC2740;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void support::misc::safe_timer::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, dispatch_qos_class_t a5@<W4>, support::misc::safe_timer **a6@<X8>)
{
  __int128 v12;
  support::misc::safe_timer *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  uint8_t v21[16];
  void *v22[2];
  uint64_t v23;
  void *__p[2];
  char v25;
  void *v26;
  __int128 v27;
  _OWORD v28[3];
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = v12;
  v30 = v12;
  v28[1] = v12;
  v28[2] = v12;
  v28[0] = v12;
  v26 = operator new(0x30uLL);
  v27 = xmmword_24B9AA780;
  strcpy((char *)v26, "com.apple.telephony.basebandservices.support");
  v25 = 10;
  strcpy((char *)__p, "safe-timer");
  support::log::client::client(v28, (uint64_t)&v26, (uint64_t)__p);
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v26);
LABEL_3:
  *a6 = 0;
  v13 = (support::misc::safe_timer *)operator new(0xD0uLL);
  *(_OWORD *)v22 = *(_OWORD *)a1;
  v23 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v14 = (_QWORD *)a4[3];
  if (v14)
  {
    if (v14 == a4)
    {
      v32 = v31;
      (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v31);
    }
    else
    {
      v32 = (_BYTE *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v32 = 0;
  }
  support::misc::safe_timer::safe_timer((uint64_t)v13, (const std::string::value_type *)v22, a2, a3, (uint64_t)v31, a5);
  v15 = v32;
  if (v32 == v31)
  {
    v16 = 4;
    v15 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_15;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_15:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  if (support::misc::safe_timer::init(v13))
  {
    *a6 = v13;
    *(_QWORD *)&v28[0] = &unk_251CC2740;
    v17 = (std::__shared_weak_count *)v30;
    if (!(_QWORD)v30)
      return;
    goto LABEL_19;
  }
  v20 = *(NSObject **)v29;
  if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v21 = 0;
    _os_log_error_impl(&dword_24B97E000, v20, OS_LOG_TYPE_ERROR, "error: failed to init safe_timer object", v21, 2u);
  }
  (*(void (**)(support::misc::safe_timer *))(*(_QWORD *)v13 + 8))(v13);
  *(_QWORD *)&v28[0] = &unk_251CC2740;
  v17 = (std::__shared_weak_count *)v30;
  if ((_QWORD)v30)
  {
LABEL_19:
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_24B97F800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t support::misc::safe_timer::safe_timer(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, uint64_t a5, dispatch_qos_class_t a6)
{
  uint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  const char *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  std::string __p;
  void *v28;
  __int128 v29;
  std::string v30;

  *(_QWORD *)a1 = off_251CC25D0;
  v11 = a1 + 8;
  *((_BYTE *)&v30.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v30, "safe-timer.");
  v12 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v13 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v13 = v12;
  }
  v14 = std::string::append(&v30, a2, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)v11 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v30.__r_.__value_.__r.__words[1] = xmmword_24B9AA790;
  strcpy(v30.__r_.__value_.__l.__data_, "com.apple.telephony.baseband.");
  v16 = *(char *)(a1 + 31);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)v11;
  else
    v17 = *(const std::string::value_type **)(a1 + 8);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a1 + 31);
  else
    v18 = *(_QWORD *)(a1 + 16);
  v19 = std::string::append(&v30, v17, v18);
  v20 = (const char *)(a1 + 32);
  v21 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 32) = v21;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v28 = operator new(0x30uLL);
  v29 = xmmword_24B9AA780;
  strcpy((char *)v28, "com.apple.telephony.basebandservices.support");
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    __p = *(std::string *)v11;
  support::log::client::client((_QWORD *)(a1 + 56), (uint64_t)&v28, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_19:
      *(_QWORD *)(a1 + 136) = a3;
      *(_QWORD *)(a1 + 144) = a4;
      v22 = (_QWORD *)(a5 + 24);
      v23 = *(_QWORD *)(a5 + 24);
      if (v23)
        goto LABEL_20;
LABEL_24:
      v22 = (_QWORD *)(a1 + 176);
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v28);
  *(_QWORD *)(a1 + 136) = a3;
  *(_QWORD *)(a1 + 144) = a4;
  v22 = (_QWORD *)(a5 + 24);
  v23 = *(_QWORD *)(a5 + 24);
  if (!v23)
    goto LABEL_24;
LABEL_20:
  if (v23 != a5)
  {
    *(_QWORD *)(a1 + 176) = v23;
LABEL_25:
    *v22 = 0;
    goto LABEL_27;
  }
  *(_QWORD *)(a1 + 176) = a1 + 152;
  (*(void (**)(_QWORD))(*(_QWORD *)*v22 + 24))(*v22);
LABEL_27:
  if (*(char *)(a1 + 55) < 0)
    v20 = *(const char **)v20;
  v24 = dispatch_queue_attr_make_with_qos_class(0, a6, 0);
  v25 = dispatch_queue_create(v20, v24);
  *(_QWORD *)(a1 + 184) = v25;
  *(_QWORD *)(a1 + 192) = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v25);
  *(_WORD *)(a1 + 200) = 0;
  return a1;
}

void sub_24B97FB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void **v28;
  void **v29;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v27 + 55) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(v27 + 55) & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v27 + 31) < 0)
      operator delete(*v29);
    _Unwind_Resume(exception_object);
  }
  operator delete(*v28);
  goto LABEL_6;
}

void sub_24B97FBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x24B97FBB8);
  JUMPOUT(0x24B97FBBCLL);
}

uint64_t support::misc::safe_timer::getLogClient(support::misc::safe_timer *this)
{
  return (uint64_t)this + 56;
}

void support::misc::safe_timer::start_sync(support::misc::safe_timer *this)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  support::misc::safe_timer *v8;
  NSObject *v9;
  _QWORD *v10;
  void *exception;
  const std::string::value_type *v12;
  char *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _QWORD handler[5];
  _QWORD v25[2];
  unsigned __int8 v26;
  std::string v27;
  std::string v28;
  uint8_t buf[16];
  std::string::size_type v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = **((_QWORD **)this + 13);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (*((_BYTE *)this + 200) != 1)
      goto LABEL_3;
LABEL_11:
    v8 = this;
    v9 = **((_QWORD **)this + 13);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (_QWORD *)((char *)v8 + 8);
      if (*((char *)v8 + 31) < 0)
        v10 = (_QWORD *)*v10;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_error_impl(&dword_24B97E000, v9, OS_LOG_TYPE_ERROR, "error: '%s' already active", buf, 0xCu);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v27, "'");
    v14 = (const std::string::value_type *)*((_QWORD *)v8 + 1);
    v13 = (char *)v8 + 8;
    v12 = v14;
    v15 = v13[23];
    if (v15 >= 0)
      v16 = v13;
    else
      v16 = v12;
    if (v15 >= 0)
      v17 = v13[23];
    else
      v17 = *((_QWORD *)v13 + 1);
    v18 = std::string::append(&v27, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, "' already active");
    if ((v26 & 0x80u) == 0)
      v20 = (const std::string::value_type *)v25;
    else
      v20 = (const std::string::value_type *)v25[0];
    if ((v26 & 0x80u) == 0)
      v21 = v26;
    else
      v21 = v25[1];
    v22 = std::string::append(&v28, v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v30 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x24BD2A88C](exception, buf);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  *(_WORD *)buf = 0;
  _os_log_debug_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEBUG, "starting...", buf, 2u);
  if (*((_BYTE *)this + 200) == 1)
    goto LABEL_11;
LABEL_3:
  dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 23));
  v3 = *((_QWORD *)this + 24);
  v4 = dispatch_time(0, 1000000 * *((_QWORD *)this + 17));
  v5 = *((_QWORD *)this + 18);
  if (v5)
    v6 = 1000000 * v5;
  else
    v6 = -1;
  dispatch_source_set_timer(v3, v4, v6, 0x1388uLL);
  v7 = *((_QWORD *)this + 24);
  if (*((_BYTE *)this + 200))
  {
    dispatch_resume(v7);
  }
  else
  {
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 0x40000000;
    handler[2] = ___ZN7support4misc10safe_timer10start_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp;
    handler[4] = this;
    dispatch_source_set_event_handler(v7, handler);
    dispatch_activate(*((dispatch_object_t *)this + 24));
  }
  *((_WORD *)this + 100) = 1;
}

void sub_24B97FE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if (a26 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a27);
  if (a26 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v33 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    __cxa_free_exception(v32);
    _Unwind_Resume(a1);
  }
LABEL_10:
  if (!v33)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t ___ZN7support4misc10safe_timer10start_syncEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 200) == 1)
  {
    v2 = **(NSObject ***)(v1 + 104);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEFAULT, "fired", v5, 2u);
    }
    *(_BYTE *)(v1 + 201) = 1;
    if (!*(_QWORD *)(v1 + 144))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 184));
      if (*(_BYTE *)(v1 + 200) == 1)
      {
        v3 = **(NSObject ***)(v1 + 104);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_24B97E000, v3, OS_LOG_TYPE_DEBUG, "stopping...", buf, 2u);
        }
        dispatch_suspend(*(dispatch_object_t *)(v1 + 192));
        *(_BYTE *)(v1 + 200) = 2;
      }
    }
    v4 = *(_QWORD *)(v1 + 176);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  }
  return result;
}

void support::misc::safe_timer::stop_sync(dispatch_queue_t *this)
{
  NSObject *isa;
  uint8_t v3[16];

  dispatch_assert_queue_V2(this[23]);
  if (*((_BYTE *)this + 200) == 1)
  {
    isa = this[13]->isa;
    if (os_log_type_enabled(isa, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_24B97E000, isa, OS_LOG_TYPE_DEBUG, "stopping...", v3, 2u);
    }
    dispatch_suspend(this[24]);
    *((_BYTE *)this + 200) = 2;
  }
}

void support::misc::safe_timer::start(support::misc::safe_timer *this)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *((_QWORD *)this + 23);
  if (v2 == dispatch_get_specific("CurrentQueue"))
  {
    support::misc::safe_timer::start_sync(this);
  }
  else
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN7support4misc10safe_timer5startEv_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    block[4] = this;
    dispatch_sync(v2, block);
  }
}

void ___ZN7support4misc10safe_timer5startEv_block_invoke(uint64_t a1)
{
  support::misc::safe_timer::start_sync(*(support::misc::safe_timer **)(a1 + 32));
}

void support::misc::safe_timer::stop(support::misc::safe_timer *this)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 23);
  if (v2 == dispatch_get_specific("CurrentQueue"))
  {
    dispatch_assert_queue_V2(v2);
    if (*((_BYTE *)this + 200) == 1)
    {
      v3 = **((_QWORD **)this + 13);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_24B97E000, v3, OS_LOG_TYPE_DEBUG, "stopping...", buf, 2u);
      }
      dispatch_suspend(*((dispatch_object_t *)this + 24));
      *((_BYTE *)this + 200) = 2;
    }
  }
  else
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN7support4misc10safe_timer4stopEv_block_invoke;
    block[3] = &__block_descriptor_tmp_9;
    block[4] = this;
    dispatch_sync(v2, block);
  }
}

void ___ZN7support4misc10safe_timer4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 184));
  if (*(_BYTE *)(v1 + 200) == 1)
  {
    v2 = **(NSObject ***)(v1 + 104);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEBUG, "stopping...", v3, 2u);
    }
    dispatch_suspend(*(dispatch_object_t *)(v1 + 192));
    *(_BYTE *)(v1 + 200) = 2;
  }
}

void support::misc::safe_timer::restart(support::misc::safe_timer *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD v5[5];
  _QWORD block[5];
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 23);
  if (v2 == dispatch_get_specific("CurrentQueue"))
  {
    dispatch_assert_queue_V2(v2);
    if (*((_BYTE *)this + 200) == 1)
    {
      v3 = **((_QWORD **)this + 13);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_24B97E000, v3, OS_LOG_TYPE_DEBUG, "stopping...", buf, 2u);
      }
      dispatch_suspend(*((dispatch_object_t *)this + 24));
      *((_BYTE *)this + 200) = 2;
    }
    v4 = *((_QWORD *)this + 23);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN7support4misc10safe_timer7restartEv_block_invoke;
    block[3] = &__block_descriptor_tmp_10;
    block[4] = this;
    dispatch_async(v4, block);
  }
  else
  {
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 0x40000000;
    v5[2] = ___ZN7support4misc10safe_timer7restartEv_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_11;
    v5[4] = this;
    dispatch_sync(v2, v5);
  }
}

void ___ZN7support4misc10safe_timer7restartEv_block_invoke(uint64_t a1)
{
  support::misc::safe_timer::start_sync(*(support::misc::safe_timer **)(a1 + 32));
}

void ___ZN7support4misc10safe_timer7restartEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 184));
  if (*(_BYTE *)(v1 + 200) == 1)
  {
    v2 = **(NSObject ***)(v1 + 104);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_debug_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEBUG, "stopping...", v3, 2u);
    }
    dispatch_suspend(*(dispatch_object_t *)(v1 + 192));
    *(_BYTE *)(v1 + 200) = 2;
  }
  support::misc::safe_timer::start_sync((support::misc::safe_timer *)v1);
}

uint64_t support::misc::safe_timer::has_fired(support::misc::safe_timer *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 23);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 1107296256;
  v4[2] = ___ZNK7support4misc10safe_timer9has_firedEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_12;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK7support4misc10safe_timer9has_firedEv_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 201);
  return result;
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void support::misc::safe_timer::~safe_timer(support::misc::safe_timer *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  support::misc::safe_timer *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)this = off_251CC25D0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  if (*((_QWORD *)this + 23))
  {
    support::misc::safe_timer::stop(this);
    v2 = *((_QWORD *)this + 23);
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 1107296256;
    v10[2] = ___ZN7support4misc10safe_timerD2Ev_block_invoke;
    v10[3] = &__block_descriptor_tmp_13;
    v10[4] = &v11;
    v10[5] = this;
    dispatch_sync(v2, v10);
  }
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if (*((_BYTE *)v12 + 24))
    {
      dispatch_source_cancel(v3);
      if (*((_BYTE *)v12 + 24) == 2)
        dispatch_resume(*((dispatch_object_t *)this + 24));
    }
    else
    {
      dispatch_activate(v3);
      dispatch_source_cancel(*((dispatch_source_t *)this + 24));
    }
    dispatch_release(*((dispatch_object_t *)this + 24));
  }
  v4 = *((_QWORD *)this + 23);
  if (v4)
    dispatch_release(v4);
  _Block_object_dispose(&v11, 8);
  v5 = (support::misc::safe_timer *)*((_QWORD *)this + 22);
  if (v5 == (support::misc::safe_timer *)((char *)this + 152))
  {
    v6 = 4;
    v5 = (support::misc::safe_timer *)((char *)this + 152);
    goto LABEL_15;
  }
  if (v5)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  *((_QWORD *)this + 7) = &unk_251CC2740;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v7)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 31) & 0x80000000) == 0)
        return;
LABEL_25:
      operator delete(*((void **)this + 1));
      return;
    }
  }
  else
  {
LABEL_20:
    if ((*((char *)this + 55) & 0x80000000) == 0)
      goto LABEL_21;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    goto LABEL_25;
}

{
  void *v1;

  support::misc::safe_timer::~safe_timer(this);
  operator delete(v1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t ___ZN7support4misc10safe_timerD2Ev_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 40) + 200);
  return result;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251CC22F0, MEMORY[0x24BEDAAF0]);
}

void sub_24B9807E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

uint64_t support::transport::ARI::getLogClient(support::transport::ARI *this)
{
  return (uint64_t)this + 32;
}

BOOL support::transport::ARI::initRT(support::transport::ARI *this, char *__s, dispatch_queue_s *a3)
{
  size_t v6;
  std::string::size_type v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  AriHost *v16;
  NSObject *v17;
  _OWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  void *v22;
  _BOOL8 v23;
  support::log::manager *v25;
  support::log::buffer *v26;
  int v27;
  support::log::manager *v28;
  support::log::buffer *v29;
  int v30;
  support::log::buffer *v31;
  int v32;
  support::log::buffer *v33;
  int v34;
  support::log::manager *v35;
  support::log::buffer *v36;
  int v37;
  support::log::buffer *v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v47;
  std::string __dst;
  void *__p[2];
  char *v50;
  std::string *p_dst;
  std::string v52;

  strcpy((char *)&v52, "com.apple.ARITransport");
  *((_BYTE *)&v52.__r_.__value_.__s + 23) = 22;
  if (!__s || !*__s)
  {
    v25 = (support::log::manager *)*((_QWORD *)this + 13);
    LOBYTE(rep) = 1;
    v26 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v26)
    {
      if (*((_QWORD *)v25 + 17))
      {
        support::log::buffer::borrow(v26);
        v27 = 2;
      }
      else
      {
        v27 = 0;
      }
      if (v27 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v40 = _os_log_send_and_compose_impl();
        if (v40)
        {
          v41 = (char *)v40;
          __dst.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
          __p[0] = &unk_251CC27F8;
          __p[1] = (char *)this + 40;
          v50 = (char *)&rep;
          p_dst = &__dst;
          support::log::manager::message_delegates(v25, (const support::log::details *)__p, v41);
        }
      }
    }
    goto LABEL_75;
  }
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  v8 = &__dst;
  if (v6)
LABEL_10:
    memcpy(v8, __s, v7);
  v8->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::insert(&__dst, 0, ".", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v50 = (char *)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50) >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (SHIBYTE(v50) >= 0)
    v14 = HIBYTE(v50);
  else
    v14 = (std::string::size_type)__p[1];
  std::string::append(&v52, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(v50) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_19:
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v52;
  else
    v15 = (std::string *)v52.__r_.__value_.__r.__words[0];
  v16 = (AriHost *)dispatch_queue_create((const char *)v15, 0);
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v16;
  if (v17)
  {
    dispatch_release(v17);
    v16 = (AriHost *)*((_QWORD *)this + 1);
  }
  if (!v16)
  {
    v28 = (support::log::manager *)*((_QWORD *)this + 13);
    LOBYTE(rep) = 1;
    v29 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v29)
    {
      if (*((_QWORD *)v28 + 17))
      {
        support::log::buffer::borrow(v29);
        v30 = 2;
      }
      else
      {
        v30 = 0;
      }
      if (v30 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v42 = _os_log_send_and_compose_impl();
        if (v42)
          goto LABEL_74;
      }
    }
    goto LABEL_75;
  }
  if (AriHost::Init(v16))
  {
    v28 = (support::log::manager *)*((_QWORD *)this + 13);
    LOBYTE(rep) = 1;
    v31 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v31)
    {
      if (*((_QWORD *)v28 + 17))
      {
        support::log::buffer::borrow(v31);
        v32 = 2;
      }
      else
      {
        v32 = 0;
      }
      if (v32 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v42 = _os_log_send_and_compose_impl();
        if (v42)
          goto LABEL_74;
      }
    }
    goto LABEL_75;
  }
  if (AriHost::RegisterClient((AriHost *)__s, (const char *)this + 16, *((int **)this + 1), a3))
  {
    v28 = (support::log::manager *)*((_QWORD *)this + 13);
    LOBYTE(rep) = 1;
    v33 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v33)
    {
      if (*((_QWORD *)v28 + 17))
      {
        support::log::buffer::borrow(v33);
        v34 = 2;
      }
      else
      {
        v34 = 0;
      }
      if (v34 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v42 = _os_log_send_and_compose_impl();
        if (v42)
        {
LABEL_74:
          v43 = (char *)v42;
          __dst.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
          __p[0] = &unk_251CC27F8;
          __p[1] = (char *)this + 40;
          v50 = (char *)&rep;
          p_dst = &__dst;
          support::log::manager::message_delegates(v28, (const support::log::details *)__p, v43);
        }
      }
    }
LABEL_75:
    v23 = 0;
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v23;
    goto LABEL_39;
  }
  v18 = operator new(0x20uLL);
  *v18 = 0u;
  v18[1] = 0u;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if ((KTLInitOptions() & 1) != 0)
  {
    if ((KTLOpenChannel() & 1) != 0)
    {
      __dst.__r_.__value_.__r.__words[0] = 0;
      v19 = (_QWORD *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v18;
      if (!v19)
      {
        v23 = 1;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_39;
        return v23;
      }
      if (v19[1])
      {
        TelephonyUtilTransportFree();
        v20 = 0;
        v21 = 0;
        v22 = (void *)v19[1];
        if (!v22)
          goto LABEL_38;
        goto LABEL_32;
      }
      v21 = 0;
      goto LABEL_38;
    }
    v35 = (support::log::manager *)*((_QWORD *)this + 13);
    v47 = 1;
    v38 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v35 + 16))(v35, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v38)
    {
      if (*((_QWORD *)v35 + 17))
      {
        support::log::buffer::borrow(v38);
        v39 = 2;
      }
      else
      {
        v39 = 0;
      }
      if (v39 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v44 = _os_log_send_and_compose_impl();
        if (v44)
          goto LABEL_84;
      }
    }
  }
  else
  {
    v35 = (support::log::manager *)*((_QWORD *)this + 13);
    v47 = 1;
    v36 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v35 + 16))(v35, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v36)
    {
      if (*((_QWORD *)v35 + 17))
      {
        support::log::buffer::borrow(v36);
        v37 = 2;
      }
      else
      {
        v37 = 0;
      }
      if (v37 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v44 = _os_log_send_and_compose_impl();
        if (v44)
        {
LABEL_84:
          v45 = (char *)v44;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          __p[0] = &unk_251CC27F8;
          __p[1] = (char *)this + 40;
          v50 = &v47;
          p_dst = (std::string *)&rep;
          support::log::manager::message_delegates(v35, (const support::log::details *)__p, v45);
        }
      }
    }
  }
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (*((_QWORD *)v18 + 1))
  {
    TelephonyUtilTransportFree();
    v22 = (void *)*((_QWORD *)v18 + 1);
    v20 = 8;
    v19 = v18;
    v21 = 8;
    if (v22)
    {
LABEL_32:
      operator delete(v22);
      v21 = v20;
    }
  }
  else
  {
    v21 = 8;
    v19 = v18;
  }
LABEL_38:
  operator delete(v19);
  v23 = v21 == 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v52.__r_.__value_.__l.__data_);
  return v23;
}

void sub_24B9812CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::unique_ptr<KTLOptions,support::transport::ARI::KTLOptionsDestructor>::~unique_ptr[abi:ne180100]((_QWORD **)&a14);
  if (a32 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD **std::unique_ptr<KTLOptions,support::transport::ARI::KTLOptionsDestructor>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[1])
    {
      TelephonyUtilTransportFree();
      v3 = (void *)v2[1];
      if (v3)
        operator delete(v3);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t support::transport::ARI::initLibTU(support::transport::ARI *this, const char *__s, int a3)
{
  size_t v6;
  std::string::size_type v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  dispatch_queue_t v16;
  NSObject *v17;
  uint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  support::log::manager *v24;
  support::log::buffer *v25;
  int v26;
  support::log::manager *v27;
  support::log::buffer *v28;
  int v29;
  support::log::manager *v30;
  support::log::buffer *v31;
  int v32;
  support::log::manager *v33;
  support::log::buffer *v34;
  int v35;
  support::log::buffer *v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v48;
  _QWORD v49[5];
  std::string __dst;
  void *__p[2];
  char *v52;
  std::string *p_dst;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  std::string v60;

  strcpy((char *)&v60, "com.apple.ARITransport");
  *((_BYTE *)&v60.__r_.__value_.__s + 23) = 22;
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0u;
  if (!__s || !*__s)
  {
    v24 = (support::log::manager *)*((_QWORD *)this + 13);
    LOBYTE(rep) = 1;
    v25 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v25)
    {
      if (*((_QWORD *)v24 + 17))
      {
        support::log::buffer::borrow(v25);
        v26 = 2;
      }
      else
      {
        v26 = 0;
      }
      if (v26 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v38 = _os_log_send_and_compose_impl();
        if (v38)
        {
          v39 = (char *)v38;
          __dst.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
          __p[0] = &unk_251CC27F8;
          __p[1] = (char *)this + 40;
          v52 = (char *)&rep;
          p_dst = &__dst;
          support::log::manager::message_delegates(v24, (const support::log::details *)__p, v39);
        }
      }
    }
LABEL_78:
    v22 = 0;
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v22;
    goto LABEL_37;
  }
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  v8 = &__dst;
  if (v6)
LABEL_10:
    memcpy(v8, __s, v7);
  v8->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::insert(&__dst, 0, ".", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v52 = (char *)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52) >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (SHIBYTE(v52) >= 0)
    v14 = HIBYTE(v52);
  else
    v14 = (std::string::size_type)__p[1];
  std::string::append(&v60, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_19:
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v60;
  else
    v15 = (std::string *)v60.__r_.__value_.__r.__words[0];
  v16 = dispatch_queue_create((const char *)v15, 0);
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v16;
  if (v17)
  {
    dispatch_release(v17);
    v16 = (dispatch_queue_t)*((_QWORD *)this + 1);
  }
  if (!v16)
  {
    v27 = (support::log::manager *)*((_QWORD *)this + 13);
    LOBYTE(rep) = 1;
    v28 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v28)
    {
      if (*((_QWORD *)v27 + 17))
      {
        support::log::buffer::borrow(v28);
        v29 = 2;
      }
      else
      {
        v29 = 0;
      }
      if (v29 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v40 = _os_log_send_and_compose_impl();
        if (v40)
        {
          v41 = (char *)v40;
          __dst.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
          __p[0] = &unk_251CC27F8;
          __p[1] = (char *)this + 40;
          v52 = (char *)&rep;
          p_dst = &__dst;
          support::log::manager::message_delegates(v27, (const support::log::details *)__p, v41);
        }
      }
    }
    goto LABEL_78;
  }
  TelephonyBasebandPCITransportInitParameters();
  v18 = *((_QWORD *)this + 1);
  DWORD2(v55) = a3;
  LODWORD(v56) = v56 | 1;
  LODWORD(v54) = 8;
  v49[0] = MEMORY[0x24BDAC760];
  v49[1] = 0x40000000;
  v49[2] = ___ZN7support9transport3ARI9initLibTUEPKcjj_block_invoke;
  v49[3] = &__block_descriptor_tmp_0;
  v49[4] = this;
  __dst.__r_.__value_.__r.__words[0] = 0;
  *((_QWORD *)&v54 + 1) = v18;
  *(_QWORD *)&v55 = v49;
  operator new(0x58uLL);
  if ((TelephonyBasebandPCITransportCreate() & 1) == 0)
  {
    v30 = (support::log::manager *)*((_QWORD *)this + 13);
    v48 = 1;
    v31 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, 1, **((_QWORD **)this + 10));
    if ((_DWORD)v31)
    {
      if (*((_QWORD *)v30 + 17))
      {
        support::log::buffer::borrow(v31);
        v32 = 2;
      }
      else
      {
        v32 = 0;
      }
      if (v32 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v42 = _os_log_send_and_compose_impl();
        if (v42)
        {
          v43 = (char *)v42;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          __p[0] = &unk_251CC27F8;
          __p[1] = (char *)this + 40;
          v52 = &v48;
          p_dst = (std::string *)&rep;
          support::log::manager::message_delegates(v30, (const support::log::details *)__p, v43);
        }
      }
    }
    goto LABEL_78;
  }
  v19 = operator new(0x20uLL);
  *v19 = 0u;
  v19[1] = 0u;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  if ((KTLInitOptions() & 1) == 0)
  {
    v33 = (support::log::manager *)*((_QWORD *)this + 13);
    v48 = 1;
    v34 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v33 + 16))(v33, 1, **((_QWORD **)this + 10));
    if (!(_DWORD)v34)
      goto LABEL_74;
    if (*((_QWORD *)v33 + 17))
    {
      support::log::buffer::borrow(v34);
      v35 = 2;
    }
    else
    {
      v35 = 0;
    }
    if (!(v35 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR)))
      goto LABEL_74;
    LOWORD(__p[0]) = 0;
    v44 = _os_log_send_and_compose_impl();
    if (!v44)
      goto LABEL_74;
LABEL_73:
    v45 = (char *)v44;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    __p[0] = &unk_251CC27F8;
    __p[1] = (char *)this + 40;
    v52 = &v48;
    p_dst = (std::string *)&rep;
    support::log::manager::message_delegates(v33, (const support::log::details *)__p, v45);
LABEL_74:
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (*((_QWORD *)v19 + 1))
    {
      TelephonyUtilTransportFree();
      v46 = (void *)*((_QWORD *)v19 + 1);
      if (v46)
        operator delete(v46);
    }
    operator delete(v19);
    goto LABEL_78;
  }
  if ((KTLOpenChannel() & 1) == 0)
  {
    v33 = (support::log::manager *)*((_QWORD *)this + 13);
    v48 = 1;
    v36 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v33 + 16))(v33, 1, **((_QWORD **)this + 10));
    if (!(_DWORD)v36)
      goto LABEL_74;
    if (*((_QWORD *)v33 + 17))
    {
      support::log::buffer::borrow(v36);
      v37 = 2;
    }
    else
    {
      v37 = 0;
    }
    if (!(v37 | os_log_type_enabled(**((os_log_t **)this + 10), OS_LOG_TYPE_ERROR)))
      goto LABEL_74;
    LOWORD(__p[0]) = 0;
    v44 = _os_log_send_and_compose_impl();
    if (!v44)
      goto LABEL_74;
    goto LABEL_73;
  }
  __dst.__r_.__value_.__r.__words[0] = 0;
  v20 = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v19;
  if (v20)
  {
    if (v20[1])
    {
      TelephonyUtilTransportFree();
      v21 = (void *)v20[1];
      if (v21)
        operator delete(v21);
    }
    operator delete(v20);
    v22 = 1;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else
  {
    v22 = 1;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
LABEL_37:
      operator delete(v60.__r_.__value_.__l.__data_);
  }
  return v22;
}

void sub_24B981BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::unique_ptr<KTLOptions,support::transport::ARI::KTLOptionsDestructor>::~unique_ptr[abi:ne180100]((_QWORD **)&a18);
  if (*(char *)(v29 - 73) < 0)
  {
    operator delete(*(void **)(v29 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN7support9transport3ARI9initLibTUEPKcjj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  support::log::buffer *v5;
  int v6;
  _QWORD *v7;
  support::log::buffer *v8;
  int v9;
  _QWORD *v10;
  support::log::buffer *v11;
  int v12;
  uint64_t v13;
  char *v14;
  std::chrono::system_clock::time_point v15;
  _QWORD *v16;
  uint64_t k;
  uint64_t v18;
  _QWORD *v19;
  uint64_t i;
  uint64_t v21;
  _QWORD *v22;
  uint64_t j;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v25;
  void *v26;
  uint64_t v27;
  char *v28;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)a2 == 1)
  {
    v7 = *(_QWORD **)(v2 + 104);
    v25 = 1;
    v8 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v7 + 16))(v7, a2, **(_QWORD **)(v2 + 80));
    if ((_DWORD)v8)
    {
      if (v7[17])
      {
        v9 = 2;
        support::log::buffer::borrow(v8);
      }
      else
      {
        v9 = 0;
      }
      if (v9 | os_log_type_enabled(**(os_log_t **)(v2 + 80), OS_LOG_TYPE_ERROR))
      {
        LOWORD(v26) = 0;
        v18 = _os_log_send_and_compose_impl();
        if (v18)
        {
          v14 = (char *)v18;
          v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          rep = v15.__d_.__rep_;
          v26 = &unk_251CC27F8;
          v27 = v2 + 40;
          v28 = &v25;
          p_rep = &rep;
          v19 = v7 + 15;
          for (i = v7[16]; (_QWORD *)i != v19; i = *(_QWORD *)(i + 8))
            v15.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(i + 16))(*(_QWORD *)(i + 16), &v26, v14);
          goto LABEL_29;
        }
      }
    }
  }
  else
  {
    v3 = a2;
    if ((_DWORD)a2)
    {
      v10 = *(_QWORD **)(v2 + 104);
      v25 = 1;
      v11 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v10 + 16))(v10, 1, **(_QWORD **)(v2 + 80));
      if ((_DWORD)v11)
      {
        if (v10[17])
        {
          v12 = 2;
          support::log::buffer::borrow(v11);
        }
        else
        {
          v12 = 0;
        }
        if (v12 | os_log_type_enabled(**(os_log_t **)(v2 + 80), OS_LOG_TYPE_ERROR))
        {
          LODWORD(v26) = 67109120;
          HIDWORD(v26) = v3;
          v21 = _os_log_send_and_compose_impl();
          if (v21)
          {
            v14 = (char *)v21;
            v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            rep = v15.__d_.__rep_;
            v26 = &unk_251CC27F8;
            v27 = v2 + 40;
            v28 = &v25;
            p_rep = &rep;
            v22 = v10 + 15;
            for (j = v10[16]; (_QWORD *)j != v22; j = *(_QWORD *)(j + 8))
              v15.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(j + 16))(*(_QWORD *)(j + 16), &v26, v14);
            goto LABEL_29;
          }
        }
      }
    }
    else
    {
      v4 = *(_QWORD **)(v2 + 104);
      v25 = 1;
      v5 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v4 + 16))(v4, 1, **(_QWORD **)(v2 + 80));
      if ((_DWORD)v5)
      {
        if (v4[17])
        {
          v6 = 2;
          support::log::buffer::borrow(v5);
        }
        else
        {
          v6 = 0;
        }
        if (v6 | os_log_type_enabled(**(os_log_t **)(v2 + 80), OS_LOG_TYPE_ERROR))
        {
          LOWORD(v26) = 0;
          v13 = _os_log_send_and_compose_impl();
          if (v13)
          {
            v14 = (char *)v13;
            v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            rep = v15.__d_.__rep_;
            v26 = &unk_251CC27F8;
            v27 = v2 + 40;
            v28 = &v25;
            p_rep = &rep;
            v16 = v4 + 15;
            for (k = v4[16]; (_QWORD *)k != v16; k = *(_QWORD *)(k + 8))
              v15.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(k + 16))(*(_QWORD *)(k + 16), &v26, v14);
LABEL_29:
            support::log::manager::release_log_buffer((support::log::manager *)v15.__d_.__rep_, v14);
          }
        }
      }
    }
  }
}

uint64_t support::transport::ARI::getKTLOptions(support::transport::ARI *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t support::transport::ARI::getLibTUTransport(support::transport::ARI *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 8);
}

void support::transport::ARI::create(support::transport::ARI *this@<X0>, dispatch_queue_s *a2@<X1>, char a3@<W3>, const support::log::manager *a4@<X4>, support::transport::ARI **a5@<X8>)
{
  __int128 v11;
  support::transport::ARI *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  int isProcessRunning;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  support::log::manager *v20;
  support::log::buffer *v21;
  int v22;
  support::log::buffer *v23;
  int v24;
  support::log::buffer *v25;
  int v26;
  uint64_t v27;
  char *v28;
  void *v29[2];
  char *v30;
  _QWORD *v31;
  char v32;
  _QWORD v33[2];
  char v34;
  void *__p[2];
  char v36;
  void *v37;
  __int128 v38;
  _OWORD v39[3];
  __int128 v40;
  __int128 v41;

  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v11;
  v41 = v11;
  v39[1] = v11;
  v39[2] = v11;
  v39[0] = v11;
  v37 = operator new(0x30uLL);
  v38 = xmmword_24B9AA780;
  strcpy((char *)v37, "com.apple.telephony.basebandservices.support");
  v36 = 10;
  strcpy((char *)__p, "ari.create");
  support::log::client::client(v39, (uint64_t)&v37, (uint64_t)__p, (uint64_t)a4);
  if (v36 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_10:
    operator delete(v37);
    goto LABEL_3;
  }
  if (SHIBYTE(v38) < 0)
    goto LABEL_10;
LABEL_3:
  *a5 = (support::transport::ARI *)0xAAAAAAAAAAAAAAAALL;
  v12 = (support::transport::ARI *)operator new(0x70uLL);
  support::transport::ARI::ARI(v12, a4);
  *a5 = v12;
  v13 = getprogname();
  if (!strncmp(v13, "CommCenter", 0xAuLL))
    goto LABEL_13;
  v14 = getprogname();
  if (!strncmp(v14, "CommCenter-asan", 0xFuLL))
    goto LABEL_13;
  v15 = getprogname();
  if (!strncmp(v15, "basebandd", 9uLL))
    goto LABEL_13;
  HIBYTE(v30) = 10;
  strcpy((char *)v29, "CommCenter");
  if ((ctu::isProcessRunning() & 1) == 0)
  {
    v34 = 9;
    strcpy((char *)v33, "basebandd");
    isProcessRunning = ctu::isProcessRunning();
    if (SHIBYTE(v30) < 0)
      goto LABEL_21;
    goto LABEL_12;
  }
  isProcessRunning = 1;
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_12:
    if (!isProcessRunning)
      goto LABEL_22;
LABEL_13:
    if ((a3 & 1) != 0)
    {
      if (support::transport::ARI::initRT(v12, (char *)this, a2))
        goto LABEL_15;
      v32 = 1;
      v20 = (support::log::manager *)*((_QWORD *)&v41 + 1);
      v25 = (support::log::buffer *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v41 + 1) + 16))(*((_QWORD *)&v41 + 1), 1, *(_QWORD *)v40);
      if (!(_DWORD)v25)
        goto LABEL_40;
      if (*((_QWORD *)v20 + 17))
      {
        support::log::buffer::borrow(v25);
        v26 = 2;
      }
      else
      {
        v26 = 0;
      }
      if (!(v26 | os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_ERROR)))
        goto LABEL_40;
      LOWORD(v29[0]) = 0;
      v27 = _os_log_send_and_compose_impl();
      if (!v27)
        goto LABEL_40;
    }
    else
    {
      v32 = 1;
      v20 = (support::log::manager *)*((_QWORD *)&v41 + 1);
      v23 = (support::log::buffer *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v41 + 1) + 16))(*((_QWORD *)&v41 + 1), 1, *(_QWORD *)v40);
      if (!(_DWORD)v23)
        goto LABEL_40;
      if (*((_QWORD *)v20 + 17))
      {
        support::log::buffer::borrow(v23);
        v24 = 2;
      }
      else
      {
        v24 = 0;
      }
      if (!(v24 | os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_ERROR)))
        goto LABEL_40;
      LOWORD(v29[0]) = 0;
      v27 = _os_log_send_and_compose_impl();
      if (!v27)
        goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_21:
  operator delete(v29[0]);
  if (isProcessRunning)
    goto LABEL_13;
LABEL_22:
  if ((support::transport::ARI::initLibTU(v12, (const char *)this, (int)a2) & 1) != 0)
    goto LABEL_15;
  v32 = 1;
  v20 = (support::log::manager *)*((_QWORD *)&v41 + 1);
  v21 = (support::log::buffer *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v41 + 1) + 16))(*((_QWORD *)&v41 + 1), 1, *(_QWORD *)v40);
  if ((_DWORD)v21)
  {
    if (*((_QWORD *)v20 + 17))
    {
      support::log::buffer::borrow(v21);
      v22 = 2;
    }
    else
    {
      v22 = 0;
    }
    if (v22 | os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v29[0]) = 0;
      v27 = _os_log_send_and_compose_impl();
      if (v27)
      {
LABEL_39:
        v28 = (char *)v27;
        v33[0] = std::chrono::system_clock::now().__d_.__rep_;
        v29[0] = &unk_251CC27F8;
        v29[1] = (char *)v39 + 8;
        v30 = &v32;
        v31 = v33;
        support::log::manager::message_delegates(v20, (const support::log::details *)v29, v28);
      }
    }
  }
LABEL_40:
  *a5 = 0;
  (*(void (**)(support::transport::ARI *))(*(_QWORD *)v12 + 8))(v12);
LABEL_15:
  *(_QWORD *)&v39[0] = &unk_251CC2740;
  v17 = (std::__shared_weak_count *)v41;
  if ((_QWORD)v41)
  {
    v18 = (unint64_t *)(v41 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_24B9825D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  _QWORD *v37;
  uint64_t v38;

  *v37 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  support::log::client::~client((support::log::client *)&a37);
  _Unwind_Resume(a1);
}

void support::transport::ARI::create(support::transport::ARI *this@<X0>, dispatch_queue_s *a2@<X1>, const support::log::manager *a3@<X3>, support::transport::ARI **a4@<X8>)
{
  support::transport::ARI::create(this, a2, 0, a3, a4);
}

void support::transport::ARI::create(support::transport::ARI *this@<X0>, const char *a2@<X1>, const support::log::manager *a3@<X2>, support::transport::ARI **a4@<X8>)
{
  support::transport::ARI::create(this, (dispatch_queue_s *)0x2710, (char)a2, a3, a4);
}

support::transport::ARI *support::transport::ARI::ARI(support::transport::ARI *this, const support::log::manager *a2)
{
  void *__p;
  char v6;
  void *v7;
  __int128 v8;

  *(_QWORD *)this = off_251CC2790;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  v7 = operator new(0x30uLL);
  v8 = xmmword_24B9AA780;
  strcpy((char *)v7, "com.apple.telephony.basebandservices.support");
  v6 = 3;
  LODWORD(__p) = 6910561;
  support::log::client::client((_QWORD *)this + 4, (uint64_t)&v7, (uint64_t)&__p, (uint64_t)a2);
  if (v6 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return this;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return this;
  }
  operator delete(v7);
  return this;
}

void sub_24B9827A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  _QWORD **v21;
  NSObject *v23;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      std::unique_ptr<KTLOptions,support::transport::ARI::KTLOptionsDestructor>::~unique_ptr[abi:ne180100](v21);
      v23 = *(NSObject **)(v20 + 8);
      if (!v23)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  std::unique_ptr<KTLOptions,support::transport::ARI::KTLOptionsDestructor>::~unique_ptr[abi:ne180100](v21);
  v23 = *(NSObject **)(v20 + 8);
  if (!v23)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  dispatch_release(v23);
  _Unwind_Resume(a1);
}

void support::transport::ARI::~ARI(support::transport::ARI *this)
{
  AriHost *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  NSObject *v8;

  *(_QWORD *)this = off_251CC2790;
  if (*((_QWORD *)this + 3))
    KTLCloseChannel();
  v2 = (AriHost *)*((unsigned int *)this + 4);
  if ((_DWORD)v2)
    AriHost::DeregisterClient(v2);
  *((_QWORD *)this + 4) = &unk_251CC2740;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v3)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (_QWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!v6)
      goto LABEL_14;
  }
  else
  {
LABEL_9:
    v6 = (_QWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (!v6)
      goto LABEL_14;
  }
  if (v6[1])
  {
    TelephonyUtilTransportFree();
    v7 = (void *)v6[1];
    if (v7)
      operator delete(v7);
  }
  operator delete(v6);
LABEL_14:
  v8 = *((_QWORD *)this + 1);
  if (v8)
    dispatch_release(v8);
}

{
  void *v1;

  support::transport::ARI::~ARI(this);
  operator delete(v1);
}

support::transport::ARI *support::transport::AriRT::AriRT(support::transport::AriRT *this, const support::log::manager *a2)
{
  support::transport::ARI *result;

  result = support::transport::ARI::ARI(this, a2);
  *(_QWORD *)result = off_251CC27B0;
  return result;
}

{
  support::transport::ARI *result;

  result = support::transport::ARI::ARI(this, a2);
  *(_QWORD *)result = off_251CC27B0;
  return result;
}

void support::transport::AriRT::create(support::transport::AriRT *this@<X0>, dispatch_queue_s *a2@<X1>, const support::log::manager *a3@<X3>, support::transport::ARI **a4@<X8>)
{
  __int128 v9;
  support::transport::ARI *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  support::log::manager *v14;
  support::log::buffer *v15;
  int v16;
  uint64_t v17;
  char *v18;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  _QWORD v20[5];
  char v21;
  void *__p[2];
  char v23;
  void *v24;
  __int128 v25;
  _OWORD v26[3];
  __int128 v27;
  __int128 v28;

  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v9;
  v28 = v9;
  v26[2] = v9;
  v26[0] = v9;
  v26[1] = v9;
  v24 = operator new(0x30uLL);
  v25 = xmmword_24B9AA780;
  strcpy((char *)v24, "com.apple.telephony.basebandservices.support");
  v23 = 13;
  strcpy((char *)__p, "ari.rt.create");
  support::log::client::client(v26, (uint64_t)&v24, (uint64_t)__p, (uint64_t)a3);
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v24);
LABEL_3:
  *a4 = (support::transport::ARI *)0xAAAAAAAAAAAAAAAALL;
  v10 = (support::transport::ARI *)operator new(0x70uLL);
  support::transport::ARI::ARI(v10, a3);
  *(_QWORD *)v10 = off_251CC27B0;
  *a4 = v10;
  if (support::transport::ARI::initRT(v10, (char *)this, a2))
  {
    *(_QWORD *)&v26[0] = &unk_251CC2740;
    v11 = (std::__shared_weak_count *)v28;
    if (!(_QWORD)v28)
      return;
    goto LABEL_5;
  }
  v21 = 1;
  v14 = (support::log::manager *)*((_QWORD *)&v28 + 1);
  v15 = (support::log::buffer *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v28 + 1) + 16))(*((_QWORD *)&v28 + 1), 1, *(_QWORD *)v27);
  if ((_DWORD)v15)
  {
    if (*((_QWORD *)v14 + 17))
    {
      support::log::buffer::borrow(v15);
      v16 = 2;
    }
    else
    {
      v16 = 0;
    }
    if (v16 | os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20[0]) = 0;
      v17 = _os_log_send_and_compose_impl();
      if (v17)
      {
        v18 = (char *)v17;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v20[0] = &unk_251CC27F8;
        v20[1] = (char *)v26 + 8;
        v20[2] = &v21;
        v20[3] = &rep;
        support::log::manager::message_delegates(v14, (const support::log::details *)v20, v18);
      }
    }
  }
  *a4 = 0;
  (*(void (**)(support::transport::ARI *))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)&v26[0] = &unk_251CC2740;
  v11 = (std::__shared_weak_count *)v28;
  if ((_QWORD)v28)
  {
LABEL_5:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_24B982BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);
  *v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  support::log::client::~client((support::log::client *)va);
  _Unwind_Resume(a1);
}

void sub_24B982C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
  {
    operator delete(a25);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24B982C34);
}

void support::transport::AriRT::create(support::transport::AriRT *this@<X0>, const support::log::manager *a2@<X1>, support::transport::ARI **a3@<X8>)
{
  support::transport::AriRT::create(this, (dispatch_queue_s *)0x2710, a2, a3);
}

void support::transport::AriRT::~AriRT(support::transport::AriRT *this)
{
  void *v1;

  support::transport::ARI::~ARI(this);
  operator delete(v1);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251CC22F8, MEMORY[0x24BEDAB00]);
}

void sub_24B982CD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t __cxx_global_var_init_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

uint64_t HSFilerRT_Internal::getLogClient(HSFilerRT_Internal *this)
{
  return (uint64_t)this + 80;
}

void HSFilerRT_Internal::Session::create(uint64_t *a1@<X0>, int a2@<W1>, char a3@<W2>, NSObject **a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  dispatch_object_t v19;
  uint64_t v20[2];

  *a5 = 0;
  a5[1] = 0;
  if (capabilities::radio::vendor((capabilities::radio *)a1) == 3)
  {
    v10 = operator new(0x98uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = off_251CC2CC0;
    v11 = (uint64_t)(v10 + 3);
    v12 = *a1;
    v13 = (std::__shared_weak_count *)a1[1];
    v20[0] = v12;
    v20[1] = (uint64_t)v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = *a4;
    v19 = v16;
    if (v16)
      dispatch_retain(v16);
    HSFilerRT_Internal_INT::Session_INT::Session_INT(v11, v20, a2, a3, &v19);
    if (v16)
      dispatch_release(v16);
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *a5 = v11;
    a5[1] = (uint64_t)v10;
  }
}

void sub_24B982E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  void *v15;

  if (v13)
    dispatch_release(v13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_24B982E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24B982E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t HSFilerRT_Internal::Session::Session(uint64_t a1, uint64_t *a2, int a3, char a4, NSObject **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;

  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = off_251CC2828;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  v11 = *a5;
  *(_QWORD *)(a1 + 80) = *a5;
  if (v11)
    dispatch_retain(v11);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = a4;
  *(_WORD *)(a1 + 113) = 0;
  return a1;
}

{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;

  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = off_251CC2828;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  v11 = *a5;
  *(_QWORD *)(a1 + 80) = *a5;
  if (v11)
    dispatch_retain(v11);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = a4;
  *(_WORD *)(a1 + 113) = 0;
  return a1;
}

void HSFilerRT_Internal::Session::~Session(HSFilerRT_Internal::Session *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  void **v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void **v15;
  void **v16;

  *(_QWORD *)this = off_251CC2828;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v3 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 113) = 0;
  if (*((_QWORD *)this + 8))
  {
    v4 = (void **)*((_QWORD *)this + 7);
    if (v4)
    {
      do
      {
        v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *((_QWORD *)this + 7) = 0;
    v5 = *((_QWORD *)this + 6);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (const void *)*((_QWORD *)this + 11);
  if (v8)
    _Block_release(v8);
  v9 = *((_QWORD *)this + 10);
  if (v9)
    dispatch_release(v9);
  v10 = (void **)*((_QWORD *)this + 7);
  if (v10)
  {
    do
    {
      v15 = (void **)*v10;
      if (*((char *)v10 + 39) < 0)
        operator delete(v10[2]);
      operator delete(v10);
      v10 = v15;
    }
    while (v15);
  }
  v11 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
    operator delete(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

{
  void *v1;

  HSFilerRT_Internal::Session::~Session(this);
  operator delete(v1);
}

BOOL HSFilerRT_Internal::Session::hasFile(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(a1 + 40), a2) != 0;
}

uint64_t *HSFilerRT_Internal::Session::markFileAsTransferred(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t *result;
  __int128 *v5;

  v3 = a1 + 40;
  result = std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(a1 + 40), (uint64_t)a2);
  if (result)
  {
    v5 = a2;
    result = std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (uint64_t)a2, &v5);
    *((_BYTE *)result + 40) = 1;
  }
  return result;
}

uint64_t *HSFilerRT_Internal::Session::fileTransferred(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t *result;
  __int128 *v5;

  v3 = a1 + 40;
  result = std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(a1 + 40), (uint64_t)a2);
  if (result)
  {
    v5 = a2;
    return (uint64_t *)(*((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (uint64_t)a2, &v5)+ 40) != 0);
  }
  return result;
}

BOOL HSFilerRT_Internal::Session::allFilesTransferred(HSFilerRT_Internal::Session *this)
{
  char *v1;

  v1 = (char *)this + 56;
  do
    v1 = *(char **)v1;
  while (v1 && v1[40]);
  return v1 == 0;
}

void HSFilerRT_Internal::Session::end(HSFilerRT_Internal::Session *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t i;
  void **v7;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v3 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 113) = 0;
  if (*((_QWORD *)this + 8))
  {
    v4 = (void **)*((_QWORD *)this + 7);
    if (v4)
    {
      do
      {
        v7 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v7;
      }
      while (v7);
    }
    *((_QWORD *)this + 7) = 0;
    v5 = *((_QWORD *)this + 6);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
}

void HSFilerRT_Internal::HSFilerRT_Internal(HSFilerRT_Internal *this)
{
  HSFilerRT_Internal *v1;
  NSObject *initially_inactive;
  NSObject *v3;
  _QWORD **i;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t *v21;
  _QWORD **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t **v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t k;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *j;
  _QWORD *v75;
  HSFilerRT_Internal *v76;
  uint64_t v77;
  _QWORD **v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD **v81;
  _QWORD *v82[2];
  _QWORD **v83;
  _QWORD *v84[2];
  _QWORD **v85;
  _QWORD *v86[2];
  _QWORD **v87;
  _QWORD *v88[2];
  _QWORD **v89;
  _QWORD *v90[2];
  _QWORD **v91;
  _QWORD *v92[2];
  _QWORD **v93;
  _QWORD *v94[2];
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t block;
  uint64_t v101;
  uint64_t (*v102)(uint64_t);
  void *v103;
  uint64_t *v104;
  _QWORD **v105;
  _QWORD *v106[2];
  int v107;
  _QWORD **v108;
  _QWORD *v109[2];
  int v110;
  _QWORD **v111;
  _QWORD *v112[2];
  int v113;
  _QWORD **v114;
  _QWORD *v115[2];
  int v116;
  _QWORD **v117;
  _QWORD *v118[2];
  int v119;
  _QWORD **v120;
  _QWORD *v121[4];

  v1 = this;
  v121[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &unk_251CC3130;
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v3 = dispatch_queue_create_with_target_V2("HSFilerRT", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_BACKGROUND, 0);
  dispatch_activate(v3);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((_QWORD *)v1 + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)v1 + 4) = 0;
  }
  *(_QWORD *)v1 = &unk_251CC3130;
  *((_QWORD *)v1 + 6) = 0;
  v79 = (_QWORD *)((char *)v1 + 48);
  *((_QWORD *)v1 + 5) = (char *)v1 + 48;
  i = (_QWORD **)((char *)v1 + 40);
  *((_QWORD *)v1 + 7) = 0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = 0;
  v78 = (_QWORD **)((char *)v1 + 40);
  hsfiler_log_client::hsfiler_log_client((HSFilerRT_Internal *)((char *)v1 + 80), "hsfiler.rt");
  block = MEMORY[0x24BDAC760];
  v101 = 0x40000000;
  v102 = ___ZN7hsfiler7loggingL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v103 = &__block_descriptor_tmp_3;
  v104 = &hsfiler::logging::getLogServer(void)::sLogServer;
  if (hsfiler::logging::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = unk_2579B8E50;
    v95 = hsfiler::logging::getLogServer(void)::sLogServer;
    v96 = (std::__shared_weak_count *)unk_2579B8E50;
    if (!unk_2579B8E50)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&hsfiler::logging::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v5 = unk_2579B8E50;
    v95 = hsfiler::logging::getLogServer(void)::sLogServer;
    v96 = (std::__shared_weak_count *)unk_2579B8E50;
    if (!unk_2579B8E50)
      goto LABEL_8;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_8:
  ctu::DispatchTimerService::create();
  if (v96)
  {
    p_shared_owners = &v96->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  *((_QWORD *)v1 + 22) = 0;
  *((_DWORD *)v1 + 46) = 0;
  *((_QWORD *)v1 + 25) = 0;
  *((_QWORD *)v1 + 26) = 0;
  *((_QWORD *)v1 + 24) = 0;
  *((_BYTE *)v1 + 216) = 0;
  v94[0] = 0;
  v94[1] = 0;
  v93 = v94;
  LODWORD(block) = 1;
  v102 = 0;
  v103 = 0;
  v101 = (uint64_t)&v102;
  v76 = v1;
  std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>(&v101, v94, v94);
  v92[0] = 0;
  v92[1] = 0;
  v91 = v92;
  LODWORD(v104) = 2;
  v106[0] = 0;
  v106[1] = 0;
  v105 = v106;
  std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>((uint64_t *)&v105, v92, v92);
  v90[0] = 0;
  v90[1] = 0;
  v89 = v90;
  v107 = 3;
  v109[0] = 0;
  v109[1] = 0;
  v108 = v109;
  std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>((uint64_t *)&v108, v90, v90);
  v88[0] = 0;
  v88[1] = 0;
  v87 = v88;
  v110 = 4;
  v112[0] = 0;
  v112[1] = 0;
  v111 = v112;
  std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>((uint64_t *)&v111, v88, v88);
  v86[0] = 0;
  v86[1] = 0;
  v85 = v86;
  v113 = 5;
  v115[0] = 0;
  v115[1] = 0;
  v114 = v115;
  std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>((uint64_t *)&v114, v86, v86);
  v84[0] = 0;
  v84[1] = 0;
  v83 = v84;
  v116 = 6;
  v118[1] = 0;
  v118[0] = 0;
  v117 = v118;
  std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>((uint64_t *)&v117, v84, v84);
  v82[0] = 0;
  v82[1] = 0;
  v81 = v82;
  v119 = 7;
  v121[1] = 0;
  v121[0] = 0;
  v120 = v121;
  std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>((uint64_t *)&v120, v82, v82);
  if (*((_QWORD *)v1 + 7))
  {
    v97 = (uint64_t)v1 + 40;
    v98 = 0xAAAAAAAAAAAAAAAALL;
    v10 = *i;
    *i = v79;
    *(_QWORD *)(*v79 + 16) = 0;
    *v79 = 0;
    *((_QWORD *)v1 + 7) = 0;
    v11 = v10[1] ? (_QWORD *)v10[1] : v10;
    v99 = (unint64_t)v11;
    if (v11)
    {
      v12 = (_QWORD *)v11[2];
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if ((_QWORD *)*v12 == v11)
        {
          *v12 = 0;
          while (1)
          {
            v75 = (_QWORD *)v12[1];
            if (!v75)
              break;
            do
            {
              v12 = v75;
              v75 = (_QWORD *)*v75;
            }
            while (v75);
          }
        }
        else
        {
          for (v12[1] = 0; v13; v13 = (_QWORD *)v12[1])
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
      }
      v14 = 0;
      v98 = (unint64_t)v12;
      while (1)
      {
        v15 = &block + 4 * v14;
        v16 = v79;
        v17 = *v79;
        v18 = *(_DWORD *)v15;
LABEL_28:
        v19 = v16;
        if (v17)
        {
          do
          {
            v16 = (_QWORD *)v17;
            v20 = *(_DWORD *)(v17 + 32);
            if (v18 < v20)
            {
              v17 = *v16;
              goto LABEL_28;
            }
            if (v20 >= v18)
              goto LABEL_25;
            v17 = v16[1];
          }
          while (v17);
          v19 = v16 + 1;
        }
        *((_DWORD *)v11 + 8) = v18;
        if (v11 + 4 != v15)
        {
          v21 = &block + 4 * v14;
          v22 = (_QWORD **)(v11 + 5);
          v23 = (_QWORD *)v21[1];
          v80 = v21 + 2;
          if (v11[7])
          {
            v25 = (uint64_t **)(v11 + 6);
            v24 = v11[6];
            v26 = v11[5];
            v11[5] = v11 + 6;
            *(_QWORD *)(v24 + 16) = 0;
            v11[6] = 0;
            v11[7] = 0;
            if (*(_QWORD *)(v26 + 8))
              v27 = *(uint64_t **)(v26 + 8);
            else
              v27 = (uint64_t *)v26;
            if (v27)
            {
              v28 = (uint64_t *)v27[2];
              if (v28)
              {
                v29 = (uint64_t *)*v28;
                if ((uint64_t *)*v28 == v27)
                {
                  *v28 = 0;
                  while (1)
                  {
                    v64 = (uint64_t *)v28[1];
                    if (!v64)
                      break;
                    do
                    {
                      v28 = v64;
                      v64 = (uint64_t *)*v64;
                    }
                    while (v64);
                  }
                }
                else
                {
                  for (v28[1] = 0; v29; v29 = (uint64_t *)v28[1])
                  {
                    do
                    {
                      v28 = v29;
                      v29 = (uint64_t *)*v29;
                    }
                    while (v29);
                  }
                }
              }
              v77 = v14;
              if (v23 == v80)
              {
                v43 = v23;
                v30 = v27;
              }
              else
              {
                do
                {
                  v30 = v28;
                  v27[4] = v23[4];
                  v32 = v23[5];
                  v31 = v23[6];
                  if (v31)
                  {
                    v33 = (unint64_t *)(v31 + 8);
                    do
                      v34 = __ldxr(v33);
                    while (__stxr(v34 + 1, v33));
                  }
                  v35 = (std::__shared_weak_count *)v27[6];
                  v27[5] = v32;
                  v27[6] = v31;
                  if (!v35)
                    goto LABEL_52;
                  v36 = (unint64_t *)&v35->__shared_owners_;
                  do
                    v37 = __ldaxr(v36);
                  while (__stlxr(v37 - 1, v36));
                  if (!v37)
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                    v38 = *v25;
                    v39 = (uint64_t **)(v11 + 6);
                    v40 = (uint64_t **)(v11 + 6);
                    if (*v25)
                    {
                      do
                      {
LABEL_55:
                        while (1)
                        {
                          v39 = (uint64_t **)v38;
                          if (v27[4] >= (unint64_t)v38[4])
                            break;
                          v38 = (uint64_t *)*v38;
                          v40 = v39;
                          if (!*v39)
                            goto LABEL_60;
                        }
                        v38 = (uint64_t *)v38[1];
                      }
                      while (v38);
                      v40 = v39 + 1;
                    }
                  }
                  else
                  {
LABEL_52:
                    v38 = *v25;
                    v39 = (uint64_t **)(v11 + 6);
                    v40 = (uint64_t **)(v11 + 6);
                    if (*v25)
                      goto LABEL_55;
                  }
LABEL_60:
                  *v27 = 0;
                  v27[1] = 0;
                  v27[2] = (uint64_t)v39;
                  *v40 = v27;
                  v41 = (_QWORD *)**v22;
                  if (v41)
                  {
                    *v22 = v41;
                    v27 = *v40;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[6], v27);
                  ++v11[7];
                  if (v30)
                  {
                    v28 = (uint64_t *)v30[2];
                    if (v28)
                    {
                      v45 = (uint64_t *)*v28;
                      if ((uint64_t *)*v28 == v30)
                      {
                        *v28 = 0;
                        while (1)
                        {
                          v46 = (uint64_t *)v28[1];
                          if (!v46)
                            break;
                          do
                          {
                            v28 = v46;
                            v46 = (uint64_t *)*v46;
                          }
                          while (v46);
                        }
                      }
                      else
                      {
                        for (v28[1] = 0; v45; v45 = (uint64_t *)v28[1])
                        {
                          do
                          {
                            v28 = v45;
                            v45 = (uint64_t *)*v45;
                          }
                          while (v45);
                        }
                      }
                    }
                  }
                  else
                  {
                    v28 = 0;
                  }
                  v42 = (_QWORD *)v23[1];
                  if (v42)
                  {
                    do
                    {
                      v43 = v42;
                      v42 = (_QWORD *)*v42;
                    }
                    while (v42);
                  }
                  else
                  {
                    do
                    {
                      v43 = (_QWORD *)v23[2];
                      v44 = *v43 == (_QWORD)v23;
                      v23 = v43;
                    }
                    while (!v44);
                  }
                  if (!v30)
                    break;
                  v27 = v30;
                  v23 = v43;
                }
                while (v43 != v80);
              }
              std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)(v11 + 5), v30);
              if (v28)
              {
                v47 = (uint64_t *)v28[2];
                v14 = v77;
                for (i = v78; v47; v47 = (uint64_t *)v47[2])
                  v28 = v47;
                std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)(v11 + 5), v28);
                v1 = v76;
                if (v43 == v80)
                  goto LABEL_113;
LABEL_93:
                v48 = (uint64_t **)(v11 + 6);
                while (2)
                {
                  v49 = (uint64_t *)operator new(0x38uLL);
                  v50 = v49;
                  v51 = v43[4];
                  v49[4] = v51;
                  v49[5] = v43[5];
                  v52 = v43[6];
                  v49[6] = v52;
                  if (v52)
                  {
                    v53 = (unint64_t *)(v52 + 8);
                    do
                      v54 = __ldxr(v53);
                    while (__stxr(v54 + 1, v53));
                  }
                  v55 = *v48;
                  v56 = (uint64_t **)(v11 + 6);
                  v57 = (uint64_t **)(v11 + 6);
                  if (*v48)
                  {
                    do
                    {
                      while (1)
                      {
                        v56 = (uint64_t **)v55;
                        if (v51 >= v55[4])
                          break;
                        v55 = (uint64_t *)*v55;
                        v57 = v56;
                        if (!*v56)
                          goto LABEL_103;
                      }
                      v55 = (uint64_t *)v55[1];
                    }
                    while (v55);
                    v57 = v56 + 1;
                    *v49 = 0;
                    v49[1] = 0;
                    v49[2] = (uint64_t)v56;
                    v56[1] = v49;
                    v58 = (_QWORD *)**v22;
                    if (v58)
                    {
LABEL_104:
                      *v22 = v58;
                      v50 = *v57;
                    }
                  }
                  else
                  {
LABEL_103:
                    *v49 = 0;
                    v49[1] = 0;
                    v49[2] = (uint64_t)v56;
                    *v57 = v49;
                    v58 = (_QWORD *)**v22;
                    if (v58)
                      goto LABEL_104;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[6], v50);
                  ++v11[7];
                  v59 = (_QWORD *)v43[1];
                  if (v59)
                  {
                    do
                    {
                      v60 = v59;
                      v59 = (_QWORD *)*v59;
                    }
                    while (v59);
                  }
                  else
                  {
                    do
                    {
                      v60 = (_QWORD *)v43[2];
                      v44 = *v60 == (_QWORD)v43;
                      v43 = v60;
                    }
                    while (!v44);
                  }
                  v43 = v60;
                  if (v60 == v80)
                    goto LABEL_113;
                  continue;
                }
              }
              v1 = v76;
              v14 = v77;
              i = v78;
              if (v43 != v80)
                goto LABEL_93;
            }
            else
            {
              v43 = v23;
              i = v78;
              if (v23 != v80)
                goto LABEL_93;
            }
          }
          else
          {
            v43 = (_QWORD *)v21[1];
            if (v23 != v80)
              goto LABEL_93;
          }
        }
LABEL_113:
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v16;
        *v19 = v11;
        v61 = (_QWORD *)**i;
        if (v61)
        {
          *i = v61;
          v11 = (_QWORD *)*v19;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1 + 6), v11);
        ++*((_QWORD *)v1 + 7);
        v11 = (_QWORD *)v98;
        v99 = v98;
        if (!v98)
        {
          k = v14 + 1;
          std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(v97, 0);
          if (v14 == 6)
            goto LABEL_147;
          goto LABEL_134;
        }
        v12 = *(_QWORD **)(v98 + 16);
        if (v12)
        {
          v62 = (_QWORD *)*v12;
          if (*v12 == v98)
          {
            *v12 = 0;
            while (1)
            {
              v63 = (_QWORD *)v12[1];
              if (!v63)
                break;
              do
              {
                v12 = v63;
                v63 = (_QWORD *)*v63;
              }
              while (v63);
            }
          }
          else
          {
            for (v12[1] = 0; v62; v62 = (_QWORD *)v12[1])
            {
              do
              {
                v12 = v62;
                v62 = (_QWORD *)*v62;
              }
              while (v62);
            }
          }
        }
        v98 = (unint64_t)v12;
LABEL_25:
        if (++v14 == 7)
        {
          v73 = v97;
          std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(v97, v11);
          if (v12)
          {
            for (j = (_QWORD *)v12[2]; j; j = (_QWORD *)j[2])
              v12 = j;
            std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(v73, v12);
          }
          goto LABEL_147;
        }
      }
    }
  }
  for (k = 0; k != 7; ++k)
  {
LABEL_134:
    v66 = *((_DWORD *)&block + 8 * k);
    v67 = v79;
    while (1)
    {
      v68 = *v67;
      v69 = v67;
      if (!*v67)
        break;
      while (1)
      {
        v67 = (_QWORD *)v68;
        v70 = *(_DWORD *)(v68 + 32);
        if (v70 > v66)
          break;
        if (v70 >= v66)
          goto LABEL_133;
        v68 = v67[1];
        if (!v68)
        {
          v69 = v67 + 1;
          goto LABEL_140;
        }
      }
    }
LABEL_140:
    v71 = operator new(0x40uLL);
    v71[6] = 0;
    v71[5] = v71 + 6;
    *((_DWORD *)v71 + 8) = v66;
    v71[7] = 0;
    std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>(v71 + 5, (_QWORD *)*(&block + 4 * k + 1), &v102 + 4 * k);
    *v71 = 0;
    v71[1] = 0;
    v71[2] = v67;
    *v69 = v71;
    v72 = (_QWORD *)**i;
    if (v72)
    {
      *i = v72;
      v71 = (_QWORD *)*v69;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v1 + 6), v71);
    ++*((_QWORD *)v1 + 7);
LABEL_133:
    ;
  }
LABEL_147:
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v120, v121[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v117, v118[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v114, v115[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v111, v112[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v108, v109[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v105, v106[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v101, v102);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v81, v82[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v83, v84[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v85, v86[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v87, v88[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v89, v90[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v91, v92[0]);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&v93, v94[0]);
}

void sub_24B983E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, hsfiler_log_client *a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD **a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  _QWORD **v54;
  char *v56;
  const void *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;

  v59 = v53;
  v56 = (char *)&STACK[0x220];
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy(v59, *v54);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&a27, (_QWORD *)a28);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&a30, (_QWORD *)a31);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&a33, (_QWORD *)a34);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&a36, (_QWORD *)a37);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&a39, (_QWORD *)a40);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&a42, (_QWORD *)a43);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)&a45, (_QWORD *)a46);
  if (&a53 != (char *)&STACK[0x220])
  {
    do
    {
      std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)(v56 - 24), *((_QWORD **)v56 - 2));
      v56 -= 32;
    }
    while (v56 != &a53);
  }
  v57 = *(const void **)(a22 + 208);
  if (v57)
    _Block_release(v57);
  v58 = *(std::__shared_weak_count **)(a22 + 200);
  if (v58)
    std::__shared_weak_count::__release_weak(v58);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](a10);
  hsfiler_log_client::~hsfiler_log_client(a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](a12);
  std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(a24, *a25);
  ctu::SharedSynchronizable<HSFilerRT_Internal>::~SharedSynchronizable(a13);
  _Unwind_Resume(a1);
}

void sub_24B984080(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x24B984078);
}

void hsfiler_log_client::~hsfiler_log_client(hsfiler_log_client *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_251CC2740;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &unk_251CC2740;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

_QWORD *ctu::SharedSynchronizable<HSFilerRT_Internal>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

double HSFilerRT_Internal::create@<D0>(HSFilerRT_Internal *this@<X0>, _QWORD *a2@<X8>)
{
  double result;
  double v4[3];

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor(this) == 3)
  {
    _ZNSt3__115allocate_sharedB8ne180100I22HSFilerRT_Internal_INTNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v4);
    result = v4[0];
    *(_OWORD *)a2 = *(_OWORD *)v4;
  }
  return result;
}

void sub_24B984194(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24B9841A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t HSFilerRT_Internal::createSession(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, NSObject **a5)
{
  char v8;
  const char *v10;
  size_t v11;
  NSObject *v12;
  const char *v13;
  std::string *p_dst;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  std::string *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v32[7];
  std::string __p;
  uint64_t v34;
  std::__shared_weak_count *v35;
  dispatch_object_t object;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  std::string __dst;
  _QWORD *v48;
  _BYTE buf[24];
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 9)
  {
    v16 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a4;
      _os_log_error_impl(&dword_24B97E000, v16, OS_LOG_TYPE_ERROR, "error: Invalid clientID param: %d", buf, 8u);
    }
    return 0;
  }
  if (!*a5)
  {
    v17 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B97E000, v17, OS_LOG_TYPE_ERROR, "error: NULL queue param", buf, 2u);
    }
    return 0;
  }
  v8 = a3;
  if (a3)
    v10 = "read";
  else
    v10 = "write";
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  if (a3)
    v11 = 4;
  else
    v11 = 5;
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
  memcpy(&__dst, v10, v11);
  *(_BYTE *)((unint64_t)&__dst | v11) = 0;
  v12 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = hsfiler::support::to_string(a4);
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = p_dst;
    _os_log_impl(&dword_24B97E000, v12, OS_LOG_TYPE_DEFAULT, "Creating client (%s) %s session", buf, 0x16u);
  }
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v46 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2000000000;
  v42 = 0;
  v15 = MEMORY[0x24BDAC760];
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 1174405120;
  v32[2] = ___ZN18HSFilerRT_Internal13createSessionENSt3__110shared_ptrI8RegistryEEb15HSFilerClientIDN8dispatch5queueE_block_invoke;
  v32[3] = &__block_descriptor_tmp_1;
  v32[6] = a1;
  v37 = a4;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  v19 = (std::__shared_weak_count *)a2[1];
  v34 = *a2;
  v35 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v38 = v8;
  v22 = *a5;
  object = v22;
  if (v22)
    dispatch_retain(v22);
  v32[4] = &v39;
  v32[5] = &v43;
  v48 = v32;
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v50 = &__block_descriptor_tmp_52;
  v51 = a1 + 8;
  v52 = &v48;
  v23 = *(NSObject **)(a1 + 24);
  if (*(_QWORD *)(a1 + 32))
  {
    dispatch_async_and_wait(v23, buf);
    if (!*((_BYTE *)v44 + 24))
      goto LABEL_34;
  }
  else
  {
    dispatch_sync(v23, buf);
    if (!*((_BYTE *)v44 + 24))
      goto LABEL_34;
  }
  v24 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = hsfiler::support::to_string(a4);
    v26 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v27 = (void *)v40[3];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v25;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 2048;
    v50 = v27;
    _os_log_impl(&dword_24B97E000, v24, OS_LOG_TYPE_DEFAULT, "Created client (%s) %s session (%llu)", buf, 0x20u);
  }
LABEL_34:
  v18 = v40[3];
  if (object)
    dispatch_release(object);
  v28 = v35;
  if (!v35)
    goto LABEL_40;
  v29 = (unint64_t *)&v35->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_40:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_41:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_42:
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v18;
}

void sub_24B9845F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,dispatch_object_t object,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (object)
    dispatch_release(object);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v39);
  if (a21 < 0)
    operator delete(__p);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

void ___ZN18HSFilerRT_Internal13createSessionENSt3__110shared_ptrI8RegistryEEb15HSFilerClientIDN8dispatch5queueE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  const char *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  _QWORD **v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  NSObject *v36;
  const char *v37;
  _QWORD *v38;
  uint64_t **v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  uint64_t v55[2];
  uint64_t v56;
  unint64_t v57;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  _QWORD *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 48);
  v4 = (uint64_t **)(v2 + 48);
  v3 = *(uint64_t **)(v2 + 48);
  v5 = *(_DWORD *)(a1 + 104);
  v6 = (uint64_t **)(v2 + 48);
  v7 = (uint64_t **)(v2 + 48);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v3;
        v8 = *((_DWORD *)v3 + 8);
        if (v5 >= v8)
          break;
        v3 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= v5)
        break;
      v3 = v7[1];
      if (!v3)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = v5;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = **(_QWORD **)(v2 + 40);
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *(_QWORD *)(v2 + 40) = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 48), v11);
    ++*(_QWORD *)(v2 + 56);
  }
  if (v7[7] == (uint64_t *)20)
  {
    v12 = **(NSObject ***)(v2 + 128);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = hsfiler::support::to_string(*(_DWORD *)(a1 + 104));
      v14 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v14 = (_QWORD *)*v14;
      *(_DWORD *)buf = 136315650;
      v59 = v13;
      v60 = 2080;
      v61 = v14;
      v62 = 2048;
      v63 = 20;
      _os_log_error_impl(&dword_24B97E000, v12, OS_LOG_TYPE_ERROR, "error: Failed client (%s) create %s session: max number of sessions (%zu) reached", buf, 0x20u);
    }
    return;
  }
  v56 = 0xAAAAAAAAAAAAAAAALL;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v15 = *(std::__shared_weak_count **)(a1 + 88);
  v55[0] = *(_QWORD *)(a1 + 80);
  v55[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *(_DWORD *)(a1 + 104);
  v19 = *(unsigned __int8 *)(a1 + 108);
  v20 = *(NSObject **)(a1 + 96);
  v54 = v20;
  if (v20)
    dispatch_retain(v20);
  HSFilerRT_Internal::Session::create(v55, v18, v19 != 0, &v54, &v56);
  if (v20)
    dispatch_release(v20);
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (v56)
        goto LABEL_28;
LABEL_42:
      v36 = **(NSObject ***)(v2 + 128);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v37 = hsfiler::support::to_string(*(_DWORD *)(a1 + 104));
        v38 = (_QWORD *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v38 = (_QWORD *)*v38;
        *(_DWORD *)buf = 136315394;
        v59 = v37;
        v60 = 2080;
        v61 = v38;
        _os_log_error_impl(&dword_24B97E000, v36, OS_LOG_TYPE_ERROR, "error: Failed client (%s) create %s session: Session obj alloc failed", buf, 0x16u);
      }
      goto LABEL_66;
    }
  }
  if (!v56)
    goto LABEL_42;
LABEL_28:
  v23 = (unint64_t *)(v2 + 176);
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 + 1;
  }
  while (__stlxr(v25, v23));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v25;
  *(_QWORD *)(v56 + 32) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v26 = *v4;
  v27 = *(_DWORD *)(a1 + 104);
  v28 = (uint64_t *)(v2 + 48);
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        v28 = v26;
        v29 = *((_DWORD *)v26 + 8);
        if (v27 >= v29)
          break;
        v26 = (uint64_t *)*v28;
        v4 = (uint64_t **)v28;
        if (!*v28)
          goto LABEL_37;
      }
      if (v29 >= v27)
        break;
      v26 = (uint64_t *)v28[1];
      if (!v26)
      {
        v4 = (uint64_t **)(v28 + 1);
        goto LABEL_37;
      }
    }
    v30 = (_QWORD **)v28;
    v34 = (uint64_t **)(v28 + 6);
    v33 = (uint64_t *)v28[6];
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v33)
      goto LABEL_49;
LABEL_47:
    v39 = v34;
LABEL_53:
    v41 = (uint64_t *)operator new(0x38uLL);
    v41[5] = 0;
    v41[6] = 0;
    v41[4] = v35;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v39;
    *v34 = v41;
    v42 = (_QWORD *)*v30[5];
    v43 = v41;
    if (v42)
    {
      v30[5] = v42;
      v43 = *v34;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v30[6], v43);
    v30[7] = (_QWORD *)((char *)v30[7] + 1);
    v45 = v56;
    v44 = v57;
    if (!v57)
      goto LABEL_60;
    goto LABEL_58;
  }
LABEL_37:
  v30 = (_QWORD **)operator new(0x40uLL);
  *((_DWORD *)v30 + 8) = v27;
  v30[7] = 0;
  v30[6] = 0;
  v30[5] = v30 + 6;
  *v30 = 0;
  v30[1] = 0;
  v30[2] = v28;
  *v4 = (uint64_t *)v30;
  v31 = **(_QWORD **)(v2 + 40);
  v32 = (uint64_t *)v30;
  if (v31)
  {
    *(_QWORD *)(v2 + 40) = v31;
    v32 = *v4;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 48), v32);
  ++*(_QWORD *)(v2 + 56);
  v34 = v30 + 6;
  v33 = v30[6];
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v33)
    goto LABEL_47;
  while (1)
  {
LABEL_49:
    while (1)
    {
      v39 = (uint64_t **)v33;
      v40 = v33[4];
      if (v35 >= v40)
        break;
      v33 = *v39;
      v34 = v39;
      if (!*v39)
        goto LABEL_53;
    }
    if (v40 >= v35)
      break;
    v33 = v39[1];
    if (!v33)
    {
      v34 = v39 + 1;
      goto LABEL_53;
    }
  }
  v41 = (uint64_t *)v39;
  v45 = v56;
  v44 = v57;
  if (!v57)
    goto LABEL_60;
LABEL_58:
  v46 = (unint64_t *)(v44 + 8);
  do
    v47 = __ldxr(v46);
  while (__stxr(v47 + 1, v46));
LABEL_60:
  v48 = (std::__shared_weak_count *)v41[6];
  v41[5] = v45;
  v41[6] = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
LABEL_66:
  v51 = (std::__shared_weak_count *)v57;
  if (v57)
  {
    v52 = (unint64_t *)(v57 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_24B984B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B984B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B984B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  NSObject *v11;

  if (v11)
    dispatch_release(v11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32r40r56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c35_ZTSNSt3__110shared_ptrI8RegistryEE96c21_ZTSN8dispatch5queueE(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 8);
  _Block_object_assign(a1 + 5, *(const void **)(a2 + 40), 8);
  v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(NSObject **)(a2 + 96);
  a1[12] = v9;
  if (v9)
    dispatch_retain(v9);
}

void sub_24B984C64(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;

  _Block_object_dispose(*v2, 8);
  _Block_object_dispose(*v1, 8);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32r40r56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c35_ZTSNSt3__110shared_ptrI8RegistryEE96c21_ZTSN8dispatch5queueE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(NSObject **)(a1 + 96);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if (*(char *)(a1 + 79) < 0)
LABEL_8:
    operator delete(*(void **)(a1 + 56));
LABEL_9:
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void HSFilerRT_Internal::destroySession(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD v3[6];
  int v4;

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN18HSFilerRT_Internal14destroySessionE15HSFilerClientIDy_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  v4 = a2;
  v3[4] = a1;
  v3[5] = a3;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v3);
}

void ___ZN18HSFilerRT_Internal14destroySessionE15HSFilerClientIDy_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[2];
  unint64_t v11;
  unint64_t v12;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  v1 = *(uint64_t **)(a1 + 32);
  HSFilerRT_Internal::findSession_sync(v1, *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), &v11);
  if (!v11)
    goto LABEL_9;
  v2 = (std::__shared_weak_count *)v12;
  v10[0] = v11;
  v10[1] = v12;
  if (v12)
  {
    v3 = (unint64_t *)(v12 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  HSFilerRT_Internal::destroySession_sync((uint64_t)v1, v10);
  if (!v2)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v7 = (std::__shared_weak_count *)v12;
    if (!v12)
      return;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)v12;
    if (!v12)
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_24B984E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *HSFilerRT_Internal::findSession_sync@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  if (a2 > 8)
    goto LABEL_23;
  v7 = result;
  v9 = (uint64_t **)(result + 6);
  v8 = (uint64_t *)result[6];
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = v8;
        v11 = *((_DWORD *)v8 + 8);
        if (v11 <= a2)
          break;
        v8 = (uint64_t *)*v10;
        v9 = (uint64_t **)v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= a2)
        break;
      v8 = (uint64_t *)v10[1];
      if (!v8)
      {
        v9 = (uint64_t **)(v10 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v10 = result + 6;
LABEL_9:
    v12 = v10;
    v10 = operator new(0x40uLL);
    *((_DWORD *)v10 + 8) = a2;
    v10[7] = 0;
    v10[6] = 0;
    v10[5] = v10 + 6;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v9 = v10;
    v13 = *(_QWORD *)v7[5];
    v14 = v10;
    if (v13)
    {
      v7[5] = v13;
      v14 = *v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[6], v14);
    ++v7[7];
  }
  v17 = (_QWORD *)v10[6];
  v16 = v10 + 6;
  v15 = v17;
  if (!v17)
    goto LABEL_23;
  v18 = v16;
  do
  {
    v19 = v15[4];
    v20 = v19 >= a3;
    if (v19 >= a3)
      v21 = v15;
    else
      v21 = v15 + 1;
    if (v20)
      v18 = v15;
    v15 = (_QWORD *)*v21;
  }
  while (*v21);
  if (v18 != v16 && v18[4] <= a3)
  {
    v23 = v18[5];
    v22 = v18[6];
    *a4 = v23;
    a4[1] = v22;
    if (v22)
    {
      v24 = (unint64_t *)(v22 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
LABEL_23:
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

void HSFilerRT_Internal::destroySession_sync(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  void ***v25;
  void ***v26;
  unint64_t v27;
  void ***v28;
  void ***v29;
  unint64_t v30;
  BOOL v31;
  void ****v32;
  void **v33;
  void **v34;
  void ***v35;
  void **v36;
  void **v37;
  void **v38;
  int v39;
  void ***v40;
  void **v41;
  int v42;
  void **v43;
  void **v44;
  void **v45;
  void ***v46;
  BOOL v47;
  void ***v48;
  _QWORD *v49;
  _BYTE *v50;
  void ****v51;
  void **v52;
  void **v53;
  void **v54;
  uint64_t *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v4 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = hsfiler::support::to_string(*(_DWORD *)(*a2 + 24));
    v6 = *(_QWORD *)(*a2 + 32);
    *(_DWORD *)buf = 136315394;
    v75 = v5;
    v76 = 2048;
    v77 = v6;
    _os_log_impl(&dword_24B97E000, v4, OS_LOG_TYPE_DEFAULT, "Destroying client (%s) session (%llu)", buf, 0x16u);
  }
  v72 = 0;
  v73 = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v7 || (v73 = std::__shared_weak_count::lock(v7)) == 0)
  {
LABEL_19:
    v18 = (_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 48);
    v19 = *(_DWORD *)(*a2 + 24);
    if (v17)
      goto LABEL_24;
LABEL_22:
    v20 = v18;
LABEL_28:
    v22 = operator new(0x40uLL);
    v22[8] = v19;
    *((_QWORD *)v22 + 7) = 0;
    *((_QWORD *)v22 + 6) = 0;
    *((_QWORD *)v22 + 5) = v22 + 12;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v20;
    *v18 = v22;
    v23 = **(_QWORD **)(a1 + 40);
    v24 = (uint64_t *)v22;
    if (v23)
    {
      *(_QWORD *)(a1 + 40) = v23;
      v24 = (uint64_t *)*v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v24);
    ++*(_QWORD *)(a1 + 56);
    v26 = (void ***)(v22 + 12);
    v25 = (void ***)*((_QWORD *)v22 + 6);
    if (!v25)
      goto LABEL_134;
    goto LABEL_33;
  }
  v8 = *(_QWORD *)(a1 + 192);
  v72 = v8;
  v9 = *a2;
  if (v8 && *(_QWORD *)(v8 + 32) == *(_QWORD *)(v9 + 32))
  {
    v10 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v57 = hsfiler::support::to_string(*(_DWORD *)(v9 + 24));
      v58 = *(_QWORD *)(*a2 + 32);
      *(_DWORD *)buf = 136315394;
      v75 = v57;
      v76 = 2048;
      v77 = v58;
      _os_log_error_impl(&dword_24B97E000, v10, OS_LOG_TYPE_ERROR, "error: Client (%s) destroying session (%llu) while it is currently in progress", buf, 0x16u);
      v11 = (std::__shared_weak_count *)a2[1];
      v70 = *a2;
      v71 = v11;
      if (v11)
      {
LABEL_9:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
    }
    else
    {
      v11 = (std::__shared_weak_count *)a2[1];
      v70 = v9;
      v71 = v11;
      if (v11)
        goto LABEL_9;
    }
    HSFilerRT_Internal::logSessionFileTransferStatus_sync(a1, (uint64_t)&v70);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v16 = *(std::__shared_weak_count **)(a1 + 200);
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
    HSFilerRT_Internal::resetBaseband_sync(a1, *(_DWORD *)(*a2 + 24), *(_QWORD *)(*a2 + 32), -7);
    goto LABEL_19;
  }
  v18 = (_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 48);
  v19 = *(_DWORD *)(v9 + 24);
  if (!v17)
    goto LABEL_22;
  while (1)
  {
LABEL_24:
    while (1)
    {
      v20 = (_QWORD *)v17;
      v21 = *(_DWORD *)(v17 + 32);
      if (v19 >= v21)
        break;
      v17 = *v20;
      v18 = v20;
      if (!*v20)
        goto LABEL_28;
    }
    if (v21 >= v19)
      break;
    v17 = v20[1];
    if (!v17)
    {
      v18 = v20 + 1;
      goto LABEL_28;
    }
  }
  v22 = v20;
  v26 = (void ***)(v20 + 6);
  v25 = (void ***)v20[6];
  if (!v25)
    goto LABEL_134;
LABEL_33:
  v27 = *(_QWORD *)(*a2 + 32);
  v28 = v26;
  v29 = v25;
  do
  {
    v30 = (unint64_t)v29[4];
    v31 = v30 >= v27;
    if (v30 >= v27)
      v32 = (void ****)v29;
    else
      v32 = (void ****)(v29 + 1);
    if (v31)
      v28 = v29;
    v29 = *v32;
  }
  while (*v32);
  if (v28 == v26 || v27 < (unint64_t)v28[4])
    goto LABEL_134;
  v33 = v28[1];
  if (v33)
  {
    do
    {
      v34 = v33;
      v33 = (void **)*v33;
    }
    while (v33);
  }
  else
  {
    v35 = v28;
    do
    {
      v34 = v35[2];
      v47 = *v34 == v35;
      v35 = (void ***)v34;
    }
    while (!v47);
  }
  if (*((void ****)v22 + 5) == v28)
  {
    *((_QWORD *)v22 + 5) = v34;
    --*((_QWORD *)v22 + 7);
    v36 = *v28;
    v37 = (void **)v28;
    if (!*v28)
      goto LABEL_55;
  }
  else
  {
    --*((_QWORD *)v22 + 7);
    v36 = *v28;
    v37 = (void **)v28;
    if (!*v28)
      goto LABEL_55;
  }
  v38 = v28[1];
  if (!v38)
  {
    v37 = (void **)v28;
    goto LABEL_61;
  }
  do
  {
    v37 = v38;
    v38 = (void **)*v38;
  }
  while (v38);
LABEL_55:
  v36 = (void **)v37[1];
  if (!v36)
  {
    v39 = 1;
    v40 = (void ***)v37[2];
    v41 = *v40;
    if (*v40 == v37)
      goto LABEL_57;
LABEL_62:
    v40[1] = v36;
    v42 = *((unsigned __int8 *)v37 + 24);
    if (v37 == (void **)v28)
      goto LABEL_67;
    goto LABEL_63;
  }
LABEL_61:
  v39 = 0;
  v36[2] = v37[2];
  v40 = (void ***)v37[2];
  v41 = *v40;
  if (*v40 != v37)
    goto LABEL_62;
LABEL_57:
  *v40 = v36;
  if (v37 != (void **)v25)
  {
    v41 = v40[1];
    v42 = *((unsigned __int8 *)v37 + 24);
    if (v37 == (void **)v28)
      goto LABEL_67;
LABEL_63:
    v43 = v28[2];
    v37[2] = v43;
    v43[*v28[2] != v28] = v37;
    v44 = *v28;
    *v37 = *v28;
    v44[2] = v37;
    v45 = v28[1];
    v37[1] = v45;
    if (v45)
      v45[2] = v37;
    *((_BYTE *)v37 + 24) = *((_BYTE *)v28 + 24);
    if (v25 == v28)
      v25 = (void ***)v37;
    goto LABEL_67;
  }
  v41 = 0;
  v25 = (void ***)v36;
  v42 = *((unsigned __int8 *)v37 + 24);
  if (v37 != (void **)v28)
    goto LABEL_63;
LABEL_67:
  if (!v42 || !v25)
    goto LABEL_128;
  if (!v39)
  {
    *((_BYTE *)v36 + 24) = 1;
    goto LABEL_128;
  }
  while (1)
  {
    v48 = (void ***)v41[2];
    if (*v48 != v41)
      break;
    if (*((_BYTE *)v41 + 24))
    {
      v50 = *v41;
      if (*v41)
        goto LABEL_99;
    }
    else
    {
      *((_BYTE *)v41 + 24) = 1;
      *((_BYTE *)v48 + 24) = 0;
      v54 = (void **)v41[1];
      *v48 = v54;
      if (v54)
        v54[2] = v48;
      v41[2] = v48[2];
      v48[2][*v48[2] != v48] = v41;
      v41[1] = v48;
      v48[2] = v41;
      if (v25 == v48)
        v25 = (void ***)v41;
      v41 = *v48;
      v50 = **v48;
      if (v50)
      {
LABEL_99:
        if (!v50[24])
          goto LABEL_123;
      }
    }
    v55 = (uint64_t *)v41[1];
    if (v55 && !*((_BYTE *)v55 + 24))
    {
      if (v50 && !v50[24])
      {
LABEL_123:
        v55 = (uint64_t *)v41;
      }
      else
      {
        *((_BYTE *)v55 + 24) = 1;
        *((_BYTE *)v41 + 24) = 0;
        v56 = *v55;
        v41[1] = (void *)*v55;
        if (v56)
          *(_QWORD *)(v56 + 16) = v41;
        v55[2] = (uint64_t)v41[2];
        *((_QWORD *)v41[2] + (*(_QWORD *)v41[2] != (_QWORD)v41)) = v55;
        *v55 = (uint64_t)v41;
        v41[2] = v55;
        v50 = v41;
      }
      v60 = v55[2];
      *((_BYTE *)v55 + 24) = *(_BYTE *)(v60 + 24);
      *(_BYTE *)(v60 + 24) = 1;
      v50[24] = 1;
      v61 = *(uint64_t **)v60;
      v63 = *(_QWORD *)(*(_QWORD *)v60 + 8);
      *(_QWORD *)v60 = v63;
      if (v63)
        *(_QWORD *)(v63 + 16) = v60;
      v61[2] = *(_QWORD *)(v60 + 16);
      *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v61;
      v61[1] = v60;
      goto LABEL_127;
    }
    *((_BYTE *)v41 + 24) = 0;
    v46 = (void ***)v41[2];
    if (*((_BYTE *)v46 + 24))
      v47 = v46 == v25;
    else
      v47 = 1;
    if (v47)
      goto LABEL_111;
LABEL_75:
    v41 = (void **)v46[2][*v46[2] == v46];
  }
  if (*((_BYTE *)v41 + 24))
  {
    v49 = *v41;
    if (!*v41)
    {
LABEL_89:
      v53 = (void **)v41[1];
      if (v53 && !*((_BYTE *)v53 + 24))
        goto LABEL_119;
      *((_BYTE *)v41 + 24) = 0;
      v46 = (void ***)v41[2];
      if (v46 == v25)
      {
        v46 = v25;
LABEL_111:
        *((_BYTE *)v46 + 24) = 1;
        goto LABEL_128;
      }
      if (!*((_BYTE *)v46 + 24))
        goto LABEL_111;
      goto LABEL_75;
    }
  }
  else
  {
    *((_BYTE *)v41 + 24) = 1;
    *((_BYTE *)v48 + 24) = 0;
    v51 = (void ****)v48[1];
    v52 = (void **)*v51;
    v48[1] = (void **)*v51;
    if (v52)
      v52[2] = v48;
    v51[2] = (void ***)v48[2];
    v48[2][*v48[2] != v48] = v51;
    *v51 = v48;
    v48[2] = (void **)v51;
    if (v25 == *v41)
      v25 = (void ***)v41;
    v41 = (void **)*((_QWORD *)*v41 + 1);
    v49 = *v41;
    if (!*v41)
      goto LABEL_89;
  }
  if (*((_BYTE *)v49 + 24))
    goto LABEL_89;
  v53 = (void **)v41[1];
  if (v53 && !*((_BYTE *)v53 + 24))
  {
LABEL_119:
    v49 = v41;
  }
  else
  {
    *((_BYTE *)v49 + 24) = 1;
    *((_BYTE *)v41 + 24) = 0;
    v59 = (_QWORD *)v49[1];
    *v41 = v59;
    if (v59)
      v59[2] = v41;
    v49[2] = v41[2];
    *((_QWORD *)v41[2] + (*(_QWORD *)v41[2] != (_QWORD)v41)) = v49;
    v49[1] = v41;
    v41[2] = v49;
    v53 = v41;
  }
  v60 = v49[2];
  *((_BYTE *)v49 + 24) = *(_BYTE *)(v60 + 24);
  *(_BYTE *)(v60 + 24) = 1;
  *((_BYTE *)v53 + 24) = 1;
  v61 = *(uint64_t **)(v60 + 8);
  v62 = *v61;
  *(_QWORD *)(v60 + 8) = *v61;
  if (v62)
    *(_QWORD *)(v62 + 16) = v60;
  v61[2] = *(_QWORD *)(v60 + 16);
  *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v61;
  *v61 = v60;
LABEL_127:
  *(_QWORD *)(v60 + 16) = v61;
LABEL_128:
  v64 = (std::__shared_weak_count *)v28[6];
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  operator delete(v28);
LABEL_134:
  v67 = v73;
  if (v73)
  {
    v68 = (unint64_t *)&v73->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_24B985790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9857A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9857B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B9857D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL HSFilerRT_Internal::queueSession(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, const void **a5, int a6)
{
  const void *v7;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  unint64_t v15;
  const char *v16;
  NSObject *v17;
  NSObject *v18;
  uint32_t v19;
  NSObject *v20;
  const char *v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  _BOOL8 v31;
  void *v32;
  _QWORD v34[8];
  void *aBlock;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  _BYTE buf[24];
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v7 = *a5;
  if (!*a5)
  {
    v17 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v16 = "error: NULL sessionCb param";
      v18 = v17;
      v19 = 2;
      goto LABEL_37;
    }
    return 0;
  }
  v12 = *a4;
  v11 = a4[1];
  if (*a4 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3) > 0x1E)
    {
      v13 = **(NSObject ***)(a1 + 128);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = hsfiler::support::to_string(a2);
        v15 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a3;
        *(_WORD *)&buf[22] = 2048;
        v44 = (void *)v15;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = 30;
        v16 = "error: Failed client (%s) queue session (%llu): num files (%lu) > max allowed (%d)";
        goto LABEL_36;
      }
      return 0;
    }
    do
    {
      if (*(char *)(v12 + 23) < 0)
      {
        if (*(_QWORD *)(v12 + 8) >= 0x65uLL)
          goto LABEL_15;
      }
      else if (*(unsigned __int8 *)(v12 + 23) >= 0x65uLL)
      {
LABEL_15:
        v13 = **(NSObject ***)(a1 + 128);
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          return 0;
        v23 = hsfiler::support::to_string(a2);
        if (*(char *)(v12 + 23) < 0)
          v24 = *(void **)(v12 + 8);
        else
          v24 = (void *)*(unsigned __int8 *)(v12 + 23);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a3;
        *(_WORD *)&buf[22] = 2048;
        v44 = v24;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = 100;
        v16 = "error: Failed client (%s) queue session (%llu) fileID length (%lu) > max allowed (%d)";
LABEL_36:
        v18 = v13;
        v19 = 38;
LABEL_37:
        _os_log_error_impl(&dword_24B97E000, v18, OS_LOG_TYPE_ERROR, v16, buf, v19);
        return 0;
      }
      v12 += 24;
    }
    while (v12 != v11);
    v25 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = hsfiler::support::to_string(a2);
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a3;
      _os_log_impl(&dword_24B97E000, v25, OS_LOG_TYPE_DEFAULT, "Queueing client (%s) session (%llu)", buf, 0x16u);
      v7 = *a5;
    }
    v38 = 0;
    v39 = &v38;
    v40 = 0x2000000000;
    v41 = 0;
    v26 = MEMORY[0x24BDAC760];
    v34[0] = MEMORY[0x24BDAC760];
    v34[1] = 1174405120;
    v34[2] = ___ZN18HSFilerRT_Internal12queueSessionE15HSFilerClientIDyRKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEEj_block_invoke;
    v34[3] = &__block_descriptor_tmp_9_0;
    v36 = a2;
    v34[5] = a1;
    v34[6] = a3;
    v34[7] = a4;
    if (v7)
      v27 = _Block_copy(v7);
    else
      v27 = 0;
    v37 = a6;
    aBlock = v27;
    v34[4] = &v38;
    v42 = v34;
    *(_QWORD *)buf = v26;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    v44 = &__block_descriptor_tmp_52;
    v45 = a1 + 8;
    v46 = &v42;
    v28 = *(NSObject **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32))
    {
      dispatch_async_and_wait(v28, buf);
      if (*((_BYTE *)v39 + 24))
        goto LABEL_25;
    }
    else
    {
      dispatch_sync(v28, buf);
      if (*((_BYTE *)v39 + 24))
      {
LABEL_25:
        v29 = **(NSObject ***)(a1 + 128);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v30 = hsfiler::support::to_string(a2);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v30;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a3;
          _os_log_impl(&dword_24B97E000, v29, OS_LOG_TYPE_DEFAULT, "Queued client (%s) session (%llu)", buf, 0x16u);
          v31 = *((_BYTE *)v39 + 24) != 0;
          v32 = aBlock;
          if (!aBlock)
            goto LABEL_33;
        }
        else
        {
          v31 = 1;
          v32 = aBlock;
          if (!aBlock)
          {
LABEL_33:
            _Block_object_dispose(&v38, 8);
            return v31;
          }
        }
LABEL_32:
        _Block_release(v32);
        goto LABEL_33;
      }
    }
    v31 = 0;
    v32 = aBlock;
    if (!aBlock)
      goto LABEL_33;
    goto LABEL_32;
  }
  v20 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = hsfiler::support::to_string(a2);
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a3;
    v16 = "error: Failed client (%s) queue session (%llu): fileIDs empty";
    v18 = v20;
    v19 = 22;
    goto LABEL_37;
  }
  return 0;
}

void sub_24B985C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, uint64_t a19, char a20)
{
  if (aBlock)
    _Block_release(aBlock);
  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void sub_24B985C9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN18HSFilerRT_Internal12queueSessionE15HSFilerClientIDyRKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  const char *v5;
  std::string::size_type v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  NSObject *v11;
  std::string::size_type v12;
  void *v13;
  const void *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::value_type *v18;
  std::string::size_type size;
  std::string::size_type v20;
  uint64_t v21;
  unsigned int v22;
  std::string::size_type v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];
  int v34;
  std::string v35;
  uint64_t v36;
  std::string v37;
  unint64_t v38;
  unint64_t v39;
  const void *v40;
  std::string buf;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v2 = *(_QWORD *)(a1 + 40);
  HSFilerRT_Internal::findSession_sync((uint64_t *)v2, *(_DWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), &v38);
  v3 = v38;
  if (!v38)
    goto LABEL_38;
  if (*(_BYTE *)(v38 + 113))
  {
    v4 = **(NSObject ***)(v2 + 128);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = hsfiler::support::to_string(*(_DWORD *)(a1 + 72));
      v6 = *(_QWORD *)(a1 + 48);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
      _os_log_error_impl(&dword_24B97E000, v4, OS_LOG_TYPE_ERROR, "error: Failed client (%s) queue session (%llu): already queued", (uint8_t *)&buf, 0x16u);
    }
    goto LABEL_38;
  }
  v32 = a1;
  v7 = *(uint64_t **)(a1 + 56);
  v8 = *v7;
  v9 = v7[1];
  if (*v7 != v9)
  {
    do
    {
      buf.__r_.__value_.__r.__words[0] = v8;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3 + 40, v8, (__int128 **)&buf)+ 40) = 0;
      v11 = **(NSObject ***)(v2 + 128);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = v8;
        if (*(char *)(v8 + 23) < 0)
          v12 = *(_QWORD *)v8;
        v10 = *(_QWORD *)(v3 + 32);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v12;
        _os_log_impl(&dword_24B97E000, v11, OS_LOG_TYPE_DEFAULT, "Session (%llu) added file (%s)", (uint8_t *)&buf, 0x16u);
      }
      v8 += 24;
    }
    while (v8 != v9);
  }
  v13 = *(void **)(v32 + 64);
  if (v13)
    v13 = _Block_copy(v13);
  v14 = *(const void **)(v3 + 88);
  *(_QWORD *)(v3 + 88) = v13;
  if (v14)
    _Block_release(v14);
  std::to_string(&v37, *(_QWORD *)(v3 + 32));
  v15 = std::string::insert(&v37, 0, "Session ", 8uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&buf, " timer", 6uLL);
  v18 = (std::string::value_type *)v17->__r_.__value_.__r.__words[0];
  size = v17->__r_.__value_.__l.__size_;
  v20 = v17->__r_.__value_.__r.__words[2];
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_21:
    operator delete(v37.__r_.__value_.__l.__data_);
    v21 = *(_QWORD *)(v2 + 160);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_19;
LABEL_22:
    std::string::__init_copy_ctor_external(&v35, v18, size);
    goto LABEL_23;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
LABEL_18:
  v21 = *(_QWORD *)(v2 + 160);
  if ((v20 & 0x8000000000000000) != 0)
    goto LABEL_22;
LABEL_19:
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  v35.__r_.__value_.__l.__size_ = size;
  v35.__r_.__value_.__r.__words[2] = v20;
LABEL_23:
  v22 = *(_DWORD *)(v32 + 76);
  v23 = *(_QWORD *)(v2 + 24);
  if (v23)
    dispatch_retain(*(dispatch_object_t *)(v2 + 24));
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN18HSFilerRT_Internal12queueSessionE15HSFilerClientIDyRKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEEj_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_8_0;
  v34 = *(_DWORD *)(v32 + 72);
  v24 = *(_QWORD *)(v32 + 48);
  aBlock[4] = v2;
  aBlock[5] = v24;
  v25 = _Block_copy(aBlock);
  buf = v35;
  memset(&v35, 0, sizeof(v35));
  v37.__r_.__value_.__r.__words[0] = v23;
  v40 = v25;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, _QWORD, uint64_t, _QWORD, std::string *, const void **))(*(_QWORD *)v21 + 16))(&v36, v21, &buf, 0, 1000000 * v22, 0, &v37, &v40);
  if (v40)
    _Block_release(v40);
  if (v37.__r_.__value_.__r.__words[0])
    dispatch_release((dispatch_object_t)v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v26 = v36;
  v36 = 0;
  v27 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v26;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v36;
    v36 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  *(_BYTE *)(v3 + 113) = 1;
  HSFilerRT_Internal::sessionScheduler_sync((HSFilerRT_Internal *)v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 32) + 8) + 24) = 1;
  if ((v20 & 0x8000000000000000) != 0)
    operator delete(v18);
LABEL_38:
  v29 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v30 = (unint64_t *)(v39 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_24B9860E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,dispatch_object_t object,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  void *v34;
  uint64_t v35;

  if (v35 < 0)
  {
    operator delete(v34);
    std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void ___ZN18HSFilerRT_Internal12queueSessionE15HSFilerClientIDyRKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEEj_block_invoke_7(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  HSFilerRT_Internal *v3;
  char v4;

  v1 = *(_DWORD *)(a1 + 48);
  v3 = *(HSFilerRT_Internal **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = 0;
  HSFilerRT_Internal::abortSession_sync((uint64_t)v3, v1, v2, -2, &v4);
  if (v4)
    HSFilerRT_Internal::resetBaseband_sync((uint64_t)v3, v1, v2, -2);
  else
    HSFilerRT_Internal::sessionScheduler_sync(v3);
}

void HSFilerRT_Internal::handleSessionError_sync(HSFilerRT_Internal *a1, unsigned int a2, unint64_t a3, int a4)
{
  char v8;

  v8 = 0;
  HSFilerRT_Internal::abortSession_sync((uint64_t)a1, a2, a3, a4, &v8);
  if (v8 && ((a4 + 10) <= 8 && ((1 << (a4 + 10)) & 0x137) != 0 || a4 == 0x7FFFFFFF))
    HSFilerRT_Internal::resetBaseband_sync((uint64_t)a1, a2, a3, a4);
  else
    HSFilerRT_Internal::sessionScheduler_sync(a1);
}

void HSFilerRT_Internal::sessionScheduler_sync(HSFilerRT_Internal *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  NSObject *v32;
  const char *v33;
  void **v34;
  void *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *__dst[5];
  _BYTE buf[24];
  void *v40;
  HSFilerRT_Internal *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 25);
  if ((!v2 || *(_QWORD *)(v2 + 8) == -1) && !*((_BYTE *)this + 216))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 5);
    v4 = (uint64_t **)((char *)this + 48);
    if (v3 != (uint64_t *)((char *)this + 48))
    {
      v5 = -1;
      v6 = -1;
      do
      {
        if (v3[7])
        {
          v7 = (uint64_t *)v3[5];
          if (v7 != v3 + 6)
          {
            v8 = 0;
            do
            {
              v9 = (uint64_t *)v7[1];
              v10 = v7;
              if (v9)
              {
                do
                {
                  v11 = v9;
                  v9 = (uint64_t *)*v9;
                }
                while (v9);
              }
              else
              {
                do
                {
                  v11 = (uint64_t *)v10[2];
                  v12 = *v11 == (_QWORD)v10;
                  v10 = v11;
                }
                while (!v12);
              }
              v8 += *(unsigned __int8 *)(v7[5] + 113);
              v7 = v11;
            }
            while (v11 != v3 + 6);
            if (v8 && v8 < v5)
            {
              v6 = *((_DWORD *)v3 + 8);
              v5 = v8;
            }
          }
        }
        v13 = (uint64_t *)v3[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v3[2];
            v12 = *v14 == v3;
            v3 = (uint64_t *)v14;
          }
          while (!v12);
        }
        v3 = (uint64_t *)v14;
      }
      while (v14 != v4);
      if (v6 != -1)
      {
        v15 = *v4;
        v16 = (uint64_t **)((char *)this + 48);
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v16 = (uint64_t **)v15;
              v17 = *((_DWORD *)v15 + 8);
              if (v6 >= v17)
                break;
              v15 = *v16;
              v4 = v16;
              if (!*v16)
                goto LABEL_35;
            }
            if (v17 >= v6)
              break;
            v15 = v16[1];
            if (!v15)
            {
              v4 = v16 + 1;
              goto LABEL_35;
            }
          }
        }
        else
        {
LABEL_35:
          v18 = (char *)v16;
          v16 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v16 + 8) = v6;
          v16[7] = 0;
          v16[6] = 0;
          v16[5] = (uint64_t *)(v16 + 6);
          *v16 = 0;
          v16[1] = 0;
          v16[2] = (uint64_t *)v18;
          *v4 = (uint64_t *)v16;
          v19 = **((_QWORD **)this + 5);
          v20 = (uint64_t *)v16;
          if (v19)
          {
            *((_QWORD *)this + 5) = v19;
            v20 = *v4;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 6), v20);
          ++*((_QWORD *)this + 7);
        }
        v21 = v16[5];
        v23 = v21[5];
        v22 = (std::__shared_weak_count *)v21[6];
        if (v22)
        {
          p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
          do
            v25 = __ldxr(p_shared_weak_owners);
          while (__stxr(v25 + 1, p_shared_weak_owners));
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
        *((_QWORD *)this + 24) = v23;
        *((_QWORD *)this + 25) = v22;
        if (v26)
        {
          std::__shared_weak_count::__release_weak(v26);
          v22 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
        }
        if (v22)
        {
          v27 = std::__shared_weak_count::lock(v22);
          __dst[4] = v27;
          if (v27)
          {
            v28 = v27;
            v29 = *((_QWORD *)this + 24);
            __dst[3] = (void *)v29;
            if (v29)
            {
              memset(__dst, 170, 24);
              if (*(_BYTE *)(v29 + 112))
                v30 = "read";
              else
                v30 = "write";
              if (*(_BYTE *)(v29 + 112))
                v31 = 4;
              else
                v31 = 5;
              HIBYTE(__dst[2]) = v31;
              memcpy(__dst, v30, v31);
              *(_BYTE *)((unint64_t)__dst | v31) = 0;
              v32 = **((_QWORD **)this + 16);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                v33 = hsfiler::support::to_string(v6);
                v34 = __dst;
                if (SHIBYTE(__dst[2]) < 0)
                  v34 = (void **)__dst[0];
                v35 = *(void **)(v29 + 32);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v33;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v34;
                *(_WORD *)&buf[22] = 2048;
                v40 = v35;
                _os_log_impl(&dword_24B97E000, v32, OS_LOG_TYPE_DEFAULT, "Scheduling client (%s) %s session (%llu)", buf, 0x20u);
              }
              *(_QWORD *)buf = MEMORY[0x24BDAC760];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZN18HSFilerRT_Internal12startSessionEv_block_invoke;
              v40 = &__block_descriptor_tmp_12_0;
              v41 = this;
              ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)this + 1, (uint64_t)buf);
              if (SHIBYTE(__dst[2]) < 0)
                operator delete(__dst[0]);
            }
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
      }
    }
  }
}

void sub_24B9866B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32r64c58_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  result = *(void **)(a2 + 64);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_32r64c58_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

BOOL HSFilerRT_Internal::removeSessionFromQueue(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  _BOOL8 v10;
  _QWORD v12[7];
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = hsfiler::support::to_string(a2);
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a3;
    _os_log_impl(&dword_24B97E000, v6, OS_LOG_TYPE_DEFAULT, "Removing client (%s) session (%llu) from queue", buf, 0x16u);
  }
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = ___ZN18HSFilerRT_Internal22removeSessionFromQueueE15HSFilerClientIDy_block_invoke;
  v12[3] = &__block_descriptor_tmp_10_0;
  v12[5] = a1;
  v12[6] = a3;
  v13 = a2;
  v12[4] = &v14;
  v18 = v12;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v20 = &__block_descriptor_tmp_52;
  v21 = a1 + 8;
  v22 = &v18;
  v7 = *(NSObject **)(a1 + 24);
  if (*(_QWORD *)(a1 + 32))
  {
    dispatch_async_and_wait(v7, buf);
    if (*((_BYTE *)v15 + 24))
      goto LABEL_5;
LABEL_8:
    v10 = 0;
    goto LABEL_10;
  }
  dispatch_sync(v7, buf);
  if (!*((_BYTE *)v15 + 24))
    goto LABEL_8;
LABEL_5:
  v8 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = hsfiler::support::to_string(a2);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a3;
    _os_log_impl(&dword_24B97E000, v8, OS_LOG_TYPE_DEFAULT, "Removed client (%s) session (%llu) from queue", buf, 0x16u);
    v10 = *((_BYTE *)v15 + 24) != 0;
  }
  else
  {
    v10 = 1;
  }
LABEL_10:
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_24B986954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN18HSFilerRT_Internal22removeSessionFromQueueE15HSFilerClientIDy_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v27 = 0;
  v28 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 200);
  if (v3
    && (v4 = std::__shared_weak_count::lock(v3), (v28 = v4) != 0)
    && (v5 = *(_QWORD *)(v2 + 192), (v27 = v5) != 0))
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(v5 + 32) == v6)
    {
      if (*(_BYTE *)(v5 + 114))
      {
        v7 = v4;
        v8 = **(NSObject ***)(v2 + 128);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v22 = hsfiler::support::to_string(*(_DWORD *)(a1 + 56));
          v23 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 136315394;
          v30 = v22;
          v31 = 2048;
          v32 = v23;
          _os_log_error_impl(&dword_24B97E000, v8, OS_LOG_TYPE_ERROR, "error: Failed client (%s) remove session (%llu): session is in progress", buf, 0x16u);
        }
        v26[0] = v5;
        v26[1] = v7;
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        HSFilerRT_Internal::logSessionFileTransferStatus_sync(v2, (uint64_t)v26);
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          v12 = v7;
LABEL_24:
          std::__shared_weak_count::__release_weak(v12);
          goto LABEL_25;
        }
        goto LABEL_25;
      }
      v6 = *(_QWORD *)(v5 + 32);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
  }
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  HSFilerRT_Internal::findSession_sync((uint64_t *)v2, *(_DWORD *)(a1 + 56), v6, &v24);
  if (v24)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v24 + 16))(v24);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v13 = (std::__shared_weak_count *)v25;
    if (!v25)
      goto LABEL_25;
  }
  else
  {
    v14 = **(NSObject ***)(v2 + 128);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v20 = hsfiler::support::to_string(*(_DWORD *)(a1 + 56));
      v21 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136315394;
      v30 = v20;
      v31 = 2048;
      v32 = v21;
      _os_log_error_impl(&dword_24B97E000, v14, OS_LOG_TYPE_ERROR, "error: Unable to find client (%s) session (%llu): this should never happen", buf, 0x16u);
      v13 = (std::__shared_weak_count *)v25;
      if (!v25)
        goto LABEL_25;
    }
    else
    {
      v13 = (std::__shared_weak_count *)v25;
      if (!v25)
        goto LABEL_25;
    }
  }
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    v12 = v13;
    goto LABEL_24;
  }
LABEL_25:
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_24B986BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B986C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_24B986C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HSFilerRT_Internal::logSessionFileTransferStatus_sync(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  _QWORD *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  _QWORD *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  for (i = *(uint64_t **)(*(_QWORD *)a2 + 56); i; i = (uint64_t *)*i)
  {
    v7 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = i + 2;
      v9 = hsfiler::support::to_string(*(_DWORD *)(*(_QWORD *)a2 + 24));
      if (*((char *)i + 39) < 0)
        v8 = (_QWORD *)*v8;
      v5 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      v6 = "transferred";
      if (!*((_BYTE *)i + 40))
        v6 = "not transferred";
      *(_DWORD *)buf = 136315906;
      v11 = v9;
      v12 = 2048;
      v13 = v5;
      v14 = 2080;
      v15 = v8;
      v16 = 2080;
      v17 = v6;
      _os_log_impl(&dword_24B97E000, v7, OS_LOG_TYPE_INFO, "Client (%s) session (%llu): file (%s) %s", buf, 0x2Au);
    }
  }
}

void HSFilerRT_Internal::startSession(HSFilerRT_Internal *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN18HSFilerRT_Internal12startSessionEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_12_0;
  v1[4] = this;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN18HSFilerRT_Internal12startSessionEv_block_invoke(uint64_t a1)
{
  unsigned int *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[5];
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  char v39;

  v1 = *(unsigned int **)(a1 + 32);
  v37 = 0;
  v38 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)v1 + 25);
  if (v2)
  {
    v38 = std::__shared_weak_count::lock(v2);
    if (!v38)
      return;
    v3 = *((_QWORD *)v1 + 24);
    v37 = v3;
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 113))
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v1 + 25);
        *((_QWORD *)v1 + 24) = 0;
        *((_QWORD *)v1 + 25) = 0;
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        HSFilerRT_Internal::sessionScheduler_sync((HSFilerRT_Internal *)v1);
        goto LABEL_22;
      }
      if (*(_BYTE *)(v3 + 114))
        goto LABEL_6;
      v7 = v1 + 46;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 + 1;
      }
      while (__stlxr(v9, v7));
      v10 = v37;
      *(_DWORD *)(v37 + 96) = v9;
      if (*(_BYTE *)(v10 + 112))
      {
        v35 = v10;
        v36 = v38;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = (*(uint64_t (**)(unsigned int *, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v35);
        v14 = v36;
        if (!v36)
          goto LABEL_35;
        v15 = (unint64_t *)&v36->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
      }
      else
      {
        v33 = v10;
        v34 = v38;
        if (v38)
        {
          v20 = (unint64_t *)&v38->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v13 = (*(uint64_t (**)(unsigned int *, uint64_t *))(*(_QWORD *)v1 + 24))(v1, &v33);
        v14 = v34;
        if (!v34)
          goto LABEL_35;
        v22 = (unint64_t *)&v34->__shared_owners_;
        do
          v16 = __ldaxr(v22);
        while (__stlxr(v16 - 1, v22));
      }
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if ((v13 & 1) != 0)
        {
LABEL_38:
          v23 = v37;
          v24 = *(_QWORD *)(v37 + 32);
          v30[0] = MEMORY[0x24BDAC760];
          v30[1] = 1174405120;
          v30[2] = ___ZN18HSFilerRT_Internal12startSessionEv_block_invoke_2;
          v30[3] = &__block_descriptor_tmp_11_0;
          v30[4] = v37;
          v31 = v38;
          if (v38)
          {
            v25 = (unint64_t *)&v38->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          v32 = v24;
          dispatch_async(*(dispatch_queue_t *)(v23 + 80), v30);
          *(_BYTE *)(v23 + 114) = 1;
          v27 = v31;
          if (v31)
          {
            v28 = (unint64_t *)&v31->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          goto LABEL_22;
        }
LABEL_6:
        v4 = *(unsigned int *)(v37 + 24);
        v5 = *(_QWORD *)(v37 + 32);
        v39 = 0;
        HSFilerRT_Internal::abortSession_sync((uint64_t)v1, v4, v5, -5, &v39);
        if (v39)
          HSFilerRT_Internal::resetBaseband_sync(v1, v4, v5, 4294967291);
        else
          HSFilerRT_Internal::sessionScheduler_sync((HSFilerRT_Internal *)v1);
        goto LABEL_22;
      }
LABEL_35:
      if (v13)
        goto LABEL_38;
      goto LABEL_6;
    }
  }
LABEL_22:
  v17 = v38;
  if (v38)
  {
    v18 = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_24B9870A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v8 - 56);
  _Unwind_Resume(a1);
}

void sub_24B9870C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v10 - 56);
  _Unwind_Resume(a1);
}

void sub_24B9870E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1 - 56);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18HSFilerRT_Internal12startSessionEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88), *(_QWORD *)(a1 + 48), 0);
}

uint64_t __copy_helper_block_e8_32c56_ZTSNSt3__110shared_ptrIN18HSFilerRT_Internal7SessionEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c56_ZTSNSt3__110shared_ptrIN18HSFilerRT_Internal7SessionEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL HSFilerRT_Internal::read(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void **a5, _QWORD *a6)
{
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  NSObject *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[8];
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD block[6];
  _QWORD v29[6];
  void *aBlock;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*a5)
  {
    v23 = 0;
    v24 = &v23;
    v25 = 0x2000000000;
    v26 = 0;
    v12 = MEMORY[0x24BDAC760];
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 1107296256;
    v21[2] = ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke;
    v21[3] = &__block_descriptor_tmp_13_0;
    v22 = a2;
    v21[6] = a3;
    v21[7] = a4;
    v21[4] = &v23;
    v21[5] = a1;
    v27 = v21;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_52;
    block[4] = a1 + 8;
    block[5] = &v27;
    v13 = *(NSObject **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32))
    {
      dispatch_async_and_wait(v13, block);
      v14 = *((_BYTE *)v24 + 24) != 0;
      if (!*((_BYTE *)v24 + 24))
        goto LABEL_23;
    }
    else
    {
      dispatch_sync(v13, block);
      v14 = *((_BYTE *)v24 + 24) != 0;
      if (!*((_BYTE *)v24 + 24))
      {
LABEL_23:
        _Block_object_dispose(&v23, 8);
        return v14;
      }
    }
    v29[0] = v12;
    v29[1] = 1174405120;
    v29[2] = ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_14;
    v29[3] = &__block_descriptor_tmp_23;
    v29[4] = a1;
    v29[5] = a3;
    v34 = a2;
    v16 = *a5;
    if (*a5)
      v16 = _Block_copy(v16);
    aBlock = v16;
    v31 = a4;
    v17 = v32;
    v18 = a6[3];
    if (v18)
    {
      if ((_QWORD *)v18 == a6)
      {
        v33 = v32;
        (*(void (**)(_QWORD *, _BYTE *))(*a6 + 24))(a6, v32);
LABEL_16:
        ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v29);
        if (v33 == v32)
        {
          v19 = 4;
        }
        else
        {
          if (!v33)
            goto LABEL_21;
          v19 = 5;
          v17 = v33;
        }
        (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_21:
        if (aBlock)
          _Block_release(aBlock);
        goto LABEL_23;
      }
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
    v33 = (_BYTE *)v18;
    goto LABEL_16;
  }
  v15 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block[0]) = 0;
    _os_log_error_impl(&dword_24B97E000, v15, OS_LOG_TYPE_ERROR, "error: NULL transferCb param", (uint8_t *)block, 2u);
  }
  return 0;
}

void sub_24B987400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v10 = 0xAAAAAAAAAAAAAAAALL;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  v2 = *(_QWORD *)(a1 + 40);
  HSFilerRT_Internal::findSession_sync((uint64_t *)v2, *(_DWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), &v10);
  if (!v10)
    goto LABEL_6;
  if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(v10 + 40), *(_QWORD *)(a1 + 56)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v3 = (std::__shared_weak_count *)v11;
    if (!v11)
      return;
    goto LABEL_7;
  }
  v4 = **(NSObject ***)(v2 + 128);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
LABEL_6:
    v3 = (std::__shared_weak_count *)v11;
    if (!v11)
      return;
    goto LABEL_7;
  }
  v7 = hsfiler::support::to_string(*(_DWORD *)(a1 + 64));
  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(uint64_t **)(a1 + 56);
  if (*((char *)v8 + 23) < 0)
    v8 = (uint64_t *)*v8;
  *(_DWORD *)buf = 136315650;
  v13 = v7;
  v14 = 2048;
  v15 = v9;
  v16 = 2080;
  v17 = v8;
  _os_log_error_impl(&dword_24B97E000, v4, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): invalid fileID (%s)", buf, 0x20u);
  v3 = (std::__shared_weak_count *)v11;
  if (v11)
  {
LABEL_7:
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B9875A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_14(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  void **v51;
  uint64_t *v52;
  const char *v53;
  uint64_t v54;
  NSObject *v55;
  int v56;
  NSObject *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t **v62;
  _QWORD v63[4];
  void *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _QWORD v72[4];
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD block[4];
  void *aBlock;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[4];
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _BYTE v86[24];
  _BYTE *v87;
  _BYTE buf[24];
  void **v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v84 = 0;
  v85 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 200);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v85 = v4;
    if (v4)
    {
      v5 = *(_QWORD *)(v2 + 192);
      v84 = v5;
      if (v5)
      {
        if (*(_QWORD *)(v5 + 32) == *(_QWORD *)(a1 + 40))
        {
          v6 = v4;
          v7 = *(_QWORD *)(a1 + 56);
          if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(v5 + 40), v7))
          {
            *(_QWORD *)buf = v7;
            if (*((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 40, v7, (__int128 **)buf)+ 40))
            {
              v8 = **(NSObject ***)(v2 + 128);
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              {
                v53 = hsfiler::support::to_string(*(_DWORD *)(a1 + 96));
                v54 = *(_QWORD *)(a1 + 40);
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v53;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v54;
                _os_log_error_impl(&dword_24B97E000, v8, OS_LOG_TYPE_ERROR, "error: Failed client (%s) session (%llu) readWithBuff: fileID already transferred", buf, 0x16u);
              }
              block[0] = MEMORY[0x24BDAC760];
              block[1] = 1174405120;
              block[2] = ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_17;
              block[3] = &__block_descriptor_tmp_18;
              v9 = *(void **)(a1 + 48);
              if (v9)
                v9 = _Block_copy(v9);
              v10 = *(_QWORD *)(a1 + 40);
              aBlock = v9;
              v78 = v10;
              v79 = *(_QWORD *)(a1 + 56);
              dispatch_async(*(dispatch_queue_t *)(v5 + 80), block);
              if (aBlock)
                _Block_release(aBlock);
              goto LABEL_25;
            }
          }
          v21 = **(NSObject ***)(v2 + 128);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v22 = hsfiler::support::to_string(*(_DWORD *)(a1 + 96));
            v23 = *(_QWORD *)(a1 + 40);
            v24 = *(void ***)(a1 + 56);
            if (*((char *)v24 + 23) < 0)
              v24 = (void **)*v24;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v22;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v23;
            *(_WORD *)&buf[22] = 2080;
            v89 = v24;
            _os_log_impl(&dword_24B97E000, v21, OS_LOG_TYPE_DEFAULT, " ------ Reading client (%s) session (%llu) file (%s) to buff ------ ", buf, 0x20u);
          }
          v25 = MEMORY[0x24BDAC760];
          v72[0] = MEMORY[0x24BDAC760];
          v72[1] = 1174405120;
          v72[2] = ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_19;
          v72[3] = &__block_descriptor_tmp_20;
          v26 = *(void **)(a1 + 48);
          if (v26)
            v26 = _Block_copy(v26);
          v27 = *(_QWORD *)(a1 + 40);
          v73 = v26;
          v74 = v27;
          v75 = *(_QWORD *)(a1 + 56);
          v70 = v5;
          v71 = v6;
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
          v30 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 40))(v2, &v70, *(_QWORD *)(a1 + 56));
          v31 = v71;
          if (v71)
          {
            v32 = (unint64_t *)&v71->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (!v30)
          {
LABEL_82:
            v56 = -9;
LABEL_83:
            v58 = v84;
            v63[0] = v25;
            v63[1] = 1174405120;
            v63[2] = ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_21;
            v63[3] = &__block_descriptor_tmp_22;
            v59 = *(void **)(a1 + 48);
            if (v59)
              v59 = _Block_copy(v59);
            v60 = *(_QWORD *)(a1 + 40);
            v64 = v59;
            v65 = v60;
            v67 = v56;
            v66 = *(_QWORD *)(a1 + 56);
            dispatch_async(*(dispatch_queue_t *)(v58 + 80), v63);
            HSFilerRT_Internal::handleSessionError_sync((HSFilerRT_Internal *)v2, *(_DWORD *)(v58 + 24), *(_QWORD *)(a1 + 40), v56);
            if (v64)
              _Block_release(v64);
LABEL_76:
            if (v73)
              _Block_release(v73);
            goto LABEL_25;
          }
          if (v30 > 0xF00000)
          {
            v55 = **(NSObject ***)(v2 + 128);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v30;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = 15728640;
              _os_log_error_impl(&dword_24B97E000, v55, OS_LOG_TYPE_ERROR, "error: File size (%llu) reported by baseband > max allowed (%zu)", buf, 0x16u);
            }
            v56 = -14;
            goto LABEL_83;
          }
          v68 = v84;
          v69 = v85;
          if (v85)
          {
            v34 = (unint64_t *)&v85->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v36 = *(_QWORD *)(a1 + 56);
          v37 = *(_QWORD *)(a1 + 88);
          if (v37)
          {
            if (v37 == a1 + 64)
            {
              v87 = v86;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v37 + 24))(v37, v86);
LABEL_54:
              v40 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v2 + 48))(v2, &v68, v36, v30, v86);
              v41 = v87;
              if (v87 == v86)
              {
                v42 = 4;
                v41 = v86;
              }
              else
              {
                if (!v87)
                  goto LABEL_59;
                v42 = 5;
              }
              (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_59:
              v43 = v69;
              if (v69)
              {
                v44 = (unint64_t *)&v69->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              if ((v40 & 1) != 0)
              {
                v46 = v84;
                v47 = *(_QWORD *)(a1 + 56);
                if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(v84 + 40), v47))
                {
                  *(_QWORD *)buf = v47;
                  *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46 + 40, v47, (__int128 **)buf)+ 40) = 1;
                }
                dispatch_async(*(dispatch_queue_t *)(v46 + 80), v72);
                v48 = **(NSObject ***)(v2 + 128);
                if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                {
                  v49 = hsfiler::support::to_string(*(_DWORD *)(a1 + 96));
                  v50 = *(_QWORD *)(a1 + 40);
                  v51 = *(void ***)(a1 + 56);
                  if (*((char *)v51 + 23) < 0)
                    v51 = (void **)*v51;
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = v49;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v50;
                  *(_WORD *)&buf[22] = 2080;
                  v89 = v51;
                  _os_log_impl(&dword_24B97E000, v48, OS_LOG_TYPE_DEFAULT, " ------ Successfully read client (%s) session (%llu) file (%s) to buff ------ ", buf, 0x20u);
                }
                v52 = (uint64_t *)(v46 + 56);
                while (1)
                {
                  v52 = (uint64_t *)*v52;
                  if (!v52)
                    break;
                  if (!*((_BYTE *)v52 + 40))
                    goto LABEL_76;
                }
                *(_QWORD *)buf = v25;
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = ___ZN18HSFilerRT_Internal10endSessionEv_block_invoke;
                v89 = (void **)&__block_descriptor_tmp_36;
                v90 = v2;
                ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(v2 + 8), (uint64_t)buf);
                goto LABEL_76;
              }
              v57 = **(NSObject ***)(v2 + 128);
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                v61 = *(_QWORD *)(v84 + 32);
                v62 = *(uint64_t ***)(a1 + 56);
                if (*((char *)v62 + 23) < 0)
                  v62 = (uint64_t **)*v62;
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v61;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v62;
                _os_log_error_impl(&dword_24B97E000, v57, OS_LOG_TYPE_ERROR, "error: Failed to read file from baseband (session: %llu, file: %s)", buf, 0x16u);
              }
              goto LABEL_82;
            }
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
          }
          v87 = (_BYTE *)v37;
          goto LABEL_54;
        }
      }
    }
  }
  v11 = **(NSObject ***)(v2 + 128);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v38 = hsfiler::support::to_string(*(_DWORD *)(a1 + 96));
    v39 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v38;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v39;
    _os_log_error_impl(&dword_24B97E000, v11, OS_LOG_TYPE_ERROR, "error: Failed client (%s) session (%llu) readWithBuff: session not running", buf, 0x16u);
  }
  memset(buf, 170, 16);
  HSFilerRT_Internal::findSession_sync((uint64_t *)v2, *(_DWORD *)(a1 + 96), *(_QWORD *)(a1 + 40), buf);
  v12 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v80[0] = MEMORY[0x24BDAC760];
    v80[1] = 1174405120;
    v80[2] = ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_15;
    v80[3] = &__block_descriptor_tmp_16;
    v13 = *(void **)(a1 + 48);
    if (v13)
      v13 = _Block_copy(v13);
    v14 = *(_QWORD *)(a1 + 40);
    v81 = v13;
    v82 = v14;
    v83 = *(_QWORD *)(a1 + 56);
    dispatch_async(*(dispatch_queue_t *)(v12 + 80), v80);
    if (v81)
      _Block_release(v81);
  }
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_25:
  v18 = v85;
  if (v85)
  {
    v19 = (unint64_t *)&v85->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_24B987D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_15(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1[4] + 16))(a1[4], a1[5], 4294967293, a1[6]);
}

void *__copy_helper_block_e8_32c124_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c124_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_17(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1[4] + 16))(a1[4], a1[5], 4294967283, a1[6]);
}

uint64_t ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_19(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], a1[5], 0, a1[6]);
}

void HSFilerRT_Internal::endSession(HSFilerRT_Internal *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN18HSFilerRT_Internal10endSessionEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_36;
  v1[4] = this;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

uint64_t ___ZN18HSFilerRT_Internal4readE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFvPKvmEEE_block_invoke_21(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

uint64_t __copy_helper_block_e8_48c124_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE64c30_ZTSNSt3__18functionIFvPKvmEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t result;

  v4 = *(void **)(a2 + 48);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 48) = v4;
  result = *(_QWORD *)(a2 + 88);
  if (!result)
    goto LABEL_6;
  if (result != a2 + 64)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_6:
    *(_QWORD *)(a1 + 88) = result;
    return result;
  }
  *(_QWORD *)(a1 + 88) = a1 + 64;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 88) + 24))(*(_QWORD *)(a2 + 88));
}

void sub_24B987FC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 48);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c124_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE64c30_ZTSNSt3__18functionIFvPKvmEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (const void *)a1[6];
  if (v5)
    _Block_release(v5);
}

BOOL HSFilerRT_Internal::readWithBuff(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, const void **a6)
{
  uint64_t v9;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v20;
  void *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v9 = *a5;
  if (*a5)
  {
    if (*a6)
    {
      v12 = _Block_copy(*a6);
      v9 = *a5;
      v13 = a5[1];
      v21 = v12;
      if (!v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 0;
      v21 = 0;
      v13 = a5[1];
      if (!v13)
        goto LABEL_8;
    }
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
LABEL_8:
    v22[0] = &off_251CC2DB0;
    v22[1] = v9;
    v22[2] = v13;
    v23 = v22;
    v16 = HSFilerRT_Internal::read(a1, a2, a3, a4, &v21, v22);
    v17 = v23;
    if (v23 == v22)
    {
      v18 = 4;
      v17 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_13;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_13:
    if (v12)
      _Block_release(v12);
    return v16;
  }
  v20 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v25 = hsfiler::support::to_string(a2);
    v26 = 2048;
    v27 = a3;
    _os_log_error_impl(&dword_24B97E000, v20, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): invalid buffer", buf, 0x16u);
  }
  return 0;
}

void sub_24B9881F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL HSFilerRT_Internal::readWithFile(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL8 v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  std::string v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _BYTE buf[22];
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30 = 0;
  if (*(char *)(a5 + 23) < 0)
  {
    v11 = *(_QWORD *)(a5 + 8);
    if (v11)
    {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a5, v11);
LABEL_6:
      support::fs::SyncFile::create((uint64_t)&v28, 52, 0x100000uLL, buf);
      v13 = *(_QWORD *)buf;
      v12 = *(std::__shared_weak_count **)&buf[8];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v29 = v13;
      v30 = v12;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (!v13)
      {
        v24 = **(NSObject ***)(a1 + 128);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = hsfiler::support::to_string(a2);
          if (*(char *)(a4 + 23) >= 0)
            v26 = a4;
          else
            v26 = *(_QWORD *)a4;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a3;
          v34 = 2080;
          v35 = v26;
          _os_log_error_impl(&dword_24B97E000, v24, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): failed to create file (%s)", buf, 0x20u);
          v17 = 0;
        }
        else
        {
          v17 = 0;
        }
LABEL_22:
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        return v17;
      }
      if (*a6)
      {
        v14 = _Block_copy(*a6);
        v27 = v14;
        if (!v12)
          goto LABEL_15;
      }
      else
      {
        v14 = 0;
        v27 = 0;
        if (!v12)
          goto LABEL_15;
      }
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
LABEL_15:
      v31[0] = &off_251CC2E40;
      v31[1] = v13;
      v31[2] = v12;
      v32 = v31;
      v17 = HSFilerRT_Internal::read(a1, a2, a3, a4, &v27, v31);
      v18 = v32;
      if (v32 == v31)
      {
        v19 = 4;
        v18 = v31;
      }
      else
      {
        if (!v32)
          goto LABEL_20;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_20:
      if (v14)
        _Block_release(v14);
      goto LABEL_22;
    }
  }
  else if (*(_BYTE *)(a5 + 23))
  {
    v28 = *(std::string *)a5;
    goto LABEL_6;
  }
  v23 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = hsfiler::support::to_string(a2);
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a3;
    _os_log_error_impl(&dword_24B97E000, v23, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): invalid file path", buf, 0x16u);
  }
  return 0;
}

void sub_24B988520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL HSFilerRT_Internal::readWithStream(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  _QWORD *v9;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v20;
  void *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD **)a5;
  if (*(_QWORD *)a5 && !*(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32))
  {
    if (*a6)
    {
      v12 = _Block_copy(*a6);
      v9 = *(_QWORD **)a5;
      v13 = *(_QWORD *)(a5 + 8);
      v21 = v12;
      if (!v13)
        goto LABEL_9;
    }
    else
    {
      v12 = 0;
      v21 = 0;
      v13 = *(_QWORD *)(a5 + 8);
      if (!v13)
        goto LABEL_9;
    }
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
LABEL_9:
    v22[0] = &off_251CC2EC0;
    v22[1] = v9;
    v22[2] = v13;
    v23 = v22;
    v16 = HSFilerRT_Internal::read(a1, a2, a3, a4, &v21, v22);
    v17 = v23;
    if (v23 == v22)
    {
      v18 = 4;
      v17 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_14;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_14:
    if (v12)
      _Block_release(v12);
    return v16;
  }
  v20 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v25 = hsfiler::support::to_string(a2);
    v26 = 2048;
    v27 = a3;
    _os_log_error_impl(&dword_24B97E000, v20, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): invalid output stream", buf, 0x16u);
  }
  return 0;
}

void sub_24B988778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL HSFilerRT_Internal::write(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL8 v17;
  NSObject *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD block[7];
  _QWORD v32[6];
  void *aBlock;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  _QWORD v39[8];
  _BYTE v40[24];
  _BYTE *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*a6)
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x2000000000;
    v14 = MEMORY[0x24BDAC760];
    v29 = 0;
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 1174405120;
    v39[2] = ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke;
    v39[3] = &__block_descriptor_tmp_24;
    v42 = a2;
    v39[5] = a1;
    v39[6] = a3;
    v39[7] = a4;
    v15 = a7[3];
    if (v15)
    {
      if ((_QWORD *)v15 == a7)
      {
        v41 = v40;
        (*(void (**)(_QWORD *, _BYTE *))(*a7 + 24))(a7, v40);
LABEL_10:
        v39[4] = &v26;
        v30 = v39;
        block[0] = v14;
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
        block[3] = &__block_descriptor_tmp_52;
        block[4] = a1 + 8;
        block[5] = &v30;
        v18 = *(NSObject **)(a1 + 24);
        if (*(_QWORD *)(a1 + 32))
        {
          dispatch_async_and_wait(v18, block);
          v17 = *((_BYTE *)v27 + 24) != 0;
          if (!*((_BYTE *)v27 + 24))
            goto LABEL_28;
        }
        else
        {
          dispatch_sync(v18, block);
          v17 = *((_BYTE *)v27 + 24) != 0;
          if (!*((_BYTE *)v27 + 24))
            goto LABEL_28;
        }
        v32[0] = v14;
        v32[1] = 1174405120;
        v32[2] = ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_25;
        v32[3] = &__block_descriptor_tmp_34;
        v32[4] = a1;
        v32[5] = a3;
        v38 = a2;
        v19 = *a6;
        if (*a6)
          v19 = _Block_copy(v19);
        aBlock = v19;
        v34 = a4;
        v35 = a5;
        v20 = v36;
        v21 = a7[3];
        if (v21)
        {
          if ((_QWORD *)v21 == a7)
          {
            v37 = v36;
            (*(void (**)(_QWORD *, _BYTE *))(*a7 + 24))(a7, v36);
LABEL_21:
            ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v32);
            if (v37 == v36)
            {
              v22 = 4;
            }
            else
            {
              if (!v37)
                goto LABEL_26;
              v22 = 5;
              v20 = v37;
            }
            (*(void (**)(_QWORD *))(*v20 + 8 * v22))(v20);
LABEL_26:
            if (aBlock)
              _Block_release(aBlock);
LABEL_28:
            v23 = v40;
            if (v41 == v40)
            {
              v24 = 4;
            }
            else
            {
              if (!v41)
              {
LABEL_33:
                _Block_object_dispose(&v26, 8);
                return v17;
              }
              v24 = 5;
              v23 = v41;
            }
            (*(void (**)(void))(*v23 + 8 * v24))();
            goto LABEL_33;
          }
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        }
        v37 = (_BYTE *)v21;
        goto LABEL_21;
      }
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
    v41 = (_BYTE *)v15;
    goto LABEL_10;
  }
  v16 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block[0]) = 0;
    _os_log_error_impl(&dword_24B97E000, v16, OS_LOG_TYPE_ERROR, "error: NULL transferCb param", (uint8_t *)block, 2u);
  }
  return 0;
}

void sub_24B988ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  const char *v5;
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  v2 = *(_QWORD *)(a1 + 40);
  HSFilerRT_Internal::findSession_sync((uint64_t *)v2, *(_DWORD *)(a1 + 96), *(_QWORD *)(a1 + 48), &v13);
  if (!v13)
    goto LABEL_12;
  if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(v13 + 40), *(_QWORD *)(a1 + 56)))
  {
    if (*(_QWORD *)(a1 + 88))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      v3 = (std::__shared_weak_count *)v14;
      if (!v14)
        return;
      goto LABEL_13;
    }
    v8 = **(NSObject ***)(v2 + 128);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
LABEL_12:
      v3 = (std::__shared_weak_count *)v14;
      if (!v14)
        return;
      goto LABEL_13;
    }
    v11 = hsfiler::support::to_string(*(_DWORD *)(a1 + 96));
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315394;
    v16 = v11;
    v17 = 2048;
    v18 = v12;
    _os_log_error_impl(&dword_24B97E000, v8, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): invalid writer callback param", buf, 0x16u);
    v3 = (std::__shared_weak_count *)v14;
    if (!v14)
      return;
LABEL_13:
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    return;
  }
  v4 = **(NSObject ***)(v2 + 128);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    goto LABEL_12;
  v5 = hsfiler::support::to_string(*(_DWORD *)(a1 + 96));
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(uint64_t **)(a1 + 56);
  if (*((char *)v6 + 23) < 0)
    v6 = (uint64_t *)*v6;
  *(_DWORD *)buf = 136315650;
  v16 = v5;
  v17 = 2048;
  v18 = v7;
  v19 = 2080;
  v20 = v6;
  _os_log_error_impl(&dword_24B97E000, v4, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): invalid fileID (%s)", buf, 0x20u);
  v3 = (std::__shared_weak_count *)v14;
  if (v14)
    goto LABEL_13;
}

void sub_24B988D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B988D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32r64c29_ZTSNSt3__18functionIFbPvmEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  result = *(_QWORD *)(a2 + 88);
  if (!result)
    goto LABEL_4;
  if (result != a2 + 64)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_4:
    *(_QWORD *)(a1 + 88) = result;
    return result;
  }
  *(_QWORD *)(a1 + 88) = a1 + 64;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 88) + 24))(*(_QWORD *)(a2 + 88));
}

void sub_24B988DE0(_Unwind_Exception *a1)
{
  const void **v1;

  _Block_object_dispose(*v1, 8);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32r64c29_ZTSNSt3__18functionIFbPvmEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_25(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  void **v46;
  uint64_t *v47;
  const char *v48;
  uint64_t v49;
  NSObject *v50;
  _BOOL4 v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  _QWORD v57[4];
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _QWORD v63[4];
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD block[4];
  void *aBlock;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[4];
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE buf[24];
  void **v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v75 = 0;
  v76 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 200);
  if (!v3
    || (v4 = std::__shared_weak_count::lock(v3), (v76 = v4) == 0)
    || (v5 = *(_QWORD *)(v2 + 192), (v75 = v5) == 0)
    || *(_QWORD *)(v5 + 32) != *(_QWORD *)(a1 + 40))
  {
    v11 = **(NSObject ***)(v2 + 128);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v33 = hsfiler::support::to_string(*(_DWORD *)(a1 + 104));
      v34 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v33;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v34;
      _os_log_error_impl(&dword_24B97E000, v11, OS_LOG_TYPE_ERROR, "error: Failed client (%s) session (%llu) writeWithBuff: session not running", buf, 0x16u);
    }
    memset(buf, 170, 16);
    HSFilerRT_Internal::findSession_sync((uint64_t *)v2, *(_DWORD *)(a1 + 104), *(_QWORD *)(a1 + 40), buf);
    v12 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v71[0] = MEMORY[0x24BDAC760];
      v71[1] = 1174405120;
      v71[2] = ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_26;
      v71[3] = &__block_descriptor_tmp_27;
      v13 = *(void **)(a1 + 48);
      if (v13)
        v13 = _Block_copy(v13);
      v14 = *(_QWORD *)(a1 + 40);
      v72 = v13;
      v73 = v14;
      v74 = *(_QWORD *)(a1 + 56);
      dispatch_async(*(dispatch_queue_t *)(v12 + 80), v71);
      if (v72)
        _Block_release(v72);
    }
    v15 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    goto LABEL_25;
  }
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 56);
  if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(v5 + 40), v7))
  {
    *(_QWORD *)buf = v7;
    if (*((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 40, v7, (__int128 **)buf)+ 40))
    {
      v8 = **(NSObject ***)(v2 + 128);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v48 = hsfiler::support::to_string(*(_DWORD *)(a1 + 104));
        v49 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v48;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v49;
        _os_log_error_impl(&dword_24B97E000, v8, OS_LOG_TYPE_ERROR, "error: Failed client (%s) session (%llu) writeWithBuff: fileID already transferred", buf, 0x16u);
      }
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_28;
      block[3] = &__block_descriptor_tmp_29;
      v9 = *(void **)(a1 + 48);
      if (v9)
        v9 = _Block_copy(v9);
      v10 = *(_QWORD *)(a1 + 40);
      aBlock = v9;
      v69 = v10;
      v70 = *(_QWORD *)(a1 + 56);
      dispatch_async(*(dispatch_queue_t *)(v5 + 80), block);
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_25;
    }
  }
  v21 = **(NSObject ***)(v2 + 128);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = hsfiler::support::to_string(*(_DWORD *)(a1 + 104));
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(void ***)(a1 + 56);
    if (*((char *)v24 + 23) < 0)
      v24 = (void **)*v24;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v22;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2080;
    v80 = v24;
    _os_log_impl(&dword_24B97E000, v21, OS_LOG_TYPE_DEFAULT, " ------ Writing client (%s) session (%llu) file (%s) from buff ------ ", buf, 0x20u);
  }
  v25 = MEMORY[0x24BDAC760];
  v63[0] = MEMORY[0x24BDAC760];
  v63[1] = 1174405120;
  v63[2] = ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_30;
  v63[3] = &__block_descriptor_tmp_31;
  v26 = *(void **)(a1 + 48);
  if (v26)
    v26 = _Block_copy(v26);
  v27 = *(_QWORD *)(a1 + 40);
  v64 = v26;
  v65 = v27;
  v66 = *(_QWORD *)(a1 + 56);
  v61 = v5;
  v62 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  v30 = *(_QWORD *)(a1 + 56);
  v31 = *(_QWORD *)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 96);
  if (!v32)
    goto LABEL_42;
  if (v32 != a1 + 72)
  {
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
LABEL_42:
    v78 = (_BYTE *)v32;
    goto LABEL_44;
  }
  v78 = v77;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v32 + 24))(v32, v77);
LABEL_44:
  v35 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v2 + 56))(v2, &v61, v30, v31, v77);
  v36 = v78;
  if (v78 == v77)
  {
    v37 = 4;
    v36 = v77;
  }
  else
  {
    if (!v78)
      goto LABEL_49;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_49:
  v38 = v62;
  if (v62)
  {
    v39 = (unint64_t *)&v62->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if ((v35 & 1) != 0)
  {
    v41 = v75;
    v42 = *(_QWORD *)(a1 + 56);
    if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>((_QWORD *)(v75 + 40), v42))
    {
      *(_QWORD *)buf = v42;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41 + 40, v42, (__int128 **)buf)+ 40) = 1;
    }
    dispatch_async(*(dispatch_queue_t *)(v41 + 80), v63);
    v43 = **(NSObject ***)(v2 + 128);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = hsfiler::support::to_string(*(_DWORD *)(a1 + 104));
      v45 = *(_QWORD *)(a1 + 40);
      v46 = *(void ***)(a1 + 56);
      if (*((char *)v46 + 23) < 0)
        v46 = (void **)*v46;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v44;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v45;
      *(_WORD *)&buf[22] = 2080;
      v80 = v46;
      _os_log_impl(&dword_24B97E000, v43, OS_LOG_TYPE_DEFAULT, " ------ Successfully wrote client (%s) session (%llu) file (%s) from buff ------ ", buf, 0x20u);
    }
    v47 = (uint64_t *)(v41 + 56);
    while (1)
    {
      v47 = (uint64_t *)*v47;
      if (!v47)
        break;
      if (!*((_BYTE *)v47 + 40))
        goto LABEL_66;
    }
    *(_QWORD *)buf = v25;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN18HSFilerRT_Internal10endSessionEv_block_invoke;
    v80 = (void **)&__block_descriptor_tmp_36;
    v81 = v2;
    ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(v2 + 8), (uint64_t)buf);
  }
  else
  {
    v50 = **(NSObject ***)(v2 + 128);
    v51 = os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
    v52 = v75;
    if (v51)
    {
      v55 = *(_QWORD *)(v75 + 32);
      v56 = *(uint64_t ***)(a1 + 56);
      if (*((char *)v56 + 23) < 0)
        v56 = (uint64_t **)*v56;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v55;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v56;
      _os_log_error_impl(&dword_24B97E000, v50, OS_LOG_TYPE_ERROR, "error: Failed to write file to baseband (session: %llu, file: %s)", buf, 0x16u);
    }
    v57[0] = v25;
    v57[1] = 1174405120;
    v57[2] = ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_32;
    v57[3] = &__block_descriptor_tmp_33;
    v53 = *(void **)(a1 + 48);
    if (v53)
      v53 = _Block_copy(v53);
    v54 = *(_QWORD *)(a1 + 40);
    v58 = v53;
    v59 = v54;
    v60 = *(_QWORD *)(a1 + 56);
    dispatch_async(*(dispatch_queue_t *)(v52 + 80), v57);
    HSFilerRT_Internal::handleSessionError_sync((HSFilerRT_Internal *)v2, *(_DWORD *)(v52 + 24), *(_QWORD *)(a1 + 40), -9);
    if (v58)
      _Block_release(v58);
  }
LABEL_66:
  if (v64)
    _Block_release(v64);
LABEL_25:
  v18 = v76;
  if (v76)
  {
    v19 = (unint64_t *)&v76->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_24B989508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_26(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1[4] + 16))(a1[4], a1[5], 4294967293, a1[6]);
}

uint64_t ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_28(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1[4] + 16))(a1[4], a1[5], 4294967283, a1[6]);
}

uint64_t ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_30(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], a1[5], 0, a1[6]);
}

uint64_t ___ZN18HSFilerRT_Internal5writeE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEmN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEENS1_8functionIFbPvmEEE_block_invoke_32(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1[4] + 16))(a1[4], a1[5], 4294967287, a1[6]);
}

uint64_t __copy_helper_block_e8_48c124_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE72c29_ZTSNSt3__18functionIFbPvmEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t result;

  v4 = *(void **)(a2 + 48);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 48) = v4;
  result = *(_QWORD *)(a2 + 96);
  if (!result)
    goto LABEL_6;
  if (result != a2 + 72)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_6:
    *(_QWORD *)(a1 + 96) = result;
    return result;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
}

void sub_24B9896A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 48);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c124_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE72c29_ZTSNSt3__18functionIFbPvmEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;

  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (const void *)a1[6];
  if (v5)
    _Block_release(v5);
}

BOOL HSFilerRT_Internal::writeWithBuff(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, const void **a6)
{
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  NSObject *v32;
  void *v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)*a5;
  if (!*a5)
  {
    v32 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = hsfiler::support::to_string(a2);
      v38 = 2048;
      v39 = a3;
      v29 = "error: Client (%s) session (%llu): invalid buffer";
      v30 = v32;
      v31 = 22;
      goto LABEL_23;
    }
    return 0;
  }
  v11 = v9[1];
  v12 = v11 - *v9;
  if (v11 == *v9 || v12 > 0xF00000)
  {
    v26 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = hsfiler::support::to_string(a2);
      v28 = *(_QWORD *)(*a5 + 8) - *(_QWORD *)*a5;
      *(_DWORD *)buf = 136315650;
      v37 = v27;
      v38 = 2048;
      v39 = a3;
      v40 = 2048;
      v41 = v28;
      v29 = "error: Client (%s) session (%llu): invalid buffer size %zu";
      v30 = v26;
      v31 = 32;
LABEL_23:
      _os_log_error_impl(&dword_24B97E000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
      return 0;
    }
    return 0;
  }
  if (*a6)
  {
    v14 = _Block_copy(*a6);
    v9 = (_QWORD *)*a5;
    v15 = a5[1];
    v33 = v14;
    if (!v15)
      goto LABEL_10;
  }
  else
  {
    v14 = 0;
    v15 = a5[1];
    v33 = 0;
    if (!v15)
      goto LABEL_10;
  }
  v16 = (unint64_t *)(v15 + 8);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
LABEL_10:
  v18 = operator new(0x20uLL);
  *v18 = &off_251CC2F40;
  v18[1] = a1;
  v18[2] = v9;
  v18[3] = v15;
  v35 = v18;
  v22 = HSFilerRT_Internal::write(a1, a2, a3, a4, v12, &v33, v34);
  v23 = v35;
  if (v35 == v34)
  {
    v24 = 4;
    v23 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_15;
    v24 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v23 + 8 * v24))(v23, v19, v20, v21);
LABEL_15:
  if (v14)
    _Block_release(v14);
  return v22;
}

void sub_24B989974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0::~$_0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL HSFilerRT_Internal::writeWithFile(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  void *v29;
  const char *v30;
  const char *v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  const char *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  const char *v43;
  __int128 v44;
  void *v45;
  std::string v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _BYTE buf[24];
  void *v52;
  uint64_t *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v47 = 0;
  v48 = 0;
  if (*(char *)(a5 + 23) < 0)
  {
    v11 = *(_QWORD *)(a5 + 8);
    if (v11)
    {
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a5, v11);
LABEL_6:
      support::fs::SyncFile::create((uint64_t)&v46, 12, 0x100000uLL, buf);
      v13 = *(uint64_t **)buf;
      v12 = *(std::__shared_weak_count **)&buf[8];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v47 = v13;
      v48 = v12;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (v13)
      {
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZN7support2fs8SyncFile4openEv_block_invoke;
        v52 = &__block_descriptor_tmp_5;
        v53 = v13;
        ctu::SharedSynchronizable<support::fs::SyncFile>::execute_wrapped(v13 + 1, (uint64_t)buf);
        if (support::fs::SyncFile::isOpen((support::fs::SyncFile *)v13))
        {
          if (support::fs::SyncFile::getSize((support::fs::SyncFile *)v13))
          {
            v15 = v14;
            if (v14)
            {
              if (v14 <= 0xF00000)
              {
                if (*a6)
                {
                  v16 = _Block_copy(*a6);
                  v45 = v16;
                  if (!v12)
                    goto LABEL_19;
                }
                else
                {
                  v16 = 0;
                  v45 = 0;
                  if (!v12)
                    goto LABEL_19;
                }
                p_shared_owners = (unint64_t *)&v12->__shared_owners_;
                do
                  v18 = __ldxr(p_shared_owners);
                while (__stxr(v18 + 1, p_shared_owners));
LABEL_19:
                *(_QWORD *)&v44 = a1;
                DWORD2(v44) = a2;
                v50 = 0;
                v19 = operator new(0x38uLL);
                *v19 = &off_251CC2FD0;
                v19[1] = v15;
                v19[2] = v13;
                v19[3] = v12;
                *((_OWORD *)v19 + 2) = v44;
                v19[6] = a3;
                v50 = v19;
                v20 = HSFilerRT_Internal::write(a1, a2, a3, a4, v15, &v45, v49);
                v21 = v50;
                if (v50 == v49)
                {
                  v22 = 4;
                  v21 = v49;
                }
                else
                {
                  if (!v50)
                    goto LABEL_24;
                  v22 = 5;
                }
                (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_24:
                if (v16)
                  _Block_release(v16);
                goto LABEL_26;
              }
              v34 = **(NSObject ***)(a1 + 128);
              if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                goto LABEL_55;
              v43 = hsfiler::support::to_string(a2);
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v43;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = a3;
              *(_WORD *)&buf[22] = 2048;
              v52 = (void *)v15;
              v30 = "error: Client (%s) session (%llu): file size too large (%zu)";
              goto LABEL_57;
            }
            v34 = **(NSObject ***)(a1 + 128);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              v39 = hsfiler::support::to_string(a2);
              v42 = v13[5];
              v41 = v13 + 5;
              v40 = (void *)v42;
              if (*((char *)v41 + 23) >= 0)
                v40 = v41;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v39;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = a3;
              *(_WORD *)&buf[22] = 2080;
              v52 = v40;
              v30 = "error: Client (%s) session (%llu): invalid file size (%s)";
LABEL_57:
              v33 = v34;
              goto LABEL_58;
            }
          }
          else
          {
            v34 = **(NSObject ***)(a1 + 128);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              v35 = hsfiler::support::to_string(a2);
              v38 = v13[5];
              v37 = v13 + 5;
              v36 = (void *)v38;
              if (*((char *)v37 + 23) >= 0)
                v36 = v37;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v35;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = a3;
              *(_WORD *)&buf[22] = 2080;
              v52 = v36;
              v30 = "error: Client (%s) session (%llu): failed to get file size (%s)";
              goto LABEL_57;
            }
          }
LABEL_55:
          v20 = 0;
LABEL_26:
          if (v12)
          {
            v23 = (unint64_t *)&v12->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          return v20;
        }
        v27 = **(NSObject ***)(a1 + 128);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          goto LABEL_55;
        v31 = hsfiler::support::to_string(a2);
        if (*(char *)(a4 + 23) >= 0)
          v32 = (void *)a4;
        else
          v32 = *(void **)a4;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v31;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a3;
        *(_WORD *)&buf[22] = 2080;
        v52 = v32;
        v30 = "error: Client (%s) session (%llu): failed to open file (%s)";
      }
      else
      {
        v27 = **(NSObject ***)(a1 + 128);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          goto LABEL_55;
        v28 = hsfiler::support::to_string(a2);
        if (*(char *)(a4 + 23) >= 0)
          v29 = (void *)a4;
        else
          v29 = *(void **)a4;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a3;
        *(_WORD *)&buf[22] = 2080;
        v52 = v29;
        v30 = "error: Client (%s) session (%llu): failed to create file (%s)";
      }
      v33 = v27;
LABEL_58:
      _os_log_error_impl(&dword_24B97E000, v33, OS_LOG_TYPE_ERROR, v30, buf, 0x20u);
      v20 = 0;
      goto LABEL_26;
    }
  }
  else if (*(_BYTE *)(a5 + 23))
  {
    v46 = *(std::string *)a5;
    goto LABEL_6;
  }
  v26 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = hsfiler::support::to_string(a2);
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a3;
    _os_log_error_impl(&dword_24B97E000, v26, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu): invalid file path", buf, 0x16u);
  }
  return 0;
}

void sub_24B989F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL HSFilerRT_Internal::writeWithStream(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, const void **a6)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  NSObject *v27;
  void *v28;
  _QWORD v29[3];
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (!*a5 || *(_DWORD *)(*a5 + *(_QWORD *)(*(_QWORD *)*a5 - 24) + 32))
  {
    v23 = **(NSObject ***)(a1 + 128);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v41 = hsfiler::support::to_string(a2);
    v42 = 2048;
    v43 = a3;
    v24 = "error: Client (%s) session (%llu): invalid input stream";
    v25 = v23;
    v26 = 22;
LABEL_23:
    _os_log_error_impl(&dword_24B97E000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    return 0;
  }
  std::istream::seekg();
  std::istream::tellg();
  v12 = v46;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  std::istream::seekg();
  if ((unint64_t)(v46 - 15728641) <= 0xFFFFFFFFFF0FFFFFLL)
  {
    v27 = **(NSObject ***)(a1 + 128);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315650;
    v41 = hsfiler::support::to_string(a2);
    v42 = 2048;
    v43 = a3;
    v44 = 2048;
    v45 = v46;
    v24 = "error: Client (%s) session (%llu): invalid input stream size %zu";
    v25 = v27;
    v26 = 32;
    goto LABEL_23;
  }
  if (*a6)
  {
    v13 = _Block_copy(*a6);
    v28 = v13;
    v15 = (_QWORD *)*a5;
    v14 = a5[1];
    if (!v14)
      goto LABEL_10;
  }
  else
  {
    v13 = 0;
    v28 = 0;
    v15 = (_QWORD *)*a5;
    v14 = a5[1];
    if (!v14)
      goto LABEL_10;
  }
  v16 = (unint64_t *)(v14 + 8);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
LABEL_10:
  v18 = operator new(0x28uLL);
  *v18 = &off_251CC3050;
  v18[1] = a1;
  v18[2] = v15;
  v18[3] = v14;
  v18[4] = v12;
  v30 = v18;
  v19 = HSFilerRT_Internal::write(a1, a2, a3, a4, v12, &v28, v29);
  v20 = v30;
  if (v30 == v29)
  {
    v21 = 4;
    v20 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_15;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_15:
  if (v13)
    _Block_release(v13);
  return v19;
}

void sub_24B98A2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN18HSFilerRT_Internal10endSessionEv_block_invoke(uint64_t a1)
{
  HSFilerRT_Internal *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[5];
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char v32;

  v1 = *(HSFilerRT_Internal **)(a1 + 32);
  v30 = 0;
  v31 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)v1 + 25);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v31 = v3;
    if (!v3)
      return;
    v4 = *((_QWORD *)v1 + 24);
    v30 = v4;
    if (v4)
    {
      v28 = v4;
      v29 = v3;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      v7 = (*(uint64_t (**)(HSFilerRT_Internal *, uint64_t *))(*(_QWORD *)v1 + 32))(v1, &v28);
      v8 = v7;
      v9 = v29;
      if (!v29)
        goto LABEL_10;
      v10 = (unint64_t *)&v29->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        v12 = v30;
        if ((v8 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
LABEL_10:
        v12 = v30;
        if ((v7 & 1) != 0)
        {
LABEL_11:
          *(_BYTE *)(v12 + 114) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          v13 = (std::__shared_weak_count *)*((_QWORD *)v1 + 25);
          *((_QWORD *)v1 + 24) = 0;
          *((_QWORD *)v1 + 25) = 0;
          if (v13)
            std::__shared_weak_count::__release_weak(v13);
          v14 = *(_QWORD *)(v12 + 32);
          v25[0] = MEMORY[0x24BDAC760];
          v25[1] = 1174405120;
          v25[2] = ___ZN18HSFilerRT_Internal10endSessionEv_block_invoke_2;
          v25[3] = &__block_descriptor_tmp_35;
          v25[4] = v12;
          v26 = v31;
          if (v31)
          {
            v15 = (unint64_t *)&v31->__shared_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          v27 = v14;
          dispatch_async(*(dispatch_queue_t *)(v12 + 80), v25);
          HSFilerRT_Internal::sessionScheduler_sync(v1);
          v17 = v26;
          if (v26)
          {
            v18 = (unint64_t *)&v26->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          goto LABEL_25;
        }
      }
      v20 = *(_DWORD *)(v12 + 24);
      v21 = *(_QWORD *)(v12 + 32);
      v32 = 0;
      HSFilerRT_Internal::abortSession_sync((uint64_t)v1, v20, v21, -6, &v32);
      if (v32)
        HSFilerRT_Internal::resetBaseband_sync((uint64_t)v1, v20, v21, -6);
      else
        HSFilerRT_Internal::sessionScheduler_sync(v1);
    }
  }
LABEL_25:
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_24B98A574(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v2 - 56);
  _Unwind_Resume(a1);
}

void sub_24B98A59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1 - 56);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18HSFilerRT_Internal10endSessionEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88), *(_QWORD *)(a1 + 48), 1);
}

void HSFilerRT_Internal::abortSession_sync(uint64_t a1, unsigned int a2, unint64_t a3, int a4, _BYTE *a5)
{
  unint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  const void *v14;
  char v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t block;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  void *aBlock;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  HSFilerRT_Internal::findSession_sync((uint64_t *)a1, a2, a3, &v35);
  v10 = v35;
  if (!v35)
    goto LABEL_14;
  v11 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v26 = hsfiler::support::to_string(a2);
    v27 = hsfiler::support::to_string(a4);
    *(_DWORD *)buf = 136315650;
    v38 = v26;
    v39 = 2048;
    v40 = a3;
    v41 = 2080;
    v42 = v27;
    _os_log_error_impl(&dword_24B97E000, v11, OS_LOG_TYPE_ERROR, "error: Client (%s) session (%llu) aborted with reason: %s", buf, 0x20u);
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v10 + 16))(v10);
  v12 = *(void **)(v10 + 88);
  if (!v12)
  {
    v14 = 0;
    block = MEMORY[0x24BDAC760];
    v29 = 1174405120;
    v30 = ___ZN18HSFilerRT_Internal17abortSession_syncE15HSFilerClientIDy13HSFilerStatusRb_block_invoke;
    v31 = &__block_descriptor_tmp_37;
LABEL_9:
    v15 = 1;
    goto LABEL_10;
  }
  v13 = _Block_copy(v12);
  v14 = v13;
  block = MEMORY[0x24BDAC760];
  v29 = 1174405120;
  v30 = ___ZN18HSFilerRT_Internal17abortSession_syncE15HSFilerClientIDy13HSFilerStatusRb_block_invoke;
  v31 = &__block_descriptor_tmp_37;
  if (!v13)
  {
    v12 = 0;
    goto LABEL_9;
  }
  v12 = _Block_copy(v13);
  v15 = 0;
LABEL_10:
  aBlock = v12;
  v33 = a3;
  v34 = a4;
  dispatch_async(*(dispatch_queue_t *)(v10 + 80), &block);
  if (aBlock)
    _Block_release(aBlock);
  if ((v15 & 1) == 0)
    _Block_release(v14);
LABEL_14:
  *a5 = 0;
  v16 = *(std::__shared_weak_count **)(a1 + 200);
  if (v16)
  {
    v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)(a1 + 192);
      if (v19 && *(_QWORD *)(v19 + 32) == a3)
      {
        v20 = *(std::__shared_weak_count **)(a1 + 200);
        *(_QWORD *)(a1 + 192) = 0;
        *(_QWORD *)(a1 + 200) = 0;
        if (v20)
          std::__shared_weak_count::__release_weak(v20);
        *a5 = 1;
      }
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v23 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v24 = (unint64_t *)(v36 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_24B98A84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_24B98A888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18HSFilerRT_Internal17abortSession_syncE15HSFilerClientIDy13HSFilerStatusRb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void *__copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvy13HSFilerStatusEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void HSFilerRT_Internal::resetBaseband_sync(uint64_t a1, unsigned int a2, unint64_t a3, int a4)
{
  const char *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const char *v23;
  size_t v24;
  size_t v25;
  void *p_p;
  uint64_t v27;
  uint64_t v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  NSObject *v35;
  uint64_t v36;
  std::string *v37;
  void *__p;
  std::string::size_type v39;
  int64_t v40;
  std::string v41;
  std::string __dst;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 216))
    return;
  memset(&v47, 170, sizeof(v47));
  v7 = hsfiler::support::to_string(a2);
  v8 = strlen(v7);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_9:
    memmove(p_dst, v7, v9);
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  v13 = std::string::insert(&__dst, 0, "client (", 8uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v43, ") session (", 0xBuLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v41, a3);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v41;
  else
    v17 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  v19 = std::string::append(&v44, (const std::string::value_type *)v17, size);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v45, ") status (", 0xAuLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = hsfiler::support::to_string(a4);
  v24 = strlen(v23);
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    p_p = operator new(v27 + 1);
    v39 = v25;
    v40 = v28 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_23;
  }
  HIBYTE(v40) = v24;
  p_p = &__p;
  if (v24)
LABEL_23:
    memmove(p_p, v23, v25);
  *((_BYTE *)p_p + v25) = 0;
  if (v40 >= 0)
    v29 = (const std::string::value_type *)&__p;
  else
    v29 = (const std::string::value_type *)__p;
  if (v40 >= 0)
    v30 = HIBYTE(v40);
  else
    v30 = v39;
  v31 = std::string::append(&v46, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v48, ")", 1uLL);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_32:
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_44;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(__p);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v46.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v45.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v41.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v44.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_37:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v43.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_38:
    v35 = **(NSObject ***)(a1 + 128);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_39;
LABEL_50:
    v37 = &v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
    LODWORD(v48.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
    _os_log_error_impl(&dword_24B97E000, v35, OS_LOG_TYPE_ERROR, "error: Requesting baseband reset due to: %s", (uint8_t *)&v48, 0xCu);
    v36 = *(_QWORD *)(a1 + 208);
    if (v36)
      goto LABEL_40;
LABEL_53:
    HSFilerRT_Internal::sessionScheduler_sync((HSFilerRT_Internal *)a1);
    goto LABEL_56;
  }
LABEL_49:
  operator delete(__dst.__r_.__value_.__l.__data_);
  v35 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    goto LABEL_50;
LABEL_39:
  v36 = *(_QWORD *)(a1 + 208);
  if (!v36)
    goto LABEL_53;
LABEL_40:
  *(_BYTE *)(a1 + 216) = 1;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v48 = v47;
  (*(void (**)(uint64_t, std::string *))(v36 + 16))(v36, &v48);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_56:
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_57;
  }
  operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
LABEL_57:
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_24B98AD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HSFilerRT_Internal::logSessionStatus_sync(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2)
  {
    v5 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = hsfiler::support::to_string(*(_DWORD *)(v2 + 24));
      v7 = *a2;
      v8 = *(_QWORD *)(*a2 + 32);
      if (*(_BYTE *)(*a2 + 112))
        v9 = "read";
      else
        v9 = "write";
      v10 = *(_DWORD *)(v7 + 96);
      v11 = *(_DWORD *)(v7 + 100);
      v12 = "TRUE";
      if (*(_BYTE *)(v7 + 113))
        v13 = "TRUE";
      else
        v13 = "FALSE";
      if (!*(_BYTE *)(v7 + 114))
        v12 = "FALSE";
      v14 = *(_QWORD *)(v7 + 64);
      *(_DWORD *)buf = 136316930;
      v22 = v6;
      v23 = 2048;
      v24 = v8;
      v25 = 2080;
      v26 = v9;
      v27 = 1024;
      v28 = v10;
      v29 = 1024;
      v30 = v11;
      v31 = 2080;
      v32 = v13;
      v33 = 2080;
      v34 = v12;
      v35 = 2048;
      v36 = v14;
      _os_log_impl(&dword_24B97E000, v5, OS_LOG_TYPE_DEFAULT, "Client (%s) session (%llu): %s sequenceID(%u) timeout(%u sec) queued(%s) started(%s) files(%lu)", buf, 0x4Au);
      v2 = *a2;
    }
    v15 = (std::__shared_weak_count *)a2[1];
    v20[0] = v2;
    v20[1] = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    HSFilerRT_Internal::logSessionFileTransferStatus_sync(a1, (uint64_t)v20);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_24B98B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL HSFilerRT_Internal::statusFatal(uint64_t a1, int a2)
{
  return (a2 + 10) <= 5 && a2 != -7 || a2 == 0x7FFFFFFF;
}

void HSFilerRT_Internal::basebandReadyEventHandler(HSFilerRT_Internal *this)
{
  NSObject *v2;
  _QWORD v3[5];
  uint8_t buf[16];

  v2 = **((_QWORD **)this + 16);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEFAULT, "Received baseband ready event", buf, 2u);
  }
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN18HSFilerRT_Internal25basebandReadyEventHandlerEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_46;
  v3[4] = this;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v3);
}

void ___ZN18HSFilerRT_Internal25basebandReadyEventHandlerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = **(NSObject ***)(v1 + 128);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEFAULT, "Processing baseband ready event", v3, 2u);
  }
  *(_BYTE *)(v1 + 216) = 0;
  HSFilerRT_Internal::sessionScheduler_sync((HSFilerRT_Internal *)v1);
}

void HSFilerRT_Internal::basebandResetEventHandler(HSFilerRT_Internal *this)
{
  NSObject *v2;
  _QWORD v3[5];
  uint8_t buf[16];

  v2 = **((_QWORD **)this + 16);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEFAULT, "Received baseband reset event", buf, 2u);
  }
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN18HSFilerRT_Internal25basebandResetEventHandlerEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_47;
  v3[4] = this;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v3);
}

void ___ZN18HSFilerRT_Internal25basebandResetEventHandlerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char v9;
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = **(NSObject ***)(v1 + 128);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEFAULT, "Processing baseband reset event", buf, 2u);
  }
  *(_BYTE *)(v1 + 216) = 1;
  v3 = *(std::__shared_weak_count **)(v1 + 200);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v1 + 192);
      *(_QWORD *)buf = v6;
      if (v6)
        HSFilerRT_Internal::abortSession_sync(v1, *(_DWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), -15, &v9);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_24B98B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HSFilerRT_Internal::registerBasebandResetDelegate(uint64_t a1, const void **a2)
{
  const void *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  _QWORD *v10;
  _QWORD block[6];

  v3 = *a2;
  if (*a2)
  {
    v4 = MEMORY[0x24BDAC760];
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1174405120;
    v8[2] = ___ZN18HSFilerRT_Internal29registerBasebandResetDelegateEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
    v8[3] = &__block_descriptor_tmp_48;
    v8[4] = a1;
    aBlock = _Block_copy(v3);
    v10 = v8;
    block[0] = v4;
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
    block[3] = &__block_descriptor_tmp_52;
    block[4] = a1 + 8;
    block[5] = &v10;
    v5 = *(NSObject **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32))
    {
      dispatch_async_and_wait(v5, block);
      v6 = aBlock;
      if (!aBlock)
        return;
LABEL_8:
      _Block_release(v6);
      return;
    }
    dispatch_sync(v5, block);
    v6 = aBlock;
    if (aBlock)
      goto LABEL_8;
  }
  else
  {
    v7 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block[0]) = 0;
      _os_log_error_impl(&dword_24B97E000, v7, OS_LOG_TYPE_ERROR, "error: NULL resetCb param", (uint8_t *)block, 2u);
    }
  }
}

void ___ZN18HSFilerRT_Internal29registerBasebandResetDelegateEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = **(NSObject ***)(v2 + 128);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_24B97E000, v3, OS_LOG_TYPE_DEFAULT, "Baseband reset delegate registered", v6, 2u);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(v2 + 208);
  *(_QWORD *)(v2 + 208) = v4;
  if (v5)
    _Block_release(v5);
}

void *__copy_helper_block_e8_40c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void HSFilerRT_Internal::dumpState(HSFilerRT_Internal *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN18HSFilerRT_Internal9dumpStateEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_49;
  v1[4] = this;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN18HSFilerRT_Internal9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint8x8_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  int v27;
  int v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  const char *v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  NSObject *v46;
  unint64_t v47;
  unsigned __int8 v48;
  uint8x8_t v49;
  unint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE buf[32];
  _BYTE v60[32];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = **(NSObject ***)(v1 + 128);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_DEFAULT, " ------ HSFiler State Dump BEGIN ------ ", buf, 2u);
  }
  v3 = *(_QWORD **)(v1 + 40);
  if (v3 != (_QWORD *)(v1 + 48))
  {
    while (1)
    {
      v4 = **(NSObject ***)(v1 + 128);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = hsfiler::support::to_string(*((_DWORD *)v3 + 8));
        v6 = v3[7];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v5;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v6;
        _os_log_impl(&dword_24B97E000, v4, OS_LOG_TYPE_DEFAULT, "Client (%s) has %lu sessions", buf, 0x16u);
        v7 = (_QWORD *)v3[5];
        v56 = v3 + 6;
        if (v7 != v3 + 6)
          break;
        goto LABEL_10;
      }
      v7 = (_QWORD *)v3[5];
      v56 = v3 + 6;
      if (v7 != v3 + 6)
        break;
LABEL_10:
      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v3[2];
          v41 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v41);
      }
      v3 = v9;
      if (v9 == (_QWORD *)(v1 + 48))
        goto LABEL_110;
    }
LABEL_14:
    v10 = v7[5];
    v11 = (std::__shared_weak_count *)v7[6];
    v57 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if (!v10)
      goto LABEL_59;
    v14 = **(NSObject ***)(v1 + 128);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v19 = v11;
      v58 = v10;
      if (v11)
        goto LABEL_52;
      goto LABEL_54;
    }
    v15 = *(unsigned int *)(v10 + 24);
    if ((v16 & 1) == 0
    {
      v61 = xmmword_251CC31B0;
      v62 = unk_251CC31C0;
      v63 = xmmword_251CC31D0;
      *(_OWORD *)buf = constinit;
      *(_OWORD *)&buf[16] = unk_251CC3180;
      *(_OWORD *)v60 = xmmword_251CC3190;
      *(_OWORD *)&v60[16] = unk_251CC31A0;
      std::unordered_map<HSFilerClientID,char const*>::unordered_map((uint64_t)&hsfiler::support::to_string(HSFilerClientID)::clientNames, (unsigned int *)buf, 7);
    }
    if (!qword_2579B8DF0)
      goto LABEL_42;
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2579B8DF0);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = v15;
      if (qword_2579B8DF0 <= v15)
        v18 = v15 % qword_2579B8DF0;
    }
    else
    {
      v18 = ((_DWORD)qword_2579B8DF0 - 1) & v15;
    }
    v20 = *(uint64_t ***)(hsfiler::support::to_string(HSFilerClientID)::clientNames + 8 * v18);
    if (!v20 || (v21 = *v20) == 0)
    {
LABEL_42:
      v24 = "HS_FILER_CLIENT_INVALID";
      goto LABEL_43;
    }
    if (v17.u32[0] < 2uLL)
    {
      while (1)
      {
        v23 = v21[1];
        if (v23 == v15)
        {
          if (*((_DWORD *)v21 + 4) == (_DWORD)v15)
            goto LABEL_104;
        }
        else if ((v23 & (qword_2579B8DF0 - 1)) != v18)
        {
          goto LABEL_42;
        }
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
    while (1)
    {
      v22 = v21[1];
      if (v22 == v15)
      {
        if (*((_DWORD *)v21 + 4) == (_DWORD)v15)
        {
LABEL_104:
          v24 = (const char *)v21[3];
LABEL_43:
          v10 = v57;
          v25 = *(_QWORD *)(v57 + 32);
          v26 = "read";
          if (!*(_BYTE *)(v57 + 112))
            v26 = "write";
          v27 = *(_DWORD *)(v57 + 96);
          v28 = *(_DWORD *)(v57 + 100);
          if (*(_BYTE *)(v57 + 113))
            v29 = "TRUE";
          else
            v29 = "FALSE";
          if (*(_BYTE *)(v57 + 114))
            v30 = "TRUE";
          else
            v30 = "FALSE";
          v31 = *(_QWORD *)(v57 + 64);
          *(_DWORD *)buf = 136316930;
          *(_QWORD *)&buf[4] = v24;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v26;
          *(_WORD *)v60 = 1024;
          *(_DWORD *)&v60[2] = v27;
          *(_WORD *)&v60[6] = 1024;
          *(_DWORD *)&v60[8] = v28;
          *(_WORD *)&v60[12] = 2080;
          *(_QWORD *)&v60[14] = v29;
          *(_WORD *)&v60[22] = 2080;
          *(_QWORD *)&v60[24] = v30;
          LOWORD(v61) = 2048;
          *(_QWORD *)((char *)&v61 + 2) = v31;
          _os_log_impl(&dword_24B97E000, v14, OS_LOG_TYPE_DEFAULT, "Client (%s) session (%llu): %s sequenceID(%u) timeout(%u sec) queued(%s) started(%s) files(%lu)", buf, 0x4Au);
          v19 = v11;
          v58 = v57;
          if (v11)
          {
LABEL_52:
            v32 = (unint64_t *)&v19->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
LABEL_54:
          v34 = *(uint64_t **)(v10 + 56);
          if (!v34)
            goto LABEL_55;
          while (2)
          {
            v46 = **(NSObject ***)(v1 + 128);
            if (!os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
              goto LABEL_74;
            v47 = *(unsigned int *)(v10 + 24);
            if ((v48 & 1) == 0
            {
              v61 = xmmword_251CC31B0;
              v62 = unk_251CC31C0;
              v63 = xmmword_251CC31D0;
              *(_OWORD *)buf = constinit;
              *(_OWORD *)&buf[16] = unk_251CC3180;
              *(_OWORD *)v60 = xmmword_251CC3190;
              *(_OWORD *)&v60[16] = unk_251CC31A0;
              std::unordered_map<HSFilerClientID,char const*>::unordered_map((uint64_t)&hsfiler::support::to_string(HSFilerClientID)::clientNames, (unsigned int *)buf, 7);
            }
            if (!qword_2579B8DF0)
              goto LABEL_70;
            v49 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2579B8DF0);
            v49.i16[0] = vaddlv_u8(v49);
            if (v49.u32[0] > 1uLL)
            {
              v50 = v47;
              if (qword_2579B8DF0 <= v47)
                v50 = v47 % qword_2579B8DF0;
            }
            else
            {
              v50 = ((_DWORD)qword_2579B8DF0 - 1) & v47;
            }
            v51 = *(uint64_t ***)(hsfiler::support::to_string(HSFilerClientID)::clientNames + 8 * v50);
            if (!v51 || (v52 = *v51) == 0)
            {
LABEL_70:
              v42 = "HS_FILER_CLIENT_INVALID";
              v43 = v34 + 2;
              v10 = v58;
              v44 = *(_QWORD *)(v58 + 32);
              if (*((char *)v34 + 39) < 0)
                goto LABEL_99;
              goto LABEL_71;
            }
            if (v49.u32[0] < 2uLL)
            {
              while (1)
              {
                v54 = v52[1];
                if (v54 == v47)
                {
                  if (*((_DWORD *)v52 + 4) == (_DWORD)v47)
                    goto LABEL_98;
                }
                else if ((v54 & (qword_2579B8DF0 - 1)) != v50)
                {
                  goto LABEL_70;
                }
                v52 = (uint64_t *)*v52;
                if (!v52)
                  goto LABEL_70;
              }
            }
            while (2)
            {
              v53 = v52[1];
              if (v53 != v47)
              {
                if (v53 >= qword_2579B8DF0)
                  v53 %= (unint64_t)qword_2579B8DF0;
                if (v53 != v50)
                  goto LABEL_70;
                goto LABEL_87;
              }
              if (*((_DWORD *)v52 + 4) != (_DWORD)v47)
              {
LABEL_87:
                v52 = (uint64_t *)*v52;
                if (!v52)
                  goto LABEL_70;
                continue;
              }
              break;
            }
LABEL_98:
            v42 = (const char *)v52[3];
            v43 = v34 + 2;
            v10 = v58;
            v44 = *(_QWORD *)(v58 + 32);
            if (*((char *)v34 + 39) < 0)
LABEL_99:
              v43 = (_QWORD *)*v43;
LABEL_71:
            v45 = "transferred";
            if (!*((_BYTE *)v34 + 40))
              v45 = "not transferred";
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = v42;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v44;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v43;
            *(_WORD *)v60 = 2080;
            *(_QWORD *)&v60[2] = v45;
            _os_log_impl(&dword_24B97E000, v46, OS_LOG_TYPE_INFO, "Client (%s) session (%llu): file (%s) %s", buf, 0x2Au);
LABEL_74:
            v34 = (uint64_t *)*v34;
            if (v34)
              continue;
            break;
          }
          if (!v19)
            goto LABEL_59;
LABEL_55:
          v35 = (unint64_t *)&v19->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
            if (v11)
            {
LABEL_60:
              v37 = (unint64_t *)&v11->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
          }
          else
          {
LABEL_59:
            if (v11)
              goto LABEL_60;
          }
          v39 = (_QWORD *)v7[1];
          if (v39)
          {
            do
            {
              v40 = v39;
              v39 = (_QWORD *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              v40 = (_QWORD *)v7[2];
              v41 = *v40 == (_QWORD)v7;
              v7 = v40;
            }
            while (!v41);
          }
          v7 = v40;
          if (v40 == v56)
            goto LABEL_10;
          goto LABEL_14;
        }
      }
      else
      {
        if (v22 >= qword_2579B8DF0)
          v22 %= (unint64_t)qword_2579B8DF0;
        if (v22 != v18)
          goto LABEL_42;
      }
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_42;
    }
  }
LABEL_110:
  v55 = **(NSObject ***)(v1 + 128);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B97E000, v55, OS_LOG_TYPE_DEFAULT, " ------ HSFiler State Dump END ------ ", buf, 2u);
  }
}

void sub_24B98BD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B98BD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__tree_node<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = (uint64_t *)v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = v9;
            v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = v4[4];
        if (v8[4] >= v12)
          break;
      }
      if (v7)
        v13 = (uint64_t **)v8;
      else
        v13 = (uint64_t **)v6;
      if (v7)
        v14 = (uint64_t **)(v8 + 1);
      else
        v14 = (uint64_t **)v6;
      if (!*v14)
        goto LABEL_25;
LABEL_31:
      v23 = (_QWORD *)v4[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v4[2];
          v11 = *v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v11);
      }
      v4 = v24;
      if (v24 == a3)
        return result;
    }
    v14 = (uint64_t **)v6;
    v13 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v7;
          v15 = v7[4];
          if (v15 <= v12)
            break;
          v7 = *v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_25;
        }
        if (v15 >= v12)
          goto LABEL_31;
        v7 = v13[1];
        if (!v7)
        {
          v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_25:
    v16 = (uint64_t *)operator new(0x38uLL);
    v17 = v16;
    v18 = v4[5];
    v16[4] = v4[4];
    v16[5] = v18;
    v19 = v4[6];
    v16[6] = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *v16 = 0;
    v16[1] = 0;
    v16[2] = (uint64_t)v13;
    *v14 = v16;
    v22 = *(_QWORD *)*v5;
    if (v22)
    {
      *v5 = v22;
      v17 = *v14;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v17);
    ++v5[2];
    goto LABEL_31;
  }
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void std::__shared_ptr_emplace<HSFilerRT_Internal_INT::Session_INT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CC2CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HSFilerRT_Internal_INT::Session_INT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CC2CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<HSFilerRT_Internal_INT::Session_INT>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, __int128 **a3)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  _QWORD v58[2];
  unint64_t v59;

  v4 = (_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t *)a2, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= v10)
        v12 = v8 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v4[23];
        if (v15 >= 0)
          v16 = v4[23];
        else
          v16 = *((_QWORD *)v4 + 1);
        if (v15 < 0)
          v4 = *(_BYTE **)v4;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v9)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v4[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v9)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v4[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v59 = 0xAAAAAAAAAAAAAA00;
  v26 = (char *)operator new(0x30uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v9;
  v27 = (std::string *)(v26 + 16);
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[40] = 0;
  LOBYTE(v59) = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v10 || (float)(v31 * (float)v10) < v30)
  {
    v34 = 1;
    if (v10 >= 3)
      v34 = (v10 & (v10 - 1)) != 0;
    v35 = v34 | (2 * v10);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (prime > v10)
    {
LABEL_68:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v38 = operator new(8 * prime);
      v39 = *(void **)a1;
      *(_QWORD *)a1 = v38;
      if (v39)
        operator delete(v39);
      v40 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      v41 = (_QWORD *)*v25;
      if (!*v25)
        goto LABEL_100;
      v42 = v41[1];
      v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v44 = v42 & v43;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v25;
        for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
        {
          v46 = i[1] & v43;
          if (v46 == v44)
          {
            v41 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
          {
            *v41 = *i;
            v47 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v47);
            **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v41;
            v41 = i;
            v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime)
        v42 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      v51 = (_QWORD *)*v41;
      if (!*v41)
      {
LABEL_100:
        v10 = prime;
        v54 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_101;
        goto LABEL_116;
      }
      while (1)
      {
        v53 = v51[1];
        if (v53 >= prime)
          v53 %= prime;
        if (v53 == v42)
          goto LABEL_94;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v53))
        {
          *v41 = *v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)(*(_QWORD *)a1 + v52);
          **(_QWORD **)(*(_QWORD *)a1 + v52) = v51;
          v51 = v41;
LABEL_94:
          v41 = v51;
          v51 = (_QWORD *)*v51;
          if (!v51)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v41;
          v41 = v51;
          v51 = (_QWORD *)*v51;
          v42 = v53;
          if (!v51)
            goto LABEL_100;
        }
      }
    }
    if (prime < v10)
    {
      v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (prime <= v48)
        prime = v48;
      if (prime < v10)
      {
        if (!prime)
        {
          v55 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v55)
            operator delete(v55);
          v10 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v54 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_101:
      if (v9 >= v10)
      {
        v12 = v9 % v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v12 = v9;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
LABEL_117:
      *v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v58[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v25;
      if (*(_QWORD *)v58[0])
      {
        v56 = *(_QWORD *)(*(_QWORD *)v58[0] + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v56 >= v10)
            v56 %= v10;
        }
        else
        {
          v56 &= v10 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    v12 = v54 & v9;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v54 & v9));
    v33 = (_QWORD *)v58[0];
    if (v32)
      goto LABEL_57;
    goto LABEL_117;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  v33 = (_QWORD *)v58[0];
  if (!v32)
    goto LABEL_117;
LABEL_57:
  *v33 = *v32;
  *v32 = v58[0];
LABEL_123:
  v14 = (uint64_t *)v58[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_24B98CE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BOOL>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24B98CE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BOOL>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BOOL>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void _ZNSt3__115allocate_sharedB8ne180100I22HSFilerRT_Internal_INTNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)off_251CC2D10;
  v2[1].std::__shared_count = 0u;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[2].__shared_owners_ = 0u;
  v2[3].std::__shared_count = 0u;
  *(_OWORD *)&v2[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[4].__shared_owners_ = 0u;
  v2[5].std::__shared_count = 0u;
  *(_OWORD *)&v2[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[6].__shared_owners_ = 0u;
  v2[7].std::__shared_count = 0u;
  *(_OWORD *)&v2[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[8].__shared_owners_ = 0u;
  v2[9].std::__shared_count = 0u;
  *(_OWORD *)&v2[9].__shared_weak_owners_ = 0u;
  HSFilerRT_Internal::HSFilerRT_Internal((HSFilerRT_Internal *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_251CC45A0;
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_24B98D074(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<HSFilerRT_Internal_INT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CC2D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HSFilerRT_Internal_INT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CC2D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<HSFilerRT_Internal_INT>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_53;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI18HSFilerRT_InternalE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c47_ZTSNSt3__110shared_ptrIK18HSFilerRT_InternalEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void __destroy_helper_block_e8_32b40c47_ZTSNSt3__110shared_ptrIK18HSFilerRT_InternalEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
  else
  {
LABEL_5:
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

_QWORD *std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::~__func(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_251CC2DB0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_251CC2DB0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_251CC2DB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_251CC2DB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::operator()(_QWORD *result, const void **a2, size_t *a3)
{
  void **v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = (void **)result[1];
  v4 = (char *)*a2;
  v5 = *a3;
  v6 = (unint64_t)v3[2];
  v7 = (char *)*v3;
  if (v6 - (unint64_t)*v3 >= *a3)
  {
    v12 = (char *)v3[1];
    v13 = v12 - v7;
    if (v12 - v7 >= v5)
    {
      if (v5)
        result = memmove(*v3, *a2, *a3);
      v11 = &v7[v5];
    }
    else
    {
      if (v12 != v7)
      {
        result = memmove(*v3, *a2, v12 - v7);
        v7 = (char *)v3[1];
      }
      if (v13 != v5)
        result = memmove(v7, &v4[v13], v5 - v13);
      v11 = &v7[v5 - v13];
    }
  }
  else
  {
    if (v7)
    {
      v3[1] = v7;
      operator delete(v7);
      v6 = 0;
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v8 = 2 * v6;
    if (2 * v6 <= v5)
      v8 = v5;
    v9 = v6 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v8;
    if ((v9 & 0x8000000000000000) != 0)
LABEL_22:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    *v3 = v10;
    v3[1] = v10;
    v3[2] = &v10[v9];
    result = memcpy(v10, v4, v5);
    v11 = &v10[v5];
  }
  v3[1] = v11;
  return result;
}

uint64_t std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18HSFilerRT_Internal12readWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIc"
                     "EENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5blockIU13block_pointerFv"
                     "y13HSFilerStatusS9_EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18HSFilerRT_Internal12readWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11ch"
                                "ar_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5bl"
                                "ockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18HSFilerRT_Internal12readWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18HSFilerRT_Internal12readWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::target_type()
{
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::~__func(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_251CC2E40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_251CC2E40;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_251CC2E40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_251CC2E40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  char v19;
  uint64_t block;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  uint64_t **v25;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = MEMORY[0x24BDAC760];
  block = MEMORY[0x24BDAC760];
  v21 = 0x40000000;
  v22 = ___ZN7support2fs8SyncFile4openEv_block_invoke;
  v23 = &__block_descriptor_tmp_5;
  v24 = (char *)v6;
  ctu::SharedSynchronizable<support::fs::SyncFile>::execute_wrapped((uint64_t *)(v6 + 8), (uint64_t)&block);
  v11[0] = *(_QWORD *)(a1 + 8);
  v11[1] = v4;
  v11[2] = v5;
  v12 = v7;
  v13 = 0x40000000;
  v14 = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_5writeEPKvmE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  v15 = &__block_descriptor_tmp_14;
  v16 = v11[0] + 8;
  v17 = v11;
  v18 = &v12;
  v8 = *(NSObject **)(v11[0] + 24);
  if (*(_QWORD *)(v11[0] + 32))
  {
    v19 = -86;
    block = v7;
    v21 = 0x40000000;
    v22 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v23 = &__block_descriptor_tmp_13_1;
    v24 = &v19;
    v25 = &v18;
    dispatch_async_and_wait(v8, &block);
  }
  else
  {
    v19 = -86;
    block = v7;
    v21 = 0x40000000;
    v22 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v23 = &__block_descriptor_tmp_12_1;
    v24 = &v19;
    v25 = &v18;
    dispatch_sync(v8, &block);
  }
  v9 = *(_QWORD *)(a1 + 8);
  v12 = v7;
  v13 = 0x40000000;
  v14 = ___ZN7support2fs8SyncFile5closeEv_block_invoke;
  v15 = &__block_descriptor_tmp_4_0;
  v16 = v9;
  v11[0] = &v12;
  block = v7;
  v21 = 0x40000000;
  v22 = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  v23 = &__block_descriptor_tmp_10_1;
  v24 = (char *)(v9 + 8);
  v25 = (uint64_t **)v11;
  v10 = *(NSObject **)(v9 + 24);
  if (*(_QWORD *)(v9 + 32))
    dispatch_async_and_wait(v10, &block);
  else
    dispatch_sync(v10, &block);
}

uint64_t std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18HSFilerRT_Internal12readWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIc"
                     "EENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18HSFilerRT_Internal12readWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11ch"
                                "ar_traitsIcEENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18HSFilerRT_Internal12readWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18HSFilerRT_Internal12readWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::~__func(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_251CC2EC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_251CC2EC0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_251CC2EC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_251CC2EC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::operator()()
{
  return std::ostream::write();
}

uint64_t std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18HSFilerRT_Internal14readWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traits"
                     "IcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_ostreamIcS4_EEEEN8dispatch5blockIU13block_poin"
                     "terFvy13HSFilerStatusS9_EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18HSFilerRT_Internal14readWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11"
                                "char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_ostreamIcS4_EEEEN8dispat"
                                "ch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18HSFilerRT_Internal14readWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_ostreamIcS4_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18HSFilerRT_Internal14readWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_ostreamIcS4_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::readWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::ostream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,void ()(void const*,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::~__func(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_251CC2F40;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_251CC2F40;
  v2 = (std::__shared_weak_count *)__p[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

char *std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_251CC2F40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_251CC2F40;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

BOOL std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::operator()(uint64_t a1, void **a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *a3;
  v5 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
  if (v5 > *a3)
  {
    v6 = **(NSObject ***)(*(_QWORD *)(a1 + 8) + 128);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_24B97E000, v6, OS_LOG_TYPE_ERROR, "error: Buffer provided by the writer function is too small", v8, 2u);
    }
  }
  else
  {
    memcpy(*a2, *(const void **)v3, *(_QWORD *)(v3 + 8) - *(_QWORD *)v3);
  }
  return v5 <= v4;
}

uint64_t std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18HSFilerRT_Internal13writeWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsI"
                     "cEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5blockIU13block_pointerF"
                     "vy13HSFilerStatusS9_EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18HSFilerRT_Internal13writeWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11c"
                                "har_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5b"
                                "lockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18HSFilerRT_Internal13writeWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18HSFilerRT_Internal13writeWithBuffE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_6vectorIhNS5_IhEEEEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithBuff(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::vector<unsigned char>>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::~__func(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_251CC2FD0;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_251CC2FD0;
  v2 = (std::__shared_weak_count *)__p[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

__n128 std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::__clone(__n128 *a1)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;

  v2 = (__n128 *)operator new(0x38uLL);
  v3 = a1->n128_u64[1];
  v4 = a1[1].n128_u64[0];
  v2->n128_u64[0] = (unint64_t)&off_251CC2FD0;
  v2->n128_u64[1] = v3;
  v5 = a1[1].n128_u64[1];
  v2[1].n128_u64[0] = v4;
  v2[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a1[2];
  v2[2] = result;
  v2[3].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

__n128 std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::__clone(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = a1->n128_u64[1];
  v3 = a1[1].n128_u64[0];
  a2->n128_u64[0] = (unint64_t)&off_251CC2FD0;
  a2->n128_u64[1] = v2;
  v4 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

BOOL std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD v22[3];
  _QWORD v23[6];
  _QWORD *v24;
  char v25;
  _BYTE block[24];
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 > *a3)
  {
    v6 = **(NSObject ***)(v4 + 128);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v8 = hsfiler::support::to_string(*(_DWORD *)(a1 + 40));
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)block = 136315394;
      *(_QWORD *)&block[4] = v8;
      *(_WORD *)&block[12] = 2048;
      *(_QWORD *)&block[14] = v9;
      v10 = "error: Client (%s) session (%llu): buffer provided by the writer function is too small";
      v11 = v6;
      v12 = 22;
LABEL_13:
      _os_log_error_impl(&dword_24B97E000, v11, OS_LOG_TYPE_ERROR, v10, block, v12);
      return 0;
    }
    return result;
  }
  v13 = *a2;
  v22[0] = *(_QWORD *)(a1 + 16);
  v22[1] = v13;
  v22[2] = v5;
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 0x40000000;
  v23[2] = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_4readEPvmE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v23[3] = &__block_descriptor_tmp_15;
  v23[4] = v22[0] + 8;
  v23[5] = v22;
  v24 = v23;
  v14 = *(NSObject **)(v22[0] + 24);
  if (*(_QWORD *)(v22[0] + 32))
  {
    v25 = -86;
    *(_QWORD *)block = MEMORY[0x24BDAC760];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v27 = (char *)&__block_descriptor_tmp_13_1;
    v28 = &v25;
    v29 = &v24;
    dispatch_async_and_wait(v14, block);
    if (v25)
      return 1;
  }
  else
  {
    v25 = -86;
    *(_QWORD *)block = MEMORY[0x24BDAC760];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v27 = (char *)&__block_descriptor_tmp_12_1;
    v28 = &v25;
    v29 = &v24;
    dispatch_sync(v14, block);
    if (v25)
      return 1;
  }
  v15 = **(NSObject ***)(v4 + 128);
  result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v16 = hsfiler::support::to_string(*(_DWORD *)(a1 + 40));
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 16);
    v21 = *(char **)(v18 + 40);
    v19 = (char *)(v18 + 40);
    v20 = v21;
    if (v19[23] < 0)
      v19 = v20;
    *(_DWORD *)block = 136315650;
    *(_QWORD *)&block[4] = v16;
    *(_WORD *)&block[12] = 2048;
    *(_QWORD *)&block[14] = v17;
    *(_WORD *)&block[22] = 2080;
    v27 = v19;
    v10 = "error: Client (%s) session (%llu): failed to read file (%s)";
    v11 = v15;
    v12 = 32;
    goto LABEL_13;
  }
  return result;
}

uint64_t std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18HSFilerRT_Internal13writeWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsI"
                     "cEENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18HSFilerRT_Internal13writeWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11c"
                                "har_traitsIcEENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18HSFilerRT_Internal13writeWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18HSFilerRT_Internal13writeWithFileE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_N8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithFile(HSFilerClientID,unsigned long long,std::string const&,std::string,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::~__func(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_251CC3050;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_251CC3050;
  v2 = (std::__shared_weak_count *)__p[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

char *std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)result = &off_251CC3050;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_251CC3050;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  return result;
}

void std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

BOOL std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint8_t v7[16];

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 > *a3)
  {
    v5 = **(NSObject ***)(*(_QWORD *)(a1 + 8) + 128);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_24B97E000, v5, OS_LOG_TYPE_ERROR, "error: Buffer provided by the writer function is too small", v7, 2u);
    }
  }
  else
  {
    std::istream::read();
  }
  return v4 <= v3;
}

uint64_t std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18HSFilerRT_Internal15writeWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_trait"
                     "sIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_istreamIcS4_EEEEN8dispatch5blockIU13block_poi"
                     "nterFvy13HSFilerStatusS9_EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18HSFilerRT_Internal15writeWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_1"
                                "1char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_istreamIcS4_EEEEN8dispa"
                                "tch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18HSFilerRT_Internal15writeWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_istreamIcS4_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18HSFilerRT_Internal15writeWithStreamE15HSFilerClientIDyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrINS1_13basic_istreamIcS4_EEEEN8dispatch5blockIU13block_pointerFvy13HSFilerStatusS9_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0,std::allocator<HSFilerRT_Internal::writeWithStream(HSFilerClientID,unsigned long long,std::string const&,std::shared_ptr<std::istream>,dispatch::block<void({block_pointer})(unsigned long long,HSFilerStatus,std::string const&)>)::$_0>,BOOL ()(void *,unsigned long)>::target_type()
{
}

uint64_t __cxx_global_var_init_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

BOOL isAvailable(capabilities::radio *a1)
{
  return capabilities::radio::vendor(a1) == 3;
}

BOOL hsfiler::support::validClientID(unsigned int a1)
{
  return a1 < 9;
}

const char *hsfiler::support::to_string(unsigned int a1)
{
  unsigned __int8 v1;
  uint8x8_t v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  int v11;
  _OWORD v12[7];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0)
  {
    v10 = a1;
    a1 = v10;
    if (v11)
    {
      v12[4] = xmmword_251CC31B0;
      v12[5] = unk_251CC31C0;
      v12[6] = xmmword_251CC31D0;
      v12[0] = constinit;
      v12[1] = unk_251CC3180;
      v12[2] = xmmword_251CC3190;
      v12[3] = unk_251CC31A0;
      std::unordered_map<HSFilerClientID,char const*>::unordered_map((uint64_t)&hsfiler::support::to_string(HSFilerClientID)::clientNames, (unsigned int *)v12, 7);
      a1 = v10;
    }
  }
  if (qword_2579B8DF0)
  {
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2579B8DF0);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.u32[0] > 1uLL)
    {
      v3 = a1;
      if (qword_2579B8DF0 <= (unint64_t)a1)
        v3 = a1 % (unint64_t)qword_2579B8DF0;
    }
    else
    {
      v3 = ((_DWORD)qword_2579B8DF0 - 1) & a1;
    }
    v4 = *(uint64_t ***)(hsfiler::support::to_string(HSFilerClientID)::clientNames + 8 * v3);
    if (v4)
    {
      v5 = *v4;
      if (v5)
      {
        if (v2.u32[0] < 2uLL)
        {
          v6 = "HS_FILER_CLIENT_INVALID";
          while (1)
          {
            v7 = v5[1];
            if (v7 == a1)
            {
              if (*((_DWORD *)v5 + 4) == a1)
                return (const char *)v5[3];
            }
            else if ((v7 & (qword_2579B8DF0 - 1)) != v3)
            {
              return v6;
            }
            v5 = (uint64_t *)*v5;
            if (!v5)
              return v6;
          }
        }
        v6 = "HS_FILER_CLIENT_INVALID";
        while (1)
        {
          v9 = v5[1];
          if (v9 == a1)
          {
            if (*((_DWORD *)v5 + 4) == a1)
              return (const char *)v5[3];
          }
          else
          {
            if (v9 >= qword_2579B8DF0)
              v9 %= (unint64_t)qword_2579B8DF0;
            if (v9 != v3)
              return v6;
          }
          v5 = (uint64_t *)*v5;
          if (!v5)
            return v6;
        }
      }
    }
  }
  return "HS_FILER_CLIENT_INVALID";
}

void sub_24B98EBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<HSFilerClientID,char const*>::unordered_map(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<HSFilerClientID,char const*>,std::__unordered_map_hasher<HSFilerClientID,std::__hash_value_type<HSFilerClientID,char const*>,std::hash<HSFilerClientID>,std::equal_to<HSFilerClientID>,true>,std::__unordered_map_equal<HSFilerClientID,std::__hash_value_type<HSFilerClientID,char const*>,std::equal_to<HSFilerClientID>,std::hash<HSFilerClientID>,true>,std::allocator<std::__hash_value_type<HSFilerClientID,char const*>>>::__emplace_unique_key_args<HSFilerClientID,std::pair<HSFilerClientID const,char const*> const&>((float *)a1, a2, a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_24B98EC60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(exception_object);
}

const char *hsfiler::support::to_string(int a1)
{
  unsigned __int8 v1;
  uint8x8_t v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  int v11;
  int __dst[68];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0)
  {
    v10 = a1;
    a1 = v10;
    if (v11)
    {
      memcpy(__dst, &constinit_25, sizeof(__dst));
      std::unordered_map<HSFilerStatus,char const*>::unordered_map((uint64_t)&hsfiler::support::to_string(HSFilerStatus)::statustStrings, __dst, 17);
      a1 = v10;
    }
  }
  if (qword_2579B8E20)
  {
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2579B8E20);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.u32[0] > 1uLL)
    {
      v3 = a1;
      if (qword_2579B8E20 <= (unint64_t)a1)
        v3 = a1 % (unint64_t)qword_2579B8E20;
    }
    else
    {
      v3 = (qword_2579B8E20 - 1) & a1;
    }
    v4 = *(uint64_t ***)(hsfiler::support::to_string(HSFilerStatus)::statustStrings + 8 * v3);
    if (v4)
    {
      v5 = *v4;
      if (v5)
      {
        if (v2.u32[0] < 2uLL)
        {
          v6 = "HS_FILER_STATUS_INVALID";
          while (1)
          {
            v7 = v5[1];
            if (v7 == a1)
            {
              if (*((_DWORD *)v5 + 4) == a1)
                return (const char *)v5[3];
            }
            else if ((v7 & (qword_2579B8E20 - 1)) != v3)
            {
              return v6;
            }
            v5 = (uint64_t *)*v5;
            if (!v5)
              return v6;
          }
        }
        v6 = "HS_FILER_STATUS_INVALID";
        while (1)
        {
          v9 = v5[1];
          if (v9 == a1)
          {
            if (*((_DWORD *)v5 + 4) == a1)
              return (const char *)v5[3];
          }
          else
          {
            if (v9 >= qword_2579B8E20)
              v9 %= (unint64_t)qword_2579B8E20;
            if (v9 != v3)
              return v6;
          }
          v5 = (uint64_t *)*v5;
          if (!v5)
            return v6;
        }
      }
    }
  }
  return "HS_FILER_STATUS_INVALID";
}

void sub_24B98EE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<HSFilerStatus,char const*>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<HSFilerStatus,char const*>,std::__unordered_map_hasher<HSFilerStatus,std::__hash_value_type<HSFilerStatus,char const*>,std::hash<HSFilerStatus>,std::equal_to<HSFilerStatus>,true>,std::__unordered_map_equal<HSFilerStatus,std::__hash_value_type<HSFilerStatus,char const*>,std::equal_to<HSFilerStatus>,std::hash<HSFilerStatus>,true>,std::allocator<std::__hash_value_type<HSFilerStatus,char const*>>>::__emplace_unique_key_args<HSFilerStatus,std::pair<HSFilerStatus const,char const*> const&>((float *)a1, a2, a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_24B98EEC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<HSFilerClientID,char const*>,std::__unordered_map_hasher<HSFilerClientID,std::__hash_value_type<HSFilerClientID,char const*>,std::hash<HSFilerClientID>,std::equal_to<HSFilerClientID>,true>,std::__unordered_map_equal<HSFilerClientID,std::__hash_value_type<HSFilerClientID,char const*>,std::equal_to<HSFilerClientID>,std::hash<HSFilerClientID>,true>,std::allocator<std::__hash_value_type<HSFilerClientID,char const*>>>::__emplace_unique_key_args<HSFilerClientID,std::pair<HSFilerClientID const,char const*> const&>(float *a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  unint64_t v41;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v6 <= v5)
        v8 = v5 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v5)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v5)
                return v10;
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v5)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v5)
              return v10;
          }
          else
          {
            if (v11 >= v6)
              v11 %= v6;
            if (v11 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v5;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (v6 && (float)(v16 * (float)v6) >= v15)
  {
    v5 = v8;
    v17 = *(_QWORD **)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
    if (!v18)
      goto LABEL_85;
LABEL_73:
    *v14 = *v18;
LABEL_91:
    *v18 = v14;
    goto LABEL_92;
  }
  v19 = 1;
  if (v6 >= 3)
    v19 = (v6 & (v6 - 1)) != 0;
  v20 = v19 | (2 * v6);
  v21 = vcvtps_u32_f32(v15 / v16);
  if (v20 <= v21)
    prime = v21;
  else
    prime = v20;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *((_QWORD *)a1 + 1);
  }
  if (prime > v6)
  {
LABEL_37:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
      goto LABEL_69;
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
      goto LABEL_69;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
    {
LABEL_69:
      v6 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_70;
LABEL_84:
      v5 = ((_DWORD)v6 - 1) & v5;
      v17 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
      if (!v18)
        goto LABEL_85;
      goto LABEL_73;
    }
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 == v28)
        goto LABEL_63;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
      {
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
LABEL_63:
        v26 = v37;
        v37 = (_QWORD *)*v37;
        if (!v37)
          goto LABEL_69;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
        v26 = v37;
        v37 = (_QWORD *)*v37;
        v28 = v39;
        if (!v37)
          goto LABEL_69;
      }
    }
  }
  if (prime < v6)
  {
    v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v6 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
    {
      v34 = std::__next_prime(v34);
    }
    else
    {
      v36 = 1 << -(char)__clz(v34 - 1);
      if (v34 >= 2)
        v34 = v36;
    }
    if (prime <= v34)
      prime = v34;
    if (prime < v6)
    {
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_84;
      }
      goto LABEL_37;
    }
    v6 = *((_QWORD *)a1 + 1);
  }
  if ((v6 & (v6 - 1)) == 0)
    goto LABEL_84;
LABEL_70:
  if (v6 <= v5)
    v5 %= v6;
  v17 = *(_QWORD **)a1;
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v18)
    goto LABEL_73;
LABEL_85:
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v17[v5] = a1 + 4;
  if (*v14)
  {
    v41 = *(_QWORD *)(*v14 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v41 >= v6)
        v41 %= v6;
    }
    else
    {
      v41 &= v6 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
  return v14;
}

void sub_24B98F3A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<HSFilerStatus,char const*>,std::__unordered_map_hasher<HSFilerStatus,std::__hash_value_type<HSFilerStatus,char const*>,std::hash<HSFilerStatus>,std::equal_to<HSFilerStatus>,true>,std::__unordered_map_equal<HSFilerStatus,std::__hash_value_type<HSFilerStatus,char const*>,std::equal_to<HSFilerStatus>,std::hash<HSFilerStatus>,true>,std::allocator<std::__hash_value_type<HSFilerStatus,char const*>>>::__emplace_unique_key_args<HSFilerStatus,std::pair<HSFilerStatus const,char const*> const&>(float *a1, int *a2, _OWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v6 <= v5)
        v8 = v5 % v6;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v5)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v5)
                return v10;
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v5)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v5)
              return v10;
          }
          else
          {
            if (v11 >= v6)
              v11 %= v6;
            if (v11 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v5;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v6 || (float)(v16 * (float)v6) < v15)
  {
    v19 = 1;
    if (v6 >= 3)
      v19 = (v6 & (v6 - 1)) != 0;
    v20 = v19 | (2 * v6);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (prime > v6)
    {
LABEL_37:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * prime);
      v24 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v23;
      if (v24)
        operator delete(v24);
      v25 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
      while (prime != v25);
      v27 = (uint64_t *)(a1 + 4);
      v26 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v26)
        goto LABEL_69;
      v28 = v26[1];
      v29 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v30 = v28 & v29;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
        for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
        {
          v32 = i[1] & v29;
          if (v32 == v30)
          {
            v26 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
          {
            *v26 = *i;
            v33 = 8 * v32;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
            **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
            v26 = i;
            v30 = v32;
          }
        }
        goto LABEL_69;
      }
      if (v28 >= prime)
        v28 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
      v37 = (_QWORD *)*v26;
      if (!*v26)
      {
LABEL_69:
        v6 = prime;
        v40 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_70;
        goto LABEL_85;
      }
      while (1)
      {
        v39 = v37[1];
        if (v39 >= prime)
          v39 %= prime;
        if (v39 == v28)
          goto LABEL_63;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
        {
          *v26 = *v37;
          v38 = 8 * v39;
          *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
          **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
          v37 = v26;
LABEL_63:
          v26 = v37;
          v37 = (_QWORD *)*v37;
          if (!v37)
            goto LABEL_69;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
          v26 = v37;
          v37 = (_QWORD *)*v37;
          v28 = v39;
          if (!v37)
            goto LABEL_69;
        }
      }
    }
    if (prime < v6)
    {
      v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < v6)
      {
        if (!prime)
        {
          v41 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v41)
            operator delete(v41);
          v6 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v40 = -1;
          goto LABEL_85;
        }
        goto LABEL_37;
      }
      v6 = *((_QWORD *)a1 + 1);
    }
    v40 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
LABEL_70:
      if (v6 <= v5)
      {
        v8 = v5 % v6;
        v17 = *(_QWORD **)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v8 = v5;
        v17 = *(_QWORD **)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v18)
          goto LABEL_26;
      }
      goto LABEL_86;
    }
LABEL_85:
    v8 = v40 & v5;
    v17 = *(_QWORD **)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v5));
    if (v18)
      goto LABEL_26;
    goto LABEL_86;
  }
  v17 = *(_QWORD **)a1;
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v18)
  {
LABEL_26:
    *v14 = *v18;
LABEL_92:
    *v18 = v14;
    goto LABEL_93;
  }
LABEL_86:
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v17[v8] = a1 + 4;
  if (*v14)
  {
    v42 = *(_QWORD *)(*v14 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v42 >= v6)
        v42 %= v6;
    }
    else
    {
      v42 &= v6 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_92;
  }
LABEL_93:
  ++*((_QWORD *)a1 + 3);
  return v14;
}

void sub_24B98F874(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t support::transport::PCIMemRegion::getLogClient(support::transport::PCIMemRegion *this)
{
  return (uint64_t)this + 168;
}

void support::transport::PCIMemRegion::create(const void **a1@<X0>, int a2@<W1>, mach_vm_size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, support::transport::PCIMemRegion **a6@<X8>)
{
  support::transport::PCIMemRegion::create(a1, a2, a3, 0, 0, a4, a5, a6);
}

void support::transport::PCIMemRegion::create(const void **a1@<X0>, int a2@<W1>, mach_vm_size_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, support::transport::PCIMemRegion **a8@<X8>)
{
  std::__shared_weak_count **v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  support::transport::PCIMemRegion *v27;
  char v28;

  *a8 = (support::transport::PCIMemRegion *)0xAAAAAAAAAAAAAAAALL;
  a8[1] = (support::transport::PCIMemRegion *)0xAAAAAAAAAAAAAAAALL;
  v16 = (std::__shared_weak_count **)operator new(0xF8uLL);
  support::transport::PCIMemRegion::PCIMemRegion((uint64_t)v16, a1, a2, a7, a6);
  *a8 = (support::transport::PCIMemRegion *)v16;
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_251CC3408;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  a8[1] = (support::transport::PCIMemRegion *)v17;
  v19 = v16[2];
  if (v19)
  {
    if (v19->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v16[1] = (std::__shared_weak_count *)v16;
    v16[2] = v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v16[1] = (std::__shared_weak_count *)v16;
    v16[2] = v17;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_14:
  v27 = *a8;
  if (*a8)
  {
    if ((support::transport::PCIMemRegion::createPCITransport(*a8) & 1) == 0
      || !support::transport::PCIMemRegion::allocateVMRegion(v27, a3)
      || (!a4 || !a5
        ? (v28 = support::transport::PCIMemRegion::mapVMRegion(v27))
        : (v28 = support::transport::PCIMemRegion::mapVMRegionWithClientData(v27, a4)),
          (v28 & 1) == 0))
    {
      std::shared_ptr<support::transport::PCIMemRegion>::reset[abi:ne180100](a8);
    }
  }
}

void sub_24B98FA54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_24B98FA70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24B98FA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t support::transport::PCIMemRegion::createPCITransport(support::transport::PCIMemRegion *this)
{
  support::log::manager *v2;
  char *v3;
  support::log::buffer *v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  std::chrono::system_clock::time_point v9;
  _QWORD *v10;
  uint64_t i;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  support::log::manager *v27;
  support::log::buffer *v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  std::chrono::system_clock::time_point v33;
  _QWORD *v34;
  uint64_t j;
  support::log::manager *v37;
  support::log::buffer *v38;
  int v39;
  support::log::buffer *v40;
  int v41;
  support::log::manager *v42;
  support::log::buffer *v43;
  int v44;
  support::log::buffer *v45;
  int v46;
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  char *v57;
  _QWORD v58[5];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)this + 30))
  {
    v37 = (support::log::manager *)*((_QWORD *)this + 30);
    v66 = 1;
    v38 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v38)
    {
      if (*((_QWORD *)v37 + 17))
      {
        v39 = 2;
        support::log::buffer::borrow(v38);
      }
      else
      {
        v39 = 0;
      }
      if (v39 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        v47 = *((_DWORD *)this + 30);
        LODWORD(v67) = 67109120;
        DWORD1(v67) = v47;
        v48 = _os_log_send_and_compose_impl();
        if (v48)
        {
          v49 = (char *)v48;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          *(_QWORD *)&v67 = &unk_251CC27F8;
          *((_QWORD *)&v67 + 1) = (char *)this + 176;
          *(_QWORD *)&v68 = &v66;
          *((_QWORD *)&v68 + 1) = &rep;
          support::log::manager::message_delegates(v37, (const support::log::details *)&v67, v49);
        }
      }
    }
    return 0;
  }
  v2 = (support::log::manager *)*((_QWORD *)this + 30);
  v3 = (char *)this + 176;
  if (!*((_QWORD *)this + 3))
  {
    v66 = 1;
    v40 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v40)
    {
      if (*((_QWORD *)v2 + 17))
      {
        v41 = 2;
        support::log::buffer::borrow(v40);
      }
      else
      {
        v41 = 0;
      }
      if (v41 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        LOWORD(v67) = 0;
        v50 = _os_log_send_and_compose_impl();
        if (v50)
        {
          v51 = (char *)v50;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          *(_QWORD *)&v67 = &unk_251CC27F8;
          *((_QWORD *)&v67 + 1) = v3;
          *(_QWORD *)&v68 = &v66;
          *((_QWORD *)&v68 + 1) = &rep;
          support::log::manager::message_delegates(v2, (const support::log::details *)&v67, v51);
        }
      }
    }
    return 0;
  }
  v66 = 3;
  v4 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 3, **((_QWORD **)this + 27));
  if ((_DWORD)v4)
  {
    if (*((_QWORD *)v2 + 17))
    {
      v5 = 2;
      support::log::buffer::borrow(v4);
    }
    else
    {
      v5 = 0;
    }
    if (v5 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_DWORD *)this + 30);
      LODWORD(v67) = 67109120;
      DWORD1(v67) = v6;
      v7 = _os_log_send_and_compose_impl();
      if (v7)
      {
        v8 = (char *)v7;
        v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v9.__d_.__rep_;
        *(_QWORD *)&v67 = &unk_251CC27F8;
        *((_QWORD *)&v67 + 1) = v3;
        *(_QWORD *)&v68 = &v66;
        *((_QWORD *)&v68 + 1) = &rep;
        v10 = (_QWORD *)((char *)v2 + 120);
        for (i = *((_QWORD *)v2 + 16); (_QWORD *)i != v10; i = *(_QWORD *)(i + 8))
          v9.__d_.__rep_ = (***(uint64_t (****)(_QWORD, __int128 *, char *))(i + 16))(*(_QWORD *)(i + 16), &v67, v8);
        support::log::manager::release_log_buffer((support::log::manager *)v9.__d_.__rep_, v8);
      }
    }
  }
  v12 = *((unsigned int *)this + 30);
  v67 = 0u;
  v68 = 0u;
  v69 = 0xAAAAAAAA3F800000;
  std::__hash_table<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::__unordered_map_hasher<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::hash<PCITransportMemRegion>,std::equal_to<PCITransportMemRegion>,true>,std::__unordered_map_equal<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::equal_to<PCITransportMemRegion>,std::hash<PCITransportMemRegion>,true>,std::allocator<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>>>::__emplace_unique_key_args<PCITransportMemRegion,std::pair<PCITransportMemRegion const,PCITransportInterface> const&>((float *)&v67, 2u, 0x1200000002);
  std::__hash_table<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::__unordered_map_hasher<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::hash<PCITransportMemRegion>,std::equal_to<PCITransportMemRegion>,true>,std::__unordered_map_equal<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::equal_to<PCITransportMemRegion>,std::hash<PCITransportMemRegion>,true>,std::allocator<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>>>::__emplace_unique_key_args<PCITransportMemRegion,std::pair<PCITransportMemRegion const,PCITransportInterface> const&>((float *)&v67, 3u, 0x1500000003);
  std::__hash_table<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::__unordered_map_hasher<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::hash<PCITransportMemRegion>,std::equal_to<PCITransportMemRegion>,true>,std::__unordered_map_equal<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::equal_to<PCITransportMemRegion>,std::hash<PCITransportMemRegion>,true>,std::allocator<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>>>::__emplace_unique_key_args<PCITransportMemRegion,std::pair<PCITransportMemRegion const,PCITransportInterface> const&>((float *)&v67, 0xFFF0u, 0x130000FFF0);
  if (*((_QWORD *)&v67 + 1))
  {
    v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v67 + 8));
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = v12;
      if (*((_QWORD *)&v67 + 1) <= v12)
        v14 = v12 % *((_QWORD *)&v67 + 1);
    }
    else
    {
      v14 = (DWORD2(v67) - 1) & v12;
    }
    v15 = *(uint64_t ***)(v67 + 8 * v14);
    if (v15)
    {
      v16 = *v15;
      if (v16)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v12)
            {
              if (*((_DWORD *)v16 + 4) == (_DWORD)v12)
                goto LABEL_48;
            }
            else if ((v18 & (*((_QWORD *)&v67 + 1) - 1)) != v14)
            {
              goto LABEL_32;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_32;
          }
        }
        do
        {
          v17 = v16[1];
          if (v17 == v12)
          {
            if (*((_DWORD *)v16 + 4) == (_DWORD)v12)
            {
LABEL_48:
              v20 = 0;
              v19 = *((_DWORD *)v16 + 5);
              v21 = (_QWORD *)v68;
              if (!(_QWORD)v68)
                goto LABEL_34;
              goto LABEL_33;
            }
          }
          else
          {
            if (v17 >= *((_QWORD *)&v67 + 1))
              v17 %= *((_QWORD *)&v67 + 1);
            if (v17 != v14)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_32:
  v19 = 34;
  v20 = 1;
  v21 = (_QWORD *)v68;
  if (!(_QWORD)v68)
    goto LABEL_34;
  do
  {
LABEL_33:
    v22 = (_QWORD *)*v21;
    operator delete(v21);
    v21 = v22;
  }
  while (v22);
LABEL_34:
  v23 = (void *)v67;
  *(_QWORD *)&v67 = 0;
  if (v23)
    operator delete(v23);
  if (v20)
  {
    v42 = (support::log::manager *)*((_QWORD *)this + 30);
    v66 = 1;
    v43 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v42 + 16))(v42, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v43)
    {
      if (*((_QWORD *)v42 + 17))
      {
        support::log::buffer::borrow(v43);
        v44 = 2;
      }
      else
      {
        v44 = 0;
      }
      if (v44 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        v52 = *((_DWORD *)this + 30);
        LODWORD(v67) = 67109120;
        DWORD1(v67) = v52;
        v53 = _os_log_send_and_compose_impl();
        if (v53)
        {
          v54 = (char *)v53;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          *(_QWORD *)&v67 = &unk_251CC27F8;
          *((_QWORD *)&v67 + 1) = v3;
          *(_QWORD *)&v68 = &v66;
          *((_QWORD *)&v68 + 1) = &rep;
          support::log::manager::message_delegates(v42, (const support::log::details *)&v67, v54);
        }
      }
    }
    return 0;
  }
  v64 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v62 = v24;
  v63 = v24;
  v60 = v24;
  v61 = v24;
  v59 = v24;
  TelephonyBasebandPCITransportInitParameters();
  v25 = *((_QWORD *)this + 3);
  v58[0] = MEMORY[0x24BDAC760];
  v58[1] = 0x40000000;
  v58[2] = ___ZN7support9transport12PCIMemRegion18createPCITransportEv_block_invoke;
  v58[3] = &__block_descriptor_tmp_2;
  v58[4] = this;
  *((_QWORD *)&v59 + 1) = v25;
  *(_QWORD *)&v60 = v58;
  LODWORD(v59) = v19;
  DWORD2(v60) = *((_DWORD *)this + 38);
  *(_QWORD *)&v61 = v61 | 4;
  DWORD2(v61) = 0;
  v26 = TelephonyBasebandPCITransportCreate();
  v27 = (support::log::manager *)*((_QWORD *)this + 30);
  if ((v26 & 1) == 0)
  {
    v66 = 1;
    v45 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v45)
    {
      if (*((_QWORD *)v27 + 17))
      {
        support::log::buffer::borrow(v45);
        v46 = 2;
      }
      else
      {
        v46 = 0;
      }
      if (v46 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        v55 = *((_DWORD *)this + 30);
        LODWORD(v67) = 67109120;
        DWORD1(v67) = v55;
        v56 = _os_log_send_and_compose_impl();
        if (v56)
        {
          v57 = (char *)v56;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          *(_QWORD *)&v67 = &unk_251CC27F8;
          *((_QWORD *)&v67 + 1) = v3;
          *(_QWORD *)&v68 = &v66;
          *((_QWORD *)&v68 + 1) = &rep;
          support::log::manager::message_delegates(v27, (const support::log::details *)&v67, v57);
        }
      }
    }
    return 0;
  }
  v66 = 3;
  v28 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 3, **((_QWORD **)this + 27));
  if ((_DWORD)v28)
  {
    if (*((_QWORD *)v27 + 17))
    {
      support::log::buffer::borrow(v28);
      v29 = 2;
    }
    else
    {
      v29 = 0;
    }
    if (v29 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v30 = *((_DWORD *)this + 30);
      LODWORD(v67) = 67109120;
      DWORD1(v67) = v30;
      v31 = _os_log_send_and_compose_impl();
      if (v31)
      {
        v32 = (char *)v31;
        v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v33.__d_.__rep_;
        *(_QWORD *)&v67 = &unk_251CC27F8;
        *((_QWORD *)&v67 + 1) = v3;
        *(_QWORD *)&v68 = &v66;
        *((_QWORD *)&v68 + 1) = &rep;
        v34 = (_QWORD *)((char *)v27 + 120);
        for (j = *((_QWORD *)v27 + 16); (_QWORD *)j != v34; j = *(_QWORD *)(j + 8))
          v33.__d_.__rep_ = (***(uint64_t (****)(_QWORD, __int128 *, char *))(j + 16))(*(_QWORD *)(j + 16), &v67, v32);
        support::log::manager::release_log_buffer((support::log::manager *)v33.__d_.__rep_, v32);
      }
    }
  }
  return 1;
}

void sub_24B990350(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 - 96);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(v1 - 112);
  *(_QWORD *)(v1 - 112) = 0;
  if (v5)
  {
    operator delete(v5);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<support::transport::PCIMemRegion>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t support::transport::PCIMemRegion::allocateVMRegion(support::transport::PCIMemRegion *this, mach_vm_size_t a2)
{
  support::log::manager *v3;
  char *v4;
  support::log::buffer *v6;
  int v7;
  uint64_t v8;
  char *v9;
  std::chrono::system_clock::time_point v10;
  _QWORD *v11;
  uint64_t i;
  vm_map_read_t *v13;
  uint64_t *v14;
  kern_return_t v15;
  kern_return_t v16;
  mach_vm_size_t v17;
  kern_return_t v18;
  kern_return_t v19;
  support::log::manager *v20;
  support::log::buffer *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::chrono::system_clock::time_point v26;
  uint64_t j;
  support::log::buffer *v29;
  int v30;
  support::log::manager *v31;
  support::log::buffer *v32;
  int v33;
  support::log::buffer *v34;
  int v35;
  support::log::buffer *v36;
  int v37;
  support::log::buffer *v38;
  int v39;
  support::log::buffer *v40;
  int v41;
  support::log::buffer *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v55;
  mach_port_t object_name;
  mach_msg_type_number_t infoCnt;
  int info[4];
  __int128 v59;
  int v60;
  mach_vm_address_t address;
  _BYTE v62[24];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  address = 0;
  v60 = -1431699456;
  *(_OWORD *)info = 0u;
  v59 = 0u;
  object_name = 0;
  infoCnt = 9;
  v3 = (support::log::manager *)*((_QWORD *)this + 30);
  v4 = (char *)this + 176;
  if (!a2)
  {
    v55 = 1;
    v29 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v29)
    {
      if (*((_QWORD *)v3 + 17))
      {
        v30 = 2;
        support::log::buffer::borrow(v29);
      }
      else
      {
        v30 = 0;
      }
      if (v30 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v62 = 134217984;
        *(_QWORD *)&v62[4] = 0;
        v44 = _os_log_send_and_compose_impl();
        if (v44)
        {
          v45 = (char *)v44;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          *(_QWORD *)v62 = &unk_251CC27F8;
          *(_QWORD *)&v62[8] = v4;
          *(_QWORD *)&v62[16] = &v55;
          p_rep = &rep;
          support::log::manager::message_delegates(v3, (const support::log::details *)v62, v45);
        }
      }
    }
    goto LABEL_76;
  }
  v55 = 3;
  v6 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 3, **((_QWORD **)this + 27));
  if ((_DWORD)v6)
  {
    if (*((_QWORD *)v3 + 17))
    {
      v7 = 2;
      support::log::buffer::borrow(v6);
    }
    else
    {
      v7 = 0;
    }
    if (v7 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v62 = 134217984;
      *(_QWORD *)&v62[4] = a2;
      v8 = _os_log_send_and_compose_impl();
      if (v8)
      {
        v9 = (char *)v8;
        v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v10.__d_.__rep_;
        *(_QWORD *)v62 = &unk_251CC27F8;
        *(_QWORD *)&v62[8] = v4;
        *(_QWORD *)&v62[16] = &v55;
        p_rep = &rep;
        v11 = (_QWORD *)((char *)v3 + 120);
        for (i = *((_QWORD *)v3 + 16); (_QWORD *)i != v11; i = *(_QWORD *)(i + 8))
          v10.__d_.__rep_ = (***(uint64_t (****)(_QWORD, _BYTE *, char *))(i + 16))(*(_QWORD *)(i + 16), v62, v9);
        support::log::manager::release_log_buffer((support::log::manager *)v10.__d_.__rep_, v9);
      }
    }
  }
  *((_QWORD *)this + 17) = a2;
  v13 = (vm_map_read_t *)MEMORY[0x24BDAEC58];
  v14 = (uint64_t *)((char *)this + 128);
  v15 = mach_vm_allocate(*MEMORY[0x24BDAEC58], (mach_vm_address_t *)this + 16, a2, 1);
  if (v15)
  {
    v31 = (support::log::manager *)*((_QWORD *)this + 30);
    v55 = 1;
    v32 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 1, **((_QWORD **)this + 27));
    if (!(_DWORD)v32)
      goto LABEL_76;
    if (*((_QWORD *)v31 + 17))
    {
      support::log::buffer::borrow(v32);
      v33 = 2;
    }
    else
    {
      v33 = 0;
    }
    if (!(v33 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR)))
      goto LABEL_76;
    v46 = *((_QWORD *)this + 17);
    *(_DWORD *)v62 = 134218240;
    *(_QWORD *)&v62[4] = v46;
    *(_WORD *)&v62[12] = 1024;
    *(_DWORD *)&v62[14] = v15;
    v47 = _os_log_send_and_compose_impl();
    if (!v47)
      goto LABEL_76;
LABEL_71:
    v51 = (char *)v47;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    *(_QWORD *)v62 = &unk_251CC27F8;
    *(_QWORD *)&v62[8] = v4;
    *(_QWORD *)&v62[16] = &v55;
    p_rep = &rep;
    support::log::manager::message_delegates(v31, (const support::log::details *)v62, v51);
LABEL_76:
    support::transport::PCIMemRegion::deallocateVMRegion(this);
    return 0;
  }
  address = *((_QWORD *)this + 16);
  *(_OWORD *)info = 0u;
  v59 = 0u;
  v60 = 0;
  v16 = mach_vm_region(*v13, &address, (mach_vm_size_t *)this + 18, 9, info, &infoCnt, &object_name);
  if (v16)
  {
    v31 = (support::log::manager *)*((_QWORD *)this + 30);
    v55 = 1;
    v34 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 1, **((_QWORD **)this + 27));
    if (!(_DWORD)v34)
      goto LABEL_76;
    if (*((_QWORD *)v31 + 17))
    {
      support::log::buffer::borrow(v34);
      v35 = 2;
    }
    else
    {
      v35 = 0;
    }
    if (!(v35 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR)))
      goto LABEL_76;
    *(_DWORD *)v62 = 67109120;
    *(_DWORD *)&v62[4] = v16;
    v47 = _os_log_send_and_compose_impl();
    if (!v47)
      goto LABEL_76;
    goto LABEL_71;
  }
  if (address != *v14)
  {
    v31 = (support::log::manager *)*((_QWORD *)this + 30);
    v55 = 1;
    v36 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 1, **((_QWORD **)this + 27));
    if (!(_DWORD)v36)
      goto LABEL_76;
    if (*((_QWORD *)v31 + 17))
    {
      support::log::buffer::borrow(v36);
      v37 = 2;
    }
    else
    {
      v37 = 0;
    }
    if (!(v37 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR)))
      goto LABEL_76;
    v48 = *v14;
    *(_DWORD *)v62 = 134218240;
    *(_QWORD *)&v62[4] = address;
    *(_WORD *)&v62[12] = 2048;
    *(_QWORD *)&v62[14] = v48;
    v47 = _os_log_send_and_compose_impl();
    if (!v47)
      goto LABEL_76;
    goto LABEL_71;
  }
  v17 = *((_QWORD *)this + 18);
  if (v17 < *((_QWORD *)this + 17))
  {
    v31 = (support::log::manager *)*((_QWORD *)this + 30);
    v55 = 1;
    v38 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 1, **((_QWORD **)this + 27));
    if (!(_DWORD)v38)
      goto LABEL_76;
    if (*((_QWORD *)v31 + 17))
    {
      support::log::buffer::borrow(v38);
      v39 = 2;
    }
    else
    {
      v39 = 0;
    }
    if (!(v39 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR)))
      goto LABEL_76;
    v50 = *((_QWORD *)this + 17);
    v49 = *((_QWORD *)this + 18);
    *(_DWORD *)v62 = 134218240;
    *(_QWORD *)&v62[4] = v49;
    *(_WORD *)&v62[12] = 2048;
    *(_QWORD *)&v62[14] = v50;
    v47 = _os_log_send_and_compose_impl();
    if (!v47)
      goto LABEL_76;
    goto LABEL_71;
  }
  v18 = mach_vm_protect(*v13, address, v17, 0, 3);
  if (v18)
  {
    v31 = (support::log::manager *)*((_QWORD *)this + 30);
    v55 = 1;
    v40 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 1, **((_QWORD **)this + 27));
    if (!(_DWORD)v40)
      goto LABEL_76;
    if (*((_QWORD *)v31 + 17))
    {
      support::log::buffer::borrow(v40);
      v41 = 2;
    }
    else
    {
      v41 = 0;
    }
    if (!(v41 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR)))
      goto LABEL_76;
    *(_DWORD *)v62 = 67109120;
    *(_DWORD *)&v62[4] = v18;
    v47 = _os_log_send_and_compose_impl();
    if (!v47)
      goto LABEL_76;
    goto LABEL_71;
  }
  v19 = mach_vm_inherit(*v13, *((_QWORD *)this + 16), *((_QWORD *)this + 18), 2u);
  v20 = (support::log::manager *)*((_QWORD *)this + 30);
  if (v19)
  {
    v55 = 1;
    v42 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v42)
    {
      if (*((_QWORD *)v20 + 17))
      {
        support::log::buffer::borrow(v42);
        v43 = 2;
      }
      else
      {
        v43 = 0;
      }
      if (v43 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v62 = 67109120;
        *(_DWORD *)&v62[4] = v19;
        v52 = _os_log_send_and_compose_impl();
        if (v52)
        {
          v53 = (char *)v52;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          *(_QWORD *)v62 = &unk_251CC27F8;
          *(_QWORD *)&v62[8] = v4;
          *(_QWORD *)&v62[16] = &v55;
          p_rep = &rep;
          support::log::manager::message_delegates(v20, (const support::log::details *)v62, v53);
        }
      }
    }
    goto LABEL_76;
  }
  v55 = 3;
  v21 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 3, **((_QWORD **)this + 27));
  if ((_DWORD)v21)
  {
    if (*((_QWORD *)v20 + 17))
    {
      support::log::buffer::borrow(v21);
      v22 = 2;
    }
    else
    {
      v22 = 0;
    }
    if (v22 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v23 = *v14;
      *(_DWORD *)v62 = 134218240;
      *(_QWORD *)&v62[4] = a2;
      *(_WORD *)&v62[12] = 2048;
      *(_QWORD *)&v62[14] = v23;
      v24 = _os_log_send_and_compose_impl();
      if (v24)
      {
        v25 = (char *)v24;
        v26.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v26.__d_.__rep_;
        *(_QWORD *)v62 = &unk_251CC27F8;
        *(_QWORD *)&v62[8] = v4;
        *(_QWORD *)&v62[16] = &v55;
        p_rep = &rep;
        for (j = *((_QWORD *)v20 + 16);
              (support::log::manager *)j != (support::log::manager *)((char *)v20 + 120);
              j = *(_QWORD *)(j + 8))
        {
          v26.__d_.__rep_ = (***(uint64_t (****)(_QWORD, _BYTE *, char *))(j + 16))(*(_QWORD *)(j + 16), v62, v25);
        }
        support::log::manager::release_log_buffer((support::log::manager *)v26.__d_.__rep_, v25);
      }
    }
  }
  return 1;
}

uint64_t support::transport::PCIMemRegion::mapVMRegion(support::transport::PCIMemRegion *this)
{
  _QWORD *v2;
  support::log::buffer *v3;
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::chrono::system_clock::time_point v11;
  _QWORD *v12;
  uint64_t i;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  dispatch_time_t v20;
  _QWORD *v21;
  support::log::buffer *v22;
  int v23;
  _QWORD *v24;
  support::log::buffer *v25;
  int v26;
  uint64_t v27;
  char *v28;
  std::chrono::system_clock::time_point v29;
  _QWORD *v30;
  uint64_t j;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  std::chrono::system_clock::time_point v40;
  _QWORD *v41;
  uint64_t k;
  support::log::manager *v43;
  support::log::buffer *v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  dispatch_object_t object;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  void *v61;
  _BYTE v62[24];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = &v57;
  v59 = 0x2000000000;
  v60 = -536870911;
  v51 = 0;
  v52 = &v51;
  v53 = 0x3002000000;
  v54 = __Block_byref_object_copy_;
  v55 = __Block_byref_object_dispose_;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  object = dispatch_semaphore_create(0);
  v2 = (_QWORD *)*((_QWORD *)this + 30);
  v50 = 3;
  v3 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v2 + 16))(v2, 3, **((_QWORD **)this + 27));
  v4 = (char *)this + 176;
  if ((_DWORD)v3)
  {
    if (v2[17])
    {
      support::log::buffer::borrow(v3);
      v5 = 2;
    }
    else
    {
      v5 = 0;
    }
    if (v5 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_DWORD *)this + 30);
      v7 = *((_QWORD *)this + 18);
      v8 = *((_QWORD *)this + 16);
      LODWORD(v61) = 67109632;
      HIDWORD(v61) = v6;
      *(_WORD *)v62 = 2048;
      *(_QWORD *)&v62[2] = v7;
      *(_WORD *)&v62[10] = 2048;
      *(_QWORD *)&v62[12] = v8;
      v9 = _os_log_send_and_compose_impl();
      if (v9)
      {
        v10 = (char *)v9;
        v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v11.__d_.__rep_;
        v61 = &unk_251CC27F8;
        *(_QWORD *)v62 = (char *)this + 176;
        *(_QWORD *)&v62[8] = &v50;
        *(_QWORD *)&v62[16] = &rep;
        v12 = v2 + 15;
        for (i = v2[16]; (_QWORD *)i != v12; i = *(_QWORD *)(i + 8))
          v11.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(i + 16))(*(_QWORD *)(i + 16), &v61, v10);
        support::log::manager::release_log_buffer((support::log::manager *)v11.__d_.__rep_, v10);
      }
    }
  }
  *((_QWORD *)this + 20) = *((_QWORD *)this + 16);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v14)
  {
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if ((TelephonyBasebandPCITransportMapRegion() & 1) == 0)
  {
    v43 = (support::log::manager *)*((_QWORD *)this + 30);
    v50 = 1;
    v44 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v43 + 16))(v43, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v44)
    {
      if (*((_QWORD *)v43 + 17))
      {
        support::log::buffer::borrow(v44);
        v45 = 2;
      }
      else
      {
        v45 = 0;
      }
      if (v45 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        v46 = *((_DWORD *)this + 30);
        LODWORD(v61) = 67109120;
        HIDWORD(v61) = v46;
        v47 = _os_log_send_and_compose_impl();
        if (v47)
        {
          v48 = (char *)v47;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v61 = &unk_251CC27F8;
          *(_QWORD *)v62 = (char *)this + 176;
          *(_QWORD *)&v62[8] = &v50;
          *(_QWORD *)&v62[16] = &rep;
          support::log::manager::message_delegates(v43, (const support::log::details *)&v61, v48);
        }
      }
    }
LABEL_31:
    v32 = 0;
    *((_QWORD *)this + 20) = 0;
    v33 = v14;
    if (!v14)
      goto LABEL_33;
    goto LABEL_32;
  }
  v19 = v52;
  v20 = dispatch_time(0, 1000000 * *((unsigned int *)this + 38));
  if (dispatch_semaphore_wait((dispatch_semaphore_t)v19[5], v20))
  {
    v21 = (_QWORD *)*((_QWORD *)this + 30);
    v50 = 1;
    v22 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v21 + 16))(v21, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v22)
    {
      if (v21[17])
      {
        support::log::buffer::borrow(v22);
        v23 = 2;
      }
      else
      {
        v23 = 0;
      }
      if (v23 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        LOWORD(v61) = 0;
        v27 = _os_log_send_and_compose_impl();
        if (v27)
        {
          v28 = (char *)v27;
          v29.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          rep = v29.__d_.__rep_;
          v61 = &unk_251CC27F8;
          *(_QWORD *)v62 = (char *)this + 176;
          *(_QWORD *)&v62[8] = &v50;
          *(_QWORD *)&v62[16] = &rep;
          v30 = v21 + 15;
          for (j = v21[16]; (_QWORD *)j != v30; j = *(_QWORD *)(j + 8))
            v29.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(j + 16))(*(_QWORD *)(j + 16), &v61, v28);
          support::log::manager::release_log_buffer((support::log::manager *)v29.__d_.__rep_, v28);
        }
      }
    }
    goto LABEL_31;
  }
  if (*((_DWORD *)v58 + 6))
    goto LABEL_31;
  v24 = (_QWORD *)*((_QWORD *)this + 30);
  v50 = 3;
  v25 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v24 + 16))(v24, 3, **((_QWORD **)this + 27));
  if ((_DWORD)v25)
  {
    if (v24[17])
    {
      support::log::buffer::borrow(v25);
      v26 = 2;
    }
    else
    {
      v26 = 0;
    }
    if (v26 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v35 = *((_DWORD *)this + 30);
      v36 = *((_QWORD *)this + 18);
      v37 = *((_QWORD *)this + 16);
      LODWORD(v61) = 67109632;
      HIDWORD(v61) = v35;
      *(_WORD *)v62 = 2048;
      *(_QWORD *)&v62[2] = v36;
      *(_WORD *)&v62[10] = 2048;
      *(_QWORD *)&v62[12] = v37;
      v38 = _os_log_send_and_compose_impl();
      if (v38)
      {
        v39 = (char *)v38;
        v40.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v40.__d_.__rep_;
        v61 = &unk_251CC27F8;
        *(_QWORD *)v62 = v4;
        *(_QWORD *)&v62[8] = &v50;
        *(_QWORD *)&v62[16] = &rep;
        v41 = v24 + 15;
        for (k = v24[16]; (_QWORD *)k != v41; k = *(_QWORD *)(k + 8))
          v40.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(k + 16))(*(_QWORD *)(k + 16), &v61, v39);
        support::log::manager::release_log_buffer((support::log::manager *)v40.__d_.__rep_, v39);
      }
    }
  }
  v32 = 1;
  v33 = v14;
  if (v14)
LABEL_32:
    std::__shared_weak_count::__release_weak(v33);
LABEL_33:
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Block_object_dispose(&v51, 8);
  if (object)
    dispatch_release(object);
  _Block_object_dispose(&v57, 8);
  return v32;
}

void sub_24B99152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object,char a29)
{
  std::__shared_weak_count *v29;
  NSObject *v31;

  if (a20)
  {
    std::__shared_weak_count::__release_weak(a20);
    if (!v29)
    {
LABEL_3:
      _Block_object_dispose(&a23, 8);
      v31 = object;
      if (!object)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!v29)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v29);
  _Block_object_dispose(&a23, 8);
  v31 = object;
  if (!object)
  {
LABEL_4:
    _Block_object_dispose(&a29, 8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v31);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t support::transport::PCIMemRegion::mapVMRegionWithClientData(support::transport::PCIMemRegion *this, void *a2)
{
  NSObject *v3;
  _QWORD *v4;
  support::log::buffer *v5;
  char *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::chrono::system_clock::time_point v13;
  _QWORD *v14;
  uint64_t i;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  dispatch_time_t v21;
  _QWORD *v22;
  support::log::buffer *v23;
  int v24;
  _QWORD *v25;
  support::log::buffer *v26;
  int v27;
  uint64_t v28;
  char *v29;
  std::chrono::system_clock::time_point v30;
  _QWORD *v31;
  uint64_t j;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  std::chrono::system_clock::time_point v41;
  _QWORD *v42;
  uint64_t k;
  support::log::manager *v44;
  support::log::buffer *v45;
  int v46;
  int v47;
  uint64_t v48;
  char *v49;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  void *v56;
  _BYTE v57[24];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v52 = 0;
  v53 = &v52;
  v54 = 0x2000000000;
  v55 = -536870911;
  v3 = dispatch_semaphore_create(0);
  v4 = (_QWORD *)*((_QWORD *)this + 30);
  v51 = 3;
  v5 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v4 + 16))(v4, 3, **((_QWORD **)this + 27));
  v6 = (char *)this + 176;
  if ((_DWORD)v5)
  {
    if (v4[17])
    {
      support::log::buffer::borrow(v5);
      v7 = 2;
    }
    else
    {
      v7 = 0;
    }
    if (v7 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_DWORD *)this + 30);
      v9 = *((_QWORD *)this + 18);
      v10 = *((_QWORD *)this + 16);
      LODWORD(v56) = 67109632;
      HIDWORD(v56) = v8;
      *(_WORD *)v57 = 2048;
      *(_QWORD *)&v57[2] = v9;
      *(_WORD *)&v57[10] = 2048;
      *(_QWORD *)&v57[12] = v10;
      v11 = _os_log_send_and_compose_impl();
      if (v11)
      {
        v12 = (char *)v11;
        v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v13.__d_.__rep_;
        v56 = &unk_251CC27F8;
        *(_QWORD *)v57 = (char *)this + 176;
        *(_QWORD *)&v57[8] = &v51;
        *(_QWORD *)&v57[16] = &rep;
        v14 = v4 + 15;
        for (i = v4[16]; (_QWORD *)i != v14; i = *(_QWORD *)(i + 8))
          v13.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(i + 16))(*(_QWORD *)(i + 16), &v56, v12);
        support::log::manager::release_log_buffer((support::log::manager *)v13.__d_.__rep_, v12);
      }
    }
  }
  *((_QWORD *)this + 20) = *((_QWORD *)this + 16);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v16)
  {
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if ((TelephonyBasebandPCITransportMapRegionwithClientData() & 1) == 0)
  {
    v44 = (support::log::manager *)*((_QWORD *)this + 30);
    v51 = 1;
    v45 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v44 + 16))(v44, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v45)
    {
      if (*((_QWORD *)v44 + 17))
      {
        support::log::buffer::borrow(v45);
        v46 = 2;
      }
      else
      {
        v46 = 0;
      }
      if (v46 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        v47 = *((_DWORD *)this + 30);
        LODWORD(v56) = 67109120;
        HIDWORD(v56) = v47;
        v48 = _os_log_send_and_compose_impl();
        if (v48)
        {
          v49 = (char *)v48;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v56 = &unk_251CC27F8;
          *(_QWORD *)v57 = (char *)this + 176;
          *(_QWORD *)&v57[8] = &v51;
          *(_QWORD *)&v57[16] = &rep;
          support::log::manager::message_delegates(v44, (const support::log::details *)&v56, v49);
        }
      }
    }
LABEL_31:
    v33 = 0;
    *((_QWORD *)this + 20) = 0;
    v34 = v16;
    if (!v16)
      goto LABEL_33;
    goto LABEL_32;
  }
  v21 = dispatch_time(0, 1000000 * *((unsigned int *)this + 38));
  if (dispatch_semaphore_wait(v3, v21))
  {
    v22 = (_QWORD *)*((_QWORD *)this + 30);
    v51 = 1;
    v23 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v22 + 16))(v22, 1, **((_QWORD **)this + 27));
    if ((_DWORD)v23)
    {
      if (v22[17])
      {
        support::log::buffer::borrow(v23);
        v24 = 2;
      }
      else
      {
        v24 = 0;
      }
      if (v24 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56) = 0;
        v28 = _os_log_send_and_compose_impl();
        if (v28)
        {
          v29 = (char *)v28;
          v30.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          rep = v30.__d_.__rep_;
          v56 = &unk_251CC27F8;
          *(_QWORD *)v57 = (char *)this + 176;
          *(_QWORD *)&v57[8] = &v51;
          *(_QWORD *)&v57[16] = &rep;
          v31 = v22 + 15;
          for (j = v22[16]; (_QWORD *)j != v31; j = *(_QWORD *)(j + 8))
            v30.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(j + 16))(*(_QWORD *)(j + 16), &v56, v29);
          support::log::manager::release_log_buffer((support::log::manager *)v30.__d_.__rep_, v29);
        }
      }
    }
    goto LABEL_31;
  }
  if (*((_DWORD *)v53 + 6))
    goto LABEL_31;
  v25 = (_QWORD *)*((_QWORD *)this + 30);
  v51 = 3;
  v26 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v25 + 16))(v25, 3, **((_QWORD **)this + 27));
  if ((_DWORD)v26)
  {
    if (v25[17])
    {
      support::log::buffer::borrow(v26);
      v27 = 2;
    }
    else
    {
      v27 = 0;
    }
    if (v27 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v36 = *((_DWORD *)this + 30);
      v37 = *((_QWORD *)this + 18);
      v38 = *((_QWORD *)this + 16);
      LODWORD(v56) = 67109632;
      HIDWORD(v56) = v36;
      *(_WORD *)v57 = 2048;
      *(_QWORD *)&v57[2] = v37;
      *(_WORD *)&v57[10] = 2048;
      *(_QWORD *)&v57[12] = v38;
      v39 = _os_log_send_and_compose_impl();
      if (v39)
      {
        v40 = (char *)v39;
        v41.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v41.__d_.__rep_;
        v56 = &unk_251CC27F8;
        *(_QWORD *)v57 = v6;
        *(_QWORD *)&v57[8] = &v51;
        *(_QWORD *)&v57[16] = &rep;
        v42 = v25 + 15;
        for (k = v25[16]; (_QWORD *)k != v42; k = *(_QWORD *)(k + 8))
          v41.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(k + 16))(*(_QWORD *)(k + 16), &v56, v40);
        support::log::manager::release_log_buffer((support::log::manager *)v41.__d_.__rep_, v40);
      }
    }
  }
  v33 = 1;
  v34 = v16;
  if (v16)
LABEL_32:
    std::__shared_weak_count::__release_weak(v34);
LABEL_33:
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (v3)
    dispatch_release(v3);
  _Block_object_dispose(&v52, 8);
  return v33;
}

void sub_24B991C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,char a21)
{
  NSObject *v21;
  std::__shared_weak_count *v22;

  if (a18)
  {
    std::__shared_weak_count::__release_weak(a18);
    if (!v22)
    {
LABEL_3:
      if (!v21)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v22);
  if (!v21)
  {
LABEL_4:
    _Block_object_dispose(&a21, 8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v21);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t support::transport::PCIMemRegion::PCIMemRegion(uint64_t a1, const void **a2, int a3, uint64_t a4, int a5)
{
  char *v8;
  int v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const void *v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  dispatch_queue_t v20;
  NSObject *v21;
  void *__p[3];
  std::string v24;
  void *v25[3];
  void *v26;
  __int128 v27;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_251CC3300;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = a3;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = a5;
  *(_QWORD *)(a1 + 160) = 0;
  v26 = operator new(0x30uLL);
  v27 = xmmword_24B9AA780;
  strcpy((char *)v26, "com.apple.telephony.basebandservices.support");
  strcpy((char *)v25, "transport.pcimemregion");
  HIBYTE(v25[2]) = 22;
  support::log::client::client((_QWORD *)(a1 + 168), (uint64_t)&v26, (uint64_t)v25, a4);
  if (SHIBYTE(v25[2]) < 0)
  {
    operator delete(v25[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v26);
LABEL_3:
  v8 = (char *)operator new(0x28uLL);
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = xmmword_24B9AB550;
  strcpy(v8, "com.apple.telephony.PCIMemRegion");
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = v10 + 1;
  memset(__p, 170, sizeof(__p));
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    v15 = (char *)operator new(v13 + 1);
    __p[1] = (void *)(v10 + 1);
    __p[2] = (void *)(v14 | 0x8000000000000000);
    __p[0] = v15;
    *v15 = 46;
    v12 = v15 + 1;
  }
  else
  {
    __p[1] = 0;
    __p[2] = 0;
    HIBYTE(__p[2]) = v10 + 1;
    v12 = (char *)__p + 1;
    __p[0] = (void *)46;
    if (!v10)
      goto LABEL_17;
  }
  if (v9 >= 0)
    v16 = a2;
  else
    v16 = *a2;
  memmove(v12, v16, v10);
LABEL_17:
  v12[v10] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v18 = HIBYTE(__p[2]);
  else
    v18 = (std::string::size_type)__p[1];
  std::string::append(&v24, (const std::string::value_type *)v17, v18);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v24;
  else
    v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
  v20 = dispatch_queue_create((const char *)v19, 0);
  v21 = *(NSObject **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v20;
  if (v21)
    dispatch_release(v21);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_24B991FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  support::log::client *v33;
  std::__shared_weak_count *v35;
  NSObject *v36;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  support::log::client::~client(v33);
  v36 = *(NSObject **)(v32 + 24);
  if (v36)
  {
    dispatch_release(v36);
    v35 = *(std::__shared_weak_count **)(v32 + 16);
    if (v35)
    {
LABEL_9:
      std::__shared_weak_count::__release_weak(v35);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v35 = *(std::__shared_weak_count **)(v32 + 16);
    if (v35)
      goto LABEL_9;
  }
  _Unwind_Resume(a1);
}

void support::transport::PCIMemRegion::~PCIMemRegion(support::transport::PCIMemRegion *this)
{
  unsigned int (*v2)(char *);
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_251CC3300;
  support::transport::PCIMemRegion::unmapVMRegion(this);
  support::transport::PCIMemRegion::deallocateVMRegion(this);
  v2 = (unsigned int (*)(char *))*((_QWORD *)this + 11);
  if (v2 && v2((char *)this + 32))
    TelephonyUtilTransportFree();
  *((_QWORD *)this + 21) = &unk_251CC2740;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

{
  void *v1;

  support::transport::PCIMemRegion::~PCIMemRegion(this);
  operator delete(v1);
}

void support::transport::PCIMemRegion::unmapVMRegion(support::transport::PCIMemRegion *this)
{
  _QWORD *v2;
  char *v3;
  support::log::buffer *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::chrono::system_clock::time_point v11;
  _QWORD *v12;
  uint64_t i;
  uint64_t v14;
  dispatch_time_t v15;
  _QWORD *v16;
  support::log::buffer *v17;
  int v18;
  _QWORD *v19;
  support::log::buffer *v20;
  int v21;
  support::log::manager *v22;
  support::log::buffer *v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  std::chrono::system_clock::time_point v28;
  _QWORD *v29;
  uint64_t j;
  support::log::buffer *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t k;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  intptr_t (*v49)(uint64_t, int);
  void *v50;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *v51;
  void **v52;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  uint64_t v55;
  int v56;
  void *v57;
  _BYTE v58[24];
  void *v59;
  _BYTE v60[24];
  void (*v61)(uint64_t);
  dispatch_object_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 20))
    return;
  v2 = (_QWORD *)*((_QWORD *)this + 30);
  v3 = (char *)this + 176;
  LOBYTE(v57) = 3;
  v4 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v2 + 16))(v2, 3, **((_QWORD **)this + 27));
  if ((_DWORD)v4)
  {
    if (v2[17])
    {
      v5 = 2;
      support::log::buffer::borrow(v4);
    }
    else
    {
      v5 = 0;
    }
    if (v5 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_DWORD *)this + 30);
      v7 = *((_QWORD *)this + 18);
      v8 = *((_QWORD *)this + 16);
      LODWORD(v59) = 67109632;
      HIDWORD(v59) = v6;
      *(_WORD *)v60 = 2048;
      *(_QWORD *)&v60[2] = v7;
      *(_WORD *)&v60[10] = 2048;
      *(_QWORD *)&v60[12] = v8;
      v9 = _os_log_send_and_compose_impl();
      if (v9)
      {
        v10 = (char *)v9;
        v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v11.__d_.__rep_;
        v59 = &unk_251CC27F8;
        *(_QWORD *)v60 = v3;
        *(_QWORD *)&v60[8] = &v57;
        *(_QWORD *)&v60[16] = &rep;
        v12 = v2 + 15;
        for (i = v2[16]; (_QWORD *)i != v12; i = *(_QWORD *)(i + 8))
          v11.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(i + 16))(*(_QWORD *)(i + 16), &v59, v10);
        support::log::manager::release_log_buffer((support::log::manager *)v11.__d_.__rep_, v10);
      }
    }
  }
  rep = 0;
  p_rep = &rep;
  v55 = 0x2000000000;
  v56 = -536870911;
  v59 = 0;
  *(_QWORD *)v60 = &v59;
  *(_QWORD *)&v60[8] = 0x3002000000;
  *(_QWORD *)&v60[16] = __Block_byref_object_copy_;
  v61 = __Block_byref_object_dispose_;
  v62 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v62 = dispatch_semaphore_create(0);
  v47 = MEMORY[0x24BDAC760];
  v48 = 1107296256;
  v49 = ___ZN7support9transport12PCIMemRegion13unmapVMRegionEv_block_invoke;
  v50 = &__block_descriptor_tmp_8_1;
  v51 = &rep;
  v52 = &v59;
  if ((TelephonyBasebandPCITransportUnmapRegion() & 1) == 0)
  {
    v19 = (_QWORD *)*((_QWORD *)this + 30);
    v46 = 1;
    v20 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v19 + 16))(v19, 1, **((_QWORD **)this + 27));
    if (!(_DWORD)v20)
      goto LABEL_47;
    if (v19[17])
    {
      support::log::buffer::borrow(v20);
      v21 = 2;
    }
    else
    {
      v21 = 0;
    }
    if (!(v21 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR)))
      goto LABEL_47;
    v25 = *((_DWORD *)this + 30);
    LODWORD(v57) = 67109120;
    HIDWORD(v57) = v25;
    v26 = _os_log_send_and_compose_impl();
    if (!v26)
      goto LABEL_47;
    v27 = (char *)v26;
    v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v45 = v28.__d_.__rep_;
    v57 = &unk_251CC27F8;
    *(_QWORD *)v58 = v3;
    *(_QWORD *)&v58[8] = &v46;
    *(_QWORD *)&v58[16] = &v45;
    v29 = v19 + 15;
    for (j = v19[16]; (_QWORD *)j != v29; j = *(_QWORD *)(j + 8))
      v28.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(j + 16))(*(_QWORD *)(j + 16), &v57, v27);
    goto LABEL_28;
  }
  v14 = *(_QWORD *)v60;
  v15 = dispatch_time(0, 1000000 * *((unsigned int *)this + 38));
  if (!dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v14 + 40), v15))
  {
    v22 = (support::log::manager *)*((_QWORD *)this + 30);
    if (*((_DWORD *)p_rep + 6))
    {
      v46 = 1;
      v23 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, 1, **((_QWORD **)this + 27));
      if ((_DWORD)v23)
      {
        if (*((_QWORD *)v22 + 17))
        {
          support::log::buffer::borrow(v23);
          v24 = 2;
        }
        else
        {
          v24 = 0;
        }
        if (v24 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
        {
          v36 = *((_DWORD *)this + 30);
          v37 = *((_DWORD *)p_rep + 6);
          LODWORD(v57) = 67109376;
          HIDWORD(v57) = v36;
          *(_WORD *)v58 = 1024;
          *(_DWORD *)&v58[2] = v37;
          v38 = _os_log_send_and_compose_impl();
          if (v38)
          {
            v39 = (char *)v38;
            v45 = std::chrono::system_clock::now().__d_.__rep_;
            v57 = &unk_251CC27F8;
            *(_QWORD *)v58 = v3;
            *(_QWORD *)&v58[8] = &v46;
            *(_QWORD *)&v58[16] = &v45;
            support::log::manager::message_delegates(v22, (const support::log::details *)&v57, v39);
          }
        }
      }
    }
    else
    {
      v46 = 3;
      v31 = (support::log::buffer *)(*(uint64_t (**)(support::log::manager *, uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, 3, **((_QWORD **)this + 27));
      if ((_DWORD)v31)
      {
        if (*((_QWORD *)v22 + 17))
        {
          support::log::buffer::borrow(v31);
          v32 = 2;
        }
        else
        {
          v32 = 0;
        }
        if (v32 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
        {
          v40 = *((_DWORD *)this + 30);
          v41 = *((_QWORD *)this + 18);
          v42 = *((_QWORD *)this + 16);
          LODWORD(v57) = 67109632;
          HIDWORD(v57) = v40;
          *(_WORD *)v58 = 2048;
          *(_QWORD *)&v58[2] = v41;
          *(_WORD *)&v58[10] = 2048;
          *(_QWORD *)&v58[12] = v42;
          v43 = _os_log_send_and_compose_impl();
          if (v43)
          {
            v44 = (char *)v43;
            v45 = std::chrono::system_clock::now().__d_.__rep_;
            v57 = &unk_251CC27F8;
            *(_QWORD *)v58 = v3;
            *(_QWORD *)&v58[8] = &v46;
            *(_QWORD *)&v58[16] = &v45;
            support::log::manager::message_delegates(v22, (const support::log::details *)&v57, v44);
          }
        }
      }
      *((_QWORD *)this + 20) = 0;
    }
    goto LABEL_47;
  }
  v16 = (_QWORD *)*((_QWORD *)this + 30);
  v46 = 1;
  v17 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v16 + 16))(v16, 1, **((_QWORD **)this + 27));
  if ((_DWORD)v17)
  {
    if (v16[17])
    {
      support::log::buffer::borrow(v17);
      v18 = 2;
    }
    else
    {
      v18 = 0;
    }
    if (v18 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
    {
      LOWORD(v57) = 0;
      v33 = _os_log_send_and_compose_impl();
      if (v33)
      {
        v27 = (char *)v33;
        v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        v45 = v28.__d_.__rep_;
        v57 = &unk_251CC27F8;
        *(_QWORD *)v58 = v3;
        *(_QWORD *)&v58[8] = &v46;
        *(_QWORD *)&v58[16] = &v45;
        v34 = v16 + 15;
        for (k = v16[16]; (_QWORD *)k != v34; k = *(_QWORD *)(k + 8))
          v28.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(k + 16))(*(_QWORD *)(k + 16), &v57, v27);
LABEL_28:
        support::log::manager::release_log_buffer((support::log::manager *)v28.__d_.__rep_, v27);
      }
    }
  }
LABEL_47:
  _Block_object_dispose(&v59, 8);
  if (v62)
    dispatch_release(v62);
  _Block_object_dispose(&rep, 8);
}

void sub_24B992844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  NSObject *v13;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  v13 = *(NSObject **)(v11 - 88);
  if (v13)
    dispatch_release(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void support::transport::PCIMemRegion::deallocateVMRegion(support::transport::PCIMemRegion *this)
{
  mach_vm_address_t v2;
  kern_return_t v3;
  _QWORD *v4;
  support::log::buffer *v5;
  int v6;
  support::log::buffer *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::chrono::system_clock::time_point v13;
  _QWORD *v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t j;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v22;
  _BYTE v23[24];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 16);
  if (v2 && *((_QWORD *)this + 18))
  {
    v3 = mach_vm_deallocate(*MEMORY[0x24BDAEC58], v2, *((_QWORD *)this + 17));
    v4 = (_QWORD *)*((_QWORD *)this + 30);
    if (v3)
    {
      v22 = 1;
      v5 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v4 + 16))(v4, 1, **((_QWORD **)this + 27));
      if ((_DWORD)v5)
      {
        if (v4[17])
        {
          v6 = 2;
          support::log::buffer::borrow(v5);
        }
        else
        {
          v6 = 0;
        }
        if (v6 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_ERROR))
        {
          v10 = *((_QWORD *)this + 16);
          v9 = *((_QWORD *)this + 17);
          *(_DWORD *)v23 = 134218240;
          *(_QWORD *)&v23[4] = v9;
          *(_WORD *)&v23[12] = 2048;
          *(_QWORD *)&v23[14] = v10;
          v11 = _os_log_send_and_compose_impl();
          if (v11)
          {
            v12 = (char *)v11;
            v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            rep = v13.__d_.__rep_;
            *(_QWORD *)v23 = &unk_251CC27F8;
            *(_QWORD *)&v23[8] = (char *)this + 176;
            *(_QWORD *)&v23[16] = &v22;
            p_rep = &rep;
            v14 = v4 + 15;
            for (i = v4[16]; (_QWORD *)i != v14; i = *(_QWORD *)(i + 8))
              v13.__d_.__rep_ = (***(uint64_t (****)(_QWORD, _BYTE *, char *))(i + 16))(*(_QWORD *)(i + 16), v23, v12);
LABEL_21:
            support::log::manager::release_log_buffer((support::log::manager *)v13.__d_.__rep_, v12);
          }
        }
      }
    }
    else
    {
      v22 = 3;
      v7 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v4 + 16))(v4, 3, **((_QWORD **)this + 27));
      if ((_DWORD)v7)
      {
        if (v4[17])
        {
          v8 = 2;
          support::log::buffer::borrow(v7);
        }
        else
        {
          v8 = 0;
        }
        if (v8 | os_log_type_enabled(**((os_log_t **)this + 27), OS_LOG_TYPE_DEFAULT))
        {
          v17 = *((_QWORD *)this + 16);
          v16 = *((_QWORD *)this + 17);
          *(_DWORD *)v23 = 134218240;
          *(_QWORD *)&v23[4] = v16;
          *(_WORD *)&v23[12] = 2048;
          *(_QWORD *)&v23[14] = v17;
          v18 = _os_log_send_and_compose_impl();
          if (v18)
          {
            v12 = (char *)v18;
            v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            rep = v13.__d_.__rep_;
            *(_QWORD *)v23 = &unk_251CC27F8;
            *(_QWORD *)&v23[8] = (char *)this + 176;
            *(_QWORD *)&v23[16] = &v22;
            p_rep = &rep;
            v19 = v4 + 15;
            for (j = v4[16]; (_QWORD *)j != v19; j = *(_QWORD *)(j + 8))
              v13.__d_.__rep_ = (***(uint64_t (****)(_QWORD, _BYTE *, char *))(j + 16))(*(_QWORD *)(j + 16), v23, v12);
            goto LABEL_21;
          }
        }
      }
    }
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 18) = 0;
}

uint64_t support::transport::PCIMemRegion::freePCITransport(uint64_t this)
{
  uint64_t (*v1)(uint64_t);

  v1 = *(uint64_t (**)(uint64_t))(this + 88);
  if (v1)
  {
    this = v1(this + 32);
    if ((_DWORD)this)
      return TelephonyUtilTransportFree();
  }
  return this;
}

void ___ZN7support9transport12PCIMemRegion18createPCITransportEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  support::log::buffer *v5;
  int v6;
  uint64_t v7;
  char *v8;
  std::chrono::system_clock::time_point v9;
  _QWORD *v10;
  uint64_t i;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v13;
  _QWORD v14[6];

  v14[5] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v3 + 240);
  v13 = 1;
  v5 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v4 + 16))(v4, 1, **(_QWORD **)(v3 + 216));
  if ((_DWORD)v5)
  {
    if (v4[17])
    {
      v6 = 2;
      support::log::buffer::borrow(v5);
    }
    else
    {
      v6 = 0;
    }
    if (v6 | os_log_type_enabled(**(os_log_t **)(v3 + 216), OS_LOG_TYPE_ERROR))
    {
      LODWORD(v14[0]) = 67109120;
      HIDWORD(v14[0]) = a2;
      v7 = _os_log_send_and_compose_impl();
      if (v7)
      {
        v8 = (char *)v7;
        v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        rep = v9.__d_.__rep_;
        v14[0] = &unk_251CC27F8;
        v14[1] = v3 + 176;
        v14[2] = &v13;
        v14[3] = &rep;
        v10 = v4 + 15;
        for (i = v4[16]; (_QWORD *)i != v10; i = *(_QWORD *)(i + 8))
          v9.__d_.__rep_ = (***(uint64_t (****)(_QWORD, _QWORD *, char *))(i + 16))(*(_QWORD *)(i + 16), v14, v8);
        support::log::manager::release_log_buffer((support::log::manager *)v9.__d_.__rep_, v8);
      }
    }
  }
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

void ___ZN7support9transport12PCIMemRegion11mapVMRegionEv_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  support::log::buffer *v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  std::chrono::system_clock::time_point v14;
  _QWORD *v15;
  uint64_t i;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v20;
  std::__shared_weak_count *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    v5 = a1[6];
    v6 = std::__shared_weak_count::lock(v3);
    v22 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[7])
      {
        if (a2)
        {
          v8 = *(_QWORD **)(v5 + 240);
          v20 = 1;
          v9 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v8 + 16))(v8, 1, **(_QWORD **)(v5 + 216));
          if ((_DWORD)v9)
          {
            if (v8[17])
            {
              support::log::buffer::borrow(v9);
              v10 = 2;
            }
            else
            {
              v10 = 0;
            }
            if (v10 | os_log_type_enabled(**(os_log_t **)(v5 + 216), OS_LOG_TYPE_ERROR))
            {
              v11 = *(_DWORD *)(v5 + 120);
              LODWORD(v23) = 67109376;
              HIDWORD(v23) = v11;
              LOWORD(v24) = 1024;
              *(_DWORD *)((char *)&v24 + 2) = a2;
              v12 = _os_log_send_and_compose_impl();
              if (v12)
              {
                v13 = (char *)v12;
                v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                rep = v14.__d_.__rep_;
                v23 = &unk_251CC27F8;
                v24 = v5 + 176;
                v25 = &v20;
                p_rep = &rep;
                v15 = v8 + 15;
                for (i = v8[16]; (_QWORD *)i != v15; i = *(_QWORD *)(i + 8))
                  v14.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(i + 16))(*(_QWORD *)(i + 16), &v23, v13);
                support::log::manager::release_log_buffer((support::log::manager *)v14.__d_.__rep_, v13);
              }
            }
          }
        }
        *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1[5] + 8) + 40));
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B992FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B992FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B992FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B993000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32r40r56c57_ZTSNSt3__18weak_ptrIN7support9transport12PCIMemRegionEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 8);
  _Block_object_assign(a1 + 5, *(const void **)(a2 + 40), 8);
  v4 = *(_QWORD *)(a2 + 64);
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void __destroy_helper_block_e8_32r40r56c57_ZTSNSt3__18weak_ptrIN7support9transport12PCIMemRegionEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void ___ZN7support9transport12PCIMemRegion25mapVMRegionWithClientDataEPvm_block_invoke(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  support::log::buffer *v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  std::chrono::system_clock::time_point v14;
  _QWORD *v15;
  uint64_t i;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v20;
  std::__shared_weak_count *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *p_rep;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v5 = a1[5];
    v6 = std::__shared_weak_count::lock(v3);
    v22 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[6])
      {
        if (a2)
        {
          v8 = *(_QWORD **)(v5 + 240);
          v20 = 1;
          v9 = (support::log::buffer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v8 + 16))(v8, 1, **(_QWORD **)(v5 + 216));
          if ((_DWORD)v9)
          {
            if (v8[17])
            {
              support::log::buffer::borrow(v9);
              v10 = 2;
            }
            else
            {
              v10 = 0;
            }
            if (v10 | os_log_type_enabled(**(os_log_t **)(v5 + 216), OS_LOG_TYPE_ERROR))
            {
              v11 = *(_DWORD *)(v5 + 120);
              LODWORD(v23) = 67109376;
              HIDWORD(v23) = v11;
              LOWORD(v24) = 1024;
              *(_DWORD *)((char *)&v24 + 2) = a2;
              v12 = _os_log_send_and_compose_impl();
              if (v12)
              {
                v13 = (char *)v12;
                v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                rep = v14.__d_.__rep_;
                v23 = &unk_251CC27F8;
                v24 = v5 + 176;
                v25 = &v20;
                p_rep = &rep;
                v15 = v8 + 15;
                for (i = v8[16]; (_QWORD *)i != v15; i = *(_QWORD *)(i + 8))
                  v14.__d_.__rep_ = (***(uint64_t (****)(_QWORD, void **, char *))(i + 16))(*(_QWORD *)(i + 16), &v23, v13);
                support::log::manager::release_log_buffer((support::log::manager *)v14.__d_.__rep_, v13);
              }
            }
          }
        }
        *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_24B9932B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9932CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9932E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9932F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32r48c57_ZTSNSt3__18weak_ptrIN7support9transport12PCIMemRegionEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 8);
  v4 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void __destroy_helper_block_e8_32r48c57_ZTSNSt3__18weak_ptrIN7support9transport12PCIMemRegionEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

intptr_t ___ZN7support9transport12PCIMemRegion13unmapVMRegionEv_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void __copy_helper_block_e8_32r40r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void __destroy_helper_block_e8_32r40r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void std::__hash_table<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::__unordered_map_hasher<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::hash<PCITransportMemRegion>,std::equal_to<PCITransportMemRegion>,true>,std::__unordered_map_equal<PCITransportMemRegion,std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>,std::equal_to<PCITransportMemRegion>,std::hash<PCITransportMemRegion>,true>,std::allocator<std::__hash_value_type<PCITransportMemRegion,PCITransportInterface>>>::__emplace_unique_key_args<PCITransportMemRegion,std::pair<PCITransportMemRegion const,PCITransportInterface> const&>(float *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  unint64_t v40;

  v5 = a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v6)
              v11 %= v6;
            if (v11 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v5;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v6 && (float)(v15 * (float)v6) >= v14)
  {
    v5 = v8;
    v16 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v13 = *v17;
LABEL_90:
    *v17 = v13;
    goto LABEL_91;
  }
  v18 = 1;
  if (v6 >= 3)
    v18 = (v6 & (v6 - 1)) != 0;
  v19 = v18 | (2 * v6);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *((_QWORD *)a1 + 1);
  }
  if (prime > v6)
  {
LABEL_36:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
      goto LABEL_68;
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
      goto LABEL_68;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v6 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 = ((_DWORD)v6 - 1) & v5;
      v16 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 == v27)
        goto LABEL_62;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
      {
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
LABEL_62:
        v25 = v36;
        v36 = (_QWORD *)*v36;
        if (!v36)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
        v25 = v36;
        v36 = (_QWORD *)*v36;
        v27 = v38;
        if (!v36)
          goto LABEL_68;
      }
    }
  }
  if (prime < v6)
  {
    v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v6 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (prime <= v33)
      prime = v33;
    if (prime < v6)
    {
      if (!prime)
      {
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v6 = *((_QWORD *)a1 + 1);
  }
  if ((v6 & (v6 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v6 <= v5)
    v5 %= v6;
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v16[v5] = a1 + 4;
  if (*v13)
  {
    v40 = *(_QWORD *)(*v13 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v40 >= v6)
        v40 %= v6;
    }
    else
    {
      v40 &= v6 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*((_QWORD *)a1 + 3);
}

void sub_24B993890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::transport::PCIMemRegion *,std::shared_ptr<support::transport::PCIMemRegion>::__shared_ptr_default_delete<support::transport::PCIMemRegion,support::transport::PCIMemRegion>,std::allocator<support::transport::PCIMemRegion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::transport::PCIMemRegion *,std::shared_ptr<support::transport::PCIMemRegion>::__shared_ptr_default_delete<support::transport::PCIMemRegion,support::transport::PCIMemRegion>,std::allocator<support::transport::PCIMemRegion>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::transport::PCIMemRegion *,std::shared_ptr<support::transport::PCIMemRegion>::__shared_ptr_default_delete<support::transport::PCIMemRegion,support::transport::PCIMemRegion>,std::allocator<support::transport::PCIMemRegion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9AB65ALL)
    return a1 + 24;
  if (((v3 & 0x800000024B9AB65ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9AB65ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9AB65ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_2()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

void HSFilerRT::create_default_global(HSFilerRT *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4[3];

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor(this) == 3)
  {
    v3 = operator new(0x30uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = off_251CC34A0;
    v3[3] = off_251CC3458;
    v3[4] = 0;
    v3[5] = 0;
    if (capabilities::radio::vendor((capabilities::radio *)v3) == 3)
    {
      _ZNSt3__115allocate_sharedB8ne180100I22HSFilerRT_Internal_INTNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v4);
      *((_OWORD *)v3 + 2) = *(_OWORD *)v4;
    }
    *a2 = v3 + 3;
    a2[1] = v3;
  }
}

void sub_24B993A24(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  void *v5;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v3);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24B993A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24B993A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void HSFilerRT::HSFilerRT(HSFilerRT *this)
{
  _OWORD *v1;
  uint64_t v2[3];

  *(_QWORD *)this = off_251CC3458;
  *((_QWORD *)this + 1) = 0;
  v1 = (_OWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (capabilities::radio::vendor(this) == 3)
  {
    _ZNSt3__115allocate_sharedB8ne180100I22HSFilerRT_Internal_INTNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    *v1 = *(_OWORD *)v2;
  }
}

{
  _OWORD *v1;
  uint64_t v2[3];

  *(_QWORD *)this = off_251CC3458;
  *((_QWORD *)this + 1) = 0;
  v1 = (_OWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (capabilities::radio::vendor(this) == 3)
  {
    _ZNSt3__115allocate_sharedB8ne180100I22HSFilerRT_Internal_INTNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v2);
    *v1 = *(_OWORD *)v2;
  }
}

void sub_24B993AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_24B993B80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void HSFilerRT::basebandReadyEventHandler(HSFilerRT_Internal **this)
{
  HSFilerRT_Internal::basebandReadyEventHandler(this[1]);
}

void HSFilerRT::basebandResetEventHandler(HSFilerRT_Internal **this)
{
  HSFilerRT_Internal::basebandReadyEventHandler(this[1]);
}

void HSFilerRT::registerBasebandResetDelegate(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  void *aBlock;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  aBlock = v3;
  HSFilerRT_Internal::registerBasebandResetDelegate(v2, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_24B993C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void HSFilerRT::dumpState(HSFilerRT *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *((_QWORD *)this + 1);
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZN18HSFilerRT_Internal9dumpStateEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_49;
  v2[4] = v1;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(v1 + 8), (uint64_t)v2);
}

uint64_t HSFilerRT::createSession(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, NSObject **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  dispatch_object_t object;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = a2[1];
  v18 = *a2;
  v19 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a5;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = HSFilerRT_Internal::createSession(v7, &v18, a3, a4, &object);
  if (object)
    dispatch_release(object);
  v13 = v19;
  if (!v19)
    return v12;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
    return v12;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return v12;
}

void sub_24B993D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void HSFilerRT::destroySession(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v4[6];
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN18HSFilerRT_Internal14destroySessionE15HSFilerClientIDy_block_invoke;
  v4[3] = &__block_descriptor_tmp_4;
  v5 = a2;
  v4[4] = v3;
  v4[5] = a3;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(v3 + 8), (uint64_t)v4);
}

BOOL HSFilerRT::queueSession(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, void **a5, int a6)
{
  uint64_t v10;
  void *v11;
  _BOOL8 v12;
  void *aBlock;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *a5;
  if (*a5)
    v11 = _Block_copy(v11);
  aBlock = v11;
  v12 = HSFilerRT_Internal::queueSession(v10, a2, a3, a4, (const void **)&aBlock, a6);
  if (aBlock)
    _Block_release(aBlock);
  return v12;
}

void sub_24B993E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

BOOL HSFilerRT::removeSessionFromQueue(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return HSFilerRT_Internal::removeSessionFromQueue(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL HSFilerRT::readWithFile(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v10;
  void *v11;
  _BOOL8 v12;
  void *aBlock;
  std::string v15;

  v10 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    v11 = *a6;
    if (!*a6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = *(std::string *)a5;
  v11 = *a6;
  if (*a6)
LABEL_5:
    v11 = _Block_copy(v11);
LABEL_6:
  aBlock = v11;
  v12 = HSFilerRT_Internal::readWithFile(v10, a2, a3, a4, (uint64_t)&v15, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v12;
}

void sub_24B993F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL HSFilerRT::readWithStream(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, void **a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  _BOOL8 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (std::__shared_weak_count *)a5[1];
  v20 = *a5;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *a6;
  if (*a6)
    v13 = _Block_copy(v13);
  aBlock = v13;
  v14 = HSFilerRT_Internal::readWithStream(v9, a2, a3, a4, (uint64_t)&v20, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  v15 = v21;
  if (!v21)
    return v14;
  v16 = (unint64_t *)&v21->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return v14;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return v14;
}

void sub_24B994094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11)
{
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL HSFilerRT::readWithBuff(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, void **a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  _BOOL8 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = a5[1];
  v20 = *a5;
  v21 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *a6;
  if (*a6)
    v13 = _Block_copy(v13);
  aBlock = v13;
  v14 = HSFilerRT_Internal::readWithBuff(v9, a2, a3, a4, &v20, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  v15 = v21;
  if (!v21)
    return v14;
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
    return v14;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return v14;
}

void sub_24B9941A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11)
{
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL HSFilerRT::writeWithFile(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v10;
  void *v11;
  _BOOL8 v12;
  void *aBlock;
  std::string v15;

  v10 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    v11 = *a6;
    if (!*a6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = *(std::string *)a5;
  v11 = *a6;
  if (*a6)
LABEL_5:
    v11 = _Block_copy(v11);
LABEL_6:
  aBlock = v11;
  v12 = HSFilerRT_Internal::writeWithFile(v10, a2, a3, a4, (uint64_t)&v15, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v12;
}

void sub_24B994298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL HSFilerRT::writeWithStream(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, void **a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  _BOOL8 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (std::__shared_weak_count *)a5[1];
  v20 = *a5;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *a6;
  if (*a6)
    v13 = _Block_copy(v13);
  aBlock = v13;
  v14 = HSFilerRT_Internal::writeWithStream(v9, a2, a3, a4, &v20, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  v15 = v21;
  if (!v21)
    return v14;
  v16 = (unint64_t *)&v21->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return v14;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return v14;
}

void sub_24B9943B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11)
{
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL HSFilerRT::writeWithBuff(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, void **a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  _BOOL8 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (std::__shared_weak_count *)a5[1];
  v20 = *a5;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *a6;
  if (*a6)
    v13 = _Block_copy(v13);
  aBlock = v13;
  v14 = HSFilerRT_Internal::writeWithBuff(v9, a2, a3, a4, &v20, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  v15 = v21;
  if (!v21)
    return v14;
  v16 = (unint64_t *)&v21->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return v14;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return v14;
}

void sub_24B9944C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11)
{
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void HSFilerRT::~HSFilerRT(HSFilerRT *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_251CC3458;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_251CC3458;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void std::__shared_ptr_emplace<HSFilerRT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CC34A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HSFilerRT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CC34A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<HSFilerRT>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_3()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>::~PthreadMutexGuardPolicy, &ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance, &dword_24B97E000);
  }
  return result;
}

void hsfiler_log_manager::hsfiler_log_manager(hsfiler_log_manager *this)
{
  const char *v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t (**v5)(support::log::manager::parameters *__hidden);
  char v6;
  std::string __p;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "hsfiler");
  v5 = &off_251CC41E8;
  v6 = 3;
  v2 = getprogname();
  if (!strncmp(v2, "bbutil", 6uLL))
  {
    v3 = operator new(0x20uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *(_QWORD *)v3 = &off_251CC4230;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v5, (uint64_t *)&v4);
  if (v4)
    (*(void (**)(_OWORD *))(*(_QWORD *)v4 + 16))(v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_251CC34F0;
}

void sub_24B994738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 16))(a9);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void hsfiler_log_manager::set_defaults(hsfiler_log_manager *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 112) = 3;
  v3 = (char *)this + 120;
  if (*((_QWORD *)this + 17))
  {
    v4 = *((_QWORD *)this + 15);
    v5 = (char *)*((_QWORD *)this + 16);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 17) = 0;
    if (v5 != v3)
    {
      do
      {
        v9 = (char *)*((_QWORD *)v5 + 1);
        v8 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        operator delete(v5);
        v5 = v9;
      }
      while (v9 != v3);
    }
  }
  std::mutex::unlock(v2);
  v7 = getprogname();
  if (!strncmp(v7, "bbutil", 6uLL))
  {
    v10 = operator new(0x20uLL);
    *v10 = 0u;
    v10[1] = 0u;
    *(_QWORD *)v10 = &off_251CC4230;
    std::mutex::lock(v2);
    v11 = operator new(0x18uLL);
    v11[1] = v3;
    v11[2] = v10;
    v12 = *((_QWORD *)this + 15);
    *v11 = v12;
    *(_QWORD *)(v12 + 8) = v11;
    *((_QWORD *)this + 15) = v11;
    ++*((_QWORD *)this + 17);
    std::mutex::unlock(v2);
  }
}

void sub_24B9948B8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  std::mutex::unlock(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  _Unwind_Resume(a1);
}

void sub_24B9948DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void hsfiler_log_client::hsfiler_log_client(hsfiler_log_client *this, const char *a2)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19[2];
  void *__dst[2];
  unint64_t v21;
  void *__p;
  __int128 v23;

  __p = operator new(0x30uLL);
  v23 = xmmword_24B9AA780;
  strcpy((char *)__p, "com.apple.telephony.basebandservices.hsfiler");
  v4 = strlen(a2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v21 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v21) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, a2, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  pthread_mutex_lock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  if (qword_2579B8CA8)
    goto LABEL_10;
  v9 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CC35C0;
  v9->__shared_owners_ = 0;
  v10 = (uint64_t)&v9[1];
  hsfiler_log_manager::hsfiler_log_manager((hsfiler_log_manager *)&v9[1]);
  v11 = (std::__shared_weak_count *)off_2579B8CB0;
  qword_2579B8CA8 = (uint64_t)&v9[1];
  off_2579B8CB0 = v9;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_10:
    v10 = qword_2579B8CA8;
    v9 = (std::__shared_weak_count *)off_2579B8CB0;
    v18 = (std::__shared_weak_count *)off_2579B8CB0;
    if (!off_2579B8CB0)
      goto LABEL_20;
    goto LABEL_18;
  }
  v18 = v9;
LABEL_18:
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_20:
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  v19[0] = v10;
  v19[1] = (uint64_t)v18;
  support::log::client::client(this, (uint64_t)&__p, (uint64_t)__dst, v19);
  if (v18)
  {
    v16 = (unint64_t *)&v18->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst[0]);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_29:
    operator delete(__p);
    goto LABEL_27;
  }
  if (SHIBYTE(v23) < 0)
    goto LABEL_29;
LABEL_27:
  *(_QWORD *)this = off_251CC3520;
}

void sub_24B994B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;
  void *v26;

  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

void hsfiler::logging::getLogServer(_QWORD *a1@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN7hsfiler7loggingL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = &hsfiler::logging::getLogServer(void)::sLogServer;
  if (hsfiler::logging::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = unk_2579B8E50;
    *a1 = hsfiler::logging::getLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  else
  {
    dispatch_once(&hsfiler::logging::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = unk_2579B8E50;
    *a1 = hsfiler::logging::getLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
}

void hsfiler_log_manager::~hsfiler_log_manager(hsfiler_log_manager *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_251CC4200;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_251CC4200;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ___ZN7hsfiler7loggingL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v11;
  __int128 v12;

  v11 = 7;
  strcpy((char *)__p, "hsfiler");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v12;
  v12 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
      if ((v11 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (v11 < 0)
LABEL_11:
    operator delete(__p[0]);
LABEL_12:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  return ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
}

void sub_24B994FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<hsfiler_log_manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CC35C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<hsfiler_log_manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CC35C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<hsfiler_log_manager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init_4()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_24B97E000);
  }
  return result;
}

uint64_t *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  result = (uint64_t *)capabilities::radio::vendor(this);
  if ((_DWORD)result == 1)
  {
    v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(_QWORD *)v13 = &v33;
    *((_QWORD *)v13 + 1) = &v33;
    v34 = (uint64_t *)v13;
    v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = &v33;
    *((_QWORD *)v13 + 1) = v14;
    v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(_QWORD *)v15 = v14;
    *((_QWORD *)v15 + 1) = &v33;
    *((_QWORD *)v14 + 1) = v15;
    v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(_QWORD *)v16 = v15;
    *((_QWORD *)v16 + 1) = &v33;
    *((_QWORD *)v15 + 1) = v16;
    v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(_QWORD *)v17 = v16;
    *((_QWORD *)v17 + 1) = &v33;
    *((_QWORD *)v16 + 1) = v17;
    v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = &v33;
    *((_QWORD *)v17 + 1) = v18;
    v19 = operator new(0x18uLL);
    v19[4] = 10;
    *(_QWORD *)v19 = v18;
    *((_QWORD *)v19 + 1) = &v33;
    *((_QWORD *)v18 + 1) = v19;
    v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(_QWORD *)v20 = v19;
    *((_QWORD *)v20 + 1) = &v33;
    *((_QWORD *)v19 + 1) = v20;
    v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(_QWORD *)v21 = v20;
    *((_QWORD *)v21 + 1) = &v33;
    *((_QWORD *)v20 + 1) = v21;
    v33 = (uint64_t)v21;
    v35 = 9;
    result = (uint64_t *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if ((_DWORD)result)
    {
      v22 = operator new(0x18uLL);
      v22[4] = 11;
      v23 = v33;
      *(_QWORD *)v22 = v33;
      *((_QWORD *)v22 + 1) = &v33;
      *(_QWORD *)(v23 + 8) = v22;
      v24 = v35;
      v33 = (uint64_t)v22;
      ++v35;
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 15;
      *result = (uint64_t)v22;
      result[1] = (uint64_t)&v33;
      *((_QWORD *)v22 + 1) = result;
      v33 = (uint64_t)result;
      v35 = v24 + 2;
    }
    if (a2[2])
    {
      v25 = *a2;
      result = (uint64_t *)a2[1];
      v26 = *result;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v27 = result[1];
          operator delete(result);
          result = (uint64_t *)v27;
        }
        while ((uint64_t *)v27 != a2);
      }
    }
  }
  else
  {
    if ((_DWORD)result != 2)
      return result;
    v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(_QWORD *)v4 = &v33;
    *((_QWORD *)v4 + 1) = &v33;
    v34 = (uint64_t *)v4;
    v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(_QWORD *)v5 = v4;
    *((_QWORD *)v5 + 1) = &v33;
    *((_QWORD *)v4 + 1) = v5;
    v6 = operator new(0x18uLL);
    v6[4] = 8;
    *(_QWORD *)v6 = v5;
    *((_QWORD *)v6 + 1) = &v33;
    *((_QWORD *)v5 + 1) = v6;
    v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(_QWORD *)v7 = v6;
    *((_QWORD *)v7 + 1) = &v33;
    *((_QWORD *)v6 + 1) = v7;
    v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = &v33;
    *((_QWORD *)v7 + 1) = v8;
    v33 = (uint64_t)v8;
    v35 = 5;
    result = (uint64_t *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if ((_DWORD)result)
    {
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 13;
      v9 = v33;
      *result = v33;
      result[1] = (uint64_t)&v33;
      *(_QWORD *)(v9 + 8) = result;
      v33 = (uint64_t)result;
      ++v35;
    }
    if (a2[2])
    {
      v10 = *a2;
      result = (uint64_t *)a2[1];
      v11 = *result;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v12 = result[1];
          operator delete(result);
          result = (uint64_t *)v12;
        }
        while ((uint64_t *)v12 != a2);
      }
    }
  }
  v28 = v35;
  if (v35)
  {
    v30 = v33;
    v29 = v34;
    v31 = *v34;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v33 + 8);
    **(_QWORD **)(v30 + 8) = v31;
    v32 = *a2;
    *(_QWORD *)(v32 + 8) = v29;
    *v29 = v32;
    *a2 = v30;
    *(_QWORD *)(v30 + 8) = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_24B9954AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::list<BasebandTransport::Protocol>::~list((uint64_t *)va);
  std::list<BasebandTransport::Protocol>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_24B9954DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::list<BasebandTransport::Protocol>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_24B9954F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v16;

  do
  {
    v16 = (_QWORD *)v13[1];
    operator delete(v13);
    v13 = v16;
  }
  while (v16 != v14);
  std::list<BasebandTransport::Protocol>::~list(v12);
  _Unwind_Resume(a1);
}

uint64_t *std::list<BasebandTransport::Protocol>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t i;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  __darwin_ct_rune_t v9;
  char v10;
  __darwin_ct_rune_t v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __darwin_ct_rune_t v19[6];
  uint64_t v20[3];

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (i = v20[1]; (uint64_t *)i != v20; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997712;
        goto LABEL_30;
      case 1:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997715;
        goto LABEL_30;
      case 2:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1195460932;
        goto LABEL_26;
      case 3:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397114194;
        goto LABEL_26;
      case 4:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        v7 = 1;
        break;
      case 5:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        v7 = 1;
        break;
      case 6:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5066578;
        goto LABEL_30;
      case 7:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1414483778;
        goto LABEL_26;
      case 8:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4805185;
        goto LABEL_30;
      case 9:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5526611;
        goto LABEL_30;
      case 10:
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        v5 = 1;
        break;
      case 11:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1280328769;
        goto LABEL_26;
      case 12:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5461061;
        goto LABEL_30;
      case 14:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        v6 = 1;
        break;
      case 15:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397965905;
        goto LABEL_26;
      case 16:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        v7 = 1;
        break;
      case 17:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5260097;
        goto LABEL_30;
      case 18:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1297040214;
        goto LABEL_26;
      case 19:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4999236;
        goto LABEL_30;
      case 21:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5789005;
        goto LABEL_30;
      case 22:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        v10 = 1;
        break;
      default:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0)
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
          }
        }
      }
    }
    v12 = operator new(0x28uLL);
    v13 = (std::string *)(v12 + 2);
    *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(_QWORD *)&v19[4];
    }
    v14 = *a2;
    *v12 = *a2;
    v12[1] = a2;
    *(_QWORD *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0)
      operator delete(*(void **)v19);
  }
  if (v20[2])
  {
    v16 = v20[0];
    v15 = (uint64_t *)v20[1];
    v17 = *(_QWORD *)v20[1];
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v20[0] + 8);
    **(_QWORD **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        v18 = (uint64_t *)v15[1];
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_24B995B68(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_24B995B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  char *v15;
  void *v16;
  void *v17;

  v17 = v16;
  operator delete(v17);
  if (a14 < 0)
    operator delete(__p);
  std::list<BasebandTransport::Protocol>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;

  memset(a2, 170, 24);
  result = BasebandTransport::asString(a1, (char *)a2);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  v6 = (char *)a2 + v4;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = (_BYTE *)(*a2 + a2[1]);
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = (_BYTE *)*a2;
  for (; v8 != v7; ++v8)
  {
    result = __tolower((char)*v8);
    *v8 = result;
  }
  return result;
}

void sub_24B995C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::list<std::string>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[3];

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  v3 = (uint64_t *)v18[1];
  if ((uint64_t *)v18[1] != v18)
  {
    v4 = a2[2];
    v5 = v4 + 1;
    v6 = (_QWORD *)*a2;
    v7 = v18[1];
    do
    {
      v8 = 8;
      v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          v8 = 3;
          break;
        case 1:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          v8 = 3;
          break;
        case 2:
          v10 = 1195460932;
          goto LABEL_25;
        case 3:
          v10 = 1397114194;
          goto LABEL_25;
        case 4:
          v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          v12 = 5066578;
          goto LABEL_29;
        case 7:
          v10 = 1414483778;
          goto LABEL_25;
        case 8:
          v12 = 4805185;
          goto LABEL_29;
        case 9:
          v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          v8 = 2;
          goto LABEL_30;
        case 0xB:
          v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          v8 = 4;
          break;
        case 0xF:
          v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          v8 = 4;
          break;
        case 0x10:
          v11 = 0x4854544352;
LABEL_21:
          v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          v8 = 5;
          goto LABEL_30;
        case 0x11:
          v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          v10 = 1129335117;
LABEL_25:
          v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          v8 = 4;
          goto LABEL_30;
        case 0x14:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          v8 = 3;
          break;
        case 0x15:
          v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          v12 = 4407622;
LABEL_29:
          v13 = v4 & 0xFFFFFFFF00000000 | v12;
          v8 = 3;
LABEL_30:
          v9 = v13;
          break;
        default:
          v8 = 7;
          v9 = 0x6E776F6E6B6E55;
          break;
      }
      v14 = operator new(0x28uLL);
      v14[2] = v9;
      v14[3] = 0;
      *((_BYTE *)v14 + 39) = v8;
      *v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      v7 = *(_QWORD *)(v7 + 8);
      ++v5;
      v4 = v9;
      v6 = v14;
    }
    while ((uint64_t *)v7 != v18);
  }
  if (v18[2])
  {
    v15 = v18[0];
    v16 = *v3;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v18[0] + 8);
    **(_QWORD **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        v17 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_24B995F8C(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_24B995FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  va_list va;

  va_start(va, a2);
  std::list<BasebandTransport::Protocol>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  const char *v1;
  uint64_t result;

  v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    result = strcmp(__s1, "PBL");
    if (!(_DWORD)result)
      return result;
    if (!strcmp(v1, "SBL"))
      return 1;
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX"))
                                            goto LABEL_24;
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  v1 = *(const char **)__s1;
  result = strcmp(*(const char **)__s1, "PBL");
  if (!(_DWORD)result)
    return result;
  if (!strcmp(v1, "SBL"))
    return 1;
  if (!strcasecmp(v1, "DIAG"))
    return 2;
  if (!strcasecmp(v1, "REFS"))
    return 3;
  if (!strcasecmp(v1, "QMUX1"))
    return 4;
  if (!strcasecmp(v1, "QMUX2"))
    return 5;
  if (!strcasecmp(v1, "ROM"))
    return 6;
  if (!strcasecmp(v1, "BOOT"))
    return 7;
  if (!strcasecmp(v1, "ARI"))
    return 8;
  if (!strcasecmp(v1, "STT"))
    return 9;
  if (!strcasecmp(v1, "AT"))
    return 10;
  if (!strcasecmp(v1, "ADPL"))
    return 11;
  if (!strcasecmp(v1, "MEDIACTL"))
    return 12;
  if (!strcasecmp(v1, "ETS"))
    return 13;
  if (!strcasecmp(v1, "GNSS"))
    return 14;
  if (!strcasecmp(v1, "QDSS"))
    return 15;
  if (!strcasecmp(v1, "RCTTH"))
    return 16;
  if (!strcasecmp(v1, "ACP"))
    return 17;
  if (!strcasecmp(v1, "VCOM"))
    return 18;
  if (!strcasecmp(v1, "MIPC"))
    return 19;
  if (!strcasecmp(v1, "DHL"))
    return 20;
  if (!strcasecmp(v1, "MUX"))
    return 21;
LABEL_24:
  if (!strcasecmp(v1, "FAC"))
    return 22;
  else
    return 23;
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1;
  char shouldUseMinBasebandTransportIOReadCount;
  int v3;
  int v4;
  unsigned int v5;

  v1 = (int)a1;
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15)
    v3 = 36;
  else
    v3 = 4;
  if (v1 == 16)
    v4 = 36;
  else
    v4 = v3;
  if (v1 == 2)
    v5 = 16;
  else
    v5 = v4;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v5;
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString@<X0>(BasebandTransport::Status *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  size_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void *__p[2];
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28[2];
  __int128 v29;
  __int128 v30;
  _OWORD v31[9];
  unint64_t v32;

  v32 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[7] = v4;
  v31[8] = v4;
  v31[5] = v4;
  v31[6] = v4;
  v31[3] = v4;
  v31[4] = v4;
  v31[1] = v4;
  v31[2] = v4;
  v30 = v4;
  v31[0] = v4;
  *(_OWORD *)v28 = v4;
  v29 = v4;
  v26 = v4;
  v27 = v4;
  v24 = v4;
  v25 = v4;
  v23 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      v5 = 8;
      v22 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      v5 = 5;
      v22 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      v5 = 5;
      v22 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      v5 = 7;
      v22 = 7;
      LODWORD(__p[0]) = 1818326099;
      v6 = 1684368492;
      goto LABEL_7;
    default:
      v5 = 7;
      v22 = 7;
      LODWORD(__p[0]) = 1852534357;
      v6 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v6;
      HIBYTE(__p[0]) = 0;
      break;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)__p, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)&v24 + *(_QWORD *)(v24 - 24) + 8) |= 1u;
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Total Rx: ", 10);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Total Tx: ", 10);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" KB", 3);
  if ((v22 & 0x80000000) == 0)
  {
    v12 = BYTE8(v30);
    if ((BYTE8(v30) & 0x10) == 0)
      goto LABEL_10;
LABEL_13:
    v14 = v30;
    if ((unint64_t)v30 < *((_QWORD *)&v27 + 1))
    {
      *(_QWORD *)&v30 = *((_QWORD *)&v27 + 1);
      v14 = *((_QWORD *)&v27 + 1);
    }
    v15 = (const void *)v27;
    v13 = v14 - v27;
    if ((unint64_t)(v14 - v27) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  v12 = BYTE8(v30);
  if ((BYTE8(v30) & 0x10) != 0)
    goto LABEL_13;
LABEL_10:
  if ((v12 & 8) == 0)
  {
    v13 = 0;
    a2[23] = 0;
    goto LABEL_23;
  }
  v15 = (const void *)*((_QWORD *)&v25 + 1);
  v13 = *((_QWORD *)&v26 + 1) - *((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v26 + 1) - *((_QWORD *)&v25 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_16:
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a2 + 1) = v13;
    *((_QWORD *)a2 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a2 = v18;
    a2 = v18;
    goto LABEL_22;
  }
  a2[23] = v13;
  if (v13)
LABEL_22:
    memmove(a2, v15, v13);
LABEL_23:
  a2[v13] = 0;
  *(_QWORD *)&v23 = *MEMORY[0x24BEDB7F0];
  v19 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v23 + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v24 = v19;
  *((_QWORD *)&v24 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v29) < 0)
    operator delete(v28[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD2AA30](v31);
}

void sub_24B996BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B996BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_24B996CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x24BD2AA30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24BD2AA30](a1 + 128);
  return a1;
}

uint64_t BasebandTransport::Parameters::toString@<X0>(BasebandTransport::Parameters *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  size_t v5;
  int v6;
  uint64_t p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  size_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void *v24[2];
  char v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34[2];
  __int128 v35;
  __int128 v36;
  _OWORD v37[9];
  unint64_t v38;

  v38 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[7] = v4;
  v37[8] = v4;
  v37[5] = v4;
  v37[6] = v4;
  v37[3] = v4;
  v37[4] = v4;
  v37[1] = v4;
  v37[2] = v4;
  v36 = v4;
  v37[0] = v4;
  *(_OWORD *)v34 = v4;
  v35 = v4;
  v32 = v4;
  v33 = v4;
  v30 = v4;
  v31 = v4;
  v29 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v29);
  switch(*(_DWORD *)this)
  {
    case 0:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "PBL");
      break;
    case 1:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "SBL");
      break;
    case 2:
      v5 = 4;
      v25 = 4;
      v6 = 1195460932;
      goto LABEL_25;
    case 3:
      v5 = 4;
      v25 = 4;
      v6 = 1397114194;
      goto LABEL_25;
    case 4:
      v5 = 5;
      v25 = 5;
      strcpy((char *)v24, "QMUX1");
      break;
    case 5:
      v5 = 5;
      v25 = 5;
      strcpy((char *)v24, "QMUX2");
      break;
    case 6:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "ROM");
      break;
    case 7:
      v5 = 4;
      v25 = 4;
      v6 = 1414483778;
      goto LABEL_25;
    case 8:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "ARI");
      break;
    case 9:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "STT");
      break;
    case 0xA:
      v5 = 2;
      v25 = 2;
      strcpy((char *)v24, "AT");
      break;
    case 0xB:
      v5 = 4;
      v25 = 4;
      v6 = 1280328769;
      goto LABEL_25;
    case 0xC:
      v5 = 8;
      v25 = 8;
      strcpy((char *)v24, "MEDIACTL");
      break;
    case 0xD:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "ETS");
      break;
    case 0xE:
      v5 = 4;
      v25 = 4;
      v6 = 1397968455;
      goto LABEL_25;
    case 0xF:
      v5 = 4;
      v25 = 4;
      v6 = 1397965905;
      goto LABEL_25;
    case 0x10:
      v5 = 5;
      v25 = 5;
      strcpy((char *)v24, "RCTTH");
      break;
    case 0x11:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "ACP");
      break;
    case 0x12:
      v5 = 4;
      v25 = 4;
      v6 = 1297040214;
      goto LABEL_25;
    case 0x13:
      v5 = 4;
      v25 = 4;
      v6 = 1129335117;
LABEL_25:
      LODWORD(v24[0]) = v6;
      BYTE4(v24[0]) = 0;
      break;
    case 0x14:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "DHL");
      break;
    case 0x15:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "MUX");
      break;
    case 0x16:
      v5 = 3;
      v25 = 3;
      strcpy((char *)v24, "FAC");
      break;
    default:
      v5 = 7;
      v25 = 7;
      strcpy((char *)v24, "Unknown");
      break;
  }
  v27 = 8250;
  v28 = 0;
  HIBYTE(v28) = v5 + 10;
  __p = *(void **)"Protocol: ";
  memcpy((char *)&v27 + 2, v24, v5);
  *((_BYTE *)&v27 + v5 + 2) = 0;
  if (v28 >= 0)
    p_p = (uint64_t)&__p;
  else
    p_p = 0x6C6F636F746F7250;
  if (v28 >= 0)
    v8 = HIBYTE(v28);
  else
    v8 = v27;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, p_p, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)&v30 + *(_QWORD *)(v30 - 24) + 8) |= 1u;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Create Timeout: ", 16);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"IO Size: ", 9);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__p);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_34:
      v15 = BYTE8(v36);
      if ((BYTE8(v36) & 0x10) == 0)
        goto LABEL_35;
LABEL_39:
      v17 = v36;
      if ((unint64_t)v36 < *((_QWORD *)&v33 + 1))
      {
        *(_QWORD *)&v36 = *((_QWORD *)&v33 + 1);
        v17 = *((_QWORD *)&v33 + 1);
      }
      v18 = (const void *)v33;
      v16 = v17 - v33;
      if ((unint64_t)(v17 - v33) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_53;
      goto LABEL_42;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v24[0]);
  v15 = BYTE8(v36);
  if ((BYTE8(v36) & 0x10) != 0)
    goto LABEL_39;
LABEL_35:
  if ((v15 & 8) == 0)
  {
    v16 = 0;
    a2[23] = 0;
    goto LABEL_49;
  }
  v18 = (const void *)*((_QWORD *)&v31 + 1);
  v16 = *((_QWORD *)&v32 + 1) - *((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v32 + 1) - *((_QWORD *)&v31 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_53:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_42:
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v21 = operator new(v19 + 1);
    *((_QWORD *)a2 + 1) = v16;
    *((_QWORD *)a2 + 2) = v20 | 0x8000000000000000;
    *(_QWORD *)a2 = v21;
    a2 = v21;
    goto LABEL_48;
  }
  a2[23] = v16;
  if (v16)
LABEL_48:
    memmove(a2, v18, v16);
LABEL_49:
  a2[v16] = 0;
  *(_QWORD *)&v29 = *MEMORY[0x24BEDB7F0];
  v22 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v29 + *(_QWORD *)(v29 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v30 = v22;
  *((_QWORD *)&v30 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24BD2AA30](v37);
}

void sub_24B99740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B997420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  capabilities::abs *v11;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v13;
  NSObject *v14;
  uint64_t Controller;
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];

  *(_QWORD *)a1 = off_251CC3610;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, "com.apple.telephony.abm", "ipc.bb");
  v6 = dispatch_queue_create("ipc.bb", 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v6;
  if (v6)
  {
    v7 = v6;
    dispatch_retain(v6);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_251CC3AD0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(_QWORD *)(a1 + 8) = &unk_251CC3C28;
  *(_QWORD *)(a1 + 56) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(_QWORD *)a1 = off_251CC3BE8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(_QWORD *)a1 = off_251CC3610;
  *(_DWORD *)(a1 + 104) = 23;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v11);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v13 = 0x4000;
  else
    v13 = 0x8000;
  *(_DWORD *)(a1 + 120) = v13;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v14 = *a3;
  *(_QWORD *)(a1 + 152) = *a3;
  if (v14)
    dispatch_retain(v14);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  Controller = TelephonyBasebandCreateController();
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = Controller;
  *(_QWORD *)(a1 + 285) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 365) = 0;
  return a1;
}

void sub_24B99765C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void *v4;
  NSObject *v5;
  const void *v6;

  v4 = (const void *)v1[21];
  if (v4)
    _Block_release(v4);
  if (*v2)
    _Block_release(*v2);
  v5 = v1[19];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)v1[18];
  if (v6)
    _Block_release(v6);
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

const char *BasebandTransport::getName(BasebandTransport *this)
{
  return "ipc.bb";
}

_QWORD *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CC3AD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CC3AD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  const void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;

  *(_QWORD *)this = off_251CC3610;
  BasebandTransport::timerOff_sync(this);
  (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
  v2 = (const void *)*((_QWORD *)this + 33);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 33) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 37);
  if (v3)
  {
    operator delete[](v3);
    *((_QWORD *)this + 37) = 0;
  }
  v4 = *((_QWORD *)this + 40);
  if (v4)
    dispatch_release(v4);
  v5 = *((_QWORD *)this + 39);
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)*((_QWORD *)this + 34);
  if (v6)
    _Block_release(v6);
  v7 = (const void *)*((_QWORD *)this + 21);
  if (v7)
    _Block_release(v7);
  v8 = (const void *)*((_QWORD *)this + 20);
  if (v8)
    _Block_release(v8);
  v9 = *((_QWORD *)this + 19);
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)*((_QWORD *)this + 18);
  if (v10)
    _Block_release(v10);
  *(_QWORD *)this = off_251CC3AD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v11 = *((_QWORD *)this + 12);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    dispatch_release(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

NSObject *BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  NSObject *result;
  char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t v6[64];

  result = *((_QWORD *)this + 35);
  if (result)
  {
    dispatch_source_cancel(result);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = (char *)this + 8;
    v4 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_24B97E000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v6, 2u);
    }
    result = (**(uint64_t (***)(char *, uint64_t))v3)(v3, 40);
    if ((_DWORD)result)
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Status report disabled", v5);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      return MEMORY[0x24BD2A658](v6);
    }
  }
  return result;
}

void BasebandTransport::create(NSObject **a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_95;
  block[4] = &qword_2579B8E68;
  if (_MergedGlobals == -1)
  {
    v4 = (std::__shared_weak_count *)unk_2579B8E70;
    v11 = qword_2579B8E68;
    v12 = unk_2579B8E70;
    if (!unk_2579B8E70)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&_MergedGlobals, block);
    v4 = (std::__shared_weak_count *)unk_2579B8E70;
    v11 = qword_2579B8E68;
    v12 = unk_2579B8E70;
    if (!unk_2579B8E70)
      goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
LABEL_5:
  v7 = *a1;
  v10 = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::create((capabilities::radio *)&v11, &v10, a2);
  if (v7)
    dispatch_release(v7);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_24B997A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  NSObject *v10;

  if (v10)
    dispatch_release(v10);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  BasebandTransportICE *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  NSObject *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  NSObject *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  dispatch_object_t object;
  uint64_t v49;
  std::__shared_weak_count *v50;
  BasebandTransportICE *v51;
  unint64_t v52;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = capabilities::radio::vendor(a1);
  if (v6 == 2)
  {
    v27 = (BasebandTransportICE *)operator new(0x208uLL);
    v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v49 = *(_QWORD *)a1;
    v50 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v31 = *a2;
    object = v31;
    if (v31)
      dispatch_retain(v31);
    BasebandTransportICE::BasebandTransportICE(v27, &v49, &object);
    v51 = v27;
    v52 = 0xAAAAAAAAAAAAAAAALL;
    v32 = (std::__shared_weak_count *)operator new(0x20uLL);
    v32->__shared_owners_ = 0;
    v33 = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)off_251CC3C68;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
    v52 = (unint64_t)v32;
    v34 = (std::__shared_weak_count *)*((_QWORD *)v27 + 10);
    if (v34)
    {
      if (v34->__shared_owners_ != -1)
      {
LABEL_45:
        v42 = (uint64_t)v51;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v51);
        v43 = v52;
        v51 = 0;
        v52 = 0;
        *(_QWORD *)a3 = v42;
        *(_QWORD *)(a3 + 8) = v43;
        if (object)
          dispatch_release(object);
        v24 = v50;
        if (!v50)
          goto LABEL_52;
        v44 = (unint64_t *)&v50->__shared_owners_;
        do
          v26 = __ldaxr(v44);
        while (__stlxr(v26 - 1, v44));
        goto LABEL_50;
      }
      do
        v35 = __ldxr(v33);
      while (__stxr(v35 + 1, v33));
      p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      *((_QWORD *)v27 + 9) = v27;
      *((_QWORD *)v27 + 10) = v32;
      std::__shared_weak_count::__release_weak(v34);
    }
    else
    {
      do
        v38 = __ldxr(v33);
      while (__stxr(v38 + 1, v33));
      v39 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *((_QWORD *)v27 + 9) = v27;
      *((_QWORD *)v27 + 10) = v32;
    }
    do
      v41 = __ldaxr(v33);
    while (__stlxr(v41 - 1, v33));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_45;
  }
  if (v6 != 3)
    return;
  v7 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v46 = *(_QWORD *)a1;
  v47 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  v45 = v11;
  if (v11)
    dispatch_retain(v11);
  BasebandTransport::BasebandTransport((uint64_t)v7, &v46, &v45);
  v51 = (BasebandTransportICE *)v7;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_251CC3CB8;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v7;
  v52 = (unint64_t)v12;
  v14 = (std::__shared_weak_count *)v7[2].~__shared_weak_count;
  if (!v14)
  {
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    do
LABEL_18:
      v21 = __ldaxr(v13);
    while (__stlxr(v21 - 1, v13));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_21;
  }
  if (v14->__shared_owners_ == -1)
  {
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    v16 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_18;
  }
LABEL_21:
  v22 = (uint64_t)v51;
  ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v51);
  v23 = v52;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v23;
  if (v11)
    dispatch_release(v11);
  v24 = v47;
  if (!v47)
    goto LABEL_52;
  v25 = (unint64_t *)&v47->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
LABEL_50:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_52:
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_24B997DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (object)
    dispatch_release(object);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1174405120;
  v16[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_49_0;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_97;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  const void *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;

  v2 = *((_QWORD *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    v3 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_4;
    v5 = *((_QWORD *)a1 + 5);
    v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    aBlock[4] = v2;
    aBlock[5] = v5;
    v19 = v4;
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = _Block_copy(aBlock);
    v9 = *(const void **)(v2 + 160);
    *(_QWORD *)(v2 + 160) = v8;
    if (v9)
      _Block_release(v9);
    v16[0] = v3;
    v16[1] = 1174405120;
    v16[2] = ___ZN17BasebandTransport4initEv_block_invoke_44;
    v16[3] = &__block_descriptor_tmp_47_0;
    v11 = *((_QWORD *)a1 + 5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    v16[4] = v2;
    v16[5] = v11;
    v17 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = _Block_copy(v16);
    v15 = *(const void **)(v2 + 168);
    *(_QWORD *)(v2 + 168) = v14;
    if (v15)
      _Block_release(v15);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  const char *v13;
  const void *v14;
  void *v15;
  const void *v16;
  __int128 v17;
  NSObject *v18;
  void *v19;
  char *v20;
  __int128 v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _BYTE buf[32];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      v11 = v10;
      if (a1[5])
      {
        v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = a2;
          *(_WORD *)&buf[8] = 2048;
          *(_QWORD *)&buf[10] = a3;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a4;
          _os_log_error_impl(&dword_24B97E000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", buf, 0x1Cu);
        }
        if ((**(unsigned int (***)(uint64_t, uint64_t))(v9 + 8))(v9 + 8, 80))
        {
          ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v13, a2, a3, a4);
          ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
          MEMORY[0x24BD2A658](buf);
        }
        *(_DWORD *)(v9 + 328) = 2 * ((_DWORD)a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        v14 = *(const void **)(v9 + 272);
        if (v14)
        {
          v15 = _Block_copy(v14);
          v16 = v15;
          v17 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)buf = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&buf[16] = v17;
          v25 = *(_QWORD *)(v9 + 360);
          v18 = *(NSObject **)(v9 + 152);
          if (v15)
            v19 = _Block_copy(v15);
          else
            v19 = 0;
          v20 = (char *)operator new(0x30uLL);
          *(_QWORD *)v20 = v19;
          v21 = *(_OWORD *)&buf[16];
          *(_OWORD *)(v20 + 8) = *(_OWORD *)buf;
          *(_OWORD *)(v20 + 24) = v21;
          *((_QWORD *)v20 + 5) = v25;
          dispatch_async_f(v18, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v16)
            _Block_release(v16);
        }
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_24B99833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result;

  result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN17BasebandTransport4initEv_block_invoke_44(_QWORD *a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  char v19;
  NSObject *v20;
  void *v21;
  void *v22;
  size_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *__p;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint8_t buf[8];
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = a1[4];
  v34 = 0;
  v35 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v35 = std::__shared_weak_count::lock(v7)) != 0 && (v10 = a1[5], (v34 = v10) != 0))
  {
    v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if ((_DWORD)a2)
    {
      v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_debug_impl(&dword_24B97E000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
      if ((**(unsigned int (***)(uint64_t, uint64_t))(v6 + 8))(v6 + 8, 20))
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Async read error 0x%08x", v13, a2);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24BD2A658](buf);
      }
    }
    else
    {
      *(_QWORD *)(v6 + 336) += a4;
      v14 = *(const void **)(v6 + 144);
      if (v14)
      {
        v15 = _Block_copy(v14);
        v16 = *(_QWORD *)(v6 + 128);
        if (v16)
        {
          __p = 0;
          v32 = 0;
          v33 = 0;
          (*(void (**)(uint64_t, void *, _QWORD, void **))(*(_QWORD *)v16 + 8))(v16, a3, a4, &__p);
          v17 = *(NSObject **)(v6 + 152);
          if (v15)
            v18 = _Block_copy(v15);
          else
            v18 = 0;
          *(_QWORD *)buf = v18;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v22 = __p;
          v23 = v32 - (_BYTE *)__p;
          if (v32 == __p)
          {
            v25 = 0;
            v24 = 0;
          }
          else
          {
            if ((v23 & 0x8000000000000000) != 0)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v24 = (char *)operator new(v32 - (_BYTE *)__p);
            v25 = &v24[v23];
            v37 = v24;
            v39 = &v24[v23];
            memcpy(v24, v22, v23);
            v38 = &v24[v23];
          }
          v26 = operator new(0x20uLL);
          *v26 = v18;
          v26[1] = v24;
          v26[2] = v25;
          v26[3] = v25;
          dispatch_async_f(v17, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            v32 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v19 = *(_BYTE *)(v6 + 136);
          v20 = *(NSObject **)(v6 + 152);
          if (v15)
            v21 = _Block_copy(v15);
          else
            v21 = 0;
          v27 = operator new(0x18uLL);
          *v27 = v21;
          v27[1] = a3;
          *((_DWORD *)v27 + 4) = a4;
          *((_BYTE *)v27 + 20) = v19;
          dispatch_async_f(v20, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v15)
          _Block_release(v15);
      }
    }
    if (a3 && !*(_BYTE *)(v6 + 136))
      free(a3);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  v28 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_24B9986E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, __int128 *a2, void **a3)
{
  uint64_t v6;
  __int128 v7;
  void *v8;
  NSObject *v9;
  int v10;
  void *v11;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *aBlock;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD block[6];

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  BasebandTransport::stopReader(a1);
  v6 = MEMORY[0x24BDAC760];
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_50;
  v13[5] = a1;
  v7 = a2[1];
  v14 = *a2;
  v15 = v7;
  v16 = *((_QWORD *)a2 + 4);
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  aBlock = v8;
  v13[4] = &v18;
  v22 = v13;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_97;
  block[4] = (char *)a1 + 72;
  block[5] = &v22;
  v9 = *((_QWORD *)a1 + 11);
  if (*((_QWORD *)a1 + 12))
  {
    dispatch_async_and_wait(v9, block);
    v10 = *((unsigned __int8 *)v19 + 24);
    v11 = aBlock;
    if (!aBlock)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v9, block);
  v10 = *((unsigned __int8 *)v19 + 24);
  v11 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v11);
LABEL_8:
  _Block_object_dispose(&v18, 8);
  return v10 != 0;
}

void sub_24B9988D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  char *v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  dispatch_time_t v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  _QWORD v17[7];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[3];
  char v21;
  _QWORD *v22;

  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2000000000;
  v21 = 0;
  v2 = MEMORY[0x24BDAC760];
  v3 = (uint64_t *)((char *)this + 72);
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 1107296256;
  v19[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  v19[3] = &__block_descriptor_tmp_73;
  v19[4] = v20;
  v19[5] = this;
  v22 = v19;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 0x40000000;
  v17[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v17[3] = &__block_descriptor_tmp_97;
  v17[4] = (char *)this + 72;
  v17[5] = &v22;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, v17);
  else
    dispatch_sync(v4, v17);
  v18[0] = v2;
  v18[1] = 1107296256;
  v18[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_74;
  v18[3] = &__block_descriptor_tmp_75;
  v18[4] = v20;
  v18[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v3, (uint64_t)v18);
  if (*((_QWORD *)this + 40))
  {
    v6 = (char *)this + 8;
    v7 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17[0]) = 0;
      _os_log_impl(&dword_24B97E000, v7, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)v17, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v6)((char *)this + 8, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Waiting for reader to be stopped", v8);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24BD2A658](v17);
    }
    v9 = *((_QWORD *)this + 40);
    v10 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v9, v10))
    {
      (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
      v11 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v17[0]) = 0;
        _os_log_error_impl(&dword_24B97E000, v11, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)v17, 2u);
      }
      if ((**(unsigned int (***)(char *, uint64_t))v6)((char *)this + 8, 80))
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Timeout waiting for read to unblock, freed transport to force read unblock", v12);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24BD2A658](v17);
      }
    }
    else
    {
      v13 = (void *)*((_QWORD *)this + 37);
      if (v13)
      {
        operator delete[](v13);
        *((_QWORD *)this + 37) = 0;
        v14 = *((_QWORD *)this + 39);
        *((_QWORD *)this + 39) = 0;
        if (v14)
          dispatch_release(v14);
      }
    }
    v15 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17[0]) = 0;
      _os_log_impl(&dword_24B97E000, v15, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)v17, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v6)(v6, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Reader stopped", v16);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24BD2A658](v17);
    }
  }
  _Block_object_dispose(v20, 8);
}

void sub_24B998BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x24BD2A658](&a9);
  _Block_object_dispose((const void *)(v9 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_24B998C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_24B998C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_24B998C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_24B998C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_24B998C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  char v3;
  __int128 v4;
  void *v5;
  const void *v6;
  _QWORD v7[5];
  char v8;

  v2 = *(_QWORD *)(a1 + 40);
  BasebandTransport::timerOff_sync((BasebandTransport *)v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  v3 = *(_BYTE *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v4;
  *(_BYTE *)(v2 + 136) = v3;
  v5 = *(void **)(a1 + 88);
  if (v5)
    v5 = _Block_copy(v5);
  v6 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = v5;
  if (v6)
    _Block_release(v6);
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v5))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      BasebandTransport::timerOn_sync((dispatch_queue_t *)v2);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 0x40000000;
    v7[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v7[3] = &__block_descriptor_tmp_90;
    v7[4] = v2;
    v8 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v7);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::abs *inited;
  int v10;
  uint64_t shouldUseMinBasebandTransportIOReadCount;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  unsigned int (***v21)(char *, uint64_t);
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  int v27;
  uint8_t *v28;
  int v29;
  int v30;
  const char *v31;
  int v32;
  uint64_t v33;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[12];
  __int16 v44;
  uint64_t v45;
  char v46;
  uint8_t buf[23];
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  HIDWORD(v38) = -1431655766;
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  v10 = *((_DWORD *)this + 28);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  v12 = (1000 * v10);
  if (((v12 * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    v13 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1000 * v10;
      _os_log_error_impl(&dword_24B97E000, v13, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
    shouldUseMinBasebandTransportIOReadCount = (**((uint64_t (***)(char *, uint64_t))this + 1))((char *)this + 8, 80);
    if ((_DWORD)shouldUseMinBasebandTransportIOReadCount)
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Scaled create timeout overflowed, falling back to unscaled value: %u", v14, v12);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      shouldUseMinBasebandTransportIOReadCount = MEMORY[0x24BD2A658](buf);
    }
  }
  else
  {
    LODWORD(v12) = v12 * shouldUseMinBasebandTransportIOReadCount;
  }
  v39 = *((_QWORD *)this + 11);
  v41 = v12 | 0x200000000;
  if (!*((_DWORD *)this + 31))
  {
    v16 = *((_DWORD *)this + 26);
    shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
    if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
      goto LABEL_21;
    if (v16 == 2)
    {
      HIDWORD(v42) = 16;
      v15 = *((_DWORD *)this + 30);
      if (v15)
        goto LABEL_29;
      goto LABEL_17;
    }
    if (v16 == 16 || v16 == 15)
    {
      HIDWORD(v42) = 36;
      v15 = *((_DWORD *)this + 30);
      if (v15)
        goto LABEL_29;
    }
    else
    {
LABEL_21:
      HIDWORD(v42) = 4;
      v15 = *((_DWORD *)this + 30);
      if (v15)
        goto LABEL_29;
    }
LABEL_17:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount))
      v15 = 0x4000;
    else
      v15 = 0x8000;
    goto LABEL_29;
  }
  HIDWORD(v42) = *((_DWORD *)this + 31);
  v15 = *((_DWORD *)this + 30);
  if (!v15)
    goto LABEL_17;
LABEL_29:
  LODWORD(v42) = -1431655765;
  v17 = *((_DWORD *)this + 26);
  switch(v17)
  {
    case 0:
      LODWORD(v38) = 0;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 1:
      LODWORD(v38) = 1;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 2:
      LODWORD(v38) = 2;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 3:
      LODWORD(v38) = 3;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 4:
      LODWORD(v38) = 4;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 5:
      LODWORD(v38) = 5;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 6:
      LODWORD(v38) = 6;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 7:
      LODWORD(v38) = 7;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 8:
      LODWORD(v38) = 8;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 9:
    case 17:
      LODWORD(v38) = 9;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) >= 0x41)
        goto LABEL_31;
      goto LABEL_36;
    case 10:
      LODWORD(v38) = 10;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 11:
      LODWORD(v38) = 11;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 12:
      LODWORD(v38) = 12;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 13:
    case 18:
      LODWORD(v38) = 13;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 14:
      LODWORD(v38) = 14;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 15:
      LODWORD(v38) = 15;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) < 0x41)
        goto LABEL_36;
      goto LABEL_31;
    case 16:
      LODWORD(v38) = 16;
      v18 = HIDWORD(v42);
      if (HIDWORD(v42) >= 0x41)
      {
LABEL_31:
        v19 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          switch(v17)
          {
            case 0:
              v48 = 3;
              strcpy((char *)buf, "PBL");
              break;
            case 1:
              v48 = 3;
              strcpy((char *)buf, "SBL");
              break;
            case 2:
              v48 = 4;
              v36 = 1195460932;
              goto LABEL_244;
            case 3:
              v48 = 4;
              v36 = 1397114194;
              goto LABEL_244;
            case 4:
              v48 = 5;
              strcpy((char *)buf, "QMUX1");
              break;
            case 5:
              v48 = 5;
              strcpy((char *)buf, "QMUX2");
              break;
            case 6:
              v48 = 3;
              strcpy((char *)buf, "ROM");
              break;
            case 7:
              v48 = 4;
              v36 = 1414483778;
              goto LABEL_244;
            case 8:
              v48 = 3;
              strcpy((char *)buf, "ARI");
              break;
            case 9:
              v48 = 3;
              strcpy((char *)buf, "STT");
              break;
            case 10:
              v48 = 2;
              strcpy((char *)buf, "AT");
              break;
            case 11:
              v48 = 4;
              v36 = 1280328769;
              goto LABEL_244;
            case 12:
              v48 = 8;
              strcpy((char *)buf, "MEDIACTL");
              break;
            case 13:
              v48 = 3;
              strcpy((char *)buf, "ETS");
              break;
            case 14:
              v48 = 4;
              v36 = 1397968455;
              goto LABEL_244;
            case 15:
              v48 = 4;
              v36 = 1397965905;
              goto LABEL_244;
            case 16:
              v48 = 5;
              strcpy((char *)buf, "RCTTH");
              break;
            case 17:
              v48 = 3;
              strcpy((char *)buf, "ACP");
              break;
            case 18:
              v48 = 4;
              v36 = 1297040214;
LABEL_244:
              *(_DWORD *)buf = v36;
              buf[4] = 0;
              break;
            default:
              v48 = 7;
              strcpy((char *)buf, "Unknown");
              break;
          }
          *(_DWORD *)v43 = 136315394;
          *(_QWORD *)&v43[4] = buf;
          v44 = 2048;
          v45 = v18;
          _os_log_error_impl(&dword_24B97E000, v19, OS_LOG_TYPE_ERROR, "%s: invalid transport io read count (%lu)", v43, 0x16u);
          if (v48 < 0)
            operator delete(*(void **)buf);
        }
        if (!(**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 80))
          goto LABEL_193;
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v27 = 1195460932;
            goto LABEL_105;
          case 3:
            v46 = 4;
            v27 = 1397114194;
            goto LABEL_105;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v27 = 1414483778;
            goto LABEL_105;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v27 = 1280328769;
            goto LABEL_105;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v27 = 1397968455;
            goto LABEL_105;
          case 0xF:
            v46 = 4;
            v27 = 1397965905;
            goto LABEL_105;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v27 = 1297040214;
            goto LABEL_105;
          case 0x13:
            v46 = 4;
            v27 = 1129335117;
LABEL_105:
            *(_DWORD *)v43 = v27;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: invalid transport io read count (%lu)", v20, v43, HIDWORD(v42), v38, v39, 0xAAAAAAAAAAAAAAAALL, v41, v42);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
LABEL_191:
        MEMORY[0x24BD2A658](buf);
        if (v46 < 0)
          operator delete(*(void **)v43);
LABEL_193:
        v33 = 0;
        goto LABEL_194;
      }
LABEL_36:
      if (v15 - 0x4000 > 0xFC000)
      {
        v23 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          switch(v17)
          {
            case 0:
              v48 = 3;
              strcpy((char *)buf, "PBL");
              break;
            case 1:
              v48 = 3;
              strcpy((char *)buf, "SBL");
              break;
            case 2:
              v48 = 4;
              v37 = 1195460932;
              goto LABEL_266;
            case 3:
              v48 = 4;
              v37 = 1397114194;
              goto LABEL_266;
            case 4:
              v48 = 5;
              strcpy((char *)buf, "QMUX1");
              break;
            case 5:
              v48 = 5;
              strcpy((char *)buf, "QMUX2");
              break;
            case 6:
              v48 = 3;
              strcpy((char *)buf, "ROM");
              break;
            case 7:
              v48 = 4;
              v37 = 1414483778;
              goto LABEL_266;
            case 8:
              v48 = 3;
              strcpy((char *)buf, "ARI");
              break;
            case 9:
              v48 = 3;
              strcpy((char *)buf, "STT");
              break;
            case 10:
              v48 = 2;
              strcpy((char *)buf, "AT");
              break;
            case 11:
              v48 = 4;
              v37 = 1280328769;
              goto LABEL_266;
            case 12:
              v48 = 8;
              strcpy((char *)buf, "MEDIACTL");
              break;
            case 13:
              v48 = 3;
              strcpy((char *)buf, "ETS");
              break;
            case 14:
              v48 = 4;
              v37 = 1397968455;
              goto LABEL_266;
            case 15:
              v48 = 4;
              v37 = 1397965905;
              goto LABEL_266;
            case 16:
              v48 = 5;
              strcpy((char *)buf, "RCTTH");
              break;
            case 17:
              v48 = 3;
              strcpy((char *)buf, "ACP");
              break;
            case 18:
              v48 = 4;
              v37 = 1297040214;
LABEL_266:
              *(_DWORD *)buf = v37;
              buf[4] = 0;
              break;
            default:
              v48 = 7;
              strcpy((char *)buf, "Unknown");
              break;
          }
          *(_DWORD *)v43 = 136315394;
          *(_QWORD *)&v43[4] = buf;
          v44 = 2048;
          v45 = v15;
          _os_log_error_impl(&dword_24B97E000, v23, OS_LOG_TYPE_ERROR, "%s: invalid transport io read size (%lu)", v43, 0x16u);
          if (v48 < 0)
            operator delete(*(void **)buf);
        }
        if (!(**((unsigned int (***)(char *, uint64_t))this + 1))((char *)this + 8, 80))
          goto LABEL_193;
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v29 = 1195460932;
            goto LABEL_135;
          case 3:
            v46 = 4;
            v29 = 1397114194;
            goto LABEL_135;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v29 = 1414483778;
            goto LABEL_135;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v29 = 1280328769;
            goto LABEL_135;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v29 = 1397968455;
            goto LABEL_135;
          case 0xF:
            v46 = 4;
            v29 = 1397965905;
            goto LABEL_135;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v29 = 1297040214;
            goto LABEL_135;
          case 0x13:
            v46 = 4;
            v29 = 1129335117;
LABEL_135:
            *(_DWORD *)v43 = v29;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: invalid transport io read size (%lu)", v24, v43, v15, v38, v39, 0xAAAAAAAAAAAAAAAALL, v41, v42);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_191;
      }
      v40 = *((_QWORD *)this + 20);
      if (*((_QWORD *)this + 18))
      {
        *((_BYTE *)this + 332) = 1;
        LODWORD(v42) = -1431655761;
      }
      v21 = (unsigned int (***)(char *, uint64_t))((char *)this + 8);
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        v25 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          v28 = v48 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v43 = 136315138;
          *(_QWORD *)&v43[4] = v28;
          _os_log_error_impl(&dword_24B97E000, v25, OS_LOG_TYPE_ERROR, "%s: transport open failed", v43, 0xCu);
          if (v48 < 0)
            operator delete(*(void **)buf);
        }
        if (!(**v21)((char *)this + 8, 80))
          goto LABEL_193;
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v32 = 1195460932;
            goto LABEL_189;
          case 3:
            v46 = 4;
            v32 = 1397114194;
            goto LABEL_189;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v32 = 1414483778;
            goto LABEL_189;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v32 = 1280328769;
            goto LABEL_189;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v32 = 1397968455;
            goto LABEL_189;
          case 0xF:
            v46 = 4;
            v32 = 1397965905;
            goto LABEL_189;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v32 = 1297040214;
            goto LABEL_189;
          case 0x13:
            v46 = 4;
            v32 = 1129335117;
LABEL_189:
            *(_DWORD *)v43 = v32;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: transport open failed", v26, v43);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        goto LABEL_191;
      }
      *((_DWORD *)this + 82) = 1;
      v22 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v48 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v48 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v48 = 4;
            v30 = 1195460932;
            goto LABEL_160;
          case 3:
            v48 = 4;
            v30 = 1397114194;
            goto LABEL_160;
          case 4:
            v48 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v48 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v48 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v48 = 4;
            v30 = 1414483778;
            goto LABEL_160;
          case 8:
            v48 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v48 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            v48 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            v48 = 4;
            v30 = 1280328769;
            goto LABEL_160;
          case 0xC:
            v48 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            v48 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            v48 = 4;
            v30 = 1397968455;
            goto LABEL_160;
          case 0xF:
            v48 = 4;
            v30 = 1397965905;
            goto LABEL_160;
          case 0x10:
            v48 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            v48 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            v48 = 4;
            v30 = 1297040214;
            goto LABEL_160;
          case 0x13:
            v48 = 4;
            v30 = 1129335117;
LABEL_160:
            *(_DWORD *)buf = v30;
            buf[4] = 0;
            break;
          case 0x14:
            v48 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            v48 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            v48 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            v48 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v43 = 136315394;
        *(_QWORD *)&v43[4] = buf;
        v44 = 1024;
        LODWORD(v45) = v15;
        _os_log_impl(&dword_24B97E000, v22, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v43, 0x12u);
        if (v48 < 0)
          operator delete(*(void **)buf);
      }
      if ((**v21)((char *)this + 8, 40))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v46 = 3;
            strcpy(v43, "PBL");
            break;
          case 1:
            v46 = 3;
            strcpy(v43, "SBL");
            break;
          case 2:
            v46 = 4;
            v35 = 1195460932;
            goto LABEL_218;
          case 3:
            v46 = 4;
            v35 = 1397114194;
            goto LABEL_218;
          case 4:
            v46 = 5;
            strcpy(v43, "QMUX1");
            break;
          case 5:
            v46 = 5;
            strcpy(v43, "QMUX2");
            break;
          case 6:
            v46 = 3;
            strcpy(v43, "ROM");
            break;
          case 7:
            v46 = 4;
            v35 = 1414483778;
            goto LABEL_218;
          case 8:
            v46 = 3;
            strcpy(v43, "ARI");
            break;
          case 9:
            v46 = 3;
            strcpy(v43, "STT");
            break;
          case 0xA:
            v46 = 2;
            strcpy(v43, "AT");
            break;
          case 0xB:
            v46 = 4;
            v35 = 1280328769;
            goto LABEL_218;
          case 0xC:
            v46 = 8;
            strcpy(v43, "MEDIACTL");
            break;
          case 0xD:
            v46 = 3;
            strcpy(v43, "ETS");
            break;
          case 0xE:
            v46 = 4;
            v35 = 1397968455;
            goto LABEL_218;
          case 0xF:
            v46 = 4;
            v35 = 1397965905;
            goto LABEL_218;
          case 0x10:
            v46 = 5;
            strcpy(v43, "RCTTH");
            break;
          case 0x11:
            v46 = 3;
            strcpy(v43, "ACP");
            break;
          case 0x12:
            v46 = 4;
            v35 = 1297040214;
            goto LABEL_218;
          case 0x13:
            v46 = 4;
            v35 = 1129335117;
LABEL_218:
            *(_DWORD *)v43 = v35;
            v43[4] = 0;
            break;
          case 0x14:
            v46 = 3;
            strcpy(v43, "DHL");
            break;
          case 0x15:
            v46 = 3;
            strcpy(v43, "MUX");
            break;
          case 0x16:
            v46 = 3;
            strcpy(v43, "FAC");
            break;
          default:
            v46 = 7;
            strcpy(v43, "Unknown");
            break;
        }
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s: transport successfully opened with read io size as %u", v31, v43, v15, v38, v39, v40, v41, v42);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24BD2A658](buf);
        if (v46 < 0)
          operator delete(*(void **)v43);
      }
      v33 = 1;
LABEL_194:
      std::__shared_weak_count::__release_weak(v4);
      return v33;
    default:
      goto LABEL_193;
  }
}

void sub_24B99A624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  std::__shared_weak_count *v30;

  MEMORY[0x24BD2A658](&a30);
  if (a28 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(dispatch_queue_t *this)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  dispatch_time_t v5;
  std::__shared_weak_count *v6;
  dispatch_queue_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  NSObject *v16;
  int v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  const char *v21;
  uint64_t handler;
  uint64_t v23;
  void (*v24)(_QWORD *);
  void *v25;
  dispatch_queue_t *v26;
  dispatch_queue_t v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  BasebandTransport::timerOff_sync((BasebandTransport *)this);
  if (*((_DWORD *)this + 82) == 1)
  {
    v2 = *((_DWORD *)this + 72);
    if (v2 && this[34])
    {
      v3 = 1000000000 * v2;
      v4 = dispatch_source_create(MEMORY[0x24BDACA18], 1uLL, 0, this[11]);
      this[35] = v4;
      v5 = dispatch_time(0, v3);
      dispatch_source_set_timer(v4, v5, v3, 0xBEBC200uLL);
      v6 = (std::__shared_weak_count *)this[10];
      if (!v6 || (v7 = this[9], (v8 = std::__shared_weak_count::lock(v6)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v9 = v8;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      v14 = this[35];
      handler = MEMORY[0x24BDAC760];
      v23 = 1174405120;
      v24 = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      v25 = &__block_descriptor_tmp_86;
      v26 = this;
      v27 = v7;
      v28 = v9;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      dispatch_source_set_event_handler(v14, &handler);
      dispatch_activate(this[35]);
      v16 = this[5];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *((_DWORD *)this + 72);
        *(_DWORD *)buf = 67109120;
        v30 = v17;
        _os_log_impl(&dword_24B97E000, v16, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (((unsigned int (*)(char *, uint64_t))this[1]->isa)((char *)this + 8, 40))
      {
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Status report enabled(%d sec)", v18, *((unsigned int *)this + 72), handler, v23, v24, v25, v26, v27);
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
        MEMORY[0x24BD2A658](buf);
      }
      if (v28)
        std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v19 = (char *)(this + 1);
    v20 = this[5];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_24B97E000, v20, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v19)(v19, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Invalid state for status report enable.  Ignoring enable request.", v21);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24BD2A658](buf);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_90;
  v2[4] = this;
  v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_32r88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_32r88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    _Block_release(v2);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  char *v7;
  _QWORD *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  uint64_t (**v12)(_QWORD, uint64_t);
  int v13;
  NSObject *v14;
  _BOOL8 v15;
  _QWORD v17[6];
  _QWORD v18[10];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  uint64_t block;
  uint64_t p_block;
  uint64_t v29;
  __n128 (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  void *__p;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *(*v47)(uint64_t);
  void *v48;
  char *v49;
  _QWORD *v50;

  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v7 = (char *)this + 72;
  v8 = (_QWORD *)MEMORY[0x24BDAC760];
  v35[0] = MEMORY[0x24BDAC760];
  v35[1] = 1107296256;
  v35[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v35[3] = &__block_descriptor_tmp_51;
  v35[5] = &v40;
  v35[6] = this;
  v35[4] = &v36;
  v45 = v35;
  block = MEMORY[0x24BDAC760];
  p_block = 0x40000000;
  v29 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v30 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_97;
  v31 = (void (*)(uint64_t))((char *)this + 72);
  __p = &v45;
  v10 = (char *)this + 88;
  v9 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v10 + 1))
  {
    dispatch_async_and_wait(v9, &block);
    if (*((_BYTE *)v41 + 24))
      goto LABEL_3;
LABEL_10:
    v15 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v9, &block);
  if (!*((_BYTE *)v41 + 24))
    goto LABEL_10;
LABEL_3:
  block = 0;
  p_block = (uint64_t)&block;
  v29 = 0x4002000000;
  v30 = __Block_byref_object_copy__0;
  v31 = __Block_byref_object_dispose__0;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = a3;
  v18[0] = v8;
  v18[1] = 1107296256;
  v18[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_52;
  v18[3] = &__block_descriptor_tmp_53_0;
  v18[8] = a2;
  v18[9] = a3;
  v18[4] = &block;
  v18[5] = &v23;
  v18[6] = &v19;
  v18[7] = this;
  v44 = v18;
  v45 = v8;
  v46 = 0x40000000;
  v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v48 = &__block_descriptor_tmp_97;
  v49 = v7;
  v50 = &v44;
  v11 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v11, &v45);
    if (v20[3])
      goto LABEL_5;
  }
  else
  {
    dispatch_sync(v11, &v45);
    if (v20[3])
    {
LABEL_5:
      v12 = (uint64_t (**)(_QWORD, uint64_t))v37[3];
      if (*v12)
      {
        v13 = (*v12)(v12, v24[3]);
        *((_BYTE *)v41 + 24) = v13;
        if (v13)
        {
          v17[0] = v8;
          v17[1] = 1107296256;
          v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54;
          v17[3] = &__block_descriptor_tmp_56;
          v17[4] = &v19;
          v17[5] = this;
          v44 = v17;
          v45 = v8;
          v46 = 0x40000000;
          v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          v48 = &__block_descriptor_tmp_97;
          v49 = v7;
          v50 = &v44;
          v14 = *((_QWORD *)this + 11);
          if (*((_QWORD *)this + 12))
            dispatch_async_and_wait(v14, &v45);
          else
            dispatch_sync(v14, &v45);
          v15 = *((_BYTE *)v41 + 24) != 0;
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = 0;
        *((_BYTE *)v41 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  v15 = 1;
LABEL_17:
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v15;
}

void sub_24B99AD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v40 - 240), 8);
  _Block_object_dispose((const void *)(v40 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    result = v3();
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

__n128 __Block_byref_object_copy__0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __copy_helper_block_e8_32r40r48r(uint64_t a1, const void **a2)
{
  _Block_object_assign((void *)(a1 + 32), a2[4], 8);
  _Block_object_assign((void *)(a1 + 40), a2[5], 8);
  _Block_object_assign((void *)(a1 + 48), a2[6], 8);
}

void __destroy_helper_block_e8_32r40r48r(const void **a1)
{
  _Block_object_dispose(a1[6], 8);
  _Block_object_dispose(a1[5], 8);
  _Block_object_dispose(a1[4], 8);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 344) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v2 + 344) = v3;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *(_DWORD *)buf = 134218240;
    v9 = v7;
    v10 = 2048;
    v11 = v3;
    _os_log_debug_impl(&dword_24B97E000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", buf, 0x16u);
  }
  result = (**(uint64_t (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 20);
  if ((_DWORD)result)
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Written: %zu bytes, for a total of: %llu", v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_QWORD *)(v2 + 344));
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    return MEMORY[0x24BD2A658](buf);
  }
  return result;
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  char v13;
  void (*v14)(void);
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD block[6];

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v6 = (uint64_t *)((char *)this + 72);
  v7 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  v18[3] = &__block_descriptor_tmp_58;
  v18[5] = &v23;
  v18[6] = this;
  v18[4] = &v19;
  v27 = v18;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_97;
  block[4] = (char *)this + 72;
  block[5] = &v27;
  v9 = (char *)this + 88;
  v8 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v9 + 1))
  {
    dispatch_async_and_wait(v8, block);
    v10 = v24;
    if (!*((_BYTE *)v24 + 24))
      goto LABEL_13;
LABEL_5:
    v11 = v20[3];
    if (v11 && (v12 = *(uint64_t (**)(void))(v11 + 8)) != 0)
    {
      v13 = v12();
      *((_BYTE *)v24 + 24) = v13;
      if ((v13 & 1) != 0)
      {
        v17[0] = v7;
        v17[1] = 0x40000000;
        v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_59;
        v17[3] = &__block_descriptor_tmp_60;
        v17[4] = this;
        v17[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v17);
        goto LABEL_13;
      }
      v14 = *(void (**)(void))(v20[3] + 24);
      if (!v14)
        goto LABEL_13;
    }
    else
    {
      *((_BYTE *)v10 + 24) = 0;
      v14 = *(void (**)(void))(v11 + 24);
      if (!v14)
        goto LABEL_13;
    }
    v14();
    goto LABEL_13;
  }
  dispatch_sync(v8, block);
  v10 = v24;
  if (*((_BYTE *)v24 + 24))
    goto LABEL_5;
LABEL_13:
  v15 = *((unsigned __int8 *)v24 + 24);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v15;
}

void sub_24B99B298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(void);
  uint64_t (***v5)(_QWORD, uint64_t);
  NSObject *v6;
  const char *v7;
  uint8_t v8[64];

  v2 = a1[6];
  result = v2 + 176;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v4 = *(uint64_t (**)(void))(v2 + 232);
  if (v4)
  {
    result = v4();
    if (!(_DWORD)result)
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
      if (!*(_BYTE *)(v2 + 332))
        return result;
      goto LABEL_7;
    }
    LOBYTE(v4) = *(_BYTE *)(v2 + 332) == 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (_BYTE)v4;
  if (!*(_BYTE *)(v2 + 332))
    return result;
LABEL_7:
  v5 = (uint64_t (***)(_QWORD, uint64_t))(v2 + 8);
  v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v8 = 0;
    _os_log_error_impl(&dword_24B97E000, v6, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v8, 2u);
    result = (**v5)(v5, 80);
    if ((_DWORD)result)
      goto LABEL_9;
  }
  else
  {
    result = (**v5)(v5, 80);
    if ((_DWORD)result)
    {
LABEL_9:
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Explicit reads not allowed in async mode", v7);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      return MEMORY[0x24BD2A658](v8);
    }
  }
  return result;
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_59(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  char *v20;
  _QWORD *v21;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 1;
  *((_DWORD *)this + 72) = 0;
  v2 = (char *)this + 72;
  v3 = MEMORY[0x24BDAC760];
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_61;
  v10[4] = this;
  v15 = v10;
  block = MEMORY[0x24BDAC760];
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_97;
  v20 = (char *)this + 72;
  v21 = &v15;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, &block);
  else
    dispatch_sync(v4, &block);
  BasebandTransport::stopReader(this);
  v9[0] = v3;
  v9[1] = 1107296256;
  v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_62;
  v9[4] = &v11;
  v9[5] = this;
  v15 = v9;
  block = v3;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_97;
  v20 = v2;
  v21 = &v15;
  v6 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
    dispatch_async_and_wait(v6, &block);
  else
    dispatch_sync(v6, &block);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_24B99B568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_63;
  v5[4] = &v6;
  v5[5] = a1;
  v10 = v5;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_97;
  block[4] = a1 + 72;
  block[5] = &v10;
  v2 = a1 + 88;
  v1 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v2 + 8))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  unsigned int (*v2)(char *);
  _OWORD *v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  void *__p[2];
  char v14;
  _BYTE buf[12];
  __int16 v16;
  const char *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int (*)(char *))*((_QWORD *)this + 29);
  if (v2 && (v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    v4 = TelephonyUtilTransportFree();
    *v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_QWORD *)this + 32) = 0;
    v5 = (char *)this + 8;
    v6 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  else
  {
    v4 = 1;
    v5 = (char *)this + 8;
    v6 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      v14 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      v14 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      v14 = 4;
      v7 = 1195460932;
      goto LABEL_28;
    case 3:
      v14 = 4;
      v7 = 1397114194;
      goto LABEL_28;
    case 4:
      v14 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      v14 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      v14 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      v14 = 4;
      v7 = 1414483778;
      goto LABEL_28;
    case 8:
      v14 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      v14 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      v14 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      v14 = 4;
      v7 = 1280328769;
      goto LABEL_28;
    case 0xC:
      v14 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      v14 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      v14 = 4;
      v7 = 1397968455;
      goto LABEL_28;
    case 0xF:
      v14 = 4;
      v7 = 1397965905;
      goto LABEL_28;
    case 0x10:
      v14 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      v14 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      v14 = 4;
      v7 = 1297040214;
      goto LABEL_28;
    case 0x13:
      v14 = 4;
      v7 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v7;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      v14 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      v14 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      v14 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      v14 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  v8 = "error";
  if ((_DWORD)v4)
    v8 = "success";
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = __p;
  v16 = 2080;
  v17 = v8;
  _os_log_impl(&dword_24B97E000, v6, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v14 < 0)
    operator delete(__p[0]);
LABEL_33:
  if ((**(unsigned int (***)(char *, uint64_t))v5)(v5, 40))
  {
    switch(*((_DWORD *)this + 26))
    {
      case 0:
        v18 = 3;
        strcpy(buf, "PBL");
        break;
      case 1:
        v18 = 3;
        strcpy(buf, "SBL");
        break;
      case 2:
        v18 = 4;
        v10 = 1195460932;
        goto LABEL_59;
      case 3:
        v18 = 4;
        v10 = 1397114194;
        goto LABEL_59;
      case 4:
        v18 = 5;
        strcpy(buf, "QMUX1");
        break;
      case 5:
        v18 = 5;
        strcpy(buf, "QMUX2");
        break;
      case 6:
        v18 = 3;
        strcpy(buf, "ROM");
        break;
      case 7:
        v18 = 4;
        v10 = 1414483778;
        goto LABEL_59;
      case 8:
        v18 = 3;
        strcpy(buf, "ARI");
        break;
      case 9:
        v18 = 3;
        strcpy(buf, "STT");
        break;
      case 0xA:
        v18 = 2;
        strcpy(buf, "AT");
        break;
      case 0xB:
        v18 = 4;
        v10 = 1280328769;
        goto LABEL_59;
      case 0xC:
        v18 = 8;
        strcpy(buf, "MEDIACTL");
        break;
      case 0xD:
        v18 = 3;
        strcpy(buf, "ETS");
        break;
      case 0xE:
        v18 = 4;
        v10 = 1397968455;
        goto LABEL_59;
      case 0xF:
        v18 = 4;
        v10 = 1397965905;
        goto LABEL_59;
      case 0x10:
        v18 = 5;
        strcpy(buf, "RCTTH");
        break;
      case 0x11:
        v18 = 3;
        strcpy(buf, "ACP");
        break;
      case 0x12:
        v18 = 4;
        v10 = 1297040214;
        goto LABEL_59;
      case 0x13:
        v18 = 4;
        v10 = 1129335117;
LABEL_59:
        *(_DWORD *)buf = v10;
        buf[4] = 0;
        break;
      case 0x14:
        v18 = 3;
        strcpy(buf, "DHL");
        break;
      case 0x15:
        v18 = 3;
        strcpy(buf, "MUX");
        break;
      case 0x16:
        v18 = 3;
        strcpy(buf, "FAC");
        break;
      default:
        v18 = 7;
        strcpy(buf, "Unknown");
        break;
    }
    v11 = "error";
    if ((_DWORD)v4)
      v11 = "success";
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Transport close %s: %s", v9, buf, v11);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24BD2A658](__p);
    if (v18 < 0)
      operator delete(*(void **)buf);
  }
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  size_t v2;
  dispatch_queue_t v3;
  NSObject *v4;

  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this))
      v2 = 0x4000;
    else
      v2 = 0x8000;
    this[38] = v2;
    this[37] = operator new[](v2);
    v3 = dispatch_queue_create("ipc.bb", 0);
    v4 = this[39];
    this[39] = v3;
    if (v4)
      dispatch_release(v4);
  }
  *((_BYTE *)this + 292) = 1;
  *((_BYTE *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;
  dispatch_group_t group;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_79;
  v13[4] = this;
  v13[5] = v3;
  v14 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v13);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(v1 + 292);
  *(_BYTE *)(v1 + 292) = 0;
  *(_BYTE *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_74(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 40);
  v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    v3 = result;
    result = v2(v1 + 176);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24))
      {
        v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
          return v4(v1 + 176);
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(a1 + 56);
  v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_24B99C078(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  capabilities::abs *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD);
  uint64_t v10;
  capabilities::abs *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[6];
  std::__shared_weak_count *v32;
  _QWORD block[6];
  std::__shared_weak_count *v34;
  dispatch_group_t group;
  int v36;
  _QWORD v37[5];
  int v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  v40 = v6;
  if (!v4
    || (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v41 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = 0;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD))(a1 + 184);
  v10 = MEMORY[0x24BDAC760];
  if (v9)
  {
    v11 = v8;
    v12 = *(_QWORD *)(a1 + 296);
    v13 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    v14 = v9(a1 + 176, v12, v13, &v39, 0, 0xFFFFFFFFLL, 0);
    v15 = v39 ? v14 : 0;
    if (v15 == 1)
    {
      v37[0] = v10;
      v37[1] = 0x40000000;
      v37[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v37[3] = &__block_descriptor_tmp_80;
      v37[4] = a1;
      v38 = v39;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v37);
      block[0] = v10;
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_81;
      block[4] = a1;
      block[5] = v6;
      v34 = (std::__shared_weak_count *)v11;
      v16 = (unint64_t *)((char *)v11 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = *a2;
      group = v18;
      if (v18)
      {
        dispatch_retain(v18);
        dispatch_group_enter(v18);
      }
      v36 = v39;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      v19 = group;
      if (group)
      {
        dispatch_group_leave(group);
        dispatch_release(v19);
      }
      v20 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  v31[0] = v10;
  v31[1] = 1174405120;
  v31[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_82;
  v31[3] = &__block_descriptor_tmp_83;
  v31[4] = a1;
  v31[5] = v40;
  v32 = v41;
  if (v41)
  {
    v23 = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v31);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_24B99C31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[16];
  if (v3)
  {
    __p = 0;
    v5 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(void))(v2[18] + 16))();
  }
}

void sub_24B99C4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      if (!v6)
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v7 = (_OWORD *)(v3 + 328);
      v8 = *(_QWORD *)(v3 + 336);
      v9 = *(_QWORD *)(v3 + 376);
      v10 = *(_QWORD *)(v3 + 344) - *(_QWORD *)(v3 + 384);
      *(_QWORD *)(v3 + 352) = v8 - v9;
      *(_QWORD *)(v3 + 360) = v10;
      if (v10)
        v11 = 0;
      else
        v11 = v8 == v9;
      if (v11)
      {
        v12 = 3;
      }
      else
      {
        if (*(_DWORD *)v7 != 3)
        {
LABEL_12:
          v13 = *(_OWORD *)(v3 + 344);
          *(_OWORD *)(v3 + 368) = *v7;
          *(_OWORD *)(v3 + 384) = v13;
          *(_QWORD *)(v3 + 400) = *(_QWORD *)(v3 + 360);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 1174405120;
          block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
          block[3] = &__block_descriptor_tmp_85;
          block[4] = v3;
          block[5] = v6;
          v14 = (unint64_t *)&v4->__shared_owners_;
          v22 = v4;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
          v16 = v22;
          if (v22)
          {
            v17 = (unint64_t *)&v22->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          goto LABEL_19;
        }
        v12 = 1;
      }
      *(_DWORD *)v7 = v12;
      goto LABEL_12;
    }
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 272);
  v10 = *(_QWORD *)(v5 + 400);
  v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 45);
  result = *(__n128 *)((char *)this + 328);
  v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  const char *v5;
  _BYTE *v6;
  NSObject *v7;
  void **v8;
  const char *v9;
  _BYTE *v10;
  void *__p[2];
  char v12;
  _BYTE buf[12];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), __p);
    v4 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_24B97E000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 40)
    && ((BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), buf), v14 >= 0)
      ? (v6 = buf)
      : (v6 = *(_BYTE **)buf),
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s", v5, v6),
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(),
        MEMORY[0x24BD2A658](__p),
        v14 < 0))
  {
    operator delete(*(void **)buf);
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  else
  {
    v7 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), __p);
  if (v12 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v8;
  _os_log_impl(&dword_24B97E000, v7, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
  if (v12 < 0)
    operator delete(__p[0]);
LABEL_19:
  if ((**(unsigned int (***)(uint64_t, uint64_t))(v2 + 8))(v2 + 8, 40)
    && ((BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), buf), v14 >= 0)
      ? (v10 = buf)
      : (v10 = *(_BYTE **)buf),
        ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"%s", v9, v10),
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(),
        MEMORY[0x24BD2A658](__p),
        v14 < 0))
  {
    operator delete(*(void **)buf);
    if (!*(_BYTE *)(a1 + 40))
      return;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((dispatch_queue_t *)v2);
}

void sub_24B99C9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  MEMORY[0x24BD2A658](&a10);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *aBlock;
  int v10;
  _QWORD *v11;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_91;
  v8[4] = a1;
  v10 = a2;
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  aBlock = v5;
  v11 = v8;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_97;
  block[4] = a1 + 72;
  block[5] = &v11;
  v6 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    v7 = aBlock;
    if (!aBlock)
      return;
    goto LABEL_7;
  }
  dispatch_async_and_wait(v6, block);
  v7 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v7);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  const void *v4;

  v1 = *(_DWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 272);
  *(_QWORD *)(v3 + 272) = v2;
  if (v4)
    _Block_release(v4);
  BasebandTransport::timerOn_sync((dispatch_queue_t *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

double ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x600000000000000;
  result = *(double *)"ipc.bb";
  *(_OWORD *)a1 = *(_OWORD *)"ipc.bb";
  return result;
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CC3AD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_251CC3AD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  char __p[19];
  char v19;
  __int128 v20;

  v19 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v20;
  v20 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      if ((v19 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (v19 < 0)
LABEL_11:
    operator delete(*(void **)__p);
LABEL_12:
  v9 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_251CC3B30;
  *(_QWORD *)__p = v9;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_251CC3B98;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v9;
  *(_QWORD *)&__p[8] = v10;
  v17 = v10;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  ctu::LogServer::addWriter();
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(_QWORD *)&__p[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_24B99CDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B99CE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_24B99CE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9ABBD7)
    return a1 + 24;
  if (((v3 & 0x800000024B9ABBD7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9ABBD7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9ABBD7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const std::locale::facet *v12;
  uint64_t v13;
  BOOL v14;
  size_t v15;
  size_t v16;
  std::locale::__imp *v17;
  uint64_t v18;
  uint64_t v19;
  void *locale;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  std::locale __b[3];

  v24[0] = 0xAAAAAAAAAAAAAAAALL;
  v24[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x24BD2A940](v24, a1);
  if (LOBYTE(v24[0]))
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::use_facet(__b, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
      std::locale::~locale(__b);
      *((_DWORD *)v6 + 36) = v9;
      v10 = a2 + a3;
      if ((v8 & 0xB0) == 0x20)
        v11 = a2 + a3;
      else
        v11 = a2;
      if (!v7)
        goto LABEL_34;
    }
    else
    {
      v10 = a2 + a3;
      if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
        v11 = a2 + a3;
      else
        v11 = a2;
      if (!v7)
        goto LABEL_34;
    }
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    if (v14)
      v16 = 0;
    else
      v16 = v15;
    if (v11 - a2 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v11 - a2) == v11 - a2)
    {
      if ((uint64_t)v16 >= 1)
      {
        memset(__b, 170, sizeof(__b));
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v16 >= 0x17)
        {
          v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v18 = v16 | 7;
          v19 = v18 + 1;
          v17 = (std::locale::__imp *)operator new(v18 + 1);
          __b[1].__locale_ = (std::locale::__imp *)v16;
          __b[2].__locale_ = (std::locale::__imp *)(v19 | 0x8000000000000000);
          __b[0].__locale_ = v17;
        }
        else
        {
          HIBYTE(__b[2].__locale_) = v16;
          v17 = (std::locale::__imp *)__b;
        }
        memset(v17, v9, v16);
        *((_BYTE *)v17 + v16) = 0;
        if (SHIBYTE(__b[2].__locale_) >= 0)
          locale = __b;
        else
          locale = __b[0].__locale_;
        v21 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v7 + 96))(v7, locale, v16);
        v22 = v21;
        if (SHIBYTE(__b[2].__locale_) < 0)
        {
          operator delete(__b[0].__locale_);
          if (v22 != v16)
            goto LABEL_34;
        }
        else if (v21 != v16)
        {
          goto LABEL_34;
        }
      }
      if (v10 - v11 < 1
        || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v11, v10 - v11) == v10 - v11)
      {
        *((_QWORD *)v6 + 3) = 0;
        goto LABEL_35;
      }
    }
LABEL_34:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
LABEL_35:
  MEMORY[0x24BD2A94C](v24);
  return a1;
}

void sub_24B99D16C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x24BD2A94C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x24B99D13CLL);
}

void sub_24B99D1CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_251CC3AD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_24B99D384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_24B99D3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportIC"
                                "EEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (**v6)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t);
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  v7 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  operator delete((void *)a1);
}

void sub_24B99D574(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  void *v2;

  (*((void (**)(void))*a1 + 2))();
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1)
    _Block_release(*a1);
  operator delete(a1);
}

void sub_24B99D5EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)v1)
    _Block_release(*(const void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void *a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)a1 + 16))();
  if (*((_BYTE *)a1 + 20))
  {
    v2 = *(const void **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_6;
    goto LABEL_5;
  }
  free(*((void **)a1 + 1));
  v2 = *(const void **)a1;
  if (*(_QWORD *)a1)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  operator delete(a1);
}

void sub_24B99D67C(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void __destroy_helper_block_e8_32b40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
  else
  {
LABEL_5:
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
}

uint64_t support::fs::SyncFile::getLogClient(support::fs::SyncFile *this)
{
  return (uint64_t)this + 680;
}

void support::fs::SyncFile::create(uint64_t a1@<X0>, int a2@<W1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint8x8_t v8;
  __int128 v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  void *v27;
  __int128 v28;
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  size_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] >= 2uLL)
    {
      *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v30 = v9;
      v31 = v9;
      v29[1] = v9;
      v29[2] = v9;
      v29[0] = v9;
      v27 = operator new(0x30uLL);
      v28 = xmmword_24B9AA780;
      strcpy((char *)v27, "com.apple.telephony.basebandservices.support");
      v26 = 8;
      strcpy((char *)__p, "syncfile");
      support::log::client::client(v29, (uint64_t)&v27, (uint64_t)__p);
      if (v26 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v28) & 0x80000000) == 0)
        {
LABEL_5:
          v10 = *(NSObject **)v30;
          if (!os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_ERROR))
            goto LABEL_6;
LABEL_31:
          *(_DWORD *)buf = 134217984;
          v33 = a3;
          _os_log_error_impl(&dword_24B97E000, v10, OS_LOG_TYPE_ERROR, "error: buffer size provided (%lu) must be a power of two", buf, 0xCu);
LABEL_6:
          *a4 = 0;
          a4[1] = 0;
          *(_QWORD *)&v29[0] = &unk_251CC2740;
          v11 = (std::__shared_weak_count *)v31;
          if ((_QWORD)v31)
          {
            v12 = (unint64_t *)(v31 + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          return;
        }
      }
      else if ((SHIBYTE(v28) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(v27);
      v10 = *(NSObject **)v30;
      if (!os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_ERROR))
        goto LABEL_6;
      goto LABEL_31;
    }
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_13;
LABEL_27:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  if (!*(_BYTE *)(a1 + 23))
    goto LABEL_27;
LABEL_13:
  v14 = operator new(0x2F8uLL);
  support::fs::SyncFile::SyncFile((uint64_t)v14, (__int128 *)a1, a2, a3);
  *a4 = v14;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_251CC4038;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  a4[1] = v15;
  v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 2);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      return;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *((_QWORD *)v14 + 1) = v14;
    *((_QWORD *)v14 + 2) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *((_QWORD *)v14 + 1) = v14;
    *((_QWORD *)v14 + 2) = v15;
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_24B99DBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  dispatch_queue_t *v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    dispatch_barrier_async_f(v20[3], v20, (dispatch_function_t)std::shared_ptr<support::fs::SyncFile> ctu::SharedSynchronizable<support::fs::SyncFile>::make_shared_ptr<support::fs::SyncFile>(support::fs::SyncFile*)::{lambda(support::fs::SyncFile*)#1}::operator() const(support::fs::SyncFile*)::{lambda(void *)#1}::__invoke);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::SyncFile::SyncFile(uint64_t a1, __int128 *a2, int a3, size_t a4)
{
  NSObject *v8;
  NSObject *v9;
  std::string *v10;
  __int128 v11;
  char *v12;
  char *v13;
  void *__p[2];
  char v16;
  void *v17;
  __int128 v18;

  v8 = dispatch_queue_create("SyncFile", 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v9 = v8;
    dispatch_retain(v8);
    *(_QWORD *)(a1 + 32) = 0;
    dispatch_release(v9);
    *(_QWORD *)a1 = off_251CC3D70;
    v10 = (std::string *)(a1 + 40);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v11 = *a2;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      goto LABEL_6;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)a1 = off_251CC3D70;
    v10 = (std::string *)(a1 + 40);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_6:
  *(_QWORD *)(a1 + 64) = &unk_251CC3F88;
  *(_QWORD *)(a1 + 496) = &unk_251CC3FB0;
  *(_QWORD *)(a1 + 72) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 496), (void *)(a1 + 88));
  *(_QWORD *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 640) = -1;
  MEMORY[0x24BD2A8E0](a1 + 88);
  *(_DWORD *)(a1 + 648) = a3;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  if (a4)
  {
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(a4);
    *(_QWORD *)(a1 + 656) = v12;
    v13 = &v12[a4];
    *(_QWORD *)(a1 + 672) = &v12[a4];
    bzero(v12, a4);
    *(_QWORD *)(a1 + 664) = v13;
  }
  v17 = operator new(0x30uLL);
  v18 = xmmword_24B9AA780;
  strcpy((char *)v17, "com.apple.telephony.basebandservices.support");
  v16 = 8;
  strcpy((char *)__p, "syncfile");
  support::log::client::client((_QWORD *)(a1 + 680), (uint64_t)&v17, (uint64_t)__p);
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_11:
      if (*(_QWORD *)(a1 + 664) == *(_QWORD *)(a1 + 656))
        return a1;
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v17);
  if (*(_QWORD *)(a1 + 664) != *(_QWORD *)(a1 + 656))
LABEL_15:
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 88) + 24))(a1 + 88);
  return a1;
}

void sub_24B99DE74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedSynchronizable<HSFilerRT_Internal>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void sub_24B99DE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  void (__cdecl ***v23)(std::fstream *__hidden);
  void **v24;
  support::log::client *v25;
  void *v27;

  support::log::client::~client(v25);
  v27 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v21 + 664) = v27;
    operator delete(v27);
  }
  std::fstream::~fstream(v23);
  if (*(char *)(v21 + 63) < 0)
    operator delete(*v22);
  ctu::SharedSynchronizable<HSFilerRT_Internal>::~SharedSynchronizable(v20);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x24BD2A8EC](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x24BD2AA30](v2);
  return a1;
}

void support::fs::SyncFile::open(support::fs::SyncFile *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN7support2fs8SyncFile4openEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5;
  v1[4] = this;
  ctu::SharedSynchronizable<support::fs::SyncFile>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN7support2fs8SyncFile4openEv_block_invoke(uint64_t a1)
{
  support::fs::SyncFile::open_sync(*(support::fs::SyncFile **)(a1 + 32));
}

void support::fs::SyncFile::open_sync(support::fs::SyncFile *this)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  std::ios_base *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = **((_QWORD **)this + 91);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (_QWORD *)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      v3 = (_QWORD *)*v3;
    v8 = 136315138;
    v9 = v3;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_INFO, "Opening file '%s'", (uint8_t *)&v8, 0xCu);
  }
  if (*((_QWORD *)this + 26))
  {
    v4 = **((_QWORD **)this + 91);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v5 = (_QWORD *)*v5;
      v8 = 136315138;
      v9 = v5;
      _os_log_impl(&dword_24B97E000, v4, OS_LOG_TYPE_INFO, "Skipped open, file '%s' is already open", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    v6 = std::filebuf::open();
    v7 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 8) - 24) + 64);
    if (v6)
      std::ios_base::clear(v7, 0);
    else
      std::ios_base::clear(v7, v7->__rdstate_ | 4);
  }
}

void support::fs::SyncFile::close(support::fs::SyncFile *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN7support2fs8SyncFile5closeEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4_0;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = &__block_descriptor_tmp_10_1;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN7support2fs8SyncFile5closeEv_block_invoke(uint64_t a1)
{
  support::fs::SyncFile::close_sync(*(support::fs::SyncFile **)(a1 + 32));
}

void support::fs::SyncFile::close_sync(support::fs::SyncFile *this)
{
  NSObject *v2;
  _QWORD *v3;
  std::ios_base *v4;
  NSObject *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = **((_QWORD **)this + 91);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (_QWORD *)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      v3 = (_QWORD *)*v3;
    v7 = 136315138;
    v8 = v3;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_INFO, "Closing file '%s'", (uint8_t *)&v7, 0xCu);
  }
  if (*((_QWORD *)this + 26))
  {
    support::fs::SyncFile::flush_sync(this);
    if (!std::filebuf::close())
    {
      v4 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 8) - 24) + 64);
      std::ios_base::clear(v4, v4->__rdstate_ | 4);
    }
  }
  else
  {
    v5 = **((_QWORD **)this + 91);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v6 = (_QWORD *)*v6;
      v7 = 136315138;
      v8 = v6;
      _os_log_impl(&dword_24B97E000, v5, OS_LOG_TYPE_INFO, "Skipped close, file '%s' is not open", (uint8_t *)&v7, 0xCu);
    }
  }
}

void support::fs::SyncFile::flush_sync(support::fs::SyncFile *this)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = **((_QWORD **)this + 91);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (_QWORD *)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      v3 = (_QWORD *)*v3;
    v6 = 136315138;
    v7 = v3;
    _os_log_impl(&dword_24B97E000, v2, OS_LOG_TYPE_INFO, "Flushing file '%s'", (uint8_t *)&v6, 0xCu);
  }
  if (*((_QWORD *)this + 26))
  {
    std::ostream::flush();
  }
  else
  {
    v4 = **((_QWORD **)this + 91);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v5 = (_QWORD *)*v5;
      v6 = 136315138;
      v7 = v5;
      _os_log_impl(&dword_24B97E000, v4, OS_LOG_TYPE_INFO, "Skipped flush, file '%s' is not open", (uint8_t *)&v6, 0xCu);
    }
  }
}

BOOL support::fs::SyncFile::isOpen(support::fs::SyncFile *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v4[5];
  _QWORD *v5;
  _QWORD v6[6];
  _QWORD *v7;
  uint64_t block;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  char *v12;
  _QWORD *v13;
  char v14;

  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK7support2fs8SyncFile6isOpenEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_6_0;
  v4[4] = this;
  v5 = v4;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIU13block_pointerFbvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v6[3] = &__block_descriptor_tmp_11_1;
  v6[4] = (char *)this + 8;
  v6[5] = &v5;
  v7 = v6;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
  {
    v14 = -86;
    block = MEMORY[0x24BDAC760];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_13_1;
    v12 = &v14;
    v13 = &v7;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v14 = -86;
    block = MEMORY[0x24BDAC760];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_12_1;
    v12 = &v14;
    v13 = &v7;
    dispatch_sync(v1, &block);
  }
  return v14 != 0;
}

BOOL ___ZNK7support2fs8SyncFile6isOpenEv_block_invoke(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) != 0;
}

BOOL support::fs::SyncFile::isOpen_sync(support::fs::SyncFile *this)
{
  return *((_QWORD *)this + 26) != 0;
}

void support::fs::SyncFile::~SyncFile(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;

  *this = off_251CC3D70;
  support::fs::SyncFile::close_sync((support::fs::SyncFile *)this);
  this[85] = &unk_251CC2740;
  v2 = (std::__shared_weak_count *)this[93];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = this[82];
  if (v5)
  {
    this[83] = v5;
    operator delete(v5);
  }
  MEMORY[0x24BD2A8EC](this + 11);
  std::iostream::~basic_iostream();
  MEMORY[0x24BD2AA30](this + 62);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v6 = this[4];
  if (v6)
    dispatch_release(v6);
  v7 = this[3];
  if (v7)
    dispatch_release(v7);
  v8 = (std::__shared_weak_count *)this[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

{
  void *v1;

  support::fs::SyncFile::~SyncFile(this);
  operator delete(v1);
}

uint64_t support::fs::SyncFile::getPath(support::fs::SyncFile *this)
{
  return (uint64_t)this + 40;
}

void support::fs::SyncFile::flush(support::fs::SyncFile *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2 || (v3 = *((_QWORD *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 3);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<support::fs::SyncFile>::execute_wrapped<support::fs::SyncFile::flush(void)::$_0>(support::fs::SyncFile::flush(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<support::fs::SyncFile::flush(void)::$_0,dispatch_queue_s *::default_delete<support::fs::SyncFile::flush(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

BOOL support::fs::SyncFile::write_sync(support::fs::SyncFile *this, const void *a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 26);
  if (v3)
  {
    std::ostream::write();
  }
  else
  {
    v4 = **((_QWORD **)this + 91);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v6 = (_QWORD *)*v6;
      v7 = 136315138;
      v8 = v6;
      _os_log_error_impl(&dword_24B97E000, v4, OS_LOG_TYPE_ERROR, "error: Failed to write, file '%s' is not open", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3 != 0;
}

void sub_24B99E8AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL support::fs::SyncFile::write(support::fs::SyncFile *this, const void *a2, uint64_t a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v6[3];
  _QWORD v7[6];
  _QWORD *v8;
  uint64_t block;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  char *v13;
  _QWORD *v14;
  char v15;

  v6[0] = this;
  v6[1] = a2;
  v6[2] = a3;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_5writeEPKvmE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  v7[3] = &__block_descriptor_tmp_14;
  v7[4] = (char *)this + 8;
  v7[5] = v6;
  v8 = v7;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
  {
    v15 = -86;
    block = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v12 = &__block_descriptor_tmp_13_1;
    v13 = &v15;
    v14 = &v8;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    v15 = -86;
    block = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v12 = &__block_descriptor_tmp_12_1;
    v13 = &v15;
    v14 = &v8;
    dispatch_sync(v3, &block);
  }
  return v15 != 0;
}

BOOL support::fs::SyncFile::read_sync(support::fs::SyncFile *this, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 26);
  if (v3)
  {
    std::istream::read();
  }
  else
  {
    v4 = **((_QWORD **)this + 91);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v6 = (_QWORD *)*v6;
      v7 = 136315138;
      v8 = v6;
      _os_log_error_impl(&dword_24B97E000, v4, OS_LOG_TYPE_ERROR, "error: Failed to read, file '%s' is not open", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3 != 0;
}

void sub_24B99EA84(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL support::fs::SyncFile::read(support::fs::SyncFile *this, void *a2, uint64_t a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v6[3];
  _QWORD v7[6];
  _QWORD *v8;
  uint64_t block;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  char *v13;
  _QWORD *v14;
  char v15;

  v6[0] = this;
  v6[1] = a2;
  v6[2] = a3;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_4readEPvmE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v7[3] = &__block_descriptor_tmp_15;
  v7[4] = (char *)this + 8;
  v7[5] = v6;
  v8 = v7;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
  {
    v15 = -86;
    block = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v12 = &__block_descriptor_tmp_13_1;
    v13 = &v15;
    v14 = &v8;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    v15 = -86;
    block = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v12 = &__block_descriptor_tmp_12_1;
    v13 = &v15;
    v14 = &v8;
    dispatch_sync(v3, &block);
  }
  return v15 != 0;
}

uint64_t support::fs::SyncFile::getSize(support::fs::SyncFile *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[6];
  _QWORD *v7;
  uint64_t block;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned __int8 v14;

  v5 = 0;
  v4[0] = this;
  v4[1] = &v5;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_7getSizeEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v6[3] = &__block_descriptor_tmp_16_0;
  v6[4] = (char *)this + 8;
  v6[5] = v4;
  v7 = v6;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
  {
    v14 = -86;
    block = MEMORY[0x24BDAC760];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_13_1;
    v12 = &v14;
    v13 = &v7;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v14 = -86;
    block = MEMORY[0x24BDAC760];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_12_1;
    v12 = &v14;
    v13 = &v7;
    dispatch_sync(v1, &block);
  }
  return v14;
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x24BD2A8EC](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x24BD2AA30);
}

{
  _QWORD *v1;
  void (__cdecl ***v2)(std::fstream *__hidden);

  v1 = a1 + 52;
  v2 = a1 - 2;
  MEMORY[0x24BD2A8EC](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x24BD2AA30](v1);
  operator delete(v2);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x24BD2A8EC](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x24BD2AA30);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x24BD2A8EC](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x24BD2AA30](v1 + 54);
  operator delete(v1);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x24BD2A8EC](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x24BD2AA30](v2);
  operator delete(a1);
}

void std::__shared_ptr_pointer<support::fs::SyncFile *,std::shared_ptr<support::fs::SyncFile> ctu::SharedSynchronizable<support::fs::SyncFile>::make_shared_ptr<support::fs::SyncFile>(support::fs::SyncFile*)::{lambda(support::fs::SyncFile *)#1},std::allocator<support::fs::SyncFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<support::fs::SyncFile *,std::shared_ptr<support::fs::SyncFile> ctu::SharedSynchronizable<support::fs::SyncFile>::make_shared_ptr<support::fs::SyncFile>(support::fs::SyncFile*)::{lambda(support::fs::SyncFile *)#1},std::allocator<support::fs::SyncFile>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<support::fs::SyncFile> ctu::SharedSynchronizable<support::fs::SyncFile>::make_shared_ptr<support::fs::SyncFile>(support::fs::SyncFile*)::{lambda(support::fs::SyncFile*)#1}::operator() const(support::fs::SyncFile*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<support::fs::SyncFile *,std::shared_ptr<support::fs::SyncFile> ctu::SharedSynchronizable<support::fs::SyncFile>::make_shared_ptr<support::fs::SyncFile>(support::fs::SyncFile*)::{lambda(support::fs::SyncFile *)#1},std::allocator<support::fs::SyncFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7support2fs8SyncFileEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7support2fs8SyncFileEE15make_shared_ptrIS3_EENSt3__110shar"
                                "ed_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7support2fs8SyncFileEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7support2fs8SyncFileEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<support::fs::SyncFile> ctu::SharedSynchronizable<support::fs::SyncFile>::make_shared_ptr<support::fs::SyncFile>(support::fs::SyncFile*)::{lambda(support::fs::SyncFile*)#1}::operator() const(support::fs::SyncFile*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<support::fs::SyncFile>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_9_1;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c49_ZTSNSt3__110shared_ptrIKN7support2fs8SyncFileEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void __destroy_helper_block_e8_32b40c49_ZTSNSt3__110shared_ptrIKN7support2fs8SyncFileEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
  else
  {
LABEL_5:
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<support::fs::SyncFile>::execute_wrapped<support::fs::SyncFile::flush(void)::$_0>(support::fs::SyncFile::flush(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<support::fs::SyncFile::flush(void)::$_0,dispatch_queue_s *::default_delete<support::fs::SyncFile::flush(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  support::fs::SyncFile **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(support::fs::SyncFile ***)a1;
  support::fs::SyncFile::flush_sync(**(support::fs::SyncFile ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_24B99F20C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_5writeEPKvmE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  if (v3)
  {
    std::ostream::write();
  }
  else
  {
    v4 = **(NSObject ***)(v2 + 728);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = (_QWORD *)(v2 + 40);
      if (*(char *)(v2 + 63) < 0)
        v6 = (_QWORD *)*v6;
      v7 = 136315138;
      v8 = v6;
      _os_log_error_impl(&dword_24B97E000, v4, OS_LOG_TYPE_ERROR, "error: Failed to write, file '%s' is not open", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3 != 0;
}

void sub_24B99F33C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_4readEPvmE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  if (v3)
  {
    std::istream::read();
  }
  else
  {
    v4 = **(NSObject ***)(v2 + 728);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = (_QWORD *)(v2 + 40);
      if (*(char *)(v2 + 63) < 0)
        v6 = (_QWORD *)*v6;
      v7 = 136315138;
      v8 = v6;
      _os_log_error_impl(&dword_24B97E000, v4, OS_LOG_TYPE_ERROR, "error: Failed to read, file '%s' is not open", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3 != 0;
}

void sub_24B99F424(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL ___ZNK3ctu20SharedSynchronizableIN7support2fs8SyncFileEE20execute_wrapped_syncIZNS3_7getSizeEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  _QWORD *v7;
  uint8_t buf[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  if (v3)
  {
    v16 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14 = v4;
    v15 = v4;
    v12 = v4;
    v13 = v4;
    v10 = v4;
    v11 = v4;
    *(_OWORD *)buf = v4;
    v9 = v4;
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *(_QWORD *)v1[1] = 0;
    std::istream::seekg();
  }
  else
  {
    v5 = **(NSObject ***)(v2 + 728);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = (_QWORD *)(v2 + 40);
      if (*(char *)(v2 + 63) < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_error_impl(&dword_24B97E000, v5, OS_LOG_TYPE_ERROR, "error: Failed to get file size, %s is not open", buf, 0xCu);
    }
  }
  return v3 != 0;
}

uint64_t __cxx_global_var_init_5()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_24B97E000);
  }
  return result;
}

_QWORD *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  _QWORD *result;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0x10uLL);
  *v5 = off_251CC4198;
  v5[1] = this;
  *a2 = v5;
  result = operator new(0x20uLL);
  *result = off_251CC43C0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_24B99F660(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *support::log::delegate::context::context(_QWORD *this, void *a2)
{
  *this = off_251CC4198;
  this[1] = a2;
  return this;
}

{
  *this = off_251CC4198;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)result = &unk_251CC41B8;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(this + 24))
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)a2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(a2 + 8) = v2;
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 16);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(_QWORD *)result = &off_251CC41E8;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_251CC41E8;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(_QWORD *)this = &off_251CC41E8;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

{
  *(_QWORD *)this = &off_251CC41E8;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, _QWORD *a4)
{
  std::string *v7;
  const char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type __s[23];
  char v17;
  std::string v18;

  *(_QWORD *)a1 = off_251CC4200;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v17 = 12;
  strcpy(__s, ".log_manager");
  v7 = std::string::append(&v18, __s, 0xCuLL);
  v8 = (const char *)(a1 + 72);
  v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_9:
  v8 = *(const char **)v8;
LABEL_4:
  *(_QWORD *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(_QWORD *)(a1 + 104) = &off_251CC41E8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = a4[2];
  if (v10)
  {
    v12 = *a4;
    v11 = (uint64_t *)a4[1];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*a4 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v14 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(v14 + 8) = v11;
    *v11 = v14;
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(v12 + 8) = a1 + 120;
    *(_QWORD *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_24B99F8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_24B99FA70(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_24B99FA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1;
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = operator new(0x18uLL);
  v6 = *a2;
  *a2 = 0;
  v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  v5[2] = v6;
  *v5 = v7;
  *(_QWORD *)(v7 + 8) = v5;
  *v3 = v5;
  ++v3[2];
  std::mutex::unlock(v4);
}

void sub_24B99FBA4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_251CC4200;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_251CC4200;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_251CC4200;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void sub_24B99FD9C(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_24B99FDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_251CC44A8;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B99FF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_251CC44A8;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_24B9A0064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  std::mutex *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      v7 = "???";
      if (a2 > 6)
        goto LABEL_4;
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        v8 = "???";
LABEL_7:
        v9 = 136315394;
        v10 = v7;
        v11 = 2080;
        v12 = v8;
        _os_log_impl(&dword_24B97E000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(_BYTE *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::buffer::borrow(support::log::buffer *this)
{
  char *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v24;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_2579B8CF8)
    goto LABEL_2;
  v1 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = off_251CC4410;
  *((_QWORD *)v1 + 3) = off_251CC4460;
  v2 = (uint64_t)(v1 + 24);
  *((_QWORD *)v1 + 4) = 850045863;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 11) = 0;
  *((_QWORD *)v1 + 12) = v1 + 104;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v3 = (std::__shared_weak_count *)off_2579B8D00;
  qword_2579B8CF8 = (uint64_t)(v1 + 24);
  off_2579B8D00 = v1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
LABEL_2:
    v2 = qword_2579B8CF8;
    v1 = (char *)off_2579B8D00;
    v24 = (std::__shared_weak_count *)off_2579B8D00;
    if (!off_2579B8D00)
      goto LABEL_12;
    goto LABEL_10;
  }
  v24 = (std::__shared_weak_count *)v1;
LABEL_10:
  v6 = (unint64_t *)(v1 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v8 = *(_QWORD *)(v2 + 136);
  if (v8)
  {
    v9 = (_QWORD *)(v2 + 128);
    v10 = *(void ***)(v2 + 104);
    v11 = (*(_QWORD **)((char *)v10 + ((*(_QWORD *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(v2 + 128) & 0x1FFLL];
    v12 = *(_QWORD *)(v2 + 128) + 1;
    *(_QWORD *)(v2 + 128) = v12;
    *(_QWORD *)(v2 + 136) = v8 - 1;
    if (v12 >= 0x400)
    {
      operator delete(*v10);
      *(_QWORD *)(v2 + 104) += 8;
      v13 = -512;
LABEL_26:
      *v9 += v13;
    }
  }
  else
  {
    v14 = malloc(0x400uLL);
    v11 = (uint64_t)v14;
    if (v14)
    {
      v16 = (uint64_t **)(v2 + 80);
      v15 = *(uint64_t **)(v2 + 80);
      if (!v15)
      {
        v17 = (uint64_t **)(v2 + 80);
LABEL_23:
        v19 = (uint64_t *)operator new(0x28uLL);
        v19[4] = v11;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v17;
        *v16 = v19;
        v20 = **(_QWORD **)(v2 + 72);
        if (v20)
        {
          *(_QWORD *)(v2 + 72) = v20;
          v19 = *v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v19);
        v9 = (_QWORD *)(v2 + 88);
        v13 = 1;
        goto LABEL_26;
      }
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = v15[4];
          if ((unint64_t)v14 >= v18)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_23;
        }
        if (v18 >= (unint64_t)v14)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_23;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v11;
}

void sub_24B9A0430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_24B9A044C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A0468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::mutex *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 *v146;
  _OWORD *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  void *exception;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_2579B8CF8)
  {
    v3 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = off_251CC4410;
    *((_QWORD *)v3 + 3) = off_251CC4460;
    v4 = (uint64_t)(v3 + 24);
    *((_QWORD *)v3 + 4) = 850045863;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 11) = 0;
    *((_QWORD *)v3 + 12) = v3 + 104;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    v5 = (std::__shared_weak_count *)off_2579B8D00;
    qword_2579B8CF8 = (uint64_t)(v3 + 24);
    off_2579B8D00 = v3;
    if (!v5)
    {
LABEL_9:
      v8 = (unint64_t *)(v3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v4 = qword_2579B8CF8;
  v3 = (char *)off_2579B8D00;
  if (off_2579B8D00)
    goto LABEL_9;
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v12 = *(_QWORD **)(v4 + 80);
  v11 = v4 + 80;
  v10 = v12;
  if (!v12)
    goto LABEL_22;
  v13 = (_QWORD *)v11;
  do
  {
    v14 = v10[4];
    v15 = v14 >= (unint64_t)a2;
    if (v14 >= (unint64_t)a2)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)v11 || v13[4] > (unint64_t)a2)
LABEL_22:
    v13 = (_QWORD *)v11;
  if (!v3)
    goto LABEL_27;
  v17 = (unint64_t *)(v3 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_27:
    if (v13 != (_QWORD *)v11)
      goto LABEL_28;
LABEL_32:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v13 == (_QWORD *)v11)
    goto LABEL_32;
LABEL_28:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_2579B8CF8)
    goto LABEL_29;
  v19 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_251CC4410;
  *((_QWORD *)v19 + 3) = off_251CC4460;
  *((_QWORD *)v19 + 4) = 850045863;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 13) = 0;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 12) = v19 + 104;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  v20 = (std::__shared_weak_count *)off_2579B8D00;
  qword_2579B8CF8 = (uint64_t)(v19 + 24);
  off_2579B8D00 = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_29:
    v19 = (char *)off_2579B8D00;
    v153 = (std::__shared_weak_count *)off_2579B8D00;
    if (!off_2579B8D00)
      goto LABEL_41;
    goto LABEL_39;
  }
  v153 = (std::__shared_weak_count *)v19;
LABEL_39:
  v23 = (unint64_t *)(v19 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_41:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_2579B8CF8)
  {
    v25 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = off_251CC4410;
    *((_QWORD *)v25 + 3) = off_251CC4460;
    v26 = (uint64_t)(v25 + 24);
    *((_QWORD *)v25 + 4) = 850045863;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_QWORD *)v25 + 14) = 0;
    *((_QWORD *)v25 + 13) = 0;
    *((_QWORD *)v25 + 11) = 0;
    *((_QWORD *)v25 + 12) = v25 + 104;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    v27 = (std::__shared_weak_count *)off_2579B8D00;
    qword_2579B8CF8 = (uint64_t)(v25 + 24);
    off_2579B8D00 = v25;
    if (!v27)
    {
      v154 = (std::__shared_weak_count *)v25;
LABEL_50:
      v30 = (unint64_t *)(v25 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      goto LABEL_52;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v26 = qword_2579B8CF8;
  v25 = (char *)off_2579B8D00;
  v154 = (std::__shared_weak_count *)off_2579B8D00;
  if (off_2579B8D00)
    goto LABEL_50;
LABEL_52:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v32 = (std::mutex *)(v26 + 8);
  std::mutex::lock((std::mutex *)(v26 + 8));
  v33 = *(_QWORD **)(v26 + 80);
  if (!v33)
    goto LABEL_186;
  v34 = v26 + 80;
  do
  {
    v35 = v33[4];
    v36 = v35 >= (unint64_t)a2;
    if (v35 >= (unint64_t)a2)
      v37 = v33;
    else
      v37 = v33 + 1;
    if (v36)
      v34 = (uint64_t)v33;
    v33 = (_QWORD *)*v37;
  }
  while (*v37);
  if (v34 == v26 + 80 || *(_QWORD *)(v34 + 32) > (unint64_t)a2)
  {
LABEL_186:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x24BD2A880](exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v38 = *(char **)(v26 + 112);
  v39 = *(char **)(v26 + 104);
  v40 = v38 - v39;
  if (v38 == v39)
    v41 = 0;
  else
    v41 = ((v38 - v39) << 6) - 1;
  v43 = *(_QWORD *)(v26 + 128);
  v42 = *(_QWORD *)(v26 + 136);
  v44 = v42 + v43;
  if (v41 == v42 + v43)
  {
    if (v43 >= 0x200)
    {
      *(_QWORD *)(v26 + 128) = v43 - 512;
      v45 = v39 + 8;
      v46 = *(_QWORD *)v39;
      *(_QWORD *)(v26 + 104) = v39 + 8;
      if (v38 != *(char **)(v26 + 120))
      {
LABEL_157:
        *(_QWORD *)v38 = v46;
        goto LABEL_158;
      }
      v47 = *(char **)(v26 + 96);
      if (v45 > v47)
      {
        v48 = (v45 - v47) >> 3;
        if (v48 >= -1)
          v49 = v48 + 1;
        else
          v49 = v48 + 2;
        v50 = v49 >> 1;
        v51 = -v50;
        v52 = &v45[-8 * v50];
        v53 = v38 - v45;
        if (v38 != v45)
        {
          memmove(&v45[-8 * v50], v45, v38 - v45);
          v38 = *(char **)(v26 + 104);
        }
        v54 = &v38[8 * v51];
        v38 = &v52[v53];
        *(_QWORD *)(v26 + 104) = v54;
        *(_QWORD *)(v26 + 112) = &v52[v53];
        goto LABEL_157;
      }
      if (v38 == v47)
        v66 = 1;
      else
        v66 = (v38 - v47) >> 2;
      if (!(v66 >> 61))
      {
        v67 = (char *)operator new(8 * v66);
        v68 = &v67[8 * (v66 >> 2)];
        v70 = v38 - v45;
        v69 = v38 == v45;
        v38 = v68;
        if (v69)
          goto LABEL_155;
        v38 = &v68[v70 & 0xFFFFFFFFFFFFFFF8];
        v71 = v70 - 8;
        if (v71 >= 0x38)
        {
          v123 = &v67[8 * (v66 >> 2)];
          v72 = v123;
          if ((unint64_t)(v123 - v45) >= 0x20)
          {
            v124 = (v71 >> 3) + 1;
            v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v68[v125];
            v45 += v125;
            v126 = (__int128 *)(v39 + 24);
            v127 = v123 + 16;
            v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *v126;
              *(v127 - 1) = *(v126 - 1);
              *v127 = v129;
              v126 += 2;
              v127 += 2;
              v128 -= 4;
            }
            while (v128);
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_155:
              *(_QWORD *)(v26 + 96) = v67;
              *(_QWORD *)(v26 + 104) = v68;
              *(_QWORD *)(v26 + 112) = v38;
              *(_QWORD *)(v26 + 120) = &v67[8 * v66];
              if (v47)
              {
                operator delete(v47);
                v38 = *(char **)(v26 + 112);
              }
              goto LABEL_157;
            }
          }
        }
        else
        {
          v72 = &v67[8 * (v66 >> 2)];
        }
        do
        {
          v130 = *(_QWORD *)v45;
          v45 += 8;
          *(_QWORD *)v72 = v130;
          v72 += 8;
        }
        while (v72 != v38);
        goto LABEL_155;
      }
LABEL_188:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v55 = v40 >> 3;
    v56 = *(char **)(v26 + 120);
    v57 = *(char **)(v26 + 96);
    if (v40 >> 3 >= (unint64_t)((v56 - v57) >> 3))
    {
      if (v56 == v57)
        v60 = 1;
      else
        v60 = (v56 - v57) >> 2;
      if (!(v60 >> 61))
      {
        v61 = (char *)operator new(8 * v60);
        v62 = operator new(0x1000uLL);
        v63 = &v61[8 * v55];
        v64 = &v61[8 * v60];
        if (v55 == v60)
        {
          v152 = v62;
          if (v40 < 1)
          {
            if (v38 == v39)
              v74 = 1;
            else
              v74 = v40 >> 2;
            if (v74 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = (char *)operator new(8 * v74);
            v64 = &v63[8 * v74];
            operator delete(v61);
            v39 = *(char **)(v26 + 104);
            v38 = *(char **)(v26 + 112);
            v61 = v63;
          }
          else
          {
            v65 = v55 + 2;
            if (v55 >= -1)
              v65 = v55 + 1;
            v63 -= 8 * (v65 >> 1);
          }
          v62 = v152;
        }
        *(_QWORD *)v63 = v62;
        v75 = v63 + 8;
        if (v38 != v39)
        {
          do
          {
            if (v63 == v61)
            {
              if (v75 >= v64)
              {
                if (v64 == v61)
                  v82 = 1;
                else
                  v82 = (v64 - v61) >> 2;
                if (v82 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v83 = (char *)operator new(8 * v82);
                v84 = v83;
                v85 = (v82 + 3) >> 2;
                v63 = &v83[8 * v85];
                v86 = v75 - v61;
                v69 = v75 == v61;
                v75 = v63;
                if (!v69)
                {
                  v75 = &v63[v86 & 0xFFFFFFFFFFFFFFF8];
                  v87 = v86 - 8;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if (v87 < 0x38)
                    goto LABEL_192;
                  v90 = 8 * v85;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if ((unint64_t)(v88 - v61) < 0x20)
                    goto LABEL_192;
                  v91 = (v87 >> 3) + 1;
                  v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                  v88 = &v63[v92];
                  v89 = &v61[v92];
                  v93 = (__int128 *)(v61 + 16);
                  v94 = &v83[v90 + 16];
                  v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v96 = *v93;
                    *((_OWORD *)v94 - 1) = *(v93 - 1);
                    *(_OWORD *)v94 = v96;
                    v93 += 2;
                    v94 += 32;
                    v95 -= 4;
                  }
                  while (v95);
                  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_192:
                    do
                    {
                      v97 = *(_QWORD *)v89;
                      v89 += 8;
                      *(_QWORD *)v88 = v97;
                      v88 += 8;
                    }
                    while (v88 != v75);
                  }
                }
                v64 = &v83[8 * v82];
                operator delete(v61);
                v61 = v84;
              }
              else
              {
                v78 = (v64 - v75) >> 3;
                if (v78 >= -1)
                  v79 = v78 + 1;
                else
                  v79 = v78 + 2;
                v80 = v79 >> 1;
                v63 = &v61[8 * (v79 >> 1)];
                v81 = v61;
                if (v75 != v61)
                {
                  memmove(v63, v61, v75 - v61);
                  v81 = v75;
                }
                v75 = (char *)v81 + 8 * v80;
              }
            }
            v77 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v63 - 1) = v77;
            v63 -= 8;
          }
          while (v38 != *(char **)(v26 + 104));
        }
        v76 = *(void **)(v26 + 96);
        *(_QWORD *)(v26 + 96) = v61;
        *(_QWORD *)(v26 + 104) = v63;
        *(_QWORD *)(v26 + 112) = v75;
        *(_QWORD *)(v26 + 120) = v64;
        v32 = (std::mutex *)(v26 + 8);
        if (v76)
          operator delete(v76);
        goto LABEL_159;
      }
      goto LABEL_188;
    }
    v58 = operator new(0x1000uLL);
    v59 = v58;
    if (v56 != v38)
    {
      *(_QWORD *)v38 = v58;
LABEL_158:
      *(_QWORD *)(v26 + 112) += 8;
LABEL_159:
      v39 = *(char **)(v26 + 104);
      v42 = *(_QWORD *)(v26 + 136);
      v44 = *(_QWORD *)(v26 + 128) + v42;
      goto LABEL_160;
    }
    if (v39 == v57)
    {
      if (v38 == v39)
        v98 = 1;
      else
        v98 = (v56 - v39) >> 2;
      if (v98 >> 61)
        goto LABEL_188;
      v99 = (char *)operator new(8 * v98);
      v100 = (v98 + 3) >> 2;
      v73 = &v99[8 * v100];
      v101 = v73;
      if (v38 != v39)
      {
        v101 = &v73[8 * v55];
        v102 = &v99[8 * v100];
        v103 = v39;
        if ((unint64_t)(v40 - 8) < 0x38)
          goto LABEL_193;
        v104 = &v99[8 * v100];
        v102 = v104;
        v103 = v39;
        if ((unint64_t)(v104 - v39) < 0x20)
          goto LABEL_193;
        v105 = ((unint64_t)(v40 - 8) >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v73[v106];
        v103 = &v39[v106];
        v107 = (__int128 *)(v39 + 16);
        v108 = v104 + 16;
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_193:
          do
          {
            v111 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v102 = v111;
            v102 += 8;
          }
          while (v102 != v101);
        }
      }
      *(_QWORD *)(v26 + 96) = v99;
      *(_QWORD *)(v26 + 104) = v73;
      *(_QWORD *)(v26 + 112) = v101;
      *(_QWORD *)(v26 + 120) = &v99[8 * v98];
      if (v39)
      {
        operator delete(v39);
        v73 = *(char **)(v26 + 104);
      }
    }
    else
    {
      v73 = v39;
    }
    *((_QWORD *)v73 - 1) = v59;
    v112 = *(char **)(v26 + 104);
    v113 = *(char **)(v26 + 112);
    *(_QWORD *)(v26 + 104) = v112 - 8;
    v114 = *((_QWORD *)v112 - 1);
    *(_QWORD *)(v26 + 104) = v112;
    if (v113 != *(char **)(v26 + 120))
    {
LABEL_142:
      *(_QWORD *)v113 = v114;
      goto LABEL_158;
    }
    v115 = *(char **)(v26 + 96);
    if (v112 > v115)
    {
      v116 = (v112 - v115) >> 3;
      if (v116 >= -1)
        v117 = v116 + 1;
      else
        v117 = v116 + 2;
      v118 = v117 >> 1;
      v119 = -v118;
      v120 = &v112[-8 * v118];
      v121 = v113 - v112;
      if (v121)
      {
        memmove(&v112[-8 * v118], v112, v121);
        v112 = *(char **)(v26 + 104);
      }
      v122 = &v120[v121];
      *(_QWORD *)(v26 + 104) = &v112[8 * v119];
      *(_QWORD *)(v26 + 112) = v122;
      *(_QWORD *)v122 = v114;
      goto LABEL_158;
    }
    if (v113 == v115)
      v136 = 1;
    else
      v136 = (v113 - v115) >> 2;
    if (v136 >> 61)
      goto LABEL_188;
    v137 = (char *)operator new(8 * v136);
    v138 = &v137[8 * (v136 >> 2)];
    v139 = v113 - v112;
    v69 = v113 == v112;
    v113 = v138;
    if (!v69)
    {
      v113 = &v138[v139 & 0xFFFFFFFFFFFFFFF8];
      v140 = v139 - 8;
      if (v140 < 0x38)
      {
        v141 = &v137[8 * (v136 >> 2)];
        do
        {
LABEL_183:
          v150 = *(_QWORD *)v112;
          v112 += 8;
          *(_QWORD *)v141 = v150;
          v141 += 8;
        }
        while (v141 != v113);
        goto LABEL_184;
      }
      v142 = &v137[8 * (v136 >> 2)];
      v141 = v142;
      if ((unint64_t)(v142 - v112) < 0x20)
        goto LABEL_183;
      v143 = (v140 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v141 = &v138[v144];
      v145 = &v112[v144];
      v146 = (__int128 *)(v112 + 16);
      v147 = v142 + 16;
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v149 = *v146;
        *(v147 - 1) = *(v146 - 1);
        *v147 = v149;
        v146 += 2;
        v147 += 2;
        v148 -= 4;
      }
      while (v148);
      v112 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_183;
    }
LABEL_184:
    *(_QWORD *)(v26 + 96) = v137;
    *(_QWORD *)(v26 + 104) = v138;
    *(_QWORD *)(v26 + 112) = v113;
    *(_QWORD *)(v26 + 120) = &v137[8 * v136];
    if (v115)
    {
      operator delete(v115);
      v113 = *(char **)(v26 + 112);
    }
    goto LABEL_142;
  }
LABEL_160:
  *(_QWORD *)(*(_QWORD *)&v39[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF)) = a2;
  *(_QWORD *)(v26 + 136) = v42 + 1;
  std::mutex::unlock(v32);
  if (!v154)
    goto LABEL_164;
  v131 = (unint64_t *)&v154->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    v133 = v153;
    if (!v153)
      return;
  }
  else
  {
LABEL_164:
    v133 = v153;
    if (!v153)
      return;
  }
  v134 = (unint64_t *)&v133->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
  }
}

void sub_24B9A0FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v5 = (std::mutex *)(a1 + 8);
    v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      v9 = *(_QWORD *)(a1 + 120);
      *v7 = v9;
      *(_QWORD *)(v9 + 8) = v7;
      *(_QWORD *)(a1 + 120) = v7;
      ++*(_QWORD *)(a1 + 136);
      std::mutex::unlock(v5);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_24B9A1114(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 112) = 3;
  if (*((_QWORD *)this + 17))
  {
    v3 = (char *)this + 120;
    v4 = *((_QWORD *)this + 15);
    v5 = (char *)*((_QWORD *)this + 16);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        v7 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v3);
    }
  }
  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *this, const support::log::details *a2, char *a3)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 120;
  v5 = *((_QWORD *)this + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)this + 120))
  {
    do
    {
      this = (support::log::manager *)(***(uint64_t (****)(_QWORD, const support::log::details *, char *))(v5 + 16))(*(_QWORD *)(v5 + 16), a2, a3);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }
  support::log::manager::release_log_buffer(this, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x20uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1] = v6;
    v4[2] = v7;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_BYTE *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    *v5 = &off_251CC4230;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    v4[1] = v6;
    v4[2] = 0;
    *((_BYTE *)v4 + 24) = 1;
    *v4 = &off_251CC4230;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_251CC41B8;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_251CC4230;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_251CC41B8;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_251CC4230;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  double result;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v3 = operator new(0x20uLL);
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)v3 = &off_251CC4230;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(support::log::stdout_delegate *this, const support::log::details *a2, const char *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[3];

  if (a3)
  {
    memset(v8, 170, sizeof(v8));
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 24))(v8);
    if (LOBYTE(v8[2]))
    {
      if (!v8[1])
        return;
      v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v8[1]);
      if (v4)
      {
        v5 = v4;
        if (v8[0])
          fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s\n", a3);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s\n", a3);
    }
    if (LOBYTE(v8[2]))
    {
      if (v8[1])
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8[1]);
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)(support::log::manager::parameters *__hidden);
  char v12;
  std::string __p;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  v10 = 0;
  v11 = &off_251CC41E8;
  v12 = 3;
  v8 = (uint64_t)&v8;
  v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    v2 = v8;
    v3 = v9;
    v4 = *v9;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_251CC4260;
  return this;
}

void sub_24B9A1620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::descriptor::descriptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t descriptor_instance;

  *a1 = off_251CC4290;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = off_251CC4290;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  const char *v18;
  const char *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  void *v29;
  void **v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  const void **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void **v39;
  void **v40;
  char *v41;
  std::string *v42;
  float v43;
  _QWORD *v44;
  _QWORD *v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t prime;
  void *v50;
  void *v51;
  uint64_t v52;
  _QWORD **v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *i;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v71;
  std::string v72;
  std::string v73;
  void *__p[3];
  std::string __dst;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_0))
  {
    *(_OWORD *)&qword_2579B8E90 = 0u;
    *(_OWORD *)&qword_2579B8E80 = 0u;
    dword_2579B8EA0 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_0);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 1;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6 + 1;
    if (!v6)
      goto LABEL_16;
  }
  if (v5 >= 0)
    v11 = (const std::string::value_type *)a1;
  else
    v11 = *(const std::string::value_type **)a1;
  memmove(p_dst, v11, v6);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 44;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&__dst, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
      goto LABEL_156;
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  v17 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v73 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v72 = *(std::string *)a2;
  *(_QWORD *)v17 = off_251CC4390;
  v18 = v17 + 8;
  *(std::string *)(v17 + 8) = v73;
  memset(&v73, 0, sizeof(v73));
  *(std::string *)(v17 + 32) = v72;
  memset(&v72, 0, sizeof(v72));
  if (v17[31] < 0)
  {
    v18 = *(const char **)v18;
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  else
  {
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  v19 = *(const char **)v19;
LABEL_34:
  *((_QWORD *)v17 + 7) = os_log_create(v18, v19);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = (uint64_t *)__p;
  else
    v20 = (uint64_t *)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v21 = HIBYTE(__p[2]);
  else
    v21 = (unint64_t)__p[1];
  v22 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v20, v21);
  v23 = v22;
  v24 = qword_2579B8E88;
  if (qword_2579B8E88)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2579B8E88);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = v22;
      if (v22 >= qword_2579B8E88)
        v26 = v22 % qword_2579B8E88;
    }
    else
    {
      v26 = (qword_2579B8E88 - 1) & v22;
    }
    v27 = *(uint64_t ***)(qword_2579B8E80 + 8 * v26);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        if (SHIBYTE(__p[2]) >= 0)
          v29 = (void *)HIBYTE(__p[2]);
        else
          v29 = __p[1];
        if (SHIBYTE(__p[2]) >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            v36 = v28[1];
            if (v36 == v23)
            {
              v37 = *((unsigned __int8 *)v28 + 39);
              if ((v37 & 0x80u) == 0)
                v38 = (void *)*((unsigned __int8 *)v28 + 39);
              else
                v38 = (void *)v28[3];
              if (v38 == v29)
              {
                v39 = (const void **)(v28 + 2);
                if ((v37 & 0x80) != 0)
                {
                  if (!memcmp(*v39, v30, v28[3]))
                    goto LABEL_154;
                }
                else
                {
                  if (!*((_BYTE *)v28 + 39))
                    goto LABEL_154;
                  v40 = v30;
                  while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v40)
                  {
                    v39 = (const void **)((char *)v39 + 1);
                    v40 = (void **)((char *)v40 + 1);
                    if (!--v37)
                      goto LABEL_154;
                  }
                }
              }
            }
            else if ((v36 & (v24 - 1)) != v26)
            {
              goto LABEL_90;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_90;
          }
        }
        do
        {
          v31 = v28[1];
          if (v31 == v23)
          {
            v32 = *((unsigned __int8 *)v28 + 39);
            if ((v32 & 0x80u) == 0)
              v33 = (void *)*((unsigned __int8 *)v28 + 39);
            else
              v33 = (void *)v28[3];
            if (v33 == v29)
            {
              v34 = (const void **)(v28 + 2);
              if ((v32 & 0x80) != 0)
              {
                if (!memcmp(*v34, v30, v28[3]))
                  goto LABEL_154;
              }
              else
              {
                if (!*((_BYTE *)v28 + 39))
                  goto LABEL_154;
                v35 = v30;
                while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v35)
                {
                  v34 = (const void **)((char *)v34 + 1);
                  v35 = (void **)((char *)v35 + 1);
                  if (!--v32)
                    goto LABEL_154;
                }
              }
            }
          }
          else
          {
            if (v31 >= v24)
              v31 %= v24;
            if (v31 != v26)
              break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    v26 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  v41 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_2579B8E90;
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = v23;
  v42 = (std::string *)(v41 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v42, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v41 + 4) = __p[2];
  }
  *((_QWORD *)v41 + 5) = v17;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  v43 = (float)(unint64_t)(qword_2579B8E98 + 1);
  if (!v24 || (float)(*(float *)&dword_2579B8EA0 * (float)v24) < v43)
  {
    v46 = 1;
    if (v24 >= 3)
      v46 = (v24 & (v24 - 1)) != 0;
    v47 = v46 | (2 * v24);
    v48 = vcvtps_u32_f32(v43 / *(float *)&dword_2579B8EA0);
    if (v47 <= v48)
      prime = v48;
    else
      prime = v47;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = qword_2579B8E88;
    if (prime > qword_2579B8E88)
      goto LABEL_107;
    if (prime >= qword_2579B8E88)
      goto LABEL_140;
    v60 = vcvtps_u32_f32((float)(unint64_t)qword_2579B8E98 / *(float *)&dword_2579B8EA0);
    if ((unint64_t)qword_2579B8E88 < 3
      || (v61 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2579B8E88), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
    {
      v60 = std::__next_prime(v60);
    }
    else
    {
      v62 = 1 << -(char)__clz(v60 - 1);
      if (v60 >= 2)
        v60 = v62;
    }
    if (prime <= v60)
      prime = v60;
    if (prime >= v24)
    {
      v24 = qword_2579B8E88;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v50 = operator new(8 * prime);
        v51 = (void *)qword_2579B8E80;
        qword_2579B8E80 = (uint64_t)v50;
        if (v51)
          operator delete(v51);
        v52 = 0;
        qword_2579B8E88 = prime;
        do
          *(_QWORD *)(qword_2579B8E80 + 8 * v52++) = 0;
        while (prime != v52);
        v53 = (_QWORD **)qword_2579B8E90;
        if (!qword_2579B8E90)
          goto LABEL_139;
        v54 = *(_QWORD *)(qword_2579B8E90 + 8);
        v55 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v56 = v54 & v55;
          *(_QWORD *)(qword_2579B8E80 + 8 * v56) = &qword_2579B8E90;
          for (i = *v53; *v53; i = *v53)
          {
            v58 = i[1] & v55;
            if (v58 == v56)
            {
              v53 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(qword_2579B8E80 + 8 * v58))
            {
              *v53 = (_QWORD *)*i;
              v59 = 8 * v58;
              *i = **(_QWORD **)(qword_2579B8E80 + v59);
              **(_QWORD **)(qword_2579B8E80 + v59) = i;
            }
            else
            {
              *(_QWORD *)(qword_2579B8E80 + 8 * v58) = v53;
              v53 = (_QWORD **)i;
              v56 = v58;
            }
          }
LABEL_139:
          v24 = prime;
          goto LABEL_140;
        }
        if (v54 >= prime)
          v54 %= prime;
        *(_QWORD *)(qword_2579B8E80 + 8 * v54) = &qword_2579B8E90;
        v63 = *v53;
        if (!*v53)
          goto LABEL_139;
        while (1)
        {
          v65 = v63[1];
          if (v65 >= prime)
            v65 %= prime;
          if (v65 == v54)
            goto LABEL_133;
          if (*(_QWORD *)(qword_2579B8E80 + 8 * v65))
          {
            *v53 = (_QWORD *)*v63;
            v64 = 8 * v65;
            *v63 = **(_QWORD **)(qword_2579B8E80 + v64);
            **(_QWORD **)(qword_2579B8E80 + v64) = v63;
            v63 = v53;
LABEL_133:
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            if (!v63)
              goto LABEL_139;
          }
          else
          {
            *(_QWORD *)(qword_2579B8E80 + 8 * v65) = v53;
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            v54 = v65;
            if (!v63)
              goto LABEL_139;
          }
        }
      }
      v71 = (void *)qword_2579B8E80;
      qword_2579B8E80 = 0;
      if (v71)
        operator delete(v71);
      v24 = 0;
      qword_2579B8E88 = 0;
    }
LABEL_140:
    v66 = v24 - 1;
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24)
      {
        v26 = v23 % v24;
        v44 = *(_QWORD **)(qword_2579B8E80 + 8 * (v23 % v24));
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
      else
      {
        v26 = v23;
        v44 = *(_QWORD **)(qword_2579B8E80 + 8 * v23);
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
    }
    else
    {
      v26 = v66 & v23;
      v44 = *(_QWORD **)(qword_2579B8E80 + 8 * (v66 & v23));
      v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
      if (v44)
        goto LABEL_96;
    }
LABEL_142:
    *v45 = qword_2579B8E90;
    qword_2579B8E90 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(qword_2579B8E80 + 8 * v26) = &qword_2579B8E90;
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_)
    {
      v67 = *(_QWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v67 >= v24)
          v67 %= v24;
      }
      else
      {
        v67 &= v24 - 1;
      }
      *(_QWORD *)(qword_2579B8E80 + 8 * v67) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  v44 = *(_QWORD **)(qword_2579B8E80 + 8 * v26);
  v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
  if (!v44)
    goto LABEL_142;
LABEL_96:
  *v45 = *v44;
  *v44 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_2579B8E98;
LABEL_154:
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v68)
        goto LABEL_157;
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v73.__r_.__value_.__l.__data_);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v68)
    goto LABEL_162;
LABEL_157:
  v69 = v68[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v69;
}

void sub_24B9A1F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)&a29);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t descriptor_instance;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;

  *a1 = &unk_251CC2740;
  *(_OWORD *)v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_251CC4290;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v16, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v16[0]);
    if (a4)
      goto LABEL_4;
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_2579B8D48)
    {
      v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = off_251CC44F8;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      v8 = (std::__shared_weak_count *)off_2579B8D50;
      qword_2579B8D48 = (uint64_t)(v7 + 3);
      off_2579B8D50 = v7;
      if (!v8)
        goto LABEL_15;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_2579B8D48;
    v7 = off_2579B8D50;
    if (!off_2579B8D50)
    {
LABEL_17:
      pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
      a1[7] = a4;
      a1[8] = v7;
      goto LABEL_18;
    }
LABEL_15:
    v11 = v7 + 1;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    goto LABEL_6;
LABEL_3:
  if (!a4)
    goto LABEL_7;
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_18:
  a1[9] = a4;
  return a1;
}

void sub_24B9A2248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t descriptor_instance;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  *a1 = &unk_251CC2740;
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_251CC4290;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v14, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v14[0]);
    v7 = *a4;
    v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_6;
LABEL_3:
  v7 = *a4;
  v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (!v8)
  {
LABEL_4:
    a1[9] = v7;
    return a1;
  }
LABEL_7:
  v10 = (unint64_t *)(v8 + 8);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  a1[9] = a1[7];
  return a1;
}

void sub_24B9A23BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_24B9A24A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_24B9A2580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &unk_251CC41B8;
  if (*((_BYTE *)this + 24))
  {
    v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v1)
      std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &unk_251CC41B8;
  if (*((_BYTE *)this + 24))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_251CC4200;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_251CC4200;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(_QWORD *a1)
{
  _BYTE *v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v1 = a1;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  v6 = qword_2579B8E88;
  if (!qword_2579B8E88)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_2579B8E88);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= qword_2579B8E88)
      v9 = v5 % qword_2579B8E88;
  }
  else
  {
    v9 = (qword_2579B8E88 - 1) & v5;
  }
  v11 = *(uint64_t ***)(qword_2579B8E80 + 8 * v9);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = v1[23];
      if (v13 >= 0)
        v14 = v1[23];
      else
        v14 = *((_QWORD *)v1 + 1);
      if (v13 < 0)
        v1 = *(_BYTE **)v1;
      if (v8.u32[0] < 2uLL)
      {
        v15 = qword_2579B8E88 - 1;
        while (1)
        {
          v20 = v12[1];
          if (v20 == v7)
          {
            v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0)
              v22 = *((unsigned __int8 *)v12 + 39);
            else
              v22 = v12[3];
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23)
                    return v12;
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
      while (1)
      {
        v16 = v12[1];
        if (v16 == v7)
        {
          v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0)
            v18 = *((unsigned __int8 *)v12 + 39);
          else
            v18 = v12[3];
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3]))
                return v12;
            }
            else
            {
              if (!*((_BYTE *)v12 + 39))
                return v12;
              v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19)
                  return v12;
              }
            }
          }
        }
        else
        {
          if (v16 >= v6)
            v16 %= v6;
          if (v16 != v9)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = off_251CC4390;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  *this = off_251CC4390;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1]);
    operator delete(this);
    return;
  }
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9AC261)
    return a1 + 24;
  if (((v3 & 0x800000024B9AC261 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9AC261))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9AC261 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CC4410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CC4410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_251CC4460;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_251CC4460;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<char *>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<char *>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<char *>::destroy(*a1);
    std::__tree<char *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9AC3EDLL)
    return a1 + 24;
  if (((v3 & 0x800000024B9AC3EDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9AC3EDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9AC3EDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_251CC44F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_251CC44F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_6()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

uint64_t HSFilerRT_Internal_INT::Session_INT::Session_INT(uint64_t a1, uint64_t *a2, int a3, char a4, dispatch_object_t *a5)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a5;
  if (*a5)
    dispatch_retain(*a5);
  *(_QWORD *)a1 = off_251CC2828;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = v12;
  if (v12)
  {
    dispatch_retain(v12);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 112) = a4;
    *(_WORD *)(a1 + 113) = 0;
    dispatch_release(v12);
    if (!v8)
      goto LABEL_17;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 112) = a4;
    *(_WORD *)(a1 + 113) = 0;
    if (!v8)
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v8->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  *(_QWORD *)a1 = off_251CC4548;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void HSFilerRT_Internal_INT::Session_INT::~Session_INT(HSFilerRT_Internal_INT::Session_INT *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void **v9;

  *(_QWORD *)this = off_251CC4548;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v4 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 113) = 0;
  if (*((_QWORD *)this + 8))
  {
    v5 = (void **)*((_QWORD *)this + 7);
    if (v5)
    {
      do
      {
        v9 = (void **)*v5;
        if (*((char *)v5 + 39) < 0)
          operator delete(v5[2]);
        operator delete(v5);
        v5 = v9;
      }
      while (v9);
    }
    *((_QWORD *)this + 7) = 0;
    v6 = *((_QWORD *)this + 6);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  HSFilerRT_Internal::Session::~Session(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void **v9;

  *(_QWORD *)this = off_251CC4548;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v4 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 113) = 0;
  if (*((_QWORD *)this + 8))
  {
    v5 = (void **)*((_QWORD *)this + 7);
    if (v5)
    {
      do
      {
        v9 = (void **)*v5;
        if (*((char *)v5 + 39) < 0)
          operator delete(v5[2]);
        operator delete(v5);
        v5 = v9;
      }
      while (v9);
    }
    *((_QWORD *)this + 7) = 0;
    v6 = *((_QWORD *)this + 6);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  HSFilerRT_Internal::Session::~Session(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = off_251CC4548;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v4 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 113) = 0;
  if (*((_QWORD *)this + 8))
  {
    v5 = (void **)*((_QWORD *)this + 7);
    if (v5)
    {
      do
      {
        v10 = (void **)*v5;
        if (*((char *)v5 + 39) < 0)
          operator delete(v5[2]);
        operator delete(v5);
        v5 = v10;
      }
      while (v10);
    }
    *((_QWORD *)this + 7) = 0;
    v6 = *((_QWORD *)this + 6);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  HSFilerRT_Internal::Session::~Session(this);
  operator delete(v9);
}

void HSFilerRT_Internal_INT::Session_INT::end(HSFilerRT_Internal_INT::Session_INT *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  void **v8;

  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v4 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 113) = 0;
  if (*((_QWORD *)this + 8))
  {
    v5 = (void **)*((_QWORD *)this + 7);
    if (v5)
    {
      do
      {
        v8 = (void **)*v5;
        if (*((char *)v5 + 39) < 0)
          operator delete(v5[2]);
        operator delete(v5);
        v5 = v8;
      }
      while (v8);
    }
    *((_QWORD *)this + 7) = 0;
    v6 = *((_QWORD *)this + 6);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
}

uint64_t HSFilerRT_Internal_INT::startReadSession_sync(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const support::log::manager *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t Session;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint8_t *v28;
  uint64_t **v29;
  int v30;
  _DWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  _DWORD *v35;
  void *v36;
  _DWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  _OWORD v45[4];
  void *__p[2];
  void *v47[2];
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  uint8_t v51[4];
  uint64_t v52;
  uint8_t buf[3016];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a2
  {
    v49 = 0;
    v50 = 0;
    v10 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B97E000, v10, OS_LOG_TYPE_ERROR, "error: Failed to cast session pointer object", buf, 2u);
      return 0;
    }
    goto LABEL_10;
  }
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v49 = v4;
  v50 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  pthread_mutex_lock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  if (qword_2579B8CA8)
  {
LABEL_7:
    v8 = (const support::log::manager *)qword_2579B8CA8;
    v9 = off_2579B8CB0;
    *(_QWORD *)buf = qword_2579B8CA8;
    *(_QWORD *)&buf[8] = off_2579B8CB0;
    if (!off_2579B8CB0)
      goto LABEL_20;
    goto LABEL_18;
  }
  v9 = operator new(0xA8uLL);
  v9[2] = 0;
  *v9 = &unk_251CC35C0;
  v9[1] = 0;
  v8 = (const support::log::manager *)(v9 + 3);
  hsfiler_log_manager::hsfiler_log_manager((hsfiler_log_manager *)(v9 + 3));
  v13 = (std::__shared_weak_count *)off_2579B8CB0;
  qword_2579B8CA8 = (uint64_t)(v9 + 3);
  off_2579B8CB0 = v9;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_7;
  }
  *(_QWORD *)buf = v9 + 3;
  *(_QWORD *)&buf[8] = v9;
LABEL_18:
  v16 = v9 + 1;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
LABEL_20:
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  support::transport::ARI::create((support::transport::ARI *)"HSFilerARITransport", (dispatch_queue_s *)0x2710, 1, v8, (support::transport::ARI **)v45);
  v18 = *(_QWORD *)&v45[0];
  *(_QWORD *)&v45[0] = 0;
  v19 = v49[15];
  v49[15] = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *(_QWORD *)&v45[0] = 0;
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v49;
  v24 = **(NSObject ***)(a1 + 128);
  if (!v49[15])
  {
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v42 = v23[4];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v42;
      _os_log_error_impl(&dword_24B97E000, v24, OS_LOG_TYPE_ERROR, "error: Failed to create ARI transport for session (%llu)", buf, 0xCu);
      Session = 0;
      v12 = v50;
      if (!v50)
        return Session;
      goto LABEL_45;
    }
LABEL_10:
    Session = 0;
    v12 = v50;
    if (!v50)
      return Session;
    goto LABEL_45;
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = v23[4];
    v26 = *((_DWORD *)v23 + 24);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v25;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v26;
    _os_log_impl(&dword_24B97E000, v24, OS_LOG_TYPE_DEFAULT, "Starting read session (%llu) with sequenceID (%u)", buf, 0x12u);
  }
  v48 = 0xAAAAAAAAAAAAAAAALL;
  hsfiler::ARICommandDriver::ARICommandDriver();
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v27;
  *(_OWORD *)v47 = v27;
  v45[2] = v27;
  v45[3] = v27;
  v45[0] = v27;
  v45[1] = v27;
  AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::ARI_IBIFilerHSStartReadBBSessionReq_SDK((AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *)v45);
  v28 = &buf[2];
  bzero(&buf[2], 0xBB8uLL);
  v29 = (uint64_t **)v23[7];
  for (*(_WORD *)buf = v23[8]; v29; v28 += 100)
  {
    while (*((char *)v29 + 39) < 0)
    {
      memcpy(v28, v29[2], (size_t)v29[3]);
      v29 = (uint64_t **)*v29;
      v28 += 100;
      if (!v29)
        goto LABEL_35;
    }
    memcpy(v28, v29 + 2, *((unsigned __int8 *)v29 + 39));
    v29 = (uint64_t **)*v29;
  }
LABEL_35:
  v30 = *((_DWORD *)v23 + 6);
  v31 = operator new(4uLL);
  *v31 = v30;
  v32 = __p[0];
  __p[0] = v31;
  if (v32)
    operator delete(v32);
  v33 = operator new(0xBBAuLL);
  memcpy(v33, buf, 0xBBAuLL);
  v34 = __p[1];
  __p[1] = v33;
  if (v34)
    operator delete(v34);
  v35 = operator new(4uLL);
  *v35 = *((_DWORD *)v23 + 25);
  v36 = v47[0];
  v47[0] = v35;
  if (v36)
    operator delete(v36);
  v37 = operator new(4uLL);
  *v37 = *((_DWORD *)v23 + 24);
  v38 = v47[1];
  v47[1] = v37;
  if (v38)
    operator delete(v38);
  Session = hsfiler::ARICommandDriver::StartReadSession();
  v43 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    v44 = v23[4];
    *(_DWORD *)v51 = 134217984;
    v52 = v44;
    _os_log_error_impl(&dword_24B97E000, v43, OS_LOG_TYPE_ERROR, "error: Failed StartReadBBSession ARI command for session (%llu)", v51, 0xCu);
  }
  MEMORY[0x24BD2A748](v45);
  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)&v48);
  v12 = v50;
  if (v50)
  {
LABEL_45:
    v39 = (unint64_t *)&v12->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return Session;
}

void sub_24B9A3CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__shared_weak_count *v34;
  void *v36;

  std::__shared_weak_count::~__shared_weak_count(v34);
  operator delete(v36);
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t HSFilerRT_Internal_INT::startWriteSession_sync(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const support::log::manager *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint8_t *v28;
  uint64_t **v29;
  int v30;
  _DWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  _DWORD *v35;
  void *v36;
  _DWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  _OWORD v45[4];
  void *__p[2];
  void *v47[2];
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  uint8_t v51[4];
  uint64_t v52;
  uint8_t buf[3016];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a2
  {
    v49 = 0;
    v50 = 0;
    v10 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B97E000, v10, OS_LOG_TYPE_ERROR, "error: Failed to cast session pointer object", buf, 2u);
      return 0;
    }
    goto LABEL_10;
  }
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v49 = v4;
  v50 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  pthread_mutex_lock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  if (qword_2579B8CA8)
  {
LABEL_7:
    v8 = (const support::log::manager *)qword_2579B8CA8;
    v9 = off_2579B8CB0;
    *(_QWORD *)buf = qword_2579B8CA8;
    *(_QWORD *)&buf[8] = off_2579B8CB0;
    if (!off_2579B8CB0)
      goto LABEL_20;
    goto LABEL_18;
  }
  v9 = operator new(0xA8uLL);
  v9[2] = 0;
  *v9 = &unk_251CC35C0;
  v9[1] = 0;
  v8 = (const support::log::manager *)(v9 + 3);
  hsfiler_log_manager::hsfiler_log_manager((hsfiler_log_manager *)(v9 + 3));
  v13 = (std::__shared_weak_count *)off_2579B8CB0;
  qword_2579B8CA8 = (uint64_t)(v9 + 3);
  off_2579B8CB0 = v9;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_7;
  }
  *(_QWORD *)buf = v9 + 3;
  *(_QWORD *)&buf[8] = v9;
LABEL_18:
  v16 = v9 + 1;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
LABEL_20:
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  support::transport::ARI::create((support::transport::ARI *)"HSFilerARITransport", (dispatch_queue_s *)0x2710, 1, v8, (support::transport::ARI **)v45);
  v18 = *(_QWORD *)&v45[0];
  *(_QWORD *)&v45[0] = 0;
  v19 = v49[15];
  v49[15] = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *(_QWORD *)&v45[0] = 0;
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v49;
  v24 = **(NSObject ***)(a1 + 128);
  if (!v49[15])
  {
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v42 = v23[4];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v42;
      _os_log_error_impl(&dword_24B97E000, v24, OS_LOG_TYPE_ERROR, "error: Failed to create ARI transport for session (%llu)", buf, 0xCu);
      v11 = 0;
      v12 = v50;
      if (!v50)
        return v11;
      goto LABEL_45;
    }
LABEL_10:
    v11 = 0;
    v12 = v50;
    if (!v50)
      return v11;
    goto LABEL_45;
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = v23[4];
    v26 = *((_DWORD *)v23 + 24);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v25;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v26;
    _os_log_impl(&dword_24B97E000, v24, OS_LOG_TYPE_DEFAULT, "Starting write session (%llu) with sequenceID (%u)", buf, 0x12u);
  }
  v48 = 0xAAAAAAAAAAAAAAAALL;
  hsfiler::ARICommandDriver::ARICommandDriver();
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v27;
  *(_OWORD *)v47 = v27;
  v45[2] = v27;
  v45[3] = v27;
  v45[0] = v27;
  v45[1] = v27;
  AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::ARI_IBIFilerHSStartWriteBBSessionReq_SDK((AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *)v45);
  v28 = &buf[2];
  bzero(&buf[2], 0xBB8uLL);
  v29 = (uint64_t **)v23[7];
  for (*(_WORD *)buf = v23[8]; v29; v28 += 100)
  {
    while (*((char *)v29 + 39) < 0)
    {
      memcpy(v28, v29[2], (size_t)v29[3]);
      v29 = (uint64_t **)*v29;
      v28 += 100;
      if (!v29)
        goto LABEL_35;
    }
    memcpy(v28, v29 + 2, *((unsigned __int8 *)v29 + 39));
    v29 = (uint64_t **)*v29;
  }
LABEL_35:
  v30 = *((_DWORD *)v23 + 6);
  v31 = operator new(4uLL);
  *v31 = v30;
  v32 = __p[0];
  __p[0] = v31;
  if (v32)
    operator delete(v32);
  v33 = operator new(0xBBAuLL);
  memcpy(v33, buf, 0xBBAuLL);
  v34 = __p[1];
  __p[1] = v33;
  if (v34)
    operator delete(v34);
  v35 = operator new(4uLL);
  *v35 = *((_DWORD *)v23 + 25);
  v36 = v47[0];
  v47[0] = v35;
  if (v36)
    operator delete(v36);
  v37 = operator new(4uLL);
  *v37 = *((_DWORD *)v23 + 24);
  v38 = v47[1];
  v47[1] = v37;
  if (v38)
    operator delete(v38);
  v11 = hsfiler::ARICommandDriver::StartWriteSession();
  v43 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    v44 = v23[4];
    *(_DWORD *)v51 = 134217984;
    v52 = v44;
    _os_log_error_impl(&dword_24B97E000, v43, OS_LOG_TYPE_ERROR, "error: Failed StartWriteBBSession ARI command for session (%llu)", v51, 0xCu);
  }
  MEMORY[0x24BD2A760](v45);
  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)&v48);
  v12 = v50;
  if (v50)
  {
LABEL_45:
    v39 = (unint64_t *)&v12->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_24B9A4328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__shared_weak_count *v34;
  void *v36;

  std::__shared_weak_count::~__shared_weak_count(v34);
  operator delete(v36);
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t HSFilerRT_Internal_INT::endSession_sync(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  _DWORD *v14;
  void *v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v23;
  uint64_t v24;
  _QWORD v25[3];
  uint8_t v26[4];
  uint64_t v27;
  _OWORD buf[4];
  void *__p[2];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2
  {
    v5 = v4;
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    v25[1] = v4;
    v25[2] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v5[4];
      v11 = *((_DWORD *)v5 + 24);
      LODWORD(buf[0]) = 134218240;
      *(_QWORD *)((char *)buf + 4) = v10;
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = v11;
      _os_log_impl(&dword_24B97E000, v9, OS_LOG_TYPE_DEFAULT, "Ending session (%llu) with sequenceID (%u) with the baseband", (uint8_t *)buf, 0x12u);
    }
    v25[0] = 0xAAAAAAAAAAAAAAAALL;
    hsfiler::ARICommandDriver::ARICommandDriver();
    v30 = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    buf[3] = v12;
    *(_OWORD *)__p = v12;
    buf[1] = v12;
    buf[2] = v12;
    buf[0] = v12;
    AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::ARI_IBIFilerHSEndBBSessionReq_SDK((AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *)buf);
    v13 = *((_DWORD *)v5 + 6);
    v14 = operator new(4uLL);
    *v14 = v13;
    v15 = __p[0];
    __p[0] = v14;
    if (v15)
      operator delete(v15);
    v16 = operator new(4uLL);
    *v16 = *((_DWORD *)v5 + 24);
    v17 = v30;
    v30 = v16;
    if (v17)
      operator delete(v17);
    v18 = hsfiler::ARICommandDriver::EndSession();
    v23 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = v5[4];
      *(_DWORD *)v26 = 134217984;
      v27 = v24;
      _os_log_error_impl(&dword_24B97E000, v23, OS_LOG_TYPE_ERROR, "error: Failed EndBBSession ARI command for session (%llu)", v26, 0xCu);
    }
    MEMORY[0x24BD2A718](buf);
    hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)v25);
    if (v6)
    {
      v19 = (unint64_t *)&v6->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v21 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_24B97E000, v21, OS_LOG_TYPE_ERROR, "error: Failed to cast session pointer object", (uint8_t *)buf, 2u);
    }
    return 0;
  }
  return v18;
}

void sub_24B9A4728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  v7 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  MEMORY[0x24BD2A718](va2);
  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)va);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_24B9A475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HSFilerRT_Internal_INT::getFileSize_sync(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  int v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v26;
  uint64_t v27;
  _QWORD v28[3];
  uint8_t v29[4];
  uint64_t v30;
  _BYTE buf[32];
  __int128 v32;
  __int128 v33;
  void *__p[2];
  __int128 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2
  {
    v7 = v6;
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    v28[1] = v6;
    v28[2] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = v7[4];
      if (a3[23] >= 0)
        v13 = a3;
      else
        v13 = *(char **)a3;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v13;
      _os_log_impl(&dword_24B97E000, v11, OS_LOG_TYPE_DEFAULT, "Getting session (%llu) file (%s) size from baseband", buf, 0x16u);
    }
    v28[0] = 0xAAAAAAAAAAAAAAAALL;
    hsfiler::ARICommandDriver::ARICommandDriver();
    v36 = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v14;
    v35 = v14;
    v32 = v14;
    v33 = v14;
    *(_OWORD *)buf = v14;
    *(_OWORD *)&buf[16] = v14;
    AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::ARI_IBIFilerHSReadBBGetSizeReq_SDK((AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *)buf);
    v15 = *((_DWORD *)v7 + 6);
    v16 = operator new(4uLL);
    *v16 = v15;
    v17 = __p[0];
    __p[0] = v16;
    if (v17)
      operator delete(v17);
    v18 = a3[23];
    if ((v18 & 0x80u) == 0)
      v19 = a3;
    else
      v19 = *(char **)a3;
    if ((v18 & 0x80u) != 0)
      v18 = *((_QWORD *)a3 + 1);
    AriSdk::TlvArray<char,100ul>::assign<std::__wrap_iter<char const*>>(&__p[1], v19, &v19[v18]);
    v20 = operator new(4uLL);
    *v20 = *((_DWORD *)v7 + 24);
    v21 = v36;
    v36 = v20;
    if (v21)
      operator delete(v21);
    hsfiler::ARICommandDriver::GetReadSize();
    v26 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = v7[4];
      *(_DWORD *)v29 = 134217984;
      v30 = v27;
      _os_log_error_impl(&dword_24B97E000, v26, OS_LOG_TYPE_ERROR, "error: Failed ReadBBGetSize ARI command for session (%llu)", v29, 0xCu);
    }
    MEMORY[0x24BD2A730](buf);
    hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)v28);
    if (v8)
    {
      v22 = (unint64_t *)&v8->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v24 = **(NSObject ***)(a1 + 128);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_24B97E000, v24, OS_LOG_TYPE_ERROR, "error: Failed to cast session pointer object", buf, 2u);
    }
  }
  return 0;
}

void sub_24B9A4B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  v7 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  MEMORY[0x24BD2A730](va2);
  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)va);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void AriSdk::TlvArray<char,100ul>::assign<std::__wrap_iter<char const*>>(void **a1, char *__src, const char *a3)
{
  size_t v4;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  const char *v11;
  void *p_p;
  char *v13;
  char *v14;
  char *v15;
  void *__p;
  char v17;

  v4 = a3 - __src;
  if ((unint64_t)(a3 - __src) < 0x65)
  {
    v7 = (unint64_t)a1[2];
    v8 = (char *)*a1;
    if (v7 - (unint64_t)*a1 >= v4)
    {
      v13 = (char *)a1[1];
      if (v13 - v8 < v4)
      {
        v14 = &__src[v13 - v8];
        if (v13 != v8)
        {
          memmove(*a1, __src, v13 - v8);
          v8 = (char *)a1[1];
        }
        if (a3 != v14)
          memmove(v8, v14, a3 - v14);
        v15 = &v8[a3 - v14];
        goto LABEL_26;
      }
    }
    else
    {
      if (v8)
      {
        a1[1] = v8;
        operator delete(v8);
        v7 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      v9 = 2 * v7;
      if (2 * v7 <= v4)
        v9 = v4;
      if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
        v10 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if ((v10 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v8 = (char *)operator new(v10);
      *a1 = v8;
      a1[1] = v8;
      a1[2] = &v8[v10];
    }
    if (a3 != __src)
      memmove(v8, __src, v4);
    v15 = &v8[v4];
LABEL_26:
    a1[1] = v15;
    return;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "assign", a3);
  if (v17 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Range assignment too large(%p), got(%ld) max(%ld)", v11, p_p, 385, a1, v4, 100);
  if (v17 < 0)
    operator delete(__p);
}

void sub_24B9A4D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HSFilerRT_Internal_INT::readFile_sync(uint64_t a1, uint64_t a2, char *a3, mach_vm_size_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  _DWORD *v30;
  int v31;
  _DWORD *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  void *v37;
  _DWORD *v38;
  void *v39;
  uint64_t FileFromBB;
  char v41;
  int v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  uint32_t v57;
  NSObject *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  support::transport::PCIMemRegion *v64;
  unint64_t v65;
  _DWORD **v66;
  unint64_t v67;
  _DWORD *v68;
  std::__shared_weak_count *v69;
  char __p[12];
  __int16 v71;
  char *v72;
  char v73;
  _OWORD buf[4];
  void *v75[2];
  __int128 v76;
  void *v77[2];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2)
  {
    if (v10)
    {
      v11 = v10;
      v12 = *(std::__shared_weak_count **)(a2 + 8);
      v68 = v10;
      v69 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v15 = **(NSObject ***)(a1 + 128);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = v11[4];
        if (a3[23] >= 0)
          v17 = a3;
        else
          v17 = *(char **)a3;
        LODWORD(buf[0]) = 134218242;
        *(_QWORD *)((char *)buf + 4) = v16;
        WORD6(buf[0]) = 2080;
        *(_QWORD *)((char *)buf + 14) = v17;
        _os_log_impl(&dword_24B97E000, v15, OS_LOG_TYPE_DEFAULT, "Reading session (%llu) file (%s) from baseband", (uint8_t *)buf, 0x16u);
      }
      v67 = 0xAAAAAAAAAAAAAAAALL;
      hsfiler::ARICommandDriver::ARICommandDriver();
      *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v76 = v18;
      *(_OWORD *)v77 = v18;
      buf[3] = v18;
      *(_OWORD *)v75 = v18;
      buf[1] = v18;
      buf[2] = v18;
      buf[0] = v18;
      AriSdk::ARI_IBIFilerHSReadBBReq_SDK::ARI_IBIFilerHSReadBBReq_SDK((AriSdk::ARI_IBIFilerHSReadBBReq_SDK *)buf);
      v65 = 0xAAAAAAAAAAAAAAAALL;
      v66 = 0;
      v64 = (support::transport::PCIMemRegion *)0xAAAAAAAAAAAAAAAALL;
      v73 = 11;
      strcpy(__p, "HSFilerRead");
      pthread_mutex_lock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
      if (!qword_2579B8CA8)
      {
        v20 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v20->__shared_weak_owners_ = 0;
        v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CC35C0;
        v20->__shared_owners_ = 0;
        v19 = (uint64_t)&v20[1];
        hsfiler_log_manager::hsfiler_log_manager((hsfiler_log_manager *)&v20[1]);
        v23 = (std::__shared_weak_count *)off_2579B8CB0;
        qword_2579B8CA8 = (uint64_t)&v20[1];
        off_2579B8CB0 = v20;
        if (!v23)
        {
          v62 = (uint64_t)&v20[1];
          v63 = v20;
LABEL_23:
          v26 = (unint64_t *)&v20->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
LABEL_25:
          pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
          support::transport::PCIMemRegion::create((const void **)__p, 3, a4, 0, 0, 5000, v19, &v64);
          if (!v63)
            goto LABEL_29;
          v28 = &v63->__shared_owners_;
          do
            v29 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v29 - 1, (unint64_t *)v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
            if ((v73 & 0x80000000) == 0)
            {
LABEL_31:
              if (v64)
              {
                v30 = v68;
                v31 = v68[6];
                v32 = operator new(4uLL);
                *v32 = v31;
                v33 = v75[0];
                v75[0] = v32;
                if (v33)
                  operator delete(v33);
                v34 = a3[23];
                if ((v34 & 0x80u) == 0)
                  v35 = a3;
                else
                  v35 = *(char **)a3;
                if ((v34 & 0x80u) != 0)
                  v34 = *((_QWORD *)a3 + 1);
                AriSdk::TlvArray<char,100ul>::assign<std::__wrap_iter<char const*>>(&v75[1], v35, &v35[v34]);
                v36 = operator new(8uLL);
                *v36 = a4;
                v37 = v77[0];
                v77[0] = v36;
                if (v37)
                  operator delete(v37);
                v38 = operator new(4uLL);
                *v38 = v30[24];
                v39 = v77[1];
                v77[1] = v38;
                if (v39)
                  operator delete(v39);
                FileFromBB = hsfiler::ARICommandDriver::ReadFileFromBB();
                v22 = FileFromBB;
                if (v66)
                  v41 = FileFromBB;
                else
                  v41 = 0;
                if ((v41 & 1) == 0)
                {
                  v58 = **(NSObject ***)(a1 + 128);
                  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                  {
                    v59 = *((_QWORD *)v30 + 4);
                    *(_DWORD *)__p = 134217984;
                    *(_QWORD *)&__p[4] = v59;
                    _os_log_error_impl(&dword_24B97E000, v58, OS_LOG_TYPE_ERROR, "error: Failed ReadBB ARI command for session (%llu)", (uint8_t *)__p, 0xCu);
                  }
                  goto LABEL_56;
                }
                v42 = *v66[9];
                if (!v42)
                {
                  v43 = *(_QWORD *)(a5 + 24);
                  if (v43)
                  {
                    *(_QWORD *)__p = *((_QWORD *)v64 + 20);
                    v62 = a4;
                    (*(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, __p, &v62);
                  }
                  v44 = **(NSObject ***)(a1 + 128);
                  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                  {
                    v45 = *((_QWORD *)v30 + 4);
                    if (a3[23] >= 0)
                      v46 = a3;
                    else
                      v46 = *(char **)a3;
                    *(_DWORD *)__p = 134218242;
                    *(_QWORD *)&__p[4] = v45;
                    v71 = 2080;
                    v72 = v46;
                    _os_log_impl(&dword_24B97E000, v44, OS_LOG_TYPE_DEFAULT, "Successfully read session (%llu) file (%s) from baseband", (uint8_t *)__p, 0x16u);
                  }
                  v22 = 1;
                  goto LABEL_56;
                }
                v60 = **(NSObject ***)(a1 + 128);
                if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                  goto LABEL_76;
                v61 = *((_QWORD *)v30 + 4);
                *(_DWORD *)__p = 134218240;
                *(_QWORD *)&__p[4] = v61;
                v71 = 1024;
                LODWORD(v72) = v42;
                v55 = "error: Failed ReadBB ARI command for session (%llu): result %d";
                v56 = v60;
                v57 = 18;
              }
              else
              {
                v54 = **(NSObject ***)(a1 + 128);
                if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                {
LABEL_76:
                  v22 = 0;
LABEL_56:
                  if (v66)
                    (*((void (**)(_DWORD **))*v66 + 2))(v66);
                  v47 = (std::__shared_weak_count *)v65;
                  if (v65)
                  {
                    v48 = (unint64_t *)(v65 + 8);
                    do
                      v49 = __ldaxr(v48);
                    while (__stlxr(v49 - 1, v48));
                    if (!v49)
                    {
                      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                      std::__shared_weak_count::__release_weak(v47);
                    }
                  }
                  MEMORY[0x24BD2A6E8](buf);
                  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)&v67);
                  v50 = v69;
                  if (v69)
                  {
                    v51 = (unint64_t *)&v69->__shared_owners_;
                    do
                      v52 = __ldaxr(v51);
                    while (__stlxr(v52 - 1, v51));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                      std::__shared_weak_count::__release_weak(v50);
                    }
                  }
                  return v22;
                }
                *(_WORD *)__p = 0;
                v55 = "error: Failed to create PCI memory region";
                v56 = v54;
                v57 = 2;
              }
              _os_log_error_impl(&dword_24B97E000, v56, OS_LOG_TYPE_ERROR, v55, (uint8_t *)__p, v57);
              v22 = 0;
              goto LABEL_56;
            }
          }
          else
          {
LABEL_29:
            if ((v73 & 0x80000000) == 0)
              goto LABEL_31;
          }
          operator delete(*(void **)__p);
          goto LABEL_31;
        }
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v19 = qword_2579B8CA8;
      v20 = (std::__shared_weak_count *)off_2579B8CB0;
      v62 = qword_2579B8CA8;
      v63 = (std::__shared_weak_count *)off_2579B8CB0;
      if (!off_2579B8CB0)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  v21 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_error_impl(&dword_24B97E000, v21, OS_LOG_TYPE_ERROR, "error: Failed to cast session pointer object", (uint8_t *)buf, 2u);
  }
  return 0;
}

void sub_24B9A5390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  void *v29;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v29);
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  MEMORY[0x24BD2A6E8](&a27);
  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)&a14);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t HSFilerRT_Internal_INT::writeFile_sync(uint64_t a1, uint64_t a2, char *a3, mach_vm_size_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  void *v38;
  _DWORD *v39;
  void *v40;
  uint64_t v41;
  char v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  uint32_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  support::transport::PCIMemRegion *v63;
  unint64_t v64;
  _DWORD **v65;
  unint64_t v66;
  _DWORD *v67;
  std::__shared_weak_count *v68;
  _BYTE __p[14];
  char *v70;
  char v71;
  _OWORD buf[4];
  void *v73[2];
  __int128 v74;
  void *v75[2];
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2)
  {
    if (v10)
    {
      v11 = v10;
      v12 = *(std::__shared_weak_count **)(a2 + 8);
      v67 = v10;
      v68 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v15 = **(NSObject ***)(a1 + 128);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = v11[4];
        if (a3[23] >= 0)
          v17 = a3;
        else
          v17 = *(char **)a3;
        LODWORD(buf[0]) = 134218242;
        *(_QWORD *)((char *)buf + 4) = v16;
        WORD6(buf[0]) = 2080;
        *(_QWORD *)((char *)buf + 14) = v17;
        _os_log_impl(&dword_24B97E000, v15, OS_LOG_TYPE_DEFAULT, "Writing session (%llu) file (%s) to baseband", (uint8_t *)buf, 0x16u);
      }
      v66 = 0xAAAAAAAAAAAAAAAALL;
      hsfiler::ARICommandDriver::ARICommandDriver();
      v76 = (void *)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v74 = v18;
      *(_OWORD *)v75 = v18;
      buf[3] = v18;
      *(_OWORD *)v73 = v18;
      buf[1] = v18;
      buf[2] = v18;
      buf[0] = v18;
      AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::ARI_IBIFilerHSWriteBBReq_SDK((AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *)buf);
      v64 = 0xAAAAAAAAAAAAAAAALL;
      v65 = 0;
      v63 = (support::transport::PCIMemRegion *)0xAAAAAAAAAAAAAAAALL;
      v71 = 12;
      strcpy(__p, "HSFilerWrite");
      pthread_mutex_lock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
      if (!qword_2579B8CA8)
      {
        v20 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v20->__shared_weak_owners_ = 0;
        v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_251CC35C0;
        v20->__shared_owners_ = 0;
        v19 = (uint64_t)&v20[1];
        hsfiler_log_manager::hsfiler_log_manager((hsfiler_log_manager *)&v20[1]);
        v23 = (std::__shared_weak_count *)off_2579B8CB0;
        qword_2579B8CA8 = (uint64_t)&v20[1];
        off_2579B8CB0 = v20;
        if (!v23)
        {
          v61 = (uint64_t)&v20[1];
          v62 = v20;
LABEL_23:
          v26 = (unint64_t *)&v20->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
LABEL_25:
          pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
          support::transport::PCIMemRegion::create((const void **)__p, 3, a4, 0, 0, 5000, v19, &v63);
          if (!v62)
            goto LABEL_29;
          v28 = &v62->__shared_owners_;
          do
            v29 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v29 - 1, (unint64_t *)v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
            if ((v71 & 0x80000000) == 0)
            {
LABEL_31:
              if (v63)
              {
                v30 = *(_QWORD *)(a5 + 24);
                if (v30)
                {
                  *(_QWORD *)__p = *((_QWORD *)v63 + 20);
                  v61 = a4;
                  if (((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, __p, &v61) & 1) != 0)
                  {
                    v31 = v67;
                    v32 = v67[6];
                    v33 = operator new(4uLL);
                    *v33 = v32;
                    v34 = v73[0];
                    v73[0] = v33;
                    if (v34)
                      operator delete(v34);
                    v35 = a3[23];
                    if ((v35 & 0x80u) == 0)
                      v36 = a3;
                    else
                      v36 = *(char **)a3;
                    if ((v35 & 0x80u) != 0)
                      v35 = *((_QWORD *)a3 + 1);
                    AriSdk::TlvArray<char,100ul>::assign<std::__wrap_iter<char const*>>(&v73[1], v36, &v36[v35]);
                    v37 = operator new(8uLL);
                    *v37 = a4;
                    v38 = v75[0];
                    v75[0] = v37;
                    if (v38)
                      operator delete(v38);
                    v39 = operator new(4uLL);
                    *v39 = v31[24];
                    v40 = v76;
                    v76 = v39;
                    if (v40)
                      operator delete(v40);
                    v41 = hsfiler::ARICommandDriver::WriteFileToBB();
                    v22 = v41;
                    if (v65)
                      v42 = v41;
                    else
                      v42 = 0;
                    if ((v42 & 1) == 0)
                    {
                      v58 = **(NSObject ***)(a1 + 128);
                      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                      {
                        v59 = *((_QWORD *)v31 + 4);
                        *(_DWORD *)__p = 134217984;
                        *(_QWORD *)&__p[4] = v59;
                        _os_log_error_impl(&dword_24B97E000, v58, OS_LOG_TYPE_ERROR, "error: Failed WriteBB ARI command for session (%llu)", __p, 0xCu);
                      }
                      goto LABEL_56;
                    }
                    v43 = *v65[9];
                    v44 = **(NSObject ***)(a1 + 128);
                    if (!v43)
                    {
                      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                      {
                        v45 = *((_QWORD *)v31 + 4);
                        if (a3[23] >= 0)
                          v46 = a3;
                        else
                          v46 = *(char **)a3;
                        *(_DWORD *)__p = 134218242;
                        *(_QWORD *)&__p[4] = v45;
                        *(_WORD *)&__p[12] = 2080;
                        v70 = v46;
                        _os_log_impl(&dword_24B97E000, v44, OS_LOG_TYPE_DEFAULT, "Wrote session (%llu) file (%s) to baseband", __p, 0x16u);
                      }
                      v22 = 1;
                      goto LABEL_56;
                    }
                    if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                      goto LABEL_81;
                    v60 = *((_QWORD *)v31 + 4);
                    *(_DWORD *)__p = 134218240;
                    *(_QWORD *)&__p[4] = v60;
                    *(_WORD *)&__p[12] = 1024;
                    LODWORD(v70) = v43;
                    v55 = "error: Failed WriteBB ARI command for session (%llu): result %d";
                    v56 = v44;
                    v57 = 18;
LABEL_83:
                    _os_log_error_impl(&dword_24B97E000, v56, OS_LOG_TYPE_ERROR, v55, __p, v57);
                    v22 = 0;
                    goto LABEL_56;
                  }
                  v54 = **(NSObject ***)(a1 + 128);
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)__p = 0;
                    v55 = "error: Failed to get data from caller";
                    goto LABEL_77;
                  }
LABEL_81:
                  v22 = 0;
LABEL_56:
                  if (v65)
                    (*((void (**)(_DWORD **))*v65 + 2))(v65);
                  v47 = (std::__shared_weak_count *)v64;
                  if (v64)
                  {
                    v48 = (unint64_t *)(v64 + 8);
                    do
                      v49 = __ldaxr(v48);
                    while (__stlxr(v49 - 1, v48));
                    if (!v49)
                    {
                      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                      std::__shared_weak_count::__release_weak(v47);
                    }
                  }
                  MEMORY[0x24BD2A700](buf);
                  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)&v66);
                  v50 = v68;
                  if (v68)
                  {
                    v51 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v52 = __ldaxr(v51);
                    while (__stlxr(v52 - 1, v51));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                      std::__shared_weak_count::__release_weak(v50);
                    }
                  }
                  return v22;
                }
                v54 = **(NSObject ***)(a1 + 128);
                if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                  goto LABEL_81;
                *(_WORD *)__p = 0;
                v55 = "error: Invalid write buffer callback";
              }
              else
              {
                v54 = **(NSObject ***)(a1 + 128);
                if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                  goto LABEL_81;
                *(_WORD *)__p = 0;
                v55 = "error: Failed to create PCI memory region";
              }
LABEL_77:
              v56 = v54;
              v57 = 2;
              goto LABEL_83;
            }
          }
          else
          {
LABEL_29:
            if ((v71 & 0x80000000) == 0)
              goto LABEL_31;
          }
          operator delete(*(void **)__p);
          goto LABEL_31;
        }
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v19 = qword_2579B8CA8;
      v20 = (std::__shared_weak_count *)off_2579B8CB0;
      v61 = qword_2579B8CA8;
      v62 = (std::__shared_weak_count *)off_2579B8CB0;
      if (!off_2579B8CB0)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  v21 = **(NSObject ***)(a1 + 128);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_error_impl(&dword_24B97E000, v21, OS_LOG_TYPE_ERROR, "error: Failed to cast session pointer object", (uint8_t *)buf, 2u);
  }
  return 0;
}

void sub_24B9A5AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  void *v29;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v29);
  pthread_mutex_unlock(&ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance);
  MEMORY[0x24BD2A700](&a27);
  hsfiler::ARICommandDriver::~ARICommandDriver((hsfiler::ARICommandDriver *)&a14);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void HSFilerRT_Internal_INT::~HSFilerRT_Internal_INT(HSFilerRT_Internal_INT *this)
{
  void *v1;

  HSFilerRT_Internal::~HSFilerRT_Internal(this);
  operator delete(v1);
}

void HSFilerRT_Internal::~HSFilerRT_Internal(HSFilerRT_Internal *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = &unk_251CC3130;
  v2 = (const void *)*((_QWORD *)this + 26);
  if (v2)
    _Block_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *((_QWORD *)this + 10) = &unk_251CC2740;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::__map_value_compare<HSFilerClientID,std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>,std::less<HSFilerClientID>,true>,std::allocator<std::__value_type<HSFilerClientID,std::map<unsigned long long,std::shared_ptr<HSFilerRT_Internal::Session>>>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  v13 = *((_QWORD *)this + 4);
  if (v13)
    dispatch_release(v13);
  v14 = *((_QWORD *)this + 3);
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

uint64_t __cxx_global_var_init_7()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_24B97E000);
  }
  return result;
}

uint64_t __cxx_global_var_init_3_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>::~PthreadMutexGuardPolicy, &ctu::Singleton<hsfiler_log_manager,hsfiler_log_manager,ctu::PthreadMutexGuardPolicy<hsfiler_log_manager>>::sInstance, &dword_24B97E000);
  }
  return result;
}

uint64_t HSFilerSession::HSFilerSession(uint64_t result, int a2, uint64_t a3)
{
  *(_QWORD *)result = &off_251CC45F0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  *(_QWORD *)result = &off_251CC45F0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

void HSFilerSession::~HSFilerSession(HSFilerSession *this)
{
  HSFilerRT *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  void (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  *(_QWORD *)this = &off_251CC45F0;
  v2 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v3 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v2, &v22);
    v4 = v22;
    v22 = 0uLL;
    v5 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = off_2579B8DD8;
  }
  v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v12 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v14 = *((_DWORD *)this + 2);
  v15 = *((_QWORD *)this + 2);
  v16 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)&v22 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v22 + 1) = 0x40000000;
  v23 = ___ZN18HSFilerRT_Internal14destroySessionE15HSFilerClientIDy_block_invoke;
  v24 = &__block_descriptor_tmp_4;
  v27 = v14;
  v25 = v16;
  v26 = v15;
  ctu::SharedSynchronizable<HSFilerRT_Internal>::execute_wrapped((uint64_t *)(v16 + 8), (uint64_t)&v22);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

{
  void *v1;

  HSFilerSession::~HSFilerSession(this);
  operator delete(v1);
}

void sub_24B9A5F10(void *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  __clang_call_terminate(a1);
}

BOOL HSFilerSession::addToQueue(uint64_t a1, uint64_t *a2, const void **a3, int a4)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  _BOOL8 v23;
  unint64_t *v24;
  unint64_t v25;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;

  v28 = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v30);
    v10 = v30;
    v30 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v17 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
  v28 = v9;
  v29 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v18 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  if (*a3)
    v22 = _Block_copy(*a3);
  else
    v22 = 0;
  v27 = v22;
  v23 = HSFilerRT::queueSession(v9, v20, v21, a2, &v27, a4);
  if (v22)
    _Block_release(v22);
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v23;
}

void sub_24B9A60F4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A6118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;

  if (v11)
    _Block_release(v11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL HSFilerSession::removeFromQueue(HSFilerSession *this)
{
  HSFilerRT *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL8 result;
  _BOOL8 v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;

  v2 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v3 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v2, &v18);
    v4 = v18;
    v18 = 0uLL;
    v5 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = off_2579B8DD8;
  }
  v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v12 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  result = HSFilerRT_Internal::removeSessionFromQueue(*(_QWORD *)(v3 + 8), *((_DWORD *)this + 2), *((_QWORD *)this + 2));
  v15 = result;
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      return v15;
    }
  }
  return result;
}

void sub_24B9A62A4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A62C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HSFilerReadSession::HSFilerReadSession(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)result = &off_251CC4628;
  return result;
}

{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)result = &off_251CC4628;
  return result;
}

void HSFilerReadSession::~HSFilerReadSession(HSFilerReadSession *this)
{
  void *v1;

  HSFilerSession::~HSFilerSession(this);
  operator delete(v1);
}

void HSFilerReadSession::create(unsigned int a1@<W0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33[2];
  unint64_t v34;
  unint64_t v35;
  __int128 v36;

  v34 = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v36);
    v10 = v36;
    v36 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v34 = v9;
  v35 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v19 = *a3;
  v20 = (std::__shared_weak_count *)a3[1];
  v33[0] = v19;
  v33[1] = (uint64_t)v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *a2;
  v32 = v23;
  if (v23)
    dispatch_retain(v23);
  v24 = HSFilerRT::createSession(v9, v33, 1, a1, &v32);
  if (v23)
    dispatch_release(v23);
  if (!v20)
    goto LABEL_27;
  v25 = (unint64_t *)&v20->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_27:
    if (v24)
      goto LABEL_28;
LABEL_31:
    *a4 = 0;
    a4[1] = 0;
    v29 = (std::__shared_weak_count *)v35;
    if (!v35)
      return;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v24)
    goto LABEL_31;
LABEL_28:
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v27 = operator new(0x28uLL);
  v27[2] = a1;
  *((_QWORD *)v27 + 3) = 0;
  *((_QWORD *)v27 + 4) = 0;
  *((_QWORD *)v27 + 2) = v24;
  *(_QWORD *)v27 = &off_251CC4628;
  *a4 = v27;
  v28 = operator new(0x20uLL);
  *v28 = off_251CC46D8;
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = v27;
  a4[1] = v28;
  v29 = (std::__shared_weak_count *)v35;
  if (!v35)
    return;
LABEL_32:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

void sub_24B9A6580(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A659C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  HSFilerSession *v13;
  void *v15;

  HSFilerSession::~HSFilerSession(v13);
  operator delete(v15);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_24B9A65BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9A65D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  NSObject *v13;

  if (v13)
    dispatch_release(v13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL HSFilerReadSession::readWithFile(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  _BOOL8 v23;
  unint64_t *v24;
  unint64_t v25;
  void *v27;
  std::string v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;

  v29 = 0xAAAAAAAAAAAAAAAALL;
  v30 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v31);
    v10 = v31;
    v31 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v17 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
  v29 = v9;
  v30 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v18 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  if (*a4)
    v22 = _Block_copy(*a4);
  else
    v22 = 0;
  v27 = v22;
  v23 = HSFilerRT::readWithFile(v9, v20, v21, a2, (uint64_t)&v28, &v27);
  if (v22)
    _Block_release(v22);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v23;
}

void sub_24B9A67D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9A67EC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A6810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  const void *v18;

  if (v18)
    _Block_release(v18);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL HSFilerReadSession::readWithStream(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  _BOOL8 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33;
  uint64_t v34[2];
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v37);
    v10 = v37;
    v37 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v35 = v9;
  v36 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *a3;
  v22 = (std::__shared_weak_count *)a3[1];
  v34[0] = v21;
  v34[1] = (uint64_t)v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (*a4)
    v25 = _Block_copy(*a4);
  else
    v25 = 0;
  v33 = v25;
  v26 = HSFilerRT::readWithStream(v9, v19, v20, a2, v34, &v33);
  if (v25)
    _Block_release(v25);
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v29 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v30 = (unint64_t *)(v36 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v26;
}

void sub_24B9A6A3C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A6A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  const void *v13;

  if (v13)
    _Block_release(v13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL HSFilerReadSession::readWithBuff(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  _BOOL8 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33;
  uint64_t v34[2];
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v37);
    v10 = v37;
    v37 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v35 = v9;
  v36 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *a3;
  v22 = (std::__shared_weak_count *)a3[1];
  v34[0] = v21;
  v34[1] = (uint64_t)v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (*a4)
    v25 = _Block_copy(*a4);
  else
    v25 = 0;
  v33 = v25;
  v26 = HSFilerRT::readWithBuff(v9, v19, v20, a2, v34, &v33);
  if (v25)
    _Block_release(v25);
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v29 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v30 = (unint64_t *)(v36 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v26;
}

void sub_24B9A6C84(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A6CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  const void *v13;

  if (v13)
    _Block_release(v13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t HSFilerWriteSession::HSFilerWriteSession(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)result = &off_251CC4660;
  return result;
}

{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)result = &off_251CC4660;
  return result;
}

void HSFilerWriteSession::~HSFilerWriteSession(HSFilerWriteSession *this)
{
  void *v1;

  HSFilerSession::~HSFilerSession(this);
  operator delete(v1);
}

void HSFilerWriteSession::create(unsigned int a1@<W0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33[2];
  unint64_t v34;
  unint64_t v35;
  __int128 v36;

  v34 = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v36);
    v10 = v36;
    v36 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v34 = v9;
  v35 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v19 = *a3;
  v20 = (std::__shared_weak_count *)a3[1];
  v33[0] = v19;
  v33[1] = (uint64_t)v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *a2;
  v32 = v23;
  if (v23)
    dispatch_retain(v23);
  v24 = HSFilerRT::createSession(v9, v33, 0, a1, &v32);
  if (v23)
    dispatch_release(v23);
  if (!v20)
    goto LABEL_27;
  v25 = (unint64_t *)&v20->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_27:
    if (v24)
      goto LABEL_28;
LABEL_31:
    *a4 = 0;
    a4[1] = 0;
    v29 = (std::__shared_weak_count *)v35;
    if (!v35)
      return;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v24)
    goto LABEL_31;
LABEL_28:
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v27 = operator new(0x28uLL);
  v27[2] = a1;
  *((_QWORD *)v27 + 3) = 0;
  *((_QWORD *)v27 + 4) = 0;
  *((_QWORD *)v27 + 2) = v24;
  *(_QWORD *)v27 = &off_251CC4660;
  *a4 = v27;
  v28 = operator new(0x20uLL);
  *v28 = off_251CC4728;
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = v27;
  a4[1] = v28;
  v29 = (std::__shared_weak_count *)v35;
  if (!v35)
    return;
LABEL_32:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

void sub_24B9A6F80(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A6F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  HSFilerSession *v13;
  void *v15;

  HSFilerSession::~HSFilerSession(v13);
  operator delete(v15);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_24B9A6FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9A6FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  NSObject *v13;

  if (v13)
    dispatch_release(v13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL HSFilerWriteSession::writeWithFile(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  _BOOL8 v23;
  unint64_t *v24;
  unint64_t v25;
  void *v27;
  std::string v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;

  v29 = 0xAAAAAAAAAAAAAAAALL;
  v30 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v31);
    v10 = v31;
    v31 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v17 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
  v29 = v9;
  v30 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v18 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  if (*a4)
    v22 = _Block_copy(*a4);
  else
    v22 = 0;
  v27 = v22;
  v23 = HSFilerRT::writeWithFile(v9, v20, v21, a2, (uint64_t)&v28, &v27);
  if (v22)
    _Block_release(v22);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v23;
}

void sub_24B9A71D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24B9A71EC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A7210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  const void *v18;

  if (v18)
    _Block_release(v18);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL HSFilerWriteSession::writeWithStream(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  _BOOL8 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33;
  uint64_t v34[2];
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v37);
    v10 = v37;
    v37 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v35 = v9;
  v36 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *a3;
  v22 = (std::__shared_weak_count *)a3[1];
  v34[0] = v21;
  v34[1] = (uint64_t)v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (*a4)
    v25 = _Block_copy(*a4);
  else
    v25 = 0;
  v33 = v25;
  v26 = HSFilerRT::writeWithStream(v9, v19, v20, a2, v34, &v33);
  if (v25)
    _Block_release(v25);
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v29 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v30 = (unint64_t *)(v36 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v26;
}

void sub_24B9A743C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A7460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  const void *v13;

  if (v13)
    _Block_release(v13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL HSFilerWriteSession::writeWithBuff(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4)
{
  HSFilerRT *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  _BOOL8 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v33;
  uint64_t v34[2];
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (HSFilerRT *)pthread_mutex_lock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v9 = off_2579B8DD8;
  if (!off_2579B8DD8)
  {
    HSFilerRT::create_default_global(v8, &v37);
    v10 = v37;
    v37 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_2579B8DD8 + 1);
    off_2579B8DD8 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 = off_2579B8DD8;
  }
  v35 = v9;
  v36 = *(&off_2579B8DD8 + 1);
  if (*(&off_2579B8DD8 + 1))
  {
    v17 = (unint64_t *)(*(&off_2579B8DD8 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *a3;
  v22 = (std::__shared_weak_count *)a3[1];
  v34[0] = v21;
  v34[1] = (uint64_t)v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (*a4)
    v25 = _Block_copy(*a4);
  else
    v25 = 0;
  v33 = v25;
  v26 = HSFilerRT::writeWithBuff(v9, v19, v20, a2, v34, &v33);
  if (v25)
    _Block_release(v25);
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v29 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v30 = (unint64_t *)(v36 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v26;
}

void sub_24B9A7684(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_24B9A76A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  const void *v13;

  if (v13)
    _Block_release(v13);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t HSFilerSession::getID(HSFilerSession *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t ctu::PthreadMutexGuardPolicy<HSFilerRT>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<HSFilerReadSession *,std::shared_ptr<HSFilerReadSession>::__shared_ptr_default_delete<HSFilerReadSession,HSFilerReadSession>,std::allocator<HSFilerReadSession>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<HSFilerReadSession *,std::shared_ptr<HSFilerReadSession>::__shared_ptr_default_delete<HSFilerReadSession,HSFilerReadSession>,std::allocator<HSFilerReadSession>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<HSFilerReadSession *,std::shared_ptr<HSFilerReadSession>::__shared_ptr_default_delete<HSFilerReadSession,HSFilerReadSession>,std::allocator<HSFilerReadSession>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9AC5A0)
    return a1 + 24;
  if (((v3 & 0x800000024B9AC5A0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9AC5A0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9AC5A0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<HSFilerWriteSession *,std::shared_ptr<HSFilerWriteSession>::__shared_ptr_default_delete<HSFilerWriteSession,HSFilerWriteSession>,std::allocator<HSFilerWriteSession>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<HSFilerWriteSession *,std::shared_ptr<HSFilerWriteSession>::__shared_ptr_default_delete<HSFilerWriteSession,HSFilerWriteSession>,std::allocator<HSFilerWriteSession>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<HSFilerWriteSession *,std::shared_ptr<HSFilerWriteSession>::__shared_ptr_default_delete<HSFilerWriteSession,HSFilerWriteSession>,std::allocator<HSFilerWriteSession>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000024B9AC674)
    return a1 + 24;
  if (((v3 & 0x800000024B9AC674 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024B9AC674))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024B9AC674 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_8()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HSFilerRT>::~PthreadMutexGuardPolicy, &ctu::Singleton<HSFilerRT,HSFilerRT,ctu::PthreadMutexGuardPolicy<HSFilerRT>>::sInstance, &dword_24B97E000);
  }
  return result;
}

BasebandTransportICE *BasebandTransportICE::BasebandTransportICE(BasebandTransportICE *a1, uint64_t *a2, NSObject **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  dispatch_object_t object;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::BasebandTransport((uint64_t)a1, &v13, &object);
  if (object)
    dispatch_release(object);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = off_251CC4778;
  *((_QWORD *)a1 + 54) = 0;
  *((_QWORD *)a1 + 58) = 0;
  *((_QWORD *)a1 + 62) = 0;
  *((_QWORD *)a1 + 63) = 0;
  *((_QWORD *)a1 + 64) = dispatch_queue_create("BasebandTransportARI", 0);
  BasebandTransportICE::configurePhysical(a1);
  return a1;
}

void sub_24B9A7A30(_Unwind_Exception *a1)
{
  BasebandTransport *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v7 = *((_QWORD *)v1 + 64);
  if (v7)
    dispatch_release(v7);
  if ((_QWORD *)*v5 == v4)
  {
    v8 = 4;
  }
  else
  {
    if (!*v5)
      goto LABEL_8;
    v8 = 5;
    v4 = (_QWORD *)*v5;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v8))(v4);
LABEL_8:
  v9 = (_QWORD *)*((_QWORD *)v1 + 58);
  if (v9 == v3)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_13;
    v10 = 5;
    v3 = (_QWORD *)*((_QWORD *)v1 + 58);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v10))(v3);
LABEL_13:
  v11 = (_QWORD *)*((_QWORD *)v1 + 54);
  if (v11 == v2)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_18;
    v12 = 5;
    v2 = (_QWORD *)*((_QWORD *)v1 + 54);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v12))(v2);
LABEL_18:
  BasebandTransport::~BasebandTransport(v1);
  _Unwind_Resume(a1);
}

void sub_24B9A7AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<HSFilerRT_Internal::Session>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t (***BasebandTransportICE::configurePhysical(BasebandTransportICE *this))()
{
  char *v2;
  NSObject *v3;
  const char *v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t (**v11)();
  BasebandTransportICE *v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 8;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_24B97E000, v3, OS_LOG_TYPE_DEFAULT, "#I using physical pipe...", (uint8_t *)&v11, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v2)(v2, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"using physical pipe...", v4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24BD2A658](&v11);
  }
  v11 = off_251CC4AC8;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v11, (_QWORD *)this + 59);
  v5 = v13;
  if (v13 == &v11)
  {
    v6 = 4;
    v5 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_10:
  v11 = off_251CC4B48;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 55);
  v7 = v13;
  if (v13 == &v11)
  {
    v8 = 4;
    v7 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_15:
  v11 = off_251CC4BC8;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 51);
  result = v13;
  if (v13 == &v11)
  {
    v10 = 4;
    result = &v11;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (uint64_t (***)())(*result)[v10]();
}

uint64_t (***BasebandTransportICE::configureARIPipe(BasebandTransportICE *this))()
{
  char *v2;
  NSObject *v3;
  const char *v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t (**v11)();
  BasebandTransportICE *v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 8;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_24B97E000, v3, OS_LOG_TYPE_DEFAULT, "#I using ARI client pipe...", (uint8_t *)&v11, 2u);
  }
  if ((**(unsigned int (***)(char *, uint64_t))v2)(v2, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"using ARI client pipe...", v4);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24BD2A658](&v11);
  }
  v11 = off_251CC48C8;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v11, (_QWORD *)this + 59);
  v5 = v13;
  if (v13 == &v11)
  {
    v6 = 4;
    v5 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_10:
  v11 = off_251CC4958;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 55);
  v7 = v13;
  if (v13 == &v11)
  {
    v8 = 4;
    v7 = &v11;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_15:
  v11 = off_251CC49E8;
  v12 = this;
  v13 = &v11;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v11, (_QWORD *)this + 51);
  result = v13;
  if (v13 == &v11)
  {
    v10 = 4;
    result = &v11;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (uint64_t (***)())(*result)[v10]();
}

uint64_t BasebandTransportICE::open(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *v9;
  BOOL v10;
  _BOOL8 v11;
  NSObject *v12;
  const char *v13;
  __int128 v14;
  void *v15;
  void *v17;
  __int128 v18[2];
  uint64_t v19;
  void *v20;
  __int128 v21[2];
  uint64_t v22;
  uint8_t buf[64];
  void *v24;
  __int128 v25[2];
  uint64_t v26;

  if (*(_DWORD *)a2 != 8)
  {
    v8 = *((_OWORD *)a2 + 1);
    v18[0] = *(_OWORD *)a2;
    v18[1] = v8;
    v19 = a2[4];
    if (*a3)
      v9 = _Block_copy(*a3);
    else
      v9 = 0;
    v17 = v9;
    v11 = BasebandTransport::open((BasebandTransport *)a1, v18, &v17);
    if (v9)
      _Block_release(v9);
    goto LABEL_25;
  }
  v6 = *a2;
  v25[1] = *((_OWORD *)a2 + 1);
  v26 = a2[4];
  *(_QWORD *)&v25[0] = v6;
  *((_QWORD *)&v25[0] + 1) = 1;
  if (*a3)
    v7 = _Block_copy(*a3);
  else
    v7 = 0;
  v24 = v7;
  v10 = BasebandTransport::open((BasebandTransport *)a1, v25, &v24);
  if (v7)
    _Block_release(v7);
  if (v10)
  {
    v11 = 1;
LABEL_25:
    BasebandTransportICE::configurePhysical((BasebandTransportICE *)a1);
    return v11;
  }
  v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_24B97E000, v12, OS_LOG_TYPE_DEFAULT, "#I Physical transport not available.  Trying ARI pipe...", buf, 2u);
  }
  if ((**(unsigned int (***)(uint64_t, uint64_t))(a1 + 8))(a1 + 8, 40))
  {
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Physical transport not available.  Trying ARI pipe...", v13);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24BD2A658](buf);
  }
  v14 = *((_OWORD *)a2 + 1);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v14;
  v22 = a2[4];
  if (*a3)
    v15 = _Block_copy(*a3);
  else
    v15 = 0;
  v20 = v15;
  v11 = BasebandTransportICE::openARIClientPipe(a1, v21, &v20);
  if (v15)
    _Block_release(v15);
  if (!v11)
    goto LABEL_25;
  BasebandTransportICE::configureARIPipe((BasebandTransportICE *)a1);
  return 1;
}

BOOL BasebandTransportICE::openARIClientPipe(uint64_t a1, __int128 *a2, void **a3)
{
  _QWORD *v3;
  __int128 v6;
  __int128 v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unsigned int *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  _BOOL8 v20;
  unsigned int (***v21)(_QWORD, uint64_t);
  NSObject *v22;
  const char *v23;
  unsigned int v24;
  const char *v25;
  const char *v26;
  std::__shared_weak_count *v27;
  unint64_t v29;
  _QWORD v30[2];
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  unsigned int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = a2[1];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  v9 = *(const void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v8;
  if (v9)
    _Block_release(v9);
  *(_DWORD *)(a1 + 504) = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = (unsigned int *)(a1 + 504);
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19 = AriHost::RegisterClient((AriHost *)"ipc.bb", (const char *)(a1 + 504), *(int **)(a1 + 512), (dispatch_queue_s *)(1000 * *((_DWORD *)a2 + 2)));
  if (v19)
  {
    v20 = 0;
    v21 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v22 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
  }
  else
  {
    v3 = v30;
    v30[0] = v11;
    v30[1] = v13;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v20 = AriHost::SetRTEventHandler() == 0;
    v21 = (unsigned int (***)(_QWORD, uint64_t))(a1 + 8);
    v22 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
  }
  v23 = "fail";
  v24 = *v14;
  if (v20)
    v23 = "success";
  *(_DWORD *)buf = 136315394;
  v32 = v23;
  v33 = 1024;
  v34 = v24;
  _os_log_impl(&dword_24B97E000, v22, OS_LOG_TYPE_DEFAULT, "#I ARI pipe open %s ctx 0x%x", buf, 0x12u);
LABEL_18:
  if ((**v21)(v21, 40))
  {
    v26 = "fail";
    if (v20)
      v26 = "success";
    ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"ARI pipe open %s ctx 0x%x", v25, v26, *v14);
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
    MEMORY[0x24BD2A658](buf);
  }
  if (!v19)
  {
    v27 = (std::__shared_weak_count *)v3[1];
    if (v27)
      std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v13);
  return v20;
}

void sub_24B9A83B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;

  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransportICE::write(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v6;
  int v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  const unsigned __int8 *v12;

  v12 = a2;
  v10 = a4;
  v11 = a3;
  v9 = a5;
  v8 = a6;
  v6 = *((_QWORD *)this + 54);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, const unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::read(BasebandTransportICE *this, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v6;
  int v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  v12 = a2;
  v10 = a4;
  v11 = a3;
  v9 = a5;
  v8 = a6;
  v6 = *((_QWORD *)this + 58);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::close_sync(BasebandTransportICE *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 62);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t ___ZN20BasebandTransportICE17openARIClientPipeEN17BasebandTransport10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE __p[12];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  if (a1[5])
  {
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = "ipc.bb";
      _os_log_error_impl(&dword_24B97E000, v6, OS_LOG_TYPE_ERROR, "Got AriHost::ARI_RT_REINIT callback for %s", __p, 0xCu);
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t))(v3 + 8))(v3 + 8, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Got AriHost::ARI_RT_REINIT callback for %s", v7, "ipc.bb");
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24BD2A658](__p);
    }
    v13 = 6;
    strcpy(__p, "ipc.bb");
    AriHost::ReRegisterClient();
    if (v13 < 0)
      operator delete(*(void **)__p);
    v8 = 0;
  }
  else
  {
    v8 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v8;
}

BOOL BasebandTransportICE::writeARIClientPipe(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  int started;
  std::__shared_weak_count *v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  unint64_t v20;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v5 || (v8 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if (*((_DWORD *)this + 127))
    {
      do
LABEL_9:
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      started = AriHost::Send();
      v16 = v9;
      goto LABEL_11;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (*((_DWORD *)this + 127))
      goto LABEL_9;
  }
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  started = AriHost::StartStream();
  v16 = v9;
LABEL_11:
  std::__shared_weak_count::__release_weak(v16);
  if (started)
  {
    v17 = (char *)this + 8;
    v18 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v23 = a3;
      _os_log_error_impl(&dword_24B97E000, v18, OS_LOG_TYPE_ERROR, "Failed to send %zu bytes on ARI pipe", buf, 0xCu);
    }
    if ((**(unsigned int (***)(char *, uint64_t))v17)(v17, 80))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"Failed to send %zu bytes on ARI pipe", v19, a3);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24BD2A658](buf);
    }
  }
  else if (a4)
  {
    *a4 = a3;
  }
  std::__shared_weak_count::__release_weak(v9);
  return started == 0;
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD block[6];
  int v15;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return 0xFFFFFFFFLL;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2;
    block[3] = &__block_descriptor_tmp_10_2;
    block[4] = v7;
    block[5] = a2;
    v15 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    v10 = 0;
  }
  else
  {
    v10 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v10;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    v4 = __p;
    v5 = v11 - (_BYTE *)__p;
    if (*(_BYTE *)(v2 + 136))
    {
      v6 = malloc(v11 - (_BYTE *)__p);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = *(const void **)(a1 + 40);
    v8 = *(unsigned int *)(a1 + 48);
    if (*(_BYTE *)(v2 + 136))
    {
      v9 = malloc(v8);
      memcpy(v9, v7, v8);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
  }
}

void sub_24B9A8BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::sendToDataHandler(BasebandTransportICE *this, unsigned __int8 *a2, size_t __size)
{
  void *v6;

  if (!*((_BYTE *)this + 136))
    return (*(uint64_t (**)(void))(*((_QWORD *)this + 18) + 16))();
  v6 = malloc(__size);
  memcpy(v6, a2, __size);
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 18) + 16))();
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_13(_QWORD *a1, AriMsg *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int BufCtx;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD block[6];
  unsigned int v18;
  std::__shared_weak_count *v20;
  uint8_t buf[4];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return 0xFFFFFFFFLL;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v20 = v8;
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_14;
    block[3] = &__block_descriptor_tmp_15_0;
    block[4] = v7;
    block[5] = a2;
    v18 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    BufCtx = AriMsg::GetBufCtx(a2, (const unsigned __int8 *)a3);
    *(_DWORD *)(v7 + 508) = BufCtx;
    v11 = *(NSObject **)(v7 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v22 = BufCtx;
      _os_log_impl(&dword_24B97E000, v11, OS_LOG_TYPE_DEFAULT, "#I bypass will use ctx id 0x%x", buf, 8u);
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t))(v7 + 8))(v7 + 8, 40))
    {
      ctu::LogMessageBuffer::createWithFormat((ctu::LogMessageBuffer *)"bypass will use ctx id 0x%x", v12, *(unsigned int *)(v7 + 508));
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog();
      MEMORY[0x24BD2A658](buf);
    }
    v13 = 0;
  }
  else
  {
    v13 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v13;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    v4 = __p;
    v5 = v11 - (_BYTE *)__p;
    if (*(_BYTE *)(v2 + 136))
    {
      v6 = malloc(v11 - (_BYTE *)__p);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = *(const void **)(a1 + 40);
    v8 = *(unsigned int *)(a1 + 48);
    if (*(_BYTE *)(v2 + 136))
    {
      v9 = malloc(v8);
      memcpy(v9, v7, v8);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
  }
}

void sub_24B9A8F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::closeARIClientPipe_sync(BasebandTransportICE *this)
{
  AriHost::EndStream((AriHost *)*((unsigned int *)this + 127));
  *((_DWORD *)this + 127) = 0;
  AriHost::DeregisterClient((AriHost *)*((unsigned int *)this + 126));
  *((_DWORD *)this + 126) = 0;
  return 1;
}

void BasebandTransportICE::~BasebandTransportICE(BasebandTransportICE *this)
{
  NSObject *v2;
  BasebandTransportICE *v3;
  uint64_t v4;
  BasebandTransportICE *v5;
  uint64_t v6;
  BasebandTransportICE *v7;
  uint64_t v8;

  *(_QWORD *)this = off_251CC4778;
  v2 = *((_QWORD *)this + 64);
  if (v2)
    dispatch_release(v2);
  v3 = (BasebandTransportICE *)*((_QWORD *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    v4 = 4;
    v3 = (BasebandTransportICE *)((char *)this + 472);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (BasebandTransportICE *)*((_QWORD *)this + 58);
  if (v5 == (BasebandTransportICE *)((char *)this + 440))
  {
    v6 = 4;
    v5 = (BasebandTransportICE *)((char *)this + 440);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  v7 = (BasebandTransportICE *)*((_QWORD *)this + 54);
  if (v7 == (BasebandTransportICE *)((char *)this + 408))
  {
    v8 = 4;
    v7 = (BasebandTransportICE *)((char *)this + 408);
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  BasebandTransport::~BasebandTransport(this);
}

{
  NSObject *v2;
  BasebandTransportICE *v3;
  uint64_t v4;
  BasebandTransportICE *v5;
  uint64_t v6;
  BasebandTransportICE *v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)this = off_251CC4778;
  v2 = *((_QWORD *)this + 64);
  if (v2)
    dispatch_release(v2);
  v3 = (BasebandTransportICE *)*((_QWORD *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    v4 = 4;
    v3 = (BasebandTransportICE *)((char *)this + 472);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (BasebandTransportICE *)*((_QWORD *)this + 58);
  if (v5 == (BasebandTransportICE *)((char *)this + 440))
  {
    v6 = 4;
    v5 = (BasebandTransportICE *)((char *)this + 440);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  v7 = (BasebandTransportICE *)*((_QWORD *)this + 54);
  if (v7 == (BasebandTransportICE *)((char *)this + 408))
  {
    v8 = 4;
    v7 = (BasebandTransportICE *)((char *)this + 408);
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  BasebandTransport::~BasebandTransport(this);
  operator delete(v9);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_251CC48C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_251CC48C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  AriHost::EndStream((AriHost *)*(unsigned int *)(v1 + 508));
  *(_DWORD *)(v1 + 508) = 0;
  AriHost::DeregisterClient((AriHost *)*(unsigned int *)(v1 + 504));
  *(_DWORD *)(v1 + 504) = 0;
  return 1;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24B9A942C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_251CC4958;
  return result;
}

void std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_251CC4958;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  **a4 = 0;
  return 0;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24B9A96A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_251CC49E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_251CC49E8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  BasebandTransportICE *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  NSObject *v8;
  uint64_t v9;
  _BOOL8 v10;
  _QWORD v12[10];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  void *__p;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD block[6];

  v4 = *(BasebandTransportICE **)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__1;
  v21[4] = __Block_byref_object_dispose__1;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = v5;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = v6;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = ___ZZN20BasebandTransportICE16configureARIPipeEvENK3__2clEPKhmPjbj_block_invoke;
  v12[3] = &__block_descriptor_tmp_20_0;
  v12[8] = v5;
  v12[9] = v6;
  v12[4] = v21;
  v12[5] = &v17;
  v12[6] = &v13;
  v12[7] = v4;
  v25 = v12;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_21;
  block[4] = (char *)v4 + 72;
  block[5] = &v25;
  v8 = *((_QWORD *)v4 + 11);
  if (*((_QWORD *)v4 + 12))
  {
    dispatch_async_and_wait(v8, block);
    v9 = v14[3];
    if (v9)
    {
LABEL_3:
      v10 = BasebandTransportICE::writeARIClientPipe(v4, (const unsigned __int8 *)v18[3], v9, v7);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_sync(v8, block);
    v9 = v14[3];
    if (v9)
      goto LABEL_3;
  }
  v10 = 1;
LABEL_6:
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_24B9A988C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

__n128 __Block_byref_object_copy__1(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24B9A9BA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_251CC4AC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_251CC4AC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return BasebandTransport::close_sync(*(BasebandTransport **)(a1 + 8));
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_251CC4B48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_251CC4B48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, unsigned __int8 **a2, unint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::read(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_251CC4BC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_251CC4BC8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, const unsigned __int8 **a2, uint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::write(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

uint64_t KTLCloseChannel()
{
  return MEMORY[0x24BED4BE8]();
}

uint64_t KTLInitOptions()
{
  return MEMORY[0x24BED4C88]();
}

uint64_t KTLOpenChannel()
{
  return MEMORY[0x24BED4CC8]();
}

uint64_t TelephonyBasebandCreateController()
{
  return MEMORY[0x24BED8D60]();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return MEMORY[0x24BED8A38]();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return MEMORY[0x24BED8A40]();
}

uint64_t TelephonyBasebandPCITransportMapRegion()
{
  return MEMORY[0x24BED8A48]();
}

uint64_t TelephonyBasebandPCITransportMapRegionwithClientData()
{
  return MEMORY[0x24BED8A50]();
}

uint64_t TelephonyBasebandPCITransportUnmapRegion()
{
  return MEMORY[0x24BED8A68]();
}

uint64_t TelephonyUtilTransportFree()
{
  return MEMORY[0x24BED97A8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x24BDAC728](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t capabilities::abs::supportsETSProtocol(capabilities::abs *this)
{
  return MEMORY[0x24BED90F0](this);
}

uint64_t capabilities::abs::traceTransportTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x24BED9170](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadSize(capabilities::abs *this)
{
  return MEMORY[0x24BED9190](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadCount(capabilities::abs *this)
{
  return MEMORY[0x24BED91A0](this);
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x24BED91B0](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x24BED92A8](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x24BED92C0](this);
}

uint64_t Ari::Log(Ari *this, uint64_t a2, const char *a3, ...)
{
  return MEMORY[0x24BECE808](this, a2, a3);
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x24BED97E8]();
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x24BED9850]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x24BED9858](this, a2, a3);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x24BED9868](this);
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x24BED9918]();
}

uint64_t ctu::LogMessageBuffer::createWithFormat(ctu::LogMessageBuffer *this, const char *a2, ...)
{
  return MEMORY[0x24BED9978](this, a2);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x24BED9998](this);
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel()
{
  return MEMORY[0x24BED99A8]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x24BED99B0]();
}

uint64_t ctu::isProcessRunning()
{
  return MEMORY[0x24BED99D0]();
}

uint64_t ctu::DispatchTimerService::create()
{
  return MEMORY[0x24BED9A30]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x24BED9CA0](this);
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x24BED9CB8](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x24BED9CC0]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x24BED9CC8]();
}

uint64_t AriMsg::GetBufCtx(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECE888](this, a2);
}

uint64_t AriOsa::LogSrcInfo(AriOsa *this, const char *a2, const char *a3)
{
  return MEMORY[0x24BECE8C0](this, a2, a3);
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBReq_SDK::ARI_IBIFilerHSReadBBReq_SDK(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this)
{
  return MEMORY[0x24BECF1C0](this);
}

void AriSdk::ARI_IBIFilerHSReadBBReq_SDK::~ARI_IBIFilerHSReadBBReq_SDK(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this)
{
  MEMORY[0x24BECF1C8](this);
}

uint64_t AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::ARI_IBIFilerHSWriteBBReq_SDK(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this)
{
  return MEMORY[0x24BECF4F0](this);
}

void AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::~ARI_IBIFilerHSWriteBBReq_SDK(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this)
{
  MEMORY[0x24BECF4F8](this);
}

uint64_t AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::ARI_IBIFilerHSEndBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this)
{
  return MEMORY[0x24BED0858](this);
}

void AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::~ARI_IBIFilerHSEndBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this)
{
  MEMORY[0x24BED0860](this);
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::ARI_IBIFilerHSReadBBGetSizeReq_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this)
{
  return MEMORY[0x24BED0B88](this);
}

void AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::~ARI_IBIFilerHSReadBBGetSizeReq_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this)
{
  MEMORY[0x24BED0B90](this);
}

uint64_t AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::ARI_IBIFilerHSStartReadBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this)
{
  return MEMORY[0x24BED1658](this);
}

void AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::~ARI_IBIFilerHSStartReadBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this)
{
  MEMORY[0x24BED1660](this);
}

uint64_t AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::ARI_IBIFilerHSStartWriteBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this)
{
  return MEMORY[0x24BED1780](this);
}

void AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::~ARI_IBIFilerHSStartWriteBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this)
{
  MEMORY[0x24BED1788](this);
}

uint64_t AriHost::StartStream()
{
  return MEMORY[0x24BED1C60]();
}

uint64_t AriHost::RegisterClient(AriHost *this, const char *a2, int *a3, dispatch_queue_s *a4)
{
  return MEMORY[0x24BED1C70](this, a2, a3, a4);
}

{
  return MEMORY[0x24BED1C78](this, a2, a3, a4);
}

uint64_t AriHost::DeregisterClient(AriHost *this)
{
  return MEMORY[0x24BED1C90](this);
}

uint64_t AriHost::ReRegisterClient()
{
  return MEMORY[0x24BED1C98]();
}

uint64_t AriHost::SetRTEventHandler()
{
  return MEMORY[0x24BED1CA8]();
}

uint64_t AriHost::Init(AriHost *this)
{
  return MEMORY[0x24BED1CB8](this);
}

uint64_t AriHost::Send()
{
  return MEMORY[0x24BED1CC0]();
}

uint64_t AriHost::EndStream(AriHost *this)
{
  return MEMORY[0x24BED1CD8](this);
}

uint64_t hsfiler::ARICommandDriver::EndSession()
{
  return MEMORY[0x24BED4E40]();
}

uint64_t hsfiler::ARICommandDriver::GetReadSize()
{
  return MEMORY[0x24BED4E48]();
}

uint64_t hsfiler::ARICommandDriver::WriteFileToBB()
{
  return MEMORY[0x24BED4E50]();
}

uint64_t hsfiler::ARICommandDriver::ReadFileFromBB()
{
  return MEMORY[0x24BED4E58]();
}

uint64_t hsfiler::ARICommandDriver::StartReadSession()
{
  return MEMORY[0x24BED4E60]();
}

uint64_t hsfiler::ARICommandDriver::StartWriteSession()
{
  return MEMORY[0x24BED4E68]();
}

uint64_t hsfiler::ARICommandDriver::ARICommandDriver()
{
  return MEMORY[0x24BED4E70]();
}

void hsfiler::ARICommandDriver::~ARICommandDriver(hsfiler::ARICommandDriver *this)
{
  MEMORY[0x24BED4E78](this);
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog()
{
  return MEMORY[0x24BED9DC0]();
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x24BED9E60](this);
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x24BED9E68](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE28]();
}

{
  return MEMORY[0x24BEDAE30]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF78]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete[](void *__p)
{
  off_251CC2340(__p);
}

void operator delete(void *__p)
{
  off_251CC2348(__p);
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_251CC2350(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_251CC2358(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x24BDACBA8]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x24BDADCA8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC8](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCD8](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCF0](queue, context, work);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x24BDADDB0](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED8](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x24BDADF00](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x24BDADF18](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x24BDADF20](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x24BDADF58](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x24BDADFE0](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x24BDAE6E8]();
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x24BDAEC70](*(_QWORD *)&target, address, size, *(_QWORD *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x24BDAEC78](*(_QWORD *)&target, address, size);
}

kern_return_t mach_vm_inherit(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_inherit_t new_inheritance)
{
  return MEMORY[0x24BDAEC80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&new_inheritance);
}

kern_return_t mach_vm_protect(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, BOOLean_t set_maximum, vm_prot_t new_protection)
{
  return MEMORY[0x24BDAEC98](*(_QWORD *)&target_task, address, size, *(_QWORD *)&set_maximum, *(_QWORD *)&new_protection);
}

kern_return_t mach_vm_region(vm_map_read_t target_task, mach_vm_address_t *address, mach_vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name)
{
  return MEMORY[0x24BDAECA8](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flavor, info, infoCnt, object_name);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x24BDAFED0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

