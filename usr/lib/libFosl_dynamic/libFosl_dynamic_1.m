uint64_t sub_216B8F20C(uint64_t result)
{
  *(_WORD *)(result + 244) |= 0x20u;
  return result;
}

uint64_t sub_216B8F21C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_216B8F224(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 7) & 1;
}

uint64_t sub_216B8F230(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 9) & 1;
}

uint64_t sub_216B8F23C(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 244)) & 1;
}

uint64_t sub_216B8F248(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = sub_216B90214(a2);
  return sub_216B2CCE8(a1, v3);
}

_QWORD *sub_216B8F274(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  int v6;
  uint64_t v8[2];

  v6 = sub_216B1E4E0(a3);
  sub_216B26D14(v8);
  return sub_216B900F4(a1, a2, (uint64_t)a3, v6, 0, v8[0], v8[1]);
}

uint64_t sub_216B8F2DC(uint64_t result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_WORD *)(result + 244) = *(_WORD *)(result + 244) & 0xFDFF | v2;
  return result;
}

uint64_t sub_216B8F2FC(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = sub_216B90214(a2);
  return sub_216B2CA24(a1, v3);
}

uint64_t sub_216B8F328(uint64_t result, uint64_t a2, int a3)
{
  if (*(_QWORD *)(result + 8) || *(_BYTE *)(result + 2))
    return sub_216B90150(result);
  *(_WORD *)result = 257;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

uint64_t sub_216B8F354(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    return sub_216B90150(result);
  *(_WORD *)result = 0;
  return result;
}

uint64_t sub_216B8F368(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = sub_216B8F394(a1, 0, a3, a4, a5, a6);
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_216B8F394(uint64_t a1, char a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8;
  int v9;
  int v10;
  _QWORD v12[2];

  v12[0] = a5;
  v12[1] = a6;
  *(_QWORD *)a1 = 0;
  v8 = a2 & 3 | (32 * (a4 != 0)) | *(_DWORD *)(a1 + 12) & 0xFFFFFFC0 | 0x10;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = v8;
  v9 = sub_216B1E67C((uint64_t)v12);
  v10 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v10 & 0x3F | (v9 << 6);
  if ((v10 & 0x20) != 0)
  {
    *(_DWORD *)sub_216B8F444(a1) = a4;
    sub_216B1E600((uint64_t)v12);
    sub_216B8F494(v12);
    sub_216B8F47C();
  }
  return a1;
}

uint64_t sub_216B8F444(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B7CB0C(a1);
  if (v2)
    return v2 + 24;
  else
    return sub_216B3DB48(a1) + 16;
}

uint64_t sub_216B8F47C()
{
  uint64_t v0;

  sub_216B8F4A0();
  return v0;
}

uint64_t sub_216B8F494(_QWORD *a1)
{
  return *a1 + 4 * a1[1];
}

uint64_t sub_216B8F4A4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_216B8F394(a1, 1, a2, a3, a4, a5);
}

uint64_t sub_216B8F4BC(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  int v7;
  uint64_t v8[2];

  sub_216B26D14(v8);
  result = sub_216B8F394(a1, 2, a2, 0, v8[0], v8[1]);
  if (a3)
    v7 = 16;
  else
    v7 = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 12) & 0xFFFFFFEF | v7;
  return result;
}

uint64_t sub_216B8F530(uint64_t result, char a2)
{
  *(_BYTE *)(result + 10) = a2;
  return result;
}

uint64_t sub_216B8F538(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)sub_216B5F148(a1);
  sub_216B5F160(a1);
  return v2;
}

uint64_t sub_216B8F568(uint64_t a1, uint64_t a2)
{
  if (a1)
    return sub_216B750C8(a1) ^ 1;
  else
    return a2 != 0;
}

uint64_t sub_216B8F590(uint64_t result, uint64_t a2)
{
  __int16 v2;

  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = (*(_BYTE *)(a2 + 436) & 0x20) != 0;
  v2 = *(_WORD *)(a2 + 436);
  if ((v2 & 0x40) != 0)
    *(_WORD *)(a2 + 436) = v2 & 0xFFDF;
  return result;
}

_BYTE *sub_216B8F5B4(_BYTE *result)
{
  *(_WORD *)(*(_QWORD *)result + 436) = *(_WORD *)(*(_QWORD *)result + 436) & 0xFFDF | (32 * (result[8] & 7));
  return result;
}

uint64_t sub_216B8F5D4(uint64_t result, uint64_t a2, char a3, int a4)
{
  char v4;

  if (a4)
    v4 = 4;
  else
    v4 = 0;
  *(_BYTE *)(result + 8) = v4 & 0xFC | a3 & 3 | *(_BYTE *)(result + 8) & 0xC0;
  *(_QWORD *)result = a2;
  return result;
}

uint64_t sub_216B8F5FC(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18[5];
  uint64_t v19;

  v19 = a2;
  v5 = *a1;
  v18[0] = sub_216B2C910(a1);
  v6 = v5 + 16 * sub_216B8F760((uint64_t)&v19, (uint64_t)v18);
  v7 = a1[1];
  if (v7 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, v8))
  {
    v14 = sub_216B2C144((uint64_t)a1, v9);
    v15 = sub_216B2D0E0(a1);
    v16 = sub_216B2E6A0(a1, v15 + 1);
    sub_216B2E718(v18, v16, (uint64_t)(v6 - *a1) >> 4, v14);
    sub_216B8F8C8(v18, a3);
    v6 = sub_216B8FA60(a1, v18, v6);
    sub_216B2E808(v18);
  }
  else
  {
    v10 = a1[1];
    if (v6 == v10)
    {
      sub_216B8F794((uint64_t)a1, a3);
    }
    else
    {
      sub_216B8F804((uint64_t)a1, v6, v10, v6 + 16);
      v12 = nullsub_1(a3, v11);
      if (v6 <= v12)
        v12 += 16 * (v12 < a1[1]);
      v13 = *(_QWORD *)v12;
      *(_BYTE *)(v6 + 8) = *(_BYTE *)(v12 + 8);
      *(_QWORD *)v6 = v13;
    }
  }
  return sub_216B2A914((uint64_t)a1, v6);
}

uint64_t sub_216B8F734(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  sub_216B900A4(&v3, a2);
  return v3;
}

uint64_t sub_216B8F760(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return (v3 - sub_216B1E600(a2)) >> 4;
}

_QWORD *sub_216B8F794(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B6B840(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = (__n128 *)nullsub_1(v10, v6);
  sub_216B2E67C(v5, v7, a2);
  v10 += 16;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B8F804(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v14;
  uint64_t v15;

  v6 = (__n128 *)(a2 + *(_QWORD *)(a1 + 8) - a4);
  sub_216B6B840(&v14, a1, (uint64_t)(a3 - (_QWORD)v6) >> 4);
  if (a3 > (unint64_t)v6)
  {
    v8 = v15;
    v9 = v6;
    do
    {
      v10 = sub_216B2C144(a1, v7);
      v12 = (__n128 *)nullsub_1(v8, v11);
      sub_216B2E67C(v10, v12, v9++);
      v8 += 16;
      v15 = v8;
    }
    while ((unint64_t)v9 < a3);
  }
  sub_216B2C330(&v14);
  return sub_216B8FB80();
}

void sub_216B8F8C8(uint64_t *a1, __n128 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;

  v4 = a1 + 2;
  v5 = a1[2];
  if (v5 == *(_QWORD *)sub_216B2C5EC((uint64_t)a1, (uint64_t)a2))
  {
    v7 = a1[1];
    if (v7 <= *a1)
    {
      v22 = (*(_QWORD *)sub_216B2C5EC((uint64_t)a1, v6) - *a1) >> 3;
      v25 = 1;
      v11 = *(_QWORD *)sub_216B25C44(&v22, &v25);
      v12 = sub_216B2C5E4((uint64_t)a1);
      sub_216B2E718(&v22, v11, v11 >> 2, v12);
      sub_216B20C64(&v21, a1[1]);
      sub_216B20C64(&v20, a1[2]);
      sub_216B8FCCC((uint64_t)&v22, v21, v20);
      sub_216B20BF4(a1, &v22);
      sub_216B20BF4(a1 + 1, &v23);
      sub_216B20BF4(v4, v24);
      v14 = (uint64_t *)sub_216B2C5EC((uint64_t)a1, v13);
      v16 = (uint64_t *)sub_216B2C5EC((uint64_t)&v22, v15);
      sub_216B20BF4(v14, v16);
      sub_216B2E808(&v22);
    }
    else
    {
      v8 = (uint64_t)(v7 - *a1) >> 4;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      *v4 = sub_216B8FCB4();
      a1[1] -= 16 * v10;
    }
  }
  v17 = sub_216B2C5E4((uint64_t)a1);
  v19 = (__n128 *)nullsub_1(a1[2], v18);
  sub_216B2E67C(v17, v19, a2);
  a1[2] += 16;
}

uint64_t sub_216B8FA60(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  nullsub_1(a1, a2);
  v6 = a2[1];
  sub_216B2C144((uint64_t)a1, v7);
  sub_216B2C730(&v18, a3);
  sub_216B2C730(&v17, *a1);
  sub_216B2C730(&v16, a2[1]);
  v19[0] = sub_216B8FEEC();
  v19[1] = v8;
  a2[1] = sub_216B1E67C((uint64_t)v19);
  sub_216B2C144((uint64_t)a1, v9);
  a2[2] = sub_216B8FF08();
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v11 = (uint64_t *)sub_216B2C144((uint64_t)a1, v10);
  v13 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v12);
  sub_216B20BF4(v11, v13);
  *a2 = a2[1];
  v14 = sub_216B2D0E0(a1);
  nullsub_1(a1, v14);
  return v6;
}

uint64_t sub_216B8FB80()
{
  uint64_t v0;

  sub_216B8FB98();
  return v0;
}

uint64_t sub_216B8FBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = j_j_nullsub_1(a3);
  v9 = sub_216B8FC2C((uint64_t)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B8FC2C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  return sub_216B8FC3C(a2, a3, a4);
}

uint64_t sub_216B8FC3C(const void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)(a3 - (a2 - (_QWORD)a1));
  v5 = a2;
  sub_216B8FC80(v4, a1, (a2 - (uint64_t)a1) >> 4);
  return sub_216B206E0((uint64_t)&v5, (uint64_t)&v4);
}

void *sub_216B8FC80(void *__dst, const void *a2, uint64_t a3)
{
  if (a3)
    memmove(__dst, a2, 16 * a3 - 7);
  return __dst;
}

uint64_t sub_216B8FCB4()
{
  uint64_t v0;

  sub_216B8FD04();
  return v0;
}

uint64_t sub_216B8FCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B8FE94(a2, a3);
  return sub_216B8FDFC(a1, a2, v5);
}

uint64_t sub_216B8FD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (char *)j_j_nullsub_1(a3);
  v9 = sub_216B8FD98((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B8FD98(int a1, const void *a2, uint64_t a3, char *__dst)
{
  return sub_216B8FDA8(a2, a3, __dst);
}

uint64_t sub_216B8FDA8(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216B8FC80(__dst, a1, (a2 - (uint64_t)a1) >> 4);
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

uint64_t sub_216B8FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  _QWORD v9[3];
  uint64_t v10;

  v10 = a2;
  sub_216B8FE98(v9, (_QWORD *)(a1 + 16), a3);
  while (v9[0] != v9[1])
  {
    v4 = sub_216B2C5E4(a1);
    v6 = (__n128 *)nullsub_1(v9[0], v5);
    v7 = (__n128 *)sub_216B1E600((uint64_t)&v10);
    sub_216B2E67C(v4, v6, v7);
    v9[0] += 16;
    sub_216B8FE9C(&v10);
  }
  return sub_216B701B0((uint64_t)v9);
}

_QWORD *sub_216B8FE9C(_QWORD *result)
{
  *result += 16;
  return result;
}

_QWORD *sub_216B8FEAC(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  *result = *a2;
  result[1] = *a2 + 16 * a3;
  result[2] = a2;
  return result;
}

uint64_t sub_216B8FEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return sub_216B8F760((uint64_t)&v3, (uint64_t)&v4);
}

uint64_t sub_216B8FEEC()
{
  return sub_216B8FF18();
}

uint64_t sub_216B8FF08()
{
  return sub_216B8FCB4();
}

uint64_t sub_216B8FF18()
{
  _QWORD v1[3];

  sub_216B8FF3C(v1);
  return v1[2];
}

uint64_t sub_216B8FF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B90010(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216B90010@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  while (sub_216B2C76C((uint64_t)v15, (uint64_t)v14))
  {
    v9 = sub_216B2EB68((uint64_t)v15, v8);
    v10 = sub_216B2CFB0((uint64_t)v13);
    v11 = *(_BYTE *)(v9 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v9;
    *(_BYTE *)(v10 + 8) = v11;
    sub_216B2EB8C((uint64_t)v15);
    sub_216B2EB8C((uint64_t)v13);
  }
  return sub_216B26D04((uint64_t)v15, (uint64_t)v13, a7);
}

_QWORD *sub_216B900A4(_QWORD *result, uint64_t a2)
{
  *result += 16 * a2;
  return result;
}

uint64_t sub_216B900B4(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;

  v4 = a2;
  result = sub_216B1E4E0(&v4);
  *(_DWORD *)(a1 + 4) = result;
  return result;
}

uint64_t sub_216B900E8(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, 8 * a2, 8);
}

_QWORD *sub_216B900F4(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v9;

  v9 = (_QWORD *)sub_216B899DC(a1, a3, a4, a5, a6, a7);
  sub_216B94248(a1, a2, v9);
  return v9;
}

uint64_t sub_216B90150(uint64_t result)
{
  *(_WORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_216B90160(uint64_t a1)
{
  return sub_216B2A8C8(a1, 0x10u);
}

uint64_t sub_216B90168(uint64_t a1)
{
  return sub_216B66D4C(a1, 3u);
}

unint64_t sub_216B90174(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v3 = result;
  if (result != a2)
  {
    v2 = a2 - 16;
    if (a2 - 16 > result)
    {
      do
      {
        result = sub_216B901CC(&v3, &v2);
        v2 -= 16;
        v3 += 16;
      }
      while (v3 < v2);
    }
  }
  return result;
}

uint64_t sub_216B901CC(_QWORD *a1, _QWORD *a2)
{
  return sub_216B901D8(*a1, *a2);
}

int *sub_216B901E0(uint64_t a1, uint64_t a2)
{
  sub_216B20BF4((uint64_t *)a1, (uint64_t *)a2);
  return sub_216B2CE38((int *)(a1 + 8), (int *)(a2 + 8));
}

uint64_t sub_216B9020C(uint64_t a1)
{
  return sub_216B2F340(a1, 0x20u);
}

uint64_t sub_216B90214(unsigned int a1)
{
  unsigned int v2;

  v2 = a1;
  return sub_216B90238(&v2);
}

uint64_t sub_216B90238(unsigned int *a1)
{
  return sub_216B1E4E0(a1);
}

uint64_t sub_216B90250(uint64_t a1, _QWORD *a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _BYTE v12[16];
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16[6];
  unsigned int v17[6];
  _BYTE v18[16];

  LOBYTE(v15) = 1;
  sub_216B7B03C((uint64_t)v18, (_BYTE *)(a1 + 438), &v15);
  v4 = *(_WORD *)(a1 + 436) & 0x20;
  *(_WORD *)(a1 + 436) &= ~0x20u;
  sub_216B70D84(v17);
  sub_216B903E0(a1, (uint64_t)v17);
  v5 = sub_216B27CB0(a1);
  v6 = sub_216B9041C(v5);
  sub_216B90424((uint64_t)&v15, v6);
  if (!sub_216B90428(&v15, v17, &v13, 1, a1))
  {
    if (sub_216B71174((uint64_t)v17, 2))
    {
      if (v13 == 1)
        *a2 = v14;
    }
    else
    {
      v8 = sub_216B91808(59);
      v9 = sub_216B90D88((uint64_t)&v15, v8, v17, 1u, a1);
      v7 = sub_216B7214C((uint64_t)v17, 2);
      if (v9)
        goto LABEL_7;
      if (v7)
      {
        sub_216B7B558(a1, v17, 714, (uint64_t)v12);
        sub_216B4B3B4(v12);
        sub_216B89B78(a1);
      }
    }
    *(_WORD *)(a1 + 436) = *(_WORD *)(a1 + 436) & 0xFFDF | v4;
    v10 = sub_216B90D70(v16, 0);
    goto LABEL_13;
  }
  v7 = sub_216B7214C((uint64_t)v17, 2);
LABEL_7:
  if (v7)
    sub_216B89B78(a1);
  v10 = 0;
  *(_WORD *)(a1 + 436) = *(_WORD *)(a1 + 436) & 0xFFDF | v4;
LABEL_13:
  sub_216B918B0((uint64_t)&v15);
  sub_216B7B11C((uint64_t)v18);
  return v10;
}

uint64_t sub_216B903E0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  do
  {
    sub_216B9C594(a1, a2);
    result = sub_216B71644(a2);
  }
  while ((_DWORD)result == 5);
  return result;
}

uint64_t sub_216B9041C(uint64_t a1)
{
  return sub_216B69634(a1, *(_DWORD *)(a1 + 224));
}

uint64_t sub_216B90428(_DWORD *a1, unsigned int *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int v51;
  _BYTE v52[24];
  uint64_t v53[3];
  _QWORD v54[2];
  char v55;
  _BYTE v56[16];
  _BYTE v57[16];
  _BYTE v58[16];
  _BYTE v59[16];
  uint64_t v60[14];
  char v61;
  char v62;
  char v63;
  char v64;
  const void *v65[11];
  _BYTE v66[16];
  _BYTE v67[16];

  *a3 = 2;
  if (sub_216B71174((uint64_t)a2, 3))
  {
    if (sub_216B9191C(a5))
    {
      v10 = sub_216B9191C(a5);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    sub_216B89F40(a5);
    sub_216B903E0(a5, (uint64_t)a2);
  }
  v11 = sub_216B7068C((uint64_t)a2);
  if (!v11)
  {
    v14 = sub_216B71644((uint64_t)a2);
    switch(v14)
    {
      case 8:
        sub_216B341A0(v65);
        v52[0] = 0;
        v27 = sub_216B9BC28(a5, a2, v65, v52);
        if (v52[0])
        {
          v16 = 1;
          goto LABEL_81;
        }
        v36 = v27;
        v37 = v28;
        v38 = sub_216B1E4E0(a2);
        sub_216B784F0((uint64_t)v60, v36, v37, v38, a5);
        if (v61)
          goto LABEL_68;
        if (sub_216B783DC((uint64_t)v60) || v64)
        {
          sub_216B7B558(a5, a2, 725, (uint64_t)v59);
          sub_216B4B3B4(v59);
LABEL_68:
          v16 = 1;
LABEL_69:
          sub_216B91CB0((uint64_t)v60);
          goto LABEL_81;
        }
        if (sub_216B91CA0((uint64_t)v60))
        {
          sub_216B7B558(a5, a2, 733, (uint64_t)v53);
          sub_216B77520(v53, 1);
          sub_216B4B3B4(v53);
        }
        if ((*(_BYTE *)sub_216B5EE7C(a5) & 1) == 0 && v63)
        {
          if ((*(_BYTE *)sub_216B5EE7C(a5) & 0x40) != 0)
          {
            if ((*(_QWORD *)sub_216B5EE7C(a5) & 0x80) != 0)
              v43 = 63;
            else
              v43 = 39;
            v39 = v58;
            v40 = v58;
            v41 = a5;
            v42 = a2;
          }
          else
          {
            v39 = v57;
            v40 = v57;
            v41 = a5;
            v42 = a2;
            v43 = 38;
          }
          sub_216B7B558(v41, v42, v43, (uint64_t)v40);
          sub_216B4B3B4(v39);
        }
        if (sub_216B78708((uint64_t)v60, a1 + 2))
        {
          if ((_DWORD)a4)
          {
            sub_216B7B558(a5, a2, 15, (uint64_t)v53);
            sub_216B77520(v53, 1);
            v50 = v53;
LABEL_91:
            sub_216B4B3B4(v50);
          }
        }
        else
        {
          sub_216B91C68((uint64_t)(a1 + 2), v62);
          if (v62 || !sub_216B1E520(a1 + 2))
            goto LABEL_98;
          if ((_DWORD)a4 && sub_216B91CA8((uint64_t)v60) == 10)
          {
            sub_216B7B558(a5, a2, 40, (uint64_t)v56);
            v50 = (uint64_t *)v56;
            goto LABEL_91;
          }
        }
        sub_216B91C68((uint64_t)(a1 + 2), 1);
LABEL_98:
        v51 = sub_216B1E4E0(a2);
        sub_216B91C70(a1, v51);
        sub_216B903E0(a5, (uint64_t)a2);
        v16 = 0;
        goto LABEL_69;
      case 9:
      case 10:
      case 11:
      case 12:
        if (sub_216B820A0((uint64_t)a2))
        {
          sub_216B7B558(a5, a2, 733, (uint64_t)v60);
          sub_216B77520(v60, 0);
          sub_216B4B3B4(v60);
        }
        sub_216B29078(v65);
        v55 = 0;
        v54[0] = sub_216B9BC28(a5, a2, v65, &v55);
        v54[1] = v15;
        if (v55)
        {
          v16 = 1;
        }
        else
        {
          v20 = sub_216B1E600((uint64_t)v54);
          v21 = sub_216B1E608(v54);
          v22 = sub_216B1E4E0(a2);
          v23 = sub_216B71644((uint64_t)a2);
          sub_216B7980C((uint64_t)v60, v20, v21, v22, a5, v23);
          v16 = sub_216B91CB4((uint64_t)v60);
          if ((v16 & 1) == 0)
          {
            v24 = sub_216B27CB0(a5);
            if (sub_216B79804((uint64_t)v60))
            {
              v25 = sub_216B69624(v24);
            }
            else if (sub_216B797F4((uint64_t)v60))
            {
              v25 = sub_216B78FFC(v24);
            }
            else if (sub_216B91CBC((uint64_t)v60))
            {
              v25 = sub_216B7A938(v24);
            }
            else if (sub_216B91CCC((uint64_t)v60))
            {
              v25 = sub_216B7A940(v24);
            }
            else
            {
              v25 = sub_216B3DE34();
            }
            sub_216B918EC(v53, v25, 1);
            v45 = sub_216B1E600((uint64_t)v60);
            sub_216B91C44((uint64_t)v53, v45);
            if (!sub_216B91CBC((uint64_t)v60) && !sub_216B91CCC((uint64_t)v60))
            {
              v46 = (*(_WORD *)(sub_216B5EE7C(a5) + 16) & 0x800) == 0;
              sub_216B91C68((uint64_t)v53, v46);
            }
            v47 = sub_216B1E4E0(a1 + 2);
            if (v47 <= sub_216B1E4E0((unsigned int *)v53))
            {
              sub_216B91D84((uint64_t)(a1 + 2), (uint64_t)v53);
            }
            else
            {
              v48 = sub_216B1E4E0(a1 + 2);
              sub_216B91CDC((uint64_t)v53, v48, (uint64_t)v52);
              sub_216B91D50((uint64_t)(a1 + 2), (uint64_t)v52);
              sub_216B91D80(v52);
            }
            v49 = sub_216B1E4E0(a2);
            sub_216B91C70(a1, v49);
            sub_216B903E0(a5, (uint64_t)a2);
            sub_216B91D80(v53);
          }
          sub_216B91DB4((uint64_t)v60);
        }
LABEL_81:
        sub_216B2489C(v65);
        return v16;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_28:
        sub_216B7B558(a5, a2, 720, (uint64_t)v67);
        v26 = v67;
        goto LABEL_29;
      case 21:
        v29 = sub_216B1E4E0(a2);
        sub_216B903E0(a5, (uint64_t)a2);
        if ((sub_216B90428(a1, a2, a3, a4, a5) & 1) != 0)
          return 1;
        if (sub_216B71174((uint64_t)a2, 22))
          goto LABEL_71;
        v16 = 1;
        if ((sub_216B90D88((uint64_t)a1, 1u, a2, a4, a5) & 1) != 0)
          return v16;
        if (sub_216B7214C((uint64_t)a2, 22))
        {
          v30 = sub_216B1E4E0(a2);
          sub_216B720D8(a5, v30, 716, (uint64_t)v60);
          sub_216B7A280(v60, (uint64_t *)a1);
          sub_216B4B3B4(v60);
          sub_216B720D8(a5, v29, 50, (uint64_t)v60);
          sub_216B89E2C(v60, 0x15u);
          sub_216B4B3B4(v60);
          return v16;
        }
        *a3 = 2;
LABEL_71:
        v44 = sub_216B1E4E0(a2);
        sub_216B91DB8(a1, v29, v44);
        goto LABEL_18;
      case 22:
LABEL_27:
        sub_216B7B558(a5, a2, 717, (uint64_t)v66);
        v26 = v66;
LABEL_29:
        sub_216B4B3B4(v26);
        return 1;
      default:
        switch(v14)
        {
          case ' ':
            v19 = sub_216B1E4E0(a2);
            sub_216B903E0(a5, (uint64_t)a2);
            if ((sub_216B90428(a1, a2, a3, a4, a5) & 1) != 0)
              return 1;
            sub_216B71E2C(a1, v19);
            return 0;
          case '!':
          case '"':
          case '$':
          case '%':
          case '&':
            goto LABEL_28;
          case '#':
            v31 = sub_216B1E4E0(a2);
            sub_216B903E0(a5, (uint64_t)a2);
            if ((sub_216B90428(a1, a2, a3, a4, a5) & 1) != 0)
              return 1;
            sub_216B71E2C(a1, v31);
            sub_216B91DE8((uint64_t)(a1 + 2), (uint64_t)v60);
            sub_216B91D50((uint64_t)(a1 + 2), (uint64_t)v60);
            sub_216B91D80(v60);
            if ((sub_216B91E30((uint64_t)a1) & 1) == 0 && sub_216B24080((uint64_t)(a1 + 2)) && (_DWORD)a4)
            {
              sub_216B720D8(a5, v31, 888, (uint64_t)v60);
              sub_216B7A280(v60, (uint64_t *)a1);
              sub_216B4B3B4(v60);
            }
            goto LABEL_45;
          case '\'':
            v32 = sub_216B1E4E0(a2);
            sub_216B903E0(a5, (uint64_t)a2);
            if ((sub_216B90428(a1, a2, a3, a4, a5) & 1) != 0)
              return 1;
            sub_216B71E2C(a1, v32);
            sub_216B91E38((uint64_t)(a1 + 2), (uint64_t)v60);
            sub_216B91D50((uint64_t)(a1 + 2), (uint64_t)v60);
            sub_216B91D80(v60);
LABEL_45:
            v16 = 0;
            v33 = 2;
            goto LABEL_46;
          case '(':
            v34 = sub_216B1E4E0(a2);
            sub_216B903E0(a5, (uint64_t)a2);
            if ((sub_216B90428(a1, a2, a3, a4, a5) & 1) != 0)
              return 1;
            sub_216B71E2C(a1, v34);
            v35 = sub_216B2238C((uint64_t)(a1 + 2));
            sub_216B91C44((uint64_t)(a1 + 2), v35);
            sub_216B91C68((uint64_t)(a1 + 2), 0);
            if (*a3 == 1)
            {
              v16 = 0;
              *a3 = 0;
            }
            else
            {
              v16 = 0;
              if (!*a3)
              {
                v16 = 0;
                v33 = 1;
LABEL_46:
                *a3 = v33;
              }
            }
            break;
          default:
            if (v14 == 2)
              goto LABEL_27;
            goto LABEL_28;
        }
        return v16;
    }
  }
  v12 = (_DWORD *)v11;
  if (sub_216B91924(v11, "defined"))
    return sub_216B9197C(a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  if ((_DWORD)a4 && sub_216B91C38(v12) != 145 && sub_216B91C38(v12) != 131)
  {
    sub_216B7B558(a5, a2, 890, (uint64_t)v60);
    sub_216B89E58(v60, (uint64_t)v12);
    sub_216B4B3B4(v60);
  }
  v17 = sub_216B91C38(v12) == 145;
  sub_216B91C44((uint64_t)(a1 + 2), v17);
  sub_216B91C68((uint64_t)(a1 + 2), 0);
  v18 = sub_216B1E4E0(a2);
  sub_216B91C70(a1, v18);
LABEL_18:
  sub_216B903E0(a5, (uint64_t)a2);
  return 0;
}

uint64_t sub_216B90D70(unsigned int *a1, uint64_t a2)
{
  return sub_216B91F5C(a1, a2) ^ 1;
}

uint64_t sub_216B90D88(uint64_t a1, unsigned int a2, unsigned int *a3, unsigned int a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL8 v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  _QWORD *v29;
  char v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  std::string v37;
  uint64_t v38[2];
  std::string v39;
  std::string v40;
  std::string v41;
  uint64_t v42[2];
  uint64_t v43[2];
  _BYTE v44[24];
  _BYTE v45[16];
  uint64_t v46;
  _DWORD v47[8];

  v8 = sub_216B71644((uint64_t)a3);
  v9 = sub_216B91808(v8);
  if (v9 == -1)
  {
    v32 = sub_216B1E4E0(a3);
    sub_216B720D8(a5, v32, 719, (uint64_t)&v46);
    sub_216B7A280(&v46, (uint64_t *)a1);
    sub_216B4B3B4(&v46);
    return 1;
  }
  v10 = v9;
  v11 = v9 >= a2;
  if (v9 >= a2)
  {
    v12 = sub_216B71644((uint64_t)a3);
    v13 = v12;
    if (v12 != 59)
    {
      if (v12 == 57)
      {
        if ((sub_216B90D70((unsigned int *)(a1 + 8), 0) & 1) != 0)
          goto LABEL_7;
        goto LABEL_9;
      }
      if (v12 != 28)
        goto LABEL_9;
    }
    if ((sub_216B91F5C((unsigned int *)(a1 + 8), 0) & 1) != 0)
    {
LABEL_7:
      v14 = 0;
LABEL_10:
      v15 = sub_216B1E4E0(a3);
      sub_216B903E0(a5, (uint64_t)a3);
      v16 = sub_216B92184(a1);
      v17 = sub_216B90424((uint64_t)&v46, v16);
      if ((sub_216B90428(v17, a3, v45, v14, a5) & 1) == 0)
      {
        v18 = sub_216B71644((uint64_t)a3);
        v19 = sub_216B91808(v18);
        if (v19 == -1)
        {
          v33 = sub_216B1E4E0(a3);
          sub_216B720D8(a5, v33, 719, (uint64_t)&v37);
          sub_216B7A280(&v37, &v46);
          sub_216B4B3B4(&v37);
        }
        else
        {
          v20 = v19;
          if (v13 == 59)
            v21 = sub_216B91808(64);
          else
            v21 = v10 + 1;
          if (v20 < v21)
          {
LABEL_18:
            v23 = sub_216B92184(a1);
            sub_216B918EC(v44, v23, 1);
            if ((v13 - 28) > 0x24 || ((1 << (v13 - 28)) & 0x10A0880001) == 0)
            {
              v24 = sub_216B91E30(a1);
              v25 = sub_216B91E30((uint64_t)&v46);
              sub_216B91C68((uint64_t)v44, v24 | v25);
              if (a4 && sub_216B2A390((uint64_t)v44))
              {
                if ((sub_216B91E30(a1) & 1) == 0 && sub_216B1E520((_DWORD *)(a1 + 8)))
                {
                  sub_216B720D8(a5, v15, 885, (uint64_t)v43);
                  sub_216B247D4((_DWORD *)(a1 + 8), 0xAu, 1, (uint64_t)&v40);
                  sub_216B2B308(&v40, " to ", (uint64_t)&v41);
                  sub_216B247D4((_DWORD *)(a1 + 8), 0xAu, 0, (uint64_t)&v39);
                  sub_216B2B2C8(&v41, (uint64_t)&v39, (uint64_t)&v37);
                  sub_216B26CA0(v42, &v37);
                  v26 = sub_216B4B340(v43, v42[0], v42[1]);
                  v27 = sub_216B7A280(v26, (uint64_t *)a1);
                  sub_216B7A280(v27, &v46);
                  std::string::~string(&v37);
                  std::string::~string(&v39);
                  std::string::~string(&v41);
                  std::string::~string(&v40);
                  sub_216B4B3B4(v43);
                }
                if ((sub_216B91E30((uint64_t)&v46) & 1) == 0 && sub_216B1E520(v47))
                {
                  sub_216B720D8(a5, v15, 886, (uint64_t)v43);
                  sub_216B247D4(v47, 0xAu, 1, (uint64_t)&v40);
                  sub_216B2B308(&v40, " to ", (uint64_t)&v41);
                  sub_216B247D4(v47, 0xAu, 0, (uint64_t)&v39);
                  sub_216B2B2C8(&v41, (uint64_t)&v39, (uint64_t)&v37);
                  sub_216B26CA0(v38, &v37);
                  v28 = sub_216B4B340(v43, v38[0], v38[1]);
                  v29 = sub_216B7A280(v28, (uint64_t *)a1);
                  sub_216B7A280(v29, &v46);
                  std::string::~string(&v37);
                  std::string::~string(&v39);
                  std::string::~string(&v41);
                  std::string::~string(&v40);
                  sub_216B4B3B4(v43);
                }
              }
              v30 = sub_216B2A390((uint64_t)v44);
              sub_216B91C68(a1 + 8, v30);
              v31 = sub_216B2A390((uint64_t)v44);
              sub_216B91C68((uint64_t)v47, v31);
            }
            v40.__r_.__value_.__s.__data_[0] = 0;
            __asm { BR              X9 }
          }
          if ((sub_216B90D88(&v46) & 1) == 0)
          {
            v22 = sub_216B71644((uint64_t)a3);
            sub_216B91808(v22);
            goto LABEL_18;
          }
        }
      }
      sub_216B918B0((uint64_t)&v46);
      return 1;
    }
LABEL_9:
    v14 = a4;
    goto LABEL_10;
  }
  return v11;
}

uint64_t sub_216B91808(int a1)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  switch(a1)
  {
    case 22:
      result = 0;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
    case 29:
    case 31:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 43:
    case 45:
    case 49:
    case 53:
    case 55:
    case 58:
    case 61:
    case 62:
      return result;
    case 27:
      result = 9;
      break;
    case 28:
      result = 6;
      break;
    case 30:
    case 42:
    case 44:
      result = 14;
      break;
    case 32:
    case 35:
      result = 13;
      break;
    case 41:
    case 63:
      result = 10;
      break;
    case 46:
    case 48:
    case 50:
    case 52:
      result = 11;
      break;
    case 47:
    case 51:
      result = 12;
      break;
    case 54:
      result = 8;
      break;
    case 56:
      result = 7;
      break;
    case 57:
      result = 5;
      break;
    case 59:
      result = 4;
      break;
    case 60:
      result = 2;
      break;
    case 64:
      result = 3;
      break;
    default:
      if (a1 == 2)
        result = 0;
      else
        result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_216B918B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B7741C();
  sub_216B918EC(v4 + 8, a2, 1);
  return a1;
}

uint64_t sub_216B918F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = sub_216B20054(a1, a2, 0, 0);
  *(_BYTE *)(result + 16) = a3;
  return result;
}

uint64_t sub_216B9191C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 680);
}

BOOL sub_216B91924(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;

  if (sub_216B4AA80(a1) != 7)
    return 0;
  v4 = (_DWORD *)sub_216B4AA68(a1);
  return *v4 == *a2 && *(_DWORD *)((char *)v4 + 3) == *(_DWORD *)((char *)a2 + 3);
}

uint64_t sub_216B9197C(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  _BOOL4 v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27[2];
  __int128 v28;
  uint64_t v29;
  unsigned int v30;

  v10 = sub_216B1E4E0((unsigned int *)a2);
  sub_216B71E2C(a1, v10);
  sub_216B91E80(a5, a2);
  sub_216B4AED0(&v30);
  if (sub_216B71174(a2, 21))
  {
    v30 = sub_216B1E4E0((unsigned int *)a2);
    sub_216B91E80(a5, a2);
  }
  if (sub_216B71174(a2, 3))
  {
    if (sub_216B9191C(a5))
    {
      v11 = sub_216B9191C(a5);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
    }
    sub_216B89F40(a5);
    sub_216B91E80(a5, a2);
  }
  if ((sub_216B89C00(a5, (unsigned int *)a2, 0) & 1) != 0)
    return 1;
  v13 = sub_216B7068C(a2);
  v14 = sub_216B5E108(v13);
  v15 = a1 + 2;
  sub_216B91C44((uint64_t)(a1 + 2), v14);
  sub_216B91C68((uint64_t)(a1 + 2), 0);
  v16 = 0;
  if (sub_216B90D70(a1 + 2, 0) && a4)
  {
    v16 = sub_216B7B880(a5, v13);
    v17 = (unsigned int *)sub_216B7B8C4(v16);
    sub_216B96174(a5, v17);
  }
  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  v18 = sub_216B27BAC(&v30);
  v19 = sub_216B1E4E0((unsigned int *)a2);
  sub_216B71E4C((uint64_t)a1, v19);
  if (v18)
  {
    sub_216B91E80(a5, a2);
    if (sub_216B7214C(a2, 22))
    {
      v20 = sub_216B1E4E0((unsigned int *)a2);
      sub_216B720D8(a5, v20, 712, (uint64_t)v27);
      v21 = sub_216B60EA8(v27, (uint64_t)"'defined'");
      sub_216B89E2C(v21, 0x16u);
      sub_216B4B3B4(v27);
      sub_216B720D8(a5, v30, 50, (uint64_t)v27);
      sub_216B89E2C(v27, 0x15u);
      sub_216B4B3B4(v27);
      return 1;
    }
    v22 = sub_216B1E4E0((unsigned int *)a2);
    sub_216B71E4C((uint64_t)a1, v22);
  }
  sub_216B903E0(a5, a2);
  v23 = sub_216B91EBC(a5);
  if (v23)
  {
    v24 = v23;
    if (!v16)
    {
      if (sub_216B90D70(v15, 0))
        v16 = sub_216B7B880(a5, v13);
    }
    v25 = sub_216B1E4E0((unsigned int *)a2);
    sub_216B746DC(&v26, v10, v25);
    (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v24 + 192))(v24, &v28, v16, v26);
  }
  result = 0;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v13;
  return result;
}

uint64_t sub_216B91C38(_DWORD *a1)
{
  return *a1 & 0x1FF;
}

uint64_t sub_216B91C44(uint64_t a1, uint64_t a2)
{
  sub_216B21450(a1, a2);
  return a1;
}

uint64_t sub_216B91C68(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_216B91C70(_DWORD *a1, int a2)
{
  sub_216B2A7D8(a1, a2);
  return sub_216B68C9C((uint64_t)a1, a2);
}

uint64_t sub_216B91CA0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 54);
}

uint64_t sub_216B91CA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_216B91CB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11);
}

BOOL sub_216B91CBC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8) == 11;
}

BOOL sub_216B91CCC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8) == 12;
}

uint64_t sub_216B91CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  _BYTE v7[16];
  _BYTE v8[16];

  if (*(_BYTE *)(a1 + 16))
  {
    v5 = v8;
    sub_216B22674(a1, a2, (uint64_t)v8);
  }
  else
  {
    v5 = v7;
    sub_216B22530((int *)a1, a2, (uint64_t)v7);
  }
  sub_216B91EEC(a3, v5, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v5);
}

uint64_t sub_216B91D50(uint64_t a1, uint64_t a2)
{
  sub_216B1E580(a1, (int *)a2);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_216B91D84(uint64_t a1, uint64_t a2)
{
  sub_216B2240C(a1, a2);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_216B91DB8(_DWORD *a1, int a2, int a3)
{
  sub_216B2A7D8(a1, a2);
  return sub_216B68C9C((uint64_t)a1, a3);
}

uint64_t sub_216B91DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v5[16];

  sub_216B1E52C((unsigned int *)a1, (uint64_t)v5);
  sub_216B91EEC(a2, v5, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v5);
}

uint64_t sub_216B91E30(uint64_t a1)
{
  return sub_216B2A390(a1 + 8);
}

uint64_t sub_216B91E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v5[16];

  sub_216B91F40(a1, (uint64_t)v5);
  sub_216B91EEC(a2, v5, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v5);
}

uint64_t sub_216B91E80(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  do
  {
    sub_216B89BC0(a1, a2);
    result = sub_216B71644(a2);
  }
  while ((_DWORD)result == 5);
  return result;
}

uint64_t sub_216B91EBC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 872);
}

uint64_t sub_216B91EC4(uint64_t a1)
{
  sub_216B2489C(a1 + 56);
  return a1;
}

uint64_t sub_216B91EF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = sub_216B24F80(a1, a2);
  *(_BYTE *)(result + 16) = a3;
  return result;
}

uint64_t sub_216B91F18(uint64_t a1)
{
  sub_216B2489C(a1 + 16);
  return a1;
}

uint64_t sub_216B91F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = sub_216B1E51C(a2, a1);
  return sub_216B21F88(v2);
}

uint64_t sub_216B91F5C(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[16];
  unsigned int v6[6];

  sub_216B1E414(v5, 64, a2, 0);
  sub_216B91EEC(v6, v5, 1);
  v3 = sub_216B91FC8(a1, v6);
  sub_216B91D80(v6);
  sub_216B1D998(v5);
  return v3;
}

uint64_t sub_216B91FC8(unsigned int *a1, unsigned int *a2)
{
  int v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v14;
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[24];

  v4 = sub_216B1E4E0(a1);
  if (v4 != sub_216B1E4E0(a2) || (v5 = sub_216B1E4E8((uint64_t)a1), v5 != sub_216B1E4E8((uint64_t)a2)))
  {
    v6 = sub_216B1E4E0(a1);
    if (v6 > sub_216B1E4E0(a2))
    {
      v7 = sub_216B1E4E0(a1);
      sub_216B91CDC((uint64_t)a2, v7, (uint64_t)v17);
      v8 = (unsigned int *)v17;
      v9 = a1;
LABEL_7:
      v12 = sub_216B91FC8(v9, v8);
      sub_216B91D80(v17);
      return v12;
    }
    v10 = sub_216B1E4E0(a2);
    if (v10 > sub_216B1E4E0(a1))
    {
      v11 = sub_216B1E4E0(a2);
      sub_216B91CDC((uint64_t)a1, v11, (uint64_t)v17);
      v9 = (unsigned int *)v17;
      v8 = a2;
      goto LABEL_7;
    }
    if (sub_216B1E4E8((uint64_t)a1))
    {
      if (!sub_216B1E520(a1))
      {
        sub_216B1E51C(v16, a1);
        sub_216B91EEC(v17, v16, 1);
        v12 = sub_216B92180(v17, a2);
        sub_216B91D80(v17);
        v14 = v16;
LABEL_16:
        sub_216B1D998(v14);
        return v12;
      }
    }
    else if (!sub_216B1E520(a2))
    {
      sub_216B1E51C(v15, a2);
      sub_216B91EEC(v17, v15, 1);
      v12 = sub_216B92180(a1, v17);
      sub_216B91D80(v17);
      v14 = v15;
      goto LABEL_16;
    }
    return 0;
  }
  return sub_216B92180(a1, a2);
}

uint64_t sub_216B92184(uint64_t a1)
{
  return sub_216B1E4E0((unsigned int *)(a1 + 8));
}

uint64_t sub_216B9218C@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  _BYTE v10[16];

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = v10;
    sub_216B232D8((unsigned int *)a1, (uint64_t)a2, (uint64_t)v10);
    v5 = v10;
    v6 = a3;
    v7 = 1;
  }
  else
  {
    v4 = v9;
    sub_216B23E14((unsigned int *)a1, a2, (uint64_t)v9);
    v5 = v9;
    v6 = a3;
    v7 = 0;
  }
  sub_216B91EEC(v6, v5, v7);
  return sub_216B1D998(v4);
}

uint64_t sub_216B921F8@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  _BYTE v10[16];

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = v10;
    sub_216B22F54((unsigned int *)a1, (uint64_t)a2, (uint64_t)v10);
    v5 = v10;
    v6 = a3;
    v7 = 1;
  }
  else
  {
    v4 = v9;
    sub_216B23D18((unsigned int *)a1, a2, (uint64_t)v9);
    v5 = v9;
    v6 = a3;
    v7 = 0;
  }
  sub_216B91EEC(v6, v5, v7);
  return sub_216B1D998(v4);
}

uint64_t sub_216B92264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];

  sub_216B21A94((unsigned int *)a1, a2, (uint64_t)v6);
  sub_216B91EEC(a3, v6, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v6);
}

uint64_t sub_216B922AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  _BYTE v10[16];

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = v10;
    sub_216B22A30((unsigned int *)a1, a2, (uint64_t)v10);
    v5 = v10;
    v6 = a3;
    v7 = 1;
  }
  else
  {
    v4 = v9;
    sub_216B22738((unsigned int *)a1, a2, (uint64_t)v9);
    v5 = v9;
    v6 = a3;
    v7 = 0;
  }
  sub_216B91EEC(v6, v5, v7);
  return sub_216B1D998(v4);
}

uint64_t sub_216B92318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];

  sub_216B21B00((unsigned int *)a1, a2, (uint64_t)v6);
  sub_216B91EEC(a3, v6, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v6);
}

uint64_t sub_216B92360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];

  sub_216B21BCC((unsigned int *)a1, a2, (uint64_t)v6);
  sub_216B91EEC(a3, v6, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v6);
}

uint64_t sub_216B923A8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
    return sub_216B22F14(a1, a2);
  else
    return sub_216B924D8(a1, a2);
}

uint64_t sub_216B923B8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
    return sub_216B21D88(a1, a2);
  else
    return sub_216B21E90(a1, a2);
}

uint64_t sub_216B923C8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
    return sub_216B23454(a1, a2);
  else
    return sub_216B92518(a1, a2);
}

uint64_t sub_216B923D8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
    return sub_216B21FF4(a1, a2);
  else
    return sub_216B92530(a1, a2);
}

uint64_t sub_216B923E8()
{
  return sub_216B92180() ^ 1;
}

uint64_t sub_216B92400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];

  sub_216B92570(a1, a2, (uint64_t)v6);
  sub_216B91EEC(a3, v6, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v6);
}

uint64_t sub_216B92448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];

  sub_216B925E0((unsigned int *)a1, a2, (uint64_t)v6);
  sub_216B91EEC(a3, v6, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v6);
}

uint64_t sub_216B92490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];

  sub_216B22EA4(a1, a2, (uint64_t)v6);
  sub_216B91EEC(a3, v6, *(unsigned __int8 *)(a1 + 16));
  return sub_216B1D998(v6);
}

uint64_t sub_216B924D8(uint64_t a1, uint64_t a2)
{
  if (sub_216B21E90(a1, a2))
    return 1;
  else
    return sub_216B24F74(a1, a2);
}

BOOL sub_216B92518(uint64_t a1, uint64_t a2)
{
  return !sub_216B21E90(a1, a2);
}

uint64_t sub_216B92530(uint64_t a1, uint64_t a2)
{
  if (sub_216B21E90(a1, a2))
    return 0;
  else
    return sub_216B24F74(a1, a2) ^ 1;
}

uint64_t sub_216B92570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  if (!sub_216B1FFE8((_DWORD *)a1))
    return sub_216B218DC(a1, a2, a3);
  v6 = sub_216B1E4E0((unsigned int *)a1);
  return sub_216B1E414(a3, v6, *(_QWORD *)(a2 + 8) & *(_QWORD *)(a1 + 8), 0);
}

uint64_t sub_216B925E0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_216B1FFE8(a1))
    return sub_216B1E414(a3, *a1, *(_QWORD *)(a2 + 8) ^ *((_QWORD *)a1 + 1), 0);
  else
    return sub_216B219E8((uint64_t)a1, a2, a3);
}

uint64_t sub_216B92648(uint64_t a1)
{
  sub_216B91D80(a1 + 8);
  return a1;
}

uint64_t sub_216B92678(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = (_QWORD *)(a1 + 848);
  if (sub_216B8AEF0(a1, a2))
    return sub_216B29084(v2);
  v4 = sub_216B882B0(v2);
  if (v4 == 1)
    return 1;
  v5 = 1;
  do
  {
    v6 = sub_216B8AEB8(v2, v5);
    v8 = sub_216B8AEC8(v6, v7);
    if (v8)
      break;
    ++v5;
  }
  while (v4 != (_DWORD)v5);
  return v8 ^ 1u;
}

uint64_t sub_216B92700(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  if (sub_216B8AEF0(a1, a2))
  {
    v3 = a1 + 808;
    return *(_QWORD *)v3;
  }
  else
  {
    v4 = (_QWORD *)(a1 + 848);
    for (i = sub_216B882B0(v4) - 1; i != -1; --i)
    {
      v6 = sub_216B8AEB8(v4, i);
      if (sub_216B8AEC8(v6, v7))
      {
        v3 = v6 + 32;
        return *(_QWORD *)v3;
      }
    }
    return 0;
  }
}

BOOL sub_216B9277C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::string v24;
  uint64_t v25[2];
  uint64_t v26[2];
  char v27;

  ++*(_DWORD *)(a1 + 1356);
  v8 = *(unsigned int *)(a1 + 1360);
  v9 = (_QWORD *)(a1 + 848);
  if (sub_216B882B0((_QWORD *)(a1 + 848)) > v8)
    *(_DWORD *)(a1 + 1360) = sub_216B882B0(v9);
  if (sub_216B3817C(a1 + 96, v10)
    && (v12 = (uint64_t *)sub_216B25CA8(a1 + 96, v11), (v13 = sub_216B99ED0(v12, a2)) != 0))
  {
    sub_216B92954(a1, v13, a3);
    return 0;
  }
  else
  {
    v27 = 0;
    v15 = sub_216B40EE8(a1);
    v16 = a4;
    v17 = sub_216B92A3C(v15, a2, a4, &v27);
    v14 = v27 != 0;
    if (v27)
    {
      v18 = sub_216B64050(*(_QWORD *)(a1 + 48), a2);
      sub_216B720D8(a1, v16, 711, (uint64_t)v26);
      v19 = sub_216B63FB4(*(_DWORD **)(a1 + 48), v18, 0);
      sub_216B26DE8(&v24, v19);
      sub_216B26CA0(v25, &v24);
      v20 = sub_216B4B340(v26, v25[0], v25[1]);
      sub_216B60EA8(v20, (uint64_t)&byte_216C19659);
      std::string::~string(&v24);
      sub_216B4B3B4(v26);
    }
    else
    {
      v21 = v17;
      if (sub_216B7548C(a1) && sub_216B81B44(*(_QWORD *)(a1 + 48), a2) == *(_QWORD *)(a1 + 688))
      {
        *(_DWORD *)(a1 + 704) = sub_216B64050(*(_QWORD *)(a1 + 48), a2);
        *(_DWORD *)(a1 + 700) = sub_216B62D74((_DWORD *)(a1 + 704), *(_DWORD *)(a1 + 696));
      }
      v22 = sub_216B1D1D4(408);
      sub_216B7085C(v22, a2, v21, a1);
      sub_216B92ACC(a1, v22, a3);
    }
  }
  return v14;
}

uint64_t sub_216B92954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  if (*(_QWORD *)(a1 + 808) || sub_216B3817C(a1 + 824, a2))
    sub_216B87FB8(a1);
  *(_QWORD *)(a1 + 816) = a3;
  sub_216B3C1E8(a1 + 800, a2);
  result = sub_216B25CA8(a1 + 800, v6);
  *(_QWORD *)(a1 + 808) = result;
  *(_QWORD *)(a1 + 840) = 0;
  if (*(_DWORD *)(a1 + 832) != 4)
    *(_DWORD *)(a1 + 832) = 1;
  if (*(_QWORD *)(a1 + 872))
  {
    v8 = sub_216B4CBC4(result);
    v9 = sub_216B64050(*(_QWORD *)(a1 + 48), v8);
    v10 = v9;
    v11 = sub_216B63EF8(*(_QWORD *)(a1 + 48), v9);
    v12 = *(_QWORD *)(a1 + 872);
    sub_216B4AED0(&v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, v10, 0, v11, v13);
  }
  return result;
}

uint64_t sub_216B92A3C(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v13;

  v13 = 0;
  v7 = (_DWORD *)sub_216B606F0(a1, a2, &v13);
  if (v13 || (v9 = (uint64_t)v7, (sub_216B6081C(v7) & 1) == 0))
  {
    if (a4)
      *a4 = 1;
    return sub_216B62098(a1, v8);
  }
  else
  {
    v10 = sub_216B3DBD0(v9);
    v11 = sub_216B60834(v10);
    return sub_216B609C8(v11, *(_QWORD *)(a1 + 8), a1, a3, a4);
  }
}

uint64_t sub_216B92ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (*(_QWORD *)(a1 + 808) || sub_216B3817C(a1 + 824, a2))
    sub_216B87FB8(a1);
  v6 = a1 + 792;
  result = (uint64_t)sub_216B3C1E8(a1 + 792, a2);
  *(_QWORD *)(a1 + 808) = a2;
  *(_QWORD *)(a1 + 816) = a3;
  *(_QWORD *)(a1 + 840) = 0;
  if (*(_DWORD *)(a1 + 832) != 4)
    *(_DWORD *)(a1 + 832) = 0;
  if (*(_QWORD *)(a1 + 872))
  {
    result = sub_216B25CA8(a1 + 792, v8);
    if (!*(_BYTE *)(result + 384))
    {
      v10 = *(_QWORD *)(a1 + 48);
      v11 = sub_216B25CA8(a1 + 792, v9);
      v12 = sub_216B8A9C0(v11);
      v13 = sub_216B63EF8(v10, v12);
      v14 = *(_QWORD *)(a1 + 872);
      v16 = sub_216B25CA8(v6, v15);
      v17 = sub_216B8A9C0(v16);
      sub_216B4AED0(&v18);
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, v17, 0, v13, v18);
    }
  }
  return result;
}

void sub_216B92BBC(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10;
  unsigned int v11;
  uint64_t v12;

  v10 = *(_DWORD *)(a1 + 1420);
  if (v10)
  {
    v11 = v10 - 1;
    *(_DWORD *)(a1 + 1420) = v11;
    v12 = *(_QWORD *)(a1 + 8 * v11 + 1424);
    sub_216B9D8BC(v12, a2, a3, a4, a5);
  }
  else
  {
    v12 = sub_216B1D1D4(72);
    sub_216B92C7C(v12, a2, a3, a4, a5, a1);
  }
  sub_216B87FB8(a1);
  *(_QWORD *)(a1 + 816) = 0;
  sub_216B887F0(a1 + 824, v12);
  if (*(_DWORD *)(a1 + 832) != 4)
    *(_DWORD *)(a1 + 832) = 2;
}

uint64_t sub_216B92C7C(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_216B93E20(a1, a2, a3, a4, a5, a6);
}

void sub_216B92C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  unsigned int v11;
  uint64_t v12;

  v10 = *(_DWORD *)(a1 + 1420);
  if (v10)
  {
    v11 = v10 - 1;
    *(_DWORD *)(a1 + 1420) = v11;
    v12 = *(_QWORD *)(a1 + 8 * v11 + 1424);
    sub_216B9E15C(v12, a2, a3, a4, a5);
  }
  else
  {
    v12 = sub_216B1D1D4(72);
    sub_216B92D44(v12, a2, a3, a4, a5, a1);
  }
  sub_216B87FB8(a1);
  *(_QWORD *)(a1 + 816) = 0;
  sub_216B887F0(a1 + 824, v12);
  if (*(_DWORD *)(a1 + 832) != 4)
    *(_DWORD *)(a1 + 832) = 2;
}

uint64_t sub_216B92D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE *v9;

  v4 = a1 + 824;
  if (sub_216B3817C(a1 + 824, a2))
  {
    v6 = sub_216B25CA8(v4, v5);
    return sub_216B9F100(v6, a2);
  }
  else
  {
    result = sub_216B3817C(a1 + 792, v5);
    if ((_DWORD)result)
    {
      v9 = (_BYTE *)sub_216B25CA8(a1 + 792, v8);
      return sub_216B75930(v9, a2);
    }
  }
  return result;
}

unsigned __int8 *sub_216B92DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  int v9;
  int v10;
  BOOL v11;

  v2 = a1 + 792;
  v3 = *(_QWORD *)(sub_216B25CA8(a1 + 792, a2) + 128);
  if (v3 != *(_QWORD *)(sub_216B25CA8(v2, v4) + 120))
  {
    v7 = (unsigned __int8 *)(v3 - 1);
    v6 = *(unsigned __int8 *)(v3 - 1);
    if (v6 == 13 || v6 == 10)
    {
      if (v7 != *(unsigned __int8 **)(sub_216B25CA8(v2, v5) + 120)
        && ((v10 = *(unsigned __int8 *)(v3 - 2), v3 -= 2, v9 = v10, v10 != 13) ? (v11 = v9 == 10) : (v11 = 1), v11))
      {
        if (v9 == *v7)
          return v7;
      }
      else
      {
        return v7;
      }
    }
  }
  return (unsigned __int8 *)v3;
}

uint64_t sub_216B92E5C(uint64_t a1, unsigned int *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t *v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  const void *v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v106;
  std::string v107;
  uint64_t v108[2];
  uint64_t v109[2];
  uint64_t *v110[19];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[2];
  _BYTE v116[16];
  _BYTE v117[16];
  _BYTE v118[16];
  uint64_t v119;

  v6 = *(_QWORD *)(a1 + 808);
  if (v6)
  {
    v7 = sub_216B93780(v6 + 32);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 48);
      v10 = sub_216B4CBC4(*(_QWORD *)(a1 + 808));
      v11 = sub_216B81B44(v9, v10);
      if (v11)
      {
        v12 = v11;
        sub_216B93798(*(_QWORD *)(a1 + 64), v11, v8);
        v13 = sub_216B7AE74(a1, v8);
        if (v13)
          *(_WORD *)(v13 + 244) |= 0x800u;
        v14 = sub_216B2037C(*(_QWORD *)(a1 + 808) + 32);
        if (v14)
        {
          v15 = v14;
          v16 = sub_216B5E108(v8);
          if (v15 != v8 && (v16 & 1) == 0 && sub_216B937BC(*(_QWORD *)(a1 + 64), v12))
          {
            v113 = sub_216B4A11C(v8);
            v114 = v17;
            v111 = sub_216B4A11C(v15);
            v112 = v18;
            v110[0] = (uint64_t *)sub_216B1E67C((uint64_t)&v113);
            v107.__r_.__value_.__r.__words[0] = sub_216B1E67C((uint64_t)&v111);
            v19 = *(_QWORD *)sub_216B25C44(v110, &v107) >> 1;
            if (v19 >= sub_216B31864((uint64_t)&v113, v111, v112, 1, v19))
            {
              v20 = sub_216B34198(*(_QWORD *)(a1 + 808) + 32);
              sub_216B720D8(a1, v20, 877, (uint64_t)v110);
              v21 = sub_216B34198(*(_QWORD *)(a1 + 808) + 32);
              sub_216B848DC(&v107, v21);
              v22 = sub_216B7A280(v110, (uint64_t *)&v107);
              sub_216B89E58(v22, v8);
              sub_216B4B3B4(v110);
              v23 = sub_216B69B6C(*(_QWORD *)(a1 + 808) + 32);
              sub_216B720D8(a1, v23, 821, (uint64_t)&v107);
              v24 = sub_216B69B6C(*(_QWORD *)(a1 + 808) + 32);
              sub_216B848DC(v115, v24);
              v25 = sub_216B7A280(&v107, v115);
              v26 = sub_216B89E58(v25, v15);
              v27 = sub_216B89E58(v26, v8);
              v28 = sub_216B69B6C(*(_QWORD *)(a1 + 808) + 32);
              sub_216B848DC(&v119, v28);
              v29 = sub_216B4A11C(v8);
              sub_216B8EC8C(v119, v29, v30, (uint64_t)v110);
              sub_216B73938((uint64_t)v27, (uint64_t)v110);
              sub_216B4C8CC(v110);
              sub_216B4B3B4(&v107);
            }
          }
        }
      }
    }
  }
  if (sub_216B27BAC((_DWORD *)(a1 + 772))
    && (a3 & 1) == 0
    && (!sub_216B3817C(a1 + 792, v31) || !*(_BYTE *)(sub_216B25CA8(a1 + 792, v32) + 384)))
  {
    sub_216B720D8(a1, *(_DWORD *)(a1 + 772), 709, (uint64_t)v118);
    sub_216B4B3B4(v118);
    sub_216B4AED0(v110);
    *(_DWORD *)(a1 + 772) = v110[0];
  }
  if (sub_216B27BAC((_DWORD *)(a1 + 776))
    && (a3 & 1) == 0
    && (!sub_216B3817C(a1 + 792, v33) || !*(_BYTE *)(sub_216B25CA8(a1 + 792, v34) + 384)))
  {
    sub_216B720D8(a1, *(_DWORD *)(a1 + 776), 710, (uint64_t)v117);
    sub_216B4B3B4(v117);
    sub_216B4AED0(v110);
    *(_DWORD *)(a1 + 776) = v110[0];
  }
  if (sub_216B29084((_QWORD *)(a1 + 848)))
  {
    if (sub_216B3817C(a1 + 792, v35))
    {
      v37 = sub_216B92DC8(a1, v36);
      sub_216B75074((uint64_t)a2);
      *(_QWORD *)(sub_216B25CA8(a1 + 792, v38) + 392) = v37;
      v40 = sub_216B25CA8(a1 + 792, v39);
      sub_216B7317C(v40, a2, (uint64_t)v37, 1);
      if (sub_216B7548C(a1))
      {
        v42 = sub_216B25CA8(a1 + 792, v41);
        LODWORD(v110[0]) = sub_216B8A9C0(v42);
        if (sub_216B632B8((unsigned int *)v110, (unsigned int *)(a1 + 704)))
        {
          LODWORD(v110[0]) = sub_216B1E4E0(a2);
          v43 = sub_216B62D74(v110, -1);
          sub_216B2A7D8(a2, v43);
        }
      }
      if ((sub_216B9389C(a1) & 1) == 0)
        sub_216B3C1E8(a1 + 792, 0);
    }
    else
    {
      v74 = sub_216B25CA8(a1 + 800, v36);
      sub_216B99C70(v74, (uint64_t)a2);
      sub_216B3C1E8(a1 + 800, 0);
    }
    if ((sub_216B9389C(a1) & 1) == 0)
      *(_QWORD *)(a1 + 808) = 0;
    if (!*(_DWORD *)(a1 + 676))
    {
      v110[0] = (uint64_t *)sub_216B938A4(a1 + 1008);
      v110[1] = v75;
      v113 = sub_216B938D4(a1 + 1008);
      v114 = v76;
      while (sub_216B3760C(v110, &v113))
      {
        v77 = sub_216B93908(v110);
        sub_216B720D8(a1, v77, 844, (uint64_t)v116);
        sub_216B4B3B4(v116);
        sub_216B93914(v110);
      }
    }
    v78 = sub_216B9BDF4(a1);
    if (v78)
    {
      v79 = v78;
      if (sub_216B5EE74(v78))
      {
        v80 = *(_QWORD *)(a1 + 48);
        v81 = sub_216B8AEB0(v80);
        v82 = sub_216B64050(v80, v81);
        v83 = (_BYTE *)sub_216B2037C(a1);
        if (!sub_216B6DED4(v83, 0x392u, v82))
        {
          v84 = sub_216B5295C(a1);
          v106 = (uint64_t *)sub_216B6C230(v84);
          v85 = (_QWORD *)sub_216B5EE40(v79);
          sub_216B93944(*(_QWORD *)(a1 + 40), v110);
          v86 = sub_216B1E600((uint64_t)v110);
          sub_216B4FAD0(v110);
          sub_216B27D74(v115);
          v87 = (_BYTE *)sub_216B1E600((uint64_t)v85);
          sub_216B25FA8((uint64_t)v110, v87);
          sub_216B69F5C(&v113, v86, v110, v115);
          sub_216B93950((uint64_t)&v111);
          while (sub_216B93954((uint64_t)&v113, (uint64_t)&v111))
          {
            if (sub_216B27BAC(v115))
              break;
            v88 = sub_216B9396C((uint64_t)&v113);
            v89 = sub_216B52934(v88);
            v91 = sub_216B29410(v89, v90);
            sub_216B32854(v110, v91, v92);
            v107.__r_.__value_.__s.__data_[0] = 1;
            v93 = sub_216B93988((uint64_t)v110, (unsigned __int16 *)".h", (unsigned __int16 *)".H", (unsigned __int16 *)".hh", ".hpp", (uint64_t)&v107);
            LOBYTE(v109[0]) = 0;
            if (sub_216B4AA54(v93, (unsigned __int8 *)v109))
            {
              v94 = (_DWORD *)sub_216B939E0(a1);
              v95 = sub_216B9396C((uint64_t)&v113);
              v96 = (const void *)sub_216B52934(v95);
              v98 = sub_216B50040(v94, v96, v97, 0, 1);
              if (v98)
              {
                v99 = v98;
                v100 = sub_216B40EE8(a1);
                if (!sub_216B939E8(v100, v99) && (sub_216B80670(v106, v99) & 1) == 0)
                {
                  sub_216B295EC(v110);
                  sub_216B93A38(*(_QWORD *)(a1 + 40), v85, v99, (const void **)v110);
                  sub_216B720D8(a1, v82, 914, (uint64_t)v109);
                  sub_216B5ECE8(v79, &v107);
                  sub_216B26CA0(v108, &v107);
                  v101 = sub_216B4B340(v109, v108[0], v108[1]);
                  v102 = sub_216B28180((uint64_t)v110);
                  sub_216B4B340(v101, v102, v103);
                  std::string::~string(&v107);
                  sub_216B4B3B4(v109);
                  sub_216B2489C(v110);
                }
              }
            }
            sub_216B69F60(&v113, v115);
          }
          sub_216B93B9C((uint64_t)&v111);
          sub_216B93B9C((uint64_t)&v113);
        }
      }
    }
    return 1;
  }
  if (sub_216B7548C(a1))
  {
    v44 = *(_QWORD *)(a1 + 808);
    if (v44)
    {
      v45 = *(_QWORD *)(a1 + 48);
      v46 = sub_216B4CBC4(v44);
      LODWORD(v110[0]) = sub_216B64050(v45, v46);
      if (sub_216B632B8((unsigned int *)v110, (unsigned int *)(a1 + 704)))
      {
        if (sub_216B3817C(a1 + 792, v47))
        {
          sub_216B75074((uint64_t)a2);
          v50 = sub_216B25CA8(a1 + 792, v49);
          v52 = sub_216B25CA8(a1 + 792, v51);
          sub_216B7317C(v50, a2, *(_QWORD *)(v52 + 128), 1);
          sub_216B3C1E8(a1 + 792, 0);
        }
        else
        {
          v104 = sub_216B25CA8(a1 + 800, v48);
          sub_216B99C70(v104, (uint64_t)a2);
          sub_216B3C1E8(a1 + 800, 0);
        }
        *(_QWORD *)(a1 + 808) = 0;
        return 1;
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    v53 = *(_QWORD *)(a1 + 808);
    if (v53)
    {
      v54 = *(_QWORD *)(a1 + 48);
      v55 = sub_216B4CBC4(v53);
      LODWORD(v110[0]) = sub_216B81C0C(v54, v55);
      if (sub_216B27BAC(v110))
      {
        v56 = sub_216B622C0(*(_QWORD *)(a1 + 48));
        v57 = v56 - sub_216B937DC(*(_QWORD *)(a1 + 808)) + 1;
        v58 = *(_QWORD *)(a1 + 48);
        v59 = sub_216B4CBC4(*(_QWORD *)(a1 + 808));
        sub_216B937E4(v58, v59, v57);
      }
    }
  }
  sub_216B4AED0(v110);
  if (*(_QWORD *)(a1 + 872))
  {
    if ((a3 & 1) == 0)
    {
      v61 = *(_QWORD *)(a1 + 808);
      if (v61)
        LODWORD(v110[0]) = sub_216B4CBC4(v61);
    }
  }
  if (*(_QWORD *)(a1 + 840) && sub_216B3817C(a1 + 792, v60))
  {
    v62 = sub_216B92DC8(a1, v60);
    sub_216B75074((uint64_t)a2);
    *(_QWORD *)(sub_216B25CA8(a1 + 792, v63) + 392) = v62;
    v65 = sub_216B25CA8(a1 + 792, v64);
    sub_216B7317C(v65, a2, (uint64_t)v62, 520);
    v66 = sub_216B1E4E0(a2);
    sub_216B900B4((uint64_t)a2, v66);
    sub_216B203A4((uint64_t)a2, *(_QWORD *)(a1 + 840));
    v67 = 1;
  }
  else
  {
    v67 = 0;
  }
  sub_216B93838(a1, v60);
  sub_216B92D48(a1, (uint64_t)a2);
  if (*(_QWORD *)(a1 + 872))
  {
    if ((a3 & 1) == 0)
    {
      v68 = *(_QWORD *)(a1 + 808);
      if (v68)
      {
        v69 = *(_QWORD *)(a1 + 48);
        v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 32))(v68);
        v71 = sub_216B63EF8(v69, v70);
        v72 = *(_QWORD *)(a1 + 872);
        v73 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v72 + 16))(v72, v73, 1, v71, LODWORD(v110[0]));
      }
    }
  }
  return v67;
}

uint64_t sub_216B93780(uint64_t a1)
{
  if (*(_BYTE *)a1)
    return 0;
  else
    return *(_QWORD *)(a1 + 8);
}

__int16 *sub_216B93798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 *result;

  result = sub_216B6DE18(a1, a2);
  *((_QWORD *)result + 1) = a3;
  return result;
}

BOOL sub_216B937BC(uint64_t a1, uint64_t a2)
{
  return sub_216B6DE18(a1, a2)[1] == 1;
}

uint64_t sub_216B937DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

_DWORD *sub_216B937E4(uint64_t a1, unsigned int a2, int a3)
{
  _DWORD *result;
  uint64_t v5;
  char v6;

  v6 = 0;
  result = (_DWORD *)sub_216B606F0(a1, a2, &v6);
  if (!v6)
  {
    v5 = (uint64_t)result;
    result = (_DWORD *)sub_216B6081C(result);
    if ((_DWORD)result)
    {
      result = (_DWORD *)sub_216B3DBD0(v5);
      result[1] = a3;
    }
  }
  return result;
}

uint64_t sub_216B93838(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1 + 824;
  if (sub_216B3817C(a1 + 824, a2))
  {
    if (*(_DWORD *)(a1 + 1420) == 8)
    {
      sub_216B887F0(v3, 0);
    }
    else
    {
      v5 = sub_216B28054(v3, v4);
      v6 = *(unsigned int *)(a1 + 1420);
      *(_DWORD *)(a1 + 1420) = v6 + 1;
      *(_QWORD *)(a1 + 8 * v6 + 1424) = v5;
    }
  }
  return sub_216B93C3C(a1);
}

uint64_t sub_216B9389C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 672);
}

uint64_t sub_216B938A4(uint64_t a1)
{
  uint64_t v2;

  sub_216B940D8(&v2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 16));
  return v2;
}

uint64_t sub_216B938D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 16);
  sub_216B940D8(&v3, v1, v1);
  return v3;
}

uint64_t sub_216B93908(uint64_t **a1)
{
  return sub_216B94168(**a1);
}

_QWORD *sub_216B93914(_QWORD *a1)
{
  *a1 += 8;
  sub_216B94108((uint64_t)a1);
  return a1;
}

_QWORD *sub_216B93944@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_216B4FA60(a2, (_QWORD *)(a1 + 8));
}

BOOL sub_216B93954(uint64_t a1, uint64_t a2)
{
  return !sub_216B93F60(a1, a2);
}

uint64_t sub_216B9396C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216B1E600(a1 + 8);
  v2 = sub_216B6A0A8(v1);
  return sub_216B6A0AC(v2);
}

uint64_t sub_216B93988(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = sub_216B348A8(a1, a2, a6);
  v11 = sub_216B348A8(v10, a3, a6);
  v12 = sub_216B329A8(v11, a4, a6);
  return sub_216B32A18(v12, a5, a6);
}

uint64_t sub_216B939E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

BOOL sub_216B939E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7[2];
  uint64_t v8;

  v8 = a2;
  v2 = a1 + 160;
  v7[0] = sub_216B80A78(a1 + 160, &v8);
  v7[1] = v3;
  v6[0] = sub_216B65D94(v2);
  v6[1] = v4;
  return sub_216B50AF4(v7, (uint64_t)v6);
}

const void **sub_216B93A38(uint64_t a1, _QWORD *a2, uint64_t a3, const void **a4)
{
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v12;
  char *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v21[3];
  uint64_t v22[3];
  uint64_t v23[3];
  uint64_t v24[2];
  _QWORD v25[2];
  uint64_t v26[3];
  __int128 v27;
  __int128 v28;

  sub_216B20594(a4);
  v8 = sub_216B5EE7C(a3);
  v9 = (char *)sub_216B1E600(v8);
  sub_216B1E678((int)&v28, v9);
  v27 = v28;
  if (sub_216B29094((uint64_t)&v27))
  {
LABEL_7:
    v13 = (char *)sub_216B1E600(a3);
    sub_216B1E678((int)v20, v13);
    return sub_216B6C7A4(a4, v20[0], v20[1]);
  }
  else
  {
    while (1)
    {
      v10 = sub_216B4FCC4(a1, v27, *((uint64_t *)&v27 + 1), 1);
      if (v10 && v10 == a2)
        break;
      *(_QWORD *)&v27 = sub_216B290FC(v27, *((uint64_t *)&v27 + 1));
      *((_QWORD *)&v27 + 1) = v12;
      if (sub_216B29094((uint64_t)&v27))
        goto LABEL_7;
    }
    v15 = sub_216B1E67C((uint64_t)&v27);
    v16 = sub_216B2864C(&v28, v15, 0xFFFFFFFFFFFFFFFFLL);
    sub_216B6C7A4(a4, v16, v17);
    v18 = (char *)sub_216B1E600(a3);
    sub_216B1E678((int)v24, v18);
    v25[0] = sub_216B2930C(v24[0], v24[1]);
    v25[1] = v19;
    sub_216B25FB0((uint64_t)v26, (uint64_t)v25);
    sub_216B25FA8((uint64_t)v23, &byte_216C19659);
    sub_216B25FA8((uint64_t)v22, &byte_216C19659);
    sub_216B25FA8((uint64_t)v21, &byte_216C19659);
    return (const void **)sub_216B28DE8(a4, v26, v23, v22, v21);
  }
}

uint64_t sub_216B93BA0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1 + 1896;
  if (!sub_216B29084((_QWORD *)(a1 + 1896)))
  {
    v6 = *(_QWORD *)sub_216B2CFB0(v4);
    if (v6 == sub_216B25CA8(a1 + 824, v7))
      sub_216B96BD4(a1);
  }
  v8 = a1 + 824;
  if (*(_DWORD *)(a1 + 1420) == 8)
  {
    sub_216B887F0(v8, 0);
  }
  else
  {
    v9 = sub_216B28054(v8, v5);
    v10 = *(unsigned int *)(a1 + 1420);
    *(_DWORD *)(a1 + 1420) = v10 + 1;
    *(_QWORD *)(a1 + 8 * v10 + 1424) = v9;
  }
  return sub_216B92E5C(a1, a2, 1);
}

uint64_t sub_216B93C3C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)(a1 + 848);
  v3 = sub_216B885C4(a1 + 848);
  sub_216B93F94(a1 + 792, v3 + 16);
  v4 = sub_216B885C4((uint64_t)v2);
  sub_216B93F94(a1 + 800, v4 + 24);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(sub_216B885C4((uint64_t)v2) + 32);
  v5 = sub_216B885C4((uint64_t)v2);
  sub_216B93FDC(a1 + 824, v5 + 40);
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(sub_216B885C4((uint64_t)v2) + 48);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(sub_216B885C4((uint64_t)v2) + 8);
  *(_DWORD *)(a1 + 832) = *(_DWORD *)sub_216B885C4((uint64_t)v2);
  return sub_216B94024(v2);
}

uint64_t sub_216B93CDC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 848;
  v5 = sub_216B882B0((_QWORD *)(a1 + 848));
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      v10 = sub_216B2C000(v4);
      v11 = sub_216B93E18(&v10, v6);
      v12 = sub_216B93E18(&v11, 1);
      v7 = *(_QWORD *)(sub_216B1E600((uint64_t)&v12) + 32);
      if (v7)
        break;
      if (v5 == ++v6)
        goto LABEL_5;
    }
    *(_BYTE *)(v7 + 26) = 1;
    v8 = *(_BYTE *)(v7 + 24) != 0;
    *(_BYTE *)(v7 + 24) = 1;
  }
  else
  {
LABEL_5:
    v8 = 0;
    v7 = 0;
  }
  if ((sub_216B93BA0(a1, a2) & 1) == 0)
    sub_216B9C594(a1, a2);
  while (sub_216B7214C((uint64_t)a2, 2))
  {
    if (!sub_216B7214C((uint64_t)a2, 1))
      break;
    sub_216B9C594(a1, a2);
  }
  result = sub_216B71174((uint64_t)a2, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v7 + 26) = 0;
    if (!v8)
    {
      *(_BYTE *)(v7 + 24) = 0;
      return sub_216B9C594(a1, a2);
    }
  }
  return result;
}

uint64_t sub_216B93E18(uint64_t *a1, uint64_t a2)
{
  return sub_216B9416C(a1, -a2);
}

uint64_t sub_216B93E20(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a6;
  sub_216B4AED0((_DWORD *)(a1 + 40));
  sub_216B4AED0((_DWORD *)(a1 + 44));
  sub_216B4AED0((_DWORD *)(a1 + 48));
  sub_216B4AED0((_DWORD *)(a1 + 56));
  *(_BYTE *)(a1 + 64) &= ~8u;
  sub_216B9D8BC(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t sub_216B93EAC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a6;
  sub_216B4AED0((_DWORD *)(a1 + 40));
  sub_216B4AED0((_DWORD *)(a1 + 44));
  sub_216B4AED0((_DWORD *)(a1 + 48));
  sub_216B4AED0((_DWORD *)(a1 + 56));
  *(_BYTE *)(a1 + 64) &= ~8u;
  sub_216B9E15C(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t sub_216B93F38(uint64_t a1)
{
  sub_216B26D14((_QWORD *)(a1 + 8));
  return a1;
}

BOOL sub_216B93F60(uint64_t a1, uint64_t a2)
{
  return sub_216B2AB50(a1 + 8, a2 + 8);
}

uint64_t sub_216B93F6C(uint64_t a1)
{
  sub_216B69618(a1 + 8);
  return a1;
}

uint64_t sub_216B93F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B28054(a2, a2);
  sub_216B3C1E8(a1, v4);
  j_j_nullsub_1(a2);
  j_nullsub_1(a1, v5);
  return a1;
}

uint64_t sub_216B93FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B28054(a2, a2);
  sub_216B887F0(a1, v4);
  j_j_nullsub_1(a2);
  j_nullsub_1(a1, v5);
  return a1;
}

uint64_t sub_216B94024(_QWORD *a1)
{
  return sub_216B94030(a1, a1[1] - 56);
}

uint64_t sub_216B94030(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B882B0(a1);
  sub_216B94074((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

uint64_t sub_216B94074(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B8870C(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 56;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *sub_216B940E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  sub_216B94108((uint64_t)a1);
  return a1;
}

uint64_t sub_216B94108(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = *(uint64_t **)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 8))
  {
    v2 = result;
    do
    {
      v3 = *v1;
      result = sub_216B25120();
      if (v3 != result)
      {
        v4 = **(_QWORD **)v2;
        result = sub_216B2CCE0();
        if (v4 != result)
          break;
      }
      v5 = *(uint64_t **)(v2 + 8);
      v1 = (uint64_t *)(*(_QWORD *)v2 + 8);
      *(_QWORD *)v2 = v1;
    }
    while (v1 != v5);
  }
  return result;
}

uint64_t sub_216B9416C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  sub_216B94198(&v3, a2);
  return v3;
}

_QWORD *sub_216B94198(_QWORD *result, uint64_t a2)
{
  *result += 56 * a2;
  return result;
}

uint64_t sub_216B941AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;

  v5 = a2;
  v4[0] = sub_216B941E4(a1 + 984, &v5);
  v4[1] = v2;
  return *(_QWORD *)(sub_216B1E600((uint64_t)v4) + 8);
}

uint64_t sub_216B941E4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v6 = 0;
  if (!sub_216B990B4(a1, a2, &v6))
    return sub_216B991D8(a1);
  v3 = v6;
  v4 = sub_216B5F664(a1);
  sub_216B991D4(&v7, v3, v4, 1);
  return v7;
}

_DWORD *sub_216B94248(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  char v6;
  _DWORD *result;
  _QWORD *v8;
  unsigned int *v9;

  v8 = a3;
  v9 = a2;
  v4 = sub_216B942F0(a1 + 984, (uint64_t *)&v9);
  sub_216B210B8(a3, *v4);
  *v4 = (uint64_t)a3;
  sub_216B94308(v9, 1);
  if (!sub_216B9434C((uint64_t)a3))
    sub_216B94308(v9, 0);
  if (sub_216B7CC80(&v8))
  {
    v5 = sub_216B3DB48((uint64_t)v8);
    v6 = sub_216B94384(v5);
  }
  else
  {
    v6 = 0;
  }
  result = (_DWORD *)sub_216B94390((uint64_t)v9);
  if ((_DWORD)result)
  {
    if ((v6 & 1) == 0)
      return sub_216B9439C(v9);
  }
  return result;
}

uint64_t *sub_216B942F0(uint64_t a1, uint64_t *a2)
{
  return sub_216B992D0(a1, a2) + 1;
}

unsigned int *sub_216B94308(unsigned int *a1, int a2)
{
  int v2;
  unsigned int v3;

  if (((((*a1 & 0x100000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v2 = 0x100000;
    else
      v2 = 0;
    v3 = *a1 & 0xFFEFFFFF | v2;
    *a1 = v3;
    if (a2)
      *a1 = v3 | 0x4200000;
    else
      return (unsigned int *)sub_216B5E058(a1);
  }
  return a1;
}

BOOL sub_216B9434C(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  _QWORD v3[2];

  v3[0] = sub_216B7CBD8(a1);
  v3[1] = v1;
  result = sub_216B2D77C(v3);
  if (result)
    return !sub_216B7CBDC((uint64_t)v3);
  return result;
}

uint64_t sub_216B94384(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 12) >> 5) & 1;
}

uint64_t sub_216B94390(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 3) >> 3) & 1;
}

_DWORD *sub_216B9439C(_DWORD *result)
{
  *result |= 0x10000000u;
  return result;
}

unsigned int *sub_216B943AC(uint64_t *a1)
{
  unsigned int *result;
  unsigned int *v3;
  uint64_t v4;

  a1[30] = (uint64_t)sub_216B945D4((uint64_t)a1, "__LINE__");
  a1[31] = (uint64_t)sub_216B945D4((uint64_t)a1, "__FILE__");
  if (sub_216B5D8E0(a1[3]))
  {
    result = sub_216B945D4((uint64_t)a1, "__VERSION__");
    a1[52] = (uint64_t)result;
  }
  else
  {
    a1[52] = 0;
    a1[32] = (uint64_t)sub_216B945D4((uint64_t)a1, "__DATE__");
    a1[33] = (uint64_t)sub_216B945D4((uint64_t)a1, "__TIME__");
    a1[37] = (uint64_t)sub_216B945D4((uint64_t)a1, "__COUNTER__");
    a1[38] = (uint64_t)sub_216B945D4((uint64_t)a1, "_Pragma");
    a1[35] = (uint64_t)sub_216B945D4((uint64_t)a1, "__BASE_FILE__");
    a1[34] = (uint64_t)sub_216B945D4((uint64_t)a1, "__INCLUDE_LEVEL__");
    a1[36] = (uint64_t)sub_216B945D4((uint64_t)a1, "__TIMESTAMP__");
    if ((*(_BYTE *)a1[3] & 8) != 0)
    {
      a1[40] = (uint64_t)sub_216B945D4((uint64_t)a1, "__identifier");
      v3 = sub_216B945D4((uint64_t)a1, "__pragma");
    }
    else
    {
      v3 = 0;
      a1[40] = 0;
    }
    a1[39] = (uint64_t)v3;
    a1[42] = (uint64_t)sub_216B945D4((uint64_t)a1, "__has_feature");
    a1[43] = (uint64_t)sub_216B945D4((uint64_t)a1, "__has_extension");
    a1[44] = (uint64_t)sub_216B945D4((uint64_t)a1, "__has_builtin");
    a1[45] = (uint64_t)sub_216B945D4((uint64_t)a1, "__has_attribute");
    a1[46] = (uint64_t)sub_216B945D4((uint64_t)a1, "__has_include");
    a1[47] = (uint64_t)sub_216B945D4((uint64_t)a1, "__has_include_next");
    a1[48] = (uint64_t)sub_216B945D4((uint64_t)a1, "__has_warning");
    result = sub_216B945D4((uint64_t)a1, "__is_identifier");
    a1[49] = (uint64_t)result;
    if ((*(_BYTE *)(a1[3] + 6) & 0x10) != 0)
    {
      a1[50] = (uint64_t)sub_216B945D4((uint64_t)a1, "__building_module");
      result = (unsigned int *)sub_216B25DD0(a1[3] + 136, v4);
      if ((result & 1) != 0)
      {
        a1[51] = 0;
      }
      else
      {
        result = sub_216B945D4((uint64_t)a1, "__MODULE__");
        a1[51] = (uint64_t)result;
      }
    }
    else
    {
      a1[50] = 0;
      a1[51] = 0;
    }
  }
  return result;
}

unsigned int *sub_216B945D4(uint64_t a1, char *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int v6;
  uint64_t v7[2];

  sub_216B1E678((int)v7, a2);
  v3 = (unsigned int *)sub_216B89E24(a1, v7[0], v7[1]);
  sub_216B4AED0(&v6);
  v4 = (unsigned int *)sub_216B899B8(a1, v6);
  sub_216B983B0((uint64_t)v4, 1);
  sub_216B8F274(a1, v3, v4);
  return v3;
}

BOOL sub_216B9464C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a1 + 792;
  if (sub_216B3817C(a1 + 792, a2))
  {
    v5 = sub_216B25CA8(v3, v4);
    v6 = sub_216B750D0(v5);
  }
  else if (sub_216B3817C(a1 + 800, v4))
  {
    v8 = sub_216B25CA8(a1 + 800, v7);
    v6 = sub_216B94770(v8);
  }
  else
  {
    v9 = sub_216B25CA8(a1 + 824, v7);
    v6 = sub_216B9EE90(v9);
  }
  if (v6 == 2)
  {
    if (*(_QWORD *)(a1 + 808))
      return 0;
    v11 = (_QWORD *)(a1 + 848);
    for (i = sub_216B882B0(v11) - 1; i != -1; --i)
    {
      v13 = sub_216B8AEB8(v11, i);
      if (sub_216B3817C(v13 + 16, v14))
      {
        v16 = sub_216B25CA8(v13 + 16, v15);
        v6 = sub_216B750D0(v16);
      }
      else if (sub_216B3817C(v13 + 24, v15))
      {
        v18 = sub_216B25CA8(v13 + 24, v17);
        v6 = sub_216B94770(v18);
      }
      else
      {
        v19 = sub_216B25CA8(v13 + 40, v17);
        v6 = sub_216B9EE90(v19);
      }
      if (v6 != 2)
        return v6 == 1;
      if (*(_QWORD *)(v13 + 32))
        return 0;
    }
    v6 = 2;
  }
  return v6 == 1;
}

uint64_t sub_216B94770(uint64_t a1)
{
  int v1;

  v1 = **(unsigned __int8 **)(a1 + 136);
  if (v1 == 1)
    return 2;
  else
    return v1 == 21;
}

uint64_t sub_216B94790(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  _BYTE *v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int32 v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  _BYTE v43[16];
  uint64_t v44[2];
  __n128 v45;
  uint64_t v46;
  __n128 v47[2];
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51[2];

  v51[0] = sub_216B7C9E8(a3);
  v51[1] = v6;
  v7 = (unsigned int *)sub_216B7B8EC(v51);
  v8 = *(_QWORD *)(a1 + 808);
  if (v8)
    sub_216B94C84(v8 + 32);
  if (sub_216B89E80((uint64_t)v7))
  {
    v9 = *(_QWORD *)(a1 + 872);
    if (v9)
    {
      v10 = sub_216B1E4E0((unsigned int *)a2);
      sub_216B848DC(&v50, v10);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 168))(v9, a2, a3, v50, 0);
    }
    sub_216B94C90(a1, (unsigned int *)a2);
    return 1;
  }
  v12 = sub_216B1E4E0((unsigned int *)a2);
  v49 = v12;
  if (sub_216B7C920((uint64_t)v7))
  {
    *(_WORD *)(a1 + 436) |= 8u;
    v13 = sub_216B958A4(a1, (unsigned int *)a2, (uint64_t)v7, &v49);
    *(_WORD *)(a1 + 436) &= ~8u;
    if (!v13)
      return 1;
    v14 = v13;
    ++*(_DWORD *)(a1 + 1368);
    v12 = v49;
  }
  else
  {
    v14 = 0;
    ++*(_DWORD *)(a1 + 1364);
  }
  sub_216B96174(a1, v7);
  v15 = sub_216B1E4E0((unsigned int *)a2);
  sub_216B746DC(&v48, v15, v12);
  v16 = *(_QWORD *)(a1 + 872);
  if (v16)
  {
    if ((*(_WORD *)(a1 + 436) & 8) != 0)
    {
      v45 = *(__n128 *)a2;
      v46 = *(_QWORD *)(a2 + 16);
      sub_216B96230(v47, &v45, a3, v48);
      sub_216B961CC(a1 + 880, (uint64_t)v47);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, _QWORD *))(*(_QWORD *)v16 + 168))(v16, a2, a3, v48, v14);
      if (!sub_216B29084((_QWORD *)(a1 + 880)))
      {
        v17 = sub_216B2F21C(a1 + 880);
        if (v17)
        {
          v18 = 0;
          do
          {
            v19 = sub_216B96234(a1 + 880, v18);
            (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 872) + 168))(*(_QWORD *)(a1 + 872), v19, *(_QWORD *)(v19 + 24), *(_QWORD *)(v19 + 32), 0);
            ++v18;
          }
          while (v17 != v18);
        }
        sub_216B20594((_QWORD *)(a1 + 880));
      }
    }
  }
  v20 = sub_216B1E600((uint64_t)v51);
  if (sub_216B9625C(v20))
  {
    sub_216B7B558(a1, (unsigned int *)a2, 884, (uint64_t)v47);
    v21 = sub_216B7068C(a2);
    sub_216B89E58((uint64_t *)v47, v21);
    sub_216B4B3B4(v47);
    v22 = sub_216B1E4E0(v7);
    sub_216B720D8(a1, v22, 827, (uint64_t)v47);
    v23 = sub_216B7068C(a2);
    sub_216B89E58((uint64_t *)v47, v23);
    sub_216B4B3B4(v47);
    v47[0].n128_u64[0] = sub_216B7CBE8(v51);
    for (v47[0].n128_u64[1] = v24; sub_216B2D77C(v47); v47[0].n128_u8[12] = v30)
    {
      if (sub_216B7CBDC((uint64_t)v47))
        break;
      v25 = (unsigned int *)sub_216B7B8EC((uint64_t *)v47);
      v26 = sub_216B1E4E0(v25);
      sub_216B720D8(a1, v26, 828, (uint64_t)v44);
      v27 = sub_216B7068C(a2);
      sub_216B89E58(v44, v27);
      sub_216B4B3B4(v44);
      v28 = sub_216B1E600((uint64_t)v47);
      if (!sub_216B9625C(v28))
        break;
      v47[0].n128_u64[0] = sub_216B7CBE8((uint64_t *)v47);
      v47[0].n128_u32[2] = v29;
    }
  }
  if (sub_216B8F1EC((uint64_t)v7))
  {
    if (sub_216B8F1EC((uint64_t)v7) == 1)
    {
      v31 = sub_216B7068C(a2);
      if (sub_216B96268((uint64_t)v7, v31, a1))
      {
        if (v14)
          sub_216B7AD00(v14, a1);
        v32 = sub_216B7164C(a2);
        v33 = sub_216B75974(a2);
        v34 = sub_216B8F204((uint64_t)v7, 0);
        v35 = *(_DWORD *)(v34 + 15);
        *(_OWORD *)a2 = *(_OWORD *)v34;
        *(_DWORD *)(a2 + 15) = v35;
        sub_216B74374(a2, 1, v32);
        sub_216B74374(a2, 2, v33);
        v36 = *(_QWORD *)(a1 + 48);
        v37 = sub_216B1E4E0((unsigned int *)a2);
        v38 = sub_216B693F8(a2);
        v39 = sub_216B61BF8(v36, v37, v15, v12, v38, 0, 0);
        sub_216B2A7D8((_DWORD *)a2, v39);
        v40 = sub_216B7068C(a2);
        if (v40)
        {
          v41 = sub_216B7AE74(a1, v40);
          if (v41)
          {
            v42 = (unsigned int *)v41;
            if (!sub_216B7AE94(v41) || v42 == v7)
            {
              sub_216B72300(a2, 4);
              if (v42 != v7 || sub_216B7C920((uint64_t)v7))
              {
                sub_216B7B558(a1, (unsigned int *)a2, 834, (uint64_t)v43);
                sub_216B4B3B4(v43);
              }
            }
          }
        }
        ++*(_DWORD *)(a1 + 1376);
        return 1;
      }
    }
    sub_216B92BBC(a1, (unsigned int *)a2, v12, (uint64_t)v7, (uint64_t)v14);
    return 0;
  }
  else
  {
    if (v14)
      sub_216B7AD00(v14, a1);
    sub_216B72300(a2, 16);
    sub_216B92D48(a1, a2);
    result = 0;
    ++*(_DWORD *)(a1 + 1376);
  }
  return result;
}

uint64_t sub_216B94C84(uint64_t result)
{
  *(_BYTE *)(result + 2) = 1;
  return result;
}

uint64_t sub_216B94C90(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  tm *v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  _BOOL4 v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t *v76;
  _BYTE *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85[2];
  std::string v86;
  const void *v87[2];
  _BYTE v88[16];
  _BYTE v89[16];
  _BYTE v90[16];
  _BYTE v91[16];
  _BYTE v92[16];
  _BYTE v93[16];
  _BYTE v94[16];
  uint64_t v95[2];
  __int128 v96;
  int v97;
  std::string v98;
  void *v99[6];
  _BYTE v100[152];

  v4 = sub_216B7068C((uint64_t)a2);
  if (v4 == *(_QWORD *)(a1 + 304))
    return sub_216B9A6F8(a1, (uint64_t)a2);
  v5 = v4;
  if (v4 == *(_QWORD *)(a1 + 312))
    return sub_216B9ACEC(a1, a2);
  ++*(_DWORD *)(a1 + 1372);
  sub_216B295EC(v100);
  sub_216B40D84(v99);
  sub_216B203A4((uint64_t)a2, 0);
  sub_216B747D8((uint64_t)a2, 8);
  if (v5 == *(_QWORD *)(a1 + 240))
  {
    v15 = sub_216B1E4E0(a2);
    v16 = sub_216B78310(a1, v15, 0);
    v17 = sub_216B630BC(*(_DWORD **)(a1 + 48), v16);
    v18 = 1;
    sub_216B63858(*(_QWORD *)(a1 + 48), SHIDWORD(v17), 1, (uint64_t)&v96);
    if (sub_216B2D76C(&v96))
      v18 = sub_216B4D100((uint64_t)&v96);
    goto LABEL_35;
  }
  if (v5 == *(_QWORD *)(a1 + 248) || v5 == *(_QWORD *)(a1 + 280))
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = sub_216B1E4E0(a2);
    sub_216B63858(v8, v9, 1, (uint64_t)&v98);
    if (v5 == *(_QWORD *)(a1 + 280) && sub_216B2D76C(&v98))
    {
      for (LODWORD(v86.__r_.__value_.__l.__data_) = sub_216B4CBC4((uint64_t)&v98);
            sub_216B27BAC(&v86);
            LODWORD(v86.__r_.__value_.__l.__data_) = sub_216B4CBC4((uint64_t)&v98))
      {
        sub_216B63858(*(_QWORD *)(a1 + 48), (int)v86.__r_.__value_.__l.__data_, 1, (uint64_t)&v96);
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v96;
        LODWORD(v98.__r_.__value_.__r.__words[2]) = v97;
        if (sub_216B603D4(&v98))
          break;
      }
    }
    sub_216B295EC(&v96);
    if (sub_216B2D76C(&v98))
    {
      v10 = (char *)sub_216B1E600((uint64_t)&v98);
      sub_216B1E678((int)v95, v10);
      sub_216B341A4((const void **)&v96, v95[0], v95[1]);
      sub_216B70BEC((uint64_t)&v96);
      v11 = sub_216B251FC((uint64_t)v99, 34);
      v12 = sub_216B24850((uint64_t)&v96);
      v14 = sub_216B248E0(v11, v12, v13);
      sub_216B251FC((uint64_t)v14, 34);
    }
    sub_216B74800((uint64_t)a2, 13);
    sub_216B2489C(&v96);
    goto LABEL_39;
  }
  if (v5 == *(_QWORD *)(a1 + 256))
  {
    v26 = sub_216B1E4E0(a2);
    sub_216B720D8(a1, v26, 887, (uint64_t)v94);
    sub_216B4B3B4(v94);
    if (!sub_216B27BAC((_DWORD *)(a1 + 424)))
      sub_216B96D04((_DWORD *)(a1 + 424), (_DWORD *)(a1 + 428), a1);
    sub_216B74800((uint64_t)a2, 13);
    sub_216B68C9C((uint64_t)a2, 13);
    v27 = *(_QWORD *)(a1 + 48);
    v28 = *(_DWORD *)(a1 + 424);
    goto LABEL_47;
  }
  if (v5 == *(_QWORD *)(a1 + 264))
  {
    v29 = sub_216B1E4E0(a2);
    sub_216B720D8(a1, v29, 887, (uint64_t)v93);
    sub_216B4B3B4(v93);
    if (!sub_216B27BAC((_DWORD *)(a1 + 428)))
      sub_216B96D04((_DWORD *)(a1 + 424), (_DWORD *)(a1 + 428), a1);
    sub_216B74800((uint64_t)a2, 13);
    sub_216B68C9C((uint64_t)a2, 10);
    v27 = *(_QWORD *)(a1 + 48);
    v28 = *(_DWORD *)(a1 + 428);
LABEL_47:
    v30 = sub_216B1E4E0(a2);
    v31 = sub_216B1E4E0(a2);
    v32 = sub_216B693F8((uint64_t)a2);
    v33 = sub_216B61BF8(v27, v28, v30, v31, v32, 0, 0);
    sub_216B2A7D8(a2, v33);
    goto LABEL_40;
  }
  if (v5 == *(_QWORD *)(a1 + 272))
  {
    v34 = *(_QWORD *)(a1 + 48);
    v35 = sub_216B1E4E0(a2);
    sub_216B63858(v34, v35, 1, (uint64_t)&v96);
    if (sub_216B2D76C(&v96)
      && (v36 = *(_QWORD *)(a1 + 48),
          v37 = sub_216B4CBC4((uint64_t)&v96),
          sub_216B63858(v36, v37, 1, (uint64_t)&v98),
          v96 = *(_OWORD *)&v98.__r_.__value_.__l.__data_,
          v97 = v98.__r_.__value_.__r.__words[2],
          sub_216B2D76C(&v96)))
    {
      v18 = 0;
      do
      {
        v38 = *(_QWORD *)(a1 + 48);
        v39 = sub_216B4CBC4((uint64_t)&v96);
        sub_216B63858(v38, v39, 1, (uint64_t)&v98);
        v96 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
        v97 = v98.__r_.__value_.__r.__words[2];
        ++v18;
      }
      while (sub_216B2D76C(&v96));
    }
    else
    {
      v18 = 0;
    }
LABEL_35:
    v6 = v18;
    goto LABEL_36;
  }
  if (v5 == *(_QWORD *)(a1 + 288))
  {
    v40 = sub_216B1E4E0(a2);
    sub_216B720D8(a1, v40, 887, (uint64_t)v92);
    sub_216B4B3B4(v92);
    v42 = sub_216B92700(a1, v41);
    if (v42 && (v43 = *(_QWORD *)(a1 + 48), v44 = sub_216B4CBC4(v42), (v45 = sub_216B81B44(v43, v44)) != 0))
    {
      *(_QWORD *)&v96 = sub_216B2037C(v45);
      v46 = localtime((const time_t *)&v96);
      v47 = asctime(v46);
    }
    else
    {
      v47 = "??? ??? ?? ??:??:?? ????\n";
    }
    v53 = sub_216B251FC((uint64_t)v99, 34);
    sub_216B1E678((int)&v96, v47);
    v54 = sub_216B3A360(&v96, 1);
    v56 = sub_216B248E0(v53, v54, v55);
    sub_216B251FC((uint64_t)v56, 34);
    v19 = (uint64_t)a2;
    v20 = 13;
    goto LABEL_38;
  }
  if (v5 != *(_QWORD *)(a1 + 296))
  {
    if (v5 == *(_QWORD *)(a1 + 336)
      || v5 == *(_QWORD *)(a1 + 344)
      || v5 == *(_QWORD *)(a1 + 352)
      || v5 == *(_QWORD *)(a1 + 392)
      || v5 == *(_QWORD *)(a1 + 360))
    {
      v48 = sub_216B1E4E0(a2);
      sub_216B89BC0(a1, (uint64_t)a2);
      if (sub_216B71174((uint64_t)a2, 21))
      {
        sub_216B89BC0(a1, (uint64_t)a2);
        v49 = sub_216B7068C((uint64_t)a2);
        if (v49)
        {
          v50 = (_DWORD *)v49;
          sub_216B89BC0(a1, (uint64_t)a2);
          if (sub_216B71174((uint64_t)a2, 22))
          {
            if (v5 == *(_QWORD *)(a1 + 392))
            {
              v57 = sub_216B91C38(v50) == 6;
            }
            else
            {
              if (v5 != *(_QWORD *)(a1 + 352))
              {
                if (v5 == *(_QWORD *)(a1 + 360))
                {
                  v59 = sub_216B27CB0(a1);
                  v60 = sub_216B96ED8(v59);
                  v61 = (_DWORD *)sub_216B5EE7C(a1);
                  v51 = sub_216B46128(0, 0, (uint64_t)v50, v60, v61);
                }
                else if (v5 == *(_QWORD *)(a1 + 344))
                {
                  v51 = sub_216B96EE0(a1, (uint64_t)v50);
                }
                else
                {
                  v51 = sub_216B971D0(a1, (uint64_t)v50);
                }
LABEL_82:
                v57 = v51;
                goto LABEL_83;
              }
              v57 = sub_216B96EC0(v50) != 0;
            }
LABEL_83:
            sub_216B2E0F8(v99, v57);
            goto LABEL_37;
          }
        }
      }
      sub_216B720D8(a1, v48, 632, (uint64_t)v91);
      v52 = v91;
      goto LABEL_66;
    }
    if (v5 == *(_QWORD *)(a1 + 368))
    {
      v58 = sub_216B980CC(a2, v5, a1);
    }
    else
    {
      if (v5 != *(_QWORD *)(a1 + 376))
      {
        if (v5 != *(_QWORD *)(a1 + 384))
        {
          if (v5 != *(_QWORD *)(a1 + 400))
          {
            if (v5 == *(_QWORD *)(a1 + 408))
            {
              v71 = sub_216B5EE7C(a1);
              sub_216B2E0B0(v99, v71 + 136);
              v72 = sub_216B5EE7C(a1);
              sub_216B26CA0(v85, v72 + 136);
              v73 = (_DWORD *)sub_216B89E24(a1, v85[0], v85[1]);
              sub_216B203A4((uint64_t)a2, (uint64_t)v73);
              v20 = sub_216B91C38(v73);
              v19 = (uint64_t)a2;
              goto LABEL_38;
            }
            if (v5 == *(_QWORD *)(a1 + 320))
            {
              v74 = sub_216B1E4E0(a2);
              sub_216B903E0(a1, (uint64_t)a2);
              if (sub_216B7214C((uint64_t)a2, 21))
              {
                v75 = sub_216B98364(a1, v74, 0);
                sub_216B720D8(a1, v75, 712, (uint64_t)&v96);
                v76 = sub_216B89E58((uint64_t *)&v96, v5);
                sub_216B89E2C(v76, 0x15u);
                sub_216B4B3B4(&v96);
                if (!sub_216B9837C((uint64_t)a2))
                {
                  if (sub_216B7068C((uint64_t)a2))
                    sub_216B74800((uint64_t)a2, 6);
                }
                goto LABEL_40;
              }
              v78 = sub_216B1E4E0(a2);
              sub_216B903E0(a1, (uint64_t)a2);
              if (sub_216B9837C((uint64_t)a2) || !sub_216B7068C((uint64_t)a2))
              {
                v79 = sub_216B1E4E0(a2);
                sub_216B720D8(a1, v79, 724, (uint64_t)&v96);
                v80 = sub_216B71644((uint64_t)a2);
                sub_216B89E2C((uint64_t *)&v96, v80);
                sub_216B4B3B4(&v96);
                if (sub_216B71174((uint64_t)a2, 1) || sub_216B71174((uint64_t)a2, 2) || sub_216B9837C((uint64_t)a2))
                  goto LABEL_40;
              }
              else
              {
                sub_216B74800((uint64_t)a2, 6);
              }
              sub_216B70D84(&v96);
              sub_216B903E0(a1, (uint64_t)&v96);
              if (sub_216B7214C((uint64_t)&v96, 22))
              {
                v81 = sub_216B1E4E0(a2);
                v82 = sub_216B98364(a1, v81, 0);
                sub_216B720D8(a1, v82, 712, (uint64_t)&v98);
                v83 = sub_216B71644((uint64_t)a2);
                v84 = sub_216B89E2C((uint64_t *)&v98, v83);
                sub_216B89E2C(v84, 0x16u);
                sub_216B4B3B4(&v98);
                sub_216B720D8(a1, v78, 50, (uint64_t)&v98);
                sub_216B89E2C((uint64_t *)&v98, 0x15u);
                sub_216B4B3B4(&v98);
              }
              goto LABEL_40;
            }
            v6 = (***(uint64_t (****)(_QWORD))(a1 + 80))(*(_QWORD *)(a1 + 80));
            goto LABEL_36;
          }
          v51 = sub_216B981D4(a2, v5, a1);
          goto LABEL_82;
        }
        v62 = sub_216B1E4E0(a2);
        sub_216B89BC0(a1, (uint64_t)a2);
        if (sub_216B7214C((uint64_t)a2, 21))
        {
          sub_216B720D8(a1, v62, 770, (uint64_t)v90);
          v52 = v90;
LABEL_66:
          sub_216B4B3B4(v52);
LABEL_67:
          sub_216B2E0F8(v99, 0);
          goto LABEL_39;
        }
        v63 = v62;
        sub_216B89BC0(a1, (uint64_t)a2);
        sub_216B25034(&v98);
        v64 = sub_216B1E4E0(a2);
        if ((sub_216B9C7F0(a1, a2, (uint64_t)&v98, (uint64_t)"'__has_warning'", 0) & 1) == 0)
        {
          while (sub_216B7214C((uint64_t)a2, 22))
          {
            if (!sub_216B7214C((uint64_t)a2, 2))
              break;
            if (!sub_216B7214C((uint64_t)a2, 1))
              break;
            sub_216B89BC0(a1, (uint64_t)a2);
          }
          std::string::~string(&v98);
          goto LABEL_67;
        }
        v66 = sub_216B71174((uint64_t)a2, 22);
        if (v66)
        {
          if ((unint64_t)sub_216B25B78((uint64_t)&v98, v65) >= 3
            && *(_BYTE *)sub_216B25B54((uint64_t)&v98, 0) == 45
            && *(_BYTE *)sub_216B25B54((uint64_t)&v98, 1) == 87)
          {
            sub_216B98178(&v96);
            v67 = sub_216B2037C(a1);
            v68 = sub_216B4B8D0(v67);
            v69 = sub_216B1E600(v68);
            sub_216B9817C((uint64_t)&v98, 2, -1, (uint64_t)&v86);
            sub_216B26CA0(v87, &v86);
            v70 = sub_216B4EE74(v69, 0, v87[0], (size_t)v87[1], (uint64_t)&v96) ^ 1;
            std::string::~string(&v86);
            sub_216B1FF6C(&v96);
            goto LABEL_106;
          }
          sub_216B720D8(a1, v64, 876, (uint64_t)v88);
          v77 = v88;
        }
        else
        {
          sub_216B720D8(a1, v63, 770, (uint64_t)v89);
          v77 = v89;
        }
        sub_216B4B3B4(v77);
        v70 = 0;
LABEL_106:
        std::string::~string(&v98);
        sub_216B2E0F8(v99, v70);
        if (!v66)
          goto LABEL_39;
        goto LABEL_37;
      }
      v58 = sub_216B980D4(a2, v5, a1);
    }
    sub_216B2E0F8(v99, v58);
    if (!sub_216B71174((uint64_t)a2, 22))
      goto LABEL_39;
    goto LABEL_37;
  }
  v6 = *(_DWORD *)(a1 + 432);
  *(_DWORD *)(a1 + 432) = v6 + 1;
LABEL_36:
  sub_216B248D8(v99, v6);
LABEL_37:
  v19 = (uint64_t)a2;
  v20 = 8;
LABEL_38:
  sub_216B74800(v19, v20);
LABEL_39:
  v21 = sub_216B40E80((uint64_t *)v99);
  v23 = v22;
  v24 = sub_216B1E4E0(a2);
  v25 = sub_216B1E4E0(a2);
  sub_216B9BCE4(a1, v21, v23, a2, v24, v25);
LABEL_40:
  sub_216B40DB8(v99);
  return sub_216B2489C(v100);
}

_BYTE *sub_216B958A4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  int v44;
  _BOOL4 v45;
  char v46;
  BOOL v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  _DWORD *v57;
  unsigned int *v59;
  uint64_t v60[2];
  _BYTE v61[16];
  _BYTE v62[16];
  _BYTE v63[16];
  uint64_t v64[2];
  uint64_t v65[2];
  _QWORD v66[7];
  _BYTE v67[20];
  int v68;
  _BYTE v69[16];
  _BYTE v70[16];
  _BYTE v71[20];
  unsigned int v72;
  unsigned int v73[6];
  _QWORD v74[7];
  _QWORD v75[7];
  const void *v76[15];
  uint64_t v77[197];

  v77[195] = *MEMORY[0x24BDAC8D0];
  v7 = sub_216B4CBC4(a3);
  v59 = (unsigned int *)a3;
  v8 = sub_216B96348(a3);
  sub_216B70D84(v73);
  sub_216B89BC0(a1, (uint64_t)v73);
  sub_216B96358(v77);
  sub_216B4AED0(&v72);
  if (!sub_216B7214C((uint64_t)v73, 22))
  {
    LODWORD(v10) = 0;
    v9 = 0;
    goto LABEL_55;
  }
  v57 = a4;
  v9 = 0;
  v10 = 0;
  do
  {
    if ((v9 & 1) != 0 && (sub_216B71174((uint64_t)v73, 1) || sub_216B71174((uint64_t)v73, 2)))
    {
      v9 = 1;
      break;
    }
    v11 = sub_216B60724((uint64_t)v77);
    v12 = sub_216B1E4E0(v73);
    v13 = 0;
    v14 = v7 < 2 && v8;
    while (1)
    {
      sub_216B89BC0(a1, (uint64_t)v73);
      if (sub_216B71174((uint64_t)v73, 1) || sub_216B71174((uint64_t)v73, 2))
        break;
      if (sub_216B71174((uint64_t)v73, 22))
      {
        if (!v13)
        {
          *v57 = sub_216B1E4E0(v73);
          goto LABEL_34;
        }
        --v13;
LABEL_31:
        sub_216B623F0((uint64_t)v77, (uint64_t)v73);
      }
      else
      {
        if (sub_216B71174((uint64_t)v73, 21))
        {
          ++v13;
          goto LABEL_31;
        }
        if (sub_216B71174((uint64_t)v73, 64) && !v13 && (sub_216B9635C((uint64_t)v73) & 0x80) == 0)
        {
          if (!v14)
            goto LABEL_34;
          v13 = 0;
          goto LABEL_31;
        }
        if (!sub_216B71174((uint64_t)v73, 5) || (*(_WORD *)(a1 + 436) & 2) != 0)
        {
          if (sub_216B7068C((uint64_t)v73))
          {
            v15 = sub_216B7068C((uint64_t)v73);
            v16 = sub_216B7AE74(a1, v15);
            if (v16)
            {
              if (!sub_216B7AE94(v16))
                sub_216B72300((uint64_t)v73, 4);
            }
          }
          else if (sub_216B71174((uint64_t)v73, 3))
          {
            v17 = *(_QWORD *)(a1 + 680);
            if (v17)
            {
              v18 = sub_216B7068C((uint64_t)a2);
              (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v17 + 48))(v17, v18, v59, v10);
            }
            v9 = 1;
          }
          goto LABEL_31;
        }
      }
    }
    if ((v9 & 1) == 0)
    {
      sub_216B7B558(a1, a2, 766, (uint64_t)v71);
      sub_216B4B3B4(v71);
      v37 = sub_216B1E4E0(v59);
      sub_216B720D8(a1, v37, 823, (uint64_t)v76);
      v38 = sub_216B7068C((uint64_t)a2);
      sub_216B89E58((uint64_t *)v76, v38);
      sub_216B4B3B4(v76);
      v39 = 0;
      *(_OWORD *)a2 = *(_OWORD *)v73;
      *(unsigned int *)((char *)a2 + 15) = *(unsigned int *)((char *)&v73[3] + 3);
      goto LABEL_107;
    }
    v19 = sub_216B1D1D4(24);
    v20 = sub_216B70D84(v19);
    *(_OWORD *)v20 = *(_OWORD *)v73;
    *(_DWORD *)(v20 + 15) = *(unsigned int *)((char *)&v73[3] + 3);
    v9 = 1;
    sub_216B92C84(a1, v19, 1, 1, 1);
LABEL_34:
    if (sub_216B29084(v77) && sub_216B71644((uint64_t)v73) == 22)
      break;
    if (v7)
      v21 = 1;
    else
      v21 = v8;
    if ((v21 & 1) == 0 && sub_216B4B4A8(&v72))
    {
      if (sub_216B60724((uint64_t)v77) == v11)
      {
        v72 = v12;
      }
      else
      {
        v22 = (unsigned int *)sub_216B60770((uint64_t)v77, v11);
        v72 = sub_216B1E4E0(v22);
      }
    }
    if (sub_216B60724((uint64_t)v77) == v11)
    {
      v23 = **(_QWORD **)(a1 + 24);
      if ((v23 & 1) == 0)
      {
        if ((v23 & 0x80) != 0)
          v24 = 864;
        else
          v24 = 781;
        sub_216B7B558(a1, v73, v24, (uint64_t)v70);
        sub_216B4B3B4(v70);
      }
    }
    sub_216B70D84(v76);
    sub_216B75074((uint64_t)v76);
    sub_216B74800((uint64_t)v76, 1);
    v25 = sub_216B1E4E0(v73);
    sub_216B2A7D8(v76, v25);
    sub_216B68C9C((uint64_t)v76, 0);
    sub_216B623F0((uint64_t)v77, (uint64_t)v76);
    v10 = (v10 + 1);
    v7 -= (v7 != 0) & ~v9;
  }
  while (sub_216B7214C((uint64_t)v73, 22));
LABEL_55:
  v26 = v59;
  v27 = sub_216B4CBC4((uint64_t)v59);
  v28 = v10 <= v27 || v8;
  if ((v28 & 1) == 0 && (v9 & 1) == 0)
  {
    sub_216B720D8(a1, v72, 760, (uint64_t)v69);
    sub_216B4B3B4(v69);
    v29 = sub_216B1E4E0(v59);
    sub_216B720D8(a1, v29, 823, (uint64_t)v76);
    v30 = sub_216B7068C((uint64_t)a2);
    sub_216B89E58((uint64_t *)v76, v30);
    sub_216B4B3B4(v76);
    sub_216B6D390(v76);
    v68 = 0;
    sub_216B2D768(v75);
    sub_216B2D768(v74);
    if (sub_216B96364(a1, (uint64_t)v77, v76, &v68, v75, v74))
    {
      if (v68 == v27)
      {
        sub_216B7B558(a1, a2, 829, (uint64_t)v67);
        v31 = (unsigned int *)sub_216B1E600((uint64_t)v75);
        v32 = sub_216B1E67C((uint64_t)v75);
        if (v31 != (unsigned int *)v32)
        {
          v33 = (unsigned int *)v32;
          do
          {
            v34 = sub_216B1E4E0(v31);
            sub_216B1E678((int)v65, "(");
            sub_216B73974(v34, v65[0], v65[1], 0, (uint64_t)v66);
            sub_216B73938((uint64_t)v67, (uint64_t)v66);
            sub_216B4C8CC(v66);
            v35 = sub_216B693F8((uint64_t)v31);
            sub_216B1E678((int)v64, ")");
            sub_216B73974(v35, v64[0], v64[1], 0, (uint64_t)v66);
            sub_216B73938((uint64_t)v67, (uint64_t)v66);
            sub_216B4C8CC(v66);
            v31 += 2;
          }
          while (v31 != v33);
        }
        sub_216B96630(v77, (uint64_t)v76);
        sub_216B4B3B4(v67);
        v36 = 1;
        LODWORD(v10) = v27;
        goto LABEL_73;
      }
LABEL_67:
      v36 = 0;
    }
    else
    {
      if (sub_216B29084(v74))
        goto LABEL_67;
      sub_216B7B558(a1, a2, 822, (uint64_t)v66);
      v40 = (uint64_t *)sub_216B1E600((uint64_t)v74);
      v41 = sub_216B1E67C((uint64_t)v74);
      if (v40 != (uint64_t *)v41)
      {
        v42 = (uint64_t *)v41;
        do
          sub_216B7A280(v66, v40++);
        while (v40 != v42);
      }
      sub_216B4B3B4(v66);
      v36 = 0;
LABEL_73:
      v26 = v59;
    }
    sub_216B1FF6C(v74);
    sub_216B1FF6C(v75);
    sub_216B1FF6C(v76);
    if (!v36)
      goto LABEL_99;
  }
  if ((v9 & 1) != 0)
  {
    sub_216B70D84(v76);
    sub_216B75074((uint64_t)v76);
    sub_216B74800((uint64_t)v76, 1);
    v43 = sub_216B1E4E0(v73);
    sub_216B2A7D8(v76, v43);
    sub_216B68C9C((uint64_t)v76, 0);
    v44 = v27 - v10;
    if (v27 > v10)
    {
      do
      {
        sub_216B623F0((uint64_t)v77, (uint64_t)v76);
        --v44;
      }
      while (v44);
      LODWORD(v10) = v27;
    }
  }
  if (v10 >= v27)
  {
    if (v10 > v27 && ((sub_216B96348((uint64_t)v26) | v9) & 1) == 0)
    {
      sub_216B7B558(a1, a2, 760, (uint64_t)v61);
      sub_216B4B3B4(v61);
      v49 = sub_216B1E4E0(v26);
      sub_216B720D8(a1, v49, 823, (uint64_t)v76);
      v50 = (uint64_t)a2;
      goto LABEL_98;
    }
    v46 = 0;
    goto LABEL_106;
  }
  v45 = sub_216B96348((uint64_t)v26);
  v46 = v45;
  if (!(_DWORD)v10 && v27 == 1)
    goto LABEL_103;
  if (v45)
  {
    v47 = !(_DWORD)v10 && v27 == 2;
    v48 = v47;
    if ((_DWORD)v10 + 1 == v27 || v48)
    {
      if ((sub_216B968EC((uint64_t)v26) & 1) == 0)
      {
        sub_216B7B558(a1, v73, 786, (uint64_t)v63);
        sub_216B4B3B4(v63);
        v53 = sub_216B1E4E0(v26);
        sub_216B720D8(a1, v53, 823, (uint64_t)v76);
        v54 = sub_216B7068C((uint64_t)a2);
        sub_216B89E58((uint64_t *)v76, v54);
        sub_216B4B3B4(v76);
      }
      v46 = 1;
LABEL_103:
      v55 = sub_216B1E4E0(v73);
      sub_216B75074((uint64_t)v73);
      sub_216B74800((uint64_t)v73, 1);
      sub_216B2A7D8(v73, v55);
      sub_216B68C9C((uint64_t)v73, 0);
      sub_216B623F0((uint64_t)v77, (uint64_t)v73);
      if (!(_DWORD)v10 && v27 == 2)
        sub_216B623F0((uint64_t)v77, (uint64_t)v73);
LABEL_106:
      sub_216B968F8(v60, v77);
      v39 = sub_216B7AB54((uint64_t)v26, v60[0], v60[1], v46, a1);
      goto LABEL_107;
    }
  }
  if ((v9 & 1) != 0)
  {
    v46 = 0;
    goto LABEL_103;
  }
  sub_216B7B558(a1, v73, 759, (uint64_t)v62);
  sub_216B4B3B4(v62);
  v51 = sub_216B1E4E0(v26);
  sub_216B720D8(a1, v51, 823, (uint64_t)v76);
  v50 = (uint64_t)a2;
LABEL_98:
  v52 = sub_216B7068C(v50);
  sub_216B89E58((uint64_t *)v76, v52);
  sub_216B4B3B4(v76);
LABEL_99:
  v39 = 0;
LABEL_107:
  sub_216B1FF6C(v77);
  return v39;
}

uint64_t sub_216B96174(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;

  if (sub_216B8F230((uint64_t)a2) && (sub_216B8F224((uint64_t)a2) & 1) == 0)
  {
    v4 = sub_216B1E4E0(a2);
    sub_216B8F248(a1 + 1008, v4);
  }
  return sub_216B98390((uint64_t)a2, 1);
}

uint64_t sub_216B961CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B99628((const void **)a1, 0);
  v4 = sub_216B1E67C(a1);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v5;
  v7 = sub_216B1E67C(a1) + 40;
  return sub_216B203A4(a1, v7);
}

uint64_t sub_216B96234(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 40 * a2;
}

uint64_t sub_216B9625C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 12) >> 3) & 1;
}

BOOL sub_216B96268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v6 = sub_216B8F204(a1, 0);
  v7 = sub_216B7068C(v6);
  if (!v7)
    return 1;
  v8 = v7;
  if (sub_216B5E138(v7))
  {
    v9 = sub_216B983E8(a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v8);
  }
  if (sub_216B5E108(v8))
  {
    v10 = sub_216B7AE74(a3, v8);
    v11 = sub_216B7AE94(v10);
    if (v8 != a2 && v11)
      return 0;
  }
  if (sub_216B8F1D4(a1))
    return 1;
  v13 = sub_216B1E67C(a1);
  v14 = sub_216B7C944(a1);
  if (v13 == v14)
    return 1;
  v15 = v14;
  v16 = v13 + 8;
  do
  {
    v17 = *(_QWORD *)(v16 - 8);
    result = v17 != v8;
    v18 = v17 == v8 || v16 == v15;
    v16 += 8;
  }
  while (!v18);
  return result;
}

BOOL sub_216B96348(uint64_t a1)
{
  return (*(_WORD *)(a1 + 244) & 0xC) != 0;
}

uint64_t sub_216B9635C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18);
}

BOOL sub_216B96364(uint64_t a1, uint64_t a2, const void **a3, _DWORD *a4, _QWORD *a5, _QWORD *a6)
{
  _BOOL8 result;
  unsigned int *v13;
  unsigned int *v14;
  __int128 *v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  char v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD v32[6];

  result = sub_216B983F0(a2);
  if (result)
  {
    v30 = a6;
    v13 = (unsigned int *)sub_216B1E600(a2);
    v14 = (unsigned int *)sub_216B1E67C(a2);
    *a4 = 0;
    sub_216B70D84(v32);
    v15 = (__int128 *)sub_216B1E600(a2);
    v16 = sub_216B1E67C(a2);
    if (v15 != (__int128 *)v16)
    {
      v17 = (unsigned int *)v16;
      v18 = 0;
      v19 = 0;
      do
      {
        if (sub_216B71174((uint64_t)v15, 23))
        {
          ++v18;
        }
        else if (sub_216B71174((uint64_t)v15, 24))
        {
          if (((v14 == v17) & v19) != 0)
            v20 = (unsigned int *)v15;
          else
            v20 = v14;
          if (v18 == 1)
          {
            v14 = v20;
            v18 = 0;
          }
          else
          {
            --v18;
          }
        }
        else if (sub_216B71174((uint64_t)v15, 1))
        {
          if (v18)
          {
            sub_216B74800((uint64_t)v15, 64);
            v19 = 1;
            sub_216B68C9C((uint64_t)v15, 1);
          }
          else
          {
            ++*a4;
            if ((v19 & 1) != 0)
            {
              if (sub_216B71174((uint64_t)v13, 23))
              {
                v21 = sub_216B1E4E0(v13);
                v22 = sub_216B1E4E0(v14);
                v23 = sub_216B98364(a1, v22, 0);
                sub_216B746DC(&v31, v21, v23);
                sub_216B268AC((uint64_t)v30, &v31);
                v14 = v17;
              }
              sub_216B75074((uint64_t)v32);
              sub_216B74800((uint64_t)v32, 21);
              v24 = sub_216B1E4E0(v13);
              sub_216B2A7D8(v32, v24);
              sub_216B68C9C((uint64_t)v32, 0);
              sub_216B623F0((uint64_t)a3, (uint64_t)v32);
              v25 = sub_216B1E67C((uint64_t)a3);
              sub_216B98518(a3, v25, (uint64_t)v13, v15);
              v26 = sub_216B1E4E0((unsigned int *)v15 - 6);
              v27 = sub_216B98364(a1, v26, 0);
              sub_216B75074((uint64_t)v32);
              sub_216B74800((uint64_t)v32, 22);
              sub_216B2A7D8(v32, v27);
              sub_216B68C9C((uint64_t)v32, 0);
              sub_216B623F0((uint64_t)a3, (uint64_t)v32);
              v28 = sub_216B1E4E0(v13);
              sub_216B746DC(&v31, v28, v27);
              sub_216B268AC((uint64_t)a5, &v31);
            }
            else
            {
              v29 = sub_216B1E67C((uint64_t)a3);
              sub_216B98518(a3, v29, (uint64_t)v13, v15);
            }
            sub_216B623F0((uint64_t)a3, (uint64_t)v15);
            v19 = 0;
            v18 = 0;
            v13 = (unsigned int *)v15 + 6;
          }
        }
        v15 = (__int128 *)((char *)v15 + 24);
      }
      while (v15 != (__int128 *)v17);
    }
    return !sub_216B29084(a5) && sub_216B29084(v30);
  }
  return result;
}

uint64_t *sub_216B96630(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (result != (uint64_t *)a2)
  {
    v3 = (uint64_t)result;
    if (sub_216B2081C(result) || sub_216B2081C((_QWORD *)a2))
    {
      v4 = sub_216B60724(a2);
      if (v4 > sub_216B6F140(v3))
      {
        v5 = sub_216B60724(a2);
        sub_216B67B88((const void **)v3, v5);
      }
      v6 = sub_216B60724(v3);
      if (v6 > sub_216B6F140(a2))
      {
        v7 = sub_216B60724(v3);
        sub_216B67B88((const void **)a2, v7);
      }
      v8 = sub_216B60724(v3);
      if (v8 > sub_216B60724(a2))
        v8 = sub_216B60724(a2);
      if ((_DWORD)v8)
      {
        v9 = 0;
        do
        {
          v10 = sub_216B60770(v3, v9);
          v11 = sub_216B60770(a2, v9);
          sub_216B99640(v10, v11);
          ++v9;
        }
        while ((_DWORD)v8 != v9);
      }
      v12 = sub_216B60724(v3);
      if (v12 > sub_216B60724(a2))
      {
        v13 = sub_216B60724(v3);
        v14 = v13 - sub_216B60724(a2);
        v15 = 3 * v8;
        v16 = (void *)(sub_216B1E600(v3) + 24 * v8);
        v17 = sub_216B1E67C(v3);
        v18 = (void *)sub_216B1E67C(a2);
        sub_216B2A5E4(v16, v17, v18);
        v19 = sub_216B1E67C(a2);
        sub_216B203A4(a2, v19 + 24 * v14);
        v20 = sub_216B1E600(v3) + 8 * v15;
        v21 = sub_216B1E67C(v3);
        nullsub_1(v20, v21);
        v22 = sub_216B1E600(v3) + 8 * v15;
        v23 = v3;
        return (uint64_t *)sub_216B203A4(v23, v22);
      }
      v24 = sub_216B60724(a2);
      result = (uint64_t *)sub_216B60724(v3);
      if (v24 > (unint64_t)result)
      {
        v25 = sub_216B60724(a2);
        v26 = v25 - sub_216B60724(v3);
        v27 = 3 * v8;
        v28 = (void *)(sub_216B1E600(a2) + 24 * v8);
        v29 = sub_216B1E67C(a2);
        v30 = (void *)sub_216B1E67C(v3);
        sub_216B2A5E4(v28, v29, v30);
        v31 = sub_216B1E67C(v3);
        sub_216B203A4(v3, v31 + 24 * v26);
        v32 = sub_216B1E600(a2) + 8 * v27;
        v33 = sub_216B1E67C(a2);
        nullsub_1(v32, v33);
        v22 = sub_216B1E600(a2) + 8 * v27;
        v23 = a2;
        return (uint64_t *)sub_216B203A4(v23, v22);
      }
    }
    else
    {
      sub_216B20BF4((uint64_t *)v3, (uint64_t *)a2);
      sub_216B20BF4((uint64_t *)(v3 + 8), (uint64_t *)(a2 + 8));
      return sub_216B20BF4((uint64_t *)(v3 + 16), (uint64_t *)(a2 + 16));
    }
  }
  return result;
}

uint64_t sub_216B968EC(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 5) & 1;
}

unint64_t sub_216B968FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[0] = a3;
  v23[1] = a4;
  v22 = a2;
  if (sub_216B29094((uint64_t)v23))
    return 0;
  v21 = sub_216B60724(a1 + 1488);
  v6 = sub_216B1E67C((uint64_t)v23);
  v7 = sub_216B6F140(a1 + 1488);
  v8 = v7 - sub_216B60724(a1 + 1488);
  v9 = (__int128 *)sub_216B1E600((uint64_t)v23);
  v10 = (__int128 *)sub_216B7ACB0(v23);
  sub_216B96A54((const void **)(a1 + 1488), v9, v10);
  if (v6 > v8)
  {
    v11 = sub_216B2D0E0((_QWORD *)(a1 + 1896));
    if (v11)
    {
      v12 = 0;
      do
      {
        v19 = 0;
        v20 = 0;
        v13 = (uint64_t *)sub_216B2D0F0((_QWORD *)(a1 + 1896), v12);
        v18.n128_u64[0] = sub_216B96B08((uint64_t)&v20, (uint64_t)&v19);
        v18.n128_u64[1] = v14;
        sub_216B96B34((uint64_t)&v18, v13);
        v15 = sub_216B262E0(a1 + 1488);
        *(_QWORD *)(v20 + 24) = v15 + 24 * v19;
        ++v12;
      }
      while (v11 != v12);
    }
  }
  v18.n128_u64[0] = sub_216B206E0((uint64_t)&v22, (uint64_t)&v21);
  v18.n128_u64[1] = v16;
  sub_216B96B7C((uint64_t *)(a1 + 1896), &v18);
  v17 = sub_216B262E0(a1 + 1488);
  return v17 + 24 * v21;
}

uint64_t sub_216B96A54(const void **a1, __int128 *a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;

  v6 = sub_216B986F4((uint64_t)a2, (uint64_t)a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > 0xAAAAAAAAAAAAAAABLL * ((v7 - sub_216B1E67C((uint64_t)a1)) >> 3))
  {
    v8 = sub_216B60724((uint64_t)a1);
    sub_216B67B88(a1, v8 + v6);
  }
  v9 = (_OWORD *)sub_216B1E67C((uint64_t)a1);
  sub_216B987F0(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + 24 * v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216B96B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B996B0(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B96B34(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)sub_216B262E0(a1) = v4;
  v5 = a2[1];
  *(_QWORD *)sub_216B2C660(a1) = v5;
  return a1;
}

uint64_t sub_216B96B7C(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, (uint64_t)a2))
  {
    result = sub_216B996B4(a1, a2);
  }
  else
  {
    sub_216B8F794((uint64_t)a1, a2);
    result = v4 + 16;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216B96BD4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(a1 + 1896);
  v3 = sub_216B2CFB0(a1 + 1896);
  sub_216B96C0C((const void **)(a1 + 1488), *(_DWORD *)(v3 + 8));
  return sub_216B2CFBC(v2);
}

unint64_t sub_216B96C0C(const void **a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  _QWORD *v9;
  uint64_t v10;

  v3 = a2;
  if (sub_216B60724((uint64_t)a1) > a2)
  {
    v4 = 3 * v3;
    v5 = sub_216B1E600((uint64_t)a1) + 24 * v3;
    v6 = sub_216B1E67C((uint64_t)a1);
    nullsub_1(v5, v6);
    v7 = sub_216B1E600((uint64_t)a1) + 8 * v4;
    return sub_216B203A4((uint64_t)a1, v7);
  }
  result = sub_216B60724((uint64_t)a1);
  if (result < v3)
  {
    if (sub_216B6F140((uint64_t)a1) < v3)
      sub_216B67B88(a1, v3);
    v9 = (_QWORD *)sub_216B1E67C((uint64_t)a1);
    v10 = sub_216B1E600((uint64_t)a1) + 24 * v3;
    while (v9 != (_QWORD *)v10)
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      sub_216B70D84(v9);
      v9 += 3;
    }
    v7 = sub_216B1E600((uint64_t)a1) + 24 * v3;
    return sub_216B203A4((uint64_t)a1, v7);
  }
  return result;
}

uint64_t sub_216B96D04(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  tm *v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20[8];
  uint64_t v21[6];
  _BYTE v22[56];
  time_t v23;

  v23 = time(0);
  v6 = localtime(&v23);
  sub_216B29078(v22);
  sub_216B40D84(v21);
  v7 = &off_24D602748[v6->tm_mon];
  v19 = v6->tm_year + 1900;
  sub_216B98A64((uint64_t)"\"%s %2d %4d\"", (uint64_t)v7, (uint64_t)&v6->tm_mday, (uint64_t)&v19, (uint64_t)v20);
  sub_216B40450((uint64_t)v21, (uint64_t)v20);
  j_j_nullsub_1(v20);
  sub_216B70D84(v20);
  sub_216B75074((uint64_t)v20);
  v8 = sub_216B40E80(v21);
  v10 = v9;
  sub_216B4AED0(&v18);
  sub_216B4AED0(&v17);
  sub_216B9BCE4(a3, v8, v10, v20, v18, v17);
  *a1 = sub_216B1E4E0(v20);
  sub_216B40DB8(v21);
  sub_216B2489C(v22);
  sub_216B29078(v22);
  sub_216B40D84(v21);
  sub_216B98A7C((uint64_t)"\"%02d:%02d:%02d\"", (uint64_t)&v6->tm_hour, (uint64_t)&v6->tm_min, (uint64_t)v6, (uint64_t)v20);
  sub_216B40450((uint64_t)v21, (uint64_t)v20);
  j_j_nullsub_1(v20);
  sub_216B70D84(v20);
  sub_216B75074((uint64_t)v20);
  v11 = sub_216B40E80(v21);
  v13 = v12;
  sub_216B4AED0(&v16);
  sub_216B4AED0(&v15);
  sub_216B9BCE4(a3, v11, v13, v20, v16, v15);
  *a2 = sub_216B1E4E0(v20);
  sub_216B40DB8(v21);
  return sub_216B2489C(v22);
}

uint64_t sub_216B96EC0(_DWORD *a1)
{
  unsigned int v1;

  v1 = (*a1 >> 9) & 0x7FF;
  if (v1 <= 0x1A)
    return 0;
  else
    return v1 - 27;
}

uint64_t sub_216B96ED8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_216B96EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  BOOL v31;
  BOOL v32;
  char v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  _QWORD v50[3];
  const void *v51[2];
  const void *v52[2];
  uint64_t v53;
  uint64_t v54;

  if ((sub_216B971D0(a1, a2) & 1) != 0)
    return 1;
  v5 = sub_216B2037C(a1);
  if ((int)sub_216B387B8(v5) > 3)
    return 0;
  v6 = (_BYTE *)sub_216B5EE7C(a1);
  v53 = sub_216B4A11C(a2);
  v54 = v7;
  sub_216B1E678((int)v52, "__");
  if (sub_216B2A2EC((uint64_t)&v53, v52[0], (size_t)v52[1]))
  {
    sub_216B1E678((int)v51, "__");
    if (sub_216B4A164(&v53, v51[0], (size_t)v51[1]) && (unint64_t)sub_216B1E67C((uint64_t)&v53) >= 4)
    {
      v8 = sub_216B1E67C((uint64_t)&v53);
      v53 = sub_216B2864C(&v53, 2uLL, v8 - 4);
      v54 = v9;
    }
  }
  sub_216B32854(v50, v53, v54);
  v49 = 1;
  v10 = sub_216B34334((uint64_t)v50, "nullability", (uint64_t)&v49);
  v48 = 1;
  v11 = sub_216B345E4(v10, (uint64_t)"c_alignas", (uint64_t)&v48);
  v47 = 1;
  v12 = sub_216B32AEC(v11, "c_atomic", (uint64_t)&v47);
  v46 = 1;
  v13 = sub_216B4A31C(v12, (uint64_t)"c_generic_selections", (uint64_t)&v46);
  v45 = 1;
  v14 = sub_216B4A390(v13, "c_static_assert", (uint64_t)&v45);
  v15 = sub_216B27CB0(a1);
  v44 = sub_216B5F6D0(v15);
  v16 = sub_216B346C4(v14, "c_thread_local", (uint64_t)&v44);
  v43 = (*v6 & 0x40) != 0;
  v17 = sub_216B328C8(v16, (uint64_t)"cxx_atomic", (uint64_t)&v43);
  v42 = (*v6 & 0x40) != 0;
  v18 = sub_216B4A5C0(v17, "cxx_deleted_functions", (uint64_t)&v42);
  v41 = (*v6 & 0x40) != 0;
  v19 = sub_216B4A634(v18, "cxx_explicit_conversions", (uint64_t)&v41);
  v40 = (*v6 & 0x40) != 0;
  v20 = sub_216B4A5C0(v19, "cxx_inline_namespaces", (uint64_t)&v40);
  v39 = (*v6 & 0x40) != 0;
  v21 = sub_216B4A79C(v20, (uint64_t)"cxx_local_type_template_args", (uint64_t)&v39);
  v38 = (*v6 & 0x40) != 0;
  v22 = sub_216B4A228(v21, (uint64_t)"cxx_nonstatic_member_init", (uint64_t)&v38);
  v37 = (*v6 & 0x40) != 0;
  v23 = sub_216B4A31C(v22, (uint64_t)"cxx_override_control", (uint64_t)&v37);
  v36 = (*v6 & 0x40) != 0;
  v24 = sub_216B4A400(v23, "cxx_range_for", (uint64_t)&v36);
  v35 = (*v6 & 0x40) != 0;
  v25 = sub_216B98BC0(v24, "cxx_reference_qualified_functions", (uint64_t)&v35);
  v34 = (*v6 & 0x40) != 0;
  v26 = sub_216B4A5C0(v25, "cxx_rvalue_references", (uint64_t)&v34);
  v33 = 1;
  v27 = sub_216B4A6A8(v26, "cxx_binary_literals", (uint64_t)&v33);
  v32 = (*(_DWORD *)v6 & 0x80) != 0;
  v28 = sub_216B4A470(v27, (uint64_t)"cxx_init_captures", (uint64_t)&v32);
  v31 = (*v6 & 0x40) != 0;
  v29 = sub_216B4A54C(v28, "cxx_variable_templates", (uint64_t)&v31);
  v30 = 0;
  return sub_216B4AA54(v29, &v30);
}

uint64_t sub_216B971D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 v149;
  BOOL v150;
  char v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  BOOL v163;
  BOOL v164;
  BOOL v165;
  BOOL v166;
  BOOL v167;
  BOOL v168;
  BOOL v169;
  BOOL v170;
  BOOL v171;
  BOOL v172;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  BOOL v194;
  BOOL v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  BOOL v200;
  BOOL v201;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  BOOL v214;
  BOOL v215;
  BOOL v216;
  BOOL v217;
  BOOL v218;
  BOOL v219;
  BOOL v220;
  BOOL v221;
  BOOL v222;
  BOOL v223;
  char v224;
  BOOL v225;
  BOOL v226;
  BOOL v227;
  BOOL v228;
  BOOL v229;
  BOOL v230;
  BOOL v231;
  char v232;
  BOOL v233;
  BOOL v234;
  BOOL v235;
  char v236;
  char v237;
  char v238;
  char v239;
  char v240;
  BOOL v241;
  char v242;
  char v243;
  char v244;
  BOOL v245;
  BOOL v246;
  BOOL v247;
  BOOL v248;
  BOOL v249;
  BOOL v250;
  BOOL v251;
  BOOL v252;
  BOOL v253;
  BOOL v254;
  BOOL v255;
  char v256;
  char v257;
  BOOL v258;
  char v259;
  char v260;
  char v261;
  char v262;
  char v263;
  char v264;
  char v265;
  char v266;
  char v267;
  char v268;
  char v269;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  char v276;
  char v277;
  char v278;
  char v279;
  BOOL v280;
  char v281;
  _QWORD v282[3];
  const void *v283[2];
  const void *v284[2];
  uint64_t v285;
  uint64_t v286;

  v4 = sub_216B5EE7C(a1);
  v285 = sub_216B4A11C(a2);
  v286 = v5;
  sub_216B1E678((int)v284, "__");
  if (sub_216B2A2EC((uint64_t)&v285, v284[0], (size_t)v284[1]))
  {
    sub_216B1E678((int)v283, "__");
    if (sub_216B4A164(&v285, v283[0], (size_t)v283[1]) && (unint64_t)sub_216B1E67C((uint64_t)&v285) >= 4)
    {
      v6 = sub_216B1E67C((uint64_t)&v285);
      v285 = sub_216B2864C(&v285, 2uLL, v6 - 4);
      v286 = v7;
    }
  }
  v8 = sub_216B32854(v282, v285, v286);
  v281 = *(_BYTE *)(v4 + 60) & 1;
  v9 = sub_216B4A470((uint64_t)v8, (uint64_t)"address_sanitizer", (uint64_t)&v281);
  v280 = (*(_QWORD *)v4 & 0x800400) != 0;
  v10 = sub_216B346C4(v9, "assume_nonnull", (uint64_t)&v280);
  v279 = 1;
  v11 = sub_216B4A884(v10, "attribute_analyzer_noreturn", (uint64_t)&v279);
  v278 = 1;
  v12 = sub_216B4A54C(v11, "attribute_availability", (uint64_t)&v278);
  v277 = 1;
  v13 = sub_216B4A4E4(v12, "attribute_availability_with_message", (uint64_t)&v277);
  v276 = 1;
  v14 = sub_216B98C28(v13, "attribute_availability_app_extension", (uint64_t)&v276);
  v275 = 1;
  v15 = sub_216B4A884(v14, "attribute_availability_tvos", (uint64_t)&v275);
  v274 = 1;
  v16 = sub_216B98BC0(v15, "attribute_cf_returns_not_retained", (uint64_t)&v274);
  v273 = 1;
  v17 = sub_216B4A9D4(v16, "attribute_cf_returns_retained", (uint64_t)&v273);
  v272 = 1;
  v18 = sub_216B98BC0(v17, "attribute_deprecated_with_message", (uint64_t)&v272);
  v271 = 1;
  v19 = sub_216B4A228(v18, (uint64_t)"attribute_ext_vector_type", (uint64_t)&v271);
  v270 = 1;
  v20 = sub_216B98BC0(v19, "attribute_ns_returns_not_retained", (uint64_t)&v270);
  v269 = 1;
  v21 = sub_216B4A9D4(v20, "attribute_ns_returns_retained", (uint64_t)&v269);
  v268 = 1;
  v22 = sub_216B4A71C(v21, (uint64_t)"attribute_ns_consumes_self", (uint64_t)&v268);
  v267 = 1;
  v23 = sub_216B4A5C0(v22, "attribute_ns_consumed", (uint64_t)&v267);
  v266 = 1;
  v24 = sub_216B4A5C0(v23, "attribute_cf_consumed", (uint64_t)&v266);
  v265 = 1;
  v25 = sub_216B4A71C(v24, (uint64_t)"attribute_objc_ivar_unused", (uint64_t)&v265);
  v264 = 1;
  v26 = sub_216B4A79C(v25, (uint64_t)"attribute_objc_method_family", (uint64_t)&v264);
  v263 = 1;
  v27 = sub_216B4A54C(v26, "attribute_overloadable", (uint64_t)&v263);
  v262 = 1;
  v28 = sub_216B4A96C(v27, "attribute_unavailable_with_message", (uint64_t)&v262);
  v261 = 1;
  v29 = sub_216B4A71C(v28, (uint64_t)"attribute_unused_on_fields", (uint64_t)&v261);
  v260 = *(_BYTE *)(v4 + 6) & 1;
  v30 = sub_216B32A7C(v29, (uint64_t)"blocks", (uint64_t)&v260);
  v259 = 1;
  v31 = sub_216B4A71C(v30, (uint64_t)"c_thread_safety_attributes", (uint64_t)&v259);
  v258 = (*(_QWORD *)v4 & 0x2000000000) != 0;
  v32 = sub_216B346C4(v31, "cxx_exceptions", (uint64_t)&v258);
  v257 = *(_BYTE *)(v4 + 5) & 1;
  v33 = sub_216B32AEC(v32, "cxx_rtti", (uint64_t)&v257);
  v256 = 1;
  v34 = sub_216B4A5C0(v33, "enumerator_attributes", (uint64_t)&v256);
  v255 = (*(_QWORD *)v4 & 0x800400) != 0;
  v35 = sub_216B34334(v34, "nullability", (uint64_t)&v255);
  v254 = (*(_BYTE *)(v4 + 60) & 2) != 0;
  v36 = sub_216B4A81C(v35, "memory_sanitizer", (uint64_t)&v254);
  v253 = (*(_BYTE *)(v4 + 60) & 4) != 0;
  v37 = sub_216B4A81C(v36, "thread_sanitizer", (uint64_t)&v253);
  v252 = (*(_DWORD *)(v4 + 60) & 0x400000) != 0;
  v38 = sub_216B4A1B4(v37, (uint64_t)"dataflow_sanitizer", (uint64_t)&v252);
  v251 = (*(_QWORD *)(v4 + 20) & 0x20000000000000) != 0;
  v39 = sub_216B32AEC(v38, "objc_arr", (uint64_t)&v251);
  v250 = (*(_QWORD *)(v4 + 20) & 0x20000000000000) != 0;
  v40 = sub_216B32AEC(v39, "objc_arc", (uint64_t)&v250);
  v249 = (*(_QWORD *)(v4 + 20) & 0x40000000000000) != 0;
  v41 = sub_216B4A400(v40, "objc_arc_weak", (uint64_t)&v249);
  v248 = (*(_DWORD *)v4 & 0x800) != 0;
  v42 = sub_216B4A96C(v41, "objc_default_synthesize_properties", (uint64_t)&v248);
  v247 = (*(_DWORD *)v4 & 0x800) != 0;
  v43 = sub_216B4A390(v42, "objc_fixed_enum", (uint64_t)&v247);
  v246 = (*(_DWORD *)v4 & 0x800) != 0;
  v44 = sub_216B4A470(v43, (uint64_t)"objc_instancetype", (uint64_t)&v246);
  v245 = (~*(_QWORD *)v4 & 0x10000000000800) == 0;
  v45 = sub_216B34654(v44, (uint64_t)"objc_modules", (uint64_t)&v245);
  v244 = sub_216B98C90((unsigned int *)(v4 + 68));
  v46 = sub_216B4A6A8(v45, "objc_nonfragile_abi", (uint64_t)&v244);
  v243 = 1;
  v47 = sub_216B4A9D4(v46, "objc_property_explicit_atomic", (uint64_t)&v243);
  v242 = 1;
  v48 = sub_216B98CB0(v47, "objc_protocol_qualifier_mangling", (uint64_t)&v242);
  v241 = sub_216B98D28((unsigned int *)(v4 + 68));
  v49 = sub_216B4A390(v48, "objc_weak_class", (uint64_t)&v241);
  v240 = 1;
  v50 = sub_216B4A390(v49, "ownership_holds", (uint64_t)&v240);
  v239 = 1;
  v51 = sub_216B4A470(v50, (uint64_t)"ownership_returns", (uint64_t)&v239);
  v238 = 1;
  v52 = sub_216B4A390(v51, "ownership_takes", (uint64_t)&v238);
  v237 = 1;
  v53 = sub_216B345E4(v52, (uint64_t)"objc_BOOL", (uint64_t)&v237);
  v236 = sub_216B98C90((unsigned int *)(v4 + 68));
  v54 = sub_216B4A470(v53, (uint64_t)"objc_subscripting", (uint64_t)&v236);
  v235 = (*(_DWORD *)v4 & 0x800) != 0;
  v55 = sub_216B4A6A8(v54, "objc_array_literals", (uint64_t)&v235);
  v234 = (*(_DWORD *)v4 & 0x800) != 0;
  v56 = sub_216B4A634(v55, "objc_dictionary_literals", (uint64_t)&v234);
  v233 = (*(_DWORD *)v4 & 0x800) != 0;
  v57 = sub_216B4A54C(v56, "objc_boxed_expressions", (uint64_t)&v233);
  v232 = 1;
  v58 = sub_216B4A6A8(v57, "arc_cf_code_audited", (uint64_t)&v232);
  v231 = (*(_DWORD *)v4 & 0x800) != 0;
  v59 = sub_216B346C4(v58, "objc_bridge_id", (uint64_t)&v231);
  v230 = (*(_DWORD *)v4 & 0x800) != 0;
  v60 = sub_216B4A71C(v59, (uint64_t)"objc_bridge_id_on_typedefs", (uint64_t)&v230);
  v229 = (*(_DWORD *)v4 & 0x800) != 0;
  v61 = sub_216B4A400(v60, "objc_generics", (uint64_t)&v229);
  v228 = (*(_BYTE *)v4 & 2) != 0;
  v62 = sub_216B345E4(v61, (uint64_t)"c_alignas", (uint64_t)&v228);
  v227 = (*(_BYTE *)v4 & 2) != 0;
  v63 = sub_216B32AEC(v62, "c_atomic", (uint64_t)&v227);
  v226 = (*(_BYTE *)v4 & 2) != 0;
  v64 = sub_216B4A31C(v63, (uint64_t)"c_generic_selections", (uint64_t)&v226);
  v225 = (*(_BYTE *)v4 & 2) != 0;
  v65 = sub_216B4A390(v64, "c_static_assert", (uint64_t)&v225);
  if ((*(_BYTE *)v4 & 2) != 0)
  {
    v67 = sub_216B27CB0(a1);
    v66 = sub_216B5F6D0(v67);
  }
  else
  {
    v66 = 0;
  }
  v224 = v66;
  v68 = sub_216B346C4(v65, "c_thread_local", (uint64_t)&v224);
  v223 = (*(_DWORD *)v4 & 0x80) != 0;
  v69 = sub_216B4A228(v68, (uint64_t)"cxx_access_control_sfinae", (uint64_t)&v223);
  v222 = (*(_DWORD *)v4 & 0x80) != 0;
  v70 = sub_216B4A6A8(v69, "cxx_alias_templates", (uint64_t)&v222);
  v221 = (*(_DWORD *)v4 & 0x80) != 0;
  v71 = sub_216B34334(v70, "cxx_alignas", (uint64_t)&v221);
  v220 = (*(_DWORD *)v4 & 0x80) != 0;
  v72 = sub_216B328C8(v71, (uint64_t)"cxx_atomic", (uint64_t)&v220);
  v219 = (*(_DWORD *)v4 & 0x80) != 0;
  v73 = sub_216B346C4(v72, "cxx_attributes", (uint64_t)&v219);
  v218 = (*(_DWORD *)v4 & 0x80) != 0;
  v74 = sub_216B4A400(v73, "cxx_auto_type", (uint64_t)&v218);
  v217 = (*(_DWORD *)v4 & 0x80) != 0;
  v75 = sub_216B4A400(v74, "cxx_constexpr", (uint64_t)&v217);
  v216 = (*(_DWORD *)v4 & 0x80) != 0;
  v76 = sub_216B34654(v75, (uint64_t)"cxx_decltype", (uint64_t)&v216);
  v215 = (*(_DWORD *)v4 & 0x80) != 0;
  v77 = sub_216B98C28(v76, "cxx_decltype_incomplete_return_types", (uint64_t)&v215);
  v214 = (*(_DWORD *)v4 & 0x80) != 0;
  v78 = sub_216B4A96C(v77, "cxx_default_function_template_args", (uint64_t)&v214);
  v213 = (*(_DWORD *)v4 & 0x80) != 0;
  v79 = sub_216B4A2A8(v78, "cxx_defaulted_functions", (uint64_t)&v213);
  v212 = (*(_DWORD *)v4 & 0x80) != 0;
  v80 = sub_216B4A884(v79, "cxx_delegating_constructors", (uint64_t)&v212);
  v211 = (*(_DWORD *)v4 & 0x80) != 0;
  v81 = sub_216B4A5C0(v80, "cxx_deleted_functions", (uint64_t)&v211);
  v210 = (*(_DWORD *)v4 & 0x80) != 0;
  v82 = sub_216B4A634(v81, "cxx_explicit_conversions", (uint64_t)&v210);
  v209 = (*(_DWORD *)v4 & 0x80) != 0;
  v83 = sub_216B4A79C(v82, (uint64_t)"cxx_generalized_initializers", (uint64_t)&v209);
  v208 = (*(_DWORD *)v4 & 0x80) != 0;
  v84 = sub_216B4A1B4(v83, (uint64_t)"cxx_implicit_moves", (uint64_t)&v208);
  v207 = (*(_DWORD *)v4 & 0x80) != 0;
  v85 = sub_216B4A884(v84, "cxx_inheriting_constructors", (uint64_t)&v207);
  v206 = (*(_DWORD *)v4 & 0x80) != 0;
  v86 = sub_216B4A5C0(v85, "cxx_inline_namespaces", (uint64_t)&v206);
  v205 = (*(_DWORD *)v4 & 0x80) != 0;
  v87 = sub_216B34334(v86, "cxx_lambdas", (uint64_t)&v205);
  v204 = (*(_DWORD *)v4 & 0x80) != 0;
  v88 = sub_216B4A79C(v87, (uint64_t)"cxx_local_type_template_args", (uint64_t)&v204);
  v203 = (*(_DWORD *)v4 & 0x80) != 0;
  v89 = sub_216B4A228(v88, (uint64_t)"cxx_nonstatic_member_init", (uint64_t)&v203);
  v202 = (*(_DWORD *)v4 & 0x80) != 0;
  v90 = sub_216B34654(v89, (uint64_t)"cxx_noexcept", (uint64_t)&v202);
  v201 = (*(_DWORD *)v4 & 0x80) != 0;
  v91 = sub_216B34334(v90, "cxx_nullptr", (uint64_t)&v201);
  v200 = (*(_DWORD *)v4 & 0x80) != 0;
  v92 = sub_216B4A31C(v91, (uint64_t)"cxx_override_control", (uint64_t)&v200);
  v199 = (*(_DWORD *)v4 & 0x80) != 0;
  v93 = sub_216B4A400(v92, "cxx_range_for", (uint64_t)&v199);
  v198 = (*(_DWORD *)v4 & 0x80) != 0;
  v94 = sub_216B4A2A8(v93, "cxx_raw_string_literals", (uint64_t)&v198);
  v197 = (*(_DWORD *)v4 & 0x80) != 0;
  v95 = sub_216B98BC0(v94, "cxx_reference_qualified_functions", (uint64_t)&v197);
  v196 = (*(_DWORD *)v4 & 0x80) != 0;
  v96 = sub_216B4A5C0(v95, "cxx_rvalue_references", (uint64_t)&v196);
  v195 = (*(_DWORD *)v4 & 0x80) != 0;
  v97 = sub_216B4A81C(v96, "cxx_strong_enums", (uint64_t)&v195);
  v194 = (*(_DWORD *)v4 & 0x80) != 0;
  v98 = sub_216B4A470(v97, (uint64_t)"cxx_static_assert", (uint64_t)&v194);
  if ((*(_BYTE *)v4 & 0x80) != 0 && (v99 = sub_216B27CB0(a1), sub_216B5F6D0(v99)))
  {
    v100 = sub_216B27CB0(a1);
    v101 = sub_216B96ED8(v100);
    v102 = !sub_216B34B4C(v101);
  }
  else
  {
    v102 = 0;
  }
  v193 = v102;
  v103 = sub_216B4A81C(v98, "cxx_thread_local", (uint64_t)&v193);
  v192 = (*(_DWORD *)v4 & 0x80) != 0;
  v104 = sub_216B4A6A8(v103, "cxx_trailing_return", (uint64_t)&v192);
  v191 = (*(_DWORD *)v4 & 0x80) != 0;
  v105 = sub_216B4A31C(v104, (uint64_t)"cxx_unicode_literals", (uint64_t)&v191);
  v190 = (*(_DWORD *)v4 & 0x80) != 0;
  v106 = sub_216B4A2A8(v105, "cxx_unrestricted_unions", (uint64_t)&v190);
  v189 = (*(_DWORD *)v4 & 0x80) != 0;
  v107 = sub_216B4A470(v106, (uint64_t)"cxx_user_literals", (uint64_t)&v189);
  v188 = (*(_DWORD *)v4 & 0x80) != 0;
  v108 = sub_216B4A54C(v107, "cxx_variadic_templates", (uint64_t)&v188);
  v187 = *(_BYTE *)(v4 + 1) & 1;
  v109 = sub_216B4A6A8(v108, "cxx_aggregate_nsdmi", (uint64_t)&v187);
  v186 = *(_BYTE *)(v4 + 1) & 1;
  v110 = sub_216B4A6A8(v109, "cxx_binary_literals", (uint64_t)&v186);
  v185 = *(_BYTE *)(v4 + 1) & 1;
  v111 = sub_216B4A71C(v110, (uint64_t)"cxx_contextual_conversions", (uint64_t)&v185);
  v184 = *(_BYTE *)(v4 + 1) & 1;
  v112 = sub_216B4A470(v111, (uint64_t)"cxx_decltype_auto", (uint64_t)&v184);
  v183 = *(_BYTE *)(v4 + 1) & 1;
  v113 = sub_216B4A6A8(v112, "cxx_generic_lambdas", (uint64_t)&v183);
  v182 = *(_BYTE *)(v4 + 1) & 1;
  v114 = sub_216B4A470(v113, (uint64_t)"cxx_init_captures", (uint64_t)&v182);
  v181 = *(_BYTE *)(v4 + 1) & 1;
  v115 = sub_216B4A5C0(v114, "cxx_relaxed_constexpr", (uint64_t)&v181);
  v180 = *(_BYTE *)(v4 + 1) & 1;
  v116 = sub_216B4A228(v115, (uint64_t)"cxx_return_type_deduction", (uint64_t)&v180);
  v179 = *(_BYTE *)(v4 + 1) & 1;
  v117 = sub_216B4A54C(v116, "cxx_variable_templates", (uint64_t)&v179);
  v178 = (*(_BYTE *)v4 & 0x40) != 0;
  v118 = sub_216B4A1B4(v117, (uint64_t)"has_nothrow_assign", (uint64_t)&v178);
  v177 = (*(_BYTE *)v4 & 0x40) != 0;
  v119 = sub_216B4A81C(v118, "has_nothrow_copy", (uint64_t)&v177);
  v176 = (*(_BYTE *)v4 & 0x40) != 0;
  v120 = sub_216B4A2A8(v119, "has_nothrow_constructor", (uint64_t)&v176);
  v175 = (*(_BYTE *)v4 & 0x40) != 0;
  v121 = sub_216B4A1B4(v120, (uint64_t)"has_trivial_assign", (uint64_t)&v175);
  v174 = (*(_BYTE *)v4 & 0x40) != 0;
  v122 = sub_216B4A81C(v121, "has_trivial_copy", (uint64_t)&v174);
  v173 = (*(_BYTE *)v4 & 0x40) != 0;
  v123 = sub_216B4A2A8(v122, "has_trivial_constructor", (uint64_t)&v173);
  v172 = (*(_BYTE *)v4 & 0x40) != 0;
  v124 = sub_216B4A54C(v123, "has_trivial_destructor", (uint64_t)&v172);
  v171 = (*(_BYTE *)v4 & 0x40) != 0;
  v125 = sub_216B4A54C(v124, "has_virtual_destructor", (uint64_t)&v171);
  v170 = (*(_BYTE *)v4 & 0x40) != 0;
  v126 = sub_216B34334(v125, "is_abstract", (uint64_t)&v170);
  v169 = (*(_BYTE *)v4 & 0x40) != 0;
  v127 = sub_216B328C8(v126, (uint64_t)"is_base_of", (uint64_t)&v169);
  v168 = (*(_BYTE *)v4 & 0x40) != 0;
  v128 = sub_216B32AEC(v127, "is_class", (uint64_t)&v168);
  v167 = (*(_BYTE *)v4 & 0x40) != 0;
  v129 = sub_216B4A81C(v128, "is_constructible", (uint64_t)&v167);
  v166 = (*(_BYTE *)v4 & 0x40) != 0;
  v130 = sub_216B4A470(v129, (uint64_t)"is_convertible_to", (uint64_t)&v166);
  v165 = (*(_BYTE *)v4 & 0x40) != 0;
  v131 = sub_216B32AEC(v130, "is_empty", (uint64_t)&v165);
  v164 = (*(_BYTE *)v4 & 0x40) != 0;
  v132 = sub_216B32858(v131, "is_enum", (uint64_t)&v164);
  v163 = (*(_BYTE *)v4 & 0x40) != 0;
  v133 = sub_216B32AEC(v132, "is_final", (uint64_t)&v163);
  v162 = (*(_BYTE *)v4 & 0x40) != 0;
  v134 = sub_216B328C8(v133, (uint64_t)"is_literal", (uint64_t)&v162);
  v161 = (*(_BYTE *)v4 & 0x40) != 0;
  v135 = sub_216B4A1B4(v134, (uint64_t)"is_standard_layout", (uint64_t)&v161);
  v160 = (*(_BYTE *)v4 & 0x40) != 0;
  v136 = sub_216B32A7C(v135, (uint64_t)"is_pod", (uint64_t)&v160);
  v159 = (*(_BYTE *)v4 & 0x40) != 0;
  v137 = sub_216B346C4(v136, "is_polymorphic", (uint64_t)&v159);
  v158 = (*(_BYTE *)v4 & 8) != 0;
  v138 = sub_216B345E4(v137, (uint64_t)"is_sealed", (uint64_t)&v158);
  v157 = (*(_BYTE *)v4 & 0x40) != 0;
  v139 = sub_216B328C8(v138, (uint64_t)"is_trivial", (uint64_t)&v157);
  v156 = (*(_BYTE *)v4 & 0x40) != 0;
  v140 = sub_216B4A2A8(v139, "is_trivially_assignable", (uint64_t)&v156);
  v155 = (*(_BYTE *)v4 & 0x40) != 0;
  v141 = sub_216B4A71C(v140, (uint64_t)"is_trivially_constructible", (uint64_t)&v155);
  v154 = (*(_BYTE *)v4 & 0x40) != 0;
  v142 = sub_216B4A5C0(v141, "is_trivially_copyable", (uint64_t)&v154);
  v153 = (*(_BYTE *)v4 & 0x40) != 0;
  v143 = sub_216B32AEC(v142, "is_union", (uint64_t)&v153);
  v152 = (*(_QWORD *)v4 & 0x10000000000000) != 0;
  v144 = sub_216B32858(v143, "modules", (uint64_t)&v152);
  v145 = sub_216B27CB0(a1);
  v151 = sub_216B5F6D0(v145);
  v146 = sub_216B329A8(v144, (unsigned __int16 *)"tls", (uint64_t)&v151);
  v150 = (*(_BYTE *)v4 & 0x40) != 0;
  v147 = sub_216B4A390(v146, "underlying_type", (uint64_t)&v150);
  v149 = 0;
  return sub_216B4AA54(v147, &v149);
}

BOOL sub_216B980CC(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  return sub_216B98D44(a1, a2, a3, 0);
}

BOOL sub_216B980D4(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  _BYTE v12[16];

  v6 = sub_216B9909C(a3);
  if (sub_216B92678(a3, v7))
  {
    sub_216B7B558(a3, a1, 842, (uint64_t)v12);
    v8 = v12;
LABEL_6:
    sub_216B4B3B4(v8);
    v9 = 0;
    return sub_216B98D44(a1, a2, a3, v9);
  }
  if (!v6)
  {
    sub_216B7B558(a3, a1, 841, (uint64_t)v11);
    v8 = v11;
    goto LABEL_6;
  }
  v9 = v6 + 16;
  return sub_216B98D44(a1, a2, a3, v9);
}

uint64_t sub_216B9817C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v9;

  j_j_nullsub_1(&v9);
  return MEMORY[0x2199FF19C](a4, a1, a2, a3, &v9);
}

BOOL sub_216B981D4(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  unsigned int v17;
  uint64_t *v18;
  const void *v20[2];
  _BYTE v21[16];
  uint64_t v22[2];

  sub_216B903E0(a3, (uint64_t)a1);
  if (sub_216B7214C((uint64_t)a1, 21))
  {
    v6 = sub_216B1E4E0(a1);
    sub_216B720D8(a3, v6, 712, (uint64_t)v22);
    v7 = sub_216B89E58(v22, a2);
LABEL_7:
    sub_216B89E2C(v7, 0x15u);
    v10 = v22;
    goto LABEL_8;
  }
  v8 = sub_216B1E4E0(a1);
  sub_216B903E0(a3, (uint64_t)a1);
  if (sub_216B7214C((uint64_t)a1, 6))
  {
    v9 = sub_216B1E4E0(a1);
    sub_216B720D8(a3, v9, 630, (uint64_t)v21);
    v10 = (uint64_t *)v21;
LABEL_8:
    sub_216B4B3B4(v10);
    return 0;
  }
  v11 = sub_216B7068C((uint64_t)a1);
  v12 = sub_216B4A11C(v11);
  v14 = v13;
  v15 = sub_216B5EE7C(a3);
  sub_216B26CA0(v20, v15 + 136);
  v16 = sub_216B274F0(v12, v14, v20[0], (size_t)v20[1]);
  sub_216B903E0(a3, (uint64_t)a1);
  if (sub_216B7214C((uint64_t)a1, 22))
  {
    v17 = sub_216B1E4E0(a1);
    sub_216B720D8(a3, v17, 712, (uint64_t)v22);
    v18 = sub_216B89E58(v22, a2);
    sub_216B89E2C(v18, 0x16u);
    sub_216B4B3B4(v22);
    sub_216B720D8(a3, v8, 50, (uint64_t)v22);
    v7 = v22;
    goto LABEL_7;
  }
  return v16;
}

uint64_t sub_216B98364(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return sub_216B7185C(a2, a3, *(_DWORD **)(a1 + 48), *(_QWORD *)(a1 + 24));
}

BOOL sub_216B9837C(uint64_t a1)
{
  int v1;

  v1 = sub_216B71644(a1);
  return sub_216B990A4(v1);
}

uint64_t sub_216B98390(uint64_t result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 128;
  else
    v2 = 0;
  *(_WORD *)(result + 244) = *(_WORD *)(result + 244) & 0xFF7F | v2;
  return result;
}

uint64_t sub_216B983B0(uint64_t result, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 16;
  else
    v2 = 0;
  *(_WORD *)(result + 244) = *(_WORD *)(result + 244) & 0xFFEF | v2;
  return result;
}

__n128 sub_216B983D0(__n128 *a1, __n128 *a2, unint64_t a3, unint64_t a4)
{
  __n128 result;
  unint64_t v5;

  result = *a2;
  v5 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u64[1] = a3;
  a1[2].n128_u64[0] = a4;
  return result;
}

uint64_t sub_216B983E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

BOOL sub_216B983F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  int v7;
  _QWORD v8[7];

  sub_216B986E8(v8);
  v2 = sub_216B1E600(a1);
  v3 = sub_216B1E67C(a1);
  if (v2 != v3)
  {
    v4 = v3;
    while (!sub_216B71174(v2, 21))
    {
      if (sub_216B71174(v2, 22))
      {
        if (sub_216B29084(v8) || !*(_DWORD *)sub_216B3AF70((uint64_t)v8))
          goto LABEL_18;
LABEL_15:
        sub_216B3AF88((uint64_t)v8);
        goto LABEL_16;
      }
      if (sub_216B71174(v2, 23))
      {
        v7 = 0;
        goto LABEL_11;
      }
      if (sub_216B71174(v2, 24))
      {
        if (sub_216B29084(v8) || *(_DWORD *)sub_216B3AF70((uint64_t)v8) == 1)
        {
LABEL_18:
          v5 = 0;
          goto LABEL_19;
        }
        goto LABEL_15;
      }
LABEL_16:
      v2 += 24;
      if (v2 == v4)
        goto LABEL_17;
    }
    v7 = 1;
LABEL_11:
    sub_216B26208((uint64_t)v8, &v7);
    goto LABEL_16;
  }
LABEL_17:
  v5 = sub_216B29084(v8);
LABEL_19:
  sub_216B1FF6C(v8);
  return v5;
}

uint64_t sub_216B98518(const void **a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - sub_216B1E600((uint64_t)a1)) >> 3);
  if (sub_216B1E67C((uint64_t)a1) == a2)
  {
    sub_216B96A54(a1, (__int128 *)a3, a4);
    return sub_216B1E600((uint64_t)a1) + 24 * v8;
  }
  else
  {
    v9 = sub_216B986F4(a3, (uint64_t)a4);
    v10 = sub_216B60724((uint64_t)a1);
    sub_216B986F8(a1, v10 + v9);
    v11 = (_BYTE *)(sub_216B1E600((uint64_t)a1) + 24 * v8);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((sub_216B1E67C((uint64_t)a1) - (uint64_t)v11) >> 3);
    v13 = (_BYTE *)sub_216B1E67C((uint64_t)a1);
    v14 = sub_216B1E67C((uint64_t)a1);
    if (v12 >= v9)
    {
      sub_216B20C64(&v22, v14 - 24 * v9);
      v19 = sub_216B1E67C((uint64_t)a1);
      sub_216B20C64(&v21, v19);
      sub_216B98738(a1, v22, v21);
      sub_216B987EC();
      sub_216B7AC98();
    }
    else
    {
      sub_216B203A4((uint64_t)a1, v14 + 24 * v9);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v11) >> 3);
      v16 = sub_216B1E67C((uint64_t)a1);
      sub_216B3B518(v11, (int)v13, (void *)(v16 - 8 * ((v13 - v11) >> 3)));
      if (v13 != v11)
      {
        v17 = v11;
        do
        {
          v18 = *(_OWORD *)a3;
          *(_DWORD *)(v17 + 15) = *(_DWORD *)(a3 + 15);
          *(_OWORD *)v17 = v18;
          v17 += 24;
          a3 += 24;
          --v15;
        }
        while (v15);
      }
      sub_216B2A5E4((void *)a3, (uint64_t)a4, v13);
    }
  }
  return (uint64_t)v11;
}

uint64_t sub_216B986EC(uint64_t a1)
{
  return sub_216B264A8(a1, 8u);
}

char *sub_216B986F8(const void **a1, unsigned int a2)
{
  char *result;

  result = (char *)sub_216B6F140((uint64_t)a1);
  if ((unint64_t)result < a2)
    return sub_216B67B88(a1, a2);
  return result;
}

uint64_t sub_216B98738(const void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;

  v6 = sub_216B4E2A4(a2, a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > 0xAAAAAAAAAAAAAAABLL * ((v7 - sub_216B1E67C((uint64_t)a1)) >> 3))
  {
    v8 = sub_216B60724((uint64_t)a1);
    sub_216B67B88(a1, v8 + v6);
  }
  v9 = (_OWORD *)sub_216B1E67C((uint64_t)a1);
  sub_216B9889C(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + 24 * v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216B987F0(__int128 *a1, __int128 *a2, _OWORD *a3)
{
  uint64_t v3;

  sub_216B98808(a1, a2, a3);
  return v3;
}

uint64_t sub_216B98808(__int128 *a1, __int128 *a2, _OWORD *a3)
{
  __int128 *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD *v9;
  __int128 *v10;
  uint64_t v11;

  v9 = a3;
  v10 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      v5 = v9;
      v6 = *((_QWORD *)v4 + 2);
      v7 = *v4;
      v4 = (__int128 *)((char *)v4 + 24);
      *v9 = v7;
      *((_QWORD *)v5 + 2) = v6;
      v9 = (_OWORD *)((char *)v5 + 24);
      v10 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v11, &v10, &v9);
  return v11;
}

unint64_t sub_216B98884(uint64_t a1, uint64_t a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
}

uint64_t sub_216B9889C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;

  sub_216B988B4(a1, a2, a3);
  return v3;
}

uint64_t sub_216B988B4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a2;
  v9 = a1;
  for (i = a3; sub_216B3B5C8((uint64_t)&v9, (uint64_t)&v8); i = (_OWORD *)((char *)i + 24))
  {
    if ((sub_216B2043C() & 1) != 0)
      break;
    v3 = i;
    v4 = sub_216B1E600((uint64_t)&v9);
    v5 = *(_QWORD *)(v4 + 16);
    *i = *(_OWORD *)v4;
    *((_QWORD *)v3 + 2) = v5;
    sub_216B4B50C(&v9);
  }
  sub_216B20444(&v10, &v9, &i);
  return v10;
}

uint64_t sub_216B98950()
{
  uint64_t v0;

  sub_216B98968();
  return v0;
}

uint64_t sub_216B98970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = j_j_nullsub_1(a3);
  v9 = sub_216B989FC((uint64_t)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B989FC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  return sub_216B98A0C(a2, a3, a4);
}

uint64_t sub_216B98A0C(const void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)(a3 - 8 * ((a2 - (uint64_t)a1) >> 3));
  v5 = a2;
  sub_216B7BA40(v4, a1, 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3));
  return sub_216B206E0((uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_216B98A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_216B98A94(a5, a1, a2, a3, a4);
}

uint64_t sub_216B98A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_216B98B28(a5, a1, a2, a3, a4);
}

_QWORD *sub_216B98A98(_QWORD *a1, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _QWORD *result;

  result = sub_216B3FD7C(a1, a2);
  *result = &unk_24D6027B8;
  result[2] = *a3;
  *((_DWORD *)result + 6) = *a4;
  *((_DWORD *)result + 7) = *a5;
  return result;
}

uint64_t sub_216B98AF0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28));
}

_QWORD *sub_216B98B2C(_QWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _QWORD *result;

  result = sub_216B3FD7C(a1, a2);
  *result = &unk_24D6027E8;
  *((_DWORD *)result + 4) = *a3;
  *((_DWORD *)result + 5) = *a4;
  *((_DWORD *)result + 6) = *a5;
  return result;
}

uint64_t sub_216B98B84(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
}

uint64_t sub_216B98BC0(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 33)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x21uLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B98C28(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 36)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x24uLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B98C90(unsigned int *a1)
{
  return (0x35u >> sub_216B1E4E0(a1)) & 1;
}

uint64_t sub_216B98CB0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 32)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && a2[2] == v6[2] && a2[3] == v6[3])
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

BOOL sub_216B98D28(unsigned int *a1)
{
  return sub_216B1E4E0(a1) != 1;
}

BOOL sub_216B98D44(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v24;
  int v25;
  uint64_t v26[2];
  _BYTE v27[20];
  int v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31[19];

  v8 = sub_216B1E4E0(a1);
  if ((sub_216B9908C(a3) & 1) != 0)
  {
    sub_216B903E0(a3, (uint64_t)a1);
    if (!sub_216B7214C((uint64_t)a1, 21))
    {
      v9 = sub_216B1E4E0(a1);
      if (sub_216B99094(a3))
      {
        v14 = sub_216B99094(a3);
        sub_216B9D688(v14, a1);
      }
      else
      {
        sub_216B9C594(a3, a1);
      }
LABEL_12:
      sub_216B295EC(v31);
      sub_216B26D14(&v29);
      sub_216B4AED0(&v28);
      v15 = sub_216B71644((uint64_t)a1);
      if (v15 > 14)
      {
        if (v15 != 46)
        {
          if (v15 != 15)
            goto LABEL_15;
LABEL_18:
          LOBYTE(v26[0]) = 0;
          v13 = 0;
          v29 = sub_216B9BC28(a3, a1, v31, v26);
          v30 = v18;
          if (LOBYTE(v26[0]))
          {
LABEL_27:
            sub_216B2489C(v31);
            return v13;
          }
          goto LABEL_23;
        }
        LOBYTE(v26[0]) = 60;
        sub_216B1FBBC((uint64_t)v31, v26);
        if (!sub_216B8E9A4(a3, v31, &v28))
        {
          v29 = sub_216B24850((uint64_t)v31);
          v30 = v19;
LABEL_23:
          v20 = sub_216B1E4E0(a1);
          sub_216B903E0(a3, (uint64_t)a1);
          if (!sub_216B7214C((uint64_t)a1, 22))
          {
            v24 = sub_216B1E4E0(a1);
            v25 = sub_216B8E870(a3, v24, &v29);
            if (!sub_216B29094((uint64_t)&v29))
            {
              v26[0] = 0;
              v13 = sub_216B8AAF8(a3, v20, v29, v30, v25, a4, v26, 0, 0, 0, 0) != 0;
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          v21 = sub_216B98364(a3, v20, 0);
          sub_216B720D8(a3, v21, 712, (uint64_t)v26);
          v22 = sub_216B89E58(v26, a2);
          sub_216B89E2C(v22, 0x16u);
          sub_216B4B3B4(v26);
          sub_216B720D8(a3, v9, 50, (uint64_t)v26);
          sub_216B89E2C(v26, 0x15u);
          v17 = v26;
          goto LABEL_25;
        }
        sub_216B74800((uint64_t)a1, 2);
      }
      else if (v15 != 2)
      {
        if (v15 != 13)
        {
LABEL_15:
          v16 = sub_216B1E4E0(a1);
          sub_216B720D8(a3, v16, 718, (uint64_t)v27);
          v17 = (uint64_t *)v27;
LABEL_25:
          sub_216B4B3B4(v17);
          goto LABEL_26;
        }
        goto LABEL_18;
      }
LABEL_26:
      v13 = 0;
      goto LABEL_27;
    }
    v9 = sub_216B98364(a3, v8, 0);
    sub_216B720D8(a3, v9, 712, (uint64_t)v31);
    v10 = sub_216B89E58((uint64_t *)v31, a2);
    sub_216B89E2C(v10, 0x15u);
    sub_216B4B3B4(v31);
    if (sub_216B71174((uint64_t)a1, 15) || sub_216B71174((uint64_t)a1, 13) || sub_216B71174((uint64_t)a1, 46))
      goto LABEL_12;
  }
  else
  {
    sub_216B720D8(a3, v8, 702, (uint64_t)v31);
    v11 = sub_216B4A11C(a2);
    sub_216B4B340((uint64_t *)v31, v11, v12);
    sub_216B4B3B4(v31);
  }
  return 0;
}

uint64_t sub_216B9908C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 438);
}

uint64_t sub_216B99094(uint64_t a1)
{
  return *(_QWORD *)(a1 + 808);
}

uint64_t sub_216B9909C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 816);
}

BOOL sub_216B990A4(int a1)
{
  return (a1 - 495) < 0x1F;
}

uint64_t sub_216B990B4(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B99224();
    v10 = sub_216B50ED0();
    v11 = v8 - 1;
    v12 = sub_216B52378(a2) & (v8 - 1);
    v13 = (uint64_t *)(v6 + 16 * v12);
    if (sub_216B2A5FC(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (!sub_216B2A5FC(*v13, v9))
      {
        if (sub_216B2A5FC(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (uint64_t *)(v6 + 16 * v12);
        ++v15;
        if (sub_216B2A5FC(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_13:
  *a3 = v13;
  return result;
}

uint64_t sub_216B991D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B5F664(a1);
  v3 = sub_216B5F664(a1);
  sub_216B991D4(&v5, v2, v3, 1);
  return v5;
}

uint64_t sub_216B99228(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B99258((uint64_t **)a1);
  return a1;
}

uint64_t sub_216B99258(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = sub_216B2CCE0();
  result = sub_216B50F08();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B2A5FC(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 2;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t *sub_216B992D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t *v6;

  v6 = 0;
  if (sub_216B99328(a1, a2, &v6))
    return v6;
  v5 = 0;
  return sub_216B99360(a1, a2, &v5, v6);
}

uint64_t sub_216B99328(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v5;

  v5 = 0;
  result = sub_216B990B4(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t *sub_216B99360(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;

  result = sub_216B99398(a1, a2, a4);
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t *sub_216B99398(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B99480(a1, (2 * v6));
    sub_216B99328(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B99480(a1, v7);
    sub_216B99328(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B99224();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B99484(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B5FA0C(a1, *v5);
  if (v4)
  {
    sub_216B99570(a1, v4, &v4[2 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B9950C(a1);
  }
}

uint64_t sub_216B9950C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B99224();
  v3 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B5F664(a1);
  while (v3 != (_QWORD *)result)
  {
    *v3 = v2;
    v3 += 2;
  }
  return result;
}

uint64_t sub_216B99570(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;

  sub_216B9950C(a1);
  v6 = sub_216B99224();
  result = sub_216B50ED0();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B99328(a1, a2, &v9);
          *v9 = *a2;
          v9[1] = a2[1];
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

char *sub_216B99628(const void **a1, uint64_t a2)
{
  return sub_216B203B4(a1, 40 * a2, 40);
}

uint64_t sub_216B99638(uint64_t a1)
{
  return sub_216B66D4C(a1, 0x40u);
}

__n128 sub_216B99640(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  _BYTE v4[9];

  result = *(__n128 *)a1;
  *(_QWORD *)&v4[1] = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 15);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 15) = v3;
  *(__n128 *)a2 = result;
  *(_DWORD *)(a2 + 15) = *(_DWORD *)v4;
  return result;
}

uint64_t *sub_216B99674(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B60724(a2);
  return a1;
}

uint64_t sub_216B996B4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, (uint64_t)a2);
  v5 = sub_216B2D0E0(a1);
  v6 = sub_216B2E6A0(a1, v5 + 1);
  v7 = sub_216B2D0E0(a1);
  sub_216B2E718(v12, v6, v7, v4);
  v9 = (__n128 *)nullsub_1(v13, v8);
  sub_216B2E67C(v4, v9, a2);
  v13 += 16;
  sub_216B99760(a1, v12);
  v10 = a1[1];
  sub_216B2E808(v12);
  return v10;
}

uint64_t sub_216B99760(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216B9984C(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B2D0E0(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216B9984C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = (__n128 *)sub_216B6BA34((uint64_t)&v16);
    v9 = (__n128 *)sub_216B2CFB0((uint64_t)v18);
    sub_216B2E67C(a1, v8, v9);
    sub_216B2EB8C((uint64_t)v18);
    sub_216B2EB8C((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216B99914(uint64_t a1)
{
  return sub_216B264A8(a1, 0xAu);
}

uint64_t sub_216B9991C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;

  v12 = sub_216B9D61C(a1, a2, a3);
  *(_QWORD *)v12 = &off_24D602818;
  sub_216B4AED0((_DWORD *)(v12 + 120));
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = a4;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a5;
  *(_QWORD *)(a1 + 160) = a5;
  *(_QWORD *)(a1 + 168) = a6;
  sub_216B70D84(a1 + 176);
  v13 = sub_216B40EE8(a2);
  *(_DWORD *)(a1 + 120) = sub_216B64050(v13, a3);
  return a1;
}

uint64_t sub_216B999A0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_216B9991C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216B999A8(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *v10;
  __int16 v11;
  __int128 v13;
  unsigned int *v14;

  v14 = *(unsigned int **)(a1 + 136);
  v4 = sub_216B99B60(&v14, (uint64_t)a2);
  v6 = sub_216B99B60(&v14, v5);
  v8 = sub_216B99B60(&v14, v7);
  *(_QWORD *)(a1 + 136) = v14;
  sub_216B75074((uint64_t)a2);
  sub_216B74800((uint64_t)a2, v4);
  sub_216B72300((uint64_t)a2, SBYTE1(v4));
  v9 = sub_216B62D74((_DWORD *)(a1 + 120), v8);
  sub_216B2A7D8(a2, v9);
  sub_216B68C9C((uint64_t)a2, HIWORD(v4));
  if (sub_216B711CC((uint64_t)a2))
  {
    sub_216B203A4((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a1 + 168) + 200) + v6);
  }
  else if (v6)
  {
    sub_216B758F4((_WORD *)(a1 + 32));
    v10 = (_DWORD *)sub_216B99B90(*(uint64_t **)(a1 + 168), v6 - 1);
    sub_216B203A4((uint64_t)a2, (uint64_t)v10);
    v11 = sub_216B91C38(v10);
    sub_216B74800((uint64_t)a2, v11);
    if (sub_216B731F4((uint64_t)v10))
      return sub_216B9C2F0(*(_QWORD *)(a1 + 8), a2);
    return 1;
  }
  if (v4 == 65)
  {
    if (sub_216B7164C((uint64_t)a2))
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 136) - 12;
      sub_216B8AF18(*(_QWORD *)(a1 + 8), (uint64_t)a2);
      return 0;
    }
    goto LABEL_13;
  }
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v13 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 191) = *(unsigned int *)((char *)a2 + 15);
      *(_OWORD *)(a1 + 176) = v13;
      return sub_216B99BA8(a1, a2);
    }
LABEL_13:
    sub_216B758F4((_WORD *)(a1 + 32));
    return 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  return 1;
}

uint64_t sub_216B99B60(unsigned int **a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B2AB84(*a1, a2);
  ++*a1;
  return result;
}

uint64_t sub_216B99B90(uint64_t *a1, unsigned int a2)
{
  if (*(_QWORD *)(a1[19] + 8 * a2))
    return *(_QWORD *)(a1[19] + 8 * a2);
  else
    return sub_216B99E54(a1, a2);
}

uint64_t sub_216B99BA8(uint64_t a1, unsigned int *a2)
{
  uint64_t v5;
  unsigned int *v6;
  _BYTE v7[20];
  unsigned int v8;

  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    return 1;
  }
  else
  {
    while (!sub_216B29084((_QWORD *)(a1 + 64)))
    {
      v8 = sub_216B74B5C(*(_QWORD *)(a1 + 8));
      if (sub_216B750B0(&v8, (unsigned int *)(a1 + 120)))
      {
        v5 = *(_QWORD *)(a1 + 8);
        v6 = (unsigned int *)sub_216B5F148(a1 + 64);
        sub_216B720D8(v5, *v6, 751, (uint64_t)v7);
        sub_216B4B3B4(v7);
      }
      sub_216B5F160(a1 + 64);
    }
    return sub_216B92E5C(*(_QWORD *)(a1 + 8), a2, 0);
  }
}

__n128 sub_216B99C70(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a1 + 176);
  *(_DWORD *)(a2 + 15) = *(_DWORD *)(a1 + 191);
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_216B99C84(uint64_t result)
{
  _BYTE *v1;
  _BYTE *v2;

  *(_BYTE *)(result + 24) = 0;
  v1 = *(_BYTE **)(result + 136);
  do
  {
    v2 = v1;
    if (*v1 == 1)
      break;
    v1 += 12;
  }
  while ((v2[1] & 1) == 0);
  *(_QWORD *)(result + 136) = v2;
  return result;
}

BOOL sub_216B99CB0(_QWORD *a1, uint64_t a2)
{
  unsigned int **v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v21;

  v3 = (unsigned int **)(a1 + 20);
  do
  {
    v4 = sub_216B99B60(v3, a2);
    v6 = sub_216B99B60(v3, v5);
    v7 = v6;
    v8 = a1[16];
    v9 = v8 + v4;
    v10 = a1[18];
    if (v9 < v10 && v6 != 0)
    {
      v21 = (unsigned int *)(a1[19] + 8 * v6);
      v12 = v8 + sub_216B99B60(&v21, a2);
      v10 = a1[18];
      if (v12 <= v10)
      {
        v7 = sub_216B99B60(&v21, a2);
        a1[20] = v21;
        v10 = a1[18];
        v9 = v12;
      }
    }
  }
  while (v9 < v10);
  v21 = (unsigned int *)(a1[19] + 8 * v7);
  a1[20] = v21;
  v13 = a1[16];
  v14 = v13 + sub_216B99B60(&v21, a2);
  v16 = sub_216B99B60(&v21, v15);
  v17 = a1[17];
  if (v17 <= v14)
  {
    v18 = 12;
    if (!v16)
      v18 = 36;
    v19 = v14 + v18;
    a1[18] = v14;
    goto LABEL_16;
  }
  if (!v16)
  {
    v19 = v17 + 24;
LABEL_16:
    a1[17] = v19;
    return v16 == 0;
  }
  a1[18] = v14;
  return v16 == 0;
}

uint64_t sub_216B99DCC(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int *v5;

  v5 = (unsigned int *)(*(_QWORD *)(a1 + 136) + 8);
  v3 = sub_216B99B60(&v5, a2);
  return sub_216B62D74((_DWORD *)(a1 + 120), v3);
}

_QWORD *sub_216B99E10(_QWORD *result)
{
  *result = &unk_24D6001D0;
  return result;
}

uint64_t sub_216B99E24(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B9A128(*a1, a2);
  ++*a1;
  return result;
}

uint64_t sub_216B99E54(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int *v9;

  v9 = (unsigned int *)(a1[21] + 4 * a2);
  v4 = sub_216B1E67C(a1[1]);
  v6 = v4 + sub_216B99B60(&v9, v5);
  v7 = sub_216B99EC4((uint64_t)(a1 + 2), 1);
  *(_QWORD *)(v7 + 24) = v6;
  result = sub_216B52994(v7);
  *(_QWORD *)(a1[19] + 8 * a2) = result;
  return result;
}

uint64_t sub_216B99EC4(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, 32 * a2, 8);
}

unint64_t sub_216B99ED0(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13[10];
  _BYTE v14[40];
  unint64_t v15;

  v4 = sub_216B40EE8(a1[24]);
  result = sub_216B81B44(v4, a2);
  v15 = result;
  if (result)
  {
    sub_216B99FBC(a1[20], (uint64_t *)&v15, (uint64_t)v14);
    sub_216B9A0F8((uint64_t)v13);
    if (sub_216B9A0E4((uint64_t)v14, (uint64_t)v13))
    {
      return 0;
    }
    else
    {
      *(_QWORD *)v13 = sub_216B9A100((uint64_t)v14, v6);
      v7 = sub_216B1E67C(a1[1]);
      v8 = v7 + sub_216B1E4E0(v13);
      v12 = (unsigned int *)(v7 + sub_216B693F8((uint64_t)v13));
      if (sub_216B99B60(&v12, v9))
      {
        v10 = v12;
      }
      else
      {
        v10 = 0;
        v12 = 0;
      }
      v11 = sub_216B1D1D4(200);
      return sub_216B999A0(v11, a1[24], a2, v8, (uint64_t)v10, (uint64_t)a1);
    }
  }
  return result;
}

uint64_t sub_216B99FBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  char *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v25;
  unsigned int *v26;

  v5 = sub_216B9A130(*a2);
  v6 = v5;
  v8 = v7;
  v9 = sub_216B9A164(v5, v7);
  v26 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((*(_DWORD *)a1 - 1) & v9));
  v11 = sub_216B99B60(&v26, v10);
  if (!v11)
    return sub_216B9A18C(a3);
  v25 = (char *)(*(_QWORD *)(a1 + 16) + v11);
  v13 = sub_216B99E24((unsigned __int16 **)&v25, v12);
  if (!v13)
    return sub_216B9A18C(a3);
  v15 = v13;
  v16 = a1 + 24;
  while (1)
  {
    v17 = sub_216B99B60((unsigned int **)&v25, v14);
    v19 = sub_216B9A190((unsigned __int16 **)&v25, v18);
    v20 = v25;
    if (v17 == v9)
      break;
LABEL_7:
    v25 = &v20[(v19 + HIDWORD(v19))];
    if (!--v15)
      return sub_216B9A18C(a3);
  }
  v21 = sub_216B9A1DC(v25);
  v23 = (uint64_t)v22;
  if (!sub_216B9A20C(v21, v22, v6, v8))
  {
    v20 = v25;
    goto LABEL_7;
  }
  return sub_216B9A244(a3, v21, v23, (uint64_t)&v25[v19], SHIDWORD(v19), v16);
}

BOOL sub_216B9A0E4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == *(_QWORD *)(a1 + 16);
}

uint64_t sub_216B9A0F8@<X0>(uint64_t a1@<X8>)
{
  return sub_216B9A18C(a1);
}

uint64_t sub_216B9A100(uint64_t a1, uint64_t a2)
{
  return sub_216B9A2CC(*(unsigned int **)(a1 + 16), a2);
}

void sub_216B9A10C()
{
  void *v0;

  v0 = (void *)sub_216B9A108();
  j__free(v0);
}

uint64_t sub_216B9A128(unsigned __int16 *a1, uint64_t a2)
{
  return nullsub_1(*a1, a2);
}

uint64_t sub_216B9A130(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v3 = 1;
  v2 = sub_216B1E600(a1);
  return sub_216B9A248((uint64_t)&v3, (uint64_t)&v2);
}

uint64_t sub_216B9A164(uint64_t a1, char *a2)
{
  uint64_t v3[2];

  sub_216B1E678((int)v3, a2);
  return sub_216B31434(v3[0], v3[1]);
}

uint64_t sub_216B9A190(unsigned __int16 **a1, uint64_t a2)
{
  unsigned __int16 *v3;
  int v5;
  int v6;

  v6 = sub_216B99E24(a1, a2);
  v3 = *a1;
  *a1 = (unsigned __int16 *)((char *)*a1 + 1);
  v5 = *(unsigned __int8 *)v3;
  return sub_216B3A19C((uint64_t)&v6, (uint64_t)&v5);
}

uint64_t sub_216B9A1DC(char *a1)
{
  _BYTE *v2;
  char v3;

  v3 = *a1;
  v2 = a1 + 1;
  return sub_216B9A248((uint64_t)&v3, (uint64_t)&v2);
}

BOOL sub_216B9A20C(char a1, char *__s1, char a3, char *__s2)
{
  return a3 == a1 && strcmp(__s1, __s2) == 0;
}

uint64_t sub_216B9A248(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B9A274(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B9A278(uint64_t result, _BYTE *a2, _QWORD *a3)
{
  *(_BYTE *)result = *a2;
  *(_QWORD *)(result + 8) = *a3;
  return result;
}

uint64_t sub_216B9A28C()
{
  uint64_t result;

  result = sub_216B9A2A8();
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_216B9A2AC(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_216B9A2B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a6;
  return result;
}

uint64_t sub_216B9A2CC(unsigned int *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int *v6;
  uint64_t v7;

  v6 = a1;
  v2 = sub_216B99B60(&v6, a2);
  v4 = sub_216B99B60(&v6, v3);
  sub_216B9A318(&v7, v2, v4);
  return v7;
}

uint64_t sub_216B9A31C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D602850;
  std::string::~string((std::string *)(a1 + 8));
  return a1;
}

_QWORD *sub_216B9A354(_QWORD *a1)
{
  *a1 = off_24D602850;
  sub_216B25034(a1 + 1);
  return a1;
}

uint64_t sub_216B9A384(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_24D602880;
  v2 = a1 + 4;
  sub_216B9A3C4((uint64_t)(a1 + 4));
  sub_216B3D4A4(v2);
  return sub_216B9A31C((uint64_t)a1);
}

void sub_216B9A3C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)sub_216B3C960(a1);
  v3 = sub_216B3C994(a1);
  while (sub_216B3760C(&v4, &v3))
  {
    v2 = *(_QWORD *)(sub_216B3C9C8((uint64_t)&v4) + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    sub_216B3CA9C(&v4);
  }
  sub_216B9B1D4(a1);
}

void sub_216B9A44C()
{
  void *v0;

  v0 = (void *)sub_216B9A448();
  j__free(v0);
}

uint64_t sub_216B9A460(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7[2];

  v5 = (_QWORD *)(a1 + 32);
  result = sub_216B9A4AC((_QWORD *)(a1 + 32), a2, a3);
  if (!result && (a4 & 1) == 0)
  {
    sub_216B26D14(v7);
    return sub_216B9A4AC(v5, v7[0], v7[1]);
  }
  return result;
}

uint64_t sub_216B9A4AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v6 = sub_216B5F200(a1, a2, a3);
  v5 = sub_216B5DEE8((uint64_t)a1);
  if (sub_216B3760C(&v6, &v5))
    return *(_QWORD *)(sub_216B3C9C8((uint64_t)&v6) + 8);
  else
    return 0;
}

uint64_t sub_216B9A508(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v2 = a1 + 32;
  v3 = sub_216B9A558(a2);
  v5 = sub_216B3DBC8(v2, v3, v4);
  return sub_216B4ABCC(v5, &v7);
}

uint64_t sub_216B9A558(uint64_t a1)
{
  uint64_t v2;

  sub_216B26CA0(&v2, a1 + 8);
  return v2;
}

uint64_t sub_216B9A580(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;

  sub_216B89BC0(a2, (uint64_t)a4);
  if (sub_216B7068C((uint64_t)a4))
  {
    v8 = sub_216B7068C((uint64_t)a4);
    v9 = sub_216B4A11C(v8);
    v11 = v10;
    v15 = v9;
    v16 = v10;
  }
  else
  {
    sub_216B26D14(&v15);
    v9 = v15;
    v11 = v16;
  }
  v12 = sub_216B9A460(a1, v9, v11, 0);
  if (v12)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v12 + 16))(v12, a2, a3, a4);
  sub_216B7B558(a2, a4, 897, (uint64_t)v14);
  return sub_216B4B3B4(v14);
}

uint64_t sub_216B9A644(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  result = *(_QWORD *)(a1 + 872);
  if (result)
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 72))(result, a2, a3);
  if ((*(_WORD *)(a1 + 436) & 0x100) != 0)
  {
    ++*(_DWORD *)(a1 + 1340);
    sub_216B70D84(v10);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(**(_QWORD **)(a1 + 640) + 16))(*(_QWORD *)(a1 + 640), a1, a3, v10);
    result = sub_216B3817C(a1 + 824, v6);
    if ((_DWORD)result)
    {
      v8 = sub_216B25CA8(a1 + 824, v7);
      result = sub_216B9EED4(v8);
      if ((result & 1) != 0)
        return sub_216B89B78(a1);
    }
    v9 = *(_QWORD *)(a1 + 808);
    if (v9)
    {
      if (*(_BYTE *)(v9 + 24))
        return sub_216B89B78(a1);
    }
  }
  return result;
}

uint64_t sub_216B9A6F8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35[2];
  unsigned int v36[6];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::string v45;
  _BYTE v46[16];
  __int128 v47;
  uint64_t v48;
  _BYTE v49[16];
  _BYTE v50[16];
  _BYTE v51[16];
  _BYTE v52[48];

  sub_216B9AC0C(v52, a1, *(unsigned __int8 *)(a1 + 439), a2);
  v4 = sub_216B1E4E0((unsigned int *)a2);
  sub_216B9C594(a1, a2);
  if (sub_216B7214C(a2, 21))
  {
    sub_216B720D8(a1, v4, 622, (uint64_t)v51);
    v5 = v51;
LABEL_3:
    sub_216B4B3B4(v5);
LABEL_12:
    sub_216B9AC10((uint64_t)v52);
    return sub_216B9ACE8(v52);
  }
  sub_216B9C594(a1, a2);
  v6 = sub_216B71644(a2);
  if ((sub_216B773E0(v6) & 1) == 0)
  {
    sub_216B720D8(a1, v4, 622, (uint64_t)v50);
    sub_216B4B3B4(v50);
    if (!sub_216B7214C(a2, 22) || !sub_216B7214C(a2, 1))
    {
LABEL_10:
      if (sub_216B71174(a2, 22))
        sub_216B9C594(a1, a2);
      goto LABEL_12;
    }
LABEL_9:
    sub_216B9C594(a1, a2);
    goto LABEL_10;
  }
  if (sub_216B820A0(a2))
  {
    sub_216B7B558(a1, (unsigned int *)a2, 19, (uint64_t)v49);
    sub_216B4B3B4(v49);
    goto LABEL_9;
  }
  v47 = *(_OWORD *)a2;
  v48 = *(_QWORD *)(a2 + 16);
  sub_216B9C594(a1, a2);
  if (sub_216B7214C(a2, 22))
  {
    sub_216B720D8(a1, v4, 622, (uint64_t)v46);
    v5 = v46;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 439))
  {
    v8 = sub_216B1E4E0((unsigned int *)a2);
    sub_216B747E8(a1, (unsigned int *)&v47, 0, &v45);
    if (*(_BYTE *)sub_216B25B54((uint64_t)&v45, 0) == 76
      || *(_BYTE *)sub_216B25B54((uint64_t)&v45, 0) == 85
      || *(_BYTE *)sub_216B25B54((uint64_t)&v45, 0) == 117 && *(_BYTE *)sub_216B25B54((uint64_t)&v45, 1) != 56)
    {
      *(_QWORD *)v36 = sub_216B29A94((uint64_t)&v45, v9);
      sub_216B2C008(&v44, v36);
      sub_216B9AC1C(&v45, v44);
    }
    else if (*(_BYTE *)sub_216B25B54((uint64_t)&v45, 0) == 117)
    {
      *(_QWORD *)v36 = sub_216B29A94((uint64_t)&v45, v26);
      sub_216B2C008(&v43, v36);
      v40 = sub_216B29A94((uint64_t)&v45, v27);
      v41 = sub_216B2EF68(&v40, 2);
      sub_216B2C008(&v42, &v41);
      sub_216B9AC78(&v45, v43, v42);
    }
    if (*(_BYTE *)sub_216B25B54((uint64_t)&v45, 0) == 82)
    {
      LODWORD(v11) = -1;
      do
      {
        v12 = (v11 + 3);
        v11 = (v11 + 1);
      }
      while (*(_BYTE *)sub_216B25B54((uint64_t)&v45, v12) != 40);
      std::string::erase(&v45, 0, v12);
      v14 = sub_216B25B78((uint64_t)&v45, v13);
      std::string::erase(&v45, v14 + ~v11, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      v15 = sub_216B25B78((uint64_t)&v45, v10);
      v17 = v15 - 1;
      if (v15 == 2)
      {
        v18 = 1;
      }
      else
      {
        v28 = 1;
        v29 = 1;
        do
        {
          v30 = v29;
          v31 = *(_BYTE *)sub_216B25B54((uint64_t)&v45, v29) != 92 || v29 + 1 >= v17;
          if (!v31
            && (*(_BYTE *)sub_216B25B54((uint64_t)&v45, v29 + 1) == 92
             || *(_BYTE *)sub_216B25B54((uint64_t)&v45, v29 + 1) == 34))
          {
            v30 = ++v29;
          }
          v32 = *(_BYTE *)sub_216B25B54((uint64_t)&v45, v30);
          v18 = v28 + 1;
          *(_BYTE *)sub_216B25B54((uint64_t)&v45, v28) = v32;
          ++v29;
          ++v28;
        }
        while (v29 != v17);
      }
      v41 = sub_216B29A94((uint64_t)&v45, v16);
      *(_QWORD *)v36 = sub_216B2EF68(&v41, v18);
      sub_216B2C008(&v39, v36);
      v37 = sub_216B29ABC((uint64_t)&v45, v19);
      v40 = sub_216B9ACE0(&v37, 1);
      sub_216B2C008(&v38, &v40);
      sub_216B9AC78(&v45, v39, v38);
    }
    *(_BYTE *)sub_216B25B54((uint64_t)&v45, 0) = 32;
    v21 = sub_216B25B78((uint64_t)&v45, v20);
    *(_BYTE *)sub_216B25B54((uint64_t)&v45, v21 - 1) = 10;
    sub_216B70D84(v36);
    sub_216B75074((uint64_t)v36);
    sub_216B26CA0(v35, &v45);
    sub_216B4AED0(&v34);
    sub_216B4AED0(&v33);
    sub_216B9BCE4(a1, v35[0], v35[1], v36, v34, v33);
    v22 = sub_216B1E4E0(v36);
    v24 = sub_216B25B78((uint64_t)&v45, v23);
    v25 = sub_216B70A10(v22, v4, v8, v24, a1);
    sub_216B92ACC(a1, v25, 0);
    sub_216B9A644(a1, v4, 1);
    sub_216B9C594(a1, a2);
    std::string::~string(&v45);
  }
  return sub_216B9ACE8(v52);
}

uint64_t sub_216B9AC10(uint64_t result)
{
  *(_BYTE *)(result + 9) = 1;
  return result;
}

uint64_t sub_216B9AC1C(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  v5 = sub_216B29A94((uint64_t)a1, a2);
  v3 = sub_216B2AA64((uint64_t)&v6, (uint64_t)&v5);
  std::string::erase(a1, v3, 1uLL);
  return sub_216B2EF68(&v5, v3);
}

uint64_t sub_216B9AC78(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a2;
  v7 = sub_216B29A94((uint64_t)a1, a2);
  v4 = sub_216B2AA64((uint64_t)&v9, (uint64_t)&v7);
  v5 = sub_216B2AA64((uint64_t)&v8, (uint64_t)&v9);
  std::string::erase(a1, v4, v5);
  return sub_216B2EF68(&v7, v4);
}

uint64_t sub_216B9ACE0(uint64_t *a1, uint64_t a2)
{
  return sub_216B2EF68(a1, -a2);
}

uint64_t sub_216B9ACEC(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[792];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216B1E4E0(a2);
  sub_216B9C594(a1, a2);
  if (sub_216B7214C((uint64_t)a2, 21))
  {
    sub_216B720D8(a1, v4, 622, (uint64_t)v17);
    return sub_216B4B3B4(v17);
  }
  else
  {
    sub_216B9AF1C(v18);
    sub_216B9C594(a1, a2);
    if (sub_216B7214C((uint64_t)a2, 1))
    {
      v6 = 0;
      do
      {
        sub_216B623F0((uint64_t)v18, (uint64_t)a2);
        if (sub_216B71174((uint64_t)a2, 21))
        {
          ++v6;
        }
        else if (sub_216B71174((uint64_t)a2, 22))
        {
          if (!v6)
            break;
          --v6;
        }
        sub_216B9C594(a1, a2);
      }
      while (sub_216B7214C((uint64_t)a2, 1));
    }
    if (sub_216B71174((uint64_t)a2, 1))
    {
      sub_216B720D8(a1, v4, 767, (uint64_t)v16);
      sub_216B4B3B4(v16);
    }
    else
    {
      v7 = sub_216B262E0((uint64_t)v18);
      sub_216B72300(v7, 2);
      v8 = sub_216B3B09C((uint64_t)v18);
      sub_216B74800(v8, 2);
      v9 = sub_216B60724((uint64_t)v18);
      v10 = v9;
      v11 = 24 * v9;
      if (is_mul_ok(v9, 0x18uLL))
        v12 = 24 * v9;
      else
        v12 = -1;
      v13 = sub_216B1D1D4(v12);
      v14 = v13;
      if (v10)
      {
        do
        {
          v13 = sub_216B70D84(v13) + 24;
          v11 -= 24;
        }
        while (v11);
      }
      sub_216B1E600((uint64_t)v18);
      sub_216B1E67C((uint64_t)v18);
      sub_216B7AC98();
      v15 = sub_216B60724((uint64_t)v18);
      sub_216B92C84(a1, v14, v15, 1, 1);
      sub_216B9A644(a1, v4, 2);
      sub_216B9C594(a1, a2);
    }
    return sub_216B1FF6C(v18);
  }
}

uint64_t sub_216B9AF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  v6 = *(_QWORD **)(a1 + 640);
  if (!sub_216B29094((uint64_t)&v9))
  {
    v7 = sub_216B9A460(*(_QWORD *)(a1 + 640), v9, v10, 1);
    if (v7)
    {
      v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    }
    else
    {
      v6 = (_QWORD *)sub_216B1D1D4(64);
      sub_216B9AFB8(v6, v9, v10);
      sub_216B9A508(*(_QWORD *)(a1 + 640), (uint64_t)v6);
    }
  }
  return sub_216B9A508((uint64_t)v6, a4);
}

BOOL sub_216B9AFBC(uint64_t a1, unsigned __int16 *a2)
{
  return sub_216B4AA80(a1) == 2 && *(unsigned __int16 *)sub_216B4AA68(a1) == *a2;
}

BOOL sub_216B9B008(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v4;

  if (sub_216B4AA80(a1) != 3)
    return 0;
  v4 = (unsigned __int16 *)sub_216B4AA68(a1);
  return *v4 == *a2 && *((unsigned __int8 *)v4 + 2) == *((unsigned __int8 *)a2 + 2);
}

uint64_t sub_216B9B060(uint64_t a1, uint64_t a2)
{
  uint64_t v5[2];

  sub_216B26D14(v5);
  return sub_216B9AF20(a1, v5[0], v5[1], a2);
}

uint64_t sub_216B9B0A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 9) = 0;
  *(_QWORD *)(a1 + 16) = a4;
  v7 = sub_216B70D84(a1 + 24);
  if (a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_DWORD *)(v8 + 15);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_DWORD *)(v7 + 15) = v9;
    sub_216B87E04(a2);
  }
  return a1;
}

uint64_t sub_216B9B108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD *)a1;
    if (*(_BYTE *)(a1 + 9))
    {
      sub_216B87E64(v2);
    }
    else
    {
      sub_216B87E78(v2);
      v3 = *(_QWORD *)(a1 + 16);
      v4 = *(_OWORD *)(a1 + 24);
      *(_DWORD *)(v3 + 15) = *(_DWORD *)(a1 + 39);
      *(_OWORD *)v3 = v4;
    }
  }
  return a1;
}

_QWORD *sub_216B9B15C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = sub_216B9B190(a1, a2, a3);
  *v4 = off_24D602880;
  sub_216B3D750(v4 + 4);
  return a1;
}

_QWORD *sub_216B9B190(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  *a1 = off_24D602850;
  sub_216B24898(v5, (uint64_t)(a1 + 1));
  return a1;
}

void sub_216B9B1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)a1;
        v6 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v6)
        {
          if (v6 != sub_216B25120())
            sub_216B3D828(*(unsigned int **)(v5 + v3), a1 + 24);
        }
        *(_QWORD *)(v5 + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t sub_216B9B254(uint64_t a1)
{
  return sub_216B66D4C(a1, 0x20u);
}

uint64_t sub_216B9B25C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B99224();
  v3 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B66FEC(a1);
  while (v3 != (_QWORD *)result)
  {
    *v3 = v2;
    v3 += 4;
  }
  return result;
}

uint64_t sub_216B9B2C0(_DWORD *a1, unsigned int a2)
{
  BOOL v3;
  uint64_t v4;
  unsigned int v6;

  v6 = a2;
  v3 = sub_216B4F6FC(&v6);
  v4 = v6;
  if (!v3)
    return sub_216B62DAC(a1, v6);
  return v4;
}

uint64_t sub_216B9B308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10)
{
  _DWORD *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unsigned int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  uint64_t v30[2];
  uint64_t v31[2];
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[2];
  uint64_t v36[2];
  uint64_t v37[2];
  char v38;
  _DWORD v39[3];

  v18 = sub_216B4AEBC((_DWORD *)a1);
  sub_216B4AEC4(v18 + 2, a2);
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = sub_216B2037C(a6);
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 72) = a7;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_216B324FC(a1 + 96);
  sub_216B39B60((_QWORD *)(a1 + 104));
  sub_216B4AED0((_DWORD *)(a1 + 424));
  sub_216B4AED0((_DWORD *)(a1 + 428));
  sub_216B53B50(a1 + 440, a4, a8);
  sub_216B5DFC4((_QWORD *)(a1 + 616));
  sub_216B29B6C(a1 + 624);
  sub_216B2C030((_QWORD *)(a1 + 648));
  *(_BYTE *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 676) = a10;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 0;
  sub_216B4AED0((_DWORD *)(a1 + 700));
  sub_216B4AED0((_DWORD *)(a1 + 704));
  sub_216B4AED0((_DWORD *)(a1 + 708));
  sub_216B5EDE4(a1 + 712);
  *(_WORD *)(a1 + 768) = 0;
  sub_216B4AED0((_DWORD *)(a1 + 772));
  sub_216B4AED0((_DWORD *)(a1 + 776));
  *(_BYTE *)(a1 + 780) = 0;
  v39[0] = 0;
  v38 = 1;
  sub_216B9B71C(a1 + 784, v39, &v38);
  sub_216B324FC(a1 + 792);
  sub_216B324FC(a1 + 800);
  *(_OWORD *)(a1 + 808) = 0u;
  sub_216B324FC(a1 + 824);
  *(_DWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  sub_216B2C030((_QWORD *)(a1 + 848));
  *(_QWORD *)(a1 + 872) = 0;
  sub_216B61798(a1 + 880);
  sub_216B9B720(a1 + 984, 0);
  sub_216B9B724(a1 + 1008);
  *(_QWORD *)(a1 + 1296) = 0;
  sub_216B9B728(a1 + 1304, 0);
  sub_216B25034(a1 + 1392);
  sub_216B4AED0((_DWORD *)(a1 + 1416));
  sub_216B9B72C(a1 + 1488);
  sub_216B2C030((_QWORD *)(a1 + 1896));
  *(_QWORD *)(a1 + 1920) = 0;
  sub_216B9B730(a1 + 1928);
  sub_216B2C030((_QWORD *)(a1 + 1992));
  *(_OWORD *)(a1 + 2016) = 0u;
  sub_216B9B720(a1 + 2032, 0);
  if (a9)
    v19 = 16;
  else
    v19 = 0;
  *(_WORD *)(a1 + 436) = *(_WORD *)(a1 + 436) & 0xFFEF | v19;
  v20 = sub_216B1D1D4(24);
  *(_QWORD *)(a1 + 56) = sub_216B9D750(v20, *(_QWORD *)(a1 + 48));
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  v21 = *(_WORD *)(a1 + 436);
  *(_DWORD *)(a1 + 1420) = 0;
  *(_WORD *)(a1 + 438) = 0;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_WORD *)(a1 + 436) = v21 & 0xFC10 | 0x100;
  sub_216B1E678((int)v37, "__VA_ARGS__");
  v22 = (unsigned int *)sub_216B89E24(a1, v37[0], v37[1]);
  *(_QWORD *)(a1 + 328) = v22;
  sub_216B8F1A4(v22, 1);
  sub_216B9B734(a1, *(_QWORD *)(a1 + 328), 797);
  v23 = (_QWORD *)sub_216B1D1D4(64);
  sub_216B26D14(v36);
  sub_216B9AFB8(v23, v36[0], v36[1]);
  *(_QWORD *)(a1 + 640) = v23;
  nullsub_1(a1, v24);
  sub_216B943AC((uint64_t *)a1);
  if ((**(_BYTE **)(a1 + 24) & 0x20) != 0)
  {
    sub_216B1E678((int)v35, "_exception_info");
    *(_QWORD *)(a1 + 2080) = sub_216B89E24(a1, v35[0], v35[1]);
    sub_216B1E678((int)v34, "__exception_info");
    *(_QWORD *)(a1 + 2088) = sub_216B89E24(a1, v34[0], v34[1]);
    sub_216B1E678((int)v33, "GetExceptionInformation");
    *(_QWORD *)(a1 + 2096) = sub_216B89E24(a1, v33[0], v33[1]);
    sub_216B1E678((int)v32, "_exception_code");
    *(_QWORD *)(a1 + 2056) = sub_216B89E24(a1, v32[0], v32[1]);
    sub_216B1E678((int)v31, "__exception_code");
    *(_QWORD *)(a1 + 2064) = sub_216B89E24(a1, v31[0], v31[1]);
    sub_216B1E678((int)v30, "GetExceptionCode");
    *(_QWORD *)(a1 + 2072) = sub_216B89E24(a1, v30[0], v30[1]);
    sub_216B1E678((int)v29, "_abnormal_termination");
    *(_QWORD *)(a1 + 2104) = sub_216B89E24(a1, v29[0], v29[1]);
    sub_216B1E678((int)v28, "__abnormal_termination");
    *(_QWORD *)(a1 + 2112) = sub_216B89E24(a1, v28[0], v28[1]);
    sub_216B1E678((int)v27, "AbnormalTermination");
    v25 = sub_216B89E24(a1, v27[0], v27[1]);
  }
  else
  {
    v25 = 0;
    *(_OWORD *)(a1 + 2088) = 0u;
    *(_OWORD *)(a1 + 2104) = 0u;
    *(_OWORD *)(a1 + 2056) = 0u;
    *(_OWORD *)(a1 + 2072) = 0u;
  }
  *(_QWORD *)(a1 + 2120) = v25;
  return a1;
}

uint64_t *sub_216B9B734(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *result;
  uint64_t v5;

  v5 = a2;
  result = sub_216B9C148(a1 + 2032, &v5);
  *(_DWORD *)result = a3;
  return result;
}

uint64_t sub_216B9B76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10)
{
  return sub_216B9B308(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_216B9B780(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v2 = a1 + 848;
  sub_216B9B920((uint64_t *)(a1 + 848));
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 2016);
    if (!v3)
      break;
    *(_QWORD *)(a1 + 2016) = *(_QWORD *)(v3 + 248);
    sub_216B9B954();
  }
  v4 = *(unsigned int *)(a1 + 1420);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)(a1 + 1424);
    do
    {
      if (*v5)
      {
        v6 = (void *)sub_216B8886C(*v5);
        j__free(v6);
      }
      ++v5;
      --v4;
    }
    while (v4);
  }
  sub_216B887F0(a1 + 824, 0);
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 2024);
    if (!v7)
      break;
    *(_QWORD *)(a1 + 2024) = *(_QWORD *)(v7 + 256);
    sub_216B9B954();
  }
  for (i = *(_QWORD *)(a1 + 1296); i; i = sub_216B7AD78(i))
    ;
  v9 = *(_QWORD *)(a1 + 640);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(void **)(a1 + 56);
  if (v10)
    j__free(v10);
  if ((*(_WORD *)(a1 + 436) & 0x10) != 0)
  {
    v11 = *(_QWORD *)(a1 + 64);
    if (v11)
    {
      v12 = (void *)sub_216B6C21C(v11);
      j__free(v12);
    }
  }
  v13 = *(_QWORD *)(a1 + 872);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_216B9B958(a1 + 2032);
  sub_216B3D560(a1 + 1992);
  sub_216B1FF6C(a1 + 1928);
  sub_216B2CFC8(a1 + 1896);
  sub_216B1FF6C(a1 + 1488);
  std::string::~string((std::string *)(a1 + 1392));
  sub_216B9B95C(a1 + 1304);
  sub_216B9B960(a1 + 1008);
  sub_216B9B958(a1 + 984);
  sub_216B1FF6C(a1 + 880);
  sub_216B9B964(v2);
  sub_216B887C4(a1 + 824);
  sub_216B3C0E0(a1 + 800);
  sub_216B3C0E0(a1 + 792);
  sub_216B1FF6C(a1 + 712);
  sub_216B3D560(a1 + 648);
  sub_216B5DFF8((_QWORD *)(a1 + 616));
  sub_216B9B968(a1 + 440);
  sub_216B3A034(a1 + 104);
  sub_216B27C04(a1 + 96);
  sub_216B9B96C(a1 + 8);
  return a1;
}

uint64_t sub_216B9B920(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_216B882B0(a1);
  sub_216B9D158(a1);
  return nullsub_1(a1, v2);
}

uint64_t sub_216B9B974(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = a2;
  sub_216B4AAA8(a1 + 624, a2);
  return sub_216B6D4E0(*(_QWORD *)(a1 + 64), a2);
}

uint64_t sub_216B9B9A8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 18) >> 2) & 1;
}

BOOL sub_216B9B9B4(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = sub_216B3817C(a1 + 792, a2);
  if (result)
  {
    *(_DWORD *)(a1 + 832) = 0;
  }
  else
  {
    result = sub_216B3817C(a1 + 800, v4);
    if (result)
    {
      v6 = 1;
    }
    else
    {
      result = sub_216B3817C(a1 + 824, v5);
      if (result)
        v6 = 2;
      else
        v6 = 3;
    }
    *(_DWORD *)(a1 + 832) = v6;
  }
  return result;
}

BOOL sub_216B9BA14(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *i;
  int v14;
  unsigned __int8 *v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26[2];
  unsigned __int8 v27;

  v27 = 0;
  v8 = sub_216B62650(*(_QWORD *)(a1 + 48), a2, &v27);
  v9 = v27;
  if (!v27)
  {
    v10 = v8;
    v11 = sub_216B1E67C(v8);
    if (a3 >= 2)
    {
      v12 = 1;
      do
      {
        for (i = (unsigned __int8 *)(v11 + 1); ; ++i)
        {
          v14 = *(i - 1);
          if (!*(i - 1))
          {
            v11 = (uint64_t)(i - 1);
            goto LABEL_20;
          }
          if (v14 == 13 || v14 == 10)
            break;
        }
        v16 = i - 1;
        v17 = *i;
        if (v14 == v17)
          --i;
        if (v17 != 10 && v17 != 13)
          i = v16;
        v11 = (uint64_t)(i + 1);
LABEL_20:
        ++v12;
      }
      while (v12 != a3);
    }
    v19 = v11 + (a4 - 1);
    if (*(_DWORD *)(a1 + 784))
    {
      v20 = *(_QWORD *)(a1 + 48);
      v21 = sub_216B8AEB0(v20);
      if (sub_216B81B44(v20, v21) == a2 && (uint64_t)(v19 - sub_216B1E67C(v10)) < *(unsigned int *)(a1 + 784))
        v19 = sub_216B1E67C(v10) + *(unsigned int *)(a1 + 784);
    }
    if (v19 > sub_216B2037C(v10))
      LODWORD(v19) = sub_216B2037C(v10);
    *(_QWORD *)(a1 + 688) = a2;
    *(_DWORD *)(a1 + 696) = v19 - sub_216B1E67C(v10);
    v22 = sub_216B281C0(v10) + 1;
    v23 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    sub_216B1E678((int)v26, v23);
    v24 = sub_216B27320(v22, v26[0], v26[1]);
    sub_216B1E67C(v24);
    sub_216B1E67C(v10);
    *(_BYTE *)sub_216B205DC() = 0;
    sub_216B2037C(v10);
    sub_216B205DC();
    sub_216B626B0(*(_QWORD *)(a1 + 48), a2, v24, 0);
  }
  return v9 != 0;
}

uint64_t sub_216B9BBF4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 680);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  return sub_216B89F40(a1);
}

uint64_t sub_216B9BC28(uint64_t a1, unsigned int *a2, const void **a3, _BYTE *a4)
{
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  if (sub_216B7214C((uint64_t)a2, 7) && (sub_216B711C0((uint64_t)a2) & 1) == 0)
  {
    v8 = sub_216B7068C((uint64_t)a2);
    if (v8)
      return sub_216B4A11C(v8);
  }
  if (sub_216B1E45C((uint64_t)a2))
  {
    v10 = sub_216B693F8((uint64_t)a2);
    sub_216B294F0(a3, v10);
  }
  v12 = sub_216B262E0((uint64_t)a3);
  v11 = sub_216B7B53C(a1, a2, &v12, a4);
  sub_216B1E684(&v13, v12, v11);
  return v13;
}

uint64_t sub_216B9BCE4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int a5, unsigned int a6)
{
  int v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a3;
  v19 = a5;
  v9 = sub_216B1E67C((uint64_t)v20);
  sub_216B68C9C((uint64_t)a4, v9);
  v18 = 0;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (void *)sub_216B1E600((uint64_t)v20);
  v12 = sub_216B1E67C((uint64_t)v20);
  v13 = sub_216B9D754(v10, v11, v12, &v18);
  if (sub_216B27BAC(&v19))
  {
    v14 = *(_QWORD *)(a1 + 48);
    v15 = v19;
    v16 = sub_216B1E67C((uint64_t)v20);
    v13 = sub_216B61BF8(v14, v13, v15, a6, v16, 0, 0);
  }
  sub_216B2A7D8(a4, v13);
  if (sub_216B71174((uint64_t)a4, 7))
    return sub_216B203A4((uint64_t)a4, v18);
  result = sub_216B711CC((uint64_t)a4);
  if ((_DWORD)result)
    return sub_216B203A4((uint64_t)a4, v18);
  return result;
}

uint64_t sub_216B9BDF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const void *v7[2];

  v2 = sub_216B5EE7C(a1);
  if (sub_216B25DD0(v2 + 136, v3))
    return 0;
  v5 = sub_216B5295C(a1);
  v6 = sub_216B5EE7C(a1);
  sub_216B26CA0(v7, v6 + 136);
  return sub_216B6C238(v5, v7[0], (uint64_t)v7[1], 1);
}

BOOL sub_216B9BE60(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11[2];
  uint64_t v12[2];
  unsigned int v13;

  v2 = sub_216B8AEB0(*(_QWORD *)(a1 + 48));
  if ((sub_216B9BF80(*(_QWORD *)(a1 + 48), v2) & 1) == 0)
  {
    sub_216B4AED0(&v13);
    sub_216B9277C(a1, v2, 0, v13);
    if (*(_DWORD *)(a1 + 784))
    {
      v4 = sub_216B25CA8(a1 + 792, v3);
      sub_216B72570(v4, *(_DWORD *)(a1 + 784), *(_BYTE *)(a1 + 788));
    }
    v5 = sub_216B81B44(*(_QWORD *)(a1 + 48), v2);
    if (v5)
      sub_216B9BF88(*(_QWORD *)(a1 + 64), v5);
  }
  sub_216B26CA0(v12, a1 + 1392);
  sub_216B1E678((int)v11, "<built-in>");
  v6 = sub_216B2729C(v12[0], v12[1], v11[0], v11[1]);
  v7 = *(_QWORD *)(a1 + 48);
  sub_216B4AED0(&v10);
  LODWORD(v6) = sub_216B9BFA8(v7, v6, 0, 0, 0, v10);
  sub_216B9C000(a1, v6);
  sub_216B4AED0(&v9);
  return sub_216B9277C(a1, v6, 0, v9);
}

uint64_t sub_216B9BF80(uint64_t a1, unint64_t a2)
{
  return (a2 >> 31) & 1;
}

__int16 *sub_216B9BF88(uint64_t a1, uint64_t a2)
{
  __int16 *result;

  result = sub_216B6DE18(a1, a2);
  ++result[1];
  return result;
}

uint64_t sub_216B9BFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v11;

  v11 = sub_216B61E64(a1, a2);
  return sub_216B622D8(a1, v11, a6, a3, a4, a5);
}

uint64_t sub_216B9C000(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1416) = a2;
  return result;
}

uint64_t sub_216B9C008(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 872);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

_DWORD *sub_216B9C020(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  const void *v14[11];
  const void *v15[11];

  if ((sub_216B1E45C((uint64_t)a2) & 1) != 0 || (sub_216B711C0((uint64_t)a2) & 1) != 0)
  {
    sub_216B341A0(v15);
    v4 = sub_216B9BC28(a1, a2, v15, 0);
    v6 = v5;
    if (sub_216B711C0((uint64_t)a2))
    {
      sub_216B341A0(v14);
      sub_216B775D0(v14, v4, v6);
      v7 = sub_216B28180((uint64_t)v14);
      v9 = (_DWORD *)sub_216B89E24(a1, v7, v8);
      sub_216B2489C(v14);
    }
    else
    {
      v9 = (_DWORD *)sub_216B89E24(a1, v4, v6);
    }
    sub_216B2489C(v15);
  }
  else
  {
    v10 = sub_216B71184((uint64_t)a2);
    v9 = (_DWORD *)sub_216B89E24(a1, v10, v11);
  }
  sub_216B203A4((uint64_t)a2, (uint64_t)v9);
  v12 = sub_216B91C38(v9);
  sub_216B74800((uint64_t)a2, v12);
  return v9;
}

uint64_t *sub_216B9C148(uint64_t a1, uint64_t *a2)
{
  return sub_216B9D2CC(a1, a2) + 1;
}

uint64_t sub_216B9C160(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10[2];
  uint64_t v11[2];
  uint64_t v12[2];

  v4 = a1 + 2032;
  v10[0] = sub_216B7068C((uint64_t)a2);
  sub_216B9C238(v4, v10, (uint64_t)v11);
  sub_216B4F784(v12, v11);
  sub_216B9C2A8(v4, (uint64_t)v10);
  sub_216B4F784(v11, v10);
  if (sub_216B61E30(v12, (uint64_t)v11))
  {
    sub_216B7B558(a1, a2, 752, (uint64_t)v9);
    v5 = (uint64_t *)v9;
  }
  else
  {
    v6 = sub_216B1E600((uint64_t)v12);
    sub_216B7B558(a1, a2, *(_DWORD *)(v6 + 8), (uint64_t)v11);
    v7 = sub_216B7068C((uint64_t)a2);
    sub_216B89E58(v11, v7);
    v5 = v11;
  }
  return sub_216B4B3B4(v5);
}

uint64_t sub_216B9C238@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216B99328(a1, a2, &v8))
    return sub_216B9C2A8(a1, a3);
  v5 = v8;
  v6 = sub_216B5F664(a1);
  return sub_216B991D4(a3, v5, v6, 1);
}

uint64_t sub_216B9C2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B5F664(a1);
  v5 = sub_216B5F664(a1);
  return sub_216B991D4(a2, v4, v5, 1);
}

uint64_t sub_216B9C2F0(uint64_t a1, unsigned int *a2)
{
  unsigned int *v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17[2];
  _BYTE v18[16];

  v4 = (unsigned int *)sub_216B7068C((uint64_t)a2);
  if (sub_216B5E138((uint64_t)v4))
  {
    v5 = v4 == *(unsigned int **)(a1 + 328) ? sub_216B5E0FC((uint64_t)v4) : 0;
    (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), v4);
    v6 = sub_216B91C38(v4);
    sub_216B74800((uint64_t)a2, v6);
    if (v4 == *(unsigned int **)(a1 + 328))
      sub_216B8F1A4(v4, v5);
  }
  if (sub_216B5E0FC((uint64_t)v4) && *(_QWORD *)(a1 + 808))
    sub_216B9C160(a1, a2);
  v7 = sub_216B7B880(a1, (uint64_t)v4);
  if (v7)
  {
    v8 = v7;
    v9 = sub_216B7B8C4(v7);
    if ((*(_WORD *)(a1 + 436) & 0x20) == 0)
    {
      v10 = v9;
      if ((sub_216B9B9A8((uint64_t)a2) & 1) != 0 || !sub_216B7AE94(v10))
      {
        sub_216B72300((uint64_t)a2, 4);
        if (sub_216B8F1D4(v10) || sub_216B9464C(a1, v13))
        {
          sub_216B7B558(a1, a2, 834, (uint64_t)v18);
          sub_216B4B3B4(v18);
        }
      }
      else if (!sub_216B7C920(v10) || sub_216B9464C(a1, v11))
      {
        return sub_216B94790(a1, (uint64_t)a2, v8);
      }
    }
  }
  if (sub_216B5E12C((uint64_t)v4) && (*(_WORD *)(a1 + 436) & 0x20) == 0)
  {
    sub_216B7B558(a1, a2, 863, (uint64_t)v17);
    v14 = sub_216B4A11C((uint64_t)v4);
    sub_216B4B340(v17, v14, v15);
    sub_216B4B3B4(v17);
    sub_216B5E248(v4, 0);
  }
  if (sub_216B5E114((uint64_t)v4))
    sub_216B203A4((uint64_t)a2, 0);
  if (sub_216B5E120((uint64_t)v4) && (*(_WORD *)(a1 + 436) & 0x20) == 0)
  {
    sub_216B7B558(a1, a2, 815, (uint64_t)v16);
    sub_216B4B3B4(v16);
  }
  if (*(_BYTE *)(a1 + 768)
    && sub_216B5E144(v4)
    && (*(_WORD *)(a1 + 436) & 0x28) == 0
    && ((*(_BYTE *)(sub_216B5EE7C(a1) + 6) & 0x10) != 0 || (*(_BYTE *)(sub_216B5EE7C(a1) + 25) & 0x10) != 0)
    && *(_DWORD *)(a1 + 832) != 3)
  {
    *(_DWORD *)(a1 + 708) = sub_216B1E4E0(a2);
    sub_216B20594((_QWORD *)(a1 + 712));
    *(_BYTE *)(a1 + 769) = 1;
    *(_DWORD *)(a1 + 832) = 4;
  }
  return 1;
}

BOOL sub_216B9C594(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v4 = a1 + 824;
  v5 = a1 + 800;
  v6 = a1 + 792;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 832))
    {
      case 0:
        v7 = (_BYTE *)sub_216B25CA8(v6, (uint64_t)a2);
        if ((sub_216B74DE4(v7, a2) & 1) == 0)
          continue;
        break;
      case 1:
        v8 = sub_216B25CA8(v5, (uint64_t)a2);
        if ((sub_216B999A8(v8, a2) & 1) == 0)
          continue;
        break;
      case 2:
        v9 = sub_216B25CA8(v4, (uint64_t)a2);
        if ((sub_216B9E4C0(v9, a2) & 1) == 0)
          continue;
        break;
      case 3:
        sub_216B87EB4(a1, (uint64_t)a2);
        break;
      case 4:
        sub_216B9C668(a1, a2);
        break;
      default:
        continue;
    }
    break;
  }
  result = sub_216B71174((uint64_t)a2, 71);
  *(_BYTE *)(a1 + 768) = result;
  return result;
}

uint64_t sub_216B9C668(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  __int128 v17;

  sub_216B9B9B4(a1, (uint64_t)a2);
  sub_216B9C594(a1, a2);
  if (!*(_BYTE *)(a1 + 769))
    goto LABEL_5;
  if (sub_216B71644((uint64_t)a2) == 6)
  {
    v16 = sub_216B7068C((uint64_t)a2);
    v15 = sub_216B1E4E0(a2);
    *(_QWORD *)&v17 = sub_216B67C54((uint64_t)&v16, (uint64_t)&v15);
    *((_QWORD *)&v17 + 1) = v4;
    result = sub_216B267B0(a1 + 712, &v17);
    *(_BYTE *)(a1 + 769) = 0;
LABEL_7:
    *(_DWORD *)(a1 + 832) = 4;
    return result;
  }
  if (!*(_BYTE *)(a1 + 769))
  {
LABEL_5:
    result = sub_216B71644((uint64_t)a2);
    if ((_DWORD)result == 25)
    {
      *(_BYTE *)(a1 + 769) = 1;
      goto LABEL_7;
    }
  }
  v6 = a1 + 712;
  result = sub_216B29084((_QWORD *)(a1 + 712));
  if ((result & 1) == 0)
  {
    result = sub_216B5EE7C(a1);
    if ((*(_BYTE *)(result + 6) & 0x10) != 0)
    {
      v8 = *(_QWORD *)(a1 + 72);
      v9 = *(unsigned int *)(a1 + 708);
      sub_216B380EC(v14, a1 + 712);
      *(_QWORD *)&v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, v9, v14[0], v14[1], 1, 0);
      result = sub_216B6EFA4(&v17, v10);
      v7 = result;
    }
    else
    {
      v7 = 0;
    }
    if (*(_QWORD *)(a1 + 872))
    {
      if ((*(_BYTE *)(sub_216B5EE7C(a1) + 6) & 0x10) != 0
        || (result = sub_216B5EE7C(a1), (*(_BYTE *)(result + 25) & 0x10) != 0))
      {
        v11 = *(_QWORD *)(a1 + 872);
        v12 = *(unsigned int *)(a1 + 708);
        sub_216B380EC(v13, v6);
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v11 + 48))(v11, v12, v13[0], v13[1], v7);
      }
    }
  }
  return result;
}

uint64_t sub_216B9C7F0(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v16;
  _QWORD v17[2];
  std::string v18;
  _QWORD v19[2];
  uint64_t v20[82];
  char v21;
  char v22;
  _BYTE v23[16];
  _BYTE v24[120];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!sub_216B7214C((uint64_t)a2, 13))
  {
    sub_216B6D390(v24);
    do
    {
      sub_216B623F0((uint64_t)v24, (uint64_t)a2);
      if (sub_216B820A0((uint64_t)a2))
      {
        sub_216B7B558(a1, a2, 19, (uint64_t)v23);
        sub_216B4B3B4(v23);
      }
      if (a5)
        sub_216B9C594(a1, a2);
      else
        sub_216B89BC0(a1, (uint64_t)a2);
    }
    while (sub_216B71174((uint64_t)a2, 13));
    sub_216B968F8(v19, v24);
    sub_216B7A1DC(v20, v19[0], v19[1], a1, 1);
    if (!v21)
    {
      if (!v22)
      {
        v17[0] = sub_216B820B0((uint64_t)v20);
        v17[1] = v16;
        sub_216B24898(v17, (uint64_t)&v18);
        sub_216B26E7C(a3, (uint64_t)&v18);
        std::string::~string(&v18);
        v11 = 1;
        goto LABEL_14;
      }
      v12 = (unsigned int *)sub_216B60770((uint64_t)v24, 0);
      v13 = sub_216B1E4E0(v12);
      sub_216B720D8(a1, v13, 13, (uint64_t)&v18);
      v14 = sub_216B77520((uint64_t *)&v18, 0);
      sub_216B60EA8(v14, a4);
      sub_216B4B3B4(&v18);
    }
    v11 = 0;
LABEL_14:
    sub_216B820FC((uint64_t)v20);
    sub_216B1FF6C(v24);
    return v11;
  }
  sub_216B7B558(a1, a2, 13, (uint64_t)v20);
  v10 = sub_216B77520(v20, 0);
  sub_216B60EA8(v10, a4);
  sub_216B4B3B4(v20);
  return 0;
}

BOOL sub_216B9C9C8(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 53) && *(_BYTE *)(a1 + 52) == 0;
}

uint64_t sub_216B9C9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216B5E918((uint64_t *)(a1 + 648), (uint64_t)&v3);
}

uint64_t sub_216B9CA10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v2 = (uint64_t *)(a1 + 648);
  v3 = sub_216B2C910((uint64_t *)(a1 + 648));
  v4 = sub_216B2C000((uint64_t)v2);
  v7 = sub_216B9CA78(v3, v4, &v8);
  sub_216B2C008(&v6, &v7);
  return sub_216B9CADC(v2, v6);
}

uint64_t sub_216B9CA78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v6 = sub_216B2F028(a1);
  v7 = sub_216B2F028(a2);
  v8 = sub_216B84CC4(v6, v7, a3, (uint64_t)&v10);
  return sub_216B9D588(a1, v8);
}

uint64_t sub_216B9CADC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v6 = sub_216B9D5F8(a1);
  v3 = *a1 + 8 * sub_216B897B8((uint64_t)&v7, (uint64_t)&v6);
  v4 = sub_216B9D5FC();
  sub_216B88894(a1, v4);
  return sub_216B2A914((uint64_t)a1, v3);
}

BOOL sub_216B9CB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a1 + 648;
  v11 = sub_216B2C910((uint64_t *)(a1 + 648));
  v10 = sub_216B2C000(v6);
  result = sub_216B2AB28((uint64_t)&v11, (uint64_t)&v10);
  if (result)
  {
    v8 = 0;
    do
    {
      v9 = (_QWORD *)sub_216B1E600((uint64_t)&v11);
      v8 |= (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 16))(*v9, a1, a3);
      sub_216B3D138(&v11);
    }
    while (sub_216B2AB28((uint64_t)&v11, (uint64_t)&v10));
    if ((v8 & 1) != 0 && (sub_216B70880(a1) & 1) == 0)
    {
      sub_216B9C594(a1, a2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216B9CC1C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 872);
  if (v4)
  {
    v5 = sub_216B1D1D4(24);
    result = sub_216B9CCAC(v5, a2, v4);
    a2 = result;
  }
  *(_QWORD *)(v3 + 872) = a2;
  return result;
}

uint64_t sub_216B9CC70(uint64_t a1)
{
  sub_216B1FF6C(a1 + 24);
  return a1;
}

uint64_t sub_216B9CCA4(uint64_t a1)
{
  return sub_216B1E600(a1 + 24);
}

_QWORD *sub_216B9CCB0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = sub_216B89400(a1);
  *result = off_24D602530;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t sub_216B9CCE8(uint64_t result, _DWORD *a2, _BYTE *a3)
{
  *(_DWORD *)result = *a2;
  *(_BYTE *)(result + 4) = *a3;
  return result;
}

uint64_t sub_216B9CCFC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B9CD2C(v4, v2);
  return a1;
}

uint64_t sub_216B9CD2C(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B5FA0C(a1, a2);
  if ((_DWORD)result)
    return sub_216B9950C(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_216B9CD64(uint64_t a1)
{
  return sub_216B9CD70(a1, a1 + 32, 32);
}

uint64_t sub_216B9CD74(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B9CDA4(v4, v2);
  return a1;
}

uint64_t sub_216B9CDA4(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B66F3C(a1, a2);
  if ((_DWORD)result)
    return sub_216B9B25C(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_216B9CDDC(uint64_t a1)
{
  return sub_216B66D4C(a1, 0x10u);
}

uint64_t sub_216B9CDE4(uint64_t a1)
{
  return sub_216B66D4C(a1, 1u);
}

uint64_t *sub_216B9CDEC(uint64_t *a1)
{
  sub_216B9CE10(a1);
  return a1;
}

uint64_t sub_216B9CE10(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216B9CE20();
  return result;
}

void sub_216B9CE24(_DWORD *a1)
{
  void *v2;

  if ((*a1)-- == 1)
  {
    v2 = (void *)sub_216B9CE50();
    j__free(v2);
  }
}

uint64_t sub_216B9CE54(uint64_t a1)
{
  sub_216B9CECC(a1 + 288);
  sub_216B6C214(a1 + 256);
  sub_216B9CED0(a1 + 232);
  std::string::~string((std::string *)(a1 + 200));
  std::string::~string((std::string *)(a1 + 176));
  sub_216B6F680(a1 + 144);
  sub_216B2C034(a1 + 112);
  std::string::~string((std::string *)(a1 + 88));
  sub_216B2C034(a1 + 56);
  sub_216B2C034(a1 + 32);
  sub_216B6C214(a1 + 8);
  return a1;
}

uint64_t *sub_216B9CED4(uint64_t *a1)
{
  sub_216B9CEF8(a1);
  return a1;
}

uint64_t sub_216B9CEF8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216B9CF08();
  return result;
}

void sub_216B9CF0C(_DWORD *a1)
{
  void *v2;

  if ((*a1)-- == 1)
  {
    v2 = (void *)sub_216B9CF38();
    j__free(v2);
  }
}

uint64_t sub_216B9CF3C(uint64_t a1)
{
  sub_216B6B290(a1 + 8);
  return a1;
}

uint64_t sub_216B9CF64(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B9CFA0(&v3);
  return a1;
}

uint64_t *sub_216B9CFA0(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B9D004(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B9D00C(v6, v8);
    return (uint64_t *)sub_216B6B67C(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B9D004(uint64_t *a1)
{
  return sub_216B9D048((uint64_t)a1, *a1);
}

unint64_t sub_216B9D00C(_QWORD *a1, uint64_t a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 4);
}

uint64_t sub_216B9D048(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B9D0AC(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 48;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B9D0B0(uint64_t a1, uint64_t a2)
{
  return sub_216B4FC14(a2);
}

uint64_t sub_216B9D0B8(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B9D0F4(&v3);
  return a1;
}

uint64_t *sub_216B9D0F4(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B9D158(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B88404(v6, v8);
    return (uint64_t *)sub_216B51070(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B9D158(uint64_t *a1)
{
  return sub_216B94074((uint64_t)a1, *a1);
}

void **sub_216B9D160(void **a1)
{
  sub_216B9D18C((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B9D18C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B99224();
    v4 = sub_216B50ED0();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B5F664(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B2A5FC(*v5, v4);
        v5 += 2;
      }
      while (v5 != v6);
    }
  }
  return result;
}

void **sub_216B9D210(void **a1)
{
  sub_216B9D23C((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B9D23C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B99224();
    v4 = sub_216B50ED0();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B66FEC(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
        {
          result = sub_216B2A5FC(*v5, v4);
          if ((result & 1) == 0)
            result = sub_216B3D560(v5 + 1);
        }
        v5 += 4;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t *sub_216B9D2CC(uint64_t a1, uint64_t *a2)
{
  int v5;
  uint64_t *v6;

  v6 = 0;
  if (sub_216B99328(a1, a2, &v6))
    return v6;
  v5 = 0;
  return sub_216B9D324(a1, a2, &v5, v6);
}

uint64_t *sub_216B9D324(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t *result;

  result = sub_216B9D35C(a1, a2, a4);
  *result = *a2;
  *((_DWORD *)result + 2) = *a3;
  return result;
}

uint64_t *sub_216B9D35C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B9D444(a1, (2 * v6));
    sub_216B99328(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B9D444(a1, v7);
    sub_216B99328(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B99224();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B9D448(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(void **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B5FA0C(a1, *v5);
  if (v4)
  {
    sub_216B9D4D0(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    j__free(v4);
  }
  else
  {
    sub_216B9950C(a1);
  }
}

uint64_t sub_216B9D4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  sub_216B9950C(a1);
  v6 = sub_216B99224();
  result = sub_216B50ED0();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*(_QWORD *)a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*(_QWORD *)a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B99328(a1, (uint64_t *)a2, &v9);
          *(_QWORD *)v9 = *(_QWORD *)a2;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 16;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216B9D58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a1;
  v3 = sub_216B2F054(&v5);
  return sub_216B9D5CC(&v5, (a2 - v3) >> 3);
}

uint64_t sub_216B9D5CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  sub_216B355AC(&v3, a2);
  return v3;
}

uint64_t sub_216B9D5FC()
{
  uint64_t v0;

  sub_216B9D614();
  return v0;
}

uint64_t sub_216B9D61C(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24D602918;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = 0;
  v5 = (_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 23) = 0;
  sub_216B772A0(a1 + 32);
  sub_216B2D768(a1 + 64);
  if (a2)
  {
    v6 = sub_216B40EE8(a2);
    *v5 = sub_216B622C0(v6);
  }
  return a1;
}

uint64_t sub_216B9D688(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[16];

  *(_BYTE *)(a1 + 25) = 1;
  if (*(_BYTE *)(a1 + 26))
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 24))(a1, a2);
  else
    sub_216B9C594(*(_QWORD *)(a1 + 8), a2);
  *(_BYTE *)(a1 + 25) = 0;
  result = sub_216B71174((uint64_t)a2, 2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = sub_216B1E4E0(a2);
    sub_216B720D8(v5, v6, 718, (uint64_t)v7);
    return sub_216B4B3B4(v7);
  }
  return result;
}

uint64_t sub_216B9D720(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  sub_216B4AED0((_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 20) = 4060;
  return a1;
}

uint64_t sub_216B9D754(uint64_t a1, void *__src, size_t __n, _QWORD *a4)
{
  unsigned int v5;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  v5 = __n;
  v8 = *(_DWORD *)(a1 + 20);
  if (__n + v8 - 4059 <= 0xFFFFF022)
  {
    sub_216B9D80C(a1, __n + 2);
    v8 = *(_DWORD *)(a1 + 20);
  }
  v9 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v8 + 1;
  *(_BYTE *)(v9 + v8) = 10;
  *a4 = *(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 20);
  memcpy((void *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 20)), __src, v5);
  v10 = *(_DWORD *)(a1 + 20) + v5;
  *(_DWORD *)(a1 + 20) = v10 + 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + v10) = 0;
  return sub_216B62D74((_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20) + ~v5);
}

_BYTE *sub_216B9D80C(uint64_t a1, unsigned int a2)
{
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *result;
  unsigned int v8;
  uint64_t v9[2];

  if (a2 <= 0xFDC)
    v3 = 4060;
  else
    v3 = a2;
  sub_216B1E678((int)v9, "<scratch space>");
  v4 = sub_216B27424(v3, v9[0], v9[1]);
  v5 = *(_QWORD *)a1;
  sub_216B4AED0(&v8);
  v6 = sub_216B9BFA8(v5, v4, 0, 0, 0, v8);
  *(_DWORD *)(a1 + 16) = sub_216B64050(*(_QWORD *)a1, v6);
  result = (_BYTE *)sub_216B1E67C(v4);
  *(_QWORD *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = 1;
  *result = 48;
  return result;
}

uint64_t sub_216B9D8BC(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  char v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int v16;

  sub_216B9DA34(a1);
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = sub_216B1E4E0(a2);
  *(_DWORD *)(a1 + 44) = a3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFE | sub_216B7164C((uint64_t)a2);
  if (sub_216B75974((uint64_t)a2))
    v10 = 2;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xF9 | v10;
  *(_QWORD *)(a1 + 24) = sub_216B9CCA4(*(_QWORD *)a1);
  *(_BYTE *)(a1 + 64) &= 0xE7u;
  v11 = sub_216B9DA8C(*(_QWORD *)a1);
  *(_DWORD *)(a1 + 32) = -1431655765 * ((unint64_t)(v11 - sub_216B9CCA4(*(_QWORD *)a1)) >> 3);
  sub_216B4AED0(&v16);
  *(_DWORD *)(a1 + 48) = v16;
  v12 = (_DWORD *)sub_216B40EE8(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 52) = sub_216B64184((uint64_t)v12);
  if (*(_DWORD *)(a1 + 32))
  {
    v13 = sub_216B1E4E0(*(unsigned int **)(a1 + 24));
    *(_DWORD *)(a1 + 56) = sub_216B4EDA4(v12, v13);
    v14 = sub_216B9DA94(*(_QWORD *)a1, v12);
    *(_DWORD *)(a1 + 60) = v14;
    *(_DWORD *)(a1 + 48) = sub_216B61BF8((uint64_t)v12, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), v14, 0, 0);
  }
  if (sub_216B7C920(*(_QWORD *)a1) && sub_216B4CBC4(*(_QWORD *)a1))
    sub_216B9DAA8(a1);
  return sub_216B9E14C(*(_QWORD *)a1);
}

_QWORD *sub_216B9DA34(uint64_t a1)
{
  char v2;
  void *v3;
  _QWORD *result;

  v2 = *(_BYTE *)(a1 + 64);
  if ((v2 & 8) != 0)
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      j__free(v3);
      v2 = *(_BYTE *)(a1 + 64);
    }
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 64) = v2 & 0xF7;
  }
  result = *(_QWORD **)(a1 + 8);
  if (result)
    return (_QWORD *)sub_216B7AD00(result, *(_QWORD *)(a1 + 16));
  return result;
}

uint64_t sub_216B9DA8C(uint64_t a1)
{
  return sub_216B1E67C(a1 + 24);
}

uint64_t sub_216B9DA94(uint64_t a1, _DWORD *a2)
{
  if ((*(_WORD *)(a1 + 244) & 1) != 0)
    return *(unsigned int *)(a1 + 240);
  else
    return sub_216B7C5B0(a1, a2);
}

uint64_t sub_216B9DAA8(uint64_t a1)
{
  int i;
  char v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  char v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int j;
  uint64_t v51;
  int v52;
  unsigned int *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v58;
  int v59;
  uint64_t v60[2];
  _BYTE v61[16];
  _BYTE v62[19];
  unsigned int v63[6];
  const void *v64[389];

  v64[387] = *(const void **)MEMORY[0x24BDAC8D0];
  sub_216B9E388(v64);
  i = *(_DWORD *)(a1 + 32);
  if (!i)
    return sub_216B1FF6C(v64);
  v3 = 0;
  v4 = 0;
  v58 = (_DWORD *)(a1 + 40);
  v59 = *(_DWORD *)(a1 + 32);
  do
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = (unsigned int *)(v5 + 24 * v4);
    if (v4 && !sub_216B71174(v5 + 24 * (v4 - 1), 66) && sub_216B75974((uint64_t)v6))
      *(_BYTE *)(a1 + 64) |= 4u;
    if (sub_216B71174((uint64_t)v6, 65) || sub_216B71174((uint64_t)v6, 67))
    {
      v7 = *(_QWORD *)a1;
      v8 = sub_216B7068C(*(_QWORD *)(a1 + 24) + 24 * ++v4);
      v9 = sub_216B7C954(v7, v8);
      v10 = sub_216B1E4E0(v6);
      v11 = sub_216B9E38C(a1, v10);
      v12 = sub_216B1E4E0((unsigned int *)(*(_QWORD *)(a1 + 24) + 24 * v4));
      v13 = sub_216B9E38C(a1, v12);
      sub_216B70D84(v63);
      if (sub_216B71174((uint64_t)v6, 65))
      {
        v14 = sub_216B7B59C(*(_QWORD *)(a1 + 8), v9, *(_QWORD *)(a1 + 16), v11, v13);
        v15 = *(_DWORD *)(v14 + 15);
        *(_OWORD *)v63 = *(_OWORD *)v14;
      }
      else
      {
        v16 = (unsigned int *)sub_216B7ACC0(*(_QWORD *)(a1 + 8), v9);
        sub_216B7B120(v16, *(_QWORD *)(a1 + 16), 1, v11, v13, v62);
        *(_OWORD *)v63 = *(_OWORD *)v62;
        v15 = *(_DWORD *)&v62[15];
      }
      *(unsigned int *)((char *)&v63[3] + 3) = v15;
      if ((*(_BYTE *)(a1 + 64) & 4) != 0)
        sub_216B72300((uint64_t)v63, 2);
      sub_216B623F0((uint64_t)v64, (uint64_t)v63);
      goto LABEL_15;
    }
    if (sub_216B29084(v64))
    {
      v18 = 0;
      if (v4)
        goto LABEL_22;
    }
    else
    {
      v20 = sub_216B3B09C((uint64_t)v64);
      v18 = sub_216B71174(v20, 66);
      if (v4)
      {
LABEL_22:
        v19 = sub_216B71174(*(_QWORD *)(a1 + 24) + 24 * (v4 - 1), 66);
        goto LABEL_25;
      }
    }
    v19 = 0;
LABEL_25:
    v21 = v4 + 1 != i && sub_216B71174(*(_QWORD *)(a1 + 24) + 24 * (v4 + 1), 66);
    v22 = sub_216B7068C((uint64_t)v6);
    if (!v22 || (v23 = sub_216B7C954(*(_QWORD *)a1, v22), v23 == -1))
    {
      sub_216B623F0((uint64_t)v64, (uint64_t)v6);
      if ((*(_BYTE *)(a1 + 64) & 4) != 0)
      {
        v26 = sub_216B3B09C((uint64_t)v64);
        sub_216B72300(v26, 2);
        *(_BYTE *)(a1 + 64) &= ~4u;
        goto LABEL_38;
      }
      i = v59;
      if (v19 && !v18)
      {
        v25 = sub_216B3B09C((uint64_t)v64);
        sub_216B747D8(v25, 2);
      }
    }
    else
    {
      v24 = v23;
      if (v19)
        goto LABEL_40;
      if (sub_216B9E3DC(*(_QWORD *)(a1 + 8))
        && sub_216B9E248(a1, v64, 0, *(_QWORD *)a1, v24, *(_QWORD *)(a1 + 16)))
      {
        v3 = 1;
LABEL_38:
        i = v59;
        goto LABEL_18;
      }
      if (v21)
      {
LABEL_40:
        v27 = (__int128 *)sub_216B7ACC0(*(_QWORD *)(a1 + 8), v24);
        v28 = sub_216B7ADA4((uint64_t)v27);
        if (v28)
        {
          v29 = v28;
          if (v18 && sub_216B60724((uint64_t)v64) >= 2)
          {
            v30 = sub_216B60724((uint64_t)v64);
            v31 = sub_216B60770((uint64_t)v64, v30 - 2);
            if (sub_216B71174(v31, 64)
              && v24 == sub_216B4CBC4(*(_QWORD *)a1) - 1
              && sub_216B96348(*(_QWORD *)a1))
            {
              v32 = *(_QWORD *)(a1 + 16);
              sub_216B3759C((uint64_t)v64, (uint64_t)v63);
              v33 = sub_216B1E4E0(v63);
              sub_216B720D8(v32, v33, 795, (uint64_t)v61);
              sub_216B4B3B4(v61);
            }
          }
          sub_216B96A54(v64, v27, (__int128 *)((char *)v27 + 24 * v29));
          v34 = sub_216B60724((uint64_t)v64) - v29;
          v35 = sub_216B60724((uint64_t)v64);
          for (i = v59; v35 != v34; ++v34)
          {
            v36 = sub_216B60770((uint64_t)v64, v34);
            if (sub_216B71174(v36, 66))
              sub_216B74800(v36, 0);
          }
          if (sub_216B27BAC(v58))
          {
            v37 = sub_216B1E4E0(v6);
            v38 = (unsigned int *)(sub_216B1E67C((uint64_t)v64) - 24 * v29);
            v39 = sub_216B1E67C((uint64_t)v64);
            sub_216B9E3E4(a1, v37, v38, v39);
          }
          v17 = *(_BYTE *)(a1 + 64);
          if ((v17 & 4) != 0)
          {
            v40 = sub_216B60724((uint64_t)v64);
            v41 = sub_216B60770((uint64_t)v64, v40 - v29);
            sub_216B72300(v41, 2);
            goto LABEL_15;
          }
          goto LABEL_16;
        }
        if (v21)
        {
          v3 = 1;
          ++v4;
          goto LABEL_38;
        }
        if (v18)
          sub_216B36814((uint64_t)v64);
        i = v59;
        if (!sub_216B9E3DC(*(_QWORD *)(a1 + 8)))
          goto LABEL_17;
        v3 = 1;
        sub_216B9E248(a1, v64, 1, *(_QWORD *)a1, v24, *(_QWORD *)(a1 + 16));
      }
      else
      {
        v42 = (__int128 *)sub_216B7ACC0(*(_QWORD *)(a1 + 8), v24);
        if (sub_216B7ADF0(*(_QWORD *)(a1 + 8), (uint64_t)v42, *(_QWORD *)(a1 + 16)))
        {
          v43 = sub_216B7AEA4(*(_QWORD *)(a1 + 8), v24, *(_QWORD *)a1, *(_QWORD *)(a1 + 16));
          v42 = (__int128 *)sub_216B2BF7C(v43, 0);
        }
        v3 = 1;
        i = v59;
        if (sub_216B7214C((uint64_t)v42, 1))
        {
          v44 = sub_216B60724((uint64_t)v64);
          v45 = sub_216B7ADA4((uint64_t)v42);
          sub_216B96A54(v64, v42, (__int128 *)((char *)v42 + 24 * v45));
          v46 = (_QWORD *)sub_216B5EE7C(*(_QWORD *)(a1 + 16));
          if (v45 == 1 && (*v46 & 4) != 0)
          {
            v47 = sub_216B3B09C((uint64_t)v64);
            if (sub_216B71174(v47, 64))
            {
              v48 = sub_216B3B09C((uint64_t)v64);
              sub_216B72300(v48, 128);
            }
          }
          v49 = sub_216B60724((uint64_t)v64);
          for (j = v44; v49 != j; ++j)
          {
            v51 = sub_216B60770((uint64_t)v64, j);
            if (sub_216B71174(v51, 66))
              sub_216B74800(v51, 0);
          }
          if (sub_216B27BAC(v58))
          {
            v52 = sub_216B1E4E0(v6);
            v53 = (unsigned int *)(sub_216B1E600((uint64_t)v64) + 24 * v44);
            v54 = sub_216B1E67C((uint64_t)v64);
            sub_216B9E3E4(a1, v52, v53, v54);
          }
          v55 = sub_216B60770((uint64_t)v64, v44);
          sub_216B74374(v55, 2, (*(unsigned __int8 *)(a1 + 64) >> 2) & 1);
LABEL_15:
          v17 = *(_BYTE *)(a1 + 64);
LABEL_16:
          *(_BYTE *)(a1 + 64) = v17 & 0xFB;
LABEL_17:
          v3 = 1;
        }
      }
    }
LABEL_18:
    ++v4;
  }
  while (v4 != i);
  if ((v3 & 1) != 0)
  {
    *(_DWORD *)(a1 + 32) = sub_216B60724((uint64_t)v64);
    v56 = *(_QWORD *)(a1 + 16);
    sub_216B968F8(v60, v64);
    *(_QWORD *)(a1 + 24) = sub_216B968FC(v56, a1, v60[0], v60[1]);
    *(_BYTE *)(a1 + 64) &= ~8u;
  }
  return sub_216B1FF6C(v64);
}

uint64_t sub_216B9E14C(uint64_t result)
{
  *(_WORD *)(result + 244) |= 0x40u;
  return result;
}

uint64_t sub_216B9E15C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  char v10;
  char v11;
  int v12;
  uint64_t result;
  char v14;
  int v15;
  int v16;

  sub_216B9DA34(a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  if (a5)
    v10 = 8;
  else
    v10 = 0;
  if (a4)
    v11 = 16;
  else
    v11 = 0;
  *(_BYTE *)(a1 + 64) = v10 | v11 | *(_BYTE *)(a1 + 64) & 0xE7;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = 0;
  sub_216B4AED0(&v16);
  v12 = v16;
  *(_DWORD *)(a1 + 40) = v16;
  *(_DWORD *)(a1 + 44) = v12;
  *(_BYTE *)(a1 + 64) &= 0xF8u;
  result = (uint64_t)sub_216B4AED0(&v15);
  *(_DWORD *)(a1 + 48) = v15;
  if (a3)
  {
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFE | sub_216B7164C(a2);
    result = sub_216B75974(a2);
    if ((_DWORD)result)
      v14 = 2;
    else
      v14 = 0;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFD | v14;
  }
  return result;
}

BOOL sub_216B9E248(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  _BOOL8 result;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE v17[16];

  result = sub_216B96348(a4);
  if (result)
  {
    if (sub_216B4CBC4(a4) - 1 == a5
      && ((a3 & 1) != 0 || (*(_BYTE *)sub_216B5EE7C(a6) & 4) != 0)
      && ((*(_BYTE *)sub_216B5EE7C(a6) & 1) == 0
       || (*(_BYTE *)(sub_216B5EE7C(a6) + 2) & 0x80) != 0
       || sub_216B4CBC4(a4) >= 2)
      && !sub_216B29084(a2))
    {
      v13 = sub_216B3B09C((uint64_t)a2);
      result = sub_216B71174(v13, 64);
      if (result)
      {
        if (a3)
        {
          v14 = (unsigned int *)sub_216B3B09C((uint64_t)a2);
          v15 = sub_216B1E4E0(v14);
          sub_216B720D8(a6, v15, 795, (uint64_t)v17);
          sub_216B4B3B4(v17);
        }
        sub_216B36814((uint64_t)a2);
        if (!sub_216B29084(a2))
        {
          v16 = sub_216B3B09C((uint64_t)a2);
          if (sub_216B71174(v16, 66))
            sub_216B36814((uint64_t)a2);
        }
        *(_BYTE *)(a1 + 64) &= ~4u;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216B9E38C(uint64_t a1, int a2)
{
  uint64_t v4;
  int v6;

  v4 = sub_216B40EE8(*(_QWORD *)(a1 + 16));
  v6 = 0;
  sub_216B9EF1C(v4, a2, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), &v6);
  return sub_216B62D74((_DWORD *)(a1 + 48), v6);
}

uint64_t sub_216B9E3DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

_DWORD *sub_216B9E3E4(uint64_t a1, int a2, unsigned int *a3, unint64_t a4)
{
  unsigned int *v5;
  uint64_t v8;
  _DWORD *result;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int *v14;

  v5 = a3;
  v14 = a3;
  v8 = sub_216B40EE8(*(_QWORD *)(a1 + 16));
  result = (_DWORD *)sub_216B9E38C(a1, a2);
  if ((unint64_t)v5 < a4)
  {
    v10 = result;
    while (a4 - (_QWORD)v5 != 24)
    {
      result = (_DWORD *)sub_216B9EF80(v8, v10, &v14, a4);
      v5 = v14;
      if ((unint64_t)v14 >= a4)
        return result;
    }
    v11 = sub_216B1E4E0(v5);
    v12 = sub_216B693F8((uint64_t)v5);
    v13 = sub_216B62454(v8, v11, v10, v12);
    return sub_216B2A7D8(v5, v13);
  }
  return result;
}

uint64_t sub_216B9E4C0(uint64_t a1, unsigned int *a2)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  char v19;
  _DWORD *v20;
  __int16 v21;
  int v22;

  if (!sub_216B9E778(a1))
  {
    v5 = sub_216B40EE8(*(_QWORD *)(a1 + 16));
    v6 = *(_DWORD *)(a1 + 36);
    v7 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 36) = v6 + 1;
    v8 = v7 + 24 * v6;
    v9 = *(_DWORD *)(v8 + 15);
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(unsigned int *)((char *)a2 + 15) = v9;
    if (!sub_216B9E778(a1)
      && sub_216B71174(*(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36), 66)
      && *(_QWORD *)a1)
    {
      if ((sub_216B9E798(a1, a2) & 1) != 0)
        return 1;
      v10 = 0;
    }
    else
    {
      v10 = 1;
    }
    if (sub_216B27BAC((_DWORD *)(a1 + 40)))
    {
      v11 = sub_216B1E4E0(a2);
      if (sub_216B9EDCC(v5, v11, *(_DWORD *)(a1 + 52)))
      {
        sub_216B4AED0(&v22);
        v12 = sub_216B71174((uint64_t)a2, 5);
        v13 = sub_216B1E4E0(a2);
        v14 = v13;
        if (v12)
        {
          v15 = *(_DWORD *)(a1 + 40);
          v16 = *(_DWORD *)(a1 + 44);
          v17 = sub_216B693F8((uint64_t)a2);
          v18 = sub_216B61BF8(v5, v14, v15, v16, v17, 0, 0);
        }
        else
        {
          v18 = sub_216B9E38C(a1, v13);
        }
        v22 = v18;
        sub_216B2A7D8(a2, v18);
      }
    }
    v19 = *(_BYTE *)(a1 + 64);
    if (v6)
    {
      if ((*(_BYTE *)(a1 + 64) & 1) != 0)
      {
        sub_216B72300((uint64_t)a2, 1);
        v19 = *(_BYTE *)(a1 + 64);
      }
      if ((v19 & 2) != 0)
        sub_216B72300((uint64_t)a2, 2);
    }
    else
    {
      sub_216B74374((uint64_t)a2, 1, v19 & 1);
      sub_216B74374((uint64_t)a2, 2, (*(unsigned __int8 *)(a1 + 64) >> 1) & 1);
    }
    *(_BYTE *)(a1 + 64) &= 0xFCu;
    if (!sub_216B9837C((uint64_t)a2) && sub_216B7068C((uint64_t)a2))
    {
      v20 = (_DWORD *)sub_216B7068C((uint64_t)a2);
      v21 = sub_216B91C38(v20);
      sub_216B74800((uint64_t)a2, v21);
      if (((v10 | sub_216B5E0FC((uint64_t)v20) ^ 1) & 1) == 0)
        sub_216B9C160(*(_QWORD *)(a1 + 16), a2);
      if ((*(_BYTE *)(a1 + 64) & 0x10) == 0 && sub_216B731F4((uint64_t)v20))
        return sub_216B9C2F0(*(_QWORD *)(a1 + 16), a2);
    }
    return 1;
  }
  if (*(_QWORD *)a1)
    sub_216B9E788(*(_QWORD *)a1);
  sub_216B75074((uint64_t)a2);
  sub_216B74374((uint64_t)a2, 1, *(_BYTE *)(a1 + 64) & 1);
  sub_216B74374((uint64_t)a2, 2, (*(_BYTE *)(a1 + 64) & 6) != 0);
  if (!*(_DWORD *)(a1 + 36))
    sub_216B72300((uint64_t)a2, 16);
  return sub_216B93BA0(*(_QWORD *)(a1 + 16), a2);
}

BOOL sub_216B9E778(uint64_t a1)
{
  return *(_DWORD *)(a1 + 36) == *(_DWORD *)(a1 + 32);
}

uint64_t sub_216B9E788(uint64_t result)
{
  *(_WORD *)(result + 244) &= ~0x40u;
  return result;
}

uint64_t sub_216B9E798(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int *v5;
  int v6;
  int v7;
  unsigned int v8;
  void *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v46[2];
  unsigned __int8 v47;
  _BYTE v48[19];
  unsigned int v49;
  unsigned int v50;
  unsigned int v51[7];
  char v52;
  void *__src;
  unsigned int v54;
  unsigned int v55;
  const void *v56[19];
  _QWORD v57[53];

  v57[51] = *MEMORY[0x24BDAC8D0];
  sub_216B295EC(v56);
  v55 = sub_216B1E4E0(a2);
  sub_216B4AED0(&v54);
  while (1)
  {
    v54 = sub_216B1E4E0((unsigned int *)(*(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36)));
    v4 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v4;
    v5 = (unsigned int *)(*(_QWORD *)(a1 + 24) + 24 * v4);
    v6 = sub_216B693F8((uint64_t)a2);
    v7 = sub_216B693F8((uint64_t)v5);
    sub_216B294F0(v56, v7 + v6);
    __src = 0;
    __src = (void *)sub_216B1FF44((uint64_t)v56, 0);
    v52 = 0;
    v8 = sub_216B7B53C(*(_QWORD *)(a1 + 16), a2, (uint64_t *)&__src, &v52);
    v9 = __src;
    if (v9 != (void *)sub_216B1FF44((uint64_t)v56, 0))
    {
      v10 = (void *)sub_216B1FF44((uint64_t)v56, 0);
      memcpy(v10, __src, v8);
    }
    if (v52)
      goto LABEL_24;
    __src = (void *)sub_216B1FF44((uint64_t)v56, v8);
    v11 = sub_216B7B53C(*(_QWORD *)(a1 + 16), v5, (uint64_t *)&__src, &v52);
    if (v52)
      goto LABEL_24;
    v12 = v11;
    v13 = __src;
    if (v13 != (void *)sub_216B1FF44((uint64_t)v56, v8))
    {
      v14 = (void *)sub_216B1FF44((uint64_t)v56, v8);
      memcpy(v14, __src, v12);
    }
    sub_216B294F0(v56, v12 + v8);
    sub_216B70D84(v51);
    sub_216B75074((uint64_t)v51);
    sub_216B74800((uint64_t)v51, 13);
    v15 = *(_QWORD *)(a1 + 16);
    v16 = sub_216B28180((uint64_t)v56);
    v18 = v17;
    sub_216B4AED0(&v50);
    sub_216B4AED0(&v49);
    sub_216B9BCE4(v15, v16, v18, v51, v50, v49);
    v19 = sub_216B1E4E0(v51);
    v20 = sub_216B1E67C((uint64_t)v51);
    sub_216B70D84(v48);
    if (!sub_216B9EE28((uint64_t)a2) || !sub_216B9EE28((uint64_t)v5))
      break;
    sub_216B9EE3C(*(_QWORD *)(a1 + 16), 1);
    sub_216B75074((uint64_t)v48);
    sub_216B74800((uint64_t)v48, 7);
    sub_216B203A4((uint64_t)v48, v20);
    sub_216B2A7D8(v48, v19);
    sub_216B68C9C((uint64_t)v48, v12 + v8);
LABEL_17:
    v30 = sub_216B7164C((uint64_t)a2);
    sub_216B74374((uint64_t)v48, 1, v30);
    v31 = sub_216B75974((uint64_t)a2);
    sub_216B74374((uint64_t)v48, 2, v31);
    ++*(_DWORD *)(a1 + 36);
    *(_OWORD *)a2 = *(_OWORD *)v48;
    *(unsigned int *)((char *)a2 + 15) = *(_DWORD *)&v48[15];
    if (sub_216B9E778(a1) || !sub_216B71174(*(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36), 66))
      goto LABEL_31;
  }
  sub_216B9EE3C(*(_QWORD *)(a1 + 16), 0);
  v21 = (_DWORD *)sub_216B40EE8(*(_QWORD *)(a1 + 16));
  v22 = sub_216B60454(v21, v19);
  v47 = 0;
  v23 = v22;
  v57[0] = sub_216B627D4((uint64_t)v21, v22, &v47);
  v57[1] = v24;
  v25 = sub_216B1E600((uint64_t)v57);
  if (v47)
    goto LABEL_41;
  v26 = v25;
  v27 = sub_216B64050((uint64_t)v21, v23);
  v28 = sub_216B5EE7C(*(_QWORD *)(a1 + 16));
  sub_216B70958((uint64_t)v57, v27, v28, v26, v20, v20 + v8 + v12);
  v29 = sub_216B70D88((uint64_t)v57, (uint64_t)v48);
  if (!sub_216B71174((uint64_t)v48, 1) && v29)
  {
    if (sub_216B71174((uint64_t)v48, 66))
      sub_216B74800((uint64_t)v48, 0);
    sub_216B70F34(v57);
    goto LABEL_17;
  }
  if ((*(_BYTE *)sub_216B5EE7C(*(_QWORD *)(a1 + 16)) & 8) != 0
    && sub_216B71174((uint64_t)a2, 42)
    && sub_216B71174((uint64_t)v5, 42))
  {
    sub_216B9EE60((uint64_t *)a1, a2);
    sub_216B70F34(v57);
LABEL_24:
    v32 = 1;
    goto LABEL_42;
  }
  if ((*(_BYTE *)(sub_216B5EE7C(*(_QWORD *)(a1 + 16)) + 2) & 0x40) == 0)
  {
    v33 = sub_216B40EE8(*(_QWORD *)(a1 + 16));
    v34 = sub_216B61BF8(v33, v54, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), 2, 0, 0);
    v35 = *(_QWORD *)(a1 + 16);
    if ((*(_QWORD *)sub_216B5EE7C(v35) & 8) != 0)
      v36 = 796;
    else
      v36 = 700;
    sub_216B720D8(v35, v34, v36, (uint64_t)v46);
    v37 = sub_216B24850((uint64_t)v56);
    sub_216B4B340(v46, v37, v38);
    sub_216B4B3B4(v46);
  }
  sub_216B70F34(v57);
LABEL_31:
  LODWORD(v57[0]) = sub_216B1E4E0((unsigned int *)(*(_QWORD *)(a1 + 24) + 24
                                                                        * (*(_DWORD *)(a1 + 36) - 1)));
  v39 = (_DWORD *)sub_216B40EE8(*(_QWORD *)(a1 + 16));
  if (sub_216B4F6FC(&v55))
    v55 = sub_216B9E38C(a1, v55);
  if (sub_216B4F6FC(v57))
    LODWORD(v57[0]) = sub_216B9E38C(a1, v57[0]);
  v51[0] = sub_216B60454(v39, *(_DWORD *)(a1 + 48));
  for (*(_DWORD *)v48 = sub_216B60454(v39, v55); sub_216B651D4(v48, v51); *(_DWORD *)v48 = sub_216B60454(v39, v55))
    v55 = sub_216B62EDC(v39, v55);
  for (*(_DWORD *)v48 = sub_216B60454(v39, v57[0]); sub_216B651D4(v48, v51); *(_DWORD *)v48 = sub_216B60454(v39, v57[0]))LODWORD(v57[0]) = (unint64_t)sub_216B62EDC(v39, v57[0]) >> 32;
  v40 = sub_216B1E4E0(a2);
  v41 = v55;
  v42 = v57[0];
  v43 = sub_216B693F8((uint64_t)a2);
  v44 = sub_216B61BF8((uint64_t)v39, v40, v41, v42, v43, 0, 0);
  sub_216B2A7D8(a2, v44);
  if (sub_216B71174((uint64_t)a2, 7))
    sub_216B9C020(*(_QWORD *)(a1 + 16), a2);
LABEL_41:
  v32 = 0;
LABEL_42:
  sub_216B2489C(v56);
  return v32;
}

BOOL sub_216B9EDCC(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v5;
  unsigned int v6;
  int v8;

  v8 = a2;
  v5 = sub_216B6064C(&v8);
  v6 = *(_DWORD *)(a1 + 500);
  if (v6 > a3 != v5 >= v6)
    return v5 < a3;
  else
    return v5 >= v6;
}

BOOL sub_216B9EE28(uint64_t a1)
{
  __int16 v1;

  v1 = sub_216B71644(a1);
  return sub_216B9F15C(v1);
}

uint64_t sub_216B9EE3C(uint64_t result, int a2)
{
  if (a2)
    ++*(_DWORD *)(result + 1384);
  else
    ++*(_DWORD *)(result + 1380);
  return result;
}

uint64_t sub_216B9EE60(uint64_t *a1, unsigned int *a2)
{
  sub_216B9E788(*a1);
  return sub_216B93CDC(a1[2], a2);
}

uint64_t sub_216B9EE90(uint64_t a1)
{
  if (sub_216B9E778(a1))
    return 2;
  else
    return sub_216B71174(*(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36), 21);
}

BOOL sub_216B9EED4(uint64_t a1)
{
  _BOOL8 result;

  result = sub_216B71174(*(_QWORD *)(a1 + 24) + 24 * (*(_DWORD *)(a1 + 32) - 1), 2);
  if (result)
    return !sub_216B9E778(a1);
  return result;
}

BOOL sub_216B9EF1C(uint64_t a1, int a2, int a3, int a4, _DWORD *a5)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  _BOOL8 result;
  int v12;
  int v13;

  v12 = a3;
  v13 = a2;
  v7 = sub_216B6064C(&v13);
  v8 = sub_216B6064C(&v12);
  v9 = v7 - v8;
  result = v7 >= v8 && v7 < v8 + a4;
  if (a5)
  {
    if (result)
      *a5 = v9;
  }
  return result;
}

uint64_t sub_216B9EF80(uint64_t a1, unsigned int a2, unsigned int **a3, unint64_t a4)
{
  int v8;
  unsigned int *v9;
  unint64_t v10;
  _BOOL4 v11;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  unsigned int *i;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;

  v8 = sub_216B1E4E0(*a3);
  v24 = v8;
  v9 = *a3;
  v10 = (unint64_t)(*a3 + 6);
  if (v10 < a4)
  {
    while (1)
    {
      v10 = (unint64_t)(v9 + 6);
      v23 = sub_216B1E4E0(v9 + 6);
      v11 = sub_216B4F6FC(&v24);
      if (v11 != sub_216B4F6FC(&v23))
        break;
      v22 = 0;
      if (!sub_216B9F16C(a1, v24, v23, &v22) || v22 >= 0x33)
      {
        v10 = (unint64_t)(v9 + 6);
        break;
      }
      v24 = v23;
      v12 = v9 + 6;
      v13 = v9 + 12;
      v9 += 6;
      if ((unint64_t)v13 >= a4)
      {
        v10 = (unint64_t)(v12 + 6);
        v9 = v12;
        break;
      }
    }
  }
  v23 = 0;
  v14 = sub_216B1E4E0(v9);
  sub_216B9F16C(a1, v8, v14, &v23);
  v15 = v23;
  v16 = sub_216B693F8((uint64_t)v9);
  result = sub_216B62454(a1, v8, a2, v16 + v15);
  v22 = result;
  for (i = *a3; (unint64_t)i < v10; *a3 = i)
  {
    v21 = 0;
    v19 = sub_216B1E4E0(i);
    sub_216B9F16C(a1, v8, v19, &v21);
    v20 = sub_216B62D74(&v22, v21);
    result = (uint64_t)sub_216B2A7D8(i, v20);
    i = *a3 + 6;
  }
  return result;
}

uint64_t sub_216B9F100(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;

  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFE | sub_216B7164C(a2);
  result = sub_216B75974(a2);
  if ((_DWORD)result)
    v5 = 2;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFD | v5;
  return result;
}

BOOL sub_216B9F15C(__int16 a1)
{
  return (a1 & 0xFFFE) == 6;
}

uint64_t sub_216B9F16C(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  v6 = sub_216B6064C(&v11);
  v7 = sub_216B6064C(&v10);
  v8 = (v6 < *(_DWORD *)(a1 + 500)) ^ (v7 >= *(_DWORD *)(a1 + 500));
  if (a4 && (_DWORD)v8)
    *a4 = v7 - v6;
  return v8;
}

uint64_t sub_216B9F1E0(uint64_t a1)
{
  return sub_216B66D4C(a1, 0x80u);
}

uint64_t sub_216B9F1E8()
{
  uint64_t (*v0)(_QWORD);
  uint64_t (*v1)(_QWORD);
  _BYTE *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v0 = off_254E4ABD0;
  if ((*(_BYTE *)off_254E4ABD0(&off_254E4ABD0) & 1) == 0)
  {
    v8 = (_QWORD *)sub_216B1D1D4(136);
    sub_216B39B60(v8);
    v9 = (void *)off_254E4ABB8();
    sub_216B27D7C((uint64_t)v9, (uint64_t)v8);
    _tlv_atexit((void (__cdecl *)(void *))sub_216B9F378, v9);
    *(_BYTE *)v0(&off_254E4ABD0) = 1;
  }
  v1 = off_254E4AC00;
  if ((*(_BYTE *)off_254E4AC00(&off_254E4AC00) & 1) == 0)
  {
    v10 = sub_216B1D1D4(32);
    v11 = sub_216B1E3F4(0x52uLL);
    v12 = off_254E4ABB8();
    v14 = sub_216B25CA8(v12, v13);
    sub_216B9F37C(v10, v11, v14);
    v15 = (void *)off_254E4ABE8(&off_254E4ABE8);
    sub_216B27D7C((uint64_t)v15, v10);
    _tlv_atexit((void (__cdecl *)(void *))sub_216B9F380, v15);
    *(_BYTE *)v1(&off_254E4AC00) = 1;
  }
  v2 = (_BYTE *)off_254E4AC18();
  v3 = *v2;
  v4 = off_254E4ABE8(&off_254E4ABE8);
  result = sub_216B25CA8(v4, v5);
  if (v3)
  {
    sub_216B9F384(result);
    *v2 = 0;
    return sub_216B25CA8(v4, v7);
  }
  return result;
}

_WORD *sub_216B9F384(uint64_t a1)
{
  _WORD *result;
  uint64_t v3[2];
  uint64_t v4[2];
  uint64_t v5[2];
  uint64_t v6[2];
  uint64_t v7[2];
  uint64_t v8[2];
  uint64_t v9[2];
  uint64_t v10[2];
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18[2];
  uint64_t v19[2];
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  uint64_t v25[2];
  uint64_t v26[2];
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  uint64_t v30[2];
  uint64_t v31[2];
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[2];
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  uint64_t v42[2];
  uint64_t v43[2];
  uint64_t v44[2];
  uint64_t v45[2];
  uint64_t v46[2];
  uint64_t v47[2];
  uint64_t v48[2];
  uint64_t v49[2];
  uint64_t v50[2];
  uint64_t v51[2];
  uint64_t v52[2];
  uint64_t v53[2];
  uint64_t v54[2];
  uint64_t v55[2];
  uint64_t v56[2];
  uint64_t v57[2];
  uint64_t v58[2];
  uint64_t v59[2];
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63[2];
  uint64_t v64[2];
  uint64_t v65[2];
  uint64_t v66[2];
  uint64_t v67[2];
  uint64_t v68[2];
  uint64_t v69[2];
  uint64_t v70[2];
  uint64_t v71[2];
  uint64_t v72[2];
  uint64_t v73[2];
  uint64_t v74[2];
  uint64_t v75[2];
  uint64_t v76[2];
  uint64_t v77[2];
  uint64_t v78[2];
  uint64_t v79[2];
  uint64_t v80[2];
  uint64_t v81[2];

  sub_216B1E678((int)v81, "ci_outColorF");
  *(_WORD *)sub_216BA0200(a1, v81[0], v81[1]) = 1;
  sub_216B1E678((int)v80, "ci_outColorH");
  *(_WORD *)sub_216BA0200(a1, v80[0], v80[1]) = 2;
  sub_216B1E678((int)v79, "radians");
  *(_WORD *)sub_216BA0200(a1, v79[0], v79[1]) = 3;
  sub_216B1E678((int)v78, "degrees");
  *(_WORD *)sub_216BA0200(a1, v78[0], v78[1]) = 4;
  sub_216B1E678((int)v77, "sin");
  *(_WORD *)sub_216BA0200(a1, v77[0], v77[1]) = 5;
  sub_216B1E678((int)v76, "cos");
  *(_WORD *)sub_216BA0200(a1, v76[0], v76[1]) = 6;
  sub_216B1E678((int)v75, "tan");
  *(_WORD *)sub_216BA0200(a1, v75[0], v75[1]) = 7;
  sub_216B1E678((int)v74, "asin");
  *(_WORD *)sub_216BA0200(a1, v74[0], v74[1]) = 8;
  sub_216B1E678((int)v73, "acos");
  *(_WORD *)sub_216BA0200(a1, v73[0], v73[1]) = 9;
  sub_216B1E678((int)v72, "atan");
  *(_WORD *)sub_216BA0200(a1, v72[0], v72[1]) = 10;
  sub_216B1E678((int)v71, "sinh");
  *(_WORD *)sub_216BA0200(a1, v71[0], v71[1]) = 12;
  sub_216B1E678((int)v70, "cosh");
  *(_WORD *)sub_216BA0200(a1, v70[0], v70[1]) = 13;
  sub_216B1E678((int)v69, "tanh");
  *(_WORD *)sub_216BA0200(a1, v69[0], v69[1]) = 14;
  sub_216B1E678((int)v68, "asinh");
  *(_WORD *)sub_216BA0200(a1, v68[0], v68[1]) = 15;
  sub_216B1E678((int)v67, "acosh");
  *(_WORD *)sub_216BA0200(a1, v67[0], v67[1]) = 16;
  sub_216B1E678((int)v66, "atanh");
  *(_WORD *)sub_216BA0200(a1, v66[0], v66[1]) = 17;
  sub_216B1E678((int)v65, "pow");
  *(_WORD *)sub_216BA0200(a1, v65[0], v65[1]) = 18;
  sub_216B1E678((int)v64, "exp");
  *(_WORD *)sub_216BA0200(a1, v64[0], v64[1]) = 19;
  sub_216B1E678((int)v63, "log");
  *(_WORD *)sub_216BA0200(a1, v63[0], v63[1]) = 20;
  sub_216B1E678((int)v62, "exp2");
  *(_WORD *)sub_216BA0200(a1, v62[0], v62[1]) = 21;
  sub_216B1E678((int)v61, "log2");
  *(_WORD *)sub_216BA0200(a1, v61[0], v61[1]) = 22;
  sub_216B1E678((int)v60, "sqrt");
  *(_WORD *)sub_216BA0200(a1, v60[0], v60[1]) = 23;
  sub_216B1E678((int)v59, "inversesqrt");
  *(_WORD *)sub_216BA0200(a1, v59[0], v59[1]) = 24;
  sub_216B1E678((int)v58, "abs");
  *(_WORD *)sub_216BA0200(a1, v58[0], v58[1]) = 25;
  sub_216B1E678((int)v57, "sign");
  *(_WORD *)sub_216BA0200(a1, v57[0], v57[1]) = 26;
  sub_216B1E678((int)v56, "floor");
  *(_WORD *)sub_216BA0200(a1, v56[0], v56[1]) = 27;
  sub_216B1E678((int)v55, "trunc");
  *(_WORD *)sub_216BA0200(a1, v55[0], v55[1]) = 28;
  sub_216B1E678((int)v54, "round");
  *(_WORD *)sub_216BA0200(a1, v54[0], v54[1]) = 29;
  sub_216B1E678((int)v53, "roundEven");
  *(_WORD *)sub_216BA0200(a1, v53[0], v53[1]) = 30;
  sub_216B1E678((int)v52, "ceil");
  *(_WORD *)sub_216BA0200(a1, v52[0], v52[1]) = 31;
  sub_216B1E678((int)v51, "fract");
  *(_WORD *)sub_216BA0200(a1, v51[0], v51[1]) = 32;
  sub_216B1E678((int)v50, "mod");
  *(_WORD *)sub_216BA0200(a1, v50[0], v50[1]) = 33;
  sub_216B1E678((int)v49, "modf");
  *(_WORD *)sub_216BA0200(a1, v49[0], v49[1]) = 34;
  sub_216B1E678((int)v48, "min");
  *(_WORD *)sub_216BA0200(a1, v48[0], v48[1]) = 35;
  sub_216B1E678((int)v47, "max");
  *(_WORD *)sub_216BA0200(a1, v47[0], v47[1]) = 36;
  sub_216B1E678((int)v46, "clamp");
  *(_WORD *)sub_216BA0200(a1, v46[0], v46[1]) = 37;
  sub_216B1E678((int)v45, "mix");
  *(_WORD *)sub_216BA0200(a1, v45[0], v45[1]) = 38;
  sub_216B1E678((int)v44, "step");
  *(_WORD *)sub_216BA0200(a1, v44[0], v44[1]) = 40;
  sub_216B1E678((int)v43, "smoothstep");
  *(_WORD *)sub_216BA0200(a1, v43[0], v43[1]) = 41;
  sub_216B1E678((int)v42, "isnan");
  *(_WORD *)sub_216BA0200(a1, v42[0], v42[1]) = 42;
  sub_216B1E678((int)v41, "isinf");
  *(_WORD *)sub_216BA0200(a1, v41[0], v41[1]) = 43;
  sub_216B1E678((int)v40, "floatBitsToInt");
  *(_WORD *)sub_216BA0200(a1, v40[0], v40[1]) = 44;
  sub_216B1E678((int)v39, "floatBitsToUint");
  *(_WORD *)sub_216BA0200(a1, v39[0], v39[1]) = 45;
  sub_216B1E678((int)v38, "intBitsToFloat");
  *(_WORD *)sub_216BA0200(a1, v38[0], v38[1]) = 46;
  sub_216B1E678((int)v37, "uintBitsToFloat");
  *(_WORD *)sub_216BA0200(a1, v37[0], v37[1]) = 47;
  sub_216B1E678((int)v36, "packSnorm2x16");
  *(_WORD *)sub_216BA0200(a1, v36[0], v36[1]) = 48;
  sub_216B1E678((int)v35, "unpackSnorm2x16");
  *(_WORD *)sub_216BA0200(a1, v35[0], v35[1]) = 49;
  sub_216B1E678((int)v34, "packUnorm2x16");
  *(_WORD *)sub_216BA0200(a1, v34[0], v34[1]) = 50;
  sub_216B1E678((int)v33, "unpackUnorm2x16");
  *(_WORD *)sub_216BA0200(a1, v33[0], v33[1]) = 51;
  sub_216B1E678((int)v32, "packHalf2x16");
  *(_WORD *)sub_216BA0200(a1, v32[0], v32[1]) = 52;
  sub_216B1E678((int)v31, "unpackHalf2x16");
  *(_WORD *)sub_216BA0200(a1, v31[0], v31[1]) = 53;
  sub_216B1E678((int)v30, "length");
  *(_WORD *)sub_216BA0200(a1, v30[0], v30[1]) = 54;
  sub_216B1E678((int)v29, "distance");
  *(_WORD *)sub_216BA0200(a1, v29[0], v29[1]) = 55;
  sub_216B1E678((int)v28, "dot");
  *(_WORD *)sub_216BA0200(a1, v28[0], v28[1]) = 56;
  sub_216B1E678((int)v27, "cross");
  *(_WORD *)sub_216BA0200(a1, v27[0], v27[1]) = 57;
  sub_216B1E678((int)v26, "normalize");
  *(_WORD *)sub_216BA0200(a1, v26[0], v26[1]) = 58;
  sub_216B1E678((int)v25, "faceforward");
  *(_WORD *)sub_216BA0200(a1, v25[0], v25[1]) = 59;
  sub_216B1E678((int)v24, "reflect");
  *(_WORD *)sub_216BA0200(a1, v24[0], v24[1]) = 60;
  sub_216B1E678((int)v23, "refract");
  *(_WORD *)sub_216BA0200(a1, v23[0], v23[1]) = 61;
  sub_216B1E678((int)v22, "matrixCompMult");
  *(_WORD *)sub_216BA0200(a1, v22[0], v22[1]) = 62;
  sub_216B1E678((int)v21, "outerProduct");
  *(_WORD *)sub_216BA0200(a1, v21[0], v21[1]) = 63;
  sub_216B1E678((int)v20, "transpose");
  *(_WORD *)sub_216BA0200(a1, v20[0], v20[1]) = 64;
  sub_216B1E678((int)v19, "determinant");
  *(_WORD *)sub_216BA0200(a1, v19[0], v19[1]) = 65;
  sub_216B1E678((int)v18, "inverse");
  *(_WORD *)sub_216BA0200(a1, v18[0], v18[1]) = 66;
  sub_216B1E678((int)v17, "lessThan");
  *(_WORD *)sub_216BA0200(a1, v17[0], v17[1]) = 67;
  sub_216B1E678((int)v16, "lessThanEqual");
  *(_WORD *)sub_216BA0200(a1, v16[0], v16[1]) = 68;
  sub_216B1E678((int)v15, "greaterThan");
  *(_WORD *)sub_216BA0200(a1, v15[0], v15[1]) = 69;
  sub_216B1E678((int)v14, "greaterThanEqual");
  *(_WORD *)sub_216BA0200(a1, v14[0], v14[1]) = 70;
  sub_216B1E678((int)v13, "equal");
  *(_WORD *)sub_216BA0200(a1, v13[0], v13[1]) = 71;
  sub_216B1E678((int)v12, "notEqual");
  *(_WORD *)sub_216BA0200(a1, v12[0], v12[1]) = 72;
  sub_216B1E678((int)v11, "any");
  *(_WORD *)sub_216BA0200(a1, v11[0], v11[1]) = 73;
  sub_216B1E678((int)v10, "all");
  *(_WORD *)sub_216BA0200(a1, v10[0], v10[1]) = 74;
  sub_216B1E678((int)v9, "not");
  *(_WORD *)sub_216BA0200(a1, v9[0], v9[1]) = 75;
  sub_216B1E678((int)v8, "$assert");
  *(_WORD *)sub_216BA0200(a1, v8[0], v8[1]) = 76;
  sub_216B1E678((int)v7, "sample");
  *(_WORD *)sub_216BA0200(a1, v7[0], v7[1]) = 77;
  sub_216B1E678((int)v6, "samplerTransform");
  *(_WORD *)sub_216BA0200(a1, v6[0], v6[1]) = 78;
  sub_216B1E678((int)v5, "samplerExtent");
  *(_WORD *)sub_216BA0200(a1, v5[0], v5[1]) = 79;
  sub_216B1E678((int)v4, "samplerCoord");
  *(_WORD *)sub_216BA0200(a1, v4[0], v4[1]) = 80;
  sub_216B1E678((int)v3, "texture2D");
  result = (_WORD *)sub_216BA0200(a1, v3[0], v3[1]);
  *result = 81;
  return result;
}

void sub_216B9FF48()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_0();
  j__free(v0);
}

unsigned int *sub_216B9FF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  unsigned int *v8;

  v6 = sub_216B9FFC0(*(_QWORD **)(a1 + 24), a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = sub_216B5E150(*(_QWORD *)(a1 + 16), a2, a3);
  sub_216B4ABA8(v8, v7);
  return v8;
}

uint64_t sub_216B9FFC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v6 = sub_216B5F200(a1, a2, a3);
  v5 = sub_216B5DEE8((uint64_t)a1);
  result = sub_216B3760C(&v6, &v5);
  if ((_DWORD)result)
    return *(unsigned __int16 *)(sub_216B3C9C8((uint64_t)&v6) + 4);
  return result;
}

uint64_t sub_216BA0014(uint64_t a1)
{
  sub_216BA003C(a1, 0);
  return a1;
}

void sub_216BA003C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216BA0098(v7, v4);
  }
}

void sub_216BA0098(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B3A034(a2);
    j__free(v2);
  }
}

uint64_t sub_216BA00B8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = sub_216B3125C(a1, a2, 8);
  *(_QWORD *)(result + 24) = a3;
  return result;
}

uint64_t sub_216BA00E0(uint64_t a1)
{
  sub_216BA0108(a1, 0);
  return a1;
}

void sub_216BA0108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216BA0164(v7, v4);
  }
}

void sub_216BA0164(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216BA0184(a2);
    j__free(v2);
  }
}

uint64_t sub_216BA0188(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B65724(v5, *(_QWORD *)(a1 + 24));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_216BA0200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_216BA0214(a1, a2, a3);
  return sub_216B5F25C(v3);
}

uint64_t sub_216BA0214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BA021C(a1, a2, a3, 0);
}

uint64_t sub_216BA021C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v5;
  _BYTE v7[24];
  _QWORD v8[2];
  __int16 v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216BA035C((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216BA0270(a1, (uint64_t)v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216BA0270(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216BA036C(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(uint64_t **)(a1 + 24), *(unsigned __int16 *)(a2 + 16));
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216BA035C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216BA0424(a3, a1, a2);
}

uint64_t sub_216BA036C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v13);
  v7 = sub_216B34088();
  v8 = sub_216B2663C(a3, (v6 + 9), v7);
  v9 = sub_216BA03FC(v8, v6, a4);
  v10 = (void *)sub_216B3DBD0(v9);
  v11 = (const void *)sub_216B1E600((uint64_t)v13);
  memcpy(v10, v11, v6);
  *((_BYTE *)v10 + v6) = 0;
  return v8;
}

_DWORD *sub_216BA0400(_DWORD *a1, int a2, __int16 a3)
{
  _DWORD *result;

  result = sub_216B2A7D8(a1, a2);
  *((_WORD *)result + 2) = a3;
  return result;
}

__n128 sub_216BA0428(__n128 *a1, __n128 *a2, unsigned __int16 *a3)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u16[0] = *a3;
  return result;
}

uint64_t sub_216BA043C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;

  v4 = sub_216BA0478(a2, a3);
  return sub_216BA046C(a1, v4);
}

uint64_t sub_216BA046C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 4 * a2;
}

uint64_t sub_216BA0478(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  _QWORD v365[3];

  v2 = sub_216B32854(v365, a1, a2);
  v364 = 1;
  v3 = sub_216B4A5C0((uint64_t)v2, "GL_ARB_shader_objects", (uint64_t)&v364);
  v363 = 2;
  v4 = sub_216B4A31C(v3, (uint64_t)"GL_ARB_vertex_shader", (uint64_t)&v363);
  v362 = 3;
  v5 = sub_216B4A54C(v4, "GL_ARB_fragment_shader", (uint64_t)&v362);
  v361 = 4;
  v6 = sub_216B4A884(v5, "GL_ARB_shading_language_100", (uint64_t)&v361);
  v360 = 5;
  v7 = sub_216B84DDC(v6, "GL_ARB_fragment_program_shadow", (uint64_t)&v360);
  v359 = 6;
  v8 = sub_216B4A6A8(v7, "GL_ARB_draw_buffers", (uint64_t)&v359);
  v358 = 7;
  v9 = sub_216B4A634(v8, "GL_ARB_texture_rectangle", (uint64_t)&v358);
  v357 = 8;
  v10 = sub_216B4A228(v9, (uint64_t)"GL_ARB_depth_buffer_float", (uint64_t)&v357);
  v356 = 9;
  v11 = sub_216B4A5C0(v10, "GL_ARB_draw_instanced", (uint64_t)&v356);
  v355 = 10;
  v12 = sub_216B4A2A8(v11, "GL_ARB_framebuffer_sRGB", (uint64_t)&v355);
  v354 = 11;
  v13 = sub_216B4A2A8(v12, "GL_ARB_geometry_shader4", (uint64_t)&v354);
  v353 = 12;
  v14 = sub_216BA2724(v13, "GL_ARB_texture_compression_rgtc", (uint64_t)&v353);
  v352 = 13;
  v15 = sub_216B4A79C(v14, (uint64_t)"GL_ARB_uniform_buffer_object", (uint64_t)&v352);
  v351 = 14;
  v16 = sub_216B4A228(v15, (uint64_t)"GL_ARB_shader_texture_lod", (uint64_t)&v351);
  v350 = 15;
  v17 = sub_216B98BC0(v16, "GL_ARB_fragment_coord_conventions", (uint64_t)&v350);
  v349 = 16;
  v18 = sub_216B4A2A8(v17, "GL_ARB_provoking_vertex", (uint64_t)&v349);
  v348 = 17;
  v19 = sub_216B4A71C(v18, (uint64_t)"GL_ARB_texture_multisample", (uint64_t)&v348);
  v347 = 18;
  v20 = sub_216B4A634(v19, "GL_ARB_vertex_array_bgra", (uint64_t)&v347);
  v346 = 19;
  v21 = sub_216B4A5C0(v20, "GL_ARB_sample_shading", (uint64_t)&v346);
  v345 = 20;
  v22 = sub_216B4A9D4(v21, "GL_ARB_texture_cube_map_array", (uint64_t)&v345);
  v344 = 21;
  v23 = sub_216B4A5C0(v22, "GL_ARB_texture_gather", (uint64_t)&v344);
  v343 = 22;
  v24 = sub_216B4A634(v23, "GL_ARB_texture_query_lod", (uint64_t)&v343);
  v342 = 23;
  v25 = sub_216BA2724(v24, "GL_ARB_shading_language_include", (uint64_t)&v342);
  v341 = 24;
  v26 = sub_216BA2724(v25, "GL_ARB_explicit_attrib_location", (uint64_t)&v341);
  v340 = 25;
  v27 = sub_216B4A71C(v26, (uint64_t)"GL_ARB_shader_bit_encoding", (uint64_t)&v340);
  v339 = 26;
  v28 = sub_216B4A1B4(v27, (uint64_t)"GL_ARB_gpu_shader5", (uint64_t)&v339);
  v338 = 27;
  v29 = sub_216B4A54C(v28, "GL_ARB_gpu_shader_fp64", (uint64_t)&v338);
  v337 = 28;
  v30 = sub_216B4A634(v29, "GL_ARB_shader_subroutine", (uint64_t)&v337);
  v336 = 29;
  v31 = sub_216B4A71C(v30, (uint64_t)"GL_ARB_tessellation_shader", (uint64_t)&v336);
  v335 = 30;
  v32 = sub_216B4A71C(v31, (uint64_t)"GL_ARB_transform_feedback2", (uint64_t)&v335);
  v334 = 31;
  v33 = sub_216B4A634(v32, "GL_ARB_ES2_compatibility", (uint64_t)&v334);
  v333 = 32;
  v34 = sub_216B4A228(v33, (uint64_t)"GL_ARB_get_program_binary", (uint64_t)&v333);
  v332 = 33;
  v35 = sub_216B84DDC(v34, "GL_ARB_separate_shader_objects", (uint64_t)&v332);
  v331 = 34;
  v36 = sub_216B4A2A8(v35, "GL_ARB_shader_precision", (uint64_t)&v331);
  v330 = 35;
  v37 = sub_216B4A71C(v36, (uint64_t)"GL_ARB_vertex_attrib_64bit", (uint64_t)&v330);
  v329 = 36;
  v38 = sub_216B4A5C0(v37, "GL_ARB_viewport_array", (uint64_t)&v329);
  v328 = 37;
  v39 = sub_216B4A470(v38, (uint64_t)"GL_ARB_robustness", (uint64_t)&v328);
  v327 = 38;
  v40 = sub_216B4A79C(v39, (uint64_t)"GL_ARB_shader_stencil_export", (uint64_t)&v327);
  v326 = 39;
  v41 = sub_216BA2724(v40, "GL_ARB_shading_language_420pack", (uint64_t)&v326);
  v325 = 40;
  v42 = sub_216B4A228(v41, (uint64_t)"GL_ARB_conservative_depth", (uint64_t)&v325);
  v324 = 41;
  v43 = sub_216B4A9D4(v42, "GL_ARB_shader_atomic_counters", (uint64_t)&v324);
  v323 = 42;
  v44 = sub_216B84DDC(v43, "GL_ARB_shader_image_load_store", (uint64_t)&v323);
  v322 = 43;
  v45 = sub_216BA2724(v44, "GL_ARB_shading_language_packing", (uint64_t)&v322);
  v321 = 44;
  v46 = sub_216B4A2A8(v45, "GL_ARB_arrays_of_arrays", (uint64_t)&v321);
  v320 = 45;
  v47 = sub_216B4A5C0(v46, "GL_ARB_compute_shader", (uint64_t)&v320);
  v319 = 46;
  v48 = sub_216B4A634(v47, "GL_ARB_ES3_compatibility", (uint64_t)&v319);
  v318 = 47;
  v49 = sub_216B98CB0(v48, "GL_ARB_explicit_uniform_location", (uint64_t)&v318);
  v317 = 48;
  v50 = sub_216B84DDC(v49, "GL_ARB_fragment_layer_viewport", (uint64_t)&v317);
  v316 = 49;
  v51 = sub_216B4A228(v50, (uint64_t)"GL_ARB_invalidate_subdata", (uint64_t)&v316);
  v315 = 50;
  v52 = sub_216B98C28(v51, "GL_ARB_robust_buffer_access_behavior", (uint64_t)&v315);
  v314 = 51;
  v53 = sub_216B4A634(v52, "GL_ARB_shader_image_size", (uint64_t)&v314);
  v313 = 52;
  v54 = sub_216B4A4E4(v53, "GL_ARB_shader_storage_buffer_object", (uint64_t)&v313);
  v312 = 53;
  v55 = sub_216B4A634(v54, "GL_ARB_stencil_texturing", (uint64_t)&v312);
  v311 = 54;
  v56 = sub_216B4A884(v55, "GL_ARB_texture_query_levels", (uint64_t)&v311);
  v310 = 55;
  v57 = sub_216B4A2A8(v56, "GL_ARB_enhanced_layouts", (uint64_t)&v310);
  v309 = 56;
  v58 = sub_216B4A2A8(v57, "GL_ARB_texture_stencil8", (uint64_t)&v309);
  v308 = 57;
  v59 = sub_216B4A2A8(v58, "GL_ARB_bindless_texture", (uint64_t)&v308);
  v307 = 58;
  v60 = sub_216B4A96C(v59, "GL_ARB_compute_variable_group_size", (uint64_t)&v307);
  v306 = 59;
  v61 = sub_216B4A9D4(v60, "GL_ARB_shader_draw_parameters", (uint64_t)&v306);
  v305 = 60;
  v62 = sub_216B4A634(v61, "GL_ARB_shader_group_vote", (uint64_t)&v305);
  v304 = 61;
  v63 = sub_216B4A71C(v62, (uint64_t)"GL_ARB_ES3_1_compatibility", (uint64_t)&v304);
  v303 = 62;
  v64 = sub_216B4A31C(v63, (uint64_t)"GL_ARB_cull_distance", (uint64_t)&v303);
  v302 = 63;
  v65 = sub_216B4A228(v64, (uint64_t)"GL_ARB_derivative_control", (uint64_t)&v302);
  v301 = 64;
  v66 = sub_216B4A4E4(v65, "GL_ARB_shader_texture_image_samples", (uint64_t)&v301);
  v300 = 65;
  v67 = sub_216B4A6A8(v66, "GL_EXT_texture_sRGB", (uint64_t)&v300);
  v299 = 66;
  v68 = sub_216B4A1B4(v67, (uint64_t)"GL_NV_gpu_program4", (uint64_t)&v299);
  v298 = 67;
  v69 = sub_216B4A2A8(v68, "GL_EXT_geometry_shader4", (uint64_t)&v298);
  v297 = 68;
  v70 = sub_216B4A1B4(v69, (uint64_t)"GL_EXT_gpu_shader4", (uint64_t)&v297);
  v296 = 69;
  v71 = sub_216B4A5C0(v70, "GL_EXT_draw_instanced", (uint64_t)&v296);
  v295 = 70;
  v72 = sub_216B4A6A8(v71, "GL_EXT_packed_float", (uint64_t)&v295);
  v294 = 71;
  v73 = sub_216B4A31C(v72, (uint64_t)"GL_EXT_texture_array", (uint64_t)&v294);
  v293 = 72;
  v74 = sub_216BA2724(v73, "GL_EXT_texture_compression_latc", (uint64_t)&v293);
  v292 = 73;
  v75 = sub_216BA2724(v74, "GL_EXT_texture_compression_rgtc", (uint64_t)&v292);
  v291 = 74;
  v76 = sub_216B84DDC(v75, "GL_EXT_texture_shared_exponent", (uint64_t)&v291);
  v290 = 75;
  v77 = sub_216B4A634(v76, "GL_NV_depth_buffer_float", (uint64_t)&v290);
  v289 = 76;
  v78 = sub_216B4A2A8(v77, "GL_EXT_framebuffer_sRGB", (uint64_t)&v289);
  v288 = 77;
  v79 = sub_216B4A634(v78, "GL_NV_transform_feedback", (uint64_t)&v288);
  v287 = 78;
  v80 = sub_216B4A2A8(v79, "GL_EXT_bindable_uniform", (uint64_t)&v287);
  v286 = 79;
  v81 = sub_216B4A228(v80, (uint64_t)"GL_EXT_transform_feedback", (uint64_t)&v286);
  v285 = 80;
  v82 = sub_216B4A634(v81, "GL_EXT_vertex_array_bgra", (uint64_t)&v285);
  v284 = 81;
  v83 = sub_216B4A71C(v82, (uint64_t)"GL_NV_explicit_multisample", (uint64_t)&v284);
  v283 = 82;
  v84 = sub_216B346C4(v83, "GL_ATI_meminfo", (uint64_t)&v283);
  v282 = 83;
  v85 = sub_216B4A2A8(v84, "GL_AMD_texture_texture4", (uint64_t)&v282);
  v281 = 84;
  v86 = sub_216B98CB0(v85, "GL_AMD_vertex_shader_tessellator", (uint64_t)&v281);
  v280 = 85;
  v87 = sub_216B4A2A8(v86, "GL_EXT_provoking_vertex", (uint64_t)&v280);
  v279 = 86;
  v88 = sub_216B4A31C(v87, (uint64_t)"GL_EXT_texture_snorm", (uint64_t)&v279);
  v278 = 87;
  v89 = sub_216B84DDC(v88, "GL_EXT_separate_shader_objects", (uint64_t)&v278);
  v277 = 88;
  v90 = sub_216B4A634(v89, "GL_NV_shader_buffer_load", (uint64_t)&v277);
  v276 = 89;
  v91 = sub_216B4A79C(v90, (uint64_t)"GL_AMD_shader_stencil_export", (uint64_t)&v276);
  v275 = 90;
  v92 = sub_216B4A228(v91, (uint64_t)"GL_AMD_conservative_depth", (uint64_t)&v275);
  v274 = 91;
  v93 = sub_216B84DDC(v92, "GL_EXT_shader_image_load_store", (uint64_t)&v274);
  v273 = 92;
  v94 = sub_216B4A71C(v93, (uint64_t)"GL_EXT_vertex_attrib_64bit", (uint64_t)&v273);
  v272 = 93;
  v95 = sub_216B4A1B4(v94, (uint64_t)"GL_NV_gpu_program5", (uint64_t)&v272);
  v271 = 94;
  v96 = sub_216B4A470(v95, (uint64_t)"GL_NV_gpu_shader5", (uint64_t)&v271);
  v270 = 95;
  v97 = sub_216B4A228(v96, (uint64_t)"GL_NV_shader_buffer_store", (uint64_t)&v270);
  v269 = 96;
  v98 = sub_216B4A884(v97, "GL_NV_tessellation_program5", (uint64_t)&v269);
  v268 = 97;
  v99 = sub_216B4A6A8(v98, "GL_NV_vdpau_interop", (uint64_t)&v268);
  v267 = 98;
  v100 = sub_216B4A31C(v99, (uint64_t)"GL_NV_path_rendering", (uint64_t)&v267);
  v266 = 99;
  v101 = sub_216B4A4E4(v100, "GL_AMD_vertex_shader_viewport_index", (uint64_t)&v266);
  v265 = 100;
  v102 = sub_216B4A71C(v101, (uint64_t)"GL_AMD_vertex_shader_layer", (uint64_t)&v265);
  v264 = 101;
  v103 = sub_216B4A54C(v102, "GL_NV_bindless_texture", (uint64_t)&v264);
  v263 = 102;
  v104 = sub_216B4A228(v103, (uint64_t)"GL_NV_shader_atomic_float", (uint64_t)&v263);
  v262 = 103;
  v105 = sub_216B4A5C0(v104, "GL_AMD_sparse_texture", (uint64_t)&v262);
  v261 = 104;
  v106 = sub_216B4A79C(v105, (uint64_t)"GL_AMD_shader_trinary_minmax", (uint64_t)&v261);
  v260 = 105;
  v107 = sub_216B4A31C(v106, (uint64_t)"GL_INTEL_map_texture", (uint64_t)&v260);
  v259 = 106;
  v108 = sub_216B4A228(v107, (uint64_t)"GL_EXT_shader_integer_mix", (uint64_t)&v259);
  v258 = 107;
  v109 = sub_216B98BC0(v108, "GL_INTEL_fragment_shader_ordering", (uint64_t)&v258);
  v257 = 108;
  v110 = sub_216B4A96C(v109, "GL_AMD_shader_stencil_value_export", (uint64_t)&v257);
  v256 = 109;
  v111 = sub_216B4A228(v110, (uint64_t)"GL_NV_shader_thread_group", (uint64_t)&v256);
  v255 = 110;
  v112 = sub_216B4A884(v111, "GL_NV_shader_thread_shuffle", (uint64_t)&v255);
  v254 = 111;
  v113 = sub_216B4A96C(v112, "GL_EXT_shader_image_load_formatted", (uint64_t)&v254);
  v253 = 112;
  v114 = sub_216B4A71C(v113, (uint64_t)"GL_AMD_transform_feedback4", (uint64_t)&v253);
  v252 = 113;
  v115 = sub_216B4A2A8(v114, "GL_AMD_gpu_shader_int64", (uint64_t)&v252);
  v251 = 114;
  v116 = sub_216B4A470(v115, (uint64_t)"GL_AMD_gcn_shader", (uint64_t)&v251);
  v250 = 115;
  v117 = sub_216B4A228(v116, (uint64_t)"GL_NV_shader_atomic_int64", (uint64_t)&v250);
  v249 = 116;
  v118 = sub_216B84DDC(v117, "GL_KHR_blend_equation_advanced", (uint64_t)&v249);
  v248 = 117;
  v119 = sub_216B4A71C(v118, (uint64_t)"GL_EXT_post_depth_coverage", (uint64_t)&v248);
  v247 = 118;
  v120 = sub_216B4A228(v119, (uint64_t)"GL_EXT_raster_multisample", (uint64_t)&v247);
  v246 = 119;
  v121 = sub_216B4A54C(v120, "GL_EXT_sparse_texture2", (uint64_t)&v246);
  v245 = 120;
  v122 = sub_216B4A228(v121, (uint64_t)"GL_NV_conservative_raster", (uint64_t)&v245);
  v244 = 121;
  v123 = sub_216B4A31C(v122, (uint64_t)"GL_NV_fill_rectangle", (uint64_t)&v244);
  v243 = 122;
  v124 = sub_216B98CB0(v123, "GL_NV_fragment_coverage_to_color", (uint64_t)&v243);
  v242 = 123;
  v125 = sub_216BA2724(v124, "GL_NV_fragment_shader_interlock", (uint64_t)&v242);
  v241 = 124;
  v126 = sub_216BA2724(v125, "GL_NV_framebuffer_mixed_samples", (uint64_t)&v241);
  v240 = 125;
  v127 = sub_216B98BC0(v126, "GL_NV_geometry_shader_passthrough", (uint64_t)&v240);
  v239 = 126;
  v128 = sub_216B98CB0(v127, "GL_NV_path_rendering_shared_edge", (uint64_t)&v239);
  v238 = 127;
  v129 = sub_216B4A54C(v128, "GL_NV_sample_locations", (uint64_t)&v238);
  v237 = 128;
  v130 = sub_216B4A4E4(v129, "GL_NV_sample_mask_override_coverage", (uint64_t)&v237);
  v236 = 129;
  v131 = sub_216BA2724(v130, "GL_NV_shader_atomic_fp16_vector", (uint64_t)&v236);
  v235 = 130;
  v132 = sub_216B4A470(v131, (uint64_t)"GL_OES_texture_3D", (uint64_t)&v235);
  v234 = 131;
  v133 = sub_216B4A884(v132, "GL_OES_standard_derivatives", (uint64_t)&v234);
  v233 = 132;
  v134 = sub_216B4A228(v133, (uint64_t)"GL_OES_get_program_binary", (uint64_t)&v233);
  v232 = 133;
  v135 = sub_216B4A71C(v134, (uint64_t)"GL_AMD_program_binary_Z400", (uint64_t)&v232);
  v231 = 134;
  v136 = sub_216B4A228(v135, (uint64_t)"GL_EXT_shader_texture_lod", (uint64_t)&v231);
  v230 = 135;
  v137 = sub_216B4A470(v136, (uint64_t)"GL_EXT_frag_depth", (uint64_t)&v230);
  v229 = 136;
  v138 = sub_216B4A228(v137, (uint64_t)"GL_OES_EGL_image_external", (uint64_t)&v229);
  v228 = 137;
  v139 = sub_216B4A1B4(v138, (uint64_t)"GL_NV_draw_buffers", (uint64_t)&v228);
  v227 = 138;
  v140 = sub_216B84DDC(v139, "GL_EXT_separate_shader_objects", (uint64_t)&v227);
  v226 = 139;
  v141 = sub_216B4A54C(v140, "GL_EXT_shadow_samplers", (uint64_t)&v226);
  v225 = 140;
  v142 = sub_216B4A96C(v141, "GL_NV_EGL_stream_consumer_external", (uint64_t)&v225);
  v224 = 141;
  v143 = sub_216B34334(v142, "GL_EXT_sRGB", (uint64_t)&v224);
  v223 = 142;
  v144 = sub_216B4A470(v143, (uint64_t)"GL_EXT_robustness", (uint64_t)&v223);
  v222 = 143;
  v145 = sub_216BA2724(v144, "GL_EXT_shader_framebuffer_fetch", (uint64_t)&v222);
  v221 = 144;
  v146 = sub_216B4A9D4(v145, "GL_EXT_multiview_draw_buffers", (uint64_t)&v221);
  v220 = 145;
  v147 = sub_216B4A6A8(v146, "GL_NV_texture_array", (uint64_t)&v220);
  v219 = 146;
  v148 = sub_216B4A31C(v147, (uint64_t)"GL_NV_draw_instanced", (uint64_t)&v219);
  v218 = 147;
  v149 = sub_216B4A884(v148, "GL_NV_shadow_samplers_array", (uint64_t)&v218);
  v217 = 148;
  v150 = sub_216B4A71C(v149, (uint64_t)"GL_NV_shadow_samplers_cube", (uint64_t)&v217);
  v216 = 149;
  v151 = sub_216B4A6A8(v150, "GL_EXT_draw_buffers", (uint64_t)&v216);
  v215 = 150;
  v152 = sub_216B4A470(v151, (uint64_t)"GL_EXT_pvrtc_sRGB", (uint64_t)&v215);
  v214 = 151;
  v153 = sub_216B4A5C0(v152, "GL_EXT_draw_instanced", (uint64_t)&v214);
  v213 = 152;
  v154 = sub_216B84DDC(v153, "GL_NV_explicit_attrib_location", (uint64_t)&v213);
  v212 = 153;
  v155 = sub_216B4A228(v154, (uint64_t)"GL_NV_non_square_matrices", (uint64_t)&v212);
  v211 = 154;
  v156 = sub_216B4A228(v155, (uint64_t)"GL_EXT_shader_integer_mix", (uint64_t)&v211);
  v210 = 155;
  v157 = sub_216BA2724(v156, "GL_ARM_shader_framebuffer_fetch", (uint64_t)&v210);
  v209 = 156;
  v158 = sub_216BA27A4(v157, "GL_ARM_shader_framebuffer_fetch_depth_stencil", (uint64_t)&v209);
  v208 = 157;
  v159 = sub_216B98BC0(v158, "GL_EXT_shader_pixel_local_storage", (uint64_t)&v208);
  v207 = 158;
  v160 = sub_216B84DDC(v159, "GL_KHR_blend_equation_advanced", (uint64_t)&v207);
  v206 = 159;
  v161 = sub_216B4A5C0(v160, "GL_OES_sample_shading", (uint64_t)&v206);
  v205 = 160;
  v162 = sub_216B4A2A8(v161, "GL_OES_sample_variables", (uint64_t)&v205);
  v204 = 161;
  v163 = sub_216B4A71C(v162, (uint64_t)"GL_OES_shader_image_atomic", (uint64_t)&v204);
  v203 = 162;
  v164 = sub_216BA280C(v163, "GL_OES_shader_multisample_interpolation", (uint64_t)&v203);
  v202 = 163;
  v165 = sub_216B4A2A8(v164, "GL_OES_texture_stencil8", (uint64_t)&v202);
  v201 = 164;
  v166 = sub_216BA2874(v165, "GL_OES_texture_storage_multisample_2d_array", (uint64_t)&v201);
  v200 = 165;
  v167 = sub_216B4A54C(v166, "GL_EXT_geometry_shader", (uint64_t)&v200);
  v199 = 166;
  v168 = sub_216B4A1B4(v167, (uint64_t)"GL_EXT_gpu_shader5", (uint64_t)&v199);
  v198 = 167;
  v169 = sub_216B4A96C(v168, "GL_EXT_shader_implicit_conversions", (uint64_t)&v198);
  v197 = 168;
  v170 = sub_216B4A2A8(v169, "GL_EXT_shader_io_blocks", (uint64_t)&v197);
  v196 = 169;
  v171 = sub_216B4A71C(v170, (uint64_t)"GL_EXT_tessellation_shader", (uint64_t)&v196);
  v195 = 170;
  v172 = sub_216B4A5C0(v171, "GL_EXT_texture_buffer", (uint64_t)&v195);
  v194 = 171;
  v173 = sub_216B4A9D4(v172, "GL_EXT_texture_cube_map_array", (uint64_t)&v194);
  v193 = 172;
  v174 = sub_216B4A6A8(v173, "GL_EXT_texture_view", (uint64_t)&v193);
  v192 = 173;
  v175 = sub_216B4A9D4(v174, "GL_EXT_primitive_bounding_box", (uint64_t)&v192);
  v191 = 174;
  v176 = sub_216BA2724(v175, "GL_ANDROID_extension_pack_es31a", (uint64_t)&v191);
  v190 = 175;
  v177 = sub_216B98C28(v176, "GL_KHR_robust_buffer_access_behavior", (uint64_t)&v190);
  v189 = 176;
  v178 = sub_216B4A470(v177, (uint64_t)"GL_KHR_robustness", (uint64_t)&v189);
  v188 = 177;
  v179 = sub_216B4A54C(v178, "GL_APPLE_clip_distance", (uint64_t)&v188);
  v187 = 178;
  v180 = sub_216B329A8(v179, (unsigned __int16 *)"all", (uint64_t)&v187);
  v186 = 179;
  v181 = sub_216B4A54C(v180, "GL_APPLE_sa_assertions", (uint64_t)&v186);
  v185 = 180;
  v182 = sub_216B4A634(v181, "FOSL_cruft_compatibility", (uint64_t)&v185);
  v184 = 0;
  return sub_216B32B50(v182, &v184);
}

uint64_t sub_216BA15A4(unsigned int a1)
{
  unsigned __int8 v1;
  unsigned int v3;
  int v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254E4BA30);
  if ((v1 & 1) == 0)
  {
    v3 = a1;
    v4 = __cxa_guard_acquire(&qword_254E4BA30);
    a1 = v3;
    if (v4)
    {
      sub_216B1E678((int)qword_254E4AEE0, &byte_216C19659);
      sub_216B1E678((int)&qword_254E4AEE0[2], "GL_ARB_shader_objects");
      sub_216B1E678((int)&qword_254E4AEE0[4], "GL_ARB_vertex_shader");
      sub_216B1E678((int)&qword_254E4AEE0[6], "GL_ARB_fragment_shader");
      sub_216B1E678((int)&qword_254E4AEE0[8], "GL_ARB_shading_language_100");
      sub_216B1E678((int)&qword_254E4AEE0[10], "GL_ARB_fragment_program_shadow");
      sub_216B1E678((int)&qword_254E4AEE0[12], "GL_ARB_draw_buffers");
      sub_216B1E678((int)&qword_254E4AEE0[14], "GL_ARB_texture_rectangle");
      sub_216B1E678((int)&qword_254E4AEE0[16], "GL_ARB_depth_buffer_float");
      sub_216B1E678((int)&qword_254E4AEE0[18], "GL_ARB_draw_instanced");
      sub_216B1E678((int)&qword_254E4AEE0[20], "GL_ARB_framebuffer_sRGB");
      sub_216B1E678((int)&qword_254E4AEE0[22], "GL_ARB_geometry_shader4");
      sub_216B1E678((int)&qword_254E4AEE0[24], "GL_ARB_texture_compression_rgtc");
      sub_216B1E678((int)&qword_254E4AEE0[26], "GL_ARB_uniform_buffer_object");
      sub_216B1E678((int)&qword_254E4AEE0[28], "GL_ARB_shader_texture_lod");
      sub_216B1E678((int)&qword_254E4AEE0[30], "GL_ARB_fragment_coord_conventions");
      sub_216B1E678((int)&qword_254E4AEE0[32], "GL_ARB_provoking_vertex");
      sub_216B1E678((int)&qword_254E4AEE0[34], "GL_ARB_texture_multisample");
      sub_216B1E678((int)&qword_254E4AEE0[36], "GL_ARB_vertex_array_bgra");
      sub_216B1E678((int)&qword_254E4AEE0[38], "GL_ARB_sample_shading");
      sub_216B1E678((int)&qword_254E4AEE0[40], "GL_ARB_texture_cube_map_array");
      sub_216B1E678((int)&qword_254E4AEE0[42], "GL_ARB_texture_gather");
      sub_216B1E678((int)&qword_254E4AEE0[44], "GL_ARB_texture_query_lod");
      sub_216B1E678((int)&qword_254E4AEE0[46], "GL_ARB_shading_language_include");
      sub_216B1E678((int)&qword_254E4AEE0[48], "GL_ARB_explicit_attrib_location");
      sub_216B1E678((int)&qword_254E4AEE0[50], "GL_ARB_shader_bit_encoding");
      sub_216B1E678((int)&qword_254E4AEE0[52], "GL_ARB_gpu_shader5");
      sub_216B1E678((int)&qword_254E4AEE0[54], "GL_ARB_gpu_shader_fp64");
      sub_216B1E678((int)&qword_254E4AEE0[56], "GL_ARB_shader_subroutine");
      sub_216B1E678((int)&qword_254E4AEE0[58], "GL_ARB_tessellation_shader");
      sub_216B1E678((int)&qword_254E4AEE0[60], "GL_ARB_transform_feedback2");
      sub_216B1E678((int)&qword_254E4AEE0[62], "GL_ARB_ES2_compatibility");
      sub_216B1E678((int)&qword_254E4AEE0[64], "GL_ARB_get_program_binary");
      sub_216B1E678((int)&qword_254E4AEE0[66], "GL_ARB_separate_shader_objects");
      sub_216B1E678((int)&qword_254E4AEE0[68], "GL_ARB_shader_precision");
      sub_216B1E678((int)&qword_254E4AEE0[70], "GL_ARB_vertex_attrib_64bit");
      sub_216B1E678((int)&qword_254E4AEE0[72], "GL_ARB_viewport_array");
      sub_216B1E678((int)&qword_254E4AEE0[74], "GL_ARB_robustness");
      sub_216B1E678((int)&qword_254E4AEE0[76], "GL_ARB_shader_stencil_export");
      sub_216B1E678((int)&qword_254E4AEE0[78], "GL_ARB_shading_language_420pack");
      sub_216B1E678((int)&qword_254E4AEE0[80], "GL_ARB_conservative_depth");
      sub_216B1E678((int)&qword_254E4AEE0[82], "GL_ARB_shader_atomic_counters");
      sub_216B1E678((int)&qword_254E4AEE0[84], "GL_ARB_shader_image_load_store");
      sub_216B1E678((int)&qword_254E4AEE0[86], "GL_ARB_shading_language_packing");
      sub_216B1E678((int)&qword_254E4AEE0[88], "GL_ARB_arrays_of_arrays");
      sub_216B1E678((int)&qword_254E4AEE0[90], "GL_ARB_compute_shader");
      sub_216B1E678((int)&qword_254E4AEE0[92], "GL_ARB_ES3_compatibility");
      sub_216B1E678((int)&qword_254E4AEE0[94], "GL_ARB_explicit_uniform_location");
      sub_216B1E678((int)&qword_254E4AEE0[96], "GL_ARB_fragment_layer_viewport");
      sub_216B1E678((int)&qword_254E4AEE0[98], "GL_ARB_invalidate_subdata");
      sub_216B1E678((int)&qword_254E4AEE0[100], "GL_ARB_robust_buffer_access_behavior");
      sub_216B1E678((int)&qword_254E4AEE0[102], "GL_ARB_shader_image_size");
      sub_216B1E678((int)&qword_254E4AEE0[104], "GL_ARB_shader_storage_buffer_object");
      sub_216B1E678((int)&qword_254E4AEE0[106], "GL_ARB_stencil_texturing");
      sub_216B1E678((int)&qword_254E4AEE0[108], "GL_ARB_texture_query_levels");
      sub_216B1E678((int)&qword_254E4AEE0[110], "GL_ARB_enhanced_layouts");
      sub_216B1E678((int)&qword_254E4AEE0[112], "GL_ARB_texture_stencil8");
      sub_216B1E678((int)&qword_254E4AEE0[114], "GL_ARB_bindless_texture");
      sub_216B1E678((int)&qword_254E4AEE0[116], "GL_ARB_compute_variable_group_size");
      sub_216B1E678((int)&qword_254E4AEE0[118], "GL_ARB_shader_draw_parameters");
      sub_216B1E678((int)&qword_254E4AEE0[120], "GL_ARB_shader_group_vote");
      sub_216B1E678((int)&qword_254E4AEE0[122], "GL_ARB_ES3_1_compatibility");
      sub_216B1E678((int)&qword_254E4AEE0[124], "GL_ARB_cull_distance");
      sub_216B1E678((int)&qword_254E4AEE0[126], "GL_ARB_derivative_control");
      sub_216B1E678((int)&qword_254E4AEE0[128], "GL_ARB_shader_texture_image_samples");
      sub_216B1E678((int)&qword_254E4AEE0[130], "GL_EXT_texture_sRGB");
      sub_216B1E678((int)&qword_254E4AEE0[132], "GL_NV_gpu_program4");
      sub_216B1E678((int)&qword_254E4AEE0[134], "GL_EXT_geometry_shader4");
      sub_216B1E678((int)&qword_254E4AEE0[136], "GL_EXT_gpu_shader4");
      sub_216B1E678((int)&qword_254E4AEE0[138], "GL_EXT_draw_instanced");
      sub_216B1E678((int)&qword_254E4AEE0[140], "GL_EXT_packed_float");
      sub_216B1E678((int)&qword_254E4AEE0[142], "GL_EXT_texture_array");
      sub_216B1E678((int)&qword_254E4AEE0[144], "GL_EXT_texture_compression_latc");
      sub_216B1E678((int)&qword_254E4AEE0[146], "GL_EXT_texture_compression_rgtc");
      sub_216B1E678((int)&qword_254E4AEE0[148], "GL_EXT_texture_shared_exponent");
      sub_216B1E678((int)&qword_254E4AEE0[150], "GL_NV_depth_buffer_float");
      sub_216B1E678((int)&qword_254E4AEE0[152], "GL_EXT_framebuffer_sRGB");
      sub_216B1E678((int)&qword_254E4AEE0[154], "GL_NV_transform_feedback");
      sub_216B1E678((int)&qword_254E4AEE0[156], "GL_EXT_bindable_uniform");
      sub_216B1E678((int)&qword_254E4AEE0[158], "GL_EXT_transform_feedback");
      sub_216B1E678((int)&qword_254E4AEE0[160], "GL_EXT_vertex_array_bgra");
      sub_216B1E678((int)&qword_254E4AEE0[162], "GL_NV_explicit_multisample");
      sub_216B1E678((int)&qword_254E4AEE0[164], "GL_ATI_meminfo");
      sub_216B1E678((int)&qword_254E4AEE0[166], "GL_AMD_texture_texture4");
      sub_216B1E678((int)&qword_254E4AEE0[168], "GL_AMD_vertex_shader_tessellator");
      sub_216B1E678((int)&qword_254E4AEE0[170], "GL_EXT_provoking_vertex");
      sub_216B1E678((int)&qword_254E4AEE0[172], "GL_EXT_texture_snorm");
      sub_216B1E678((int)&qword_254E4AEE0[174], "GL_EXT_separate_shader_objects");
      sub_216B1E678((int)&qword_254E4AEE0[176], "GL_NV_shader_buffer_load");
      sub_216B1E678((int)&qword_254E4AEE0[178], "GL_AMD_shader_stencil_export");
      sub_216B1E678((int)&qword_254E4AEE0[180], "GL_AMD_conservative_depth");
      sub_216B1E678((int)&qword_254E4AEE0[182], "GL_EXT_shader_image_load_store");
      sub_216B1E678((int)&qword_254E4AEE0[184], "GL_EXT_vertex_attrib_64bit");
      sub_216B1E678((int)&qword_254E4AEE0[186], "GL_NV_gpu_program5");
      sub_216B1E678((int)&qword_254E4AEE0[188], "GL_NV_gpu_shader5");
      sub_216B1E678((int)&qword_254E4AEE0[190], "GL_NV_shader_buffer_store");
      sub_216B1E678((int)&qword_254E4AEE0[192], "GL_NV_tessellation_program5");
      sub_216B1E678((int)&qword_254E4AEE0[194], "GL_NV_vdpau_interop");
      sub_216B1E678((int)&qword_254E4AEE0[196], "GL_NV_path_rendering");
      sub_216B1E678((int)&qword_254E4AEE0[198], "GL_AMD_vertex_shader_viewport_index");
      sub_216B1E678((int)&qword_254E4AEE0[200], "GL_AMD_vertex_shader_layer");
      sub_216B1E678((int)&qword_254E4AEE0[202], "GL_NV_bindless_texture");
      sub_216B1E678((int)&qword_254E4AEE0[204], "GL_NV_shader_atomic_float");
      sub_216B1E678((int)&qword_254E4AEE0[206], "GL_AMD_sparse_texture");
      sub_216B1E678((int)&qword_254E4AEE0[208], "GL_AMD_shader_trinary_minmax");
      sub_216B1E678((int)&qword_254E4AEE0[210], "GL_INTEL_map_texture");
      sub_216B1E678((int)&qword_254E4AEE0[212], "GL_EXT_shader_integer_mix");
      sub_216B1E678((int)&qword_254E4AEE0[214], "GL_INTEL_fragment_shader_ordering");
      sub_216B1E678((int)&qword_254E4AEE0[216], "GL_AMD_shader_stencil_value_export");
      sub_216B1E678((int)&qword_254E4AEE0[218], "GL_NV_shader_thread_group");
      sub_216B1E678((int)&qword_254E4AEE0[220], "GL_NV_shader_thread_shuffle");
      sub_216B1E678((int)&qword_254E4AEE0[222], "GL_EXT_shader_image_load_formatted");
      sub_216B1E678((int)&qword_254E4AEE0[224], "GL_AMD_transform_feedback4");
      sub_216B1E678((int)&qword_254E4AEE0[226], "GL_AMD_gpu_shader_int64");
      sub_216B1E678((int)&qword_254E4AEE0[228], "GL_AMD_gcn_shader");
      sub_216B1E678((int)&qword_254E4AEE0[230], "GL_NV_shader_atomic_int64");
      sub_216B1E678((int)&qword_254E4AEE0[232], "GL_KHR_blend_equation_advanced");
      sub_216B1E678((int)&qword_254E4AEE0[234], "GL_EXT_post_depth_coverage");
      sub_216B1E678((int)&qword_254E4AEE0[236], "GL_EXT_raster_multisample");
      sub_216B1E678((int)&qword_254E4AEE0[238], "GL_EXT_sparse_texture2");
      sub_216B1E678((int)&qword_254E4AEE0[240], "GL_NV_conservative_raster");
      sub_216B1E678((int)&qword_254E4AEE0[242], "GL_NV_fill_rectangle");
      sub_216B1E678((int)&qword_254E4AEE0[244], "GL_NV_fragment_coverage_to_color");
      sub_216B1E678((int)&qword_254E4AEE0[246], "GL_NV_fragment_shader_interlock");
      sub_216B1E678((int)&qword_254E4AEE0[248], "GL_NV_framebuffer_mixed_samples");
      sub_216B1E678((int)&qword_254E4AEE0[250], "GL_NV_geometry_shader_passthrough");
      sub_216B1E678((int)&qword_254E4AEE0[252], "GL_NV_path_rendering_shared_edge");
      sub_216B1E678((int)&qword_254E4AEE0[254], "GL_NV_sample_locations");
      sub_216B1E678((int)&qword_254E4AEE0[256], "GL_NV_sample_mask_override_coverage");
      sub_216B1E678((int)&qword_254E4AEE0[258], "GL_NV_shader_atomic_fp16_vector");
      sub_216B1E678((int)&qword_254E4AEE0[260], "GL_OES_texture_3D");
      sub_216B1E678((int)&qword_254E4AEE0[262], "GL_OES_standard_derivatives");
      sub_216B1E678((int)&qword_254E4AEE0[264], "GL_OES_get_program_binary");
      sub_216B1E678((int)&qword_254E4AEE0[266], "GL_AMD_program_binary_Z400");
      sub_216B1E678((int)&qword_254E4AEE0[268], "GL_EXT_shader_texture_lod");
      sub_216B1E678((int)&qword_254E4AEE0[270], "GL_EXT_frag_depth");
      sub_216B1E678((int)&qword_254E4AEE0[272], "GL_OES_EGL_image_external");
      sub_216B1E678((int)&qword_254E4AEE0[274], "GL_NV_draw_buffers");
      sub_216B1E678((int)&qword_254E4AEE0[276], "GL_EXT_separate_shader_objects");
      sub_216B1E678((int)&qword_254E4AEE0[278], "GL_EXT_shadow_samplers");
      sub_216B1E678((int)&qword_254E4AEE0[280], "GL_NV_EGL_stream_consumer_external");
      sub_216B1E678((int)&qword_254E4AEE0[282], "GL_EXT_sRGB");
      sub_216B1E678((int)&qword_254E4AEE0[284], "GL_EXT_robustness");
      sub_216B1E678((int)&qword_254E4AEE0[286], "GL_EXT_shader_framebuffer_fetch");
      sub_216B1E678((int)&qword_254E4AEE0[288], "GL_EXT_multiview_draw_buffers");
      sub_216B1E678((int)&qword_254E4AEE0[290], "GL_NV_texture_array");
      sub_216B1E678((int)&qword_254E4AEE0[292], "GL_NV_draw_instanced");
      sub_216B1E678((int)&qword_254E4AEE0[294], "GL_NV_shadow_samplers_array");
      sub_216B1E678((int)&qword_254E4AEE0[296], "GL_NV_shadow_samplers_cube");
      sub_216B1E678((int)&qword_254E4AEE0[298], "GL_EXT_draw_buffers");
      sub_216B1E678((int)&qword_254E4AEE0[300], "GL_EXT_pvrtc_sRGB");
      sub_216B1E678((int)&qword_254E4AEE0[302], "GL_EXT_draw_instanced");
      sub_216B1E678((int)&qword_254E4AEE0[304], "GL_NV_explicit_attrib_location");
      sub_216B1E678((int)&qword_254E4AEE0[306], "GL_NV_non_square_matrices");
      sub_216B1E678((int)&qword_254E4AEE0[308], "GL_EXT_shader_integer_mix");
      sub_216B1E678((int)&qword_254E4AEE0[310], "GL_ARM_shader_framebuffer_fetch");
      sub_216B1E678((int)&qword_254E4AEE0[312], "GL_ARM_shader_framebuffer_fetch_depth_stencil");
      sub_216B1E678((int)&qword_254E4AEE0[314], "GL_EXT_shader_pixel_local_storage");
      sub_216B1E678((int)&qword_254E4AEE0[316], "GL_KHR_blend_equation_advanced");
      sub_216B1E678((int)&qword_254E4AEE0[318], "GL_OES_sample_shading");
      sub_216B1E678((int)&qword_254E4AEE0[320], "GL_OES_sample_variables");
      sub_216B1E678((int)&qword_254E4AEE0[322], "GL_OES_shader_image_atomic");
      sub_216B1E678((int)&qword_254E4AEE0[324], "GL_OES_shader_multisample_interpolation");
      sub_216B1E678((int)&qword_254E4AEE0[326], "GL_OES_texture_stencil8");
      sub_216B1E678((int)&qword_254E4AEE0[328], "GL_OES_texture_storage_multisample_2d_array");
      sub_216B1E678((int)&qword_254E4AEE0[330], "GL_EXT_geometry_shader");
      sub_216B1E678((int)&qword_254E4AEE0[332], "GL_EXT_gpu_shader5");
      sub_216B1E678((int)&qword_254E4AEE0[334], "GL_EXT_shader_implicit_conversions");
      sub_216B1E678((int)&qword_254E4AEE0[336], "GL_EXT_shader_io_blocks");
      sub_216B1E678((int)&qword_254E4AEE0[338], "GL_EXT_tessellation_shader");
      sub_216B1E678((int)&qword_254E4AEE0[340], "GL_EXT_texture_buffer");
      sub_216B1E678((int)&qword_254E4AEE0[342], "GL_EXT_texture_cube_map_array");
      sub_216B1E678((int)&qword_254E4AEE0[344], "GL_EXT_texture_view");
      sub_216B1E678((int)&qword_254E4AEE0[346], "GL_EXT_primitive_bounding_box");
      sub_216B1E678((int)&qword_254E4AEE0[348], "GL_ANDROID_extension_pack_es31a");
      sub_216B1E678((int)&qword_254E4AEE0[350], "GL_KHR_robust_buffer_access_behavior");
      sub_216B1E678((int)&qword_254E4AEE0[352], "GL_KHR_robustness");
      sub_216B1E678((int)&qword_254E4AEE0[354], "GL_APPLE_clip_distance");
      sub_216B1E678((int)&qword_254E4AEE0[356], "all");
      sub_216B1E678((int)&qword_254E4AEE0[358], "GL_APPLE_sa_assertions");
      sub_216B1E678((int)&qword_254E4AEE0[360], "FOSL_cruft_compatibility");
      __cxa_guard_release(&qword_254E4BA30);
      a1 = v3;
    }
  }
  return qword_254E4AEE0[2 * a1];
}

uint64_t sub_216BA2724(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 31)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && a2[2] == v6[2] && *(_QWORD *)((char *)a2 + 23) == *(_QWORD *)((char *)v6 + 23))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216BA27A4(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 45)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x2DuLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216BA280C(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 39)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x27uLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216BA2874(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 43)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x2BuLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

BOOL sub_216BA28DC(int a1, uint64_t a2)
{
  char v4;
  uint64_t v6[2];

  v4 = sub_216BA2994(a2);
  if ((byte_253D27E70 & 1) == 0)
  {
    sub_216BA2FA4(v6, byte_253D27C58);
    sub_216BA29A0(v6[0], v6[1]);
    byte_253D27E70 = 1;
  }
  if (((byte_253D27C58[a1] >> v4) & 1) != 0 || (a1 - 491) < 2 || a1 == 403)
    return 1;
  if (a1 == 415)
    return sub_216BA2FA8(a2);
  return 0;
}

uint64_t sub_216BA2994(uint64_t a1)
{
  return *(_BYTE *)(a1 + 24) & 0x1F;
}

_BYTE *sub_216BA29A0(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *result;
  _QWORD v65[2];

  v65[0] = a1;
  v65[1] = a2;
  v2 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 296);
  *v2 |= 2u;
  v3 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 79);
  *v3 |= 2u;
  v4 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 438);
  *v4 |= 2u;
  v5 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 454);
  *v5 |= 2u;
  v6 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 76);
  *v6 |= 2u;
  v7 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 80);
  *v7 |= 2u;
  v8 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 82);
  *v8 |= 2u;
  v9 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 88);
  *v9 |= 2u;
  v10 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 108);
  *v10 |= 2u;
  v11 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 90);
  *v11 |= 2u;
  v12 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 84);
  *v12 |= 2u;
  v13 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 357);
  *v13 |= 2u;
  v14 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 395);
  *v14 |= 2u;
  v15 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 358);
  *v15 |= 2u;
  v16 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 87);
  *v16 |= 2u;
  v17 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 269);
  *v17 |= 2u;
  v18 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 92);
  *v18 |= 2u;
  v19 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 106);
  *v19 |= 2u;
  v20 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 123);
  *v20 |= 2u;
  v21 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 145);
  *v21 |= 2u;
  v22 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 131);
  *v22 |= 2u;
  v23 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 379);
  *v23 |= 2u;
  v24 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 392);
  *v24 |= 2u;
  v25 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 327);
  *v25 |= 2u;
  v26 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 399);
  *v26 |= 2u;
  v27 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 361);
  *v27 |= 2u;
  v28 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 305);
  *v28 |= 2u;
  v29 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 96);
  *v29 |= 2u;
  v30 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 455);
  *v30 |= 2u;
  v31 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 456);
  *v31 |= 2u;
  v32 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 457);
  *v32 |= 2u;
  v33 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 477);
  *v33 |= 2u;
  v34 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 478);
  *v34 |= 2u;
  v35 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 479);
  *v35 |= 2u;
  v36 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 328);
  *v36 |= 2u;
  v37 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 329);
  *v37 |= 2u;
  v38 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 330);
  *v38 |= 2u;
  v39 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 480);
  *v39 |= 2u;
  v40 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 481);
  *v40 |= 2u;
  v41 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 482);
  *v41 |= 2u;
  v42 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 375);
  *v42 |= 2u;
  v43 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 376);
  *v43 |= 2u;
  v44 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 377);
  *v44 |= 2u;
  v45 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 297);
  *v45 |= 2u;
  v46 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 298);
  *v46 |= 2u;
  v47 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 299);
  *v47 |= 2u;
  v48 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 380);
  *v48 |= 2u;
  v49 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 384);
  *v49 |= 2u;
  v50 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 388);
  *v50 |= 2u;
  v51 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 483);
  *v51 |= 2u;
  v52 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 484);
  *v52 |= 2u;
  v53 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 485);
  *v53 |= 2u;
  v54 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 465);
  *v54 |= 2u;
  v55 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 469);
  *v55 |= 2u;
  v56 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 473);
  *v56 |= 2u;
  v57 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 486);
  *v57 |= 2u;
  v58 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 487);
  *v58 |= 2u;
  v59 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 488);
  *v59 |= 2u;
  v60 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 403);
  *v60 |= 2u;
  v61 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 489);
  *v61 |= 2u;
  v62 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 408);
  *v62 |= 2u;
  v63 = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 490);
  *v63 |= 2u;
  result = (_BYTE *)sub_216BA2FBC((uint64_t)v65, 101);
  *result |= 2u;
  return result;
}

BOOL sub_216BA2FA8(uint64_t a1)
{
  _WORD *v1;

  v1 = (_WORD *)sub_216BA2FF0(a1);
  return sub_216BA2FF8(v1);
}

uint64_t sub_216BA2FBC(uint64_t a1, uint64_t a2)
{
  return sub_216B262E0(a1) + a2;
}

_QWORD *sub_216BA2FE4(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 526;
  return result;
}

uint64_t sub_216BA2FF0(uint64_t a1)
{
  return sub_216BA046C(a1, 0x8Bu);
}

BOOL sub_216BA2FF8(_WORD *a1)
{
  return (*a1 & 0x700) != 0x300 && (*a1 & 0x700) != 0;
}

uint64_t sub_216BA3010(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = sub_216BA3068((_QWORD *)a1);
  sub_216B4AEBC((_DWORD *)v2 + 2);
  *(_QWORD *)a1 = off_24D602980;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xE0 | 1;
  v3 = sub_216B1D1D4(724);
  *(_QWORD *)(a1 + 16) = sub_216BA307C(v3);
  return a1;
}

_QWORD *sub_216BA3068(_QWORD *result)
{
  *result = &unk_24D6024D0;
  return result;
}

BOOL sub_216BA3084(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a1;
  if (a2 < 4)
    return 0;
  if (a2 == 6)
    return sub_216BA30C8(&v3);
  return 1;
}

BOOL sub_216BA30C8(uint64_t *a1)
{
  _WORD *v1;

  v1 = (_WORD *)sub_216BA3A04(*a1);
  return sub_216BA2FF8(v1);
}

uint64_t sub_216BA30E0(_QWORD *a1, uint64_t a2)
{
  void *v3;

  *a1 = off_24D602980;
  v3 = (void *)a1[2];
  if (v3)
    j__free(v3);
  return nullsub_1(a1, a2);
}

void sub_216BA311C(_QWORD *a1, uint64_t a2)
{
  void *v2;

  v2 = (void *)sub_216BA3118(a1, a2);
  j__free(v2);
}

uint64_t sub_216BA3130(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_216BA2994(a1);
  return sub_216BA3A0C(v1);
}

uint64_t sub_216BA3144(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BA39D8();
  sub_216BA39DC(v2 + 4, 1);
  sub_216BA39DC(a1 + 8, 2);
  sub_216BA39DC(a1 + 12, 3);
  sub_216BA39DC(a1 + 16, 4);
  sub_216BA39DC(a1 + 20, 5);
  sub_216BA39DC(a1 + 24, 6);
  sub_216BA39DC(a1 + 28, 7);
  sub_216BA39DC(a1 + 32, 8);
  sub_216BA39DC(a1 + 36, 9);
  sub_216BA39DC(a1 + 40, 10);
  sub_216BA39DC(a1 + 44, 11);
  sub_216BA39DC(a1 + 48, 12);
  sub_216BA39DC(a1 + 52, 13);
  sub_216BA39DC(a1 + 56, 14);
  sub_216BA39DC(a1 + 60, 15);
  sub_216BA39DC(a1 + 64, 16);
  sub_216BA39DC(a1 + 68, 17);
  sub_216BA39DC(a1 + 72, 18);
  sub_216BA39DC(a1 + 76, 19);
  sub_216BA39DC(a1 + 80, 20);
  sub_216BA39DC(a1 + 84, 21);
  sub_216BA39DC(a1 + 88, 22);
  sub_216BA39DC(a1 + 92, 23);
  sub_216BA39DC(a1 + 96, 24);
  sub_216BA39DC(a1 + 100, 25);
  sub_216BA39DC(a1 + 104, 26);
  sub_216BA39DC(a1 + 108, 27);
  sub_216BA39DC(a1 + 112, 28);
  sub_216BA39DC(a1 + 116, 29);
  sub_216BA39DC(a1 + 120, 30);
  sub_216BA39DC(a1 + 124, 31);
  sub_216BA39DC(a1 + 128, 32);
  sub_216BA39DC(a1 + 132, 33);
  sub_216BA39DC(a1 + 136, 34);
  sub_216BA39DC(a1 + 140, 35);
  sub_216BA39DC(a1 + 144, 36);
  sub_216BA39DC(a1 + 148, 37);
  sub_216BA39DC(a1 + 152, 38);
  sub_216BA39DC(a1 + 156, 39);
  sub_216BA39DC(a1 + 160, 40);
  sub_216BA39DC(a1 + 164, 41);
  sub_216BA39DC(a1 + 168, 42);
  sub_216BA39DC(a1 + 172, 43);
  sub_216BA39DC(a1 + 176, 44);
  sub_216BA39DC(a1 + 180, 45);
  sub_216BA39DC(a1 + 184, 46);
  sub_216BA39DC(a1 + 188, 47);
  sub_216BA39DC(a1 + 192, 48);
  sub_216BA39DC(a1 + 196, 49);
  sub_216BA39DC(a1 + 200, 50);
  sub_216BA39DC(a1 + 204, 51);
  sub_216BA39DC(a1 + 208, 52);
  sub_216BA39DC(a1 + 212, 53);
  sub_216BA39DC(a1 + 216, 54);
  sub_216BA39DC(a1 + 220, 55);
  sub_216BA39DC(a1 + 224, 56);
  sub_216BA39DC(a1 + 228, 57);
  sub_216BA39DC(a1 + 232, 58);
  sub_216BA39DC(a1 + 236, 59);
  sub_216BA39DC(a1 + 240, 60);
  sub_216BA39DC(a1 + 244, 61);
  sub_216BA39DC(a1 + 248, 62);
  sub_216BA39DC(a1 + 252, 63);
  sub_216BA39DC(a1 + 256, 64);
  sub_216BA39DC(a1 + 260, 65);
  sub_216BA39DC(a1 + 264, 66);
  sub_216BA39DC(a1 + 268, 67);
  sub_216BA39DC(a1 + 272, 68);
  sub_216BA39DC(a1 + 276, 69);
  sub_216BA39DC(a1 + 280, 70);
  sub_216BA39DC(a1 + 284, 71);
  sub_216BA39DC(a1 + 288, 72);
  sub_216BA39DC(a1 + 292, 73);
  sub_216BA39DC(a1 + 296, 74);
  sub_216BA39DC(a1 + 300, 75);
  sub_216BA39DC(a1 + 304, 76);
  sub_216BA39DC(a1 + 308, 77);
  sub_216BA39DC(a1 + 312, 78);
  sub_216BA39DC(a1 + 316, 79);
  sub_216BA39DC(a1 + 320, 80);
  sub_216BA39DC(a1 + 324, 81);
  sub_216BA39DC(a1 + 328, 82);
  sub_216BA39DC(a1 + 332, 83);
  sub_216BA39DC(a1 + 336, 84);
  sub_216BA39DC(a1 + 340, 85);
  sub_216BA39DC(a1 + 344, 86);
  sub_216BA39DC(a1 + 348, 87);
  sub_216BA39DC(a1 + 352, 88);
  sub_216BA39DC(a1 + 356, 89);
  sub_216BA39DC(a1 + 360, 90);
  sub_216BA39DC(a1 + 364, 91);
  sub_216BA39DC(a1 + 368, 92);
  sub_216BA39DC(a1 + 372, 93);
  sub_216BA39DC(a1 + 376, 94);
  sub_216BA39DC(a1 + 380, 95);
  sub_216BA39DC(a1 + 384, 96);
  sub_216BA39DC(a1 + 388, 97);
  sub_216BA39DC(a1 + 392, 98);
  sub_216BA39DC(a1 + 396, 99);
  sub_216BA39DC(a1 + 400, 100);
  sub_216BA39DC(a1 + 404, 101);
  sub_216BA39DC(a1 + 408, 102);
  sub_216BA39DC(a1 + 412, 103);
  sub_216BA39DC(a1 + 416, 104);
  sub_216BA39DC(a1 + 420, 105);
  sub_216BA39DC(a1 + 424, 106);
  sub_216BA39DC(a1 + 428, 107);
  sub_216BA39DC(a1 + 432, 108);
  sub_216BA39DC(a1 + 436, 109);
  sub_216BA39DC(a1 + 440, 110);
  sub_216BA39DC(a1 + 444, 111);
  sub_216BA39DC(a1 + 448, 112);
  sub_216BA39DC(a1 + 452, 113);
  sub_216BA39DC(a1 + 456, 114);
  sub_216BA39DC(a1 + 460, 115);
  sub_216BA39DC(a1 + 464, 116);
  sub_216BA39DC(a1 + 468, 117);
  sub_216BA39DC(a1 + 472, 118);
  sub_216BA39DC(a1 + 476, 119);
  sub_216BA39DC(a1 + 480, 120);
  sub_216BA39DC(a1 + 484, 121);
  sub_216BA39DC(a1 + 488, 122);
  sub_216BA39DC(a1 + 492, 123);
  sub_216BA39DC(a1 + 496, 124);
  sub_216BA39DC(a1 + 500, 125);
  sub_216BA39DC(a1 + 504, 126);
  sub_216BA39DC(a1 + 508, 127);
  sub_216BA39DC(a1 + 512, 128);
  sub_216BA39DC(a1 + 516, 129);
  sub_216BA39DC(a1 + 520, 130);
  sub_216BA39DC(a1 + 524, 131);
  sub_216BA39DC(a1 + 528, 132);
  sub_216BA39DC(a1 + 532, 133);
  sub_216BA39DC(a1 + 536, 134);
  sub_216BA39DC(a1 + 540, 135);
  sub_216BA39DC(a1 + 544, 136);
  sub_216BA39DC(a1 + 548, 137);
  sub_216BA39DC(a1 + 552, 138);
  sub_216BA39DC(a1 + 556, 139);
  sub_216BA39DC(a1 + 560, 140);
  sub_216BA39DC(a1 + 564, 141);
  sub_216BA39DC(a1 + 568, 142);
  sub_216BA39DC(a1 + 572, 143);
  sub_216BA39DC(a1 + 576, 144);
  sub_216BA39DC(a1 + 580, 145);
  sub_216BA39DC(a1 + 584, 146);
  sub_216BA39DC(a1 + 588, 147);
  sub_216BA39DC(a1 + 592, 148);
  sub_216BA39DC(a1 + 596, 149);
  sub_216BA39DC(a1 + 600, 150);
  sub_216BA39DC(a1 + 604, 151);
  sub_216BA39DC(a1 + 608, 152);
  sub_216BA39DC(a1 + 612, 153);
  sub_216BA39DC(a1 + 616, 154);
  sub_216BA39DC(a1 + 620, 155);
  sub_216BA39DC(a1 + 624, 156);
  sub_216BA39DC(a1 + 628, 157);
  sub_216BA39DC(a1 + 632, 158);
  sub_216BA39DC(a1 + 636, 159);
  sub_216BA39DC(a1 + 640, 160);
  sub_216BA39DC(a1 + 644, 161);
  sub_216BA39DC(a1 + 648, 162);
  sub_216BA39DC(a1 + 652, 163);
  sub_216BA39DC(a1 + 656, 164);
  sub_216BA39DC(a1 + 660, 165);
  sub_216BA39DC(a1 + 664, 166);
  sub_216BA39DC(a1 + 668, 167);
  sub_216BA39DC(a1 + 672, 168);
  sub_216BA39DC(a1 + 676, 169);
  sub_216BA39DC(a1 + 680, 170);
  sub_216BA39DC(a1 + 684, 171);
  sub_216BA39DC(a1 + 688, 172);
  sub_216BA39DC(a1 + 692, 173);
  sub_216BA39DC(a1 + 696, 174);
  sub_216BA39DC(a1 + 700, 175);
  sub_216BA39DC(a1 + 704, 176);
  sub_216BA39DC(a1 + 708, 177);
  sub_216BA39DC(a1 + 712, 178);
  sub_216BA39DC(a1 + 716, 179);
  sub_216BA39DC(a1 + 720, 180);
  return a1;
}

_WORD *sub_216BA39E0(_WORD *result)
{
  *result &= 0xF800u;
  return result;
}

_WORD *sub_216BA39F0(_WORD *result, unsigned __int8 a2)
{
  *result = *result & 0xF800 | a2;
  return result;
}

uint64_t sub_216BA3A04(uint64_t a1)
{
  return sub_216BA046C(a1, 0xB4u);
}

uint64_t sub_216BA3A0C(unsigned int a1)
{
  return *((unsigned int *)&unk_216C18850 + a1);
}

BOOL sub_216BA3A1C(int a1)
{
  return a1 == 100;
}

uint64_t sub_216BA3A28(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  _OWORD v6[3];

  v2 = sub_216B4AEBC((_DWORD *)a1);
  sub_216B39B60((_QWORD *)v2 + 1);
  sub_216B4C3E4(a1 + 144);
  memset(v6, 0, sizeof(v6));
  sub_216BA3ABC((uint64_t)v6);
  sub_216B26D14(v5);
  sub_216B4FAD4(a1 + 184, (uint64_t)v6, v5);
  sub_216B4FAD0(v5);
  sub_216B4FC14(v6);
  *(_QWORD *)(a1 + 928) = 0;
  v3 = sub_216B1D1D4(1776);
  *(_QWORD *)(a1 + 928) = sub_216BA3AC0(v3);
  return a1;
}

uint64_t sub_216BA3AC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = (_QWORD *)(a1 + 144);
  v3 = (uint64_t *)sub_216B1E600(a1 + 144);
  v4 = sub_216B1E67C((uint64_t)v2);
  if (v3 != (uint64_t *)v4)
  {
    v5 = (uint64_t *)v4;
    do
    {
      if (*v3)
      {
        v6 = (void *)sub_216BA3B60(*v3);
        j__free(v6);
      }
      ++v3;
    }
    while (v3 != v5);
  }
  sub_216B20594(v2);
  v7 = *(_QWORD *)(a1 + 928);
  if (v7)
  {
    v8 = (void *)sub_216BA3B64(v7);
    j__free(v8);
  }
  sub_216B4FC18(a1 + 184);
  sub_216B1FF6C(v2);
  sub_216B3A034(a1 + 8);
  return a1;
}

_QWORD *sub_216BA3B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v8;

  v6 = (_QWORD *)sub_216B1D1D4(512);
  v8 = sub_216BA3BCC(v6, a1, a2, a3);
  sub_216B268AC(a1 + 144, &v8);
  return v8;
}

uint64_t sub_216BA3BD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B25034(a1);
  sub_216B25034(v2 + 24);
  return a1;
}

uint64_t sub_216BA3BFC(uint64_t a1)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;

  v2 = sub_216BA4DD0() + 4;
  sub_216BA4DD4(v2, 3);
  sub_216BA4DD4(a1 + 8, 4);
  sub_216BA4DD4(a1 + 12, 5);
  sub_216BA4DD4(a1 + 16, 6);
  sub_216BA4DD4(a1 + 20, 7);
  sub_216BA4DD8(a1 + 24, v2, 2, 8);
  sub_216BA4DD8(a1 + 40, v2, 3, 9);
  sub_216BA4DD8(a1 + 56, v2, 4, 10);
  sub_216BA4DD8(a1 + 72, a1 + 8, 2, 11);
  sub_216BA4DD8(a1 + 88, a1 + 8, 3, 12);
  sub_216BA4DD8(a1 + 104, a1 + 8, 4, 13);
  sub_216BA4DD8(a1 + 120, a1 + 12, 2, 14);
  sub_216BA4DD8(a1 + 136, a1 + 12, 3, 15);
  sub_216BA4DD8(a1 + 152, a1 + 12, 4, 16);
  sub_216BA4DD8(a1 + 168, a1 + 16, 2, 17);
  sub_216BA4DD8(a1 + 184, a1 + 16, 3, 18);
  sub_216BA4DD8(a1 + 200, a1 + 16, 4, 19);
  sub_216BA4DD8(a1 + 216, a1 + 20, 2, 20);
  sub_216BA4DD8(a1 + 232, a1 + 20, 3, 21);
  sub_216BA4DD8(a1 + 248, a1 + 20, 4, 22);
  sub_216BA4DDC(a1 + 264, v2, 2, 2, 23);
  sub_216BA4DDC(a1 + 280, v2, 3, 3, 24);
  sub_216BA4DDC(a1 + 296, v2, 4, 4, 25);
  sub_216BA4DDC(a1 + 312, v2, 2, 3, 26);
  sub_216BA4DDC(a1 + 328, v2, 2, 4, 27);
  sub_216BA4DDC(a1 + 344, v2, 3, 2, 28);
  sub_216BA4DDC(a1 + 360, v2, 3, 4, 29);
  sub_216BA4DDC(a1 + 376, v2, 4, 2, 30);
  sub_216BA4DDC(a1 + 392, v2, 4, 3, 31);
  sub_216BA4DDC(a1 + 408, a1 + 8, 2, 2, 32);
  sub_216BA4DDC(a1 + 424, a1 + 8, 3, 3, 33);
  sub_216BA4DDC(a1 + 440, a1 + 8, 4, 4, 34);
  sub_216BA4DDC(a1 + 456, a1 + 8, 2, 3, 35);
  sub_216BA4DDC(a1 + 472, a1 + 8, 2, 4, 36);
  sub_216BA4DDC(a1 + 488, a1 + 8, 3, 2, 37);
  sub_216BA4DDC(a1 + 504, a1 + 8, 3, 4, 38);
  sub_216BA4DDC(a1 + 520, a1 + 8, 4, 2, 39);
  sub_216BA4DDC(a1 + 536, a1 + 8, 4, 3, 40);
  sub_216BA4DE0(a1 + 552, 41, 0, 0);
  sub_216BA4DE0(a1 + 556, 42, 1, 0);
  sub_216BA4DE0(a1 + 560, 43, 0, 1);
  sub_216BA4DE0(a1 + 564, 44, 1, 1);
  sub_216BA4DE4(a1 + 568, 0);
  sub_216BA4DE8();
  sub_216BA4DEC(&v84, 1);
  sub_216BA4DF0(a1 + 968, v84, 1, 10, 0, 2);
  sub_216BA4DEC(&v83, 2);
  sub_216BA4DF0(a1 + 976, v83, 2, 13, 0, 2);
  sub_216BA4DF8(&v82, 1);
  sub_216BA4DF0(a1 + 984, v82, 3, 0, 0, 0);
  sub_216BA4DF8(&v81, 2);
  sub_216BA4DF0(a1 + 992, v81, 4, 0, 0, 0);
  sub_216BA4DF8(&v80, 3);
  sub_216BA4DF0(a1 + 1000, v80, 5, 0, 0, 0);
  sub_216BA4DF8(&v79, 4);
  sub_216BA4DF0(a1 + 1008, v79, 6, 0, 0, 0);
  sub_216BA4DF8(&v78, 5);
  sub_216BA4DF0(a1 + 1016, v78, 7, 0, 0, 0);
  sub_216BA4DF8(&v77, 6);
  sub_216BA4DF0(a1 + 1024, v77, 8, 0, 0, 0);
  sub_216BA4DF8(&v76, 7);
  sub_216BA4DF0(a1 + 1032, v76, 9, 0, 0, 0);
  sub_216BA4DF8(&v75, 8);
  sub_216BA4DF0(a1 + 1040, v75, 10, 0, 0, 0);
  sub_216BA4DF8(&v74, 9);
  sub_216BA4DF0(a1 + 1048, v74, 11, 0, 0, 0);
  sub_216BA4DF8(&v73, 10);
  sub_216BA4DF0(a1 + 1056, v73, 12, 0, 0, 0);
  sub_216BA4DF8(&v72, 11);
  sub_216BA4DF0(a1 + 1064, v72, 13, 0, 0, 0);
  sub_216BA4DF8(&v71, 12);
  sub_216BA4DF0(a1 + 1072, v71, 14, 0, 0, 0);
  sub_216BA4DF8(&v70, 13);
  sub_216BA4DF0(a1 + 1080, v70, 15, 0, 0, 0);
  sub_216BA4DF8(&v69, 14);
  sub_216BA4DF0(a1 + 1088, v69, 16, 0, 0, 0);
  sub_216BA4DF8(&v68, 15);
  sub_216BA4DF0(a1 + 1096, v68, 17, 0, 0, 0);
  sub_216BA4DF8(&v67, 16);
  sub_216BA4DF0(a1 + 1104, v67, 18, 0, 0, 0);
  sub_216BA4DF8(&v66, 17);
  sub_216BA4DF0(a1 + 1112, v66, 19, 0, 0, 0);
  sub_216BA4DF8(&v65, 18);
  sub_216BA4DF0(a1 + 1120, v65, 20, 0, 0, 0);
  sub_216BA4DF8(&v64, 19);
  sub_216BA4DF0(a1 + 1128, v64, 21, 0, 0, 0);
  sub_216BA4DF8(&v63, 20);
  sub_216BA4DF0(a1 + 1136, v63, 22, 0, 0, 0);
  sub_216BA4DF8(&v62, 21);
  sub_216BA4DF0(a1 + 1144, v62, 23, 0, 0, 0);
  sub_216BA4DF8(&v61, 22);
  sub_216BA4DF0(a1 + 1152, v61, 24, 0, 0, 0);
  sub_216BA4DF8(&v60, 23);
  sub_216BA4DF0(a1 + 1160, v60, 25, 0, 0, 0);
  sub_216BA4DF8(&v59, 24);
  sub_216BA4DF0(a1 + 1168, v59, 26, 0, 0, 0);
  sub_216BA4DF8(&v58, 25);
  sub_216BA4DF0(a1 + 1176, v58, 27, 0, 0, 0);
  sub_216BA4DF8(&v57, 26);
  sub_216BA4DF0(a1 + 1184, v57, 28, 0, 0, 0);
  sub_216BA4DF8(&v56, 27);
  sub_216BA4DF0(a1 + 1192, v56, 29, 0, 0, 0);
  sub_216BA4DF8(&v55, 28);
  sub_216BA4DF0(a1 + 1200, v55, 30, 0, 0, 0);
  sub_216BA4DF8(&v54, 29);
  sub_216BA4DF0(a1 + 1208, v54, 31, 0, 0, 0);
  sub_216BA4DF8(&v53, 30);
  sub_216BA4DF0(a1 + 1216, v53, 32, 0, 0, 0);
  sub_216BA4DF8(&v52, 31);
  sub_216BA4DF0(a1 + 1224, v52, 33, 0, 0, 0);
  sub_216BA4DF8(&v51, 32);
  sub_216BA4DF0(a1 + 1232, v51, 34, 0, 0, 0);
  sub_216BA4DF8(&v50, 33);
  sub_216BA4DF0(a1 + 1240, v50, 35, 0, 0, 0);
  sub_216BA4DF8(&v49, 34);
  sub_216BA4DF0(a1 + 1248, v49, 36, 0, 0, 0);
  sub_216BA4DF8(&v48, 35);
  sub_216BA4DF0(a1 + 1256, v48, 37, 0, 0, 0);
  sub_216BA4DF8(&v47, 36);
  sub_216BA4DF0(a1 + 1264, v47, 38, 0, 0, 0);
  sub_216BA4DF8(&v46, 37);
  sub_216BA4DF0(a1 + 1272, v46, 39, 0, 0, 0);
  sub_216BA4DF8(&v45, 38);
  sub_216BA4DF0(a1 + 1280, v45, 40, 0, 0, 0);
  sub_216BA4DF8(&v44, 39);
  sub_216BA4DF0(a1 + 1288, v44, 41, 0, 0, 0);
  sub_216BA4DF8(&v43, 40);
  sub_216BA4DF0(a1 + 1296, v43, 42, 0, 0, 0);
  sub_216BA4DF8(&v42, 41);
  sub_216BA4DF0(a1 + 1304, v42, 43, 0, 0, 0);
  sub_216BA4DF8(&v41, 42);
  sub_216BA4DF0(a1 + 1312, v41, 44, 0, 0, 0);
  sub_216BA4DF8(&v40, 43);
  sub_216BA4DF0(a1 + 1320, v40, 45, 0, 0, 0);
  sub_216BA4DF8(&v39, 44);
  sub_216BA4DF0(a1 + 1328, v39, 46, 0, 0, 0);
  sub_216BA4DF8(&v38, 45);
  sub_216BA4DF0(a1 + 1336, v38, 47, 0, 0, 0);
  sub_216BA4DF8(&v37, 46);
  sub_216BA4DF0(a1 + 1344, v37, 48, 0, 0, 0);
  sub_216BA4DF8(&v36, 47);
  sub_216BA4DF0(a1 + 1352, v36, 49, 0, 0, 0);
  sub_216BA4DF8(&v35, 48);
  sub_216BA4DF0(a1 + 1360, v35, 50, 0, 0, 0);
  sub_216BA4DF8(&v34, 49);
  sub_216BA4DF0(a1 + 1368, v34, 51, 0, 0, 0);
  sub_216BA4DF8(&v33, 50);
  sub_216BA4DF0(a1 + 1376, v33, 52, 0, 0, 0);
  sub_216BA4DF8(&v32, 51);
  sub_216BA4DF0(a1 + 1384, v32, 53, 0, 0, 0);
  sub_216BA4DF8(&v31, 52);
  sub_216BA4DF0(a1 + 1392, v31, 54, 0, 0, 0);
  sub_216BA4DF8(&v30, 53);
  sub_216BA4DF0(a1 + 1400, v30, 55, 0, 0, 0);
  sub_216BA4DF8(&v29, 54);
  sub_216BA4DF0(a1 + 1408, v29, 56, 0, 0, 0);
  sub_216BA4DF8(&v28, 55);
  sub_216BA4DF0(a1 + 1416, v28, 57, 0, 0, 0);
  sub_216BA4DF8(&v27, 56);
  sub_216BA4DF0(a1 + 1424, v27, 58, 0, 0, 0);
  sub_216BA4DF8(&v26, 57);
  sub_216BA4DF0(a1 + 1432, v26, 59, 0, 0, 0);
  sub_216BA4DF8(&v25, 58);
  sub_216BA4DF0(a1 + 1440, v25, 60, 0, 0, 0);
  sub_216BA4DF8(&v24, 59);
  sub_216BA4DF0(a1 + 1448, v24, 61, 0, 0, 0);
  sub_216BA4DF8(&v23, 60);
  sub_216BA4DF0(a1 + 1456, v23, 62, 0, 0, 0);
  sub_216BA4DF8(&v22, 61);
  sub_216BA4DF0(a1 + 1464, v22, 63, 0, 0, 0);
  sub_216BA4DF8(&v21, 62);
  sub_216BA4DF0(a1 + 1472, v21, 64, 0, 0, 0);
  sub_216BA4DF8(&v20, 63);
  sub_216BA4DF0(a1 + 1480, v20, 65, 0, 0, 0);
  sub_216BA4DF8(&v19, 64);
  sub_216BA4DF0(a1 + 1488, v19, 66, 0, 0, 0);
  sub_216BA4DF8(&v18, 65);
  sub_216BA4DF0(a1 + 1496, v18, 67, 0, 0, 0);
  sub_216BA4DF8(&v17, 66);
  sub_216BA4DF0(a1 + 1504, v17, 68, 0, 0, 0);
  sub_216BA4DF8(&v16, 67);
  sub_216BA4DF0(a1 + 1512, v16, 69, 0, 0, 0);
  sub_216BA4DF8(&v15, 68);
  sub_216BA4DF0(a1 + 1520, v15, 70, 0, 0, 0);
  sub_216BA4DF8(&v14, 69);
  sub_216BA4DF0(a1 + 1528, v14, 71, 0, 0, 0);
  sub_216BA4DF8(&v13, 70);
  sub_216BA4DF0(a1 + 1536, v13, 72, 0, 0, 0);
  sub_216BA4DF8(&v12, 71);
  sub_216BA4DF0(a1 + 1544, v12, 73, 0, 0, 0);
  sub_216BA4DF8(&v11, 72);
  sub_216BA4DF0(a1 + 1552, v11, 74, 0, 0, 0);
  sub_216BA4DF8(&v10, 73);
  sub_216BA4DF0(a1 + 1560, v10, 75, 0, 0, 0);
  sub_216BA4DF8(&v9, 74);
  sub_216BA4DF0(a1 + 1568, v9, 76, 0, 0, 0);
  sub_216BA4DFC(&v8, 1);
  sub_216BA4DF0(a1 + 1576, v8, 77, 0, 0, 0);
  sub_216BA4DFC(&v7, 2);
  sub_216BA4DF0(a1 + 1584, v7, 78, 0, 0, 0);
  sub_216BA4DFC(&v6, 3);
  sub_216BA4DF0(a1 + 1592, v6, 79, 0, 0, 0);
  sub_216BA4DFC(&v5, 4);
  sub_216BA4DF0(a1 + 1600, v5, 80, 0, 0, 0);
  sub_216BA4DFC(&v4, 5);
  sub_216BA4DF0(a1 + 1608, v4, 81, 0, 0, 0);
  sub_216B39B60((_QWORD *)(a1 + 1616));
  sub_216B5F9A0(a1 + 1752, 0);
  return a1;
}

uint64_t sub_216BA4DF0(uint64_t a1, int a2, __int16 a3, __int16 a4, char a5, char a6)
{
  return sub_216BA515C(a1, a2, a3, a4, a5, a6);
}

_BYTE *sub_216BA4E00(_BYTE *a1)
{
  return sub_216BA4E0C(a1, 4, 2);
}

_BYTE *sub_216BA4E0C(_BYTE *a1, char a2, char a3)
{
  _BYTE *result;

  result = sub_216BA4E38(a1, a2);
  result[1] = result[1] & 0x80 | a3 & 0x7F;
  return result;
}

_BYTE *sub_216BA4E38(_BYTE *result, char a2)
{
  *result = *result & 0xF0 | a2 & 0xF;
  return result;
}

_BYTE *sub_216BA4E48(_BYTE *a1, char a2)
{
  return sub_216BA4E0C(a1, 0, a2);
}

_BYTE *sub_216BA4E54(_BYTE *a1, uint64_t a2, char a3, char a4)
{
  _BYTE *result;

  result = sub_216BA4E0C(a1, 1, a4);
  result[2] = result[2] & 0xF8 | a3 & 7;
  *((_QWORD *)result + 1) = a2;
  return result;
}

_BYTE *sub_216BA4E90(_BYTE *a1, uint64_t a2, char a3, char a4, char a5)
{
  _BYTE *result;

  result = sub_216BA4E0C(a1, 2, a5);
  result[2] = a3 & 7 | (8 * (a4 & 7)) | result[2] & 0xC0;
  *((_QWORD *)result + 1) = a2;
  return result;
}

_BYTE *sub_216BA4EE4(_BYTE *a1, char a2, char a3, char a4)
{
  _BYTE *result;

  result = sub_216BA4E0C(a1, 3, a2);
  result[2] = a3 & 3 | (4 * (a4 & 1)) | result[2] & 0xF8;
  return result;
}

uint64_t sub_216BA4F28(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int *v4;

  v2 = a2;
  v4 = (int *)nullsub_1(a1, a2);
  sub_216BA4F58(v4, v2);
  return a1;
}

uint64_t sub_216BA4F58(int *a1, unsigned int a2)
{
  int v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  *a1 |= 1u;
  if (a2 >= 0x11)
  {
    *a1 = v3 & 0xFFFFFFFE;
    v5 = (_QWORD *)sub_216B68BC0((uint64_t)a1);
    *v5 = sub_216BA4FBC((uint64_t)a1, a2);
    v5[1] = v6;
  }
  return sub_216BA4FEC(a1);
}

uint64_t sub_216BA4FBC(uint64_t a1, unsigned int a2)
{
  return sub_216B1D1D4(24 * a2);
}

uint64_t sub_216BA4FEC(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;

  sub_216B68C50(a1, 0);
  v2 = sub_216B68C54((uint64_t)a1, 0);
  v3 = sub_216BA5054(v2);
  v5 = v4;
  v6 = (uint64_t *)sub_216BA5058(a1);
  result = sub_216BA505C((uint64_t)a1);
  while (v6 != (uint64_t *)result)
  {
    *v6 = v3;
    v6[1] = v5;
    v6 += 3;
  }
  return result;
}

uint64_t sub_216BA505C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BA5058();
  return v2 + 24 * sub_216B68CD0(a1);
}

uint64_t sub_216BA5090()
{
  int v1;
  uint64_t v2;

  v2 = sub_216B50F08();
  v1 = sub_216B4CBB8();
  return sub_216B67C54((uint64_t)&v2, (uint64_t)&v1);
}

uint64_t sub_216BA50C4()
{
  uint64_t result;
  int v1;

  result = sub_216BA50F0();
  v1 = (*(unsigned __int8 *)(result + 6) << 16) & 0xE00000;
  *(_WORD *)(result + 4) = 0;
  *(_BYTE *)(result + 6) = BYTE2(v1);
  return result;
}

_DWORD *sub_216BA50F4(_DWORD *a1)
{
  sub_216BA5118(a1);
  return a1;
}

_DWORD *sub_216BA5118(_DWORD *result)
{
  *result &= 0xFF800000;
  return result;
}

unsigned int *sub_216BA5128(unsigned int *a1, char a2)
{
  sub_216BA5118(a1);
  *a1 = *a1 & 0xFFFE0FFF | ((a2 & 0x1F) << 12);
  return a1;
}

uint64_t sub_216BA515C(uint64_t result, int a2, __int16 a3, __int16 a4, char a5, char a6)
{
  unsigned int v6;

  *(_DWORD *)result = a2;
  v6 = ((a4 & 0x7F) << 10) & 0xFF01FFFF | ((a5 & 3) << 17) & 0xFF07FFFF | ((a6 & 3) << 19) & 0xFF1FFFFF | (((*(unsigned __int8 *)(result + 6) >> 5) & 7) << 21);
  *(_WORD *)(result + 4) = a3 & 0x3FF | (a4 << 10);
  *(_BYTE *)(result + 6) = BYTE2(v6);
  return result;
}

unsigned int *sub_216BA518C(unsigned int *a1, char a2)
{
  sub_216BA5118(a1);
  *a1 = *a1 & 0xFFFFFF80 | a2 & 0x7F;
  return a1;
}

unsigned int *sub_216BA51C0(unsigned int *a1, char a2)
{
  sub_216BA5118(a1);
  *a1 = *a1 & 0xFFFFF07F | ((a2 & 0x1F) << 7);
  return a1;
}

uint64_t sub_216BA51F4(uint64_t a1)
{
  sub_216BA5254(a1 + 176);
  sub_216BA5258(a1 + 168);
  sub_216BA525C(a1 + 160);
  sub_216BA5260(a1 + 128);
  sub_216B3D560(a1 + 96);
  sub_216B3D560(a1 + 72);
  sub_216B3D560(a1 + 48);
  sub_216B3D560(a1 + 24);
  return sub_216B3D560(a1);
}

uint64_t sub_216BA5264(uint64_t a1)
{
  sub_216BA5294(a1 + 320);
  sub_216BA5298(a1 + 8);
  return a1;
}

void **sub_216BA529C(void **a1)
{
  free(*a1);
  return a1;
}

uint64_t sub_216BA52C4(uint64_t a1)
{
  sub_216BA52F4(a1 + 184);
  sub_216B9B960(a1 + 88);
  return sub_216B1FF6C(a1);
}

uint64_t sub_216BA52F8(uint64_t a1)
{
  sub_216BA5330(a1 + 96);
  sub_216BA5334(a1 + 64);
  sub_216BA5334(a1 + 32);
  return sub_216BA5334(a1);
}

_QWORD *sub_216BA5344(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_216BA5390(uint64_t *a1)
{
  sub_216BA53B4(a1);
  return a1;
}

uint64_t sub_216BA53B4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216BA53C4();
  return result;
}

void sub_216BA53C8(_DWORD *a1)
{
  void *v2;

  if ((*a1)-- == 1)
  {
    v2 = (void *)sub_216B61BC8();
    j__free(v2);
  }
}

_DWORD **sub_216BA53F4(_DWORD **a1)
{
  sub_216BA5418(a1);
  return a1;
}

_DWORD *sub_216BA5418(_DWORD **a1)
{
  _DWORD *result;

  result = *a1;
  if (result)
    return sub_216BA5428((uint64_t)result);
  return result;
}

_DWORD *sub_216BA5428(uint64_t a1)
{
  return sub_216BA5430((_DWORD *)(a1 + 8));
}

_DWORD *sub_216BA5430(_DWORD *result)
{
  if ((*result)-- == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*((_QWORD *)result - 1) + 16))(result - 2);
  return result;
}

void **sub_216BA5450(void **a1)
{
  sub_216BA547C((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216BA547C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B512E8();
    v4 = sub_216BA5500();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B5F664(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B2A5FC(*v5, v4);
        v5 += 2;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t sub_216BA5504()
{
  return -16;
}

uint64_t sub_216BA550C(uint64_t a1)
{
  sub_216B5F5B0(a1 + 1752);
  sub_216B3A034(a1 + 1616);
  sub_216BA5544(a1 + 568);
  return a1;
}

_BYTE *sub_216BA5548(_BYTE *a1)
{
  sub_216BA5574((uint64_t)a1);
  sub_216B68DB4(a1);
  return a1;
}

uint64_t sub_216BA5574(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];

  result = sub_216B68CD0(a1);
  if ((_DWORD)result)
  {
    v8[0] = sub_216BA5054(result);
    v8[1] = v3;
    v7[0] = sub_216BA55F8();
    v7[1] = v4;
    v5 = sub_216BA5058(a1);
    result = sub_216BA505C(a1);
    if (v5 != result)
    {
      v6 = result;
      do
      {
        result = sub_216BA55FC(v5, (uint64_t)v8);
        if ((result & 1) == 0)
          result = sub_216BA55FC(v5, (uint64_t)v7);
        v5 += 24;
      }
      while (v5 != v6);
    }
  }
  return result;
}

BOOL sub_216BA55FC(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_216B2A5FC(*(_QWORD *)a1, *(_QWORD *)a2);
  if (result)
    return sub_216B4CC88((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  return result;
}

uint64_t sub_216BA5640()
{
  int v1;
  uint64_t v2;

  v2 = sub_216B512EC();
  v1 = sub_216B4CC9C();
  return sub_216B67C54((uint64_t)&v2, (uint64_t)&v1);
}

_QWORD *sub_216BA5674(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = sub_216B2C030(a1);
  sub_216B2C030(v8 + 3);
  sub_216B2C030(a1 + 6);
  sub_216B2C030(a1 + 9);
  sub_216B2C030(a1 + 12);
  sub_216BA5708(a1 + 15);
  sub_216BA570C(a1 + 16, 0);
  a1[19] = a2;
  sub_216BA5710(a1 + 20, a3);
  sub_216B4AEC8(a1 + 21, a4);
  sub_216BAC884(a1 + 22, a1[19]);
  return a1;
}

uint64_t sub_216BA5714(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != 3; ++i)
    sub_216BA574C(a1 + i);
  return a1;
}

_BYTE *sub_216BA5750(_BYTE *result)
{
  *result &= 0xFCu;
  return result;
}

uint64_t sub_216BA5760(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216BA5790(v4, v2);
  return a1;
}

uint64_t sub_216BA5790(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B5FA0C(a1, a2);
  if ((_DWORD)result)
    return sub_216BA57C8(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_216BA57C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  v2 = sub_216B4CB70(a1, 0);
  v3 = sub_216B512E8(v2);
  v4 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B5F664(a1);
  while (v4 != (_QWORD *)result)
  {
    *v4 = v3;
    v4 += 2;
  }
  return result;
}

_DWORD **sub_216BA582C(_DWORD **a1, _DWORD *a2)
{
  *a1 = a2;
  sub_216BA5854(a1);
  return a1;
}

_DWORD *sub_216BA5854(_DWORD **a1)
{
  _DWORD *result;

  result = *a1;
  if (result)
    return sub_216BA5864((uint64_t)result);
  return result;
}

_DWORD *sub_216BA5864(uint64_t a1)
{
  return sub_216B4DC98((_DWORD *)(a1 + 8));
}

void sub_216BA586C(unsigned __int8 *a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  sub_216BA5894(a1, v2);
}

void sub_216BA5894(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3[4];

  sub_216BA5998((uint64_t)v3, a2, 0);
  sub_216BA599C(v3, a1);
}

void **sub_216BA58D0(unsigned __int8 *a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BA58F8(a1, v2);
}

void **sub_216BA58F8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4[4];

  sub_216BA5998((uint64_t)v4, a2, 0);
  return sub_216BA59B4(v4, a1);
}

void **sub_216BA5934(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BA595C(a1, v2);
}

void **sub_216BA595C(uint64_t a1, uint64_t a2)
{
  uint64_t v4[4];

  sub_216BA5998((uint64_t)v4, a2, 0);
  return sub_216BA59CC(v4, a1);
}

void sub_216BA599C(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    sub_216BA61E4((uint64_t)a1, a2);
  else
    sub_216B248A0(*a1, " /* <none> */ ");
}

void **sub_216BA59B4(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    return (void **)sub_216BA8400(a1, a2);
  else
    return sub_216B248A0(*a1, " /* <none> */ ");
}

void **sub_216BA59CC(uint64_t *a1, uint64_t a2)
{
  if (a2)
    return (void **)sub_216BA8C24(a1, a2);
  else
    return sub_216B248A0(*a1, " /* <none> */ ");
}

uint64_t sub_216BA59E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BA5A0C(a1, v2);
}

uint64_t sub_216BA5A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[4];

  v4 = sub_216BA5ADC(a1);
  sub_216BA5998((uint64_t)v17, a2, v4);
  v15 = sub_216BA5AE4(a1);
  v16 = v5;
  v6 = (uint64_t *)sub_216B1E600((uint64_t)&v15);
  v7 = sub_216B35430(&v15);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    do
    {
      v9 = *v6++;
      sub_216BA5B0C(v17, v9, 1);
    }
    while (v6 != v8);
  }
  v15 = sub_216BA5BE0(a1);
  v16 = v10;
  v11 = (uint64_t *)sub_216B1E600((uint64_t)&v15);
  result = sub_216B35430(&v15);
  if (v11 != (uint64_t *)result)
  {
    v13 = (uint64_t *)result;
    do
    {
      v14 = *v11++;
      result = sub_216BA5B0C(v17, v14, 1);
    }
    while (v11 != v13);
  }
  return result;
}

uint64_t sub_216BA5ADC(uint64_t a1)
{
  return a1 + 128;
}

uint64_t sub_216BA5AE4(uint64_t a1)
{
  uint64_t v2;

  sub_216BA9C20(&v2, a1 + 24);
  return v2;
}

uint64_t sub_216BA5B0C(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;
  _QWORD v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  sub_216B85C18(v13);
  v6 = (uint64_t *)sub_216BA9C60(a2);
  v7 = sub_216BA9C64(a2);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    do
    {
      v9 = *v6++;
      v12 = v9;
      sub_216B268AC((uint64_t)v13, &v12);
    }
    while (v6 != v8);
  }
  if (!sub_216B29084(v13))
  {
    sub_216B2D798(v11, v13);
    sub_216BA5EDC(a1, v11[0], v11[1], a3);
  }
  return sub_216B1FF6C(v13);
}

uint64_t sub_216BA5BE0(uint64_t a1)
{
  uint64_t v2;

  sub_216BA9C20(&v2, a1);
  return v2;
}

uint64_t sub_216BA5C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t j;
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[4];
  _BYTE v26[56];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216BA5ADC(a1);
  sub_216BA5998((uint64_t)v25, a2, v4);
  v5 = sub_216BA5E2C(a1);
  v23 = sub_216BA5AE4(a1);
  v24 = v6;
  v7 = (uint64_t *)sub_216B1E600((uint64_t)&v23);
  v8 = sub_216B35430(&v23);
  if (v7 != (uint64_t *)v8)
  {
    v9 = (uint64_t *)v8;
    do
    {
      v10 = *v7;
      sub_216B2D768(v26);
      v11 = (uint64_t *)sub_216BA5E50(v10);
      for (i = sub_216BA5E54(v10); v11 != (uint64_t *)i; ++v11)
      {
        v22 = 0;
        v22 = *v11;
        if ((sub_216BA5E84(v22) & 1) != 0 || sub_216BA5ED4(v5, v22))
          sub_216B268AC((uint64_t)v26, &v22);
      }
      if (sub_216B26878((uint64_t)v26))
      {
        sub_216B2D798(v21, v26);
        sub_216BA5EDC(v25, v21[0], v21[1], 1);
      }
      sub_216B1FF6C(v26);
      ++v7;
    }
    while (v7 != v9);
  }
  v23 = sub_216BA5BE0(a1);
  v24 = v13;
  v14 = (uint64_t *)sub_216B1E600((uint64_t)&v23);
  result = sub_216B35430(&v23);
  if (v14 != (uint64_t *)result)
  {
    v16 = (uint64_t *)result;
    do
    {
      v17 = *v14;
      sub_216B2D768(v26);
      v18 = (uint64_t *)sub_216BA5E50(v17);
      for (j = sub_216BA5E54(v17); v18 != (uint64_t *)j; ++v18)
      {
        v22 = 0;
        v22 = *v18;
        if ((sub_216BA5E84(v22) & 1) != 0 || sub_216BA5ED4(v5, v22))
          sub_216B268AC((uint64_t)v26, &v22);
      }
      if (sub_216B26878((uint64_t)v26))
      {
        sub_216B2D798(v20, v26);
        sub_216BA5EDC(v25, v20[0], v20[1], 1);
      }
      result = sub_216B1FF6C(v26);
      ++v14;
    }
    while (v14 != v16);
  }
  return result;
}

uint64_t sub_216BA5E2C(uint64_t a1)
{
  sub_216BA9CE0(a1);
  return a1 + 176;
}

uint64_t sub_216BA5E54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BA5E50();
  return v2 + 8 * sub_216BA8BB4(a1);
}

uint64_t sub_216BA5E84(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if ((sub_216BA9E2C(&v2) & 1) != 0 || (sub_216BA9E30(&v2) & 1) != 0 || (sub_216BA9E34(&v2) & 1) != 0)
    return 1;
  else
    return sub_216BA9E38(&v2);
}

BOOL sub_216BA5ED4(uint64_t a1, uint64_t a2)
{
  return sub_216BA9F8C(a1 + 8, a2);
}

uint64_t sub_216BA5EDC(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38[2];
  _DWORD *v39;
  _QWORD v40[3];
  char v41;
  _QWORD v42[2];

  v42[0] = a2;
  v42[1] = a3;
  v41 = a4;
  v40[0] = v42;
  v40[1] = a1;
  v40[2] = &v41;
  v5 = sub_216B1E67C((uint64_t)v42);
  v6 = (_QWORD *)sub_216B1E600((uint64_t)v42);
  if (v5 == 1)
  {
    sub_216BA599C(a1, *v6);
    return sub_216BAA054((uint64_t)v40);
  }
  if (!sub_216BAA0D0(v6))
  {
    v21 = sub_216B1E600((uint64_t)v42);
    if (sub_216BAA0D4(v21))
    {
      sub_216B248A0(*a1, "invariant");
      v22 = (uint64_t *)sub_216B1E600((uint64_t)v42);
      v23 = sub_216B35430(v42);
      if (v22 != (uint64_t *)v23)
      {
        v24 = (uint64_t *)v23;
        v25 = 1;
        do
        {
          v26 = *v22;
          if ((v25 & 1) == 0)
            sub_216B248A0(*a1, ",");
          sub_216B248A0(*a1, " ");
          v27 = (unsigned __int16 *)sub_216B3DB48(v26);
          if (sub_216B2037C((uint64_t)v27))
          {
            v28 = *a1;
            v29 = sub_216B2037C((uint64_t)v27);
            v30 = sub_216BA6A7C(v29);
            sub_216B248E0(v28, v30, v31);
          }
          else
          {
            v32 = sub_216BA83A4(v27);
            sub_216BA8384(a1, v32);
          }
          v25 = 0;
          ++v22;
        }
        while (v22 != v24);
      }
    }
    else
    {
      v33 = (uint64_t *)sub_216B1E600((uint64_t)v42);
      v34 = sub_216B35430(v42);
      if (v33 != (uint64_t *)v34)
      {
        v35 = (uint64_t *)v34;
        do
        {
          v36 = *v33++;
          sub_216BA599C(a1, v36);
        }
        while (v33 != v35);
      }
    }
    return sub_216BAA054((uint64_t)v40);
  }
  v8 = (uint64_t *)sub_216B1E600((uint64_t)v42);
  result = sub_216B35430(v42);
  if (v8 != (uint64_t *)result)
  {
    v9 = (uint64_t *)result;
    v10 = 1;
    do
    {
      v11 = *v8;
      v39 = 0;
      v39 = (_DWORD *)sub_216B3DB48(v11);
      v12 = a1[2];
      if (v12
        && (v38[0] = sub_216BA68EC(v12, (uint64_t *)&v39),
            v38[1] = v13,
            v37[0] = sub_216BA6950(a1[2]),
            v37[1] = v14,
            sub_216B50AF4(v38, (uint64_t)v37)))
      {
        v15 = v39;
        v16 = sub_216B1E600((uint64_t)v38);
        sub_216BA699C(a1, (uint64_t)v15, *(float **)(v16 + 8));
        result = sub_216BAA054((uint64_t)v40);
      }
      else
      {
        if ((v10 & 1) != 0)
        {
          sub_216BA6A84(a1, v39);
          sub_216BA6BD4(a1, (uint64_t)v39);
        }
        else
        {
          sub_216B248A0(*a1, ",");
        }
        v17 = sub_216B248A0(*a1, " ");
        v18 = sub_216BA6A7C((uint64_t)v39);
        sub_216B248E0((uint64_t)v17, v18, v19);
        sub_216BA6CA4(a1, (uint64_t)v39);
        result = sub_216B5EE7C((uint64_t)v39);
        if (result)
        {
          sub_216B248A0(*a1, " = ");
          v20 = sub_216B5EE7C((uint64_t)v39);
          result = sub_216BA59CC(a1, v20);
        }
        v10 = 0;
      }
      ++v8;
    }
    while (v8 != v9);
    if ((v10 & 1) == 0)
      return sub_216BAA054((uint64_t)v40);
  }
  return result;
}

uint64_t sub_216BA61CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void sub_216BA61E4(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;

  v2 = (char *)sub_216BA621C + 4 * byte_216C18858[sub_216B8B400(a2)];
  __asm { BR              X10 }
}

void **sub_216BA621C()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BA62F8(v1, v0);
}

uint64_t sub_216BA6230()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BA6430(v1, v0);
}

void **sub_216BA6244()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BA6558(v1, v0);
}

uint64_t sub_216BA6258()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BA66F8)(v1, v0);
}

void **sub_216BA626C()
{
  uint64_t v0;
  uint64_t *v1;

  return sub_216BA66FC(v1, v0);
}

void **sub_216BA6280()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BA6738(v1, v0);
}

void **sub_216BA6294()
{
  unsigned __int16 *v0;
  uint64_t *v1;

  return sub_216BA67A0(v1, v0);
}

void **sub_216BA62A8()
{
  unsigned __int16 *v0;
  uint64_t *v1;

  return sub_216BA681C(v1, v0);
}

uint64_t sub_216BA62BC()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BA68E4)(v1, v0);
}

uint64_t sub_216BA62D0()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BA68E8)(v1, v0);
}

void **sub_216BA62E4()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BA6860(v1, v0);
}

void **sub_216BA62F8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  void **result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17[2];
  _DWORD *v18;

  v18 = a2;
  v3 = a1[2];
  if (v3)
  {
    v17[0] = sub_216BA68EC(v3, (uint64_t *)&v18);
    v17[1] = v4;
    v16[0] = sub_216BA6950(a1[2]);
    v16[1] = v5;
    if (sub_216B50AF4(v17, (uint64_t)v16))
    {
      v6 = v18;
      v7 = sub_216B1E600((uint64_t)v17);
      return sub_216BA699C(a1, (uint64_t)v6, *(float **)(v7 + 8));
    }
    a2 = v18;
  }
  if (sub_216B5E12C((uint64_t)a2))
  {
    v9 = *a1;
    v10 = sub_216BA6A7C((uint64_t)v18);
    sub_216B248E0(v9, v10, v11);
  }
  else
  {
    sub_216BA6A84(a1, v18);
    sub_216BA6BD4(a1, (uint64_t)v18);
    v12 = sub_216B248A0(*a1, " ");
    v13 = sub_216BA6A7C((uint64_t)v18);
    sub_216B248E0((uint64_t)v12, v13, v14);
    sub_216BA6CA4(a1, (uint64_t)v18);
  }
  result = (void **)sub_216B5EE7C((uint64_t)v18);
  if (result)
  {
    sub_216B248A0(*a1, " = ");
    v15 = sub_216B5EE7C((uint64_t)v18);
    return sub_216BA59CC(a1, v15);
  }
  return result;
}

uint64_t sub_216BA6430(uint64_t *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  if (sub_216BA81D0((uint64_t)a2))
    sub_216B248A0(*a1, "const ");
  sub_216BA81DC(a1, a2);
  if (sub_216BA75CC((uint64_t)a2))
  {
    v4 = sub_216BA8228(a2);
    sub_216BA75FC(a1, v4);
  }
  v11 = -1;
  v5 = sub_216B2037C((uint64_t)a2);
  sub_216BA781C(a1, v5);
  v6 = sub_216B2037C((uint64_t)a2);
  if (sub_216BA7ABC(v6, &v11) && (sub_216BA7B18((uint64_t)a2) & 1) == 0)
    sub_216BA7B24(a1, v11);
  result = sub_216BA7D08((uint64_t)a2);
  if ((_DWORD)result)
  {
    v8 = sub_216B248A0(*a1, " ");
    v9 = sub_216BA6A7C((uint64_t)a2);
    sub_216B248E0((uint64_t)v8, v9, v10);
    result = sub_216BA7B18((uint64_t)a2);
    if ((_DWORD)result)
      return (uint64_t)sub_216BA7B24(a1, v11);
  }
  return result;
}

void **sub_216BA6558(uint64_t *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v17;

  a1[3] = (uint64_t)a2;
  if (sub_216BA8240((uint64_t)a2))
  {
    v4 = sub_216BA824C(a2);
    sub_216BA75FC(a1, v4);
  }
  v17 = 0;
  v5 = sub_216B939E0((uint64_t)a2);
  sub_216BA781C(a1, v5);
  v6 = sub_216B939E0((uint64_t)a2);
  if (sub_216BA7ABC(v6, &v17))
    sub_216BA7B24(a1, v17);
  v7 = sub_216B248A0(*a1, " ");
  v8 = sub_216BA6A7C((uint64_t)a2);
  v10 = sub_216B248E0((uint64_t)v7, v8, v9);
  sub_216B248A0((uint64_t)v10, "(");
  v11 = (unsigned __int8 **)sub_216B262E0((uint64_t)(a2 + 4));
  v12 = sub_216BA8258((uint64_t)(a2 + 4));
  if (v11 != (unsigned __int8 **)v12)
  {
    v13 = (unsigned __int8 **)v12;
    v14 = v12 - (_QWORD)v11;
    do
    {
      sub_216BA599C(a1, *v11);
      if (v14 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v11;
      v14 -= 8;
    }
    while (v11 != v13);
  }
  sub_216B248A0(*a1, ")");
  if (!sub_216BA8288((uint64_t)a2))
    return sub_216BA8290(a1, 0);
  sub_216B248A0(*a1, " ");
  v15 = (unsigned __int8 *)sub_216BA8288((uint64_t)a2);
  sub_216BA59B4(a1, v15);
  return sub_216B248A0(*a1, "\n");
}

void **sub_216BA66FC(uint64_t *a1, uint64_t a2)
{
  int v3;

  v3 = sub_216B4CBC4(a2);
  sub_216BA74D4(a1, v3);
  return sub_216B248A0(*a1, "uniform");
}

void **sub_216BA6738(uint64_t *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  sub_216B248A0(*a1, "precision ");
  v4 = sub_216BA836C(a2);
  sub_216BA75FC(a1, v4);
  v5 = *a1;
  v6 = sub_216BA8378(a2);
  v7 = sub_216BD3800(v6);
  return sub_216B248E0(v5, v7, v8);
}

void **sub_216BA67A0(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  sub_216B248A0(*a1, "invariant ");
  if (sub_216B2037C((uint64_t)a2))
  {
    v4 = *a1;
    v5 = sub_216B2037C((uint64_t)a2);
    v6 = sub_216BA6A7C(v5);
    return sub_216B248E0(v4, v6, v7);
  }
  else
  {
    v9 = sub_216BA83A4(a2);
    return sub_216BA8384(a1, v9);
  }
}

void **sub_216BA681C(uint64_t *a1, unsigned __int16 *a2)
{
  void **v3;
  unsigned int v4;
  unsigned int v5;

  v3 = sub_216B248A0(*a1, "#version ");
  v4 = sub_216BA83A4(a2);
  v5 = sub_216BA3A0C(v4);
  return sub_216B248D8(v3, v5);
}

void **sub_216BA6860(uint64_t *a1, _DWORD *a2)
{
  void **v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_216B248A0(*a1, "#extension ");
  v4 = sub_216BA83B0(a2);
  v5 = sub_216BA15A4(v4);
  v7 = sub_216B248E0((uint64_t)v3, v5, v6);
  v8 = sub_216B248A0((uint64_t)v7, " : ");
  v9 = sub_216BA83F4(a2);
  v10 = sub_216BA83BC(v9);
  return sub_216B248E0((uint64_t)v8, v10, v11);
}

uint64_t sub_216BA68EC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v6 = 0;
  if (!sub_216BA6D08(a1, a2, &v6))
    return sub_216BA6950(a1);
  v3 = v6;
  v4 = sub_216B5F664(a1);
  sub_216BA6E28(&v7, v3, v4, 1);
  return v7;
}

uint64_t sub_216BA6950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B5F664(a1);
  v3 = sub_216B5F664(a1);
  sub_216BA6E28(&v5, v2, v3, 1);
  return v5;
}

void **sub_216BA699C(uint64_t *a1, uint64_t a2, float *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_216B5E12C(a2);
  v7 = *a1;
  if (v6)
  {
    v8 = sub_216BA6A7C(a2);
    v10 = sub_216B248E0(v7, v8, v9);
  }
  else
  {
    sub_216B248A0(*a1, "const ");
    sub_216BA6BD4(a1, a2);
    v11 = sub_216B248A0(*a1, " ");
    v12 = sub_216BA6A7C(a2);
    sub_216B248E0((uint64_t)v11, v12, v13);
    sub_216BA6CA4(a1, a2);
    v10 = (void **)*a1;
  }
  sub_216B248A0((uint64_t)v10, " = ");
  v14 = sub_216B2037C(a2);
  return sub_216BA6ED4(a3, v14, (void **)*a1);
}

uint64_t sub_216BA6A7C(uint64_t a1)
{
  return sub_216BA7424(a1 + 8);
}

uint64_t *sub_216BA6A84(uint64_t *a1, _DWORD *a2)
{
  int v4;
  int v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t *result;
  int v10;

  v4 = sub_216B387B8((uint64_t)a2);
  sub_216BA74D4(a1, v4);
  if (sub_216BA75CC((uint64_t)a2) && (sub_216BA75D8((uint64_t)a2) & 1) == 0)
    sub_216B248A0(*a1, "invariant ");
  v5 = sub_216BA75E4(a2);
  if (v5 == 1)
  {
    v6 = "smooth ";
    goto LABEL_8;
  }
  if (v5 == 2)
  {
    v6 = "flat ";
LABEL_8:
    sub_216B248A0(*a1, v6);
  }
  v7 = sub_216BA75F0(a2);
  v8 = "in ";
  switch(v7)
  {
    case 1:
      v8 = "attribute ";
      goto LABEL_18;
    case 2:
      if ((sub_216B5E0FC((uint64_t)a2) & 1) != 0)
        goto LABEL_19;
      v8 = "const ";
LABEL_18:
      sub_216B248A0(*a1, v8);
LABEL_19:
      result = (uint64_t *)sub_216B5E120((uint64_t)a2);
      if ((_DWORD)result)
      {
        v10 = sub_216BA7620(a2);
        return sub_216BA75FC(a1, v10);
      }
      return result;
    case 3:
      goto LABEL_18;
    case 4:
      v8 = "out ";
      goto LABEL_18;
    case 5:
      v8 = "centroid in ";
      goto LABEL_18;
    case 6:
      v8 = "centroid out ";
      goto LABEL_18;
    case 7:
      v8 = "uniform ";
      goto LABEL_18;
    case 8:
      v8 = "varying ";
      goto LABEL_18;
    default:
      goto LABEL_19;
  }
}

uint64_t sub_216BA6BD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v13 = sub_216B2037C(a2);
  v4 = sub_216B1E600((uint64_t)&v13);
  v5 = sub_216BA76B8(v4);
  if (v5)
  {
    v6 = sub_216B1E67C(v5);
    sub_216BA76BC(a1, v6, a2);
  }
  else
  {
    v13 = sub_216B2037C(a2);
    v7 = sub_216B1E600((uint64_t)&v13);
    v8 = sub_216BA771C(v7);
    if (v8)
    {
      v9 = sub_216B1E67C(v8);
      sub_216BA7720(a1, v9);
    }
    else
    {
      v10 = sub_216B2037C(a2);
      sub_216BA781C(a1, v10);
    }
  }
  LODWORD(v13) = 0;
  v11 = sub_216B2037C(a2);
  result = sub_216BA7ABC(v11, &v13);
  if ((_DWORD)result)
  {
    result = sub_216BA7B18(a2);
    if ((result & 1) == 0)
      return (uint64_t)sub_216BA7B24(a1, v13);
  }
  return result;
}

void **sub_216BA6CA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void **result;
  unsigned int v6;

  v6 = 0;
  v4 = sub_216B2037C(a2);
  result = (void **)sub_216BA7ABC(v4, &v6);
  if ((_DWORD)result)
  {
    result = (void **)sub_216BA7B18(a2);
    if ((_DWORD)result)
      return sub_216BA7B24(a1, v6);
  }
  return result;
}

uint64_t sub_216BA6D08(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B512E8();
    v10 = sub_216BA5500();
    v11 = v8 - 1;
    v12 = sub_216B52378(a2) & (v8 - 1);
    v13 = (uint64_t *)(v6 + 16 * v12);
    if (sub_216B2A5FC(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (!sub_216B2A5FC(*v13, v9))
      {
        if (sub_216B2A5FC(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (uint64_t *)(v6 + 16 * v12);
        ++v15;
        if (sub_216B2A5FC(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_13:
  *a3 = v13;
  return result;
}

uint64_t sub_216BA6E2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216BA6E5C((uint64_t **)a1);
  return a1;
}

uint64_t sub_216BA6E5C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = sub_216B512EC();
  result = sub_216BA5504();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B2A5FC(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 2;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

void **sub_216BA6ED4(float *a1, uint64_t a2, void **a3)
{
  uint64_t v5;
  uint64_t v6;
  void **result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a2;
  v5 = sub_216B1E600((uint64_t)&v11);
  v6 = sub_216BA6F68(v5);
  if (v6)
    return sub_216BA6F6C(a1, v6, a3);
  v8 = sub_216B1E600((uint64_t)&v11);
  v9 = sub_216BA7040(v8);
  if (v9)
    return sub_216BA7044((uint64_t)a1, v9, a3);
  v10 = sub_216B1E600((uint64_t)&v11);
  result = (void **)sub_216BA710C(v10);
  if (result)
    return sub_216BA7110((uint64_t)a1, (uint64_t)result, a3);
  return result;
}

void **sub_216BA6F6C(float *a1, uint64_t a2, void **a3)
{
  unsigned int v7;
  char *v8;
  void **v9;
  char v10;

  if ((sub_216BD36C0(a2) & 1) != 0 || sub_216BD36E4(a2))
    return (void **)sub_216B403FC((uint64_t)a3, *a1);
  v10 = 0;
  if (sub_216BD3708(a2, &v10))
  {
    v7 = *(_DWORD *)a1;
    if (v10)
      return sub_216B2E0F8(a3, v7);
    v9 = sub_216B248D8(a3, v7);
    v8 = "U";
  }
  else
  {
    sub_216BD3748(a2);
    if (*(_BYTE *)a1)
      v8 = "true";
    else
      v8 = "false";
    v9 = a3;
  }
  return sub_216B248A0((uint64_t)v9, v8);
}

void **sub_216BA7044(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  char v10;
  float *v11;
  unsigned int v12;

  v6 = sub_216BD37EC(a2);
  v8 = sub_216B248E0((uint64_t)a3, v6, v7);
  sub_216B248A0((uint64_t)v8, "(");
  if (sub_216BA734C(a2))
  {
    v9 = 0;
    v10 = 1;
    do
    {
      if ((v10 & 1) == 0)
        sub_216B248A0((uint64_t)a3, ", ");
      v11 = (float *)sub_216BA7358(a1, v9);
      sub_216BA6F6C(v11, a2, a3);
      ++v9;
      v12 = sub_216BA734C(a2);
      v10 = 0;
    }
    while (v9 < v12);
  }
  return sub_216B248A0((uint64_t)a3, ")");
}

void **sub_216BA7110(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;

  v6 = sub_216BD37EC(a2);
  v8 = sub_216B248E0((uint64_t)a3, v6, v7);
  sub_216B248A0((uint64_t)v8, "(");
  if (sub_216BA734C(a2))
  {
    v9 = 0;
    v10 = 1;
    do
    {
      if (sub_216BA7418(a2))
      {
        v11 = 0;
        do
        {
          if ((v10 & 1) == 0)
            sub_216B248A0((uint64_t)a3, ", ");
          v12 = (float *)sub_216BA7358(a1 + 16 * v9, v11);
          sub_216BA6F6C(v12, a2, a3);
          ++v11;
          v13 = 0;
          LOBYTE(v10) = 0;
        }
        while (v11 < sub_216BA7418(a2));
      }
      else
      {
        v13 = v10;
      }
      ++v9;
      v10 = v13;
    }
    while (v9 < sub_216BA734C(a2));
  }
  return sub_216B248A0((uint64_t)a3, ")");
}

uint64_t sub_216BA7220(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA7258(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA725C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA7284(&v3);
}

uint64_t sub_216BA7284(_QWORD *a1)
{
  return sub_216BA728C(*a1);
}

BOOL sub_216BA7294(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 0;
}

uint64_t sub_216BA72B0(_BYTE *a1)
{
  return *a1 & 0xF;
}

uint64_t sub_216BA72BC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA72F4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA72F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA7320(&v3);
}

uint64_t sub_216BA7320(_QWORD *a1)
{
  return sub_216BA7328(*a1);
}

BOOL sub_216BA7330(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 1;
}

uint64_t sub_216BA734C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 2) & 7;
}

uint64_t sub_216BA7358(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_216BA7370 + 4 * byte_216C1886B[a2]))();
}

uint64_t sub_216BA7370(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_216BA7378(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_216BA7380(uint64_t a1)
{
  return a1 + 12;
}

uint64_t sub_216BA7388(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA73C0(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA73C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA73EC(&v3);
}

uint64_t sub_216BA73EC(_QWORD *a1)
{
  return sub_216BA73F4(*a1);
}

BOOL sub_216BA73FC(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 2;
}

uint64_t sub_216BA7418(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 2) >> 3) & 7;
}

uint64_t sub_216BA7428(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  if (sub_216B603D4(a1))
  {
    sub_216B1E678((int)&v5, &byte_216C19659);
  }
  else
  {
    v2 = sub_216BA7490(a1);
    v3 = sub_216BA7494(a1);
    sub_216B1E684(&v5, v2, v3);
  }
  return v5;
}

uint64_t sub_216BA7494(_QWORD *a1)
{
  if (sub_216B603D4(a1))
    return 0;
  else
    return *(unsigned int *)*a1;
}

uint64_t sub_216BA74C8(_QWORD *a1)
{
  return *a1 + 4;
}

void **sub_216BA74D4(uint64_t *a1, int a2)
{
  void **result;
  char v4;
  void **v5;
  unsigned int v6;
  char v7;
  int v8;

  v8 = a2;
  if (sub_216BA762C((unsigned __int16 *)&v8)
    || (result = (void **)sub_216BA7644((unsigned __int16 *)&v8), (_DWORD)result))
  {
    sub_216B248A0(*a1, "layout(");
    if (sub_216BA762C((unsigned __int16 *)&v8))
    {
      if (sub_216BA7650((unsigned __int16 *)&v8))
      {
        v4 = sub_216BA7674((unsigned __int16 *)&v8);
        sub_216BA765C(a1, v4);
        if (sub_216BA7680((unsigned __int16 *)&v8))
        {
          sub_216B248A0(*a1, ", ");
LABEL_9:
          v7 = sub_216BA768C((unsigned __int16 *)&v8);
          sub_216BA765C(a1, v7);
        }
      }
      else if (sub_216BA7680((unsigned __int16 *)&v8))
      {
        goto LABEL_9;
      }
    }
    else
    {
      v5 = sub_216B248A0(*a1, "location = ");
      v6 = sub_216B8B400((unsigned __int8 *)&v8);
      sub_216B248D8(v5, v6);
    }
    return sub_216B248A0(*a1, ") ");
  }
  return result;
}

uint64_t sub_216BA75CC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 2) & 1;
}

uint64_t sub_216BA75D8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 2) >> 1) & 1;
}

uint64_t sub_216BA75E4(_DWORD *a1)
{
  return (*a1 >> 18) & 3;
}

uint64_t sub_216BA75F0(_DWORD *a1)
{
  return (unsigned __int16)*a1 >> 12;
}

uint64_t *sub_216BA75FC(uint64_t *result, int a2)
{
  if ((a2 - 1) <= 2)
    return (uint64_t *)sub_216B248A0(*result, off_24D602998[a2 - 1]);
  return result;
}

uint64_t sub_216BA7620(_DWORD *a1)
{
  return (*a1 >> 20) & 3;
}

BOOL sub_216BA762C(unsigned __int16 *a1)
{
  return (((*a1 >> 9) ^ (*a1 >> 12)) & 7) != 0;
}

uint64_t sub_216BA7644(unsigned __int16 *a1)
{
  return HIBYTE(*a1) & 1;
}

BOOL sub_216BA7650(unsigned __int16 *a1)
{
  return sub_216BA7698((*a1 >> 9) & 7);
}

void **sub_216BA765C(uint64_t *a1, char a2)
{
  return sub_216B248A0(*a1, off_24D6029B0[a2 - 1]);
}

uint64_t sub_216BA7674(unsigned __int16 *a1)
{
  return (*a1 >> 9) & 7;
}

BOOL sub_216BA7680(unsigned __int16 *a1)
{
  return sub_216BA76A8((*a1 >> 12) & 7);
}

uint64_t sub_216BA768C(unsigned __int16 *a1)
{
  return (*a1 >> 12) & 7;
}

BOOL sub_216BA7698(int a1)
{
  return (a1 - 1) < 4;
}

BOOL sub_216BA76A8(int a1)
{
  return (a1 - 5) < 2;
}

void **sub_216BA76BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_216BA7C00(a3))
    return sub_216BA7C0C((uint64_t)a1, a2);
  v6 = *a1;
  v7 = sub_216BA6A7C(a2);
  return sub_216B248E0(v6, v7, v8);
}

void **sub_216BA7720(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = sub_216B34190((uint64_t)a2);
  sub_216BA74D4((uint64_t *)a1, v4);
  sub_216BA7E50(a2);
  sub_216B248A0(*(_QWORD *)a1, "uniform ");
  v5 = *(_QWORD *)a1;
  v6 = sub_216BA6A7C((uint64_t)a2);
  sub_216B248E0(v5, v6, v7);
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v8 = (uint64_t)(a2 + 4);
  v9 = (uint64_t *)sub_216B262E0((uint64_t)(a2 + 4));
  v10 = sub_216BA7E5C(v8);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    do
    {
      v12 = *v9++;
      sub_216BA7D54((void **)a1);
      sub_216BA5B0C((uint64_t *)a1, v12, 1);
    }
    while (v9 != v11);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

void **sub_216BA781C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void **v8;
  unsigned int v9;
  void **v10;
  void **result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a2;
  if (!sub_216B1E600((uint64_t)&v42))
  {
    v12 = *a1;
    v13 = " /* <> */ ";
    return sub_216B248A0(v12, v13);
  }
  v3 = sub_216B1E600((uint64_t)&v42);
  v4 = sub_216BA72BC(v3);
  if (v4)
  {
    v5 = v4;
    v6 = sub_216B1E67C(v4);
    v7 = sub_216BA7EA4(v6) - 4;
    if (v7 <= 3)
      sub_216B248A0(*a1, off_24D6029E0[v7]);
    v8 = sub_216B248A0(*a1, "vec");
    v9 = sub_216BA734C(v5);
    v10 = v8;
    return sub_216B248D8(v10, v9);
  }
  v14 = sub_216B1E600((uint64_t)&v42);
  v15 = sub_216BA710C(v14);
  if (!v15)
  {
    v21 = sub_216B1E600((uint64_t)&v42);
    v22 = sub_216BA7EB0(v21);
    if (v22)
    {
      v23 = v22;
      v24 = sub_216BA7EB4(v22) - 1;
      if (v24 <= 2)
        sub_216B248A0(*a1, off_24D602A00[v24]);
      result = (void **)sub_216BA7EC0(v23);
      if ((_DWORD)result == 1)
      {
        v12 = *a1;
        v13 = "sampler2D";
      }
      else
      {
        if ((_DWORD)result)
          return result;
        v25 = *a1;
        if (sub_216B8E76C(a1[3]))
          v13 = "vec4";
        else
          v13 = "sampler";
        v12 = v25;
      }
      return sub_216B248A0(v12, v13);
    }
    v26 = sub_216B1E600((uint64_t)&v42);
    if (sub_216BA7ECC(v26))
    {
      v12 = *a1;
      v13 = "void";
      return sub_216B248A0(v12, v13);
    }
    v27 = sub_216B1E600((uint64_t)&v42);
    v28 = sub_216BA7ED0(v27);
    if (v28)
    {
      v29 = *a1;
      v30 = sub_216BD37EC(v28);
      return sub_216B248E0(v29, v30, v31);
    }
    v32 = sub_216B1E600((uint64_t)&v42);
    v33 = sub_216BA7ED4(v32);
    if (v33)
    {
      v34 = sub_216B1E67C(v33);
    }
    else
    {
      v35 = sub_216B1E600((uint64_t)&v42);
      v36 = sub_216BA76B8(v35);
      if (v36)
      {
        v29 = *a1;
        v30 = sub_216BD3048(v36);
        return sub_216B248E0(v29, v30, v31);
      }
      v37 = sub_216B1E600((uint64_t)&v42);
      v38 = sub_216BA771C(v37);
      if (v38)
      {
        v39 = (_DWORD *)sub_216B1E67C(v38);
        return sub_216BA7720((uint64_t)a1, v39);
      }
      v40 = sub_216B1E600((uint64_t)&v42);
      v41 = sub_216BA7ED8(v40);
      if (!v41)
      {
        v12 = *a1;
        v13 = " /* <unknown> */ ";
        return sub_216B248A0(v12, v13);
      }
      v34 = sub_216B2037C(v41);
    }
    return (void **)sub_216BA781C(a1, v34);
  }
  v16 = v15;
  v17 = sub_216B1E67C(v15);
  if (sub_216BA7EA4(v17) == 4)
    sub_216B248A0(*a1, "h");
  v18 = sub_216BA7418(v16);
  v19 = sub_216BA734C(v16);
  v20 = sub_216B248A0(*a1, "mat");
  result = sub_216B248D8(v20, v19);
  if (v18 != v19)
  {
    v10 = sub_216B248A0(*a1, "x");
    v9 = v18;
    return sub_216B248D8(v10, v9);
  }
  return result;
}

uint64_t sub_216BA7ABC(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v7 = a1;
  v3 = sub_216B1E600((uint64_t)&v7);
  if ((sub_216BA81AC(v3) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = sub_216B1E600((uint64_t)&v7);
    result = sub_216BA7ED4(v5);
    if (!result)
      return result;
    v4 = sub_216B4CBC4(result);
  }
  *a2 = v4;
  return 1;
}

uint64_t sub_216BA7B18(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1) >> 2) & 1;
}

void **sub_216BA7B24(uint64_t *a1, unsigned int a2)
{
  sub_216B248A0(*a1, "[");
  if (a2)
    sub_216B248D8((void **)*a1, a2);
  return sub_216B248A0(*a1, "]");
}

uint64_t sub_216BA7B70(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA7BA8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA7BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA7BD4(&v3);
}

uint64_t sub_216BA7BD4(_QWORD *a1)
{
  return sub_216BA7BDC(*a1);
}

BOOL sub_216BA7BE4(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 5;
}

uint64_t sub_216BA7C00(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1) >> 3) & 1;
}

void **sub_216BA7C0C(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_216B248A0(*(_QWORD *)a1, "struct");
  if (sub_216BA7D08(a2))
  {
    v4 = sub_216B248A0(*(_QWORD *)a1, " ");
    v5 = sub_216BA6A7C(a2);
    sub_216B248E0((uint64_t)v4, v5, v6);
  }
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v7 = a2 + 16;
  v8 = (uint64_t *)sub_216B262E0(a2 + 16);
  v9 = sub_216BA7D24(v7);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = *v8++;
      sub_216BA7D54((void **)a1);
      sub_216BA5B0C(a1, v11, 1);
    }
    while (v8 != v10);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

BOOL sub_216BA7D08(uint64_t a1)
{
  return !sub_216B603D4((_QWORD *)(a1 + 8));
}

uint64_t sub_216BA7D24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA7DA8(a1);
}

void **sub_216BA7D54(void **result)
{
  void **v1;
  unsigned int v2;

  if (*((_DWORD *)result + 2))
  {
    v1 = result;
    v2 = 0;
    do
    {
      result = sub_216B248A0((uint64_t)*v1, "  ");
      ++v2;
    }
    while (v2 < *((_DWORD *)v1 + 2));
  }
  return result;
}

uint64_t sub_216BA7DAC(uint64_t a1)
{
  return sub_216BA7DB4((_DWORD *)(a1 - 16));
}

uint64_t sub_216BA7DB4(_DWORD *a1)
{
  return *a1 >> 10;
}

uint64_t sub_216BA7DC0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA7DF8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA7DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA7E24(&v3);
}

uint64_t sub_216BA7E24(_QWORD *a1)
{
  return sub_216BA7E2C(*a1);
}

BOOL sub_216BA7E34(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 6;
}

uint64_t sub_216BA7E50(_DWORD *a1)
{
  return (*a1 >> 10) & 7;
}

uint64_t sub_216BA7E5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA7E8C(a1);
}

uint64_t sub_216BA7E90(uint64_t a1)
{
  return sub_216BA7E98((_DWORD *)(a1 - 16));
}

uint64_t sub_216BA7E98(_DWORD *a1)
{
  return *a1 >> 13;
}

uint64_t sub_216BA7EA4(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1) & 0x7F;
}

uint64_t sub_216BA7EB4(uint64_t a1)
{
  return *(_BYTE *)(a1 + 2) & 3;
}

uint64_t sub_216BA7EC0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 2) >> 2) & 1;
}

uint64_t sub_216BA7EDC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA7F14(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA7F18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA7F40(&v3);
}

uint64_t sub_216BA7F40(_QWORD *a1)
{
  return sub_216BA7F48(*a1);
}

BOOL sub_216BA7F50(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 3;
}

uint64_t sub_216BA7F6C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA7FA4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA7FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA7FD0(&v3);
}

uint64_t sub_216BA7FD0(_QWORD *a1)
{
  return sub_216BA7FD8(*a1);
}

BOOL sub_216BA7FE0(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 4;
}

uint64_t sub_216BA7FFC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA8034(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA8038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA8060(&v3);
}

uint64_t sub_216BA8060(_QWORD *a1)
{
  return sub_216BA8068(*a1);
}

BOOL sub_216BA8070(_BYTE *a1)
{
  return sub_216BA72B0(a1) < 5;
}

uint64_t sub_216BA808C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA80C4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA80C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA80F0(&v3);
}

uint64_t sub_216BA80F0(_QWORD *a1)
{
  return sub_216BA80F8(*a1);
}

BOOL sub_216BA8100(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 7;
}

uint64_t sub_216BA811C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA8154(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA8158(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA8180(&v3);
}

uint64_t sub_216BA8180(_QWORD *a1)
{
  return sub_216BA8188(*a1);
}

BOOL sub_216BA8190(_BYTE *a1)
{
  return sub_216BA72B0(a1) == 8;
}

uint64_t sub_216BA81AC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA8154(&v2);
}

uint64_t sub_216BA81D0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1) >> 5) & 1;
}

void **sub_216BA81DC(uint64_t *a1, _DWORD *a2)
{
  void **result;

  result = (void **)sub_216BA8234(a2);
  if (((_DWORD)result - 1) <= 2)
    return sub_216B248A0(*a1, off_24D602A18[(int)result - 1]);
  return result;
}

uint64_t sub_216BA8228(_DWORD *a1)
{
  return (unsigned __int16)*a1 >> 14;
}

uint64_t sub_216BA8234(_DWORD *a1)
{
  return (*a1 >> 11) & 3;
}

uint64_t sub_216BA8240(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1) >> 4) & 1;
}

uint64_t sub_216BA824C(_DWORD *a1)
{
  return (*a1 >> 10) & 3;
}

uint64_t sub_216BA8258(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA82B0(a1);
}

uint64_t sub_216BA8288(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

void **sub_216BA8290(uint64_t *a1, int a2)
{
  uint64_t v2;
  char *v3;

  v2 = *a1;
  if (a2)
    v3 = "; ";
  else
    v3 = ";";
  return sub_216B248A0(v2, v3);
}

uint64_t sub_216BA82B4(uint64_t a1)
{
  return sub_216BA82BC(a1 - 16);
}

uint64_t sub_216BA82BC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 2);
}

void **sub_216BA82C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **result;
  void **v8;
  char *v9;
  void **v10;

  v4 = *a1;
  v5 = sub_216B38064(a2);
  sub_216B248E0(v4, v5, v6);
  result = (void **)sub_216BA835C(a2);
  if ((_DWORD)result)
  {
    v8 = sub_216B248A0(*a1, "(");
    v9 = (char *)sub_216B27CB0(a2);
    v10 = sub_216B248A0((uint64_t)v8, v9);
    return sub_216B248A0((uint64_t)v10, ")");
  }
  return result;
}

BOOL sub_216BA835C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) != 0;
}

uint64_t sub_216BA836C(_DWORD *a1)
{
  return (*a1 >> 17) & 3;
}

uint64_t sub_216BA8378(_DWORD *a1)
{
  return (*a1 >> 10) & 0x7F;
}

void **sub_216BA8384(uint64_t *a1, int a2)
{
  uint64_t v2;
  char *v3;

  v2 = *a1;
  if (a2 == 1)
    v3 = "ci_outColorF";
  else
    v3 = "ci_outColorH";
  return sub_216B248A0(v2, v3);
}

uint64_t sub_216BA83A4(unsigned __int16 *a1)
{
  return (*a1 >> 10) & 0x1F;
}

uint64_t sub_216BA83B0(_DWORD *a1)
{
  return (*a1 >> 10);
}

uint64_t sub_216BA83BC(unsigned int a1)
{
  uint64_t v2;

  if (a1 <= 4)
    sub_216B1E678((int)&v2, *((char **)&off_24D602A30 + (int)a1));
  return v2;
}

uint64_t sub_216BA83F4(_DWORD *a1)
{
  return ((int)(*a1 << 11) >> 29);
}

uint64_t sub_216BA8400(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t result;

  result = sub_216B8B400(a2);
  switch((int)result)
  {
    case 0:
      result = (uint64_t)sub_216BA8564((uint64_t)a1, (uint64_t)a2);
      break;
    case 1:
      result = (uint64_t)sub_216BA8634(a1);
      break;
    case 2:
      result = sub_216BA8644(a1, (uint64_t)a2);
      break;
    case 3:
      result = (uint64_t)sub_216BA8650(a1, (uint64_t)a2);
      break;
    case 4:
      result = sub_216BA8740(a1, (uint64_t)a2);
      break;
    case 5:
      result = (uint64_t)sub_216BA87A4(a1, (uint64_t)a2);
      break;
    case 6:
      result = (uint64_t)sub_216BA87F4(a1);
      break;
    case 7:
      result = (uint64_t)sub_216BA8804(a1, (uint64_t)a2);
      break;
    case 8:
      result = (uint64_t)sub_216BA8908(a1, (uint64_t)a2);
      break;
    case 9:
      result = (uint64_t)sub_216BA8980(a1, (uint64_t)a2);
      break;
    case 10:
      result = (uint64_t)sub_216BA8A14(a1);
      break;
    case 11:
      result = (uint64_t)sub_216BA8A48(a1);
      break;
    case 12:
      result = (uint64_t)sub_216BA8A7C(a1);
      break;
    case 13:
      result = (uint64_t)sub_216BA8AB0(a1, (uint64_t)a2);
      break;
    case 14:
      result = sub_216BA8B18((uint64_t)a1, (uint64_t)a2);
      break;
    default:
      return result;
  }
  return result;
}

void **sub_216BA8564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  sub_216B248A0(*(_QWORD *)a1, "{\n");
  ++*(_DWORD *)(a1 + 8);
  v4 = a2 + 8;
  v5 = (uint64_t *)sub_216B262E0(a2 + 8);
  v6 = sub_216BA8B44(v4);
  if (v5 != (uint64_t *)v6)
  {
    v7 = (uint64_t *)v6;
    do
    {
      v8 = *v5++;
      sub_216BA7D54((void **)a1);
      sub_216BA59B4(a1, v8);
      sub_216BA8B74((uint64_t *)a1, v8);
      sub_216B248A0(*(_QWORD *)a1, "\n");
    }
    while (v5 != v7);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

void **sub_216BA8634(uint64_t *a1)
{
  return sub_216B248A0(*a1, "/* empty */;");
}

uint64_t sub_216BA8644(uint64_t *a1, uint64_t a2)
{
  return sub_216BA5B0C(a1, a2 + 8, 0);
}

void **sub_216BA8650(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **result;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "if (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BA59CC(a1, v4);
  }
  sub_216B248A0(*a1, ") ");
  if (sub_216B2037C(a2))
  {
    v5 = sub_216B2037C(a2);
    sub_216BA59B4(a1, v5);
    v6 = sub_216B2037C(a2);
    sub_216BA8B74(a1, v6);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  result = (void **)sub_216B5EE7C(a2);
  if (result)
  {
    sub_216B248A0(*a1, " else ");
    v8 = sub_216B5EE7C(a2);
    sub_216BA59B4(a1, v8);
    v9 = sub_216B5EE7C(a2);
    return sub_216BA8B74(a1, v9);
  }
  return result;
}

uint64_t sub_216BA8740(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_216B248A0(*a1, "switch (");
  v4 = sub_216B1E67C(a2);
  sub_216BA59CC(a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  return sub_216BA59B4(a1, v5);
}

void **sub_216BA87A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "case ");
  v4 = sub_216B5EE7C(a2);
  sub_216BA59CC(a1, v4);
  return sub_216B248A0(*a1, ": ");
}

void **sub_216BA87F4(uint64_t *a1)
{
  return sub_216B248A0(*a1, "default: ");
}

void **sub_216BA8804(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "for (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BA59B4(a1, v4);
    v5 = sub_216B1E67C(a2);
    sub_216BA8B74(a1, v5);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  sub_216B248A0(*a1, " ");
  if (sub_216B2037C(a2))
  {
    v6 = sub_216B2037C(a2);
    sub_216BA59B4(a1, v6);
  }
  sub_216BA8290(a1, 1);
  if (sub_216B5EE7C(a2))
  {
    v7 = sub_216B5EE7C(a2);
    sub_216BA59CC(a1, v7);
  }
  sub_216B248A0(*a1, ") ");
  v8 = sub_216B27CB0(a2);
  sub_216BA59B4(a1, v8);
  v9 = sub_216B27CB0(a2);
  return sub_216BA8B74(a1, v9);
}

void **sub_216BA8908(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "while (");
  v4 = sub_216B1E67C(a2);
  sub_216BA59B4(a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  sub_216BA59B4(a1, v5);
  v6 = sub_216B2037C(a2);
  return sub_216BA8B74(a1, v6);
}

void **sub_216BA8980(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "do ");
  v4 = sub_216B1E67C(a2);
  sub_216BA59B4(a1, v4);
  v5 = sub_216B1E67C(a2);
  sub_216BA8B74(a1, v5);
  sub_216B248A0(*a1, " while (");
  v6 = sub_216B2037C(a2);
  sub_216BA59CC(a1, v6);
  sub_216B248A0(*a1, ")");
  return sub_216BA8290(a1, 0);
}

void **sub_216BA8A14(uint64_t *a1)
{
  sub_216B248A0(*a1, "break");
  return sub_216BA8290(a1, 0);
}

void **sub_216BA8A48(uint64_t *a1)
{
  sub_216B248A0(*a1, "continue");
  return sub_216BA8290(a1, 0);
}

void **sub_216BA8A7C(uint64_t *a1)
{
  sub_216B248A0(*a1, "discard");
  return sub_216BA8290(a1, 0);
}

void **sub_216BA8AB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "return");
  if (sub_216B1E67C(a2))
  {
    sub_216B248A0(*a1, " ");
    v4 = sub_216B1E67C(a2);
    sub_216BA59CC(a1, v4);
  }
  return sub_216BA8290(a1, 0);
}

uint64_t sub_216BA8B18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E67C(a2);
  return sub_216BA59CC(a1, v3);
}

uint64_t sub_216BA8B44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA8BB4(a1);
}

void **sub_216BA8B74(uint64_t *a1, uint64_t a2)
{
  void **result;
  uint64_t v4;

  v4 = a2;
  result = (void **)sub_216BA8BCC(&v4);
  if ((_DWORD)result)
    return sub_216BA8290(a1, 0);
  return result;
}

uint64_t sub_216BA8BB8(uint64_t a1)
{
  return sub_216BA8BC0((_DWORD *)(a1 - 8));
}

uint64_t sub_216BA8BC0(_DWORD *a1)
{
  return *a1 >> 8;
}

uint64_t sub_216BA8BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA8BF8(&v3);
}

uint64_t sub_216BA8BF8(_QWORD *a1)
{
  return sub_216BA8C00(*a1);
}

BOOL sub_216BA8C08(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 14;
}

uint64_t sub_216BA8C24(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B9E3DC(a2);
  switch((int)result)
  {
    case 0:
      result = sub_216BA8E38(a1, a2);
      break;
    case 1:
      result = sub_216BA8E7C(a1, a2);
      break;
    case 2:
      result = (uint64_t)sub_216BA8ECC(a1, a2);
      break;
    case 3:
      result = sub_216BA8F0C(a1, a2);
      break;
    case 4:
      result = sub_216BA8F5C(a1, a2);
      break;
    case 5:
      result = sub_216BA8FB8(a1, a2);
      break;
    case 6:
      result = (uint64_t)sub_216BA9044(a1, a2);
      break;
    case 7:
      result = (uint64_t)sub_216BA90CC(a1, a2);
      break;
    case 8:
      result = sub_216BA9144(a1, a2);
      break;
    case 9:
      result = (uint64_t)sub_216BA91CC(a1, a2);
      break;
    case 10:
      result = sub_216BA91F8(a2);
      break;
    case 11:
      result = (uint64_t)sub_216BA91FC(a1, a2);
      break;
    case 12:
      result = (uint64_t)sub_216BA9238(a1, a2);
      break;
    case 13:
    case 14:
    case 15:
      result = (uint64_t)sub_216BA9324(a1, a2);
      break;
    case 16:
      result = (uint64_t)sub_216BA9388(a1, a2);
      break;
    case 17:
      result = (uint64_t)sub_216BA93EC(a1, a2);
      break;
    case 18:
      result = (uint64_t)sub_216BA9428(a1, a2);
      break;
    case 19:
      result = (uint64_t)sub_216BA9534(a1, a2);
      break;
    case 20:
      result = (uint64_t)sub_216BA95F0(a1, a2);
      break;
    case 21:
    case 22:
      result = sub_216BA8B18((uint64_t)a1, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216BA8E38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD v4[4];

  v2 = *a1;
  sub_216BA96F0(a2, (uint64_t)v4);
  sub_216BA96C0(v2, v4);
  return sub_216B1D998(v4);
}

uint64_t sub_216BA8E7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD v5[4];

  v2 = *a1;
  sub_216BA96F0(a2, (uint64_t)v5);
  v3 = sub_216BA96C0(v2, v5);
  sub_216B248A0(v3, "u");
  return sub_216B1D998(v5);
}

void **sub_216BA8ECC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;

  v2 = *a1;
  if (sub_216B2A390(a2))
    v3 = "true";
  else
    v3 = "false";
  return sub_216B248A0(v2, v3);
}

uint64_t sub_216BA8F0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  _BYTE v6[24];

  sub_216BA96FC(a2, (uint64_t)v6);
  v3 = *a1;
  v4 = sub_216B1EC14((uint64_t)v6);
  sub_216B403FC(v3, v4);
  return sub_216B1D57C(v6);
}

uint64_t sub_216BA8F5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  _BYTE v7[24];

  sub_216BA96FC(a2, (uint64_t)v7);
  v3 = *a1;
  v4 = sub_216B1EC14((uint64_t)v7);
  v5 = sub_216B403FC(v3, v4);
  sub_216B248A0(v5, "h");
  return sub_216B1D57C(v7);
}

uint64_t sub_216BA8FB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;

  if (sub_216BA9708(a2))
  {
    v4 = sub_216B2037C(a2);
    sub_216BA9714((uint64_t)a1, v4);
  }
  v5 = sub_216BA9790(a2);
  if (v5 <= 6)
    sub_216B248A0(*a1, off_24D602A58[v5]);
  result = sub_216BA9708(a2);
  if ((result & 1) == 0)
  {
    v7 = sub_216B2037C(a2);
    return (uint64_t)sub_216BA9714((uint64_t)a1, v7);
  }
  return result;
}

void **sub_216BA9044(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v4 = sub_216B2037C(a2);
  sub_216BA9714((uint64_t)a1, v4);
  sub_216B248A0(*a1, " ");
  v5 = sub_216BA9A9C(a2);
  if (v5 <= 0x14)
    sub_216B248A0(*a1, off_24D602A90[v5]);
  sub_216B248A0(*a1, " ");
  v6 = sub_216B5EE7C(a2);
  return sub_216BA9714((uint64_t)a1, v6);
}

void **sub_216BA90CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_216B2037C(a2);
  sub_216BA9714((uint64_t)a1, v4);
  sub_216B248A0(*a1, " ? ");
  v5 = sub_216B5EE7C(a2);
  sub_216BA9714((uint64_t)a1, v5);
  sub_216B248A0(*a1, " : ");
  v6 = sub_216B27CB0(a2);
  return sub_216BA9714((uint64_t)a1, v6);
}

uint64_t sub_216BA9144(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v4 = sub_216B1E67C(a2);
  sub_216BA59CC(a1, v4);
  sub_216B248A0(*a1, " ");
  v5 = sub_216BA9AA8(a2);
  if (v5 <= 0xB)
    sub_216B248A0(*a1, off_24D602B38[v5]);
  sub_216B248A0(*a1, " ");
  v6 = sub_216B2037C(a2);
  return sub_216BA59CC(a1, v6);
}

void **sub_216BA91CC(uint64_t *a1, uint64_t a2)
{
  int v3;

  v3 = sub_216BA9AB4(a2);
  return sub_216BA8384(a1, v3);
}

void **sub_216BA91FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = sub_216B1E67C(a2);
  v4 = sub_216BA6A7C(v3);
  return sub_216B248E0(v2, v4, v5);
}

void **sub_216BA9238(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v12;

  v4 = sub_216B2037C(a2);
  sub_216BA781C(a1, v4);
  v12 = 0;
  v5 = sub_216B2037C(a2);
  if (sub_216BA7ABC(v5, &v12))
    sub_216BA7B24(a1, v12);
  sub_216B248A0(*a1, "(");
  v6 = a2 + 8;
  v7 = (_QWORD *)sub_216B262E0(a2 + 8);
  v8 = sub_216BA9ACC(v6);
  if (v7 != (_QWORD *)v8)
  {
    v9 = (_QWORD *)v8;
    v10 = v8 - (_QWORD)v7;
    do
    {
      sub_216BA59CC(a1, *v7);
      if (v10 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v7;
      v10 -= 8;
    }
    while (v7 != v9);
  }
  return sub_216B248A0(*a1, ")");
}

void **sub_216BA9324(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_216B2037C(a2);
  sub_216BA9714((uint64_t)a1, v4);
  v5 = sub_216B248A0(*a1, ".");
  v6 = sub_216BA9B14(a2);
  return sub_216B248E0((uint64_t)v5, v6, v7);
}

void **sub_216BA9388(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B2037C(a2);
  sub_216BA9714((uint64_t)a1, v4);
  sub_216B248A0(*a1, "[");
  v5 = sub_216B5EE7C(a2);
  sub_216BA59CC(a1, v5);
  return sub_216B248A0(*a1, "]");
}

void **sub_216BA93EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B2037C(a2);
  sub_216BA9714((uint64_t)a1, v3);
  return sub_216B248A0(*a1, ".length()");
}

void **sub_216BA9428(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (sub_216B8E76C(a1[3]) && sub_216BA9AB4(a2) == 1)
  {
    v4 = *(_QWORD *)sub_216BA9B1C(a2 + 8, 0);
    return (void **)sub_216BA59CC(a1, v4);
  }
  else
  {
    v6 = sub_216BA9AB4(a2);
    v7 = sub_216B248A0(*a1, off_24D602B98[v6 - 1]);
    sub_216B248A0((uint64_t)v7, "(");
    v8 = a2 + 8;
    v9 = (_QWORD *)sub_216B262E0(a2 + 8);
    v10 = sub_216BA9B40(v8);
    if (v9 != (_QWORD *)v10)
    {
      v11 = (_QWORD *)v10;
      v12 = v10 - (_QWORD)v9;
      do
      {
        sub_216BA59CC(a1, *v9);
        if (v12 >= 9)
          sub_216B248A0(*a1, ", ");
        ++v9;
        v12 -= 8;
      }
      while (v9 != v11);
    }
    return sub_216B248A0(*a1, ")");
  }
}

void **sub_216BA9534(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = sub_216BA9B84(a2);
  sub_216B248A0(*a1, off_24D602BC0[v4 - 1]);
  v5 = a2 + 8;
  v6 = (_QWORD *)sub_216B262E0(a2 + 8);
  v7 = sub_216BA9B90(v5);
  if (v6 != (_QWORD *)v7)
  {
    v8 = (_QWORD *)v7;
    v9 = v7 - (_QWORD)v6;
    do
    {
      sub_216BA59CC(a1, *v6);
      if (v9 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v6;
      v9 -= 8;
    }
    while (v6 != v8);
  }
  return sub_216B248A0(*a1, ")");
}

void **sub_216BA95F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *a1;
  v5 = sub_216B2037C(a2);
  v6 = sub_216BA6A7C(v5);
  v8 = sub_216B248E0(v4, v6, v7);
  sub_216B248A0((uint64_t)v8, "(");
  v9 = a2 + 8;
  v10 = (_QWORD *)sub_216B262E0(a2 + 8);
  v11 = sub_216BA9BD8(v9);
  if (v10 != (_QWORD *)v11)
  {
    v12 = (_QWORD *)v11;
    v13 = v11 - (_QWORD)v10;
    do
    {
      sub_216BA59CC(a1, *v10);
      if (v13 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v10;
      v13 -= 8;
    }
    while (v10 != v12);
  }
  return sub_216B248A0(*a1, ")");
}

uint64_t sub_216BA96C0(uint64_t a1, _DWORD *a2)
{
  sub_216B24968(a2, a1, 1);
  return a1;
}

uint64_t sub_216BA96F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B1E51C(a2, a1 + 16);
}

uint64_t sub_216BA96FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B1D8F0(a2, a1 + 16);
}

uint64_t sub_216BA9708(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 4) >> 14) & 1;
}

void **sub_216BA9714(uint64_t a1, uint64_t a2)
{
  void **result;

  if (*(_BYTE *)(a1 + 12) && sub_216BA979C(a2))
    sub_216B248A0(*(_QWORD *)a1, "(");
  result = (void **)sub_216BA59CC(a1, a2);
  if (*(_BYTE *)(a1 + 12))
  {
    result = (void **)sub_216BA979C(a2);
    if ((_DWORD)result)
      return sub_216B248A0(*(_QWORD *)a1, ")");
  }
  return result;
}

uint64_t sub_216BA9790(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 4) >> 11) & 7;
}

uint64_t sub_216BA979C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  while (1)
  {
    v1 = a1;
    v2 = sub_216BA981C(a1);
    if (!v2)
    {
      v2 = sub_216BA9854(v1);
      if (!v2)
        break;
    }
    a1 = sub_216B1E67C(v2);
  }
  v4 = v1;
  if ((sub_216BA988C(&v4) & 1) != 0 || (sub_216BA9890(&v4) & 1) != 0 || (sub_216BA9894(&v4) & 1) != 0)
    return 1;
  else
    return sub_216BA9898(&v4);
}

uint64_t sub_216BA981C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA989C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA9854(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA98F4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BA98A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA98C8(&v3);
}

uint64_t sub_216BA98C8(_QWORD *a1)
{
  return sub_216BA98D0(*a1);
}

BOOL sub_216BA98D8(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 21;
}

uint64_t sub_216BA98F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9920(&v3);
}

uint64_t sub_216BA9920(_QWORD *a1)
{
  return sub_216BA9928(*a1);
}

BOOL sub_216BA9930(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 22;
}

uint64_t sub_216BA994C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9974(&v3);
}

uint64_t sub_216BA9974(_QWORD *a1)
{
  return sub_216BA997C(*a1);
}

BOOL sub_216BA9984(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 6;
}

uint64_t sub_216BA99A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA99C8(&v3);
}

uint64_t sub_216BA99C8(_QWORD *a1)
{
  return sub_216BA99D0(*a1);
}

BOOL sub_216BA99D8(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 5;
}

uint64_t sub_216BA99F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9A1C(&v3);
}

uint64_t sub_216BA9A1C(_QWORD *a1)
{
  return sub_216BA9A24(*a1);
}

BOOL sub_216BA9A2C(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 7;
}

uint64_t sub_216BA9A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9A70(&v3);
}

uint64_t sub_216BA9A70(_QWORD *a1)
{
  return sub_216BA9A78(*a1);
}

BOOL sub_216BA9A80(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 8;
}

uint64_t sub_216BA9A9C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 4) >> 11;
}

uint64_t sub_216BA9AA8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) >> 11) & 0xF;
}

uint64_t sub_216BA9AB4(uint64_t a1)
{
  return (unsigned __int16)*(_DWORD *)(a1 + 4) >> 11;
}

uint64_t sub_216BA9AC0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) >> 11) & 0x3F;
}

uint64_t sub_216BA9ACC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA9AFC(a1);
}

uint64_t sub_216BA9B00(uint64_t a1)
{
  return sub_216BA9B08(a1 - 8);
}

uint64_t sub_216BA9B08(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) >> 13;
}

uint64_t sub_216BA9B14(uint64_t a1)
{
  return sub_216BA7424(a1 + 24);
}

uint64_t sub_216BA9B1C(uint64_t a1, unsigned int a2)
{
  return sub_216B262E0(a1) + 8 * a2;
}

uint64_t sub_216BA9B40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA9B70(a1);
}

uint64_t sub_216BA9B74(uint64_t a1)
{
  return sub_216BA9B7C(a1 - 8);
}

uint64_t sub_216BA9B7C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 6);
}

uint64_t sub_216BA9B84(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) >> 11) & 0x7F;
}

uint64_t sub_216BA9B90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA9BC0(a1);
}

uint64_t sub_216BA9BC4(uint64_t a1)
{
  return sub_216BA9BCC(a1 - 8);
}

uint64_t sub_216BA9BCC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) >> 18;
}

uint64_t sub_216BA9BD8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216BA9C08(a1);
}

uint64_t sub_216BA9C0C(uint64_t a1)
{
  return sub_216BA9C14(a1 - 8);
}

uint64_t sub_216BA9C14(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) >> 11;
}

uint64_t *sub_216BA9C24(uint64_t *a1, _QWORD *a2)
{
  *a1 = sub_216B4B51C(a2, (uint64_t)a2);
  a1[1] = sub_216B2E220(a2);
  return a1;
}

uint64_t sub_216BA9C64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BA9C60();
  return v2 + 8 * sub_216BA8BB4(a1);
}

uint64_t sub_216BA9C94(unsigned __int8 *a1)
{
  uint64_t v2;

  if (sub_216B5F840(a1))
    return sub_216BA9CCC(a1, v2);
  else
    return j_nullsub_1(a1, v2);
}

uint64_t sub_216BA9CCC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B5F264(a1, a2);
  return nullsub_1(v2, v3);
}

BOOL sub_216BA9CE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BA9D08(a1);
  return sub_216BAC888(a1 + 176, v2);
}

uint64_t sub_216BA9D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = sub_216BA5BE0(a1);
  v12[1] = v1;
  v2 = (uint64_t *)sub_216B1E600((uint64_t)v12);
  v3 = sub_216B35430(v12);
  if (v2 == (uint64_t *)v3)
    return 0;
  v4 = (uint64_t *)v3;
  while (1)
  {
    v5 = *v2;
    v6 = (uint64_t *)sub_216BA5E50(*v2);
    v7 = sub_216BA5E54(v5);
    if (v6 != (uint64_t *)v7)
      break;
LABEL_8:
    if (++v2 == v4)
      return 0;
  }
  v8 = (uint64_t *)v7;
  while (1)
  {
    v11 = 0;
    v11 = *v6;
    if (sub_216BA9DCC(&v11))
    {
      v9 = sub_216B3DB48(v11);
      if ((sub_216BA9DD0(v9) & 1) != 0)
        return sub_216B3DB48(v11);
    }
    if (++v6 == v8)
      goto LABEL_8;
  }
}

uint64_t sub_216BA9DD0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_216BA9DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9E00(&v3);
}

uint64_t sub_216BA9E00(_QWORD *a1)
{
  return sub_216BA9E08(*a1);
}

BOOL sub_216BA9E10(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 2;
}

uint64_t sub_216BA9E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9E64(&v3);
}

uint64_t sub_216BA9E64(_QWORD *a1)
{
  return sub_216BA9E6C(*a1);
}

BOOL sub_216BA9E74(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 5;
}

uint64_t sub_216BA9E90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9EB8(&v3);
}

uint64_t sub_216BA9EB8(_QWORD *a1)
{
  return sub_216BA9EC0(*a1);
}

BOOL sub_216BA9EC8(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 7;
}

uint64_t sub_216BA9EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9F0C(&v3);
}

uint64_t sub_216BA9F0C(_QWORD *a1)
{
  return sub_216BA9F14(*a1);
}

BOOL sub_216BA9F1C(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 8;
}

uint64_t sub_216BA9F38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9F60(&v3);
}

uint64_t sub_216BA9F60(_QWORD *a1)
{
  return sub_216BA9F68(*a1);
}

BOOL sub_216BA9F70(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 4;
}

BOOL sub_216BA9F8C(uint64_t a1, uint64_t a2)
{
  return sub_216BA9FAC(a1 + 88, a2);
}

BOOL sub_216BA9FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a2, a2);
  return sub_216BA9FDC(a1, v3);
}

BOOL sub_216BA9FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (!sub_216B2CB2C((_QWORD *)a1))
    return *sub_216B2CC2C(a1, a2) == a2;
  v4 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(uint64_t **)a1;
  v6 = 8 * v4 - 8;
  do
  {
    v7 = *v5++;
    result = v7 == a2;
    v9 = v7 == a2 || v6 == 0;
    v6 -= 8;
  }
  while (!v9);
  return result;
}

uint64_t sub_216BAA054(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = sub_216B1E600(*(_QWORD *)a1);
  result = sub_216BA9DCC(v3);
  if ((result & 1) == 0)
  {
    v5 = sub_216B1E600(*(_QWORD *)a1);
    result = sub_216BA9E30(v5);
    if ((result & 1) == 0)
    {
      v6 = sub_216B1E600(*(_QWORD *)a1);
      result = sub_216BA9E34(v6);
      if ((result & 1) == 0)
        result = (uint64_t)sub_216BA8290(v2, 0);
    }
  }
  if (**(_BYTE **)(a1 + 16))
    return (uint64_t)sub_216B248A0(*v2, "\n");
  return result;
}

uint64_t sub_216BAA0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAA100(&v3);
}

uint64_t sub_216BAA100(_QWORD *a1)
{
  return sub_216BAA108(*a1);
}

BOOL sub_216BAA110(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 0;
}

uint64_t sub_216BAA12C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAA154(&v3);
}

uint64_t sub_216BAA154(_QWORD *a1)
{
  return sub_216BAA15C(*a1);
}

BOOL sub_216BAA164(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 6;
}

BOOL sub_216BAA180(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BAA1A8(a1, v2);
}

BOOL sub_216BAA1A8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  _BYTE v5[144];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  sub_216BAA2C8((uint64_t)v5, a2);
  sub_216BAA2CC(v5, a1);
  v3 = sub_216BAA2D0((uint64_t)v5);
  sub_216BAA2E0(v5);
  return v3;
}

BOOL sub_216BAA224(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BAA24C(a1, v2);
}

BOOL sub_216BAA24C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  _BYTE v5[144];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  sub_216BAA2C8((uint64_t)v5, a2);
  sub_216BAA2E4(v5, a1);
  v3 = sub_216BAA2D0((uint64_t)v5);
  sub_216BAA2E0(v5);
  return v3;
}

BOOL sub_216BAA2D0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 128) == 0;
}

BOOL sub_216BAA2E8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _BYTE v4[144];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  sub_216BAA2C8((uint64_t)v4, a2);
  sub_216BAA364((uint64_t)v4);
  v2 = sub_216BAA2D0((uint64_t)v4);
  sub_216BAA2E0(v4);
  return v2;
}

BOOL sub_216BAA368(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  _BYTE v5[144];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  sub_216BAA2C8((uint64_t)v5, a2);
  sub_216BAA3E4((uint64_t)v5, a1);
  v3 = sub_216BAA2D0((uint64_t)v5);
  sub_216BAA2E0(v5);
  return v3;
}

uint64_t sub_216BAA3E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;

  v4 = (uint64_t *)sub_216BA5E50(a2);
  result = sub_216BA5E54(a2);
  if (v4 != (uint64_t *)result)
  {
    v6 = (uint64_t *)result;
    do
    {
      v7 = *v4++;
      result = sub_216BAA2CC(a1, v7);
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t sub_216BAA440(uint64_t a1, uint64_t a2)
{
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_216BAA4F0(v7, a1);
  sub_216BAA4F4(v6, a1);
  sub_216BAA4F8(v5, a1);
  sub_216BAA4FC(a1, v7, v6, v5);
  sub_216BA5334(v5);
  sub_216BA5334(v6);
  sub_216BA5334(v7);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a2;
  return a1;
}

uint64_t sub_216BAA500(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BAA524(a1, &v3);
}

uint64_t sub_216BAA52C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BAA554();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BAA558(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA5A4(a1);
  *v6 = &off_24D602E20;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

_QWORD *sub_216BAA5A4(_QWORD *result)
{
  *result = &unk_24D602E68;
  return result;
}

void sub_216BAA5C0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_1();
  j__free(v0);
}

uint64_t sub_216BAA5D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BAA554(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BAA648(uint64_t a1, uint64_t a2)
{
  return sub_216BAA554(a2, a1 + 8);
}

uint64_t sub_216BAA65C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BAA664(uint64_t a1)
{
  return sub_216BAA7BC(a1 + 8);
}

uint64_t sub_216BAA674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B514B8(a2);
  sub_216BAA6B8(a3);
  return sub_216BAA6DC(a1, v5);
}

uint64_t sub_216BAA6B8(uint64_t a1)
{
  _BYTE v2[8];

  return sub_216B51A78(v2, a1);
}

_QWORD *sub_216BAA6E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  *a1 = *(_QWORD *)sub_216B262E0((uint64_t)&v4);
  return a1;
}

uint64_t sub_216BAA720()
{
  return sub_216B25CA0(16, 8);
}

uint64_t sub_216BAA72C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  return v1;
}

uint64_t *sub_216BAA740(uint64_t *a1)
{
  sub_216BAA764(a1);
  return a1;
}

uint64_t *sub_216BAA764(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = sub_216B3DBD0((uint64_t)result);
    return (uint64_t *)sub_216BAA79C(v2, v1);
  }
  return result;
}

uint64_t sub_216BAA79C(uint64_t a1, uint64_t a2)
{
  return sub_216BAA7AC(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216BAA7B0(uint64_t a1, uint64_t a2)
{
  return sub_216B25C38(a1, 16 * a2, 8);
}

BOOL sub_216BAA7C8(uint64_t *a1)
{
  return sub_216BAA2D0(*a1);
}

uint64_t sub_216BAA7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BAA7F4(a1, &v3);
}

uint64_t sub_216BAA7FC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BAA824();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BAA828(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA874(a1);
  *v6 = &off_24D602EB0;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

_QWORD *sub_216BAA874(_QWORD *result)
{
  *result = &unk_24D602EF8;
  return result;
}

void sub_216BAA88C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_2();
  j__free(v0);
}

uint64_t sub_216BAA8A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BAA824(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BAA914(uint64_t a1, uint64_t a2)
{
  return sub_216BAA824(a2, a1 + 8);
}

uint64_t sub_216BAA928(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BAA930(uint64_t a1)
{
  return sub_216BAA940(a1 + 8);
}

uint64_t sub_216BAA948(uint64_t *a1, uint64_t *a2)
{
  return sub_216BAA950(a1, *a2);
}

uint64_t sub_216BAA950(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BAA2D0(*a1);
  if ((_DWORD)result)
    return sub_216BAA988(a2);
  return result;
}

uint64_t sub_216BAA988(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA9E2C(&v2) ^ 1;
}

uint64_t sub_216BAA9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BAA9D4(a1, &v3);
}

uint64_t sub_216BAA9DC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BAAA04();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BAAA08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &off_24D602F40;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

_QWORD *sub_216BAAA54(_QWORD *result)
{
  *result = &unk_24D602F88;
  return result;
}

void sub_216BAAA6C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_3();
  j__free(v0);
}

uint64_t sub_216BAAA80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BAAA04(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BAAAF4(uint64_t a1, uint64_t a2)
{
  return sub_216BAAA04(a2, a1 + 8);
}

uint64_t sub_216BAAB08(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BAAB10(uint64_t a1)
{
  return sub_216BAAB20(a1 + 8);
}

unint64_t sub_216BAAB28(uint64_t *a1, uint64_t *a2)
{
  return sub_216BAAB30(a1, *a2);
}

unint64_t sub_216BAAB30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;

  v3 = *a1;
  result = sub_216BAA2D0(*a1);
  if ((_DWORD)result)
    return sub_216BAAB70(v3, a2);
  return result;
}

unint64_t sub_216BAAB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned __int8 *v41;
  unint64_t result;
  uint64_t v43[2];
  uint64_t v44[2];
  uint64_t v45[2];
  uint64_t v46[2];
  uint64_t v47[2];
  uint64_t v48[2];
  uint64_t v49[2];

  v4 = sub_216BA981C(a2);
  if (v4)
  {
    v5 = v4;
    v6 = sub_216BAAEAC(v4);
    v7 = sub_216B1E67C(v5);
    if (v6 == sub_216BAAEAC(v7))
    {
      sub_216B1E678((int)v49, "precision convert to same precision");
      sub_216BAAEB8(a1, v49[0], v49[1], v5);
    }
  }
  v8 = sub_216BAAF30(a2);
  if (v8)
  {
    v9 = v8;
    v10 = sub_216B1E67C(v8);
    if (sub_216BAAF68(v10) != 1)
    {
      sub_216B1E678((int)v48, "non-lvalue in assignment node");
      sub_216BAAEB8(a1, v48[0], v48[1], v9);
    }
    if (!sub_216BA9AA8(v9))
    {
      sub_216B1E678((int)v47, "unspecified assignment operator");
      sub_216BAAEB8(a1, v47[0], v47[1], v9);
    }
    v11 = sub_216BA9AA8(v9);
    v12 = sub_216B1E67C(v9);
    if (v11 == 4)
    {
      v13 = sub_216B2037C(v9);
      sub_216BAAF74(a1, v9, v12, v13);
    }
    else
    {
      sub_216BAAFB0(a1, v9, v12);
      v14 = sub_216BAB0C0(v9);
      v15 = sub_216B2037C(v9);
      sub_216BAB048(a1, v14, v15);
    }
  }
  v16 = sub_216BAB0CC(a2);
  if (v16)
  {
    v17 = v16;
    if (sub_216BAB104(v16))
    {
      v18 = sub_216B2037C(v17);
      v19 = sub_216B5EE7C(v17);
      sub_216BAAF74(a1, v17, v18, v19);
    }
    if (!sub_216BA9A9C(v17))
    {
      sub_216B1E678((int)v46, "No opcode");
      sub_216BAAEB8(a1, v46[0], v46[1], v17);
    }
  }
  v20 = sub_216BAB130(a2);
  if (v20)
  {
    v21 = v20;
    v22 = sub_216B2037C(v20);
    sub_216BAAFB0(a1, v21, v22);
    if (!sub_216BA9790(v21))
    {
      sub_216B1E678((int)v45, "No opcode");
      sub_216BAAEB8(a1, v45[0], v45[1], v21);
    }
  }
  v23 = sub_216BAB168(a2);
  if (v23)
  {
    v24 = v23;
    v25 = sub_216B5EE7C(v23);
    v26 = sub_216B27CB0(v24);
    sub_216BAAF74(a1, v24, v25, v26);
  }
  v27 = sub_216BAB1A0(a2);
  if (v27)
  {
    v28 = v27;
    v29 = v27 + 8;
    v30 = (uint64_t *)sub_216B262E0(v27 + 8);
    v31 = sub_216BA9ACC(v29);
    if (v30 != (uint64_t *)v31)
    {
      v32 = (uint64_t *)v31;
      do
      {
        v33 = *v30++;
        sub_216BAAFB0(a1, v28, v33);
      }
      while (v30 != v32);
    }
  }
  v34 = sub_216BAB1D8(a2);
  if (v34)
  {
    v35 = v34;
    v36 = (unsigned __int16 *)sub_216B1E67C(v34);
    if ((sub_216BA7644(v36) & 1) == 0)
    {
      sub_216B1E678((int)v44, "variable marked unused in AST");
      v37 = (unsigned __int8 *)sub_216B1E67C(v35);
      sub_216BAB210(a1, v44[0], v44[1], v37);
    }
  }
  v38 = sub_216BAB288(a2);
  if (v38)
  {
    v39 = v38;
    v40 = (unsigned __int16 *)sub_216B2037C(v38);
    if ((sub_216BA7644(v40) & 1) == 0)
    {
      sub_216B1E678((int)v43, "function marked unused in AST");
      v41 = (unsigned __int8 *)sub_216B2037C(v39);
      sub_216BAB210(a1, v43[0], v43[1], v41);
    }
  }
  result = sub_216BAA2D0(a1);
  if ((_DWORD)result)
    return sub_216BAB104(a2);
  return result;
}

uint64_t sub_216BAAEAC(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 4) >> 9) & 3;
}

void **sub_216BAAEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v8;

  *(_BYTE *)(a1 + 128) = 1;
  v8 = sub_216B248A0(*(_QWORD *)(a1 + 136), " * Verify error: ");
  sub_216B248E0((uint64_t)v8, a2, a3);
  sub_216B248A0(*(_QWORD *)(a1 + 136), "\n  ");
  sub_216BA5934(a4);
  return sub_216B248A0(*(_QWORD *)(a1 + 136), "\n");
}

uint64_t sub_216BAAF30(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA9898(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BAAF68(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 4)) & 1;
}

void **sub_216BAAF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_216BAAFB0(a1, a2, a3);
  return sub_216BAAFB0(a1, a2, a4);
}

void **sub_216BAAFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **result;
  int v7;
  uint64_t v8[2];

  sub_216BAB2C0(a1, a2);
  sub_216BAB2C0(a1, a3);
  result = (void **)sub_216BAB104(a2);
  if ((_DWORD)result)
  {
    result = (void **)sub_216BAB104(a3);
    if ((_DWORD)result)
    {
      v7 = sub_216BAAEAC(a2);
      result = (void **)sub_216BAAEAC(a3);
      if (v7 != (_DWORD)result)
      {
        sub_216B1E678((int)v8, "precision mismatch");
        return sub_216BAAEB8(a1, v8[0], v8[1], a2);
      }
    }
  }
  return result;
}

void **sub_216BAB048(uint64_t a1, int a2, uint64_t a3)
{
  void **result;
  uint64_t v7[2];

  sub_216BAB2C0(a1, a3);
  result = (void **)sub_216BAB104(a3);
  if ((_DWORD)result)
  {
    result = (void **)sub_216BAAEAC(a3);
    if ((_DWORD)result != a2)
    {
      sub_216B1E678((int)v7, "precision mismatch");
      return sub_216BAAEB8(a1, v7[0], v7[1], a3);
    }
  }
  return result;
}

uint64_t sub_216BAB0C0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) >> 15) & 3;
}

uint64_t sub_216BAB0CC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA988C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

unint64_t sub_216BAB104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_216BAB358(a1);
  v1 = sub_216B1E600((uint64_t)&v3);
  return sub_216BD2FB4(v1);
}

uint64_t sub_216BAB130(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA9890(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BAB168(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA9894(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BAB1A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAB6B0(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BAB1D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAB708(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

void **sub_216BAB210(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  void **v8;

  *(_BYTE *)(a1 + 128) = 1;
  v8 = sub_216B248A0(*(_QWORD *)(a1 + 136), " * Verify error: ");
  sub_216B248E0((uint64_t)v8, a2, a3);
  sub_216B248A0(*(_QWORD *)(a1 + 136), "\n  ");
  sub_216BA586C(a4);
  return sub_216B248A0(*(_QWORD *)(a1 + 136), "\n");
}

uint64_t sub_216BAB288(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAB760(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

void **sub_216BAB2C0(uint64_t a1, uint64_t a2)
{
  void **result;
  uint64_t v5[2];
  uint64_t v6[2];

  if ((sub_216BAB104(a2) & 1) == 0 && sub_216BAAEAC(a2))
  {
    sub_216B1E678((int)v6, "precision set on invalid expression");
    sub_216BAAEB8(a1, v6[0], v6[1], a2);
  }
  result = (void **)sub_216BAB104(a2);
  if ((_DWORD)result)
  {
    result = (void **)sub_216BAAEAC(a2);
    if (!(_DWORD)result)
    {
      sub_216B1E678((int)v5, "precision not set on expression");
      return sub_216BAAEB8(a1, v5[0], v5[1], a2);
    }
  }
  return result;
}

uint64_t sub_216BAB358(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216B9E3DC(a1);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      v3 = sub_216B3DB48(a1);
      result = sub_216B1E67C(v3);
      break;
    case 8:
    case 21:
      v4 = sub_216B3DB48(a1);
      result = sub_216BAB568(v4);
      break;
    case 11:
      v5 = sub_216B3DB48(a1);
      result = sub_216BAB570(v5);
      break;
    case 12:
    case 18:
    case 19:
    case 22:
      v6 = sub_216B3DB48(a1);
      result = sub_216B2037C(v6);
      break;
    case 20:
      v7 = sub_216B3DB48(a1);
      result = sub_216BAB578(v7);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216BAB568(uint64_t a1)
{
  return sub_216BAB358(*(_QWORD *)(a1 + 8));
}

uint64_t sub_216BAB570(uint64_t a1)
{
  return sub_216BAB580(*(unsigned __int8 **)(a1 + 8));
}

uint64_t sub_216BAB578(uint64_t a1)
{
  return sub_216B939E0(*(_QWORD *)(a1 + 16));
}

uint64_t sub_216BAB580(unsigned __int8 *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  while (2)
  {
    result = sub_216B8B400(a1);
    switch((int)result)
    {
      case 0:
      case 1:
        v3 = sub_216B3DB48((uint64_t)a1);
        result = sub_216B2037C(v3);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        a1 = (unsigned __int8 *)sub_216B3DB48((uint64_t)a1);
        continue;
      case 9:
      case 10:
        v4 = sub_216B3DB48((uint64_t)a1);
        result = sub_216BAB688(v4);
        break;
      default:
        return result;
    }
    break;
  }
  return result;
}

uint64_t sub_216BAB688(uint64_t a1)
{
  uint64_t v2;

  sub_216B20C64(&v2, a1 + 40);
  return v2;
}

uint64_t sub_216BAB6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAB6DC(&v3);
}

uint64_t sub_216BAB6DC(_QWORD *a1)
{
  return sub_216BAB6E4(*a1);
}

BOOL sub_216BAB6EC(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 12;
}

uint64_t sub_216BAB70C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAB734(&v3);
}

uint64_t sub_216BAB734(_QWORD *a1)
{
  return sub_216BAB73C(*a1);
}

BOOL sub_216BAB744(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 11;
}

uint64_t sub_216BAB764(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAB78C(&v3);
}

uint64_t sub_216BAB78C(_QWORD *a1)
{
  return sub_216BAB794(*a1);
}

BOOL sub_216BAB79C(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 20;
}

uint64_t sub_216BAB7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v9[32];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = ((uint64_t (*)(void))sub_216BAB860)();
  sub_216BAB860(v7 + 32, a3);
  sub_216BAB860(a1 + 64, a4);
  sub_216BAB860(v9, a1 + 64);
  sub_216BAB864(a1 + 96, v9);
  sub_216BA5334(v9);
  return a1;
}

uint64_t sub_216BAB870(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      v5 = nullsub_1(a1, a2);
      *(_QWORD *)(a1 + 24) = v5;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v5);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_216BAB8E8(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;

  v2 = (char *)sub_216BAB920 + 4 * byte_216C188B7[sub_216B8B400(a2)];
  __asm { BR              X10 }
}

uint64_t sub_216BAB920()
{
  uint64_t v0;
  uint64_t v1;

  return sub_216BAB9FC(v1, v0);
}

uint64_t sub_216BAB934()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BABA4C)(v1, v0);
}

uint64_t sub_216BAB948()
{
  uint64_t v0;
  uint64_t v1;

  return sub_216BABA50(v1, v0);
}

void sub_216BAB95C()
{
  uint64_t v0;
  uint64_t v1;

  ((void (*)(uint64_t, uint64_t))sub_216BABAE4)(v1, v0);
}

uint64_t sub_216BAB970()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BABA4C)(v1, v0);
}

uint64_t sub_216BAB984()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BABA4C)(v1, v0);
}

uint64_t sub_216BAB998()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BABA4C)(v1, v0);
}

uint64_t sub_216BAB9AC()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BABA4C)(v1, v0);
}

uint64_t sub_216BAB9C0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_216BABAE8(v1, v0);
}

uint64_t sub_216BAB9D4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_216BABB88(v1, v0);
}

uint64_t sub_216BAB9E8()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BABA4C)(v1, v0);
}

uint64_t sub_216BAB9FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    result = sub_216B5EE7C(a2);
    if (result)
    {
      sub_216B5EE7C(a2);
      return sub_216BABC4C(a1);
    }
  }
  return result;
}

uint64_t sub_216BABA50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    v5 = (uint64_t *)sub_216B262E0(a2 + 16);
    v6 = sub_216BA8258(a2 + 16);
    if (v5 != (uint64_t *)v6)
    {
      v7 = (uint64_t *)v6;
      do
      {
        v8 = *v5++;
        sub_216BAB8E4(a1, v8);
      }
      while (v5 != v7);
    }
    result = sub_216BA8288(a2);
    if (result)
    {
      v9 = sub_216BA8288(a2);
      return sub_216BAC1EC(a1, v9);
    }
  }
  return result;
}

uint64_t sub_216BABAE8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    v5 = a2 + 16;
    v6 = (uint64_t *)sub_216B262E0(a2 + 16);
    result = sub_216BA7D24(v5);
    if (v6 != (uint64_t *)result)
    {
      v7 = (uint64_t *)result;
      do
      {
        v8 = *v6;
        v9 = (uint64_t *)sub_216BA5E50(*v6);
        result = sub_216BA5E54(v8);
        for (i = (uint64_t *)result; v9 != i; result = sub_216BAB8E4(a1, v11))
          v11 = *v9++;
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BABB88(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    v5 = a2 + 16;
    v6 = (uint64_t *)sub_216B262E0(a2 + 16);
    result = sub_216BA7E5C(v5);
    if (v6 != (uint64_t *)result)
    {
      v7 = (uint64_t *)result;
      do
      {
        v8 = *v6;
        v9 = (uint64_t *)sub_216BA5E50(*v6);
        result = sub_216BA5E54(v8);
        for (i = (uint64_t *)result; v9 != i; result = sub_216BAB8E4(a1, v11))
          v11 = *v9++;
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BABC28(uint64_t a1)
{
  return sub_216BABC54(a1);
}

uint64_t sub_216BABC4C(uint64_t a1)
{
  return sub_216BABC8C(a1 + 96);
}

uint64_t sub_216BABC54(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_216BABC78();
  return sub_216BABC78();
}

uint64_t sub_216BABC78()
{
  uint64_t v0;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return sub_216BABC8C(v0);
}

uint64_t sub_216BABC90(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B9E3DC(a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
    case 10:
    case 11:
      result = sub_216BABA4C(a1, a2);
      break;
    case 5:
    case 13:
    case 14:
    case 15:
    case 17:
      result = sub_216BABEA8(a1, a2);
      break;
    case 6:
    case 16:
      result = sub_216BABEEC(a1, a2);
      break;
    case 7:
      result = sub_216BABF44(a1, a2);
      break;
    case 8:
      result = sub_216BABFB0(a1, a2);
      break;
    case 12:
      result = sub_216BAC008(a1, a2);
      break;
    case 18:
      result = sub_216BAC070(a1, a2);
      break;
    case 19:
      result = sub_216BAC0D8(a1, a2);
      break;
    case 20:
      result = sub_216BAC140(a1, a2);
      break;
    case 21:
    case 22:
      result = sub_216BAC1A8(a1, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216BABEA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    sub_216B2037C(a2);
    return sub_216BABC8C(a1);
  }
  return result;
}

uint64_t sub_216BABEEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    sub_216B2037C(a2);
    sub_216BABC8C(a1);
    sub_216B5EE7C(a2);
    return sub_216BABC8C(a1);
  }
  return result;
}

uint64_t sub_216BABF44(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    sub_216B2037C(a2);
    sub_216BABC8C(a1);
    sub_216B5EE7C(a2);
    sub_216BABC8C(a1);
    sub_216B27CB0(a2);
    return sub_216BABC8C(a1);
  }
  return result;
}

uint64_t sub_216BABFB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    sub_216B1E67C(a2);
    sub_216BABC8C(a1);
    sub_216B2037C(a2);
    return sub_216BABC8C(a1);
  }
  return result;
}

uint64_t sub_216BAC008(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    v5 = a2 + 8;
    v6 = sub_216B262E0(a2 + 8);
    result = sub_216BA9ACC(v5);
    if (v6 != result)
    {
      v7 = result;
      do
      {
        v6 += 8;
        result = sub_216BABC8C(a1);
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BAC070(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    v5 = a2 + 8;
    v6 = sub_216B262E0(a2 + 8);
    result = sub_216BA9B40(v5);
    if (v6 != result)
    {
      v7 = result;
      do
      {
        v6 += 8;
        result = sub_216BABC8C(a1);
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BAC0D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    v5 = a2 + 8;
    v6 = sub_216B262E0(a2 + 8);
    result = sub_216BA9B90(v5);
    if (v6 != result)
    {
      v7 = result;
      do
      {
        v6 += 8;
        result = sub_216BABC8C(a1);
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BAC140(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    v5 = a2 + 8;
    v6 = sub_216B262E0(a2 + 8);
    result = sub_216BA9BD8(v5);
    if (v6 != result)
    {
      v7 = result;
      do
      {
        v6 += 8;
        result = sub_216BABC8C(a1);
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BAC1A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1);
  if ((_DWORD)result)
  {
    sub_216B1E67C(a2);
    return sub_216BABC8C(a1);
  }
  return result;
}

uint64_t sub_216BAC1F0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;

  result = sub_216B8B400(a2);
  switch((int)result)
  {
    case 0:
      result = sub_216BAC368(a1, (uint64_t)a2);
      break;
    case 1:
    case 6:
    case 10:
    case 11:
    case 12:
      result = sub_216BAC3D4(a1);
      break;
    case 2:
      result = sub_216BAC3DC(a1, (uint64_t)a2);
      break;
    case 3:
      result = sub_216BAC448(a1, (uint64_t)a2);
      break;
    case 4:
      result = sub_216BAC4D0(a1, (uint64_t)a2);
      break;
    case 5:
      result = sub_216BAC518(a1, (uint64_t)a2);
      break;
    case 7:
      result = sub_216BAC560(a1, (uint64_t)a2);
      break;
    case 8:
      result = sub_216BAC614(a1, (uint64_t)a2);
      break;
    case 9:
      result = sub_216BAC688(a1, (uint64_t)a2);
      break;
    case 13:
      result = sub_216BAC6FC(a1, (uint64_t)a2);
      break;
    case 14:
      result = sub_216BAC750(a1, (uint64_t)a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216BAC368(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    v5 = a2 + 8;
    v6 = (uint64_t *)sub_216B262E0(a2 + 8);
    result = sub_216BA8B44(v5);
    if (v6 != (uint64_t *)result)
    {
      v7 = (uint64_t *)result;
      do
      {
        v8 = *v6++;
        result = sub_216BAC1EC(a1, v8);
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BAC3D4(uint64_t a1)
{
  return sub_216BABC28(a1 + 32);
}

uint64_t sub_216BAC3DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    v5 = a2 + 8;
    v6 = (uint64_t *)sub_216BA5E50(a2 + 8);
    result = sub_216BA5E54(v5);
    if (v6 != (uint64_t *)result)
    {
      v7 = (uint64_t *)result;
      do
      {
        v8 = *v6++;
        result = sub_216BAB8E4(a1, v8);
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t sub_216BAC448(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    if (sub_216B1E67C(a2))
    {
      sub_216B1E67C(a2);
      sub_216BABC4C(a1);
    }
    v5 = sub_216B2037C(a2);
    sub_216BAC1EC(a1, v5);
    result = sub_216B5EE7C(a2);
    if (result)
    {
      v6 = sub_216B5EE7C(a2);
      return sub_216BAC1EC(a1, v6);
    }
  }
  return result;
}

uint64_t sub_216BAC4D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    v5 = sub_216B2037C(a2);
    return sub_216BAC1EC(a1, v5);
  }
  return result;
}

uint64_t sub_216BAC518(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    sub_216B5EE7C(a2);
    return sub_216BABC4C(a1);
  }
  return result;
}

uint64_t sub_216BAC560(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    if (sub_216B2037C(a2))
    {
      v5 = sub_216B2037C(a2);
      sub_216BAC1EC(a1, v5);
    }
    if (sub_216B1E67C(a2))
    {
      v6 = sub_216B1E67C(a2);
      sub_216BAC1EC(a1, v6);
    }
    if (sub_216B5EE7C(a2))
    {
      sub_216B5EE7C(a2);
      sub_216BABC4C(a1);
    }
    result = sub_216B27CB0(a2);
    if (result)
    {
      v7 = sub_216B27CB0(a2);
      return sub_216BAC1EC(a1, v7);
    }
  }
  return result;
}

uint64_t sub_216BAC614(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    if (sub_216B1E67C(a2))
    {
      v5 = sub_216B1E67C(a2);
      sub_216BAC1EC(a1, v5);
    }
    result = sub_216B2037C(a2);
    if (result)
    {
      v6 = sub_216B2037C(a2);
      return sub_216BAC1EC(a1, v6);
    }
  }
  return result;
}

uint64_t sub_216BAC688(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    if (sub_216B1E67C(a2))
    {
      v5 = sub_216B1E67C(a2);
      sub_216BAC1EC(a1, v5);
    }
    result = sub_216B2037C(a2);
    if (result)
    {
      sub_216B2037C(a2);
      return sub_216BABC4C(a1);
    }
  }
  return result;
}

uint64_t sub_216BAC6FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    result = sub_216B1E67C(a2);
    if (result)
    {
      sub_216B1E67C(a2);
      return sub_216BABC4C(a1);
    }
  }
  return result;
}

uint64_t sub_216BAC750(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BABC28(a1 + 32);
  if ((_DWORD)result)
  {
    sub_216B1E67C(a2);
    return sub_216BABC4C(a1);
  }
  return result;
}

_QWORD *sub_216BAC79C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v3 = (uint64_t)(a1 + 1);
  sub_216BAC868(v7, sub_216BAC860);
  sub_216BAC874(v6, sub_216BAC86C);
  sub_216BAC878((uint64_t)v5, (uint64_t)a1);
  sub_216BAC87C(v3, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5);
  sub_216BA5334(v5);
  sub_216BA5334(v6);
  sub_216BA5334(v7);
  sub_216BAC880(a1 + 40, 82, 0);
  return a1;
}

uint64_t sub_216BAC860()
{
  return 1;
}

uint64_t sub_216BAC86C()
{
  return 1;
}

BOOL sub_216BAC888(uint64_t a1, uint64_t a2)
{
  return sub_216BAC890((_QWORD *)(a1 + 8), a2);
}

BOOL sub_216BAC890(_QWORD *a1, uint64_t a2)
{
  sub_216BAB8E4(a1 + 23, a2);
  return sub_216BAD768(a1);
}

uint64_t sub_216BAC8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[32];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = sub_216BAC9C0();
  sub_216BAC9C4(v8 + 88);
  v14 = a1;
  sub_216BAB860(&v15, a2);
  sub_216BAC9C8(v16, &v14);
  sub_216BAB860(v13, a3);
  v10 = a1;
  sub_216BAB860(&v11, a4);
  sub_216BAC9CC(v12, &v10);
  sub_216BAA4FC(a1 + 184, v16, v13, v12);
  sub_216BA5334(v12);
  sub_216BAC9D0(&v10);
  sub_216BA5334(v13);
  sub_216BA5334(v16);
  sub_216BAC9D0(&v14);
  return a1;
}

uint64_t sub_216BAC9D4(uint64_t a1)
{
  return sub_216B2F340(a1, 8u);
}

uint64_t sub_216BAC9DC(uint64_t a1)
{
  return sub_216B9CD70(a1, a1 + 32, 8);
}

uint64_t sub_216BAC9EC(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BACA2C(a1, a2, &v5);
}

uint64_t sub_216BACA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216B3269C())
  {
    v4 = j_j_nullsub_1(&v12);
    v5 = sub_216B6B384(v4, 1uLL);
    sub_216B1E684(v10, &v12, 1);
    sub_216B3BAE0((uint64_t)v11, v5);
    v7 = sub_216B25CA8((uint64_t)v11, v6);
    sub_216BACAD8(v7, a2, v10);
    *(_QWORD *)(a1 + 24) = sub_216B28054((uint64_t)v11, v8);
    sub_216BACADC(v11);
  }
  return a1;
}

_QWORD *sub_216BACAE0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA5A4(a1);
  *v6 = &unk_24D602FD0;
  sub_216BACB30(v6 + 1, a2, a3);
  return a1;
}

void sub_216BACB38()
{
  void *v0;

  v0 = (void *)sub_216BACB34();
  j__free(v0);
}

uint64_t sub_216BACB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B6B384(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BACE74(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BACADC(v11);
  return v8;
}

uint64_t sub_216BACBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BACE74(a2, v4, v5);
}

uint64_t sub_216BACC44(uint64_t a1)
{
  return sub_216BACE64(a1 + 8);
}

uint64_t sub_216BACC4C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v4);
  sub_216BACE64(v2);
  return sub_216B6B680((uint64_t)&v4, a1, 1);
}

uint64_t sub_216BACCA0(uint64_t a1, uint64_t a2)
{
  return sub_216BAD038(a1 + 8, a2);
}

uint64_t sub_216BACCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216B514B8(a2);
  v6 = sub_216B514B8(a3);
  return sub_216BACCF0(a1, v5, v6);
}

uint64_t sub_216BACCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_216BACD18(a1, a2);
  return sub_216BACD54(v4, a3);
}

uint64_t sub_216BACD18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = sub_216B262E0((uint64_t)&v5);
  return sub_216BACD88(a1, v3);
}

uint64_t sub_216BACD54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  sub_216B262E0((uint64_t)&v4);
  return a1;
}

_QWORD *sub_216BACD8C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  sub_216BACDB8(a1 + 1, a2 + 1);
  return a1;
}

uint64_t sub_216BACDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      v5 = nullsub_1(a1, a2);
      *(_QWORD *)(a1 + 24) = v5;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v5);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v3;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_216BACE2C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D602FD0;
  sub_216BACE60(a1 + 1);
  return nullsub_1(a1, v2);
}

_QWORD *sub_216BACE78(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA5A4(a1);
  *v6 = &unk_24D602FD0;
  sub_216BACEC8(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BACECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216B514B8(a2);
  v6 = sub_216B514B8(a3);
  return sub_216BACF14(a1, v5, v6);
}

uint64_t sub_216BACF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_216BACF3C(a1, a2);
  return sub_216BACD54(v4, a3);
}

uint64_t sub_216BACF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = sub_216B262E0((uint64_t)&v5);
  return sub_216BACF78(a1, v3);
}

_QWORD *sub_216BACF7C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  sub_216BAB860(a1 + 1, a2 + 1);
  return a1;
}

uint64_t sub_216BACFA8(uint64_t a1)
{
  sub_216BACFD0(a1, 0);
  return a1;
}

_QWORD *sub_216BACFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = (_QWORD *)sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216BAD02C(v8, v4);
  }
  return result;
}

uint64_t sub_216BAD02C(_QWORD *a1, uint64_t a2)
{
  return sub_216B6B67C(*a1, a2, a1[1]);
}

uint64_t sub_216BAD038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BAD05C(v3, a2);
}

uint64_t sub_216BAD060(uint64_t *a1, unsigned __int8 **a2)
{
  return sub_216BAD068(a1, *a2);
}

uint64_t sub_216BAD068(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a1 + 88;
  if (sub_216BA9FAC(v5, (uint64_t)a2))
    return 0;
  sub_216BAD0D8(v4, a2);
  sub_216B5F890(v5, (uint64_t)a2);
  return sub_216BABC28((uint64_t)(a1 + 1));
}

uint64_t sub_216BAD0D8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_216BAD120(a2);
  if ((_DWORD)result)
  {
    v5 = sub_216BAB580(a2);
    return sub_216BAD14C(a1, v5);
  }
  return result;
}

uint64_t sub_216BAD120(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = sub_216B8B400(a1);
  return (v1 > 6) | (0xBu >> v1) & 1;
}

uint64_t sub_216BAD14C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v3 = sub_216B1E600((uint64_t)&v10);
  v9 = sub_216BD2CD0(v3);
  v4 = sub_216B1E600((uint64_t)&v9);
  result = sub_216BA76B8(v4);
  if (result
    || (v6 = sub_216B1E600((uint64_t)&v10),
        v9 = sub_216BD2CD0(v6),
        v7 = sub_216B1E600((uint64_t)&v9),
        (result = sub_216BA771C(v7)) != 0))
  {
    v8 = sub_216B1E67C(result);
    return sub_216BAD1CC(a1, v8);
  }
  return result;
}

uint64_t sub_216BAD1CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = a2;
  result = sub_216BA9FAC(a1 + 88, a2);
  if (!(_DWORD)result)
    return sub_216B268AC(a1, &v4);
  return result;
}

uint64_t sub_216BAD210(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BAD250(a1, a2, &v5);
}

uint64_t sub_216BAD254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216B3269C())
  {
    v4 = j_j_nullsub_1(&v12);
    v5 = sub_216B6B384(v4, 1uLL);
    sub_216B1E684(v10, &v12, 1);
    sub_216B3BAE0((uint64_t)v11, v5);
    v7 = sub_216B25CA8((uint64_t)v11, v6);
    sub_216BAD2FC(v7, a2, v10);
    *(_QWORD *)(a1 + 24) = sub_216B28054((uint64_t)v11, v8);
    sub_216BACADC(v11);
  }
  return a1;
}

_QWORD *sub_216BAD300(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &unk_24D603018;
  sub_216BACB30(v6 + 1, a2, a3);
  return a1;
}

void sub_216BAD354()
{
  void *v0;

  v0 = (void *)sub_216BAD350();
  j__free(v0);
}

uint64_t sub_216BAD368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B6B384(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BAD4FC(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BACADC(v11);
  return v8;
}

uint64_t sub_216BAD418(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BAD4FC(a2, v4, v5);
}

uint64_t sub_216BAD460(uint64_t a1)
{
  return sub_216BACE64(a1 + 8);
}

uint64_t sub_216BAD468(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v4);
  sub_216BACE64(v2);
  return sub_216B6B680((uint64_t)&v4, a1, 1);
}

uint64_t sub_216BAD4BC(uint64_t a1, uint64_t a2)
{
  return sub_216BAD550(a1 + 8, a2);
}

uint64_t sub_216BAD4C4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D603018;
  sub_216BAD4F8(a1 + 1);
  return nullsub_1(a1, v2);
}

_QWORD *sub_216BAD500(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &unk_24D603018;
  sub_216BACEC8(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BAD550(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BAD574(v3, a2);
}

uint64_t sub_216BAD578(uint64_t *a1, uint64_t *a2)
{
  return sub_216BAD580(a1, *a2);
}

uint64_t sub_216BAD580(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);
  sub_216BAD5B0(*a1, a2);
  return sub_216BABC28(v2);
}

uint64_t sub_216BAD5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = sub_216BAB358(a2);
  sub_216BAD14C(a1, v4);
  v5 = sub_216BAB1D8(a2);
  if (v5)
  {
    v6 = sub_216B1E67C(v5);
  }
  else
  {
    result = sub_216BAB288(a2);
    if (!result)
      return result;
    v6 = sub_216B2037C(result);
  }
  return sub_216BAD1CC(a1, v6);
}

uint64_t sub_216BAD61C(uint64_t a1)
{
  sub_216BA5334(a1 + 8);
  return a1;
}

uint64_t sub_216BAD644(uint64_t a1, int a2, int a3)
{
  unsigned int v5;
  void *v6;

  *(_DWORD *)(a1 + 8) = a2;
  v5 = sub_216BAD6B0(a1, a2);
  *(_DWORD *)(a1 + 12) = v5;
  v6 = malloc_type_malloc(8 * v5, 0x100004000313F17uLL);
  *(_QWORD *)a1 = v6;
  sub_216BAD6BC(a1, v6, *(_DWORD *)(a1 + 12), a3);
  if (a3)
    sub_216BAD6CC(a1);
  return a1;
}

uint64_t sub_216BAD6B0(uint64_t a1, int a2)
{
  return (a2 + 63) >> 6;
}

void *sub_216BAD6BC(int a1, void *__b, unsigned int a3, int a4)
{
  return memset(__b, a4 << 31 >> 31, 8 * a3);
}

uint64_t sub_216BAD6CC(uint64_t a1)
{
  return sub_216BAD6D4(a1, 0);
}

uint64_t sub_216BAD6D4(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_216BAD6B0(a1, *(_DWORD *)(a1 + 8));
  v5 = result;
  v6 = *(_DWORD *)(a1 + 12);
  if (v6 > result)
    result = (uint64_t)sub_216BAD6BC(a1, (void *)(*(_QWORD *)a1 + 8 * result), v6 - result, a2);
  if ((*(_DWORD *)(a1 + 8) & 0x3F) != 0)
  {
    v7 = -1 << (*(_DWORD *)(a1 + 8) & 0x3F);
    if (a2)
      v8 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v5 - 1)) | v7;
    else
      v8 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v5 - 1)) & ~v7;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * (v5 - 1)) = v8;
  }
  return result;
}

BOOL sub_216BAD768(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v3;

  for (result = sub_216B29084(a1); !result; result = sub_216B29084(a1))
  {
    v3 = sub_216B8F538((uint64_t)a1);
    sub_216BAB8E4(a1 + 23, v3);
  }
  return result;
}

uint64_t sub_216BAD7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BAD7D4(a1, (uint64_t)&v3);
}

uint64_t sub_216BAD7D4(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BAD814(a1, a2, &v5);
}

uint64_t sub_216BAD818(uint64_t a1, uint64_t *a2)
{
  char v5;
  char v6;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216BAD88C(*a2))
  {
    j_j_nullsub_1(&v6);
    j_j_nullsub_1(&v5);
    sub_216BAD898(a1, a2, &v5);
    *(_QWORD *)(a1 + 24) = a1;
  }
  return a1;
}

BOOL sub_216BAD88C(uint64_t a1)
{
  return a1 != 0;
}

_QWORD *sub_216BAD89C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA5A4(a1);
  *v6 = &unk_24D603060;
  sub_216BAD8EC(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BAD8F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B2E930(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BAD898(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BADABC(v11);
  return v8;
}

uint64_t sub_216BAD9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BAD898(a2, v4, v5);
}

uint64_t sub_216BAD9E8(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216BAD9F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v5);
  nullsub_1(v2, v3);
  return sub_216B2ECAC((uint64_t)&v5, a1, 1);
}

uint64_t sub_216BADA44(uint64_t a1, uint64_t a2)
{
  return sub_216BADB50(a1 + 8, a2);
}

uint64_t sub_216BADA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216B514B8(a2);
  v6 = sub_216B514B8(a3);
  return sub_216BADA94(a1, v5, v6);
}

uint64_t sub_216BADA98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = sub_216BAA6E4(a1, a2);
  return sub_216BACD54((uint64_t)v4, a3);
}

uint64_t sub_216BADAC0(uint64_t a1)
{
  sub_216BADAE8(a1, 0);
  return a1;
}

_QWORD *sub_216BADAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = (uint64_t *)sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216BADB44(v8, v4);
  }
  return result;
}

uint64_t sub_216BADB44(uint64_t *a1, uint64_t a2)
{
  return sub_216B2EC0C(*a1, a2, a1[1]);
}

uint64_t sub_216BADB50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BADB74(v3, a2);
}

uint64_t sub_216BADB78(uint64_t (**a1)(_QWORD), _QWORD *a2)
{
  return (*a1)(*a2);
}

uint64_t sub_216BADB84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BADBA8(a1, (uint64_t)&v3);
}

uint64_t sub_216BADBA8(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BADBE8(a1, a2, &v5);
}

uint64_t sub_216BADBEC(uint64_t a1, uint64_t *a2)
{
  char v5;
  char v6;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216BAD88C(*a2))
  {
    j_j_nullsub_1(&v6);
    j_j_nullsub_1(&v5);
    sub_216BADC60(a1, a2, &v5);
    *(_QWORD *)(a1 + 24) = a1;
  }
  return a1;
}

_QWORD *sub_216BADC64(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA874(a1);
  *v6 = &unk_24D6030A8;
  sub_216BAD8EC(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BADCB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B2E930(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BADC60(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BADABC(v11);
  return v8;
}

uint64_t sub_216BADD64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BADC60(a2, v4, v5);
}

uint64_t sub_216BADDAC(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216BADDB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v5);
  nullsub_1(v2, v3);
  return sub_216B2ECAC((uint64_t)&v5, a1, 1);
}

uint64_t sub_216BADE08(uint64_t a1, uint64_t a2)
{
  return sub_216BADB50(a1 + 8, a2);
}

uint64_t sub_216BADE10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BADE34(a1, &v3);
}

uint64_t sub_216BADE3C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BADE64();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BADE68(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &off_24D6030F0;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BADEB8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_4();
  j__free(v0);
}

uint64_t sub_216BADECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BADE64(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BADF40(uint64_t a1, uint64_t a2)
{
  return sub_216BADE64(a2, a1 + 8);
}

uint64_t sub_216BADF54(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BADF5C(uint64_t a1)
{
  sub_216BADF78(a1 + 8);
  return 1;
}

_QWORD *sub_216BADF80(uint64_t **a1, uint64_t *a2)
{
  return sub_216BADF88(a1, *a2);
}

_QWORD *sub_216BADF88(uint64_t **a1, uint64_t a2)
{
  return sub_216BADF90(*a1, a2);
}

_QWORD *sub_216BADF90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *result;
  uint64_t v12;
  int v13;
  uint64_t *v14;

  v14 = a1;
  v4 = sub_216BAE030(a2);
  if (v4)
  {
    v5 = *a1;
    v6 = sub_216BA9B84(v4);
    v7 = sub_216BAE074(v5, v6);
  }
  else
  {
    v8 = sub_216BAE088(a2);
    if (v8)
    {
      v9 = *a1;
      v10 = sub_216BA9AB4(v8);
      v7 = sub_216BAE0C0(v9, v10);
    }
    else
    {
      result = (_QWORD *)sub_216BAE0D4(a2);
      if (!result)
        return result;
      v12 = *a1;
      v13 = sub_216BA9AB4((uint64_t)result);
      v7 = sub_216BAE10C(v12, v13);
    }
  }
  return sub_216BAE068((uint64_t)&v14, v7);
}

uint64_t sub_216BAE030(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAE120(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

_QWORD *sub_216BAE068(uint64_t a1, unsigned int a2)
{
  return sub_216BAE178((_QWORD *)(*(_QWORD *)a1 + 320), a2);
}

uint64_t sub_216BAE074(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = sub_216BAE27C(a1, a2);
  return sub_216BAE198(v2);
}

uint64_t sub_216BAE088(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAE1A4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BAE0C0(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = sub_216BAE28C(a1, a2);
  return sub_216BAE198(v2);
}

uint64_t sub_216BAE0D4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAE1FC(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BAE10C(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = sub_216BAE254(a1, a2);
  return sub_216BAE198(v2);
}

uint64_t sub_216BAE124(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAE14C(&v3);
}

uint64_t sub_216BAE14C(_QWORD *a1)
{
  return sub_216BAE154(*a1);
}

BOOL sub_216BAE15C(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 19;
}

_QWORD *sub_216BAE178(_QWORD *result, unsigned int a2)
{
  *(_QWORD *)(*result + 8 * (a2 >> 6)) |= 1 << a2;
  return result;
}

uint64_t sub_216BAE198(uint64_t a1)
{
  return *(_WORD *)(a1 + 4) & 0x3FF;
}

uint64_t sub_216BAE1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAE1D0(&v3);
}

uint64_t sub_216BAE1D0(_QWORD *a1)
{
  return sub_216BAE1D8(*a1);
}

BOOL sub_216BAE1E0(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 18;
}

uint64_t sub_216BAE200(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAE228(&v3);
}

uint64_t sub_216BAE228(_QWORD *a1)
{
  return sub_216BAE230(*a1);
}

BOOL sub_216BAE238(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 9;
}

uint64_t sub_216BAE254(uint64_t a1, int a2)
{
  return sub_216BAE264(a1, word_216C188E8[a2]);
}

uint64_t sub_216BAE264(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 928) + 8 * a2 + 960;
}

uint64_t sub_216BAE274(uint64_t a1)
{
  return sub_216BAE264(a1, 0);
}

uint64_t sub_216BAE27C(uint64_t a1, int a2)
{
  return sub_216BAE264(a1, word_216C188EE[a2]);
}

uint64_t sub_216BAE28C(uint64_t a1, int a2)
{
  return sub_216BAE264(a1, word_216C18984[a2]);
}

uint64_t sub_216BAE29C(_DWORD *a1)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = sub_216BAE300(a1);
  if ((byte_254E4BA38 & 1) == 0)
  {
    sub_216BAE30C(&v3, dword_254E4BA3C);
    byte_254E4BA38 = 1;
  }
  return dword_254E4BA3C[v1];
}

uint64_t sub_216BAE300(_DWORD *a1)
{
  return (*a1 >> 17) & 0x3F;
}

uint64_t sub_216BAE310(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v5[2];

  v3 = sub_216BA2994(a2);
  if ((byte_253D27ED2 & 1) == 0)
  {
    sub_216BAE8A4(v5, byte_253D27E80);
    sub_216BAE390(v5[0], v5[1]);
    byte_253D27ED2 = 1;
  }
  return (byte_253D27E80[*(_WORD *)(a1 + 4) & 0x3FF] >> v3) & 1;
}

_BYTE *sub_216BAE390(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *result;
  _QWORD v55[2];

  v55[0] = a1;
  v55[1] = a2;
  v2 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 1);
  *v2 |= 2u;
  v3 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 2);
  *v3 |= 2u;
  v4 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 3);
  *v4 |= 2u;
  v5 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 4);
  *v5 |= 2u;
  v6 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 5);
  *v6 |= 2u;
  v7 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 6);
  *v7 |= 2u;
  v8 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 7);
  *v8 |= 2u;
  v9 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 8);
  *v9 |= 2u;
  v10 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 9);
  *v10 |= 2u;
  v11 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 10);
  *v11 |= 2u;
  v12 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 18);
  *v12 |= 2u;
  v13 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 19);
  *v13 |= 2u;
  v14 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 20);
  *v14 |= 2u;
  v15 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 21);
  *v15 |= 2u;
  v16 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 22);
  *v16 |= 2u;
  v17 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 23);
  *v17 |= 2u;
  v18 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 24);
  *v18 |= 2u;
  v19 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 25);
  *v19 |= 2u;
  v20 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 26);
  *v20 |= 2u;
  v21 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 27);
  *v21 |= 2u;
  v22 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 31);
  *v22 |= 2u;
  v23 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 32);
  *v23 |= 2u;
  v24 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 33);
  *v24 |= 2u;
  v25 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 35);
  *v25 |= 2u;
  v26 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 36);
  *v26 |= 2u;
  v27 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 37);
  *v27 |= 2u;
  v28 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 38);
  *v28 |= 2u;
  v29 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 40);
  *v29 |= 2u;
  v30 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 41);
  *v30 |= 2u;
  v31 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 54);
  *v31 |= 2u;
  v32 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 55);
  *v32 |= 2u;
  v33 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 56);
  *v33 |= 2u;
  v34 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 57);
  *v34 |= 2u;
  v35 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 58);
  *v35 |= 2u;
  v36 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 59);
  *v36 |= 2u;
  v37 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 60);
  *v37 |= 2u;
  v38 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 61);
  *v38 |= 2u;
  v39 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 62);
  *v39 |= 2u;
  v40 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 67);
  *v40 |= 2u;
  v41 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 68);
  *v41 |= 2u;
  v42 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 69);
  *v42 |= 2u;
  v43 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 70);
  *v43 |= 2u;
  v44 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 71);
  *v44 |= 2u;
  v45 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 72);
  *v45 |= 2u;
  v46 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 73);
  *v46 |= 2u;
  v47 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 74);
  *v47 |= 2u;
  v48 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 75);
  *v48 |= 2u;
  v49 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 77);
  *v49 |= 2u;
  v50 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 78);
  *v50 |= 2u;
  v51 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 79);
  *v51 |= 2u;
  v52 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 80);
  *v52 |= 2u;
  v53 = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 81);
  *v53 |= 2u;
  result = (_BYTE *)sub_216BA2FBC((uint64_t)v55, 76);
  *result |= 2u;
  return result;
}

uint64_t sub_216BAE8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BAE8E0();
  return (*(unsigned __int8 *)sub_216BAE8DC(a2, v3) >> 1) & 1;
}

uint64_t sub_216BAE8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BAE8E0();
  return *(_BYTE *)sub_216BAE8DC(a2, v3) & 1;
}

_BYTE *sub_216BAE918(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _BYTE *result;

  v3 = sub_216BAE8E0();
  result = (_BYTE *)sub_216BAE950(a2, v3);
  *result |= 2u;
  return result;
}

uint64_t sub_216BAE950(uint64_t a1, unsigned int a2)
{
  return sub_216BAE9B0(a1 + 120, a2);
}

_BYTE *sub_216BAE95C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _BYTE *result;

  v3 = sub_216BAE8E0();
  result = (_BYTE *)sub_216BAE950(a2, v3);
  *result |= 1u;
  return result;
}

_QWORD *sub_216BAE998(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 82;
  return result;
}

uint64_t sub_216BAE9A4(_DWORD *a1)
{
  return (*a1 >> 12) & 0x1F;
}

uint64_t sub_216BAE9B0(uint64_t a1, uint64_t a2)
{
  return a1 + a2;
}

unsigned int *sub_216BAE9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v12 = (unsigned int *)sub_216BAEB7C(a1, a3);
  v13 = sub_216BAEB7C(a1, a4);
  if (!sub_216BAEC04((uint64_t)v12))
  {
    if (sub_216BAEC04(v13))
    {
      return (unsigned int *)v13;
    }
    else
    {
      v14 = sub_216BAEC14(a1, 4);
      v37 = sub_216BAB358(a3);
      v15 = sub_216B1E600((uint64_t)&v37);
      v36 = sub_216BAEC44(v15);
      v37 = sub_216BAB358(a4);
      v16 = sub_216B1E600((uint64_t)&v37);
      v17 = sub_216BAEC44(v16);
      v18 = sub_216BA734C(a2);
      if (v18)
      {
        v19 = a5;
        v20 = 0;
        v30 = v14;
        v31 = v18;
        v32 = a2;
        do
        {
          v21 = sub_216BA7418(a2);
          v33 = v20;
          if (v21)
          {
            v22 = 0;
            v34 = v13 + 16 * v20;
            v35 = (uint64_t)&v12[4 * v20];
            v23 = v30 + 16 * v20;
            v24 = v21;
            do
            {
              v25 = v12;
              if ((v36 & 1) == 0)
                v12 = (unsigned int *)sub_216BA7358(v35, v22);
              v26 = *v12;
              v27 = (unsigned int *)v13;
              if ((v17 & 1) == 0)
                v27 = (unsigned int *)sub_216BA7358(v34, v22);
              v6 = v6 & 0xFFFFFFFF00000000 | v26;
              v5 = v5 & 0xFFFFFFFF00000000 | *v27;
              v28 = sub_216BAEC68(v19);
              *(_DWORD *)sub_216BAEC94(v23, v22++) = v28;
              v12 = v25;
            }
            while (v24 != v22);
          }
          a2 = v32;
          v20 = v33 + 1;
        }
        while (v33 + 1 != v31);
        return (unsigned int *)v30;
      }
      else
      {
        return (unsigned int *)v14;
      }
    }
  }
  return v12;
}

uint64_t sub_216BAEB7C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;

  v5 = a2;
  if (!a2)
    return sub_216BB50EC((uint64_t)a1);
  if (sub_216BB5260(a1[2], (uint64_t *)&v5))
    return *sub_216B61D98(a1[2], (uint64_t *)&v5);
  v3 = sub_216BB5284(a1, v5);
  *sub_216B61D98(a1[2], (uint64_t *)&v5) = v3;
  return v3;
}

BOOL sub_216BAEC04(uint64_t a1)
{
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t sub_216BAEC14(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_216B89B20(0x48uLL, *(uint64_t **)(a1 + 8));
  result = sub_216BB54CC(v3);
  *(_BYTE *)(result + 64) = a2;
  return result;
}

uint64_t sub_216BAEC44(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA7258(&v2);
}

uint64_t sub_216BAEC68(uint64_t a1)
{
  return sub_216BB56FC(a1);
}

uint64_t sub_216BAEC94(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_216BAECAC + 4 * byte_216C18991[a2]))();
}

uint64_t sub_216BAECAC(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_216BAECB4(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_216BAECBC(uint64_t a1)
{
  return a1 + 12;
}

unsigned int *sub_216BAECC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;

  v4 = a2;
  v14 = *MEMORY[0x24BDAC8D0];
  v12 = sub_216B2037C(a2);
  v6 = sub_216B1E600((uint64_t)&v12);
  v7 = sub_216BAED9C(v6);
  v4 += 8;
  v8 = *(_QWORD *)sub_216BAEDA0(v4);
  v9 = *(_QWORD *)sub_216BA9B1C(v4, 1u);
  sub_216BAB860(v13, a3);
  v10 = sub_216BAE9B8(a1, v7, v8, v9, (uint64_t)v13);
  sub_216BA5334(v13);
  return v10;
}

unsigned int *sub_216BAEDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v13;
  _BYTE v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = sub_216B1E67C(a2);
  v6 = sub_216B1E600((uint64_t)&v13);
  v7 = sub_216BAED9C(v6);
  v8 = sub_216B2037C(a2);
  v9 = sub_216B5EE7C(a2);
  v10 = sub_216B3DB48(v9);
  sub_216BAB860(v14, a3);
  v11 = sub_216BAE9B8(a1, v7, v8, v10, (uint64_t)v14);
  sub_216BA5334(v14);
  return v11;
}

uint64_t sub_216BAEE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];

  v68[0] = a3;
  v68[1] = a4;
  v67 = sub_216B2037C(a2);
  v8 = sub_216B1E600((uint64_t)&v67);
  v9 = sub_216BA7040(v8);
  v10 = sub_216BAEC14(a1, 3);
  v64 = a5;
  if (sub_216B1E67C((uint64_t)v68) != 1)
    goto LABEL_12;
  v11 = (uint64_t *)sub_216BAEDA0(a2 + 8);
  v67 = sub_216BAB358(*v11);
  v12 = sub_216B1E600((uint64_t)&v67);
  v13 = sub_216BAED9C(v12);
  v14 = sub_216BA6F68(v13);
  if (v14)
  {
    sub_216BA7EA4(v14);
    sub_216B1E600((uint64_t)v68);
    v15 = sub_216BAF294(a5);
    v16 = sub_216BA734C(v9);
    if (v16)
    {
      v17 = 0;
      v18 = v16;
      do
        *(_DWORD *)sub_216BAEC94(v10, v17++) = v15;
      while (v18 != v17);
    }
    return v10;
  }
  v19 = sub_216BA7040(v13);
  if (v19)
  {
    v20 = sub_216B1E67C(v19);
    v21 = sub_216BA734C(v9);
    if (v21)
    {
      v22 = 0;
      v23 = v21;
      do
      {
        sub_216BA7EA4(v20);
        v24 = (uint64_t *)sub_216B1E600((uint64_t)v68);
        sub_216BA7358(*v24, v22);
        v25 = sub_216BAF294(a5);
        *(_DWORD *)sub_216BAEC94(v10, v22++) = v25;
      }
      while (v23 != v22);
    }
  }
  else
  {
LABEL_12:
    v26 = (uint64_t *)sub_216B1E600((uint64_t)v68);
    v27 = (uint64_t *)sub_216B262E0(a2 + 8);
    v28 = sub_216BA9ACC(a2 + 8);
    if (v27 != (uint64_t *)v28)
    {
      v29 = (uint64_t *)v28;
      v30 = 0;
      v57 = v28;
      do
      {
        v67 = sub_216BAB358(*v27);
        v31 = sub_216B1E600((uint64_t)&v67);
        v32 = sub_216BAED9C(v31);
        v33 = sub_216BA6F68(v32);
        if (v33)
        {
          sub_216BA7EA4(v33);
          v62 = v62 & 0xFFFFFFFF00000000 | *(unsigned int *)*v26;
          v34 = sub_216BAF294(v64);
          *(_DWORD *)sub_216BAEC94(v10, v30++) = v34;
        }
        else
        {
          v35 = sub_216BA7040(v32);
          if (v35)
          {
            v36 = v35;
            v37 = sub_216B1E67C(v35);
            v38 = sub_216BA734C(v36);
            if (v38)
            {
              v59 = v27;
              v39 = v37;
              v40 = 0;
              v66 = v38;
              v65 = v30;
              v41 = v30;
              v42 = v26;
              v43 = v10;
              v44 = v58;
              do
              {
                sub_216BA7EA4(v39);
                v44 = v44 & 0xFFFFFFFF00000000 | *(unsigned int *)sub_216BA7358(*v42, v40);
                v45 = sub_216BAF294(v64);
                *(_DWORD *)sub_216BAEC94(v43, v41 + v40++) = v45;
              }
              while (v66 != v40);
              v58 = v44;
              v30 = v65 + v40;
              v27 = v59;
              v29 = (uint64_t *)v57;
              v10 = v43;
              v26 = v42;
            }
          }
          else
          {
            v46 = sub_216BA710C(v32);
            if (v46)
            {
              v47 = v46;
              v48 = sub_216B1E67C(v46);
              v49 = sub_216BA734C(v47);
              if (v49)
              {
                v60 = v27;
                v61 = v47;
                v50 = 0;
                v63 = v49;
                do
                {
                  v51 = sub_216BA7418(v47);
                  if (v51)
                  {
                    v52 = 0;
                    v53 = v51;
                    do
                    {
                      sub_216BA7EA4(v48);
                      v54 = v48;
                      sub_216BA7358(*v26 + 16 * v50, v52);
                      v55 = sub_216BAF294(v64);
                      *(_DWORD *)sub_216BAEC94(v10, v30 + v52) = v55;
                      v48 = v54;
                      ++v52;
                    }
                    while (v53 != v52);
                    v30 += v52;
                    v47 = v61;
                  }
                  ++v50;
                }
                while (v50 != v63);
                v27 = v60;
                v29 = (uint64_t *)v57;
              }
            }
          }
        }
        ++v27;
        ++v26;
      }
      while (v27 != v29);
    }
  }
  return v10;
}

uint64_t sub_216BAF294(uint64_t a1)
{
  return sub_216BB56FC(a1);
}

uint64_t sub_216BAF2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  char v28;
  uint64_t v29;

  v12 = sub_216BAEB7C(a1, a3);
  v13 = sub_216BAEB7C(a1, a4);
  if (!sub_216BAEC04(v12))
  {
    if (sub_216BAEC04(v13))
    {
      return v13;
    }
    else
    {
      v14 = sub_216BAEC14(a1, 3);
      v29 = sub_216BAB358(a3);
      v15 = sub_216B1E600((uint64_t)&v29);
      v28 = sub_216BAEC44(v15);
      v29 = sub_216BAB358(a4);
      v16 = sub_216B1E600((uint64_t)&v29);
      v17 = sub_216BAEC44(v16);
      v18 = sub_216BA734C(a2);
      if (v18)
      {
        v19 = v14;
        v20 = a5;
        v21 = 0;
        v22 = v18;
        do
        {
          v23 = (unsigned int *)v12;
          if ((v28 & 1) == 0)
            v23 = (unsigned int *)sub_216BA7358(v12, v21);
          v24 = *v23;
          v25 = (unsigned int *)v13;
          if ((v17 & 1) == 0)
            v25 = (unsigned int *)sub_216BA7358(v13, v21);
          v6 = v6 & 0xFFFFFFFF00000000 | v24;
          v5 = v5 & 0xFFFFFFFF00000000 | *v25;
          v26 = sub_216BAEC68(v20);
          *(_DWORD *)sub_216BAEC94(v19, v21++) = v26;
        }
        while (v22 != v21);
        return v19;
      }
      else
      {
        return v14;
      }
    }
  }
  return v12;
}

uint64_t sub_216BAF438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = sub_216B1E67C(a2);
  v6 = sub_216B1E600((uint64_t)&v13);
  v7 = sub_216BAED9C(v6);
  v8 = sub_216B2037C(a2);
  v9 = sub_216B5EE7C(a2);
  v10 = sub_216B3DB48(v9);
  sub_216BAB860(v14, a3);
  v11 = sub_216BAF2C0(a1, v7, v8, v10, (uint64_t)v14);
  sub_216BA5334(v14);
  return v11;
}

uint64_t sub_216BAF50C(uint64_t a1, uint64_t a2)
{
  float v3;
  uint64_t v4;
  _BYTE v6[24];

  sub_216BA96FC(a2, (uint64_t)v6);
  v3 = sub_216B1EC14((uint64_t)v6);
  v4 = sub_216BAF55C(a1, v3);
  sub_216B1D57C(v6);
  return v4;
}

uint64_t sub_216BAF55C(uint64_t a1, float a2)
{
  uint64_t v3;

  v3 = sub_216B89B20(0x48uLL, *(uint64_t **)(a1 + 8));
  return sub_216BB5504(v3, a2);
}

uint64_t sub_216BAF588(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  sub_216BA96F0(a2, (uint64_t)v6);
  v3 = sub_216B2478C((uint64_t)v6);
  v4 = sub_216BAF5DC(a1, v3);
  sub_216B1D998(v6);
  return v4;
}

uint64_t sub_216BAF5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B89B20(0x48uLL, *(uint64_t **)(a1 + 8));
  return sub_216BB5518(v3, a2);
}

uint64_t sub_216BAF608(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD v6[4];

  sub_216BA96F0(a2, (uint64_t)v6);
  v3 = sub_216B1FD84(v6);
  v4 = sub_216BAF5DC(a1, v3);
  sub_216B1D998(v6);
  return v4;
}

uint64_t sub_216BAF65C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B2A390(a2);
  return sub_216BAF688(a1, v3);
}

uint64_t sub_216BAF688(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B89B20(0x48uLL, *(uint64_t **)(a1 + 8));
  return sub_216BB552C(v3, a2);
}

uint64_t sub_216BAF6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = sub_216B2037C(a2);
  v5 = (_BYTE *)sub_216BAEB7C(a1, v4);
  if (!sub_216BAEC04((uint64_t)v5))
  {
    switch(sub_216BA9790(a2))
    {
      case 1u:
        return sub_216BAF688(a1, *v5 == 0);
      case 2u:
        v23 = sub_216B1E67C(a2);
        v7 = sub_216B1E600((uint64_t)&v23);
        v8 = sub_216BAED9C(v7);
        v9 = sub_216BA710C(v8);
        if (!v9)
        {
          v22 = (char *)sub_216BAF928 + 4 * byte_216C1899B[sub_216BA7EA4(v8) - 3];
          __asm { BR              X10 }
        }
        v10 = v9;
        v11 = sub_216BAEC14(a1, 4);
        v12 = sub_216BA734C(v10);
        if (v12)
        {
          v13 = 0;
          v14 = v12;
          do
          {
            v15 = sub_216BA7418(v10);
            if (v15)
            {
              v16 = 0;
              v17 = v15;
              do
              {
                v18 = -*(float *)sub_216BA7358((uint64_t)&v5[16 * v13], v16);
                *(float *)sub_216BAEC94(v11 + 16 * v13, v16++) = v18;
              }
              while (v17 != v16);
            }
            ++v13;
          }
          while (v13 != v14);
        }
        return v11;
      case 3u:
      case 5u:
        return sub_216BAFBA4(a1, a2);
      case 6u:
        v23 = sub_216B1E67C(a2);
        v19 = sub_216B1E600((uint64_t)&v23);
        v20 = sub_216BAED9C(v19);
        v21 = (char *)&loc_216BAF898 + 4 * byte_216C189AC[sub_216BA7EA4(v20) - 5];
        __asm { BR              X10 }
        return result;
      default:
        return (uint64_t)v5;
    }
  }
  return (uint64_t)v5;
}

void sub_216BAF928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;

  v13 = sub_216BAEC14(v12, 3);
  a10 = sub_216B1E67C(v11);
  v14 = sub_216B1E600((uint64_t)&a10);
  v15 = sub_216BAED9C(v14);
  v16 = sub_216BA734C(v15);
  if (v16)
  {
    v17 = 0;
    v18 = v16;
    do
    {
      v19 = -*(float *)sub_216BA7358(v10, v17);
      *(float *)sub_216BAEC94(v13, v17++) = v19;
    }
    while (v18 != v17);
  }
  JUMPOUT(0x216BAF700);
}

void sub_216BAF994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v13 = sub_216BAEC14(v12, 3);
  a10 = sub_216B1E67C(v11);
  v14 = sub_216B1E600((uint64_t)&a10);
  v15 = sub_216BAED9C(v14);
  v16 = sub_216BA734C(v15);
  if (v16)
  {
    v17 = 0;
    v18 = v16;
    do
    {
      v19 = ~*(_DWORD *)sub_216BA7358(v10, v17);
      *(_DWORD *)sub_216BAEC94(v13, v17++) = v19;
    }
    while (v18 != v17);
  }
  JUMPOUT(0x216BAF700);
}

void sub_216BAFA04()
{
  _DWORD *v0;
  uint64_t v1;

  sub_216BAF5DC(v1, ~*v0);
  JUMPOUT(0x216BAF700);
}

void sub_216BAFB88()
{
  JUMPOUT(0x216BAFA0CLL);
}

void sub_216BAFB94()
{
  JUMPOUT(0x216BAFA20);
}

uint64_t sub_216BAFBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BB5540(a1);
  sub_216BB54F8(v3, a2);
  return v3;
}

uint64_t sub_216BAFBD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_216B1E600(a1);
  result = sub_216BA7ED4(v2);
  if (!result)
  {
    v4 = sub_216B1E600(a1);
    v5 = sub_216BA7ED8(v4);
    if (!v5)
      return 0;
    v7 = sub_216B1E67C(v5);
    v6 = sub_216B1E600((uint64_t)&v7);
    result = sub_216BA7ED4(v6);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_216BAFC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[32];
  _BYTE v127[32];
  _BYTE v128[32];
  _BYTE v129[32];
  _BYTE v130[32];
  _BYTE v131[32];
  _BYTE v132[32];
  _BYTE v133[32];
  _BYTE v134[32];
  _BYTE v135[32];
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216B2037C(a2);
  v5 = (_BYTE *)sub_216BAEB7C(a1, v4);
  v6 = sub_216B5EE7C(a2);
  v7 = (_BYTE *)sub_216BAEB7C(a1, v6);
  if (sub_216BAEC04((uint64_t)v5))
    return (uint64_t)v5;
  if (!sub_216BAEC04((uint64_t)v7))
  {
    switch(sub_216BA9A9C(a2))
    {
      case 1u:
        return sub_216BAFBA4(a1, a2);
      case 2u:
        if (!*v5)
          goto LABEL_25;
        v33 = 1;
        return sub_216BAF688(a1, v33);
      case 3u:
        return sub_216BAF5DC(a1, *v7 ^ *v5);
      case 4u:
        if (*v5)
LABEL_25:
          v33 = *v7 != 0;
        else
          v33 = 0;
        return sub_216BAF688(a1, v33);
      case 5u:
        v125 = sub_216B1E67C(a2);
        v22 = sub_216B1E600((uint64_t)&v125);
        v23 = sub_216BAED9C(v22);
        v24 = (char *)&loc_216BAFE74 + 4 * word_216C18AE2[sub_216BA7EA4(v23) - 5];
        __asm { BR              X10 }
        return result;
      case 6u:
        v125 = sub_216B1E67C(a2);
        v44 = sub_216B1E600((uint64_t)&v125);
        v45 = sub_216BAED9C(v44);
        v46 = (char *)&loc_216BB0100 + 4 * word_216C18AC4[sub_216BA7EA4(v45) - 5];
        __asm { BR              X10 }
        return result;
      case 7u:
        v125 = sub_216B1E67C(a2);
        v47 = sub_216B1E600((uint64_t)&v125);
        v48 = sub_216BAED9C(v47);
        v49 = (char *)&loc_216BB015C + 4 * word_216C18AA6[sub_216BA7EA4(v48) - 5];
        __asm { BR              X10 }
        return result;
      case 8u:
        v39 = sub_216B2037C(a2);
        v40 = sub_216BAB358(v39);
        v33 = sub_216BB0FB8(v40, (uint64_t)v5, (uint64_t)v7) ^ 1;
        return sub_216BAF688(a1, v33);
      case 9u:
        v62 = sub_216B2037C(a2);
        v63 = sub_216BAB358(v62);
        v33 = sub_216BB0FB8(v63, (uint64_t)v5, (uint64_t)v7);
        return sub_216BAF688(a1, v33);
      case 0xAu:
        v25 = sub_216B2037C(a2);
        v125 = sub_216BAB358(v25);
        v26 = sub_216B1E600((uint64_t)&v125);
        v27 = sub_216BAED9C(v26);
        v28 = (char *)&loc_216BAFED4 + 4 * word_216C18A9E[sub_216BA7EA4(v27) - 3];
        __asm { BR              X10 }
        return result;
      case 0xBu:
        v50 = sub_216B2037C(a2);
        v125 = sub_216BAB358(v50);
        v51 = sub_216B1E600((uint64_t)&v125);
        v52 = sub_216BAED9C(v51);
        v53 = (char *)&loc_216BB01BC + 4 * word_216C18A96[sub_216BA7EA4(v52) - 3];
        __asm { BR              X10 }
        return result;
      case 0xCu:
        v18 = sub_216B2037C(a2);
        v125 = sub_216BAB358(v18);
        v19 = sub_216B1E600((uint64_t)&v125);
        v20 = sub_216BAED9C(v19);
        v21 = (char *)&loc_216BAFE2C + 4 * word_216C18A8E[sub_216BA7EA4(v20) - 3];
        __asm { BR              X10 }
        return result;
      case 0xDu:
        v29 = sub_216B2037C(a2);
        v125 = sub_216BAB358(v29);
        v30 = sub_216B1E600((uint64_t)&v125);
        v31 = sub_216BAED9C(v30);
        v32 = (char *)&loc_216BAFF20 + 4 * word_216C18A86[sub_216BA7EA4(v31) - 3];
        __asm { BR              X10 }
        return result;
      case 0xEu:
        v125 = sub_216B1E67C(a2);
        v54 = sub_216B1E600((uint64_t)&v125);
        v55 = sub_216BAED9C(v54);
        v56 = (char *)&loc_216BB0208 + 4 * word_216C18A68[sub_216BA7EA4(v55) - 5];
        __asm { BR              X10 }
        return result;
      case 0xFu:
        v125 = sub_216B1E67C(a2);
        v15 = sub_216B1E600((uint64_t)&v125);
        v16 = sub_216BAED9C(v15);
        v17 = 1 << sub_216BA7EA4(v16);
        if ((v17 & 0x1C000) != 0)
        {
          sub_216BB13D8((uint64_t)v134);
          v5 = (_BYTE *)sub_216BAF438(a1, a2, (uint64_t)v134);
          v14 = v134;
        }
        else
        {
          if ((v17 & 0xE0000) == 0)
            return sub_216BAF5DC(a1, (*(_DWORD *)v5 << *(_DWORD *)v7));
          sub_216BB13D4((uint64_t)v135);
          v5 = (_BYTE *)sub_216BAF438(a1, a2, (uint64_t)v135);
          v14 = v135;
        }
LABEL_50:
        sub_216BA5334(v14);
        return (uint64_t)v5;
      case 0x10u:
        v125 = sub_216B1E67C(a2);
        v34 = sub_216B1E600((uint64_t)&v125);
        v35 = sub_216BAED9C(v34);
        v36 = sub_216BA710C(v35);
        if (!v36)
        {
          v77 = (char *)&loc_216BB0460 + 4 * word_216C18A46[sub_216BA7EA4(v35) - 3];
          __asm { BR              X10 }
        }
        v37 = v36;
        v38 = sub_216B1E67C(v36);
        sub_216B20C64(&v124, v38);
        if (sub_216BB13DC(v124, 3))
        {
          sub_216BB142C((uint64_t)v133);
          v5 = sub_216BAEDA4(a1, a2, (uint64_t)v133);
          v14 = v133;
        }
        else
        {
          v81 = sub_216B1E67C(v37);
          sub_216B20C64(&v123, v81);
          sub_216BB13DC(v123, 4);
          sub_216BB1430((uint64_t)v132);
          v5 = sub_216BAEDA4(a1, a2, (uint64_t)v132);
          v14 = v132;
        }
        goto LABEL_50;
      case 0x11u:
        v125 = sub_216B1E67C(a2);
        v9 = sub_216B1E600((uint64_t)&v125);
        v10 = sub_216BAED9C(v9);
        v11 = sub_216BA710C(v10);
        if (!v11)
        {
          v76 = (char *)&loc_216BB03D0 + 4 * word_216C18A24[sub_216BA7EA4(v10) - 3];
          __asm { BR              X10 }
        }
        v12 = v11;
        v13 = sub_216B1E67C(v11);
        sub_216B20C64(&v122, v13);
        if (sub_216BB13DC(v122, 3))
        {
          sub_216BB1440((uint64_t)v131);
          v5 = sub_216BAEDA4(a1, a2, (uint64_t)v131);
          v14 = v131;
        }
        else
        {
          v80 = sub_216B1E67C(v12);
          sub_216B20C64(&v121, v80);
          sub_216BB13DC(v121, 4);
          sub_216BB1444((uint64_t)v130);
          v5 = sub_216BAEDA4(a1, a2, (uint64_t)v130);
          v14 = v130;
        }
        goto LABEL_50;
      case 0x12u:
        v125 = sub_216B1E67C(a2);
        v41 = sub_216B1E600((uint64_t)&v125);
        v42 = sub_216BAED9C(v41);
        v43 = (char *)&loc_216BB00A0 + 4 * word_216C18A06[sub_216BA7EA4(v42) - 5];
        __asm { BR              X10 }
        return result;
      case 0x13u:
        v125 = sub_216B1E67C(a2);
        v57 = sub_216B1E600((uint64_t)&v125);
        v58 = sub_216BAED9C(v57);
        v59 = sub_216BA710C(v58);
        if (!v59)
        {
          v78 = (char *)&loc_216BB0538 + 4 * word_216C189E4[sub_216BA7EA4(v58) - 3];
          __asm { BR              X10 }
        }
        v60 = v59;
        v61 = sub_216B1E67C(v59);
        sub_216B20C64(&v120, v61);
        if (sub_216BB13DC(v120, 3))
        {
          sub_216BB1460((uint64_t)v129);
          v5 = sub_216BAEDA4(a1, a2, (uint64_t)v129);
          v14 = v129;
        }
        else
        {
          v82 = sub_216B1E67C(v60);
          sub_216B20C64(&v119, v82);
          sub_216BB13DC(v119, 4);
          sub_216BB1464((uint64_t)v128);
          v5 = sub_216BAEDA4(a1, a2, (uint64_t)v128);
          v14 = v128;
        }
        goto LABEL_50;
      case 0x14u:
        v125 = sub_216B1E67C(a2);
        v64 = sub_216B1E600((uint64_t)&v125);
        v65 = sub_216BAED9C(v64);
        v66 = sub_216B2037C(a2);
        v125 = sub_216BAB358(v66);
        v67 = sub_216B5EE7C(a2);
        v68 = sub_216B3DB48(v67);
        v118 = sub_216BAB358(v68);
        v69 = sub_216BA710C(v65);
        if (!v69)
        {
          v79 = (char *)&loc_216BB0580 + 4 * word_216C18B00[sub_216BA7EA4(v65) - 3];
          __asm { BR              X10 }
        }
        v70 = v69;
        v71 = sub_216B1E600((uint64_t)&v125);
        if ((sub_216BAEC44(v71) & 1) != 0 || (v72 = sub_216B1E600((uint64_t)&v118), sub_216BAEC44(v72)))
        {
          v73 = sub_216B1E67C(v70);
          sub_216B20C64(&v117, v73);
          if (sub_216BB13DC(v117, 3))
          {
            sub_216BB1478((uint64_t)v127);
            v74 = (uint64_t)sub_216BAEDA4(a1, a2, (uint64_t)v127);
            v75 = v127;
          }
          else
          {
            v83 = sub_216B1E67C(v70);
            sub_216B20C64(&v116, v83);
            sub_216BB13DC(v116, 4);
            sub_216BB147C((uint64_t)v126);
            v74 = (uint64_t)sub_216BAEDA4(a1, a2, (uint64_t)v126);
            v75 = v126;
          }
          sub_216BA5334(v75);
        }
        else
        {
          v74 = sub_216BAEC14(a1, 4);
          v84 = sub_216B1E600((uint64_t)&v125);
          v85 = sub_216BAED9C(v84);
          v86 = sub_216B1E67C(v70);
          sub_216B20C64(&v115, v86);
          v111 = v70;
          if (sub_216BB13DC(v115, 3))
          {
            v87 = sub_216BA734C(v70);
            if (!v87)
              return v74;
            v112 = 0;
            v108 = v87;
            v110 = v74;
            do
            {
              v88 = sub_216BA7418(v70);
              if (v88)
              {
                v89 = 0;
                v90 = v88;
                do
                {
                  v91 = sub_216BA734C(v85);
                  if (v91)
                  {
                    v92 = 0;
                    v93 = v91;
                    v94 = 0.0;
                    v95 = (uint64_t)v5;
                    do
                    {
                      v96 = *(float *)sub_216BA7358(v95, v89);
                      v94 = v94 + (float)(v96 * *(float *)sub_216BA7358((uint64_t)&v7[16 * v112], v92++));
                      v95 += 16;
                    }
                    while (v93 != v92);
                  }
                  else
                  {
                    v94 = 0.0;
                  }
                  *(float *)sub_216BAEC94(v110 + 16 * v112, v89++) = v94;
                }
                while (v89 != v90);
              }
              v70 = v111;
              ++v112;
            }
            while (v112 != v108);
          }
          else
          {
            v97 = sub_216B1E67C(v70);
            sub_216B20C64(&v114, v97);
            sub_216BB13DC(v114, 4);
            v98 = sub_216BA734C(v70);
            if (!v98)
              return v74;
            v113 = 0;
            v109 = v98;
            v110 = v74;
            do
            {
              v99 = sub_216BA7418(v70);
              if (v99)
              {
                v100 = 0;
                v101 = v99;
                do
                {
                  v102 = sub_216BA734C(v85);
                  if (v102)
                  {
                    v103 = 0;
                    v104 = v102;
                    v105 = 0.0;
                    v106 = (uint64_t)v5;
                    do
                    {
                      v107 = *(float *)sub_216BA7358(v106, v100);
                      v105 = v105 + (float)(v107 * *(float *)sub_216BA7358((uint64_t)&v7[16 * v113], v103++));
                      v106 += 16;
                    }
                    while (v104 != v103);
                  }
                  else
                  {
                    v105 = 0.0;
                  }
                  *(float *)sub_216BAEC94(v110 + 16 * v113, v100++) = v105;
                }
                while (v100 != v101);
              }
              v70 = v111;
              ++v113;
            }
            while (v113 != v109);
          }
          return v110;
        }
        return v74;
      default:
        return (uint64_t)v5;
    }
  }
  return (uint64_t)v7;
}

uint64_t sub_216BB0FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v42 = a1;
  v5 = sub_216B1E600((uint64_t)&v42);
  v6 = sub_216BA7ED0(v5);
  if (v6)
  {
    v7 = v6;
    v8 = sub_216BA710C(v6);
    if (!v8)
    {
      v27 = (char *)&loc_216BB110C + 4 * byte_216C18B22[sub_216BA7EA4(v7) - 3];
      __asm { BR              X10 }
    }
    v9 = v8;
    v10 = sub_216BA734C(v8);
    if (v10)
    {
      v11 = 0;
      v12 = v10;
      while (1)
      {
        v13 = sub_216BA7418(v9);
        if (v13)
          break;
LABEL_9:
        ++v11;
        result = 1;
        if (v11 == v12)
          return result;
      }
      v14 = 0;
      v15 = v13;
      while (1)
      {
        v16 = *(float *)sub_216BA7358(a2 + 16 * v11, v14);
        if (v16 != *(float *)sub_216BA7358(a3 + 16 * v11, v14))
          return 0;
        if (v15 == ++v14)
          goto LABEL_9;
      }
    }
    return 1;
  }
  v18 = sub_216BAFBD4((uint64_t)&v42);
  if (v18)
  {
    v19 = v18;
    v20 = sub_216B1E67C(v18);
    v21 = sub_216B4CBC4(v19);
    if (v21)
    {
      v22 = 0;
      v23 = v21 - 1;
      do
      {
        v24 = *(_QWORD *)sub_216B4FBDC(a2, v22);
        v25 = (_QWORD *)sub_216B4FBDC(a3, v22);
        result = sub_216BB0FB8(v20, v24, *v25);
        if ((_DWORD)result)
          v26 = v23 == v22;
        else
          v26 = 1;
        ++v22;
      }
      while (!v26);
      return result;
    }
    return 1;
  }
  v28 = sub_216B1E600((uint64_t)&v42);
  v29 = sub_216BAED9C(v28);
  v30 = sub_216B1E67C(v29) + 16;
  v31 = (uint64_t *)sub_216B262E0(v30);
  v32 = sub_216BA7D24(v30);
  if (v31 == (uint64_t *)v32)
    return 1;
  v33 = (uint64_t *)v32;
  v34 = 0;
  while (1)
  {
    v35 = *v31;
    v36 = (unsigned __int8 **)sub_216BA5E50(*v31);
    v37 = sub_216BA5E54(v35);
    if (v36 != (unsigned __int8 **)v37)
      break;
LABEL_28:
    ++v31;
    result = 1;
    if (v31 == v33)
      return result;
  }
  v38 = (unsigned __int8 **)v37;
  while (1)
  {
    v39 = sub_216BAB580(*v36);
    v40 = *(_QWORD *)sub_216B4FBDC(a2, v34);
    v41 = (_QWORD *)sub_216B4FBDC(a3, v34);
    result = sub_216BB0FB8(v39, v40, *v41);
    if (!(_DWORD)result)
      return result;
    ++v34;
    if (++v36 == v38)
      goto LABEL_28;
  }
}

void sub_216BB139C()
{
  JUMPOUT(0x216BB1378);
}

uint64_t sub_216BB13DC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v3 = sub_216B1E600((uint64_t)&v7);
  result = sub_216BB555C(v3);
  if ((_DWORD)result)
  {
    v5 = sub_216B1E600((uint64_t)&v7);
    v6 = sub_216BAED9C(v5);
    return sub_216BA7EA4(v6) == a2;
  }
  return result;
}

_BYTE *sub_216BB148C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *result;
  BOOL v11;
  BOOL v12;

  v4 = sub_216B2037C(a2);
  v5 = (_BYTE *)sub_216BAEB7C(a1, v4);
  v6 = sub_216B5EE7C(a2);
  v7 = sub_216BAEB7C(a1, v6);
  v8 = sub_216B27CB0(a2);
  v9 = sub_216BAEB7C(a1, v8);
  if (sub_216BAEC04((uint64_t)v5))
    return v5;
  v11 = sub_216BAEC04(v7);
  result = (_BYTE *)v7;
  if (!v11)
  {
    v12 = sub_216BAEC04(v9);
    result = (_BYTE *)v9;
    if (!v12)
    {
      if (*v5)
        return (_BYTE *)v7;
      else
        return (_BYTE *)v9;
    }
  }
  return result;
}

uint64_t sub_216BB1544(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v4 = sub_216B1E67C(a2);
  if ((sub_216BB15AC(v4) & 1) == 0)
    return sub_216BAFBA4((uint64_t)a1, a2);
  sub_216BA9AC0(a2);
  v5 = (_DWORD *)sub_216BAE274(*a1);
  v6 = sub_216BAE29C(v5);
  return sub_216BAF5DC((uint64_t)a1, v6);
}

uint64_t sub_216BB15AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v3 = a1;
  v1 = sub_216B1E600((uint64_t)&v3);
  result = sub_216BA6F68(v1);
  if (result)
    return sub_216BA7EA4(result) - 5 < 2;
  return result;
}

uint64_t sub_216BB15E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_216B1E67C(a2);
  v5 = (_DWORD *)sub_216BB1658(v4);
  if (!v5)
    return sub_216BAFBA4(a1, a2);
  v6 = (uint64_t)v5;
  if (sub_216BA75F0(v5) != 2)
    return sub_216BAFBA4(a1, a2);
  v7 = sub_216B5EE7C(v6);
  return sub_216BAEB7C(a1, v7);
}

uint64_t sub_216BB1658(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BB8698(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BB1690(uint64_t a1, unint64_t a2)
{
  int v2;
  int v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int **v30;
  int v31;
  int **v32;
  uint64_t v33;
  int v34;
  uint64_t i;
  _DWORD *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t j;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t k;
  uint64_t v50;
  uint64_t m;
  int v52;
  _QWORD *v53;
  int v54;
  int v55;
  int v56;
  _QWORD *v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  _QWORD v98[2];
  uint64_t v99;
  _BYTE v100[152];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  sub_216BB211C(v100);
  v6 = (uint64_t *)sub_216B262E0(a2 + 8);
  v7 = sub_216BA9ACC(a2 + 8);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    while (1)
    {
      v9 = *v6;
      v99 = 0;
      v99 = sub_216BAEB7C(a1, v9);
      if (sub_216BAEC04(v99))
        break;
      sub_216B268AC((uint64_t)v100, &v99);
      if (++v6 == v8)
        goto LABEL_5;
    }
    v90 = v99;
    goto LABEL_11;
  }
LABEL_5:
  v99 = sub_216B2037C(a2);
  if (sub_216BAFBD4((uint64_t)&v99))
  {
    sub_216B2D798(v98, v100);
    v10 = v98[0];
    v11 = v98[1];
    v12 = a1;
    v13 = 5;
LABEL_10:
    v90 = (uint64_t)sub_216BB2120(v12, v10, v11, v13);
    goto LABEL_11;
  }
  v99 = sub_216B2037C(a2);
  v14 = sub_216B1E600((uint64_t)&v99);
  if (sub_216BB216C(v14))
  {
    sub_216B2D798(v97, v100);
    v10 = v97[0];
    v11 = v97[1];
    v12 = a1;
    v13 = 2;
    goto LABEL_10;
  }
  v99 = sub_216B2037C(a2);
  v16 = sub_216B1E600((uint64_t)&v99);
  v17 = sub_216BAED9C(v16);
  v18 = sub_216BA710C(v17);
  if (!v18)
  {
    v38 = (char *)&loc_216BB19AC + 4 * word_216C18B36[sub_216BA7EA4(v17) - 3];
    __asm { BR              X10 }
  }
  v19 = v18;
  v90 = sub_216BAEC14(a1, 4);
  v20 = sub_216B1E67C(v19);
  sub_216B20C64(&v96, v20);
  v91 = sub_216BB13DC(v96, 3);
  v21 = sub_216B1E67C(v19);
  sub_216B20C64(&v95, v21);
  v92 = sub_216BB13DC(v95, 4);
  v22 = sub_216BA734C(v19);
  v94 = v22;
  v89 = sub_216BA7418(v19);
  v93 = v89;
  if (sub_216B26878((uint64_t)v100) != 1)
    goto LABEL_51;
  v23 = (uint64_t *)sub_216BAEDA0(a2 + 8);
  v99 = sub_216BAB358(*v23);
  v24 = sub_216B1E600((uint64_t)&v99);
  v25 = sub_216BAED9C(v24);
  v26 = sub_216BA6F68(v25);
  if (v26)
  {
    v28 = v26;
    if (v91)
    {
      v29 = sub_216BA7EA4(v26);
      v30 = (int **)sub_216B262E0((uint64_t)v100);
      sub_216BB2190(v29, **v30);
    }
    if (v92)
    {
      v31 = sub_216BA7EA4(v28);
      v32 = (int **)sub_216B262E0((uint64_t)v100);
      sub_216BB21D8(v31, **v32);
    }
    if (v22)
    {
      v33 = 0;
      v34 = v27;
      do
      {
        if (v89)
        {
          for (i = 0; i != v89; ++i)
          {
            v36 = (_DWORD *)sub_216BAEC94(v90 + 16 * v33, i);
            if (v33 == i)
              v37 = v34;
            else
              v37 = 0;
            *v36 = v37;
          }
        }
        ++v33;
      }
      while (v33 != v22);
    }
    goto LABEL_11;
  }
  v39 = sub_216BA710C(v25);
  if (v39)
  {
    v40 = v39;
    if (v22)
    {
      v41 = 0;
      v42 = v22;
      do
      {
        if (v89)
        {
          for (j = 0; j != v89; ++j)
          {
            v44 = (_DWORD *)sub_216BAEC94(v90 + 16 * v41, j);
            if (v41 == j)
              v45 = 1065353216;
            else
              v45 = 0;
            *v44 = v45;
          }
        }
        ++v41;
      }
      while (v41 != v42);
    }
    v46 = v40;
    v47 = sub_216B1E67C(v40);
    LODWORD(v99) = sub_216BA734C(v40);
    v48 = *(unsigned int *)sub_216B1D574(&v99, &v94);
    if ((_DWORD)v48)
    {
      for (k = 0; k != v48; ++k)
      {
        LODWORD(v99) = sub_216BA7418(v46);
        v50 = *(unsigned int *)sub_216B1D574(&v99, &v93);
        if ((_DWORD)v50)
        {
          for (m = 0; m != v50; ++m)
          {
            if (v91)
            {
              v52 = sub_216BA7EA4(v47);
              v53 = (_QWORD *)sub_216B262E0((uint64_t)v100);
              v54 = *(_DWORD *)sub_216BA7358(*v53 + 16 * k, m);
              sub_216BB2190(v52, v54);
              v2 = v55;
            }
            if (v92)
            {
              v56 = sub_216BA7EA4(v47);
              v57 = (_QWORD *)sub_216B262E0((uint64_t)v100);
              v58 = *(_DWORD *)sub_216BA7358(*v57 + 16 * k, m);
              sub_216BB21D8(v56, v58);
              v2 = v59;
            }
            *(_DWORD *)sub_216BAEC94(v90 + 16 * k, m) = v2;
          }
        }
      }
    }
  }
  else
  {
LABEL_51:
    v60 = (uint64_t *)sub_216B1E600((uint64_t)v100);
    v61 = (uint64_t *)sub_216B262E0(a2 + 8);
    v62 = sub_216BA9ACC(a2 + 8);
    if (v61 != (uint64_t *)v62)
    {
      v63 = (uint64_t *)v62;
      v64 = 0;
      v86 = v62;
      do
      {
        v99 = sub_216BAB358(*v61);
        v65 = sub_216B1E600((uint64_t)&v99);
        v66 = sub_216BAED9C(v65);
        v67 = sub_216BA6F68(v66);
        if (v67)
        {
          v68 = v67;
          if (v91)
          {
            v69 = sub_216BA7EA4(v67);
            v17 = v17 & 0xFFFFFFFF00000000 | *(unsigned int *)*v60;
            sub_216BB2190(v69, v17);
            v2 = v70;
          }
          if (v92)
          {
            v71 = sub_216BA7EA4(v68);
            a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)*v60;
            sub_216BB21D8(v71, a2);
            v2 = v72;
          }
          *(_DWORD *)sub_216BAEC94(v90 + 16 * (v64 / v89), v64 % v89) = v2;
          ++v64;
        }
        else
        {
          v73 = sub_216BA7040(v66);
          if (v73)
          {
            v74 = v73;
            v75 = sub_216B1E67C(v73);
            v76 = sub_216BA734C(v74);
            if (v76)
            {
              v87 = v17;
              v88 = a2;
              v77 = 0;
              v78 = v76;
              v79 = v64;
              do
              {
                if (v91)
                {
                  v80 = sub_216BA7EA4(v75);
                  v81 = *(_DWORD *)sub_216BA7358(*v60, v77);
                  sub_216BB2190(v80, v81);
                  v3 = v82;
                }
                if (v92)
                {
                  v83 = sub_216BA7EA4(v75);
                  v84 = *(_DWORD *)sub_216BA7358(*v60, v77);
                  sub_216BB21D8(v83, v84);
                  v3 = v85;
                }
                *(_DWORD *)sub_216BAEC94(v90 + 16 * ((v64 + v77) / v89), v79 - (v64 + v77) / v89 * v89) = v3;
                ++v79;
                ++v77;
              }
              while (v78 != v77);
              v64 += v77;
              v63 = (uint64_t *)v86;
              v17 = v87;
              a2 = v88;
            }
          }
        }
        ++v61;
        ++v60;
      }
      while (v61 != v63);
    }
  }
LABEL_11:
  sub_216B1FF6C(v100);
  return v90;
}

uint64_t *sub_216BB2120(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v7;

  v7 = (uint64_t *)sub_216BAEC14(a1, a4);
  sub_216BB5580(v7, *(uint64_t **)(a1 + 8), a2, a3);
  return v7;
}

uint64_t sub_216BB216C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA7BA8(&v2);
}

uint64_t sub_216BB2190(int a1, int a2)
{
  return ((uint64_t (*)(float))((char *)nullsub_29 + 4 * byte_216C18B5E[a1 - 3]))(*(float *)&a2);
}

float sub_216BB21B4(uint64_t a1, int a2)
{
  return (float)a2;
}

float sub_216BB21BC(uint64_t a1, char a2)
{
  float result;

  result = 1.0;
  if ((a2 & 1) == 0)
    return 0.0;
  return result;
}

float sub_216BB21D0(uint64_t a1, unsigned int a2)
{
  return (float)a2;
}

uint64_t sub_216BB21D8(int a1, int a2)
{
  return ((uint64_t (*)(float))((char *)nullsub_30 + 4 * byte_216C18B63[a1 - 3]))(*(float *)&a2);
}

float sub_216BB21FC(uint64_t a1, int a2)
{
  return (float)a2;
}

float sub_216BB2204(uint64_t a1, char a2)
{
  float result;

  result = 1.0;
  if ((a2 & 1) == 0)
    return 0.0;
  return result;
}

float sub_216BB2218(uint64_t a1, unsigned int a2)
{
  return (float)a2;
}

uint64_t sub_216BB2220(int a1, int a2)
{
  return ((uint64_t (*)(float))((char *)sub_216BB2240 + 4 * byte_216C18B68[a1 - 3]))(*(float *)&a2);
}

uint64_t sub_216BB2240(float a1)
{
  return (int)a1;
}

uint64_t sub_216BB2254(int a1, int a2)
{
  return ((uint64_t (*)(float))((char *)sub_216BB2274 + 4 * byte_216C18B6D[a1 - 3]))(*(float *)&a2);
}

uint64_t sub_216BB2274(float a1)
{
  return a1;
}

uint64_t sub_216BB2288(int a1, int a2)
{
  return ((uint64_t (*)(float))((char *)sub_216BB22A8 + 4 * byte_216C18B72[a1 - 3]))(*(float *)&a2);
}

BOOL sub_216BB22A8(float a1)
{
  return a1 != 0.0;
}

uint64_t sub_216BB22BC(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t sub_216BB22D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  uint64_t v24;

  v4 = sub_216B2037C(a2);
  v5 = sub_216BAEB7C(a1, v4);
  if (!sub_216BAEC04(v5))
  {
    v6 = sub_216B2037C(a2);
    v24 = sub_216BAB358(v6);
    v7 = sub_216B1E600((uint64_t)&v24);
    v8 = sub_216BAED9C(v7);
    v9 = sub_216B1E67C(v8) + 16;
    v10 = (uint64_t *)sub_216B262E0(v9);
    v11 = sub_216BA7D24(v9);
    if (v10 != (uint64_t *)v11)
    {
      v12 = (uint64_t *)v11;
      v13 = 0;
      while (1)
      {
        v14 = *v10;
        v15 = (uint64_t *)sub_216BA5E50(*v10);
        v16 = sub_216BA5E54(v14);
        if (v15 != (uint64_t *)v16)
          break;
LABEL_8:
        if (++v10 == v12)
          return v5;
      }
      v17 = (uint64_t *)v16;
      while (1)
      {
        v18 = sub_216BA6A7C(*v15);
        v20 = v19;
        v21 = (const void *)sub_216BA9B14(a2);
        if (sub_216B274F0(v18, v20, v21, v22))
          return *(_QWORD *)sub_216B4FBDC(v5, v13);
        ++v13;
        if (++v15 == v17)
          goto LABEL_8;
      }
    }
  }
  return v5;
}

_DWORD *sub_216BB2414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _QWORD v18[2];

  v4 = sub_216B2037C(a2);
  v5 = sub_216BAEB7C(a1, v4);
  if (!sub_216BAEC04(v5))
  {
    v18[0] = sub_216BA9B14(a2);
    v18[1] = v6;
    if (sub_216B1E67C((uint64_t)v18) == 1)
    {
      v7 = sub_216B26288(v18, 0);
      v8 = sub_216BC2CE4(v7);
      v9 = (int *)sub_216BA7358(v5, v8);
      return sub_216BB2530(a1, *v9);
    }
    else
    {
      v10 = sub_216BAEC14(a1, 3);
      v11 = sub_216B1E600((uint64_t)v18);
      v12 = sub_216B1E608(v18);
      if (v11 != v12)
      {
        v13 = v12;
        v14 = 0;
        do
        {
          v15 = sub_216BC2CE4(*(char *)(v11 + v14));
          v16 = (_DWORD *)sub_216BA7358(v5, v15);
          *(_DWORD *)sub_216BAEC94(v10, v14++) = *v16;
        }
        while (v11 + v14 != v13);
      }
    }
    return (_DWORD *)v10;
  }
  return (_DWORD *)v5;
}

_DWORD *sub_216BB2530(uint64_t a1, int a2)
{
  _DWORD *result;

  result = (_DWORD *)sub_216BAEC14(a1, 1);
  *result = a2;
  return result;
}

unsigned int *sub_216BB2558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v36;

  v4 = sub_216B2037C(a2);
  v5 = sub_216BAEB7C(a1, v4);
  v6 = sub_216B5EE7C(a2);
  v7 = (unsigned int *)sub_216BAEB7C(a1, v6);
  if (!sub_216BAEC04(v5))
  {
    if (sub_216BAEC04((uint64_t)v7))
      return v7;
    v8 = sub_216B2037C(a2);
    v36 = sub_216BAB358(v8);
    v9 = sub_216B1E600((uint64_t)&v36);
    if (sub_216BA7040(v9))
    {
      v10 = sub_216B5EE7C(a2);
      v36 = sub_216BAB358(v10);
      v11 = sub_216B1E600((uint64_t)&v36);
      v12 = sub_216BA6F68(v11);
      sub_216BA7EA4(v12);
      v13 = (int *)sub_216BA7358(v5, *v7);
      return sub_216BB2530(a1, *v13);
    }
    v15 = sub_216B2037C(a2);
    v36 = sub_216BAB358(v15);
    v16 = sub_216B1E600((uint64_t)&v36);
    v17 = sub_216BA710C(v16);
    if (!v17)
    {
      v29 = sub_216B2037C(a2);
      v36 = sub_216BAB358(v29);
      v30 = sub_216BAFBD4((uint64_t)&v36);
      v31 = sub_216B5EE7C(a2);
      v36 = sub_216BAB358(v31);
      v32 = sub_216B1E600((uint64_t)&v36);
      v33 = sub_216BA6F68(v32);
      sub_216BA7EA4(v33);
      v34 = *v7;
      if (v34 < sub_216B4CBC4(v30))
        return *(unsigned int **)sub_216B4FBDC(v5, v34);
      return (unsigned int *)sub_216BAFBA4(a1, a2);
    }
    v18 = v17;
    v19 = sub_216BAEC14(a1, 3);
    v20 = sub_216B5EE7C(a2);
    v36 = sub_216BAB358(v20);
    v21 = sub_216B1E600((uint64_t)&v36);
    v22 = sub_216BA6F68(v21);
    sub_216BA7EA4(v22);
    v23 = *v7;
    v24 = sub_216BA7418(v18);
    if (v24)
    {
      v25 = 0;
      v26 = v5 + 16 * v23;
      v27 = v24;
      do
      {
        v28 = (_DWORD *)sub_216BA7358(v26, v25);
        *(_DWORD *)sub_216BAEC94(v19, v25++) = *v28;
      }
      while (v27 != v25);
    }
    return (unsigned int *)v19;
  }
  return (unsigned int *)v5;
}

uint64_t sub_216BB275C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_216B2037C(a2);
  v14 = sub_216BAB358(v3);
  v4 = sub_216BAFBD4((uint64_t)&v14);
  if (v4)
    goto LABEL_2;
  v6 = sub_216B1E600((uint64_t)&v14);
  result = sub_216BA7040(v6);
  if (result)
    goto LABEL_6;
  v8 = sub_216B1E600((uint64_t)&v14);
  result = sub_216BA710C(v8);
  if (result)
    goto LABEL_6;
  v9 = sub_216B1E600((uint64_t)&v14);
  result = sub_216BA7ED8(v9);
  if (result)
  {
    v10 = result;
    v13 = sub_216B1E67C(result);
    v4 = sub_216BAFBD4((uint64_t)&v13);
    if (v4)
    {
LABEL_2:
      v5 = sub_216B4CBC4(v4);
      return sub_216BAF5DC(a1, v5);
    }
    v13 = sub_216B1E67C(v10);
    v11 = sub_216B1E600((uint64_t)&v13);
    result = sub_216BA7040(v11);
    if (result || (v13 = sub_216B1E67C(v10), v12 = sub_216B1E600((uint64_t)&v13), (result = sub_216BA710C(v12)) != 0))
    {
LABEL_6:
      v5 = sub_216BA734C(result);
      return sub_216BAF5DC(a1, v5);
    }
  }
  return result;
}

uint64_t sub_216BB2840(uint64_t a1, uint64_t a2)
{
  float *v2;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t i;
  float *v23;
  unsigned int *v24;
  _QWORD *v25;
  uint64_t v26;
  float v27;
  _QWORD *v28;
  uint64_t j;
  float *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t k;
  float *v37;
  _QWORD *v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  float *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  float v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  float v167;
  float v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD v192[3];
  float v193[5];
  char v194;
  _QWORD v195[3];
  float v196;
  _BYTE v197[32];
  _BYTE v198[32];
  _BYTE v199[32];
  _BYTE v200[32];
  _BYTE v201[32];
  _BYTE v202[32];
  _BYTE v203[32];
  _BYTE v204[32];
  _BYTE v205[32];
  _BYTE v206[32];
  _BYTE v207[32];
  _BYTE v208[32];
  _BYTE v209[32];
  _BYTE v210[32];
  _BYTE v211[32];
  _BYTE v212[32];
  _BYTE v213[32];
  _BYTE v214[32];
  _BYTE v215[32];
  _BYTE v216[32];
  _BYTE v217[32];
  _BYTE v218[32];
  _BYTE v219[32];
  _BYTE v220[32];
  _BYTE v221[32];
  _BYTE v222[32];
  _BYTE v223[32];
  _BYTE v224[32];
  _BYTE v225[32];
  _BYTE v226[32];
  _BYTE v227[32];
  _BYTE v228[32];
  _BYTE v229[32];
  _BYTE v230[32];
  _BYTE v231[32];
  _BYTE v232[32];
  _BYTE v233[32];
  _BYTE v234[32];
  _BYTE v235[32];
  _BYTE v236[32];
  _BYTE v237[32];
  _BYTE v238[32];
  _BYTE v239[32];
  _BYTE v240[32];
  _BYTE v241[32];
  _BYTE v242[32];
  _BYTE v243[32];
  _BYTE v244[32];
  _BYTE v245[32];
  _BYTE v246[32];
  _BYTE v247[32];
  _BYTE v248[32];
  _BYTE v249[32];
  _BYTE v250[32];
  _BYTE v251[32];
  _BYTE v252[32];
  _BYTE v253[32];
  _BYTE v254[32];
  _BYTE v255[32];
  _BYTE v256[32];
  _BYTE v257[32];
  _BYTE v258[32];
  _BYTE v259[32];
  _BYTE v260[32];
  _BYTE v261[32];
  _BYTE v262[32];
  _BYTE v263[32];
  _BYTE v264[32];
  _BYTE v265[32];
  _BYTE v266[32];
  _BYTE v267[32];
  _BYTE v268[32];
  _BYTE v269[32];
  _BYTE v270[32];
  _BYTE v271[32];
  _BYTE v272[32];
  _BYTE v273[32];
  _BYTE v274[32];
  uint64_t v275;

  v275 = *MEMORY[0x24BDAC8D0];
  switch(sub_216BA9B84(a2))
  {
    case 1u:
      sub_216BB4478((uint64_t)v274);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v274);
      v5 = v274;
      goto LABEL_150;
    case 2u:
      sub_216BB447C((uint64_t)v273);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v273);
      v5 = v273;
      goto LABEL_150;
    case 3u:
      sub_216BB4480((uint64_t)v272);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v272);
      v5 = v272;
      goto LABEL_150;
    case 4u:
      sub_216BB4484((uint64_t)v271);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v271);
      v5 = v271;
      goto LABEL_150;
    case 5u:
      sub_216BB4488((uint64_t)v270);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v270);
      v5 = v270;
      goto LABEL_150;
    case 6u:
      sub_216BB448C((uint64_t)v269);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v269);
      v5 = v269;
      goto LABEL_150;
    case 7u:
      sub_216BB4490((uint64_t)v268);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v268);
      v5 = v268;
      goto LABEL_150;
    case 8u:
      sub_216BB4598((uint64_t)v267);
      v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v267);
      v6 = v267;
      goto LABEL_221;
    case 9u:
      sub_216BB459C((uint64_t)v266);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v266);
      v5 = v266;
      goto LABEL_150;
    case 0xAu:
      sub_216BB45A0((uint64_t)v265);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v265);
      v5 = v265;
      goto LABEL_150;
    case 0xBu:
      sub_216BB45A4((uint64_t)v264);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v264);
      v5 = v264;
      goto LABEL_150;
    case 0xCu:
      sub_216BB45A8((uint64_t)v263);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v263);
      v5 = v263;
      goto LABEL_150;
    case 0xDu:
      sub_216BB45AC((uint64_t)v262);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v262);
      v5 = v262;
      goto LABEL_150;
    case 0xEu:
      sub_216BB45B0((uint64_t)v261);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v261);
      v5 = v261;
      goto LABEL_150;
    case 0xFu:
      sub_216BB45B4((uint64_t)v260);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v260);
      v5 = v260;
      goto LABEL_150;
    case 0x10u:
      sub_216BB45B8((uint64_t)v259);
      v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v259);
      v6 = v259;
      goto LABEL_221;
    case 0x11u:
      sub_216BB45BC((uint64_t)v258);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v258);
      v5 = v258;
      goto LABEL_150;
    case 0x12u:
      sub_216BB45C0((uint64_t)v257);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v257);
      v5 = v257;
      goto LABEL_150;
    case 0x13u:
      sub_216BB45C4((uint64_t)v256);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v256);
      v5 = v256;
      goto LABEL_150;
    case 0x14u:
      sub_216BB45C8((uint64_t)v255);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v255);
      v5 = v255;
      goto LABEL_150;
    case 0x15u:
      sub_216BB45CC((uint64_t)v254);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v254);
      v5 = v254;
      goto LABEL_150;
    case 0x16u:
      sub_216BB45D0((uint64_t)v253);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v253);
      v5 = v253;
      goto LABEL_150;
    case 0x17u:
      v7 = sub_216B2037C(a2);
      if (sub_216BB45D4(v7))
      {
        sub_216BB4618((uint64_t)v252);
        v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v252);
        v5 = v252;
      }
      else
      {
        sub_216BB461C((uint64_t)v251);
        v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v251);
        v5 = v251;
      }
      goto LABEL_150;
    case 0x18u:
      v8 = sub_216B2037C(a2);
      if (sub_216BB45D4(v8))
      {
        sub_216BB4620((uint64_t)v250);
        v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v250);
        v5 = v250;
      }
      else
      {
        sub_216BB4624((uint64_t)v249);
        v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v249);
        v5 = v249;
      }
      goto LABEL_150;
    case 0x19u:
      sub_216BB4628((uint64_t)v248);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v248);
      v5 = v248;
      goto LABEL_150;
    case 0x1Au:
      sub_216BB462C((uint64_t)v247);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v247);
      v5 = v247;
      goto LABEL_150;
    case 0x1Bu:
      sub_216BB4630((uint64_t)v246);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v246);
      v5 = v246;
      goto LABEL_150;
    case 0x1Cu:
      sub_216BB4634((uint64_t)v245);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v245);
      v5 = v245;
      goto LABEL_150;
    case 0x1Du:
      sub_216BB4638((uint64_t)v244);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v244);
      v5 = v244;
      goto LABEL_150;
    case 0x1Eu:
      sub_216BB463C((uint64_t)v243);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v243);
      v5 = v243;
      goto LABEL_150;
    case 0x1Fu:
      sub_216BB4640((uint64_t)v242);
      v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v242);
      v6 = v242;
      goto LABEL_221;
    case 0x20u:
      v9 = *(_QWORD *)sub_216BA9B1C(a2 + 8, 1u);
      return sub_216BAFBA4(a1, v9);
    case 0x21u:
      v11 = sub_216B2037C(a2);
      if (sub_216BB45D4(v11))
      {
        sub_216BB4644((uint64_t)v241);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v241);
        v6 = v241;
      }
      else
      {
        v135 = sub_216B2037C(a2);
        if (sub_216BB4648(v135))
        {
          sub_216BB468C((uint64_t)v240);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v240);
          v6 = v240;
        }
        else
        {
          sub_216BB4690((uint64_t)v239);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v239);
          v6 = v239;
        }
      }
      goto LABEL_221;
    case 0x22u:
      v12 = sub_216B2037C(a2);
      if (sub_216BB45D4(v12))
      {
        sub_216BB4694((uint64_t)v238);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v238);
        v6 = v238;
      }
      else
      {
        v136 = sub_216B2037C(a2);
        if (sub_216BB4648(v136))
        {
          sub_216BB4698((uint64_t)v237);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v237);
          v6 = v237;
        }
        else
        {
          sub_216BB469C((uint64_t)v236);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v236);
          v6 = v236;
        }
      }
      goto LABEL_221;
    case 0x23u:
      v13 = sub_216B2037C(a2);
      if (sub_216BB45D4(v13))
      {
        sub_216BB4A5C((uint64_t)v235);
        v2 = (float *)sub_216BB46A0(a1, a2, (uint64_t)v235);
        v14 = v235;
      }
      else
      {
        v137 = sub_216B2037C(a2);
        if (sub_216BB4648(v137))
        {
          sub_216BB4A60((uint64_t)v234);
          v2 = (float *)sub_216BB46A0(a1, a2, (uint64_t)v234);
          v14 = v234;
        }
        else
        {
          sub_216BB4A64((uint64_t)v233);
          v2 = (float *)sub_216BB46A0(a1, a2, (uint64_t)v233);
          v14 = v233;
        }
      }
      goto LABEL_192;
    case 0x24u:
      sub_216BB4A68((uint64_t)v232);
      v2 = (float *)sub_216BB46A0(a1, a2, (uint64_t)v232);
      v14 = v232;
      goto LABEL_192;
    case 0x25u:
      v15 = (_QWORD *)sub_216BA9B1C(a2 + 8, 0);
      v16 = sub_216BAEB7C(a1, *v15);
      v17 = (_QWORD *)sub_216BA9B1C(a2 + 8, 1u);
      v18 = sub_216BAEB7C(a1, *v17);
      v19 = (_QWORD *)sub_216BA9B1C(a2 + 8, 2u);
      v20 = (_BYTE *)sub_216BAEB7C(a1, *v19);
      v2 = (float *)v16;
      if (!sub_216BAEC04(v16))
      {
        v2 = (float *)v18;
        if (!sub_216BAEC04(v18))
        {
          if (sub_216BAEC04((uint64_t)v20))
          {
            return (uint64_t)v20;
          }
          else
          {
            v195[0] = sub_216B2037C(a2);
            v179 = sub_216B1E600((uint64_t)v195);
            if (sub_216BAEC44(v179))
            {
              if (*v20)
                return v18;
              else
                return v16;
            }
            else
            {
              v183 = sub_216B1E600((uint64_t)v195);
              v184 = sub_216BAED9C(v183);
              v2 = (float *)sub_216BAEC14(a1, 3);
              v185 = sub_216BA734C(v184);
              if (v185)
              {
                v186 = 0;
                v187 = v185;
                do
                {
                  if (*(_BYTE *)sub_216BA7358((uint64_t)v20, v186))
                    v188 = v18;
                  else
                    v188 = v16;
                  v189 = (_DWORD *)sub_216BA7358(v188, v186);
                  *(_DWORD *)sub_216BAEC94((uint64_t)v2, v186++) = *v189;
                }
                while (v187 != v186);
              }
            }
          }
        }
      }
      return (uint64_t)v2;
    case 0x26u:
      sub_216BB4A6C((uint64_t)v231);
      v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v231);
      v6 = v231;
      goto LABEL_221;
    case 0x27u:
      sub_216BB4A70((uint64_t)v230);
      v2 = (float *)sub_216BB46A0(a1, a2, (uint64_t)v230);
      v14 = v230;
LABEL_192:
      sub_216BA5334(v14);
      return (uint64_t)v2;
    case 0x28u:
      sub_216BB4A74((uint64_t)v229);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v229);
      v5 = v229;
      goto LABEL_150;
    case 0x29u:
      sub_216BB4A78((uint64_t)v228);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v228);
      v5 = v228;
      goto LABEL_150;
    case 0x2Au:
    case 0x2Bu:
      sub_216BB4A7C((uint64_t)v227);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v227);
      v5 = v227;
      goto LABEL_150;
    case 0x2Cu:
    case 0x2Du:
      sub_216BB4A80((uint64_t)v226);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v226);
      v5 = v226;
      goto LABEL_150;
    case 0x2Eu:
      v21 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v21);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      for (i = 0; i != 2; ++i)
      {
        v23 = (float *)sub_216BA7358((uint64_t)v2, i);
        *((_WORD *)v195 + i) = llroundf(sub_216BB4A84(*v23, -1.0, 1.0) * 32767.0);
      }
      goto LABEL_64;
    case 0x2Fu:
      v24 = (unsigned int *)sub_216BAEC14(a1, 3);
      v25 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v25);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v26 = 0;
      *(float *)v195 = *v2;
      do
      {
        v27 = sub_216BB4A84((float)*((__int16 *)v195 + v26) / 32767.0, -1.0, 1.0);
        *(float *)sub_216BAEC94((uint64_t)v24, v26++) = v27;
      }
      while (v26 != 2);
      return (uint64_t)v24;
    case 0x30u:
      v28 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v28);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      for (j = 0; j != 2; ++j)
      {
        v30 = (float *)sub_216BA7358((uint64_t)v2, j);
        *((_WORD *)v195 + j) = llroundf(sub_216BB4A84(*v30, 0.0, 1.0) * 65535.0);
      }
LABEL_64:
      v31 = LODWORD(v195[0]);
      return sub_216BAF5DC(a1, v31);
    case 0x31u:
      v24 = (unsigned int *)sub_216BAEC14(a1, 3);
      v32 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v32);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v34 = 0;
      *(float *)v195 = *v2;
      do
      {
        LOWORD(v33) = *((_WORD *)v195 + v34);
        *(float *)sub_216BAEC94((uint64_t)v24, v34++) = (float)v33 / 65535.0;
      }
      while (v34 != 2);
      return (uint64_t)v24;
    case 0x32u:
      v35 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v35);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      for (k = 0; k != 2; ++k)
      {
        v37 = (float *)sub_216BA7358((uint64_t)v2, k);
        sub_216B1F4F8(v195, *v37);
        v194 = 0;
        sub_216B1DA88((uint64_t)v195, (uint64_t)&unk_216C10FC8, 0, &v194);
        sub_216B1D92C((uint64_t)v195, (uint64_t)v193);
        *(_WORD *)&v197[2 * k - 4] = sub_216B1FD84(v193);
        sub_216B1D998(v193);
        sub_216B1D57C(v195);
      }
      v31 = LODWORD(v196);
      return sub_216BAF5DC(a1, v31);
    case 0x33u:
      v24 = (unsigned int *)sub_216BAEC14(a1, 3);
      v39 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v39);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v40 = 0;
      v196 = *v2;
      do
      {
        sub_216B1E414(v193, 16, *(unsigned __int16 *)&v197[2 * v40 - 4], 0);
        sub_216B1EF68(v195, &unk_216C10FC8, v193);
        sub_216B1D998(v193);
        LOBYTE(v193[0]) = 0;
        sub_216B1DA88((uint64_t)v195, (uint64_t)&unk_216C10FD0, 0, v193);
        v41 = sub_216B1EC14((uint64_t)v195);
        *(float *)sub_216BAEC94((uint64_t)v24, v40) = v41;
        sub_216B1D57C(v195);
        ++v40;
      }
      while (v40 != 2);
      return (uint64_t)v24;
    case 0x34u:
      v42 = a2 + 8;
      v43 = (_QWORD *)sub_216BAEDA0(v42);
      v2 = (float *)sub_216BAEB7C(a1, *v43);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v44 = (uint64_t *)sub_216BAEDA0(v42);
      v45 = sub_216BAB358(*v44);
      v46 = sub_216BB4AA8(v45, v2);
      return sub_216BAF55C(a1, v46);
    case 0x35u:
      v47 = a2 + 8;
      v48 = (_QWORD *)sub_216BAEDA0(v47);
      v2 = (float *)sub_216BAEB7C(a1, *v48);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v49 = (_QWORD *)sub_216BA9B1C(v47, 1u);
      v24 = (unsigned int *)sub_216BAEB7C(a1, *v49);
      if (sub_216BAEC04((uint64_t)v24))
        return (uint64_t)v24;
      v50 = (uint64_t *)sub_216BAEDA0(v47);
      v51 = sub_216BAB358(*v50);
      sub_216BB4C54((uint64_t)v225);
      v2 = (float *)sub_216BB4AC4(a1, v51, (uint64_t)v2, v24, (uint64_t)v225);
      sub_216BA5334(v225);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v52 = (uint64_t *)sub_216B262E0(v47);
      v53 = sub_216BAB358(*v52);
      v54 = sub_216BB4AA8(v53, v2);
      return sub_216BAF55C(a1, v54);
    case 0x36u:
      v55 = a2 + 8;
      v56 = (_QWORD *)sub_216BAEDA0(v55);
      v2 = (float *)sub_216BAEB7C(a1, *v56);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v57 = (_QWORD *)sub_216BA9B1C(v55, 1u);
      v24 = (unsigned int *)sub_216BAEB7C(a1, *v57);
      if (sub_216BAEC04((uint64_t)v24))
        return (uint64_t)v24;
      v58 = (uint64_t *)sub_216BAEDA0(v55);
      v59 = sub_216BAB358(*v58);
      v46 = sub_216BB4C58(v59, v2, (float *)v24);
      return sub_216BAF55C(a1, v46);
    case 0x37u:
      v60 = a2 + 8;
      v61 = (_QWORD *)sub_216BAEDA0(v60);
      v2 = (float *)sub_216BAEB7C(a1, *v61);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v62 = (_QWORD *)sub_216BA9B1C(v60, 1u);
      v63 = sub_216BAEB7C(a1, *v62);
      if (sub_216BAEC04(v63))
        return v63;
      v86 = sub_216BAEC14(a1, 3);
      v151 = 0;
      v152 = 2;
      do
      {
        v153 = v151 + 1;
        if (v151 == 2)
          v154 = 0;
        else
          v154 = v151 + 1;
        v155 = *(float *)sub_216BA7358((uint64_t)v2, v154);
        v156 = *(float *)sub_216BA7358(v63, v152 % 3);
        v157 = *(float *)sub_216BA7358(v63, v154);
        v158 = (float)(v155 * v156) - (float)(v157 * *(float *)sub_216BA7358((uint64_t)v2, v152 % 3));
        *(float *)sub_216BAEC94(v86, v151) = v158;
        ++v152;
        ++v151;
      }
      while (v153 != 3);
      return v86;
    case 0x38u:
      v64 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v64);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v65 = sub_216B2037C(a2);
      LODWORD(v195[0]) = sub_216BB4AA8(v65, v2);
      v66 = sub_216B2037C(a2);
      sub_216BB4E0C((uint64_t)v224, (uint64_t)v195);
      v2 = (float *)sub_216BB4D18(a1, v66, (uint64_t)v2, (uint64_t)v224);
      v5 = v224;
      goto LABEL_150;
    case 0x39u:
      v67 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v67);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v68 = (_QWORD *)sub_216BA9B1C(a2 + 8, 1u);
      v69 = (float *)sub_216BAEB7C(a1, *v68);
      if (sub_216BAEC04((uint64_t)v69))
        return (uint64_t)v69;
      v70 = (_QWORD *)sub_216BA9B1C(a2 + 8, 2u);
      v24 = (unsigned int *)sub_216BAEB7C(a1, *v70);
      if (!sub_216BAEC04((uint64_t)v24))
      {
        v71 = sub_216B2037C(a2);
        LOBYTE(v195[0]) = sub_216BB4C58(v71, (float *)v24, v69) < 0.0;
        v72 = sub_216B2037C(a2);
        sub_216BB4E10((uint64_t)v223, (uint64_t)v195);
        v2 = (float *)sub_216BB4D18(a1, v72, (uint64_t)v2, (uint64_t)v223);
        v5 = v223;
        goto LABEL_150;
      }
      return (uint64_t)v24;
    case 0x3Au:
      v73 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v73);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v74 = (_QWORD *)sub_216BA9B1C(a2 + 8, 1u);
      v24 = (unsigned int *)sub_216BAEB7C(a1, *v74);
      if (sub_216BAEC04((uint64_t)v24))
        return (uint64_t)v24;
      v75 = sub_216B2037C(a2);
      v76 = sub_216BB4C58(v75, (float *)v24, v2);
      *(float *)v195 = v76 + v76;
      sub_216BB4E14((uint64_t)v222, (uint64_t)v195);
      v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v222);
      v6 = v222;
      goto LABEL_221;
    case 0x3Bu:
      v77 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v77);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v78 = (_QWORD *)sub_216BA9B1C(a2 + 8, 1u);
      v24 = (unsigned int *)sub_216BAEB7C(a1, *v78);
      if (sub_216BAEC04((uint64_t)v24))
        return (uint64_t)v24;
      v79 = (_QWORD *)sub_216BA9B1C(a2 + 8, 2u);
      v69 = (float *)sub_216BAEB7C(a1, *v79);
      if (sub_216BAEC04((uint64_t)v69))
        return (uint64_t)v69;
      *(float *)v195 = *v69;
      v180 = sub_216B2037C(a2);
      v193[0] = sub_216BB4C58(v180, (float *)v24, v2);
      v181 = 1.0 - (float)(*(float *)v195 * *(float *)v195) * (1.0 - (float)(v193[0] * v193[0]));
      v196 = v181;
      v182 = sub_216B2037C(a2);
      if (v181 >= 0.0)
      {
        v192[0] = &v196;
        v192[1] = v195;
        v192[2] = v193;
        sub_216BB4E1C(v220, v192);
        v2 = (float *)sub_216BB4AC4(a1, v182, (uint64_t)v2, v24, (uint64_t)v220);
        v6 = v220;
LABEL_221:
        sub_216BA5334(v6);
      }
      else
      {
        sub_216BB4E18((uint64_t)v221);
        v2 = (float *)sub_216BB4D18(a1, v182, (uint64_t)v2, (uint64_t)v221);
        v5 = v221;
LABEL_150:
        sub_216BA5334(v5);
      }
      return (uint64_t)v2;
    case 0x3Cu:
      v195[0] = sub_216B2037C(a2);
      v80 = sub_216B1E600((uint64_t)v195);
      v81 = sub_216BAED9C(v80);
      v82 = sub_216B1E67C(v81);
      sub_216B20C64(&v191, v82);
      if (sub_216BB13DC(v191, 3))
      {
        sub_216BB4E20((uint64_t)v219);
        v2 = (float *)sub_216BAECC4(a1, a2, (uint64_t)v219);
        v6 = v219;
      }
      else
      {
        v138 = sub_216B1E67C(v81);
        sub_216B20C64(&v190, v138);
        sub_216BB13DC(v190, 4);
        sub_216BB4E24((uint64_t)v218);
        v2 = (float *)sub_216BAECC4(a1, a2, (uint64_t)v218);
        v6 = v218;
      }
      goto LABEL_221;
    case 0x3Du:
      v83 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v83);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v84 = (_QWORD *)sub_216BA9B1C(a2 + 8, 1u);
      v24 = (unsigned int *)sub_216BAEB7C(a1, *v84);
      if (sub_216BAEC04((uint64_t)v24))
        return (uint64_t)v24;
      v86 = sub_216BAEC14(a1, 4);
      v195[0] = sub_216B2037C(a2);
      v159 = sub_216B1E600((uint64_t)v195);
      v160 = sub_216BAED9C(v159);
      v161 = sub_216BA734C(v160);
      if (v161)
      {
        v162 = 0;
        v163 = v161;
        do
        {
          v164 = sub_216BA7418(v160);
          if (v164)
          {
            v165 = 0;
            v166 = v164;
            do
            {
              v167 = *(float *)sub_216BA7358((uint64_t)v2, v165);
              v168 = v167 * *(float *)sub_216BA7358((uint64_t)v24, v162);
              *(float *)sub_216BAEC94(v86 + 16 * v162, v165++) = v168;
            }
            while (v166 != v165);
          }
          ++v162;
        }
        while (v162 != v163);
      }
      return v86;
    case 0x3Eu:
      v85 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v2 = (float *)sub_216BAEB7C(a1, *v85);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v86 = sub_216BAEC14(a1, 4);
      v195[0] = sub_216B2037C(a2);
      v87 = sub_216B1E600((uint64_t)v195);
      v88 = sub_216BAED9C(v87);
      v89 = sub_216BA734C(v88);
      if (v89)
      {
        v90 = 0;
        v91 = v89;
        do
        {
          v92 = sub_216BA7418(v88);
          if (v92)
          {
            v93 = 0;
            v94 = (uint64_t)v2;
            v95 = v92;
            do
            {
              v96 = *(_DWORD *)sub_216BA7358(v94, v90);
              *(_DWORD *)sub_216BAEC94(v86 + 16 * v90, v93++) = v96;
              v94 += 16;
            }
            while (v95 != v93);
          }
          ++v90;
        }
        while (v90 != v91);
      }
      return v86;
    case 0x3Fu:
      v97 = a2 + 8;
      v98 = (_QWORD *)sub_216BAEDA0(v97);
      v2 = (float *)sub_216BAEB7C(a1, *v98);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v99 = (uint64_t *)sub_216BAEDA0(v97);
      v195[0] = sub_216BAB358(*v99);
      v100 = sub_216B1E600((uint64_t)v195);
      v101 = sub_216BAED9C(v100);
      v102 = sub_216BA734C(v101);
      v103 = (uint64_t)(v2 + 4);
      if (v102 == 2)
      {
        v54 = sub_216BB4E28((uint64_t)v2, v103, 0);
      }
      else
      {
        v104 = (uint64_t)(v2 + 8);
        if (v102 == 3)
          v54 = sub_216BB4EB0((uint64_t)v2, v103, v104, 0);
        else
          v54 = sub_216BB4F6C((uint64_t)v2, v103, v104, (uint64_t)(v2 + 12));
      }
      return sub_216BAF55C(a1, v54);
    case 0x40u:
      v105 = (_QWORD *)sub_216BAEDA0(a2 + 8);
      v106 = sub_216BAEB7C(a1, *v105);
      if (sub_216BAEC04(v106))
        return v106;
      else
        return 0;
    case 0x41u:
      v107 = (uint64_t *)sub_216BAEDA0(a2 + 8);
      v108 = sub_216BAB358(*v107);
      if (sub_216BB45D4(v108))
      {
        sub_216BB5054((uint64_t)v217);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v217);
        v6 = v217;
      }
      else
      {
        v139 = (uint64_t *)sub_216BAEDA0(a2 + 8);
        v140 = sub_216BAB358(*v139);
        if (sub_216BB4648(v140))
        {
          sub_216BB5058((uint64_t)v216);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v216);
          v6 = v216;
        }
        else
        {
          sub_216BB505C((uint64_t)v215);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v215);
          v6 = v215;
        }
      }
      goto LABEL_221;
    case 0x42u:
      v109 = (uint64_t *)sub_216BAEDA0(a2 + 8);
      v110 = sub_216BAB358(*v109);
      if (sub_216BB45D4(v110))
      {
        sub_216BB5060((uint64_t)v214);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v214);
        v6 = v214;
      }
      else
      {
        v141 = (uint64_t *)sub_216BAEDA0(a2 + 8);
        v142 = sub_216BAB358(*v141);
        if (sub_216BB4648(v142))
        {
          sub_216BB5064((uint64_t)v213);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v213);
          v6 = v213;
        }
        else
        {
          sub_216BB5068((uint64_t)v212);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v212);
          v6 = v212;
        }
      }
      goto LABEL_221;
    case 0x43u:
      v111 = (uint64_t *)sub_216BAEDA0(a2 + 8);
      v112 = sub_216BAB358(*v111);
      if (sub_216BB45D4(v112))
      {
        sub_216BB506C((uint64_t)v211);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v211);
        v6 = v211;
      }
      else
      {
        v143 = (uint64_t *)sub_216BAEDA0(a2 + 8);
        v144 = sub_216BAB358(*v143);
        if (sub_216BB4648(v144))
        {
          sub_216BB5070((uint64_t)v210);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v210);
          v6 = v210;
        }
        else
        {
          sub_216BB5074((uint64_t)v209);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v209);
          v6 = v209;
        }
      }
      goto LABEL_221;
    case 0x44u:
      v113 = (uint64_t *)sub_216BAEDA0(a2 + 8);
      v114 = sub_216BAB358(*v113);
      if (sub_216BB45D4(v114))
      {
        sub_216BB5078((uint64_t)v208);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v208);
        v6 = v208;
      }
      else
      {
        v145 = (uint64_t *)sub_216BAEDA0(a2 + 8);
        v146 = sub_216BAB358(*v145);
        if (sub_216BB4648(v146))
        {
          sub_216BB507C((uint64_t)v207);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v207);
          v6 = v207;
        }
        else
        {
          sub_216BB5080((uint64_t)v206);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v206);
          v6 = v206;
        }
      }
      goto LABEL_221;
    case 0x45u:
      v115 = (uint64_t *)sub_216BAEDA0(a2 + 8);
      v116 = sub_216BAB358(*v115);
      if (sub_216BB45D4(v116))
      {
        sub_216BB5084((uint64_t)v205);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v205);
        v6 = v205;
      }
      else
      {
        v147 = (uint64_t *)sub_216BAEDA0(a2 + 8);
        v148 = sub_216BAB358(*v147);
        if (sub_216BB4648(v148))
        {
          sub_216BB5088((uint64_t)v204);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v204);
          v6 = v204;
        }
        else
        {
          v175 = (uint64_t *)sub_216BAEDA0(a2 + 8);
          v176 = sub_216BAB358(*v175);
          if (sub_216BB508C(v176))
          {
            sub_216BB50D0((uint64_t)v203);
            v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v203);
            v6 = v203;
          }
          else
          {
            sub_216BB50D4((uint64_t)v202);
            v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v202);
            v6 = v202;
          }
        }
      }
      goto LABEL_221;
    case 0x46u:
      v117 = (uint64_t *)sub_216BAEDA0(a2 + 8);
      v118 = sub_216BAB358(*v117);
      if (sub_216BB45D4(v118))
      {
        sub_216BB50D8((uint64_t)v201);
        v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v201);
        v6 = v201;
      }
      else
      {
        v149 = (uint64_t *)sub_216BAEDA0(a2 + 8);
        v150 = sub_216BAB358(*v149);
        if (sub_216BB4648(v150))
        {
          sub_216BB50DC((uint64_t)v200);
          v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v200);
          v6 = v200;
        }
        else
        {
          v177 = (uint64_t *)sub_216BAEDA0(a2 + 8);
          v178 = sub_216BAB358(*v177);
          if (sub_216BB508C(v178))
          {
            sub_216BB50E0((uint64_t)v199);
            v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v199);
            v6 = v199;
          }
          else
          {
            sub_216BB50E4((uint64_t)v198);
            v2 = (float *)sub_216BB4494(a1, a2, (uint64_t)v198);
            v6 = v198;
          }
        }
      }
      goto LABEL_221;
    case 0x47u:
      v119 = a2 + 8;
      v120 = (_QWORD *)sub_216BAEDA0(v119);
      v2 = (float *)sub_216BAEB7C(a1, *v120);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v121 = (uint64_t *)sub_216BAEDA0(v119);
      v195[0] = sub_216BAB358(*v121);
      v122 = sub_216B1E600((uint64_t)v195);
      if (sub_216BAEC44(v122))
        goto LABEL_145;
      v123 = (uint64_t *)sub_216BAEDA0(v119);
      v195[0] = sub_216BAB358(*v123);
      v124 = sub_216B1E600((uint64_t)v195);
      v125 = sub_216BAED9C(v124);
      v126 = sub_216BA734C(v125);
      if (!v126)
        goto LABEL_142;
      v127 = 0;
      v128 = v126;
      while (!*(_BYTE *)sub_216BA7358((uint64_t)v2, v127))
      {
        if (v128 == ++v127)
          goto LABEL_142;
      }
      goto LABEL_187;
    case 0x48u:
      v131 = a2 + 8;
      v132 = (_QWORD *)sub_216BAEDA0(v131);
      v2 = (float *)sub_216BAEB7C(a1, *v132);
      if (sub_216BAEC04((uint64_t)v2))
        return (uint64_t)v2;
      v133 = (uint64_t *)sub_216BAEDA0(v131);
      v195[0] = sub_216BAB358(*v133);
      v134 = sub_216B1E600((uint64_t)v195);
      if (sub_216BAEC44(v134))
      {
LABEL_145:
        v130 = *(unsigned __int8 *)v2;
        v129 = a1;
        return sub_216BAF688(v129, v130);
      }
      v169 = (uint64_t *)sub_216BAEDA0(v131);
      v195[0] = sub_216BAB358(*v169);
      v170 = sub_216B1E600((uint64_t)v195);
      v171 = sub_216BAED9C(v170);
      v172 = sub_216BA734C(v171);
      if (!v172)
        goto LABEL_187;
      v173 = 0;
      v174 = v172;
      break;
    case 0x49u:
      sub_216BB50E8((uint64_t)v197);
      v2 = (float *)sub_216BB43BC(a1, a2, (uint64_t)v197);
      v5 = v197;
      goto LABEL_150;
    case 0x4Au:
      return sub_216BB50EC(a1);
    default:
      return (uint64_t)v2;
  }
  do
  {
    if (!*(_BYTE *)sub_216BA7358((uint64_t)v2, v173))
    {
LABEL_142:
      v129 = a1;
      v130 = 0;
      return sub_216BAF688(v129, v130);
    }
    ++v173;
  }
  while (v174 != v173);
LABEL_187:
  v129 = a1;
  v130 = 1;
  return sub_216BAF688(v129, v130);
}

_DWORD *sub_216BB43BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _BYTE v10[32];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)sub_216BAEDA0(a2 + 8);
  v7 = (_DWORD *)sub_216BAEB7C(a1, *v6);
  if (!sub_216BAEC04((uint64_t)v7))
  {
    v8 = sub_216B2037C(a2);
    sub_216BAB860(v10, a3);
    v7 = sub_216BB4D18(a1, v8, (uint64_t)v7, (uint64_t)v10);
    sub_216BA5334(v10);
  }
  return v7;
}

unsigned int *sub_216BB4494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  _BYTE v13[32];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 8;
  v7 = (_QWORD *)sub_216BA9B1C(a2 + 8, 0);
  v8 = (_DWORD *)sub_216BAEB7C(a1, *v7);
  v9 = (_QWORD *)sub_216BA9B1C(v6, 1u);
  v10 = (unsigned int *)sub_216BAEB7C(a1, *v9);
  if (!sub_216BAEC04((uint64_t)v8))
  {
    if (sub_216BAEC04((uint64_t)v10))
    {
      return v10;
    }
    else
    {
      v11 = sub_216B2037C(a2);
      sub_216BAB860(v13, a3);
      v8 = sub_216BB4AC4(a1, v11, (uint64_t)v8, v10, (uint64_t)v13);
      sub_216BA5334(v13);
    }
  }
  return v8;
}

uint64_t sub_216BB45D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v5 = a1;
  v1 = sub_216B1E600((uint64_t)&v5);
  v2 = sub_216BAED9C(v1);
  v3 = sub_216BA7EA4(v2);
  return (v3 < 0x11) & (0x1C020u >> v3);
}

uint64_t sub_216BB4648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v5 = a1;
  v1 = sub_216B1E600((uint64_t)&v5);
  v2 = sub_216BAED9C(v1);
  v3 = sub_216BA7EA4(v2);
  return (v3 < 0x14) & (0xE0040u >> v3);
}

unsigned int *sub_216BB46A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = sub_216B2037C(a2);
  v8 = a2 + 8;
  v9 = (_QWORD *)sub_216BA9B1C(a2 + 8, 0);
  v10 = (unsigned int *)sub_216BAEB7C(a1, *v9);
  v11 = (_QWORD *)sub_216BA9B1C(v8, 1u);
  v12 = sub_216BAEB7C(a1, *v11);
  v13 = (_QWORD *)sub_216BA9B1C(v8, 2u);
  v14 = (unsigned int *)sub_216BAEB7C(a1, *v13);
  if (!sub_216BAEC04((uint64_t)v10))
  {
    if (sub_216BAEC04(v12))
      return (unsigned int *)v12;
    if (sub_216BAEC04((uint64_t)v14))
      return v14;
    v15 = sub_216B1E600((uint64_t)&v41);
    if (sub_216BAEC44(v15))
    {
      v16 = sub_216BB561C(a3);
      return sub_216BB2530(a1, v16);
    }
    v17 = sub_216B1E600((uint64_t)&v41);
    v18 = sub_216BAED9C(v17);
    v19 = sub_216BAEC14(a1, 3);
    if (*((_BYTE *)v10 + 64) == 1)
    {
      v20 = sub_216BA734C(v18);
      if (v20)
      {
        v21 = 0;
        v35 = (unsigned int *)v12;
        v38 = v20;
        v12 = v19;
        do
        {
          v4 = v4 & 0xFFFFFFFF00000000 | *v10;
          v3 = v3 & 0xFFFFFFFF00000000 | *v35;
          sub_216BA7358((uint64_t)v14, v21);
          v22 = sub_216BB561C(a3);
          *(_DWORD *)sub_216BAEC94(v19, v21++) = v22;
        }
        while (v38 != v21);
        return (unsigned int *)v12;
      }
    }
    else
    {
      if (*(_BYTE *)(v12 + 64) != 1)
      {
        v27 = a3;
        v28 = *((unsigned __int8 *)v14 + 64);
        v29 = sub_216BA734C(v18);
        if (v28 == 1)
        {
          if (!v29)
            return (unsigned int *)v19;
          v30 = 0;
          v36 = v29;
          v40 = v19;
          do
          {
            sub_216BA7358((uint64_t)v10, v30);
            sub_216BA7358(v12, v30);
            v19 = v19 & 0xFFFFFFFF00000000 | *v14;
            v31 = sub_216BB561C(v27);
            *(_DWORD *)sub_216BAEC94(v40, v30++) = v31;
          }
          while (v36 != v30);
        }
        else
        {
          if (!v29)
            return (unsigned int *)v19;
          v32 = 0;
          v37 = v29;
          v40 = v19;
          do
          {
            sub_216BA7358((uint64_t)v10, v32);
            sub_216BA7358(v12, v32);
            sub_216BA7358((uint64_t)v14, v32);
            v33 = sub_216BB561C(v27);
            *(_DWORD *)sub_216BAEC94(v19, v32++) = v33;
          }
          while (v37 != v32);
        }
        return (unsigned int *)v40;
      }
      v23 = sub_216BA734C(v18);
      if (v23)
      {
        v24 = 0;
        v39 = v23;
        v25 = (unsigned int *)v12;
        v12 = v19;
        do
        {
          sub_216BA7358((uint64_t)v10, v24);
          v3 = v3 & 0xFFFFFFFF00000000 | *v25;
          v19 = v19 & 0xFFFFFFFF00000000 | *v14;
          v26 = sub_216BB561C(a3);
          *(_DWORD *)sub_216BAEC94(v12, v24++) = v26;
        }
        while (v39 != v24);
        return (unsigned int *)v12;
      }
    }
    return (unsigned int *)v19;
  }
  return v10;
}

float sub_216BB4A84(float a1, float a2, float a3)
{
  float v4;

  v4 = sub_216BBC86C(a1, a2);
  return sub_216BBC3CC(v4, a3);
}

float sub_216BB4AA8(uint64_t a1, float *a2)
{
  return sqrtf(sub_216BB4C58(a1, a2, a2));
}

_DWORD *sub_216BB4AC4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;

  v23 = a2;
  v9 = sub_216B1E600((uint64_t)&v23);
  if (sub_216BAEC44(v9))
  {
    v10 = sub_216BAEC68(a5);
    return sub_216BB2530(a1, v10);
  }
  else
  {
    v12 = sub_216B1E600((uint64_t)&v23);
    v13 = sub_216BAED9C(v12);
    v11 = sub_216BAEC14(a1, 3);
    v14 = *((unsigned __int8 *)a4 + 64);
    v15 = sub_216BA734C(v13);
    if ((_DWORD)v14 == 1)
    {
      if (v15)
      {
        v16 = 0;
        v17 = v15;
        do
        {
          sub_216BA7358(a3, v16);
          v14 = v14 & 0xFFFFFFFF00000000 | *a4;
          v18 = sub_216BAEC68(a5);
          *(_DWORD *)sub_216BAEC94(v11, v16++) = v18;
        }
        while (v17 != v16);
      }
    }
    else if (v15)
    {
      v19 = 0;
      v20 = v15;
      do
      {
        sub_216BA7358(a3, v19);
        sub_216BA7358((uint64_t)a4, v19);
        v21 = sub_216BAEC68(a5);
        *(_DWORD *)sub_216BAEC94(v11, v19++) = v21;
      }
      while (v20 != v19);
    }
  }
  return (_DWORD *)v11;
}

float sub_216BB4C58(uint64_t a1, float *a2, float *a3)
{
  float v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v14;

  v14 = a1;
  v6 = sub_216B1E600((uint64_t)&v14);
  if (sub_216BAEC44(v6))
    return *a2 * *a3;
  v7 = sub_216B1E600((uint64_t)&v14);
  v8 = sub_216BA7040(v7);
  if (v8)
  {
    v9 = sub_216BA734C(v8);
    if (v9)
    {
      v10 = 0;
      v11 = v9;
      v3 = 0.0;
      do
      {
        v12 = *(float *)sub_216BA7358((uint64_t)a2, v10);
        v3 = v3 + (float)(v12 * *(float *)sub_216BA7358((uint64_t)a3, v10++));
      }
      while (v11 != v10);
    }
    else
    {
      return 0.0;
    }
  }
  return v3;
}

_DWORD *sub_216BB4D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;

  v17 = a2;
  v7 = sub_216B1E600((uint64_t)&v17);
  if (sub_216BAEC44(v7))
  {
    v8 = sub_216BB5670(a4);
    return sub_216BB2530(a1, v8);
  }
  else
  {
    v10 = sub_216B1E600((uint64_t)&v17);
    v11 = sub_216BAED9C(v10);
    v9 = sub_216BAEC14(a1, 3);
    v12 = sub_216BA734C(v11);
    if (v12)
    {
      v13 = 0;
      v14 = v12;
      do
      {
        sub_216BA7358(a3, v13);
        v15 = sub_216BB5670(a4);
        *(_DWORD *)sub_216BAEC94(v9, v13++) = v15;
      }
      while (v14 != v13);
    }
  }
  return (_DWORD *)v9;
}

float sub_216BB4E28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;

  v6 = a3;
  v7 = *(float *)sub_216BA7358(a1, a3);
  v8 = *(float *)sub_216BA7358(a2, v6);
  v9 = a3 + 1;
  v10 = *(float *)sub_216BA7358(a1, v9);
  return (float)(v7 * *(float *)sub_216BA7358(a2, v9)) - (float)(v8 * v10);
}

float sub_216BB4EB0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v4 = a4;
  v8 = a4;
  v9 = *(float *)sub_216BA7358(a1, a4);
  v10 = *(float *)sub_216BA7358(a2, v8);
  v11 = *(float *)sub_216BA7358(a3, v8);
  v12 = sub_216BB4E28(a2, a3, ++v4);
  v13 = (float)(v9 * v12) - (float)(v10 * sub_216BB4E28(a1, a3, v4));
  return v13 + (float)(v11 * sub_216BB4E28(a1, a2, v4));
}

float sub_216BB4F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v8 = *(float *)sub_216BA7358(a1, 0);
  v9 = *(float *)sub_216BA7358(a2, 0);
  v10 = *(float *)sub_216BA7358(a3, 0);
  v11 = *(float *)sub_216BA7358(a4, 0);
  v12 = sub_216BB4EB0(a2, a3, a4, 1u);
  v13 = (float)(v8 * v12) - (float)(v9 * sub_216BB4EB0(a1, a3, a4, 1u));
  v14 = v13 + (float)(v10 * sub_216BB4EB0(a1, a2, a4, 1u));
  return v14 - (float)(v11 * sub_216BB4EB0(a1, a2, a3, 1u));
}

uint64_t sub_216BB508C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v5 = a1;
  v1 = sub_216B1E600((uint64_t)&v5);
  v2 = sub_216BAED9C(v1);
  v3 = sub_216BA7EA4(v2);
  return (v3 < 0x17) & (0x700080u >> v3);
}

uint64_t sub_216BB50EC(uint64_t a1)
{
  return sub_216BAFBA4(a1, 0);
}

uint64_t sub_216BB50F4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int *v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15[4];

  *a4 = 0;
  v8 = sub_216BAB358(a1);
  v9 = sub_216BB13DC(v8, 5);
  if ((v9 & 1) != 0 || (v10 = sub_216BAB358(a1), result = sub_216BB13DC(v10, 6), (_DWORD)result))
  {
    sub_216BB51F8(v15, a2);
    v12 = (unsigned int *)sub_216BAEB7C(v15, a1);
    j_nullsub_1(v15, v13);
    if (sub_216BAEC04((uint64_t)v12))
    {
      result = 0;
      *a4 = *(_QWORD *)v12;
    }
    else if (*((_BYTE *)v12 + 64) == 1)
    {
      sub_216B1E414(v14, 32, *v12, v9);
      sub_216B91EEC(v15, v14, v9 ^ 1);
      sub_216B91D50(a3, (uint64_t)v15);
      sub_216B91D80(v15);
      sub_216B1D998(v14);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_216BB51FC(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v9[4];

  *a3 = 0;
  sub_216BB51F8(v9, a2);
  v5 = (_QWORD *)sub_216BAEB7C(v9, a1);
  j_nullsub_1(v9, v6);
  v7 = sub_216BAEC04((uint64_t)v5);
  if (v7)
    *a3 = *v5;
  return !v7;
}

uint64_t sub_216BB5260(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = 0;
  return sub_216B65AA8(a1, a2, &v3);
}

uint64_t sub_216BB5284(uint64_t *a1, unint64_t a2)
{
  uint64_t result;

  result = sub_216B9E3DC(a2);
  switch((int)result)
  {
    case 0:
      result = sub_216BAF588((uint64_t)a1, a2);
      break;
    case 1:
      result = sub_216BAF608((uint64_t)a1, a2);
      break;
    case 2:
      result = sub_216BAF65C((uint64_t)a1, a2);
      break;
    case 3:
    case 4:
      result = sub_216BAF50C((uint64_t)a1, a2);
      break;
    case 5:
      result = sub_216BAF6B4((uint64_t)a1, a2);
      break;
    case 6:
      result = sub_216BAFC30((uint64_t)a1, a2);
      break;
    case 7:
      result = (uint64_t)sub_216BB148C((uint64_t)a1, a2);
      break;
    case 8:
    case 9:
    case 14:
    case 18:
    case 20:
      result = sub_216BB549C((uint64_t)a1, a2);
      break;
    case 10:
      result = sub_216BB1544(a1, a2);
      break;
    case 11:
      result = sub_216BB15E8((uint64_t)a1, a2);
      break;
    case 12:
      result = sub_216BB1690((uint64_t)a1, a2);
      break;
    case 13:
      result = sub_216BB22D8((uint64_t)a1, a2);
      break;
    case 15:
      result = (uint64_t)sub_216BB2414((uint64_t)a1, a2);
      break;
    case 16:
      result = (uint64_t)sub_216BB2558((uint64_t)a1, a2);
      break;
    case 17:
      result = sub_216BB275C((uint64_t)a1, a2);
      break;
    case 19:
      result = sub_216BB2840((uint64_t)a1, a2);
      break;
    case 21:
    case 22:
      result = sub_216BB54A0((uint64_t)a1, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216BB54A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E67C(a2);
  return sub_216BAEB7C(a1, v3);
}

uint64_t sub_216BB54D0(uint64_t a1)
{
  sub_216BB54F8(a1, 0);
  return a1;
}

uint64_t sub_216BB54F8(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)result = a2;
  return result;
}

uint64_t sub_216BB5508(uint64_t result, float a2)
{
  *(float *)result = a2;
  *(_BYTE *)(result + 64) = 1;
  return result;
}

uint64_t sub_216BB551C(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  *(_BYTE *)(result + 64) = 1;
  return result;
}

_BYTE *sub_216BB5530(_BYTE *result, char a2)
{
  *result = a2;
  result[64] = 1;
  return result;
}

uint64_t sub_216BB5540(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_216B89B20(0x48uLL, *(uint64_t **)(a1 + 8));
  return sub_216BB54CC(v1);
}

uint64_t sub_216BB555C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA8034(&v2);
}

void *sub_216BB5580(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *result;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  sub_216BB5614((uint64_t)a2, *a1);
  result = (void *)sub_216B1E67C((uint64_t)v11);
  if (result)
  {
    v7 = sub_216B1E67C((uint64_t)v11);
    v8 = (void *)sub_216B2663C(a2, 8 * v7, 8uLL);
    *a1 = (uint64_t)v8;
    v9 = (const void *)sub_216B1E600((uint64_t)v11);
    v10 = sub_216B1E67C((uint64_t)v11);
    return memcpy(v8, v9, 8 * v10);
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t sub_216BB5614(uint64_t a1, uint64_t a2)
{
  return j_nullsub_1(a1, a2);
}

uint64_t sub_216BB561C(uint64_t a1)
{
  return sub_216BB564C(a1);
}

uint64_t sub_216BB564C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  v3 = sub_216BABC78();
  return sub_216BB5670(v3);
}

uint64_t sub_216BB5670(uint64_t a1)
{
  return sub_216BABC54(a1);
}

uint64_t sub_216BB5694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216BB56EC(a2);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v4 + 928) + 1616;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 928) + 1752;
  v5 = sub_216BB56F4(a2);
  *(_BYTE *)(a1 + 24) = sub_216BA2994(v5);
  return a1;
}

uint64_t sub_216BB56EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_216BB56F4(uint64_t a1)
{
  return sub_216B1E600(a1 + 160);
}

uint64_t sub_216BB56FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  v3 = sub_216BABC78();
  return sub_216BB5720(v3);
}

uint64_t sub_216BB5720(uint64_t a1)
{
  char v2;

  return sub_216BB5740(a1, &v2);
}

uint64_t sub_216BB5748(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB5770();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB5774(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603138;
  sub_216BB57D4(a2, a3);
  return a1;
}

_QWORD *sub_216BB57C0(_QWORD *result)
{
  *result = &unk_24D603180;
  return result;
}

void sub_216BB57DC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_5();
  j__free(v0);
}

uint64_t sub_216BB57F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB5770(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB5864(uint64_t a1, uint64_t a2)
{
  return sub_216BB5770(a2, a1 + 8);
}

uint64_t sub_216BB5878(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB5880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB58B8(a2, a3);
}

uint64_t sub_216BB5894(uint64_t a1, uint64_t a2)
{
  sub_216BAA6B8(a1);
  return sub_216BAA6B8(a2);
}

uint64_t sub_216BB58C0(int *a1, unsigned int *a2)
{
  return sub_216BB58CC(*a1, *a2);
}

uint64_t sub_216BB58CC(int a1, uint64_t a2)
{
  return nullsub_1(a2 | a1, a2);
}

uint64_t sub_216BB58D4(uint64_t a1)
{
  char v2;

  return sub_216BB58F4(a1, &v2);
}

uint64_t sub_216BB58FC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB5924();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB5928(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6031C8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB5978()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_6();
  j__free(v0);
}

uint64_t sub_216BB598C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB5924(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB5A00(uint64_t a1, uint64_t a2)
{
  return sub_216BB5924(a2, a1 + 8);
}

uint64_t sub_216BB5A14(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB5A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB58B8(a2, a3);
}

uint64_t sub_216BB5A28(uint64_t a1)
{
  char v2;

  return sub_216BB5A48(a1, &v2);
}

uint64_t sub_216BB5A50(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB5A78();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB5A7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603210;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB5ACC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_7();
  j__free(v0);
}

uint64_t sub_216BB5AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB5A78(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB5B54(uint64_t a1, uint64_t a2)
{
  return sub_216BB5A78(a2, a1 + 8);
}

uint64_t sub_216BB5B68(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB5B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB5B7C(a2, a3);
}

uint64_t sub_216BB5B84(int *a1, unsigned int *a2)
{
  return sub_216BB5B90(*a1, *a2);
}

uint64_t sub_216BB5B90(int a1, uint64_t a2)
{
  return nullsub_1(a2 ^ a1, a2);
}

uint64_t sub_216BB5B98(uint64_t a1)
{
  char v2;

  return sub_216BB5BB8(a1, &v2);
}

uint64_t sub_216BB5BC0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB5BE8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB5BEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603258;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB5C3C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_8();
  j__free(v0);
}

uint64_t sub_216BB5C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB5BE8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB5CC4(uint64_t a1, uint64_t a2)
{
  return sub_216BB5BE8(a2, a1 + 8);
}

uint64_t sub_216BB5CD8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB5CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB5B7C(a2, a3);
}

uint64_t sub_216BB5CEC(uint64_t a1)
{
  char v2;

  return sub_216BB5D0C(a1, &v2);
}

uint64_t sub_216BB5D14(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB5D3C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB5D40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6032A0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB5D90()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_9();
  j__free(v0);
}

uint64_t sub_216BB5DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB5D3C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB5E18(uint64_t a1, uint64_t a2)
{
  return sub_216BB5D3C(a2, a1 + 8);
}

uint64_t sub_216BB5E2C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB5E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB5E40(a2, a3);
}

uint64_t sub_216BB5E48(int *a1, unsigned int *a2)
{
  return sub_216BB5E54(*a1, *a2);
}

uint64_t sub_216BB5E54(int a1, uint64_t a2)
{
  return nullsub_1(a2 & a1, a2);
}

uint64_t sub_216BB5E5C(uint64_t a1)
{
  char v2;

  return sub_216BB5E7C(a1, &v2);
}

uint64_t sub_216BB5E84(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB5EAC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB5EB0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6032E8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB5F00()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_10();
  j__free(v0);
}

uint64_t sub_216BB5F14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB5EAC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB5F88(uint64_t a1, uint64_t a2)
{
  return sub_216BB5EAC(a2, a1 + 8);
}

uint64_t sub_216BB5F9C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB5FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB5E40(a2, a3);
}

uint64_t sub_216BB5FB0(uint64_t a1)
{
  char v2;

  return sub_216BB5FD0(a1, &v2);
}

uint64_t sub_216BB5FD8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6000();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6004(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603330;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6054()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_11();
  j__free(v0);
}

uint64_t sub_216BB6068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6000(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB60DC(uint64_t a1, uint64_t a2)
{
  return sub_216BB6000(a2, a1 + 8);
}

uint64_t sub_216BB60F0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB60F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6104(a2, a3);
}

uint64_t sub_216BB610C(unsigned int *a1, unsigned int *a2)
{
  return sub_216BB6118(*a1, *a2);
}

uint64_t sub_216BB6118(unsigned int a1, uint64_t a2)
{
  return nullsub_1(a1 >> a2, a2);
}

uint64_t sub_216BB6120(uint64_t a1)
{
  char v2;

  return sub_216BB6140(a1, &v2);
}

uint64_t sub_216BB6148(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6170();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6174(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603378;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB61C4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_12();
  j__free(v0);
}

uint64_t sub_216BB61D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6170(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB624C(uint64_t a1, uint64_t a2)
{
  return sub_216BB6170(a2, a1 + 8);
}

uint64_t sub_216BB6260(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB6268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6274(a2, a3);
}

uint64_t sub_216BB627C(int *a1, unsigned int *a2)
{
  return sub_216BB6288(*a1, *a2);
}

uint64_t sub_216BB6288(int a1, uint64_t a2)
{
  return nullsub_1((a1 >> a2), a2);
}

uint64_t sub_216BB6290(uint64_t a1)
{
  char v2;

  return sub_216BB62B0(a1, &v2);
}

uint64_t sub_216BB62B8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB62E0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB62E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6033C0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6334()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_13();
  j__free(v0);
}

uint64_t sub_216BB6348(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB62E0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB63BC(uint64_t a1, uint64_t a2)
{
  return sub_216BB62E0(a2, a1 + 8);
}

uint64_t sub_216BB63D0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB63D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB63E4(a2, a3);
}

uint64_t sub_216BB63EC(int *a1, unsigned int *a2)
{
  return sub_216BB63F8(*a1, *a2);
}

uint64_t sub_216BB63F8(int a1, uint64_t a2)
{
  return nullsub_1((a1 << a2), a2);
}

uint64_t sub_216BB6400(uint64_t a1)
{
  char v2;

  return sub_216BB6420(a1, &v2);
}

uint64_t sub_216BB6428(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6450();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6454(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603408;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB64A4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_14();
  j__free(v0);
}

uint64_t sub_216BB64B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6450(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB652C(uint64_t a1, uint64_t a2)
{
  return sub_216BB6450(a2, a1 + 8);
}

uint64_t sub_216BB6540(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB6548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB63E4(a2, a3);
}

uint64_t sub_216BB6554(uint64_t a1)
{
  char v2;

  return sub_216BB6574(a1, &v2);
}

uint64_t sub_216BB657C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB65A4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB65A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603450;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB65F8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_15();
  j__free(v0);
}

uint64_t sub_216BB660C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB65A4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB6680(uint64_t a1, uint64_t a2)
{
  return sub_216BB65A4(a2, a1 + 8);
}

uint64_t sub_216BB6694(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB669C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB66A8(a2, a3);
}

void sub_216BB66B0()
{
  sub_216BB66BC();
}

void sub_216BB66BC()
{
  sub_216BB66CC();
}

uint64_t sub_216BB66D4(uint64_t a1)
{
  char v2;

  return sub_216BB66F4(a1, &v2);
}

uint64_t sub_216BB66FC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6724();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6728(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603498;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6778()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_16();
  j__free(v0);
}

uint64_t sub_216BB678C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6724(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB6800(uint64_t a1, uint64_t a2)
{
  return sub_216BB6724(a2, a1 + 8);
}

uint64_t sub_216BB6814(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB681C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB66A8(a2, a3);
}

uint64_t sub_216BB6828(uint64_t a1)
{
  char v2;

  return sub_216BB6848(a1, &v2);
}

uint64_t sub_216BB6850(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6878();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB687C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6034E0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB68CC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_17();
  j__free(v0);
}

uint64_t sub_216BB68E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6878(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB6954(uint64_t a1, uint64_t a2)
{
  return sub_216BB6878(a2, a1 + 8);
}

uint64_t sub_216BB6968(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB6970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB66A8(a2, a3);
}

uint64_t sub_216BB697C(uint64_t a1)
{
  char v2;

  return sub_216BB699C(a1, &v2);
}

uint64_t sub_216BB69A4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB69CC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB69D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603528;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6A20()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_18();
  j__free(v0);
}

uint64_t sub_216BB6A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB69CC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB6AA8(uint64_t a1, uint64_t a2)
{
  return sub_216BB69CC(a2, a1 + 8);
}

uint64_t sub_216BB6ABC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB6AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB66A8(a2, a3);
}

uint64_t sub_216BB6AD0(uint64_t a1)
{
  char v2;

  return sub_216BB6AF0(a1, &v2);
}

uint64_t sub_216BB6AF8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6B20();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6B24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603570;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6B74()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_19();
  j__free(v0);
}

uint64_t sub_216BB6B88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6B20(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB6BFC(uint64_t a1, uint64_t a2)
{
  return sub_216BB6B20(a2, a1 + 8);
}

uint64_t sub_216BB6C10(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB6C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6C24(a2, a3);
}

uint64_t sub_216BB6C2C(int *a1, unsigned int *a2)
{
  return sub_216BB6C38(*a1, *a2);
}

uint64_t sub_216BB6C38(int a1, uint64_t a2)
{
  return nullsub_1((a2 + a1), a2);
}

uint64_t sub_216BB6C40(uint64_t a1)
{
  char v2;

  return sub_216BB6C60(a1, &v2);
}

uint64_t sub_216BB6C68(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6C90();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6C94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6035B8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6CE4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_20();
  j__free(v0);
}

uint64_t sub_216BB6CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6C90(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB6D6C(uint64_t a1, uint64_t a2)
{
  return sub_216BB6C90(a2, a1 + 8);
}

uint64_t sub_216BB6D80(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB6D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6D94(a2, a3);
}

void sub_216BB6D9C()
{
  sub_216BB6DA8();
}

void sub_216BB6DA8()
{
  sub_216BB66CC();
}

uint64_t sub_216BB6DB8(uint64_t a1)
{
  char v2;

  return sub_216BB6DD8(a1, &v2);
}

uint64_t sub_216BB6DE0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6E08();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6E0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603600;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6E5C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_21();
  j__free(v0);
}

uint64_t sub_216BB6E70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6E08(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB6EE4(uint64_t a1, uint64_t a2)
{
  return sub_216BB6E08(a2, a1 + 8);
}

uint64_t sub_216BB6EF8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB6F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6D94(a2, a3);
}

uint64_t sub_216BB6F0C(uint64_t a1)
{
  char v2;

  return sub_216BB6F2C(a1, &v2);
}

uint64_t sub_216BB6F34(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB6F5C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB6F60(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603648;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB6FB0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_22();
  j__free(v0);
}

uint64_t sub_216BB6FC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB6F5C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7038(uint64_t a1, uint64_t a2)
{
  return sub_216BB6F5C(a2, a1 + 8);
}

uint64_t sub_216BB704C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB7054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6D94(a2, a3);
}

uint64_t sub_216BB7060(uint64_t a1)
{
  char v2;

  return sub_216BB7080(a1, &v2);
}

uint64_t sub_216BB7088(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB70B0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB70B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603690;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7104()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_23();
  j__free(v0);
}

uint64_t sub_216BB7118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB70B0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB718C(uint64_t a1, uint64_t a2)
{
  return sub_216BB70B0(a2, a1 + 8);
}

uint64_t sub_216BB71A0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB71A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6D94(a2, a3);
}

uint64_t sub_216BB71B4(uint64_t a1)
{
  char v2;

  return sub_216BB71D4(a1, &v2);
}

uint64_t sub_216BB71DC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB7204();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB7208(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6036D8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7258()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_24();
  j__free(v0);
}

uint64_t sub_216BB726C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB7204(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB72E0(uint64_t a1, uint64_t a2)
{
  return sub_216BB7204(a2, a1 + 8);
}

uint64_t sub_216BB72F4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB72FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB7308(a2, a3);
}

uint64_t sub_216BB7310(int *a1, unsigned int *a2)
{
  return sub_216BB731C(*a1, *a2);
}

uint64_t sub_216BB731C(int a1, uint64_t a2)
{
  return nullsub_1((a1 - a2), a2);
}

uint64_t sub_216BB7324(uint64_t a1)
{
  char v2;

  return sub_216BB7344(a1, &v2);
}

uint64_t sub_216BB734C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB7374();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB7378(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603720;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB73C8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_25();
  j__free(v0);
}

uint64_t sub_216BB73DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB7374(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7450(uint64_t a1, uint64_t a2)
{
  return sub_216BB7374(a2, a1 + 8);
}

uint64_t sub_216BB7464(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB746C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB7308(a2, a3);
}

uint64_t sub_216BB7478(uint64_t a1)
{
  char v2;

  return sub_216BB7498(a1, &v2);
}

uint64_t sub_216BB74A0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB74C8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB74CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603768;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB751C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_26();
  j__free(v0);
}

uint64_t sub_216BB7530(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB74C8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB75A4(uint64_t a1, uint64_t a2)
{
  return sub_216BB74C8(a2, a1 + 8);
}

uint64_t sub_216BB75B8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB75C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB75CC(a2, a3);
}

uint64_t sub_216BB75D4(unsigned int *a1, unsigned int *a2)
{
  return sub_216BB75E0(*a1, *a2);
}

uint64_t sub_216BB75E0(unsigned int a1, uint64_t a2)
{
  return nullsub_1(a1 % a2, a2);
}

uint64_t sub_216BB75EC(uint64_t a1)
{
  char v2;

  return sub_216BB760C(a1, &v2);
}

uint64_t sub_216BB7614(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB763C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB7640(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6037B0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7690()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_27();
  j__free(v0);
}

uint64_t sub_216BB76A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB763C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7718(uint64_t a1, uint64_t a2)
{
  return sub_216BB763C(a2, a1 + 8);
}

uint64_t sub_216BB772C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB7734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB7740(a2, a3);
}

uint64_t sub_216BB7748(int *a1, unsigned int *a2)
{
  return sub_216BB7754(*a1, *a2);
}

uint64_t sub_216BB7754(int a1, uint64_t a2)
{
  return nullsub_1((a1 % (int)a2), a2);
}

uint64_t sub_216BB7760(uint64_t a1)
{
  char v2;

  return sub_216BB7780(a1, &v2);
}

uint64_t sub_216BB7788(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB77B0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB77B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6037F8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7804()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_28();
  j__free(v0);
}

uint64_t sub_216BB7818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB77B0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB788C(uint64_t a1, uint64_t a2)
{
  return sub_216BB77B0(a2, a1 + 8);
}

uint64_t sub_216BB78A0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB78A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB78B4(a2, a3);
}

void sub_216BB78BC()
{
  sub_216BB78C8();
}

void sub_216BB78C8()
{
  sub_216BB66CC();
}

uint64_t sub_216BB78D8(uint64_t a1)
{
  char v2;

  return sub_216BB78F8(a1, &v2);
}

uint64_t sub_216BB7900(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB7928();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB792C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603840;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB797C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_29();
  j__free(v0);
}

uint64_t sub_216BB7990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB7928(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7A04(uint64_t a1, uint64_t a2)
{
  return sub_216BB7928(a2, a1 + 8);
}

uint64_t sub_216BB7A18(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB7A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB78B4(a2, a3);
}

uint64_t sub_216BB7A2C(uint64_t a1)
{
  char v2;

  return sub_216BB7A4C(a1, &v2);
}

uint64_t sub_216BB7A54(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB7A7C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB7A80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603888;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7AD0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_30();
  j__free(v0);
}

uint64_t sub_216BB7AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB7A7C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7B58(uint64_t a1, uint64_t a2)
{
  return sub_216BB7A7C(a2, a1 + 8);
}

uint64_t sub_216BB7B6C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB7B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB78B4(a2, a3);
}

uint64_t sub_216BB7B80(uint64_t a1)
{
  char v2;

  return sub_216BB7BA0(a1, &v2);
}

uint64_t sub_216BB7BA8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB7BD0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB7BD4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6038D0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7C24()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_31();
  j__free(v0);
}

uint64_t sub_216BB7C38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB7BD0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7CAC(uint64_t a1, uint64_t a2)
{
  return sub_216BB7BD0(a2, a1 + 8);
}

uint64_t sub_216BB7CC0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB7CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB78B4(a2, a3);
}

uint64_t sub_216BB7CD4(uint64_t a1)
{
  char v2;

  return sub_216BB7CF4(a1, &v2);
}

uint64_t sub_216BB7CFC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB7D24();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB7D28(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603918;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7D78()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_32();
  j__free(v0);
}

uint64_t sub_216BB7D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB7D24(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7E00(uint64_t a1, uint64_t a2)
{
  return sub_216BB7D24(a2, a1 + 8);
}

uint64_t sub_216BB7E14(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB7E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB7E28(a2, a3);
}

uint64_t sub_216BB7E30(int *a1, unsigned int *a2)
{
  return sub_216BB7E3C(*a1, *a2);
}

uint64_t sub_216BB7E3C(int a1, uint64_t a2)
{
  return nullsub_1((a1 / (int)a2), a2);
}

uint64_t sub_216BB7E44(uint64_t a1)
{
  char v2;

  return sub_216BB7E64(a1, &v2);
}

uint64_t sub_216BB7E6C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB7E94();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB7E98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603960;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB7EE8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_33();
  j__free(v0);
}

uint64_t sub_216BB7EFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB7E94(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB7F70(uint64_t a1, uint64_t a2)
{
  return sub_216BB7E94(a2, a1 + 8);
}

uint64_t sub_216BB7F84(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB7F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB7F98(a2, a3);
}

uint64_t sub_216BB7FA0(unsigned int *a1, unsigned int *a2)
{
  return sub_216BB7FAC(*a1, *a2);
}

uint64_t sub_216BB7FAC(unsigned int a1, uint64_t a2)
{
  return nullsub_1(a1 / a2, a2);
}

uint64_t sub_216BB7FB4(uint64_t a1)
{
  char v2;

  return sub_216BB7FD4(a1, &v2);
}

uint64_t sub_216BB7FDC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB8004();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8008(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6039A8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB8058()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_34();
  j__free(v0);
}

uint64_t sub_216BB806C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB8004(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB80E0(uint64_t a1, uint64_t a2)
{
  return sub_216BB8004(a2, a1 + 8);
}

uint64_t sub_216BB80F4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB80FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8108(a2, a3);
}

void sub_216BB8110()
{
  sub_216BB811C();
}

void sub_216BB811C()
{
  sub_216BB66CC();
}

uint64_t sub_216BB812C(uint64_t a1)
{
  char v2;

  return sub_216BB814C(a1, &v2);
}

uint64_t sub_216BB8154(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB817C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8180(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6039F0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB81D0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_35();
  j__free(v0);
}

uint64_t sub_216BB81E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB817C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8258(uint64_t a1, uint64_t a2)
{
  return sub_216BB817C(a2, a1 + 8);
}

uint64_t sub_216BB826C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB8274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8108(a2, a3);
}

uint64_t sub_216BB8280(uint64_t a1)
{
  char v2;

  return sub_216BB82A0(a1, &v2);
}

uint64_t sub_216BB82A8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB82D0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB82D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603A38;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB8324()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_36();
  j__free(v0);
}

uint64_t sub_216BB8338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB82D0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB83AC(uint64_t a1, uint64_t a2)
{
  return sub_216BB82D0(a2, a1 + 8);
}

uint64_t sub_216BB83C0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB83C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8108(a2, a3);
}

uint64_t sub_216BB83D4(uint64_t a1)
{
  char v2;

  return sub_216BB83F4(a1, &v2);
}

uint64_t sub_216BB83FC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB8424();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8428(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603A80;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB8478()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_37();
  j__free(v0);
}

uint64_t sub_216BB848C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB8424(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8500(uint64_t a1, uint64_t a2)
{
  return sub_216BB8424(a2, a1 + 8);
}

uint64_t sub_216BB8514(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB851C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8528(a2, a3);
}

uint64_t sub_216BB8530(int *a1, unsigned int *a2)
{
  return sub_216BB853C(*a1, *a2);
}

uint64_t sub_216BB853C(int a1, uint64_t a2)
{
  return nullsub_1((a2 * a1), a2);
}

uint64_t sub_216BB8544(uint64_t a1)
{
  char v2;

  return sub_216BB8564(a1, &v2);
}

uint64_t sub_216BB856C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB8594();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8598(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603AC8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB85E8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_38();
  j__free(v0);
}

uint64_t sub_216BB85FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB8594(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8670(uint64_t a1, uint64_t a2)
{
  return sub_216BB8594(a2, a1 + 8);
}

uint64_t sub_216BB8684(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB868C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8528(a2, a3);
}

uint64_t sub_216BB869C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BAA100(&v3);
}

uint64_t sub_216BB86C4(uint64_t a1)
{
  return sub_216B2F340(a1, 0x10u);
}

uint64_t sub_216BB86CC(uint64_t a1)
{
  char v2;

  return sub_216BB86EC(a1, &v2);
}

uint64_t sub_216BB86F4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB871C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8720(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB876C(a1) = &off_24D603B10;
  sub_216BB57D4(a2, a3);
  return a1;
}

_QWORD *sub_216BB876C(_QWORD *result)
{
  *result = &unk_24D603B58;
  return result;
}

void sub_216BB8784()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_39();
  j__free(v0);
}

uint64_t sub_216BB8798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB871C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB880C(uint64_t a1, uint64_t a2)
{
  return sub_216BB871C(a2, a1 + 8);
}

uint64_t sub_216BB8820(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB8828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB883C(a2, a3);
}

void sub_216BB8844(int *a1, int *a2)
{
  sub_216BB8850(*a1, *a2);
}

void sub_216BB8850(int a1, int a2)
{
  sub_216BB2190(a1, a2);
  sub_216BB66CC();
}

uint64_t sub_216BB8868(uint64_t a1)
{
  char v2;

  return sub_216BB8888(a1, &v2);
}

uint64_t sub_216BB8890(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB88B8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB88BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB876C(a1) = &off_24D603BA0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB890C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_40();
  j__free(v0);
}

uint64_t sub_216BB8920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB88B8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8994(uint64_t a1, uint64_t a2)
{
  return sub_216BB88B8(a2, a1 + 8);
}

uint64_t sub_216BB89A8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB89B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB89BC(a2, a3);
}

void sub_216BB89C4(int *a1, int *a2)
{
  sub_216BB89D0(*a1, *a2);
}

void sub_216BB89D0(int a1, int a2)
{
  sub_216BB21D8(a1, a2);
  sub_216BB66CC();
}

uint64_t sub_216BB89E8(uint64_t a1)
{
  char v2;

  return sub_216BB8A08(a1, &v2);
}

uint64_t sub_216BB8A10(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB8A38();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8A3C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB876C(a1) = &off_24D603BE8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB8A8C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_41();
  j__free(v0);
}

uint64_t sub_216BB8AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB8A38(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8B14(uint64_t a1, uint64_t a2)
{
  return sub_216BB8A38(a2, a1 + 8);
}

uint64_t sub_216BB8B28(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB8B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8B3C(a2, a3);
}

uint64_t sub_216BB8B44(int *a1, int *a2)
{
  return sub_216BB8B50(*a1, *a2);
}

uint64_t sub_216BB8B50(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BB2220(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216BB8B68(uint64_t a1)
{
  char v2;

  return sub_216BB8B88(a1, &v2);
}

uint64_t sub_216BB8B90(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB8BB8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8BBC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB876C(a1) = &off_24D603C30;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB8C0C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_42();
  j__free(v0);
}

uint64_t sub_216BB8C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB8BB8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8C94(uint64_t a1, uint64_t a2)
{
  return sub_216BB8BB8(a2, a1 + 8);
}

uint64_t sub_216BB8CA8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB8CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8CBC(a2, a3);
}

uint64_t sub_216BB8CC4(int *a1, int *a2)
{
  return sub_216BB8CD0(*a1, *a2);
}

uint64_t sub_216BB8CD0(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BB2254(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216BB8CE8(uint64_t a1)
{
  char v2;

  return sub_216BB8D08(a1, &v2);
}

uint64_t sub_216BB8D10(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB8D38();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8D3C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB876C(a1) = &off_24D603C78;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB8D8C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_43();
  j__free(v0);
}

uint64_t sub_216BB8DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB8D38(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8E14(uint64_t a1, uint64_t a2)
{
  return sub_216BB8D38(a2, a1 + 8);
}

uint64_t sub_216BB8E28(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB8E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8E3C(a2, a3);
}

uint64_t sub_216BB8E44(int *a1, int *a2)
{
  return sub_216BB8E50(*a1, *a2);
}

uint64_t sub_216BB8E50(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BB2288(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216BB8E68(uint64_t a1)
{
  char v2;

  return sub_216BB8E88(a1, &v2);
}

uint64_t sub_216BB8E90(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB8EB8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB8EBC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603CC0;
  sub_216BB57D4(a2, a3);
  return a1;
}

_QWORD *sub_216BB8F08(_QWORD *result)
{
  *result = &unk_24D603D08;
  return result;
}

void sub_216BB8F20()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_44();
  j__free(v0);
}

uint64_t sub_216BB8F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB8EB8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB8FA8(uint64_t a1, uint64_t a2)
{
  return sub_216BB8EB8(a2, a1 + 8);
}

uint64_t sub_216BB8FBC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB8FC4(uint64_t a1, uint64_t a2)
{
  return sub_216BB8FD4(a2);
}

void sub_216BB8FDC()
{
  sub_216BB8FE4();
}

void sub_216BB8FE4()
{
  sub_216BB66CC();
}

uint64_t sub_216BB8FF8(uint64_t a1)
{
  char v2;

  return sub_216BB9018(a1, &v2);
}

uint64_t sub_216BB9020(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9048();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB904C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603D50;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB909C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_45();
  j__free(v0);
}

uint64_t sub_216BB90B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9048(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9124(uint64_t a1, uint64_t a2)
{
  return sub_216BB9048(a2, a1 + 8);
}

uint64_t sub_216BB9138(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB9140(uint64_t a1, uint64_t a2)
{
  return sub_216BB9148(a2);
}

void sub_216BB9150()
{
  sub_216BB9158();
}

void sub_216BB9158()
{
  sub_216BB66CC();
}

uint64_t sub_216BB916C(uint64_t a1)
{
  char v2;

  return sub_216BB918C(a1, &v2);
}

uint64_t sub_216BB9194(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB91BC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB91C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603D98;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9210()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_46();
  j__free(v0);
}

uint64_t sub_216BB9224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB91BC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9298(uint64_t a1, uint64_t a2)
{
  return sub_216BB91BC(a2, a1 + 8);
}

uint64_t sub_216BB92AC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB92B4(uint64_t a1, uint64_t a2)
{
  return sub_216BB92BC(a2);
}

void sub_216BB92C4(int *a1)
{
  sub_216BB92CC(*a1);
}

void sub_216BB92CC(int a1)
{
  sinf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB92E4(uint64_t a1)
{
  char v2;

  return sub_216BB9304(a1, &v2);
}

uint64_t sub_216BB930C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9334();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB9338(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603DE0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9388()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_47();
  j__free(v0);
}

uint64_t sub_216BB939C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9334(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9410(uint64_t a1, uint64_t a2)
{
  return sub_216BB9334(a2, a1 + 8);
}

uint64_t sub_216BB9424(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB942C(uint64_t a1, uint64_t a2)
{
  return sub_216BB9434(a2);
}

void sub_216BB943C(int *a1)
{
  sub_216BB9444(*a1);
}

void sub_216BB9444(int a1)
{
  cosf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB945C(uint64_t a1)
{
  char v2;

  return sub_216BB947C(a1, &v2);
}

uint64_t sub_216BB9484(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB94AC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB94B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603E28;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9500()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_48();
  j__free(v0);
}

uint64_t sub_216BB9514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB94AC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9588(uint64_t a1, uint64_t a2)
{
  return sub_216BB94AC(a2, a1 + 8);
}

uint64_t sub_216BB959C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB95A4(uint64_t a1, uint64_t a2)
{
  return sub_216BB95AC(a2);
}

void sub_216BB95B4(int *a1)
{
  sub_216BB95BC(*a1);
}

void sub_216BB95BC(int a1)
{
  tanf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB95D4(uint64_t a1)
{
  char v2;

  return sub_216BB95F4(a1, &v2);
}

uint64_t sub_216BB95FC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9624();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB9628(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603E70;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9678()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_49();
  j__free(v0);
}

uint64_t sub_216BB968C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9624(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9700(uint64_t a1, uint64_t a2)
{
  return sub_216BB9624(a2, a1 + 8);
}

uint64_t sub_216BB9714(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB971C(uint64_t a1, uint64_t a2)
{
  return sub_216BB9724(a2);
}

void sub_216BB972C(int *a1)
{
  sub_216BB9734(*a1);
}

void sub_216BB9734(int a1)
{
  asinf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB974C(uint64_t a1)
{
  char v2;

  return sub_216BB976C(a1, &v2);
}

uint64_t sub_216BB9774(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB979C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB97A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603EB8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB97F0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_50();
  j__free(v0);
}

uint64_t sub_216BB9804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB979C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9878(uint64_t a1, uint64_t a2)
{
  return sub_216BB979C(a2, a1 + 8);
}

uint64_t sub_216BB988C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB9894(uint64_t a1, uint64_t a2)
{
  return sub_216BB989C(a2);
}

void sub_216BB98A4(int *a1)
{
  sub_216BB98AC(*a1);
}

void sub_216BB98AC(int a1)
{
  acosf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB98C4(uint64_t a1)
{
  char v2;

  return sub_216BB98E4(a1, &v2);
}

uint64_t sub_216BB98EC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9914();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB9918(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D603F00;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9968()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_51();
  j__free(v0);
}

uint64_t sub_216BB997C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9914(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB99F0(uint64_t a1, uint64_t a2)
{
  return sub_216BB9914(a2, a1 + 8);
}

uint64_t sub_216BB9A04(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB9A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB9A18(a2, a3);
}

void sub_216BB9A20(int *a1, int *a2)
{
  sub_216BB9A2C(*a1, *a2);
}

void sub_216BB9A2C(int a1, int a2)
{
  atanf(*(float *)&a1 / *(float *)&a2);
  sub_216BB66CC();
}

uint64_t sub_216BB9A4C(uint64_t a1)
{
  char v2;

  return sub_216BB9A6C(a1, &v2);
}

uint64_t sub_216BB9A74(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9A9C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB9AA0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603F48;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9AF0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_52();
  j__free(v0);
}

uint64_t sub_216BB9B04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9A9C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9B78(uint64_t a1, uint64_t a2)
{
  return sub_216BB9A9C(a2, a1 + 8);
}

uint64_t sub_216BB9B8C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB9B94(uint64_t a1, uint64_t a2)
{
  return sub_216BB9B9C(a2);
}

void sub_216BB9BA4(int *a1)
{
  sub_216BB9BAC(*a1);
}

void sub_216BB9BAC(int a1)
{
  atanf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB9BC4(uint64_t a1)
{
  char v2;

  return sub_216BB9BE4(a1, &v2);
}

uint64_t sub_216BB9BEC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9C14();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB9C18(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603F90;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9C68()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_53();
  j__free(v0);
}

uint64_t sub_216BB9C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9C14(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9CF0(uint64_t a1, uint64_t a2)
{
  return sub_216BB9C14(a2, a1 + 8);
}

uint64_t sub_216BB9D04(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB9D0C(uint64_t a1, uint64_t a2)
{
  return sub_216BB9D14(a2);
}

void sub_216BB9D1C(int *a1)
{
  sub_216BB9D24(*a1);
}

void sub_216BB9D24(int a1)
{
  sinhf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB9D3C(uint64_t a1)
{
  char v2;

  return sub_216BB9D5C(a1, &v2);
}

uint64_t sub_216BB9D64(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9D8C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB9D90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D603FD8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9DE0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_54();
  j__free(v0);
}

uint64_t sub_216BB9DF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9D8C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9E68(uint64_t a1, uint64_t a2)
{
  return sub_216BB9D8C(a2, a1 + 8);
}

uint64_t sub_216BB9E7C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB9E84(uint64_t a1, uint64_t a2)
{
  return sub_216BB9E8C(a2);
}

void sub_216BB9E94(int *a1)
{
  sub_216BB9E9C(*a1);
}

void sub_216BB9E9C(int a1)
{
  coshf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BB9EB4(uint64_t a1)
{
  char v2;

  return sub_216BB9ED4(a1, &v2);
}

uint64_t sub_216BB9EDC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BB9F04();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BB9F08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604020;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BB9F58()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_55();
  j__free(v0);
}

uint64_t sub_216BB9F6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BB9F04(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BB9FE0(uint64_t a1, uint64_t a2)
{
  return sub_216BB9F04(a2, a1 + 8);
}

uint64_t sub_216BB9FF4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BB9FFC(uint64_t a1, uint64_t a2)
{
  return sub_216BBA004(a2);
}

void sub_216BBA00C(int *a1)
{
  sub_216BBA014(*a1);
}

void sub_216BBA014(int a1)
{
  tanhf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBA02C(uint64_t a1)
{
  char v2;

  return sub_216BBA04C(a1, &v2);
}

uint64_t sub_216BBA054(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBA07C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBA080(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604068;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBA0D0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_56();
  j__free(v0);
}

uint64_t sub_216BBA0E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBA07C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBA158(uint64_t a1, uint64_t a2)
{
  return sub_216BBA07C(a2, a1 + 8);
}

uint64_t sub_216BBA16C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBA174(uint64_t a1, uint64_t a2)
{
  return sub_216BBA17C(a2);
}

void sub_216BBA184(int *a1)
{
  sub_216BBA18C(*a1);
}

void sub_216BBA18C(int a1)
{
  asinhf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBA1A4(uint64_t a1)
{
  char v2;

  return sub_216BBA1C4(a1, &v2);
}

uint64_t sub_216BBA1CC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBA1F4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBA1F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6040B0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBA248()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_57();
  j__free(v0);
}

uint64_t sub_216BBA25C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBA1F4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBA2D0(uint64_t a1, uint64_t a2)
{
  return sub_216BBA1F4(a2, a1 + 8);
}

uint64_t sub_216BBA2E4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBA2EC(uint64_t a1, uint64_t a2)
{
  return sub_216BBA2F4(a2);
}

void sub_216BBA2FC(int *a1)
{
  sub_216BBA304(*a1);
}

void sub_216BBA304(int a1)
{
  acoshf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBA31C(uint64_t a1)
{
  char v2;

  return sub_216BBA33C(a1, &v2);
}

uint64_t sub_216BBA344(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBA36C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBA370(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6040F8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBA3C0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_58();
  j__free(v0);
}

uint64_t sub_216BBA3D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBA36C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBA448(uint64_t a1, uint64_t a2)
{
  return sub_216BBA36C(a2, a1 + 8);
}

uint64_t sub_216BBA45C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBA464(uint64_t a1, uint64_t a2)
{
  return sub_216BBA46C(a2);
}

void sub_216BBA474(int *a1)
{
  sub_216BBA47C(*a1);
}

void sub_216BBA47C(int a1)
{
  atanhf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBA494(uint64_t a1)
{
  char v2;

  return sub_216BBA4B4(a1, &v2);
}

uint64_t sub_216BBA4BC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBA4E4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBA4E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604140;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBA538()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_59();
  j__free(v0);
}

uint64_t sub_216BBA54C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBA4E4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBA5C0(uint64_t a1, uint64_t a2)
{
  return sub_216BBA4E4(a2, a1 + 8);
}

uint64_t sub_216BBA5D4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBA5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBA5E8(a2, a3);
}

void sub_216BBA5F0(int *a1, int *a2)
{
  sub_216BBA5FC(*a1, *a2);
}

void sub_216BBA5FC(int a1, int a2)
{
  powf(*(float *)&a1, *(float *)&a2);
  sub_216BB66CC();
}

uint64_t sub_216BBA618(uint64_t a1)
{
  char v2;

  return sub_216BBA638(a1, &v2);
}

uint64_t sub_216BBA640(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBA668();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBA66C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604188;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBA6BC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_60();
  j__free(v0);
}

uint64_t sub_216BBA6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBA668(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBA744(uint64_t a1, uint64_t a2)
{
  return sub_216BBA668(a2, a1 + 8);
}

uint64_t sub_216BBA758(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBA760(uint64_t a1, uint64_t a2)
{
  return sub_216BBA768(a2);
}

void sub_216BBA770(int *a1)
{
  sub_216BBA778(*a1);
}

void sub_216BBA778(int a1)
{
  expf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBA790(uint64_t a1)
{
  char v2;

  return sub_216BBA7B0(a1, &v2);
}

uint64_t sub_216BBA7B8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBA7E0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBA7E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6041D0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBA834()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_61();
  j__free(v0);
}

uint64_t sub_216BBA848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBA7E0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBA8BC(uint64_t a1, uint64_t a2)
{
  return sub_216BBA7E0(a2, a1 + 8);
}

uint64_t sub_216BBA8D0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBA8D8(uint64_t a1, uint64_t a2)
{
  return sub_216BBA8E0(a2);
}

void sub_216BBA8E8(int *a1)
{
  sub_216BBA8F0(*a1);
}

void sub_216BBA8F0(int a1)
{
  logf(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBA908(uint64_t a1)
{
  char v2;

  return sub_216BBA928(a1, &v2);
}

uint64_t sub_216BBA930(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBA958();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBA95C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604218;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBA9AC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_62();
  j__free(v0);
}

uint64_t sub_216BBA9C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBA958(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBAA34(uint64_t a1, uint64_t a2)
{
  return sub_216BBA958(a2, a1 + 8);
}

uint64_t sub_216BBAA48(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBAA50(uint64_t a1, uint64_t a2)
{
  return sub_216BBAA58(a2);
}

void sub_216BBAA60(int *a1)
{
  sub_216BBAA68(*a1);
}

void sub_216BBAA68(int a1)
{
  exp2f(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBAA80(uint64_t a1)
{
  char v2;

  return sub_216BBAAA0(a1, &v2);
}

uint64_t sub_216BBAAA8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBAAD0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBAAD4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604260;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBAB24()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_63();
  j__free(v0);
}

uint64_t sub_216BBAB38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBAAD0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBABAC(uint64_t a1, uint64_t a2)
{
  return sub_216BBAAD0(a2, a1 + 8);
}

uint64_t sub_216BBABC0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBABC8(uint64_t a1, uint64_t a2)
{
  return sub_216BBABD0(a2);
}

void sub_216BBABD8(int *a1)
{
  sub_216BBABE0(*a1);
}

void sub_216BBABE0(int a1)
{
  log2f(*(float *)&a1);
  sub_216BB66CC();
}

uint64_t sub_216BBABF8(uint64_t a1)
{
  char v2;

  return sub_216BBAC18(a1, &v2);
}

uint64_t sub_216BBAC20(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBAC48();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBAC4C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6042A8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBAC9C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_64();
  j__free(v0);
}

uint64_t sub_216BBACB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBAC48(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBAD24(uint64_t a1, uint64_t a2)
{
  return sub_216BBAC48(a2, a1 + 8);
}

uint64_t sub_216BBAD38(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBAD40(uint64_t a1, uint64_t a2)
{
  return sub_216BBAD48(a2);
}

void sub_216BBAD50()
{
  sub_216BBAD58();
}

void sub_216BBAD58()
{
  sub_216BB66CC();
}

uint64_t sub_216BBAD64(uint64_t a1)
{
  char v2;

  return sub_216BBAD84(a1, &v2);
}

uint64_t sub_216BBAD8C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBADB4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBADB8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6042F0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBAE08()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_65();
  j__free(v0);
}

uint64_t sub_216BBAE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBADB4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBAE90(uint64_t a1, uint64_t a2)
{
  return sub_216BBADB4(a2, a1 + 8);
}

uint64_t sub_216BBAEA4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBAEAC(uint64_t a1, uint64_t a2)
{
  return sub_216BBAEB4(a2);
}

void sub_216BBAEBC()
{
  sub_216BBAEC4();
}

void sub_216BBAEC4()
{
  sub_216BB66CC();
}

uint64_t sub_216BBAED8(uint64_t a1)
{
  char v2;

  return sub_216BBAEF8(a1, &v2);
}

uint64_t sub_216BBAF00(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBAF28();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBAF2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604338;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBAF7C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_66();
  j__free(v0);
}

uint64_t sub_216BBAF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBAF28(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBB004(uint64_t a1, uint64_t a2)
{
  return sub_216BBAF28(a2, a1 + 8);
}

uint64_t sub_216BBB018(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBB020(uint64_t a1, uint64_t a2)
{
  return sub_216BBB028(a2);
}

uint64_t sub_216BBB030(unsigned int *a1, uint64_t a2)
{
  return sub_216BBB038(*a1, a2);
}

uint64_t sub_216BBB038(uint64_t a1, uint64_t a2)
{
  if ((int)a1 >= 0)
    a1 = a1;
  else
    a1 = -(int)a1;
  return nullsub_1(a1, a2);
}

uint64_t sub_216BBB044(uint64_t a1)
{
  char v2;

  return sub_216BBB064(a1, &v2);
}

uint64_t sub_216BBB06C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBB094();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBB098(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604380;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBB0E8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_67();
  j__free(v0);
}

uint64_t sub_216BBB0FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBB094(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBB170(uint64_t a1, uint64_t a2)
{
  return sub_216BBB094(a2, a1 + 8);
}

uint64_t sub_216BBB184(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBB18C(uint64_t a1, uint64_t a2)
{
  return sub_216BBB194(a2);
}

void sub_216BBB19C()
{
  sub_216BBB1A4();
}

void sub_216BBB1A4()
{
  sub_216BB66CC();
}

uint64_t sub_216BBB1B0(uint64_t a1)
{
  char v2;

  return sub_216BBB1D0(a1, &v2);
}

uint64_t sub_216BBB1D8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBB200();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBB204(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6043C8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBB254()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_68();
  j__free(v0);
}

uint64_t sub_216BBB268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBB200(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBB2DC(uint64_t a1, uint64_t a2)
{
  return sub_216BBB200(a2, a1 + 8);
}

uint64_t sub_216BBB2F0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBB2F8(uint64_t a1, uint64_t a2)
{
  return sub_216BBB300(a2);
}

uint64_t sub_216BBB308(int *a1, uint64_t a2)
{
  return sub_216BBB310(*a1, a2);
}

uint64_t sub_216BBB310(int a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 < 0)
    v2 = 0xFFFFFFFFLL;
  else
    v2 = a1 != 0;
  return nullsub_1(v2, a2);
}

uint64_t sub_216BBB320(uint64_t a1)
{
  char v2;

  return sub_216BBB340(a1, &v2);
}

uint64_t sub_216BBB348(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBB370();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBB374(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604410;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBB3C4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_69();
  j__free(v0);
}

uint64_t sub_216BBB3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBB370(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBB44C(uint64_t a1, uint64_t a2)
{
  return sub_216BBB370(a2, a1 + 8);
}

uint64_t sub_216BBB460(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBB468(uint64_t a1, uint64_t a2)
{
  return sub_216BBB470(a2);
}

void sub_216BBB478(int *a1)
{
  sub_216BBB480(*a1);
}

void sub_216BBB480(int a1)
{
  sub_216BBB498(*(float *)&a1);
  sub_216BB66CC();
}

float sub_216BBB498(float a1)
{
  BOOL v1;
  BOOL v2;
  float result;

  v1 = a1 == 0.0;
  v2 = a1 < 0.0;
  result = 1.0;
  if (v1)
    result = 0.0;
  if (v2)
    return -1.0;
  return result;
}

uint64_t sub_216BBB4B4(uint64_t a1)
{
  char v2;

  return sub_216BBB4D4(a1, &v2);
}

uint64_t sub_216BBB4DC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBB504();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBB508(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604458;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBB558()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_70();
  j__free(v0);
}

uint64_t sub_216BBB56C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBB504(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBB5E0(uint64_t a1, uint64_t a2)
{
  return sub_216BBB504(a2, a1 + 8);
}

uint64_t sub_216BBB5F4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBB5FC(uint64_t a1, uint64_t a2)
{
  return sub_216BBB604(a2);
}

void sub_216BBB60C()
{
  sub_216BBB614();
}

void sub_216BBB614()
{
  sub_216BB66CC();
}

uint64_t sub_216BBB620(uint64_t a1)
{
  char v2;

  return sub_216BBB640(a1, &v2);
}

uint64_t sub_216BBB648(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBB670();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBB674(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6044A0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBB6C4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_71();
  j__free(v0);
}

uint64_t sub_216BBB6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBB670(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBB74C(uint64_t a1, uint64_t a2)
{
  return sub_216BBB670(a2, a1 + 8);
}

uint64_t sub_216BBB760(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBB768(uint64_t a1, uint64_t a2)
{
  return sub_216BBB770(a2);
}

void sub_216BBB778()
{
  sub_216BBB780();
}

void sub_216BBB780()
{
  sub_216BB66CC();
}

uint64_t sub_216BBB78C(uint64_t a1)
{
  char v2;

  return sub_216BBB7AC(a1, &v2);
}

uint64_t sub_216BBB7B4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBB7DC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBB7E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6044E8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBB830()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_72();
  j__free(v0);
}

uint64_t sub_216BBB844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBB7DC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBB8B8(uint64_t a1, uint64_t a2)
{
  return sub_216BBB7DC(a2, a1 + 8);
}

uint64_t sub_216BBB8CC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBB8D4(uint64_t a1, uint64_t a2)
{
  return sub_216BBB8DC(a2);
}

void sub_216BBB8E4()
{
  sub_216BBB8EC();
}

void sub_216BBB8EC()
{
  sub_216BB66CC();
}

uint64_t sub_216BBB8F8(uint64_t a1)
{
  char v2;

  return sub_216BBB918(a1, &v2);
}

uint64_t sub_216BBB920(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBB948();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBB94C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604530;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBB99C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_73();
  j__free(v0);
}

uint64_t sub_216BBB9B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBB948(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBBA24(uint64_t a1, uint64_t a2)
{
  return sub_216BBB948(a2, a1 + 8);
}

uint64_t sub_216BBBA38(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBBA40(uint64_t a1, uint64_t a2)
{
  return sub_216BBBA48(a2);
}

void sub_216BBBA50(int *a1)
{
  sub_216BBBA58(*a1);
}

void sub_216BBBA58(int a1)
{
  sub_216BBBA70(*(float *)&a1);
  sub_216BB66CC();
}

void sub_216BBBA70(float a1)
{
  float v1;
  float v2;

  v1 = fabsf(a1);
  v2 = floorf(v1);
  if ((float)(v1 - v2) == 0.5)
    fmodf(v2, 2.0);
}

uint64_t sub_216BBBADC(uint64_t a1)
{
  char v2;

  return sub_216BBBAFC(a1, &v2);
}

uint64_t sub_216BBBB04(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBBB2C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBBB30(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604578;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBBB80()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_74();
  j__free(v0);
}

uint64_t sub_216BBBB94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBBB2C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBBC08(uint64_t a1, uint64_t a2)
{
  return sub_216BBBB2C(a2, a1 + 8);
}

uint64_t sub_216BBBC1C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBBC24(uint64_t a1, uint64_t a2)
{
  return sub_216BBBC2C(a2);
}

void sub_216BBBC34()
{
  sub_216BBBC3C();
}

void sub_216BBBC3C()
{
  sub_216BB66CC();
}

uint64_t sub_216BBBC48(uint64_t a1)
{
  char v2;

  return sub_216BBBC68(a1, &v2);
}

uint64_t sub_216BBBC70(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBBC98();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBBC9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6045C0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBBCEC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_75();
  j__free(v0);
}

uint64_t sub_216BBBD00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBBC98(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBBD74(uint64_t a1, uint64_t a2)
{
  return sub_216BBBC98(a2, a1 + 8);
}

uint64_t sub_216BBBD88(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBBD90(uint64_t a1, uint64_t a2)
{
  return sub_216BBBD98(a2);
}

void sub_216BBBDA0()
{
  sub_216BBBDA8();
}

void sub_216BBBDA8()
{
  sub_216BB66CC();
}

uint64_t sub_216BBBDB8(uint64_t a1)
{
  char v2;

  return sub_216BBBDD8(a1, &v2);
}

uint64_t sub_216BBBDE0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBBE08();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBBE0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604608;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBBE5C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_76();
  j__free(v0);
}

uint64_t sub_216BBBE70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBBE08(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBBEE4(uint64_t a1, uint64_t a2)
{
  return sub_216BBBE08(a2, a1 + 8);
}

uint64_t sub_216BBBEF8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBBF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBBF0C(a2, a3);
}

void sub_216BBBF14()
{
  sub_216BBBF20();
}

void sub_216BBBF20()
{
  sub_216BB66CC();
}

uint64_t sub_216BBBF38(uint64_t a1)
{
  char v2;

  return sub_216BBBF58(a1, &v2);
}

uint64_t sub_216BBBF60(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBBF88();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBBF8C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604650;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBBFDC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_77();
  j__free(v0);
}

uint64_t sub_216BBBFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBBF88(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBC064(uint64_t a1, uint64_t a2)
{
  return sub_216BBBF88(a2, a1 + 8);
}

uint64_t sub_216BBC078(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBC080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBC08C(a2, a3);
}

uint64_t sub_216BBC094(unsigned int *a1, int *a2)
{
  return sub_216BBC0A0(*a1, *a2);
}

uint64_t sub_216BBC0A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BBC0B4(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216BBC0B4(uint64_t result, int a2)
{
  if ((int)result >= a2)
    return a2;
  else
    return result;
}

uint64_t sub_216BBC0C0(uint64_t a1)
{
  char v2;

  return sub_216BBC0E0(a1, &v2);
}

uint64_t sub_216BBC0E8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBC110();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBC114(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604698;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBC164()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_78();
  j__free(v0);
}

uint64_t sub_216BBC178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBC110(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBC1EC(uint64_t a1, uint64_t a2)
{
  return sub_216BBC110(a2, a1 + 8);
}

uint64_t sub_216BBC200(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBC208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBC214(a2, a3);
}

uint64_t sub_216BBC21C(unsigned int *a1, unsigned int *a2)
{
  return sub_216BBC228(*a1, *a2);
}

uint64_t sub_216BBC228(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BBC23C(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216BBC23C(uint64_t result, unsigned int a2)
{
  if (result >= a2)
    return a2;
  else
    return result;
}

uint64_t sub_216BBC248(uint64_t a1)
{
  char v2;

  return sub_216BBC268(a1, &v2);
}

uint64_t sub_216BBC270(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBC298();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBC29C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6046E0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBC2EC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_79();
  j__free(v0);
}

uint64_t sub_216BBC300(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBC298(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBC374(uint64_t a1, uint64_t a2)
{
  return sub_216BBC298(a2, a1 + 8);
}

uint64_t sub_216BBC388(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBC390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBC39C(a2, a3);
}

void sub_216BBC3A4(int *a1, int *a2)
{
  sub_216BBC3B0(*a1, *a2);
}

void sub_216BBC3B0(int a1, int a2)
{
  sub_216BBC3CC(*(float *)&a1, *(float *)&a2);
  sub_216BB66CC();
}

float sub_216BBC3CC(float result, float a2)
{
  if (result >= a2)
    return a2;
  return result;
}

uint64_t sub_216BBC3D8(uint64_t a1)
{
  char v2;

  return sub_216BBC3F8(a1, &v2);
}

uint64_t sub_216BBC400(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBC428();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBC42C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604728;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBC47C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_80();
  j__free(v0);
}

uint64_t sub_216BBC490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBC428(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBC504(uint64_t a1, uint64_t a2)
{
  return sub_216BBC428(a2, a1 + 8);
}

uint64_t sub_216BBC518(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBC520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBC52C(a2, a3);
}

uint64_t sub_216BBC534(unsigned int *a1, int *a2)
{
  return sub_216BBC540(*a1, *a2);
}

uint64_t sub_216BBC540(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BBC554(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216BBC554(uint64_t result, int a2)
{
  if ((int)result <= a2)
    return a2;
  else
    return result;
}

uint64_t sub_216BBC560(uint64_t a1)
{
  char v2;

  return sub_216BBC580(a1, &v2);
}

uint64_t sub_216BBC588(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBC5B0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBC5B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604770;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBC604()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_81();
  j__free(v0);
}

uint64_t sub_216BBC618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBC5B0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBC68C(uint64_t a1, uint64_t a2)
{
  return sub_216BBC5B0(a2, a1 + 8);
}

uint64_t sub_216BBC6A0(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBC6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBC6B4(a2, a3);
}

uint64_t sub_216BBC6BC(unsigned int *a1, unsigned int *a2)
{
  return sub_216BBC6C8(*a1, *a2);
}

uint64_t sub_216BBC6C8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BBC6DC(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216BBC6DC(uint64_t result, unsigned int a2)
{
  if (result <= a2)
    return a2;
  else
    return result;
}

uint64_t sub_216BBC6E8(uint64_t a1)
{
  char v2;

  return sub_216BBC708(a1, &v2);
}

uint64_t sub_216BBC710(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBC738();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBC73C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6047B8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBC78C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_82();
  j__free(v0);
}

uint64_t sub_216BBC7A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBC738(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBC814(uint64_t a1, uint64_t a2)
{
  return sub_216BBC738(a2, a1 + 8);
}

uint64_t sub_216BBC828(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBC830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBC83C(a2, a3);
}

void sub_216BBC844(int *a1, int *a2)
{
  sub_216BBC850(*a1, *a2);
}

void sub_216BBC850(int a1, int a2)
{
  sub_216BBC86C(*(float *)&a1, *(float *)&a2);
  sub_216BB66CC();
}

float sub_216BBC86C(float result, float a2)
{
  if (result <= a2)
    return a2;
  return result;
}

uint64_t sub_216BBC878(uint64_t a1)
{
  char v2;

  return sub_216BBC898(a1, &v2);
}

uint64_t sub_216BBC8A0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBC8C8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBC8CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BBC918(a1) = &off_24D604800;
  sub_216BB57D4(a2, a3);
  return a1;
}

_QWORD *sub_216BBC918(_QWORD *result)
{
  *result = &unk_24D604848;
  return result;
}

void sub_216BBC930()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_83();
  j__free(v0);
}

uint64_t sub_216BBC944(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBC8C8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBC9B8(uint64_t a1, uint64_t a2)
{
  return sub_216BBC8C8(a2, a1 + 8);
}

uint64_t sub_216BBC9CC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBC9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_216BBC9EC(a2, a3, a4);
}

uint64_t sub_216BBC9F4(unsigned int *a1, int *a2, int *a3)
{
  return sub_216BBCA04(*a1, *a2, *a3);
}

uint64_t sub_216BBCA04(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_216BBCA18(a1, a2, a3);
  return nullsub_1(v3, v4);
}

uint64_t sub_216BBCA18(uint64_t a1, int a2, int a3)
{
  uint64_t v4;

  v4 = sub_216BBC554(a1, a2);
  return sub_216BBC0B4(v4, a3);
}

uint64_t sub_216BBCA3C(uint64_t a1)
{
  char v2;

  return sub_216BBCA5C(a1, &v2);
}

uint64_t sub_216BBCA64(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBCA8C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBCA90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BBC918(a1) = &off_24D604890;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBCAE0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_84();
  j__free(v0);
}

uint64_t sub_216BBCAF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBCA8C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBCB68(uint64_t a1, uint64_t a2)
{
  return sub_216BBCA8C(a2, a1 + 8);
}

uint64_t sub_216BBCB7C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBCB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_216BBCB94(a2, a3, a4);
}

uint64_t sub_216BBCB9C(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  return sub_216BBCBAC(*a1, *a2, *a3);
}

uint64_t sub_216BBCBAC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_216BBCBC0(a1, a2, a3);
  return nullsub_1(v3, v4);
}

uint64_t sub_216BBCBC0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;

  v4 = sub_216BBC6DC(a1, a2);
  return sub_216BBC23C(v4, a3);
}

uint64_t sub_216BBCBE4(uint64_t a1)
{
  char v2;

  return sub_216BBCC04(a1, &v2);
}

uint64_t sub_216BBCC0C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBCC34();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBCC38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BBC918(a1) = &off_24D6048D8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBCC88()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_85();
  j__free(v0);
}

uint64_t sub_216BBCC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBCC34(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBCD10(uint64_t a1, uint64_t a2)
{
  return sub_216BBCC34(a2, a1 + 8);
}

uint64_t sub_216BBCD24(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBCD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_216BBCD3C(a2, a3, a4);
}

void sub_216BBCD44(int *a1, int *a2, int *a3)
{
  sub_216BBCD54(*a1, *a2, *a3);
}

void sub_216BBCD54(int a1, int a2, int a3)
{
  sub_216BB4A84(*(float *)&a1, *(float *)&a2, *(float *)&a3);
  sub_216BB66CC();
}

uint64_t sub_216BBCD74(uint64_t a1)
{
  char v2;

  return sub_216BBCD94(a1, &v2);
}

uint64_t sub_216BBCD9C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBCDC4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBCDC8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BBC918(a1) = &off_24D604920;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBCE18()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_86();
  j__free(v0);
}

uint64_t sub_216BBCE2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBCDC4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBCEA0(uint64_t a1, uint64_t a2)
{
  return sub_216BBCDC4(a2, a1 + 8);
}

uint64_t sub_216BBCEB4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBCEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_216BBCECC(a2, a3, a4);
}

void sub_216BBCED4()
{
  sub_216BBCEE4();
}

void sub_216BBCEE4()
{
  sub_216BB66CC();
}

uint64_t sub_216BBCF04(uint64_t a1)
{
  char v2;

  return sub_216BBCF24(a1, &v2);
}

uint64_t sub_216BBCF2C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBCF54();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBCF58(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604968;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBCFA8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_87();
  j__free(v0);
}

uint64_t sub_216BBCFBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBCF54(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBD030(uint64_t a1, uint64_t a2)
{
  return sub_216BBCF54(a2, a1 + 8);
}

uint64_t sub_216BBD044(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBD04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBD058(a2, a3);
}

void sub_216BBD060()
{
  sub_216BBD06C();
}

void sub_216BBD06C()
{
  sub_216BB66CC();
}

uint64_t sub_216BBD088(uint64_t a1)
{
  char v2;

  return sub_216BBD0A8(a1, &v2);
}

uint64_t sub_216BBD0B0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBD0D8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBD0DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BBC918(a1) = &off_24D6049B0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBD12C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_88();
  j__free(v0);
}

uint64_t sub_216BBD140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBD0D8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBD1B4(uint64_t a1, uint64_t a2)
{
  return sub_216BBD0D8(a2, a1 + 8);
}

uint64_t sub_216BBD1C8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBD1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_216BBD1E0(a2, a3, a4);
}

void sub_216BBD1E8(int *a1, int *a2, int *a3)
{
  sub_216BBD1F8(*a1, *a2, *a3);
}

void sub_216BBD1F8(int a1, int a2, int a3)
{
  sub_216BB4A84((float)(*(float *)&a3 - *(float *)&a1) / (float)(*(float *)&a2 - *(float *)&a1), 0.0, 1.0);
  sub_216BB66CC();
}

uint64_t sub_216BBD240(uint64_t a1)
{
  char v2;

  return sub_216BBD260(a1, &v2);
}

uint64_t sub_216BBD268(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBD290();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBD294(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6049F8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBD2E4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_89();
  j__free(v0);
}

uint64_t sub_216BBD2F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBD290(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBD36C(uint64_t a1, uint64_t a2)
{
  return sub_216BBD290(a2, a1 + 8);
}

uint64_t sub_216BBD380(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBD388(uint64_t a1, uint64_t a2)
{
  return sub_216BBD390(a2);
}

uint64_t sub_216BBD398()
{
  return sub_216BBD3A0();
}

uint64_t sub_216BBD3A0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_216B271B0();
  return nullsub_1(v0, v1);
}

uint64_t sub_216BBD3B8(uint64_t a1)
{
  char v2;

  return sub_216BBD3D8(a1, &v2);
}

uint64_t sub_216BBD3E0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBD408();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBD40C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604A40;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBD45C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_90();
  j__free(v0);
}

uint64_t sub_216BBD470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBD408(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBD4E4(uint64_t a1, uint64_t a2)
{
  return sub_216BBD408(a2, a1 + 8);
}

uint64_t sub_216BBD4F8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBD500(uint64_t a1, uint64_t a2)
{
  return sub_216BBD508(a2);
}

uint64_t sub_216BBD510(int *a1)
{
  return sub_216BBD518(*a1);
}

uint64_t sub_216BBD518(int a1)
{
  _BOOL8 v1;
  uint64_t v2;

  v1 = sub_216B27184(*(float *)&a1);
  return nullsub_1(v1, v2);
}

uint64_t sub_216BBD530(uint64_t a1)
{
  char v2;

  return sub_216BBD550(a1, &v2);
}

uint64_t sub_216BBD558(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBD580();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBD584(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604A88;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBD5D4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_91();
  j__free(v0);
}

uint64_t sub_216BBD5E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBD580(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBD65C(uint64_t a1, uint64_t a2)
{
  return sub_216BBD580(a2, a1 + 8);
}

uint64_t sub_216BBD670(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBD678(uint64_t a1, uint64_t a2)
{
  return sub_216BBD680(a2);
}

uint64_t sub_216BBD688(uint64_t a1)
{
  char v2;

  return sub_216BBD6A8(a1, &v2);
}

uint64_t sub_216BBD6B0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBD6D8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBD6DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604AD0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBD72C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_92();
  j__free(v0);
}

uint64_t sub_216BBD740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBD6D8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBD7B4(uint64_t a1, uint64_t a2)
{
  return sub_216BBD6D8(a2, a1 + 8);
}

uint64_t sub_216BBD7C8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBD7D0(uint64_t a1, uint64_t a2)
{
  return sub_216BBD680(a2);
}

uint64_t sub_216BBD7D8(uint64_t a1)
{
  char v2;

  return sub_216BBD7F8(a1, &v2);
}

uint64_t sub_216BBD800(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBD828();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBD82C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604B18;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBD87C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_93();
  j__free(v0);
}

uint64_t sub_216BBD890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBD828(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBD904(uint64_t a1, uint64_t a2)
{
  return sub_216BBD828(a2, a1 + 8);
}

uint64_t sub_216BBD918(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBD920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB6D94(a2, a3);
}

uint64_t sub_216BBD92C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BBD950(a1, &v3);
}

uint64_t sub_216BBD958(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBD980();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBD984(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BB8F08(a1);
  *v6 = &off_24D604B60;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BBD9D4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_94();
  j__free(v0);
}

uint64_t sub_216BBD9E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBD980(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBDA5C(uint64_t a1, uint64_t a2)
{
  return sub_216BBD980(a2, a1 + 8);
}

uint64_t sub_216BBDA70(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBDA78(uint64_t a1)
{
  return sub_216BBDA80(a1 + 8);
}

void sub_216BBDA88()
{
  sub_216BBDA90();
}

void sub_216BBDA90()
{
  sub_216BB66CC();
}

uint64_t sub_216BBDAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BBDAC8(a1, &v3);
}

uint64_t sub_216BBDAD0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBDAF8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBDAFC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BB8F08(a1);
  *v6 = &off_24D604BA8;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BBDB4C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_95();
  j__free(v0);
}

uint64_t sub_216BBDB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBDAF8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBDBD4(uint64_t a1, uint64_t a2)
{
  return sub_216BBDAF8(a2, a1 + 8);
}

uint64_t sub_216BBDBE8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBDBF0(uint64_t a1)
{
  return sub_216BBDBF8(a1 + 8);
}

void sub_216BBDC00()
{
  sub_216BBDC08();
}

void sub_216BBDC08()
{
  sub_216BB66CC();
}

uint64_t sub_216BBDC24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BBDC48(a1, &v3);
}

uint64_t sub_216BBDC50(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBDC78();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBDC7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BB57C0(a1);
  *v6 = &off_24D604BF0;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BBDCCC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_96();
  j__free(v0);
}

uint64_t sub_216BBDCE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBDC78(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBDD54(uint64_t a1, uint64_t a2)
{
  return sub_216BBDC78(a2, a1 + 8);
}

uint64_t sub_216BBDD68(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBDD70(uint64_t a1)
{
  return sub_216BBDD78(a1 + 8);
}

void sub_216BBDD80()
{
  sub_216BBDD8C();
}

void sub_216BBDD8C()
{
  sub_216BB66CC();
}

uint64_t sub_216BBDDA4(uint64_t a1)
{
  char v2;

  return sub_216BBDDC4(a1, &v2);
}

uint64_t sub_216BBDDCC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBDDF4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBDDF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D604C38;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBDE48()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_97();
  j__free(v0);
}

uint64_t sub_216BBDE5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBDDF4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBDED0(uint64_t a1, uint64_t a2)
{
  return sub_216BBDDF4(a2, a1 + 8);
}

uint64_t sub_216BBDEE4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBDEEC(uint64_t a1, uint64_t a2)
{
  return sub_216BBDEF4(a2);
}

void sub_216BBDF00()
{
  sub_216BB66CC();
}

uint64_t sub_216BBDF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8[3];
  char v9;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = sub_216BBDF98();
  sub_216B6E0CC(&v7, (uint64_t)&v9);
  sub_216B3BAE0((uint64_t)v8, v4);
  v5 = sub_216B1E600((uint64_t)v8);
  sub_216BBDFA4(v5, a2);
  *(_QWORD *)(a1 + 24) = sub_216BAA72C(v8);
  sub_216BBDFA8(v8);
  return a1;
}

uint64_t sub_216BBDF98()
{
  return sub_216B25CA0(32, 8);
}

_QWORD *sub_216BBDFAC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BB57C0(a1);
  *v6 = &off_24D604C80;
  sub_216BBDFF8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BBE000()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_98();
  j__free(v0);
}

uint64_t sub_216BBE014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BBDF98();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBDFA4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BBDFA8(v7);
  return v4;
}

uint64_t sub_216BBE088(uint64_t a1, uint64_t a2)
{
  return sub_216BBDFA4(a2, a1 + 8);
}

uint64_t sub_216BBE09C(uint64_t a1)
{
  return sub_216BBE1AC(a1, 1);
}

uint64_t sub_216BBE0A4(uint64_t a1)
{
  return sub_216BBE1B8(a1 + 8);
}

uint64_t sub_216BBE0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B514B8(a2);
  sub_216BAA6B8(a3);
  return sub_216BBE0F0(a1, v5);
}

uint64_t sub_216BBE0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a2;
  v3 = sub_216B262E0((uint64_t)&v6);
  v4 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t *sub_216BBE13C(uint64_t *a1)
{
  sub_216BBE160(a1);
  return a1;
}

uint64_t *sub_216BBE160(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = sub_216B3DBD0((uint64_t)result);
    return (uint64_t *)sub_216BBE198(v2, v1);
  }
  return result;
}

uint64_t sub_216BBE198(uint64_t a1, uint64_t a2)
{
  return sub_216BBE1A8(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216BBE1AC(uint64_t a1, uint64_t a2)
{
  return sub_216B25C38(a1, 32 * a2, 8);
}

void sub_216BBE1C0()
{
  sub_216BBE1CC();
}

void sub_216BBE1CC()
{
  sub_216BB66CC();
}

uint64_t sub_216BBE1FC(uint64_t a1)
{
  char v2;

  return sub_216BBE21C(a1, &v2);
}

uint64_t sub_216BBE224(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBE24C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBE250(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604CC8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBE2A0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_99();
  j__free(v0);
}

uint64_t sub_216BBE2B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBE24C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBE328(uint64_t a1, uint64_t a2)
{
  return sub_216BBE24C(a2, a1 + 8);
}

uint64_t sub_216BBE33C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBE344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8108(a2, a3);
}

uint64_t sub_216BBE350(uint64_t a1)
{
  char v2;

  return sub_216BBE370(a1, &v2);
}

uint64_t sub_216BBE378(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBE3A0();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBE3A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604D10;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBE3F4()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_100();
  j__free(v0);
}

uint64_t sub_216BBE408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBE3A0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBE47C(uint64_t a1, uint64_t a2)
{
  return sub_216BBE3A0(a2, a1 + 8);
}

uint64_t sub_216BBE490(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBE498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BB8108(a2, a3);
}

uint64_t sub_216BBE4A4(uint64_t a1)
{
  char v2;

  return sub_216BBE4C4(a1, &v2);
}

uint64_t sub_216BBE4CC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBE4F4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBE4F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604D58;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBE548()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_101();
  j__free(v0);
}

uint64_t sub_216BBE55C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBE4F4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBE5D0(uint64_t a1, uint64_t a2)
{
  return sub_216BBE4F4(a2, a1 + 8);
}

uint64_t sub_216BBE5E4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBE5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBE5F8(a2, a3);
}

uint64_t sub_216BBE600(int *a1, unsigned int *a2)
{
  return sub_216BBE60C(*a1, *a2);
}

uint64_t sub_216BBE60C(int a1, uint64_t a2)
{
  return nullsub_1(a1 < (int)a2, a2);
}

uint64_t sub_216BBE618(uint64_t a1)
{
  char v2;

  return sub_216BBE638(a1, &v2);
}

uint64_t sub_216BBE640(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBE668();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBE66C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604DA0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBE6BC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_102();
  j__free(v0);
}

uint64_t sub_216BBE6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBE668(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBE744(uint64_t a1, uint64_t a2)
{
  return sub_216BBE668(a2, a1 + 8);
}

uint64_t sub_216BBE758(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBE760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBE76C(a2, a3);
}

uint64_t sub_216BBE774(unsigned int *a1, unsigned int *a2)
{
  return sub_216BBE780(*a1, *a2);
}

uint64_t sub_216BBE780(unsigned int a1, uint64_t a2)
{
  return nullsub_1(a1 < a2, a2);
}

uint64_t sub_216BBE78C(uint64_t a1)
{
  char v2;

  return sub_216BBE7AC(a1, &v2);
}

uint64_t sub_216BBE7B4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBE7DC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBE7E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604DE8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBE830()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_103();
  j__free(v0);
}

uint64_t sub_216BBE844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBE7DC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBE8B8(uint64_t a1, uint64_t a2)
{
  return sub_216BBE7DC(a2, a1 + 8);
}

uint64_t sub_216BBE8CC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBE8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBE8E0(a2, a3);
}

uint64_t sub_216BBE8E8(int *a1, unsigned int *a2)
{
  return sub_216BBE8F4(*a1, *a2);
}

uint64_t sub_216BBE8F4(int a1, uint64_t a2)
{
  return nullsub_1(*(float *)&a1 < *(float *)&a2, a2);
}

uint64_t sub_216BBE908(uint64_t a1)
{
  char v2;

  return sub_216BBE928(a1, &v2);
}

uint64_t sub_216BBE930(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBE958();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBE95C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604E30;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBE9AC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_104();
  j__free(v0);
}

uint64_t sub_216BBE9C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBE958(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBEA34(uint64_t a1, uint64_t a2)
{
  return sub_216BBE958(a2, a1 + 8);
}

uint64_t sub_216BBEA48(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBEA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBEA5C(a2, a3);
}

uint64_t sub_216BBEA64(int *a1, unsigned int *a2)
{
  return sub_216BBEA70(*a1, *a2);
}

uint64_t sub_216BBEA70(int a1, uint64_t a2)
{
  return nullsub_1(a1 <= (int)a2, a2);
}

uint64_t sub_216BBEA7C(uint64_t a1)
{
  char v2;

  return sub_216BBEA9C(a1, &v2);
}

uint64_t sub_216BBEAA4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBEACC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBEAD0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604E78;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBEB20()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_105();
  j__free(v0);
}

uint64_t sub_216BBEB34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBEACC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBEBA8(uint64_t a1, uint64_t a2)
{
  return sub_216BBEACC(a2, a1 + 8);
}

uint64_t sub_216BBEBBC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBEBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBEBD0(a2, a3);
}

uint64_t sub_216BBEBD8(unsigned int *a1, unsigned int *a2)
{
  return sub_216BBEBE4(*a1, *a2);
}

uint64_t sub_216BBEBE4(unsigned int a1, uint64_t a2)
{
  return nullsub_1(a1 <= a2, a2);
}

uint64_t sub_216BBEBF0(uint64_t a1)
{
  char v2;

  return sub_216BBEC10(a1, &v2);
}

uint64_t sub_216BBEC18(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBEC40();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBEC44(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604EC0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBEC94()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_106();
  j__free(v0);
}

uint64_t sub_216BBECA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBEC40(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBED1C(uint64_t a1, uint64_t a2)
{
  return sub_216BBEC40(a2, a1 + 8);
}

uint64_t sub_216BBED30(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBED38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBED44(a2, a3);
}

uint64_t sub_216BBED4C(int *a1, unsigned int *a2)
{
  return sub_216BBED58(*a1, *a2);
}

uint64_t sub_216BBED58(int a1, uint64_t a2)
{
  return nullsub_1(*(float *)&a1 <= *(float *)&a2, a2);
}

uint64_t sub_216BBED6C(uint64_t a1)
{
  char v2;

  return sub_216BBED8C(a1, &v2);
}

uint64_t sub_216BBED94(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBEDBC();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBEDC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604F08;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBEE10()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_107();
  j__free(v0);
}

uint64_t sub_216BBEE24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBEDBC(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBEE98(uint64_t a1, uint64_t a2)
{
  return sub_216BBEDBC(a2, a1 + 8);
}

uint64_t sub_216BBEEAC(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBEEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBEEC0(a2, a3);
}

uint64_t sub_216BBEEC8(int *a1, unsigned int *a2)
{
  return sub_216BBEED4(*a1, *a2);
}

uint64_t sub_216BBEED4(int a1, uint64_t a2)
{
  return nullsub_1(a1 > (int)a2, a2);
}

uint64_t sub_216BBEEE0(uint64_t a1)
{
  char v2;

  return sub_216BBEF00(a1, &v2);
}

uint64_t sub_216BBEF08(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBEF30();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBEF34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604F50;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBEF84()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_108();
  j__free(v0);
}

uint64_t sub_216BBEF98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBEF30(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBF00C(uint64_t a1, uint64_t a2)
{
  return sub_216BBEF30(a2, a1 + 8);
}

uint64_t sub_216BBF020(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBF028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBF034(a2, a3);
}

uint64_t sub_216BBF03C(unsigned int *a1, unsigned int *a2)
{
  return sub_216BBF048(*a1, *a2);
}

uint64_t sub_216BBF048(unsigned int a1, uint64_t a2)
{
  return nullsub_1(a1 > a2, a2);
}

uint64_t sub_216BBF054(uint64_t a1)
{
  char v2;

  return sub_216BBF074(a1, &v2);
}

uint64_t sub_216BBF07C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBF0A4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBF0A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604F98;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBF0F8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_109();
  j__free(v0);
}

uint64_t sub_216BBF10C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBF0A4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBF180(uint64_t a1, uint64_t a2)
{
  return sub_216BBF0A4(a2, a1 + 8);
}

uint64_t sub_216BBF194(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBF19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBF1A8(a2, a3);
}

uint64_t sub_216BBF1B0(int *a1, unsigned int *a2)
{
  return sub_216BBF1BC(*a1, *a2);
}

uint64_t sub_216BBF1BC(int a1, uint64_t a2)
{
  return nullsub_1(*(float *)&a1 > *(float *)&a2, a2);
}

uint64_t sub_216BBF1D0(uint64_t a1)
{
  char v2;

  return sub_216BBF1F0(a1, &v2);
}

uint64_t sub_216BBF1F8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBF220();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBF224(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D604FE0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBF274()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_110();
  j__free(v0);
}

uint64_t sub_216BBF288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBF220(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBF2FC(uint64_t a1, uint64_t a2)
{
  return sub_216BBF220(a2, a1 + 8);
}

uint64_t sub_216BBF310(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBF318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBF324(a2, a3);
}

uint64_t sub_216BBF32C(int *a1, unsigned int *a2)
{
  return sub_216BBF338(*a1, *a2);
}

uint64_t sub_216BBF338(int a1, uint64_t a2)
{
  return nullsub_1(a1 >= (int)a2, a2);
}

uint64_t sub_216BBF344(uint64_t a1)
{
  char v2;

  return sub_216BBF364(a1, &v2);
}

uint64_t sub_216BBF36C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBF394();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBF398(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D605028;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBF3E8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_111();
  j__free(v0);
}

uint64_t sub_216BBF3FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBF394(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBF470(uint64_t a1, uint64_t a2)
{
  return sub_216BBF394(a2, a1 + 8);
}

uint64_t sub_216BBF484(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBF48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBF498(a2, a3);
}

uint64_t sub_216BBF4A0(unsigned int *a1, unsigned int *a2)
{
  return sub_216BBF4AC(*a1, *a2);
}

uint64_t sub_216BBF4AC(unsigned int a1, uint64_t a2)
{
  return nullsub_1(a1 >= a2, a2);
}

uint64_t sub_216BBF4B8(uint64_t a1)
{
  char v2;

  return sub_216BBF4D8(a1, &v2);
}

uint64_t sub_216BBF4E0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBF508();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBF50C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D605070;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBF55C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_112();
  j__free(v0);
}

uint64_t sub_216BBF570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBF508(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBF5E4(uint64_t a1, uint64_t a2)
{
  return sub_216BBF508(a2, a1 + 8);
}

uint64_t sub_216BBF5F8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBF600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBF60C(a2, a3);
}

uint64_t sub_216BBF614(int *a1, unsigned int *a2)
{
  return sub_216BBF620(*a1, *a2);
}

uint64_t sub_216BBF620(int a1, uint64_t a2)
{
  return nullsub_1(*(float *)&a1 >= *(float *)&a2, a2);
}

uint64_t sub_216BBF634(uint64_t a1)
{
  char v2;

  return sub_216BBF654(a1, &v2);
}

uint64_t sub_216BBF65C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBF684();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBF688(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6050B8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBF6D8()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_113();
  j__free(v0);
}

uint64_t sub_216BBF6EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBF684(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBF760(uint64_t a1, uint64_t a2)
{
  return sub_216BBF684(a2, a1 + 8);
}

uint64_t sub_216BBF774(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBF77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBF788(a2, a3);
}

uint64_t sub_216BBF790(int *a1, unsigned int *a2)
{
  return sub_216BBF79C(*a1, *a2);
}

uint64_t sub_216BBF79C(int a1, uint64_t a2)
{
  return nullsub_1(a1 == (_DWORD)a2, a2);
}

uint64_t sub_216BBF7A8(uint64_t a1)
{
  char v2;

  return sub_216BBF7C8(a1, &v2);
}

uint64_t sub_216BBF7D0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBF7F8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBF7FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D605100;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBF84C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_114();
  j__free(v0);
}

uint64_t sub_216BBF860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBF7F8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBF8D4(uint64_t a1, uint64_t a2)
{
  return sub_216BBF7F8(a2, a1 + 8);
}

uint64_t sub_216BBF8E8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBF8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBF788(a2, a3);
}

uint64_t sub_216BBF8FC(uint64_t a1)
{
  char v2;

  return sub_216BBF91C(a1, &v2);
}

uint64_t sub_216BBF924(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBF94C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBF950(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D605148;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBF9A0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_115();
  j__free(v0);
}

uint64_t sub_216BBF9B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBF94C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBFA28(uint64_t a1, uint64_t a2)
{
  return sub_216BBF94C(a2, a1 + 8);
}

uint64_t sub_216BBFA3C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBFA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBFA50(a2, a3);
}

uint64_t sub_216BBFA58(int *a1, unsigned int *a2)
{
  return sub_216BBFA64(*a1, *a2);
}

uint64_t sub_216BBFA64(int a1, uint64_t a2)
{
  return nullsub_1(((a2 ^ a1) & 1) == 0, a2);
}

uint64_t sub_216BBFA74(uint64_t a1)
{
  char v2;

  return sub_216BBFA94(a1, &v2);
}

uint64_t sub_216BBFA9C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBFAC4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBFAC8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D605190;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBFB18()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_116();
  j__free(v0);
}

uint64_t sub_216BBFB2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBFAC4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBFBA0(uint64_t a1, uint64_t a2)
{
  return sub_216BBFAC4(a2, a1 + 8);
}

uint64_t sub_216BBFBB4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBFBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBFBC8(a2, a3);
}

uint64_t sub_216BBFBD0(int *a1, unsigned int *a2)
{
  return sub_216BBFBDC(*a1, *a2);
}

uint64_t sub_216BBFBDC(int a1, uint64_t a2)
{
  return nullsub_1(*(float *)&a1 == *(float *)&a2, a2);
}

uint64_t sub_216BBFBF0(uint64_t a1)
{
  char v2;

  return sub_216BBFC10(a1, &v2);
}

uint64_t sub_216BBFC18(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBFC40();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBFC44(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6051D8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBFC94()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_117();
  j__free(v0);
}

uint64_t sub_216BBFCA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBFC40(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBFD1C(uint64_t a1, uint64_t a2)
{
  return sub_216BBFC40(a2, a1 + 8);
}

uint64_t sub_216BBFD30(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBFD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBFD44(a2, a3);
}

uint64_t sub_216BBFD4C(int *a1, unsigned int *a2)
{
  return sub_216BBFD58(*a1, *a2);
}

uint64_t sub_216BBFD58(int a1, uint64_t a2)
{
  return nullsub_1(a1 != (_DWORD)a2, a2);
}

uint64_t sub_216BBFD64(uint64_t a1)
{
  char v2;

  return sub_216BBFD84(a1, &v2);
}

uint64_t sub_216BBFD8C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBFDB4();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBFDB8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D605220;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBFE08()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_118();
  j__free(v0);
}

uint64_t sub_216BBFE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBFDB4(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBFE90(uint64_t a1, uint64_t a2)
{
  return sub_216BBFDB4(a2, a1 + 8);
}

uint64_t sub_216BBFEA4(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BBFEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BBFD44(a2, a3);
}

uint64_t sub_216BBFEB8(uint64_t a1)
{
  char v2;

  return sub_216BBFED8(a1, &v2);
}

uint64_t sub_216BBFEE0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BBFF08();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BBFF0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D605268;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BBFF5C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_119();
  j__free(v0);
}

uint64_t sub_216BBFF70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BBFF08(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BBFFE4(uint64_t a1, uint64_t a2)
{
  return sub_216BBFF08(a2, a1 + 8);
}

uint64_t sub_216BBFFF8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BC0000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BC000C(a2, a3);
}

uint64_t sub_216BC0014(_DWORD *a1, unsigned int *a2)
{
  return sub_216BC0020(*a1, *a2);
}

uint64_t sub_216BC0020(unsigned __int8 a1, uint64_t a2)
{
  return nullsub_1((a2 ^ a1) & 1, a2);
}

uint64_t sub_216BC002C(uint64_t a1)
{
  char v2;

  return sub_216BC004C(a1, &v2);
}

uint64_t sub_216BC0054(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BC007C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BC0080(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB57C0(a1) = &off_24D6052B0;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BC00D0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_120();
  j__free(v0);
}

uint64_t sub_216BC00E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BC007C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BC0158(uint64_t a1, uint64_t a2)
{
  return sub_216BC007C(a2, a1 + 8);
}

uint64_t sub_216BC016C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BC0174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BC0180(a2, a3);
}

uint64_t sub_216BC0188(int *a1, unsigned int *a2)
{
  return sub_216BC0194(*a1, *a2);
}

uint64_t sub_216BC0194(int a1, uint64_t a2)
{
  return nullsub_1(*(float *)&a1 != *(float *)&a2, a2);
}

uint64_t sub_216BC01A8(uint64_t a1)
{
  char v2;

  return sub_216BC01C8(a1, &v2);
}

uint64_t sub_216BC01D0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BC01F8();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BC01FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BB8F08(a1) = &off_24D6052F8;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BC024C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_121();
  j__free(v0);
}

uint64_t sub_216BC0260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BC01F8(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BC02D4(uint64_t a1, uint64_t a2)
{
  return sub_216BC01F8(a2, a1 + 8);
}

uint64_t sub_216BC02E8(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BC02F0(uint64_t a1, uint64_t a2)
{
  return sub_216BC02F8(a2);
}

uint64_t sub_216BC0300(_DWORD *a1, uint64_t a2)
{
  return sub_216BC0308(*a1, a2);
}

uint64_t sub_216BC0308(char a1, uint64_t a2)
{
  return nullsub_1((a1 & 1) == 0, a2);
}

uint64_t sub_216BC0314(unsigned int a1, uint64_t a2, unsigned int a3)
{
  return sub_216BC0324(a2, a1, a3);
}

uint64_t sub_216BC0324(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return sub_216B2663C((uint64_t *)(a1 + 8), a2, a3);
}

void sub_216BC0334(unsigned __int8 *a1)
{
  char *v1;

  v1 = (char *)sub_216BC0364 + 4 * byte_216C18C34[sub_216B8B400(a1)];
  __asm { BR              X10 }
}

uint64_t sub_216BC0364()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B69130(v1);
}

uint64_t sub_216BC0378()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216BC0440(v1);
}

uint64_t sub_216BC038C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B387B8(v1);
}

uint64_t sub_216BC03A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B69130(v1);
}

uint64_t sub_216BC03B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B69130(v1);
}

uint64_t sub_216BC03C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B69130(v1);
}

uint64_t sub_216BC03DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B69130(v1);
}

uint64_t sub_216BC03F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B69130(v1);
}

uint64_t sub_216BC0404()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

uint64_t sub_216BC0418()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

uint64_t sub_216BC042C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B69130(v1);
}

unsigned int *sub_216BC0444(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int *v13;
  uint64_t v15;
  uint64_t v16;

  v16 = a5;
  if (sub_216B2D76C(&v16))
  {
    v9 = sub_216B1E600((uint64_t)&v16);
    if (sub_216BB216C(v9))
    {
      v10 = sub_216B1E600((uint64_t)&v16);
      v11 = sub_216BAED9C(v10);
      v12 = (_WORD *)sub_216B1E67C(v11);
      sub_216BC04F0(v12);
    }
  }
  v13 = (unsigned int *)sub_216BC0314(0x28u, a1, 8u);
  sub_216BC0500(&v15, a1, a3, a4);
  return sub_216BC0504(v13, a2, v15, v16);
}

_WORD *sub_216BC04F0(_WORD *result)
{
  *result |= 0x100u;
  return result;
}

unsigned int *sub_216BC0504(unsigned int *a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_216BC0EF4(a1, a2, a3, a4);
}

unsigned int *sub_216BC050C(uint64_t a1, int a2, char a3, char a4)
{
  unsigned int *v7;

  v7 = (unsigned int *)sub_216BC0314(0x10u, a1, 8u);
  return sub_216BC0554(v7, a2, a3, a4);
}

unsigned int *sub_216BC0554(unsigned int *a1, int a2, char a3, char a4)
{
  return sub_216BC0F90(a1, a2, a3, a4);
}

uint64_t sub_216BC055C(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  v5 = sub_216BC0314(0x18u, a1, 8u);
  return sub_216BC0594(v5, a2, a3);
}

uint64_t sub_216BC0594(uint64_t a1, int a2, int a3)
{
  return sub_216BC1004(a1, a2, a3);
}

uint64_t sub_216BC05A0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  uint64_t v14;
  uint64_t v16;

  v14 = sub_216BC0314(0x20u, a1, 8u);
  sub_216BC0500(&v16, a1, a3, a4);
  return sub_216BC0638(v14, a2, v16, a5, a6, a7);
}

uint64_t sub_216BC0638(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  return sub_216BC1060(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216BC0644(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v19;

  v17 = sub_216BC0314(0x38u, a1, 8u);
  sub_216BC0500(&v19, a1, a4, a5);
  sub_216BC0700((_DWORD *)v17, a2, a3, v19, a6, a7);
  sub_216BC0714((_QWORD *)(v17 + 16), a1, a9, a10);
  return v17;
}

_DWORD *sub_216BC0700(_DWORD *a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  return sub_216BC10B4(a1, a2, a3, a4, a5, a6);
}

void *sub_216BC0714(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BC1724((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

uint64_t sub_216BC0764(uint64_t a1, char a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v20;

  v18 = sub_216BC0314(0x38u, a1, 8u);
  sub_216BC0500(&v20, a1, a5, a6);
  sub_216BC0830(v18, a2, a3, a4, v20, a7, a8);
  sub_216BC0844((_QWORD *)(v18 + 16), a1, a9, a10);
  return v18;
}

uint64_t sub_216BC0830(uint64_t a1, char a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  return sub_216BC1174(a1, a2, a3, a4, a5, a6, a7);
}

void *sub_216BC0844(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BC17CC((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

uint64_t sub_216BC0894(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)sub_216BC0314(0x28u, a1, 8u);
  return sub_216BC08DC(v7, a2, a3, a4);
}

uint64_t sub_216BC08DC(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_216BC1220(a1, a2, a3, a4);
}

uint64_t sub_216BC08E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, char a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[88];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17 = sub_216BC0314(0xB0u, a1, 8u);
  sub_216BC0500(&v19, a1, a3, a4);
  sub_216BC09D8(v20, a9);
  sub_216BC09DC(v17, a2, v19, a5, a6, a7, a8, (uint64_t)v20);
  sub_216B1FF6C(v20);
  return v17;
}

uint64_t sub_216BC09DC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  return sub_216BC127C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_216BC09EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  _BYTE v21[88];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_216BC09D8(v21, a9);
  v19 = sub_216BC08E4(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v21);
  sub_216B1FF6C(v21);
  sub_216BC0AD8((_QWORD *)(v19 + 16), a1, a10, a11);
  return v19;
}

void *sub_216BC0AD8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BC17E4((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

uint64_t sub_216BC0B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  _QWORD v28[2];

  v4 = sub_216BA6A7C(a1);
  v6 = v5;
  v7 = (const void *)sub_216BA6A7C(a2);
  if (sub_216B2B2F0(v4, v6, v7, v8))
    return 0;
  v9 = sub_216B939E0(a1);
  v10 = sub_216B939E0(a2);
  if (!sub_216BC0C94(v9, v10))
    return 0;
  v11 = a1 + 16;
  v12 = sub_216B262E0(v11);
  v13 = sub_216BA8258(v11);
  sub_216BC0E28(v28, v12, v13);
  v14 = a2 + 16;
  v15 = sub_216B262E0(v14);
  v16 = sub_216BA8258(v14);
  sub_216BC0E28(v27, v15, v16);
  v17 = sub_216B1E67C((uint64_t)v28);
  if (v17 != sub_216B1E67C((uint64_t)v27))
    return 0;
  if (!sub_216B1E67C((uint64_t)v28))
    return 1;
  v18 = 0;
  v19 = 1;
  do
  {
    v20 = (uint64_t *)sub_216B212F0(v28, v18);
    v21 = sub_216B2037C(*v20);
    v22 = (uint64_t *)sub_216B212F0(v27, v18);
    v23 = sub_216B2037C(*v22);
    v24 = sub_216BC0C94(v21, v23);
    if ((v24 & 1) == 0)
      break;
    v18 = v19;
  }
  while (sub_216B1E67C((uint64_t)v28) > (unint64_t)v19++);
  return v24;
}

uint64_t sub_216BC0C94(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v27 = a1;
  v2 = (_BYTE *)sub_216B1E600((uint64_t)&v27);
  v3 = sub_216BA72B0(v2);
  v4 = (_BYTE *)sub_216B1E600((uint64_t)&v26);
  if (v3 != sub_216BA72B0(v4))
    return 0;
  v5 = sub_216B1E600((uint64_t)&v27);
  v6 = sub_216BA7040(v5);
  if (v6)
  {
    v7 = v6;
    v8 = sub_216B1E600((uint64_t)&v26);
    v9 = sub_216BA7040(v8);
    LODWORD(v7) = sub_216BA734C(v7);
    if ((_DWORD)v7 != sub_216BA734C(v9))
      return 0;
  }
  v10 = sub_216B1E600((uint64_t)&v27);
  v11 = sub_216BA710C(v10);
  if (v11)
  {
    v12 = v11;
    v13 = sub_216B1E600((uint64_t)&v26);
    v14 = sub_216BA710C(v13);
    LODWORD(v12) = sub_216BC1310(v12);
    if ((_DWORD)v12 != sub_216BC1310(v14))
      return 0;
  }
  v15 = sub_216B1E600((uint64_t)&v27);
  v16 = sub_216BA7ED0(v15);
  v17 = sub_216B1E600((uint64_t)&v26);
  v18 = sub_216BA7ED0(v17);
  result = 0;
  if (!v16 || !v18)
    return result;
  if (v16 == v18
    || sub_216BD36C0(v16) && (sub_216BD36E4(v18) & 1) != 0
    || sub_216BD36E4(v16) && (sub_216BD36C0(v18) & 1) != 0)
  {
    return 1;
  }
  v20 = sub_216B1E600((uint64_t)&v27);
  v21 = sub_216BA7EB0(v20);
  v22 = sub_216B1E600((uint64_t)&v26);
  v23 = sub_216BA7EB0(v22);
  if (!v21)
    return 0;
  v24 = v23;
  if (!v23)
    return 0;
  v25 = sub_216BA7EB4(v21);
  result = sub_216BA7EB4(v24);
  if (v25 == (_DWORD)result)
    return 1;
  if (v25 || (_DWORD)result != 1)
    return v25 == 1 && !(_DWORD)result;
  return result;
}

uint64_t sub_216BC0E2C(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = sub_216BC0314(0x18u, a1, 8u);
  return sub_216BC0E5C(v3, a2);
}

uint64_t sub_216BC0E5C(uint64_t a1, int a2)
{
  return sub_216BC1324(a1, a2);
}

_WORD *sub_216BC0E64(uint64_t a1, int a2, char a3)
{
  _WORD *v5;

  v5 = (_WORD *)sub_216BC0314(0x10u, a1, 8u);
  return sub_216BC0E9C(v5, a2, a3);
}

_WORD *sub_216BC0E9C(_WORD *a1, int a2, char a3)
{
  return sub_216BC1378(a1, a2, a3);
}

unsigned int *sub_216BC0EA4(uint64_t a1, int a2, unsigned __int8 a3, char a4)
{
  unsigned int *v7;

  v7 = (unsigned int *)sub_216BC0314(0x10u, a1, 8u);
  return sub_216BC0EEC(v7, a2, a3, a4);
}

unsigned int *sub_216BC0EEC(unsigned int *a1, int a2, unsigned __int8 a3, char a4)
{
  return sub_216BC13E4(a1, a2, a3, a4);
}

unsigned int *sub_216BC0EF4(unsigned int *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_216BC0F4C((uint64_t)a1, 0, a2, a3);
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = 0;
  sub_216BC0F5C((_WORD *)(v6 + 32));
  sub_216BC0F60(a1, 0);
  sub_216BC0F70(a1, 0);
  return a1;
}

uint64_t sub_216BC0F4C(uint64_t result, __int16 a2, int a3, uint64_t a4)
{
  *(_QWORD *)(result + 8) = a4;
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 4) = a3;
  *(_WORD *)result = a2;
  return result;
}

unsigned int *sub_216BC0F60(unsigned int *result, char a2)
{
  *result = *result & 0xFFFF0FFF | ((a2 & 0xF) << 12);
  return result;
}

unsigned int *sub_216BC0F70(unsigned int *result, char a2)
{
  *result = *result & 0xFFCFFFFF | ((a2 & 3) << 20);
  return result;
}

_WORD *sub_216BC0F80(_WORD *result)
{
  *result &= 0x8000u;
  return result;
}

unsigned int *sub_216BC0F90(unsigned int *a1, int a2, char a3, char a4)
{
  _WORD *v8;
  uint64_t v10;

  sub_216B2D410(&v10);
  v8 = (_WORD *)sub_216BC0F4C((uint64_t)a1, 5, a2, v10);
  *a1 = ((a3 & 3) << 17) | ((a4 & 0x7F) << 10) | *a1 & 0xFFF803FF;
  sub_216BC04F0(v8);
  return a1;
}

uint64_t sub_216BC1004(uint64_t a1, int a2, int a3)
{
  _WORD *v6;
  uint64_t v8;

  sub_216B2D410(&v8);
  v6 = (_WORD *)sub_216BC0F4C(a1, 4, a2, v8);
  *(_DWORD *)(a1 + 16) = a3;
  sub_216BC04F0(v6);
  return a1;
}

uint64_t sub_216BC1060(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t result;

  result = sub_216BC0F4C(a1, 1, a2, a3);
  *(_QWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFE07FF | ((a6 & 3) << 14);
  return result;
}

_DWORD *sub_216BC10B4(_DWORD *a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  int v11;
  int v13;

  v13 = a3;
  if (sub_216B4B4A8(&v13))
    v11 = a2;
  else
    v11 = v13;
  sub_216BC1140((uint64_t)a1, 9, v11, a4);
  sub_216B3A258(a1 + 4);
  a1[6] = a2;
  a1[7] = a5;
  a1[8] = a6;
  sub_216BC1148(a1 + 10, a1);
  return a1;
}

uint64_t sub_216BC1140(uint64_t a1, __int16 a2, int a3, uint64_t a4)
{
  return sub_216BC0F4C(a1, a2, a3, a4);
}

_BYTE *sub_216BC114C(_BYTE *a1, uint64_t a2)
{
  _BYTE *result;

  result = sub_216BA4E38(a1, 5);
  *((_QWORD *)result + 1) = a2;
  return result;
}

uint64_t sub_216BC1174(uint64_t a1, char a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v12;

  v12 = sub_216BC1140(a1, 10, a4, a5);
  sub_216B3A258(v12 + 16);
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a6;
  *(_DWORD *)(a1 + 32) = a7;
  sub_216BC0F5C((_WORD *)(a1 + 36));
  sub_216BC11F4(a1 + 40, a1);
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFE3FF | ((a2 & 7) << 10);
  return a1;
}

_BYTE *sub_216BC11F8(_BYTE *a1, uint64_t a2)
{
  _BYTE *result;

  result = sub_216BA4E38(a1, 6);
  *((_QWORD *)result + 1) = a2;
  return result;
}

uint64_t sub_216BC1220(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  sub_216B2D410(&v9);
  result = sub_216BC0F4C((uint64_t)a1, 3, a2, v9);
  a1[2] = a3;
  a1[3] = a4;
  a1[4] = 0;
  return result;
}

uint64_t sub_216BC127C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  uint64_t v14;

  v14 = sub_216BC0F4C(a1, 2, a2, a3);
  sub_216B3A258(v14 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a6;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  sub_216BC09D8(a1 + 56, a8);
  *(_QWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFF63FF | ((a7 & 3) << 10);
  return a1;
}

uint64_t sub_216BC1310(uint64_t a1)
{
  return ((*(unsigned __int8 *)(a1 + 2) >> 3) & 7) * (*(_BYTE *)(a1 + 2) & 7u);
}

uint64_t sub_216BC1324(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;

  sub_216B2D410(&v5);
  result = sub_216BC0F4C(a1, 6, a2, v5);
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)a1 &= 0x83FFu;
  return result;
}

_WORD *sub_216BC1378(_WORD *a1, int a2, char a3)
{
  _WORD *v6;
  uint64_t v8;

  sub_216B2D410(&v8);
  v6 = (_WORD *)sub_216BC0F4C((uint64_t)a1, 7, a2, v8);
  *a1 = *a1 & 0x83FF | ((a3 & 0x1F) << 10);
  sub_216BC04F0(v6);
  return a1;
}

unsigned int *sub_216BC13E4(unsigned int *a1, int a2, unsigned __int8 a3, char a4)
{
  _WORD *v8;
  uint64_t v10;

  sub_216B2D410(&v10);
  v8 = (_WORD *)sub_216BC0F4C((uint64_t)a1, 8, a2, v10);
  *a1 = (a3 << 10) & 0xFFE3FFFF | ((a4 & 7) << 18) | *a1 & 0xFFE003FF;
  sub_216BC04F0(v8);
  return a1;
}

const void **sub_216BC1458(const void **a1, _QWORD *a2)
{
  sub_216B2F340((uint64_t)a1, 8u);
  if (!sub_216B29084(a2))
    sub_216BC149C(a1, (uint64_t)a2);
  return a1;
}

const void **sub_216BC149C(const void **a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != (const void **)a2)
  {
    v4 = sub_216B26878(a2);
    v5 = sub_216B26878((uint64_t)a1);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_216B1E600(a2);
        sub_216B1E600(a2);
        sub_216B1E600((uint64_t)a1);
        v10 = sub_216BC162C();
      }
      else
      {
        v10 = sub_216B1E600((uint64_t)a1);
      }
      v16 = v10;
      v17 = sub_216B1E67C((uint64_t)a1);
      nullsub_1(v16, v17);
      v15 = (uint64_t)a1;
      v14 = v16;
    }
    else
    {
      v6 = v5;
      if (sub_216B860AC((uint64_t)a1) >= v4)
      {
        if (v6)
        {
          sub_216B1E600(a2);
          sub_216B1E600(a2);
          sub_216B1E600((uint64_t)a1);
          sub_216BC162C();
        }
      }
      else
      {
        v7 = sub_216B1E600((uint64_t)a1);
        v8 = sub_216B1E67C((uint64_t)a1);
        nullsub_1(v7, v8);
        v9 = sub_216B1E600((uint64_t)a1);
        sub_216B203A4((uint64_t)a1, v9);
        sub_216B26908(a1, v4);
        v6 = 0;
      }
      v11 = (void *)(sub_216B1E600(a2) + 8 * v6);
      v12 = sub_216B1E67C(a2);
      v13 = sub_216B1E600((uint64_t)a1);
      sub_216B2A5E4(v11, v12, (void *)(v13 + 8 * v6));
      v14 = sub_216B1E600((uint64_t)a1) + 8 * v4;
      v15 = (uint64_t)a1;
    }
    sub_216B203A4(v15, v14);
  }
  return a1;
}

uint64_t sub_216BC162C()
{
  uint64_t v0;

  sub_216BC1644();
  return v0;
}

uint64_t *sub_216BC1648(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  const void *v14[2];
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  *a1 = 0;
  sub_216B1E678((int)v14, &byte_216C19659);
  if (!sub_216B274F0(a3, a4, v14[0], (size_t)v14[1]))
  {
    v8 = sub_216B1E67C((uint64_t)v15);
    *a1 = sub_216BC0324(a2, v8 + 5, 4u);
    *(_DWORD *)*a1 = sub_216B1E67C((uint64_t)v15);
    v9 = (void *)sub_216BA74C8(a1);
    v10 = (const void *)sub_216B1E600((uint64_t)v15);
    v11 = sub_216B1E67C((uint64_t)v15);
    memcpy(v9, v10, v11);
    v12 = sub_216BA74C8(a1);
    *(_BYTE *)(v12 + sub_216B1E67C((uint64_t)v15)) = 0;
  }
  return a1;
}

int *sub_216BC1724(uint64_t a1, int a2)
{
  return sub_216BC17BC((int *)(a1 - 16), a2);
}

void *sub_216BC172C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *result;
  int v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  nullsub_1(a2, *a1);
  result = (void *)sub_216B1E67C((uint64_t)v11);
  if (result)
  {
    v7 = sub_216B1E67C((uint64_t)v11);
    v8 = (void *)sub_216BC0324(a2, 8 * v7, 8u);
    *a1 = v8;
    v9 = (const void *)sub_216B1E600((uint64_t)v11);
    v10 = sub_216B1E67C((uint64_t)v11);
    return memcpy(v8, v9, 8 * v10);
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

int *sub_216BC17BC(int *result, int a2)
{
  *result = *result & 0x3FF | (a2 << 10);
  return result;
}

int *sub_216BC17CC(uint64_t a1, int a2)
{
  return sub_216BC17D4((int *)(a1 - 16), a2);
}

int *sub_216BC17D4(int *result, int a2)
{
  *result = *result & 0x1FFF | (a2 << 13);
  return result;
}

uint64_t sub_216BC17E4(uint64_t a1, __int16 a2)
{
  return sub_216BC17EC(a1 - 16, a2);
}

uint64_t sub_216BC17EC(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 2) = a2;
  return result;
}

_QWORD *sub_216BC17F4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = (a3 - a2) >> 3;
  return result;
}

void sub_216BC1804(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_216BC1834 + 4 * byte_216C18C3F[sub_216B9E3DC(a1)];
  __asm { BR              X10 }
}

uint64_t sub_216BC1834()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1848()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC185C()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1870()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1884()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1898()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

void sub_216BC18AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A00(v1);
}

void sub_216BC18C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A00(v1);
}

void sub_216BC18D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A08(v1);
}

uint64_t sub_216BC18E8()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC18FC()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1910()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1924()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

void sub_216BC1938()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A10(v1);
}

void sub_216BC194C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A10(v1);
}

void sub_216BC1960()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A10(v1);
}

void sub_216BC1974()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A00(v1);
}

void sub_216BC1988()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A00(v1);
}

uint64_t sub_216BC199C()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC19B0()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC19C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216BC1A24(v1);
}

uint64_t sub_216BC19D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216BC1A24(v1);
}

uint64_t sub_216BC19EC()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

void sub_216BC1A00(uint64_t a1)
{
  sub_216BC1804(*(_QWORD *)(a1 + 16));
}

void sub_216BC1A08(uint64_t a1)
{
  sub_216BC1804(*(_QWORD *)(a1 + 8));
}

void sub_216BC1A10(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_216B2037C(a1);
  sub_216BC1804(v1);
}

uint64_t sub_216BC1A24(uint64_t a1)
{
  return sub_216B1E4E0(*(unsigned int **)(a1 + 8));
}

void sub_216BC1A2C(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_216BC1A5C + 4 * byte_216C18C56[sub_216B9E3DC(a1)];
  __asm { BR              X10 }
}

uint64_t sub_216BC1A5C()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1A70()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1A84()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1A98()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1AAC()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

void sub_216BC1AC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1C28(v1);
}

void sub_216BC1AD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1C30(v1);
}

void sub_216BC1AE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1C38(v1);
}

void sub_216BC1AFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1C28(v1);
}

uint64_t sub_216BC1B10()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1B24()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1B38()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  return sub_216B71D08(v1);
}

uint64_t sub_216BC1B4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

void sub_216BC1B60()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  sub_216BC1C40(v1);
}

void sub_216BC1B74()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  sub_216BC1C40(v1);
}

void sub_216BC1B88()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  sub_216BC1C40(v1);
}

uint64_t sub_216BC1B9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B387B8(v1);
}

uint64_t sub_216BC1BB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

uint64_t sub_216BC1BC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

uint64_t sub_216BC1BD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

uint64_t sub_216BC1BEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216BC1A24(v1);
}

uint64_t sub_216BC1C00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216BC1A24(v1);
}

uint64_t sub_216BC1C14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

void sub_216BC1C28(uint64_t a1)
{
  sub_216BC1A2C(*(_QWORD *)(a1 + 16));
}

void sub_216BC1C30(uint64_t a1)
{
  sub_216BC1A2C(*(_QWORD *)(a1 + 24));
}

void sub_216BC1C38(uint64_t a1)
{
  sub_216BC1A2C(*(_QWORD *)(a1 + 32));
}

void sub_216BC1C40(unsigned int *a1)
{
  uint64_t v2;
  int v3;

  v3 = sub_216B1E4E0(a1);
  if (sub_216B4B4A8(&v3))
  {
    v2 = sub_216B2037C((uint64_t)a1);
    sub_216BC1A2C(v2);
  }
}

void sub_216BC1C8C(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_216BC1CC0 + 4 * byte_216C18C6D[sub_216B9E3DC(a1)];
  __asm { BR              X10 }
}

uint64_t sub_216BC1CC0()
{
  uint64_t v0;
  unsigned int *v1;
  int v2;
  unsigned int *v3;
  int v4;
  uint64_t v6;

  v1 = (unsigned int *)sub_216B3DB48(v0);
  v2 = sub_216B71D08(v1);
  v3 = (unsigned int *)sub_216B3DB48(v0);
  v4 = sub_216B71D08(v3);
  sub_216B746DC(&v6, v2, v4);
  return v6;
}

uint64_t sub_216BC1FC0(uint64_t a1, int a2)
{
  _BYTE v3[32];
  _BYTE v4[32];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  sub_216BC2044((uint64_t)v3, a2);
  sub_216BAB864(v4, v3);
  sub_216BA5334(v3);
  sub_216BABC8C(v4);
  return sub_216BA5330(v4);
}

uint64_t sub_216BC2044(uint64_t a1, int a2)
{
  return sub_216BC3324(a1, a2);
}

uint64_t sub_216BC204C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v11;

  v11 = sub_216BC0314(0x18u, a1, 8u);
  return sub_216BC20AC(v11, a2, a3, a4, a5, a6);
}

uint64_t sub_216BC20AC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  return sub_216BC2CF8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216BC20B4(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  result = sub_216BAB708(&v5);
  if ((result & 1) == 0)
  {
    while (1)
    {
      result = sub_216BAE1FC(&v5);
      if ((result & 1) != 0)
        return result;
      v2 = sub_216BC2144(v5);
      if (v2)
        break;
      v2 = sub_216BC217C(v5);
      if (v2)
        break;
      v2 = sub_216BC21B4(v5);
      if (v2)
        break;
      v4 = sub_216BC21EC(v5);
      if (v4)
      {
        v3 = sub_216B1E67C(v4);
        goto LABEL_10;
      }
LABEL_11:
      result = sub_216BAB708(&v5);
      if ((_DWORD)result)
        return result;
    }
    v3 = sub_216B2037C(v2);
LABEL_10:
    v5 = v3;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_216BC2144(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BC357C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BC217C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BC35D4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BC21B4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BC362C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BC21EC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BC3684(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

_DWORD *sub_216BC2224(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  uint64_t v11;

  v11 = sub_216BC0314(0x20u, a1, 8u);
  return sub_216BC2284(v11, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BC2284(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  return sub_216BC2D9C(a1, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BC228C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = sub_216BC0314(0x28u, a1, 8u);
  return sub_216BC22EC(v11, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BC22EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_216BC2E34(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216BC22F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v11;

  v11 = sub_216BC0314(0x18u, a1, 8u);
  return sub_216BC2354(v11, a2, a3, a4, a5, a6);
}

uint64_t sub_216BC2354(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return sub_216BC2E9C(a1, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BC235C(uint64_t a1, char a2, char a3, int a4, _WORD *a5)
{
  _DWORD *v10;

  sub_216BC04F0(a5);
  v10 = (_DWORD *)sub_216BC0314(0x10u, a1, 8u);
  return sub_216BC23C0(v10, a2, a3, a4, (uint64_t)a5);
}

_DWORD *sub_216BC23C0(_DWORD *a1, char a2, char a3, int a4, uint64_t a5)
{
  return sub_216BC2F3C(a1, a2, a3, a4, a5);
}

uint64_t sub_216BC23C8(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  _QWORD v20[2];
  uint64_t v21;

  v20[1] = a6;
  v21 = a2;
  v20[0] = a5;
  v14 = sub_216BC0314(0x20u, a1, 8u);
  v15 = sub_216BC24A4(v14, a2, a3, a7);
  *(_DWORD *)(v15 + 4) = *(_DWORD *)(v15 + 4) & 0xFFFFE7FF | ((a4 & 3) << 11);
  sub_216BC24B0((_QWORD *)(v15 + 8), a1, a5, a6);
  if (sub_216B1E67C((uint64_t)v20))
  {
    v16 = sub_216B1E600((uint64_t)&v21);
    if (sub_216BD2FB4(v16))
    {
      v17 = (uint64_t *)sub_216B1E600((uint64_t)v20);
      v18 = sub_216BAAEAC(*v17);
      sub_216BC2500(v14, v18);
    }
  }
  return v14;
}

uint64_t sub_216BC24A4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_216BC2F74(a1, a2, a3, a4);
}

void *sub_216BC24B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BC36B0((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

uint64_t sub_216BC2500(uint64_t result, char a2)
{
  *(_WORD *)(result + 4) = *(_WORD *)(result + 4) & 0xF9FF | ((a2 & 3) << 9);
  return result;
}

_DWORD *sub_216BC2518(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v13;

  v13 = sub_216BC0314(0x28u, a1, 8u);
  return sub_216BC2580(v13, a2, a3, a6, a4, a5, a7);
}

_DWORD *sub_216BC2580(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  return sub_216BC2FC8(a1, a2, a3, a4, a5, a6, a7);
}

_DWORD *sub_216BC258C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _DWORD *v11;

  v11 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  return sub_216BC25EC(v11, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BC25EC(_DWORD *a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return sub_216BC3040(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216BC25F8(uint64_t a1, _WORD *a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  uint64_t v13;

  sub_216BC04F0(a2);
  v12 = sub_216BC0314(0x20u, a1, 8u);
  v13 = sub_216BC268C(v12, a2, a3, a6);
  sub_216BC2698((_QWORD *)(v13 + 8), a1, a4, a5);
  sub_216BC26E8(v12);
  return v12;
}

uint64_t sub_216BC268C(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  return sub_216BC3088(a1, a2, a3, a4);
}

void *sub_216BC2698(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BC36C8((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

uint64_t sub_216BC26E8(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  _DWORD **v4;
  uint64_t *v5;

  result = sub_216BA82B0(*(_QWORD *)(a1 + 16) + 16);
  if ((_DWORD)result)
  {
    v3 = 0;
    do
    {
      v4 = (_DWORD **)sub_216BA9B1C(*(_QWORD *)(a1 + 16) + 16, v3);
      if (sub_216BC276C(*v4))
      {
        v5 = (uint64_t *)sub_216BA9B1C(a1 + 8, v3);
        sub_216BC20B4(*v5);
      }
      ++v3;
      result = sub_216BA82B0(*(_QWORD *)(a1 + 16) + 16);
    }
    while (v3 < result);
  }
  return result;
}

BOOL sub_216BC276C(_DWORD *a1)
{
  return sub_216BA8234(a1) == 2 || sub_216BA8234(a1) == 3;
}

uint64_t sub_216BC27AC(uint64_t a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v16;
  uint64_t v17;

  v16 = sub_216BC0314(0x20u, a1, 8u);
  v17 = sub_216BC2848(v16, a2, a3, a4, a5, a8);
  sub_216BC2854((_QWORD *)(v17 + 8), a1, a6, a7);
  return v16;
}

uint64_t sub_216BC2848(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6)
{
  return sub_216BC30EC(a1, a2, a3, a4, a5, a6);
}

void *sub_216BC2854(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BC36E0((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

uint64_t sub_216BC28A4(uint64_t a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v16;
  uint64_t v17;

  v16 = sub_216BC0314(0x20u, a1, 8u);
  v17 = sub_216BC2940(v16, a2, a3, a4, a5, a8);
  sub_216BC294C((_QWORD *)(v17 + 8), a1, a6, a7);
  return v16;
}

uint64_t sub_216BC2940(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6)
{
  return sub_216BC314C(a1, a2, a3, a4, a5, a6);
}

void *sub_216BC294C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BC36F8((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

_DWORD *sub_216BC299C(uint64_t a1, int a2, char a3, uint64_t a4, int a5, char a6)
{
  char v7;
  char v11;
  _DWORD *v12;

  v7 = a5;
  v11 = a5 != 1;
  v12 = (_DWORD *)sub_216BC0314(0x10u, a1, 8u);
  return sub_216BC2A08(v12, a2, a3, a4, v7, v11, a6);
}

_DWORD *sub_216BC2A08(_DWORD *a1, int a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
  return sub_216BC31AC(a1, a2, a3, a4, a5, a6, a7);
}

_DWORD *sub_216BC2A10(uint64_t a1, int a2, char a3, uint64_t a4, char a5)
{
  _DWORD *v9;

  v9 = (_DWORD *)sub_216BC0314(0x10u, a1, 8u);
  return sub_216BC2A60(v9, a2, a3, a4, a5);
}

_DWORD *sub_216BC2A60(_DWORD *a1, int a2, char a3, uint64_t a4, char a5)
{
  return sub_216BC3208(a1, a2, a3, a4, a5);
}

uint64_t sub_216BC2A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216BC0314(0x10u, a1, 8u);
  return sub_216BC2AA0(v5, a2, a3);
}

uint64_t sub_216BC2AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216BC0314(0x18u, a1, 8u);
  return sub_216BC2ADC(v5, a2, a3);
}

_QWORD *sub_216BC2AE0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v14 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  v15 = sub_216B4A11C(a6);
  sub_216BC0500(&v18, a1, v15, v16);
  return sub_216BC2B84(v14, a2, a3, a4, a7, a5, v18);
}

_QWORD *sub_216BC2B84(_DWORD *a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7)
{
  return sub_216BC3708(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *sub_216BC2B8C(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v14 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  v15 = sub_216B4A11C(a6);
  sub_216BC0500(&v18, a1, v15, v16);
  return sub_216BC2C30(v14, a2, a3, a4, a7, a5, v18);
}

_QWORD *sub_216BC2C30(_DWORD *a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7)
{
  return sub_216BC374C(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *sub_216BC2C38(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v14 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  v15 = sub_216B4A11C(a6);
  sub_216BC0500(&v18, a1, v15, v16);
  return sub_216BC2CDC(v14, a2, a3, a4, a7, a5, v18);
}

_QWORD *sub_216BC2CDC(_DWORD *a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7)
{
  return sub_216BC3790(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_216BC2CE4(int a1)
{
  return byte_216C18C84[a1 - 97];
}

uint64_t sub_216BC2CF8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  char v12;

  v12 = sub_216BAAEAC(a3);
  sub_216BC2D88((_DWORD *)a1, 8, 0, v12, a2);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  sub_216BAAEAC(a3);
  *(_DWORD *)(a1 + 4) = ((a5 & 0xF) << 11) & 0x7FFF | ((a6 & 3) << 15) | *(_DWORD *)(a1 + 4) & 0xFFFE07FF;
  sub_216BC20B4(*(_QWORD *)(a1 + 8));
  return a1;
}

_DWORD *sub_216BC2D88(_DWORD *result, __int16 a2, char a3, char a4, int a5)
{
  *result = a5;
  result[1] = 0;
  *((_WORD *)result + 2) = a2 & 0xF8FF | ((a3 & 1) << 8) & 0xF9FF | ((a4 & 3) << 9);
  return result;
}

_DWORD *sub_216BC2D9C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  uint64_t v11;
  char v12;
  _DWORD *result;
  uint64_t v14;

  v14 = a5;
  v11 = sub_216B1E600((uint64_t)&v14);
  if (sub_216BD2FB4(v11))
    v12 = sub_216BAAEAC(a3);
  else
    v12 = 0;
  result = sub_216BC2D88((_DWORD *)a1, 6, 0, v12, a2);
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 4) & 0x7FF | (a6 << 11);
  return result;
}

_DWORD *sub_216BC2E34(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  _DWORD *result;

  v12 = sub_216BAAEAC(a4);
  result = sub_216BC2D88((_DWORD *)a1, 7, 0, v12, a3);
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  return result;
}

uint64_t sub_216BC2E9C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  char v12;
  __int16 v13;

  v12 = sub_216BAAEAC(a3);
  sub_216BC2D88((_DWORD *)a1, 5, 0, v12, a2);
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  if (a6)
    v13 = 0x4000;
  else
    v13 = 0;
  *(_WORD *)(a1 + 4) = v13 & 0xC7FF | ((a5 & 7) << 11) | *(_WORD *)(a1 + 4) & 0x87FF;
  if (a5 == 5 || a5 == 3)
    sub_216BC20B4(a3);
  return a1;
}

_DWORD *sub_216BC2F3C(_DWORD *a1, char a2, char a3, int a4, uint64_t a5)
{
  _DWORD *result;

  result = sub_216BC2D88(a1, 11, a2, a3, a4);
  *((_QWORD *)result + 1) = a5;
  return result;
}

uint64_t sub_216BC2F74(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _DWORD *v7;

  v7 = sub_216BC2D88((_DWORD *)a1, 12, 0, 0, a3);
  sub_216B3A258(v7 + 2);
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  return a1;
}

_DWORD *sub_216BC2FC8(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  char v14;
  _DWORD *result;

  v14 = sub_216BAAEAC(a5);
  result = sub_216BC2D88((_DWORD *)a1, 16, a2, v14, a4);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 32) = a7;
  return result;
}

_DWORD *sub_216BC3040(_DWORD *a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _DWORD *result;

  result = sub_216BC2D88(a1, 17, a2, 0, a5);
  *((_QWORD *)result + 1) = a3;
  *((_QWORD *)result + 2) = a4;
  result[6] = a6;
  return result;
}

uint64_t sub_216BC3088(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  char v8;

  v8 = sub_216BA824C(a2);
  sub_216BC2D88((_DWORD *)a1, 20, 0, v8, a3);
  sub_216B3A258(a1 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  return a1;
}

uint64_t sub_216BC30EC(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6)
{
  _DWORD *v10;

  v10 = sub_216BC2D88((_DWORD *)a1, 19, 0, a4, a5);
  sub_216B3A258(v10 + 2);
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFC07FF | ((a2 & 0x7F) << 11);
  return a1;
}

uint64_t sub_216BC314C(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6)
{
  _DWORD *v10;

  v10 = sub_216BC2D88((_DWORD *)a1, 18, 0, a4, a5);
  sub_216B3A258(v10 + 2);
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFF07FF | ((a2 & 0x1F) << 11);
  return a1;
}

_DWORD *sub_216BC31AC(_DWORD *a1, int a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
  _DWORD *result;

  result = sub_216BC2D88(a1, 9, a6, a7, a2);
  *((_QWORD *)result + 1) = a4;
  result[1] = ((a3 & 0x1F) << 11) | ((a5 & 3) << 16) | result[1] & 0xFFFC07FF;
  return result;
}

_DWORD *sub_216BC3208(_DWORD *a1, int a2, char a3, uint64_t a4, char a5)
{
  _DWORD *result;

  result = sub_216BC2D88(a1, 10, 0, a5, a2);
  *((_QWORD *)result + 1) = a4;
  result[1] = result[1] & 0xFFFE07FF | ((a3 & 0x3F) << 11);
  return result;
}

uint64_t sub_216BC3250(uint64_t a1, char a2, unsigned int *a3)
{
  char v6;
  int v7;

  v6 = sub_216BAAF68((uint64_t)a3);
  v7 = sub_216B1E4E0(a3);
  sub_216BC2D88((_DWORD *)a1, 21, v6, a2, v7);
  *(_QWORD *)(a1 + 8) = a3;
  return a1;
}

uint64_t sub_216BC32B0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  char v6;
  char v7;
  int v8;

  v6 = sub_216BAAF68((uint64_t)a3);
  v7 = sub_216BAAEAC((uint64_t)a3);
  v8 = sub_216B1E4E0(a3);
  sub_216BC2D88((_DWORD *)a1, 22, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

uint64_t sub_216BC3324(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return sub_216BC3348(a1, &v3);
}

uint64_t sub_216BC3350(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BC3378();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BC337C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &off_24D605340;
  sub_216BC33C8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BC33D0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_122();
  j__free(v0);
}

uint64_t sub_216BC33E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BC3378(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BC3458(uint64_t a1, uint64_t a2)
{
  return sub_216BC3378(a2, a1 + 8);
}

uint64_t sub_216BC346C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BC3474(uint64_t a1)
{
  return sub_216BC3504(a1 + 8);
}

uint64_t sub_216BC347C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B514B8(a2);
  sub_216BAA6B8(a3);
  return sub_216BC34C0(a1, v5);
}

_DWORD *sub_216BC34C8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  *a1 = *(_DWORD *)sub_216B262E0((uint64_t)&v4);
  return a1;
}

unint64_t sub_216BC350C(_DWORD *a1, uint64_t *a2)
{
  return sub_216BC3514(a1, *a2);
}

unint64_t sub_216BC3514(_DWORD *a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (sub_216BAAEAC(a2))
    return 0;
  v6 = sub_216BAB358(a2);
  v5 = sub_216B1E600((uint64_t)&v6);
  result = sub_216BD2FB4(v5);
  if ((_DWORD)result)
  {
    sub_216BC2500(a2, *a1);
    return 1;
  }
  return result;
}

uint64_t sub_216BC3580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BC35A8(&v3);
}

uint64_t sub_216BC35A8(_QWORD *a1)
{
  return sub_216BC35B0(*a1);
}

BOOL sub_216BC35B8(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 16;
}

uint64_t sub_216BC35D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BC3600(&v3);
}

uint64_t sub_216BC3600(_QWORD *a1)
{
  return sub_216BC3608(*a1);
}

BOOL sub_216BC3610(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 13;
}

uint64_t sub_216BC3630(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BC3658(&v3);
}

uint64_t sub_216BC3658(_QWORD *a1)
{
  return sub_216BC3660(*a1);
}

BOOL sub_216BC3668(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 15;
}

uint64_t sub_216BC3688(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA98C8(&v3);
}

uint64_t sub_216BC36B0(uint64_t a1, int a2)
{
  return sub_216BC36B8(a1 - 8, a2);
}

uint64_t sub_216BC36B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = *(_DWORD *)(result + 4) & 0x1FFF | (a2 << 13);
  return result;
}

uint64_t sub_216BC36C8(uint64_t a1, int a2)
{
  return sub_216BC36D0(a1 - 8, a2);
}

uint64_t sub_216BC36D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = *(_DWORD *)(result + 4) & 0x7FF | (a2 << 11);
  return result;
}

uint64_t sub_216BC36E0(uint64_t a1, unsigned __int16 a2)
{
  return sub_216BC36E8(a1 - 8, a2);
}

uint64_t sub_216BC36E8(uint64_t result, unsigned __int16 a2)
{
  *(_DWORD *)(result + 4) = *(_DWORD *)(result + 4) & 0x3FFFF | (a2 << 18);
  return result;
}

uint64_t sub_216BC36F8(uint64_t a1, __int16 a2)
{
  return sub_216BC3700(a1 - 8, a2);
}

uint64_t sub_216BC3700(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 6) = a2;
  return result;
}

_QWORD *sub_216BC3708(_DWORD *a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;

  result = sub_216BC2D88(a1, 13, a2, a4, a5);
  result[1] = a3;
  result[2] = a6;
  result[3] = a7;
  return result;
}

_QWORD *sub_216BC374C(_DWORD *a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;

  result = sub_216BC2D88(a1, 14, a2, a4, a5);
  result[1] = a3;
  result[2] = a6;
  result[3] = a7;
  return result;
}

_QWORD *sub_216BC3790(_DWORD *a1, char a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;

  result = sub_216BC2D88(a1, 15, a2, a4, a5);
  result[1] = a3;
  result[2] = a6;
  result[3] = a7;
  return result;
}

uint64_t sub_216BC37D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[75];

  v4 = sub_216BA5ADC(a1);
  sub_216BC38CC((uint64_t)v19, a2, v4);
  v19[71] = sub_216BC38D0(a1);
  v19[72] = v5;
  sub_216BC38F8(v19);
  sub_216BC399C(v19);
  v17 = sub_216BA5AE4(a1);
  v18 = v6;
  v7 = (uint64_t *)sub_216B1E600((uint64_t)&v17);
  v8 = sub_216B35430(&v17);
  if (v7 != (uint64_t *)v8)
  {
    v9 = (uint64_t *)v8;
    do
    {
      v10 = *v7++;
      sub_216BC3AD0(v19, v10, 1);
    }
    while (v7 != v9);
  }
  v17 = sub_216BA5BE0(a1);
  v18 = v11;
  v12 = (uint64_t *)sub_216B1E600((uint64_t)&v17);
  v13 = sub_216B35430(&v17);
  if (v12 != (uint64_t *)v13)
  {
    v14 = (uint64_t *)v13;
    do
    {
      v15 = *v12++;
      sub_216BC3AD0(v19, v15, 1);
    }
    while (v12 != v14);
  }
  return sub_216BC3BA4((uint64_t)v19);
}

uint64_t sub_216BC38D0(uint64_t a1)
{
  uint64_t v2;

  sub_216BA9C20(&v2, a1 + 48);
  return v2;
}

void **sub_216BC38F8(uint64_t *a1)
{
  uint64_t *v2;
  void **result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "precision highp float;\n\n");
  v2 = (uint64_t *)sub_216B1E600((uint64_t)(a1 + 71));
  result = (void **)sub_216B35430(a1 + 71);
  if (v2 != (uint64_t *)result)
  {
    v4 = (uint64_t *)result;
    while (1)
    {
      v6 = sub_216B2037C(*v2);
      v5 = sub_216B1E600((uint64_t)&v6);
      result = (void **)sub_216BA7EB0(v5);
      if (result)
      {
        result = (void **)sub_216BA7EC0((uint64_t)result);
        if (!(_DWORD)result)
          break;
      }
      if (++v2 == v4)
        return result;
    }
    return sub_216B248A0(*a1, "#define sample(s,p) texture2D(_samplers[s], p)\n#define samplerTransform(s,p) (vec3(p, 1.0) * _transforms[s]).xy\n#define samplerExtent(s) _extents[s]\n\n");
  }
  return result;
}

void **sub_216BC399C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  void **result;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  char *v15;
  void **v16;
  uint64_t v17;

  v2 = a1 + 71;
  v3 = (uint64_t *)sub_216B1E600((uint64_t)(a1 + 71));
  result = (void **)sub_216B35430(v2);
  if (v3 != (uint64_t *)result)
  {
    v5 = (uint64_t *)result;
    v6 = 0;
    do
    {
      v17 = sub_216B2037C(*v3);
      v7 = sub_216B1E600((uint64_t)&v17);
      result = (void **)sub_216BA7EB0(v7);
      if (result)
      {
        result = (void **)sub_216BA7EC0((uint64_t)result);
        if (!(_DWORD)result)
          ++v6;
      }
      ++v3;
    }
    while (v3 != v5);
    if (v6)
    {
      v8 = sub_216B248A0(*a1, "uniform highp sampler2D _samplers [");
      v9 = sub_216B3FF24(v8, v6);
      v10 = sub_216B248A0((uint64_t)v9, "];\nuniform highp mat3 _transforms [");
      v11 = sub_216B3FF24(v10, v6);
      v12 = sub_216B248A0((uint64_t)v11, "];\nuniform highp vec4 _extents [");
      v13 = sub_216B3FF24(v12, v6);
      sub_216B248A0((uint64_t)v13, "];\n\n");
      if (sub_216BC41F8(a1[74]))
        sub_216B248A0(*a1, "vec4 _sampler_srgb_to_linear (vec4 s) {\n  s.rgb = sign(s.rgb) * mix(abs(s.rgb) * 0.077399380804954, pow(abs(s.rgb) * 0.947867298578199 + 0.052132701421801, vec3(2.4)), step(0.04045, abs(s.rgb)));\n"
          "  return s;\n"
          "}\n"
          "\n");
      result = (void **)sub_216BC4200(a1[74]);
      if (result)
      {
        v14 = sub_216B248A0(*a1, "vec4 _sampler_swizzle(vec4 s) {\n  return ");
        v15 = (char *)sub_216BC4200(a1[74]);
        v16 = sub_216B248A0((uint64_t)v14, v15);
        return sub_216B248A0((uint64_t)v16, ";\n}\n\n");
      }
    }
  }
  return result;
}

uint64_t sub_216BC3AD0(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;
  _QWORD v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  sub_216B85C18(v13);
  v6 = (uint64_t *)sub_216BA9C60(a2);
  v7 = sub_216BA9C64(a2);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    do
    {
      v9 = *v6++;
      v12 = v9;
      sub_216B268AC((uint64_t)v13, &v12);
    }
    while (v6 != v8);
  }
  if (!sub_216B29084(v13))
  {
    sub_216B2D798(v11, v13);
    sub_216BC3E4C(a1, v11[0], v11[1], a3);
  }
  return sub_216B1FF6C(v13);
}

uint64_t sub_216BC3BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t j;
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[75];
  _BYTE v28[56];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216BA5ADC(a1);
  sub_216BC38CC((uint64_t)v27, a2, v4);
  v5 = sub_216BA5E2C(a1);
  v27[74] = sub_216BA9D08(a1);
  v27[71] = sub_216BC38D0(a1);
  v27[72] = v6;
  sub_216BC38F8(v27);
  sub_216BC399C(v27);
  v25 = sub_216BA5AE4(a1);
  v26 = v7;
  v8 = (uint64_t *)sub_216B1E600((uint64_t)&v25);
  v9 = sub_216B35430(&v25);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = *v8;
      sub_216B2D768(v28);
      v12 = (uint64_t *)sub_216BA5E50(v11);
      for (i = sub_216BA5E54(v11); v12 != (uint64_t *)i; ++v12)
      {
        v24 = 0;
        v24 = *v12;
        if ((sub_216BC3E08(v24) & 1) != 0 || sub_216BA5ED4(v5, v24))
          sub_216B268AC((uint64_t)v28, &v24);
      }
      if (sub_216B26878((uint64_t)v28))
      {
        sub_216B2D798(v23, v28);
        sub_216BC3E4C(v27, v23[0], v23[1], 1);
      }
      sub_216B1FF6C(v28);
      ++v8;
    }
    while (v8 != v10);
  }
  v25 = sub_216BA5BE0(a1);
  v26 = v14;
  v15 = (uint64_t *)sub_216B1E600((uint64_t)&v25);
  v16 = sub_216B35430(&v25);
  if (v15 != (uint64_t *)v16)
  {
    v17 = (uint64_t *)v16;
    do
    {
      v18 = *v15;
      sub_216B2D768(v28);
      v19 = (uint64_t *)sub_216BA5E50(v18);
      for (j = sub_216BA5E54(v18); v19 != (uint64_t *)j; ++v19)
      {
        v24 = 0;
        v24 = *v19;
        if ((sub_216BC3E08(v24) & 1) != 0 || sub_216BA5ED4(v5, v24))
          sub_216B268AC((uint64_t)v28, &v24);
      }
      if (sub_216B26878((uint64_t)v28))
      {
        sub_216B2D798(v22, v28);
        sub_216BC3E4C(v27, v22[0], v22[1], 1);
      }
      sub_216B1FF6C(v28);
      ++v15;
    }
    while (v15 != v17);
  }
  return sub_216BC3BA4((uint64_t)v27);
}

uint64_t sub_216BC3E08(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if ((sub_216BA9E30(&v2) & 1) != 0 || (sub_216BA9E34(&v2) & 1) != 0)
    return 1;
  else
    return sub_216BA9E38(&v2);
}

void sub_216BC3E4C(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 **v40;
  uint64_t v41;
  unsigned __int8 **v42;
  unsigned __int8 *v43;
  _QWORD v44[2];
  uint64_t v45[2];
  _DWORD *v46;
  _QWORD v47[3];
  char v48;
  _QWORD v49[2];

  v49[0] = a2;
  v49[1] = a3;
  v48 = a4;
  v47[0] = v49;
  v47[1] = a1;
  v47[2] = &v48;
  v5 = sub_216B1E67C((uint64_t)v49);
  v6 = sub_216B1E600((uint64_t)v49);
  v7 = sub_216BAA0D0(v6);
  if (v5 == 1)
  {
    if (!v7
      || (v8 = (unsigned __int8 **)sub_216B1E600((uint64_t)v49),
          v45[0] = sub_216BAB580(*v8),
          v9 = sub_216B1E600((uint64_t)v45),
          (v10 = sub_216BA7EB0(v9)) == 0)
      || sub_216BA7EC0(v10))
    {
      v11 = (unsigned __int8 **)sub_216B1E600((uint64_t)v49);
      sub_216BC4234(a1, *v11);
LABEL_6:
      sub_216BAA054((uint64_t)v47);
    }
  }
  else
  {
    if (!v7)
    {
      v28 = sub_216B1E600((uint64_t)v49);
      if (sub_216BAA0D4(v28))
      {
        sub_216B248A0(*a1, "invariant");
        v29 = (uint64_t *)sub_216B1E600((uint64_t)v49);
        v30 = sub_216B35430(v49);
        if (v29 != (uint64_t *)v30)
        {
          v31 = (uint64_t *)v30;
          v32 = 1;
          do
          {
            v33 = *v29;
            if ((v32 & 1) == 0)
              sub_216B248A0(*a1, ",");
            sub_216B248A0(*a1, " ");
            v34 = (unsigned __int16 *)sub_216B3DB48(v33);
            if (sub_216B2037C((uint64_t)v34))
            {
              v35 = *a1;
              v36 = sub_216B2037C((uint64_t)v34);
              v37 = sub_216BA6A7C(v36);
              sub_216B248E0(v35, v37, v38);
            }
            else
            {
              v39 = sub_216BA83A4(v34);
              sub_216BA8384(a1, v39);
            }
            v32 = 0;
            ++v29;
          }
          while (v29 != v31);
        }
      }
      else
      {
        v40 = (unsigned __int8 **)sub_216B1E600((uint64_t)v49);
        v41 = sub_216B35430(v49);
        if (v40 != (unsigned __int8 **)v41)
        {
          v42 = (unsigned __int8 **)v41;
          do
          {
            v43 = *v40++;
            sub_216BC4234(a1, v43);
          }
          while (v40 != v42);
        }
      }
      goto LABEL_6;
    }
    v12 = (uint64_t *)sub_216B1E600((uint64_t)v49);
    v13 = sub_216B35430(v49);
    if (v12 != (uint64_t *)v13)
    {
      v14 = (uint64_t *)v13;
      v15 = 1;
      while (1)
      {
        v16 = *v12;
        v46 = 0;
        v46 = (_DWORD *)sub_216B3DB48(v16);
        v45[0] = sub_216B2037C((uint64_t)v46);
        v17 = sub_216B1E600((uint64_t)v45);
        v18 = sub_216BA7EB0(v17);
        if (v18)
        {
          if (!sub_216BA7EC0(v18))
            break;
        }
        v19 = a1[2];
        if (v19
          && (v45[0] = sub_216BA68EC(v19, (uint64_t *)&v46),
              v45[1] = v20,
              v44[0] = sub_216BA6950(a1[2]),
              v44[1] = v21,
              sub_216B50AF4(v45, (uint64_t)v44)))
        {
          v22 = v46;
          v23 = sub_216B1E600((uint64_t)v45);
          sub_216BC424C(a1, (uint64_t)v22, *(float **)(v23 + 8));
          sub_216BAA054((uint64_t)v47);
        }
        else
        {
          if ((v15 & 1) != 0)
          {
            sub_216BC432C(a1, v46);
            sub_216BC447C(a1, (uint64_t)v46);
          }
          else
          {
            sub_216B248A0(*a1, ",");
          }
          v24 = sub_216B248A0(*a1, " ");
          v25 = sub_216BA6A7C((uint64_t)v46);
          sub_216B248E0((uint64_t)v24, v25, v26);
          sub_216BA6CA4(a1, (uint64_t)v46);
          if (sub_216B5EE7C((uint64_t)v46))
          {
            sub_216B248A0(*a1, " = ");
            v27 = sub_216B5EE7C((uint64_t)v46);
            sub_216BC454C(a1, v27);
          }
          v15 = 0;
        }
        if (++v12 == v14)
        {
          if ((v15 & 1) == 0)
            goto LABEL_6;
          return;
        }
      }
    }
  }
}

uint64_t sub_216BC4194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = a3;
  sub_216BC41E4(a1 + 24);
  sub_216B26D14((_QWORD *)(a1 + 568));
  *(_OWORD *)(a1 + 584) = 0u;
  return a1;
}

uint64_t sub_216BC41EC(uint64_t a1)
{
  return sub_216B9CD70(a1, a1 + 32, 64);
}

uint64_t sub_216BC41F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t sub_216BC4200(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

uint64_t sub_216BC4208(uint64_t a1)
{
  sub_216BC4230(a1 + 24);
  return a1;
}

void sub_216BC4234(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    sub_216BC4564((uint64_t)a1, a2);
  else
    sub_216B248A0(*a1, " /* <none> */ ");
}

void **sub_216BC424C(uint64_t *a1, uint64_t a2, float *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_216B5E12C(a2);
  v7 = *a1;
  if (v6)
  {
    v8 = sub_216BA6A7C(a2);
    v10 = sub_216B248E0(v7, v8, v9);
  }
  else
  {
    sub_216B248A0(*a1, "const ");
    sub_216BC447C(a1, a2);
    v11 = sub_216B248A0(*a1, " ");
    v12 = sub_216BA6A7C(a2);
    sub_216B248E0((uint64_t)v11, v12, v13);
    sub_216BA6CA4(a1, a2);
    v10 = (void **)*a1;
  }
  sub_216B248A0((uint64_t)v10, " = ");
  v14 = sub_216B2037C(a2);
  return sub_216BA6ED4(a3, v14, (void **)*a1);
}

uint64_t *sub_216BC432C(uint64_t *a1, _DWORD *a2)
{
  int v4;
  int v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t *result;
  int v10;

  v4 = sub_216B387B8((uint64_t)a2);
  sub_216BC4FE8(a1, v4);
  if (sub_216BA75CC((uint64_t)a2) && (sub_216BA75D8((uint64_t)a2) & 1) == 0)
    sub_216B248A0(*a1, "invariant ");
  v5 = sub_216BA75E4(a2);
  if (v5 == 1)
  {
    v6 = "smooth ";
    goto LABEL_8;
  }
  if (v5 == 2)
  {
    v6 = "flat ";
LABEL_8:
    sub_216B248A0(*a1, v6);
  }
  v7 = sub_216BA75F0(a2);
  v8 = "in ";
  switch(v7)
  {
    case 1:
      v8 = "attribute ";
      goto LABEL_18;
    case 2:
      if ((sub_216B5E0FC((uint64_t)a2) & 1) != 0)
        goto LABEL_19;
      v8 = "const ";
LABEL_18:
      sub_216B248A0(*a1, v8);
LABEL_19:
      result = (uint64_t *)sub_216B5E120((uint64_t)a2);
      if ((_DWORD)result)
      {
        v10 = sub_216BA7620(a2);
        return sub_216BC4C38(a1, v10);
      }
      return result;
    case 3:
      goto LABEL_18;
    case 4:
      v8 = "out ";
      goto LABEL_18;
    case 5:
      v8 = "centroid in ";
      goto LABEL_18;
    case 6:
      v8 = "centroid out ";
      goto LABEL_18;
    case 7:
      v8 = "uniform ";
      goto LABEL_18;
    case 8:
      v8 = "varying ";
      goto LABEL_18;
    default:
      goto LABEL_19;
  }
}

uint64_t sub_216BC447C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v13 = sub_216B2037C(a2);
  v4 = sub_216B1E600((uint64_t)&v13);
  v5 = sub_216BA76B8(v4);
  if (v5)
  {
    v6 = sub_216B1E67C(v5);
    sub_216BC59B4(a1, v6, a2);
  }
  else
  {
    v13 = sub_216B2037C(a2);
    v7 = sub_216B1E600((uint64_t)&v13);
    v8 = sub_216BA771C(v7);
    if (v8)
    {
      v9 = (_DWORD *)sub_216B1E67C(v8);
      sub_216BC4EEC((uint64_t)a1, v9);
    }
    else
    {
      v10 = sub_216B2037C(a2);
      sub_216BC4C5C(a1, v10);
    }
  }
  LODWORD(v13) = 0;
  v11 = sub_216B2037C(a2);
  result = sub_216BA7ABC(v11, &v13);
  if ((_DWORD)result)
  {
    result = sub_216BA7B18(a2);
    if ((result & 1) == 0)
      return (uint64_t)sub_216BA7B24(a1, v13);
  }
  return result;
}

void sub_216BC454C(uint64_t *a1, uint64_t a2)
{
  if (a2)
    sub_216BC5A14(a1, a2);
  else
    sub_216B248A0(*a1, " /* <none> */ ");
}

void sub_216BC4564(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;

  v2 = (char *)sub_216BC459C + 4 * byte_216C18CA6[sub_216B8B400(a2)];
  __asm { BR              X10 }
}

void sub_216BC459C()
{
  _DWORD *v0;
  uint64_t *v1;

  sub_216BC4678(v1, v0);
}

uint64_t sub_216BC45B0()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BC47B0(v1, v0);
}

uint64_t sub_216BC45C4()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BC48D8(v1, v0);
}

uint64_t sub_216BC45D8()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BA66F8)(v1, v0);
}

void **sub_216BC45EC()
{
  uint64_t v0;
  uint64_t *v1;

  return sub_216BC4B40(v1, v0);
}

void **sub_216BC4600()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BC4B7C(v1, v0);
}

void **sub_216BC4614()
{
  unsigned __int16 *v0;
  uint64_t *v1;

  return sub_216BA67A0(v1, v0);
}

void **sub_216BC4628()
{
  unsigned __int16 *v0;
  uint64_t *v1;

  return sub_216BA681C(v1, v0);
}

uint64_t sub_216BC463C()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BC4BE4)(v1, v0);
}

uint64_t sub_216BC4650()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BC4BE8)(v1, v0);
}

void **sub_216BC4664()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BA6860(v1, v0);
}

void sub_216BC4678(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16[2];
  _DWORD *v17;

  v17 = a2;
  v3 = a1[2];
  if (v3)
  {
    v16[0] = sub_216BA68EC(v3, (uint64_t *)&v17);
    v16[1] = v4;
    v15[0] = sub_216BA6950(a1[2]);
    v15[1] = v5;
    if (sub_216B50AF4(v16, (uint64_t)v15))
    {
      v6 = v17;
      v7 = sub_216B1E600((uint64_t)v16);
      sub_216BC424C(a1, (uint64_t)v6, *(float **)(v7 + 8));
      return;
    }
    a2 = v17;
  }
  if (sub_216B5E12C((uint64_t)a2))
  {
    v8 = *a1;
    v9 = sub_216BA6A7C((uint64_t)v17);
    sub_216B248E0(v8, v9, v10);
  }
  else
  {
    sub_216BC432C(a1, v17);
    sub_216BC447C(a1, (uint64_t)v17);
    v11 = sub_216B248A0(*a1, " ");
    v12 = sub_216BA6A7C((uint64_t)v17);
    sub_216B248E0((uint64_t)v11, v12, v13);
    sub_216BA6CA4(a1, (uint64_t)v17);
  }
  if (sub_216B5EE7C((uint64_t)v17))
  {
    sub_216B248A0(*a1, " = ");
    v14 = sub_216B5EE7C((uint64_t)v17);
    sub_216BC454C(a1, v14);
  }
}

uint64_t sub_216BC47B0(uint64_t *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  if (sub_216BA81D0((uint64_t)a2))
    sub_216B248A0(*a1, "const ");
  sub_216BC4BEC(a1, a2);
  if (sub_216BA75CC((uint64_t)a2))
  {
    v4 = sub_216BA8228(a2);
    sub_216BC4C38(a1, v4);
  }
  v11 = -1;
  v5 = sub_216B2037C((uint64_t)a2);
  sub_216BC4C5C(a1, v5);
  v6 = sub_216B2037C((uint64_t)a2);
  if (sub_216BA7ABC(v6, &v11) && (sub_216BA7B18((uint64_t)a2) & 1) == 0)
    sub_216BA7B24(a1, v11);
  result = sub_216BA7D08((uint64_t)a2);
  if ((_DWORD)result)
  {
    v8 = sub_216B248A0(*a1, " ");
    v9 = sub_216BA6A7C((uint64_t)a2);
    sub_216B248E0((uint64_t)v8, v9, v10);
    result = sub_216BA7B18((uint64_t)a2);
    if ((_DWORD)result)
      return (uint64_t)sub_216BA7B24(a1, v11);
  }
  return result;
}

uint64_t sub_216BC48D8(uint64_t *a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _QWORD v24[2];
  _QWORD *v25[2];
  const void *v26[2];

  a1[73] = (uint64_t)a2;
  if (sub_216BA9DD0((uint64_t)a2))
    return (uint64_t)sub_216BC50F8(a1, (uint64_t)a2);
  v5 = sub_216BA6A7C((uint64_t)a2);
  v7 = v6;
  sub_216B1E678((int)v26, "destCoord");
  result = sub_216B274F0(v5, v7, v26[0], (size_t)v26[1]);
  if ((result & 1) == 0)
  {
    if (sub_216BC5200((uint64_t)a2)
      && (v25[0] = (_QWORD *)sub_216B938A4((uint64_t)(a1 + 3)),
          v25[1] = v8,
          v24[0] = sub_216B938D4((uint64_t)(a1 + 3)),
          v24[1] = v9,
          sub_216B3760C(v25, v24)))
    {
      while (1)
      {
        v11 = sub_216BC520C(v25, v10);
        result = sub_216BC0B28((uint64_t)a2, v11);
        if ((result & 1) != 0)
          break;
        sub_216B93914(v25);
        if (!sub_216B3760C(v25, v24))
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      if (sub_216BA8240((uint64_t)a2))
      {
        v12 = sub_216BA824C(a2);
        sub_216BC4C38(a1, v12);
      }
      v13 = sub_216B939E0((uint64_t)a2);
      sub_216BC4C5C(a1, v13);
      LODWORD(v25[0]) = 0;
      v14 = sub_216B939E0((uint64_t)a2);
      if (sub_216BA7ABC(v14, v25))
        sub_216BA7B24(a1, v25[0]);
      v15 = sub_216B248A0(*a1, " ");
      v16 = sub_216BA6A7C((uint64_t)a2);
      v18 = sub_216B248E0((uint64_t)v15, v16, v17);
      sub_216B248A0((uint64_t)v18, "(");
      v19 = (unsigned __int8 **)sub_216B262E0((uint64_t)(a2 + 4));
      v20 = sub_216BA8258((uint64_t)(a2 + 4));
      if (v19 != (unsigned __int8 **)v20)
      {
        v21 = (unsigned __int8 **)v20;
        v22 = v20 - (_QWORD)v19;
        do
        {
          sub_216BC4234(a1, *v19);
          if (v22 >= 9)
            sub_216B248A0(*a1, ", ");
          ++v19;
          v22 -= 8;
        }
        while (v19 != v21);
      }
      sub_216B248A0(*a1, ")");
      if (sub_216BA8288((uint64_t)a2))
      {
        sub_216B248A0(*a1, " ");
        v23 = (unsigned __int8 *)sub_216BA8288((uint64_t)a2);
        sub_216BC5218(a1, v23);
        sub_216B248A0(*a1, "\n");
      }
      else
      {
        sub_216BA8290(a1, 0);
      }
      return sub_216B5F890((uint64_t)(a1 + 3), (uint64_t)a2);
    }
  }
  return result;
}

void **sub_216BC4B40(uint64_t *a1, uint64_t a2)
{
  int v3;

  v3 = sub_216B4CBC4(a2);
  sub_216BC4FE8(a1, v3);
  return sub_216B248A0(*a1, "uniform");
}

void **sub_216BC4B7C(uint64_t *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  sub_216B248A0(*a1, "precision ");
  v4 = sub_216BA836C(a2);
  sub_216BC4C38(a1, v4);
  v5 = *a1;
  v6 = sub_216BA8378(a2);
  v7 = sub_216BD3800(v6);
  return sub_216B248E0(v5, v7, v8);
}

void **sub_216BC4BEC(uint64_t *a1, _DWORD *a2)
{
  void **result;

  result = (void **)sub_216BA8234(a2);
  if (((_DWORD)result - 1) <= 2)
    return sub_216B248A0(*a1, off_24D605378[(int)result - 1]);
  return result;
}

uint64_t *sub_216BC4C38(uint64_t *result, int a2)
{
  if ((a2 - 1) <= 2)
    return (uint64_t *)sub_216B248A0(*result, off_24D605390[a2 - 1]);
  return result;
}

void **sub_216BC4C5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void **result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  if (!sub_216B1E600((uint64_t)&v38))
  {
    v9 = *a1;
    v8 = " /* <> */ ";
    return sub_216B248A0(v9, v8);
  }
  v3 = sub_216B1E600((uint64_t)&v38);
  v4 = sub_216BA7220(v3);
  if (v4)
  {
    v5 = v4;
    v6 = sub_216BA7EA4(v4);
    v7 = *a1;
    if (v6 == 4)
    {
      v8 = "float";
      v9 = v7;
      return sub_216B248A0(v9, v8);
    }
    v15 = v5;
    goto LABEL_10;
  }
  v11 = sub_216B1E600((uint64_t)&v38);
  v12 = sub_216BA72BC(v11);
  if (v12)
  {
    v13 = sub_216B1E67C(v12);
    v14 = (char *)&loc_216BC4D0C + 4 * byte_216C18CB1[sub_216BA7EA4(v13) - 3];
    __asm { BR              X10 }
  }
  v18 = sub_216B1E600((uint64_t)&v38);
  v19 = sub_216BA710C(v18);
  if (v19)
  {
    v20 = v19;
    v21 = sub_216BA7418(v19);
    LODWORD(v20) = sub_216BA734C(v20);
    v22 = sub_216B248A0(*a1, "mat");
    result = sub_216B248D8(v22, v20);
    if (v21 != (_DWORD)v20)
    {
      v23 = sub_216B248A0(*a1, "x");
      return sub_216B248D8(v23, v21);
    }
  }
  else
  {
    v24 = sub_216B1E600((uint64_t)&v38);
    v25 = sub_216BA7EB0(v24);
    if (!v25)
    {
      v26 = sub_216B1E600((uint64_t)&v38);
      if (sub_216BA7ECC(v26))
      {
        v9 = *a1;
        v8 = "void";
        return sub_216B248A0(v9, v8);
      }
      v27 = sub_216B1E600((uint64_t)&v38);
      v15 = sub_216BA7ED0(v27);
      if (v15)
      {
        v7 = *a1;
LABEL_10:
        v16 = sub_216BD37EC(v15);
        return sub_216B248E0(v7, v16, v17);
      }
      v28 = sub_216B1E600((uint64_t)&v38);
      v29 = sub_216BA7ED4(v28);
      if (v29)
      {
        v30 = sub_216B1E67C(v29);
      }
      else
      {
        v31 = sub_216B1E600((uint64_t)&v38);
        v32 = sub_216BA76B8(v31);
        if (v32)
        {
          v7 = *a1;
          v16 = sub_216BD3048(v32);
          return sub_216B248E0(v7, v16, v17);
        }
        v33 = sub_216B1E600((uint64_t)&v38);
        v34 = sub_216BA771C(v33);
        if (v34)
        {
          v35 = (_DWORD *)sub_216B1E67C(v34);
          return sub_216BC4EEC((uint64_t)a1, v35);
        }
        v36 = sub_216B1E600((uint64_t)&v38);
        v37 = sub_216BA7ED8(v36);
        if (!v37)
        {
          v9 = *a1;
          v8 = " /* <unknown> */ ";
          return sub_216B248A0(v9, v8);
        }
        v30 = sub_216B2037C(v37);
      }
      return (void **)sub_216BC4C5C(a1, v30);
    }
    result = (void **)sub_216BA7EC0(v25);
    if ((_DWORD)result == 1)
    {
      v9 = *a1;
      v8 = "sampler2D";
      return sub_216B248A0(v9, v8);
    }
    if (!(_DWORD)result)
    {
      v9 = *a1;
      v8 = "int";
      return sub_216B248A0(v9, v8);
    }
  }
  return result;
}

void **sub_216BC4EEC(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = sub_216B34190((uint64_t)a2);
  sub_216BC4FE8((uint64_t *)a1, v4);
  sub_216BA7E50(a2);
  sub_216B248A0(*(_QWORD *)a1, "uniform ");
  v5 = *(_QWORD *)a1;
  v6 = sub_216BA6A7C((uint64_t)a2);
  sub_216B248E0(v5, v6, v7);
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v8 = (uint64_t)(a2 + 4);
  v9 = (uint64_t *)sub_216B262E0((uint64_t)(a2 + 4));
  v10 = sub_216BA7E5C(v8);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    do
    {
      v12 = *v9++;
      sub_216BA7D54((void **)a1);
      sub_216BC3AD0(a1, v12, 1);
    }
    while (v9 != v11);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

void **sub_216BC4FE8(uint64_t *a1, int a2)
{
  void **result;
  char v4;
  void **v5;
  unsigned int v6;
  char v7;
  int v8;

  v8 = a2;
  if (sub_216BA762C((unsigned __int16 *)&v8)
    || (result = (void **)sub_216BA7644((unsigned __int16 *)&v8), (_DWORD)result))
  {
    sub_216B248A0(*a1, "layout(");
    if (sub_216BA762C((unsigned __int16 *)&v8))
    {
      if (sub_216BA7650((unsigned __int16 *)&v8))
      {
        v4 = sub_216BA7674((unsigned __int16 *)&v8);
        sub_216BC50E0(a1, v4);
        if (sub_216BA7680((unsigned __int16 *)&v8))
        {
          sub_216B248A0(*a1, ", ");
LABEL_9:
          v7 = sub_216BA768C((unsigned __int16 *)&v8);
          sub_216BC50E0(a1, v7);
        }
      }
      else if (sub_216BA7680((unsigned __int16 *)&v8))
      {
        goto LABEL_9;
      }
    }
    else
    {
      v5 = sub_216B248A0(*a1, "location = ");
      v6 = sub_216B8B400((unsigned __int8 *)&v8);
      sub_216B248D8(v5, v6);
    }
    return sub_216B248A0(*a1, ") ");
  }
  return result;
}

void **sub_216BC50E0(uint64_t *a1, char a2)
{
  return sub_216B248A0(*a1, off_24D6053A8[a2 - 1]);
}

void **sub_216BC50F8(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;

  sub_216B248A0(*a1, "void main (");
  v4 = (unsigned __int8 **)sub_216B262E0(a2 + 16);
  v5 = sub_216BA8258(a2 + 16);
  if (v4 != (unsigned __int8 **)v5)
  {
    v6 = (unsigned __int8 **)v5;
    v7 = v5 - (_QWORD)v4;
    do
    {
      sub_216BC4234(a1, *v4);
      if (v7 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v4;
      v7 -= 8;
    }
    while (v4 != v6);
  }
  sub_216B248A0(*a1, ")");
  if (!sub_216BA8288(a2))
    return sub_216BA8290(a1, 0);
  sub_216B248A0(*a1, " ");
  v8 = (unsigned __int8 *)sub_216BA8288(a2);
  sub_216BC5218(a1, v8);
  return sub_216B248A0(*a1, "\n");
}

uint64_t sub_216BC5200(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1) >> 7;
}

uint64_t sub_216BC520C(_QWORD **a1, uint64_t a2)
{
  return j_nullsub_1(**a1, a2);
}

void **sub_216BC5218(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    return (void **)sub_216BC5230(a1, a2);
  else
    return sub_216B248A0(*a1, " /* <none> */ ");
}

uint64_t sub_216BC5230(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t result;

  result = sub_216B8B400(a2);
  switch((int)result)
  {
    case 0:
      result = (uint64_t)sub_216BC5394((uint64_t)a1, (uint64_t)a2);
      break;
    case 1:
      result = (uint64_t)sub_216BA8634(a1);
      break;
    case 2:
      result = sub_216BC5464(a1, (uint64_t)a2);
      break;
    case 3:
      result = (uint64_t)sub_216BC5470(a1, (uint64_t)a2);
      break;
    case 4:
      result = sub_216BC5560(a1, (uint64_t)a2);
      break;
    case 5:
      result = (uint64_t)sub_216BC55C4(a1, (uint64_t)a2);
      break;
    case 6:
      result = (uint64_t)sub_216BA87F4(a1);
      break;
    case 7:
      result = (uint64_t)sub_216BC5614(a1, (uint64_t)a2);
      break;
    case 8:
      result = (uint64_t)sub_216BC5718(a1, (uint64_t)a2);
      break;
    case 9:
      result = (uint64_t)sub_216BC5790(a1, (uint64_t)a2);
      break;
    case 10:
      result = (uint64_t)sub_216BA8A14(a1);
      break;
    case 11:
      result = (uint64_t)sub_216BA8A48(a1);
      break;
    case 12:
      result = (uint64_t)sub_216BA8A7C(a1);
      break;
    case 13:
      result = (uint64_t)sub_216BC5824(a1, (uint64_t)a2);
      break;
    case 14:
      result = sub_216BC588C((uint64_t)a1, (uint64_t)a2);
      break;
    default:
      return result;
  }
  return result;
}

void **sub_216BC5394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  sub_216B248A0(*(_QWORD *)a1, "{\n");
  ++*(_DWORD *)(a1 + 8);
  v4 = a2 + 8;
  v5 = (uint64_t *)sub_216B262E0(a2 + 8);
  v6 = sub_216BA8B44(v4);
  if (v5 != (uint64_t *)v6)
  {
    v7 = (uint64_t *)v6;
    do
    {
      v8 = *v5++;
      sub_216BA7D54((void **)a1);
      sub_216BC5218(a1, v8);
      sub_216BA8B74((uint64_t *)a1, v8);
      sub_216B248A0(*(_QWORD *)a1, "\n");
    }
    while (v5 != v7);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

uint64_t sub_216BC5464(uint64_t *a1, uint64_t a2)
{
  return sub_216BC3AD0(a1, a2 + 8, 0);
}

void **sub_216BC5470(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **result;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "if (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BC454C(a1, v4);
  }
  sub_216B248A0(*a1, ") ");
  if (sub_216B2037C(a2))
  {
    v5 = sub_216B2037C(a2);
    sub_216BC5218(a1, v5);
    v6 = sub_216B2037C(a2);
    sub_216BA8B74(a1, v6);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  result = (void **)sub_216B5EE7C(a2);
  if (result)
  {
    sub_216B248A0(*a1, " else ");
    v8 = sub_216B5EE7C(a2);
    sub_216BC5218(a1, v8);
    v9 = sub_216B5EE7C(a2);
    return sub_216BA8B74(a1, v9);
  }
  return result;
}

uint64_t sub_216BC5560(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_216B248A0(*a1, "switch (");
  v4 = sub_216B1E67C(a2);
  sub_216BC454C(a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  return sub_216BC5218(a1, v5);
}

void **sub_216BC55C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "case ");
  v4 = sub_216B5EE7C(a2);
  sub_216BC454C(a1, v4);
  return sub_216B248A0(*a1, ": ");
}

void **sub_216BC5614(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "for (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BC5218(a1, v4);
    v5 = sub_216B1E67C(a2);
    sub_216BA8B74(a1, v5);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  sub_216B248A0(*a1, " ");
  if (sub_216B2037C(a2))
  {
    v6 = sub_216B2037C(a2);
    sub_216BC5218(a1, v6);
  }
  sub_216BA8290(a1, 1);
  if (sub_216B5EE7C(a2))
  {
    v7 = sub_216B5EE7C(a2);
    sub_216BC454C(a1, v7);
  }
  sub_216B248A0(*a1, ") ");
  v8 = sub_216B27CB0(a2);
  sub_216BC5218(a1, v8);
  v9 = sub_216B27CB0(a2);
  return sub_216BA8B74(a1, v9);
}

void **sub_216BC5718(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "while (");
  v4 = sub_216B1E67C(a2);
  sub_216BC5218(a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  sub_216BC5218(a1, v5);
  v6 = sub_216B2037C(a2);
  return sub_216BA8B74(a1, v6);
}

void **sub_216BC5790(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "do ");
  v4 = sub_216B1E67C(a2);
  sub_216BC5218(a1, v4);
  v5 = sub_216B1E67C(a2);
  sub_216BA8B74(a1, v5);
  sub_216B248A0(*a1, " while (");
  v6 = sub_216B2037C(a2);
  sub_216BC454C(a1, v6);
  sub_216B248A0(*a1, ")");
  return sub_216BA8290(a1, 0);
}

void **sub_216BC5824(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "return");
  if (sub_216B1E67C(a2))
  {
    sub_216B248A0(*a1, " ");
    v4 = sub_216B1E67C(a2);
    sub_216BC454C(a1, v4);
  }
  return sub_216BA8290(a1, 0);
}

uint64_t sub_216BC588C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E67C(a2);
  return sub_216BC454C(a1, v3);
}

void **sub_216BC58B8(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_216B248A0(*(_QWORD *)a1, "struct");
  if (sub_216BA7D08(a2))
  {
    v4 = sub_216B248A0(*(_QWORD *)a1, " ");
    v5 = sub_216BA6A7C(a2);
    sub_216B248E0((uint64_t)v4, v5, v6);
  }
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v7 = a2 + 16;
  v8 = (uint64_t *)sub_216B262E0(a2 + 16);
  v9 = sub_216BA7D24(v7);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = *v8++;
      sub_216BA7D54((void **)a1);
      sub_216BC3AD0(a1, v11, 1);
    }
    while (v8 != v10);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

void **sub_216BC59B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_216BA7C00(a3))
    return sub_216BC58B8((uint64_t)a1, a2);
  v6 = *a1;
  v7 = sub_216BA6A7C(a2);
  return sub_216B248E0(v6, v7, v8);
}

void sub_216BC5A14(uint64_t *a1, uint64_t a2)
{
  switch(sub_216B9E3DC(a2))
  {
    case 0u:
      sub_216BA8E38(a1, a2);
      break;
    case 1u:
      sub_216BC5C28(a1, a2);
      break;
    case 2u:
      sub_216BA8ECC(a1, a2);
      break;
    case 3u:
    case 4u:
      sub_216BA8F0C(a1, a2);
      break;
    case 5u:
      sub_216BC5C78(a1, a2);
      break;
    case 6u:
      sub_216BC5D04(a1, a2);
      break;
    case 7u:
      sub_216BC5D8C(a1, a2);
      break;
    case 8u:
      sub_216BC5E04(a1, a2);
      break;
    case 9u:
      sub_216BA91CC(a1, a2);
      break;
    case 0xAu:
      sub_216BA91F8(a2);
      break;
    case 0xBu:
      sub_216BC5EC4(a1, a2);
      break;
    case 0xCu:
      sub_216BC5F7C(a1, a2);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
      sub_216BC60CC(a1, a2);
      break;
    case 0x10u:
      sub_216BC6130(a1, a2);
      break;
    case 0x11u:
      sub_216BC6194(a1, a2);
      break;
    case 0x12u:
      sub_216BC61D0((uint64_t)a1, a2);
      break;
    case 0x13u:
      sub_216BC63F4(a1, a2);
      break;
    case 0x14u:
      sub_216BC64B0(a1, a2);
      break;
    case 0x15u:
      sub_216BC588C((uint64_t)a1, a2);
      break;
    case 0x16u:
      sub_216BC65D4(a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_216BC5C28(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD v5[4];

  v2 = *a1;
  sub_216BA96F0(a2, (uint64_t)v5);
  v3 = sub_216BA96C0(v2, v5);
  sub_216B248A0(v3, "U");
  return sub_216B1D998(v5);
}

uint64_t sub_216BC5C78(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;

  if (sub_216BA9708(a2))
  {
    v4 = sub_216B2037C(a2);
    sub_216BC6638((uint64_t)a1, v4);
  }
  v5 = sub_216BA9790(a2);
  if (v5 <= 6)
    sub_216B248A0(*a1, off_24D6053D8[v5]);
  result = sub_216BA9708(a2);
  if ((result & 1) == 0)
  {
    v7 = sub_216B2037C(a2);
    return (uint64_t)sub_216BC6638((uint64_t)a1, v7);
  }
  return result;
}

void **sub_216BC5D04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v4 = sub_216B2037C(a2);
  sub_216BC6638((uint64_t)a1, v4);
  sub_216B248A0(*a1, " ");
  v5 = sub_216BA9A9C(a2);
  if (v5 <= 0x14)
    sub_216B248A0(*a1, off_24D605410[v5]);
  sub_216B248A0(*a1, " ");
  v6 = sub_216B5EE7C(a2);
  return sub_216BC6638((uint64_t)a1, v6);
}

void **sub_216BC5D8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_216B2037C(a2);
  sub_216BC6638((uint64_t)a1, v4);
  sub_216B248A0(*a1, " ? ");
  v5 = sub_216B5EE7C(a2);
  sub_216BC6638((uint64_t)a1, v5);
  sub_216B248A0(*a1, " : ");
  v6 = sub_216B27CB0(a2);
  return sub_216BC6638((uint64_t)a1, v6);
}

uint64_t sub_216BC5E04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;

  v4 = sub_216B1E67C(a2);
  v5 = sub_216B2037C(a2);
  v6 = sub_216BC66B4(v4);
  if (v6 && sub_216BA9AB4(v6) - 1 < 2)
  {
    v7 = "gl_FragColor";
  }
  else
  {
    sub_216BC454C(a1, v4);
    v7 = " ";
  }
  sub_216B248A0(*a1, v7);
  v8 = sub_216BA9AA8(a2);
  if (v8 <= 0xB)
    sub_216B248A0(*a1, off_24D6054B8[v8]);
  sub_216B248A0(*a1, " ");
  return sub_216BC454C(a1, v5);
}

void **sub_216BC5EC4(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v3 = (unsigned __int8 *)sub_216B1E67C(a2);
  v12[0] = sub_216BAB580(v3);
  v4 = sub_216B1E600((uint64_t)v12);
  v5 = sub_216BA7EB0(v4);
  if (sub_216BA9DD0(a1[73]))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6 || sub_216BA7EC0(v5))
  {
    v7 = *a1;
    v8 = sub_216BA6A7C((uint64_t)v3);
  }
  else
  {
    v7 = *a1;
    v12[0] = sub_216BA6A7C((uint64_t)v3);
    v12[1] = v10;
    v8 = sub_216B2864C(v12, 2uLL, 0xFFFFFFFFFFFFFFFFLL);
  }
  return sub_216B248E0(v7, v8, v9);
}

void **sub_216BC5F7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v17 = sub_216B2037C(a2);
  v4 = sub_216B1E600((uint64_t)&v17);
  if (sub_216BA710C(v4) && (v5 = sub_216B262E0(a2 + 8), v6 = sub_216BA9ACC(a2 + 8), sub_216B2F408(v5, v6) == 1))
  {
    v7 = (_QWORD *)sub_216B262E0(a2 + 8);
    return (void **)sub_216BC454C(a1, *v7);
  }
  else
  {
    v9 = sub_216B2037C(a2);
    sub_216BC4C5C(a1, v9);
    v16 = 0;
    v10 = sub_216B2037C(a2);
    if (sub_216BA7ABC(v10, &v16))
      sub_216BA7B24(a1, v16);
    sub_216B248A0(*a1, "(");
    v11 = a2 + 8;
    v12 = (_QWORD *)sub_216B262E0(a2 + 8);
    v13 = sub_216BA9ACC(v11);
    if (v12 != (_QWORD *)v13)
    {
      v14 = (_QWORD *)v13;
      v15 = v13 - (_QWORD)v12;
      do
      {
        sub_216BC454C(a1, *v12);
        if (v15 >= 9)
          sub_216B248A0(*a1, ", ");
        ++v12;
        v15 -= 8;
      }
      while (v12 != v14);
    }
    return sub_216B248A0(*a1, ")");
  }
}

void **sub_216BC60CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_216B2037C(a2);
  sub_216BC6638((uint64_t)a1, v4);
  v5 = sub_216B248A0(*a1, ".");
  v6 = sub_216BA9B14(a2);
  return sub_216B248E0((uint64_t)v5, v6, v7);
}

void **sub_216BC6130(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B2037C(a2);
  sub_216BC6638((uint64_t)a1, v4);
  sub_216B248A0(*a1, "[");
  v5 = sub_216B5EE7C(a2);
  sub_216BC454C(a1, v5);
  return sub_216B248A0(*a1, "]");
}

void **sub_216BC6194(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B2037C(a2);
  sub_216BC6638((uint64_t)a1, v3);
  return sub_216B248A0(*a1, ".length()");
}

void sub_216BC61D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;

  v3 = a2 + 8;
  sub_216B262E0(a2 + 8);
  sub_216B262E0(v3);
  v4 = (char *)sub_216BC623C + 4 * byte_216C18CDC[sub_216BA9AB4(a2) - 1];
  __asm { BR              X10 }
}

void **sub_216BC623C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v5;
  uint64_t v6;
  void **v7;
  void **result;

  v3 = sub_216BC4200(v0[74]);
  if (v3)
    sub_216B248A0(*v0, "_sampler_swizzle(");
  v4 = sub_216BC41F8(v0[74]);
  if (v4)
    sub_216B248A0(*v0, "_sampler_srgb_to_linear(");
  v5 = (char *)sub_216BC66EC(v0[74]);
  v6 = *v0;
  if (v5)
  {
    sub_216B248A0(v6, "(");
    sub_216B248A0(*v0, "sample(");
    sub_216BC454C(v0, v2);
    sub_216B248A0(*v0, ", ");
    sub_216BC454C(v0, v1);
    sub_216B248A0(*v0, ")");
    v7 = sub_216B248A0(*v0, v5);
  }
  else
  {
    sub_216B248A0(v6, "sample(");
    sub_216BC454C(v0, v2);
    sub_216B248A0(*v0, ", ");
    sub_216BC454C(v0, v1);
    v7 = (void **)*v0;
  }
  result = sub_216B248A0((uint64_t)v7, ")");
  if (v4)
    result = sub_216B248A0(*v0, ")");
  if (v3)
    return sub_216B248A0(*v0, ")");
  return result;
}

void **sub_216BC63F4(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = sub_216BA9B84(a2);
  sub_216B248A0(*a1, off_24D605518[v4 - 1]);
  v5 = a2 + 8;
  v6 = (_QWORD *)sub_216B262E0(a2 + 8);
  v7 = sub_216BA9B90(v5);
  if (v6 != (_QWORD *)v7)
  {
    v8 = (_QWORD *)v7;
    v9 = v7 - (_QWORD)v6;
    do
    {
      sub_216BC454C(a1, *v6);
      if (v9 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v6;
      v9 -= 8;
    }
    while (v6 != v8);
  }
  return sub_216B248A0(*a1, ")");
}

void **sub_216BC64B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const void *v22[2];

  v4 = sub_216B2037C(a2);
  v5 = sub_216BA6A7C(v4);
  v7 = v6;
  sub_216B1E678((int)v22, "destCoord");
  v8 = sub_216B274F0(v5, v7, v22[0], (size_t)v22[1]);
  v9 = *a1;
  if (v8)
  {
    v10 = "_dc";
    v11 = *a1;
  }
  else
  {
    v12 = sub_216B2037C(a2);
    v13 = sub_216BA6A7C(v12);
    v15 = sub_216B248E0(v9, v13, v14);
    sub_216B248A0((uint64_t)v15, "(");
    v16 = a2 + 8;
    v17 = (_QWORD *)sub_216B262E0(a2 + 8);
    v18 = sub_216BA9BD8(v16);
    if (v17 != (_QWORD *)v18)
    {
      v19 = (_QWORD *)v18;
      v20 = v18 - (_QWORD)v17;
      do
      {
        sub_216BC454C(a1, *v17);
        if (v20 >= 9)
          sub_216B248A0(*a1, ", ");
        ++v17;
        v20 -= 8;
      }
      while (v17 != v19);
    }
    v11 = *a1;
    v10 = ")";
  }
  return sub_216B248A0(v11, v10);
}

void **sub_216BC65D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B2037C(a2);
  sub_216BC4C5C(a1, v4);
  sub_216B248A0(*a1, "(");
  v5 = sub_216B1E67C(a2);
  sub_216BC454C(a1, v5);
  return sub_216B248A0(*a1, ")");
}

void **sub_216BC6638(uint64_t a1, uint64_t a2)
{
  void **result;

  if (*(_BYTE *)(a1 + 12) && sub_216BA979C(a2))
    sub_216B248A0(*(_QWORD *)a1, "(");
  result = (void **)sub_216BC454C(a1, a2);
  if (*(_BYTE *)(a1 + 12))
  {
    result = (void **)sub_216BA979C(a2);
    if ((_DWORD)result)
      return sub_216B248A0(*(_QWORD *)a1, ")");
  }
  return result;
}

uint64_t sub_216BC66B4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAE1FC(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BC66EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

uint64_t sub_216BC66F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BC671C(a1, v2);
}

uint64_t sub_216BC6720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[8];

  v4 = sub_216BA5ADC(a1);
  sub_216BC6808((uint64_t)v18, a2, v4);
  v18[3] = sub_216BC38D0(a1);
  v18[4] = v5;
  sub_216BC680C(v18);
  sub_216BC69AC(v18);
  v16 = sub_216BA5AE4(a1);
  v17 = v6;
  v7 = (uint64_t *)sub_216B1E600((uint64_t)&v16);
  v8 = sub_216B35430(&v16);
  if (v7 != (uint64_t *)v8)
  {
    v9 = (uint64_t *)v8;
    do
    {
      v10 = *v7++;
      sub_216BC6B20(v18, v10, 1);
    }
    while (v7 != v9);
  }
  v16 = sub_216BA5BE0(a1);
  v17 = v11;
  v12 = (uint64_t *)sub_216B1E600((uint64_t)&v16);
  result = sub_216B35430(&v16);
  if (v12 != (uint64_t *)result)
  {
    v14 = (uint64_t *)result;
    do
    {
      v15 = *v12++;
      result = sub_216BC6B20(v18, v15, 1);
    }
    while (v12 != v14);
  }
  return result;
}

void **sub_216BC680C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void **result;
  void **v12;
  char *v13;
  void **v14;
  uint64_t v15;

  v2 = a1 + 3;
  sub_216B248A0(*a1, "#include <metal_stdlib>\nusing namespace metal;\n\n");
  v3 = (uint64_t *)sub_216B1E600((uint64_t)v2);
  v4 = sub_216B35430(v2);
  if (v3 == (uint64_t *)v4)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v5 = (uint64_t *)v4;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v15 = sub_216B2037C(*v3);
      v8 = sub_216B1E600((uint64_t)&v15);
      v9 = sub_216BA7EB0(v8);
      if (v9)
      {
        v10 = sub_216BA7EC0(v9);
        v6 |= v10 == 0;
        v7 |= v10 == 1;
      }
      if ((v6 & 1) != 0 && (v7 & 1) != 0)
        break;
      if (++v3 == v5)
        goto LABEL_11;
    }
    v7 = 1;
    v6 = 1;
  }
LABEL_11:
  sub_216B248A0(*a1, "template <typename T>\nstatic inline T mod(T x, T y) { return x - y * floor(x / y); }\n\n");
  result = sub_216B248A0(*a1, "template <typename T, int V>\nstatic inline vec<T, V> mod(vec<T, V> x, T y) { return x - y * floor(x / y); }\n"
             "\n");
  if ((v6 & 1) != 0 || (v7 & 1) != 0)
  {
    sub_216B248A0(*a1, "namespace ci {\n\n");
    if ((v6 & 1) != 0)
      sub_216B248A0(*a1, "template <typename T>\nstruct sampler {\n\ntexture2d<T, access::sample> texture; \n"
        "metal::sampler sampler; \n"
        "float4x4 m; \n"
        "\n"
        "vec<T,4> sample(float2 p) {\n"
        "  return texture.sample(sampler, p);\n"
        "}\n"
        "\n"
        "float2 transform(float2 p) {\n"
        "  float x = dot(float3(p, 1), m[0].xyz);\n"
        "  float y = dot(float3(p, 1), m[1].xyz);\n"
        "  return float2(x,y);\n"
        "}\n"
        "\n"
        "float4 extent() {\n"
        "  return m[3]; \n"
        "}\n"
        "\n"
        "};
        "\n");
    if ((v7 & 1) != 0)
      sub_216B248A0(*a1, "template <typename T>\nstruct sampler2D {\n\ntexture2d<T, access::sample> texture; \n"
        "metal::sampler sampler; \n"
        "\n"
        "vec<T,4> texture2D(float2 p) {\n"
        "  return texture.sample(sampler, p);\n"
        "}\n"
        "\n"
        "};
        "\n");
    sub_216B248A0(*a1, "};
    if (sub_216BC41F8(a1[6]))
      sub_216B248A0(*a1, "template <typename T>\nstatic inline vec<T,4> _sampler_srgb_to_linear(vec<T,4> s) {\n  s.rgb = sign(s.rgb) * mix(abs(s.rgb) * 0.077399380804954, pow(abs(s.rgb) * 0.947867298578199 + 0.052132701421801, vec<T,3>(2.4)), step(0.04045, abs(s.rgb)));\n"
        "  return s;\n"
        "}\n"
        "\n");
    result = (void **)sub_216BC4200(a1[6]);
    if (result)
    {
      v12 = sub_216B248A0(*a1, "static inline vec<T,4> _sampler_swizzle(vec<T,4> s) {\n  return ");
      v13 = (char *)sub_216BC4200(a1[6]);
      v14 = sub_216B248A0((uint64_t)v12, v13);
      return sub_216B248A0((uint64_t)v14, ";\n}\n\n");
    }
  }
  return result;
}

void **sub_216BC69AC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  char *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = a1 + 3;
  sub_216B248A0(*a1, "struct Params {\n\n  float4 outputRect;\n  float3x3 vertexTransform;\n\n");
  v3 = (uint64_t *)sub_216B1E600((uint64_t)v2);
  v4 = sub_216B35430(v2);
  if (v3 != (uint64_t *)v4)
  {
    v5 = (uint64_t *)v4;
    while (1)
    {
      v6 = *v3;
      v19 = sub_216B2037C(*v3);
      v7 = sub_216B1E600((uint64_t)&v19);
      v8 = sub_216BA7EB0(v7);
      if (!v8)
        goto LABEL_7;
      v9 = sub_216BA7EC0(v8);
      if (v9 != 1)
        break;
LABEL_9:
      if (++v3 == v5)
        return sub_216B248A0(*a1, "};\n\n");
    }
    if (v9)
    {
LABEL_7:
      sub_216B248A0(*a1, "  ");
      sub_216BC719C(a1, v19);
      v15 = sub_216B248A0(*a1, " ");
      v16 = sub_216BA6A7C(v6);
      v13 = sub_216B248E0((uint64_t)v15, v16, v17);
      v14 = ";\n";
    }
    else
    {
      sub_216B248A0(*a1, "  float4x4 ");
      v10 = *a1;
      v11 = sub_216BA6A7C(v6);
      v13 = sub_216B248E0(v10, v11, v12);
      v14 = "_m;\n";
    }
    sub_216B248A0((uint64_t)v13, v14);
    goto LABEL_9;
  }
  return sub_216B248A0(*a1, "};\n\n");
}

uint64_t sub_216BC6B20(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;
  _QWORD v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  sub_216B85C18(v13);
  v6 = (uint64_t *)sub_216BA9C60(a2);
  v7 = sub_216BA9C64(a2);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    do
    {
      v9 = *v6++;
      v12 = v9;
      sub_216B268AC((uint64_t)v13, &v12);
    }
    while (v6 != v8);
  }
  if (!sub_216B29084(v13))
  {
    sub_216B2D798(v11, v13);
    sub_216BC6E30(a1, v11[0], v11[1], a3);
  }
  return sub_216B1FF6C(v13);
}

uint64_t sub_216BC6BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t j;
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[8];
  _BYTE v27[56];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216BA5ADC(a1);
  sub_216BC6808((uint64_t)v26, a2, v4);
  v5 = sub_216BA5E2C(a1);
  v26[6] = sub_216BA9D08(a1);
  v26[3] = sub_216BC38D0(a1);
  v26[4] = v6;
  sub_216BC680C(v26);
  sub_216BC69AC(v26);
  v24 = sub_216BA5AE4(a1);
  v25 = v7;
  v8 = (uint64_t *)sub_216B1E600((uint64_t)&v24);
  v9 = sub_216B35430(&v24);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = *v8;
      sub_216B2D768(v27);
      v12 = (uint64_t *)sub_216BA5E50(v11);
      for (i = sub_216BA5E54(v11); v12 != (uint64_t *)i; ++v12)
      {
        v23 = 0;
        v23 = *v12;
        if (sub_216BA5ED4(v5, v23))
          sub_216B268AC((uint64_t)v27, &v23);
      }
      if (sub_216B26878((uint64_t)v27))
      {
        sub_216B2D798(v22, v27);
        sub_216BC6E30(v26, v22[0], v22[1], 1);
      }
      sub_216B1FF6C(v27);
      ++v8;
    }
    while (v8 != v10);
  }
  v24 = sub_216BA5BE0(a1);
  v25 = v14;
  v15 = (uint64_t *)sub_216B1E600((uint64_t)&v24);
  result = sub_216B35430(&v24);
  if (v15 != (uint64_t *)result)
  {
    v17 = (uint64_t *)result;
    do
    {
      v18 = *v15;
      sub_216B2D768(v27);
      v19 = (uint64_t *)sub_216BA5E50(v18);
      for (j = sub_216BA5E54(v18); v19 != (uint64_t *)j; ++v19)
      {
        v23 = 0;
        v23 = *v19;
        if (sub_216BA5ED4(v5, v23))
          sub_216B268AC((uint64_t)v27, &v23);
      }
      if (sub_216B26878((uint64_t)v27))
      {
        sub_216B2D798(v21, v27);
        sub_216BC6E30(v26, v21[0], v21[1], 1);
      }
      result = sub_216B1FF6C(v27);
      ++v15;
    }
    while (v15 != v17);
  }
  return result;
}

void sub_216BC6E30(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39[2];
  _DWORD *v40;
  void *v41;
  char v42;
  _QWORD v43[2];

  v43[0] = a2;
  v43[1] = a3;
  v41 = a1;
  v42 = a4;
  if (*((_DWORD *)a1 + 2))
  {
    v5 = sub_216B1E600((uint64_t)v43);
    if (sub_216BAA0D0(v5))
    {
      v6 = (uint64_t *)sub_216B1E600((uint64_t)v43);
      v7 = sub_216B35430(v43);
      if (v6 == (uint64_t *)v7)
        return;
      v8 = (uint64_t *)v7;
      v9 = 1;
      do
      {
        v10 = *v6;
        v40 = 0;
        v40 = (_DWORD *)sub_216B3DB48(v10);
        v11 = a1[2];
        if (v11
          && (v39[0] = sub_216BA68EC(v11, (uint64_t *)&v40),
              v39[1] = v12,
              v38[0] = sub_216BA6950(a1[2]),
              v38[1] = v13,
              sub_216B50AF4(v39, (uint64_t)v38)))
        {
          v14 = v40;
          v15 = sub_216B1E600((uint64_t)v39);
          sub_216BC7528(a1, (uint64_t)v14, *(float **)(v15 + 8));
          sub_216BA8290(a1, 0);
          sub_216BC75D4(&v41);
        }
        else
        {
          if ((v9 & 1) != 0)
          {
            sub_216BC75F4(a1, v40);
            sub_216BC767C(a1, (uint64_t)v40);
          }
          else
          {
            sub_216B248A0(*a1, ",");
          }
          v16 = sub_216B248A0(*a1, " ");
          v17 = sub_216BA6A7C((uint64_t)v40);
          sub_216B248E0((uint64_t)v16, v17, v18);
          sub_216BA6CA4(a1, (uint64_t)v40);
          if (sub_216B5EE7C((uint64_t)v40))
          {
            sub_216B248A0(*a1, " = ");
            v19 = sub_216B5EE7C((uint64_t)v40);
            sub_216BC774C(a1, v19);
          }
          v9 = 0;
        }
        ++v6;
      }
      while (v6 != v8);
      if ((v9 & 1) != 0)
        return;
LABEL_26:
      sub_216BA8290(a1, 0);
      goto LABEL_40;
    }
  }
  v20 = sub_216B1E600((uint64_t)v43);
  v21 = sub_216BAA0D4(v20);
  v22 = (uint64_t *)sub_216B1E600((uint64_t)v43);
  v23 = sub_216B35430(v43);
  v24 = (uint64_t *)v23;
  v25 = v22 == (uint64_t *)v23;
  if (v21)
  {
    if (v22 != (uint64_t *)v23)
    {
      v26 = 1;
      do
      {
        v27 = *v22;
        if ((v26 & 1) == 0)
          sub_216B248A0(*a1, ",");
        sub_216B248A0(*a1, " ");
        v28 = (unsigned __int16 *)sub_216B3DB48(v27);
        if (sub_216B2037C((uint64_t)v28))
        {
          v29 = *a1;
          v30 = sub_216B2037C((uint64_t)v28);
          v31 = sub_216BA6A7C(v30);
          sub_216B248E0(v29, v31, v32);
        }
        else
        {
          sub_216BA83A4(v28);
        }
        v26 = 0;
        ++v22;
      }
      while (v22 != v24);
    }
    goto LABEL_26;
  }
  while (!v25)
  {
    v33 = (unsigned __int8 *)*v22;
    v39[0] = *v22;
    if (!*((_DWORD *)a1 + 2))
    {
      if ((sub_216BAA0D0(v39) & 1) != 0)
        goto LABEL_32;
      v33 = (unsigned __int8 *)v39[0];
    }
    sub_216BC7764(a1, v33);
LABEL_32:
    v25 = ++v22 == v24;
  }
  if (*((_DWORD *)a1 + 2))
  {
    v34 = sub_216B1E600((uint64_t)v43);
    if ((sub_216BA9DCC(v34) & 1) == 0)
    {
      v35 = sub_216B1E600((uint64_t)v43);
      if ((sub_216BA9E30(v35) & 1) == 0)
      {
        v36 = sub_216B1E600((uint64_t)v43);
        if ((sub_216BA9E34(v36) & 1) == 0)
          sub_216BA8290(a1, 0);
      }
    }
    if (*((_DWORD *)a1 + 2))
      goto LABEL_40;
  }
  v37 = sub_216B1E600((uint64_t)v43);
  if ((sub_216BAA0D0(v37) & 1) == 0)
LABEL_40:
    sub_216BC75D4(&v41);
}

uint64_t sub_216BC7158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = a3;
  sub_216B26D14((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void **sub_216BC719C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  void **v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  if (!sub_216B1E600((uint64_t)&v44))
  {
    v11 = *a1;
    v12 = " /* <> */ ";
    return sub_216B248A0(v11, v12);
  }
  v3 = sub_216B1E600((uint64_t)&v44);
  v4 = sub_216BA72BC(v3);
  if (!v4)
  {
    v14 = sub_216B1E600((uint64_t)&v44);
    v15 = sub_216BA710C(v14);
    if (v15)
    {
      v16 = v15;
      v17 = sub_216B1E67C(v15);
      if (sub_216BA7EA4(v17) == 3)
        v18 = "float";
      else
        v18 = "half";
      sub_216B248A0(*a1, v18);
      v19 = sub_216BA7418(v16);
      v20 = sub_216BA734C(v16);
      v21 = sub_216B248D8((void **)*a1, v20);
      v10 = sub_216B248A0((uint64_t)v21, "x");
      v9 = v19;
      return sub_216B248D8(v10, v9);
    }
    v22 = sub_216B1E600((uint64_t)&v44);
    v23 = sub_216BA7EB0(v22);
    if (v23)
    {
      v24 = v23;
      v25 = sub_216BA7EC0(v23);
      if (v25)
      {
        if (v25 != 1)
        {
LABEL_21:
          v28 = sub_216BA7EB4(v24);
          if (v28 <= 3)
            sub_216B248A0(*a1, off_24D605790[v28]);
          v11 = *a1;
          v12 = ">";
          return sub_216B248A0(v11, v12);
        }
        v26 = "ci::sampler2D<";
      }
      else
      {
        v26 = "ci::sampler<";
      }
      sub_216B248A0(*a1, v26);
      goto LABEL_21;
    }
    v27 = sub_216B1E600((uint64_t)&v44);
    if (sub_216BA7ECC(v27))
    {
      v11 = *a1;
      v12 = "void";
      return sub_216B248A0(v11, v12);
    }
    v29 = sub_216B1E600((uint64_t)&v44);
    v30 = sub_216BA7ED0(v29);
    if (v30)
    {
      v31 = *a1;
      v32 = sub_216BD37EC(v30);
      return sub_216B248E0(v31, v32, v33);
    }
    v34 = sub_216B1E600((uint64_t)&v44);
    v35 = sub_216BA7ED4(v34);
    if (v35)
    {
      v36 = sub_216B1E67C(v35);
    }
    else
    {
      v37 = sub_216B1E600((uint64_t)&v44);
      v38 = sub_216BA76B8(v37);
      if (v38)
      {
        v31 = *a1;
        v32 = sub_216BD3048(v38);
        return sub_216B248E0(v31, v32, v33);
      }
      v39 = sub_216B1E600((uint64_t)&v44);
      v40 = sub_216BA771C(v39);
      if (v40)
      {
        v41 = (_DWORD *)sub_216B1E67C(v40);
        return sub_216BC7400((uint64_t)a1, v41);
      }
      v42 = sub_216B1E600((uint64_t)&v44);
      v43 = sub_216BA7ED8(v42);
      if (!v43)
      {
        v11 = *a1;
        v12 = " /* <unknown> */ ";
        return sub_216B248A0(v11, v12);
      }
      v36 = sub_216B2037C(v43);
    }
    return (void **)sub_216BC719C(a1, v36);
  }
  v5 = v4;
  v6 = sub_216B1E67C(v4);
  v7 = sub_216BA7EA4(v6);
  sub_216B248A0(*a1, off_24D605768[v7 - 3]);
  v8 = *a1;
  v9 = sub_216BA734C(v5);
  v10 = (void **)v8;
  return sub_216B248D8(v10, v9);
}

void **sub_216BC7400(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = sub_216B34190((uint64_t)a2);
  sub_216BC74F8(v4);
  sub_216BA7E50(a2);
  sub_216B248A0(*(_QWORD *)a1, "// uniform ");
  v5 = *(_QWORD *)a1;
  v6 = sub_216BA6A7C((uint64_t)a2);
  sub_216B248E0(v5, v6, v7);
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v8 = (uint64_t)(a2 + 4);
  v9 = (uint64_t *)sub_216B262E0((uint64_t)(a2 + 4));
  v10 = sub_216BA7E5C(v8);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    do
    {
      v12 = *v9++;
      sub_216BA7D54((void **)a1);
      sub_216BC6B20((_QWORD *)a1, v12, 1);
    }
    while (v9 != v11);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

uint64_t sub_216BC74F8(int a1)
{
  uint64_t result;
  int v2;

  v2 = a1;
  result = sub_216BA762C((unsigned __int16 *)&v2);
  if ((result & 1) == 0)
    return sub_216BA7644((unsigned __int16 *)&v2);
  return result;
}

void **sub_216BC7528(uint64_t *a1, uint64_t a2, float *a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "const ");
  sub_216BC767C(a1, a2);
  v6 = sub_216B248A0(*a1, " ");
  v7 = sub_216BA6A7C(a2);
  sub_216B248E0((uint64_t)v6, v7, v8);
  sub_216BA6CA4(a1, a2);
  sub_216B248A0(*a1, " = ");
  v9 = sub_216B2037C(a2);
  return sub_216BA6ED4(a3, v9, (void **)*a1);
}

void **sub_216BC75D4(void **result)
{
  if (*((_BYTE *)result + 8))
    return sub_216B248A0(*(_QWORD *)*result, "\n");
  return result;
}

uint64_t sub_216BC75F4(uint64_t *a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t result;

  v4 = sub_216B387B8((uint64_t)a2);
  sub_216BC74F8(v4);
  sub_216BA75E4(a2);
  v5 = sub_216BA75F0(a2) - 2;
  if (v5 <= 6 && ((0x69u >> v5) & 1) != 0)
    sub_216B248A0(*a1, off_24D6057B0[v5]);
  result = sub_216B5E120((uint64_t)a2);
  if ((_DWORD)result)
    return sub_216BA7620(a2);
  return result;
}

uint64_t sub_216BC767C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v13 = sub_216B2037C(a2);
  v4 = sub_216B1E600((uint64_t)&v13);
  v5 = sub_216BA76B8(v4);
  if (v5)
  {
    v6 = sub_216B1E67C(v5);
    sub_216BC777C(a1, v6, a2);
  }
  else
  {
    v13 = sub_216B2037C(a2);
    v7 = sub_216B1E600((uint64_t)&v13);
    v8 = sub_216BA771C(v7);
    if (v8)
    {
      v9 = sub_216B1E67C(v8);
      sub_216BC7400(a1, v9);
    }
    else
    {
      v10 = sub_216B2037C(a2);
      sub_216BC719C(a1, v10);
    }
  }
  LODWORD(v13) = 0;
  v11 = sub_216B2037C(a2);
  result = sub_216BA7ABC(v11, &v13);
  if ((_DWORD)result)
  {
    result = sub_216BA7B18(a2);
    if ((result & 1) == 0)
      return (uint64_t)sub_216BA7B24(a1, v13);
  }
  return result;
}

void sub_216BC774C(uint64_t *a1, uint64_t a2)
{
  if (a2)
    sub_216BC78D8(a1, a2);
  else
    sub_216B248A0(*a1, " /* <none> */ ");
}

void sub_216BC7764(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    sub_216BC86E4((uint64_t)a1, a2);
  else
    sub_216B248A0(*a1, " /* <none> */ ");
}

void **sub_216BC777C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_216BA7C00(a3))
    return sub_216BC77DC((uint64_t)a1, a2);
  v6 = *a1;
  v7 = sub_216BA6A7C(a2);
  return sub_216B248E0(v6, v7, v8);
}

void **sub_216BC77DC(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_216B248A0(*(_QWORD *)a1, "struct");
  if (sub_216BA7D08(a2))
  {
    v4 = sub_216B248A0(*(_QWORD *)a1, " ");
    v5 = sub_216BA6A7C(a2);
    sub_216B248E0((uint64_t)v4, v5, v6);
  }
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v7 = a2 + 16;
  v8 = (uint64_t *)sub_216B262E0(a2 + 16);
  v9 = sub_216BA7D24(v7);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = *v8++;
      sub_216BA7D54((void **)a1);
      sub_216BC6B20(a1, v11, 1);
    }
    while (v8 != v10);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

void sub_216BC78D8(uint64_t *a1, uint64_t a2)
{
  switch(sub_216B9E3DC(a2))
  {
    case 0u:
      sub_216BA8E38(a1, a2);
      break;
    case 1u:
      sub_216BC5C28(a1, a2);
      break;
    case 2u:
      sub_216BA8ECC(a1, a2);
      break;
    case 3u:
      sub_216BC7AE8(a1, a2);
      break;
    case 4u:
      sub_216BA8F5C(a1, a2);
      break;
    case 5u:
      sub_216BC7B44(a1, a2);
      break;
    case 6u:
      sub_216BC7BD0(a1, a2);
      break;
    case 7u:
      sub_216BC7C58(a1, a2);
      break;
    case 8u:
      sub_216BC7CD0(a1, a2);
      break;
    case 9u:
      sub_216BC7DBC(a2);
      break;
    case 0xAu:
      sub_216BA91F8(a2);
      break;
    case 0xBu:
      sub_216BC7DC0(a1, a2);
      break;
    case 0xCu:
      sub_216BC7E6C(a1, a2);
      break;
    case 0xDu:
    case 0xEu:
      sub_216BC7F58(a1, a2);
      break;
    case 0xFu:
      sub_216BC7FBC(a1, a2);
      break;
    case 0x10u:
      sub_216BC80E8(a1, a2);
      break;
    case 0x11u:
      sub_216BC814C(a1, a2);
      break;
    case 0x12u:
      sub_216BC8188((uint64_t)a1, a2);
      break;
    case 0x13u:
      sub_216BC83A4(a1, a2);
      break;
    case 0x14u:
      sub_216BC84EC(a1, a2);
      break;
    case 0x15u:
    case 0x16u:
      sub_216BC863C((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_216BC7AE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  _BYTE v7[24];

  sub_216BA96FC(a2, (uint64_t)v7);
  v3 = *a1;
  v4 = sub_216B1EC14((uint64_t)v7);
  v5 = sub_216B403FC(v3, v4);
  sub_216B248A0(v5, "f");
  return sub_216B1D57C(v7);
}

uint64_t sub_216BC7B44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;

  if (sub_216BA9708(a2))
  {
    v4 = sub_216B2037C(a2);
    sub_216BC8668((uint64_t)a1, v4);
  }
  v5 = sub_216BA9790(a2);
  if (v5 <= 6)
    sub_216B248A0(*a1, off_24D6057E8[v5]);
  result = sub_216BA9708(a2);
  if ((result & 1) == 0)
  {
    v7 = sub_216B2037C(a2);
    return (uint64_t)sub_216BC8668((uint64_t)a1, v7);
  }
  return result;
}

void **sub_216BC7BD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v4 = sub_216B2037C(a2);
  sub_216BC8668((uint64_t)a1, v4);
  sub_216B248A0(*a1, " ");
  v5 = sub_216BA9A9C(a2);
  if (v5 <= 0x14)
    sub_216B248A0(*a1, off_24D605820[v5]);
  sub_216B248A0(*a1, " ");
  v6 = sub_216B5EE7C(a2);
  return sub_216BC8668((uint64_t)a1, v6);
}

void **sub_216BC7C58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_216B2037C(a2);
  sub_216BC8668((uint64_t)a1, v4);
  sub_216B248A0(*a1, " ? ");
  v5 = sub_216B5EE7C(a2);
  sub_216BC8668((uint64_t)a1, v5);
  sub_216B248A0(*a1, " : ");
  v6 = sub_216B27CB0(a2);
  return sub_216BC8668((uint64_t)a1, v6);
}

void **sub_216BC7CD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v4 = sub_216B1E67C(a2);
  v5 = sub_216B2037C(a2);
  v6 = sub_216BC66B4(v4);
  if (v6 && sub_216BA9AB4(v6) - 1 < 2)
  {
    sub_216B248A0(*a1, "outputTexture.write(");
    sub_216BC774C(a1, v5);
    return sub_216B248A0(*a1, ", _wc)");
  }
  else
  {
    sub_216BC774C(a1, v4);
    sub_216B248A0(*a1, " ");
    v8 = sub_216BA9AA8(a2);
    if (v8 < 0xC)
      sub_216B248A0(*a1, off_24D6058C8[v8]);
    sub_216B248A0(*a1, " ");
    return (void **)sub_216BC774C(a1, v5);
  }
}

void **sub_216BC7DC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_216B1E67C(a2);
  if (sub_216BA9DD0(a1[5]))
  {
    v4 = (_DWORD *)sub_216BB1658(v3);
    v10 = sub_216B2037C((uint64_t)v4);
    v5 = sub_216B1E600((uint64_t)&v10);
    if (!sub_216BA7EB0(v5) && sub_216BA75F0(v4) == 7)
      sub_216B248A0(*a1, "params.");
  }
  v6 = *a1;
  v7 = sub_216BA6A7C(v3);
  return sub_216B248E0(v6, v7, v8);
}

void **sub_216BC7E6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v12;

  v4 = sub_216B2037C(a2);
  sub_216BC719C(a1, v4);
  v12 = 0;
  v5 = sub_216B2037C(a2);
  if (sub_216BA7ABC(v5, &v12))
    sub_216BA7B24(a1, v12);
  sub_216B248A0(*a1, "(");
  v6 = a2 + 8;
  v7 = (_QWORD *)sub_216B262E0(a2 + 8);
  v8 = sub_216BA9ACC(v6);
  if (v7 != (_QWORD *)v8)
  {
    v9 = (_QWORD *)v8;
    v10 = v8 - (_QWORD)v7;
    do
    {
      sub_216BC774C(a1, *v7);
      if (v10 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v7;
      v10 -= 8;
    }
    while (v7 != v9);
  }
  return sub_216B248A0(*a1, ")");
}

void **sub_216BC7F58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_216B2037C(a2);
  sub_216BC8668((uint64_t)a1, v4);
  v5 = sub_216B248A0(*a1, ".");
  v6 = sub_216BA9B14(a2);
  return sub_216B248E0((uint64_t)v5, v6, v7);
}

void sub_216BC7FBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unsigned __int8 v9;
  void **v10;
  _QWORD v11[2];

  v4 = sub_216B2037C(a2);
  sub_216BC8668((uint64_t)a1, v4);
  v11[0] = sub_216BA9B14(a2);
  v11[1] = v5;
  if (sub_216B1E67C((uint64_t)v11))
  {
    v6 = sub_216B1E67C((uint64_t)v11);
    v7 = (char *)malloc_type_malloc(v6 + 1, 0x100004077774924uLL);
    if (v7 && sub_216B1E67C((uint64_t)v11))
    {
      v8 = 0;
      do
      {
        v9 = sub_216B26288(v11, v8);
        if (v9 > 0x66u)
        {
          if (v9 == 114)
          {
            v9 = 120;
          }
          else if (v9 == 103)
          {
            v9 = 121;
          }
        }
        else if (v9 == 97)
        {
          v9 = 119;
        }
        else if (v9 == 98)
        {
          v9 = 122;
        }
        v7[v8++] = v9;
      }
      while (v8 < sub_216B1E67C((uint64_t)v11));
    }
    v7[sub_216B1E67C((uint64_t)v11)] = 0;
    v10 = sub_216B248A0(*a1, ".");
    sub_216B248A0((uint64_t)v10, v7);
    free(v7);
  }
}

void **sub_216BC80E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B2037C(a2);
  sub_216BC8668((uint64_t)a1, v4);
  sub_216B248A0(*a1, "[");
  v5 = sub_216B5EE7C(a2);
  sub_216BC774C(a1, v5);
  return sub_216B248A0(*a1, "]");
}

void **sub_216BC814C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B2037C(a2);
  sub_216BC8668((uint64_t)a1, v3);
  return sub_216B248A0(*a1, ".length()");
}

void sub_216BC8188(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;

  v3 = a2 + 8;
  sub_216B262E0(a2 + 8);
  sub_216B262E0(v3);
  v4 = (char *)sub_216BC81E4 + 4 * byte_216C18CF8[sub_216BA9AB4(a2) - 1];
  __asm { BR              X10 }
}

void **sub_216BC81E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  uint64_t v5;
  char *v6;
  void **v7;
  void **result;
  void **v9;

  v3 = (char *)sub_216BC4200(v0[6]);
  if (v3)
    sub_216B248A0(*v0, "_sampler_swizzle(");
  v4 = sub_216BC41F8(v0[6]);
  if (v4)
    sub_216B248A0(*v0, "_sampler_srgb_to_linear(");
  v5 = sub_216BC66EC(v0[6]);
  if (v5)
  {
    v6 = (char *)v5;
    sub_216B248A0(*v0, "(");
    sub_216BC774C(v0, v2);
    sub_216B248A0(*v0, ".sample(");
    sub_216BC774C(v0, v1);
    sub_216B248A0(*v0, ")");
    v7 = sub_216B248A0(*v0, v6);
  }
  else
  {
    sub_216BC774C(v0, v2);
    sub_216B248A0(*v0, ".sample(");
    sub_216BC774C(v0, v1);
    v7 = (void **)*v0;
  }
  result = sub_216B248A0((uint64_t)v7, ")");
  if (v4)
    result = sub_216B248A0(*v0, ")");
  if (v3)
  {
    v9 = sub_216B248A0(*v0, v3);
    return sub_216B248A0((uint64_t)v9, ")");
  }
  return result;
}

void **sub_216BC83A4(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = sub_216BA9B84(a2) - 65;
  if (v4 >= 6)
  {
    v10 = sub_216BA9B84(a2);
    sub_216B248A0(*a1, off_24D605958[v10 - 1]);
    v11 = a2 + 8;
    v12 = (_QWORD *)sub_216B262E0(v11);
    v13 = sub_216BA9B90(v11);
    if (v12 == (_QWORD *)v13)
    {
      v9 = ")";
    }
    else
    {
      v14 = (_QWORD *)v13;
      v15 = v13 - (_QWORD)v12;
      v9 = ")";
      do
      {
        sub_216BC774C(a1, *v12);
        if (v15 >= 9)
          sub_216B248A0(*a1, ", ");
        ++v12;
        v15 -= 8;
      }
      while (v12 != v14);
    }
  }
  else
  {
    v5 = off_24D605928[v4];
    v6 = a2 + 8;
    v7 = *(_QWORD *)sub_216B262E0(v6);
    v8 = *(_QWORD *)(sub_216B262E0(v6) + 8);
    sub_216B248A0(*a1, "((");
    sub_216BC774C(a1, v7);
    sub_216B248A0(*a1, v5);
    sub_216BC774C(a1, v8);
    v9 = "))";
  }
  return sub_216B248A0(*a1, v9);
}

void **sub_216BC84EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const void *v22[2];

  v4 = sub_216B2037C(a2);
  v5 = sub_216BA6A7C(v4);
  v7 = v6;
  sub_216B1E678((int)v22, "destCoord");
  v8 = sub_216B274F0(v5, v7, v22[0], (size_t)v22[1]);
  v9 = *a1;
  if (v8)
  {
    v10 = "_dc";
    v11 = *a1;
  }
  else
  {
    v12 = sub_216B2037C(a2);
    v13 = sub_216BA6A7C(v12);
    v15 = sub_216B248E0(v9, v13, v14);
    sub_216B248A0((uint64_t)v15, "(");
    v16 = a2 + 8;
    v17 = (_QWORD *)sub_216B262E0(v16);
    v18 = sub_216BA9BD8(v16);
    if (v17 != (_QWORD *)v18)
    {
      v19 = (_QWORD *)v18;
      v20 = v18 - (_QWORD)v17;
      do
      {
        sub_216BC774C(a1, *v17);
        if (v20 >= 9)
          sub_216B248A0(*a1, ", ");
        ++v17;
        v20 -= 8;
      }
      while (v17 != v19);
    }
    if (sub_216BA9C08(v16))
      sub_216B248A0(*a1, ", ");
    sub_216B248A0(*a1, "_dc");
    v11 = *a1;
    v10 = ")";
  }
  return sub_216B248A0(v11, v10);
}

uint64_t sub_216BC863C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E67C(a2);
  return sub_216BC774C(a1, v3);
}

void **sub_216BC8668(uint64_t a1, uint64_t a2)
{
  void **result;

  if (*(_BYTE *)(a1 + 12) && sub_216BA979C(a2))
    sub_216B248A0(*(_QWORD *)a1, "(");
  result = (void **)sub_216BC774C(a1, a2);
  if (*(_BYTE *)(a1 + 12))
  {
    result = (void **)sub_216BA979C(a2);
    if ((_DWORD)result)
      return sub_216B248A0(*(_QWORD *)a1, ")");
  }
  return result;
}

void sub_216BC86E4(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;

  v2 = (char *)sub_216BC871C + 4 * byte_216C18CFD[sub_216B8B400(a2)];
  __asm { BR              X10 }
}

void **sub_216BC8728()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BC89D4(v1, v0);
}

uint64_t sub_216BC873C()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BA66F8)(v1, v0);
}

uint64_t sub_216BC8750()
{
  uint64_t v0;

  return sub_216BC8BF4(v0);
}

void **sub_216BC8760()
{
  unsigned __int16 *v0;
  uint64_t *v1;

  return sub_216BC8C0C(v1, v0);
}

uint64_t sub_216BC8774()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BC8C6C)(v1, v0);
}

uint64_t sub_216BC8788()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BC8C70)(v1, v0);
}

void sub_216BC879C()
{
  _DWORD *v0;
  uint64_t *v1;

  sub_216BC87C4(v1, v0);
}

uint64_t sub_216BC87B0()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BC88C4(v1, v0);
}

void sub_216BC87C4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13[2];
  _DWORD *v14;

  v14 = a2;
  v3 = a1[2];
  if (v3)
  {
    v13[0] = sub_216BA68EC(v3, (uint64_t *)&v14);
    v13[1] = v4;
    v12[0] = sub_216BA6950(a1[2]);
    v12[1] = v5;
    if (sub_216B50AF4(v13, (uint64_t)v12))
    {
      v6 = (uint64_t)v14;
      v7 = sub_216B1E600((uint64_t)v13);
      sub_216BC7528(a1, v6, *(float **)(v7 + 8));
      return;
    }
    a2 = v14;
  }
  sub_216BC75F4(a1, a2);
  sub_216BC767C(a1, (uint64_t)v14);
  v8 = sub_216B248A0(*a1, " ");
  v9 = sub_216BA6A7C((uint64_t)v14);
  sub_216B248E0((uint64_t)v8, v9, v10);
  sub_216BA6CA4(a1, (uint64_t)v14);
  if (sub_216B5EE7C((uint64_t)v14))
  {
    sub_216B248A0(*a1, " = ");
    v11 = sub_216B5EE7C((uint64_t)v14);
    sub_216BC774C(a1, v11);
  }
}

uint64_t sub_216BC88C4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (sub_216BA81D0((uint64_t)a2))
    sub_216B248A0(*a1, "const ");
  if (sub_216BA75CC((uint64_t)a2))
    sub_216BA8228(a2);
  v4 = sub_216B2037C((uint64_t)a2);
  sub_216BC719C(a1, v4);
  v10 = -1;
  v5 = sub_216B2037C((uint64_t)a2);
  if (sub_216BA7ABC(v5, &v10) && (sub_216BA7B18((uint64_t)a2) & 1) == 0)
    sub_216BA7B24(a1, v10);
  sub_216B248A0(*a1, " ");
  result = sub_216BA7D08((uint64_t)a2);
  if ((_DWORD)result)
  {
    v7 = *a1;
    v8 = sub_216BA6A7C((uint64_t)a2);
    sub_216B248E0(v7, v8, v9);
    result = sub_216BA7B18((uint64_t)a2);
    if ((_DWORD)result)
      return (uint64_t)sub_216BA7B24(a1, v10);
  }
  return result;
}

void **sub_216BC89D4(uint64_t *a1, _DWORD *a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 **v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  const void *v20[2];

  a1[5] = (uint64_t)a2;
  if (sub_216BA9DD0((uint64_t)a2))
    return sub_216BC8C74(a1, (uint64_t)a2);
  v5 = sub_216BA6A7C((uint64_t)a2);
  v7 = v6;
  sub_216B1E678((int)v20, "destCoord");
  result = (void **)sub_216B274F0(v5, v7, v20[0], (size_t)v20[1]);
  if ((result & 1) == 0)
  {
    sub_216B248A0(*a1, "static ");
    if (sub_216BA8240((uint64_t)a2))
      sub_216BA824C(a2);
    v8 = sub_216B939E0((uint64_t)a2);
    sub_216BC719C(a1, v8);
    v19 = 0;
    v9 = sub_216B939E0((uint64_t)a2);
    if (sub_216BA7ABC(v9, &v19))
      sub_216BA7B24(a1, v19);
    v10 = sub_216B248A0(*a1, " ");
    v11 = sub_216BA6A7C((uint64_t)a2);
    v13 = sub_216B248E0((uint64_t)v10, v11, v12);
    sub_216B248A0((uint64_t)v13, "(");
    v14 = (unsigned __int8 **)sub_216B262E0((uint64_t)(a2 + 4));
    v15 = sub_216BA8258((uint64_t)(a2 + 4));
    if (v14 != (unsigned __int8 **)v15)
    {
      v16 = (unsigned __int8 **)v15;
      v17 = v15 - (_QWORD)v14;
      do
      {
        sub_216BC7764(a1, *v14);
        if (v17 >= 9)
          sub_216B248A0(*a1, ", ");
        ++v14;
        v17 -= 8;
      }
      while (v14 != v16);
    }
    if (sub_216BA82B0(a2 + 4))
      sub_216B248A0(*a1, ", ");
    sub_216B248A0(*a1, "float2 _dc)");
    if (sub_216BA8288((uint64_t)a2))
    {
      sub_216B248A0(*a1, " ");
      v18 = (unsigned __int8 *)sub_216BA8288((uint64_t)a2);
      sub_216BC8F8C(a1, v18);
      return sub_216B248A0(*a1, "\n");
    }
    else
    {
      return sub_216BA8290(a1, 0);
    }
  }
  return result;
}

uint64_t sub_216BC8BF4(uint64_t a1)
{
  int v1;

  v1 = sub_216B4CBC4(a1);
  return sub_216BC74F8(v1);
}

void **sub_216BC8C0C(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!sub_216B2037C((uint64_t)a2))
    return (void **)sub_216BA83A4(a2);
  v4 = *a1;
  v5 = sub_216B2037C((uint64_t)a2);
  v6 = sub_216BA6A7C(v5);
  return sub_216B248E0(v4, v6, v7);
}

void **sub_216BC8C74(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;
  void **v29;
  unsigned __int8 *v30;
  uint64_t v32;
  const void *v33[2];
  _QWORD v34[2];

  v4 = sub_216B248A0(*a1, "kernel void ");
  v5 = sub_216BA6A7C(a2);
  sub_216B248E0((uint64_t)v4, v5, v6);
  v34[0] = sub_216BA6A7C(a2);
  v34[1] = v7;
  sub_216B1E678((int)v33, "main");
  if (sub_216B1E644((uint64_t)v34, v33[0], (size_t)v33[1]))
    sub_216B248A0(*a1, "MetalEntryPoint");
  sub_216B248A0(*a1, "(texture2d<");
  v32 = a2;
  v8 = sub_216B69B6C(a2);
  if (v8)
  {
    if (v8 != 1)
      goto LABEL_8;
    v9 = "half";
  }
  else
  {
    v9 = "float";
  }
  sub_216B248A0(*a1, v9);
LABEL_8:
  sub_216B248A0(*a1, ", access::write> outputTexture [[texture(0)]]");
  v10 = (uint64_t *)sub_216B1E600((uint64_t)(a1 + 3));
  v11 = sub_216B35430(a1 + 3);
  if (v10 != (uint64_t *)v11)
  {
    v12 = (uint64_t *)v11;
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v15 = *v10;
      v34[0] = sub_216B2037C(*v10);
      v16 = sub_216B1E600((uint64_t)v34);
      if (sub_216BA7EB0(v16))
        break;
LABEL_17:
      if (++v10 == v12)
        goto LABEL_18;
    }
    sub_216B248A0(*a1, ", \n");
    v34[0] = sub_216B2037C(v15);
    v17 = sub_216B1E600((uint64_t)v34);
    v18 = sub_216BA7EB0(v17);
    v19 = sub_216BA6A7C(v15);
    v21 = v20;
    sub_216B248A0(*a1, "texture2d<");
    v22 = sub_216BA7EB4(v18);
    if (v22)
    {
      if (v22 != 1)
      {
LABEL_16:
        sub_216B248A0(*a1, ", access::sample> ");
        v24 = sub_216B248E0(*a1, v19, v21);
        sub_216B248A0((uint64_t)v24, "_texture");
        v25 = sub_216B248A0(*a1, " [[ texture(");
        v26 = sub_216B248D8(v25, v14);
        sub_216B248A0((uint64_t)v26, ") ]]");
        sub_216B248A0(*a1, ", sampler ");
        v27 = sub_216B248E0(*a1, v19, v21);
        sub_216B248A0((uint64_t)v27, "_sampler");
        v28 = sub_216B248A0(*a1, " [[ sampler(");
        v29 = sub_216B248D8(v28, v13);
        sub_216B248A0((uint64_t)v29, ") ]]");
        ++v13;
        ++v14;
        goto LABEL_17;
      }
      v23 = "half";
    }
    else
    {
      v23 = "float";
    }
    sub_216B248A0(*a1, v23);
    goto LABEL_16;
  }
LABEL_18:
  sub_216B248A0(*a1, ",\n");
  sub_216B248A0(*a1, "constant Params &params [[ buffer(0) ]], ");
  sub_216B248A0(*a1, "uint2 gid [[ thread_position_in_grid ]])");
  if (!sub_216BA8288(v32))
    return sub_216BA8290(a1, 0);
  sub_216B248A0(*a1, " ");
  v30 = (unsigned __int8 *)sub_216BA8288(v32);
  sub_216BC8F8C(a1, v30);
  return sub_216B248A0(*a1, "\n");
}

void **sub_216BC8F8C(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    return (void **)sub_216BC8FA4(a1, a2);
  else
    return sub_216B248A0(*a1, " /* <none> */ ");
}

uint64_t sub_216BC8FA4(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t result;

  result = sub_216B8B400(a2);
  switch((int)result)
  {
    case 0:
      result = (uint64_t)sub_216BC90F8((uint64_t)a1, (uint64_t)a2);
      break;
    case 1:
      result = (uint64_t)sub_216BA8634(a1);
      break;
    case 2:
      result = sub_216BC93D4(a1, (uint64_t)a2);
      break;
    case 3:
      result = (uint64_t)sub_216BC93E0(a1, (uint64_t)a2);
      break;
    case 4:
      result = sub_216BC94D0(a1, (uint64_t)a2);
      break;
    case 5:
      result = (uint64_t)sub_216BC9534(a1, (uint64_t)a2);
      break;
    case 6:
      result = (uint64_t)sub_216BA87F4(a1);
      break;
    case 7:
      result = (uint64_t)sub_216BC9584(a1, (uint64_t)a2);
      break;
    case 8:
      result = (uint64_t)sub_216BC9688(a1, (uint64_t)a2);
      break;
    case 9:
      result = (uint64_t)sub_216BC9700(a1, (uint64_t)a2);
      break;
    case 10:
      result = (uint64_t)sub_216BA8A14(a1);
      break;
    case 11:
      result = (uint64_t)sub_216BA8A48(a1);
      break;
    case 13:
      result = (uint64_t)sub_216BC9794(a1, (uint64_t)a2);
      break;
    case 14:
      result = sub_216BC863C((uint64_t)a1, (uint64_t)a2);
      break;
    default:
      return result;
  }
  return result;
}

void **sub_216BC90F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  char *v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  sub_216B248A0(*(_QWORD *)a1, "{\n");
  if (sub_216BA9DD0(*(_QWORD *)(a1 + 40)) && !*(_BYTE *)(a1 + 56))
  {
    sub_216B248A0(*(_QWORD *)a1, "\n");
    sub_216B248A0(*(_QWORD *)a1, "  if (gid.x >= abs(params.outputRect.z) || gid.y >= abs(params.outputRect.w)) return;\n\n");
    sub_216B248A0(*(_QWORD *)a1, "  float2 _dc = static_cast<float2>(gid) + params.outputRect.xy + float2(0.5,0.5);\n"
      "  _dc = (float3(_dc.xy,1.0) * params.vertexTransform).xy;\n"
      "\n");
    sub_216B248A0(*(_QWORD *)a1, "  uint2 _wc = uint2(gid.x, gid.y + (params.outputRect.w < 0) * ((-params.outputRect.w-1)-2*gid.y));\n"
      "  _wc += static_cast<uint2>(params.outputRect.xy);\n"
      "\n");
    v4 = (uint64_t *)sub_216B1E600(a1 + 24);
    v5 = sub_216B35430((_QWORD *)(a1 + 24));
    if (v4 != (uint64_t *)v5)
    {
      v6 = (uint64_t *)v5;
      do
      {
        v7 = *v4;
        v36 = sub_216B2037C(*v4);
        v8 = sub_216B1E600((uint64_t)&v36);
        v9 = sub_216BA7EB0(v8);
        v10 = sub_216BA6A7C(v7);
        if (v9)
        {
          v12 = v10;
          v13 = v11;
          sub_216B248A0(*(_QWORD *)a1, "  ");
          sub_216B20C64(&v35, v9);
          sub_216BC719C((uint64_t *)a1, v35);
          v14 = sub_216B248A0(*(_QWORD *)a1, " ");
          v15 = sub_216B248E0((uint64_t)v14, v12, v13);
          sub_216B248A0((uint64_t)v15, " = ");
          v16 = sub_216BA7EC0(v9);
          if (v16 == 1)
          {
            v25 = sub_216B248A0(*(_QWORD *)a1, "{ ");
            v26 = sub_216B248E0((uint64_t)v25, v12, v13);
            v27 = sub_216B248A0((uint64_t)v26, "_texture, ");
            v28 = sub_216B248E0((uint64_t)v27, v12, v13);
            v23 = sub_216B248A0((uint64_t)v28, "_sampler");
            v24 = " };\n";
            goto LABEL_10;
          }
          if (!v16)
          {
            v17 = sub_216B248A0(*(_QWORD *)a1, "{ ");
            v18 = sub_216B248E0((uint64_t)v17, v12, v13);
            v19 = sub_216B248A0((uint64_t)v18, "_texture, ");
            v20 = sub_216B248E0((uint64_t)v19, v12, v13);
            v21 = sub_216B248A0((uint64_t)v20, "_sampler, ");
            v22 = sub_216B248A0((uint64_t)v21, "params.");
            v23 = sub_216B248E0((uint64_t)v22, v12, v13);
            v24 = "_m };\n";
LABEL_10:
            sub_216B248A0((uint64_t)v23, v24);
          }
        }
        ++v4;
      }
      while (v4 != v6);
    }
    sub_216B248A0(*(_QWORD *)a1, "\n");
    *(_BYTE *)(a1 + 56) = 1;
  }
  ++*(_DWORD *)(a1 + 8);
  v29 = a2 + 8;
  v30 = (uint64_t *)sub_216B262E0(a2 + 8);
  v31 = sub_216BA8B44(v29);
  if (v30 != (uint64_t *)v31)
  {
    v32 = (uint64_t *)v31;
    do
    {
      v33 = *v30++;
      sub_216BA7D54((void **)a1);
      sub_216BC8F8C(a1, v33);
      sub_216BA8B74((uint64_t *)a1, v33);
      sub_216B248A0(*(_QWORD *)a1, "\n");
    }
    while (v30 != v32);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

uint64_t sub_216BC93D4(_QWORD *a1, uint64_t a2)
{
  return sub_216BC6B20(a1, a2 + 8, 0);
}

void **sub_216BC93E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **result;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "if (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BC774C(a1, v4);
  }
  sub_216B248A0(*a1, ") ");
  if (sub_216B2037C(a2))
  {
    v5 = sub_216B2037C(a2);
    sub_216BC8F8C(a1, v5);
    v6 = sub_216B2037C(a2);
    sub_216BA8B74(a1, v6);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  result = (void **)sub_216B5EE7C(a2);
  if (result)
  {
    sub_216B248A0(*a1, " else ");
    v8 = sub_216B5EE7C(a2);
    sub_216BC8F8C(a1, v8);
    v9 = sub_216B5EE7C(a2);
    return sub_216BA8B74(a1, v9);
  }
  return result;
}

uint64_t sub_216BC94D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_216B248A0(*a1, "switch (");
  v4 = sub_216B1E67C(a2);
  sub_216BC774C(a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  return sub_216BC8F8C(a1, v5);
}

void **sub_216BC9534(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "case ");
  v4 = sub_216B5EE7C(a2);
  sub_216BC774C(a1, v4);
  return sub_216B248A0(*a1, ": ");
}

void **sub_216BC9584(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "for (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BC8F8C(a1, v4);
    v5 = sub_216B1E67C(a2);
    sub_216BA8B74(a1, v5);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  sub_216B248A0(*a1, " ");
  if (sub_216B2037C(a2))
  {
    v6 = sub_216B2037C(a2);
    sub_216BC8F8C(a1, v6);
  }
  sub_216BA8290(a1, 1);
  if (sub_216B5EE7C(a2))
  {
    v7 = sub_216B5EE7C(a2);
    sub_216BC774C(a1, v7);
  }
  sub_216B248A0(*a1, ") ");
  v8 = sub_216B27CB0(a2);
  sub_216BC8F8C(a1, v8);
  v9 = sub_216B27CB0(a2);
  return sub_216BA8B74(a1, v9);
}

void **sub_216BC9688(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "while (");
  v4 = sub_216B1E67C(a2);
  sub_216BC8F8C(a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  sub_216BC8F8C(a1, v5);
  v6 = sub_216B2037C(a2);
  return sub_216BA8B74(a1, v6);
}

void **sub_216BC9700(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "do ");
  v4 = sub_216B1E67C(a2);
  sub_216BC8F8C(a1, v4);
  v5 = sub_216B1E67C(a2);
  sub_216BA8B74(a1, v5);
  sub_216B248A0(*a1, " while (");
  v6 = sub_216B2037C(a2);
  sub_216BC774C(a1, v6);
  sub_216B248A0(*a1, ")");
  return sub_216BA8290(a1, 0);
}

void **sub_216BC9794(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "return");
  if (sub_216B1E67C(a2))
  {
    sub_216B248A0(*a1, " ");
    v4 = sub_216B1E67C(a2);
    sub_216BC774C(a1, v4);
  }
  return sub_216BA8290(a1, 0);
}

uint64_t sub_216BC97FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BC9824(a1, v2);
}

uint64_t sub_216BC9824(uint64_t a1, uint64_t a2)
{
  return sub_216BC982C(a1, a2, 0);
}

uint64_t sub_216BC982C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[89];
  int v22;
  BOOL v23;

  v6 = sub_216BA5ADC(a1);
  sub_216BC9928((uint64_t)v21, a2, v6);
  v21[85] = sub_216BC38D0(a1);
  v21[86] = v7;
  sub_216BC992C(v21);
  v22 = a3;
  v23 = (a3 & 0x10) != 0;
  v19 = sub_216BA5AE4(a1);
  v20 = v8;
  v9 = (uint64_t *)sub_216B1E600((uint64_t)&v19);
  v10 = sub_216B35430(&v19);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    do
    {
      v12 = *v9++;
      sub_216BC9A98(v21, v12, 1);
    }
    while (v9 != v11);
  }
  v19 = sub_216BA5BE0(a1);
  v20 = v13;
  v14 = (uint64_t *)sub_216B1E600((uint64_t)&v19);
  v15 = sub_216B35430(&v19);
  if (v14 != (uint64_t *)v15)
  {
    v16 = (uint64_t *)v15;
    do
    {
      v17 = *v14++;
      sub_216BC9A98(v21, v17, 1);
    }
    while (v14 != v16);
  }
  return sub_216BC9B6C((uint64_t)v21);
}

void **sub_216BC992C(uint64_t *a1)
{
  uint64_t *v2;
  void **result;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  void **v8;
  char *v9;
  void **v10;
  uint64_t v11;

  sub_216B248A0(*a1, "#define _V3_TO_V3(a) (((float4)(((float3)((a))),_dc.x)).xyz) \n#define FRACT(A) (fmin((A) - floor(A), 0x1.fffffep-1f))\n\ninline float  __attribute__((overloadable)) lessThan(float  x,float  y) { return (1.0f             - step(y,x)); }\n"
    "inline float2 __attribute__((overloadable)) lessThan(float  x,float2 y) { return (((float2)(1.0f)) - step(y,(float2)"
    "(x))); }\n"
    "inline float3 __attribute__((overloadable)) lessThan(float  x,float3 y) { return (((float3)(1.0f)) - step(y,(float3)"
    "(x))); }\n"
    "inline float4 __attribute__((overloadable)) lessThan(float  x,float4 y) { return (((float4)(1.0f)) - step(y,(float4)"
    "(x))); }\n"
    "inline float2 __attribute__((overloadable)) lessThan(float2 x,float2 y) { return ((float2)(1.0f)   - step(y,x)); }\n"
    "inline float3 __attribute__((overloadable)) lessThan(float3 x,float3 y) { return ((float3)(1.0f)   - step(y,x)); }\n"
    "inline float4 __attribute__((overloadable)) lessThan(float4 x,float4 y) { return ((float4)(1.0f)   - step(y,x)); }\n"
    "\n"
    "inline float  __attribute__((overloadable)) foslMix(float  x,float  y,float  a) { return mix(x,y,a); }\n"
    "inline float2 __attribute__((overloadable)) foslMix(float2 x,float2 y,float  a) { return mix(x,y,(float2)(a)); }\n"
    "inline float3 __attribute__((overloadable)) foslMix(float3 x,float3 y,float  a) { return mix(x,y,(float3)(a)); }\n"
    "inline float4 __attribute__((overloadable)) foslMix(float4 x,float4 y,float  a) { return mix(x,y,(float4)(a)); }\n"
    "inline float2 __attribute__((overloadable)) foslMix(float2 x,float2 y,float2 a) { return mix(x,y,a); }\n"
    "inline float3 __attribute__((overloadable)) foslMix(float3 x,float3 y,float3 a) { return mix(x,y,a); }\n"
    "inline float4 __attribute__((overloadable)) foslMix(float4 x,float4 y,float4 a) { return mix(x,y,a); }\n"
    "\n"
    "inline float  __attribute__((overloadable)) mod(float  x,float  y) { return x - y * floor(x / y); }\n"
    "inline float2 __attribute__((overloadable)) mod(float2 x,float  y) { return x - y * floor(x / y); }\n"
    "inline float2 __attribute__((overloadable)) mod(float2 x,float2 y) { return x - y * floor(x / y); }\n"
    "inline float3 __attribute__((overloadable)) mod(float3 x,float  y) { return x - y * floor(x / y); }\n"
    "inline float3 __attribute__((overloadable)) mod(float3 x,float3 y) { return x - y * floor(x / y); }\n"
    "inline float4 __attribute__((overloadable)) mod(float4 x,float  y) { return x - y * floor(x / y); }\n"
    "inline float4 __attribute__((overloadable)) mod(float4 x,float4 y) { return x - y * floor(x / y); }\n"
    "\n"
    "inline float2 __attribute__((overloadable)) matMultiply(float2 v,float4 m) {\n"
    "  float x = dot(v, (float2)(m.s0,m.s1));\n"
    "  float y = dot(v, (float2)(m.s2,m.s3));\n"
    "  return (float2)(x,y);\n"
    "}\n"
    "\n"
    "inline float3 __attribute__((overloadable)) matMultiply(float3 v,float16 m) {\n"
    "  float x = dot(v, (float3)(m.s0,m.s1,m.s2));\n"
    "  float y = dot(v, (float3)(m.s4,m.s5,m.s6));\n"
    "  float z = dot(v, (float3)(m.s8,m.s9,m.sa));\n"
    "  return (float3)(x,y,z);\n"
    "}\n"
    "\n"
    "inline float4 __attribute__((overloadable)) matMultiply(float4 v,float16 m) {\n"
    "  float x = dot(v, (float4)(m.s0,m.s1,m.s2,m.s3));\n"
    "  float y = dot(v, (float4)(m.s4,m.s5,m.s6,m.s7));\n"
    "  float z = dot(v, (float4)(m.s8,m.s9,m.sa,m.sb));\n"
    "  float w = dot(v, (float4)(m.sc,m.sd,m.se,m.sf));\n"
    "  return (float4)(x,y,z,w);\n"
    "}\n"
    "\n");
  v2 = (uint64_t *)sub_216B1E600((uint64_t)(a1 + 85));
  result = (void **)sub_216B35430(a1 + 85);
  if (v2 == (uint64_t *)result)
  {
    v6 = 0;
    v5 = 0;
LABEL_11:
    if ((v6 & 1) == 0)
      return result;
  }
  else
  {
    v4 = (uint64_t *)result;
    v5 = 0;
    v6 = 0;
    do
    {
      v11 = sub_216B2037C(*v2);
      v7 = sub_216B1E600((uint64_t)&v11);
      result = (void **)sub_216BA7EB0(v7);
      if (result)
      {
        result = (void **)sub_216BA7EC0((uint64_t)result);
        v5 |= (_DWORD)result == 0;
        v6 |= (_DWORD)result == 1;
      }
      if ((v5 & 1) != 0 && (v6 & 1) != 0)
      {
        sub_216B248A0(*a1, "inline float4 sample(read_only image2d_t image, sampler_t sampler, float2 p) {\n  return read_imagef(image, sampler, p);\n"
          "}\n"
          "\n"
          "inline float2 samplerTransform(float4 transform0, float4 transform1, float2 p) {\n"
          "  float x = dot((float4)(p, 1.0, 0.0), transform0);\n"
          "  float y = dot((float4)(p, 1.0, 0.0), transform1);\n"
          "  return (float2)(x,y);\n"
          "}\n"
          "\n"
          "inline float4 samplerExtent(float4 extent) {\n"
          "  return extent;\n"
          "}\n"
          "\n");
        goto LABEL_17;
      }
      ++v2;
    }
    while (v2 != v4);
    if ((v5 & 1) == 0)
      goto LABEL_11;
  }
  if ((v5 & 1) != 0)
    sub_216B248A0(*a1, "inline float4 sample(read_only image2d_t image, sampler_t sampler, float2 p) {\n  return read_imagef(image, sampler, p);\n"
      "}\n"
      "\n"
      "inline float2 samplerTransform(float4 transform0, float4 transform1, float2 p) {\n"
      "  float x = dot((float4)(p, 1.0, 0.0), transform0);\n"
      "  float y = dot((float4)(p, 1.0, 0.0), transform1);\n"
      "  return (float2)(x,y);\n"
      "}\n"
      "\n"
      "inline float4 samplerExtent(float4 extent) {\n"
      "  return extent;\n"
      "}\n"
      "\n");
  if ((v6 & 1) != 0)
LABEL_17:
    sub_216B248A0(*a1, "inline float4 texture2D(read_only image2d_t image, sampler_t sampler, float2 p) {\n  return read_imagef(image, sampler, p);\n"
      "}\n"
      "\n");
  if (sub_216BC41F8(a1[88]))
    sub_216B248A0(*a1, "inline float4 __attribute__((overloadable)) _sampler_srgb_to_linear(float4 s, float2 _dc) {\n  s.xyz = _V3_TO_V3(_V3_TO_V3(_V3_TO_V3(sign(s.xyz)) * _V3_TO_V3(foslMix(_V3_TO_V3(_V3_TO_V3(fabs(s.xyz)) * 7.739938e-02f), _V3_TO_V3(__ci_gamma_scalar_SPI(_V3_TO_V3((_V3_TO_V3(_V3_TO_V3(fabs(s.xyz)) * 9.478673e-01f)) + 5.213270e-02f), 2.400000e+00f)), _V3_TO_V3(step(4.045000e-02f, _V3_TO_V3(fabs(s.xyz))))))));\n"
      "  return s;\n"
      "}\n"
      "\n");
  result = (void **)sub_216BC4200(a1[88]);
  if (result)
  {
    v8 = sub_216B248A0(*a1, "inline float4 __attribute__((overloadable)) _sampler_swizzle(float4 s) {\n  return ");
    v9 = (char *)sub_216BC4200(a1[88]);
    v10 = sub_216B248A0((uint64_t)v8, v9);
    return sub_216B248A0((uint64_t)v10, ";\n}\n\n");
  }
  return result;
}

uint64_t sub_216BC9A98(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;
  _QWORD v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  sub_216B85C18(v13);
  v6 = (uint64_t *)sub_216BA9C60(a2);
  v7 = sub_216BA9C64(a2);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    do
    {
      v9 = *v6++;
      v12 = v9;
      sub_216B268AC((uint64_t)v13, &v12);
    }
    while (v6 != v8);
  }
  if (!sub_216B29084(v13))
  {
    sub_216B2D798(v11, v13);
    sub_216BC9DC0(a1, v11[0], v11[1], a3);
  }
  return sub_216B1FF6C(v13);
}

uint64_t sub_216BC9B70(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t i;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t j;
  uint64_t v24[2];
  uint64_t v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[89];
  int v30;
  BOOL v31;
  _BYTE v32[56];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = sub_216BA5ADC(a1);
  sub_216BC9928((uint64_t)v29, a2, v6);
  v7 = sub_216BA5E2C(a1);
  v29[88] = sub_216BA9D08(a1);
  v29[85] = sub_216BC38D0(a1);
  v29[86] = v8;
  sub_216BC992C(v29);
  v30 = a3;
  v31 = (a3 & 0x10) != 0;
  v27 = sub_216BA5AE4(a1);
  v28 = v9;
  v10 = (uint64_t *)sub_216B1E600((uint64_t)&v27);
  v11 = sub_216B35430(&v27);
  if (v10 != (uint64_t *)v11)
  {
    v12 = (uint64_t *)v11;
    do
    {
      v13 = *v10;
      sub_216B2D768(v32);
      v14 = (uint64_t *)sub_216BA5E50(v13);
      for (i = sub_216BA5E54(v13); v14 != (uint64_t *)i; ++v14)
      {
        v26 = 0;
        v26 = *v14;
        if (sub_216BA5ED4(v7, v26))
          sub_216B268AC((uint64_t)v32, &v26);
      }
      if (sub_216B26878((uint64_t)v32))
      {
        sub_216B2D798(v25, v32);
        sub_216BC9DC0(v29, v25[0], v25[1], 1);
      }
      sub_216B1FF6C(v32);
      ++v10;
    }
    while (v10 != v12);
  }
  v27 = sub_216BA5BE0(a1);
  v28 = v16;
  v17 = (uint64_t *)sub_216B1E600((uint64_t)&v27);
  v18 = sub_216B35430(&v27);
  if (v17 != (uint64_t *)v18)
  {
    v19 = (uint64_t *)v18;
    do
    {
      v20 = *v17;
      sub_216B2D768(v32);
      v21 = (uint64_t *)sub_216BA5E50(v20);
      for (j = sub_216BA5E54(v20); v21 != (uint64_t *)j; ++v21)
      {
        v26 = 0;
        v26 = *v21;
        if (sub_216BA5ED4(v7, v26))
          sub_216B268AC((uint64_t)v32, &v26);
      }
      if (sub_216B26878((uint64_t)v32))
      {
        sub_216B2D798(v24, v32);
        sub_216BC9DC0(v29, v24[0], v24[1], 1);
      }
      sub_216B1FF6C(v32);
      ++v17;
    }
    while (v17 != v19);
  }
  return sub_216BC9B6C((uint64_t)v29);
}

void sub_216BC9DC0(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  char v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  unsigned __int16 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t v61[2];
  unsigned __int8 *v62;
  void *v63;
  char v64;
  _QWORD v65[2];

  v65[0] = a2;
  v65[1] = a3;
  v63 = a1;
  v64 = a4;
  if (*((_DWORD *)a1 + 2))
  {
    v5 = sub_216B1E600((uint64_t)v65);
    if (sub_216BAA0D0(v5))
    {
      v6 = (uint64_t *)sub_216B1E600((uint64_t)v65);
      v7 = sub_216B35430(v65);
      if (v6 == (uint64_t *)v7)
        return;
      v8 = (uint64_t *)v7;
      v9 = 0;
      v10 = 1;
      while (1)
      {
        v11 = *v6;
        v62 = 0;
        v62 = (unsigned __int8 *)sub_216B3DB48(v11);
        v12 = a1[2];
        if (!v12)
          break;
        v61[0] = sub_216BA68EC(v12, (uint64_t *)&v62);
        v61[1] = v13;
        v60[0] = sub_216BA6950(a1[2]);
        v60[1] = v14;
        if (!sub_216B50AF4(v61, (uint64_t)v60))
          break;
        v15 = v62;
        v16 = sub_216B1E600((uint64_t)v61);
        sub_216BCA3AC(a1, (uint64_t)v15, *(float **)(v16 + 8));
        sub_216BA8290(a1, 0);
        sub_216BC75D4(&v63);
LABEL_24:
        if (++v6 == v8)
        {
          if ((v10 & 1) == 0)
          {
            sub_216BA8290(a1, 0);
            sub_216BC75D4(&v63);
          }
          if (((*((_BYTE *)a1 + 720) != 0) & v9) == 1)
          {
            sub_216B248A0(*a1, "\n");
            v25 = (uint64_t *)sub_216B1E600((uint64_t)v65);
            v26 = sub_216B35430(v65);
            if (v25 != (uint64_t *)v26)
            {
              v27 = (uint64_t *)v26;
              do
              {
                v28 = (unsigned __int8 *)sub_216B3DB48(*v25);
                if (sub_216B5EE7C((uint64_t)v28) && sub_216BCA458(v28))
                {
                  sub_216BA7D54((void **)a1);
                  v29 = *a1;
                  v30 = sub_216BA6A7C((uint64_t)v28);
                  v32 = sub_216B248E0(v29, v30, v31);
                  sub_216B248A0((uint64_t)v32, " = ((float4)(");
                  v33 = sub_216B5EE7C((uint64_t)v28);
                  v34 = sub_216BCA744(v33);
                  if (v34 && (v35 = v34 + 8, sub_216BA9AFC(v34 + 8) == 3))
                  {
                    v36 = (uint64_t *)sub_216B262E0(v35);
                    v37 = sub_216BA9ACC(v35);
                    while (v36 != (uint64_t *)v37)
                    {
                      v38 = *v36++;
                      sub_216BCA604((uint64_t)a1, v38);
                      sub_216B248A0(*a1, ", ");
                    }
                    v39 = *(_QWORD *)sub_216BCA77C(v35);
                    v40 = "))";
                  }
                  else
                  {
                    v39 = sub_216B5EE7C((uint64_t)v28);
                    v40 = ").xyzz)";
                  }
                  sub_216BCA604((uint64_t)a1, v39);
                  sub_216B248A0(*a1, v40);
                  sub_216BA8290(a1, 0);
                  sub_216B248A0(*a1, "\n");
                }
                ++v25;
              }
              while (v25 != v27);
            }
          }
          return;
        }
      }
      if (*((_BYTE *)a1 + 720) && sub_216BCA458(v62))
      {
        sub_216B5F890((uint64_t)(a1 + 73), (uint64_t)v62);
        v17 = 1;
        v9 = 1;
        if ((v10 & 1) == 0)
        {
LABEL_11:
          v18 = *a1;
          v19 = ",";
          goto LABEL_17;
        }
      }
      else
      {
        v17 = 0;
        if ((v10 & 1) == 0)
          goto LABEL_11;
      }
      sub_216BCA4AC(a1, v62);
      v20 = v17 ^ 1;
      if (!*((_BYTE *)a1 + 720))
        v20 = 1;
      if ((v20 & 1) != 0)
      {
        sub_216BCA534(a1, (uint64_t)v62);
        goto LABEL_19;
      }
      v18 = *a1;
      v19 = "float4";
LABEL_17:
      sub_216B248A0(v18, v19);
LABEL_19:
      v21 = sub_216B248A0(*a1, " ");
      v22 = sub_216BA6A7C((uint64_t)v62);
      sub_216B248E0((uint64_t)v21, v22, v23);
      sub_216BA6CA4(a1, (uint64_t)v62);
      if (sub_216B5EE7C((uint64_t)v62))
      {
        sub_216B248A0(*a1, " = ");
        if (v17)
        {
          sub_216B248A0(*a1, "(float4)(0.0f)");
        }
        else
        {
          v24 = sub_216B5EE7C((uint64_t)v62);
          sub_216BCA604((uint64_t)a1, v24);
        }
      }
      v10 = 0;
      goto LABEL_24;
    }
  }
  v41 = sub_216B1E600((uint64_t)v65);
  v42 = sub_216BAA0D4(v41);
  v43 = (uint64_t *)sub_216B1E600((uint64_t)v65);
  v44 = sub_216B35430(v65);
  v45 = (uint64_t *)v44;
  v46 = v43 == (uint64_t *)v44;
  if (v42)
  {
    if (v43 != (uint64_t *)v44)
    {
      v47 = 1;
      do
      {
        v48 = *v43;
        if ((v47 & 1) == 0)
          sub_216B248A0(*a1, ",");
        sub_216B248A0(*a1, " ");
        v49 = (unsigned __int16 *)sub_216B3DB48(v48);
        if (sub_216B2037C((uint64_t)v49))
        {
          v50 = *a1;
          v51 = sub_216B2037C((uint64_t)v49);
          v52 = sub_216BA6A7C(v51);
          sub_216B248E0(v50, v52, v53);
        }
        else
        {
          v54 = sub_216BA83A4(v49);
          sub_216BA8384(a1, v54);
        }
        v47 = 0;
        ++v43;
      }
      while (v43 != v45);
    }
    sub_216BA8290(a1, 0);
LABEL_64:
    sub_216BC75D4(&v63);
    return;
  }
  while (!v46)
  {
    v55 = (unsigned __int8 *)*v43;
    v61[0] = *v43;
    if (!*((_DWORD *)a1 + 2))
    {
      if ((sub_216BAA0D0(v61) & 1) != 0)
        goto LABEL_56;
      v55 = (unsigned __int8 *)v61[0];
    }
    sub_216BCA794(a1, v55);
LABEL_56:
    v46 = ++v43 == v45;
  }
  if (*((_DWORD *)a1 + 2))
  {
    v56 = sub_216B1E600((uint64_t)v65);
    if ((sub_216BA9DCC(v56) & 1) == 0)
    {
      v57 = sub_216B1E600((uint64_t)v65);
      if ((sub_216BA9E30(v57) & 1) == 0)
      {
        v58 = sub_216B1E600((uint64_t)v65);
        if ((sub_216BA9E34(v58) & 1) == 0)
          sub_216BA8290(a1, 0);
      }
    }
    if (*((_DWORD *)a1 + 2))
      goto LABEL_64;
  }
  v59 = sub_216B1E600((uint64_t)v65);
  if ((sub_216BAA0D0(v59) & 1) == 0)
    goto LABEL_64;
}

uint64_t sub_216BCA300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = a3;
  sub_216BC41E4(a1 + 24);
  *(_OWORD *)(a1 + 568) = 0u;
  sub_216BAC9C4(a1 + 584);
  sub_216B26D14((_QWORD *)(a1 + 680));
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_BYTE *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 721) = 16777217;
  return a1;
}

uint64_t sub_216BCA37C(uint64_t a1)
{
  sub_216B9B960(a1 + 584);
  sub_216BC4230(a1 + 24);
  return a1;
}

void **sub_216BCA3AC(uint64_t *a1, uint64_t a2, float *a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "const ");
  sub_216BCA534(a1, a2);
  v6 = sub_216B248A0(*a1, " ");
  v7 = sub_216BA6A7C(a2);
  sub_216B248E0((uint64_t)v6, v7, v8);
  sub_216BA6CA4(a1, a2);
  sub_216B248A0(*a1, " = ");
  v9 = sub_216B2037C(a2);
  return sub_216BA6ED4(a3, v9, (void **)*a1);
}

uint64_t sub_216BCA458(unsigned __int8 *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_216BAD120(a1);
  if ((_DWORD)result)
  {
    v4 = sub_216BAB580(a1);
    v3 = sub_216B1E600((uint64_t)&v4);
    result = sub_216BA7ED0(v3);
    if (result)
      return sub_216BA7EA4(result) == 9;
  }
  return result;
}

uint64_t sub_216BCA4AC(uint64_t *a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t result;

  v4 = sub_216B387B8((uint64_t)a2);
  sub_216BC74F8(v4);
  sub_216BA75E4(a2);
  v5 = sub_216BA75F0(a2) - 2;
  if (v5 <= 6 && ((0x69u >> v5) & 1) != 0)
    sub_216B248A0(*a1, off_24D605BA8[v5]);
  result = sub_216B5E120((uint64_t)a2);
  if ((_DWORD)result)
    return sub_216BA7620(a2);
  return result;
}

uint64_t sub_216BCA534(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v13 = sub_216B2037C(a2);
  v4 = sub_216B1E600((uint64_t)&v13);
  v5 = sub_216BA76B8(v4);
  if (v5)
  {
    v6 = sub_216B1E67C(v5);
    sub_216BCA7AC(a1, v6, a2);
  }
  else
  {
    v13 = sub_216B2037C(a2);
    v7 = sub_216B1E600((uint64_t)&v13);
    v8 = sub_216BA771C(v7);
    if (v8)
    {
      v9 = (_DWORD *)sub_216B1E67C(v8);
      sub_216BCA80C((uint64_t)a1, v9);
    }
    else
    {
      v10 = sub_216B2037C(a2);
      sub_216BCA904(a1, v10);
    }
  }
  LODWORD(v13) = 0;
  v11 = sub_216B2037C(a2);
  result = sub_216BA7ABC(v11, &v13);
  if ((_DWORD)result)
  {
    result = sub_216BA7B18(a2);
    if ((result & 1) == 0)
      return (uint64_t)sub_216BA7B24(a1, v13);
  }
  return result;
}

void sub_216BCA604(uint64_t a1, uint64_t a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v7 = a2;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 720))
      v3 = sub_216BCAC20(a2);
    else
      v3 = 0;
    if ((sub_216BA9898(&v7) & 1) != 0 || sub_216BAAF68(v7) == 1)
      v3 = 0;
    if (sub_216BA9898(&v7))
      *(_BYTE *)(a1 + 721) = 0;
    if (v3)
    {
      if (*(_BYTE *)(a1 + 721) && !*(_BYTE *)(a1 + 722))
      {
        if (*(_QWORD *)(a1 + 568) == v7 && !*(_BYTE *)(a1 + 723))
          v4 = "((float4)(";
        else
          v4 = "_V3_TO_V3(";
        sub_216B248A0(*(_QWORD *)a1, v4);
      }
      sub_216BCAC5C((uint64_t *)a1, v7);
      if (*(_BYTE *)(a1 + 721) && !*(_BYTE *)(a1 + 722))
      {
        if (*(_QWORD *)(a1 + 568) == v7 && !*(_BYTE *)(a1 + 723))
        {
          v5 = *(_QWORD *)a1;
          v6 = ").xyzz)";
        }
        else
        {
          v5 = *(_QWORD *)a1;
          v6 = ")";
        }
        sub_216B248A0(v5, v6);
      }
    }
    else
    {
      sub_216BCAC5C((uint64_t *)a1, v7);
    }
  }
  else
  {
    sub_216B248A0(*(_QWORD *)a1, " /* <none> */ ");
  }
}

uint64_t sub_216BCA744(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAB6B0(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BCA77C(uint64_t a1)
{
  return sub_216BA9ACC(a1) - 8;
}

void sub_216BCA794(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    sub_216BCC7E4((uint64_t)a1, a2);
  else
    sub_216B248A0(*a1, " /* <none> */ ");
}

void **sub_216BCA7AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_216BA7C00(a3))
    return sub_216BCAB24((uint64_t)a1, a2);
  v6 = *a1;
  v7 = sub_216BA6A7C(a2);
  return sub_216B248E0(v6, v7, v8);
}

void **sub_216BCA80C(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = sub_216B34190((uint64_t)a2);
  sub_216BC74F8(v4);
  sub_216BA7E50(a2);
  sub_216B248A0(*(_QWORD *)a1, "// uniform ");
  v5 = *(_QWORD *)a1;
  v6 = sub_216BA6A7C((uint64_t)a2);
  sub_216B248E0(v5, v6, v7);
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v8 = (uint64_t)(a2 + 4);
  v9 = (uint64_t *)sub_216B262E0((uint64_t)(a2 + 4));
  v10 = sub_216BA7E5C(v8);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    do
    {
      v12 = *v9++;
      sub_216BA7D54((void **)a1);
      sub_216BC9A98(a1, v12, 1);
    }
    while (v9 != v11);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

void **sub_216BCA904(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void **result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void **v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  if (!sub_216B1E600((uint64_t)&v39))
  {
    v9 = *a1;
    v8 = " /* <> */ ";
    return sub_216B248A0(v9, v8);
  }
  v3 = sub_216B1E600((uint64_t)&v39);
  v4 = sub_216BA7220(v3);
  if (v4)
  {
    v5 = v4;
    v6 = sub_216BA7EA4(v4);
    v7 = *a1;
    if (v6 == 4)
    {
      v8 = "float";
      v9 = v7;
      return sub_216B248A0(v9, v8);
    }
    v18 = v5;
    goto LABEL_10;
  }
  v11 = sub_216B1E600((uint64_t)&v39);
  v12 = sub_216BA7040(v11);
  if (v12)
  {
    v13 = v12;
    v14 = sub_216B1E67C(v12);
    v15 = sub_216BA7EA4(v14);
    sub_216B248A0(*a1, off_24D605BE0[v15 - 3]);
    v16 = (void **)*a1;
    v17 = sub_216BA734C(v13);
    return sub_216B248D8(v16, v17);
  }
  v21 = sub_216B1E600((uint64_t)&v39);
  v22 = sub_216BA710C(v21);
  if (v22)
  {
    v23 = v22;
    sub_216B248A0(*a1, "float");
    result = (void **)sub_216BC1310(v23);
    if ((_DWORD)result == 16 || (_DWORD)result == 9)
    {
      v24 = (void **)*a1;
      v25 = 16;
      return sub_216B2E0F8(v24, v25);
    }
    if ((_DWORD)result == 4)
    {
      v24 = (void **)*a1;
      v25 = 4;
      return sub_216B2E0F8(v24, v25);
    }
  }
  else
  {
    v26 = sub_216B1E600((uint64_t)&v39);
    result = (void **)sub_216BA7EB0(v26);
    if (!result)
    {
      v27 = sub_216B1E600((uint64_t)&v39);
      if (sub_216BA7ECC(v27))
      {
        v9 = *a1;
        v8 = "void";
        return sub_216B248A0(v9, v8);
      }
      v28 = sub_216B1E600((uint64_t)&v39);
      v18 = sub_216BA7ED0(v28);
      if (!v18)
      {
        v29 = sub_216B1E600((uint64_t)&v39);
        v30 = sub_216BA7ED4(v29);
        if (v30)
        {
          v31 = sub_216B1E67C(v30);
        }
        else
        {
          v32 = sub_216B1E600((uint64_t)&v39);
          v33 = sub_216BA76B8(v32);
          if (v33)
          {
            v7 = *a1;
            v19 = sub_216BD3048(v33);
            return sub_216B248E0(v7, v19, v20);
          }
          v34 = sub_216B1E600((uint64_t)&v39);
          v35 = sub_216BA771C(v34);
          if (v35)
          {
            v36 = (_DWORD *)sub_216B1E67C(v35);
            return sub_216BCA80C((uint64_t)a1, v36);
          }
          v37 = sub_216B1E600((uint64_t)&v39);
          v38 = sub_216BA7ED8(v37);
          if (!v38)
          {
            v9 = *a1;
            v8 = " /* <unknown> */ ";
            return sub_216B248A0(v9, v8);
          }
          v31 = sub_216B2037C(v38);
        }
        return (void **)sub_216BCA904(a1, v31);
      }
      v7 = *a1;
LABEL_10:
      v19 = sub_216BD37EC(v18);
      return sub_216B248E0(v7, v19, v20);
    }
  }
  return result;
}

void **sub_216BCAB24(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_216B248A0(*(_QWORD *)a1, "struct");
  if (sub_216BA7D08(a2))
  {
    v4 = sub_216B248A0(*(_QWORD *)a1, " ");
    v5 = sub_216BA6A7C(a2);
    sub_216B248E0((uint64_t)v4, v5, v6);
  }
  sub_216B248A0(*(_QWORD *)a1, " {\n");
  ++*(_DWORD *)(a1 + 8);
  v7 = a2 + 16;
  v8 = (uint64_t *)sub_216B262E0(a2 + 16);
  v9 = sub_216BA7D24(v7);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = *v8++;
      sub_216BA7D54((void **)a1);
      sub_216BC9A98(a1, v11, 1);
    }
    while (v8 != v10);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

uint64_t sub_216BCAC20(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v3 = sub_216BAB358(a1);
  v1 = sub_216B1E600((uint64_t)&v3);
  result = sub_216BA7ED0(v1);
  if (result)
    return sub_216BA7EA4(result) == 9;
  return result;
}

void sub_216BCAC5C(uint64_t *a1, uint64_t a2)
{
  switch(sub_216B9E3DC(a2))
  {
    case 0u:
      sub_216BA8E38(a1, a2);
      break;
    case 1u:
      sub_216BA8E7C(a1, a2);
      break;
    case 2u:
      sub_216BA8ECC(a1, a2);
      break;
    case 3u:
      sub_216BC7AE8(a1, a2);
      break;
    case 4u:
      sub_216BA8F0C(a1, a2);
      break;
    case 5u:
      sub_216BCAE70(a1, a2);
      break;
    case 6u:
      sub_216BCAEFC((uint64_t)a1, a2);
      break;
    case 7u:
      sub_216BCB094((uint64_t)a1, a2);
      break;
    case 8u:
      sub_216BCB1B0((uint64_t)a1, a2);
      break;
    case 9u:
      sub_216BA91CC(a1, a2);
      break;
    case 0xAu:
      sub_216BA91F8(a2);
      break;
    case 0xBu:
      sub_216BCB2D0((uint64_t)a1, a2);
      break;
    case 0xCu:
      sub_216BCB3A0(a1, a2);
      break;
    case 0xDu:
    case 0xEu:
      sub_216BCB5A4(a1, a2);
      break;
    case 0xFu:
      sub_216BCB608(a1, a2);
      break;
    case 0x10u:
      sub_216BCB744(a1, a2);
      break;
    case 0x11u:
      sub_216BCB7A8(a1, a2);
      break;
    case 0x12u:
      sub_216BCB7E4((uint64_t)a1, a2);
      break;
    case 0x13u:
      sub_216BCBAFC((uint64_t)a1, a2);
      break;
    case 0x14u:
      sub_216BCC324(a1, a2);
      break;
    case 0x15u:
    case 0x16u:
      sub_216BCC560((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

uint64_t sub_216BCAE70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;

  if (sub_216BA9708(a2))
  {
    v4 = sub_216B2037C(a2);
    sub_216BCC58C((uint64_t)a1, v4);
  }
  v5 = sub_216BA9790(a2);
  if (v5 <= 6)
    sub_216B248A0(*a1, off_24D605C08[v5]);
  result = sub_216BA9708(a2);
  if ((result & 1) == 0)
  {
    v7 = sub_216B2037C(a2);
    return (uint64_t)sub_216BCC58C((uint64_t)a1, v7);
  }
  return result;
}

void **sub_216BCAEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  char v10;
  char *v11;
  uint64_t v12;
  void **result;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_216B5EE7C(a2);
  if (sub_216BA9A9C(a2) == 20
    && (v15 = sub_216BAB358(v4), v5 = sub_216B1E600((uint64_t)&v15), sub_216BA710C(v5)))
  {
    sub_216B248A0(*(_QWORD *)a1, "matMultiply(");
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = sub_216B2037C(a2);
  sub_216BCC58C(a1, v7);
  if ((v6 & 1) == 0)
    sub_216B248A0(*(_QWORD *)a1, " ");
  v8 = sub_216BA9A9C(a2);
  v9 = sub_216B9E3DC(v4);
  if (v8 == 19)
  {
    v10 = *(_BYTE *)(a1 + 716) & (v9 != 0);
    if (v10)
      v8 = 20;
    else
      v8 = 19;
    if ((v6 & 1) == 0)
      goto LABEL_12;
LABEL_16:
    v11 = ", ";
    goto LABEL_17;
  }
  v10 = 0;
  if ((v6 & 1) != 0)
    goto LABEL_16;
LABEL_12:
  if (v8 <= 0x14)
    sub_216B248A0(*(_QWORD *)a1, off_24D605C40[v8]);
  v11 = " ";
LABEL_17:
  sub_216B248A0(*(_QWORD *)a1, v11);
  if ((v10 & 1) == 0)
  {
    v14 = sub_216B5EE7C(a2);
    result = sub_216BCC58C(a1, v14);
    if (!v6)
      return result;
    return sub_216B248A0(*(_QWORD *)a1, ")");
  }
  sub_216B248A0(*(_QWORD *)a1, "half_recip(");
  v12 = sub_216B5EE7C(a2);
  sub_216BCC58C(a1, v12);
  result = sub_216B248A0(*(_QWORD *)a1, ")");
  if (v6)
    return sub_216B248A0(*(_QWORD *)a1, ")");
  return result;
}

void **sub_216BCB094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_216B2037C(a2);
  sub_216BCC58C(a1, v4);
  sub_216B248A0(*(_QWORD *)a1, " ? ");
  if (*(_BYTE *)(a1 + 720) && (v5 = sub_216B5EE7C(a2), sub_216BCAC20(v5)))
  {
    sub_216B248A0(*(_QWORD *)a1, " (((float4)((");
    v6 = sub_216B5EE7C(a2);
    sub_216BCC58C(a1, v6);
    sub_216B248A0(*(_QWORD *)a1, "), _dc.x)).xyz)");
    sub_216B248A0(*(_QWORD *)a1, " : ");
    sub_216B248A0(*(_QWORD *)a1, " (((float4)((");
    v7 = sub_216B27CB0(a2);
    sub_216BCC58C(a1, v7);
    return sub_216B248A0(*(_QWORD *)a1, "), _dc.y)).xyz)");
  }
  else
  {
    v9 = sub_216B5EE7C(a2);
    sub_216BCC58C(a1, v9);
    sub_216B248A0(*(_QWORD *)a1, " : ");
    v10 = sub_216B27CB0(a2);
    return sub_216BCC58C(a1, v10);
  }
}

void **sub_216BCB1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v4 = sub_216B1E67C(a2);
  v5 = sub_216B2037C(a2);
  v6 = sub_216BC66B4(v4);
  if (v6 && sub_216BA9AB4(v6) - 1 < 2)
  {
    sub_216B248A0(*(_QWORD *)a1, "write_imagef(out, _writeLoc, ");
    *(_WORD *)(a1 + 721) = 1;
    sub_216BCA604(a1, v5);
    return sub_216B248A0(*(_QWORD *)a1, ")");
  }
  else
  {
    if (*(_BYTE *)(a1 + 720) && v4 && sub_216BCAC20(v4))
      *(_BYTE *)(a1 + 721) = 0;
    sub_216BCA604(a1, v4);
    sub_216B248A0(*(_QWORD *)a1, " ");
    *(_WORD *)(a1 + 721) = 1;
    v8 = sub_216BA9AA8(a2);
    if (v8 < 0xC)
      sub_216B248A0(*(_QWORD *)a1, off_24D605CE8[v8]);
    sub_216B248A0(*(_QWORD *)a1, " ");
    return (void **)sub_216BCA604(a1, v5);
  }
}

void **sub_216BCB2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_216B1E67C(a2);
  if (*(_BYTE *)(a1 + 720)
    && (v5 = v4, sub_216BA9FAC(a1 + 584, v4))
    && *(_QWORD *)(a1 + 576) != a2
    && *(_BYTE *)(a1 + 724))
  {
    v6 = sub_216B248A0(*(_QWORD *)a1, "((");
    v7 = sub_216BA6A7C(v5);
    v9 = sub_216B248E0((uint64_t)v6, v7, v8);
    return sub_216B248A0((uint64_t)v9, ").xyz)");
  }
  else
  {
    v11 = *(_QWORD *)a1;
    v12 = sub_216B1E67C(a2);
    v13 = sub_216BA6A7C(v12);
    return sub_216B248E0(v11, v13, v14);
  }
}

void **sub_216BCB3A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t i;
  uint64_t j;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  sub_216B248A0(*a1, "(");
  v4 = sub_216B2037C(a2);
  sub_216BCA904(a1, v4);
  sub_216B248A0(*a1, ")");
  v23 = 0;
  v5 = sub_216B2037C(a2);
  if (sub_216BA7ABC(v5, &v23))
    sub_216BA7B24(a1, v23);
  v22 = sub_216B2037C(a2);
  v6 = sub_216B1E600((uint64_t)&v22);
  v7 = sub_216BA710C(v6);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = sub_216B262E0(a2 + 8);
  v10 = sub_216BA9ACC(a2 + 8);
  if (sub_216B2F408(v9, v10) == 1)
  {
    v11 = (_QWORD *)sub_216B262E0(a2 + 8);
    return (void **)sub_216BCA604(a1, *v11);
  }
  if (sub_216BC1310(v8) == 9)
  {
    sub_216B248A0(*a1, "(");
    v13 = sub_216B262E0(a2 + 8);
    for (i = 0; i != 3; ++i)
    {
      for (j = 0; j != 24; j += 8)
      {
        sub_216BCA604(a1, *(_QWORD *)(v13 + j));
        sub_216B248A0(*a1, ", ");
      }
      sub_216B248A0(*a1, "0.0, ");
      v13 += 24;
    }
    v16 = *a1;
    v17 = "0.0, 0.0, 0.0, 0.0)";
  }
  else
  {
LABEL_12:
    sub_216B248A0(*a1, "(");
    v18 = a2 + 8;
    v19 = (_QWORD *)sub_216B262E0(v18);
    v20 = v19 + 1;
    sub_216BCA604(a1, *v19);
    while (v20 != (uint64_t *)sub_216BA9ACC(v18))
    {
      sub_216B248A0(*a1, ", ");
      v21 = *v20++;
      sub_216BCA604(a1, v21);
    }
    v16 = *a1;
    v17 = ")";
  }
  return sub_216B248A0(v16, v17);
}

void **sub_216BCB5A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_216B2037C(a2);
  sub_216BCC58C((uint64_t)a1, v4);
  v5 = sub_216B248A0(*a1, ".");
  v6 = sub_216BA9B14(a2);
  return sub_216B248E0((uint64_t)v5, v6, v7);
}

void sub_216BCB608(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unsigned __int8 v9;
  void **v10;
  _QWORD v11[2];

  a1[72] = sub_216B2037C(a2);
  v4 = sub_216B2037C(a2);
  sub_216BCC58C((uint64_t)a1, v4);
  a1[72] = 0;
  v11[0] = sub_216BA9B14(a2);
  v11[1] = v5;
  if (sub_216B1E67C((uint64_t)v11))
  {
    v6 = sub_216B1E67C((uint64_t)v11);
    v7 = (char *)malloc_type_malloc(v6 + 1, 0x100004077774924uLL);
    if (v7 && sub_216B1E67C((uint64_t)v11))
    {
      v8 = 0;
      do
      {
        v9 = sub_216B26288(v11, v8);
        if (v9 > 0x66u)
        {
          if (v9 == 114)
          {
            v9 = 120;
          }
          else if (v9 == 103)
          {
            v9 = 121;
          }
        }
        else if (v9 == 97)
        {
          v9 = 119;
        }
        else if (v9 == 98)
        {
          v9 = 122;
        }
        v7[v8++] = v9;
      }
      while (v8 < sub_216B1E67C((uint64_t)v11));
    }
    v7[sub_216B1E67C((uint64_t)v11)] = 0;
    v10 = sub_216B248A0(*a1, ".");
    sub_216B248A0((uint64_t)v10, v7);
    free(v7);
  }
}

void **sub_216BCB744(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B2037C(a2);
  sub_216BCC58C((uint64_t)a1, v4);
  sub_216B248A0(*a1, "[");
  v5 = sub_216B5EE7C(a2);
  sub_216BCA604(a1, v5);
  return sub_216B248A0(*a1, "]");
}

void **sub_216BCB7A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B2037C(a2);
  sub_216BCC58C((uint64_t)a1, v3);
  return sub_216B248A0(*a1, ".length()");
}

void sub_216BCB7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;

  v3 = a2 + 8;
  sub_216B262E0(a2 + 8);
  sub_216B262E0(v3);
  v4 = (char *)sub_216BCB844 + 4 * byte_216C18D39[sub_216BA9AB4(a2) - 1];
  __asm { BR              X10 }
}

void **sub_216BCB844()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v5;
  void **result;
  void **v7;

  v3 = sub_216BC4200(v0[88]);
  if (v3)
    sub_216B248A0(*v0, "_sampler_swizzle(");
  v4 = sub_216BC41F8(v0[88]);
  if (v4)
    sub_216B248A0(*v0, "_sampler_srgb_to_linear(");
  v5 = (char *)sub_216BC66EC(v0[88]);
  if (v5)
    sub_216B248A0(*v0, "(");
  sub_216B248A0(*v0, "sample(");
  sub_216BCA604(v0, v2);
  sub_216B248A0(*v0, "_image");
  sub_216B248A0(*v0, ", ");
  sub_216BCA604(v0, v2);
  sub_216B248A0(*v0, "_sampler");
  sub_216B248A0(*v0, ", ");
  sub_216BCA604(v0, v1);
  result = sub_216B248A0(*v0, ")");
  if (v5)
  {
    v7 = sub_216B248A0(*v0, v5);
    result = sub_216B248A0((uint64_t)v7, ")");
  }
  if (v4)
    result = sub_216B248A0(*v0, ", _dc)");
  if (v3)
    return sub_216B248A0(*v0, ")");
  return result;
}

void **sub_216BCBAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  const char *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **result;
  char *v28;

  v4 = sub_216BCC608(a1, a2);
  v5 = *(_DWORD *)(a1 + 716);
  if (v4 && (v5 & 4) != 0)
  {
    v6 = *(_QWORD *)a1;
    v7 = "__ci_gamma_scalar_SPI(";
  }
  else
  {
    if (sub_216BA9B84(a2) == 16 && (v5 & 4) != 0)
    {
      v6 = *(_QWORD *)a1;
      v8 = "half_powr(";
      v9 = "native_powr(";
    }
    else if (sub_216BA9B84(a2) == 3)
    {
      v6 = *(_QWORD *)a1;
      v8 = "half_sin(";
      v9 = "native_sin(";
    }
    else if (sub_216BA9B84(a2) == 4)
    {
      v6 = *(_QWORD *)a1;
      v8 = "half_cos(";
      v9 = "native_cos(";
    }
    else
    {
      if (sub_216BA9B84(a2) != 5)
      {
        if (sub_216BA9B84(a2) == 36)
        {
          v6 = *(_QWORD *)a1;
          v7 = "foslMix(";
        }
        else if (sub_216BA9B84(a2) == 53)
        {
          v6 = *(_QWORD *)a1;
          v7 = "fast_distance(";
        }
        else if (sub_216BA9B84(a2) == 52)
        {
          v6 = *(_QWORD *)a1;
          v7 = "fast_length(";
        }
        else
        {
          if (sub_216BA9B84(a2) != 56)
          {
            v28 = (char *)sub_216BCBE94 + 4 * word_216C18D3E[sub_216BA9B84(a2) - 1];
            __asm { BR              X10 }
          }
          v6 = *(_QWORD *)a1;
          v7 = "fast_normalize(";
        }
        goto LABEL_16;
      }
      v6 = *(_QWORD *)a1;
      v8 = "half_tan(";
      v9 = "native_tan(";
    }
    if ((v5 & 1) != 0)
      v7 = (char *)v8;
    else
      v7 = (char *)v9;
  }
LABEL_16:
  sub_216B248A0(v6, v7);
  if (!*(_BYTE *)(a1 + 720))
    goto LABEL_40;
  if (sub_216BCC744(a2 + 8))
    goto LABEL_40;
  v10 = (uint64_t *)sub_216BAEDA0(a2 + 8);
  if (!sub_216BCAC20(*v10) || !sub_216BCC760(a2))
    goto LABEL_40;
  if (sub_216BCC744(a2 + 8))
  {
    LOBYTE(v11) = 1;
  }
  else
  {
    v12 = (uint64_t *)sub_216BCC7CC(a2 + 8);
    v11 = sub_216BCC790(*v12) ^ 1;
  }
  v13 = (uint64_t *)sub_216B262E0(a2 + 8);
  v14 = sub_216BA9B90(a2 + 8);
  if (v13 == (uint64_t *)v14)
  {
    v16 = 0;
  }
  else
  {
    v15 = (uint64_t *)v14;
    v16 = 0;
    do
    {
      v17 = sub_216BAB1D8(*v13);
      if (v17)
      {
        v18 = v17;
        if (sub_216BCAC20(v17) && (v19 = sub_216B1E67C(v18), sub_216BA9FAC(a1 + 584, v19)))
        {
          ++v16;
        }
        else if (v4 != *(_QWORD *)sub_216BCC7CC(a2 + 8))
        {
          break;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  if (v16 == sub_216BA9BC0(a2 + 8)
    || (v16 != sub_216BA9BC0(a2 + 8) - 1 ? (v20 = 1) : (v20 = v11), (v20 & 1) == 0))
  {
    *(_BYTE *)(a1 + 724) = 0;
    v21 = 1;
  }
  else
  {
LABEL_40:
    v21 = 0;
  }
  v22 = a2 + 8;
  v23 = (_QWORD *)sub_216B262E0(a2 + 8);
  v24 = sub_216BA9B90(v22);
  if (v23 != (_QWORD *)v24)
  {
    v25 = (_QWORD *)v24;
    v26 = v24 - (_QWORD)v23;
    do
    {
      if (v4 && v26 == 8)
      {
        sub_216BCA604(a1, v4);
      }
      else
      {
        sub_216BCA604(a1, *v23);
        if (v26 >= 9)
          sub_216B248A0(*(_QWORD *)a1, ", ");
      }
      ++v23;
      v26 -= 8;
    }
    while (v23 != v25);
  }
  *(_BYTE *)(a1 + 724) = 1;
  result = sub_216B248A0(*(_QWORD *)a1, ")");
  if ((v21 & 1) != 0)
    return sub_216B248A0(*(_QWORD *)a1, ".xyz");
  return result;
}

void sub_216BCBE94()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBEA4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBEB4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBEC4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBED4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBEE4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBEF4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF04()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF14()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF24()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF34()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF44()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF54()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF64()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF74()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF84()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBF94()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBFA4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBFB4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBFC4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBFD4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBFE4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCBFF4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC004()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC014()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC024()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC034()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC044()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC054()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC064()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC074()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC084()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC094()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC0A4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC0B4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC0C4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC0D4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC0E4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC0F4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC104()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC114()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC124()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC134()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC144()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC154()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC164()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC174()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC184()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC194()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC1A4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC1B4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC1C4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC1D4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC1E4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC1F4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC204()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC214()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC224()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC234()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC244()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC254()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC264()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC274()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC284()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC294()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC2A4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC2B4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC2C4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC2D4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC2E4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC2F4()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC304()
{
  JUMPOUT(0x216BCBBF0);
}

void sub_216BCC314()
{
  JUMPOUT(0x216BCBBF0);
}

void **sub_216BCC324(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v29;
  const void *v30[2];

  v4 = sub_216B2037C(a2);
  v5 = sub_216BA6A7C(v4);
  v7 = v6;
  sub_216B1E678((int)v30, "destCoord");
  v8 = sub_216B274F0(v5, v7, v30[0], (size_t)v30[1]);
  v9 = *a1;
  if (v8)
  {
    v10 = "_dc";
    v11 = *a1;
    return sub_216B248A0(v11, v10);
  }
  v12 = sub_216B2037C(a2);
  v13 = sub_216BA6A7C(v12);
  v15 = sub_216B248E0(v9, v13, v14);
  sub_216B248A0((uint64_t)v15, "(");
  v16 = a2 + 8;
  v17 = (uint64_t *)sub_216B262E0(v16);
  v18 = sub_216BA9BD8(v16);
  if (v17 != (uint64_t *)v18)
  {
    v19 = (uint64_t *)v18;
    v20 = v18 - (_QWORD)v17;
    while (1)
    {
      sub_216BCA604(a1, *v17);
      v21 = sub_216BAB1D8(*v17);
      if (!v21)
        goto LABEL_12;
      v22 = (unsigned __int8 *)sub_216B1E67C(v21);
      v29 = sub_216BAB580(v22);
      v23 = sub_216B1E600((uint64_t)&v29);
      v24 = sub_216BA7EB0(v23);
      if (!v24)
        goto LABEL_12;
      v25 = v24;
      sub_216B248A0(*a1, "_image, ");
      v26 = sub_216BA7EC0(v25);
      if (v26 == 1)
        break;
      if (!v26)
      {
        sub_216BCA604(a1, *v17);
        sub_216B248A0(*a1, "_sampler, ");
        sub_216BCA604(a1, *v17);
        sub_216B248A0(*a1, "_transform0, ");
        sub_216BCA604(a1, *v17);
        sub_216B248A0(*a1, "_transform1, ");
        v27 = "_extent";
LABEL_11:
        sub_216BCA604(a1, *v17);
        sub_216B248A0(*a1, v27);
      }
LABEL_12:
      if (v20 >= 9)
        sub_216B248A0(*a1, ", ");
      ++v17;
      v20 -= 8;
      if (v17 == v19)
        goto LABEL_15;
    }
    v27 = "_sampler";
    goto LABEL_11;
  }
LABEL_15:
  if (sub_216BA9C08(v16))
    sub_216B248A0(*a1, ", ");
  sub_216B248A0(*a1, "_dc");
  v11 = *a1;
  v10 = ")";
  return sub_216B248A0(v11, v10);
}

uint64_t sub_216BCC560(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E67C(a2);
  return sub_216BCA604(a1, v3);
}

void **sub_216BCC58C(uint64_t a1, uint64_t a2)
{
  void **result;

  if (*(_BYTE *)(a1 + 12) && sub_216BA979C(a2))
    sub_216B248A0(*(_QWORD *)a1, "(");
  result = (void **)sub_216BCA604(a1, a2);
  if (*(_BYTE *)(a1 + 12))
  {
    result = (void **)sub_216BA979C(a2);
    if ((_DWORD)result)
      return sub_216B248A0(*(_QWORD *)a1, ")");
  }
  return result;
}

uint64_t sub_216BCC608(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;

  if ((~*(_DWORD *)(a1 + 716) & 5) != 0)
    return 0;
  if (sub_216BA9B84(a2) != 16)
    return 0;
  v3 = a2 + 8;
  v4 = (uint64_t *)sub_216B262E0(a2 + 8);
  v5 = (uint64_t *)(sub_216B262E0(v3) + 8);
  if (v5 == (uint64_t *)sub_216BA9B90(v3) || !sub_216BCAC20(*v4))
    return 0;
  v6 = *v5;
  if (sub_216B9E3DC(*v5) != 12)
  {
LABEL_11:
    if (sub_216BCC790(v6))
      return v6;
    else
      return 0;
  }
  v13 = 0;
  v7 = sub_216B2037C(v6);
  if ((sub_216BA7ABC(v7, &v13) & 1) == 0)
  {
    v11 = (uint64_t *)sub_216B262E0(v6 + 8);
    if (sub_216BCC790(*v11))
      return *v11;
    return 0;
  }
  if (v13 != 3)
    goto LABEL_11;
  v8 = *(_QWORD *)sub_216B262E0(v6 + 8);
  v9 = *(_QWORD *)(sub_216B262E0(v6 + 8) + 8);
  v10 = sub_216B262E0(v6 + 8);
  if (v8 != v9 || v8 != *(_QWORD *)(v10 + 16) || !sub_216BCC790(v8))
    goto LABEL_11;
  return v8;
}

BOOL sub_216BCC744(uint64_t a1)
{
  return sub_216BA9BC4(a1) == 0;
}

uint64_t sub_216BCC760(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_216BA9B84(a1);
  return (v1 < 0x28) & (0xFFBFFF7FF8uLL >> v1);
}

uint64_t sub_216BCC790(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v3 = sub_216BAB358(a1);
  v1 = sub_216B1E600((uint64_t)&v3);
  result = sub_216BA7ED0(v1);
  if (result)
    return sub_216BA7EA4(result) == 3;
  return result;
}

uint64_t sub_216BCC7CC(uint64_t a1)
{
  return sub_216BA9B90(a1) - 8;
}

void sub_216BCC7E4(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;

  v2 = (char *)sub_216BCC81C + 4 * byte_216C18DD2[sub_216B8B400(a2)];
  __asm { BR              X10 }
}

uint64_t sub_216BCC828()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BCCC2C(v1, v0);
}

uint64_t sub_216BCC83C()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BA66F8)(v1, v0);
}

uint64_t sub_216BCC850()
{
  uint64_t v0;

  return sub_216BC8BF4(v0);
}

void **sub_216BCC860()
{
  unsigned __int16 *v0;
  uint64_t *v1;

  return sub_216BCCEC0(v1, v0);
}

uint64_t sub_216BCC874()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BCCF2C)(v1, v0);
}

uint64_t sub_216BCC888()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(uint64_t, uint64_t))sub_216BCCF30)(v1, v0);
}

void sub_216BCC89C()
{
  _DWORD *v0;
  uint64_t *v1;

  sub_216BCC8C4(v1, v0);
}

void **sub_216BCC8B0()
{
  _DWORD *v0;
  uint64_t *v1;

  return sub_216BCC9C4(v1, v0);
}

void sub_216BCC8C4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13[2];
  _DWORD *v14;

  v14 = a2;
  v3 = a1[2];
  if (v3)
  {
    v13[0] = sub_216BA68EC(v3, (uint64_t *)&v14);
    v13[1] = v4;
    v12[0] = sub_216BA6950(a1[2]);
    v12[1] = v5;
    if (sub_216B50AF4(v13, (uint64_t)v12))
    {
      v6 = (uint64_t)v14;
      v7 = sub_216B1E600((uint64_t)v13);
      sub_216BCA3AC(a1, v6, *(float **)(v7 + 8));
      return;
    }
    a2 = v14;
  }
  sub_216BCA4AC(a1, a2);
  sub_216BCA534(a1, (uint64_t)v14);
  v8 = sub_216B248A0(*a1, " ");
  v9 = sub_216BA6A7C((uint64_t)v14);
  sub_216B248E0((uint64_t)v8, v9, v10);
  sub_216BA6CA4(a1, (uint64_t)v14);
  if (sub_216B5EE7C((uint64_t)v14))
  {
    sub_216B248A0(*a1, " = ");
    v11 = sub_216B5EE7C((uint64_t)v14);
    sub_216BCA604((uint64_t)a1, v11);
  }
}

void **sub_216BCC9C4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void **result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  void **v35;
  void **v36;
  void **v37;
  unsigned int v38;
  uint64_t v39;

  v39 = sub_216B2037C((uint64_t)a2);
  v4 = sub_216B1E600((uint64_t)&v39);
  v5 = sub_216BA7EB0(v4);
  if (v5)
  {
    v6 = v5;
    v7 = sub_216BA6A7C((uint64_t)a2);
    v9 = v8;
    v10 = sub_216BA7EC0(v6);
    if (v10 == 1)
    {
      v33 = sub_216B248A0(*a1, "read_only ");
      v34 = sub_216B248A0((uint64_t)v33, "image2d_t ");
      v35 = sub_216B248E0((uint64_t)v34, v7, v9);
      v36 = sub_216B248A0((uint64_t)v35, "_image, ");
      v37 = sub_216B248A0((uint64_t)v36, "sampler_t ");
      v25 = sub_216B248E0((uint64_t)v37, v7, v9);
      v26 = "_sampler";
      return sub_216B248A0((uint64_t)v25, v26);
    }
    if (!v10)
    {
      v11 = sub_216B248A0(*a1, "read_only ");
      v12 = sub_216B248A0((uint64_t)v11, "image2d_t ");
      v13 = sub_216B248E0((uint64_t)v12, v7, v9);
      v14 = sub_216B248A0((uint64_t)v13, "_image, ");
      v15 = sub_216B248A0((uint64_t)v14, "sampler_t ");
      v16 = sub_216B248E0((uint64_t)v15, v7, v9);
      v17 = sub_216B248A0((uint64_t)v16, "_sampler, ");
      v18 = sub_216B248A0((uint64_t)v17, "float4 ");
      v19 = sub_216B248E0((uint64_t)v18, v7, v9);
      v20 = sub_216B248A0((uint64_t)v19, "_transform0, ");
      v21 = sub_216B248A0((uint64_t)v20, "float4 ");
      v22 = sub_216B248E0((uint64_t)v21, v7, v9);
      v23 = sub_216B248A0((uint64_t)v22, "_transform1, ");
      v24 = sub_216B248A0((uint64_t)v23, "float4 ");
      v25 = sub_216B248E0((uint64_t)v24, v7, v9);
      v26 = "_extent";
      return sub_216B248A0((uint64_t)v25, v26);
    }
  }
  if (sub_216BA81D0((uint64_t)a2))
    sub_216B248A0(*a1, "const ");
  if (sub_216BA75CC((uint64_t)a2))
    sub_216BA8228(a2);
  v27 = sub_216B2037C((uint64_t)a2);
  sub_216BCA904(a1, v27);
  v38 = -1;
  v28 = sub_216B2037C((uint64_t)a2);
  if (sub_216BA7ABC(v28, &v38) && (sub_216BA7B18((uint64_t)a2) & 1) == 0)
    sub_216BA7B24(a1, v38);
  sub_216B248A0(*a1, " ");
  result = (void **)sub_216BA7D08((uint64_t)a2);
  if ((_DWORD)result)
  {
    v30 = *a1;
    v31 = sub_216BA6A7C((uint64_t)a2);
    sub_216B248E0(v30, v31, v32);
    result = (void **)sub_216BA7B18((uint64_t)a2);
    if ((_DWORD)result)
      return sub_216BA7B24(a1, v38);
  }
  return result;
}

uint64_t sub_216BCCC2C(uint64_t *a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  unsigned __int8 *v22;
  _QWORD v23[2];
  _QWORD *v24[2];
  const void *v25[2];

  a1[87] = (uint64_t)a2;
  if (sub_216BA9DD0((uint64_t)a2))
    return (uint64_t)sub_216BCCF34(a1, (uint64_t)a2);
  v5 = sub_216BA6A7C((uint64_t)a2);
  v7 = v6;
  sub_216B1E678((int)v25, "destCoord");
  result = sub_216B274F0(v5, v7, v25[0], (size_t)v25[1]);
  if ((result & 1) == 0)
  {
    if (sub_216BC5200((uint64_t)a2)
      && (v24[0] = (_QWORD *)sub_216B938A4((uint64_t)(a1 + 3)),
          v24[1] = v8,
          v23[0] = sub_216B938D4((uint64_t)(a1 + 3)),
          v23[1] = v9,
          sub_216B3760C(v24, v23)))
    {
      while (1)
      {
        v11 = sub_216BC520C(v24, v10);
        result = sub_216BC0B28((uint64_t)a2, v11);
        if ((result & 1) != 0)
          break;
        sub_216B93914(v24);
        if (!sub_216B3760C(v24, v23))
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      sub_216B248A0(*a1, "inline ");
      if (sub_216BA8240((uint64_t)a2))
        sub_216BA824C(a2);
      v12 = sub_216B939E0((uint64_t)a2);
      sub_216BCA904(a1, v12);
      LODWORD(v24[0]) = 0;
      v13 = sub_216B939E0((uint64_t)a2);
      if (sub_216BA7ABC(v13, v24))
        sub_216BA7B24(a1, v24[0]);
      v14 = sub_216B248A0(*a1, " __attribute__((overloadable)) ");
      v15 = sub_216BA6A7C((uint64_t)a2);
      v17 = sub_216B248E0((uint64_t)v14, v15, v16);
      sub_216B248A0((uint64_t)v17, "(");
      v18 = (unsigned __int8 **)sub_216B262E0((uint64_t)(a2 + 4));
      v19 = sub_216BA8258((uint64_t)(a2 + 4));
      if (v18 != (unsigned __int8 **)v19)
      {
        v20 = (unsigned __int8 **)v19;
        v21 = v19 - (_QWORD)v18;
        do
        {
          sub_216BCA794(a1, *v18);
          if (v21 >= 9)
            sub_216B248A0(*a1, ", ");
          ++v18;
          v21 -= 8;
        }
        while (v18 != v20);
      }
      if (sub_216BA82B0(a2 + 4))
        sub_216B248A0(*a1, ", ");
      sub_216B248A0(*a1, "float2 _dc)");
      if (sub_216BA8288((uint64_t)a2))
      {
        sub_216B248A0(*a1, " ");
        v22 = (unsigned __int8 *)sub_216BA8288((uint64_t)a2);
        sub_216BCD22C(a1, v22);
        sub_216B248A0(*a1, "\n");
      }
      else
      {
        sub_216BA8290(a1, 0);
      }
      return sub_216B5F890((uint64_t)(a1 + 3), (uint64_t)a2);
    }
  }
  return result;
}

void **sub_216BCCEC0(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  if (sub_216B2037C((uint64_t)a2))
  {
    v4 = *a1;
    v5 = sub_216B2037C((uint64_t)a2);
    v6 = sub_216BA6A7C(v5);
    return sub_216B248E0(v4, v6, v7);
  }
  else
  {
    v9 = sub_216BA83A4(a2);
    return sub_216BA8384(a1, v9);
  }
}

void **sub_216BCCF34(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  char *v33;
  void **v34;
  void **v35;
  void **v36;
  void **v37;
  void **v38;
  void **v39;
  unsigned __int8 *v40;
  uint64_t v42;
  const void *v43[2];
  uint64_t v44[2];

  v4 = sub_216B248A0(*a1, "kernel void ");
  v5 = sub_216BA6A7C(a2);
  sub_216B248E0((uint64_t)v4, v5, v6);
  v42 = a2;
  v44[0] = sub_216BA6A7C(a2);
  v44[1] = v7;
  sub_216B1E678((int)v43, "main");
  if (sub_216B1E644((uint64_t)v44, v43[0], (size_t)v43[1]))
    sub_216B248A0(*a1, "OpenCLEntryPoint");
  sub_216B248A0(*a1, "(write_only image2d_t out, float4 outputRect, float4 vertexTransform0, float4 vertexTransform1");
  v8 = (uint64_t *)sub_216B1E600((uint64_t)(a1 + 85));
  v9 = sub_216B35430(a1 + 85);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = *v8;
      sub_216B248A0(*a1, ", \n");
      v44[0] = sub_216B2037C(v11);
      v12 = sub_216BA6A7C(v11);
      v14 = v13;
      v15 = sub_216B1E600((uint64_t)v44);
      v16 = sub_216BA7EB0(v15);
      if (v16)
      {
        v17 = sub_216BA7EC0(v16);
        if (v17 == 1)
        {
          v35 = sub_216B248A0(*a1, "read_only ");
          v36 = sub_216B248A0((uint64_t)v35, "image2d_t ");
          v37 = sub_216B248E0((uint64_t)v36, v12, v14);
          v38 = sub_216B248A0((uint64_t)v37, "_image, ");
          v39 = sub_216B248A0((uint64_t)v38, "sampler_t ");
          v32 = sub_216B248E0((uint64_t)v39, v12, v14);
          v33 = "_sampler";
          goto LABEL_11;
        }
        if (!v17)
        {
          v18 = sub_216B248A0(*a1, "read_only ");
          v19 = sub_216B248A0((uint64_t)v18, "image2d_t ");
          v20 = sub_216B248E0((uint64_t)v19, v12, v14);
          v21 = sub_216B248A0((uint64_t)v20, "_image, ");
          v22 = sub_216B248A0((uint64_t)v21, "sampler_t ");
          v23 = sub_216B248E0((uint64_t)v22, v12, v14);
          v24 = sub_216B248A0((uint64_t)v23, "_sampler, ");
          v25 = sub_216B248A0((uint64_t)v24, "float4 ");
          v26 = sub_216B248E0((uint64_t)v25, v12, v14);
          v27 = sub_216B248A0((uint64_t)v26, "_transform0, ");
          v28 = sub_216B248A0((uint64_t)v27, "float4 ");
          v29 = sub_216B248E0((uint64_t)v28, v12, v14);
          v30 = sub_216B248A0((uint64_t)v29, "_transform1, ");
          v31 = sub_216B248A0((uint64_t)v30, "float4 ");
          v32 = sub_216B248E0((uint64_t)v31, v12, v14);
          v33 = "_extent";
LABEL_11:
          sub_216B248A0((uint64_t)v32, v33);
        }
      }
      else
      {
        sub_216BCA904(a1, v44[0]);
        v34 = sub_216B248A0(*a1, " ");
        sub_216B248E0((uint64_t)v34, v12, v14);
      }
      ++v8;
    }
    while (v8 != v10);
  }
  sub_216B248A0(*a1, ") ");
  if (!sub_216BA8288(v42))
    return sub_216BA8290(a1, 0);
  sub_216B248A0(*a1, " ");
  v40 = (unsigned __int8 *)sub_216BA8288(v42);
  sub_216BCD22C(a1, v40);
  return sub_216B248A0(*a1, "\n");
}

void **sub_216BCD22C(uint64_t *a1, unsigned __int8 *a2)
{
  if (a2)
    return (void **)sub_216BCD244(a1, a2);
  else
    return sub_216B248A0(*a1, " /* <none> */ ");
}

uint64_t sub_216BCD244(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t result;

  result = sub_216B8B400(a2);
  switch((int)result)
  {
    case 0:
      result = (uint64_t)sub_216BCD398((uint64_t)a1, (uint64_t)a2);
      break;
    case 1:
      result = (uint64_t)sub_216BA8634(a1);
      break;
    case 2:
      result = sub_216BCD4D4(a1, (uint64_t)a2);
      break;
    case 3:
      result = (uint64_t)sub_216BCD4E0(a1, (uint64_t)a2);
      break;
    case 4:
      result = sub_216BCD5D0(a1, (uint64_t)a2);
      break;
    case 5:
      result = (uint64_t)sub_216BCD634(a1, (uint64_t)a2);
      break;
    case 6:
      result = (uint64_t)sub_216BA87F4(a1);
      break;
    case 7:
      result = (uint64_t)sub_216BCD684(a1, (uint64_t)a2);
      break;
    case 8:
      result = (uint64_t)sub_216BCD788(a1, (uint64_t)a2);
      break;
    case 9:
      result = (uint64_t)sub_216BCD800(a1, (uint64_t)a2);
      break;
    case 10:
      result = (uint64_t)sub_216BA8A14(a1);
      break;
    case 11:
      result = (uint64_t)sub_216BA8A48(a1);
      break;
    case 13:
      result = (uint64_t)sub_216BCD894(a1, (uint64_t)a2);
      break;
    case 14:
      result = sub_216BCC560((uint64_t)a1, (uint64_t)a2);
      break;
    default:
      return result;
  }
  return result;
}

void **sub_216BCD398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  sub_216B248A0(*(_QWORD *)a1, "{\n");
  if (sub_216BA9DD0(*(_QWORD *)(a1 + 696)) && !*(_BYTE *)(a1 + 712))
  {
    sub_216B248A0(*(_QWORD *)a1, "\n");
    sub_216B248A0(*(_QWORD *)a1, "  int2 gid = (int2)(get_global_id(0), get_global_id(1));\n\n");
    sub_216B248A0(*(_QWORD *)a1, "  if (gid.x >= get_image_width(out) || gid.y >= get_image_height(out)) return;\n\n");
    sub_216B248A0(*(_QWORD *)a1, "  float2 p = (float2)(gid.x, gid.y) + outputRect.xy + (float2)(0.5f);\n"
      "  float x = dot((float4)(p, 1, 0), vertexTransform0);\n"
      "  float y = dot((float4)(p, 1, 0), vertexTransform1);\n"
      "  float2 _dc = (float2)(x,y);\n"
      "\n");
    sub_216B248A0(*(_QWORD *)a1, "  int2 _writeLoc = gid;\n\n");
    *(_BYTE *)(a1 + 712) = 1;
  }
  ++*(_DWORD *)(a1 + 8);
  v4 = a2 + 8;
  v5 = (uint64_t *)sub_216B262E0(a2 + 8);
  v6 = sub_216BA8B44(v4);
  if (v5 != (uint64_t *)v6)
  {
    v7 = (uint64_t *)v6;
    do
    {
      v8 = *v5++;
      sub_216BA7D54((void **)a1);
      sub_216BCD22C(a1, v8);
      sub_216BA8B74((uint64_t *)a1, v8);
      sub_216B248A0(*(_QWORD *)a1, "\n");
    }
    while (v5 != v7);
  }
  --*(_DWORD *)(a1 + 8);
  sub_216BA7D54((void **)a1);
  return sub_216B248A0(*(_QWORD *)a1, "}");
}

uint64_t sub_216BCD4D4(_QWORD *a1, uint64_t a2)
{
  return sub_216BC9A98(a1, a2 + 8, 0);
}

void **sub_216BCD4E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **result;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "if (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BCA604((uint64_t)a1, v4);
  }
  sub_216B248A0(*a1, ") ");
  if (sub_216B2037C(a2))
  {
    v5 = sub_216B2037C(a2);
    sub_216BCD22C(a1, v5);
    v6 = sub_216B2037C(a2);
    sub_216BA8B74(a1, v6);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  result = (void **)sub_216B5EE7C(a2);
  if (result)
  {
    sub_216B248A0(*a1, " else ");
    v8 = sub_216B5EE7C(a2);
    sub_216BCD22C(a1, v8);
    v9 = sub_216B5EE7C(a2);
    return sub_216BA8B74(a1, v9);
  }
  return result;
}

uint64_t sub_216BCD5D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_216B248A0(*a1, "switch (");
  v4 = sub_216B1E67C(a2);
  sub_216BCA604((uint64_t)a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  return sub_216BCD22C(a1, v5);
}

void **sub_216BCD634(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "case ");
  v4 = sub_216B5EE7C(a2);
  sub_216BCA604((uint64_t)a1, v4);
  return sub_216B248A0(*a1, ": ");
}

void **sub_216BCD684(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_216B248A0(*a1, "for (");
  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    sub_216BCD22C(a1, v4);
    v5 = sub_216B1E67C(a2);
    sub_216BA8B74(a1, v5);
  }
  else
  {
    sub_216BA8290(a1, 0);
  }
  sub_216B248A0(*a1, " ");
  if (sub_216B2037C(a2))
  {
    v6 = sub_216B2037C(a2);
    sub_216BCD22C(a1, v6);
  }
  sub_216BA8290(a1, 1);
  if (sub_216B5EE7C(a2))
  {
    v7 = sub_216B5EE7C(a2);
    sub_216BCA604((uint64_t)a1, v7);
  }
  sub_216B248A0(*a1, ") ");
  v8 = sub_216B27CB0(a2);
  sub_216BCD22C(a1, v8);
  v9 = sub_216B27CB0(a2);
  return sub_216BA8B74(a1, v9);
}

void **sub_216BCD788(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "while (");
  v4 = sub_216B1E67C(a2);
  sub_216BCD22C(a1, v4);
  sub_216B248A0(*a1, ") ");
  v5 = sub_216B2037C(a2);
  sub_216BCD22C(a1, v5);
  v6 = sub_216B2037C(a2);
  return sub_216BA8B74(a1, v6);
}

void **sub_216BCD800(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_216B248A0(*a1, "do ");
  v4 = sub_216B1E67C(a2);
  sub_216BCD22C(a1, v4);
  v5 = sub_216B1E67C(a2);
  sub_216BA8B74(a1, v5);
  sub_216B248A0(*a1, " while (");
  v6 = sub_216B2037C(a2);
  sub_216BCA604((uint64_t)a1, v6);
  sub_216B248A0(*a1, ")");
  return sub_216BA8290(a1, 0);
}

void **sub_216BCD894(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B248A0(*a1, "return");
  if (sub_216B1E67C(a2))
  {
    sub_216B248A0(*a1, " ");
    v4 = sub_216B1E67C(a2);
    sub_216BCA604((uint64_t)a1, v4);
  }
  return sub_216BA8290(a1, 0);
}

BOOL sub_216BCD8FC(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int *v5;
  const void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23[2];
  uint64_t v24;
  _QWORD *v25;

  sub_216BCDB60(a2);
  result = sub_216B3D818(a1 + 168);
  if (!result)
  {
    v25 = (_QWORD *)sub_216B3C960(a1 + 168);
    v24 = sub_216B3C994(a1 + 168);
    for (result = sub_216B3760C(&v25, &v24); result; result = sub_216B3760C(&v25, &v24))
    {
      v5 = (unsigned int *)sub_216B3C9C8((uint64_t)&v25);
      v6 = (const void *)sub_216B3CA54(v5);
      v8 = v7;
      v9 = sub_216B3C9C8((uint64_t)&v25);
      v10 = *(_QWORD *)sub_216B3DBD0(v9);
      v23[0] = sub_216BC38D0(a2);
      v23[1] = v11;
      v12 = (uint64_t *)sub_216B1E600((uint64_t)v23);
      v13 = sub_216B35430(v23);
      if (v12 == (uint64_t *)v13)
        goto LABEL_21;
      v14 = (uint64_t *)v13;
      while (1)
      {
        v15 = (_DWORD *)*v12;
        v16 = sub_216BA6A7C(*v12);
        if (sub_216B274F0(v16, v17, v6, v8))
          break;
        if (++v12 == v14)
          goto LABEL_21;
      }
      if (v15 && sub_216BA75F0(v15) == 7)
      {
        v23[0] = sub_216B2037C((uint64_t)v15);
        v18 = sub_216B1E600((uint64_t)v23);
        if (sub_216BA6F68(v18) && *(_BYTE *)(v10 + 64) != 1)
        {
          sub_216B4B364(*(_QWORD *)(a1 + 160), 4733, (uint64_t)v23);
          sub_216B4B340(v23, (uint64_t)v6, v8);
          sub_216B4B3B4(v23);
        }
        v23[0] = sub_216B2037C((uint64_t)v15);
        v19 = sub_216B1E600((uint64_t)v23);
        if (sub_216BA7040(v19) && *(_BYTE *)(v10 + 64) != 3)
        {
          sub_216B4B364(*(_QWORD *)(a1 + 160), 4733, (uint64_t)v23);
          sub_216B4B340(v23, (uint64_t)v6, v8);
          sub_216B4B3B4(v23);
        }
        v23[0] = sub_216B2037C((uint64_t)v15);
        v20 = sub_216B1E600((uint64_t)v23);
        if (sub_216BA710C(v20))
        {
          if (*(_BYTE *)(v10 + 64) != 4)
          {
            sub_216B4B364(*(_QWORD *)(a1 + 160), 4733, (uint64_t)v23);
            sub_216B4B340(v23, (uint64_t)v6, v8);
            sub_216B4B3B4(v23);
          }
        }
        if (sub_216BCDB68(a2, (uint64_t)v15, v10))
          goto LABEL_23;
        v21 = *(_QWORD *)(a1 + 160);
        v22 = 4732;
      }
      else
      {
LABEL_21:
        v21 = *(_QWORD *)(a1 + 160);
        v22 = 4734;
      }
      sub_216B4B364(v21, v22, (uint64_t)v23);
      sub_216B4B340(v23, (uint64_t)v6, v8);
      sub_216B4B3B4(v23);
LABEL_23:
      sub_216B3CA9C(&v25);
    }
  }
  return result;
}

uint64_t sub_216BCDB60(uint64_t a1)
{
  return sub_216BCEE3C(a1 + 128);
}

BOOL sub_216BCDB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;

  v7 = a2;
  v4 = a1 + 128;
  v5 = sub_216BCEFD4(a1 + 128, &v7);
  if (!v5)
    *sub_216BCEFF8(v4, &v7) = a3;
  return v5 == 0;
}

uint64_t sub_216BCDBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18[2];
  std::string v19;
  uint64_t v20[3];
  std::string v21[2];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[38];
  _BYTE v29[24];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  v27 = a3;
  result = sub_216B29094((uint64_t)&v26);
  if ((result & 1) == 0)
  {
    sub_216B27460(v26, v27, -1, (uint64_t)v29);
    if (sub_216B2CFD0((uint64_t)v29))
    {
      sub_216B2C030(v25);
      v6 = j_nullsub_1(v29, v5);
      v8 = sub_216B25CA8(v6, v7);
      v9 = sub_216B27AD8(v8);
      sub_216B3C080(v28, v9, v10, 0, 0, 0);
      sub_216BCDEBC(v28, v25);
      v20[0] = sub_216B3C100((uint64_t)v28);
      v20[1] = v11;
      if (sub_216B27BAC(v20))
      {
        sub_216B4B364(*(_QWORD *)(a1 + 160), 4729, (uint64_t)v20);
        sub_216B4B340(v20, v26, v27);
        sub_216B4B3B4(v20);
      }
      else
      {
        v24 = sub_216B2C910(v25);
        v23 = sub_216B2C000((uint64_t)v25);
        while (sub_216B2AB28((uint64_t)&v24, (uint64_t)&v23))
        {
          v13 = sub_216B1E600((uint64_t)&v24);
          sub_216BCDEF8((uint64_t)v20, v13);
          sub_216B24898(&v26, (uint64_t)&v19);
          sub_216B26E7C((uint64_t)v22, (uint64_t)&v19);
          std::string::~string(&v19);
          if (sub_216B2E044(v21, "float"))
          {
            sub_216BCDEFC(a1, (uint64_t)v20);
          }
          else if (sub_216B2E044(v21, "int") || sub_216B2E044(v21, "uint"))
          {
            sub_216BCE36C(a1, (uint64_t)v20);
          }
          else if (sub_216B2E044(v21, "BOOL"))
          {
            sub_216BCE564(a1, (uint64_t)v20);
          }
          else
          {
            sub_216B4B364(*(_QWORD *)(a1 + 160), 4738, (uint64_t)&v19);
            sub_216B26CA0(v18, v21);
            v14 = sub_216B4B340((uint64_t *)&v19, v18[0], v18[1]);
            sub_216B26CA0(v17, v20);
            v15 = sub_216B4B340(v14, v17[0], v17[1]);
            sub_216B26CA0(v16, v22);
            sub_216B4B340(v15, v16[0], v16[1]);
            sub_216B4B3B4(&v19);
          }
          sub_216BCE764(v20);
          sub_216BCE768(&v24);
        }
      }
      sub_216B3C0E8(v28);
      sub_216BCE778((uint64_t)v25);
    }
    else
    {
      sub_216B4B364(*(_QWORD *)(a1 + 160), 4721, (uint64_t)v28);
      sub_216B4B340(v28, v26, v27);
      sub_216B4B3B4(v28);
    }
    return sub_216B2CFE0((uint64_t)v29, v12);
  }
  return result;
}

_QWORD *sub_216BCDEBC(_QWORD *a1, uint64_t *a2)
{
  if (sub_216B3C120(a1, (uint64_t)a2))
    sub_216BCFBF4((uint64_t)a1, a2);
  return a1;
}

uint64_t sub_216BCDEFC(uint64_t a1, uint64_t a2)
{
  const std::string *v4;
  float v5;
  int v7;
  unint64_t v8;
  uint64_t v9;
  const std::string *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int i;
  const std::string *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t v43[2];
  uint64_t v44[2];
  std::string __str;
  _QWORD v46[2];
  uint64_t v47[2];
  uint64_t v48[2];
  uint64_t v49[2];
  float v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  uint64_t v54[2];
  uint64_t v55[2];
  uint64_t v56[24];

  v56[23] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 48) == 1)
  {
    sub_216B26CA0(v55, a2);
    v4 = (const std::string *)sub_216B2BF7C((_QWORD *)(a2 + 56), 0);
    v5 = std::stof(v4, 0);
    return sub_216BCEB74(a1, v55[0], v55[1], v5);
  }
  v7 = *(_DWORD *)(a2 + 52);
  v8 = sub_216B2BFE4((_QWORD *)(a2 + 56));
  v9 = *(unsigned int *)(a2 + 48);
  if (v7 != 1)
  {
    if (v8 != *(_DWORD *)(a2 + 52) * (_DWORD)v9)
    {
      sub_216B4B364(*(_QWORD *)(a1 + 160), 4737, (uint64_t)v56);
      sub_216B26CA0(v47, a2);
      v21 = sub_216B4B340(v56, v47[0], v47[1]);
      sub_216B26CA0(v46, a2 + 80);
      v22 = v46[0];
      v23 = v46[1];
      goto LABEL_21;
    }
    sub_216BCEC40((uint64_t)v56);
    if (!*(_DWORD *)(a2 + 48))
      goto LABEL_22;
    v11 = 0;
    do
    {
      sub_216B35A60(&__str);
      v12 = *(_DWORD *)(a2 + 52);
      if (v12)
      {
        for (i = 0; i < v12; ++i)
        {
          v14 = (const std::string *)sub_216B2BF7C((_QWORD *)(a2 + 56), i + v11 * v12);
          LODWORD(v52) = std::stof(v14, 0);
          sub_216B26208((uint64_t)&__str, &v52);
          v12 = *(_DWORD *)(a2 + 52);
        }
      }
      sub_216BCEC44(v56, &__str);
      sub_216B1FF6C(&__str);
      ++v11;
      v15 = *(_DWORD *)(a2 + 48);
    }
    while (v11 < v15);
    switch(v15)
    {
      case 2u:
        sub_216B26CA0(v42, a2);
        v26 = sub_216B96234((uint64_t)v56, 0);
        sub_216BCEC3C(&v41, v26);
        v27 = sub_216B96234((uint64_t)v56, 1u);
        sub_216BCEC3C(&v40, v27);
        sub_216BCE844(a1, v42[0], v42[1]);
        return sub_216BCECA0(v56);
      case 3u:
        sub_216B26CA0(v39, a2);
        v28 = sub_216B96234((uint64_t)v56, 0);
        sub_216BCEC3C(&v38, v28);
        v29 = sub_216B96234((uint64_t)v56, 1u);
        sub_216BCEC3C(&v37, v29);
        v30 = sub_216B96234((uint64_t)v56, 2u);
        sub_216BCEC3C(&v36, v30);
        sub_216BCE94C(a1, v39[0], v39[1]);
        return sub_216BCECA0(v56);
      case 4u:
        sub_216B26CA0(v35, a2);
        v16 = sub_216B96234((uint64_t)v56, 0);
        sub_216BCEC3C(v34, v16);
        v17 = sub_216B96234((uint64_t)v56, 1u);
        sub_216BCEC3C(v33, v17);
        v18 = sub_216B96234((uint64_t)v56, 2u);
        sub_216BCEC3C(v32, v18);
        v19 = sub_216B96234((uint64_t)v56, 3u);
        sub_216BCEC3C(v31, v19);
        sub_216BCE9E4(a1, v35[0], v35[1], v34[0], v34[1], v33[0], v33[1], v20, v32[0], v32[1], v31[0], v31[1]);
        break;
      default:
LABEL_22:
        sub_216B4B364(*(_QWORD *)(a1 + 160), 4736, (uint64_t)&__str);
        v24 = sub_216B7A71C((uint64_t *)&__str, *(_DWORD *)(a2 + 48));
        sub_216B26CA0(v44, a2);
        v25 = sub_216B4B340(v24, v44[0], v44[1]);
        sub_216B26CA0(v43, a2 + 80);
        sub_216B4B340(v25, v43[0], v43[1]);
        sub_216B4B3B4(&__str);
        break;
    }
    return sub_216BCECA0(v56);
  }
  if (v8 != v9)
  {
    sub_216B4B364(*(_QWORD *)(a1 + 160), 4737, (uint64_t)v56);
    sub_216B26CA0(v54, a2);
    v21 = sub_216B4B340(v56, v54[0], v54[1]);
    sub_216B26CA0(v53, a2 + 80);
    v22 = v53[0];
    v23 = v53[1];
LABEL_21:
    sub_216B4B340(v21, v22, v23);
    return sub_216B4B3B4(v56);
  }
  sub_216B35A60(v56);
  v52 = sub_216B2C910((uint64_t *)(a2 + 56));
  v51 = sub_216B2C000(a2 + 56);
  while (sub_216B2AB28((uint64_t)&v52, (uint64_t)&v51))
  {
    v10 = (const std::string *)sub_216B1E600((uint64_t)&v52);
    std::string::basic_string(&__str, v10);
    v50 = std::stof(&__str, 0);
    sub_216B26208((uint64_t)v56, &v50);
    std::string::~string(&__str);
    sub_216B4B50C(&v52);
  }
  sub_216B26CA0(v49, a2);
  sub_216BCEC3C(v48, (uint64_t)v56);
  sub_216BCEBD4(a1, v49[0], v49[1], v48[0], v48[1]);
  return sub_216B1FF6C(v56);
}

uint64_t sub_216BCE36C(uint64_t a1, uint64_t a2)
{
  const std::string *v4;
  uint64_t v5;
  const std::string *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];
  int v17;
  std::string __str;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[5];
  _QWORD v22[2];
  uint64_t v23[2];
  uint64_t v24[2];

  if (*(_DWORD *)(a2 + 48) == 1)
  {
    sub_216B26CA0(v24, a2);
    v4 = (const std::string *)sub_216B2BF7C((_QWORD *)(a2 + 56), 0);
    v5 = std::stoi(v4, 0, 10);
    return sub_216BCECA4(a1, v24[0], v24[1], v5);
  }
  if (*(_DWORD *)(a2 + 52) != 1)
  {
    sub_216B4B364(*(_QWORD *)(a1 + 160), 4739, (uint64_t)v21);
    sub_216B26CA0(v14, a2 + 24);
    v8 = sub_216B4B340(v21, v14[0], v14[1]);
    sub_216B26CA0(v13, a2);
    v9 = sub_216B4B340(v8, v13[0], v13[1]);
    sub_216B26CA0(v12, a2 + 80);
    v10 = v12[0];
    v11 = v12[1];
LABEL_10:
    sub_216B4B340(v9, v10, v11);
    return sub_216B4B3B4(v21);
  }
  if (sub_216B2BFE4((_QWORD *)(a2 + 56)) != *(_DWORD *)(a2 + 48))
  {
    sub_216B4B364(*(_QWORD *)(a1 + 160), 4737, (uint64_t)v21);
    sub_216B26CA0(v23, a2);
    v9 = sub_216B4B340(v21, v23[0], v23[1]);
    sub_216B26CA0(v22, a2 + 80);
    v10 = v22[0];
    v11 = v22[1];
    goto LABEL_10;
  }
  sub_216B35A60(v21);
  v20 = sub_216B2C910((uint64_t *)(a2 + 56));
  v19 = sub_216B2C000(a2 + 56);
  while (sub_216B2AB28((uint64_t)&v20, (uint64_t)&v19))
  {
    v7 = (const std::string *)sub_216B1E600((uint64_t)&v20);
    std::string::basic_string(&__str, v7);
    v17 = std::stoi(&__str, 0, 10);
    sub_216B26208((uint64_t)v21, &v17);
    std::string::~string(&__str);
    sub_216B4B50C(&v20);
  }
  sub_216B26CA0(v16, a2);
  sub_216BCEC3C(v15, (uint64_t)v21);
  sub_216BCED04(a1, v16[0], v16[1], v15[0], v15[1]);
  return sub_216B1FF6C(v21);
}

uint64_t sub_216BCE564(uint64_t a1, uint64_t a2)
{
  const std::string *v4;
  _BOOL4 v5;
  const std::string *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];
  BOOL v17;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[4];
  _QWORD v22[2];
  uint64_t v23[2];
  uint64_t v24[2];

  if (*(_DWORD *)(a2 + 48) == 1)
  {
    sub_216B26CA0(v24, a2);
    v4 = (const std::string *)sub_216B2BF7C((_QWORD *)(a2 + 56), 0);
    v5 = sub_216B2E044(v4, "false");
    return sub_216BCED6C(a1, v24[0], v24[1], !v5);
  }
  if (*(_DWORD *)(a2 + 52) != 1)
  {
    sub_216B4B364(*(_QWORD *)(a1 + 160), 4739, (uint64_t)v21);
    sub_216B26CA0(v14, a2 + 24);
    v8 = sub_216B4B340(v21, v14[0], v14[1]);
    sub_216B26CA0(v13, a2);
    v9 = sub_216B4B340(v8, v13[0], v13[1]);
    sub_216B26CA0(v12, a2 + 80);
    v10 = v12[0];
    v11 = v12[1];
LABEL_10:
    sub_216B4B340(v9, v10, v11);
    return sub_216B4B3B4(v21);
  }
  if (sub_216B2BFE4((_QWORD *)(a2 + 56)) != *(_DWORD *)(a2 + 48))
  {
    sub_216B4B364(*(_QWORD *)(a1 + 160), 4737, (uint64_t)v21);
    sub_216B26CA0(v23, a2);
    v9 = sub_216B4B340(v21, v23[0], v23[1]);
    sub_216B26CA0(v22, a2 + 80);
    v10 = v22[0];
    v11 = v22[1];
    goto LABEL_10;
  }
  sub_216BCEDCC();
  v20 = sub_216B2C910((uint64_t *)(a2 + 56));
  v19 = sub_216B2C000(a2 + 56);
  while (sub_216B2AB28((uint64_t)&v20, (uint64_t)&v19))
  {
    v7 = (const std::string *)sub_216B1E600((uint64_t)&v20);
    std::string::basic_string(&v18, v7);
    v17 = !sub_216B2E044(&v18, "false");
    sub_216B1FBBC((uint64_t)v21, &v17);
    std::string::~string(&v18);
    sub_216B4B50C(&v20);
  }
  sub_216B26CA0(v16, a2);
  sub_216BCEE38(v15, (uint64_t)v21);
  sub_216BCEDD0(a1, v16[0], v16[1], v15[0], v15[1]);
  return sub_216B1FF6C(v21);
}

_QWORD *sub_216BCE768(_QWORD *result)
{
  *result += 104;
  return result;
}

void sub_216BCE77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 168;
  v7 = sub_216B5133C((_QWORD *)(a1 + 168), a2, a3);
  v6 = sub_216B3C994(v4);
  if (!sub_216B37620(&v7, &v6))
  {
    v5 = sub_216B3C9C8((uint64_t)&v7);
    sub_216BCE7EC(a1, *(_QWORD **)(v5 + 8));
    sub_216BCE7F8(v4, v7);
  }
}

uint64_t sub_216BCE7EC(uint64_t a1, _QWORD *a2)
{
  return sub_216BD1328(a1, a1 + 24, a2);
}

void sub_216BCE7F8(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (unsigned int *)sub_216B3C9C8((uint64_t)&v4);
  sub_216B513E4(a1, v3);
  sub_216B3D828(v3, a1 + 24);
}

uint64_t sub_216BCE844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_216BCE8C4(72, a1);
  sub_216BCE8CC(v6);
  return sub_216BCE8D0(a1, a2, a3, v6);
}

uint64_t sub_216BCE8C4(uint64_t a1, uint64_t a2)
{
  return sub_216BD1448(a2);
}

uint64_t sub_216BCE8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[3];
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v12 = a4;
  v5 = a1 + 168;
  sub_216B3DE64(v10, v13, &v12);
  result = sub_216B3DC2C(v5, v10);
  v11[0] = result;
  v11[1] = v7;
  if (!(_BYTE)v7)
  {
    v8 = sub_216B3C9C8((uint64_t)v11);
    sub_216BCE7EC(a1, *(_QWORD **)(v8 + 8));
    v9 = v12;
    result = sub_216B3C9C8((uint64_t)v11);
    *(_QWORD *)(result + 8) = v9;
  }
  return result;
}

uint64_t sub_216BCE94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_216BCE8C4(72, a1);
  sub_216BCE9E0(v6);
  return sub_216BCE8D0(a1, a2, a3, v6);
}

uint64_t sub_216BCE9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;

  v17 = sub_216BCE8C4(72, a1);
  sub_216BCEA80(v17, a4, a5, a6, a7, a9, a10, v18, a11, a12);
  return sub_216BCE8D0(a1, a2, a3, v17);
}

uint64_t sub_216BCEA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_216BCF608(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

BOOL sub_216BCEA8C@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _BOOL8 result;
  unsigned int *v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;

  sub_216B2C030(a2);
  a1 += 168;
  v9 = (_QWORD *)sub_216B5DEB4(a1);
  v8 = sub_216B5DEE8(a1);
  for (result = sub_216B3760C(&v9, &v8); result; result = sub_216B3760C(&v9, &v8))
  {
    v5 = (unsigned int *)sub_216B3C9C8((uint64_t)&v9);
    v7.n128_u64[0] = sub_216B3CA54(v5);
    v7.n128_u64[1] = v6;
    sub_216BCEB1C(a2, &v7);
    sub_216B3CA9C(&v9);
  }
  return result;
}

uint64_t sub_216BCEB1C(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, (uint64_t)a2))
  {
    result = sub_216BCF7D4(a1, a2);
  }
  else
  {
    sub_216B2E55C((uint64_t)a1, a2);
    result = v4 + 16;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216BCEB74(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;

  v8 = sub_216BCE8C4(72, a1);
  sub_216BB5504(v8, a4);
  return sub_216BCE8D0(a1, a2, a3, v8);
}

uint64_t sub_216BCEBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_216BCE8C4(72, a1);
  sub_216BD15D4(v10, a4, a5);
  return sub_216BCE8D0(a1, a2, a3, v10);
}

uint64_t sub_216BCEC44(_QWORD *a1, _QWORD *a2)
{
  const void **v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216BD165C(a1, 0);
  v4 = (const void **)sub_216B1E67C((uint64_t)a1);
  sub_216BD1750(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 40;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216BCECA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_216BCE8C4(72, a1);
  sub_216BB5518(v8, a4);
  return sub_216BCE8D0(a1, a2, a3, v8);
}

uint64_t sub_216BCED04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_216BCE8C4(72, a1);
  sub_216BD1BCC(v10, a4, a5);
  return sub_216BCE8D0(a1, a2, a3, v10);
}

uint64_t sub_216BCED6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_216BCE8C4(72, a1);
  sub_216BB552C(v8, a4);
  return sub_216BCE8D0(a1, a2, a3, v8);
}

uint64_t sub_216BCEDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_216BCE8C4(72, a1);
  sub_216BD1C9C(v10, a4, a5);
  return sub_216BCE8D0(a1, a2, a3, v10);
}

uint64_t sub_216BCEE3C(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;

  if (sub_216B4D0A4(a1) || (result = sub_216B4D0AC(a1), (_DWORD)result))
  {
    v3 = sub_216B4D0A4(a1);
    v4 = sub_216B4CBC0(a1);
    if (v4 <= 4 * v3 || (v4 = sub_216B4CBC0(a1), v4 < 0x41))
    {
      v5 = sub_216B512E8(v4);
      v6 = sub_216BA5500();
      v7 = (uint64_t *)sub_216B262E0(a1);
      v8 = sub_216B5F664(a1);
      if (v7 != (uint64_t *)v8)
      {
        v9 = (uint64_t *)v8;
        do
        {
          if (!sub_216B2A5FC(*v7, v5))
          {
            if (!sub_216B2A5FC(*v7, v6))
              sub_216B67818(a1);
            *v7 = v5;
          }
          v7 += 2;
        }
        while (v7 != v9);
      }
      return sub_216B4CB70(a1, 0);
    }
    else
    {
      return sub_216BCEF44(a1);
    }
  }
  return result;
}

uint64_t sub_216BCEF48(uint64_t a1)
{
  unsigned int v2;
  int v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 8);
  sub_216BA547C(a1);
  if (v2)
  {
    v5 = 64;
    v4 = 1 << (sub_216B2CA00(v2) + 1);
    v2 = *(_DWORD *)sub_216B4ED68(&v5, &v4);
  }
  if (v2 == *(_DWORD *)(a1 + 16))
    return sub_216BA57C8(a1);
  j__free(*(void **)a1);
  return sub_216BA5790(a1, v2);
}

uint64_t sub_216BCEFD4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = 0;
  return sub_216BA6D08(a1, a2, &v3);
}

uint64_t *sub_216BCEFF8(uint64_t a1, uint64_t *a2)
{
  return sub_216BCF010(a1, a2) + 1;
}

uint64_t *sub_216BCF010(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t *v6;

  v6 = 0;
  if (sub_216BCF068(a1, a2, &v6))
    return v6;
  v5 = 0;
  return sub_216BCF0A0(a1, a2, &v5, v6);
}

uint64_t sub_216BCF068(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v5;

  v5 = 0;
  result = sub_216BA6D08(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t *sub_216BCF0A0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;

  result = sub_216BCF0D8(a1, a2, a4);
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t *sub_216BCF0D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;

  v11 = a3;
  v5 = sub_216B4D0A4(a1);
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216BCF1C0(a1, (2 * v6));
    sub_216BCF068(a1, a2, &v11);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216BCF1C0(a1, v7);
    sub_216BCF068(a1, a2, &v11);
  }
  v8 = sub_216B4D0B0(a1);
  v9 = sub_216B512E8(v8);
  if (!sub_216B2A5FC(*v11, v9))
    sub_216B4D0D8(a1);
  return v11;
}

void sub_216BCF1C4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B5FA0C(a1, *v5);
  if (v4)
  {
    sub_216BCF24C(a1, v4, &v4[2 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216BA57C8(a1);
  }
}

uint64_t sub_216BCF24C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;

  v6 = sub_216BA57C8(a1);
  v7 = sub_216B512E8(v6);
  result = sub_216BA5500();
  if (a2 != a3)
  {
    v9 = result;
    do
    {
      result = sub_216B2A5FC(*a2, v7);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*a2, v9);
        if ((result & 1) == 0)
        {
          v10 = 0;
          sub_216BCF068(a1, a2, &v10);
          *v10 = *a2;
          v10[1] = a2[1];
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216BCF304(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::string::basic_string((std::string *)a1, (const std::string *)a2);
  std::string::basic_string(v4 + 1, (const std::string *)(a2 + 24));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  sub_216B76F64(a1 + 56, a2 + 56);
  std::string::basic_string((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  return a1;
}

void sub_216BCF358(uint64_t a1)
{
  std::string::~string((std::string *)(a1 + 80));
  sub_216B2C034(a1 + 56);
  std::string::~string((std::string *)(a1 + 24));
  std::string::~string((std::string *)a1);
}

uint64_t sub_216BCF390(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];

  sub_216BCF3D8(v5);
  v2 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v2;
  v3 = v5[3];
  *(_OWORD *)(a1 + 32) = v5[2];
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = 4;
  return a1;
}

_OWORD *sub_216BCF3DC(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  __int128 v12;

  for (i = 0; i != 4; ++i)
    j_nullsub_1(&a1[i], a2);
  sub_216BCF46C(&v12, a2, a3);
  *a1 = v12;
  sub_216BCF46C(&v12, a4, a5);
  a1[1] = v12;
  return a1;
}

uint64_t sub_216BCF470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (sub_216B1E67C((uint64_t)v9))
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(_DWORD *)sub_216BCF4F8(v9, v4);
      *(_DWORD *)sub_216BAEC94(a1, v4) = v6;
      v4 = v5;
    }
    while (sub_216B1E67C((uint64_t)v9) > (unint64_t)v5++);
  }
  return a1;
}

uint64_t sub_216BCF4F8(_QWORD *a1, uint64_t a2)
{
  return *a1 + 4 * a2;
}

uint64_t sub_216BCF504(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];

  sub_216BCF54C(v5);
  v2 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v2;
  v3 = v5[3];
  *(_OWORD *)(a1 + 32) = v5[2];
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = 4;
  return a1;
}

_OWORD *sub_216BCF550(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  __int128 v16;

  for (i = 0; i != 4; ++i)
    j_nullsub_1(&a1[i], a2);
  sub_216BCF46C(&v16, a2, a3);
  *a1 = v16;
  sub_216BCF46C(&v16, a4, a5);
  a1[1] = v16;
  sub_216BCF46C(&v16, a6, a7);
  a1[2] = v16;
  return a1;
}

uint64_t sub_216BCF608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __int128 v11;
  __int128 v12;
  _OWORD v14[4];

  sub_216BCF658(v14, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  v11 = v14[1];
  *(_OWORD *)a1 = v14[0];
  *(_OWORD *)(a1 + 16) = v11;
  v12 = v14[3];
  *(_OWORD *)(a1 + 32) = v14[2];
  *(_OWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 64) = 4;
  return a1;
}

_OWORD *sub_216BCF658(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_216BCF664(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

_OWORD *sub_216BCF664(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t i;
  __int128 v19;

  for (i = 0; i != 4; ++i)
    j_nullsub_1(&a1[i], a2);
  sub_216BCF46C(&v19, a2, a3);
  *a1 = v19;
  sub_216BCF46C(&v19, a4, a5);
  a1[1] = v19;
  sub_216BCF46C(&v19, a6, a7);
  a1[2] = v19;
  sub_216BCF46C(&v19, a9, a10);
  a1[3] = v19;
  return a1;
}

_QWORD *sub_216BCF744(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  sub_216BCF798(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216BCF798(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 40;
      result = sub_216B1FF6C(v2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_216BCF7D4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, (uint64_t)a2);
  v5 = sub_216B2D0E0(a1);
  v6 = sub_216B2E6A0(a1, v5 + 1);
  v7 = sub_216B2D0E0(a1);
  sub_216B2E718(v12, v6, v7, v4);
  v9 = (__n128 *)nullsub_1(v13, v8);
  sub_216B2E67C(v4, v9, a2);
  v13 += 16;
  sub_216BCF880(a1, v12);
  v10 = a1[1];
  sub_216B2E808(v12);
  return v10;
}

uint64_t sub_216BCF880(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216BCF96C();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2D0E0(a1);
  return nullsub_1(a1, v10);
}

uint64_t sub_216BCF96C()
{
  return sub_216BCF988();
}

uint64_t sub_216BCF988()
{
  _QWORD v1[3];

  sub_216BCF9AC(v1);
  return v1[2];
}

uint64_t sub_216BCF9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B2EAD4(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216BCFA80(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216BCFABC(&v3);
  return a1;
}

uint64_t *sub_216BCFABC(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216BCFB20(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216BCFB2C(v6, v8);
    return (uint64_t *)sub_216BCFB28(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216BCFB20(uint64_t *a1)
{
  return sub_216BCFB70((uint64_t)a1, *a1);
}

uint64_t sub_216BCFB2C(_QWORD *a1, uint64_t a2)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 3);
}

uint64_t sub_216BCFB70(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216BCFBD4(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 104;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216BCFBD8(uint64_t a1, uint64_t a2)
{
  return sub_216BCE764(a2);
}

uint64_t sub_216BCFBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 104 * a3, 8);
}

uint64_t sub_216BCFBF4(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v4 = sub_216BCFCD4(a1, a2);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v8 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, i, &v8))
      {
        v6 = sub_216BCFD20(a1, a2, i);
        sub_216BCFCDC(a1, v6);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v8);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t sub_216BCFCD4(uint64_t a1, _QWORD *a2)
{
  return sub_216BCFD64(a2);
}

uint64_t sub_216BCFCDC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  sub_216BCFD88(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t sub_216BCFD20(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (sub_216BCFD64(a2) <= a3)
    sub_216BD0A54(a2, a3 + 1);
  return sub_216BD0AB0(a2, a3);
}

uint64_t sub_216BCFD64(_QWORD *a1)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3);
}

uint64_t sub_216BCFD88(uint64_t a1, uint64_t a2)
{
  sub_216BCFE04(a1, (uint64_t)"name", a2);
  sub_216BCFE04(a1, (uint64_t)"type", a2 + 24);
  sub_216BCFE0C(a1, (uint64_t)"numCols", (unsigned int *)(a2 + 48));
  sub_216BCFE0C(a1, (uint64_t)"numRows", (unsigned int *)(a2 + 52));
  return sub_216BCFE14(a1, (uint64_t)"values", (uint64_t *)(a2 + 56));
}

uint64_t sub_216BCFE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BCFE1C(a1, a2, a3, 1);
}

uint64_t sub_216BCFE0C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return sub_216BD04CC(a1, a2, a3, 0);
}

uint64_t sub_216BCFE14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_216BD0678(a1, a2, a3, 1);
}

uint64_t sub_216BCFE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_216BCFE9C(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

void sub_216BCFE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[6];
  std::string v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    sub_216B25034(&v14);
    sub_216B6042C(v13, &v14);
    v4 = sub_216B1E67C(a1);
    sub_216B3D57C(a2, v4, v13);
    v5 = sub_216B60430((uint64_t *)v13);
    sub_216B26CA0(&v11, v5);
    v6 = sub_216BCFFC8(v11, v12);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 184))(a1, &v11, v6);
    sub_216B40CD4(v13);
    std::string::~string(&v14);
  }
  else
  {
    sub_216B26D14(&v14);
    v7 = sub_216BCFFC8(v14.__r_.__value_.__r.__words[0], v14.__r_.__value_.__l.__size_);
    (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 184))(a1, &v14, v7);
    v8 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    v9 = sub_216B1E67C(a1);
    v11 = sub_216B3D588(v8, *((uint64_t *)&v8 + 1), v9, a2);
    v12 = v10;
    if (!sub_216B29094((uint64_t)&v11))
    {
      sub_216B25FB0((uint64_t)v13, (uint64_t)&v11);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, v13);
    }
  }
}

BOOL sub_216BCFFCC(char *a1, uint64_t a2)
{
  signed int v2;
  signed int v3;
  uint64_t v5[2];
  char *v6;
  uint64_t v7;

  v6 = a1;
  v7 = a2;
  if (sub_216B29094((uint64_t)&v6))
    return 1;
  v2 = sub_216B324E0(&v6);
  if (sub_216BD0074(v2))
    return 1;
  v3 = sub_216B4FE64(&v6);
  if (sub_216BD0074(v3))
    return 1;
  if (sub_216B324E0(&v6) == 44)
    return 1;
  sub_216B1E678((int)v5, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-/^., \t");
  return sub_216B31EC4(&v6, v5[0], v5[1], 0) != -1
      || sub_216BD007C((uint64_t)v6, v7)
      || sub_216BD011C((uint64_t)v6, v7)
      || sub_216BD01FC(v6, v7);
}

BOOL sub_216BD0074(signed int a1)
{
  return sub_216B40EF0(a1, 0x4000uLL);
}

BOOL sub_216BD007C(uint64_t a1, uint64_t a2)
{
  const void *v3[2];
  const void *v4[2];
  const void *v5[2];
  const void *v6[2];
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  sub_216B1E678((int)v6, "null");
  if (sub_216B1E644((uint64_t)v7, v6[0], (size_t)v6[1]))
    return 1;
  sub_216B1E678((int)v5, "Null");
  if (sub_216B1E644((uint64_t)v7, v5[0], (size_t)v5[1]))
    return 1;
  sub_216B1E678((int)v4, "NULL");
  if (sub_216B1E644((uint64_t)v7, v4[0], (size_t)v4[1]))
    return 1;
  sub_216B1E678((int)v3, "~");
  return sub_216B1E644((uint64_t)v7, v3[0], (size_t)v3[1]);
}

BOOL sub_216BD011C(uint64_t a1, uint64_t a2)
{
  const void *v3[2];
  const void *v4[2];
  const void *v5[2];
  const void *v6[2];
  const void *v7[2];
  const void *v8[2];
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  sub_216B1E678((int)v8, "true");
  if (sub_216B1E644((uint64_t)v9, v8[0], (size_t)v8[1]))
    return 1;
  sub_216B1E678((int)v7, "True");
  if (sub_216B1E644((uint64_t)v9, v7[0], (size_t)v7[1]))
    return 1;
  sub_216B1E678((int)v6, "TRUE");
  if (sub_216B1E644((uint64_t)v9, v6[0], (size_t)v6[1]))
    return 1;
  sub_216B1E678((int)v5, "false");
  if (sub_216B1E644((uint64_t)v9, v5[0], (size_t)v5[1]))
    return 1;
  sub_216B1E678((int)v4, "False");
  if (sub_216B1E644((uint64_t)v9, v4[0], (size_t)v4[1]))
    return 1;
  sub_216B1E678((int)v3, "FALSE");
  return sub_216B1E644((uint64_t)v9, v3[0], (size_t)v3[1]);
}

BOOL sub_216BD01FC(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v6[2];
  const void *v7[2];
  const void *v8[2];
  char *v9;
  uint64_t v10;

  v9 = a1;
  v10 = a2;
  if (sub_216B324E0(&v9) != 45 && sub_216B324E0(&v9) != 43
    || (v2 = 1, v3 = sub_216B3A5FC(&v9, 1uLL), (sub_216BD02D0(v3, v4) & 1) == 0))
  {
    if ((sub_216BD02D0((uint64_t)v9, v10) & 1) != 0)
      return 1;
    sub_216B1E678((int)v8, ".nan");
    if (sub_216B1E644((uint64_t)&v9, v8[0], (size_t)v8[1]))
      return 1;
    sub_216B1E678((int)v7, ".NaN");
    if (sub_216B1E644((uint64_t)&v9, v7[0], (size_t)v7[1]))
    {
      return 1;
    }
    else
    {
      sub_216B1E678((int)v6, ".NAN");
      return sub_216B1E644((uint64_t)&v9, v6[0], (size_t)v6[1]);
    }
  }
  return v2;
}

uint64_t sub_216BD02D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  uint64_t v8[2];
  const void *v9[2];
  const void *v10[2];
  const void *v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  const void *v14[2];
  uint64_t v15[2];
  const void *v16[2];
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  const void *v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v22 = a2;
  sub_216B1E678((int)v20, "0");
  if (!sub_216B2A2EC((uint64_t)&v21, v20[0], (size_t)v20[1])
    || (v2 = 1,
        v18 = sub_216B3A5FC(&v21, 1uLL),
        v19 = v3,
        sub_216B1E678((int)v17, "01234567"),
        sub_216B31EC4(&v18, v17[0], v17[1], 0) != -1))
  {
    sub_216B1E678((int)v16, "0o");
    if (sub_216B2A2EC((uint64_t)&v21, v16[0], (size_t)v16[1]))
    {
      v18 = sub_216B3A5FC(&v21, 2uLL);
      v19 = v4;
      sub_216B1E678((int)v15, "01234567");
      if (sub_216B31EC4(&v18, v15[0], v15[1], 0) == -1)
        return 1;
    }
    sub_216B1E678((int)v14, "0x");
    if (sub_216B2A2EC((uint64_t)&v21, v14[0], (size_t)v14[1]))
    {
      v18 = sub_216B3A5FC(&v21, 2uLL);
      v19 = v5;
      sub_216B1E678((int)v13, "0123456789abcdefABCDEF");
      if (sub_216B31EC4(&v18, v13[0], v13[1], 0) == -1)
        return 1;
    }
    sub_216B1E678((int)v12, "0123456789");
    if (sub_216B31EC4(&v21, v12[0], v12[1], 0) == -1)
      return 1;
    sub_216B1E678((int)v11, ".inf");
    if (sub_216B1E644((uint64_t)&v21, v11[0], (size_t)v11[1]))
      return 1;
    sub_216B1E678((int)v10, ".Inf");
    if (sub_216B1E644((uint64_t)&v21, v10[0], (size_t)v10[1]))
      return 1;
    sub_216B1E678((int)v9, ".INF");
    if (sub_216B1E644((uint64_t)&v21, v9[0], (size_t)v9[1]))
    {
      return 1;
    }
    else
    {
      sub_216B1E678((int)v8, "^(\\.[0-9]+|[0-9]+(\\.[0-9]*)?)([eE][-+]?[0-9]+)?$");
      v7 = sub_216B2B630(&v18, v8[0], v8[1], 0);
      v2 = sub_216B2B6FC(v7, v21, v22, 0);
      sub_216B2B66C((void **)&v18);
    }
  }
  return v2;
}

uint64_t sub_216BD04CC(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_216BD054C(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

void sub_216BD054C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  void *v12[6];
  std::string v13;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    sub_216B25034(&v13);
    sub_216B6042C(v12, &v13);
    v4 = sub_216B1E67C(a1);
    sub_216B3D5DC(a2, v4, v12);
    v5 = sub_216B60430((uint64_t *)v12);
    sub_216B26CA0(v11, v5);
    v6 = sub_216B2043C();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, v11, v6);
    sub_216B40CD4(v12);
    std::string::~string(&v13);
  }
  else
  {
    sub_216B26D14(&v13);
    v7 = sub_216B2043C();
    (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 184))(a1, &v13, v7);
    v8 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v9 = sub_216B1E67C(a1);
    v11[0] = sub_216B3D5E8(v8, *((uint64_t *)&v8 + 1), v9, a2);
    v11[1] = v10;
    if (!sub_216B29094((uint64_t)v11))
    {
      sub_216B25FB0((uint64_t)v12, (uint64_t)v11);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, v12);
    }
  }
}

uint64_t sub_216BD0678(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_216BD06F8(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_216BD06F8(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v4 = sub_216BD07D8(a1, a2);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v8 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, i, &v8))
      {
        v6 = sub_216BD07E0(a1, a2, i);
        sub_216BCFE9C(a1, v6);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v8);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

unint64_t sub_216BD07D8(uint64_t a1, _QWORD *a2)
{
  return sub_216B2BFE4(a2);
}

uint64_t sub_216BD07E0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (sub_216B2BFE4(a2) <= a3)
    sub_216BD0824(a2, a3 + 1);
  return sub_216B2BF7C(a2, a3);
}

_QWORD *sub_216BD0824(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B2BFE4(a1);
  if (a2 > (unint64_t)result)
    return sub_216BD0880(a1, a2 - (_QWORD)result);
  if (a2 < (unint64_t)result)
    return (_QWORD *)sub_216B2C918(a1, *a1 + 24 * a2);
  return result;
}

_QWORD *sub_216BD0880(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[5];

  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - a1[1]) >> 3) >= a2)
    return sub_216BD0954((uint64_t)a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B2BFE4(a1);
  v7 = sub_216B2C364(a1, v6 + a2);
  v8 = sub_216B2BFE4(a1);
  sub_216B2C3DC(v10, v7, v8, v5);
  sub_216BD09D0((uint64_t)v10, a2);
  sub_216B2C3E0(a1, v10);
  return (_QWORD *)sub_216B2C4CC(v10);
}

_QWORD *sub_216BD0954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_216B2C328(&v10, a1, a2);
  v4 = v11;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = sub_216B2C144(a1, v3);
    v8 = nullsub_1(v4, v7);
    sub_216BD0A48(v6, v8);
    v4 += 24;
    v11 = v4;
  }
  return sub_216B2C330(&v10);
}

uint64_t sub_216BD09D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B7BD80(&v9, a1 + 16, a2);
  v3 = v9;
  v4 = v10;
  while (v3 != v4)
  {
    v5 = sub_216B2C5E4(a1);
    v7 = nullsub_1(v9, v6);
    sub_216BD0A48(v5, v7);
    v4 = v10;
    v3 = v9 + 24;
    v9 += 24;
  }
  return sub_216B701B0((uint64_t)&v9);
}

uint64_t sub_216BD0A4C(uint64_t a1, uint64_t a2)
{
  return sub_216B25034(a2);
}

uint64_t *sub_216BD0A54(uint64_t *a1, unint64_t a2)
{
  uint64_t *result;

  result = (uint64_t *)sub_216BCFD64(a1);
  if (a2 > (unint64_t)result)
    return sub_216BD0AC0(a1, a2 - (_QWORD)result);
  if (a2 < (unint64_t)result)
    return (uint64_t *)sub_216BD0B9C(a1, *a1 + 104 * a2);
  return result;
}

uint64_t sub_216BD0AB0(_QWORD *a1, uint64_t a2)
{
  return *a1 + 104 * a2;
}

uint64_t *sub_216BD0AC0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10[5];

  if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - a1[1]) >> 3) >= a2)
    return sub_216BD0BE0((uint64_t)a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216BCFD64(a1);
  v7 = sub_216BD0C5C(a1, v6 + a2);
  v8 = sub_216BCFD64(a1);
  sub_216BD0CD4(v10, v7, v8, v5);
  sub_216BD0CD8((uint64_t)v10, a2);
  sub_216BD0D50(a1, v10);
  return sub_216BD0E3C(v10);
}

uint64_t sub_216BD0B9C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216BCFD64(a1);
  sub_216BCFB70((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

_QWORD *sub_216BD0BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_216BD0E40(&v10, a1, a2);
  v4 = v11;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = sub_216B2C144(a1, v3);
    v8 = nullsub_1(v4, v7);
    sub_216BD0E44(v6, v8);
    v4 += 104;
    v11 = v4;
  }
  return sub_216B2C330(&v10);
}

unint64_t sub_216BD0C5C(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216BD0EC4((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216BCFB2C(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216BD0CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216BD1000(&v9, a1 + 16, a2);
  v3 = v9;
  v4 = v10;
  while (v3 != v4)
  {
    v5 = sub_216B2C5E4(a1);
    v7 = nullsub_1(v9, v6);
    sub_216BD0E44(v5, v7);
    v4 = v10;
    v3 = v9 + 104;
    v9 += 104;
  }
  return sub_216B701B0((uint64_t)&v9);
}

uint64_t sub_216BD0D50(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216BD1020(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216BCFD64(a1);
  return nullsub_1(a1, v11);
}

_QWORD *sub_216BD0E48(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *result = a2;
  v3 = *(_QWORD *)(a2 + 8);
  result[1] = v3;
  result[2] = v3 + 104 * a3;
  return result;
}

uint64_t sub_216BD0E60(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return sub_216BD0E7C(a2);
}

uint64_t sub_216BD0E80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B25034(a1);
  sub_216B25034(v2 + 24);
  *(_QWORD *)(a1 + 48) = 0x100000001;
  sub_216B2C030((_QWORD *)(a1 + 56));
  sub_216B25034(a1 + 80);
  return a1;
}

uint64_t sub_216BD0EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216BD0F00(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216BD0F04()
{
  return 0x276276276276276;
}

uint64_t *sub_216BD0F18(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216BD0FA4(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 104 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 104 * v9;
  return a1;
}

uint64_t sub_216BD0FA4(uint64_t a1, unint64_t a2)
{
  return sub_216BD0FC8(a1, a2);
}

uint64_t sub_216BD0FC8(uint64_t a1, unint64_t a2)
{
  if (sub_216BD0F00() < a2)
    sub_216B25C54();
  return sub_216B25CA0(104 * a2, 8);
}

_QWORD *sub_216BD1004(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  *result = *a2;
  result[1] = *a2 + 104 * a3;
  result[2] = a2;
  return result;
}

uint64_t sub_216BD1020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216BD10EC((uint64_t)&v16);
    v9 = sub_216BD10F0((uint64_t)v18);
    sub_216BD10E8(a1, v8, v9);
    sub_216BD10FC((uint64_t)v18);
    sub_216BD10FC((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216BD10F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 104;
}

uint64_t sub_216BD10FC(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 104;
  return result;
}

uint64_t sub_216BD110C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BD1118(a2, a3);
}

uint64_t sub_216BD111C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B2B018(a1, a2);
  sub_216B2B018(v4 + 24, a2 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  sub_216BD1170(a1 + 56, a2 + 56);
  sub_216B2B018(a1 + 80, a2 + 80);
  return a1;
}

_QWORD *sub_216BD1174(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v11 = 0;
  v5 = sub_216B2C144(a2, a2);
  sub_216B76FE8(v4, &v11, v5);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_QWORD *)sub_216B2C144(a2, v6);
  *(_QWORD *)sub_216B2C144((uint64_t)a1, v8) = v7;
  *(_QWORD *)sub_216B2C144(a2, v9) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

uint64_t sub_216BD11FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216BD1210(a1);
  return nullsub_1(v1, v2);
}

uint64_t *sub_216BD1214(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216BD1270((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216BD1278(a1, v4);
    sub_216BCFB28(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216BD1270(uint64_t a1)
{
  return sub_216BD12BC(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216BD1278(_QWORD *a1, uint64_t a2)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 3);
}

uint64_t sub_216BD12C0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 104;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216BCFBD4(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216BD1328(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_216BD1330(a1, a3);
}

uint64_t sub_216BD1330(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = sub_216BD1408(a1);
  return sub_216BD1360(a1, v4, a2);
}

uint64_t sub_216BD1360(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v5 = (_QWORD *)sub_216B1E600((uint64_t)&v8);
  v6 = sub_216B1E600((uint64_t)v5);
  sub_216B203A4((uint64_t)a3, (uint64_t)v5);
  sub_216B210B8(a3, v6);
  if (v5 == *(_QWORD **)(a1 + 16))
    *(_QWORD *)(a1 + 16) = a3;
  else
    sub_216B203A4(v6, (uint64_t)a3);
  sub_216B210B8(v5, (uint64_t)a3);
  nullsub_1(a1, a3);
  sub_216B20C64(&v9, (uint64_t)a3);
  return v9;
}

uint64_t sub_216BD1408(uint64_t a1)
{
  uint64_t v3;

  sub_216BD1440(a1);
  sub_216B20C64(&v3, *(_QWORD *)(a1 + 16));
  return v3;
}

uint64_t sub_216BD1440(uint64_t a1)
{
  return j_nullsub_1(a1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_216BD1448(uint64_t a1)
{
  return sub_216BD1450(a1, a1 + 24);
}

_QWORD *sub_216BD1454(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;

  if (sub_216BD14B8(a1))
    return (_QWORD *)sub_216B2663C(a2, 72, 8uLL);
  v5 = sub_216BD1408(a1);
  return sub_216BD14EC(a1, &v5);
}

BOOL sub_216BD14B8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || v1 == sub_216BD1440(a1);
}

_QWORD *sub_216BD14EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return sub_216BD1514(a1, &v3);
}

_QWORD *sub_216BD1514(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = (_QWORD *)sub_216B1E600((uint64_t)a2);
  v5 = (_QWORD *)sub_216B1E67C((uint64_t)v4);
  v6 = sub_216B1E600((uint64_t)v4);
  v7 = v6;
  if (v4 == *(_QWORD **)(a1 + 16))
    *(_QWORD *)(a1 + 16) = v5;
  else
    sub_216B203A4(v6, (uint64_t)v5);
  sub_216B210B8(v5, v7);
  sub_216B20C64(&v9, (uint64_t)v5);
  *a2 = v9;
  nullsub_1(a1, v4);
  sub_216B203A4((uint64_t)v4, 0);
  sub_216B210B8(v4, 0);
  return v4;
}

uint64_t sub_216BD15D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;

  sub_216BCF46C(&v5, a2, a3);
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + 64) = 3;
  return a1;
}

uint64_t *sub_216BD1618(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B262E4(a2);
  return a1;
}

uint64_t sub_216BD1654(uint64_t a1)
{
  return sub_216B2F784(a1, 4u);
}

uint64_t sub_216BD165C(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B2F96C((uint64_t)a1);
  v5 = sub_216B2F21C((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(40 * v7, 0x10800400DDA7E6AuLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216BD1754(v9, v10, (uint64_t)v8);
  v11 = sub_216B1E600((uint64_t)a1);
  v12 = sub_216B1E67C((uint64_t)a1);
  sub_216BCF798(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 40 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 40 * v7;
  return result;
}

uint64_t sub_216BD1754(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216BD17A4(a3, v5);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216BD17A8(uint64_t a1, _QWORD *a2)
{
  sub_216B264A8(a1, 4u);
  if (!sub_216B29084(a2))
    sub_216BD17EC(a1, a2);
  return a1;
}

uint64_t sub_216BD17EC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;

  if ((_QWORD *)a1 != a2)
  {
    if (sub_216B2081C(a2))
    {
      v4 = sub_216B262E4((uint64_t)a2);
      v5 = sub_216B262E4(a1);
      if (v5 >= v4)
      {
        v13 = sub_216B1E600(a1);
        if (v4)
        {
          v14 = sub_216B1E600((uint64_t)a2);
          v15 = sub_216B1E67C((uint64_t)a2);
          v13 = sub_216BD19D8(v14, v15, v13);
        }
        v16 = sub_216B1E67C(a1);
        nullsub_1(v13, v16);
        v17 = a1;
        v18 = v13;
      }
      else
      {
        v6 = v5;
        if (sub_216B7AB20(a1) >= v4)
        {
          if (v6)
          {
            v19 = sub_216B1E600((uint64_t)a2);
            v20 = sub_216B1E600((uint64_t)a2) + 4 * v6;
            v21 = sub_216B1E600(a1);
            sub_216BD19D8(v19, v20, v21);
          }
        }
        else
        {
          v7 = sub_216B1E600(a1);
          v8 = sub_216B1E67C(a1);
          nullsub_1(v7, v8);
          v9 = sub_216B1E600(a1);
          sub_216B203A4(a1, v9);
          sub_216B26598((const void **)a1, v4);
          v6 = 0;
        }
        v22 = (void *)(sub_216B1E600((uint64_t)a2) + 4 * v6);
        v23 = sub_216B1E67C((uint64_t)a2);
        v24 = sub_216B1E600(a1);
        sub_216B3B518(v22, v23, (void *)(v24 + 4 * v6));
        v18 = sub_216B1E600(a1) + 4 * v4;
        v17 = a1;
      }
      sub_216B203A4(v17, v18);
      sub_216B20594(a2);
    }
    else
    {
      v10 = sub_216B1E600(a1);
      v11 = sub_216B1E67C(a1);
      nullsub_1(v10, v11);
      if (!sub_216B2081C((_QWORD *)a1))
      {
        v12 = (void *)sub_216B1E600(a1);
        free(v12);
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      sub_216B86098(a2);
    }
  }
  return a1;
}

uint64_t sub_216BD19DC()
{
  uint64_t v0;

  sub_216BD19F4();
  return v0;
}

const void **sub_216BD19F8(const void **a1, _QWORD *a2)
{
  sub_216B264A8((uint64_t)a1, 4u);
  if (!sub_216B29084(a2))
    sub_216BD1A3C(a1, (uint64_t)a2);
  return a1;
}

const void **sub_216BD1A3C(const void **a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != (const void **)a2)
  {
    v4 = sub_216B262E4(a2);
    v5 = sub_216B262E4((uint64_t)a1);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_216B1E600(a2);
        sub_216B1E600(a2);
        sub_216B1E600((uint64_t)a1);
        v10 = sub_216BD19DC();
      }
      else
      {
        v10 = sub_216B1E600((uint64_t)a1);
      }
      v16 = v10;
      v17 = sub_216B1E67C((uint64_t)a1);
      nullsub_1(v16, v17);
      v15 = (uint64_t)a1;
      v14 = v16;
    }
    else
    {
      v6 = v5;
      if (sub_216B7AB20((uint64_t)a1) >= v4)
      {
        if (v6)
        {
          sub_216B1E600(a2);
          sub_216B1E600(a2);
          sub_216B1E600((uint64_t)a1);
          sub_216BD19DC();
        }
      }
      else
      {
        v7 = sub_216B1E600((uint64_t)a1);
        v8 = sub_216B1E67C((uint64_t)a1);
        nullsub_1(v7, v8);
        v9 = sub_216B1E600((uint64_t)a1);
        sub_216B203A4((uint64_t)a1, v9);
        sub_216B26598(a1, v4);
        v6 = 0;
      }
      v11 = (void *)(sub_216B1E600(a2) + 4 * v6);
      v12 = sub_216B1E67C(a2);
      v13 = sub_216B1E600((uint64_t)a1);
      sub_216B2A5E4(v11, v12, (void *)(v13 + 4 * v6));
      v14 = sub_216B1E600((uint64_t)a1) + 4 * v4;
      v15 = (uint64_t)a1;
    }
    sub_216B203A4(v15, v14);
  }
  return a1;
}

uint64_t sub_216BD1BD0(uint64_t a1)
{
  __int128 v3;

  sub_216BD1C10(&v3);
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 64) = 3;
  return a1;
}

uint64_t sub_216BD1C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (sub_216B1E67C((uint64_t)v9))
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(_DWORD *)sub_216BCF4F8(v9, v4);
      *(_DWORD *)sub_216BAEC94(a1, v4) = v6;
      v4 = v5;
    }
    while (sub_216B1E67C((uint64_t)v9) > (unint64_t)v5++);
  }
  return a1;
}

uint64_t sub_216BD1C94()
{
  return sub_216B2112C();
}

uint64_t sub_216BD1CA0(uint64_t a1)
{
  __int128 v3;

  sub_216BD1CE0(&v3);
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 64) = 3;
  return a1;
}

uint64_t sub_216BD1CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (sub_216B1E67C((uint64_t)v9))
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(_BYTE *)sub_216B25B40(v9, v4);
      *(_BYTE *)sub_216BAEC94(a1, v4) = v6;
      v4 = v5;
    }
    while (sub_216B1E67C((uint64_t)v9) > (unint64_t)v5++);
  }
  return a1;
}

uint64_t *sub_216BD1D64(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B1FF14(a2);
  return a1;
}

void sub_216BD1DA0(unsigned __int8 *a1)
{
  char *v1;

  v1 = (char *)sub_216BD1DD0 + 4 * byte_216C18E5E[sub_216B8B400(a1)];
  __asm { BR              X10 }
}

uint64_t sub_216BD1DD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216BD1EF4(v1);
}

uint64_t sub_216BD1DE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B693F8(v1);
}

void sub_216BD1DF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BD1F10(v1);
}

uint64_t sub_216BD1E0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B387B8(v1);
}

uint64_t sub_216BD1E20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B387B8(v1);
}

uint64_t sub_216BD1E34()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B4CBC4(v1);
}

uint64_t sub_216BD1E54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B27CA8(v1);
}

uint64_t sub_216BD1E68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

uint64_t sub_216BD1E7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B34198(v1);
}

uint64_t sub_216BD1E90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B693F8(v1);
}

uint64_t sub_216BD1EA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B693F8(v1);
}

uint64_t sub_216BD1EB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B693F8(v1);
}

uint64_t sub_216BD1ECC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  return sub_216B4CBC4(v1);
}

void sub_216BD1EE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_216B3DB48(v0);
  sub_216BC1A08(v1);
}

uint64_t sub_216BD1EF4(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)sub_216BAEDA0(a1 + 8);
  return sub_216BD1DA0(*v1);
}

void sub_216BD1F10(uint64_t a1)
{
  unsigned __int8 **v1;

  v1 = (unsigned __int8 **)sub_216BD2488(a1 + 8);
  sub_216BC0334(*v1);
}

_DWORD *sub_216BD1F2C(uint64_t a1, int a2, int a3)
{
  _DWORD *v5;

  v5 = (_DWORD *)sub_216BC0314(0x18u, a1, 8u);
  return sub_216BD1F64(v5, a2, a3);
}

_DWORD *sub_216BD1F64(_DWORD *a1, int a2, int a3)
{
  return sub_216BD248C(a1, a2, a3);
}

_DWORD *sub_216BD1F70(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v8;

  v8 = sub_216BD1F2C(a1, a2, a3);
  sub_216BD1FC4((_QWORD *)v8 + 1, a1, a4, a5);
  return v8;
}

void *sub_216BD1FC4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BD27E0((uint64_t)a1, v6);
  return sub_216BC172C(a1, a2, v8, v9);
}

_DWORD *sub_216BD2014(uint64_t a1, int a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)sub_216BC0314(8u, a1, 8u);
  return sub_216BD2044(v3, a2);
}

_DWORD *sub_216BD2044(_DWORD *a1, int a2)
{
  return sub_216BD24DC(a1, a2);
}

uint64_t sub_216BD204C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_216BC0314(0x10u, a1, 8u);
  v7 = sub_216BD20A8();
  sub_216BD20AC((unsigned __int8 *)(v7 + 8), a1, a2, a3);
  return v6;
}

void *sub_216BD20AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a3;
  v9 = a4;
  v6 = sub_216B1E67C((uint64_t)&v8);
  sub_216BD27E0((uint64_t)a1, v6);
  return sub_216BD27F8(a1, a2, v8, v9);
}

_DWORD *sub_216BD20FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  _DWORD *v13;

  v13 = (_DWORD *)sub_216BC0314(0x30u, a1, 8u);
  return sub_216BD2164(v13, a2, a3, a4, a5, a6, a7);
}

_DWORD *sub_216BD2164(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  return sub_216BD2544(a1, a2, a3, a4, a5, a6, a7);
}

_DWORD *sub_216BD2174(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v5;

  v5 = (_DWORD *)sub_216BC0314(0x28u, a1, 8u);
  return sub_216BD21AC(v5, a2, a3);
}

_DWORD *sub_216BD21AC(_DWORD *a1, int a2, uint64_t a3)
{
  return sub_216BD259C(a1, a2, a3);
}

_DWORD *sub_216BD21B4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _DWORD *v7;

  v7 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  return sub_216BD21FC(v7, a2, a3, a4);
}

_DWORD *sub_216BD21FC(_DWORD *a1, int a2, int a3, uint64_t a4)
{
  return sub_216BD25D0(a1, a2, a3, a4);
}

_DWORD *sub_216BD2208(uint64_t a1, int a2, int a3)
{
  _DWORD *v5;

  v5 = (_DWORD *)sub_216BC0314(0x18u, a1, 8u);
  return sub_216BD2240(v5, a2, a3);
}

_DWORD *sub_216BD2240(_DWORD *a1, int a2, int a3)
{
  return sub_216BD2630(a1, a2, a3);
}

_DWORD *sub_216BD224C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v11;

  v11 = (_DWORD *)sub_216BC0314(0x30u, a1, 8u);
  return sub_216BD22AC(v11, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BD22AC(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_216BD2644(a1, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BD22B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v7;

  v7 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  return sub_216BD22FC(v7, a2, a3, a4);
}

_DWORD *sub_216BD22FC(_DWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_216BD2694(a1, a2, a3, a4);
}

_DWORD *sub_216BD2304(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v7;
  int v8;

  v7 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  sub_216BC1A2C(a4);
  return sub_216BD2360(v7, a2, v8, a3, a4);
}

_DWORD *sub_216BD2360(_DWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_216BD26D0(a1, a2, a3, a4, a5);
}

_DWORD *sub_216BD236C(uint64_t a1, int a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)sub_216BC0314(8u, a1, 8u);
  return sub_216BD239C(v3, a2);
}

_DWORD *sub_216BD239C(_DWORD *a1, int a2)
{
  return sub_216BD2710(a1, a2);
}

_DWORD *sub_216BD23A4(uint64_t a1, int a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)sub_216BC0314(8u, a1, 8u);
  return sub_216BD23D4(v3, a2);
}

_DWORD *sub_216BD23D4(_DWORD *a1, int a2)
{
  return sub_216BD2738(a1, a2);
}

_DWORD *sub_216BD23DC(uint64_t a1, int a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)sub_216BC0314(8u, a1, 8u);
  return sub_216BD240C(v3, a2);
}

_DWORD *sub_216BD240C(_DWORD *a1, int a2)
{
  return sub_216BD2760(a1, a2);
}

_DWORD *sub_216BD2414(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v5;

  v5 = (_DWORD *)sub_216BC0314(0x18u, a1, 8u);
  return sub_216BD244C(v5, a2, a3);
}

_DWORD *sub_216BD244C(_DWORD *a1, int a2, uint64_t a3)
{
  return sub_216BD2788(a1, a2, a3);
}

uint64_t sub_216BD2454(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BC0314(0x10u, a1, 8u);
  return sub_216BD2484(v3, a2);
}

_DWORD *sub_216BD248C(_DWORD *a1, int a2, int a3)
{
  _DWORD *v6;

  v6 = sub_216BD24D0(a1, 0);
  sub_216B3A258(v6 + 2);
  a1[4] = a2;
  a1[5] = a3;
  return a1;
}

_DWORD *sub_216BD24D0(_DWORD *result, char a2)
{
  *result = 0;
  *(_BYTE *)result = a2;
  return result;
}

_DWORD *sub_216BD24DC(_DWORD *a1, int a2)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 1);
  result[1] = a2;
  return result;
}

_DWORD *sub_216BD2504(_DWORD *a1)
{
  _DWORD *v2;

  v2 = sub_216BD24D0(a1, 2);
  sub_216BD2534(v2 + 2);
  return a1;
}

_DWORD *sub_216BD2544(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 3);
  *((_QWORD *)result + 1) = a3;
  *((_QWORD *)result + 2) = a4;
  *((_QWORD *)result + 3) = a6;
  result[8] = a2;
  result[9] = a5;
  result[10] = a7;
  return result;
}

_DWORD *sub_216BD259C(_DWORD *a1, int a2, uint64_t a3)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 4);
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 1) = a3;
  result[8] = a2;
  return result;
}

_DWORD *sub_216BD25D0(_DWORD *a1, int a2, int a3, uint64_t a4)
{
  _DWORD *result;

  result = sub_216BD2604(a1, 5, a2, a3);
  *((_QWORD *)result + 3) = a4;
  return result;
}

_DWORD *sub_216BD2604(_DWORD *a1, char a2, int a3, int a4)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, a2);
  *((_QWORD *)result + 1) = 0;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_DWORD *sub_216BD2630(_DWORD *a1, int a2, int a3)
{
  return sub_216BD2604(a1, 6, a2, a3);
}

_DWORD *sub_216BD2644(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 7);
  *((_QWORD *)result + 1) = a3;
  *((_QWORD *)result + 2) = a4;
  *((_QWORD *)result + 3) = a5;
  *((_QWORD *)result + 4) = a6;
  result[10] = a2;
  return result;
}

_DWORD *sub_216BD2694(_DWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 8);
  *((_QWORD *)result + 1) = a3;
  *((_QWORD *)result + 2) = a4;
  result[6] = a2;
  return result;
}

_DWORD *sub_216BD26D0(_DWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 9);
  *((_QWORD *)result + 1) = a4;
  *((_QWORD *)result + 2) = a5;
  result[6] = a2;
  result[7] = a3;
  return result;
}

_DWORD *sub_216BD2710(_DWORD *a1, int a2)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 10);
  result[1] = a2;
  return result;
}

_DWORD *sub_216BD2738(_DWORD *a1, int a2)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 11);
  result[1] = a2;
  return result;
}

_DWORD *sub_216BD2760(_DWORD *a1, int a2)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 12);
  result[1] = a2;
  return result;
}

_DWORD *sub_216BD2788(_DWORD *a1, int a2, uint64_t a3)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 13);
  *((_QWORD *)result + 1) = a3;
  result[4] = a2;
  return result;
}

_DWORD *sub_216BD27B8(_DWORD *a1, uint64_t a2)
{
  _DWORD *result;

  result = sub_216BD24D0(a1, 14);
  *((_QWORD *)result + 1) = a2;
  return result;
}

int *sub_216BD27E0(uint64_t a1, int a2)
{
  return sub_216BD27E8((int *)(a1 - 8), a2);
}

int *sub_216BD27E8(int *result, int a2)
{
  *result = *(unsigned __int8 *)result | (a2 << 8);
  return result;
}

void *sub_216BD27F8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[0] = a3;
  v18[1] = a4;
  if (sub_216B5F840(a1))
  {
    v7 = sub_216BA9CCC(a1, v6);
    nullsub_1(a2, v7);
  }
  result = (void *)sub_216B1E67C((uint64_t)v18);
  if (result)
  {
    if (sub_216B1E67C((uint64_t)v18) == 1)
    {
      v9 = (uint64_t *)sub_216B1E600((uint64_t)v18);
      result = (void *)sub_216BD28E4((uint64_t)&v17, *v9);
      *(_QWORD *)a1 = v17;
    }
    else
    {
      v10 = sub_216B1E67C((uint64_t)v18);
      if (v10 >> 61)
        v11 = -1;
      else
        v11 = 8 * v10;
      v12 = sub_216BC0314(v11, a2, 8u);
      sub_216BD28E8((uint64_t)&v17, v12);
      *(_QWORD *)a1 = v17;
      v14 = (void *)sub_216BA9CCC(a1, v13);
      v15 = (const void *)sub_216B1E600((uint64_t)v18);
      v16 = sub_216B1E67C((uint64_t)v18);
      return memcpy(v14, v15, 8 * v16);
    }
  }
  return result;
}

uint64_t sub_216BD28EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216BD2918(a1, v3);
}

uint64_t *sub_216BD291C(uint64_t *a1, uint64_t a2)
{
  sub_216B86898(a1, a2);
  return a1;
}

uint64_t sub_216BD2940(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B7CD38(a1, v3, 1);
}

uint64_t sub_216BD2970(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BD2998(a1, v2);
}

uint64_t sub_216BD2998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = sub_216BA5AE4(a1);
  v17 = v4;
  v5 = (uint64_t *)sub_216B1E600((uint64_t)&v16);
  v6 = sub_216B35430(&v16);
  if (v5 == (uint64_t *)v6)
  {
    v8 = 1;
  }
  else
  {
    v7 = (uint64_t *)v6;
    LODWORD(v8) = 1;
    do
    {
      v9 = *v5++;
      v8 = sub_216BAA368(v9, a2) & v8;
    }
    while (v5 != v7);
  }
  v16 = sub_216BA5BE0(a1);
  v17 = v10;
  v11 = (uint64_t *)sub_216B1E600((uint64_t)&v16);
  v12 = sub_216B35430(&v16);
  if (v11 != (uint64_t *)v12)
  {
    v13 = (uint64_t *)v12;
    do
    {
      v14 = *v11++;
      v8 = sub_216BAA368(v14, a2) & v8;
    }
    while (v11 != v13);
  }
  return v8;
}

void sub_216BD2A64(_BYTE *a1, uint64_t a2)
{
  switch(sub_216BA72B0(a1))
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      sub_216BD2B10((uint64_t)a1, a2);
      break;
    case 5u:
    case 6u:
      sub_216BD2B5C((uint64_t)a1, a2);
      break;
    case 7u:
      sub_216BD2BA8((uint64_t)a1, a2);
      break;
    case 8u:
      sub_216BD2C74((uint64_t)a1, a2);
      break;
    default:
      return;
  }
}

void sub_216BD2B10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[2];
  std::string v5;

  v4[0] = sub_216BD37EC(a1);
  v4[1] = v3;
  sub_216B24898(v4, (uint64_t)&v5);
  sub_216BD3888(a2, (uint64_t)&v5);
  std::string::~string(&v5);
}

void sub_216BD2B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[2];
  std::string v5;

  v4[0] = sub_216BD3048(a1);
  v4[1] = v3;
  sub_216B24898(v4, (uint64_t)&v5);
  sub_216BD3888(a2, (uint64_t)&v5);
  std::string::~string(&v5);
}

void sub_216BD2BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BYTE v6[24];
  _BYTE v7[24];
  std::string v8;
  _BYTE v9[24];
  _QWORD v10[3];
  _QWORD v11[3];
  std::string v12;

  v12.__r_.__value_.__r.__words[0] = sub_216B1E67C(a1);
  v4 = sub_216B1E600((uint64_t)&v12);
  sub_216BD2A64(v4, a2);
  sub_216B2B330(a2, (uint64_t)"[", (uint64_t)&v8);
  sub_216B25FAC((uint64_t)v9, (uint64_t)&v8);
  v5 = sub_216B4CBC4(a1);
  sub_216BD39B4((uint64_t)v7, v5);
  sub_216B29830(v10, v9, v7);
  sub_216B25FA8((uint64_t)v6, "]");
  sub_216B29830(v11, v10, v6);
  sub_216B34D50((uint64_t)v11, &v12);
  sub_216BD3888(a2, (uint64_t)&v12);
  std::string::~string(&v12);
  std::string::~string(&v8);
}

void sub_216BD2C74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string v4;

  v3 = sub_216B1E600(a1 + 16);
  sub_216BD2A64(v3, a2);
  sub_216B2B330(a2, (uint64_t)"[]", (uint64_t)&v4);
  sub_216BD3888(a2, (uint64_t)&v4);
  std::string::~string(&v4);
}

uint64_t sub_216BD2CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  sub_216B20C64(&v12, a1);
  v1 = sub_216B1E600((uint64_t)&v12);
  v2 = sub_216BA7ED8(v1);
  if (v2)
  {
    v3 = v2;
    if (sub_216BD2D90(v2))
      v4 = sub_216B1E67C(v3);
    else
      v4 = sub_216B2037C(v3);
    v12 = v4;
  }
  v5 = sub_216B1E600((uint64_t)&v12);
  v6 = sub_216BA7ED4(v5);
  if (v6)
    v12 = sub_216B1E67C(v6);
  v7 = sub_216B1E600((uint64_t)&v12);
  v8 = sub_216BA7040(v7);
  if (!v8)
  {
    v9 = sub_216B1E600((uint64_t)&v12);
    v8 = sub_216BA710C(v9);
    if (!v8)
      return v12;
  }
  v10 = sub_216B1E67C(v8);
  sub_216B20C64(&v13, v10);
  return v13;
}

uint64_t sub_216BD2D90(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v1 = (uint64_t *)(a1 + 8);
  sub_216B20C64(&v3, 0);
  return sub_216BD39B8(v1, v3);
}

uint64_t sub_216BD2DCC(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((sub_216BD2F64(a1, a2) & 1) != 0)
    return 1;
  if ((sub_216BB555C(a1) & 1) != 0)
    return 0;
  v25 = sub_216BD2CD0(a1);
  v5 = sub_216B1E600((uint64_t)&v25);
  v6 = sub_216BA76B8(v5);
  if (v6)
  {
    v7 = sub_216B1E67C(v6) + 16;
    v8 = (uint64_t *)sub_216B262E0(v7);
    v9 = sub_216BA7D24(v7);
    if (v8 != (uint64_t *)v9)
    {
      v10 = (uint64_t *)v9;
      while (1)
      {
        v11 = *v8;
        v12 = (unsigned __int8 **)sub_216BA5E50(*v8);
        v13 = sub_216BA5E54(v11);
        if (v12 != (unsigned __int8 **)v13)
          break;
LABEL_12:
        if (++v8 == v10)
          return 0;
      }
      while (1)
      {
        v24 = sub_216BAB580(*v12);
        v14 = sub_216B1E600((uint64_t)&v24);
        if ((sub_216BD2F64(v14, a2) & 1) != 0)
          return 1;
        if (++v12 == (unsigned __int8 **)v13)
          goto LABEL_12;
      }
    }
    return 0;
  }
  v15 = sub_216B1E600((uint64_t)&v25);
  result = sub_216BA771C(v15);
  if (result)
  {
    v16 = sub_216B1E67C(result) + 16;
    v17 = (uint64_t *)sub_216B262E0(v16);
    v18 = sub_216BA7E5C(v16);
    if (v17 != (uint64_t *)v18)
    {
      v19 = (uint64_t *)v18;
      while (1)
      {
        v20 = *v17;
        v21 = (unsigned __int8 **)sub_216BA5E50(*v17);
        v22 = sub_216BA5E54(v20);
        if (v21 != (unsigned __int8 **)v22)
          break;
LABEL_20:
        result = 0;
        if (++v17 == v19)
          return result;
      }
      while (1)
      {
        v24 = sub_216BAB580(*v21);
        v23 = sub_216B1E600((uint64_t)&v24);
        if ((sub_216BD2F64(v23, a2) & 1) != 0)
          return 1;
        if (++v21 == (unsigned __int8 **)v22)
          goto LABEL_20;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_216BD2F64(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v6 = sub_216BD2CD0(a1);
  v3 = sub_216B1E600((uint64_t)&v6);
  result = sub_216BA6F68(v3);
  if (result)
  {
    v5 = sub_216BA7EA4(result);
    *a2 = v5;
    return (v5 - 5) < 2;
  }
  return result;
}

unint64_t sub_216BD2FB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216BA7ED0(a1);
  if (v2)
    return sub_216BD3024(v2);
  result = sub_216BA7ED4(a1);
  if (result || (result = sub_216BA7ED8(a1)) != 0)
  {
    v5 = sub_216B1E67C(result);
    v4 = sub_216B1E600((uint64_t)&v5);
    return sub_216BD2FB4(v4);
  }
  return result;
}

unint64_t sub_216BD3024(uint64_t a1)
{
  return (0x7FFFFE3FFDEuLL >> ((*(_BYTE *)(a1 + 1) & 0x7Fu) - 2)) & 1;
}

uint64_t sub_216BD3048(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B1E67C(a1);
  if (sub_216BA7D08(v2))
  {
    v3 = sub_216B1E67C(a1);
    return sub_216BA6A7C(v3);
  }
  else
  {
    sub_216B1E678((int)&v5, &byte_216C19659);
    return v5;
  }
}

uint64_t sub_216BD30A0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 928);
  v4 = v3 + 4;
  if (a3 == 2 && v4 == a2)
  {
    v5 = v3 + 24;
  }
  else if (a3 == 3 && v4 == a2)
  {
    v5 = v3 + 40;
  }
  else if (a3 == 4 && v4 == a2)
  {
    v5 = v3 + 56;
  }
  else
  {
    v6 = v3 + 8;
    if (a3 == 2 && v6 == a2)
    {
      v5 = v3 + 72;
    }
    else if (a3 == 3 && v6 == a2)
    {
      v5 = v3 + 88;
    }
    else if (a3 == 4 && v6 == a2)
    {
      v5 = v3 + 104;
    }
    else
    {
      v7 = v3 + 12;
      if (a3 == 2 && v7 == a2)
      {
        v5 = v3 + 120;
      }
      else if (a3 == 3 && v7 == a2)
      {
        v5 = v3 + 136;
      }
      else if (a3 == 4 && v7 == a2)
      {
        v5 = v3 + 152;
      }
      else
      {
        v8 = v3 + 16;
        if (a3 == 2 && v8 == a2)
        {
          v5 = v3 + 168;
        }
        else if (a3 == 3 && v8 == a2)
        {
          v5 = v3 + 184;
        }
        else if (a3 == 4 && v8 == a2)
        {
          v5 = v3 + 200;
        }
        else
        {
          v9 = v3 + 20;
          if (a3 == 2 && v9 == a2)
          {
            v5 = v3 + 216;
          }
          else if (a3 == 3 && v9 == a2)
          {
            v5 = v3 + 232;
          }
          else
          {
            v5 = v3 + 248;
          }
        }
      }
    }
  }
  sub_216B20C64(&v11, v5);
  return v11;
}

uint64_t sub_216BD3230(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216BA7ED0(a1);
  if (result
    || (result = sub_216BA7ED4(a1)) != 0
    && (v7 = sub_216B1E67C(result), v6 = sub_216B1E600((uint64_t)&v7), (result = sub_216BA7ED0(v6)) != 0))
  {
    v5 = sub_216BA7EA4(result);
    *a2 = v5;
    return (v5 - 41) < 4;
  }
  return result;
}

uint64_t sub_216BD329C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  _BOOL4 v10;
  _BOOL4 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  _BOOL4 v21;
  _BOOL4 v23;
  _BOOL4 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v32;

  v4 = *(_QWORD *)(a1 + 928);
  v5 = v4 + 4;
  v7 = a4 == 2 && v5 == a2;
  if (a3 == 2 && v7)
  {
    v8 = v4 + 264;
  }
  else
  {
    v10 = a4 == 3 && v5 == a2;
    if (a3 == 3 && v10)
    {
      v8 = v4 + 280;
    }
    else
    {
      v12 = a4 == 4 && v5 == a2;
      if (a3 == 4 && v12)
      {
        v8 = v4 + 296;
      }
      else
      {
        v13 = !v10;
        if (a3 != 2)
          v13 = 1;
        if ((v13 & 1) != 0)
        {
          v14 = !v12;
          if (a3 != 2)
            v14 = 1;
          if ((v14 & 1) != 0)
          {
            v15 = !v7;
            if (a3 != 3)
              v15 = 1;
            if ((v15 & 1) != 0)
            {
              v16 = !v12;
              if (a3 != 3)
                v16 = 1;
              if ((v16 & 1) != 0)
              {
                v17 = !v7;
                if (a3 != 4)
                  v17 = 1;
                if ((v17 & 1) != 0)
                {
                  v18 = !v10;
                  if (a3 != 4)
                    v18 = 1;
                  if ((v18 & 1) != 0)
                  {
                    v19 = v4 + 8;
                    v21 = a4 == 2 && v19 == a2;
                    if (a3 == 2 && v21)
                    {
                      v8 = v4 + 408;
                    }
                    else
                    {
                      v23 = a4 == 3 && v19 == a2;
                      if (a3 == 3 && v23)
                      {
                        v8 = v4 + 424;
                      }
                      else
                      {
                        v25 = a4 == 4 && v19 == a2;
                        if (a3 == 4 && v25)
                        {
                          v8 = v4 + 440;
                        }
                        else
                        {
                          v26 = !v23;
                          if (a3 != 2)
                            v26 = 1;
                          if ((v26 & 1) != 0)
                          {
                            v27 = !v25;
                            if (a3 != 2)
                              v27 = 1;
                            if ((v27 & 1) != 0)
                            {
                              v28 = !v21;
                              if (a3 != 3)
                                v28 = 1;
                              if ((v28 & 1) != 0)
                              {
                                v29 = !v25;
                                if (a3 != 3)
                                  v29 = 1;
                                if ((v29 & 1) != 0)
                                {
                                  v30 = !v21;
                                  if (a3 != 4)
                                    v30 = 1;
                                  if ((v30 & 1) != 0)
                                    v8 = v4 + 536;
                                  else
                                    v8 = v4 + 520;
                                }
                                else
                                {
                                  v8 = v4 + 504;
                                }
                              }
                              else
                              {
                                v8 = v4 + 488;
                              }
                            }
                            else
                            {
                              v8 = v4 + 472;
                            }
                          }
                          else
                          {
                            v8 = v4 + 456;
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v8 = v4 + 392;
                  }
                }
                else
                {
                  v8 = v4 + 376;
                }
              }
              else
              {
                v8 = v4 + 360;
              }
            }
            else
            {
              v8 = v4 + 344;
            }
          }
          else
          {
            v8 = v4 + 328;
          }
        }
        else
        {
          v8 = v4 + 312;
        }
      }
    }
  }
  sub_216B20C64(&v32, v8);
  return v32;
}

void sub_216BD3484(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_216BD34AC(uint64_t a1)
{
  uint64_t v2;

  sub_216B20C64(&v2, *(_QWORD *)(a1 + 928));
  return v2;
}

uint64_t sub_216BD36C0(uint64_t a1)
{
  return ((*(_BYTE *)(a1 + 1) & 0x7Fu) < 0x20) & (0xFF800708 >> *(_BYTE *)(a1 + 1));
}

uint64_t sub_216BD36E4(uint64_t a1)
{
  return ((*(_BYTE *)(a1 + 1) & 0x7Fu) < 0x29) & (0x1FF00003810uLL >> *(_BYTE *)(a1 + 1));
}

uint64_t sub_216BD3708(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  v2 = (*(_BYTE *)(a1 + 1) & 0x7F) - 5;
  if (v2 > 0xE || ((0x7E03u >> v2) & 1) == 0)
    return 0;
  *a2 = byte_216C18EA6[v2];
  return 1;
}

uint64_t sub_216BD3748(uint64_t a1)
{
  return ((*(_BYTE *)(a1 + 1) & 0x7Fu) < 0x17) & (0x700080u >> *(_BYTE *)(a1 + 1));
}

uint64_t sub_216BD376C(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_216BD3788 + 4 * byte_216C18EA1[a2 - 3]))();
}

uint64_t sub_216BD3788(uint64_t a1)
{
  return *(_QWORD *)(a1 + 928) + 4;
}

uint64_t sub_216BD3794(uint64_t a1)
{
  return *(_QWORD *)(a1 + 928) + 8;
}

uint64_t sub_216BD37A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 928) + 12;
}

uint64_t sub_216BD37AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 928) + 16;
}

uint64_t sub_216BD37B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 928) + 20;
}

uint64_t sub_216BD37C4(uint64_t a1)
{
  uint64_t v2;

  sub_216B20C64(&v2, *(_QWORD *)(a1 + 928));
  return v2;
}

uint64_t sub_216BD37EC(uint64_t a1)
{
  int v1;

  v1 = sub_216BA7EA4(a1);
  return sub_216BD3800(v1);
}

uint64_t sub_216BD3800(int a1)
{
  uint64_t v2;

  sub_216B1E678((int)&v2, off_24D605D48[a1 - 2]);
  return v2;
}

uint64_t sub_216BD3834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = sub_216BC0314(0x18u, a1, 8u);
  sub_216BD3884(v3, a2);
  sub_216B20C64(&v5, v3);
  return v5;
}

uint64_t sub_216BD3888(uint64_t a1, uint64_t a2)
{
  sub_216B26E7C(a1, a2);
  return a1;
}

uint64_t sub_216BD38AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v12 = a3;
  v10 = sub_216B1E600((uint64_t)&v13);
  v11[0] = sub_216B67C54((uint64_t)&v10, (uint64_t)&v12);
  v11[1] = v4;
  if (sub_216BD3974(*(_QWORD *)(a1 + 928) + 568, (uint64_t)v11))
  {
    v5 = (uint64_t *)sub_216BD3998((int *)(*(_QWORD *)(a1 + 928) + 568), (uint64_t)v11);
    sub_216B20C64(&v14, *v5);
  }
  else
  {
    v6 = sub_216BC0314(0x18u, a1, 8u);
    sub_216BD39B0(v6, v13, v12);
    v7 = sub_216B20C64(&v14, v6);
    v8 = sub_216B1E600((uint64_t)v7);
    *(_QWORD *)sub_216BD3998((int *)(*(_QWORD *)(a1 + 928) + 568), (uint64_t)v11) = v8;
  }
  return v14;
}

uint64_t sub_216BD3974(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 0;
  return sub_216BD3B08(a1, a2, &v3);
}

uint64_t sub_216BD3998(int *a1, uint64_t a2)
{
  return sub_216BD3C58(a1, a2) + 16;
}

uint64_t sub_216BD39B8(uint64_t *a1, uint64_t a2)
{
  return sub_216BD39D0(a1, a2) ^ 1;
}

uint64_t sub_216BD39D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  if (sub_216B1E600((uint64_t)a1))
  {
    v4 = sub_216B1E600((uint64_t)a1);
    v5 = sub_216BA7ED8(v4);
    if (v5)
    {
      v6 = v5;
      result = sub_216BD2D90();
      if (!(_DWORD)result)
        return result;
      v13 = sub_216B1E67C(v6);
      v8 = &v13;
      v9 = a2;
      return sub_216BD39D0(v8, v9);
    }
  }
  if (sub_216B2D76C(&v14))
  {
    v10 = sub_216B1E600((uint64_t)&v14);
    v11 = sub_216BA7ED8(v10);
    if (v11)
    {
      v12 = v11;
      result = sub_216BD2D90();
      if (!(_DWORD)result)
        return result;
      v9 = sub_216B1E67C(v12);
      v8 = a1;
      return sub_216BD39D0(v8, v9);
    }
  }
  return *a1 == v14;
}

uint64_t sub_216BD3A90(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = sub_216BA4E38((_BYTE *)a1, 8);
  sub_216B2D410((_QWORD *)v4 + 1);
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

_BYTE *sub_216BD3AC8(_BYTE *a1, uint64_t a2, int a3)
{
  _BYTE *result;

  result = sub_216BA4E38(a1, 7);
  *((_QWORD *)result + 1) = a2;
  *((_DWORD *)result + 4) = a3;
  return result;
}

uint64_t sub_216BD3AF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 16) = 263;
  *(_DWORD *)result = a2;
  return result;
}

uint64_t sub_216BD3B08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v6 = sub_216B68CA4();
  result = sub_216B68CD0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v17[0] = sub_216BA5054();
    v17[1] = v9;
    v16[0] = sub_216BA55F8();
    v16[1] = v10;
    v11 = v8 - 1;
    v12 = sub_216BD3C1C(a2) & (v8 - 1);
    v13 = v6 + 24 * v12;
    if (sub_216BA55FC(a2, v13))
    {
LABEL_8:
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (!sub_216BA55FC(v13, (uint64_t)v17))
      {
        if (sub_216BA55FC(v13, (uint64_t)v16) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = v6 + 24 * v12;
        ++v15;
        if (sub_216BA55FC(a2, v13))
          goto LABEL_8;
      }
      result = 0;
      if (v14)
        v13 = v14;
    }
    *a3 = v13;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_216BD3C20(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v2;
  unsigned int v3;

  v1 = a1 + 1;
  v2 = sub_216B2CDAC(*a1);
  v3 = sub_216B4CFAC(v1);
  return sub_216B68820(v2, v3);
}

uint64_t sub_216BD3C58(int *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (sub_216BD3CB0((uint64_t)a1, a2, &v6))
    return v6;
  v5 = 0;
  return sub_216BD3CE8(a1, a2, &v5, v6);
}

uint64_t sub_216BD3CB0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = sub_216BD3B08(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t sub_216BD3CE8(int *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_216BD3D30(a1, a2, a4);
  sub_216B3E088(v6, a2);
  *(_QWORD *)(v6 + 16) = *a3;
  return v6;
}

uint64_t sub_216BD3D30(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  v12 = a3;
  v5 = sub_216B69128(a1);
  v6 = sub_216B68CD0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216BD3E18(a1, (2 * v6));
    sub_216BD3CB0((uint64_t)a1, a2, &v12);
    sub_216B68CD0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B69130(a1) <= v6 >> 3)
  {
    sub_216BD3E18(a1, v7);
    sub_216BD3CB0((uint64_t)a1, a2, &v12);
  }
  v8 = sub_216B69134(a1);
  v11[0] = sub_216BA5054(v8);
  v11[1] = v9;
  if (!sub_216BA55FC(v12, (uint64_t)v11))
    sub_216B6915C((uint64_t)a1);
  return v12;
}

void sub_216BD3E1C(unsigned int *a1, unsigned int a2)
{
  unsigned int v2;
  int *v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _DWORD v18[96];
  uint64_t v19;

  v2 = a2;
  v3 = (int *)a1;
  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x10)
  {
    v18[0] = 64;
    LODWORD(v17[0]) = sub_216B1E3F4(a2 - 1);
    a1 = (unsigned int *)sub_216B21E8C(v18, v17);
    v2 = *a1;
  }
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    if (v2 >= 0x10)
    {
      v17[0] = sub_216BA5054(a1);
      v17[1] = v7;
      v16[0] = sub_216BA55F8();
      v16[1] = v8;
      v9 = sub_216B68CA4(v3);
      v10 = 0;
      v11 = v18;
      do
      {
        if (!sub_216BA55FC(v9 + v10, (uint64_t)v17) && !sub_216BA55FC(v9 + v10, (uint64_t)v16))
        {
          *(_OWORD *)v11 = *(_OWORD *)(v9 + v10);
          *((_QWORD *)v11 + 2) = *(_QWORD *)(v9 + v10 + 16);
          v11 += 6;
        }
        v10 += 24;
      }
      while (v10 != 384);
      *v3 &= ~1u;
      v12 = (_QWORD *)sub_216B68BC0((uint64_t)v3);
      *v12 = sub_216BA4FBC((uint64_t)v3, v2);
      v12[1] = v13;
      sub_216BD3FD4(v3, (uint64_t)v18, (uint64_t)v11);
    }
  }
  else
  {
    v4 = sub_216B68BC0((uint64_t)v3);
    v5 = *(void **)v4;
    v6 = *(_DWORD *)(v4 + 8);
    sub_216B68BC0((uint64_t)v3);
    if (v2 > 0x10)
    {
      v14 = (_QWORD *)sub_216B68BC0((uint64_t)v3);
      *v14 = sub_216BA4FBC((uint64_t)v3, v2);
      v14[1] = v15;
    }
    else
    {
      *v3 |= 1u;
    }
    sub_216BD3FD4(v3, (uint64_t)v5, (uint64_t)v5 + 24 * v6);
    j__free(v5);
  }
}

int *sub_216BD3FD4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v6 = sub_216BA4FEC(a1);
  v12[0] = sub_216BA5054(v6);
  v12[1] = v7;
  result = (int *)sub_216BA55F8();
  v11[0] = result;
  v11[1] = v9;
  while (a2 != a3)
  {
    result = (int *)sub_216BA55FC(a2, (uint64_t)v12);
    if ((result & 1) == 0)
    {
      result = (int *)sub_216BA55FC(a2, (uint64_t)v11);
      if ((result & 1) == 0)
      {
        v10 = 0;
        sub_216BD3CB0((uint64_t)a1, a2, &v10);
        sub_216B3E088(v10, a2);
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 16);
        result = sub_216B69134(a1);
      }
    }
    a2 += 24;
  }
  return result;
}

void *sub_216BD4080(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  char v4;
  BOOL v7;
  __int128 v8;

  v4 = a4;
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 10) = a4;
  if (a2)
  {
    v7 = sub_216BD4140(a2);
    v8 = 0uLL;
    if (!v7)
      v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8) + 1;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  }
  else
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 12) & 0xF000 | 0x558;
  }
  if (!sub_216BD4140(a1))
  {
    if ((v4 & 2) == 0)
      goto LABEL_8;
LABEL_12:
    *(_QWORD *)(a1 + 24) = a1;
    if ((v4 & 4) == 0)
      return sub_216B5F938(a1 + 40);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 16) = a1;
  if ((v4 & 2) != 0)
    goto LABEL_12;
LABEL_8:
  if ((v4 & 4) != 0)
LABEL_9:
    *(_QWORD *)(a1 + 32) = a1;
  return sub_216B5F938(a1 + 40);
}

BOOL sub_216BD4140(uint64_t a1)
{
  return sub_216BD415C(a1) == 9;
}

uint64_t sub_216BD415C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 10);
}

uint64_t sub_216BD4164(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  sub_216BD41AC(a1 + 8, a2, 256);
  *(_BYTE *)(a1 + 16) = sub_216B79804(*(_QWORD *)(a2 + 152));
  sub_216B8F530(*(_QWORD *)(a2 + 152), 1);
  return a1;
}

char *sub_216BD41B4(char *a1)
{
  sub_216B8F530(*(_QWORD *)(*(_QWORD *)a1 + 152), a1[16]);
  sub_216BD41EC(a1 + 8);
  return a1;
}

uint64_t sub_216BD41F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  sub_216B39B60((_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 152) = a4;
  *(_QWORD *)(a1 + 160) = a5;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 216) = 0;
  sub_216BAC9C0(a1 + 352);
  sub_216BD427C((_WORD *)(a1 + 440), 1, 6);
  sub_216B4AED0((_DWORD *)(a1 + 444));
  sub_216B4AED0((_DWORD *)(a1 + 448));
  sub_216B5F9A0(a1 + 456, 0);
  return a1;
}

_WORD *sub_216BD427C(_WORD *a1, char a2, char a3)
{
  _WORD *v6;

  v6 = sub_216BC0F5C(a1);
  sub_216BD4CA4(v6, a2);
  sub_216BD4CBC(a1, a3);
  return a1;
}

uint64_t sub_216BD42C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v2 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)(a1 + 224);
    do
    {
      if (*v3)
      {
        v4 = (void *)sub_216BD4330();
        j__free(v4);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  sub_216BD4334(a1 + 456);
  sub_216B1FF6C(a1 + 352);
  sub_216B3A034(a1 + 16);
  return a1;
}

uint64_t sub_216BD433C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_216B4CD2C(*(_QWORD *)(a1 + 152), a2, a3, a4);
}

void *sub_216BD4348(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *result;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 220);
  if (v4)
  {
    v5 = v4 - 1;
    *(_DWORD *)(a1 + 220) = v5;
    v6 = *(_QWORD *)(a1 + 8 * v5 + 224);
    result = sub_216BD4080(v6, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 184) = v6;
  }
  else
  {
    v8 = sub_216B1D1D4(328);
    result = (void *)sub_216BD43C0(v8, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 184) = result;
  }
  return result;
}

void sub_216BD43C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13[2];
  _QWORD v14[2];
  _QWORD *v15[2];

  v2 = sub_216B4B8D0(*(_QWORD *)(a1 + 184));
  v15[0] = (_QWORD *)sub_216B938A4(v2);
  v15[1] = v3;
  v14[0] = sub_216B938D4(v2);
  v14[1] = v4;
  while (sub_216B3760C(v15, v14))
  {
    v6 = sub_216BD44CC(v15, v5);
    v7 = sub_216BD44D8(v6);
    if (v7)
    {
      v8 = sub_216BDB8D0(a1, v7);
      if (v8)
      {
        v9 = v8;
        if (sub_216B1E67C(v8))
        {
          sub_216BD4510(v13, v9);
          sub_216BD4514(v13);
          sub_216BD4548(v13);
        }
      }
    }
    else
    {
      sub_216BDBA40(a1, v6);
    }
    sub_216B93914(v15);
  }
  v10 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = sub_216B1E600(v10);
  v11 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v11 == 16)
  {
    if (v10)
    {
      v12 = (void *)sub_216BD4330(v10);
      j__free(v12);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 220) = v11 + 1;
    *(_QWORD *)(a1 + 8 * v11 + 224) = v10;
  }
}

uint64_t sub_216BD44CC(_QWORD **a1, uint64_t a2)
{
  return nullsub_1(**a1, a2);
}

uint64_t sub_216BD44D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA9DCC(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BD4514(uint64_t *a1)
{
  sub_216BD4E14(a1 + 1);
  a1[1] = sub_216BD4DA4(0);
  return sub_216BD4E18(a1);
}

uint64_t sub_216BD454C(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if ((sub_216BA81D0(a1) & 1) == 0)
  {
    do
      v1 = sub_216B40EE8(v1);
    while (!sub_216BA81D0(v1));
  }
  return v1;
}

uint64_t sub_216BD4588(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

uint64_t sub_216BD4594(uint64_t result)
{
  *(_BYTE *)(result + 168) = 0;
  return result;
}

_QWORD *sub_216BD459C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;

  sub_216BD4348((uint64_t)a1, 8);
  a1[22] = a1[23];
  v2 = *a1;
  v3 = a1[1];
  v4 = sub_216B40EE8(a1[20]);
  result = sub_216BA3B6C(v2, v3, v4);
  a1[25] = (uint64_t)result;
  return result;
}

void sub_216BD45F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22[2];
  _BYTE v23[24];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _QWORD v27[3];
  std::string v28;
  std::string v29;
  _QWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];

  v4 = a2;
  v32[0] = a3;
  v32[1] = a4;
  v31 = a2;
  v6 = sub_216B1E600((uint64_t)v32) - 8;
  do
  {
    v7 = *(_QWORD *)(v6 + 8);
    v6 += 8;
  }
  while (v7 != v4);
  v8 = sub_216B35430(v32);
  sub_216BC0E28(v30, v6, v8);
  sub_216B26DE8(&v29, "\n    ");
  v9 = (uint64_t *)sub_216B1E600((uint64_t)v30);
  v10 = sub_216B35430(v30);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    do
    {
      v12 = *v9++;
      v24 = sub_216BA6A7C(v12);
      v25 = v13;
      sub_216BD4820((uint64_t)"'", (uint64_t)&v24, (uint64_t)v26);
      sub_216B25FA8((uint64_t)v23, "' -> ");
      sub_216B29830(v27, v26, v23);
      sub_216B34D50((uint64_t)v27, &v28);
      sub_216B26C9C(&v29, (uint64_t)&v28);
      std::string::~string(&v28);
    }
    while (v9 != v11);
  }
  v24 = sub_216BA6A7C(v4);
  v25 = v14;
  sub_216BD4820((uint64_t)"'", (uint64_t)&v24, (uint64_t)v26);
  sub_216B25FA8((uint64_t)v23, "'");
  sub_216B29830(v27, v26, v23);
  sub_216B34D50((uint64_t)v27, &v28);
  sub_216B26C9C(&v29, (uint64_t)&v28);
  std::string::~string(&v28);
  if ((unint64_t)sub_216B1E67C((uint64_t)v30) > 1)
    v4 = *(_QWORD *)sub_216B212F0(v30, 1);
  v15 = sub_216BD4830(a1 + 456, &v31);
  v16 = (uint64_t *)sub_216BD4848((unsigned __int8 *)v15);
  v17 = sub_216BD4884((unsigned __int8 *)v15);
  if (v16 == (uint64_t *)v17)
  {
LABEL_12:
    v19 = 0;
  }
  else
  {
    v18 = (uint64_t *)v17;
    while (1)
    {
      v19 = (unsigned int *)*v16;
      v20 = sub_216B2037C(*v16);
      if (sub_216BD454C(v20) == v4)
        break;
      if (++v16 == v18)
        goto LABEL_12;
    }
  }
  v21 = sub_216B1E4E0(v19);
  sub_216BD433C(a1, v21, 2781, (uint64_t)&v28);
  sub_216B26CA0(v22, &v29);
  sub_216B4B340((uint64_t *)&v28, v22[0], v22[1]);
  sub_216B4B3B4(&v28);
  std::string::~string(&v29);
}

uint64_t sub_216BD4820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216BD4EDC(a3, a1, a2);
}

uint64_t *sub_216BD4830(uint64_t a1, uint64_t *a2)
{
  return sub_216BD4F1C(a1, a2) + 1;
}

uint64_t sub_216BD4848(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v4;

  if (sub_216B601E8(a1))
    return j_nullsub_1(a1, v2);
  v4 = sub_216BA9CCC(a1, v2);
  return sub_216B1E600(v4);
}

uint64_t sub_216BD4884(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (sub_216B601E8(a1))
  {
    v3 = sub_216BD4848(a1);
    return v3 + 8 * !sub_216BD5344(a1, v4);
  }
  else
  {
    v6 = sub_216BA9CCC(a1, v2);
    return sub_216B1E67C(v6);
  }
}

void sub_216BD48D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  _BYTE v15[88];
  _BYTE v16[184];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 208))
  {
    sub_216BD4A90(v16);
    sub_216BAC9C0(v15);
    sub_216B268AC((uint64_t)v15, v2);
    while (sub_216B26878((uint64_t)v15))
    {
      v14 = 0;
      v14 = sub_216B8F538((uint64_t)v15);
      if (v14)
      {
        if (sub_216BD4AC4((uint64_t)v16, &v14))
        {
          v3 = v14;
          v4 = sub_216BD4AE0((uint64_t)v16);
          v5 = sub_216BD4AE8((uint64_t)v16);
          sub_216BC0E28(v13, v4, v5);
          sub_216BD45F0(a1, v3, v13[0], v13[1]);
        }
        else if (sub_216BB5260(a1 + 456, &v14))
        {
          sub_216BD4AF0((uint64_t)v16, &v14);
          v12 = 0;
          sub_216B268AC((uint64_t)v15, &v12);
          v6 = sub_216BD4830(a1 + 456, &v14);
          v7 = (uint64_t *)sub_216BD4848((unsigned __int8 *)v6);
          v8 = sub_216BD4884((unsigned __int8 *)v6);
          if (v7 != (uint64_t *)v8)
          {
            v9 = (uint64_t *)v8;
            do
            {
              v10 = *v7++;
              v12 = 0;
              v11 = sub_216B2037C(v10);
              v12 = sub_216BD454C(v11);
              sub_216B268AC((uint64_t)v15, &v12);
            }
            while (v7 != v9);
          }
        }
      }
      else
      {
        sub_216BD4A94((uint64_t)v16);
      }
    }
    sub_216B1FF6C(v15);
    sub_216BD4B38(v16);
  }
  sub_216BD4B3C(a1 + 456);
  *(_QWORD *)(a1 + 200) = 0;
  sub_216BD43C4(a1);
}

uint64_t sub_216BD4A94(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_216BD53C4(a1);
  sub_216BD5398(a1, *v2);
  return sub_216B5F160(a1 + 96);
}

BOOL sub_216BD4AC4(uint64_t a1, uint64_t *a2)
{
  return sub_216BD53CC(a1, *a2);
}

uint64_t sub_216BD4AE0(uint64_t a1)
{
  return sub_216B1E600(a1 + 96);
}

uint64_t sub_216BD4AE8(uint64_t a1)
{
  return sub_216B1E67C(a1 + 96);
}

uint64_t sub_216BD4AF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = sub_216BD53FC(a1, *a2);
  if ((_DWORD)v4)
    sub_216B268AC(a1 + 96, a2);
  return v4;
}

uint64_t sub_216BD4B3C(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  if (sub_216B4D0A4(a1) || (result = sub_216B4D0AC(a1), (_DWORD)result))
  {
    v3 = sub_216B4D0A4(a1);
    if (sub_216B4CBC0(a1) <= 4 * v3 || sub_216B4CBC0(a1) < 0x41)
    {
      v4 = sub_216B50ED0();
      v5 = sub_216B512E8(v4);
      v6 = (uint64_t *)sub_216B262E0(a1);
      v7 = sub_216B5F664(a1);
      if (v6 != (uint64_t *)v7)
      {
        v8 = (uint64_t *)v7;
        do
        {
          if (!sub_216B2A5FC(*v6, v4))
          {
            if (!sub_216B2A5FC(*v6, v5))
            {
              sub_216BD4E14(v6 + 1);
              sub_216B67818(a1);
            }
            *v6 = v4;
          }
          v6 += 2;
        }
        while (v6 != v8);
      }
      return sub_216B4CB70(a1, 0);
    }
    else
    {
      return sub_216BD5428(a1);
    }
  }
  return result;
}

uint64_t *sub_216BD4C4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_216BD4348(a2, a3);
  return a1;
}

uint64_t *sub_216BD4C7C(uint64_t *a1)
{
  sub_216BD43C4(*a1);
  return a1;
}

_WORD *sub_216BD4CA4(_WORD *result, char a2)
{
  *result = *result & 0xF1FF | ((a2 & 7) << 9);
  return result;
}

_WORD *sub_216BD4CBC(_WORD *result, char a2)
{
  *result = *result & 0x8FFF | ((a2 & 7) << 12);
  return result;
}

uint64_t sub_216BD4CD4(uint64_t a1)
{
  sub_216B9B960(a1 + 40);
  return a1;
}

uint64_t sub_216BD4CFC(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  *(_WORD *)(a1 + 12) &= 0xF000u;
  sub_216B9B724(a1 + 40);
  sub_216BD4080(a1, a2, a3, a4);
  return a1;
}

uint64_t *sub_216BD4D58(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  sub_216BD2538(a1 + 1);
  a1[1] = sub_216BD4D8C(a1);
  return a1;
}

uint64_t sub_216BD4D8C(uint64_t *a1)
{
  uint64_t v1;

  v1 = sub_216B1E67C(*a1);
  return sub_216BD4DA4(v1);
}

uint64_t sub_216BD4DA4(uint64_t a1)
{
  _BYTE v3[8];

  sub_216BD2540(v3);
  return sub_216BD4DD8(a1);
}

uint64_t sub_216BD4DD8(uint64_t a1)
{
  uint64_t v3;

  sub_216B2D410(&v3);
  sub_216B210B8(&v3, a1);
  return v3;
}

uint64_t sub_216BD4E18(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = sub_216B262E0((uint64_t)(a1 + 1));
  return sub_216B203A4(v1, v2);
}

unsigned __int8 *sub_216BD4E40(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216BD4E6C(a1);
  if (v2)
    j_nullsub_1(v2, v3);
  return a1;
}

uint64_t sub_216BD4E6C(unsigned __int8 *a1)
{
  uint64_t v2;

  if (sub_216B5F840(a1))
    return sub_216BA9CCC(a1, v2);
  else
    return 0;
}

uint64_t sub_216BD4EA4(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = sub_216BD4DA4(0);
  sub_216BD4E14(a1 + 8);
  return a1;
}

uint64_t sub_216BD4EE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(result + 16) = 1283;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  return result;
}

uint64_t sub_216BD4EF4(uint64_t a1)
{
  sub_216B1FF6C(a1 + 96);
  return sub_216BC4230(a1);
}

uint64_t *sub_216BD4F1C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;

  v7 = 0;
  if (sub_216B65E8C(a1, a2, &v7))
    return v7;
  sub_216BD2538(&v6);
  v4 = sub_216BD4F88(a1, a2, (uint64_t)&v6, v7);
  sub_216BD4E14(&v6);
  return v4;
}

uint64_t *sub_216BD4F88(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;

  v6 = sub_216BD4FD0(a1, a2, a4);
  *v6 = *a2;
  sub_216BD50B8(v6 + 1, a3);
  return v6;
}

uint64_t *sub_216BD4FD0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216BD50BC(a1, (2 * v6));
    sub_216B65E8C(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216BD50BC(a1, v7);
    sub_216B65E8C(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B50ED0();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216BD50C0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B5FA0C(a1, *v5);
  if (v4)
  {
    sub_216BD5148(a1, v4, &v4[2 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B5FA54(a1);
  }
}

uint64_t sub_216BD5148(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;

  sub_216B5FA54(a1);
  v6 = sub_216B50ED0();
  result = sub_216B512E8(v6);
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B65E8C(a1, a2, &v9);
          *v9 = *a2;
          sub_216BD50B8(v9 + 1, a2 + 1);
          sub_216B4D0B0(a1);
          result = sub_216BD4E14(a2 + 1);
        }
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t *sub_216BD5210(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = 0;
  sub_216BD5254(a2, &v4);
  return a1;
}

uint64_t *sub_216BD5254(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = nullsub_1(*a2, a2);
  sub_216B86898(a1, v3);
  return a1;
}

void **sub_216BD5288(void **a1)
{
  sub_216BD52B4((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216BD52B4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B50ED0();
    v4 = sub_216B512E8(v3);
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B5F664(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
        {
          result = sub_216B2A5FC(*v5, v4);
          if ((result & 1) == 0)
            result = sub_216BD4E14(v5 + 1);
        }
        v5 += 2;
      }
      while (v5 != v6);
    }
  }
  return result;
}

BOOL sub_216BD5344(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B5F264(a1, a2);
  return nullsub_1(v2, v3) == 0;
}

uint64_t sub_216BD5368(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BD5394(a1);
  sub_216BAC9C0(v2 + 96);
  return a1;
}

uint64_t sub_216BD5398(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B2CCE8(a1, v3);
}

uint64_t sub_216BD53C4(uint64_t a1)
{
  return sub_216B5F148(a1 + 96);
}

BOOL sub_216BD53CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216BA9FDC(a1, v3);
}

uint64_t sub_216BD53FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B2CA24(a1, v3);
}

uint64_t sub_216BD542C(uint64_t a1)
{
  unsigned int v2;
  int v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 8);
  sub_216BD52B4(a1);
  if (v2)
  {
    v5 = 64;
    v4 = 1 << (sub_216B2CA00(v2) + 1);
    v2 = *(_DWORD *)sub_216B4ED68(&v5, &v4);
  }
  if (v2 == *(_DWORD *)(a1 + 16))
    return sub_216B5FA54(a1);
  j__free(*(void **)a1);
  return sub_216B5F9D4(a1, v2);
}

uint64_t sub_216BD54B8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  int v8;
  _BYTE v10[16];
  uint64_t v11[2];

  if (a5)
    v8 = 4743;
  else
    v8 = 4731;
  sub_216BD433C(a1, a3, v8, (uint64_t)v11);
  sub_216B89E58(v11, a2);
  sub_216B4B3B4(v11);
  sub_216BD433C(a1, a4, 55, (uint64_t)v10);
  return sub_216B4B3B4(v10);
}

uint64_t sub_216BD553C(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;

  v8 = sub_216BDBAD0(a1, a2);
  if (v8)
  {
    if (sub_216BD55D8(a1[23], v8))
    {
      v9 = sub_216B693F8(v8);
      v10 = sub_216BABC28(a4);
      sub_216BD54B8((uint64_t)a1, a2, a3, v9, v10);
      sub_216BDBA40((uint64_t)a1, v8);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

BOOL sub_216BD55D8(uint64_t a1, uint64_t a2)
{
  return sub_216BD53CC(a1 + 40, a2);
}

uint64_t sub_216BD55F8(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[32];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    sub_216BD576C(v26);
    sub_216BD553C(a1, a4, a3, (uint64_t)v26);
    sub_216BA5334(v26);
  }
  v16 = a1[23];
  if (v16 == a1[22])
  {
LABEL_7:
    v17 = *a1;
    v18 = sub_216BDBC30(a4);
    v21 = sub_216BC0644(v17, a2, a3, v18, v19, a5, a6, v20, a7, a8);
    sub_216BD57A8((uint64_t)a1, v21);
  }
  else
  {
    while (1)
    {
      if (sub_216BD5770(v16))
      {
        sub_216BD433C((uint64_t)a1, a2, 2461, (uint64_t)v25);
        v22 = v25;
        goto LABEL_10;
      }
      if (sub_216BD578C(v16))
        break;
      v16 = sub_216B1E600(v16);
      if (v16 == a1[22])
        goto LABEL_7;
    }
    sub_216BD433C((uint64_t)a1, a2, 2375, (uint64_t)v24);
    v22 = v24;
LABEL_10:
    sub_216B4B3B4(v22);
    return 0;
  }
  return v21;
}

BOOL sub_216BD5770(uint64_t a1)
{
  return sub_216BD415C(a1) == 24;
}

BOOL sub_216BD578C(uint64_t a1)
{
  return sub_216BD415C(a1) == 136;
}

uint64_t sub_216BD57A8(uint64_t a1, uint64_t a2)
{
  return sub_216BDB6A0(a1, a2, *(_QWORD *)(a1 + 184));
}

uint64_t sub_216BD57B0(uint64_t *a1, unsigned int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10[2];

  v4 = sub_216B1E4E0(a2);
  v5 = sub_216BD583C((uint64_t)a2);
  v7 = sub_216BC0894(*a1, v4, v5, v6);
  if (sub_216BD5848((uint64_t)a2))
  {
    v8 = (char *)sub_216B5EE7C((uint64_t)a2);
    sub_216B1E678((int)v10, v8);
    sub_216BD5858(v7, v10[0], v10[1]);
  }
  return v7;
}

uint64_t sub_216BD583C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL sub_216BD5848(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t sub_216BD5858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  result = sub_216B1E600((uint64_t)v5);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

unsigned int *sub_216BD588C(uint64_t *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  char v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v24;
  _BYTE v25[16];
  _BYTE v26[16];
  _BYTE v27[16];
  uint64_t v28;
  _BYTE v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)sub_216B1E600(a2);
  v5 = sub_216B1E67C(a2);
  v6 = sub_216B4CBC4(a2);
  v28 = sub_216BDED8C(a1, a2);
  if (sub_216B2D76C(&v28))
  {
    v7 = sub_216B1E600((uint64_t)&v28);
    if (sub_216BA81AC(v7))
    {
      sub_216BD433C((uint64_t)a1, v6, 3140, (uint64_t)v27);
      sub_216B4B3B4(v27);
    }
  }
  v8 = sub_216BDF2F4((uint64_t)a1, v4, v28);
  v9 = *a1;
  v24 = v5;
  v10 = sub_216BDBC30(v5);
  v12 = v11;
  v13 = v28;
  v14 = sub_216B1E4E0(v4);
  v15 = v6;
  v16 = (unsigned int *)sub_216BC05A0(v9, v6, v10, v12, v13, v14, v8);
  if (sub_216BD5AFC((uint64_t)v4))
    sub_216BD5B14(v16);
  v17 = sub_216BD5B34((uint64_t)v4);
  sub_216BD5B24(v16, v17);
  if (sub_216BD5B40((uint64_t)v4) == 2)
    sub_216BD5B4C(v16);
  v18 = (_DWORD *)sub_216B4ADBC(a2);
  if (sub_216BD5B5C(v18))
    sub_216BD5B78(v16);
  if (v24)
  {
    sub_216BD576C(v29);
    v19 = sub_216BD553C(a1, v24, v15, (uint64_t)v29);
    sub_216BA5334(v29);
    if (!v19)
      sub_216BD57A8((uint64_t)a1, (uint64_t)v16);
  }
  if (sub_216BA8234(v16) == 2 || sub_216BA8234(v16) == 3)
  {
    if (sub_216BA81D0((uint64_t)v16))
    {
      v20 = sub_216B1E4E0(v4);
      sub_216BD433C((uint64_t)a1, v20, 2728, (uint64_t)v26);
      sub_216B4B3B4(v26);
    }
    if (sub_216BD5B88(v28))
    {
      v21 = sub_216B693F8((uint64_t)v16);
      sub_216BD433C((uint64_t)a1, v21, 2832, (uint64_t)v25);
      sub_216B4B3B4(v25);
    }
  }
  v22 = sub_216BD5BFC((uint64_t)v4);
  sub_216BD5BEC(v16, v22);
  return v16;
}

BOOL sub_216BD5AFC(uint64_t a1)
{
  return (*(_WORD *)(a1 + 56) & 0x3000) != 0;
}

_DWORD *sub_216BD5B14(_DWORD *result)
{
  *result |= 0x10000u;
  return result;
}

unsigned int *sub_216BD5B24(unsigned int *result, char a2)
{
  *result = *result & 0xFFFFE7FF | ((a2 & 3) << 11);
  return result;
}

uint64_t sub_216BD5B34(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 58) >> 1) & 3;
}

uint64_t sub_216BD5B40(uint64_t a1)
{
  return *(_WORD *)(a1 + 57) & 0xF;
}

_DWORD *sub_216BD5B4C(_DWORD *result)
{
  *result |= 0x2000u;
  return result;
}

BOOL sub_216BD5B5C(_DWORD *a1)
{
  return sub_216BD8168(a1) != 0;
}

_DWORD *sub_216BD5B78(_DWORD *result)
{
  *result |= 0x400u;
  return result;
}

uint64_t sub_216BD5B88(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  v1 = sub_216B1E600((uint64_t)&v8);
  if ((sub_216BD6AAC(v1) & 1) != 0)
    return 1;
  v3 = sub_216B1E600((uint64_t)&v8);
  result = sub_216BD8174(v3);
  if ((_DWORD)result)
  {
    v4 = sub_216B1E600((uint64_t)&v8);
    v5 = sub_216BAED9C(v4);
    v7 = sub_216B1E67C(v5);
    v6 = sub_216B1E600((uint64_t)&v7);
    return sub_216BD6AAC(v6);
  }
  return result;
}

unsigned int *sub_216BD5BEC(unsigned int *result, char a2)
{
  *result = *result & 0xFFF9FFFF | ((a2 & 3) << 17);
  return result;
}

uint64_t sub_216BD5BFC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 58) >> 3) & 3;
}

_WORD *sub_216BD5C08(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v19;
  char v20;
  _BYTE v21[16];
  _BYTE v22[16];
  _BYTE v23[16];
  _BYTE v24[16];
  _BYTE v25[16];
  uint64_t v26[2];
  _BYTE v27[16];
  _QWORD v28[2];
  unsigned __int8 v29;
  _BYTE v30[16];

  sub_216BD5EC4(a2);
  sub_216BD5AFC(a2);
  sub_216BD5EDC(a2);
  sub_216BD5EF4(a2);
  sub_216BA835C(a2);
  sub_216BD5F0C(a2);
  sub_216BD5F14(a2);
  v8 = a4;
  if (!sub_216BD5F30((uint64_t)a1))
  {
    sub_216BD433C((uint64_t)a1, a4, 2351, (uint64_t)v30);
    sub_216B4B3B4(v30);
  }
  v9 = (_WORD *)sub_216BC0E2C(*a1, a4);
  sub_216BD5F40(&v29, 0, 1, 0);
  v28[0] = sub_216BDC9E4(a1, a3, v8, &v29);
  v28[1] = v10;
  switch(sub_216B1E4E0((unsigned int *)v28))
  {
    case 0u:
      sub_216BD433C((uint64_t)a1, v8, 3109, (uint64_t)v26);
      sub_216B89E58(v26, a3);
      v11 = v26;
      goto LABEL_11;
    case 1u:
    case 2u:
    case 4u:
      sub_216BD433C((uint64_t)a1, v8, 2353, (uint64_t)v27);
      v11 = (uint64_t *)v27;
      goto LABEL_11;
    case 3u:
      v12 = sub_216B1E67C((uint64_t)v28);
      v13 = (unsigned __int16 *)sub_216BD5F44(v12);
      if ((sub_216BA7644(v13) & 1) != 0 || sub_216B5EE7C((uint64_t)v13))
      {
        sub_216BD433C((uint64_t)a1, v8, 2354, (uint64_t)v25);
        v11 = (uint64_t *)v25;
        goto LABEL_11;
      }
      v19 = sub_216BA75F0(v13);
      if (!sub_216BD5F7C((uint64_t)a1, v19))
      {
        sub_216BD433C((uint64_t)a1, v8, 2352, (uint64_t)v24);
        v11 = (uint64_t *)v24;
        goto LABEL_11;
      }
      if (sub_216BA75CC((uint64_t)v13))
      {
        sub_216BD433C((uint64_t)a1, v8, 4099, (uint64_t)v23);
        sub_216B4B3B4(v23);
      }
      else
      {
        v20 = sub_216BD5F9C(a2);
        sub_216BD5F8C((unsigned int *)v13, v20);
        sub_216BD5FA8(v13);
      }
      sub_216BD5FB8(v9, (uint64_t)v13);
      break;
    case 5u:
      v14 = *a1;
      v15 = sub_216BD5FC0((uint64_t)v28);
      v16 = sub_216BAE264(v14, v15);
      v17 = sub_216BAE8E0();
      if (sub_216BAE8A8(v16, a1[25]))
      {
        sub_216BD433C((uint64_t)a1, v8, 2354, (uint64_t)v22);
        v11 = (uint64_t *)v22;
LABEL_11:
        sub_216B4B3B4(v11);
        v9 = 0;
      }
      else
      {
        if (sub_216BAE8E4(v16, a1[25]))
        {
          sub_216BD433C((uint64_t)a1, v8, 4099, (uint64_t)v21);
          sub_216B4B3B4(v21);
        }
        sub_216BAE95C(v16, a1[25]);
        sub_216BD5FC8(v9, v17);
      }
      break;
    default:
      return v9;
  }
  return v9;
}

BOOL sub_216BD5EC4(uint64_t a1)
{
  return (*(_WORD *)(a1 + 56) & 0xF00) != 0;
}

BOOL sub_216BD5EDC(uint64_t a1)
{
  return (*(_WORD *)(a1 + 56) & 0xC000) != 0;
}

BOOL sub_216BD5EF4(uint64_t a1)
{
  return ((*(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16)) & 0x60000) != 0;
}

BOOL sub_216BD5F0C(uint64_t a1)
{
  return sub_216BD5B5C((_DWORD *)(a1 + 16));
}

BOOL sub_216BD5F14(uint64_t a1)
{
  return !sub_216B29094(a1 + 40);
}

BOOL sub_216BD5F30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176) == *(_QWORD *)(a1 + 184);
}

uint64_t sub_216BD5F44(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BAA0D0(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

BOOL sub_216BD5F7C(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 4;
}

unsigned int *sub_216BD5F8C(unsigned int *result, char a2)
{
  *result = *result & 0xFFFEFFFF | ((a2 & 1) << 16);
  return result;
}

uint64_t sub_216BD5F9C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 58) & 1;
}

_DWORD *sub_216BD5FA8(_DWORD *result)
{
  *result |= 0x20000u;
  return result;
}

_WORD *sub_216BD5FB8(_WORD *result, uint64_t a2)
{
  *((_QWORD *)result + 2) = a2;
  return sub_216BC04F0(result);
}

uint64_t sub_216BD5FC0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

_WORD *sub_216BD5FC8(_WORD *result, char a2)
{
  *result = *result & 0x83FF | ((a2 & 0x1F) << 10);
  return result;
}

uint64_t sub_216BD5FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11[2];
  _BYTE v12[20];
  unsigned int v13;
  unsigned int v14;
  int v15;
  _BYTE v16[16];
  uint64_t v17[2];

  sub_216B1E678((int)v17, "layout qualifier");
  v6 = sub_216B4D100(a3);
  result = sub_216BDB604(a1, 1u, v17[0], v17[1], v6);
  if ((_DWORD)result)
  {
    if (!sub_216BD578C(*(_QWORD *)(a1 + 184)) && sub_216BD5B40(a3) == 7)
    {
      v8 = sub_216B4D100(a3);
      sub_216BD433C(a1, v8, 2378, (uint64_t)v16);
      v9 = v16;
LABEL_8:
      sub_216B4B3B4(v9);
      return 0;
    }
    sub_216BC0F5C(&v15);
    sub_216B4AED0(&v14);
    sub_216B4AED0(&v13);
    result = sub_216BE0884(a1, a3, (unsigned __int16 *)&v15, &v14, &v13);
    if (!(_DWORD)result)
      return result;
    if (sub_216BA7650((unsigned __int16 *)&v15))
    {
      sub_216BD433C(a1, v14, 2377, (uint64_t)v12);
      v9 = v12;
      goto LABEL_8;
    }
    sub_216BE1288(a1, v15, v14, v13);
    sub_216BD615C(a2, v15);
    if (sub_216BA7680((unsigned __int16 *)&v15))
    {
      v11[0] = sub_216B2037C(a2);
      v10 = sub_216B1E600((uint64_t)v11);
      if ((sub_216BD6164(v10) & 1) == 0)
      {
        sub_216BD433C(a1, v13, 4103, (uint64_t)v11);
        sub_216B60EA8(v11, (uint64_t)"matrix");
        sub_216B4B3B4(v11);
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_216BD615C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_216BD6164(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA73C0(&v2);
}

unsigned int *sub_216BD6188(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD **v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _DWORD **v15;
  _BOOL4 v16;
  uint64_t v17;
  _DWORD **v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int *v31;
  char v32;
  int v33;
  char v34;
  _DWORD *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  _BYTE v57[16];
  uint64_t v58[2];
  _BYTE v59[16];
  _BYTE v60[16];
  _BYTE v61[16];
  uint64_t v62;
  int v63;
  _BYTE v64[16];
  _BYTE v65[16];
  _BYTE v66[16];
  uint64_t v67[2];
  _BYTE v68[16];
  _BYTE v69[16];
  _BYTE v70[16];
  _BYTE v71[16];
  uint64_t v72;
  uint64_t *v73[2];
  _BYTE v74[32];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)sub_216B1E600(a2);
  v7 = sub_216B1E67C(a2);
  v8 = sub_216B4CBC4(a2);
  if (!sub_216BD6884((uint64_t)v6))
    return (unsigned int *)sub_216BD5C08((uint64_t *)a1, (uint64_t)v6, v7, v8);
  v9 = (_DWORD **)sub_216BD4510(v73, v7);
  if (sub_216BD689C(v9))
  {
    v10 = sub_216BD4548(v73);
  }
  else
  {
    v12 = sub_216B4A11C(v7);
    v14 = sub_216BD68B8(v12, v13);
    v10 = sub_216BD4548(v73);
    if (v14)
    {
      sub_216BD433C(a1, v8, 2820, (uint64_t)v73);
      sub_216B89E58((uint64_t *)v73, v7);
      v10 = sub_216B4B3B4(v73);
    }
  }
  v15 = (_DWORD **)sub_216BD4510(v10, v7);
  v16 = sub_216BD689C(v15);
  v17 = sub_216BD4548(v73);
  if (!v16
    || (v18 = (_DWORD **)sub_216BD4510(v17, v7),
        v19 = sub_216BD6984(v18),
        v20 = sub_216B4A11C(v7),
        v22 = sub_216BDB540((uint64_t *)a1, v19, v20, v21, v8),
        sub_216BD4548(v73),
        v22))
  {
    v72 = sub_216BDED8C((uint64_t *)a1, a2);
    if (sub_216B2D76C(&v72))
    {
      v73[0] = (uint64_t *)a1;
      v73[1] = &v72;
      sub_216BD69A0((uint64_t)v74, a1, (uint64_t)&v72);
      v23 = (unsigned __int8 *)sub_216BD553C((uint64_t *)a1, v7, v8, (uint64_t)v74);
      sub_216BA5334(v74);
      if (sub_216B2D76C(&v72)
        && sub_216BD5B88(v72)
        && !sub_216BD578C(*(_QWORD *)(a1 + 184))
        && sub_216BD5B40((uint64_t)v6) != 7)
      {
        v24 = sub_216B1E4E0(v6);
        sub_216BD433C(a1, v24, 2831, (uint64_t)v71);
        sub_216B4B3B4(v71);
      }
      v25 = *(_QWORD *)a1;
      v26 = sub_216B4A11C(v7);
      v28 = v27;
      v29 = v72;
      v30 = sub_216BDF2F4(a1, v6, v72);
      v31 = sub_216BD69A4(v25, v8, v26, v28, v29, v30);
      v32 = sub_216BD5B40((uint64_t)v6);
      sub_216BC0F60(v31, v32);
      if (sub_216BD5AFC((uint64_t)v6))
        sub_216BD69D8(v31);
      if (v23 && sub_216BD69E8(v73, v23))
        sub_216BD6A40(v31);
      if (*(_BYTE *)(a1 + 216))
        sub_216BD5F8C(v31, 1);
      if (!sub_216BD5F9C((uint64_t)v6))
        goto LABEL_29;
      if (!sub_216BD5F30(a1))
      {
        sub_216BD433C(a1, v8, 2351, (uint64_t)v70);
        sub_216B4B3B4(v70);
      }
      v33 = sub_216BD5B40((uint64_t)v6);
      if (sub_216BD5F7C(a1, v33))
      {
        if (*(_BYTE *)(a1 + 216))
        {
          sub_216BD433C(a1, v8, 4099, (uint64_t)v69);
          sub_216B4B3B4(v69);
        }
        v34 = sub_216BD5F9C((uint64_t)v6);
        sub_216BD5F8C(v31, v34);
LABEL_29:
        v35 = (_DWORD *)sub_216B4ADBC(a2);
        if (sub_216BD5B5C(v35))
          sub_216BD5B78(v31);
        if (sub_216BD6A50((uint64_t)v6))
          sub_216BD6A5C(v31);
        if (a3)
          sub_216BD57A8(a1, (uint64_t)v31);
        if (sub_216BD5F14((uint64_t)v6))
          sub_216BD5FE0(a1, (uint64_t)v31, (uint64_t)v6);
        if (sub_216BD5EDC((uint64_t)v6))
        {
          sub_216B1E678((int)v67, "interpolation qualifier");
          if (sub_216BDB604(a1, 2u, v67[0], v67[1], v8))
          {
            if (sub_216BD5F30(a1))
            {
              switch(sub_216BD5B40((uint64_t)v6))
              {
                case 3u:
                case 5u:
                  break;
                case 4u:
                case 6u:
                  v36 = v64;
                  v37 = v64;
                  v38 = a1;
                  v39 = v8;
                  v40 = 2307;
                  goto LABEL_49;
                default:
                  v36 = v65;
                  v37 = v65;
                  v38 = a1;
                  v39 = v8;
                  v40 = 2309;
                  goto LABEL_49;
              }
            }
            else
            {
              v36 = v66;
              v37 = v66;
              v38 = a1;
              v39 = v8;
              v40 = 2308;
LABEL_49:
              sub_216BD433C(v38, v39, v40, (uint64_t)v37);
              sub_216B4B3B4(v36);
            }
          }
          v45 = sub_216BD6A7C((uint64_t)v6);
          sub_216BD6A6C(v31, v45);
        }
        else
        {
          v63 = 0;
          v41 = sub_216B1E600((uint64_t)&v72);
          v62 = sub_216BD2CD0(v41);
          switch(sub_216BD5B40((uint64_t)v6))
          {
            case 3u:
              v42 = sub_216B1E600((uint64_t)&v72);
              if (sub_216BD2DCC(v42, &v63))
              {
                v43 = sub_216B1E4E0(v6);
                sub_216BD433C(a1, v43, 2305, (uint64_t)v60);
                v44 = (uint64_t *)v60;
                goto LABEL_59;
              }
              break;
            case 4u:
              v46 = sub_216B1E600((uint64_t)&v72);
              if ((sub_216BD6164(v46) & 1) != 0
                || (v47 = sub_216B1E600((uint64_t)&v62), !sub_216BB555C(v47))
                || (v48 = sub_216B1E600((uint64_t)&v62), (sub_216BD6AAC(v48) & 1) != 0)
                || (v49 = sub_216B1E600((uint64_t)&v62), sub_216BD6AD0(v49)))
              {
                v50 = sub_216B1E4E0(v6);
                sub_216BD433C(a1, v50, 2192, (uint64_t)v59);
                v44 = (uint64_t *)v59;
                goto LABEL_59;
              }
              break;
            case 6u:
              sub_216BD433C(a1, v8, 1950, (uint64_t)v58);
              v51 = sub_216B60EA8(v58, (uint64_t)"fragment");
              sub_216B60EA8(v51, (uint64_t)"out");
              v44 = v58;
              goto LABEL_59;
            case 8u:
              v52 = sub_216B1E600((uint64_t)&v72);
              if (sub_216BD6A88(v52))
              {
                v53 = sub_216B1E4E0(v6);
                sub_216BD433C(a1, v53, 2306, (uint64_t)v61);
                v44 = (uint64_t *)v61;
LABEL_59:
                sub_216B4B3B4(v44);
              }
              break;
            default:
              break;
          }
        }
        v54 = sub_216BD5B40((uint64_t)v6);
        if (sub_216BD6AF4(a1, v54))
        {
          v55 = sub_216B2037C((uint64_t)v31);
          v56 = sub_216B1E4E0(v6);
          sub_216BE0CF4(a1, v55, v56);
        }
        if (!sub_216BD5F30(a1)
          && !sub_216BD578C(*(_QWORD *)(a1 + 184))
          && (sub_216BD5B40((uint64_t)v6) | 2) != 2)
        {
          sub_216BD433C(a1, v8, 2875, (uint64_t)v57);
          sub_216B4B3B4(v57);
        }
        switch(sub_216BA75F0(v31))
        {
          case 3u:
          case 5u:
          case 8u:
            sub_216BD6B34(*(_QWORD *)(a1 + 200), (uint64_t)v31);
            break;
          case 4u:
          case 6u:
            sub_216BD6B5C(*(_QWORD *)(a1 + 200), (uint64_t)v31);
            break;
          case 7u:
            sub_216BD6B0C(*(_QWORD *)(a1 + 200), (uint64_t)v31);
            break;
          default:
            return v31;
        }
        return v31;
      }
      sub_216BD433C(a1, v8, 2352, (uint64_t)v68);
      sub_216B4B3B4(v68);
    }
  }
  return 0;
}

BOOL sub_216BD6884(uint64_t a1)
{
  return (*(_WORD *)(a1 + 56) & 0xFE) != 0;
}

BOOL sub_216BD689C(_DWORD **a1)
{
  return sub_216BD6984(a1) != 0;
}

BOOL sub_216BD68B8(uint64_t a1, uint64_t a2)
{
  const void *v3[2];
  const void *v4[2];
  const void *v5[2];
  const void *v6[2];
  const void *v7[2];
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  sub_216B1E678((int)v7, "gl_");
  if (sub_216B2A2EC((uint64_t)v8, v7[0], (size_t)v7[1]))
    return 1;
  sub_216B1E678((int)v6, "GL_");
  if (sub_216B2A2EC((uint64_t)v8, v6[0], (size_t)v6[1]))
    return 1;
  sub_216B1E678((int)v5, "ci_");
  if (sub_216B2A2EC((uint64_t)v8, v5[0], (size_t)v5[1]))
    return 1;
  sub_216B1E678((int)v4, "CI_");
  if (sub_216B2A2EC((uint64_t)v8, v4[0], (size_t)v4[1]))
    return 1;
  sub_216B1E678((int)v3, "__");
  return sub_216B31B5C(v8, v3[0], (size_t)v3[1], 0) != -1;
}

uint64_t sub_216BD6984(_DWORD **a1)
{
  return (unsigned __int16)sub_216B96EC0(*a1);
}

unsigned int *sub_216BD69A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned int *v7;

  v7 = sub_216BC0444(a1, a2, a3, a4, a5);
  sub_216BC0F70(v7, a6);
  return v7;
}

_DWORD *sub_216BD69D8(_DWORD *result)
{
  *result |= 0x400000u;
  return result;
}

uint64_t sub_216BD69E8(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_216BA3084((*a1)[1], 5u);
  if ((_DWORD)result)
  {
    v5 = sub_216BAB580(a2);
    return sub_216BD39D0(&v5, *a1[1]);
  }
  return result;
}

_DWORD *sub_216BD6A40(_DWORD *result)
{
  *result |= 0x800000u;
  return result;
}

uint64_t sub_216BD6A50(uint64_t a1)
{
  return *(_WORD *)(a1 + 56) & 1;
}

_DWORD *sub_216BD6A5C(_DWORD *result)
{
  *result |= 0x800u;
  return result;
}

unsigned int *sub_216BD6A6C(unsigned int *result, char a2)
{
  *result = *result & 0xFFF3FFFF | ((a2 & 3) << 18);
  return result;
}

uint64_t sub_216BD6A7C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 56) >> 14;
}

uint64_t sub_216BD6A88(uint64_t a1)
{
  int v2;

  v2 = 0;
  return sub_216BD2DCC(a1, &v2);
}

uint64_t sub_216BD6AAC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA7F14(&v2);
}

uint64_t sub_216BD6AD0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA7FA4(&v2);
}

uint64_t sub_216BD6AF4(uint64_t a1, unsigned int a2)
{
  return (a2 < 9) & (0x128u >> a2);
}

uint64_t sub_216BD6B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BD81CC((uint64_t *)(a1 + 48), (uint64_t)&v3);
}

uint64_t sub_216BD6B34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BD81CC((uint64_t *)(a1 + 72), (uint64_t)&v3);
}

uint64_t sub_216BD6B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BD81CC((uint64_t *)(a1 + 96), (uint64_t)&v3);
}

uint64_t sub_216BD6B84(uint64_t *a1, uint64_t a2, int a3, int a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  __int16 v35;
  _BYTE v36[16];
  _BYTE v37[16];
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;

  v39 = a6;
  v40 = a7;
  sub_216B1E678((int)v38, "interface block");
  v12 = sub_216B4CBC4(a2);
  if (!sub_216BDB604((uint64_t)a1, 3u, v38[0], v38[1], v12))
    return 0;
  if (!sub_216BD5F30((uint64_t)a1))
  {
    v30 = sub_216B4CBC4(a2);
    sub_216BD433C((uint64_t)a1, v30, 2486, (uint64_t)v37);
    sub_216B4B3B4(v37);
    return 0;
  }
  v35 = a5;
  v13 = (uint64_t *)sub_216B1E600((uint64_t)&v39);
  v14 = sub_216B35430(&v39);
  if (v13 == (uint64_t *)v14)
  {
LABEL_12:
    v23 = *a1;
    v24 = (unsigned int *)sub_216B1E600(a2);
    v25 = sub_216B1E4E0(v24);
    v26 = sub_216B4CBC4(a2);
    v27 = sub_216B1E67C(a2);
    v28 = sub_216BDBC30(v27);
    v16 = sub_216BC0764(v23, 3, v25, v26, v28, v29, a3, a4, v39, v40);
    sub_216BD6DB4(v16, v35);
  }
  else
  {
    v15 = (uint64_t *)v14;
    while (1)
    {
      v16 = *v13;
      if (!*v13)
        break;
      v17 = (uint64_t *)sub_216BA5E50(*v13);
      v18 = sub_216BA5E54(v16);
      if (v17 != (uint64_t *)v18)
      {
        v19 = (uint64_t *)v18;
        do
        {
          v20 = *v17;
          if (!sub_216BE2064((uint64_t)a1, *v17))
            return 0;
          v21 = sub_216BDB8D0((uint64_t)a1, v20);
          sub_216BD4510(v36, v21);
          if ((sub_216BD6DA4((uint64_t)v36, v22) & 1) == 0)
          {
            v31 = sub_216B693F8(v20);
            v32 = sub_216BD6DAC((uint64_t)v36);
            v33 = sub_216B693F8(v32);
            sub_216BD54B8((uint64_t)a1, v21, v31, v33, 0);
            sub_216BD4548(v36);
            return 0;
          }
          sub_216BDB6A0((uint64_t)a1, v20, a1[22]);
          sub_216BD4548(v36);
          ++v17;
        }
        while (v17 != v19);
      }
      if (++v13 == v15)
        goto LABEL_12;
    }
  }
  return v16;
}

uint64_t sub_216BD6DA4(uint64_t a1, uint64_t a2)
{
  return sub_216BD8224((unsigned __int8 *)(a1 + 8), a2);
}

uint64_t sub_216BD6DAC(uint64_t a1)
{
  return sub_216BD8268((unsigned __int8 *)(a1 + 8));
}

uint64_t sub_216BD6DB4(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 36) = a2;
  return result;
}

unsigned int *sub_216BD6DBC(uint64_t *a1, uint64_t a2, int a3, int a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v37[2];
  __int128 v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;

  v40 = a6;
  v41 = a7;
  if (!sub_216BD5F30((uint64_t)a1))
  {
    v35 = sub_216B4CBC4(a2);
    sub_216BD433C((uint64_t)a1, v35, 2486, (uint64_t)v39);
    sub_216B4B3B4(v39);
    return 0;
  }
  v14 = (uint64_t *)sub_216B1E600((uint64_t)&v40);
  v15 = sub_216B35430(&v40);
  if (v14 != (uint64_t *)v15)
  {
    v16 = (uint64_t *)v15;
    do
    {
      v17 = *v14;
      if (!*v14)
        return 0;
      v18 = (uint64_t *)sub_216BA5E50(*v14);
      v19 = sub_216BA5E54(v17);
      if (v18 != (uint64_t *)v19)
      {
        while ((sub_216BE2064((uint64_t)a1, *v18) & 1) != 0)
        {
          if (++v18 == (uint64_t *)v19)
            goto LABEL_8;
        }
        return 0;
      }
LABEL_8:
      ++v14;
    }
    while (v14 != v16);
  }
  v20 = *a1;
  v21 = (unsigned int *)sub_216B1E600(a2);
  v22 = sub_216B1E4E0(v21);
  v23 = sub_216B4CBC4(a2);
  v24 = sub_216B1E67C(a2);
  v25 = sub_216BDBC30(v24);
  v27 = sub_216BC0764(v20, 3, v22, v23, v25, v26, a3, a4, v40, v41);
  sub_216BD6DB4(v27, a5);
  v28 = sub_216BAB688(v27);
  v38 = *(_OWORD *)sub_216B4ADBC(a8);
  if (sub_216BD5B5C(&v38))
  {
    sub_216B1E678((int)v37, &byte_216C19659);
    v28 = sub_216BDEF34(a1, &v38, v28, v37[0], v37[1]);
  }
  v29 = *a1;
  v30 = sub_216B4CBC4(a8);
  v31 = sub_216B1E67C(a8);
  v32 = sub_216B4A11C(v31);
  v34 = sub_216BC0444(v29, v30, v32, v33, v28);
  if (sub_216BD5B5C(&v38))
    sub_216BD5B78(v34);
  sub_216BD6A5C(v34);
  sub_216BD57A8((uint64_t)a1, (uint64_t)v34);
  return v34;
}

_DWORD *sub_216BD6FD4(uint64_t *a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  _BYTE v39[16];
  uint64_t v40;
  _BYTE v41[16];
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  _BYTE v46[16];
  _BYTE v47[16];
  _DWORD *v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;

  v51 = a4;
  v49 = a3;
  v50 = a2;
  if (!a2)
    return 0;
  v7 = (_DWORD *)sub_216BD5F44(a2);
  v48 = v7;
  if (!v7)
  {
    v20 = sub_216B693F8(a2);
    sub_216BD433C((uint64_t)a1, v20, 2242, (uint64_t)v47);
    v21 = (uint64_t *)v47;
    goto LABEL_15;
  }
  v8 = v7;
  if (sub_216BA75F0(v7) == 2 && !sub_216BD7330((unint64_t)a3, a1[25]) && sub_216BD7354(a1[1]))
  {
    v9 = sub_216B693F8((uint64_t)v8);
    sub_216BD433C((uint64_t)a1, v9, 4740, (uint64_t)v46);
    sub_216B4B3B4(v46);
    sub_216BD7368(v8);
  }
  v45[0] = a1;
  v45[1] = &v49;
  v45[2] = &v50;
  v45[3] = &v48;
  v45[4] = &v51;
  if (sub_216BA7620(v8))
  {
    v10 = sub_216BA7620(v48);
    sub_216BE0F4C(a1, (uint64_t *)&v49, v10);
  }
  v38[0] = sub_216B2037C((uint64_t)v48);
  v11 = sub_216BAB358((uint64_t)v49);
  if (sub_216BD39B8(v38, v11))
  {
    v38[0] = sub_216B2037C((uint64_t)v48);
    v12 = sub_216B1E600((uint64_t)v38);
    v13 = sub_216BA7ED8(v12);
    if (v13)
    {
      v14 = v13;
      v38[0] = sub_216BAB358((uint64_t)v49);
      v15 = sub_216B1E600((uint64_t)v38);
      v16 = sub_216BA7ED4(v15);
      if (v16)
      {
        v17 = v16;
        v38[0] = sub_216B2037C(v14);
        v18 = sub_216B1E67C(v17);
        if (sub_216BD39D0(v38, v18))
        {
          sub_216B20C64(&v44, v17);
          v19 = v44;
LABEL_25:
          sub_216B203A4(v14, v19);
          goto LABEL_32;
        }
      }
      v38[0] = sub_216BAB358((uint64_t)v49);
      v25 = sub_216B1E600((uint64_t)v38);
      v26 = sub_216BA7ED8(v25);
      if (v26)
      {
        v38[0] = sub_216B1E67C(v26);
        v27 = sub_216B1E600((uint64_t)v38);
        v28 = sub_216BAED9C(v27);
        if (v28)
        {
          sub_216B20C64(&v43, v28);
          v19 = v43;
          goto LABEL_25;
        }
      }
    }
    else
    {
      v38[0] = sub_216BAB358((uint64_t)v49);
      v29 = sub_216B1E600((uint64_t)v38);
      v30 = sub_216BA7ED8(v29);
      if (v30)
      {
        v31 = v30;
        v38[0] = sub_216B1E67C(v30);
        v32 = sub_216B2037C((uint64_t)v48);
        if (sub_216BD39D0(v38, v32))
          goto LABEL_32;
        v33 = sub_216B1E67C(v31);
        return (_DWORD *)sub_216BD7378((uint64_t)v45, v33);
      }
    }
    v33 = sub_216BAB358((uint64_t)v49);
    return (_DWORD *)sub_216BD7378((uint64_t)v45, v33);
  }
  if (sub_216BD5F30((uint64_t)a1))
  {
    v23 = sub_216BA75F0(v48);
    if (!v23 || v23 == 2)
    {
      v40 = 0;
      if (sub_216BB51FC((unint64_t)v49, a1[25], &v40))
        goto LABEL_32;
      v34 = sub_216B1E4E0(v49);
      sub_216BD433C((uint64_t)a1, v34, 2215, (uint64_t)v39);
      sub_216B4B3B4(v39);
      if (!v40)
        return 0;
      sub_216BC1804(v40);
      sub_216BD433C((uint64_t)a1, v35, 3584, (uint64_t)v38);
      sub_216BC1C8C(v40);
      v37 = v36;
      sub_216B7A280(v38, &v37);
      v21 = v38;
    }
    else if (v23 == 7)
    {
      v24 = sub_216B693F8((uint64_t)v48);
      sub_216BD433C((uint64_t)a1, v24, 3125, (uint64_t)v41);
      v21 = (uint64_t *)v41;
    }
    else
    {
      sub_216BD433C((uint64_t)a1, v51, 2777, (uint64_t)v42);
      v21 = (uint64_t *)v42;
    }
LABEL_15:
    sub_216B4B3B4(v21);
    return 0;
  }
LABEL_32:
  sub_216B7D14C((uint64_t)v48, (uint64_t)v49);
  return v48;
}

BOOL sub_216BD7330(unint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 0;
  return sub_216BB51FC(a1, a2, &v3);
}

BOOL sub_216BD7354(uint64_t a1)
{
  _WORD *v1;

  v1 = (_WORD *)sub_216BA3A04(a1);
  return sub_216BA2FF8(v1);
}

_DWORD *sub_216BD7368(_DWORD *result)
{
  *result |= 0x1000000u;
  return result;
}

uint64_t sub_216BD7378(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;

  v11 = a2;
  v3 = *(uint64_t **)a1;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = sub_216BAB580(**(unsigned __int8 ***)(a1 + 16));
  v6 = sub_216BE0670(v3, v4, v5);
  if (v6)
  {
    sub_216B7D14C(**(_QWORD **)(a1 + 24), v6);
    return **(_QWORD **)(a1 + 24);
  }
  else
  {
    sub_216BD433C((uint64_t)v3, **(_DWORD **)(a1 + 32), 2422, (uint64_t)v10);
    v9 = sub_216B2037C(**(_QWORD **)(a1 + 24));
    v8 = sub_216BDF234((uint64_t)v10, (uint64_t)&v9);
    sub_216BDF234(v8, (uint64_t)&v11);
    sub_216B4B3B4(v10);
    return 0;
  }
}

uint64_t sub_216BD7434(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v8[16];
  uint64_t v9;

  if (sub_216BAD120(a2))
  {
    v9 = sub_216BAB580(a2);
    if (sub_216B2D76C(&v9))
    {
      v9 = sub_216BAB580(a2);
      v4 = sub_216B1E600((uint64_t)&v9);
      v5 = sub_216BA7ED8(v4);
      if (v5)
      {
        if ((sub_216BD2D90(v5) & 1) == 0)
        {
          v6 = sub_216B693F8((uint64_t)a2);
          sub_216BD433C(a1, v6, 3140, (uint64_t)v8);
          sub_216B4B3B4(v8);
        }
      }
    }
  }
  return sub_216BD57A8(a1, (uint64_t)a2);
}

uint64_t sub_216BD74D4(uint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned __int16 v5;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  char v64;
  _BYTE v65[16];
  uint64_t v66[2];
  _BYTE v67[16];
  _BYTE v68[16];
  uint64_t v69[2];
  _BYTE v70[16];
  _BYTE v71[16];
  uint64_t v72[2];
  uint64_t v73;
  _BYTE v74[16];
  const void *v75[2];
  uint64_t v76[2];
  _BYTE v77[88];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v4 = (_DWORD *)sub_216B1E67C(a2);
  v5 = sub_216B96EC0(v4);
  if (v5)
  {
    v6 = (_BYTE *)sub_216BAE264(*a1, v5);
    if (sub_216BD7A28(v6) || sub_216BD7A2C(v6))
    {
      v7 = sub_216B4CBC4(a2);
      v8 = (uint64_t)a1;
      v9 = 2783;
    }
    else
    {
      v7 = sub_216B4CBC4(a2);
      v8 = (uint64_t)a1;
      v9 = 2820;
    }
    sub_216BD433C(v8, v7, v9, (uint64_t)v76);
    v50 = sub_216B1E67C(a2);
    sub_216B89E58(v76, v50);
    v49 = v76;
    goto LABEL_34;
  }
  v10 = sub_216B1E67C(a2);
  v76[0] = sub_216B4A11C(v10);
  v76[1] = v11;
  sub_216B1E678((int)v75, "gl_");
  if (sub_216B2A2EC((uint64_t)v76, v75[0], (size_t)v75[1]))
  {
    v12 = sub_216B4CBC4(a2);
    sub_216BD433C((uint64_t)a1, v12, 2820, (uint64_t)v76);
    v13 = sub_216B1E67C(a2);
    sub_216B89E58(v76, v13);
    sub_216B4B3B4(v76);
  }
  v14 = (_QWORD *)sub_216B1E600(a1[23]);
  if (!sub_216B603D4(v14))
  {
    v48 = sub_216B4CBC4(a2);
    sub_216BD433C((uint64_t)a1, v48, 2455, (uint64_t)v74);
    v49 = (uint64_t *)v74;
LABEL_34:
    sub_216B4B3B4(v49);
    return 0;
  }
  v15 = (__int128 *)sub_216B1E600(a2);
  v16 = a1[23];
  sub_216B1E678((int)v72, &byte_216C19659);
  sub_216BDEE54(a1, v15, v16, v72[0], v72[1]);
  v73 = v17;
  if (sub_216B2D76C(&v73))
  {
    v18 = sub_216B1E600((uint64_t)&v73);
    if (sub_216BA81AC(v18))
    {
      v19 = sub_216B4CBC4(a2);
      sub_216BD433C((uint64_t)a1, v19, 3140, (uint64_t)v71);
      sub_216B4B3B4(v71);
    }
  }
  if (sub_216BD7A30((uint64_t)v15))
  {
    v20 = sub_216B1E4E0((unsigned int *)v15);
    sub_216BD433C((uint64_t)a1, v20, 2199, (uint64_t)v70);
    sub_216B4B3B4(v70);
  }
  v64 = sub_216BDF2F4((uint64_t)a1, (unsigned int *)v15, v73);
  v21 = *a1;
  v22 = sub_216B4CBC4(a2);
  v23 = sub_216B1E67C(a2);
  v24 = sub_216B4A11C(v23);
  v26 = v25;
  v27 = sub_216B1E4E0((unsigned int *)v15);
  v28 = v73;
  v29 = sub_216BD7A8C(a2);
  v30 = sub_216BA5ADC(a2);
  sub_216BC09D8(v77, v30);
  v31 = sub_216B4B8D0(a2);
  sub_216B2D798(v69, v31);
  a1[24] = sub_216BC09EC(v21, v22, v24, v26, v27, v28, v29, v64, (uint64_t)v77, v69[0], v69[1]);
  sub_216B1FF6C(v77);
  if (sub_216BD5AFC((uint64_t)v15))
    sub_216BD7AA0((_DWORD *)a1[24]);
  v32 = sub_216BDB8D0((uint64_t)a1, a1[24]);
  sub_216BD4510(v76, v32);
  if (!sub_216BD7AB0((uint64_t)v76, v33))
  {
LABEL_22:
    sub_216BD5B4C((_DWORD *)a1[24]);
    if (sub_216BD7AB0((uint64_t)v76, v41))
      sub_216BD7C58((_DWORD *)a1[24]);
LABEL_24:
    v42 = sub_216BA9DD0(a1[24]);
    v43 = a1[24];
    if (v42)
    {
      v66[0] = sub_216B939E0(a1[24]);
      v44 = sub_216B1E600((uint64_t)v66);
      if (!sub_216BD6AD0(v44) || sub_216BA82B0(a1[24] + 16))
      {
        v45 = sub_216B693F8(a1[24]);
        sub_216BD433C((uint64_t)a1, v45, 2397, (uint64_t)v65);
        sub_216B4B3B4(v65);
      }
      v43 = a1[24];
      if (!a1[26])
        a1[26] = v43;
    }
    v46 = sub_216B1E600(a1[23]);
    sub_216BDB6A0((uint64_t)a1, v43, v46);
    v47 = a1[24];
    goto LABEL_43;
  }
  v34 = 0;
  while (1)
  {
    v35 = sub_216BD7AB8((uint64_t)v76, v34);
    v36 = sub_216BD44D8(v35);
    if (v36)
      break;
    v39 = sub_216B1E600(a1[23]);
    v40 = sub_216BD7AB8((uint64_t)v76, v34);
    if (sub_216BD55D8(v39, v40))
    {
      v57 = sub_216B693F8(a1[24]);
      sub_216BD433C((uint64_t)a1, v57, 2784, (uint64_t)v66);
      v58 = sub_216BDB8D0((uint64_t)a1, a1[24]);
      sub_216B89E58(v66, v58);
      v56 = v66;
      goto LABEL_42;
    }
LABEL_21:
    if (++v34 >= sub_216BD7AB0((uint64_t)v76, v38))
      goto LABEL_22;
  }
  v37 = (_DWORD *)v36;
  if (!sub_216BD7AC0(a1[24], v36))
    goto LABEL_21;
  v66[0] = sub_216B939E0(a1[24]);
  v52 = sub_216B939E0((uint64_t)v37);
  v53 = sub_216BD39B8(v66, v52);
  v54 = (_DWORD *)a1[24];
  if (v53)
  {
    v55 = sub_216B693F8((uint64_t)v54);
    sub_216BD433C((uint64_t)a1, v55, 2699, (uint64_t)v68);
    v56 = (uint64_t *)v68;
  }
  else
  {
    v59 = sub_216BD7B8C(v54, v37);
    v60 = a1[24];
    if ((v59 & 1) != 0)
    {
      sub_216BD7C48(v60, (uint64_t)v37);
      v61 = a1[24];
      *(_QWORD *)(sub_216BD7C50((uint64_t)v76) + 8 * v34) = v61;
      v62 = sub_216BD454C((uint64_t)v37);
      sub_216BD7C48(v62, a1[24]);
      goto LABEL_24;
    }
    v63 = sub_216B693F8(v60);
    sub_216BD433C((uint64_t)a1, v63, 2204, (uint64_t)v67);
    v56 = (uint64_t *)v67;
  }
LABEL_42:
  sub_216B4B3B4(v56);
  v47 = 0;
LABEL_43:
  sub_216BD4548(v76);
  return v47;
}

BOOL sub_216BD7A30(uint64_t a1)
{
  return sub_216BD5EC4(a1)
      || sub_216BD5EDC(a1)
      || (sub_216BD5F9C(a1) & 1) != 0
      || sub_216BD5EF4(a1)
      || sub_216BD5F14(a1);
}

uint64_t sub_216BD7A8C(uint64_t a1)
{
  unsigned int *v1;

  v1 = (unsigned int *)sub_216B1E600(a1);
  return sub_216B1E4E0(v1);
}

_DWORD *sub_216BD7AA0(_DWORD *result)
{
  *result |= 0x1000u;
  return result;
}

uint64_t sub_216BD7AB0(uint64_t a1, uint64_t a2)
{
  return sub_216BD82F4((unsigned __int8 *)(a1 + 8), a2);
}

uint64_t sub_216BD7AB8(uint64_t a1, unsigned int a2)
{
  return sub_216BD8340((unsigned __int8 *)(a1 + 8), a2);
}

uint64_t sub_216BD7AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;

  v3 = a1 + 16;
  v4 = sub_216BA82B0(a1 + 16);
  v5 = a2 + 16;
  if (v4 != sub_216BA82B0(a2 + 16))
    return 0;
  v6 = (uint64_t *)sub_216B262E0(v3);
  v7 = (uint64_t *)sub_216B262E0(v5);
  if (v6 == (uint64_t *)sub_216BA8258(v3))
    return 1;
  do
  {
    v11 = sub_216B2037C(*v6);
    v8 = sub_216B2037C(*v7);
    v9 = sub_216BD39B8(&v11, v8);
    if ((v9 & 1) != 0)
      break;
    ++v6;
    ++v7;
  }
  while (v6 != (uint64_t *)sub_216BA8258(v3));
  return v9 ^ 1u;
}

uint64_t sub_216BD7B8C(_DWORD *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD **v7;
  int v8;
  int v9;

  v4 = sub_216BA824C(a1);
  if (v4 != sub_216BA824C(a2))
    return 0;
  v5 = (uint64_t)(a1 + 4);
  v6 = (_DWORD **)sub_216B262E0(v5);
  v7 = (_DWORD **)sub_216B262E0((uint64_t)(a2 + 4));
  while (v6 != (_DWORD **)sub_216BA8258(v5))
  {
    v8 = sub_216BA8234(*v6);
    if (v8 != sub_216BA8234(*v7))
      return 0;
    v9 = sub_216BA8228(*v6);
    if (v9 != sub_216BA8228(*v7))
      return 0;
    ++v6;
    ++v7;
  }
  return 1;
}

uint64_t sub_216BD7C48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_216BD7C50(uint64_t a1)
{
  return sub_216BD4848((unsigned __int8 *)(a1 + 8));
}

_DWORD *sub_216BD7C58(_DWORD *result)
{
  *result |= 0x8000u;
  return result;
}

uint64_t sub_216BD7C68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE v9[16];

  v4 = sub_216BD74D4(a1, a2);
  if (!v4)
    return 0;
  v5 = sub_216B3DB48(v4);
  v6 = v5;
  while ((sub_216BA81D0(v6) & 1) == 0)
  {
    v6 = sub_216B40EE8(v6);
    if (sub_216BA8288(v6))
    {
      v7 = sub_216B4CBC4(a2);
      sub_216BD433C((uint64_t)a1, v7, 2791, (uint64_t)v9);
      sub_216B4B3B4(v9);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_216BD7CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[16];
  uint64_t v11;

  v11 = sub_216B939E0(*(_QWORD *)(a1 + 192));
  v6 = sub_216B1E600((uint64_t)&v11);
  if ((sub_216BD6AD0(v6) & 1) == 0 && (sub_216BD7D8C(*(_QWORD *)(a1 + 192)) & 1) == 0)
  {
    v7 = sub_216B693F8(a2);
    sub_216BD433C(a1, v7, 4728, (uint64_t)v10);
    sub_216B4B3B4(v10);
  }
  v8 = sub_216B3DB48(a2);
  result = sub_216BD7D98(v8, a3);
  *(_QWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t sub_216BD7D8C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1) >> 6) & 1;
}

uint64_t sub_216BD7D98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 144) = a2;
  return result;
}

uint64_t sub_216BD7DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE v13[16];
  _BYTE v14[16];

  if (!sub_216B603D4(*(_QWORD **)(a1 + 184)))
  {
    v7 = sub_216B4D100(a2);
    sub_216BD433C(a1, v7, 2039, (uint64_t)v14);
    v8 = v14;
LABEL_7:
    sub_216B4B3B4(v8);
    return 0;
  }
  if (sub_216BD5B40(a2) != 7)
  {
    v9 = sub_216B4D100(a2);
    sub_216BD433C(a1, v9, 2038, (uint64_t)v13);
    v8 = v13;
    goto LABEL_7;
  }
  sub_216BC0F5C(&v12);
  sub_216B4AED0(&v11);
  sub_216B4AED0(&v10);
  if (sub_216BE0884(a1, a2, (unsigned __int16 *)&v12, &v11, &v10))
  {
    sub_216BE1288(a1, v12, v11, v10);
    sub_216BD7EA4(a1, v12, v11, v10);
    v4 = *(_QWORD *)a1;
    v5 = sub_216B4D100(a2);
    return sub_216BC055C(v4, v5, v12);
  }
  return 0;
}

_WORD *sub_216BD7EA4(uint64_t a1, int a2, int a3, int a4)
{
  char v7;
  _WORD *result;
  char v9;
  int v10;

  v10 = a2;
  if (sub_216BA7650((unsigned __int16 *)&v10))
  {
    v7 = sub_216BA7674((unsigned __int16 *)&v10);
    sub_216BD4CA4((_WORD *)(a1 + 440), v7);
    *(_DWORD *)(a1 + 444) = a3;
  }
  result = (_WORD *)sub_216BA7680((unsigned __int16 *)&v10);
  if ((_DWORD)result)
  {
    v9 = sub_216BA768C((unsigned __int16 *)&v10);
    result = sub_216BD4CBC((_WORD *)(a1 + 440), v9);
    *(_DWORD *)(a1 + 448) = a4;
  }
  return result;
}

unsigned int *sub_216BD7F2C(uint64_t *a1, unsigned int *a2, int a3)
{
  unsigned int v6;
  _BYTE *v7;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE v24[16];
  _BYTE v25[16];

  if (sub_216BD5F0C((uint64_t)a2))
  {
    v6 = sub_216B1E4E0(a2);
    sub_216BD433C((uint64_t)a1, v6, 2467, (uint64_t)v25);
    v7 = v25;
LABEL_3:
    sub_216B4B3B4(v7);
    return 0;
  }
  v9 = sub_216BD80B0((uint64_t)a2);
  if (v9 != 3 && v9 != 5)
  {
    v10 = sub_216BD80B0((uint64_t)a2);
    if (!sub_216BD80BC(v10))
    {
      v16 = sub_216B27CB0((uint64_t)a2);
      if (v16)
      {
        v17 = v16;
        v18 = sub_216B1E4E0(a2);
        sub_216BD433C((uint64_t)a1, v18, 2468, (uint64_t)v24);
        v19 = sub_216BAB688(v17);
      }
      else
      {
        v20 = sub_216B1E4E0(a2);
        sub_216BD433C((uint64_t)a1, v20, 2468, (uint64_t)v24);
        v21 = *a1;
        v22 = sub_216BD80B0((uint64_t)a2);
        sub_216BD3484(v21, v22);
      }
      v23 = v19;
      sub_216BDF234((uint64_t)v24, (uint64_t)&v23);
      v7 = v24;
      goto LABEL_3;
    }
  }
  v11 = a1[23];
  v12 = sub_216BD80B0((uint64_t)a2);
  v13 = sub_216BD815C((uint64_t)a2);
  sub_216BD80CC(v11, v12, v13);
  v14 = *a1;
  LOBYTE(v11) = sub_216BD815C((uint64_t)a2);
  v15 = sub_216BD80B0((uint64_t)a2);
  return sub_216BC050C(v14, a3, v11, v15);
}

uint64_t sub_216BD80B0(uint64_t a1)
{
  return *(_WORD *)(a1 + 56) >> 1;
}

BOOL sub_216BD80BC(int a1)
{
  return (a1 - 41) < 4;
}

uint64_t sub_216BD80CC(uint64_t result, int a2, char a3)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;

  switch(a2)
  {
    case ')':
      v3 = 16 * (a3 & 3);
      v4 = *(_WORD *)(result + 12) & 0xFFCF;
      goto LABEL_9;
    case '*':
      v3 = (a3 & 3) << 6;
      v4 = *(_WORD *)(result + 12) & 0xFF3F;
      goto LABEL_9;
    case '+':
      v3 = (a3 & 3) << 8;
      v4 = *(_WORD *)(result + 12) & 0xFCFF;
      goto LABEL_9;
    case ',':
      v3 = (a3 & 3) << 10;
      v4 = *(_WORD *)(result + 12) & 0xF3FF;
      goto LABEL_9;
    default:
      if (a2 == 3)
      {
        v5 = *(_WORD *)(result + 12) & 0xFFFC | a3 & 3;
      }
      else
      {
        v3 = 4 * (a3 & 3);
        v4 = *(_WORD *)(result + 12) & 0xFFF3;
LABEL_9:
        v5 = v4 | v3;
      }
      *(_WORD *)(result + 12) = v5;
      return result;
  }
}

uint64_t sub_216BD815C(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 56) >> 12) & 3;
}

uint64_t sub_216BD8168(_DWORD *a1)
{
  return (*a1 >> 1) & 1;
}

uint64_t sub_216BD8174(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA80C4(&v2);
}

_BYTE *sub_216BD8198(_BYTE *result, char a2, int a3, int a4)
{
  char v4;
  char v5;

  if (a3)
    v4 = 2;
  else
    v4 = 0;
  if (a4)
    v5 = 4;
  else
    v5 = 0;
  *result = v4 | a2 | v5 | *result & 0xF8;
  return result;
}

uint64_t sub_216BD81CC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216B5FFE4(a1, a2);
  }
  else
  {
    sub_216B3F714((uint64_t)a1, a2);
    result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216BD8224(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;

  if (sub_216BD5344(a1, a2))
    return 1;
  result = sub_216BD4E6C(a1);
  if (result)
    return sub_216B29084((_QWORD *)result);
  return result;
}

uint64_t sub_216BD8268(unsigned __int8 *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_216BD829C(a1);
  if (!result)
  {
    v4 = sub_216BA9CCC(a1, v3);
    return *(_QWORD *)sub_216B5F148(v4);
  }
  return result;
}

uint64_t sub_216BD829C(unsigned __int8 *a1)
{
  uint64_t v2;

  if (sub_216B601E8(a1))
    return sub_216BA9CCC(a1, v2);
  else
    return 0;
}

BOOL sub_216BD82D4(_BYTE *a1)
{
  return (*a1 & 0x7F) != 0;
}

BOOL sub_216BD82E4(_WORD *a1)
{
  return (*a1 & 0xF80) != 0;
}

uint64_t sub_216BD82F4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  if ((sub_216BD8224(a1, a2) & 1) != 0)
    return 0;
  if (sub_216B601E8(a1))
    return 1;
  v5 = (_QWORD *)sub_216BA9CCC(a1, v4);
  return sub_216B2E220(v5);
}

uint64_t sub_216BD8340(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;

  result = sub_216BD829C(a1);
  if (!result)
  {
    v6 = (_QWORD *)sub_216BA9CCC(a1, v5);
    return *(_QWORD *)sub_216BD837C(v6, a2);
  }
  return result;
}

uint64_t sub_216BD837C(_QWORD *a1, unsigned int a2)
{
  return *a1 + 8 * a2;
}

uint64_t sub_216BD8388(uint64_t a1)
{
  char v2;

  return sub_216BD83A8(a1, (uint64_t)&v2);
}

uint64_t sub_216BD83A8(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BD83E8(a1, a2, &v5);
}

uint64_t sub_216BD83EC(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216B3269C())
  {
    j_j_nullsub_1(&v6);
    j_j_nullsub_1(&v5);
    sub_216BD8460(a1, a2, &v5);
    *(_QWORD *)(a1 + 24) = a1;
  }
  return a1;
}

_QWORD *sub_216BD8464(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA5A4(a1);
  *v6 = &unk_24D605EB0;
  sub_216BD84B4(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BD84B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B2E930(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BD8460(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BADABC(v11);
  return v8;
}

uint64_t sub_216BD8568(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BD8460(a2, v4, v5);
}

uint64_t sub_216BD85B0(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216BD85B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v5);
  nullsub_1(v2, v3);
  return sub_216B2ECAC((uint64_t)&v5, a1, 1);
}

uint64_t sub_216BD860C(uint64_t a1, uint64_t a2)
{
  return sub_216BD8684(a1 + 8, a2);
}

uint64_t sub_216BD8614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216B514B8(a2);
  v6 = sub_216B514B8(a3);
  return sub_216BD865C(a1, v5, v6);
}

uint64_t sub_216BD8660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_216BACD54(a1, a2);
  return sub_216BACD54(v4, a3);
}

uint64_t sub_216BD8684(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BD86A8(v3, a2);
}

uint64_t sub_216BD86AC()
{
  return sub_216B2043C();
}

uint64_t sub_216BD86B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_216BD86D8(a1, v4);
}

uint64_t sub_216BD86E0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BD8708();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BD870C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA5A4(a1);
  *v6 = &off_24D605EF8;
  sub_216BD8758(v6 + 1, a2, a3);
  return a1;
}

void sub_216BD8760()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_123();
  j__free(v0);
}

uint64_t sub_216BD8774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BD8894();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BD8708(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BD88A0(v7);
  return v4;
}

uint64_t sub_216BD87E8(uint64_t a1, uint64_t a2)
{
  return sub_216BD8708(a2, a1 + 8);
}

uint64_t sub_216BD87FC(uint64_t a1)
{
  return sub_216BD8914(a1, 1);
}

uint64_t sub_216BD8804(uint64_t a1)
{
  return sub_216BD8924(a1 + 8);
}

uint64_t sub_216BD880C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B514B8(a2);
  sub_216BAA6B8(a3);
  return sub_216BD8850(a1, v5);
}

_OWORD *sub_216BD8858(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  *a1 = *(_OWORD *)sub_216B262E0((uint64_t)&v4);
  return a1;
}

uint64_t sub_216BD8894()
{
  return sub_216B25CA0(24, 8);
}

uint64_t *sub_216BD88A4(uint64_t *a1)
{
  sub_216BD88C8(a1);
  return a1;
}

uint64_t *sub_216BD88C8(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = sub_216B3DBD0((uint64_t)result);
    return (uint64_t *)sub_216BD8900(v2, v1);
  }
  return result;
}

uint64_t sub_216BD8900(uint64_t a1, uint64_t a2)
{
  return sub_216BD8910(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216BD8914(uint64_t a1, uint64_t a2)
{
  return sub_216B25C38(a1, 24 * a2, 8);
}

uint64_t sub_216BD892C(uint64_t **a1, unsigned __int8 **a2)
{
  return sub_216BD69E8(a1, *a2);
}

_DWORD *sub_216BD8934(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _WORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  char v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _DWORD *v36;
  _BYTE v37[16];
  _BYTE v38[23];
  unsigned __int8 v39;
  uint64_t v40;
  _DWORD *v41[2];

  sub_216BD4510(v41, a3);
  v6 = sub_216BD6984(v41);
  sub_216BD4548(v41);
  if (v6)
  {
    v7 = sub_216B4A11C(a3);
    v8 = a2;
    if (!sub_216BDB540(a1, v6, v7, v9, a2))
      return 0;
    v10 = (_DWORD *)sub_216BAE264(*a1, v6);
    if (sub_216BD8BD4(v10))
    {
      v11 = sub_216BAE8E0(v10);
      sub_216BAE918((uint64_t)v10, a1[25]);
      v12 = *a1;
      v13 = sub_216BD8BD8((uint64_t)v10);
      sub_216BD3484(v12, v13);
      v15 = v14;
      v16 = sub_216BD8BEC((uint64_t)v10);
      v17 = sub_216BD8BF8((uint64_t)v10);
      return sub_216BC299C(v12, v8, v11, v15, v16, v17);
    }
    if (sub_216BD8C04((uint64_t)v10))
    {
      v19 = sub_216BD8C08(v10);
      v20 = *a1;
      v21 = sub_216BD8BD8((uint64_t)v10);
      sub_216BD3484(v20, v21);
      v23 = v22;
      v24 = sub_216BD8BF8((uint64_t)v10);
      return sub_216BC2A10(v20, v8, v19, v23, v24);
    }
  }
  v25 = sub_216BDBAD0(a1, a3);
  v40 = v25;
  if (v25)
  {
    v26 = (_WORD *)v25;
    v27 = (_DWORD *)sub_216BD5F44(v25);
    if (v27)
    {
      v28 = v27;
      v29 = sub_216BE4258((uint64_t)a1, v27);
      v30 = sub_216BA7620(v28);
      return sub_216BC235C(*a1, v29, v30, a2, v26);
    }
    v35 = sub_216BD8C0C((uint64_t)v26);
    if (v35)
    {
      v36 = (_DWORD *)v35;
      v29 = sub_216BE42F0((uint64_t)a1, v35);
      v30 = sub_216BA8228(v36);
      return sub_216BC235C(*a1, v29, v30, a2, v26);
    }
    if (sub_216BD8C44(&v40))
    {
      sub_216BD433C((uint64_t)a1, a2, 2878, (uint64_t)v38);
      v34 = v38;
    }
    else
    {
      sub_216BD433C((uint64_t)a1, a2, 3095, (uint64_t)v37);
      v34 = v37;
    }
    goto LABEL_18;
  }
  sub_216BD5F40(&v39, 1, 1, 0);
  v41[0] = (_DWORD *)sub_216BDC3C4((uint64_t)a1, a3, a2, &v39);
  v41[1] = v31;
  if (!sub_216B1E4E0((unsigned int *)v41))
  {
    sub_216BD433C((uint64_t)a1, a2, 3109, (uint64_t)v41);
    v32 = sub_216B4A11C(a3);
    sub_216B4B340((uint64_t *)v41, v32, v33);
    v34 = v41;
LABEL_18:
    sub_216B4B3B4(v34);
  }
  return 0;
}

uint64_t sub_216BD8BD8(uint64_t a1)
{
  return ((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) >> 10) & 0x7F;
}

uint64_t sub_216BD8BEC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 6) >> 3) & 3;
}

uint64_t sub_216BD8BF8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 6) >> 1) & 3;
}

uint64_t sub_216BD8C0C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BDAFB8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

_DWORD *sub_216BD8C48(uint64_t *a1, int a2, int a3)
{
  return sub_216BD8C60(*a1, a3, a2 == 145);
}

_DWORD *sub_216BD8C60(uint64_t a1, int a2, char a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v6 = (_DWORD *)sub_216BC0314(0x18u, a1, 8u);
  v7 = sub_216BD376C(a1, 7);
  sub_216B20C64(&v9, v7);
  return sub_216BDB064(v6, v9, a2, a3);
}

_DWORD *sub_216BD8CD4(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  const char *v7;
  const void **v8;
  _DWORD *v9;
  const char *v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  _BYTE v28[16];
  const void *v29[7];
  _BYTE v30[16];
  _BYTE v31[24];
  _BYTE v32[24];
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[2];
  const void *v36[6];
  unsigned int v37[6];
  _BYTE v38[16];
  _BYTE v39[113];
  unsigned __int8 v40;
  char v41;
  char v42;
  char v43;
  char v44;
  _QWORD v45[2];

  v45[0] = a2;
  v45[1] = a3;
  v6 = sub_216B784F0((uint64_t)v39, a2, a3, a4, a1[20]);
  if (v39[112])
    goto LABEL_8;
  if (v42)
  {
    sub_216BD433C((uint64_t)a1, a4, 2379, (uint64_t)v29);
    v7 = "long long";
LABEL_6:
    sub_216B60EA8((uint64_t *)v29, (uint64_t)v7);
    v8 = v29;
LABEL_7:
    sub_216B4B3B4(v8);
LABEL_8:
    v9 = 0;
    goto LABEL_9;
  }
  if (v44)
  {
    sub_216BD433C((uint64_t)a1, a4, 2379, (uint64_t)v29);
    v7 = "imaginary";
    goto LABEL_6;
  }
  if (sub_216B783DC(v6))
  {
    if (v41)
    {
      sub_216BD433C((uint64_t)a1, a4, 4730, (uint64_t)v38);
      v8 = (const void **)v38;
      goto LABEL_7;
    }
    v11 = (const char *)sub_216B1E600((uint64_t)v45);
    v12 = strtof(v11, 0);
    sub_216B1F4F8(v37, v12);
    sub_216BD9128(v29);
    if (sub_216B20044((uint64_t)v37))
    {
      sub_216B1F398((uint64_t)&unk_216C10FD0, 0, (uint64_t)v36);
      sub_216B1F4FC((uint64_t)v36, v29, 0, 3u);
      sub_216B1D57C(v36);
      v13 = 4741;
    }
    else
    {
      if (!sub_216B1D5F0((unsigned __int16 *)v37))
      {
LABEL_23:
        v20 = *a1;
        if (v43)
        {
          v21 = v32;
          sub_216B1D904(v32, v37);
          v22 = sub_216BD912C(v20, a4, (uint64_t)v32);
        }
        else
        {
          v21 = v31;
          sub_216B1D904(v31, v37);
          v22 = sub_216BD91B8(v20, a4, (uint64_t)v31);
        }
        v9 = v22;
        sub_216B1D57C(v21);
        sub_216B2489C(v29);
        sub_216B1D57C(v37);
        goto LABEL_9;
      }
      sub_216B1E614((uint64_t)&unk_216C10FD0, 0, (uint64_t)v36);
      sub_216B1D580((uint64_t)v37, (uint64_t)v36);
      sub_216B1D57C(v36);
      sub_216B1F3C8((uint64_t)&unk_216C10FD0, 0, (uint64_t)v36);
      sub_216B1F4FC((uint64_t)v36, v29, 0, 3u);
      sub_216B1D57C(v36);
      v13 = 4742;
    }
    sub_216BD9128(v36);
    sub_216B1F4FC((uint64_t)v37, v36, 0, 3u);
    sub_216BD433C((uint64_t)a1, a4, v13, (uint64_t)v35);
    v15 = sub_216B262E0((uint64_t)v29);
    v16 = sub_216B1FF14((uint64_t)v29);
    sub_216B1E684(v34, v15, v16);
    v17 = sub_216B4B340(v35, v34[0], v34[1]);
    v18 = sub_216B262E0((uint64_t)v36);
    v19 = sub_216B1FF14((uint64_t)v36);
    sub_216B1E684(v33, v18, v19);
    sub_216B4B340(v17, v33[0], v33[1]);
    sub_216B4B3B4(v35);
    sub_216B2489C(v36);
    goto LABEL_23;
  }
  sub_216B9C9C8((uint64_t)v39);
  if (v41)
  {
    sub_216BD433C((uint64_t)a1, a4, 2379, (uint64_t)v29);
    v7 = "long";
    goto LABEL_6;
  }
  v14 = v40;
  sub_216B1E414(v36, 32, 0, v40 == 0);
  if (sub_216B78708((uint64_t)v39, (unsigned int *)v36))
  {
    sub_216B1E414(v37, 64, 0, v40 == 0);
    if (sub_216B78708((uint64_t)v39, v37))
    {
      sub_216BD433C((uint64_t)a1, a4, 2304, (uint64_t)v30);
      sub_216B4B3B4(v30);
    }
    else
    {
      sub_216B29078(v29);
      sub_216B243EC(v37, v29, 0xAu, v40 == 0, 0);
      sub_216BD433C((uint64_t)a1, a4, 2303, (uint64_t)v35);
      v25 = sub_216B24850((uint64_t)v29);
      sub_216B4B340(v35, v25, v26);
      sub_216B4B3B4(v35);
      sub_216B2489C(v29);
    }
    sub_216B1D998(v37);
    v9 = 0;
  }
  else
  {
    v23 = *a1;
    if (v14)
    {
      sub_216B1E51C(v27, v36);
      v9 = sub_216BD92D0(v23, a4, (uint64_t)v27);
      v24 = v27;
    }
    else
    {
      sub_216B1E51C(v28, v36);
      v9 = sub_216BD9244(v23, a4, (uint64_t)v28);
      v24 = v28;
    }
    sub_216B1D998(v24);
  }
  sub_216B1D998(v36);
LABEL_9:
  sub_216B91CB0((uint64_t)v39);
  return v9;
}

_DWORD *sub_216BD912C(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;

  v6 = (_DWORD *)sub_216BC0314(0x28u, a1, 8u);
  v7 = sub_216BD376C(a1, 4);
  sub_216B20C64(&v10, v7);
  sub_216B1D8F0(v9, a3);
  sub_216BDB0B4(v6, v10, a2, (uint64_t)v9);
  sub_216B1D57C(v9);
  return v6;
}

_DWORD *sub_216BD91B8(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;

  v6 = (_DWORD *)sub_216BC0314(0x28u, a1, 8u);
  v7 = sub_216BD376C(a1, 3);
  sub_216B20C64(&v10, v7);
  sub_216B1D8F0(v9, a3);
  sub_216BDB110(v6, v10, a2, (uint64_t)v9);
  sub_216B1D57C(v9);
  return v6;
}

_DWORD *sub_216BD9244(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v6 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  v7 = sub_216BD376C(a1, 5);
  sub_216B20C64(&v10, v7);
  sub_216B1E51C(v9, a3);
  sub_216BDB16C(v6, v10, a2, (uint64_t)v9);
  sub_216B1D998(v9);
  return v6;
}

_DWORD *sub_216BD92D0(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v6 = (_DWORD *)sub_216BC0314(0x20u, a1, 8u);
  v7 = sub_216BD376C(a1, 6);
  sub_216B20C64(&v10, v7);
  sub_216B1E51C(v9, a3);
  sub_216BDB1C8(v6, v10, a2, (uint64_t)v9);
  sub_216B1D998(v9);
  return v6;
}

uint64_t sub_216BD935C(uint64_t *a1, unsigned int a2, int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = sub_216BDF4BC((uint64_t)a1, a3, a4, a2);
  if (!sub_216B2D76C(&v13))
    return 0;
  v10 = *a1;
  v11 = sub_216BAB358(a4);
  return sub_216BC22F4(v10, a2, a4, v11, a3, a5);
}

_QWORD *sub_216BD93F0(uint64_t *a1, unsigned int *a2, unsigned int a3, uint64_t a4, int a5)
{
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t *v42;
  std::string v43;
  std::string v44;
  uint64_t v45[2];
  uint64_t v46[2];
  std::string v47;
  int v48;
  uint64_t v49;

  v49 = sub_216BAB358((uint64_t)a2);
  v10 = sub_216BAAF68((uint64_t)a2);
  v11 = v10;
  v48 = v10;
  v12 = sub_216B1E600((uint64_t)&v49);
  v13 = sub_216BA7040(v12);
  if (v13)
  {
    v47.__r_.__value_.__r.__words[0] = sub_216BE1500(a1, v13, &v48, a3, a4, a5);
    result = (_QWORD *)sub_216B1E600((uint64_t)&v47);
    if (result)
    {
      v15 = sub_216BAAEAC((uint64_t)a2);
      return sub_216BC2C38(*a1, v48, (uint64_t)v47.__r_.__value_.__l.__data_, v15, (uint64_t)a2, a4, a5);
    }
  }
  else
  {
    v16 = sub_216B1E600((uint64_t)&v49);
    v17 = sub_216BA76B8(v16);
    if (v17)
    {
      v18 = v17;
      v19 = sub_216B1E67C(v17);
      v20 = sub_216BD96AC(v19 + 16);
      v22 = v21;
      v23 = sub_216B1E67C(v18);
      v24 = sub_216BDB8D0((uint64_t)a1, v23);
      result = (_QWORD *)sub_216BE13F8((uint64_t)a1, v20, v22, a3, a4, v24);
      if (result)
      {
        v25 = (uint64_t)result;
        v26 = sub_216BA7620(result);
        v27 = sub_216B2037C(v25);
        return sub_216BC2AE0(*a1, v11, v27, v26, (uint64_t)a2, a4, a5);
      }
    }
    else
    {
      v28 = sub_216B1E600((uint64_t)&v49);
      v29 = sub_216BA771C(v28);
      if (v29)
      {
        v30 = v29;
        v31 = sub_216B1E67C(v29);
        v32 = sub_216BD96F4(v31 + 16);
        v34 = v33;
        v35 = sub_216B1E67C(v30);
        v36 = sub_216BDB8D0((uint64_t)a1, v35);
        result = (_QWORD *)sub_216BE13F8((uint64_t)a1, v32, v34, a3, a4, v36);
        if (result)
        {
          v37 = (uint64_t)result;
          v38 = sub_216BA7620(result);
          v39 = sub_216B2037C(v37);
          return sub_216BC2B8C(*a1, v11, v39, v38, (uint64_t)a2, a4, a5);
        }
      }
      else
      {
        sub_216B25034(&v47);
        v40 = (_BYTE *)sub_216B1E600((uint64_t)&v49);
        sub_216BD2A64(v40, (uint64_t)&v47);
        v41 = sub_216B1E4E0(a2);
        sub_216BD433C((uint64_t)a1, v41, 1875, (uint64_t)v46);
        v42 = sub_216B89E58(v46, a4);
        std::operator+<char>();
        sub_216B2B308(&v43, "'", (uint64_t)&v44);
        sub_216B26CA0(v45, &v44);
        sub_216B4B340(v42, v45[0], v45[1]);
        std::string::~string(&v44);
        std::string::~string(&v43);
        sub_216B4B3B4(v46);
        std::string::~string(&v47);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_216BD96AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B262E0(a1);
  v3 = sub_216BA7D24(a1);
  sub_216BC0E28(&v5, v2, v3);
  return v5;
}

uint64_t sub_216BD96F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B262E0(a1);
  v3 = sub_216BA7E5C(a1);
  sub_216BC0E28(&v5, v2, v3);
  return v5;
}

_DWORD *sub_216BD973C(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  std::string v19;
  std::string v20;
  uint64_t v21[2];
  uint64_t v22[2];
  std::string v23;

  v23.__r_.__value_.__r.__words[0] = sub_216BAB358(a2);
  v8 = sub_216B1E600((uint64_t)&v23);
  if ((sub_216BD8174(v8) & 1) == 0)
  {
    v23.__r_.__value_.__r.__words[0] = sub_216BAB358(a2);
    v9 = sub_216B1E600((uint64_t)&v23);
    v10 = sub_216BA7ED8(v9);
    if (!v10
      || (v11 = v10, !sub_216BD2D90(v10))
      || (v23.__r_.__value_.__r.__words[0] = sub_216B1E67C(v11),
          v12 = sub_216B1E600((uint64_t)&v23),
          (sub_216BD8174(v12) & 1) == 0))
    {
      sub_216B25034(&v23);
      v20.__r_.__value_.__r.__words[0] = sub_216BAB358(a2);
      v13 = (_BYTE *)sub_216B1E600((uint64_t)&v20);
      sub_216BD2A64(v13, (uint64_t)&v23);
      sub_216BD433C((uint64_t)a1, a3, 1873, (uint64_t)v22);
      std::operator+<char>();
      sub_216B2B308(&v19, "'", (uint64_t)&v20);
      sub_216B26CA0(v21, &v20);
      v14 = sub_216B4B340(v22, v21[0], v21[1]);
      sub_216BC1C8C(a2);
      v18 = v15;
      sub_216B7A280(v14, &v18);
      std::string::~string(&v20);
      std::string::~string(&v19);
      sub_216B4B3B4(v22);
      std::string::~string(&v23);
    }
  }
  sub_216BD3484(*a1, 5);
  return sub_216BC258C(*a1, 0, v16, a2, a3, a4);
}

unint64_t sub_216BD98B8(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  unsigned int v12;
  uint64_t *v13;
  int v14;
  unint64_t result;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];

  if (sub_216B1E4E8((uint64_t)a2) && sub_216B1E520(a2))
  {
    v12 = sub_216B1E4E0(a6);
    sub_216BD433C(a1, v12, 2454, (uint64_t)v24);
    v13 = sub_216B7A71C(v24, a3);
    v14 = sub_216B2478C((uint64_t)a2);
    sub_216B77520(v13, v14);
  }
  else
  {
    result = sub_216B1FD84(a2);
    if (result < a4)
      return result;
    v16 = sub_216B1E4E0(a6);
    sub_216BD433C(a1, v16, 2276, (uint64_t)v24);
    v17 = sub_216B7A71C(v24, a3);
    v18 = sub_216B1FD84(a2);
    sub_216B7A71C(v17, v18);
  }
  sub_216B4B3B4(v24);
  result = sub_216BAB1D8(a5);
  if (result)
  {
    v19 = result;
    v20 = sub_216B1E67C(result);
    v21 = sub_216B693F8(v20);
    sub_216BD433C(a1, v21, 3680, (uint64_t)v24);
    v22 = sub_216B1E67C(v19);
    v23 = sub_216BDB8D0(a1, v22);
    sub_216B89E58(v24, v23);
    return sub_216B4B3B4(v24);
  }
  return result;
}

_DWORD *sub_216BD9A08(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  _BYTE *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  _BYTE v42[16];
  _BYTE v43[16];
  _BYTE v44[16];
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[16];

  v10 = sub_216BAB358((uint64_t)a4);
  if ((sub_216BB15AC(v10) & 1) == 0)
  {
    sub_216BD433C((uint64_t)a1, a3, 3079, (uint64_t)v48);
    v20 = v48;
    goto LABEL_6;
  }
  sub_216B2D410(&v47);
  v45[0] = sub_216BAB358(a2);
  v11 = sub_216B1E600((uint64_t)v45);
  sub_216B20C64(&v46, v11);
  v12 = sub_216B1E600((uint64_t)&v46);
  v13 = sub_216BA7040(v12);
  if (v13)
  {
    v14 = v13;
    v15 = sub_216BAAF68(a2);
    v16 = sub_216B1E67C(v14);
    sub_216B20C64(v45, v16);
    v47 = v45[0];
    sub_216BD9D24(v45);
    if (sub_216BD9D28((unint64_t)a4, a1[25], (uint64_t)v45))
    {
      v17 = sub_216BA734C(v14);
      v18 = (uint64_t)a1;
      v19 = 2;
LABEL_13:
      sub_216BD98B8(v18, v45, v19, v17, a2, a4);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  v22 = sub_216B1E600((uint64_t)&v46);
  v23 = sub_216BA710C(v22);
  if (!v23)
  {
    v29 = sub_216B1E600((uint64_t)&v46);
    v30 = sub_216BA7ED4(v29);
    if (v30)
    {
      v31 = v30;
      v15 = sub_216BAAF68(a2);
      v47 = sub_216B1E67C(v31);
      sub_216BD9D24(v45);
      if (!sub_216BD9D28((unint64_t)a4, a1[25], (uint64_t)v45))
      {
        v36 = sub_216B1E600((uint64_t)&v47);
        if (sub_216BD6AAC(v36))
        {
          v37 = sub_216B1E4E0(a4);
          sub_216BD433C((uint64_t)a1, v37, 2830, (uint64_t)v44);
          sub_216B4B3B4(v44);
        }
        v38 = sub_216BAB1D8(a2);
        if (v38)
        {
          v39 = sub_216B1E67C(v38);
          v40 = (_DWORD *)sub_216BD5F44(v39);
          if (v40)
          {
            if (sub_216BA75F0(v40) == 4)
            {
              v41 = sub_216B1E4E0(a4);
              sub_216BD433C((uint64_t)a1, v41, 2191, (uint64_t)v43);
              sub_216B4B3B4(v43);
            }
          }
        }
        goto LABEL_14;
      }
      v17 = sub_216B4CBC4(v31);
      v18 = (uint64_t)a1;
      v19 = 0;
      goto LABEL_13;
    }
    sub_216BD433C((uint64_t)a1, a3, 2220, (uint64_t)v42);
    v20 = v42;
LABEL_6:
    sub_216B4B3B4(v20);
    return 0;
  }
  v24 = v23;
  v15 = sub_216BAAF68(a2);
  v25 = *a1;
  v26 = sub_216B1E67C(v24);
  v27 = sub_216BA6F68(v26);
  v28 = sub_216BA7418(v24);
  v47 = sub_216BD30A0(v25, v27, v28);
  sub_216BD9D24(v45);
  if (sub_216BD9D28((unint64_t)a4, a1[25], (uint64_t)v45))
  {
    v17 = sub_216BA734C(v24);
    v18 = (uint64_t)a1;
    v19 = 1;
    goto LABEL_13;
  }
LABEL_14:
  sub_216B91D80(v45);
  if (!sub_216BAAEAC((uint64_t)a4))
  {
    v45[0] = sub_216BAB358((uint64_t)a4);
    v32 = sub_216B1E600((uint64_t)v45);
    v33 = sub_216BAED9C(v32);
    v34 = sub_216BA7EA4(v33);
    v35 = sub_216BD9D4C(a1[23], v34);
    sub_216BC1FC0((uint64_t)a4, v35);
  }
  return sub_216BC2518(*a1, v15, v47, a2, (uint64_t)a4, a3, a5);
}

uint64_t sub_216BD9D28(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = 0;
  return sub_216BB50F4(a1, a2, a3, &v4);
}

uint64_t sub_216BD9D4C(uint64_t a1, int a2)
{
  __int16 v2;
  uint64_t result;

  switch(a2)
  {
    case ')':
      result = (*(unsigned __int16 *)(a1 + 12) >> 4) & 3;
      break;
    case '*':
      result = *(_WORD *)(a1 + 12) >> 6;
      break;
    case '+':
      LOBYTE(v2) = *(_BYTE *)(a1 + 13);
      goto LABEL_11;
    case ',':
      result = (*(unsigned __int16 *)(a1 + 12) >> 10) & 3;
      break;
    default:
      if ((a2 - 5) < 2)
      {
        result = (*(unsigned __int16 *)(a1 + 12) >> 2) & 3;
      }
      else if ((a2 - 3) > 1)
      {
        result = 0;
      }
      else
      {
        v2 = *(_WORD *)(a1 + 12);
LABEL_11:
        result = v2 & 3;
      }
      break;
  }
  return result;
}

_DWORD *sub_216BD9DD4(uint64_t *a1, unsigned int a2, int a3, unint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v23 = a5;
  v24 = a4;
  v22 = sub_216BDFA18(a1, a3, (uint64_t *)&v24, (uint64_t *)&v23, a2);
  if (!sub_216B2D76C(&v22))
    return 0;
  if (a3 == 18)
  {
    v21[0] = sub_216BAB358(v23);
    v8 = sub_216B1E600((uint64_t)v21);
    if (sub_216BAEC44(v8))
    {
      sub_216BD9D24(v21);
      if (sub_216BD9D28(v23, a1[25], (uint64_t)v21))
      {
        if (sub_216B2238C((uint64_t)v21))
        {
          sub_216BD433C((uint64_t)a1, a2, 4269, (uint64_t)v20);
          sub_216BC1C8C(v23);
          v19 = v9;
          sub_216B7A280(v20, &v19);
          sub_216B4B3B4(v20);
        }
        if (sub_216B1E520(v21))
        {
          sub_216BD433C((uint64_t)a1, a2, 4142, (uint64_t)v20);
          sub_216BC1C8C(v23);
          v19 = v10;
          sub_216B7A280(v20, &v19);
          sub_216B4B3B4(v20);
        }
      }
      sub_216B91D80(v21);
    }
    v21[0] = sub_216BAB358(v24);
    v11 = sub_216B1E600((uint64_t)v21);
    if (!sub_216BAEC44(v11))
      goto LABEL_25;
    sub_216BD9D24(v21);
    if (!sub_216BD9D28(v24, a1[25], (uint64_t)v21) || !sub_216B1E520(v21))
      goto LABEL_24;
    sub_216BD433C((uint64_t)a1, a2, 4142, (uint64_t)v20);
    v12 = v24;
    goto LABEL_23;
  }
  if ((a3 & 0xFFFFFFFE) != 0xE)
    goto LABEL_25;
  v21[0] = sub_216BAB358(v23);
  v14 = sub_216B1E600((uint64_t)v21);
  if (!sub_216BAEC44(v14))
    goto LABEL_25;
  sub_216BD9D24(v21);
  if (sub_216BD9D28(v23, a1[25], (uint64_t)v21))
  {
    if (sub_216B1E520(v21))
    {
      v15 = (uint64_t)a1;
      v16 = a2;
      v17 = 4293;
LABEL_22:
      sub_216BD433C(v15, v16, v17, (uint64_t)v20);
      v12 = v23;
LABEL_23:
      sub_216BC1C8C(v12);
      v19 = v18;
      sub_216B7A280(v20, &v19);
      sub_216B4B3B4(v20);
      goto LABEL_24;
    }
    if ((unint64_t)sub_216B1FD84(v21) >= 0x20)
    {
      v15 = (uint64_t)a1;
      v16 = a2;
      v17 = 4292;
      goto LABEL_22;
    }
  }
LABEL_24:
  sub_216B91D80(v21);
LABEL_25:
  sub_216BE11E4(a1, (uint64_t *)&v24, (uint64_t *)&v23);
  return sub_216BC2224(*a1, a2, v24, v23, v22, a3);
}

_DWORD *sub_216BDA038(uint64_t *a1, int a2, unsigned int a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a6;
  v32 = a5;
  v30 = sub_216BAB358((uint64_t)a4);
  v29 = sub_216BAB358(a5);
  v12 = sub_216BAB358(a6);
  v28 = v12;
  if (sub_216BD39B8(&v29, v12))
  {
    v13 = sub_216BE0670(a1, a6, v29);
    if (v13)
    {
      v31 = v13;
      sub_216BAB358(v13);
    }
    else
    {
      v14 = sub_216BE0670(a1, a5, v12);
      if (!v14)
      {
        sub_216BD433C((uint64_t)a1, a3, 2424, (uint64_t)v27);
        v20 = sub_216BDF234((uint64_t)v27, (uint64_t)&v29);
        v21 = (_QWORD *)sub_216BDF234(v20, (uint64_t)&v28);
        sub_216BC1C8C(a5);
        v26 = v22;
        v23 = sub_216B7A280(v21, &v26);
        sub_216BC1C8C(a6);
        v25 = v24;
        sub_216B7A280(v23, &v25);
        goto LABEL_10;
      }
      v32 = v14;
      v29 = sub_216BAB358(v14);
    }
  }
  v15 = sub_216B1E600((uint64_t)&v30);
  if (sub_216BB555C(v15))
  {
    v16 = sub_216B1E600((uint64_t)&v30);
    v17 = sub_216BAED9C(v16);
    if (sub_216BA7EA4(v17) == 7)
    {
      sub_216BE11E4(a1, &v32, &v31);
      return sub_216BC228C(*a1, (uint64_t)a4, a2, v32, v31, v29);
    }
  }
  v19 = sub_216B1E4E0(a4);
  sub_216BD433C((uint64_t)a1, v19, 3007, (uint64_t)v27);
  sub_216BDF234((uint64_t)v27, (uint64_t)&v30);
LABEL_10:
  sub_216B4B3B4(v27);
  return 0;
}

uint64_t sub_216BDA1F0(uint64_t *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = a5;
  v17 = sub_216BE0448((uint64_t)a1, a3, a4, (uint64_t)&v18, a2);
  if (!sub_216B2D76C(&v17))
    return 0;
  if (!sub_216BAAF68(a4))
  {
    sub_216BD433C((uint64_t)a1, a2, 3041, (uint64_t)v16);
    sub_216BC1C8C(a4);
    v15 = v12;
    sub_216B7A280(v16, &v15);
    sub_216B4B3B4(v16);
    return 0;
  }
  v9 = sub_216BAAEAC(a4);
  LODWORD(v16[0]) = v9;
  v10 = sub_216BAAEAC(v18);
  LODWORD(v15) = v10;
  if (a3 == 4)
  {
    v11 = v9;
  }
  else
  {
    v14 = (int *)sub_216B21E8C(v16, &v15);
    v10 = v15;
    v11 = *v14;
    v9 = LODWORD(v16[0]);
  }
  if (v10 != v11 && (_DWORD)v9)
  {
    if (v10)
      v18 = sub_216BC2A68(*a1, v9, v18);
    else
      sub_216BC1FC0(v18, v9);
  }
  return sub_216BC204C(*a1, a2, a4, v18, a3, v11);
}

unsigned int *sub_216BDA338(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int *v18;
  uint64_t v20;
  unsigned int v21;
  _DWORD **v22;
  uint64_t *v23;
  _DWORD **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int **v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE v37[16];
  _BYTE v38[16];
  uint64_t v39[2];
  uint64_t v40[2];
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;

  v42 = a4;
  v43 = a5;
  sub_216BD4510(v41, a3);
  v10 = (uint64_t *)sub_216BD7C50((uint64_t)v41);
  v11 = sub_216BDA5E8((uint64_t)v41);
  if (v10 == (uint64_t *)v11)
    goto LABEL_6;
  v12 = (uint64_t *)v11;
  while (1)
  {
    v13 = (_WORD *)sub_216B3DB48(*v10);
    v14 = sub_216B1E67C((uint64_t)&v42);
    if (v14 == sub_216BA82B0(v13 + 8))
    {
      v15 = sub_216B262E0((uint64_t)(v13 + 8));
      v16 = sub_216BA8258((uint64_t)(v13 + 8));
      sub_216BC0E28(v40, v15, v16);
      if ((sub_216BDA5F0(v40[0], v40[1], v42, v43) & 1) != 0)
        break;
    }
    if (++v10 == v12)
      goto LABEL_6;
  }
  if (!v13)
  {
LABEL_6:
    sub_216BD433C((uint64_t)a1, a2, 2703, (uint64_t)v39);
    sub_216B89E58(v39, a3);
    v17 = v39;
    goto LABEL_7;
  }
  if (sub_216B1E67C((uint64_t)&v42))
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = (_DWORD **)sub_216BA9B1C((uint64_t)(v13 + 8), v21);
      if (sub_216BC276C(*v22))
      {
        v23 = (uint64_t *)sub_216BDA698((uint64_t)&v42, v20);
        if (sub_216BAAF68(*v23) != 1)
          break;
      }
      v20 = ++v21;
      if (sub_216B1E67C((uint64_t)&v42) <= (unint64_t)v21)
        goto LABEL_16;
    }
    v31 = (unsigned int **)sub_216BDA698((uint64_t)&v42, v20);
    v32 = sub_216B1E4E0(*v31);
    sub_216BD433C((uint64_t)a1, v32, 2121, (uint64_t)v38);
    sub_216B4B3B4(v38);
    v33 = (uint64_t *)sub_216BDA698((uint64_t)&v42, v20);
    v34 = sub_216BC21B4(*v33);
    v18 = (unsigned int *)v34;
    if (v34)
    {
      v35 = sub_216B2037C(v34);
      if (sub_216BAAF68(v35) != 1)
        goto LABEL_8;
      v36 = sub_216B1E4E0(v18);
      sub_216BD433C((uint64_t)a1, v36, 3797, (uint64_t)v37);
      v17 = (uint64_t *)v37;
LABEL_7:
      sub_216B4B3B4(v17);
LABEL_8:
      v18 = 0;
    }
  }
  else
  {
LABEL_16:
    v24 = (_DWORD **)sub_216B262E0((uint64_t)(v13 + 8));
    v25 = (uint64_t *)sub_216BAEDA0(&v42);
    v26 = sub_216BDA6BC((uint64_t)&v42);
    if (v25 != (uint64_t *)v26)
    {
      v27 = (uint64_t *)v26;
      do
      {
        v28 = sub_216BA8228(*v24);
        if ((_DWORD)v28)
          sub_216BE0F4C(a1, v25, v28);
        ++v24;
        ++v25;
      }
      while (v25 != v27);
    }
    v18 = (unsigned int *)sub_216BC25F8(*a1, v13, a2, v42, v43, a6);
    v29 = a1[24];
    if (v29)
    {
      v39[0] = sub_216BD454C(v29);
      v30 = sub_216BD4830((uint64_t)(a1 + 57), v39);
      sub_216BDA6EC(v30, (uint64_t)v18, a1 + 2);
    }
  }
  sub_216BD4548(v41);
  return v18;
}

uint64_t sub_216BDA5E8(uint64_t a1)
{
  return sub_216BD4884((unsigned __int8 *)(a1 + 8));
}

uint64_t sub_216BDA5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  v13[0] = a3;
  v13[1] = a4;
  if (!sub_216B1E67C((uint64_t)v14))
    return 1;
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = (uint64_t *)sub_216B212F0(v14, v4);
    v12 = sub_216B2037C(*v6);
    v7 = (uint64_t *)sub_216B212F0(v13, v4);
    v8 = sub_216BAB358(*v7);
    v9 = sub_216BD39B8(&v12, v8);
    if (v9)
      break;
    v4 = v5;
  }
  while (sub_216B1E67C((uint64_t)v14) > (unint64_t)v5++);
  return v9 ^ 1u;
}

uint64_t sub_216BDA698(uint64_t a1, uint64_t a2)
{
  return sub_216B262E0(a1) + 8 * a2;
}

uint64_t sub_216BDA6BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216B1E67C(a1);
}

uint64_t sub_216BDA6EC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  sub_216BDB224((uint64_t)&v12, (uint64_t)a3);
  if (sub_216BD5344(a1, v5))
  {
    sub_216BD5254(a1, &v13);
  }
  else
  {
    v11 = sub_216BD829C((unsigned __int8 *)a1);
    if (v11)
    {
      sub_216BDB228(a1, a3);
      v8 = (_QWORD *)sub_216BA9CCC(a1, v7);
      sub_216BDB28C(v8, &v11, &v12);
    }
    v9 = (_QWORD *)sub_216BA9CCC(a1, v6);
    sub_216BDB28C(v9, &v13, &v12);
  }
  return sub_216BDB2E0(&v12);
}

void sub_216BDA78C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE *v15;
  uint64_t *v16;
  _BYTE *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE v30[16];
  _BYTE v31[16];
  const void *v32[2];
  uint64_t v33[2];
  _BYTE v34[16];
  _BYTE v35[8];
  int v36;
  _BYTE v37[8];
  int v38;
  _BYTE v39[8];
  int v40;
  _BYTE v41[8];
  int v42;
  _BYTE v43[8];
  const void *v44[2];
  uint64_t v45[2];
  uint64_t v46[2];
  const void *v47[2];
  std::string v48;
  const void *v49[2];
  _QWORD v50[2];
  _BYTE v51[16];
  _QWORD v52[2];

  v52[0] = a3;
  v52[1] = a4;
  if (!*(_QWORD *)sub_216BDA698((uint64_t)v52, 0)
    || (v6 = sub_216BDA698((uint64_t)v52, 0), (sub_216BAB708(v6) & 1) == 0))
  {
    sub_216BD433C(a1, a2, 1758, (uint64_t)v51);
    v17 = v51;
    goto LABEL_8;
  }
  v7 = (uint64_t *)sub_216BDA698((uint64_t)v52, 0);
  v8 = sub_216B3DB48(*v7);
  v9 = sub_216B1E67C(v8);
  v50[0] = sub_216BA6A7C(v9);
  v50[1] = v10;
  sub_216B1E678((int)v49, "type_is_");
  if (sub_216B2A2EC((uint64_t)v50, v49[0], (size_t)v49[1]))
  {
    v11 = sub_216B3A5FC(v50, 8uLL);
    v13 = v12;
    sub_216B25034(&v48);
    v14 = (uint64_t *)sub_216BDA698((uint64_t)v52, 1);
    v46[0] = sub_216BAB358(*v14);
    v15 = (_BYTE *)sub_216B1E600((uint64_t)v46);
    sub_216BD2A64(v15, (uint64_t)&v48);
    sub_216B26CA0(v47, &v48);
    if (sub_216B2B2F0(v11, v13, v47[0], (size_t)v47[1]))
    {
      sub_216BD433C(a1, a2, 1757, (uint64_t)v46);
      v16 = sub_216B4B340(v46, v11, v13);
      sub_216B26CA0(v45, &v48);
      sub_216B4B340(v16, v45[0], v45[1]);
      sub_216B4B3B4(v46);
    }
    std::string::~string(&v48);
    return;
  }
  sub_216B1E678((int)v44, "precision_is_");
  if (!sub_216B2A2EC((uint64_t)v50, v44[0], (size_t)v44[1]))
  {
    sub_216B1E678((int)v32, "sa_failed");
    if (sub_216B2A2EC((uint64_t)v50, v32[0], (size_t)v32[1]))
    {
      if (!*(_QWORD *)sub_216BDA698((uint64_t)v52, 1))
        return;
      sub_216BD433C(a1, a2, 1756, (uint64_t)v31);
      v17 = v31;
    }
    else
    {
      sub_216BD433C(a1, a2, 1758, (uint64_t)v30);
      v17 = v30;
    }
LABEL_8:
    sub_216B4B3B4(v17);
    return;
  }
  v18 = (uint64_t *)sub_216BDA698((uint64_t)v52, 1);
  v19 = sub_216BAAEAC(*v18);
  v20 = sub_216B3A5FC(v50, 0xDuLL);
  v22 = v21;
  sub_216B32854(&v48, v20, v21);
  v42 = 1;
  sub_216BDAB80((uint64_t)v46, &v42);
  v23 = sub_216B32A18((uint64_t)&v48, "lowp", (uint64_t)v46);
  v40 = 2;
  sub_216BDAB80((uint64_t)v41, &v40);
  v24 = sub_216B32858(v23, "mediump", (uint64_t)v41);
  v38 = 3;
  sub_216BDAB80((uint64_t)v39, &v38);
  v25 = sub_216B32938(v24, (uint64_t)"highp", (uint64_t)v39);
  v36 = 0;
  sub_216BDAB80((uint64_t)v37, &v36);
  v26 = sub_216B329A8(v25, (unsigned __int16 *)"nop", (uint64_t)v37);
  sub_216BDAB98((uint64_t)v35);
  sub_216BDAB84(v26, (uint64_t)v35, (uint64_t)v43);
  sub_216BDAB9C(v35);
  sub_216BDAB9C(v37);
  sub_216BDAB9C(v39);
  sub_216BDAB9C(v41);
  sub_216BDAB9C(v46);
  if ((sub_216B9E3DC((uint64_t)v43) & 1) != 0)
  {
    if (*(_DWORD *)j_nullsub_1(v43, v27) != v19)
    {
      v28 = sub_216B25034(&v48);
      if (v19 <= 3)
        sub_216B25DEC(v28, off_24D605F30[v19]);
      sub_216BD433C(a1, a2, 1755, (uint64_t)v46);
      v29 = sub_216B4B340(v46, v20, v22);
      sub_216B26CA0(v33, &v48);
      sub_216B4B340(v29, v33[0], v33[1]);
      sub_216B4B3B4(v46);
      std::string::~string(&v48);
    }
  }
  else
  {
    sub_216BD433C(a1, a2, 1758, (uint64_t)v34);
    sub_216B4B3B4(v34);
  }
  sub_216BDAB9C(v43);
}

uint64_t sub_216BDAB84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_QWORD *)(a1 + 16))
    a2 = *(_QWORD *)(a1 + 16);
  return sub_216BDB4F8(a3, a2);
}

uint64_t sub_216BDABA0(uint64_t *a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  _WORD *v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t *v21;
  char v22;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a5;
  v54 = a6;
  v11 = (_WORD *)sub_216BAE264(*a1, a4);
  if (!sub_216BD7A28(v11))
  {
    sub_216BD7A2C(v11);
    v19 = sub_216BDAF64(v11);
    v20 = v19;
    v51 = sub_216BE314C(a1, v19, a5, a6, a2);
    if (sub_216B2D76C(&v51))
    {
      v21 = (uint64_t *)sub_216BAEDA0(&v53);
      v22 = sub_216BAAEAC(*v21);
      return sub_216BC28A4(*a1, v20, v51, v22, a2, v53, v54, a3);
    }
    return 0;
  }
  v52 = sub_216BDAF0C(v11);
  v51 = sub_216BE353C(a1, (uint64_t)&v52, a5, a6, a2);
  if (!sub_216B2D76C(&v51))
    return 0;
  v12 = 3;
  switch(v52)
  {
    case '.':
    case '0':
      goto LABEL_31;
    case '/':
    case '1':
      v13 = (uint64_t *)sub_216BDA698((uint64_t)&v53, 0);
      sub_216BE0F4C(a1, v13, 3);
      v14 = *a1;
      v15 = v52;
      v16 = v51;
      sub_216B6E0CC(v49, (uint64_t)v13);
      v17 = v49[0];
      v18 = v49[1];
      goto LABEL_11;
    case '2':
      v24 = (uint64_t *)sub_216BDA698((uint64_t)&v53, 0);
      sub_216BE0F4C(a1, v24, 2);
      v14 = *a1;
      v15 = v52;
      v16 = v51;
      sub_216B6E0CC(v48, (uint64_t)v24);
      v17 = v48[0];
      v18 = v48[1];
LABEL_11:
      v25 = a3;
      v26 = v14;
      v27 = v15;
      v28 = v16;
      v12 = 3;
      return sub_216BC27AC(v26, v27, v28, v12, a2, v17, v18, v25);
    case '3':
      v29 = (uint64_t *)sub_216BDA698((uint64_t)&v53, 0);
      sub_216BE0F4C(a1, v29, 3);
      v30 = *a1;
      v31 = v52;
      v32 = v51;
      sub_216B6E0CC(v47, (uint64_t)v29);
      v17 = v47[0];
      v18 = v47[1];
      v25 = a3;
      v26 = v30;
      v27 = v31;
      v28 = v32;
      v12 = 2;
      return sub_216BC27AC(v26, v27, v28, v12, a2, v17, v18, v25);
    default:
      if (v52 == 74)
      {
        sub_216BDA78C((uint64_t)a1, a2, v53, v54);
        return 0;
      }
      v33 = sub_216BE0EB8(v53, v54);
      if ((_DWORD)v33)
        goto LABEL_14;
      v39 = (uint64_t *)sub_216BAEDA0(&v53);
      v40 = sub_216BDA6BC((uint64_t)&v53);
      if (v39 == (uint64_t *)v40)
        goto LABEL_24;
      v41 = (uint64_t *)v40;
      break;
  }
  while (1)
  {
    v42 = *v39;
    v50 = sub_216BAB358(*v39);
    v43 = sub_216B1E600((uint64_t)&v50);
    if (sub_216BD2FB4(v43))
      break;
    if (++v39 == v41)
    {
LABEL_24:
      v38 = 0;
      LOBYTE(v33) = 0;
      goto LABEL_25;
    }
  }
  v46 = sub_216BAB358(v42);
  v33 = sub_216BDAF10((uint64_t)a1, v46);
  if ((_DWORD)v33)
  {
LABEL_14:
    v34 = (uint64_t *)sub_216BAEDA0(&v53);
    v35 = sub_216BDA6BC((uint64_t)&v53);
    if (v34 != (uint64_t *)v35)
    {
      v36 = (uint64_t *)v35;
      do
      {
        v50 = sub_216BAB358(*v34);
        v37 = sub_216B1E600((uint64_t)&v50);
        if (sub_216BD2FB4(v37))
          sub_216BE0F4C(a1, v34, v33);
        ++v34;
      }
      while (v34 != v36);
    }
    v38 = 1;
  }
  else
  {
    v38 = 0;
  }
LABEL_25:
  v44 = sub_216B1E600((uint64_t)&v51);
  v45 = sub_216BD2FB4(v44);
  if (v45)
    v12 = v33;
  else
    v12 = 0;
  if ((v38 & 1) == 0)
  {
    if (v45)
      v12 = sub_216BDAF10((uint64_t)a1, v51);
  }
LABEL_31:
  v26 = *a1;
  v27 = v52;
  v28 = v51;
  v25 = a3;
  v17 = v53;
  v18 = v54;
  return sub_216BC27AC(v26, v27, v28, v12, a2, v17, v18, v25);
}

uint64_t sub_216BDAF10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v3 = sub_216B1E600((uint64_t)&v9);
  v8 = sub_216BD2CD0(v3);
  v4 = sub_216B1E600((uint64_t)&v8);
  v5 = sub_216BAED9C(v4);
  v6 = sub_216BA7EA4(v5);
  return sub_216BD9D4C(*(_QWORD *)(a1 + 184), v6);
}

BOOL sub_216BDAF68(_DWORD *a1)
{
  return (*a1 & 0x1F000) != 0;
}

BOOL sub_216BDAF78(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 2) & 0x7E) != 0;
}

_DWORD *sub_216BDAF88(_DWORD *a1)
{
  _DWORD *result;

  result = sub_216B24F98(a1);
  *((_BYTE *)result + 16) = 0;
  return result;
}

uint64_t sub_216BDAFA0(_DWORD *a1)
{
  return *a1 & 0x7F;
}

uint64_t sub_216BDAFAC(_DWORD *a1)
{
  return (*a1 >> 7) & 0x1F;
}

uint64_t sub_216BDAFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BDAFE4(&v3);
}

uint64_t sub_216BDAFE4(_QWORD *a1)
{
  return sub_216BDAFEC(*a1);
}

BOOL sub_216BDAFF4(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 1;
}

uint64_t sub_216BDB010(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BDB038(&v3);
}

uint64_t sub_216BDB038(_QWORD *a1)
{
  return sub_216BDB040(*a1);
}

BOOL sub_216BDB048(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 9;
}

_DWORD *sub_216BDB064(_DWORD *a1, uint64_t a2, int a3, char a4)
{
  return sub_216BDB06C(a1, a2, a3, a4);
}

_DWORD *sub_216BDB06C(_DWORD *a1, uint64_t a2, int a3, char a4)
{
  _DWORD *result;

  result = sub_216BC2D88(a1, 2, 0, 0, a3);
  *((_QWORD *)result + 1) = a2;
  *((_BYTE *)result + 16) = a4;
  return result;
}

uint64_t sub_216BDB0AC()
{
  return sub_216B2112C();
}

_DWORD *sub_216BDB0B4(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_216BDB0BC(a1, a2, a3, a4);
}

_DWORD *sub_216BDB0BC(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;

  v7 = sub_216BC2D88(a1, 4, 0, 0, a3);
  *((_QWORD *)v7 + 1) = a2;
  sub_216B1D8F0(v7 + 4, a4);
  return a1;
}

_DWORD *sub_216BDB110(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_216BDB118(a1, a2, a3, a4);
}

_DWORD *sub_216BDB118(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;

  v7 = sub_216BC2D88(a1, 3, 0, 0, a3);
  *((_QWORD *)v7 + 1) = a2;
  sub_216B1D8F0(v7 + 4, a4);
  return a1;
}

_DWORD *sub_216BDB16C(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_216BDB174(a1, a2, a3, a4);
}

_DWORD *sub_216BDB174(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;

  v7 = sub_216BC2D88(a1, 0, 0, 0, a3);
  *((_QWORD *)v7 + 1) = a2;
  sub_216B1E51C(v7 + 4, a4);
  return a1;
}

_DWORD *sub_216BDB1C8(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_216BDB1D0(a1, a2, a3, a4);
}

_DWORD *sub_216BDB1D0(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v7;

  v7 = sub_216BC2D88(a1, 1, 0, 0, a3);
  *((_QWORD *)v7 + 1) = a2;
  sub_216B1E51C(v7 + 4, a4);
  return a1;
}

uint64_t sub_216BDB228(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[8];

  sub_216BDB224((uint64_t)v7, (uint64_t)a2);
  v4 = sub_216B2663C(a2, 24, 8uLL);
  v6 = sub_216BDB348(v4, v7, 8);
  sub_216BDB34C(a1, &v6);
  return sub_216BDB2E0(v7);
}

_QWORD *sub_216BDB28C(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = result;
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= result[2])
  {
    result = sub_216BDB3D4((const void **)result, a3, 1uLL);
    v5 = (_QWORD *)v4[1];
  }
  *v5 = *a2;
  v4[1] += 8;
  return result;
}

uint64_t sub_216BDB2E4(uint64_t a1, uint64_t a2)
{
  return sub_216BDB2EC(a1, a2, 0);
}

uint64_t *sub_216BDB2F0(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  sub_216BDB314(a1, a2, a3);
  return a1;
}

uint64_t sub_216BDB314(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = nullsub_1(a2, a2);
  *a1 = result | (2 * a3);
  return result;
}

uint64_t *sub_216BDB34C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = nullsub_1(*a2, a2);
  sub_216B85668(a1, v3, 1);
  return a1;
}

uint64_t sub_216BDB384(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_216BDB3B0((const void **)a1, a2, a3);
  return a1;
}

const void **sub_216BDB3B0(const void **result, _QWORD *a2, unsigned int a3)
{
  if (((unint64_t)((_BYTE *)result[2] - (_BYTE *)*result) >> 3) < a3)
    return (const void **)sub_216BDB3D4(result, a2, a3);
  return result;
}

void *sub_216BDB3D4(const void **a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *result;

  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  v8 = sub_216B2E220(a1);
  if (v6 >> 2 > a3)
    a3 = v6 >> 2;
  v9 = sub_216B6EFA4(a2, v7);
  v10 = (char *)sub_216B900E8(v9, a3);
  result = memcpy(v10, *a1, 8 * v8);
  *a1 = v10;
  a1[1] = &v10[8 * v8];
  a1[2] = &v10[8 * a3];
  return result;
}

_QWORD *sub_216BDB458(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (sub_216BD8168(a1))
  {
    v3 = sub_216B5F264(a1, v2);
    if (v3)
    {
      v4 = (void *)sub_216B3A034(v3);
      j__free(v4);
    }
  }
  return a1;
}

uint64_t sub_216BDB494(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(result + 4) = 1;
  *(_DWORD *)result = *a2;
  return result;
}

uint64_t sub_216BDB4A8(uint64_t a1, uint64_t a2)
{
  sub_216BDB4CC(a1, a2);
  return a1;
}

uint64_t sub_216BDB4CC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 4))
  {
    v2 = result;
    result = j_nullsub_1(result, a2);
    *(_BYTE *)(v2 + 4) = 0;
  }
  return result;
}

uint64_t sub_216BDB4FC(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(unsigned __int8 *)(a2 + 4);
  *(_BYTE *)(a1 + 4) = v3;
  if (v3)
    *(_DWORD *)a1 = *(_DWORD *)j_nullsub_1(a2, a2);
  return a1;
}

uint64_t sub_216BDB538(uint64_t result)
{
  *(_BYTE *)(result + 4) = 0;
  return result;
}

uint64_t sub_216BDB540(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v17[2];

  v10 = sub_216BA2994(a1[1]);
  v11 = sub_216BAE264(*a1, a2);
  v12 = sub_216B1E67C((uint64_t)a1);
  v13 = sub_216BAE310(v11, v12);
  if ((v13 & 1) == 0)
  {
    sub_216BD433C((uint64_t)a1, a5, 3183, (uint64_t)v17);
    v14 = sub_216B4B340(v17, a3, a4);
    v15 = sub_216BA3A0C(v10);
    sub_216B7A71C(v14, v15);
    sub_216B4B3B4(v17);
  }
  return v13;
}

BOOL sub_216BDB604(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _BOOL8 v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14[2];

  v9 = sub_216BA3084(*(_QWORD *)(a1 + 8), a2);
  if (!v9)
  {
    sub_216BD433C(a1, a5, 2222, (uint64_t)v14);
    v10 = sub_216B4B340(v14, a3, a4);
    v11 = sub_216BA2994(*(_QWORD *)(a1 + 8));
    v12 = sub_216BA3A0C(v11);
    sub_216B7A71C(v10, v12);
    sub_216B4B3B4(v14);
  }
  return v9;
}

uint64_t sub_216BDB6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  _DWORD *v24[12];

  v24[11] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v23 = a2;
  result = sub_216BA7D08(a2);
  if ((_DWORD)result)
  {
    v7 = sub_216BDB8D0(a1, a2);
    if (sub_216BD5F30(a1))
    {
      sub_216BD4510(v24, v7);
      v8 = sub_216BD689C(v24);
      sub_216BD4548(v24);
      if (v8)
      {
        v9 = sub_216B693F8(a2);
        sub_216BD433C(a1, v9, 2789, (uint64_t)v24);
        sub_216B89E58((uint64_t *)v24, v7);
        sub_216B4B3B4(v24);
      }
    }
    sub_216BDB934(a3, a2);
    sub_216BD4510(v22, v7);
    if (sub_216BA9DCC(&v23)
      && sub_216BD7AB0((uint64_t)v22, v10)
      && ((v11 = sub_216BD6DAC((uint64_t)v22), !sub_216BD55D8(a3, v11))
       || (v12 = (uint64_t *)sub_216BD7C50((uint64_t)v22), !sub_216BD55D8(a3, *v12))))
    {
      sub_216BAC9C0(v24);
      v13 = (uint64_t *)sub_216BD7C50((uint64_t)v22);
      v14 = sub_216BDA5E8((uint64_t)v22);
      if (v13 != (uint64_t *)v14)
      {
        v16 = (uint64_t *)v14;
        while (sub_216BD55D8(a3, *v13))
        {
          sub_216B268AC((uint64_t)v24, v13++);
          if (v13 == v16)
            goto LABEL_17;
        }
        sub_216B268AC((uint64_t)v24, &v23);
        sub_216BDB998((const void **)v24, v13, v16);
      }
LABEL_17:
      while (sub_216BD7AB0((uint64_t)v22, v15))
        sub_216BDBA38((uint64_t)v22);
      v17 = (uint64_t *)sub_216B1E600((uint64_t)v24);
      v18 = sub_216B1E67C((uint64_t)v24);
      if (v17 != (uint64_t *)v18)
      {
        v19 = (uint64_t *)v18;
        v20 = (uint64_t *)(a1 + 16);
        do
        {
          v21 = *v17++;
          sub_216BDB93C(v22, v21, v20);
        }
        while (v17 != v19);
      }
      sub_216B1FF6C(v24);
    }
    else
    {
      sub_216BDB93C(v22, v23, (uint64_t *)(a1 + 16));
    }
    return sub_216BD4548(v22);
  }
  return result;
}

uint64_t sub_216BDB8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!sub_216BA7D08(a2))
    return 0;
  v4 = sub_216BDBC28(*(_QWORD *)(a1 + 160));
  v5 = sub_216BA6A7C(a2);
  return sub_216B4AAC4(v4, v5, v6);
}

uint64_t sub_216BDB934(uint64_t a1, uint64_t a2)
{
  return sub_216BD53FC(a1 + 40, a2);
}

uint64_t sub_216BDB93C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = (uint64_t)(a1 + 1);
  v7 = a1[1];
  sub_216BDA6EC(a1 + 1, a2, a3);
  v5 = sub_216B262E0(v4);
  result = sub_216B262E0((uint64_t)&v7);
  if (v5 != result)
    return sub_216BD4E18(a1);
  return result;
}

uint64_t sub_216BDB998(const void **a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_216B2F408((uint64_t)a2, (uint64_t)a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > (v7 - sub_216B1E67C((uint64_t)a1)) >> 3)
  {
    v8 = sub_216B26878((uint64_t)a1);
    sub_216B26908(a1, v8 + v6);
  }
  v9 = (_QWORD *)sub_216B1E67C((uint64_t)a1);
  sub_216BDCC38(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + 8 * v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t *sub_216BDBA38(uint64_t a1)
{
  return sub_216BDCB5C((uint64_t *)(a1 + 8));
}

uint64_t sub_216BDBA40(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  result = sub_216BA7D08(a2);
  if ((_DWORD)result)
  {
    result = sub_216BDB8D0(a1, a2);
    if (result)
    {
      sub_216BD4510(v7, result);
      if ((sub_216BD6DA4((uint64_t)v7, v5) & 1) == 0 && sub_216BD6DAC((uint64_t)v7) == a2)
        sub_216BDBA38((uint64_t)v7);
      if (sub_216BD6DA4((uint64_t)v7, v6))
        sub_216BD4514(v7);
      return sub_216BD4548(v7);
    }
  }
  return result;
}

uint64_t sub_216BDBAD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v19[2];
  _QWORD v20[2];
  const void *v21[2];
  _QWORD v22[2];
  const void *v23[2];
  _QWORD v24[2];
  _BYTE v25[16];

  v4 = sub_216BD4510(v25, a2);
  if ((sub_216BD6DA4(v4, v5) & 1) != 0)
  {
    v6 = sub_216B1E67C((uint64_t)a1);
    if (!sub_216BDBC14(v6))
      goto LABEL_9;
    v24[0] = sub_216B4A11C(a2);
    v24[1] = v7;
    sub_216B1E678((int)v23, "type_is_");
    if (!sub_216B2A2EC((uint64_t)v24, v23[0], (size_t)v23[1]))
    {
      v22[0] = sub_216B4A11C(a2);
      v22[1] = v8;
      sub_216B1E678((int)v21, "precision_is_");
      if (!sub_216B2A2EC((uint64_t)v22, v21[0], (size_t)v21[1]))
      {
        v20[0] = sub_216B4A11C(a2);
        v20[1] = v9;
        sub_216B1E678((int)v19, "sa_failed");
        if (!sub_216B2A2EC((uint64_t)v20, v19[0], (size_t)v19[1]))
        {
LABEL_9:
          v17 = 0;
          goto LABEL_10;
        }
      }
    }
    sub_216B4AED0(v24);
    v10 = *a1;
    v11 = v24[0];
    v12 = sub_216B4A11C(a2);
    v14 = v13;
    sub_216BD3484(*a1, 2);
    v16 = (uint64_t)sub_216BC0444(v10, v11, v12, v14, v15);
  }
  else
  {
    v16 = sub_216BD6DAC((uint64_t)v25);
  }
  v17 = v16;
LABEL_10:
  sub_216BD4548(v25);
  return v17;
}

BOOL sub_216BDBC14(uint64_t a1)
{
  _WORD *v1;

  v1 = (_WORD *)sub_216BDCBB4(a1);
  return sub_216BA2FF8(v1);
}

uint64_t sub_216BDBC28(uint64_t a1)
{
  return a1 + 440;
}

uint64_t sub_216BDBC30(uint64_t a1)
{
  uint64_t v2;

  if (a1)
    return sub_216B4A11C(a1);
  sub_216B1E678((int)&v2, &byte_216C19659);
  return v2;
}

uint64_t sub_216BDBC68(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = (unsigned __int8 *)sub_216BDBD04(a2);
  if (v4)
  {
    v5 = sub_216BAB580(v4);
    sub_216BDBD3C(&v10, v5);
  }
  else
  {
    v6 = sub_216BD44D8(a2);
    if (v6)
    {
      v7 = sub_216BDB8D0(a1, v6);
      sub_216BDBD40((uint64_t)&v10, v7, 1);
    }
    else
    {
      v8 = sub_216BD5F44(a2);
      if (v8 || (v8 = sub_216BD8C0C(a2)) != 0)
        sub_216BDBD44((uint64_t)&v10, v8);
    }
  }
  return v10;
}

uint64_t sub_216BDBD04(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BDCCC8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BDBD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7[2];
  uint64_t v8[2];
  uint64_t v9[2];
  uint64_t v10[2];
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18[2];
  uint64_t v19[2];
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  uint64_t v25[2];
  uint64_t v26[2];
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  uint64_t v30[2];
  uint64_t v31[2];
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[2];
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  uint64_t v42[2];
  uint64_t v43[2];
  uint64_t v44[2];
  uint64_t v45[2];
  uint64_t v46[2];
  uint64_t v47[2];
  uint64_t v48[2];
  uint64_t v49[2];
  _QWORD v50[4];
  unsigned int v51;
  _QWORD v52[2];

  v52[0] = a2;
  v52[1] = a3;
  v51 = sub_216B1E67C((uint64_t)v52);
  v50[0] = v52;
  v50[1] = &v51;
  v50[2] = a4;
  v50[3] = a1;
  sub_216B1E678((int)v49, "void");
  sub_216BDC300((uint64_t)v50, v49[0], v49[1], 2);
  sub_216B1E678((int)v48, "float");
  sub_216BDC300((uint64_t)v50, v48[0], v48[1], 3);
  sub_216B1E678((int)v47, "half");
  sub_216BDC300((uint64_t)v50, v47[0], v47[1], 4);
  sub_216B1E678((int)v46, "int");
  sub_216BDC300((uint64_t)v50, v46[0], v46[1], 5);
  sub_216B1E678((int)v45, "uint");
  sub_216BDC300((uint64_t)v50, v45[0], v45[1], 6);
  sub_216B1E678((int)v44, "BOOL");
  sub_216BDC300((uint64_t)v50, v44[0], v44[1], 7);
  sub_216B1E678((int)v43, "vec2");
  sub_216BDC300((uint64_t)v50, v43[0], v43[1], 8);
  sub_216B1E678((int)v42, "vec3");
  sub_216BDC300((uint64_t)v50, v42[0], v42[1], 9);
  sub_216B1E678((int)v41, "vec4");
  sub_216BDC300((uint64_t)v50, v41[0], v41[1], 10);
  sub_216B1E678((int)v40, "hvec2");
  sub_216BDC300((uint64_t)v50, v40[0], v40[1], 11);
  sub_216B1E678((int)v39, "hvec3");
  sub_216BDC300((uint64_t)v50, v39[0], v39[1], 12);
  sub_216B1E678((int)v38, "hvec4");
  sub_216BDC300((uint64_t)v50, v38[0], v38[1], 13);
  sub_216B1E678((int)v37, "ivec2");
  sub_216BDC300((uint64_t)v50, v37[0], v37[1], 14);
  sub_216B1E678((int)v36, "ivec3");
  sub_216BDC300((uint64_t)v50, v36[0], v36[1], 15);
  sub_216B1E678((int)v35, "ivec4");
  sub_216BDC300((uint64_t)v50, v35[0], v35[1], 16);
  sub_216B1E678((int)v34, "uvec2");
  sub_216BDC300((uint64_t)v50, v34[0], v34[1], 17);
  sub_216B1E678((int)v33, "uvec3");
  sub_216BDC300((uint64_t)v50, v33[0], v33[1], 18);
  sub_216B1E678((int)v32, "uvec4");
  sub_216BDC300((uint64_t)v50, v32[0], v32[1], 19);
  sub_216B1E678((int)v31, "bvec2");
  sub_216BDC300((uint64_t)v50, v31[0], v31[1], 20);
  sub_216B1E678((int)v30, "bvec3");
  sub_216BDC300((uint64_t)v50, v30[0], v30[1], 21);
  sub_216B1E678((int)v29, "bvec4");
  sub_216BDC300((uint64_t)v50, v29[0], v29[1], 22);
  sub_216B1E678((int)v28, "mat2");
  sub_216BDC300((uint64_t)v50, v28[0], v28[1], 23);
  sub_216B1E678((int)v27, "mat3");
  sub_216BDC300((uint64_t)v50, v27[0], v27[1], 24);
  sub_216B1E678((int)v26, "mat4");
  sub_216BDC300((uint64_t)v50, v26[0], v26[1], 25);
  sub_216B1E678((int)v25, "mat2x3");
  sub_216BDC300((uint64_t)v50, v25[0], v25[1], 26);
  sub_216B1E678((int)v24, "mat2x4");
  sub_216BDC300((uint64_t)v50, v24[0], v24[1], 27);
  sub_216B1E678((int)v23, "mat3x2");
  sub_216BDC300((uint64_t)v50, v23[0], v23[1], 28);
  sub_216B1E678((int)v22, "mat3x4");
  sub_216BDC300((uint64_t)v50, v22[0], v22[1], 29);
  sub_216B1E678((int)v21, "mat4x2");
  sub_216BDC300((uint64_t)v50, v21[0], v21[1], 30);
  sub_216B1E678((int)v20, "mat4x3");
  sub_216BDC300((uint64_t)v50, v20[0], v20[1], 31);
  sub_216B1E678((int)v19, "hmat2");
  sub_216BDC300((uint64_t)v50, v19[0], v19[1], 32);
  sub_216B1E678((int)v18, "hmat3");
  sub_216BDC300((uint64_t)v50, v18[0], v18[1], 33);
  sub_216B1E678((int)v17, "hmat4");
  sub_216BDC300((uint64_t)v50, v17[0], v17[1], 34);
  sub_216B1E678((int)v16, "hmat2x3");
  sub_216BDC300((uint64_t)v50, v16[0], v16[1], 35);
  sub_216B1E678((int)v15, "hmat2x4");
  sub_216BDC300((uint64_t)v50, v15[0], v15[1], 36);
  sub_216B1E678((int)v14, "hmat3x2");
  sub_216BDC300((uint64_t)v50, v14[0], v14[1], 37);
  sub_216B1E678((int)v13, "hmat3x4");
  sub_216BDC300((uint64_t)v50, v13[0], v13[1], 38);
  sub_216B1E678((int)v12, "hmat4x2");
  sub_216BDC300((uint64_t)v50, v12[0], v12[1], 39);
  sub_216B1E678((int)v11, "hmat4x3");
  sub_216BDC300((uint64_t)v50, v11[0], v11[1], 40);
  sub_216B1E678((int)v10, "sampler");
  sub_216BDC300((uint64_t)v50, v10[0], v10[1], 41);
  sub_216B1E678((int)v9, "hsampler");
  sub_216BDC300((uint64_t)v50, v9[0], v9[1], 42);
  sub_216B1E678((int)v8, "sampler2D");
  sub_216BDC300((uint64_t)v50, v8[0], v8[1], 43);
  sub_216B1E678((int)v7, "hsampler2D");
  sub_216BDC300((uint64_t)v50, v7[0], v7[1], 44);
  return v51;
}

unint64_t sub_216BDC300(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  unsigned int v7;
  unint64_t result;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = a2;
  v16[1] = a3;
  v6 = *(uint64_t **)(a1 + 24);
  v7 = sub_216B31864(*(_QWORD *)a1, a2, a3, 1, **(_DWORD **)(a1 + 8));
  result = sub_216B1E67C((uint64_t)v16);
  if (v7 <= 5 && result > v7)
  {
    v10 = *(unsigned int **)(a1 + 8);
    if (v7 >= *v10)
    {
      if (v7 != *v10)
        return result;
    }
    else
    {
      *v10 = v7;
      sub_216B20594(*(_QWORD **)(a1 + 16));
    }
    v11 = *(_QWORD *)(a1 + 16);
    sub_216BD3484(*v6, a4);
    v14 = v12;
    v13 = sub_216B1E600((uint64_t)&v14);
    v15 = sub_216BA7ED0(v13);
    return sub_216B268AC(v11, &v15);
  }
  return result;
}

uint64_t sub_216BDC3C4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  std::string::size_type v28;
  unint64_t v29;
  BOOL v30;
  std::string::size_type v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  int v44;
  __int128 *v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  std::string v50;
  uint64_t v51;
  uint64_t v52[2];
  std::string v53;
  std::string v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[16];
  uint64_t v58;
  _BYTE v59[24];
  uint64_t v60;
  _BYTE v61[56];
  _QWORD v62[69];

  v62[67] = *MEMORY[0x24BDAC8D0];
  v62[0] = sub_216B4A11C(a2);
  v62[1] = v8;
  v9 = sub_216B1E67C((uint64_t)v62);
  sub_216BDC840(v62);
  sub_216B2D768(v61);
  if ((*a4 & 1) != 0)
  {
    v10 = sub_216B4A11C(a2);
    v9 = sub_216BDBD48(a1, v10, v11, (uint64_t)v61);
    v12 = (uint64_t *)sub_216B1E600((uint64_t)v61);
    v13 = sub_216B1E67C((uint64_t)v61);
    if (v12 != (uint64_t *)v13)
    {
      v14 = (uint64_t *)v13;
      do
      {
        v15 = *v12++;
        sub_216B20C64(&v60, v15);
        sub_216BDBD3C(&v50, v60);
        v50.__r_.__value_.__r.__words[2] = sub_216BD37EC(v15);
        v51 = v16;
        sub_216BDC844((uint64_t)v62, &v50);
      }
      while (v12 != v14);
    }
  }
  sub_216B9B720(v59, 0);
  v17 = *(_QWORD *)(a1 + 184);
  if (v17)
  {
    v18 = 0;
    while (1)
    {
      v19 = sub_216B4B8D0(v17);
      *(_QWORD *)&v55 = sub_216B938A4(v19);
      *((_QWORD *)&v55 + 1) = v20;
      v54.__r_.__value_.__r.__words[0] = sub_216B938D4(v19);
      v54.__r_.__value_.__l.__size_ = v21;
      if (sub_216B3760C(&v55, &v54))
        break;
LABEL_24:
      v17 = sub_216B1E600(v17);
      ++v18;
      if (!v17)
        goto LABEL_25;
    }
    while (1)
    {
      v23 = sub_216BD44CC((_QWORD **)&v55, v22);
      if (sub_216BA7D08(v23))
      {
        v58 = 0;
        v58 = sub_216BDB8D0(a1, v23);
        v50.__r_.__value_.__r.__words[0] = sub_216B4A11C(a2);
        v50.__r_.__value_.__l.__size_ = v24;
        v25 = sub_216B4A11C(v58);
        v27 = sub_216B31864((uint64_t)&v50, v25, v26, 1, v9);
        v50.__r_.__value_.__r.__words[0] = sub_216B4A11C(v58);
        v50.__r_.__value_.__l.__size_ = v28;
        v29 = sub_216B1E67C((uint64_t)&v50);
        v30 = v27 <= 5 && v29 > v27;
        if (v30 && v27 <= v9)
        {
          sub_216B9C238((uint64_t)v59, &v58, (uint64_t)&v53);
          sub_216B9C2A8((uint64_t)v59, (uint64_t)v57);
          sub_216B4F784(&v50, v57);
          if (!sub_216B50AF4((uint64_t *)&v53, (uint64_t)&v50))
          {
            *(_DWORD *)sub_216B9C148((uint64_t)v59, &v58) = v18;
LABEL_20:
            if (v27 < v9)
            {
              sub_216B36E84(v62);
              v9 = v27;
            }
            v50.__r_.__value_.__r.__words[0] = sub_216BDBC68(a1, v23);
            v50.__r_.__value_.__l.__size_ = v32;
            v50.__r_.__value_.__r.__words[2] = sub_216B4A11C(v58);
            v51 = v33;
            sub_216BDC844((uint64_t)v62, &v50);
            goto LABEL_23;
          }
          if (*(_DWORD *)(sub_216B1E600((uint64_t)&v53) + 8) >= v18)
            goto LABEL_20;
        }
      }
LABEL_23:
      sub_216B93914(&v55);
      if (!sub_216B3760C(&v55, &v54))
        goto LABEL_24;
    }
  }
LABEL_25:
  v34 = (unsigned int *)sub_216B1E600((uint64_t)v62);
  v35 = (unsigned int *)sub_216B1E67C((uint64_t)v62);
  v36 = sub_216BDC8EC(v34, v35, a4);
  v37 = sub_216B1E67C((uint64_t)v62);
  sub_216BDC89C((uint64_t)v62, (uint64_t)v36, v37);
  if (!sub_216B29084(v62)
    && (v38 = sub_216B1E600((uint64_t)v62) + 32,
        v39 = sub_216B1E67C((uint64_t)v62),
        v40 = sub_216BDC988(v38, v39, (uint64_t)v62),
        v40 == sub_216B1E67C((uint64_t)v62)))
  {
    if ((*a4 & 2) != 0)
      v43 = 3108;
    else
      v43 = 3138;
    if ((*a4 & 4) != 0)
      v44 = 3136;
    else
      v44 = v43;
    v45 = (__int128 *)sub_216B262E0((uint64_t)v62);
    v46 = v45[1];
    v55 = *v45;
    v56 = v46;
    sub_216B25018(&v56, (uint64_t)&v53);
    sub_216B2BA64("'", &v53, (uint64_t)&v50);
    sub_216B2B308(&v50, "'", (uint64_t)&v54);
    std::string::~string(&v50);
    std::string::~string(&v53);
    sub_216BD433C(a1, a3, v44, (uint64_t)&v53);
    v47 = sub_216B89E58((uint64_t *)&v53, a2);
    sub_216B26CA0(v52, &v54);
    v48 = sub_216B4B340(v47, v52[0], v52[1]);
    sub_216B848DC(&v49, a3);
    sub_216B8EC8C(v49, v56, *((uint64_t *)&v56 + 1), (uint64_t)&v50);
    sub_216B73938((uint64_t)v48, (uint64_t)&v50);
    sub_216B4C8CC(&v50);
    sub_216B4B3B4(&v53);
    v41 = v55;
    std::string::~string(&v54);
  }
  else
  {
    v41 = sub_216BDC960();
  }
  sub_216B9B958(v59);
  sub_216B1FF6C(v61);
  sub_216BDC9E0(v62);
  return v41;
}

uint64_t sub_216BDC844(uint64_t a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216BDCD5C(a1);
  v4 = (_OWORD *)sub_216B1E67C(a1);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  v6 = sub_216B1E67C(a1) + 32;
  return sub_216B203A4(a1, v6);
}

uint64_t sub_216BDC89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_216B1E67C(a1);
  v7 = sub_216BDCE20(a3, v6, a2);
  sub_216B203A4(a1, v7);
  return a2;
}

unsigned int *sub_216BDC8EC(unsigned int *a1, unsigned int *a2, unsigned __int8 *a3)
{
  unsigned int *v4;
  unsigned int *v5;
  __int128 v7;
  unsigned __int8 *v9;

  v9 = a3;
  v4 = sub_216BDCD70(a1, a2, &v9);
  v5 = v4 + 8;
  if (v4 != a2 && v5 != a2)
  {
    do
    {
      if (!sub_216BDCDC8(&v9, v5))
      {
        v7 = *((_OWORD *)v5 + 1);
        *(_OWORD *)v4 = *(_OWORD *)v5;
        *((_OWORD *)v4 + 1) = v7;
        v4 += 8;
      }
      v5 += 8;
    }
    while (v5 != a2);
  }
  return v4;
}

uint64_t sub_216BDC960()
{
  uint64_t v1;

  sub_216BDCC24((uint64_t)&v1, 0);
  return v1;
}

uint64_t sub_216BDC988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 != a2)
  {
    while (!sub_216BDCF40(&v6, v3))
    {
      v3 += 32;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

uint64_t sub_216BDC9E4(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  _DWORD *v18[2];
  _QWORD v19[2];

  sub_216BD4510(v18, a2);
  if (sub_216BD689C(v18) && sub_216BD6DA4((uint64_t)v18, v8))
  {
    if (sub_216BD6984(v18) == 76)
    {
      v9 = sub_216B1E67C((uint64_t)a1);
      if (!sub_216BDBC14(v9))
        goto LABEL_5;
    }
    else
    {
      v14 = sub_216BD6984(v18);
      v15 = sub_216B4A11C(a2);
      sub_216BDB540(a1, v14, v15, v16, a3);
    }
    v17 = sub_216BD6984(v18);
    sub_216BDCAF8((uint64_t)v19, v17);
    goto LABEL_11;
  }
LABEL_5:
  v10 = sub_216BDBAD0(a1, a2);
  if (v10)
  {
    v11 = sub_216BDBC68((uint64_t)a1, v10);
  }
  else if (sub_216BDCAFC(a4))
  {
    v11 = sub_216BDC3C4((uint64_t)a1, a2, a3, a4);
  }
  else
  {
    v11 = sub_216BDC960();
  }
  v19[0] = v11;
  v19[1] = v12;
LABEL_11:
  sub_216BD4548(v18);
  return v19[0];
}

BOOL sub_216BDCAFC(_BYTE *a1)
{
  return (*a1 & 3) != 0;
}

uint64_t sub_216BDCB0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BDBAD0(a1, a2);
  return sub_216BDCB20(v2);
}

uint64_t sub_216BDCB20(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (result)
  {
    if (sub_216BD8C44(&v1))
      return sub_216B3DB48(v1);
    else
      return 0;
  }
  return result;
}

uint64_t *sub_216BDCB5C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;

  if (sub_216B601E8((unsigned __int8 *)a1))
  {
    v4 = 0;
    return sub_216BD5254(a1, &v4);
  }
  else
  {
    result = (uint64_t *)sub_216BA9CCC(a1, v2);
    if (result)
      return (uint64_t *)sub_216B3FBF4((uint64_t)result);
  }
  return result;
}

uint64_t sub_216BDCBB4(uint64_t a1)
{
  return sub_216BA046C(a1, 0xB3u);
}

uint64_t sub_216BDCBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = sub_216B1E600((uint64_t)&v4);
  return a1;
}

uint64_t sub_216BDCBFC(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  if (a3)
    v3 = 4;
  else
    v3 = 1;
  *(_DWORD *)result = v3;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_216BDCC14(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result = 3;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_216BDCC28(uint64_t result, __int16 a2)
{
  *(_DWORD *)result = 5;
  *(_WORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_216BDCC38(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  sub_216BDCC50(a1, a2, a3);
  return v3;
}

uint64_t sub_216BDCC50(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;

  v7 = a3;
  v8 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      v5 = *v4++;
      *v7++ = v5;
      v8 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v9, &v8, &v7);
  return v9;
}

uint64_t sub_216BDCCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BDCCF4(&v3);
}

uint64_t sub_216BDCCF4(_QWORD *a1)
{
  return sub_216BDCCFC(*a1);
}

BOOL sub_216BDCD04(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) >= 9 && sub_216B8B400(a1) < 0xB;
}

_QWORD *sub_216BDCD50(_QWORD *a1)
{
  return sub_216B2087C(a1, (uint64_t)(a1 + 3), 512);
}

char *sub_216BDCD60(const void **a1)
{
  return sub_216B2CE7C(a1, a1 + 3, 0, 32);
}

unsigned int *sub_216BDCD70(unsigned int *a1, unsigned int *a2, unsigned __int8 **a3)
{
  unsigned int *v3;

  v3 = a1;
  if (a1 != a2)
  {
    while (!sub_216BDCDC8(a3, v3))
    {
      v3 += 8;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

BOOL sub_216BDCDC8(unsigned __int8 **a1, unsigned int *a2)
{
  unsigned int v3;

  v3 = sub_216B1E4E0(a2) - 2;
  return v3 <= 3 && ((**a1 << (8 * v3)) & 0x2020201) == 0;
}

uint64_t sub_216BDCE28()
{
  uint64_t v0;

  sub_216BDCE40();
  return v0;
}

uint64_t sub_216BDCE44(uint64_t a1, uint64_t a2, void *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_216B3AEA8(a1, a2);
  v7 = sub_216BDCEB4(v5, v6, a3);
  v9 = v8;
  v12 = sub_216BDCEB8(a1, v7);
  v11 = sub_216B3557C((uint64_t)a3, v9);
  return sub_216B206E0((uint64_t)&v12, (uint64_t)&v11);
}

uint64_t sub_216BDCEBC(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216BDCF10(__dst, a1, (a2 - (uint64_t)a1) >> 5);
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

void *sub_216BDCF10(void *__dst, const void *a2, uint64_t a3)
{
  if (a3)
    memmove(__dst, a2, 32 * a3);
  return __dst;
}

BOOL sub_216BDCF40(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = sub_216B262E0(*a1);
  return sub_216B2B2F0(v2, v3, *(const void **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_216BDCF70(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5[2];

  result = sub_216B2037C(*(_QWORD *)(a1 + 184));
  if (result)
  {
    sub_216BD433C(a1, a2, 2749, (uint64_t)v5);
    sub_216B77520(v5, 0);
    return sub_216B4B3B4(v5);
  }
  return result;
}

uint64_t sub_216BDCFCC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5[2];

  result = sub_216B2037C(*(_QWORD *)(a1 + 184));
  if (result)
  {
    sub_216BD433C(a1, a2, 2749, (uint64_t)v5);
    sub_216B77520(v5, 1);
    return sub_216B4B3B4(v5);
  }
  return result;
}

_WORD *sub_216BDD028(uint64_t *a1, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE v14[16];
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;

  v16 = sub_216BA5AE4(a1[25]);
  v17 = v6;
  if (sub_216B29094((uint64_t)&v16))
    return sub_216BC0E64(*a1, a3, a2);
  v16 = sub_216BA5AE4(a1[25]);
  v17 = v7;
  v8 = (_QWORD *)sub_216B1E600((uint64_t)&v16);
  v9 = (uint64_t *)sub_216BDD13C(*v8);
  v10 = (unsigned __int16 *)sub_216BDD104(*v9);
  if (!v10)
    return sub_216BC0E64(*a1, a3, a2);
  v11 = (uint64_t)v10;
  if (sub_216BA83A4(v10) != a2)
  {
    sub_216BD433C((uint64_t)a1, a3, 2218, (uint64_t)v15);
    sub_216B4B3B4(v15);
    v12 = sub_216B693F8(v11);
    sub_216BD433C((uint64_t)a1, v12, 3525, (uint64_t)v14);
    sub_216B4B3B4(v14);
  }
  return 0;
}

uint64_t sub_216BDD104(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA9E30(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

unsigned int *sub_216BDD140(uint64_t *a1, unsigned int a2, int a3, unsigned int a4)
{
  char v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];

  v5 = a3;
  if (a2 - 131 > 0x31 || ((1 << (a2 + 125)) & 0x3800000000001) == 0)
  {
    if (a3 == 1)
      v8 = 2221;
    else
      v8 = 4048;
    sub_216BD433C((uint64_t)a1, a4, v8, (uint64_t)v12);
    v9 = sub_216BA15A4(a2);
    sub_216B4B340(v12, v9, v10);
    sub_216B4B3B4(v12);
  }
  return sub_216BC0EA4(*a1, a4, a2, v5);
}

_DWORD *sub_216BDD1F8(uint64_t *a1, int a2)
{
  return sub_216BD2014(*a1, a2);
}

uint64_t sub_216BDD204(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = a3;
  result = sub_216B1E67C((uint64_t)&v5);
  if (result)
    return sub_216BD204C(*a1, v5, v6);
  return result;
}

uint64_t sub_216BDD244(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18;

  v18 = a2;
  if (!a2)
    return 0;
  v3 = *(_QWORD *)a1;
  sub_216B6E0CC(v17, (uint64_t)&v18);
  v4 = sub_216BD204C(v3, v17[0], v17[1]);
  if (sub_216BD5F30(a1))
  {
    v5 = *(uint64_t **)(a1 + 200);
    if (v4)
      v6 = v4 + 8;
    else
      v6 = 0;
    if (*(_BYTE *)(a1 + 168))
      sub_216BDD36C((uint64_t)v5, v6);
    else
      sub_216BDD394(v5, v6);
  }
  v8 = (uint64_t *)sub_216BA5E50(v4 + 8);
  v9 = sub_216BA5E54(v4 + 8);
  if (v8 != (uint64_t *)v9)
  {
    v10 = (uint64_t *)v9;
    do
    {
      v11 = sub_216BD5F44(*v8);
      if (v11)
      {
        v12 = v11;
        if (sub_216B5E12C(v11))
        {
          v13 = sub_216B693F8(v12);
          sub_216BD433C(a1, v13, 4731, (uint64_t)v16);
          v14 = sub_216BA6A7C(v12);
          sub_216B4B340(v16, v14, v15);
          sub_216B4B3B4(v16);
        }
      }
      ++v8;
    }
    while (v8 != v10);
  }
  if (v4)
    return v4 + 8;
  else
    return 0;
}

uint64_t sub_216BDD36C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BD81CC((uint64_t *)(a1 + 24), (uint64_t)&v3);
}

uint64_t sub_216BDD394(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BD81CC(a1, (uint64_t)&v3);
}

uint64_t sub_216BDD3B8(uint64_t a1, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;

  v4 = sub_216B1E600((uint64_t)a2);
  v5 = sub_216B1E67C((uint64_t)a2);
  v16 = 0;
  v6 = sub_216BDD4A8(v4, v5, (uint64_t)&v16);
  v7 = sub_216B26878((uint64_t)a2);
  v8 = sub_216B1E67C((uint64_t)a2);
  v9 = sub_216B2F408((uint64_t)v6, v8);
  sub_216BDD4F0(a2, v7 - v9);
  result = sub_216B26878((uint64_t)a2);
  if (result)
  {
    v11 = *(_QWORD *)a1;
    sub_216B2D798(v15, a2);
    v12 = sub_216BD204C(v11, v15[0], v15[1]);
    if (sub_216BD5F30(a1))
    {
      v13 = *(uint64_t **)(a1 + 200);
      if (v12)
        v14 = v12 + 8;
      else
        v14 = 0;
      if (*(_BYTE *)(a1 + 168))
        sub_216BDD36C((uint64_t)v13, v14);
      else
        sub_216BDD394(v13, v14);
    }
    if (v12)
      return v12 + 8;
    else
      return 0;
  }
  return result;
}

_QWORD *sub_216BDD4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *i;

  result = (_QWORD *)sub_216BDE5F0(a1, a2, a3);
  if (result != (_QWORD *)a2)
  {
    for (i = result + 1; i != (_QWORD *)a2; ++i)
    {
      if (*i)
        *result++ = *i;
    }
  }
  return result;
}

unint64_t sub_216BDD4F0(const void **a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  if (sub_216B26878((uint64_t)a1) <= (unint64_t)a2)
  {
    result = sub_216B26878((uint64_t)a1);
    if (result >= v3)
      return result;
    if (sub_216B860AC((uint64_t)a1) < v3)
      sub_216B26908(a1, v3);
    v7 = (void *)sub_216B1E67C((uint64_t)a1);
    v8 = sub_216B1E600((uint64_t)a1) + 8 * v3;
    if (v7 != (void *)v8)
      bzero(v7, ((v8 - (_QWORD)v7 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v4 = sub_216B1E600((uint64_t)a1) + 8 * v3;
    v5 = sub_216B1E67C((uint64_t)a1);
    nullsub_1(v4, v5);
  }
  v9 = sub_216B1E600((uint64_t)a1) + 8 * v3;
  return sub_216B203A4((uint64_t)a1, v9);
}

uint64_t sub_216BDD5D0(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    return 0;
  if (!sub_216BAAEAC((uint64_t)a2))
  {
    v14 = sub_216BAB358((uint64_t)a2);
    v4 = sub_216B1E600((uint64_t)&v14);
    if (sub_216BD2FB4(v4))
    {
      v13 = sub_216BAB358((uint64_t)a2);
      v5 = sub_216B1E600((uint64_t)&v13);
      v14 = sub_216BD2CD0(v5);
      v6 = sub_216B1E600((uint64_t)&v14);
      v7 = sub_216BAED9C(v6);
      v8 = sub_216BA7EA4(v7);
      v9 = sub_216BD9D4C(a1[23], v8);
      if (!v9)
      {
        v11 = sub_216B1E4E0(a2);
        sub_216BD433C((uint64_t)a1, v11, 2479, (uint64_t)v12);
        sub_216B4B3B4(v12);
        return 0;
      }
      sub_216BC1FC0((uint64_t)a2, v9);
    }
  }
  return sub_216BD2454(*a1, (uint64_t)a2);
}

_DWORD *sub_216BDD6AC(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_216BD1F70(*a1, a2, a3, a4, a5);
}

_DWORD *sub_216BDD6BC(uint64_t *a1, int a2, unsigned int *a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[0] = sub_216BAB358((uint64_t)a3);
  v14 = sub_216B1E600((uint64_t)v20);
  v15 = sub_216BA6F68(v14);
  if (v15 && sub_216BA7EA4(v15) == 7)
    return sub_216BD20FC(*a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  v17 = sub_216B1E4E0(a3);
  sub_216BD433C((uint64_t)a1, v17, 2118, (uint64_t)v20);
  sub_216BC1C8C((uint64_t)a3);
  v19 = v18;
  sub_216B7A280(v20, &v19);
  sub_216B4B3B4(v20);
  return 0;
}

_DWORD *sub_216BDD79C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_216BD224C(*a1, a2, a3, a4, a5, a6);
}

_DWORD *sub_216BDD7A8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_216BD22B4(*a1, a2, a3, a4);
}

_DWORD *sub_216BDD7B4(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a3 || !a4)
    return 0;
  v6 = *a1;
  v7 = sub_216B3DB48(a4);
  v8 = sub_216B1E67C(v7);
  return sub_216BD2304(v6, a2, a3, v8);
}

_DWORD *sub_216BDD80C(uint64_t *a1, unsigned int a2)
{
  _BYTE v5[16];

  if (sub_216B5EE7C(a1[23]))
    return sub_216BD236C(*a1, a2);
  sub_216BD433C((uint64_t)a1, a2, 1906, (uint64_t)v5);
  sub_216B4B3B4(v5);
  return 0;
}

_DWORD *sub_216BDD878(uint64_t *a1, unsigned int a2)
{
  _BYTE v5[16];

  if (sub_216B27CB0(a1[23]))
    return sub_216BD23A4(*a1, a2);
  sub_216BD433C((uint64_t)a1, a2, 2000, (uint64_t)v5);
  sub_216B4B3B4(v5);
  return 0;
}

uint64_t sub_216BDD8E4(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  _BOOL4 v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12[2];

  sub_216B1E678((int)v12, "switch statement");
  v6 = sub_216BDB604((uint64_t)a1, 0, v12[0], v12[1], a2);
  result = 0;
  if (a3 && v6)
  {
    v11 = sub_216BAB358((uint64_t)a3);
    v8 = sub_216B1E600((uint64_t)&v11);
    if ((sub_216BDD9B4(v8) & 1) == 0)
    {
      v9 = sub_216B1E4E0(a3);
      sub_216BD433C((uint64_t)a1, v9, 2888, (uint64_t)v10);
      sub_216B4B3B4(v10);
    }
    v11 = (uint64_t)sub_216BD2174(*a1, a2, (uint64_t)a3);
    sub_216B268AC((uint64_t)(a1 + 44), &v11);
    return v11;
  }
  return result;
}

uint64_t sub_216BDD9B4(uint64_t a1)
{
  int v2;

  v2 = 0;
  return sub_216BD2F64(a1, &v2);
}

uint64_t sub_216BDD9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE v38[16];
  uint64_t v39[2];
  _BYTE v40[24];
  const void *v41[5];
  uint64_t v42;
  uint64_t v43;
  _DWORD v44[6];
  _BYTE v45[16];
  _BYTE v46[16];
  _BYTE v47[16];
  _BYTE v48[16];
  unsigned __int8 *v49;
  _BYTE v50[16];
  _BYTE v51[16];
  unsigned __int8 *v52;
  _QWORD v53[31];

  v53[30] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    sub_216B5F160(a1 + 352);
    v6 = sub_216B3DB48(a2);
    v7 = sub_216B3DB48(a3);
    sub_216B3BE48(v6, v7);
    v8 = sub_216B2037C(v6);
    v52 = *(unsigned __int8 **)sub_216BAEDA0(v8 + 8);
    if ((sub_216BA9E2C(&v52) & 1) == 0 && (sub_216BDDDB8(&v52) & 1) == 0)
    {
      sub_216BD1DA0(v52);
      sub_216BD433C(a1, v9, 2887, (uint64_t)v51);
      sub_216B4B3B4(v51);
      v10 = sub_216B387B8(v6);
      sub_216BD433C(a1, v10, 3739, (uint64_t)v50);
      sub_216B4B3B4(v50);
    }
    v11 = sub_216B2037C(v6);
    v49 = *(unsigned __int8 **)sub_216BDDDBC(v11 + 8);
    if ((sub_216BA9E2C(&v49) & 1) != 0 || sub_216BDDDB8(&v49))
    {
      sub_216BD1DA0(v49);
      sub_216BD433C(a1, v12, 2882, (uint64_t)v48);
      sub_216B4B3B4(v48);
      v13 = sub_216B387B8(v6);
      sub_216BD433C(a1, v13, 3739, (uint64_t)v47);
      sub_216B4B3B4(v47);
    }
    sub_216BDDDD4((uint64_t)v53);
    v14 = sub_216B5EE7C(v6);
    if (v14)
    {
      v15 = v14;
      v16 = 0;
      do
      {
        v17 = sub_216BDDDD8(v15);
        if (v17)
        {
          v18 = v17;
          if (v16)
          {
            v19 = sub_216B4CBC4(v16);
            sub_216BD433C(a1, v19, 2444, (uint64_t)v46);
            sub_216B4B3B4(v46);
            v20 = sub_216B4CBC4(v18);
            sub_216BD433C(a1, v20, 47, (uint64_t)v45);
            sub_216B4B3B4(v45);
          }
          v16 = v18;
        }
        else
        {
          v21 = sub_216B3DB48(v15);
          sub_216BD9D24(v44);
          v22 = sub_216B5EE7C(v21);
          sub_216BD9D28(v22, *(_QWORD *)(a1 + 200), (uint64_t)v44);
          v23 = sub_216B5EE7C(v21);
          v43 = sub_216BAB358(v23);
          v24 = sub_216B1E67C(v6);
          v42 = sub_216BAB358(v24);
          if (sub_216BD39B8(&v43, v42))
          {
            v25 = sub_216B5EE7C(v21);
            sub_216BC1804(v25);
            sub_216BD433C(a1, v26, 1935, (uint64_t)v41);
            v27 = sub_216BDF234((uint64_t)v41, (uint64_t)&v43);
            sub_216BDF234(v27, (uint64_t)&v42);
            sub_216B4B3B4(v41);
          }
          else if ((sub_216BDDE10(v53, (uint64_t)v44) & 1) == 0)
          {
            sub_216B78900(v41);
            sub_216BDDEE4(v44, v41, 0xAu);
            v28 = sub_216B5EE7C(v6);
            if (v28 != v15)
            {
              v29 = v28;
              while (1)
              {
                sub_216BD9D24(v40);
                v30 = sub_216BDDF28(v29);
                if (v30)
                {
                  v31 = v30;
                  v32 = sub_216B5EE7C(v30);
                  if (sub_216BD9D28(v32, *(_QWORD *)(a1 + 200), (uint64_t)v40))
                  {
                    if (sub_216B92180(v40, v44))
                      break;
                  }
                }
                sub_216B91D80(v40);
                v29 = sub_216B1E67C(v29);
                if (v29 == v15)
                  goto LABEL_25;
              }
              v33 = sub_216B4CBC4(v31);
              sub_216BD433C(a1, v33, 2089, (uint64_t)v39);
              v34 = sub_216B24850((uint64_t)v41);
              sub_216B4B340(v39, v34, v35);
              sub_216B4B3B4(v39);
              sub_216B91D80(v40);
            }
LABEL_25:
            v36 = sub_216B4CBC4(v21);
            sub_216BD433C(a1, v36, 47, (uint64_t)v38);
            sub_216B4B3B4(v38);
            sub_216B2489C(v41);
          }
          sub_216B91D80(v44);
        }
        v15 = sub_216B1E67C(v15);
      }
      while (v15);
    }
    sub_216BDDF60((uint64_t)v53);
  }
  return a2;
}

uint64_t sub_216BDDDBC(uint64_t a1)
{
  return sub_216BA8B44(a1) - 8;
}

uint64_t sub_216BDDDD8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BDDDB8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BDDE10(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  uint64_t v7;

  if (sub_216BDE734((uint64_t)a1, a2))
  {
    v4 = sub_216BDE76C((uint64_t)a1, a2);
    if (v4 == sub_216B1E67C((uint64_t)a1))
    {
      if (sub_216B60724((uint64_t)a1) >= 8)
      {
        while (!sub_216B29084(a1))
        {
          v7 = sub_216B3B09C((uint64_t)a1);
          sub_216BDE73C((uint64_t)(a1 + 27), v7);
          sub_216BDE840((uint64_t)a1);
        }
        sub_216BDE73C((uint64_t)(a1 + 27), a2);
      }
      else
      {
        sub_216BDE7E4(a1, a2);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    sub_216BDE73C((uint64_t)(a1 + 27), a2);
    return v6 & 1;
  }
}

uint64_t sub_216BDDEE4(_DWORD *a1, const void **a2, unsigned int a3)
{
  _BOOL4 v6;

  v6 = sub_216B1E4E8((uint64_t)a1);
  return sub_216B243EC(a1, a2, a3, v6, 0);
}

uint64_t sub_216BDDF28(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BA9E2C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

_DWORD *sub_216BDDF64(uint64_t *a1, unsigned int a2, int a3, unint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];

  v8 = (uint64_t)(a1 + 44);
  if (sub_216B26878((uint64_t)(a1 + 44)))
  {
    if ((sub_216BDE084(a4, a1[25]) & 1) != 0)
    {
      v9 = sub_216BD21B4(*a1, a2, a3, a4);
      v10 = (uint64_t *)sub_216B5F148(v8);
      sub_216BDE0D4(*v10, (uint64_t)v9);
    }
    else
    {
      sub_216BD433C((uint64_t)a1, a2, 1936, (uint64_t)v15);
      sub_216B4B3B4(v15);
      v11 = *a1;
      sub_216B1E414(v14, 32, 0, 0);
      v12 = sub_216BD9244(v11, a2, (uint64_t)v14);
      v9 = sub_216BD21B4(v11, a2, a3, (uint64_t)v12);
      sub_216B1D998(v14);
    }
  }
  else
  {
    sub_216BD433C((uint64_t)a1, a2, 1937, (uint64_t)v16);
    sub_216B4B3B4(v16);
    return 0;
  }
  return v9;
}

uint64_t sub_216BDE084(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  sub_216BD9D24(v6);
  v4 = sub_216BD9D28(a1, a2, (uint64_t)v6);
  sub_216B91D80(v6);
  return v4;
}

uint64_t sub_216BDE0D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B203A4(a2, *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

_DWORD *sub_216BDE104(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t *v8;
  _BYTE v10[16];

  v6 = (uint64_t)(a1 + 44);
  if (sub_216B26878((uint64_t)(a1 + 44)))
  {
    v7 = sub_216BD2208(*a1, a2, a3);
    v8 = (uint64_t *)sub_216B5F148(v6);
    sub_216BDE0D4(*v8, (uint64_t)v7);
  }
  else
  {
    sub_216BD433C((uint64_t)a1, a2, 2040, (uint64_t)v10);
    sub_216B4B3B4(v10);
    return 0;
  }
  return v7;
}

_DWORD *sub_216BDE198(uint64_t *a1, int a2)
{
  return sub_216BD23DC(*a1, a2);
}

_DWORD *sub_216BDE1A4(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33[2];
  uint64_t v34;
  _BYTE v35[16];

  sub_216BDE470((_DWORD *)a1[24]);
  v33[0] = sub_216B939E0(a1[24]);
  v6 = sub_216B1E600((uint64_t)v33);
  v7 = sub_216BD6AD0(v6);
  if (a3 && v7)
  {
    v8 = sub_216B1E4E0(a3);
    sub_216BD433C((uint64_t)a1, v8, 3196, (uint64_t)v35);
    v9 = v35;
LABEL_4:
    sub_216B4B3B4(v9);
    return 0;
  }
  if (!a3)
  {
    v33[0] = sub_216B939E0(a1[24]);
    v20 = sub_216B1E600((uint64_t)v33);
    if ((sub_216BD6AD0(v20) & 1) == 0)
    {
      sub_216BD433C((uint64_t)a1, a2, 2498, (uint64_t)v29);
      sub_216B4B3B4(v29);
      v23 = sub_216B387B8(a1[24]);
      sub_216BD433C((uint64_t)a1, v23, 3517, (uint64_t)v28);
      v9 = v28;
      goto LABEL_4;
    }
    a3 = 0;
    goto LABEL_20;
  }
  v33[0] = sub_216B939E0(a1[24]);
  v11 = sub_216BAB358((uint64_t)a3);
  if (!sub_216BD39B8(v33, v11))
  {
    v21 = sub_216BA824C((_DWORD *)a1[24]);
    v22 = sub_216BAAEAC((uint64_t)a3);
    if ((_DWORD)v21 != v22)
    {
      if (v22)
        a3 = (unsigned int *)sub_216BC2A68(*a1, v21, (uint64_t)a3);
      else
        sub_216BC1FC0((uint64_t)a3, v21);
    }
LABEL_20:
    v19 = *a1;
    v18 = a2;
    return sub_216BD2414(v19, v18, (uint64_t)a3);
  }
  v33[0] = sub_216B939E0(a1[24]);
  if (!sub_216B2D76C(v33))
    return 0;
  v34 = sub_216B939E0(a1[24]);
  v12 = sub_216B1E600((uint64_t)&v34);
  if ((sub_216BA81AC(v12) & 1) != 0)
    return 0;
  v33[0] = sub_216BAB358((uint64_t)a3);
  v13 = sub_216B1E600((uint64_t)v33);
  v14 = sub_216BA7ED8(v13);
  if (!v14)
  {
    sub_216BD433C((uint64_t)a1, a2, 2205, (uint64_t)v33);
    v34 = sub_216B939E0(a1[24]);
    v24 = sub_216BDF234((uint64_t)v33, (uint64_t)&v34);
    v32 = sub_216BAB358((uint64_t)a3);
    sub_216BDF234(v24, (uint64_t)&v32);
    sub_216B4B3B4(v33);
    v25 = sub_216B387B8(a1[24]);
    sub_216BD433C((uint64_t)a1, v25, 3517, (uint64_t)v30);
    v9 = v30;
    goto LABEL_4;
  }
  v15 = v14;
  v33[0] = sub_216B1E67C(v14);
  v16 = sub_216B939E0(a1[24]);
  v17 = sub_216BD39D0(v33, v16);
  v18 = a2;
  if (!v17)
  {
    sub_216BD433C((uint64_t)a1, a2, 2205, (uint64_t)v33);
    v34 = sub_216B939E0(a1[24]);
    v26 = sub_216BDF234((uint64_t)v33, (uint64_t)&v34);
    v32 = sub_216B1E67C(v15);
    sub_216BDF234(v26, (uint64_t)&v32);
    sub_216B4B3B4(v33);
    v27 = sub_216B387B8(a1[24]);
    sub_216BD433C((uint64_t)a1, v27, 3517, (uint64_t)v31);
    v9 = v31;
    goto LABEL_4;
  }
  v19 = *a1;
  return sub_216BD2414(v19, v18, (uint64_t)a3);
}

_DWORD *sub_216BDE470(_DWORD *result)
{
  *result |= 0x4000u;
  return result;
}

uint64_t sub_216BDE480(uint64_t a1)
{
  sub_216BDE4A8(a1 + 216);
  return sub_216BDE4AC(a1);
}

uint64_t sub_216BDE4B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216BDE4E8(a1, v3);
  return a1;
}

uint64_t sub_216BDE4E8(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    sub_216BDE4E8(result, *a2);
    sub_216BDE4E8(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = nullsub_1(a2 + 4, v6);
    sub_216BDE550(v5, v7);
    return sub_216B51070(v5, a2, 1);
  }
  return result;
}

uint64_t sub_216BDE550(uint64_t a1, uint64_t a2)
{
  return sub_216BDE558(a2);
}

_QWORD *sub_216BDE560(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  sub_216BDE5B4(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216BDE5B4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 24;
      result = sub_216B91D80(v2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_216BDE5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v6 = j_j_nullsub_1(a1);
  v7 = j_j_nullsub_1(a2);
  v8 = sub_216BDE654(v6, v7, a3, (uint64_t)&v10);
  return sub_216B20710(a1, v8);
}

uint64_t sub_216BDE654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    while (*(_QWORD *)sub_216B3557C(a4, v4))
    {
      v4 += 8;
      if (v4 == a2)
        return a2;
    }
  }
  return v4;
}

uint64_t sub_216BDE6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BDE6D8(&v3);
}

uint64_t sub_216BDE6D8(_QWORD *a1)
{
  return sub_216BDE6E0(*a1);
}

uint64_t sub_216BDE6E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B61780(a1);
  sub_216BDE710(v2 + 216);
  return a1;
}

uint64_t sub_216BDE714(uint64_t a1)
{
  char v2;

  return sub_216B3B734(a1, &v2);
}

BOOL sub_216BDE734(uint64_t a1, uint64_t a2)
{
  return sub_216B4C998(a1 + 216, a2);
}

uint64_t sub_216BDE73C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;

  v4[0] = sub_216BDE874(a1, a2);
  v4[1] = v2;
  sub_216BDE8A8(&v5, (uint64_t)v4);
  return v5;
}

uint64_t sub_216BDE76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_216B1E600(a1);
  v5 = sub_216B1E67C(a1);
  if (v4 == v5)
    return sub_216B1E67C(a1);
  v6 = v5;
  while ((sub_216B92180(v4, a2) & 1) == 0)
  {
    v4 += 24;
    if (v4 == v6)
      return sub_216B1E67C(a1);
  }
  return v4;
}

uint64_t sub_216BDE7E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216BDEC1C(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216BDEAD8(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 24;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216BDE840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B1E67C(a1);
  sub_216B203A4(a1, v2 - 24);
  v3 = sub_216B1E67C(a1);
  return sub_216B91D80(v3);
}

uint64_t sub_216BDE874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = nullsub_1(a2, a2);
  return sub_216BDE8AC(a1, v4, a2);
}

uint64_t sub_216BDE8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  uint64_t *v15;
  uint64_t v16;

  v5 = sub_216BDE964(a1, &v15, a2);
  v6 = *v5;
  v14 = 0;
  if (!v6)
  {
    v7 = v5;
    sub_216BDEA20(a1, a3, (uint64_t)v13);
    v8 = v15;
    v10 = (_QWORD *)sub_216B25CA8((uint64_t)v13, v9);
    sub_216B3BA48(a1, (uint64_t)v8, v7, v10);
    v6 = sub_216B28054((uint64_t)v13, v11);
    v14 = 1;
    sub_216BDEAB8(v13);
  }
  sub_216B20C64(v13, v6);
  sub_216B31104(&v16, v13, &v14);
  return v16;
}

uint64_t *sub_216BDE964(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_216B3A8D8(a1, (uint64_t)a2);
  v8 = sub_216B3BAD4(a1, v7);
  if (v6)
  {
    v10 = (uint64_t *)v8;
    do
    {
      while (1)
      {
        v11 = (uint64_t *)v6;
        v12 = sub_216B2C144(a1, v9);
        v13 = v6 + 32;
        if (!sub_216BDEABC(v12, a3, v13))
          break;
        v6 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_10;
      }
      v14 = sub_216B2C144(a1, v9);
      if (!sub_216BDEABC(v14, v13, a3))
        break;
      v10 = v11 + 1;
      v6 = v11[1];
    }
    while (v6);
  }
  else
  {
    v11 = (uint64_t *)sub_216B3A914(a1, v9);
    v10 = v11;
  }
LABEL_10:
  *a2 = v11;
  return v10;
}

uint64_t sub_216BDEA20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = sub_216B3A8F0(a1, a2);
  v6 = sub_216B518C4(v5, 1);
  sub_216B3BADC((uint64_t)&v14, v5, 0);
  v7 = sub_216B3BAE0(a3, v6);
  v9 = sub_216B25CA8(v7, v8);
  v11 = nullsub_1(v9 + 32, v10);
  sub_216BDEAC8(v5, v11, a2);
  result = sub_216B3BAE8(a3, v12);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_216BDEABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B923B8(a2, a3);
}

uint64_t sub_216BDEACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BDEAD8(a2, a3);
}

uint64_t sub_216BDEADC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B201A8(a1, a2);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t sub_216BDEB04(uint64_t a1)
{
  sub_216BDEB2C(a1, 0);
  return a1;
}

_QWORD *sub_216BDEB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216BDEB88(v8, v4);
  }
  return result;
}

uint64_t sub_216BDEB88(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)result;
  if (*(_BYTE *)(result + 8))
  {
    v4 = *(_QWORD *)result;
    v5 = nullsub_1(a2 + 32, a2);
    result = sub_216BDE550(v4, v5);
  }
  if (a2)
    return sub_216B51070(*v3, a2, 1);
  return result;
}

_QWORD *sub_216BDEBF0(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_216B20C64(a1, *(_QWORD *)a2);
  *((_BYTE *)result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t sub_216BDEC1C(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B6F140((uint64_t)a1);
  v5 = sub_216B60724((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(24 * v7, 0x10120406B1B3107uLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216BDED10(v9, v10, (uint64_t)v8);
  v11 = sub_216B1E600((uint64_t)a1);
  v12 = sub_216B1E67C((uint64_t)a1);
  sub_216BDE5B4(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 24 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 24 * v7;
  return result;
}

uint64_t sub_216BDED10(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216BDED60(a3, v5);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216BDED64(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B24F80(a1, a2);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t sub_216BDED8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (sub_216B1E67C(a2))
  {
    v4 = sub_216B1E67C(a2);
    v15 = sub_216B4A11C(v4);
    v16 = v5;
  }
  else
  {
    sub_216B1E678((int)&v15, &byte_216C19659);
  }
  v6 = (__int128 *)sub_216B1E600(a2);
  sub_216BDEE54(a1, v6, a1[23], v15, v16);
  v8 = v7;
  v9 = (_DWORD *)sub_216B4ADBC(a2);
  if (sub_216BD5B5C(v9))
  {
    v10 = (_QWORD *)sub_216B4ADBC(a2);
    v11 = sub_216B1E67C(a2);
    v12 = sub_216B4A11C(v11);
    return sub_216BDEF34(a1, v10, v8, v12, v13);
  }
  return v8;
}

void sub_216BDEE54(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD v15[4];
  __int128 v16;

  v16 = *(_OWORD *)sub_216B28BEC((uint64_t)a2);
  if (sub_216BD5B5C(&v16))
  {
    sub_216BDF270((uint64_t)v15);
    v10 = sub_216BDF2A8(a2, v15);
    v11 = sub_216BDEE54(a1, v15, a3, a4, a5, v10);
    sub_216BDEF34(a1, &v16, v11, a4, a5);
  }
  else if (sub_216BD80B0((uint64_t)a2) == 1)
  {
    v12 = sub_216B27CB0((uint64_t)a2);
    sub_216BD309C(v12);
  }
  else
  {
    v13 = *a1;
    v14 = sub_216BD80B0((uint64_t)a2);
    sub_216BD3484(v13, v14);
  }
}

uint64_t sub_216BDEF34(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  const void *v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];
  unsigned int v36[6];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a3;
  if (!sub_216B6EFA4(a2, (uint64_t)a2))
    return sub_216BD3834(*a1, a3);
  v11 = sub_216B6EFA4(a2, v10);
  v12 = sub_216BAB358(v11);
  if ((sub_216BB15AC(v12) & 1) != 0)
  {
    sub_216BD9D24(v36);
    v37 = 0;
    if ((sub_216BB50F4(v11, a1[25], (uint64_t)v36, &v37) & 1) != 0)
    {
      v35[0] = sub_216BAB358(v11);
      v13 = sub_216B1E600((uint64_t)v35);
      v14 = sub_216BA6F68(v13);
      if (sub_216BA7EA4(v14) != 5 || (sub_216B2478C((uint64_t)v36) & 0x8000000000000000) == 0)
      {
        if (sub_216B91F5C(v36, 0))
        {
          sub_216BC1804(v11);
          sub_216BD433C((uint64_t)a1, v15, 3200, (uint64_t)v35);
          v34 = sub_216BAB358(v11);
          sub_216BDF234((uint64_t)v35, (uint64_t)&v34);
          sub_216BC1C8C(v11);
          v33 = v16;
          sub_216B7A280(v35, &v33);
          sub_216B4B3B4(v35);
        }
        v17 = *a1;
        v18 = sub_216B1FD84(v36);
        v39 = sub_216BD38AC(v17, a3, v18);
        goto LABEL_16;
      }
      sub_216B1E678((int)v32, &byte_216C19659);
      if (sub_216B2B2F0(a4, a5, v32[0], (size_t)v32[1]))
      {
        sub_216BC1804(v11);
        sub_216BD433C((uint64_t)a1, v28, 2023, (uint64_t)v35);
        v29 = sub_216B4B340(v35, a4, a5);
        sub_216BC1C8C(v11);
        v34 = v30;
        v26 = v29;
        goto LABEL_14;
      }
      sub_216BC1804(v11);
      sub_216BD433C((uint64_t)a1, v31, 2023, (uint64_t)v35);
      sub_216BDF234((uint64_t)v35, (uint64_t)&v38);
      v24 = v11;
    }
    else
    {
      sub_216BC1804(v11);
      sub_216BD433C((uint64_t)a1, v21, 2661, (uint64_t)v35);
      v34 = sub_216BAB358(v11);
      sub_216BDF234((uint64_t)v35, (uint64_t)&v34);
      sub_216BC1C8C(v11);
      v33 = v22;
      sub_216B7A280(v35, &v33);
      sub_216B4B3B4(v35);
      if (!v37)
      {
LABEL_15:
        sub_216B2D410(&v39);
LABEL_16:
        sub_216B91D80(v36);
        return v39;
      }
      sub_216BC1804(v37);
      sub_216BD433C((uint64_t)a1, v23, 3584, (uint64_t)v35);
      v24 = v37;
    }
    sub_216BC1C8C(v24);
    v34 = v25;
    v26 = v35;
LABEL_14:
    sub_216B7A280(v26, &v34);
    sub_216B4B3B4(v35);
    goto LABEL_15;
  }
  sub_216BC1804(v11);
  sub_216BD433C((uint64_t)a1, v19, 1735, (uint64_t)v36);
  v35[0] = sub_216BAB358(v11);
  sub_216BDF234((uint64_t)v36, (uint64_t)v35);
  sub_216BC1C8C(v11);
  v37 = v20;
  sub_216B7A280(v36, &v37);
  sub_216B4B3B4(v36);
  sub_216B2D410(&v39);
  return v39;
}

uint64_t sub_216BDF234(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a2);
  return sub_216BE18A4(a1, v3);
}

void sub_216BDF260(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  sub_216BDEE54(a1, a2, a1[23], a3, a4);
}

uint64_t sub_216BDF270(uint64_t a1)
{
  int v3;

  sub_216B4AED0(&v3);
  return sub_216BE4400(a1, v3);
}

double sub_216BDF2A8(__int128 *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  *(_OWORD *)((char *)a2 + 43) = *(__int128 *)((char *)a1 + 43);
  a2[1] = v4;
  a2[2] = v5;
  *a2 = v3;
  sub_216BE4464(&v7);
  result = *(double *)&v7;
  a2[1] = v7;
  return result;
}

uint64_t sub_216BDF2F4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[20];
  int v21;
  uint64_t v22;

  v22 = a3;
  v21 = 0;
  v5 = sub_216BD5AFC((uint64_t)a2);
  v6 = sub_216B2D76C(&v22);
  if (!v5)
  {
    if (v6
      && ((v12 = sub_216B1E600((uint64_t)&v22), (sub_216BD2F64(v12, &v21) & 1) != 0)
       || (v13 = sub_216B1E600((uint64_t)&v22), sub_216BDF46C(v13, &v21))))
    {
      result = sub_216BD9D4C(*(_QWORD *)(a1 + 184), v21);
      if ((_DWORD)result)
        return result;
      v14 = sub_216B1E4E0(a2);
      sub_216BD433C(a1, v14, 2479, (uint64_t)v19);
      v15 = v19;
    }
    else
    {
      result = sub_216B2D76C(&v22);
      if (!(_DWORD)result)
        return result;
      v16 = sub_216B1E600((uint64_t)&v22);
      result = sub_216BD3230(v16, &v21);
      if (!(_DWORD)result)
        return result;
      result = sub_216BD9D4C(*(_QWORD *)(a1 + 184), v21);
      if ((_DWORD)result)
        return result;
      v17 = sub_216B1E4E0(a2);
      sub_216BD433C(a1, v17, 2479, (uint64_t)v18);
      v15 = v18;
    }
    sub_216B4B3B4(v15);
    return 0;
  }
  if (v6)
  {
    v7 = sub_216B1E600((uint64_t)&v22);
    if ((sub_216BD3230(v7, &v21) & 1) == 0)
    {
      v8 = sub_216B1E600((uint64_t)&v22);
      if ((sub_216BD2F64(v8, &v21) & 1) == 0)
      {
        v9 = sub_216B1E600((uint64_t)&v22);
        if ((sub_216BDF46C(v9, &v21) & 1) == 0)
        {
          v10 = sub_216B1E4E0(a2);
          sub_216BD433C(a1, v10, 2753, (uint64_t)v20);
          sub_216B4B3B4(v20);
        }
      }
    }
  }
  return sub_216BD815C((uint64_t)a2);
}

uint64_t sub_216BDF46C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v6 = sub_216BD2CD0(a1);
  v3 = sub_216B1E600((uint64_t)&v6);
  result = sub_216BA6F68(v3);
  if (result)
  {
    v5 = sub_216BA7EA4(result);
    *a2 = v5;
    return (v5 - 3) < 2;
  }
  return result;
}

uint64_t sub_216BDF4BC(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v8 = sub_216BAB358(a3);
  v17 = v8;
  v9 = v8;
  switch(a2)
  {
    case 1:
      v10 = sub_216B1E600((uint64_t)&v17);
      v11 = sub_216BA6F68(v10);
      if (v11 && sub_216BA7EA4(v11) == 7)
        return v17;
      goto LABEL_11;
    case 2:
    case 4:
      if (!sub_216BDF614(v8))
        goto LABEL_11;
      goto LABEL_8;
    case 3:
    case 5:
      if (!sub_216BDF614(v8))
        goto LABEL_11;
      if ((a2 == 5 || a2 == 3) && sub_216BDF688(a1, a3, a4))
        goto LABEL_12;
LABEL_8:
      v19 = v9;
      break;
    case 6:
      sub_216B6E0CC(v16, (uint64_t)&v18);
      if ((sub_216BDF7E0(a1, v9, 0x18Cu, v16[0], v16[1]) & 1) == 0)
        goto LABEL_12;
      return v17;
    default:
LABEL_11:
      sub_216BD433C(a1, a4, 3081, (uint64_t)v15);
      sub_216BDF234((uint64_t)v15, (uint64_t)&v17);
      sub_216BC1C8C(a3);
      v14 = v12;
      sub_216B7A280(v15, &v14);
      sub_216B4B3B4(v15);
LABEL_12:
      sub_216B2D410(&v19);
      break;
  }
  return v19;
}

uint64_t sub_216BDF614(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  v1 = sub_216B1E600((uint64_t)&v5);
  result = sub_216BA7ED0(v1);
  if (result)
  {
    v3 = result;
    if ((sub_216BD3748(result) & 1) != 0)
    {
      return 0;
    }
    else if ((sub_216BAEC44(v3) & 1) != 0 || (sub_216BE41A8(v3) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = sub_216B1E600((uint64_t)&v5);
      return sub_216BD6164(v4);
    }
  }
  return result;
}

uint64_t sub_216BDF688(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _BYTE v23[16];

  v22[0] = sub_216BAB358(a2);
  if (!sub_216B2043C())
  {
    if (sub_216BAAF68(a2))
      return 0;
    v8 = sub_216BAB1D8(a2);
    if (v8)
    {
      v9 = v8;
      v10 = sub_216B1E67C(v8);
      v11 = (_DWORD *)sub_216BB1658(v10);
      if (v11)
      {
        v12 = sub_216BA75F0(v11);
        if (v12 <= 7 && ((1 << v12) & 0xAE) != 0)
        {
LABEL_9:
          v13 = a3;
          v14 = a1;
          v15 = 3006;
LABEL_18:
          sub_216BD433C(v14, v13, v15, (uint64_t)v22);
          sub_216BC1C8C(a2);
          v21 = v20;
          sub_216B7A280(v22, &v21);
          v6 = v22;
          goto LABEL_19;
        }
      }
      else
      {
        v17 = sub_216B1E67C(v9);
        v18 = sub_216BD8C0C(v17);
        if (v18 && sub_216BA81D0(v18))
          goto LABEL_9;
      }
    }
    else
    {
      v16 = sub_216BE03D8(a2);
      if (v16 || (v16 = sub_216BE0410(a2)) != 0)
      {
        v19 = sub_216B2037C(v16);
        return sub_216BDF688(a1, v19, a3);
      }
    }
    v13 = a3;
    v14 = a1;
    v15 = 3043;
    goto LABEL_18;
  }
  sub_216BD433C(a1, a3, 3006, (uint64_t)v23);
  v6 = v23;
LABEL_19:
  sub_216B4B3B4(v6);
  return 1;
}

uint64_t sub_216BDF7E0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[2];
  unsigned int v16;
  const void *v17[11];
  unsigned int v18;
  _QWORD v19[2];
  uint64_t v20;

  v19[1] = a5;
  v20 = a2;
  v19[0] = a4;
  v18 = a3;
  v7 = sub_216BE2828(a2, a3);
  if ((v7 & 1) == 0)
  {
    sub_216B341A0(v17);
    sub_216BE28F0((const void **)1, "float", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x20, "vec2, vec3, vec4", (int *)&v18, v17);
    sub_216BE28F0((const void **)2, "half", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x40, "hvec2, hvec3, hvec4", (int *)&v18, v17);
    sub_216BE28F0((const void **)4, "int", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x80, "ivec2, ivec3, ivec4", (int *)&v18, v17);
    sub_216BE28F0((const void **)8, "uint", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x100, "uvec2, uvec3, uvec4", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x10, "BOOL", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x200, "bvec2, bvec3, bvec4", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x400, "mat2, mat3, mat4, hmat2, hmat3, hmat4", (int *)&v18, v17);
    sub_216BE28F0((const void **)0x800, "mat2, mat2x3, mat2x4, mat3x2, mat3, mat3x4, mat4x2, mat4x3, mat4, hmat2, hmat2x3, hmat2x4, hmat3x2, hmat3, hmat3x4, hmat4x2, hmat4x3, hmat4", (int *)&v18, v17);
    sub_216B4AED0(&v16);
    v8 = (uint64_t *)sub_216B1E600((uint64_t)v19);
    v9 = sub_216B35430(v19);
    if (v8 != (uint64_t *)v9)
    {
      v10 = (uint64_t *)v9;
      while (1)
      {
        v11 = (unsigned int *)*v8;
        v15[0] = sub_216BAB358(*v8);
        if (sub_216BD39D0(v15, a2))
          break;
        if (++v8 == v10)
          goto LABEL_8;
      }
      v16 = sub_216B1E4E0(v11);
    }
LABEL_8:
    sub_216BD433C(a1, v16, 2312, (uint64_t)v15);
    sub_216BDF234((uint64_t)v15, (uint64_t)&v20);
    v12 = sub_216B24850((uint64_t)v17);
    sub_216B4B340(v15, v12, v13);
    sub_216B4B3B4(v15);
    sub_216B2489C(v17);
  }
  return v7;
}

uint64_t sub_216BDFA18(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  _BOOL4 v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _BOOL4 v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD v136[2];
  uint64_t v137;
  _QWORD v138[2];
  uint64_t v139;
  uint64_t v140[2];
  uint64_t v141[2];
  _QWORD v142[2];
  _QWORD v143[2];
  uint64_t v144[2];
  _BYTE v145[16];
  uint64_t v146;
  uint64_t v147;
  uint64_t v148[2];
  uint64_t *v149[5];
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[2];

  v9 = sub_216BAB358(*a3);
  v151 = v9;
  v10 = sub_216BAB358(*a4);
  v149[4] = a3;
  v150 = v10;
  v149[0] = &v150;
  v149[1] = &v151;
  v149[2] = a1;
  v149[3] = a4;
  switch(a2)
  {
    case 1:
      v47 = sub_216BAB358(*a4);
      goto LABEL_45;
    case 2:
    case 3:
    case 4:
      if (!sub_216BD39D0(&v151, v10))
        goto LABEL_129;
      v30 = sub_216B1E600((uint64_t)&v151);
      if (!sub_216BAEC44(v30))
        goto LABEL_129;
      v31 = sub_216B1E600((uint64_t)&v151);
      v32 = sub_216BAED9C(v31);
      if (sub_216BA7EA4(v32) != 7)
        goto LABEL_129;
      goto LABEL_89;
    case 5:
    case 6:
    case 7:
      sub_216B6E0CC(v144, (uint64_t)a3);
      if ((sub_216BDF7E0((uint64_t)a1, v9, 0x18Cu, v144[0], v144[1]) & 1) == 0)
        goto LABEL_68;
      if (sub_216BD39D0(&v151, v150))
        goto LABEL_89;
      v33 = sub_216B1E600((uint64_t)&v151);
      v34 = sub_216BA6F68(v33);
      v35 = sub_216B1E600((uint64_t)&v150);
      v36 = sub_216BA6F68(v35);
      v37 = sub_216B1E600((uint64_t)&v151);
      v38 = sub_216BA7040(v37);
      v39 = sub_216B1E600((uint64_t)&v150);
      v40 = sub_216BA7040(v39);
      if (v34 && (v41 = v40) != 0)
      {
        if (sub_216B1E67C(v40) != v34)
        {
          if (sub_216BA7EA4(v34) == 5)
            v42 = 132;
          else
            v42 = 264;
          v43 = v150;
          sub_216B6E0CC(v143, (uint64_t)a4);
          v44 = v143[0];
          v45 = v143[1];
LABEL_67:
          sub_216BDF7E0((uint64_t)a1, v43, v42, v44, v45);
          goto LABEL_68;
        }
        v87 = v41;
      }
      else
      {
        if (!v38 || !v36)
          goto LABEL_129;
        if (sub_216B1E67C(v38) != v36)
        {
          v75 = sub_216B1E67C(v38);
          v76 = sub_216BA6F68(v75);
          if (sub_216BA7EA4(v76) == 5)
            v42 = 132;
          else
            v42 = 264;
          v43 = v150;
          sub_216B6E0CC(v142, (uint64_t)a4);
          v44 = v142[0];
          v45 = v142[1];
          goto LABEL_67;
        }
        v87 = v38;
      }
      goto LABEL_132;
    case 8:
    case 9:
      sub_216BE0338(v149);
      if (!sub_216BD39D0(&v151, v150))
        goto LABEL_129;
      sub_216BD3484(*a1, 7);
      goto LABEL_45;
    case 10:
    case 11:
    case 12:
    case 13:
      sub_216BE0338(v149);
      if (sub_216BD39D0(&v151, v150))
      {
        v11 = sub_216B1E600((uint64_t)&v151);
        if (sub_216BAEC44(v11))
        {
          v12 = sub_216B1E600((uint64_t)&v151);
          v13 = sub_216BAED9C(v12);
          v14 = sub_216BA7EA4(v13);
          if (v14 <= 6 && ((1 << v14) & 0x68) != 0)
          {
            sub_216BD3484(*a1, 7);
            v152[0] = v15;
            return v152[0];
          }
        }
      }
      v16 = sub_216B1E600((uint64_t)&v151);
      if (sub_216BAEC44(v16))
      {
        v17 = sub_216B1E600((uint64_t)&v150);
        if ((sub_216BAEC44(v17) & 1) != 0)
        {
          sub_216BD39B8(&v151, v150);
          goto LABEL_129;
        }
      }
      sub_216BD433C((uint64_t)a1, a5, 1958, (uint64_t)v145);
      v46 = (uint64_t *)v145;
      goto LABEL_130;
    case 14:
    case 15:
      sub_216B6E0CC(v141, (uint64_t)a3);
      if ((sub_216BDF7E0((uint64_t)a1, v9, 0x18Cu, v141[0], v141[1]) & 1) == 0)
        goto LABEL_68;
      v48 = v150;
      sub_216B6E0CC(v140, (uint64_t)a4);
      if ((sub_216BDF7E0((uint64_t)a1, v48, 0x18Cu, v140[0], v140[1]) & 1) == 0)
        goto LABEL_68;
      v49 = sub_216B1E600((uint64_t)&v151);
      v50 = sub_216BA6F68(v49);
      v51 = sub_216B1E600((uint64_t)&v150);
      v52 = sub_216BA6F68(v51);
      if (!v50 || v52)
      {
        v81 = sub_216B1E600((uint64_t)&v151);
        v82 = sub_216BA7040(v81);
        v83 = sub_216B1E600((uint64_t)&v150);
        v84 = sub_216BA7040(v83);
        if (!v82)
          goto LABEL_89;
        v85 = v84;
        if (!v84)
          goto LABEL_89;
        v86 = sub_216BA734C(v82);
        if (v86 == sub_216BA734C(v85))
          goto LABEL_89;
        v53 = a5;
        v54 = (uint64_t)a1;
        v55 = 2842;
      }
      else
      {
        v53 = a5;
        v54 = (uint64_t)a1;
        v55 = 2841;
      }
      sub_216BD433C(v54, v53, v55, (uint64_t)v148);
      sub_216BDF234((uint64_t)v148, (uint64_t)&v151);
      sub_216BDF234((uint64_t)v148, (uint64_t)&v150);
      sub_216BC1C8C(*a3);
      v147 = v56;
      v57 = sub_216B7A280(v148, &v147);
      sub_216BC1C8C(*a4);
      v146 = v58;
      sub_216B7A280(v57, &v146);
      sub_216B4B3B4(v148);
LABEL_68:
      sub_216B2D410(v152);
      return v152[0];
    case 16:
    case 17:
    case 19:
    case 20:
      v18 = sub_216B1E600((uint64_t)&v151);
      v19 = sub_216BA6F68(v18);
      v20 = sub_216B1E600((uint64_t)&v150);
      v21 = sub_216BA6F68(v20);
      v22 = sub_216B1E600((uint64_t)&v151);
      v23 = sub_216BA7040(v22);
      v24 = sub_216B1E600((uint64_t)&v150);
      v25 = sub_216BA7040(v24);
      v26 = sub_216B1E600((uint64_t)&v151);
      v27 = sub_216BA710C(v26);
      v28 = sub_216B1E600((uint64_t)&v150);
      v29 = sub_216BA710C(v28);
      sub_216BE0338(v149);
      if (v19 && v21)
        goto LABEL_12;
      if (v23 | v27 && v21)
        goto LABEL_40;
      v59 = v25 != 0;
      if (!v19)
      {
        if (v23 && v25 || ((v77 = v29 != 0, v29) ? (v78 = v27 != 0) : (v78 = 0), a2 != 20 && v78))
        {
LABEL_12:
          if (sub_216BD39D0(&v151, v150))
            goto LABEL_89;
          goto LABEL_129;
        }
LABEL_78:
        if (a2 != 20)
          goto LABEL_129;
        v79 = v59;
        if (v27)
        {
          v80 = sub_216B1E67C(v27);
        }
        else
        {
          if (!v23)
          {
            v88 = 0;
LABEL_102:
            sub_216B20C64(v148, v88);
            if (v77)
            {
              v89 = sub_216B1E67C(v29);
            }
            else
            {
              if (!v79)
              {
                v90 = 0;
LABEL_111:
                sub_216B20C64(&v147, v90);
                if ((sub_216BD39B8(v148, v147) & 1) != 0)
                  goto LABEL_129;
                if (v27)
                  v91 = v79;
                else
                  v91 = 0;
                if (v91)
                {
                  v92 = sub_216B1E600((uint64_t)&v151);
                  v93 = sub_216BAED9C(v92);
                  v94 = sub_216BA734C(v93);
                  v95 = sub_216B1E600((uint64_t)&v150);
                  v96 = sub_216BAED9C(v95);
                  if (v94 != sub_216BA734C(v96))
                    goto LABEL_129;
                  v97 = *a1;
                  v98 = sub_216B1E600((uint64_t)&v151);
                  v99 = sub_216BAED9C(v98);
                  v100 = sub_216B1E67C(v99);
                  v101 = sub_216BA6F68(v100);
                  v102 = sub_216B1E600((uint64_t)&v151);
                  v103 = sub_216BAED9C(v102);
                  v104 = sub_216BA7418(v103);
                }
                else
                {
                  if (v23)
                    v105 = v77;
                  else
                    v105 = 0;
                  if (!v105)
                  {
                    if (!v78)
                      goto LABEL_129;
                    v116 = sub_216B1E600((uint64_t)&v151);
                    v117 = sub_216BAED9C(v116);
                    v118 = sub_216BA734C(v117);
                    v119 = sub_216B1E600((uint64_t)&v150);
                    v120 = sub_216BAED9C(v119);
                    if (v118 != sub_216BA7418(v120))
                      goto LABEL_129;
                    v121 = *a1;
                    v122 = sub_216B1E600((uint64_t)&v151);
                    v123 = sub_216BAED9C(v122);
                    v124 = sub_216B1E67C(v123);
                    v125 = sub_216B1E600((uint64_t)&v150);
                    v126 = sub_216BAED9C(v125);
                    v127 = sub_216BA734C(v126);
                    v128 = sub_216B1E600((uint64_t)&v151);
                    v129 = sub_216BAED9C(v128);
                    v130 = sub_216BA7418(v129);
                    v47 = sub_216BD329C(v121, v124, v127, v130);
LABEL_45:
                    v152[0] = v47;
                    return v152[0];
                  }
                  v106 = sub_216B1E600((uint64_t)&v151);
                  v107 = sub_216BAED9C(v106);
                  v108 = sub_216BA734C(v107);
                  v109 = sub_216B1E600((uint64_t)&v150);
                  v110 = sub_216BAED9C(v109);
                  if (v108 != sub_216BA7418(v110))
                    goto LABEL_129;
                  v97 = *a1;
                  v111 = sub_216B1E600((uint64_t)&v150);
                  v112 = sub_216BAED9C(v111);
                  v113 = sub_216B1E67C(v112);
                  v101 = sub_216BA6F68(v113);
                  v114 = sub_216B1E600((uint64_t)&v150);
                  v115 = sub_216BAED9C(v114);
                  v104 = sub_216BA734C(v115);
                }
                v47 = sub_216BD30A0(v97, v101, v104);
                goto LABEL_45;
              }
              v89 = sub_216B1E67C(v25);
            }
            v90 = v89;
            goto LABEL_111;
          }
          v80 = sub_216B1E67C(v23);
        }
        v88 = v80;
        goto LABEL_102;
      }
      if (!(v25 | v29))
      {
        v78 = 0;
        v77 = 0;
        v59 = 0;
        goto LABEL_78;
      }
LABEL_40:
      if (v23)
      {
        v60 = sub_216B1E67C(v23);
        goto LABEL_42;
      }
      if (v25)
      {
        v73 = sub_216B1E67C(v25);
        goto LABEL_58;
      }
      if (v27)
      {
        v60 = sub_216B1E67C(v27);
LABEL_42:
        if (v60 != v21)
          goto LABEL_129;
LABEL_89:
        v74 = v151;
        goto LABEL_90;
      }
      if (v29)
      {
        v73 = sub_216B1E67C(v29);
LABEL_58:
        if (v73 == v19)
        {
LABEL_59:
          v74 = v150;
LABEL_90:
          v152[0] = v74;
          return v152[0];
        }
      }
LABEL_129:
      sub_216BD433C((uint64_t)a1, a5, 3054, (uint64_t)v148);
      sub_216BDF234((uint64_t)v148, (uint64_t)&v151);
      sub_216BDF234((uint64_t)v148, (uint64_t)&v150);
      sub_216BC1C8C(*a3);
      v147 = v131;
      v132 = sub_216B7A280(v148, &v147);
      sub_216BC1C8C(*a4);
      v146 = v133;
      sub_216B7A280(v132, &v146);
      v46 = v148;
LABEL_130:
      sub_216B4B3B4(v46);
LABEL_131:
      v87 = 0;
LABEL_132:
      sub_216B20C64(v152, v87);
      return v152[0];
    case 18:
      v61 = sub_216B1E600((uint64_t)&v151);
      v62 = sub_216BA6F68(v61);
      v63 = sub_216B1E600((uint64_t)&v150);
      v64 = sub_216BA6F68(v63);
      v65 = v64;
      if (v62 && v64)
      {
        if ((sub_216BD39B8(&v151, v150) & 1) != 0)
          goto LABEL_129;
        sub_216B20C64(&v139, v62);
        sub_216B6E0CC(v138, (uint64_t)a3);
        v67 = v138[1];
        v66 = v139;
        v68 = v138[0];
      }
      else
      {
        v69 = sub_216B1E600((uint64_t)&v151);
        v70 = sub_216BA7040(v69);
        v71 = sub_216B1E600((uint64_t)&v150);
        v72 = sub_216BA7040(v71);
        if (!v70 || !v72)
        {
          if (v70 && v65)
          {
            if (sub_216B1E67C(v70) != v65 || sub_216BA7EA4(v65) - 7 < 0xFFFFFFFE)
              goto LABEL_129;
            goto LABEL_89;
          }
          if (v62 && v72 && sub_216B1E67C(v72) == v62 && sub_216BA7EA4(v62) - 7 >= 0xFFFFFFFE)
            goto LABEL_59;
          goto LABEL_129;
        }
        if ((sub_216BD39B8(&v151, v150) & 1) != 0)
          goto LABEL_129;
        sub_216B20C64(&v137, v70);
        sub_216B6E0CC(v136, (uint64_t)a3);
        v67 = v136[1];
        v66 = v137;
        v68 = v136[0];
      }
      if ((sub_216BDF7E0((uint64_t)a1, v66, 0x18Cu, v68, v67) & 1) != 0)
        goto LABEL_89;
      goto LABEL_131;
    default:
      goto LABEL_129;
  }
}

uint64_t sub_216BE0338(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t **v4;

  v1 = a1;
  v2 = a1[2];
  result = sub_216BD39B8(*a1, *a1[1]);
  if ((_DWORD)result)
  {
    v4 = v1 + 3;
    result = sub_216BE0670(v2, *v1[3], *v1[1]);
    if (!result)
    {
      v4 = v1 + 4;
      result = sub_216BE0670(v2, *v1[4], **v1);
      if (!result)
        return result;
      ++v1;
    }
    **v4 = result;
    result = sub_216BAB358(**v4);
    **v1 = result;
  }
  return result;
}

uint64_t sub_216BE03D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BC362C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BE0410(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BC35D4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BE0448(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD v7[2];
  uint64_t v8;

  v7[1] = a3;
  if (!sub_216BDF688(a1, a3, a5))
  {
    sub_216B2D410(v7);
    __asm { BR              X10 }
  }
  sub_216B2D410(&v8);
  return v8;
}

uint64_t sub_216BE0670(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a3;
  v14 = sub_216BAB358(a2);
  v5 = sub_216B1E600((uint64_t)&v14);
  v6 = sub_216BA7ED0(v5);
  v7 = sub_216B1E600((uint64_t)&v15);
  v8 = sub_216BA7ED0(v7);
  result = 0;
  if (v8 && v6)
  {
    if (sub_216BA3084(a1[1], 4u) && (v10 = sub_216BA7EA4(v6), v11 = sub_216BA7EA4(v8), sub_216BE41CC(v10, v11)))
    {
      v12 = *a1;
      sub_216B20C64(&v13, v8);
      return sub_216BC2AA4(v12, v13, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216BE0738(uint64_t a1, uint64_t a2, _WORD *a3)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v16[2];
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  _DWORD v20[6];

  sub_216BD9D24(v20);
  v19 = 0;
  v6 = sub_216B1E600(a2);
  if ((sub_216BB50F4(v6, *(_QWORD *)(a1 + 200), (uint64_t)v20, &v19) & 1) == 0)
  {
    v9 = sub_216B4D100(a2);
    sub_216BD433C(a1, v9, 2387, (uint64_t)v18);
    v8 = (uint64_t *)v18;
    goto LABEL_9;
  }
  if (sub_216B1E4E8((uint64_t)v20) && sub_216B1E520(v20))
  {
    v7 = sub_216B4D100(a2);
    sub_216BD433C(a1, v7, 2386, (uint64_t)v17);
    v8 = (uint64_t *)v17;
LABEL_9:
    sub_216B4B3B4(v8);
    v12 = 0;
    goto LABEL_10;
  }
  v10 = sub_216B1FD84(v20);
  if (v10 >= 0x100)
  {
    v13 = sub_216B4D100(a2);
    sub_216BD433C(a1, v13, 2388, (uint64_t)v16);
    v14 = sub_216B7A71C(v16, v10);
    sub_216B7A71C(v14, 0xFFu);
    v8 = v16;
    goto LABEL_9;
  }
  v11 = sub_216B1FD84(v20);
  sub_216BE086C(a3, v11);
  v12 = 1;
LABEL_10:
  sub_216B91D80(v20);
  return v12;
}

_WORD *sub_216BE086C(_WORD *result, unsigned __int8 a2)
{
  *result = *result & 0xFE00 | a2 | 0x100;
  return result;
}

uint64_t sub_216BE0884(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE v50[16];
  _BYTE v51[16];
  _BYTE v52[16];
  _BYTE v53[16];
  _BYTE v54[16];
  _BYTE v55[16];
  _BYTE v56[16];
  _BYTE v57[16];
  _BYTE v58[16];
  _BYTE v59[16];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[16];

  switch(sub_216BD5B40(a2))
  {
    case 0u:
      if (sub_216BD578C(*(_QWORD *)(a1 + 184)))
        goto LABEL_15;
      v61 = sub_216B52964(a2);
      v62 = v46;
      v47 = sub_216B1E600((uint64_t)&v61);
      v48 = sub_216B4D100(v47);
      sub_216BD433C(a1, v48, 2376, (uint64_t)v55);
      v43 = v55;
      goto LABEL_32;
    case 3u:
    case 5u:
      *(_QWORD *)&v60 = sub_216B52964(a2);
      *((_QWORD *)&v60 + 1) = v10;
      v11 = sub_216B1E600((uint64_t)&v60);
      v12 = sub_216B4D100(v11);
      sub_216BD433C(a1, v12, 2374, (uint64_t)&v61);
      v13 = sub_216B60EA8(&v61, (uint64_t)"in");
      sub_216B60EA8(v13, (uint64_t)"vertex");
      sub_216B4B3B4(&v61);
      v61 = sub_216B52964(a2);
      v62 = v14;
      v15 = (__int128 *)sub_216B1E600((uint64_t)&v61);
      v16 = sub_216B6DE0C(&v61);
      if (v15 == (__int128 *)v16)
        goto LABEL_6;
      v17 = (__int128 *)v16;
      while (1)
      {
        v60 = *v15;
        if (sub_216B4CE18((uint64_t)&v60) != 46)
          break;
        if (++v15 == v17)
        {
LABEL_6:
          v61 = sub_216B52964(a2);
          v62 = v18;
          sub_216B1E67C((uint64_t)&v61);
          goto LABEL_13;
        }
      }
      v44 = sub_216B4D100((uint64_t)&v60);
      sub_216BD433C(a1, v44, 2643, (uint64_t)v59);
      v43 = v59;
      goto LABEL_32;
    case 4u:
    case 6u:
      v61 = sub_216B52964(a2);
      v62 = v19;
      v20 = (__int128 *)sub_216B1E600((uint64_t)&v61);
      v21 = sub_216B6DE0C(&v61);
      if (v20 == (__int128 *)v21)
        goto LABEL_11;
      v22 = (__int128 *)v21;
      break;
    case 7u:
LABEL_15:
      v61 = sub_216B52964(a2);
      v62 = v33;
      v34 = (__int128 *)sub_216B1E600((uint64_t)&v61);
      v35 = sub_216B6DE0C(&v61);
      if (v34 == (__int128 *)v35)
      {
        v32 = 1;
      }
      else
      {
        v36 = (__int128 *)v35;
        v32 = 1;
        do
        {
          v60 = *v34;
          v37 = sub_216B4CE18((uint64_t)&v60);
          v38 = byte_216C19012[v37];
          if (byte_216C19012[v37])
          {
            if (sub_216BA7698(byte_216C19012[v37]))
            {
              if (sub_216BA7650(a3))
              {
                v39 = sub_216B4D100((uint64_t)&v60);
                sub_216BD433C(a1, v39, 4102, (uint64_t)v53);
                sub_216B4B3B4(v53);
                sub_216BD433C(a1, *a4, 3555, (uint64_t)v52);
                sub_216B4B3B4(v52);
              }
              sub_216BD4CA4(a3, v38);
              *a4 = sub_216B4D100((uint64_t)&v60);
            }
            else
            {
              sub_216BA76A8(v38);
              if (sub_216BA7680(a3))
              {
                v41 = sub_216B4D100((uint64_t)&v60);
                sub_216BD433C(a1, v41, 4102, (uint64_t)v51);
                sub_216B4B3B4(v51);
                sub_216BD433C(a1, *a5, 3555, (uint64_t)v50);
                sub_216B4B3B4(v50);
              }
              sub_216BD4CBC(a3, v38);
              *a5 = sub_216B4D100((uint64_t)&v60);
            }
          }
          else
          {
            v40 = sub_216B4D100((uint64_t)&v60);
            sub_216BD433C(a1, v40, 2493, (uint64_t)v54);
            sub_216B4B3B4(v54);
            v32 = 0;
          }
          ++v34;
        }
        while (v34 != v36);
      }
      return v32 & 1;
    default:
      v42 = sub_216B693F8(a2);
      sub_216BD433C(a1, v42, 2373, (uint64_t)v63);
      v43 = v63;
      goto LABEL_32;
  }
  while (1)
  {
    v60 = *v20;
    if (sub_216B4CE18((uint64_t)&v60) != 46)
      break;
    if (++v20 == v22)
    {
LABEL_11:
      v61 = sub_216B52964(a2);
      v62 = v23;
      if ((unint64_t)sub_216B1E67C((uint64_t)&v61) >= 2)
      {
        v61 = sub_216B52964(a2);
        v62 = v24;
        v25 = sub_216BE0CE4(&v61);
        v26 = sub_216B4D100(v25);
        sub_216BD433C(a1, v26, 4102, (uint64_t)v57);
        sub_216B4B3B4(v57);
        v61 = sub_216B52964(a2);
        v62 = v27;
        v28 = sub_216B1E600((uint64_t)&v61);
        v29 = sub_216B4D100(v28);
        sub_216BD433C(a1, v29, 3555, (uint64_t)v56);
        sub_216B4B3B4(v56);
      }
LABEL_13:
      v61 = sub_216B52964(a2);
      v62 = v30;
      v31 = sub_216BE0CE4(&v61);
      v32 = sub_216BE0738(a1, v31, a3);
      return v32 & 1;
    }
  }
  v45 = sub_216B4D100((uint64_t)&v60);
  sub_216BD433C(a1, v45, 2643, (uint64_t)v58);
  v43 = v58;
LABEL_32:
  sub_216B4B3B4(v43);
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_216BE0CE4(_QWORD *a1)
{
  return *a1 + 16 * a1[1] - 16;
}

uint64_t sub_216BE0CF4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8[2];

  v5 = sub_216BE0D70(a2);
  if ((v5 & 1) == 0)
  {
    sub_216BD433C(a1, a3, 2299, (uint64_t)v8);
    v6 = sub_216B60EA8(v8, (uint64_t)"fragment");
    sub_216B60EA8(v6, (uint64_t)"in");
    sub_216B4B3B4(v8);
  }
  return v5;
}

uint64_t sub_216BE0D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = a1;
  v19 = 0;
  v1 = sub_216B1E600((uint64_t)&v20);
  if ((sub_216BDF46C(v1, &v19) & 1) != 0)
    return 1;
  v2 = sub_216B1E600((uint64_t)&v20);
  if ((sub_216BD2F64(v2, &v19) & 1) != 0)
    return 1;
  v4 = sub_216B1E600((uint64_t)&v20);
  if ((sub_216BD8174(v4) & 1) != 0)
    return 0;
  v5 = sub_216B1E600((uint64_t)&v20);
  if ((sub_216BA81AC(v5) & 1) != 0)
    return 0;
  v6 = sub_216B1E600((uint64_t)&v20);
  result = sub_216BA76B8(v6);
  if (result)
  {
    v7 = sub_216B1E67C(result) + 16;
    v8 = (uint64_t *)sub_216B262E0(v7);
    v9 = sub_216BA7D24(v7);
    if (v8 == (uint64_t *)v9)
      return 1;
    v10 = (uint64_t *)v9;
    while (1)
    {
      v11 = *v8;
      v12 = (unsigned __int8 **)sub_216BA5E50(*v8);
      v13 = sub_216BA5E54(v11);
      if (v12 != (unsigned __int8 **)v13)
        break;
LABEL_17:
      ++v8;
      result = 1;
      if (v8 == v10)
        return result;
    }
    v14 = (unsigned __int8 **)v13;
    while (1)
    {
      v18 = sub_216BAB580(*v12);
      v15 = sub_216B1E600((uint64_t)&v18);
      v16 = sub_216BA7ED0(v15);
      LODWORD(v18) = 0;
      if (!v16)
        return 0;
      v17 = v16;
      if ((sub_216BD2F64(v16, &v18) & 1) == 0 && !sub_216BDF46C(v17, &v18))
        return 0;
      if (++v12 == v14)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_216BE0EB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  if (sub_216B29094((uint64_t)v8))
    return 0;
  v2 = (uint64_t *)sub_216B1E600((uint64_t)v8);
  v3 = sub_216B35430(v8);
  if (v2 == (uint64_t *)v3)
    return 0;
  v4 = (uint64_t *)v3;
  v5 = 0;
  do
  {
    v6 = *v2;
    if (v5 < sub_216BAAEAC(*v2))
      v5 = sub_216BAAEAC(v6);
    ++v2;
  }
  while (v2 != v4);
  return v5;
}

uint64_t sub_216BE0F4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  _BYTE v12[16];
  int v13[6];
  _QWORD v14[3];

  result = sub_216BAAEAC(*a2);
  if ((_DWORD)result != (_DWORD)a3)
  {
    sub_216BE1074(*a2);
    v14[0] = sub_216BAB358(*a2);
    v7 = sub_216B1E600((uint64_t)v14);
    v8 = sub_216BA7ED0(v7);
    if (v8)
    {
      v9 = v8;
      if (sub_216BA7EA4(v8) == 5 || sub_216BA7EA4(v9) == 6)
      {
        sub_216BD9D24(v14);
        if (sub_216BD9D28(*a2, a1[25], (uint64_t)v14))
        {
          sub_216BDEAD8(v13, v14);
          v10 = sub_216BE10AC(v13, a3);
          sub_216B91D80(v13);
          if (!v10)
          {
            v11 = sub_216B1E4E0((unsigned int *)*a2);
            sub_216BD433C((uint64_t)a1, v11, 4105, (uint64_t)v12);
            sub_216B4B3B4(v12);
          }
        }
        sub_216B91D80(v14);
      }
    }
    if (sub_216BAAEAC(*a2))
    {
      result = sub_216BC2A68(*a1, a3, *a2);
      *a2 = result;
    }
    else
    {
      return sub_216BC1FC0(*a2, a3);
    }
  }
  return result;
}

uint64_t sub_216BE1074(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BE4504(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

BOOL sub_216BE10AC(int *a1, int a2)
{
  unsigned int v3;
  unsigned int v4;

  v3 = dword_216C19064[a2 - 1];
  if (sub_216B1E4E8((uint64_t)a1))
    v4 = sub_216BE44C0(a1);
  else
    v4 = sub_216B2045C(a1);
  return v4 <= v3;
}

uint64_t sub_216BE10FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v14 = 0;
  v4 = (uint64_t *)sub_216BAEDA0(v15);
  v5 = sub_216BDA6BC((uint64_t)v15);
  if (v4 != (uint64_t *)v5)
  {
    v6 = (uint64_t *)v5;
    do
    {
      v7 = *v4++;
      v13 = sub_216BAAEAC(v7);
      v14 = *(_DWORD *)sub_216B21E8C(&v14, &v13);
    }
    while (v4 != v6);
  }
  v8 = (uint64_t *)sub_216BAEDA0(v15);
  result = sub_216BDA6BC((uint64_t)v15);
  if (v8 != (uint64_t *)result)
  {
    v10 = (uint64_t *)result;
    do
    {
      v11 = sub_216BAAEAC(*v8);
      v12 = *v8;
      if (v11)
      {
        result = sub_216BAAEAC(v12);
        if ((_DWORD)result != v14)
        {
          result = sub_216BC2A68(*a1, v14, *v8);
          *v8 = result;
        }
      }
      else
      {
        result = sub_216BC1FC0(v12, v14);
      }
      ++v8;
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t sub_216BE11E4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216BAAEAC(*a2);
  result = sub_216BAAEAC(*a3);
  if ((_DWORD)v6 != (_DWORD)result)
  {
    v8 = result;
    if ((_DWORD)v6)
    {
      if ((_DWORD)result)
      {
        v9 = *a1;
        if (v6 <= v8)
        {
          result = sub_216BC2A68(v9, v8, *a2);
          *a2 = result;
        }
        else
        {
          result = sub_216BC2A68(v9, v6, *a3);
          *a3 = result;
        }
        return result;
      }
      v10 = *a3;
      LODWORD(v8) = v6;
    }
    else
    {
      v10 = *a2;
    }
    return sub_216BC1FC0(v10, v8);
  }
  return result;
}

uint64_t sub_216BE1288(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  int v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  _BYTE v12[16];
  uint64_t v13[2];
  _BYTE v14[20];
  int v15;

  v15 = a2;
  if (sub_216BA7650((unsigned __int16 *)&v15))
  {
    v7 = sub_216BA7674((unsigned __int16 *)(a1 + 440));
    if (v7 == sub_216BA7674((unsigned __int16 *)&v15))
    {
      sub_216BD433C(a1, a3, 4104, (uint64_t)v14);
      sub_216B4B3B4(v14);
      if (sub_216B4B4A8((_DWORD *)(a1 + 444)))
      {
        sub_216BD433C(a1, a3, 3554, (uint64_t)v13);
        v8 = 1;
      }
      else
      {
        sub_216BD433C(a1, *(_DWORD *)(a1 + 444), 3554, (uint64_t)v13);
        v8 = 0;
      }
      sub_216B77520(v13, v8);
      sub_216B4B3B4(v13);
    }
  }
  result = sub_216BA7680((unsigned __int16 *)&v15);
  if ((_DWORD)result)
  {
    v10 = sub_216BA768C((unsigned __int16 *)(a1 + 440));
    result = sub_216BA768C((unsigned __int16 *)&v15);
    if (v10 == (_DWORD)result)
    {
      sub_216BD433C(a1, a4, 4104, (uint64_t)v12);
      sub_216B4B3B4(v12);
      if (sub_216B4B4A8((_DWORD *)(a1 + 448)))
      {
        sub_216BD433C(a1, a4, 3554, (uint64_t)v13);
        v11 = 1;
      }
      else
      {
        sub_216BD433C(a1, *(_DWORD *)(a1 + 448), 3554, (uint64_t)v13);
        v11 = 0;
      }
      sub_216B77520(v13, v11);
      return sub_216B4B3B4(v13);
    }
  }
  return result;
}

uint64_t sub_216BE13F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19[2];
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a3;
  v10 = (uint64_t *)sub_216B1E600((uint64_t)v20);
  v11 = sub_216B35430(v20);
  if (v10 == (uint64_t *)v11)
  {
LABEL_7:
    sub_216BD433C(a1, a4, 1875, (uint64_t)v19);
    v17 = sub_216B89E58(v19, a5);
    sub_216B89E58(v17, a6);
    sub_216B4B3B4(v19);
    return 0;
  }
  else
  {
    v12 = (uint64_t *)v11;
    while (1)
    {
      v13 = *v10;
      v14 = (uint64_t *)sub_216BA5E50(*v10);
      v15 = sub_216BA5E54(v13);
      if (v14 != (uint64_t *)v15)
        break;
LABEL_6:
      if (++v10 == v12)
        goto LABEL_7;
    }
    while (1)
    {
      v16 = *v14;
      if (sub_216BDB8D0(a1, *v14) == a5)
        return sub_216B3DB48(v16);
      if (++v14 == (uint64_t *)v15)
        goto LABEL_6;
    }
  }
}

uint64_t sub_216BE1500(uint64_t *a1, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5, int a6)
{
  _BYTE *v12;
  int v13;
  char v14;
  char v15;
  int v16;
  int v17;
  char v18;
  int v19;
  uint64_t *v20;
  const void **v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35[2];
  const void *v36[7];
  uint64_t v37[2];
  int v38;
  uint64_t v39;

  v12 = (_BYTE *)sub_216B4AA68(a5);
  v38 = 0;
  v13 = sub_216BE1818((char)*v12);
  if (v13 == -1)
  {
    v17 = sub_216BE1840((char)*v12);
    if (v17 == -1)
    {
      v28 = sub_216BE187C((char)*v12);
      if (v28 == -1)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v14 |= *((_BYTE *)&v38 + v28) != 0;
          *((_BYTE *)&v38 + v28) = 1;
          v29 = (char)*++v12;
          v28 = sub_216BE187C(v29);
        }
        while (v28 != -1);
      }
LABEL_14:
      if (*v12)
      {
        sub_216BD433C((uint64_t)a1, a4, 2152, (uint64_t)v36);
        sub_216B1E684(v37, v12, 1);
        v20 = sub_216B4B340((uint64_t *)v36, v37[0], v37[1]);
        sub_216B848DC(v35, a6);
        v21 = (const void **)v20;
LABEL_16:
        sub_216B7A280(v21, v35);
        sub_216B4B3B4(v36);
        sub_216B2D410(&v39);
        return v39;
      }
    }
    else
    {
      v14 = 0;
      while (1)
      {
        if (*((_BYTE *)&v38 + v17))
          v14 = 1;
        *((_BYTE *)&v38 + v17) = 1;
        v19 = *++v12;
        v18 = v19;
        if (!v19)
          break;
        v17 = sub_216BE1840(v18);
        if (v17 == -1)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v14 = 0;
    while (1)
    {
      if (*((_BYTE *)&v38 + v13))
        v14 = 1;
      *((_BYTE *)&v38 + v13) = 1;
      v16 = *++v12;
      v15 = v16;
      if (!v16)
        break;
      v13 = sub_216BE1818(v15);
      if (v13 == -1)
        goto LABEL_14;
    }
  }
  v22 = sub_216B4AA80(a5);
  if (v22 >= 5)
  {
    sub_216B29078(v36);
    sub_216B1E414(v35, 64, v22, 0);
    sub_216B243EC(v35, v36, 0xAu, 0, 0);
    sub_216BD433C((uint64_t)a1, a4, 3181, (uint64_t)v34);
    v23 = sub_216B24850((uint64_t)v36);
    v25 = sub_216B4B340(v34, v23, v24);
    sub_216B848DC(&v33, a6);
    sub_216B7A280(v25, &v33);
    sub_216B4B3B4(v34);
    sub_216B2D410(&v39);
    sub_216B1D998(v35);
    sub_216B2489C(v36);
    return v39;
  }
  v26 = sub_216BA734C(a2);
  if (v26 != 4)
  {
    while (!*((_BYTE *)&v38 + v26))
    {
      if (++v26 == 4)
        goto LABEL_22;
    }
    sub_216BD433C((uint64_t)a1, a4, 2151, (uint64_t)v36);
    sub_216BE18A4(v36, a2);
    sub_216B848DC(v35, a6);
    v21 = v36;
    goto LABEL_16;
  }
LABEL_22:
  if (v22 == 1)
  {
    v27 = sub_216B1E67C(a2);
    sub_216B20C64(&v39, v27);
  }
  else
  {
    if ((v14 & 1) != 0)
      *a3 = 0;
    v30 = *a1;
    v31 = sub_216B1E67C(a2);
    return sub_216BD30A0(v30, v31, v22);
  }
  return v39;
}

uint64_t sub_216BE1818(int a1)
{
  uint64_t v1;

  v1 = a1 - 119;
  if (v1 > 3)
    return 0xFFFFFFFFLL;
  else
    return dword_216C190B0[v1];
}

uint64_t sub_216BE1840(int a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  if (a1 == 114)
    v1 = 0;
  else
    v1 = -1;
  if (a1 == 103)
    v2 = 1;
  else
    v2 = v1;
  if (a1 == 98)
    v3 = 2;
  else
    v3 = -1;
  if (a1 == 97)
    v3 = 3;
  if (a1 <= 102)
    return v3;
  else
    return v2;
}

uint64_t sub_216BE187C(int a1)
{
  uint64_t v1;

  v1 = a1 - 112;
  if (v1 > 4)
    return 0xFFFFFFFFLL;
  else
    return dword_216C19070[v1];
}

uint64_t sub_216BE18A8(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t *v12;
  unsigned int **v13;
  int v14;
  uint64_t *v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19[2];
  uint64_t v20;
  uint64_t v21;

  v20 = a5;
  v21 = a6;
  if ((unint64_t)sub_216B1E67C((uint64_t)&v20) >= 2)
  {
    sub_216BD433C((uint64_t)a1, a4, 2116, (uint64_t)v19);
    v12 = sub_216B77520(v19, 2);
    v13 = (unsigned int **)sub_216B212F0(&v20, 1);
    v14 = sub_216B1E4E0(*v13);
    sub_216B848DC(&v18, v14);
    sub_216B7A280(v12, &v18);
    v15 = v19;
LABEL_5:
    sub_216B4B3B4(v15);
    return 0;
  }
  if (sub_216B29094((uint64_t)&v20))
  {
    sub_216BD433C((uint64_t)a1, a4, 2101, (uint64_t)v17);
    v15 = (uint64_t *)v17;
    goto LABEL_5;
  }
  return sub_216BC23C8(*a1, a2, a3, 0, v20, v21, a7);
}

uint64_t sub_216BE19A4(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v56;
  unsigned int **v57;
  int v58;
  uint64_t *v59;
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62;
  uint64_t v63[2];
  uint64_t v64[2];
  uint64_t v65;
  _BYTE v66[16];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = a2;
  v67 = a5;
  v68 = a6;
  if (sub_216B1E67C((uint64_t)&v67) == 1)
  {
    v12 = (uint64_t *)sub_216B212F0(&v67, 0);
    v64[0] = sub_216BAB358(*v12);
    v13 = sub_216B1E600((uint64_t)v64);
    if (sub_216BAEC44(v13))
    {
      v14 = *a1;
      v15 = a3;
      v16 = a7;
      v17 = v67;
      v18 = v68;
      v19 = a2;
      v20 = 1;
      return sub_216BC23C8(v14, v19, v15, v20, v17, v18, v16);
    }
  }
  v21 = sub_216B1E600((uint64_t)&v69);
  v22 = sub_216B3DB48(v21);
  v23 = sub_216BA734C(v22);
  v24 = sub_216B1E67C((uint64_t)&v67);
  if (v24 && v23 >= 1)
  {
    v25 = 0;
    v26 = v24 - 1;
    do
    {
      v27 = (uint64_t *)sub_216B212F0(&v67, v25);
      v64[0] = sub_216BAB358(*v27);
      v28 = sub_216B1E600((uint64_t)v64);
      if (sub_216BAEC44(v28))
      {
        --v23;
      }
      else
      {
        v29 = sub_216B1E600((uint64_t)v64);
        v30 = sub_216BA72BC(v29);
        v31 = sub_216B1E600((uint64_t)v64);
        v32 = sub_216BA7388(v31);
        if (!(v30 | v32))
          return 0;
        if (v30)
          v33 = sub_216BA734C(v30);
        else
          v33 = sub_216BC1310(v32);
        v23 -= v33;
      }
      v34 = v25 + 1;
      if (v26 == v25)
        break;
      ++v25;
    }
    while (v23 > 0);
    if (v23 <= 0)
      goto LABEL_31;
  }
  else if (v23 < 1)
  {
    v34 = 0;
LABEL_31:
    if (sub_216B1E67C((uint64_t)&v67) == v34)
    {
      v14 = *a1;
      v19 = v69;
      v15 = a3;
      v16 = a7;
      v17 = v67;
      v18 = v68;
      v20 = 0;
      return sub_216BC23C8(v14, v19, v15, v20, v17, v18, v16);
    }
    sub_216BD433C((uint64_t)a1, a4, 2116, (uint64_t)v64);
    v56 = sub_216B77520(v64, 1);
    v57 = (unsigned int **)sub_216B212F0(&v67, v34);
    v58 = sub_216B1E4E0(*v57);
    sub_216B848DC(&v65, v58);
    sub_216B7A280(v56, &v65);
    goto LABEL_37;
  }
  sub_216BD433C((uint64_t)a1, a4, 2019, (uint64_t)v66);
  sub_216B4B3B4(v66);
  if (v22)
  {
    v35 = (uint64_t *)sub_216B1E600((uint64_t)&v67);
    v36 = sub_216B35430(&v67);
    if (v35 == (uint64_t *)v36)
    {
      v38 = 0;
    }
    else
    {
      v37 = (uint64_t *)v36;
      v38 = 0;
      do
      {
        v39 = (unsigned int *)*v35;
        v65 = sub_216BAB358(*v35);
        v40 = sub_216B1E600((uint64_t)&v65);
        if (sub_216BAEC44(v40))
        {
          v41 = sub_216B1E4E0(v39);
          sub_216BD433C((uint64_t)a1, v41, 3798, (uint64_t)v64);
          sub_216B1E684(v63, &aXyzw[v38], 1);
          v42 = sub_216B4B340(v64, v63[0], v63[1]);
          v43 = sub_216B77520(v42, 0);
          sub_216BC1C8C((uint64_t)v39);
          v62 = v44;
          sub_216B7A280(v43, &v62);
          sub_216B4B3B4(v64);
          ++v38;
        }
        else
        {
          v45 = sub_216B1E600((uint64_t)&v65);
          v46 = sub_216BA72BC(v45);
          v47 = sub_216B1E600((uint64_t)&v65);
          v48 = sub_216BA7388(v47);
          if (v46)
            v49 = sub_216BA734C(v46);
          else
            v49 = sub_216BC1310(v48);
          v50 = v49;
          v51 = sub_216B1E4E0(v39);
          sub_216BD433C((uint64_t)a1, v51, 3798, (uint64_t)v64);
          sub_216B1E684(v61, &aXyzw[v38], v50);
          v52 = sub_216B4B340(v64, v61[0], v61[1]);
          v53 = sub_216B77520(v52, 1);
          sub_216BC1C8C((uint64_t)v39);
          v62 = v54;
          sub_216B7A280(v53, &v62);
          sub_216B4B3B4(v64);
          v38 += v50;
        }
        ++v35;
      }
      while (v35 != v37);
    }
    sub_216BD433C((uint64_t)a1, a7, 3799, (uint64_t)v64);
    sub_216B1E684(v60, &aXyzw[v38], v23);
    v59 = sub_216B4B340(v64, v60[0], v60[1]);
    sub_216B7A71C(v59, v23 > 1);
LABEL_37:
    sub_216B4B3B4(v64);
  }
  return 0;
}

uint64_t sub_216BE1D7C(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int **v40;
  int v41;
  unsigned int **v42;
  unsigned int v43;
  _BYTE v45[16];
  _BYTE v46[16];
  uint64_t v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[6];

  v52[5] = *MEMORY[0x24BDAC8D0];
  v50 = a6;
  v51 = a2;
  v49 = a5;
  if (sub_216B1E67C((uint64_t)&v49) == 1)
  {
    v12 = (uint64_t *)sub_216B212F0(&v49, 0);
    v52[0] = sub_216BAB358(*v12);
    v13 = sub_216B1E600((uint64_t)v52);
    if (sub_216BAEC44(v13))
    {
      v14 = *a1;
      v15 = a3;
      v16 = a7;
      v17 = v49;
      v18 = v50;
      v19 = a2;
      v20 = 1;
      return sub_216BC23C8(v14, v19, v15, v20, v17, v18, v16);
    }
  }
  v21 = sub_216B1E600((uint64_t)&v51);
  v22 = sub_216B3DB48(v21);
  v23 = sub_216BC1310(v22);
  v24 = sub_216B1E67C((uint64_t)&v49);
  v25 = v24;
  if (!v24 || v23 < 1)
  {
    if (v23 >= 1)
    {
LABEL_16:
      sub_216BD433C((uint64_t)a1, a4, 2019, (uint64_t)v45);
      v33 = (uint64_t *)v45;
      goto LABEL_27;
    }
    v32 = 0;
LABEL_18:
    if (sub_216B1E67C((uint64_t)&v49) != v32)
    {
      sub_216BD433C((uint64_t)a1, a4, 2116, (uint64_t)v52);
      v39 = sub_216B77520(v52, 1);
      v40 = (unsigned int **)sub_216B212F0(&v49, v32);
      v41 = sub_216B1E4E0(*v40);
      sub_216B848DC(&v48, v41);
      sub_216B7A280(v39, &v48);
      v33 = v52;
      goto LABEL_27;
    }
    v14 = *a1;
    v18 = v50;
    v19 = v51;
    v15 = a3;
    v16 = a7;
    v17 = v49;
    v20 = 0;
    return sub_216BC23C8(v14, v19, v15, v20, v17, v18, v16);
  }
  v26 = 0;
  v27 = v24 - 1;
  while (1)
  {
    v28 = (uint64_t *)sub_216B212F0(&v49, v26);
    v48 = sub_216BAB358(*v28);
    v29 = sub_216B1E600((uint64_t)&v48);
    if (sub_216BAEC44(v29))
    {
      --v23;
      goto LABEL_11;
    }
    v30 = sub_216B1E600((uint64_t)&v48);
    v31 = sub_216BA72BC(v30);
    if (!v31)
      break;
    v23 -= sub_216BA734C(v31);
LABEL_11:
    v32 = v26 + 1;
    if (v27 != v26)
    {
      ++v26;
      if (v23 > 0)
        continue;
    }
    if (v23 > 0)
      goto LABEL_16;
    goto LABEL_18;
  }
  v35 = sub_216B1E600((uint64_t)&v48);
  if (!sub_216BD6164(v35))
    return 0;
  if (v25 == 1 && !v26)
  {
    sub_216B85C18(v52);
    v36 = (_QWORD *)sub_216B212F0(&v49, 0);
    sub_216B268AC((uint64_t)v52, v36);
    v37 = *a1;
    v38 = v51;
    sub_216B2D798(v47, v52);
    v34 = sub_216BC23C8(v37, v38, a3, 2, v47[0], v47[1], a7);
    sub_216B1FF6C(v52);
    return v34;
  }
  v42 = (unsigned int **)sub_216B212F0(&v49, v26);
  v43 = sub_216B1E4E0(*v42);
  sub_216BD433C((uint64_t)a1, v43, 2400, (uint64_t)v46);
  v33 = (uint64_t *)v46;
LABEL_27:
  sub_216B4B3B4(v33);
  return 0;
}

uint64_t sub_216BE2064(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE v14[16];
  _BYTE v15[16];

  if (!a2)
    return 0;
  v3 = (_DWORD *)sub_216BD5F44(a2);
  if (sub_216BA75F0(v3) && sub_216BA75F0(v3) != 7)
  {
    v11 = sub_216B693F8((uint64_t)v3);
    sub_216BD433C(a1, v11, 3124, (uint64_t)v15);
    sub_216B4B3B4(v15);
    v5 = sub_216B693F8((uint64_t)v3);
    v6 = v14;
    v7 = v14;
    v8 = a1;
    v9 = 3773;
    goto LABEL_8;
  }
  v13 = sub_216B2037C((uint64_t)v3);
  v4 = sub_216B1E600((uint64_t)&v13);
  if (sub_216BD6AAC(v4))
  {
    v5 = sub_216B693F8((uint64_t)v3);
    v6 = v12;
    v7 = v12;
    v8 = a1;
    v9 = 2302;
LABEL_8:
    sub_216BD433C(v8, v5, v9, (uint64_t)v7);
    sub_216B4B3B4(v6);
    return 0;
  }
  return 1;
}

uint64_t sub_216BE214C(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a6;
  v45 = a2;
  v43 = a5;
  v11 = sub_216B1E600((uint64_t)&v45);
  v12 = sub_216B3DB48(v11);
  v13 = sub_216B1E67C(v12);
  v14 = (unsigned int **)sub_216BAEDA0(&v43);
  v15 = v13 + 16;
  v16 = (uint64_t *)sub_216B262E0(v13 + 16);
  v17 = sub_216BA7D24(v15);
  if (v16 == (uint64_t *)v17)
  {
LABEL_13:
    if (v14 == (unsigned int **)sub_216BDA6BC((uint64_t)&v43))
      return sub_216BC23C8(*a1, v45, a3, 0, v43, v44, a7);
    sub_216BD433C((uint64_t)a1, a4, 2116, (uint64_t)v41);
    v27 = sub_216B77520(v41, 4);
    v28 = sub_216B1E4E0(*v14);
    sub_216B848DC(&v40, v28);
    v29 = &v40;
LABEL_16:
    sub_216B7A280(v27, v29);
    v36 = v41;
LABEL_17:
    sub_216B4B3B4(v36);
  }
  else
  {
    v18 = (uint64_t *)v17;
    while (1)
    {
      v19 = *v16;
      if (v14 == (unsigned int **)sub_216BDA6BC((uint64_t)&v43))
      {
        sub_216BD433C((uint64_t)a1, a4, 2019, (uint64_t)v42);
        v36 = (uint64_t *)v42;
        goto LABEL_17;
      }
      v20 = (unsigned __int8 **)sub_216BA5E50(v19);
      v21 = sub_216BA5E54(v19);
      if (v20 != (unsigned __int8 **)v21)
        break;
LABEL_12:
      if (++v16 == v18)
        goto LABEL_13;
    }
    v22 = (unsigned __int8 **)v21;
    while (1)
    {
      v23 = *v20;
      if (!*v20 || !*v14)
        break;
      v41[0] = sub_216BAB580(*v20);
      v24 = sub_216BAB358((uint64_t)*v14);
      if (sub_216BD39B8(v41, v24))
      {
        v30 = sub_216B1E4E0(*v14);
        sub_216BD433C((uint64_t)a1, v30, 2284, (uint64_t)v41);
        v31 = sub_216B77520(v41, 1);
        v40 = sub_216BAB580(v23);
        v32 = (uint64_t *)sub_216BDF234((uint64_t)v31, (uint64_t)&v40);
        v33 = sub_216B77520(v32, 0);
        v39 = sub_216BAB358((uint64_t)*v14);
        v34 = (uint64_t *)sub_216BDF234((uint64_t)v33, (uint64_t)&v39);
        v27 = sub_216B77520(v34, 0);
        sub_216BC1C8C((uint64_t)*v14);
        v38 = v35;
        v29 = &v38;
        goto LABEL_16;
      }
      v25 = (_DWORD *)sub_216B3DB48((uint64_t)v23);
      v26 = sub_216BA7620(v25);
      if ((_DWORD)v26)
        sub_216BE0F4C(a1, (uint64_t *)v14, v26);
      ++v14;
      if (++v20 == v22)
        goto LABEL_12;
    }
  }
  return 0;
}

uint64_t sub_216BE23B0(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  v37 = a5;
  v38 = a6;
  sub_216B2D410(&v36);
  v11 = sub_216B1E600((uint64_t)&v39);
  v12 = sub_216BA7ED8(v11);
  if (v12)
    v13 = sub_216B1E67C(v12);
  else
    v13 = v39;
  v36 = v13;
  v14 = sub_216B1E600((uint64_t)&v36);
  v15 = sub_216BAED9C(v14);
  v16 = (uint64_t *)sub_216B1E600((uint64_t)&v37);
  v17 = sub_216B4CBC4(v15);
  if (v17)
  {
    v18 = v17;
    while (1)
    {
      if (v16 == (uint64_t *)sub_216B35430(&v37))
      {
        sub_216BD433C((uint64_t)a1, a4, 2019, (uint64_t)v35);
        v23 = (uint64_t *)v35;
        goto LABEL_14;
      }
      v34[0] = sub_216BAB358(*v16);
      v19 = sub_216B1E67C(v15);
      if (sub_216BD39B8(v34, v19))
        break;
      ++v16;
      if (!--v18)
        goto LABEL_9;
    }
    v24 = sub_216B1E4E0((unsigned int *)*v16);
    sub_216BD433C((uint64_t)a1, v24, 2284, (uint64_t)v34);
    v25 = sub_216B77520(v34, 1);
    v33 = sub_216B1E67C(v15);
    v26 = (uint64_t *)sub_216BDF234((uint64_t)v25, (uint64_t)&v33);
    v27 = sub_216B77520(v26, 0);
    v32 = sub_216BAB358(*v16);
    v28 = (uint64_t *)sub_216BDF234((uint64_t)v27, (uint64_t)&v32);
    v20 = sub_216B77520(v28, 0);
    sub_216BC1C8C(*v16);
    v31 = v29;
    v22 = &v31;
  }
  else
  {
LABEL_9:
    if (v16 == (uint64_t *)sub_216B35430(&v37))
      return sub_216BC23C8(*a1, v39, a3, 0, v37, v38, a7);
    sub_216BD433C((uint64_t)a1, a4, 2116, (uint64_t)v34);
    v20 = sub_216B77520(v34, 0);
    v21 = sub_216B1E4E0((unsigned int *)*v16);
    sub_216B848DC(&v33, v21);
    v22 = &v33;
  }
  sub_216B7A280(v20, v22);
  v23 = v34;
LABEL_14:
  sub_216B4B3B4(v23);
  return 0;
}

uint64_t sub_216BE25B8(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = a6;
  v44 = a2;
  v42 = a5;
  v13 = sub_216B1E600((uint64_t)&v44);
  v14 = sub_216BA7040(v13);
  if (v14)
  {
    v15 = sub_216B1E67C(v14);
    if (sub_216BD3024(v15))
      sub_216BE10FC(a1, a5, a6);
    return sub_216BE19A4(a1, v44, a3, a4, a5, a6, a7);
  }
  v17 = sub_216B1E600((uint64_t)&v44);
  if (sub_216BD6164(v17))
  {
    sub_216BE10FC(a1, a5, a6);
    return sub_216BE1D7C(a1, v44, a3, a4, a5, a6, a7);
  }
  v18 = sub_216B1E600((uint64_t)&v44);
  if (sub_216BB216C(v18))
    return sub_216BE214C(a1, v44, a3, a4, a5, a6, a7);
  v19 = sub_216B1E600((uint64_t)&v44);
  v20 = sub_216BA7ED4(v19);
  if (v20)
  {
    v41 = sub_216B1E67C(v20);
    v21 = sub_216B1E600((uint64_t)&v41);
    if (sub_216BD2FB4(v21))
      sub_216BE10FC(a1, a5, a6);
    v22 = v44;
    v23 = a3;
    v24 = a4;
    v25 = a7;
    v26 = a1;
    v27 = a5;
    v28 = a6;
    return sub_216BE23B0(v26, v22, v23, v24, v27, v28, v25);
  }
  v29 = sub_216B1E600((uint64_t)&v44);
  v30 = sub_216BA7ED8(v29);
  if (v30)
  {
    v31 = v30;
    v32 = *a1;
    v33 = sub_216B2037C(v30);
    v34 = sub_216B1E67C((uint64_t)&v42);
    v41 = sub_216BD38AC(v32, v33, v34);
    v35 = sub_216B1E600((uint64_t)&v41);
    v36 = sub_216BA7ED4(v35);
    sub_216B20C64(&v40, v36);
    sub_216B203A4(v31, v40);
    v41 = sub_216B1E67C(v36);
    v37 = sub_216B1E600((uint64_t)&v41);
    if (sub_216BD2FB4(v37))
      sub_216BE10FC(a1, v42, v43);
    sub_216B20C64(&v39, v31);
    v27 = v42;
    v28 = v43;
    v23 = a3;
    v24 = a4;
    v25 = a7;
    v22 = v39;
    v26 = a1;
    return sub_216BE23B0(v26, v22, v23, v24, v27, v28, v25);
  }
  v38 = sub_216B1E600((uint64_t)&v44);
  if (sub_216BD2FB4(v38))
    sub_216BE10FC(a1, a5, a6);
  return sub_216BE18A8(a1, v44, a3, a4, a5, a6, a7);
}

uint64_t sub_216BE2828(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v5 = a1;
  v3 = sub_216B1E600((uint64_t)&v5);
  result = sub_216BA7ED0(v3);
  if (result)
  {
    switch(sub_216BA7EA4(result))
    {
      case 3u:
        result = a2 & 1;
        break;
      case 4u:
        result = (a2 >> 1) & 1;
        break;
      case 5u:
        result = (a2 >> 2) & 1;
        break;
      case 6u:
        result = (a2 >> 3) & 1;
        break;
      case 7u:
        result = (a2 >> 4) & 1;
        break;
      case 8u:
      case 9u:
      case 0xAu:
        result = (a2 >> 5) & 1;
        break;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        result = (a2 >> 6) & 1;
        break;
      case 0xEu:
      case 0xFu:
      case 0x10u:
        result = (a2 >> 7) & 1;
        break;
      case 0x11u:
      case 0x12u:
      case 0x13u:
        result = (a2 >> 8) & 1;
        break;
      case 0x14u:
      case 0x15u:
      case 0x16u:
        result = (a2 >> 9) & 1;
        break;
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        result = (a2 & 0xC00) != 0;
        break;
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
        result = (a2 >> 11) & 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

const void **sub_216BE28F0(const void **result, char *a2, int *a3, const void **a4)
{
  int v6;
  int v7;
  uint64_t v8[2];
  uint64_t v9[2];

  if ((*a3 & result) != 0)
  {
    v6 = (int)result;
    sub_216B1E678((int)v9, a2);
    result = sub_216B341A4(a4, v9[0], v9[1]);
    v7 = *a3 ^ v6;
    *a3 = v7;
    if (v7)
    {
      sub_216B1E678((int)v8, ", ");
      return sub_216B341A4(a4, v8[0], v8[1]);
    }
  }
  return result;
}

BOOL sub_216BE2970(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int **v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v12[2];
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v6 = sub_216B1E67C((uint64_t)v13);
  if (v6 != a4)
  {
    v7 = (unsigned int **)sub_216BE2A10(v13);
    v8 = sub_216B1E4E0(*v7);
    sub_216BD433C(a1, v8, 2516, (uint64_t)v12);
    v9 = sub_216B1E67C((uint64_t)v13) > (unint64_t)a4;
    v10 = sub_216B848B0(v12, v9);
    sub_216B7A71C(v10, a4);
    sub_216B4B3B4(v12);
  }
  return v6 == a4;
}

uint64_t sub_216BE2A10(_QWORD *a1)
{
  return *a1 + 8 * a1[1] - 8;
}

uint64_t sub_216BE2A20(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int **v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int **v42;
  unsigned int v43;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  __n128 v56;
  _QWORD v57[2];
  uint64_t v58;

  v57[0] = a2;
  v57[1] = a3;
  v10 = sub_216B1E600((uint64_t)v57);
  sub_216B1E684(&v56, v10, a5);
  v11 = sub_216B212F0(v57, a5);
  v12 = sub_216B35430(v57);
  sub_216BC0E28(&v55, v11, v12);
  if ((a6 & 1) == 0)
    sub_216B34090(&v56, &v55);
  v54 = sub_216BE2DF0(a1, v56.n128_i64[0], v56.n128_i64[1], a4);
  if (!sub_216B2D76C(&v54))
    goto LABEL_19;
  v53 = sub_216BE2DF0(a1, v55.n128_i64[0], v55.n128_i64[1], a4);
  if (!sub_216B2D76C(&v53))
    goto LABEL_19;
  if (!sub_216BD39D0(&v54, v53))
  {
    v13 = sub_216B1E600((uint64_t)&v53);
    if ((sub_216BAEC44(v13) & 1) != 0)
    {
      v14 = sub_216B1E600((uint64_t)&v54);
      v15 = sub_216BA7040(v14);
      if (!v15)
      {
        v42 = (unsigned int **)sub_216B212F0(v57, a5);
        v43 = sub_216B1E4E0(*v42);
        sub_216BD433C(a1, v43, 1913, (uint64_t)v45);
        v41 = v45;
        goto LABEL_18;
      }
      v16 = v15;
      v17 = sub_216B1E67C(v15);
      if (v17 == sub_216B1E600((uint64_t)&v53))
        return v54;
      v18 = *(unsigned int **)sub_216B212F0(&v55, 0);
      v52 = v18;
      v51 = *(_QWORD *)sub_216B212F0(&v56, 0);
      if (a6)
      {
        sub_216B20BF4((uint64_t *)&v52, &v51);
        v18 = v52;
      }
      v19 = sub_216B1E4E0(v18);
      sub_216BD433C(a1, v19, 2216, (uint64_t)v50);
      sub_216BC1C8C((uint64_t)v52);
      v49 = v20;
      v21 = sub_216B7A280(v50, &v49);
      sub_216BC1C8C(v51);
      v48 = v22;
      sub_216B7A280(v21, &v48);
      sub_216B4B3B4(v50);
      v23 = (unsigned int **)sub_216B212F0(&v56, 0);
      v24 = sub_216B1E4E0(*v23);
      sub_216BD433C(a1, v24, 3439, (uint64_t)v50);
      v25 = (uint64_t *)sub_216B212F0(&v56, 0);
      v49 = sub_216BAB358(*v25);
      sub_216BDF234((uint64_t)v50, (uint64_t)&v49);
      v26 = (uint64_t *)sub_216B212F0(&v56, 0);
      sub_216BC1C8C(*v26);
      v48 = v27;
      sub_216B7A280(v50, &v48);
      sub_216B4B3B4(v50);
      v28 = (unsigned int **)sub_216B212F0(&v55, 0);
      v29 = sub_216B1E4E0(*v28);
      sub_216BD433C(a1, v29, 3440, (uint64_t)v50);
      v30 = (uint64_t *)sub_216B212F0(&v55, 0);
      v49 = sub_216BAB358(*v30);
      sub_216BDF234((uint64_t)v50, (uint64_t)&v49);
      sub_216BE18A4(v50, v16);
      v31 = sub_216B1E67C(v16);
      sub_216BE18A4(v50, v31);
      v32 = (uint64_t *)sub_216B212F0(&v55, 0);
      sub_216BC1C8C(*v32);
      v48 = v33;
      v34 = v50;
      v35 = &v48;
    }
    else
    {
      v36 = *(unsigned int **)sub_216B212F0(&v55, 0);
      v52 = v36;
      v51 = *(_QWORD *)sub_216B212F0(&v56, 0);
      if (a6)
      {
        sub_216B20BF4((uint64_t *)&v52, &v51);
        v36 = v52;
      }
      v37 = sub_216B1E4E0(v36);
      sub_216BD433C(a1, v37, 2217, (uint64_t)v50);
      v49 = sub_216BAB358((uint64_t)v52);
      sub_216BDF234((uint64_t)v50, (uint64_t)&v49);
      v48 = sub_216BAB358(v51);
      sub_216BDF234((uint64_t)v50, (uint64_t)&v48);
      sub_216BC1C8C((uint64_t)v52);
      v47 = v38;
      v39 = sub_216B7A280(v50, &v47);
      sub_216BC1C8C(v51);
      v46 = v40;
      v35 = &v46;
      v34 = v39;
    }
    sub_216B7A280(v34, v35);
    v41 = v50;
LABEL_18:
    sub_216B4B3B4(v41);
LABEL_19:
    sub_216B20C64(&v58, 0);
    return v58;
  }
  return v54;
}

uint64_t sub_216BE2DF0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v33 = a3;
  v31 = sub_216BE2FE8(a2, a3);
  if (!sub_216B2D76C(&v31))
  {
    v8 = (uint64_t *)sub_216B1E600((uint64_t)&v32);
    v9 = sub_216B35430(&v32);
    if (v8 == (uint64_t *)v9)
    {
LABEL_8:
      v12 = (unsigned int **)sub_216B1E600((uint64_t)&v32);
      v13 = sub_216B35430(&v32);
      if (v12 == (unsigned int **)v13)
        return v34;
      v14 = (unsigned int **)v13;
      while (1)
      {
        v15 = *v12;
        v16 = (uint64_t *)sub_216B1E600((uint64_t)&v32);
        v17 = sub_216B35430(&v32);
        if (v16 != (uint64_t *)v17)
          break;
LABEL_14:
        if (++v12 == v14)
          return v34;
      }
      v18 = (uint64_t *)v17;
      while (1)
      {
        v19 = *v16;
        v30[0] = sub_216BAB358((uint64_t)v15);
        v20 = sub_216BAB358(v19);
        if (sub_216BD39B8(v30, v20))
          break;
        if (++v16 == v18)
          goto LABEL_14;
      }
      v21 = sub_216B1E4E0(v15);
      sub_216BD433C(a1, v21, 2217, (uint64_t)v30);
      v29 = sub_216BAB358((uint64_t)v15);
      sub_216BDF234((uint64_t)v30, (uint64_t)&v29);
      v28 = sub_216BAB358(v19);
      sub_216BDF234((uint64_t)v30, (uint64_t)&v28);
      sub_216BC1C8C((uint64_t)v15);
      v27 = v22;
      v23 = sub_216B7A280(v30, &v27);
      sub_216BC1C8C(v19);
      v26 = v24;
      sub_216B7A280(v23, &v26);
      sub_216B4B3B4(v30);
    }
    else
    {
      v10 = (uint64_t *)v9;
      while (1)
      {
        v11 = sub_216BAB358(*v8);
        if ((sub_216BDF7E0(a1, v11, a4, v32, v33) & 1) == 0)
          break;
        if (++v8 == v10)
          goto LABEL_8;
      }
    }
LABEL_17:
    sub_216B2D410(&v34);
    return v34;
  }
  if ((sub_216BDF7E0(a1, v31, a4, a2, a3) & 1) == 0)
    goto LABEL_17;
  return v31;
}

uint64_t sub_216BE2FE8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[0] = a1;
  v10[1] = a2;
  if (!sub_216B29094((uint64_t)v10))
  {
    v2 = (uint64_t *)sub_216B1E600((uint64_t)v10);
    v3 = sub_216BAB358(*v2);
    v9 = v3;
    v4 = (uint64_t *)sub_216B1E600((uint64_t)v10);
    v5 = sub_216B35430(v10);
    if (v4 == (uint64_t *)v5)
      return v3;
    v6 = (uint64_t *)v5;
    while (1)
    {
      v7 = sub_216BAB358(*v4);
      if (sub_216BD39B8(&v9, v7))
        break;
      if (++v4 == v6)
        return v9;
    }
  }
  sub_216B2D410(&v11);
  return v11;
}

uint64_t sub_216BE3094(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t *v8;
  const char *v9;
  uint64_t v11[2];

  if ((a2 - 1) > 3)
  {
    if ((a3 - 43) >= 2)
    {
      sub_216BD433C(a1, a6, 2819, (uint64_t)v11);
      v8 = sub_216B4B340(v11, a4, a5);
      v9 = "sampler2D or hsampler2D";
      goto LABEL_7;
    }
    return 1;
  }
  if ((a3 - 41) < 2)
    return 1;
  sub_216BD433C(a1, a6, 2819, (uint64_t)v11);
  v8 = sub_216B4B340(v11, a4, a5);
  v9 = "sampler or hsampler";
LABEL_7:
  sub_216B60EA8(v8, (uint64_t)v9);
  sub_216B4B3B4(v11);
  return 0;
}

uint64_t sub_216BE314C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int **v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v21;
  char *v22;
  int v23;
  __int128 v24;
  unsigned int **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35[3];
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a3;
  v38 = a4;
  if (!sub_216B29094((uint64_t)&v37))
  {
    v9 = (uint64_t *)sub_216B212F0(&v37, 0);
    v35[0] = sub_216BAB358(*v9);
    v10 = sub_216B1E600((uint64_t)v35);
    v11 = sub_216BA7EB0(v10);
    if (!v11)
    {
      v14 = (unsigned int **)sub_216B212F0(&v37, 0);
      v15 = sub_216B1E4E0(*v14);
      sub_216BD433C((uint64_t)a1, v15, 2122, (uint64_t)v35);
      v16 = (uint64_t *)sub_216B212F0(&v37, 0);
      *(_QWORD *)&v33 = sub_216BAB358(*v16);
      sub_216BDF234((uint64_t)v35, (uint64_t)&v33);
      v17 = sub_216B60EA8(v35, (uint64_t)"a sampler type");
      v18 = (uint64_t *)sub_216B212F0(&v37, 0);
      sub_216BC1C8C(*v18);
      v34 = v19;
      sub_216B7A280(v17, &v34);
      v8 = v35;
      goto LABEL_7;
    }
    v12 = v11;
    sub_216B26D14(v35);
    switch(a2)
    {
      case 1:
        v13 = "sample";
        goto LABEL_16;
      case 2:
        v13 = "samplerTransform";
        goto LABEL_16;
      case 3:
        v22 = "samplerExtent";
        goto LABEL_14;
      case 4:
        v22 = "samplerCoord";
LABEL_14:
        sub_216B1E678((int)&v33, v22);
        *(_OWORD *)v35 = v33;
        v21 = 1;
        break;
      case 5:
        v13 = "texture2D";
LABEL_16:
        sub_216B1E678((int)&v33, v13);
        *(_OWORD *)v35 = v33;
        v21 = 2;
        break;
      default:
        v21 = 0;
        break;
    }
    v23 = sub_216BA7EA4(v12);
    v24 = *(_OWORD *)v35;
    v25 = (unsigned int **)sub_216B212F0(&v37, 0);
    v26 = sub_216B1E4E0(*v25);
    if ((sub_216BE3094((uint64_t)a1, a2, v23, v24, *((uint64_t *)&v24 + 1), v26) & 1) == 0
      || !sub_216BE2970((uint64_t)a1, v37, v38, v21))
    {
      goto LABEL_8;
    }
    sub_216BD3484(*a1, 8);
    v28 = v27;
    sub_216BD3484(*a1, 10);
    if (a2 != 4)
    {
      if (a2 != 3)
      {
        if (a2 == 2)
          return v28;
        v30 = sub_216BA7EA4(v12);
        v31 = *a1;
        v32 = sub_216BD376C(v31, dword_216C190C0[v30 - 41]);
        return sub_216BD30A0(v31, v32, 4);
      }
      return v29;
    }
    return v28;
  }
  sub_216BD433C((uint64_t)a1, a5, 2478, (uint64_t)v36);
  v8 = (uint64_t *)v36;
LABEL_7:
  sub_216B4B3B4(v8);
LABEL_8:
  sub_216B2D410(&v39);
  return v39;
}

void sub_216BE33E4(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  _BYTE v4[24];

  v3 = sub_216B25034(v4);
  sub_216B25DEC(v3, off_24D605F50[a2 - 3]);
}

void sub_216BE3420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, std::string *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const std::string::value_type *v19;
  const std::string::value_type *v20;
  uint64_t *v21;
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  std::string v25[4];

  sub_216B26DE8(v25, ", legal parameter types are:");
  std::string::append(v25, "\n  (genType, genType, genType)");
  std::string::append(v25, "\n  (genType, genType, float)");
  if (sub_216BA2994(*(_QWORD *)(v16 + 8)) == 1)
  {
    v19 = "GenType = float, vec2, vec3, vec4";
    v20 = "\n    where ";
  }
  else
  {
    std::string::append(v25, "\n  (genType, genType, genBType)");
    std::string::append(v25, "\n    where ");
    std::string::append(v25, "GenType = float, vec2, vec3, vec4");
    v19 = "GenBType = BOOL, bvec2, bvec3, bvec4";
    v20 = "\n          ";
  }
  std::string::append(v25, v20);
  std::string::append(v25, v19);
  sub_216BD433C(v16, v17, 2316, (uint64_t)v24);
  sub_216B26CA0(v23, v18 - 56);
  v21 = sub_216B4B340(v24, v23[0], v23[1]);
  sub_216B26CA0(v22, v25);
  sub_216B4B340(v21, v22[0], v22[1]);
  sub_216B4B3B4(v24);
  std::string::~string(v25);
  std::string::~string((std::string *)(v18 - 56));
}

uint64_t sub_216BE353C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _BYTE v9[16];
  _QWORD v10[2];
  uint64_t v11;

  v10[0] = a3;
  v10[1] = a4;
  sub_216BD376C(*a1, 3);
  sub_216BD376C(*a1, 7);
  sub_216BD376C(*a1, 5);
  sub_216BD376C(*a1, 6);
  sub_216BD37C4(*a1);
  if (!sub_216B29094((uint64_t)v10))
    __asm { BR              X11 }
  sub_216BD433C((uint64_t)a1, a5, 2478, (uint64_t)v9);
  sub_216B4B3B4(v9);
  sub_216B2D410(&v11);
  return v11;
}

void sub_216BE362C()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_216BE2970(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 1u))
  {
    *(_QWORD *)(v1 - 88) = sub_216BE2DF0(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 0x63u);
    JUMPOUT(0x216BE35E8);
  }
  JUMPOUT(0x216BE35E0);
}

uint64_t sub_216BE3658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _DWORD *v27;
  _QWORD *v28;

  sub_216B2D410(&a27);
  v28 = sub_216B2D410(&a26);
  return ((uint64_t (*)(_QWORD *))((char *)sub_216BE3688 + 4 * byte_216C18FCA[*v27 - 46]))(v28);
}

void sub_216BE3688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int **v32;
  unsigned int v33;

  a26 = sub_216BD30A0(*v27, v28, 2);
  sub_216B20C64(&a24, v29);
  a27 = a24;
  if (sub_216BE2970((uint64_t)v27, *(_QWORD *)(v30 - 104), *(_QWORD *)(v30 - 96), 1u))
  {
    v31 = (uint64_t *)sub_216B1E600(v30 - 104);
    a24 = sub_216BAB358(*v31);
    if (sub_216BD39B8(&a24, a26))
    {
      v32 = (unsigned int **)sub_216B1E600(v30 - 104);
      v33 = sub_216B1E4E0(*v32);
      sub_216BD433C((uint64_t)v27, v33, 2123, (uint64_t)&a24);
      sub_216BDF234((uint64_t)&a24, (uint64_t)&a26);
      JUMPOUT(0x216BE35DCLL);
    }
    *(_QWORD *)(v30 - 88) = a27;
    JUMPOUT(0x216BE35E8);
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE39F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int v28;

  if (sub_216BE2970(v24, *(_QWORD *)(v25 - 104), *(_QWORD *)(v25 - 96), 1u))
  {
    a24 = sub_216BE2DF0(v24, *(_QWORD *)(v25 - 104), *(_QWORD *)(v25 - 96), 0x200u);
    if (sub_216B2D76C(&a24))
    {
      v26 = sub_216B1E600((uint64_t)&a24);
      if ((sub_216BE41A8(v26) & 1) == 0)
      {
        v27 = (unsigned int **)sub_216B212F0((_QWORD *)(v25 - 104), 0);
        v28 = sub_216B1E4E0(*v27);
        sub_216BD433C(v24, v28, 2124, (uint64_t)&a9);
        JUMPOUT(0x216BE35DCLL);
      }
      JUMPOUT(0x216BE3938);
    }
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unsigned int **v3;
  unsigned int v4;

  if (sub_216BE2970(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 2u))
  {
    v2 = (uint64_t *)sub_216B212F0((_QWORD *)(v1 - 104), 1);
    if (sub_216BAAF68(*v2) != 1)
    {
      v3 = (unsigned int **)sub_216B212F0((_QWORD *)(v1 - 104), 1);
      v4 = sub_216B1E4E0(*v3);
      sub_216BD433C(v0, v4, 2121, v1 - 136);
      JUMPOUT(0x216BE35DCLL);
    }
    JUMPOUT(0x216BE3640);
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3ACC()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_216BE2970(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 2u))
    JUMPOUT(0x216BE3C40);
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3AE8()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_216BE2970(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 2u))
    JUMPOUT(0x216BE4074);
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3B3C()
{
  JUMPOUT(0x216BE3638);
}

void sub_216BE3B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int **v28;
  unsigned int v29;
  uint64_t v30;

  if (sub_216BE2970(v24, *(_QWORD *)(v26 - 104), *(_QWORD *)(v26 - 96), 3u))
  {
    v27 = (uint64_t *)sub_216B212F0((_QWORD *)(v26 - 104), 2);
    a24 = sub_216BAB358(*v27);
    sub_216B20C64(&a23, v25);
    if (sub_216BD39B8(&a24, a23))
    {
      v28 = (unsigned int **)sub_216B212F0((_QWORD *)(v26 - 104), 0);
      v29 = sub_216B1E4E0(*v28);
      sub_216BD433C(v24, v29, 2123, (uint64_t)&a24);
      sub_216BE18A4(&a24, v25);
      JUMPOUT(0x216BE39F0);
    }
    v30 = sub_216B1E600(v26 - 104);
    sub_216B1E684(&a21, v30, 2);
    JUMPOUT(0x216BE364CLL);
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (sub_216BE2970(v0, *(_QWORD *)(v2 - 104), *(_QWORD *)(v2 - 96), 2u))
  {
    *(_QWORD *)(v2 - 88) = v1;
    JUMPOUT(0x216BE35E8);
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3BE8()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;

  if (sub_216B1E67C(v2 - 104) != 2)
  {
    if (sub_216BE2970(v0, *(_QWORD *)(v2 - 104), *(_QWORD *)(v2 - 96), 1u))
    {
      *v1 = 9;
      JUMPOUT(0x216BE3640);
    }
    JUMPOUT(0x216BE35E0);
  }
  JUMPOUT(0x216BE3644);
}

void sub_216BE3C18()
{
  JUMPOUT(0x216BE3C24);
}

uint64_t sub_216BE3C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int **v47;

  if (!sub_216BE2970((uint64_t)v29, *(_QWORD *)(v30 - 104), *(_QWORD *)(v30 - 96), 3u)
    || (v31 = sub_216B1E600(v30 - 104),
        sub_216B1E684(&a28, v31, 2),
        a24 = sub_216BE2DF0((uint64_t)v29, a28, a29, 0x63u),
        !sub_216B2D76C(&a24)))
  {
    JUMPOUT(0x216BE35E0);
  }
  v32 = (uint64_t *)sub_216B212F0((_QWORD *)(v30 - 104), 2);
  v33 = sub_216BAB358(*v32);
  if (sub_216BD39D0(&a24, v33)
    || (v34 = (uint64_t *)sub_216B212F0((_QWORD *)(v30 - 104), 2),
        a27 = sub_216BAB358(*v34),
        sub_216BD3484(*v29, 3),
        sub_216BD39D0(&a27, v35)))
  {
    JUMPOUT(0x216BE3938);
  }
  if (sub_216BA2994(v29[1]) == 1)
  {
    v47 = (unsigned int **)sub_216B212F0((_QWORD *)(v30 - 104), 2);
    sub_216B1E4E0(*v47);
    sub_216BE33E4((uint64_t)v29, 38);
  }
  sub_216B2D410(&a27);
  v36 = sub_216B1E600((uint64_t)&a24);
  v37 = sub_216BAED9C(v36);
  v38 = sub_216BA7EA4(v37);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_216BE3D34 + 4 * word_216C18FDC[(v38 - 3)]))(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

void sub_216BE3D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int **v32;

  sub_216BD3484(*v27, 7);
  a27 = v30;
  v31 = (uint64_t *)sub_216B212F0((_QWORD *)(v29 - 104), 2);
  a26 = sub_216BAB358(*v31);
  if (sub_216BD39D0(&a26, a27))
  {
    *v28 = 37;
    JUMPOUT(0x216BE4174);
  }
  v32 = (unsigned int **)sub_216B212F0((_QWORD *)(v29 - 104), 2);
  sub_216B1E4E0(*v32);
  sub_216BE33E4((uint64_t)v27, 38);
}

void sub_216BE3D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  if (sub_216BE2970((uint64_t)v24, *(_QWORD *)(v25 - 104), *(_QWORD *)(v25 - 96), 2u))
  {
    v26 = (uint64_t *)sub_216B212F0((_QWORD *)(v25 - 104), 0);
    v27 = sub_216BAB358(*v26);
    v28 = sub_216B212F0((_QWORD *)(v25 - 104), 0);
    sub_216B6E0CC(&a19, v28);
    if ((sub_216BDF7E0((uint64_t)v24, v27, 0x20u, a19, a20) & 1) != 0)
    {
      v29 = (uint64_t *)sub_216B212F0((_QWORD *)(v25 - 104), 1);
      v30 = sub_216BAB358(*v29);
      v31 = sub_216B212F0((_QWORD *)(v25 - 104), 1);
      sub_216B6E0CC(&a17, v31);
      if ((sub_216BDF7E0((uint64_t)v24, v30, 0x20u, a17, a18) & 1) != 0)
      {
        v32 = (uint64_t *)sub_216B212F0((_QWORD *)(v25 - 104), 0);
        a24 = sub_216BAB358(*v32);
        v33 = sub_216B1E600((uint64_t)&a24);
        v34 = sub_216BAED9C(v33);
        v35 = (uint64_t *)sub_216B212F0((_QWORD *)(v25 - 104), 1);
        a24 = sub_216BAB358(*v35);
        v36 = sub_216B1E600((uint64_t)&a24);
        v37 = sub_216BAED9C(v36);
        v38 = *v24;
        v39 = sub_216B1E67C(v34);
        LODWORD(v37) = sub_216BA734C(v37);
        v40 = sub_216BA734C(v34);
        sub_216BD329C(v38, v39, v37, v40);
        JUMPOUT(0x216BE3650);
      }
    }
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  if (sub_216BE2970(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 1u))
  {
    v2 = (uint64_t *)sub_216B1E600(v1 - 104);
    v3 = sub_216BAB358(*v2);
    if ((sub_216BDF7E0(v0, v3, 0x400u, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96)) & 1) != 0)
      JUMPOUT(0x216BE3EE4);
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3EF0()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_216BE2970(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 2u))
    JUMPOUT(0x216BE364CLL);
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  if (sub_216BE2970(v24, *(_QWORD *)(v25 - 104), *(_QWORD *)(v25 - 96), 1u))
  {
    v26 = (uint64_t *)sub_216B1E600(v25 - 104);
    v27 = sub_216BAB358(*v26);
    if ((sub_216BDF7E0(v24, v27, 0x800u, *(_QWORD *)(v25 - 104), *(_QWORD *)(v25 - 96)) & 1) != 0)
    {
      v28 = (uint64_t *)sub_216B1E600(v25 - 104);
      a24 = sub_216BAB358(*v28);
      v29 = sub_216B1E600((uint64_t)&a24);
      v30 = sub_216BAED9C(v29);
      sub_216B1E67C(v30);
      sub_216BA7418(v30);
      sub_216BA734C(v30);
      JUMPOUT(0x216BE3FA4);
    }
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3FAC()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_216BE2970(v0, *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 96), 1u))
    JUMPOUT(0x216BE364CLL);
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  if ((sub_216BE2970(v24, *(_QWORD *)(v27 - 104), *(_QWORD *)(v27 - 96), 1) & 1) != 0)
  {
    v28 = (_QWORD *)sub_216B1E600(v27 - 104);
    v29 = sub_216BAB358(*v28);
    if ((sub_216BDF7E0(v24, v29, v25, *(_QWORD *)(v27 - 104), *(_QWORD *)(v27 - 96)) & 1) != 0)
    {
      v30 = (_QWORD *)sub_216B1E600(v27 - 104);
      a24 = sub_216BAB358(*v30);
      v31 = sub_216B1E600((uint64_t)&a24);
      v32 = sub_216BA7040(v31);
      if (v32)
      {
        v33 = *v24;
        v34 = sub_216BA734C(v32);
        sub_216BD30A0(v33, v26, v34);
        JUMPOUT(0x216BE3650);
      }
      sub_216B20C64((_QWORD *)(v27 - 88), v26);
      JUMPOUT(0x216BE35E8);
    }
  }
  JUMPOUT(0x216BE35E0);
}

void sub_216BE3FD8()
{
  JUMPOUT(0x216BE3FE8);
}

void sub_216BE411C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  a27 = sub_216BD3484(*v27, 20);
  v30 = (_QWORD *)sub_216B212F0((_QWORD *)(v29 - 104), 2);
  a26 = sub_216BAB358(*v30);
  if (sub_216BD39D0(&a26, a27))
  {
    *v28 = 37;
    JUMPOUT(0x216BE4174);
  }
  JUMPOUT(0x216BE417CLL);
}

void sub_216BE4128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  a27 = sub_216BD3484(*v27, 21);
  v30 = (_QWORD *)sub_216B212F0((_QWORD *)(v29 - 104), 2);
  a26 = sub_216BAB358(*v30);
  if (sub_216BD39D0(&a26, a27))
  {
    *v28 = 37;
    JUMPOUT(0x216BE4174);
  }
  JUMPOUT(0x216BE417CLL);
}

void sub_216BE4134()
{
  JUMPOUT(0x216BE413CLL);
}

uint64_t sub_216BE41A8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216BA72F4(&v2);
}

BOOL sub_216BE41CC(int a1, int a2)
{
  _BOOL8 result;
  BOOL v4;
  BOOL v5;
  int v6;

  result = 0;
  switch(a1)
  {
    case 3:
    case 4:
    case 5:
    case 6:
      return (a2 - 3) < 2;
    case 8:
    case 11:
    case 14:
    case 17:
      v4 = a2 == 8 || a2 == 11;
      goto LABEL_18;
    case 9:
    case 12:
    case 15:
    case 18:
      v4 = a2 == 9 || a2 == 12;
      goto LABEL_18;
    case 10:
    case 13:
    case 16:
    case 19:
      v4 = a2 == 10 || a2 == 13;
      goto LABEL_18;
    case 23:
    case 32:
      v5 = a2 == 23;
      v6 = 32;
      goto LABEL_15;
    case 24:
    case 33:
      v5 = a2 == 24;
      v6 = 33;
      goto LABEL_15;
    case 25:
    case 34:
      v5 = a2 == 25;
      v6 = 34;
LABEL_15:
      v4 = v5 || a2 == v6;
LABEL_18:
      result = v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216BE4258(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;

  v9 = sub_216B2037C((uint64_t)a2);
  v3 = sub_216B1E600((uint64_t)&v9);
  if ((sub_216BD6AAC(v3) & 1) != 0)
    return 0;
  v9 = sub_216B2037C((uint64_t)a2);
  v4 = sub_216B1E600((uint64_t)&v9);
  v5 = sub_216BA7ED4(v4);
  if (v5)
  {
    v9 = sub_216B1E67C(v5);
    v6 = sub_216B1E600((uint64_t)&v9);
    if ((sub_216BD6AAC(v6) & 1) != 0)
      return 0;
  }
  v7 = sub_216BA75F0(a2);
  if (v7 > 8)
    return 0;
  else
    return dword_216C19084[v7];
}

uint64_t sub_216BE42F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((sub_216BA81D0(a2) & 1) != 0)
    return 0;
  v5 = sub_216B2037C(a2);
  v4 = sub_216B1E600((uint64_t)&v5);
  return sub_216BE4344(v4) ^ 1;
}

uint64_t sub_216BE4344(uint64_t a1)
{
  int v2;

  v2 = 0;
  return sub_216BD3230(a1, &v2);
}

uint64_t *sub_216BE4368(uint64_t *a1, _BYTE *a2)
{
  std::string v5;
  std::string v6;
  uint64_t v7[2];
  std::string v8;

  sub_216B25034(&v8);
  sub_216BD2A64(a2, (uint64_t)&v8);
  std::operator+<char>();
  sub_216B2B308(&v5, "'", (uint64_t)&v6);
  sub_216B26CA0(v7, &v6);
  sub_216B4CCBC(a1, v7[0], v7[1]);
  std::string::~string(&v6);
  std::string::~string(&v5);
  std::string::~string(&v8);
  return a1;
}

uint64_t sub_216BE4400(uint64_t a1, int a2)
{
  return sub_216BE4408(a1, a2);
}

uint64_t sub_216BE4408(uint64_t a1, int a2)
{
  int v3;

  *(_DWORD *)a1 = a2;
  sub_216B4AED0((_DWORD *)(a1 + 4));
  sub_216B4AED0((_DWORD *)(a1 + 8));
  sub_216BE4464(a1 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  sub_216B26D14((_QWORD *)(a1 + 40));
  v3 = (*(unsigned __int8 *)(a1 + 58) << 16) & 0xE00000;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = BYTE2(v3);
  return a1;
}

uint64_t sub_216BE4468(uint64_t a1)
{
  _QWORD *v2;

  v2 = sub_216B2D410((_QWORD *)a1);
  sub_216B4AED0((_DWORD *)v2 + 2);
  sub_216B4AED0((_DWORD *)(a1 + 12));
  sub_216BE44A8((unint64_t *)a1, 0);
  return a1;
}

unint64_t *sub_216BE44A8(unint64_t *result, unsigned int a2)
{
  *result = *result & 0xFFFFFFFFFFFFFFFDLL | (2 * a2);
  return result;
}

uint64_t sub_216BE44C0(int *a1)
{
  int v2;
  int v3;

  if (sub_216B1E520(a1))
  {
    v2 = *a1;
    v3 = v2 - sub_216B220E8((uint64_t)a1);
  }
  else
  {
    v3 = sub_216B2045C(a1);
  }
  return (v3 + 1);
}

uint64_t sub_216BE4508(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BE4530(&v3);
}

uint64_t sub_216BE4530(_QWORD *a1)
{
  return sub_216BE4538(*a1);
}

BOOL sub_216BE4540(uint64_t a1)
{
  return sub_216B9E3DC(a1) == 3;
}

uint64_t sub_216BE455C(uint64_t a1)
{
  uint64_t v2;
  const void *v4[12];

  v4[11] = *(const void **)MEMORY[0x24BDAC8D0];
  sub_216BAC9C0(v4);
  sub_216BE45E0(a1, (uint64_t)v4, 1);
  v2 = sub_216BDD3B8(*(_QWORD *)(a1 + 8), v4);
  sub_216B1FF6C(v4);
  return v2;
}

unsigned int *sub_216BE45E0(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int *v6;
  unsigned int *result;
  int v8;
  int v9;
  char v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17[2];
  _QWORD v18[7];
  _BYTE v19[16];
  _BYTE v20[40];
  _BYTE v21[16];
  _BYTE v22[16];
  _QWORD v23[8];
  _BYTE v24[56];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)(a1 + 32);
  if (sub_216B9837C(a1 + 32))
  {
    result = sub_216BE5C40(a1);
    goto LABEL_5;
  }
  *(_BYTE *)(a1 + 72) = 1;
  if (!sub_216B71174((uint64_t)v6, 399))
  {
    sub_216B5EDE4(v24);
    v8 = sub_216B1E4E0(v6);
    sub_216BE4400((uint64_t)v23, v8);
    v9 = sub_216BE4BF4(a1);
    v10 = v9;
    if (v9)
    {
      if ((sub_216BE5E70((_DWORD *)a1, (uint64_t)v23, (uint64_t)v24) & 1) != 0)
        return (unsigned int *)sub_216B1FF6C(v24);
      if (sub_216B71174((uint64_t)v6, 61))
      {
        if (sub_216B2BA30((uint64_t)v24))
        {
          v18[0] = sub_216BD7DA0(*(_QWORD *)(a1 + 8), (uint64_t)v23);
          if (v18[0])
            sub_216B268AC(a2, v18);
        }
        goto LABEL_13;
      }
    }
    else if (sub_216B71174((uint64_t)v6, 61))
    {
      sub_216BE4CA8(a1, v6, 977, (uint64_t)v22);
      v11 = v22;
      goto LABEL_16;
    }
    if (!sub_216B71174((uint64_t)v6, 6)
      || (v12 = *(uint64_t **)(a1 + 8), v13 = sub_216B7068C((uint64_t)v6), sub_216B1E4E0(v6), sub_216BDCB0C(v12, v13)))
    {
      if (!sub_216BE4CEC(a1, (uint64_t)v23, 1))
      {
        sub_216BE6674(a1, a2, (uint64_t)v23, 0, a3);
        return (unsigned int *)sub_216B1FF6C(v24);
      }
      goto LABEL_20;
    }
    if ((v10 & 1) == 0)
    {
      sub_216BE5EF0(a1, v6);
      goto LABEL_20;
    }
    v14 = sub_216B7068C((uint64_t)v6);
    v15 = sub_216BE4DD0(a1);
    if (sub_216B71174((uint64_t)v6, 23))
    {
      sub_216BE5B14((uint64_t)v18, (uint64_t)v23, v14, v15);
      sub_216BE6014(a1, (uint64_t)v18, a2);
      return (unsigned int *)sub_216B1FF6C(v24);
    }
    if ((sub_216BD5F9C((uint64_t)v23) & 1) != 0)
    {
      sub_216BE5B14((uint64_t)v20, (uint64_t)v23, v14, v15);
      v18[0] = sub_216BD6188(*(_QWORD *)(a1 + 8), (uint64_t)v20, 1);
      sub_216B268AC(a2, v18);
      if (!*(_QWORD *)sub_216B5F148(a2))
      {
        sub_216B5F160(a2);
        goto LABEL_20;
      }
      if (!sub_216BE643C((_DWORD *)a1, (uint64_t)v23, a2))
      {
LABEL_20:
        sub_216BF335C(a1);
        return (unsigned int *)sub_216B1FF6C(v24);
      }
      if (!sub_216B7214C((uint64_t)v6, 61))
      {
LABEL_13:
        sub_216BE4BF0(a1, 61);
        return (unsigned int *)sub_216B1FF6C(v24);
      }
      sub_216BE4CA8(a1, v6, 1013, (uint64_t)v19);
      v16 = sub_216B1E4E0(v6);
      sub_216B1E678((int)v17, ";");
      sub_216B73974(v16, v17[0], v17[1], 0, (uint64_t)v18);
      sub_216B73938((uint64_t)v19, (uint64_t)v18);
      sub_216B4C8CC(v18);
      v11 = v19;
    }
    else
    {
      sub_216BE4CA8(a1, v6, 1018, (uint64_t)v21);
      v11 = v21;
    }
LABEL_16:
    sub_216B4B3B4(v11);
    goto LABEL_20;
  }
  result = sub_216BE5D14(a1);
LABEL_5:
  v23[0] = result;
  if (result)
    return (unsigned int *)sub_216B268AC(a2, v23);
  return result;
}

uint64_t sub_216BE493C(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE v12[16];
  _BYTE v13[16];
  _BYTE v14[8];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[64];
  uint64_t v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 32);
  if (sub_216B71174(a1 + 32, 459))
    sub_216BE4BF0(a1, 459);
  *(_BYTE *)(a1 + 72) = 1;
  v5 = sub_216B1E4E0(v4);
  sub_216BE4400((uint64_t)v17, v5);
  if (sub_216B71174((uint64_t)v4, 399) || sub_216BE4BF4(a1))
  {
    sub_216BE4CA8(a1, v4, 980, (uint64_t)v16);
    v6 = (uint64_t *)v16;
LABEL_6:
    sub_216B4B3B4(v6);
LABEL_7:
    sub_216BF335C(a1);
    return 0;
  }
  if (sub_216BE4CEC(a1, (uint64_t)v17, 1))
    goto LABEL_7;
  if (sub_216B7214C((uint64_t)v4, 6))
  {
    sub_216BE4CA8(a1, v4, 8, (uint64_t)v18);
    sub_216B89E2C(v18, 6u);
    v6 = v18;
    goto LABEL_6;
  }
  sub_216B7068C((uint64_t)v4);
  v9 = sub_216BABC28(a2);
  v10 = sub_216BE4DD0(a1);
  if (sub_216B7214C((uint64_t)v4, 21))
  {
    sub_216BE4CA8(a1, v4, 1034, (uint64_t)v15);
    sub_216B4B3B4(v15);
  }
  sub_216BD41AC(v14, *(_QWORD *)(a1 + 8), 9);
  sub_216BE4DD4((uint64_t)v18, (uint64_t)v17, v9, v10);
  sub_216BE4DDC(a1, (uint64_t)v18);
  if (sub_216B71174((uint64_t)v4, 460) && (sub_216BE538C(a1, (uint64_t)v18) & 1) != 0)
    goto LABEL_21;
  if (sub_216B71174((uint64_t)v4, 61))
  {
    sub_216BE4CA8(a1, v4, 981, (uint64_t)v13);
    sub_216B4B3B4(v13);
    sub_216BE4BF0(a1, 61);
    sub_216BD74D4(*(uint64_t **)(a1 + 8), (uint64_t)v18);
    sub_216BECEEC();
LABEL_21:
    v7 = 0;
LABEL_22:
    v11 = 0;
    goto LABEL_23;
  }
  if (sub_216B7214C((uint64_t)v4, 23))
  {
    sub_216BECEEC();
    sub_216BE4CA8(a1, v4, 979, (uint64_t)v12);
    sub_216B4B3B4(v12);
    sub_216BF335C(a1);
    goto LABEL_21;
  }
  v7 = sub_216BE5680(a1, (uint64_t)v18);
  if (!v7)
  {
    sub_216BECEEC();
    goto LABEL_22;
  }
  v11 = 1;
LABEL_23:
  sub_216BE56F0((uint64_t)v18);
  sub_216BD41EC(v14);
  if (v11)
  {
    sub_216BDD244(*(_QWORD *)(a1 + 8), v7);
    return v7;
  }
  return 0;
}

uint64_t sub_216BE4BF4(uint64_t a1)
{
  int v2;
  uint64_t result;

  v2 = sub_216B71644(a1 + 32);
  result = 0;
  if (v2 > 360)
  {
    if ((v2 - 361) <= 0x3E && ((1 << (v2 - 105)) & 0x4000000400020001) != 0)
      return 1;
    if (v2 != 454)
    {
      if (v2 != 438)
        return result;
      return 1;
    }
LABEL_14:
    sub_216BA2994(*(_QWORD *)(a1 + 16));
    return 1;
  }
  if (v2 <= 301)
  {
    if (v2 == 79)
      return 1;
    if (v2 != 296)
      return result;
    goto LABEL_14;
  }
  if (v2 == 302 || v2 == 323 || v2 == 357)
    return 1;
  return result;
}

uint64_t sub_216BE4CA8@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;

  v7 = sub_216B1E4E0(a2);
  return sub_216BECEE0(a1, v7, a3, a4);
}

BOOL sub_216BE4CEC(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 result;
  _OWORD *v7;
  __int128 v8;
  _BYTE v9[16];

  sub_216BE6BC8(a1, a2);
  if ((sub_216BE7B20((uint64_t *)a1, a2, a3) & 1) != 0)
    return 1;
  if (sub_216B71174(a1 + 32, 19))
  {
    v7 = (_OWORD *)sub_216B28BEC(a2);
    if ((sub_216BE5B44((_DWORD *)a1, v7) & 1) != 0)
      return 1;
  }
  result = sub_216B71174(a1 + 32, 19);
  if (result)
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 929, (uint64_t)v9);
    sub_216B4B3B4(v9);
    result = sub_216B71174(a1 + 32, 19);
    if (result)
    {
      do
      {
        sub_216BE4464(&v8);
        sub_216BE5B44((_DWORD *)a1, &v8);
      }
      while (sub_216B71174(a1 + 32, 19));
      return 0;
    }
  }
  return result;
}

uint64_t sub_216BE4DD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_216BE8EE4(a1, a2, a3, a4);
}

BOOL sub_216BE4DDC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  char v22;
  unsigned int *v23;
  unsigned int *v24;
  int v25;
  _QWORD v27[2];
  int v28;
  _BYTE v29[16];
  _BYTE v30[16];
  __n128 v31;
  uint64_t v32[5];
  _QWORD v33[2];
  _QWORD v34[2];
  _BYTE v35[20];
  unsigned int v36;
  uint64_t v37[8];
  int v38;
  unsigned int v39;

  sub_216B4AED0(&v39);
  sub_216B4AED0(&v38);
  if (!sub_216BF339C((_DWORD *)a1, 0x15u, &v39))
  {
    if (sub_216B71174(a1 + 32, 106))
    {
      sub_216BE4BF0(a1, 106);
      return sub_216BE592C((_DWORD *)a1, 0x16u, v39, &v38);
    }
    v4 = 0;
    if (!sub_216B7214C(a1 + 32, 22))
    {
LABEL_57:
      sub_216BE592C((_DWORD *)a1, 0x16u, v39, &v38);
      return v4;
    }
    while (1)
    {
      if (sub_216B71174(a1 + 32, 1))
      {
        sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 8, (uint64_t)v37);
        sub_216B89E2C(v37, 0x16u);
        sub_216B4B3B4(v37);
        sub_216BF335C(a1);
        return 1;
      }
      v5 = sub_216B1E4E0((unsigned int *)(a1 + 32));
      sub_216BE4400((uint64_t)v37, v5);
      if (sub_216B71644(a1 + 32) == 79)
      {
        v6 = sub_216B1E4E0((unsigned int *)(a1 + 32));
        sub_216BE59F0((uint64_t)v37, v6, 2);
        sub_216BE4BF0(a1, 79);
      }
      sub_216BE5A1C(a1, (uint64_t)v37);
      v7 = sub_216B71644(a1 + 32);
      sub_216B4AED0(&v36);
      if (v7 == 493)
      {
        v36 = sub_216B1E4E0((unsigned int *)(a1 + 32));
        sub_216BE4BF0(a1, 493);
      }
      v8 = sub_216B71644(a1 + 32);
      v9 = 0;
      if (v8 <= 490)
        break;
      if (v8 == 491)
      {
        v10 = a1;
        v11 = 491;
LABEL_25:
        sub_216BE4BF0(v10, v11);
        sub_216BE5A88((uint64_t)v37, 10);
        v14 = 2;
LABEL_26:
        sub_216BE5AB0((uint64_t)v37, v14);
LABEL_27:
        v9 = 1;
        goto LABEL_28;
      }
      if (v8 == 492)
      {
        sub_216BE4BF0(a1, 492);
        sub_216BE5A88((uint64_t)v37, 10);
        v9 = 1;
        sub_216BE5AB0((uint64_t)v37, 1);
      }
LABEL_28:
      if (v7 == 493
        && sub_216BD80B0((uint64_t)v37) != 41
        && sub_216BD80B0((uint64_t)v37) != 42)
      {
        sub_216BECEE0(a1, v36, 1066, (uint64_t)v35);
        sub_216B4B3B4(v35);
        LODWORD(v32[0]) = 1441856;
        sub_216B1E790(v34, (uint64_t)v32);
        v16 = v34[0];
        v17 = v34[1];
        goto LABEL_52;
      }
      if ((v9 & 1) == 0 && sub_216BE4CEC(a1, (uint64_t)v37, 1))
      {
        LODWORD(v32[0]) = 1441856;
        sub_216B1E790(v33, (uint64_t)v32);
        v16 = v33[0];
        v17 = v33[1];
        goto LABEL_52;
      }
      if (sub_216B7214C(a1 + 32, 6))
      {
        v18 = sub_216B1E4E0((unsigned int *)(a1 + 32));
        sub_216BE5B14((uint64_t)v32, (uint64_t)v37, 0, v18);
        v19 = sub_216BD588C(*(uint64_t **)(a1 + 8), (uint64_t)v32);
        sub_216BE5B1C(a2, (uint64_t)v19);
      }
      else
      {
        v20 = sub_216B7068C(a1 + 32);
        v21 = sub_216BE4DD0(a1);
        sub_216BE4464(&v31);
        if (sub_216B71174(a1 + 32, 19))
          v22 = sub_216BE5B44((_DWORD *)a1, &v31);
        else
          v22 = 0;
        if (sub_216B71174(a1 + 32, 19))
        {
          sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 929, (uint64_t)v30);
          sub_216B4B3B4(v30);
          while (sub_216B71174(a1 + 32, 19))
          {
            sub_216BE4464(v32);
            sub_216BE5B44((_DWORD *)a1, v32);
          }
          v22 = 1;
        }
        if (sub_216B71174(a1 + 32, 62))
        {
          sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1041, (uint64_t)v29);
          sub_216B4B3B4(v29);
          sub_216BE5C10((uint64_t)v32, (uint64_t)v37, v20, v21, &v31);
          v23 = sub_216BD588C(*(uint64_t **)(a1 + 8), (uint64_t)v32);
          sub_216BE5B1C(a2, (uint64_t)v23);
LABEL_46:
          v28 = 1441856;
          sub_216B1E790(v27, (uint64_t)&v28);
          v16 = v27[0];
          v17 = v27[1];
LABEL_52:
          sub_216BF318C(a1, v16, v17, 1, 1);
          if (sub_216B71174(a1 + 32, 64))
          {
            sub_216BE5AD8(a1);
            v25 = 2;
            v4 = 1;
          }
          else
          {
            sub_216BE592C((_DWORD *)a1, 0x16u, v39, &v38);
            v25 = 1;
          }
          if (v25 != 2)
            return 1;
          goto LABEL_56;
        }
        sub_216BE5C10((uint64_t)v32, (uint64_t)v37, v20, v21, &v31);
        v24 = sub_216BD588C(*(uint64_t **)(a1 + 8), (uint64_t)v32);
        sub_216BE5B1C(a2, (uint64_t)v24);
        if ((v22 & 1) != 0)
          goto LABEL_46;
      }
      if (sub_216B71174(a1 + 32, 64))
      {
        sub_216BE4BF0(a1, 64);
      }
      else if (sub_216B7214C(a1 + 32, 22))
      {
        sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 8, (uint64_t)v32);
        sub_216B89E2C(v32, 0x16u);
        sub_216B4B3B4(v32);
        return 1;
      }
LABEL_56:
      if (!sub_216B7214C(a1 + 32, 22))
        goto LABEL_57;
    }
    switch(v8)
    {
      case 461:
        v10 = a1;
        v11 = 461;
        goto LABEL_25;
      case 462:
        sub_216BE4BF0(a1, 462);
        sub_216BE5A88((uint64_t)v37, 13);
        v14 = 3;
        goto LABEL_26;
      case 463:
        v12 = a1;
        v13 = 463;
        goto LABEL_21;
      case 464:
        sub_216BE4BF0(a1, 464);
        v15 = 42;
        goto LABEL_23;
      default:
        if (v8 != 403)
          goto LABEL_28;
        v12 = a1;
        v13 = 403;
LABEL_21:
        sub_216BE4BF0(v12, v13);
        v15 = 41;
LABEL_23:
        sub_216BE5A88((uint64_t)v37, v15);
        break;
    }
    goto LABEL_27;
  }
  return 1;
}

uint64_t sub_216BE538C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t result;
  _BYTE *v19;
  _BYTE v20[16];
  uint64_t v21[2];
  std::string __str;
  uint64_t v23[33];
  unsigned int v24[8];
  _BYTE v25[16];

  sub_216BE4BF0(a1, 460);
  if (sub_216BECC3C((_DWORD *)a1, 21, 8, (uint64_t)"'('", 0) || sub_216BECC3C((_DWORD *)a1, 21, 8, (uint64_t)"'('", 0))
    return 1;
  if (sub_216B71174(a1 + 32, 22))
  {
LABEL_14:
    if (sub_216BECC3C((_DWORD *)a1, 22, 8, (uint64_t)"')'", 0))
      return 1;
    v17 = sub_216BECC3C((_DWORD *)a1, 22, 8, (uint64_t)"')'", 0);
    result = 0;
    if (v17)
      return 1;
    return result;
  }
  while (1)
  {
    if (!sub_216B9EE28(a1 + 32))
    {
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1050, (uint64_t)v25);
      v19 = v25;
      goto LABEL_19;
    }
    v4 = sub_216B7068C(a1 + 32);
    v5 = sub_216B4A11C(v4);
    v7 = v6;
    v8 = sub_216B1E4E0((unsigned int *)(a1 + 32));
    sub_216BE56F4((uint64_t)v24, v8, v5, v7);
    sub_216BE4BF0(a1, 6);
    if (sub_216B71174(a1 + 32, 21))
      break;
LABEL_11:
    v16 = sub_216BD57B0(*(uint64_t **)(a1 + 8), v24);
    sub_216BE5904(a2, v16);
    if (sub_216B71174(a1 + 32, 64))
      sub_216BE4BF0(a1, 64);
    if (sub_216B71174(a1 + 32, 22))
      goto LABEL_14;
  }
  sub_216BE56FC(a1);
  if (sub_216B9EE28(a1 + 32))
  {
    v9 = sub_216B7068C(a1 + 32);
    v10 = sub_216B4A11C(v9);
    sub_216BE5764((uint64_t)v24, v10, v11);
    sub_216BE4BF0(a1, 6);
    goto LABEL_10;
  }
  if (sub_216B71174(a1 + 32, 8))
  {
    sub_216BE5798(v23);
    v12 = sub_216BE5844((char *)v23, (void (*)(char *))sub_216BE5874);
    LODWORD(v21[0]) = sub_216BE58A0(16);
    sub_216BE5810(v12, (int *)v21);
    v13 = sub_216B1E67C(a1 + 32);
    sub_216B26DE8(&__str, v13);
    std::stod(&__str, 0);
    std::ostream::operator<<();
    std::string::~string(&__str);
    sub_216BE58C8();
    v14 = (const char *)sub_216B26084(&__str);
    v15 = strdup(v14);
    sub_216B1E678((int)v21, v15);
    std::string::~string(&__str);
    sub_216BE5764((uint64_t)v24, v21[0], v21[1]);
    sub_216BE4BF0(a1, 8);
    sub_216BE58D0(v23);
LABEL_10:
    if (sub_216BECC3C((_DWORD *)a1, 22, 8, (uint64_t)"')'", 0))
      return 1;
    goto LABEL_11;
  }
  sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1051, (uint64_t)v20);
  v19 = v20;
LABEL_19:
  sub_216B4B3B4(v19);
  return 1;
}

uint64_t sub_216BE5680(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BD7C68(*(uint64_t **)(a1 + 8), a2);
  if (v3)
    return sub_216BECAD4(a1, v3);
  sub_216BECC3C((_DWORD *)a1, 23, 8, (uint64_t)"'{'", 0);
  sub_216BECD88(a1, 24, 0, 0);
  return 0;
}

uint64_t sub_216BE56F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_216BE8F7C(a1, a2, a3, a4);
}

uint64_t sub_216BE56FC(uint64_t a1)
{
  unsigned int *v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = (unsigned int *)(a1 + 32);
  v3 = sub_216B71174(a1 + 32, 21);
  v4 = *(_DWORD *)(a1 + 60);
  if (v3)
  {
    v5 = 1;
LABEL_5:
    *(_DWORD *)(a1 + 60) = v4 + v5;
    goto LABEL_6;
  }
  if (v4)
  {
    v5 = -1;
    goto LABEL_5;
  }
LABEL_6:
  *(_DWORD *)(a1 + 56) = sub_216B1E4E0(v2);
  sub_216B9C594(*(_QWORD *)a1, v2);
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_216BE5764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  result = sub_216B1E600((uint64_t)v5);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t *sub_216BE5798(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_216BE91D8(a1 + 14);
  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 24;
  *a1 = MEMORY[0x24BEDB870] + 24;
  v4 = v2 + 64;
  a1[14] = v2 + 64;
  sub_216BE91FC(a1, (uint64_t *)(MEMORY[0x24BEDB800] + 8), a1 + 1);
  *a1 = v3;
  a1[14] = v4;
  sub_216BE9244(a1 + 1, 16);
  return a1;
}

_QWORD *sub_216BE5810(_QWORD *a1, int *a2)
{
  sub_216BE92CC((uint64_t)a1 + *(_QWORD *)(*a1 - 24), *a2);
  return a1;
}

char *sub_216BE5844(char *a1, void (*a2)(char *))
{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

uint64_t sub_216BE5874(uint64_t a1)
{
  sub_216BE8F8C(a1, 4, 260);
  return a1;
}

uint64_t sub_216BE58A0(int a1)
{
  unsigned int v2;

  sub_216B29EA4(&v2, a1);
  return v2;
}

uint64_t sub_216BE58C8()
{
  return std::stringbuf::str();
}

uint64_t *sub_216BE58D0(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_216BE8FE8(a1, MEMORY[0x24BEDB800]);
  MEMORY[0x2199FF25C](v2 + 112);
  return a1;
}

uint64_t sub_216BE5904(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216B268AC(a1 + 128, &v3);
}

BOOL sub_216BE592C(_DWORD *a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;

  v8 = sub_216B71644((uint64_t)(a1 + 8));
  if (v8 == a2)
  {
    if (a2 == 20)
    {
      v10 = a1[16];
      if (v10)
        a1[16] = v10 - 1;
    }
    else if (a2 == 22)
    {
      v9 = a1[15];
      if (v9)
        a1[15] = v9 - 1;
    }
    else
    {
      v11 = a1[17];
      if (v11)
        a1[17] = v11 - 1;
    }
    *a4 = sub_216BE4DD0(a1);
  }
  else
  {
    sub_216BF3470((uint64_t)a1, a2, a3, a4);
  }
  return v8 != a2;
}

uint64_t sub_216BE59F0(uint64_t a1, int a2, char a3)
{
  uint64_t result;
  int v4;
  unsigned int v5;

  v4 = *(unsigned __int16 *)(a1 + 56);
  result = a1 + 56;
  *(_DWORD *)(result - 52) = a2;
  v5 = v4 & 0xFFFFF0FF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v4 & 0xF0FF | ((a3 & 0xF) << 8);
  *(_BYTE *)(result + 2) = BYTE2(v5);
  return result;
}

uint64_t sub_216BE5A1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;

  result = sub_216B71644(a1 + 32);
  switch((_DWORD)result)
  {
    case 0x18B:
      v5 = 2;
      break;
    case 0x166:
      v5 = 3;
      break;
    case 0x165:
      v5 = 1;
      break;
    default:
      return result;
  }
  sub_216BE5C18(a2, v5);
  return sub_216BE4DD0(a1);
}

uint64_t sub_216BE5A88(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 56);
  result = a1 + 56;
  v4 = v3 & 0xFFFFFF01 | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xFF01 | (2 * (a2 & 0x7F));
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216BE5AB0(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 56);
  result = a1 + 56;
  v4 = (v3 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xFFE7FFFF | ((a2 & 3) << 19);
  *(_WORD *)result = v3;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216BE5AD8(uint64_t a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)(a1 + 32);
  *(_DWORD *)(a1 + 56) = sub_216B1E4E0((unsigned int *)(a1 + 32));
  sub_216B9C594(*(_QWORD *)a1, v2);
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_216BE5B14(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_216BE8F1C(a1, a2, a3, a4);
}

uint64_t sub_216BE5B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216B268AC(a1 + 40, &v3);
}

uint64_t sub_216BE5B44(_DWORD *a1, _OWORD *a2)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  unsigned int v10;

  sub_216B4AED0(&v10);
  sub_216BF339C(a1, 0x13u, &v10);
  if (sub_216B7214C((uint64_t)(a1 + 8), 20))
  {
    v4 = sub_216BE93D8((uint64_t)a1);
    if (!v4)
    {
      v5 = 1;
      sub_216BECD88((uint64_t)a1, 20, 1, 1);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = 0;
LABEL_6:
  sub_216B4AED0(&v9);
  v6 = v5 | sub_216BE592C(a1, 0x14u, v10, &v9);
  if ((v6 & 1) == 0)
  {
    sub_216BE8684((uint64_t *)&v8, v10, v9, (uint64_t)v4);
    *a2 = v8;
  }
  return v6;
}

double sub_216BE5C10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __n128 *a5)
{
  double result;

  *(_QWORD *)&result = sub_216BE9064(a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

uint64_t sub_216BE5C18(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 56);
  result = a1 + 56;
  v4 = (v3 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xFFF9FFFF | ((a2 & 3) << 17);
  *(_WORD *)result = v3;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

unsigned int *sub_216BE5C40(uint64_t a1)
{
  unsigned int *v2;
  _BYTE v4[16];

  v2 = (unsigned int *)(a1 + 32);
  if (sub_216B71174(a1 + 32, 523))
    return (unsigned int *)sub_216BEB35C(a1);
  if (sub_216B71174((uint64_t)v2, 524))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      sub_216BE4CA8(a1, v2, 636, (uint64_t)v4);
      sub_216B4B3B4(v4);
    }
    return sub_216BEB474(a1);
  }
  else if (sub_216B71174((uint64_t)v2, 521))
  {
    return (unsigned int *)sub_216BEADEC(a1);
  }
  else
  {
    sub_216B71174((uint64_t)v2, 525);
    sub_216BD4594(*(_QWORD *)(a1 + 8));
    sub_216BE4BF0(a1, 525);
    return 0;
  }
}

unsigned int *sub_216BE5D14(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  int v4;
  int v5;
  _BYTE *v6;
  uint64_t v8[2];
  _BYTE v9[56];
  _BYTE v10[16];
  _BYTE v11[16];
  _BYTE v12[16];
  unsigned int v13[16];

  v2 = (unsigned int *)(a1 + 32);
  v3 = sub_216B1E4E0((unsigned int *)(a1 + 32));
  sub_216BE4400((uint64_t)v13, v3);
  v4 = sub_216BE4BF0(a1, 399);
  if ((sub_216BE6BC8(a1, (uint64_t)v13) & 1) == 0)
  {
    sub_216BE4CA8(a1, v2, 1146, (uint64_t)v12);
    v6 = v12;
LABEL_7:
    sub_216B4B3B4(v6);
    goto LABEL_8;
  }
  if (!sub_216BE4CEC(a1, (uint64_t)v13, 1))
  {
    if (!sub_216BD5AFC((uint64_t)v13))
    {
      sub_216BE4CA8(a1, v2, 1146, (uint64_t)v11);
      sub_216B4B3B4(v11);
      return 0;
    }
    if (!sub_216B7214C((uint64_t)v2, 61))
    {
      sub_216BE4BF0(a1, 61);
      return sub_216BD7F2C(*(uint64_t **)(a1 + 8), v13, v4);
    }
    sub_216BE4CA8(a1, v2, 1013, (uint64_t)v10);
    v5 = sub_216B1E4E0(v2);
    sub_216B1E678((int)v8, ";");
    sub_216B73974(v5, v8[0], v8[1], 0, (uint64_t)v9);
    sub_216B73938((uint64_t)v10, (uint64_t)v9);
    sub_216B4C8CC(v9);
    v6 = v10;
    goto LABEL_7;
  }
LABEL_8:
  sub_216BF335C(a1);
  return 0;
}

uint64_t sub_216BE5E70(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (sub_216B71174((uint64_t)(a1 + 8), 378))
  {
    if ((sub_216BE6C40(a1, a2, a3) & 1) != 0)
      return 1;
  }
  else
  {
    sub_216BE6FF0((uint64_t)a1, a2);
    sub_216BE704C((uint64_t)a1, a2);
  }
  sub_216BE6EAC((uint64_t)a1, a2);
  return 0;
}

uint64_t sub_216BE5EF0(uint64_t a1, unsigned int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[16];
  uint64_t v12[2];
  _BYTE v13[16];
  _BYTE v14[16];
  _QWORD v15[2];
  unsigned __int8 v16;

  sub_216BD5F40(&v16, 1, 0, 0);
  v4 = *(uint64_t **)(a1 + 8);
  v5 = sub_216B7068C((uint64_t)a2);
  v6 = sub_216B1E4E0(a2);
  v15[0] = sub_216BDC9E4(v4, v5, v6, &v16);
  v15[1] = v7;
  result = sub_216B1E4E0((unsigned int *)v15);
  switch((int)result)
  {
    case 0:
      sub_216BE4CA8(a1, a2, 3137, (uint64_t)v12);
      v9 = sub_216B7068C((uint64_t)a2);
      sub_216B89E58(v12, v9);
      v10 = v12;
      goto LABEL_6;
    case 3:
      sub_216BE4CA8(a1, a2, 1018, (uint64_t)v11);
      v10 = (uint64_t *)v11;
      goto LABEL_6;
    case 4:
      sub_216BE4CA8(a1, a2, 1018, (uint64_t)v14);
      v10 = (uint64_t *)v14;
      goto LABEL_6;
    case 5:
      sub_216BE4CA8(a1, a2, 1018, (uint64_t)v13);
      v10 = (uint64_t *)v13;
LABEL_6:
      result = sub_216B4B3B4(v10);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216BE6014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  int v16;
  uint64_t *v17;
  int v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  int v24;
  __int16 v25;
  uint64_t v26[2];
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  _QWORD v30[2];
  uint64_t v31[5];
  _BYTE v32[16];
  __n128 v33;
  unsigned int v34;
  int v35;
  _BYTE v36[20];
  unsigned int v37;
  _OWORD v38[5];
  _BYTE v39[88];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  sub_216B4AED0(&v37);
  sub_216BF339C((_DWORD *)a1, 0x17u, &v37);
  v6 = sub_216B1E600(a2);
  if (sub_216BD5B40(v6) != 7)
  {
    v13 = sub_216B1E600(a2);
    v14 = sub_216B693F8(v13);
    sub_216BECEE0(a1, v14, 1096, (uint64_t)v36);
    sub_216B4B3B4(v36);
    sub_216BECD88(a1, 24, 0, 1);
    return sub_216BF335C(a1);
  }
  sub_216BC0F5C(&v35);
  sub_216BAC9C0(v39);
  sub_216BD41AC(&v33, *(_QWORD *)(a1 + 8), 136);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_216B1E600(a2);
  sub_216BE6C38(v31, v7, v8);
  while (sub_216B7214C(a1 + 32, 24))
  {
    if (!sub_216B7214C(a1 + 32, 1))
      break;
    sub_216BECEEC();
    sub_216BAC9C0(v38);
    sub_216BE45E0(a1, v38, 0);
    v30[0] = sub_216BDD3B8(*(_QWORD *)(a1 + 8), (const void **)v38);
    sub_216B268AC((uint64_t)v39, v30);
    sub_216B1FF6C(v38);
  }
  LOWORD(v35) = sub_216B4D100((uint64_t)v31);
  sub_216BE6C3C(v31);
  sub_216BD41EC(&v33);
  sub_216B4AED0(&v34);
  if (!sub_216BE592C((_DWORD *)a1, 0x18u, v37, &v34))
  {
    if (sub_216B71174(a1 + 32, 6))
    {
      v9 = sub_216B7068C(a1 + 32);
      v10 = sub_216BE4DD0(a1);
      sub_216BE4464(&v33);
      if (sub_216B71174(a1 + 32, 19))
        sub_216BE5B44((_DWORD *)a1, &v33);
      if (sub_216B71174(a1 + 32, 19))
      {
        sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 929, (uint64_t)v32);
        sub_216B4B3B4(v32);
        while (sub_216B71174(a1 + 32, 19))
        {
          sub_216BE4464(v38);
          sub_216BE5B44((_DWORD *)a1, v38);
        }
      }
      sub_216BDF270((uint64_t)v38);
      sub_216BE5C10((uint64_t)v31, (uint64_t)v38, v9, v10, &v33);
      if (sub_216B7214C(a1 + 32, 61))
      {
        sub_216BECEE0(a1, v34, 1013, (uint64_t)v30);
        v11 = sub_216B1E4E0((unsigned int *)(a1 + 32));
        sub_216B1E678((int)v29, ";");
        sub_216B73974(v11, v29[0], v29[1], 0, (uint64_t)v38);
        sub_216B73938((uint64_t)v30, (uint64_t)v38);
        sub_216B4C8CC(v38);
        v12 = v30;
LABEL_17:
        sub_216B4B3B4(v12);
        return sub_216B1FF6C(v39);
      }
      sub_216BE4BF0(a1, 61);
      v17 = *(uint64_t **)(a1 + 8);
      v18 = v37;
      v19 = v34;
      v20 = v35;
      sub_216B2D798(v28, v39);
      v21 = (uint64_t)sub_216BD6DBC(v17, a2, v18, v19, v20, v28[0], v28[1], (uint64_t)v31);
    }
    else
    {
      if (sub_216B7214C(a1 + 32, 61))
      {
        sub_216BECEE0(a1, v34, 1013, (uint64_t)v31);
        v16 = sub_216B1E4E0((unsigned int *)(a1 + 32));
        sub_216B1E678((int)v27, ";");
        sub_216B73974(v16, v27[0], v27[1], 0, (uint64_t)v38);
        sub_216B73938((uint64_t)v31, (uint64_t)v38);
        sub_216B4C8CC(v38);
        v12 = v31;
        goto LABEL_17;
      }
      sub_216BE4BF0(a1, 61);
      v22 = *(uint64_t **)(a1 + 8);
      v23 = v37;
      v24 = v34;
      v25 = v35;
      sub_216B2D798(v26, v39);
      v21 = sub_216BD6B84(v22, a2, v23, v24, v25, v26[0], v26[1]);
    }
    *(_QWORD *)&v38[0] = v21;
    if (v21)
      sub_216B268AC(a3, v38);
  }
  return sub_216B1FF6C(v39);
}

BOOL sub_216BE643C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v13;
  uint64_t v14[5];
  _BYTE v15[16];
  __n128 v16;
  _BYTE v17[16];

  v6 = a1 + 8;
  v7 = sub_216B71174((uint64_t)(a1 + 8), 64);
  if (!sub_216B71174((uint64_t)v6, 64))
    return v7;
  while (1)
  {
    sub_216BE4BF0(a1, 64);
    if (sub_216B7214C((uint64_t)v6, 6))
    {
      sub_216BE4CA8((uint64_t)a1, v6, 8, (uint64_t)v14);
      sub_216B89E2C(v14, 6u);
      sub_216B4B3B4(v14);
      return 0;
    }
    v8 = sub_216B7068C((uint64_t)v6);
    v9 = sub_216BE4DD0(a1);
    if (sub_216B71174((uint64_t)v6, 19))
      break;
    sub_216BE5B14((uint64_t)v14, a2, v8, v9);
    v16.n128_u64[0] = 0;
    v16.n128_u64[0] = (unint64_t)sub_216BE6AA8((uint64_t)a1, (uint64_t)v14);
    if (v16.n128_u64[0])
    {
      v11 = (unsigned __int8 **)&v16;
LABEL_12:
      sub_216B268AC(a3, v11);
    }
LABEL_13:
    if (!sub_216B71174((uint64_t)v6, 64))
      return v7;
  }
  v10 = (_DWORD *)sub_216B28BEC(a2);
  if (!sub_216BD5B5C(v10))
  {
    sub_216BE4464(&v16);
    sub_216BE5B44(a1, &v16);
    if (sub_216B71174((uint64_t)v6, 19))
    {
      sub_216BE4CA8((uint64_t)a1, v6, 929, (uint64_t)v15);
      sub_216B4B3B4(v15);
      while (sub_216B71174((uint64_t)v6, 19))
      {
        sub_216BE4464(v14);
        sub_216BE5B44(a1, v14);
      }
    }
    sub_216BE5C10((uint64_t)v14, a2, v8, v9, &v16);
    v13 = 0;
    v13 = sub_216BE6AA8((uint64_t)a1, (uint64_t)v14);
    if (!v13)
      goto LABEL_13;
    v11 = &v13;
    goto LABEL_12;
  }
  sub_216BE4CA8((uint64_t)a1, v6, 929, (uint64_t)v17);
  sub_216B4B3B4(v17);
  while (sub_216B71174((uint64_t)v6, 19))
  {
    sub_216BE4464(v14);
    sub_216BE5B44(a1, v14);
  }
  return 0;
}

uint64_t sub_216BE6674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  unsigned int v15;
  __n128 *v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20[2];
  _BYTE v21[16];
  unsigned __int8 *v22;
  _BYTE v23[16];
  _BYTE v24[16];
  _BYTE v25[16];
  uint64_t v26[2];
  _QWORD v27[7];
  __n128 v28;
  _BYTE v29[16];
  uint64_t v30[28];

  v30[27] = *MEMORY[0x24BDAC8D0];
  v9 = (unsigned int *)(a1 + 32);
  if (sub_216B71174(a1 + 32, 61))
  {
    if (sub_216BD80B0(a3) != 1)
      return sub_216BE4BF0(a1, 61);
    if ((sub_216BD6A50(a3) & 1) != 0)
    {
      v30[0] = sub_216B27CB0(a3);
      sub_216B268AC(a2, v30);
    }
    else
    {
      sub_216BE4CA8(a1, v9, 925, (uint64_t)v29);
      sub_216B4B3B4(v29);
    }
    return sub_216BE4BF0(a1, 61);
  }
  if (sub_216B7214C((uint64_t)v9, 6))
  {
    sub_216BE4CA8(a1, v9, 8, (uint64_t)v30);
    sub_216B89E2C(v30, 6u);
    v10 = v30;
    goto LABEL_7;
  }
  v12 = sub_216B7068C((uint64_t)v9);
  v13 = sub_216BE4DD0(a1);
  if (sub_216B71174((uint64_t)v9, 21))
  {
    sub_216BD41AC(v21, *(_QWORD *)(a1 + 8), 9);
    sub_216BE4DD4((uint64_t)v30, a3, v12, v13);
    sub_216BE4DDC(a1, (uint64_t)v30);
    if (sub_216B71174((uint64_t)v9, 61))
    {
      sub_216BE4BF0(a1, 61);
      v27[0] = sub_216BD74D4(*(uint64_t **)(a1 + 8), (uint64_t)v30);
      if (v27[0])
        sub_216B268AC(a2, v27);
      sub_216BECEEC();
    }
    else
    {
      if ((a5 & 1) != 0)
      {
        if (!sub_216B7214C((uint64_t)v9, 23))
        {
          v27[0] = sub_216BE5680(a1, (uint64_t)v30);
          if (v27[0])
            sub_216B268AC(a2, v27);
          goto LABEL_33;
        }
        sub_216BECEEC();
        sub_216BE4CA8(a1, v9, 979, (uint64_t)v25);
        v16 = (__n128 *)v25;
      }
      else
      {
        sub_216BECEEC();
        sub_216BE4CA8(a1, v9, 1013, (uint64_t)&v28);
        v19 = sub_216B1E4E0(v9);
        sub_216B1E678((int)v26, ";");
        sub_216B73974(v19, v26[0], v26[1], 0, (uint64_t)v27);
        sub_216B73938((uint64_t)&v28, (uint64_t)v27);
        sub_216B4C8CC(v27);
        v16 = &v28;
      }
      sub_216B4B3B4(v16);
      sub_216BF335C(a1);
    }
LABEL_33:
    sub_216BE56F0((uint64_t)v30);
    return sub_216BD41EC(v21);
  }
  sub_216BE4464(&v28);
  if (!sub_216B71174((uint64_t)v9, 19))
  {
LABEL_26:
    sub_216BE5C10((uint64_t)v27, a3, v12, v13, &v28);
    v22 = sub_216BE6AA8(a1, (uint64_t)v27);
    if (v22)
      sub_216B268AC(a2, &v22);
    if (!sub_216BE643C((_DWORD *)a1, a3, a2))
      return sub_216BF335C(a1);
    if (!sub_216B7214C((uint64_t)v9, 61))
      return sub_216BE4BF0(a1, 61);
    sub_216BE4CA8(a1, v9, 1013, (uint64_t)v21);
    v18 = sub_216B1E4E0(v9);
    sub_216B1E678((int)v20, ";");
    sub_216B73974(v18, v20[0], v20[1], 0, (uint64_t)v30);
    sub_216B73938((uint64_t)v21, (uint64_t)v30);
    sub_216B4C8CC(v30);
    v10 = (uint64_t *)v21;
LABEL_7:
    sub_216B4B3B4(v10);
    return sub_216BF335C(a1);
  }
  v14 = (_DWORD *)sub_216B28BEC(a3);
  if (sub_216BD5B5C(v14))
  {
    v15 = sub_216B1E4E0(v9);
    sub_216BECEE0(a1, v15, 929, (uint64_t)v24);
    v10 = (uint64_t *)v24;
    goto LABEL_7;
  }
  result = sub_216BE5B44((_DWORD *)a1, &v28);
  if ((result & 1) == 0)
  {
    if (sub_216B71174((uint64_t)v9, 19))
    {
      v17 = sub_216B1E4E0(v9);
      sub_216BECEE0(a1, v17, 929, (uint64_t)v23);
      v10 = (uint64_t *)v23;
      goto LABEL_7;
    }
    goto LABEL_26;
  }
  return result;
}

unsigned __int8 *sub_216BE6AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  _BYTE v12[16];
  _BYTE v13[16];
  _QWORD v14[2];

  v4 = sub_216B1E67C(a2);
  v14[0] = sub_216B4A11C(v4);
  v14[1] = v5;
  if ((unint64_t)sub_216B1E67C((uint64_t)v14) >= 0x401)
  {
    v6 = sub_216B4CBC4(a2);
    sub_216BECEE0(a1, v6, 1043, (uint64_t)v13);
    sub_216B4B3B4(v13);
  }
  v7 = (unsigned __int8 *)sub_216BD6188(*(_QWORD *)(a1 + 8), a2, 0);
  if (sub_216B71174(a1 + 32, 62))
  {
    v8 = sub_216BE4BF0(a1, 62);
    v9 = sub_216BE9414(a1);
    if (v9)
      v7 = (unsigned __int8 *)sub_216BD6FD4(*(uint64_t **)(a1 + 8), (uint64_t)v7, v9, v8);
  }
  else
  {
    v10 = sub_216B1E600(a2);
    if (sub_216BD5B40(v10) == 2)
    {
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 947, (uint64_t)v12);
      sub_216B4B3B4(v12);
      return 0;
    }
  }
  if (v7)
    sub_216BD7434(*(_QWORD *)(a1 + 8), v7);
  return v7;
}

uint64_t sub_216BE6BC8(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;

  v4 = sub_216B71644(a1 + 32);
  switch(v4)
  {
    case 327:
      v5 = 3;
      goto LABEL_7;
    case 379:
      v5 = 1;
      goto LABEL_7;
    case 392:
      v5 = 2;
LABEL_7:
      sub_216BE7AF8(a2, v5);
      sub_216BE4DD0(a1);
      return 1;
  }
  return 0;
}

uint64_t sub_216BE6C40(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  _BYTE v23[16];
  __int128 v24;
  _QWORD v25[2];
  _BYTE v26[20];
  int v27;

  v6 = sub_216BE4BF0(a1, 378);
  v7 = sub_216B1E4E0(a1 + 8);
  sub_216B4AED0(&v27);
  if (sub_216BECC3C(a1, 21, 992, (uint64_t)"layout", 61))
  {
LABEL_19:
    v8 = 1;
    return v8 & 1;
  }
  v8 = 0;
  do
  {
    while (sub_216B71174((uint64_t)(a1 + 8), 6))
    {
      v9 = sub_216B7068C((uint64_t)(a1 + 8));
      v10 = sub_216B4A11C(v9);
      v12 = sub_216BE70AC(v10, v11);
      if (!v12)
        break;
      v13 = v12;
      v14 = sub_216BE4BF0(a1, 6);
      sub_216BE7830((uint64_t)&v24, v14, v13);
      if (sub_216B71174((uint64_t)(a1 + 8), 62))
      {
        sub_216BE4BF0(a1, 62);
        if (sub_216B7214C((uint64_t)(a1 + 8), 8))
        {
          sub_216BE4CA8((uint64_t)a1, a1 + 8, 991, (uint64_t)v23);
          sub_216B4B3B4(v23);
          v22 = 1441856;
          sub_216B1E790(v21, (uint64_t)&v22);
          v15 = v21[0];
          v16 = v21[1];
          goto LABEL_9;
        }
        v18 = sub_216BEA3E8((uint64_t)a1);
        sub_216B210B8(&v24, (uint64_t)v18);
      }
      sub_216B267B0(a3, &v24);
      if (sub_216B7214C((uint64_t)(a1 + 8), 64))
      {
        v17 = 3;
        goto LABEL_16;
      }
      sub_216BE4BF0(a1, 64);
    }
    sub_216BE4CA8((uint64_t)a1, a1 + 8, 987, (uint64_t)v26);
    sub_216B4B3B4(v26);
    LODWORD(v24) = 1441856;
    sub_216B1E790(v25, (uint64_t)&v24);
    v15 = v25[0];
    v16 = v25[1];
LABEL_9:
    sub_216BF318C((uint64_t)a1, v15, v16, 1, 1);
    if (sub_216B71174((uint64_t)(a1 + 8), 64))
    {
      sub_216BE5AD8((uint64_t)a1);
      v17 = 2;
      v8 = 1;
    }
    else
    {
      sub_216BE592C(a1, 0x16u, v7, &v27);
      v17 = 1;
    }
LABEL_16:
    ;
  }
  while (v17 == 2);
  if (v17 != 3 || sub_216BE592C(a1, 0x16u, v7, &v27))
    goto LABEL_19;
  sub_216B380EC(v20, a3);
  sub_216BE7838(a2, v6, v20[0], v20[1]);
  return v8 & 1;
}

uint64_t sub_216BE6EAC(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  int v6;
  uint64_t result;
  char v8;
  unsigned int v9;
  _BYTE v10[16];

  v4 = (unsigned int *)(a1 + 32);
  v5 = sub_216B1E4E0((unsigned int *)(a1 + 32));
  v6 = sub_216B71644((uint64_t)v4);
  result = 0;
  if (v6 <= 356)
  {
    switch(v6)
    {
      case 79:
        v8 = 2;
        break;
      case 296:
        v8 = 1;
        break;
      case 302:
        sub_216BE4BF0(a1, 302);
        if (sub_216B71644((uint64_t)v4) == 357)
        {
          v8 = 5;
        }
        else
        {
          if (sub_216B71644((uint64_t)v4) != 395)
          {
            v9 = sub_216B1E4E0(v4);
            sub_216BECEE0(a1, v9, 985, (uint64_t)v10);
            sub_216B4B3B4(v10);
            return 0;
          }
          v8 = 6;
        }
        break;
      default:
        return result;
    }
  }
  else if (v6 > 437)
  {
    if (v6 == 438)
    {
      v8 = 7;
    }
    else
    {
      if (v6 != 454)
        return result;
      v8 = 8;
    }
  }
  else if (v6 == 357)
  {
    v8 = 3;
  }
  else
  {
    if (v6 != 395)
      return result;
    v8 = 4;
  }
  sub_216BE59F0(a2, v5, v8);
  sub_216BE4DD0(a1);
  return 1;
}

BOOL sub_216BE6FF0(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = sub_216B71644(a1 + 32);
  if (v4 == 361)
  {
    sub_216BE7844(a2, 1);
    sub_216BE4BF0(a1, 361);
  }
  return v4 == 361;
}

uint64_t sub_216BE704C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int16 v5;

  v4 = sub_216B71644(a1 + 32);
  if (v4 == 423)
  {
    v5 = 1;
    goto LABEL_5;
  }
  if (v4 == 323)
  {
    v5 = 2;
LABEL_5:
    sub_216BE786C(a2, v5);
    sub_216BE4DD0(a1);
    return 1;
  }
  return 0;
}

uint64_t sub_216BE70AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  char v159;
  char v160;
  _QWORD v161[3];

  v2 = sub_216B32854(v161, a1, a2);
  v160 = 1;
  v3 = sub_216B32A7C((uint64_t)v2, (uint64_t)"shared", (uint64_t)&v160);
  v159 = 2;
  v4 = sub_216B32A7C(v3, (uint64_t)"packed", (uint64_t)&v159);
  v158 = 3;
  v5 = sub_216B32A7C(v4, (uint64_t)"std140", (uint64_t)&v158);
  v157 = 4;
  v6 = sub_216B32A7C(v5, (uint64_t)"std430", (uint64_t)&v157);
  v156 = 5;
  v7 = sub_216B345E4(v6, (uint64_t)"row_major", (uint64_t)&v156);
  v155 = 6;
  v8 = sub_216B34654(v7, (uint64_t)"column_major", (uint64_t)&v155);
  v154 = 7;
  v9 = sub_216B32858(v8, "rgba32f", (uint64_t)&v154);
  v153 = 8;
  v10 = sub_216B32858(v9, "rgba16f", (uint64_t)&v153);
  v152 = 9;
  v11 = sub_216B32938(v10, (uint64_t)"rg32f", (uint64_t)&v152);
  v151 = 10;
  v12 = sub_216B32938(v11, (uint64_t)"rg16f", (uint64_t)&v151);
  v150 = 11;
  v13 = sub_216B346C4(v12, "r11f_g11f_b10f", (uint64_t)&v150);
  v149 = 12;
  v14 = sub_216B32A18(v13, "r32f", (uint64_t)&v149);
  v148 = 13;
  v15 = sub_216B32A18(v14, "r16f", (uint64_t)&v148);
  v147 = 14;
  v16 = sub_216B32A7C(v15, (uint64_t)"rgba16", (uint64_t)&v147);
  v146 = 15;
  v17 = sub_216B32AEC(v16, "rgb10_a2", (uint64_t)&v146);
  v145 = 16;
  v18 = sub_216B32938(v17, (uint64_t)"rgba8", (uint64_t)&v145);
  v144 = 17;
  v19 = sub_216B32A18(v18, "rg16", (uint64_t)&v144);
  v143 = 18;
  v20 = sub_216B329A8(v19, (unsigned __int16 *)"rg8", (uint64_t)&v143);
  v142 = 19;
  v21 = sub_216B329A8(v20, (unsigned __int16 *)"r16", (uint64_t)&v142);
  v141 = 20;
  v22 = sub_216B348A8(v21, (unsigned __int16 *)"r8", (uint64_t)&v141);
  v140 = 21;
  v23 = sub_216B34654(v22, (uint64_t)"rgba16_snorm", (uint64_t)&v140);
  v139 = 22;
  v24 = sub_216B34334(v23, "rgba8_snorm", (uint64_t)&v139);
  v138 = 23;
  v25 = sub_216B328C8(v24, (uint64_t)"rg16_snorm", (uint64_t)&v138);
  v137 = 24;
  v26 = sub_216B345E4(v25, (uint64_t)"rg8_snorm", (uint64_t)&v137);
  v136 = 25;
  v27 = sub_216B345E4(v26, (uint64_t)"r16_snorm", (uint64_t)&v136);
  v135 = 26;
  v28 = sub_216B32AEC(v27, "r8_snorm", (uint64_t)&v135);
  v134 = 27;
  v29 = sub_216B32858(v28, "rgba32i", (uint64_t)&v134);
  v133 = 28;
  v30 = sub_216B32858(v29, "rgba16i", (uint64_t)&v133);
  v132 = 29;
  v31 = sub_216B32A7C(v30, (uint64_t)"rgba8i", (uint64_t)&v132);
  v131 = 30;
  v32 = sub_216B32938(v31, (uint64_t)"rg32i", (uint64_t)&v131);
  v130 = 31;
  v33 = sub_216B32938(v32, (uint64_t)"rg16i", (uint64_t)&v130);
  v129 = 32;
  v34 = sub_216B32A18(v33, "rg8i", (uint64_t)&v129);
  v128 = 33;
  v35 = sub_216B32A18(v34, "r32i", (uint64_t)&v128);
  v127 = 34;
  v36 = sub_216B32A18(v35, "r16i", (uint64_t)&v127);
  v126 = 35;
  v37 = sub_216B329A8(v36, (unsigned __int16 *)"r8i", (uint64_t)&v126);
  v125 = 36;
  v38 = sub_216B32AEC(v37, "rgba32ui", (uint64_t)&v125);
  v124 = 37;
  v39 = sub_216B32AEC(v38, "rgba16ui", (uint64_t)&v124);
  v123 = 38;
  v40 = sub_216B328C8(v39, (uint64_t)"rgb10_a2ui", (uint64_t)&v123);
  v122 = 39;
  v41 = sub_216B32858(v40, "rgba8ui", (uint64_t)&v122);
  v121 = 40;
  v42 = sub_216B32A7C(v41, (uint64_t)"rg32ui", (uint64_t)&v121);
  v120 = 41;
  v43 = sub_216B32A7C(v42, (uint64_t)"rg16ui", (uint64_t)&v120);
  v119 = 42;
  v44 = sub_216B32938(v43, (uint64_t)"rg8ui", (uint64_t)&v119);
  v118 = 43;
  v45 = sub_216B32938(v44, (uint64_t)"r32ui", (uint64_t)&v118);
  v117 = 44;
  v46 = sub_216B32938(v45, (uint64_t)"r16ui", (uint64_t)&v117);
  v116 = 45;
  v47 = sub_216B32A18(v46, "r8ui", (uint64_t)&v116);
  v115 = 46;
  v48 = sub_216B32AEC(v47, "location", (uint64_t)&v115);
  v114 = 47;
  v49 = sub_216B32858(v48, "binding", (uint64_t)&v114);
  v113 = 48;
  v50 = sub_216B345E4(v49, (uint64_t)"triangles", (uint64_t)&v113);
  v112 = 49;
  v51 = sub_216B32938(v50, (uint64_t)"quads", (uint64_t)&v112);
  v111 = 50;
  v52 = sub_216B32AEC(v51, "isolines", (uint64_t)&v111);
  v110 = 51;
  v53 = sub_216B4A400(v52, "equal_spacing", (uint64_t)&v110);
  v109 = 52;
  v54 = sub_216B4A2A8(v53, "fractional_even_spacing", (uint64_t)&v109);
  v108 = 53;
  v55 = sub_216B4A54C(v54, "fractional_odd_spacing", (uint64_t)&v108);
  v107 = 54;
  v56 = sub_216B348A8(v55, (unsigned __int16 *)"cw", (uint64_t)&v107);
  v106 = 55;
  v57 = sub_216B329A8(v56, (unsigned __int16 *)"ccw", (uint64_t)&v106);
  v105 = 56;
  v58 = sub_216B328C8(v57, (uint64_t)"point_mode", (uint64_t)&v105);
  v104 = 57;
  v59 = sub_216B32A7C(v58, (uint64_t)"points", (uint64_t)&v104);
  v103 = 58;
  v60 = sub_216B32938(v59, (uint64_t)"lines", (uint64_t)&v103);
  v102 = 59;
  v61 = sub_216B4A390(v60, "lines_adjacency", (uint64_t)&v102);
  v101 = 60;
  v62 = sub_216B4A6A8(v61, "triangles_adjacency", (uint64_t)&v101);
  v100 = 61;
  v63 = sub_216B34334(v62, "invocations", (uint64_t)&v100);
  v99 = 62;
  v64 = sub_216B4A470(v63, (uint64_t)"origin_upper_left", (uint64_t)&v99);
  v98 = 63;
  v65 = sub_216B4A31C(v64, (uint64_t)"pixel_center_integer", (uint64_t)&v98);
  v97 = 64;
  v66 = sub_216B4A31C(v65, (uint64_t)"early_fragment_tests", (uint64_t)&v97);
  v96 = 65;
  v67 = sub_216B34654(v66, (uint64_t)"local_size_x", (uint64_t)&v96);
  v95 = 66;
  v68 = sub_216B34654(v67, (uint64_t)"local_size_y", (uint64_t)&v95);
  v94 = 67;
  v69 = sub_216B34654(v68, (uint64_t)"local_size_z", (uint64_t)&v94);
  v93 = 68;
  v70 = sub_216B32AEC(v69, "depthAny", (uint64_t)&v93);
  v92 = 69;
  v71 = sub_216B4A400(v70, "depth_greater", (uint64_t)&v92);
  v91 = 70;
  v72 = sub_216B345E4(v71, (uint64_t)"depthLess", (uint64_t)&v91);
  v90 = 71;
  v73 = sub_216B4A390(v72, "depth_unchanged", (uint64_t)&v90);
  v89 = 72;
  v74 = sub_216B32938(v73, (uint64_t)"index", (uint64_t)&v89);
  v88 = 73;
  v75 = sub_216B32AEC(v74, "vertices", (uint64_t)&v88);
  v87 = 74;
  v76 = sub_216B328C8(v75, (uint64_t)"line_strip", (uint64_t)&v87);
  v86 = 75;
  v77 = sub_216B346C4(v76, "triangle_strip", (uint64_t)&v86);
  v85 = 76;
  v78 = sub_216B34654(v77, (uint64_t)"max_vertices", (uint64_t)&v85);
  v84 = 77;
  v79 = sub_216B32A7C(v78, (uint64_t)"stream", (uint64_t)&v84);
  v83 = 78;
  v80 = sub_216B32A7C(v79, (uint64_t)"offset", (uint64_t)&v83);
  v82 = 0;
  return sub_216B4AA54(v80, &v82);
}

uint64_t sub_216BE7830(uint64_t a1, int a2, char a3)
{
  return sub_216BE9178(a1, a2, a3);
}

uint64_t sub_216BE7838(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  return result;
}

uint64_t sub_216BE7844(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 56);
  result = a1 + 56;
  v4 = (v3 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xFFFEFFFF | ((a2 & 1) << 16);
  *(_WORD *)result = v3;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216BE786C(uint64_t a1, __int16 a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 56);
  result = a1 + 56;
  v4 = v3 & 0xFFFF3FFF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0x3FFF | (a2 << 14);
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216BE7890(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  uint64_t result;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = (unsigned int *)(a1 + 32);
  v3 = sub_216B71644(a1 + 32);
  result = 0;
  if (v3 > 374)
  {
    switch(v3)
    {
      case 375:
      case 376:
      case 377:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 403:
      case 408:
      case 437:
      case 451:
      case 452:
      case 453:
      case 455:
      case 456:
      case 457:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
        goto LABEL_3;
      default:
        return result;
    }
    return result;
  }
  if (v3 <= 296)
  {
    if (v3 > 100)
    {
      v5 = v3 == 123 || v3 == 269;
      v6 = v3 == 101 || v3 == 106;
      if (v3 <= 122)
        return v6;
      else
        return v5;
    }
    if (v3 == 6)
    {
      v9 = *(uint64_t **)(a1 + 8);
      v10 = sub_216B7068C((uint64_t)v2);
      sub_216B1E4E0(v2);
      return sub_216BDCB0C(v9, v10) != 0;
    }
    v7 = v3 == 92;
    v8 = v3 == 87;
    return v8 || v7;
  }
  if (v3 <= 326)
  {
    v7 = v3 == 298 || v3 == 299;
    v8 = v3 == 297;
    return v8 || v7;
  }
  switch(v3)
  {
    case 327:
    case 328:
    case 329:
    case 330:
LABEL_3:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_216BE79EC(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  _BOOL8 result;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = (unsigned int *)(a1 + 32);
  v3 = sub_216B71644(a1 + 32);
  result = 1;
  if (v3 > 374)
  {
    switch(v3)
    {
      case 375:
      case 376:
      case 377:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 395:
      case 399:
      case 403:
      case 408:
      case 437:
      case 451:
      case 452:
      case 453:
      case 455:
      case 456:
      case 457:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 521:
        return result;
      default:
        return 0;
    }
    return result;
  }
  if (v3 > 296)
  {
    v5 = v3 - 297;
    if (v5 <= 0x3D && ((1 << v5) & 0x30000003C0000027) != 0)
      return result;
    return 0;
  }
  if ((v3 - 87) > 0x24 || ((1 << (v3 - 87)) & 0x1000084021) == 0)
  {
    if (v3 == 6)
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = sub_216B7068C((uint64_t)v2);
      sub_216B1E4E0(v2);
      return sub_216BDCB0C(v6, v7) != 0;
    }
    if (v3 != 269)
      return 0;
  }
  return result;
}

uint64_t sub_216BE7AF8(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 56);
  result = a1 + 56;
  v4 = v3 & 0xFFFFCFFF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xCFFF | ((a2 & 3) << 12);
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216BE7B20(uint64_t *a1, uint64_t a2, int a3)
{
  unsigned int *i;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  __int16 v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  _BYTE v23[16];
  _QWORD v24[2];
  unsigned __int8 v25;
  uint64_t *v26;
  char v27;

  v26 = a1;
  v27 = a3;
  for (i = (unsigned int *)(a1 + 4); ; sub_216BE8A74(*a1, (uint64_t)i))
  {
    while (2)
    {
      v7 = sub_216B71644((uint64_t)i);
      if (v7 > 327)
      {
        if (v7 > 374)
        {
          switch(v7)
          {
            case 375:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 14);
              v17 = a1;
              v18 = 375;
              goto LABEL_98;
            case 376:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 15);
              v17 = a1;
              v18 = 376;
              goto LABEL_98;
            case 377:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 16);
              v17 = a1;
              v18 = 377;
              goto LABEL_98;
            case 380:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 23);
              v17 = a1;
              v18 = 380;
              goto LABEL_98;
            case 381:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 23);
              v17 = a1;
              v18 = 381;
              goto LABEL_98;
            case 382:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 26);
              v17 = a1;
              v18 = 382;
              goto LABEL_98;
            case 383:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 27);
              v17 = a1;
              v18 = 383;
              goto LABEL_98;
            case 384:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 24);
              v17 = a1;
              v18 = 384;
              goto LABEL_98;
            case 385:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 28);
              v17 = a1;
              v18 = 385;
              goto LABEL_98;
            case 386:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 24);
              v17 = a1;
              v18 = 386;
              goto LABEL_98;
            case 387:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 29);
              v17 = a1;
              v18 = 387;
              goto LABEL_98;
            case 388:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 25);
              v17 = a1;
              v18 = 388;
              goto LABEL_98;
            case 389:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 30);
              v17 = a1;
              v18 = 389;
              goto LABEL_98;
            case 390:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 31);
              v17 = a1;
              v18 = 390;
              goto LABEL_98;
            case 391:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 25);
              v17 = a1;
              v18 = 391;
              goto LABEL_98;
            case 403:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 41);
              v17 = a1;
              v18 = 403;
              goto LABEL_98;
            case 408:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 43);
              v17 = a1;
              v18 = 408;
              goto LABEL_98;
            case 437:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 6);
              v17 = a1;
              v18 = 437;
              goto LABEL_98;
            case 451:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 17);
              v17 = a1;
              v18 = 451;
              goto LABEL_98;
            case 452:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 18);
              v17 = a1;
              v18 = 452;
              goto LABEL_98;
            case 453:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 19);
              v17 = a1;
              v18 = 453;
              goto LABEL_98;
            case 455:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 8);
              v17 = a1;
              v18 = 455;
              goto LABEL_98;
            case 456:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 9);
              v17 = a1;
              v18 = 456;
              goto LABEL_98;
            case 457:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 10);
              v17 = a1;
              v18 = 457;
              goto LABEL_98;
            case 461:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 10);
              v17 = a1;
              v18 = 461;
              goto LABEL_98;
            case 462:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 13);
              v17 = a1;
              v18 = 462;
              goto LABEL_98;
            case 463:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 41);
              v17 = a1;
              v18 = 463;
              goto LABEL_98;
            case 464:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 42);
              v17 = a1;
              v18 = 464;
              goto LABEL_98;
            case 465:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 32);
              v17 = a1;
              v18 = 465;
              goto LABEL_98;
            case 466:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 32);
              v17 = a1;
              v18 = 466;
              goto LABEL_98;
            case 467:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 35);
              v17 = a1;
              v18 = 467;
              goto LABEL_98;
            case 468:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 36);
              v17 = a1;
              v18 = 468;
              goto LABEL_98;
            case 469:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 33);
              v17 = a1;
              v18 = 469;
              goto LABEL_98;
            case 470:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 37);
              v17 = a1;
              v18 = 470;
              goto LABEL_98;
            case 471:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 33);
              v17 = a1;
              v18 = 471;
              goto LABEL_98;
            case 472:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 38);
              v17 = a1;
              v18 = 472;
              goto LABEL_98;
            case 473:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 34);
              v17 = a1;
              v18 = 473;
              goto LABEL_98;
            case 474:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 39);
              v17 = a1;
              v18 = 474;
              goto LABEL_98;
            case 475:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 40);
              v17 = a1;
              v18 = 475;
              goto LABEL_98;
            case 476:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 34);
              v17 = a1;
              v18 = 476;
              goto LABEL_98;
            case 477:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 8);
              v17 = a1;
              v18 = 477;
              goto LABEL_98;
            case 478:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 9);
              v17 = a1;
              v18 = 478;
              goto LABEL_98;
            case 479:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 10);
              v17 = a1;
              v18 = 479;
              goto LABEL_98;
            case 480:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 11);
              v17 = a1;
              v18 = 480;
              goto LABEL_98;
            case 481:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 12);
              v17 = a1;
              v18 = 481;
              goto LABEL_98;
            case 482:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 13);
              v17 = a1;
              v18 = 482;
              goto LABEL_98;
            case 483:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 23);
              v17 = a1;
              v18 = 483;
              goto LABEL_98;
            case 484:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 24);
              v17 = a1;
              v18 = 484;
              goto LABEL_98;
            case 485:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 25);
              v17 = a1;
              v18 = 485;
              goto LABEL_98;
            case 486:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 32);
              v17 = a1;
              v18 = 486;
              goto LABEL_98;
            case 487:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 33);
              v17 = a1;
              v18 = 487;
              goto LABEL_98;
            case 488:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 34);
              v17 = a1;
              v18 = 488;
              goto LABEL_98;
            case 489:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 42);
              v17 = a1;
              v18 = 489;
              goto LABEL_98;
            case 490:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 44);
              v17 = a1;
              v18 = 490;
              goto LABEL_98;
            case 491:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 10);
              v17 = a1;
              v18 = 491;
              goto LABEL_98;
            case 492:
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 10);
              v17 = a1;
              v18 = 492;
              goto LABEL_98;
            default:
              goto LABEL_94;
          }
        }
        switch(v7)
        {
          case 328:
            sub_216BE8690((char *)&v26);
            sub_216BE5A88(a2, 11);
            v17 = a1;
            v18 = 328;
            break;
          case 329:
            sub_216BE8690((char *)&v26);
            sub_216BE5A88(a2, 12);
            v17 = a1;
            v18 = 329;
            break;
          case 330:
            sub_216BE8690((char *)&v26);
            sub_216BE5A88(a2, 13);
            v17 = a1;
            v18 = 330;
            break;
          default:
            goto LABEL_94;
        }
        goto LABEL_98;
      }
      if (v7 > 122)
      {
        switch(v7)
        {
          case 297:
            sub_216BE8690((char *)&v26);
            sub_216BE5A88(a2, 20);
            v17 = a1;
            v18 = 297;
            break;
          case 298:
            sub_216BE8690((char *)&v26);
            sub_216BE5A88(a2, 21);
            v17 = a1;
            v18 = 298;
            break;
          case 299:
            sub_216BE8690((char *)&v26);
            sub_216BE5A88(a2, 22);
            v17 = a1;
            v18 = 299;
            break;
          case 300:
          case 301:
            goto LABEL_94;
          case 302:
            if (!a3)
              return 1;
            v16 = sub_216BD5B40(a2);
            if (v16 > 8 || ((1 << v16) & 0x118) == 0)
              goto LABEL_95;
            sub_216BE4CA8((uint64_t)a1, i, 945, (uint64_t)v23);
            sub_216B4B3B4(v23);
            sub_216BE4DD0(a1);
            continue;
          default:
            if (v7 == 123)
            {
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 7);
              v17 = a1;
              v18 = 123;
            }
            else
            {
              if (v7 != 269)
                goto LABEL_94;
              sub_216BE8690((char *)&v26);
              sub_216BE5A88(a2, 4);
              v17 = a1;
              v18 = 269;
            }
            break;
        }
LABEL_98:
        sub_216BE4BF0(v17, v18);
        return 0;
      }
      break;
    }
    if (v7 > 86)
      break;
    if (v7 != 6)
      goto LABEL_94;
    sub_216BD5F40(&v25, 1, 0, 0);
    v8 = (uint64_t *)a1[1];
    v9 = sub_216B7068C((uint64_t)i);
    v10 = sub_216B1E4E0(i);
    v24[0] = sub_216BDC9E4(v8, v9, v10, &v25);
    v24[1] = v11;
    v12 = sub_216B1E4E0((unsigned int *)v24);
    if (v12 != 1)
      __asm { BR              X10 }
    v13 = sub_216B1E67C((uint64_t)v24);
    sub_216B203A4((uint64_t)i, v13);
    v14 = (_DWORD *)sub_216B1E67C((uint64_t)v24);
    v15 = sub_216B91C38(v14);
    sub_216B74800((uint64_t)i, v15);
  }
  if (v7 <= 100)
  {
    if (v7 != 87)
    {
      if (v7 == 92)
      {
        sub_216BE8690((char *)&v26);
        sub_216BE5A88(a2, 5);
        v17 = a1;
        v18 = 92;
        goto LABEL_98;
      }
LABEL_94:
      if (a3)
      {
LABEL_95:
        sub_216BE4CA8((uint64_t)a1, i, 1018, (uint64_t)v22);
        sub_216B4B3B4(v22);
      }
      return 1;
    }
    sub_216BE8690((char *)&v26);
    sub_216BE5A88(a2, 3);
    v17 = a1;
    v18 = 87;
    goto LABEL_98;
  }
  if (v7 != 101)
  {
    if (v7 != 106)
      goto LABEL_94;
    sub_216BE8690((char *)&v26);
    sub_216BE5A88(a2, 2);
    v17 = a1;
    v18 = 106;
    goto LABEL_98;
  }
  v19 = sub_216BE8718((uint64_t)a1);
  if (!v19)
    return 1;
  v20 = sub_216B3DB48(v19);
  sub_216BE5A88(a2, 1);
  sub_216BE8A5C(a2, v20);
  sub_216BE8A64(a2);
  return 0;
}

void sub_216BE8634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v11 = sub_216BE8AC4((uint64_t)va1);
  v7 = sub_216B1E600((uint64_t)va);
  v8 = sub_216BA76B8(v7);
  if (v8)
  {
    v9 = v8;
    sub_216BE5A88(v6, 1);
    v10 = sub_216B1E67C(v9);
    sub_216BE8A5C(v6, v10);
    sub_216BE4DD0(v5);
    JUMPOUT(0x216BE8610);
  }
  JUMPOUT(0x216BE85E8);
}

uint64_t *sub_216BE8684(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  return sub_216BE9188(a1, a2, a3, a4);
}

char *sub_216BE8690(char *result)
{
  uint64_t v1;
  unsigned int *v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7[2];

  if (result[8])
  {
    v1 = *(_QWORD *)result;
    v2 = (unsigned int *)(*(_QWORD *)result + 32);
    v3 = sub_216B71644((uint64_t)v2);
    result = sub_216B69AC4(v3);
    if (result)
    {
      v4 = sub_216B71644((uint64_t)v2);
      result = (char *)sub_216BA28DC(v4, *(_QWORD *)(v1 + 16));
      if ((result & 1) == 0)
      {
        sub_216BE4CA8(v1, v2, 1169, (uint64_t)v7);
        v5 = sub_216BA2994(*(_QWORD *)(v1 + 16));
        v6 = sub_216BA3A0C(v5);
        sub_216B7A71C(v7, v6);
        return (char *)sub_216B4B3B4(v7);
      }
    }
  }
  return result;
}

uint64_t sub_216BE8718(uint64_t a1)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v14[2];
  uint64_t v15;
  _BYTE v16[8];
  _BYTE v17[20];
  unsigned int v18;
  _BYTE v19[16];
  uint64_t v20;
  unsigned int v21;
  const void *v22[11];
  uint64_t v23[12];

  v23[11] = *MEMORY[0x24BDAC8D0];
  v2 = sub_216BE4BF0(a1, 101);
  if (sub_216B7214C(a1 + 32, 23) && sub_216B7214C(a1 + 32, 6))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 11, (uint64_t)v23);
    v3 = sub_216B89E2C(v23, 6u);
    sub_216B89E2C(v3, 0x17u);
    v4 = v23;
LABEL_11:
    sub_216B4B3B4(v4);
    return 0;
  }
  sub_216B4AED0(&v21);
  if (sub_216B71174(a1 + 32, 6))
  {
    v5 = sub_216B7068C(a1 + 32);
    v21 = sub_216BE4BF0(a1, 6);
    if (sub_216B7214C(a1 + 32, 23))
    {
      if (v5)
      {
        v6 = sub_216BDCB0C(*(uint64_t **)(a1 + 8), v5);
        if (v6)
        {
          v7 = v6;
          sub_216BECEE0(a1, v2, 4735, (uint64_t)v22);
          v8 = sub_216B89E58((uint64_t *)v22, v5);
          sub_216B848DC(&v20, v2);
          sub_216BE8AEC(v20, (uint64_t)v23);
          sub_216B73938((uint64_t)v8, (uint64_t)v23);
          sub_216B4C8CC(v23);
          sub_216B4B3B4(v22);
          return v7;
        }
      }
LABEL_10:
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1155, (uint64_t)v19);
      v4 = (uint64_t *)v19;
      goto LABEL_11;
    }
  }
  else
  {
    if (sub_216B7214C(a1 + 32, 23))
      goto LABEL_10;
    v5 = 0;
  }
  sub_216B4AED0(&v18);
  sub_216BF339C((_DWORD *)a1, 0x17u, &v18);
  if (sub_216B71174(a1 + 32, 24))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 964, (uint64_t)v17);
    sub_216B4B3B4(v17);
  }
  sub_216BAC9C0(v23);
  sub_216BD41AC(v16, *(_QWORD *)(a1 + 8), 24);
  sub_216BAC9C0(v22);
  while (sub_216B7214C(a1 + 32, 24))
  {
    if (!sub_216B7214C(a1 + 32, 1))
      break;
    sub_216BECEEC();
    sub_216BE8B14(a1, (uint64_t)v22);
    if (sub_216B26878((uint64_t)v22))
    {
      v15 = 0;
      v15 = sub_216BDD3B8(*(_QWORD *)(a1 + 8), v22);
      sub_216B20594(v22);
      if (v15)
        sub_216B268AC((uint64_t)v23, &v15);
    }
    else
    {
      sub_216BECEEC();
    }
  }
  sub_216B1FF6C(v22);
  sub_216BD41EC(v16);
  sub_216B4AED0(v22);
  if (sub_216BE592C((_DWORD *)a1, 0x18u, v18, v22))
  {
    v7 = 0;
  }
  else
  {
    sub_216B71174(a1 + 32, 6);
    v9 = *(uint64_t **)(a1 + 8);
    v10 = v21;
    v11 = (int)v22[0];
    v12 = v18;
    sub_216B2D798(v14, v23);
    v7 = sub_216BD55F8(v9, v2, v10, v5, v12, v11, v14[0], v14[1]);
  }
  sub_216B1FF6C(v23);
  return v7;
}

uint64_t sub_216BE8A5C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

_WORD *sub_216BE8A64(uint64_t a1)
{
  _WORD *result;
  __int16 v2;

  v2 = *(_WORD *)(a1 + 56);
  result = (_WORD *)(a1 + 56);
  *result = v2 | 1;
  return result;
}

__n128 sub_216BE8A74(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v5;
  int v6;

  if (*(_QWORD *)(a1 + 1984))
  {
    if (sub_216B87F9C(a1))
    {
      v5 = sub_216B60770(a1 + 1928, *(_DWORD *)(a1 + 1984) - 1);
      v6 = *(_DWORD *)(a2 + 15);
      result = *(__n128 *)a2;
      *(_OWORD *)v5 = *(_OWORD *)a2;
      *(_DWORD *)(v5 + 15) = v6;
    }
  }
  return result;
}

uint64_t sub_216BE8AC4(uint64_t a1)
{
  uint64_t v2;

  sub_216B20C64(&v2, *(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t sub_216BE8AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = sub_216B7AA24(a1);
  return sub_216B75900(v3, v4, a2);
}

uint64_t sub_216BE8B14(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  int v5;
  BOOL v7;
  int v8;
  uint64_t v9[2];
  _BYTE v10[56];
  _BYTE v11[16];
  unsigned int *v12;
  _BYTE v13[64];
  _BYTE v14[16];

  if (sub_216BE4BF4(a1))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1158, (uint64_t)v14);
    v4 = v14;
LABEL_3:
    sub_216B4B3B4(v4);
    return sub_216BF335C(a1);
  }
  v5 = sub_216B1E4E0((unsigned int *)(a1 + 32));
  sub_216BE4400((uint64_t)v13, v5);
  if (!sub_216BE4CEC(a1, v13, 1))
  {
    v12 = sub_216BE8CA0(a1, (uint64_t)v13);
    v7 = v12 == 0;
    if (v12)
      sub_216B268AC(a2, &v12);
    while (sub_216B71174(a1 + 32, 64))
    {
      sub_216BE4BF0(a1, 64);
      v12 = sub_216BE8CA0(a1, (uint64_t)v13);
      if (v12)
        sub_216B268AC(a2, &v12);
      else
        v7 = 1;
    }
    if (!sub_216B7214C(a1 + 32, 61))
      return sub_216BE4BF0(a1, 61);
    if (!v7)
    {
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1013, (uint64_t)v11);
      v8 = sub_216B1E4E0((unsigned int *)(a1 + 32));
      sub_216B1E678((int)v9, ";");
      sub_216B73974(v8, v9[0], v9[1], 0, (uint64_t)v10);
      sub_216B73938((uint64_t)v11, (uint64_t)v10);
      sub_216B4C8CC(v10);
      v4 = v11;
      goto LABEL_3;
    }
  }
  return sub_216BF335C(a1);
}

unsigned int *sub_216BE8CA0(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15[5];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  __n128 v19;
  _BYTE v20[16];

  v4 = (_DWORD *)sub_216B28BEC(a2);
  if (sub_216BD5B5C(v4))
  {
    v5 = (_QWORD *)sub_216B28BEC(a2);
    if (!sub_216B6EFA4(v5, v6))
    {
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1156, (uint64_t)v20);
      sub_216B4B3B4(v20);
    }
  }
  if (sub_216B7214C(a1 + 32, 6))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 8, (uint64_t)v15);
    sub_216B89E2C(v15, 6u);
    v7 = v15;
LABEL_6:
    sub_216B4B3B4(v7);
    return 0;
  }
  v10 = sub_216B7068C(a1 + 32);
  v11 = sub_216BE4BF0(a1, 6);
  sub_216BE4464(&v19);
  if (!sub_216B71174(a1 + 32, 19))
  {
LABEL_17:
    if (sub_216B71174(a1 + 32, 19))
    {
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 929, (uint64_t)v16);
      sub_216B4B3B4(v16);
      while (sub_216B71174(a1 + 32, 19))
      {
        sub_216BE4464(v15);
        sub_216BE5B44((_DWORD *)a1, v15);
      }
      return 0;
    }
    sub_216BE5C10((uint64_t)v15, a2, v10, v11, &v19);
    v8 = sub_216BD6188(*(_QWORD *)(a1 + 8), (uint64_t)v15, 1);
    if (!sub_216B71174(a1 + 32, 62))
      return v8;
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1157, (uint64_t)v14);
    v7 = (uint64_t *)v14;
    goto LABEL_6;
  }
  v12 = (_DWORD *)sub_216B28BEC(a2);
  if (sub_216BD5B5C(v12))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 929, (uint64_t)v18);
    sub_216B4B3B4(v18);
    while (sub_216B71174(a1 + 32, 19))
    {
      sub_216BE4464(v15);
      sub_216BE5B44((_DWORD *)a1, v15);
    }
    return 0;
  }
  if ((sub_216BE5B44((_DWORD *)a1, &v19) & 1) == 0)
  {
    if (!sub_216B6EFA4(&v19, v13))
    {
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1156, (uint64_t)v17);
      sub_216B4B3B4(v17);
    }
    goto LABEL_17;
  }
  return 0;
}

uint64_t sub_216BE8EE4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  v5 = sub_216BE8F1C(a1, a2, a3, a4);
  sub_216BAC9C0(v5 + 40);
  sub_216BAC9C0(a1 + 128);
  return a1;
}

uint64_t sub_216BE8F1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  sub_216BE4464(a1 + 24);
  return a1;
}

uint64_t sub_216BE8F4C(uint64_t a1)
{
  sub_216B1FF6C(a1 + 128);
  sub_216B1FF6C(a1 + 40);
  return a1;
}

uint64_t sub_216BE8F7C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_216BE8F8C(uint64_t a1, int a2, int a3)
{
  uint64_t v6;

  v6 = *(unsigned int *)(a1 + 8);
  sub_216BE8FD8(a1, a3);
  *(_DWORD *)(a1 + 8) |= a3 & a2;
  return v6;
}

uint64_t sub_216BE8FD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) &= ~a2;
  return result;
}

uint64_t sub_216BE8FE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v2 - 24)) = a2[3];
  sub_216BE902C(a1 + 1);
  return std::ostream::~ostream();
}

uint64_t sub_216BE9030(uint64_t a1)
{
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  std::string::~string((std::string *)(a1 + 64));
  return std::streambuf::~streambuf();
}

__n128 sub_216BE9064(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __n128 *a5)
{
  __n128 result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  result = *a5;
  *(__n128 *)(a1 + 24) = *a5;
  return result;
}

uint64_t sub_216BE9078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v6;
  char v7;
  char v8;

  *(_QWORD *)a1 = a2;
  v6 = (unsigned __int16 *)(a1 + 8);
  sub_216BC0F5C((_WORD *)(a1 + 8));
  sub_216BC0F5C((_WORD *)(a1 + 12));
  sub_216B4AED0((_DWORD *)(a1 + 16));
  sub_216B4AED0((_DWORD *)(a1 + 20));
  sub_216BD5B40(a3);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 440);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 444);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 448);
  sub_216BE0884(a2, a3, v6, (unsigned int *)(a2 + 444), (unsigned int *)(a2 + 448));
  if (sub_216BA7650(v6))
  {
    v7 = sub_216BA7674(v6);
    sub_216BD4CA4((_WORD *)(a2 + 440), v7);
  }
  if (sub_216BA7680(v6))
  {
    v8 = sub_216BA768C(v6);
    sub_216BD4CBC((_WORD *)(a2 + 440), v8);
  }
  return a1;
}

uint64_t *sub_216BE9154(uint64_t *result)
{
  uint64_t v1;

  *(_WORD *)(*result + 440) = *((_WORD *)result + 6);
  v1 = *result;
  *(_DWORD *)(v1 + 444) = *((_DWORD *)result + 4);
  *(_DWORD *)(v1 + 448) = *((_DWORD *)result + 5);
  return result;
}

uint64_t sub_216BE9178(uint64_t result, int a2, char a3)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 12) = a3;
  return result;
}

uint64_t *sub_216BE9188(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = sub_216B2D410(a1);
  *((_DWORD *)v8 + 2) = a2;
  *((_DWORD *)v8 + 3) = a3;
  sub_216BE44A8(v8, 1u);
  sub_216B60994(a1, a4);
  return a1;
}

_QWORD *sub_216BE91D8(_QWORD *a1)
{
  _QWORD *result;

  result = sub_216BE9248(a1);
  *result = MEMORY[0x24BEDB898] + 16;
  return result;
}

uint64_t *sub_216BE91FC(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[1];
  sub_216BE925C((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), a3);
  return a1;
}

_QWORD *sub_216BE9248(_QWORD *result)
{
  *result = MEMORY[0x24BEDB890] + 16;
  return result;
}

uint64_t sub_216BE925C(std::ios_base *a1, void *a2)
{
  uint64_t result;

  std::ios_base::init(a1, a2);
  a1[1].__vftable = 0;
  result = sub_216B4CBB8();
  a1[1].__fmtflags_ = result;
  return result;
}

uint64_t sub_216BE9288(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::streambuf::basic_streambuf();
  *v4 = MEMORY[0x24BEDB848] + 16;
  sub_216B25034(v4 + 8);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = a2;
  return a1;
}

uint64_t sub_216BE92CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  return v2;
}

uint64_t sub_216BE92DC(int a1)
{
  if ((a1 - 27) > 0x2F)
    return 0;
  else
    return dword_216C19328[(__int16)(a1 - 27)];
}

uint64_t sub_216BE9304(__int16 a1)
{
  return dword_216C193E8[a1 - 27];
}

uint64_t sub_216BE9318(__int16 a1)
{
  return dword_216C194A8[a1 - 32];
}

uint64_t sub_216BE932C(uint64_t result)
{
  int v1;

  if ((int)result <= 44)
  {
    v1 = result - 29;
    result = 1;
    switch(v1)
    {
      case 0:
        result = 2;
        break;
      case 1:
      case 3:
      case 4:
      case 6:
      case 7:
      case 8:
LABEL_15:
        __break(1u);
        break;
      case 2:
        result = 7;
        break;
      case 5:
        return result;
      case 9:
        result = 10;
        break;
      default:
        result = 3;
        break;
    }
  }
  else
  {
    switch((int)result)
    {
      case '5':
        result = 9;
        break;
      case '6':
      case '8':
      case '9':
      case ';':
      case '<':
      case '=':
        goto LABEL_15;
      case '7':
        result = 11;
        break;
      case ':':
        result = 8;
        break;
      case '>':
        result = 4;
        break;
      default:
        if ((_DWORD)result == 45)
          result = 6;
        else
          result = 5;
        break;
    }
  }
  return result;
}

unsigned int *sub_216BE93D8(uint64_t a1)
{
  unsigned int *result;

  result = sub_216BE9414(a1);
  if (result)
    return (unsigned int *)sub_216BE9450(a1, result, 1);
  return result;
}

unsigned int *sub_216BE9414(uint64_t a1)
{
  unsigned int *result;

  result = sub_216BE95F0(a1);
  if (result)
    return (unsigned int *)sub_216BE9450(a1, result, 2);
  return result;
}

uint64_t sub_216BE9450(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v6 = a1 + 32;
  v7 = sub_216B71644(a1 + 32);
  if (a2)
  {
    v8 = sub_216BE92DC(v7);
    while ((int)v8 >= a3)
    {
      v28 = *(_OWORD *)v6;
      v29 = *(_QWORD *)(v6 + 16);
      sub_216BE4DD0(a1);
      if (v8 == 3)
      {
        v26 = v28;
        v27 = v29;
        a2 = sub_216BE9BB8(a1, a2, (unsigned int *)&v26);
        v9 = sub_216B71644(v6);
        v10 = sub_216BE92DC(v9);
      }
      else
      {
        v11 = sub_216BE95F0(a1);
        if (!v11)
          return 0;
        v12 = (unint64_t)v11;
        v13 = sub_216B71644(v6);
        v14 = sub_216BE92DC(v13);
        v16 = v8 != 2 || v14 != 2;
        if (v8 < v14 || !v16)
        {
          if (v8 == 2)
            v17 = 2;
          else
            v17 = v8 + 1;
          v18 = sub_216BE9450(a1, v12, v17);
          if (!v18)
            return 0;
          v12 = v18;
          v19 = sub_216B71644(v6);
          v14 = sub_216BE92DC(v19);
        }
        v10 = v14;
        v20 = *(uint64_t **)(a1 + 8);
        v21 = sub_216B1E4E0((unsigned int *)&v28);
        v22 = sub_216B71644((uint64_t)&v28);
        if (v8 == 2)
        {
          v24 = sub_216BE932C(v22);
          return sub_216BDA1F0(v20, v21, v24, (uint64_t)a2, v12);
        }
        v23 = sub_216BE9304(v22);
        a2 = sub_216BD9DD4(v20, v21, v23, (unint64_t)a2, v12);
      }
      v8 = v10;
      if (!a2)
        return (uint64_t)a2;
    }
  }
  return (uint64_t)a2;
}

unsigned int *sub_216BE95F0(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t *v18;
  const char *v19;
  int v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *result;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39[2];
  _BYTE v40[16];
  uint64_t v41[2];
  unsigned __int8 v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  uint64_t v47[2];
  _BYTE v48[16];
  __int128 v49[4];

  v2 = (unsigned int *)(a1 + 32);
  v3 = sub_216B1E4E0((unsigned int *)(a1 + 32));
  sub_216BE4400((uint64_t)v49, v3);
  if (sub_216B7214C((uint64_t)v2, 6) && (sub_216BE4CEC(a1, v49, 0) & 1) == 0)
  {
    if (!sub_216B7214C((uint64_t)v2, 21))
    {
      v12 = *(uint64_t **)(a1 + 8);
      sub_216B1E678((int)v47, &byte_216C19659);
      sub_216BDF260(v12, v49, v47[0], v47[1]);
      v14 = v13;
      v15 = sub_216B1E4E0((unsigned int *)v49);
      v16 = (unsigned int *)sub_216BE9DDC(a1, v14, v15);
      v17 = a1;
      return sub_216BE9EC8(v17, v16);
    }
    sub_216BE4CA8(a1, v2, 993, (uint64_t)v48);
    v11 = (uint64_t *)v48;
    goto LABEL_39;
  }
  v4 = sub_216B71644((uint64_t)v2);
  if (v4 > 98)
  {
    if (v4 > 130)
    {
      if (v4 == 131 || v4 == 145)
      {
        v20 = sub_216B71644((uint64_t)v2);
        v21 = *(uint64_t **)(a1 + 8);
        v22 = sub_216BE4DD0(a1);
        v10 = (uint64_t)sub_216BD8C48(v21, v20, v22);
        goto LABEL_31;
      }
      if (v4 == 361)
      {
LABEL_16:
        sub_216BE4CA8(a1, v2, 976, (uint64_t)v43);
        v11 = (uint64_t *)v43;
LABEL_39:
        sub_216B4B3B4(v11);
        return 0;
      }
LABEL_41:
      sub_216BE4CA8(a1, v2, 976, (uint64_t)v46);
      v11 = (uint64_t *)v46;
      goto LABEL_39;
    }
    if (v4 == 99)
    {
      sub_216BE4CA8(a1, v2, 1040, (uint64_t)&v44);
      v19 = "'sizeof'";
LABEL_37:
      v18 = &v44;
    }
    else
    {
      if (v4 != 105)
        goto LABEL_41;
      sub_216BE4CA8(a1, v2, 1039, (uint64_t)&v44);
      v18 = sub_216B60EA8(&v44, (uint64_t)"'unsigned'");
      v19 = "'uint'";
    }
    sub_216B60EA8(v18, (uint64_t)v19);
    v11 = &v44;
    goto LABEL_39;
  }
  if (v4 > 0x3D)
    goto LABEL_25;
  if (((1 << v4) & 0x1AB00000000) != 0)
  {
    v5 = sub_216B71644((uint64_t)v2);
    v6 = sub_216BE4DD0(a1);
    v7 = (unsigned int *)sub_216BE95F0(a1);
    if (v7)
    {
      v8 = *(uint64_t **)(a1 + 8);
      v9 = sub_216BE9318(v5);
      v10 = sub_216BD935C(v8, v6, v9, (uint64_t)v7, 0);
LABEL_31:
      v7 = (unsigned int *)v10;
    }
LABEL_32:
    v17 = a1;
    v16 = v7;
    return sub_216BE9EC8(v17, v16);
  }
  if (((1 << v4) & 0x2000000000100000) != 0)
    goto LABEL_16;
  if (v4 != 21)
  {
LABEL_25:
    switch(v4)
    {
      case 6:
        v23 = sub_216B1E4E0(v2);
        v24 = sub_216B7068C((uint64_t)v2);
        sub_216BE4BF0(a1, 6);
        if (sub_216B7214C((uint64_t)v2, 21) && sub_216B7214C((uint64_t)v2, 19))
        {
          result = sub_216BD8934(*(uint64_t **)(a1 + 8), v23, v24);
          v7 = result;
          if (result)
            goto LABEL_32;
          return result;
        }
        if (sub_216B71174((uint64_t)v2, 21))
        {
          sub_216BD5F40(&v42, 1, 1, 1);
          v44 = sub_216BDC9E4(*(uint64_t **)(a1 + 8), v24, v23, &v42);
          v45 = v26;
          switch(sub_216B1E4E0((unsigned int *)&v44))
          {
            case 0u:
            case 1u:
              v27 = a1;
              v28 = v2;
              v29 = 1185;
              goto LABEL_47;
            case 2u:
              v33 = sub_216BE8AC4((uint64_t)&v44);
              goto LABEL_60;
            case 3u:
              sub_216BE4CA8(a1, v2, 982, (uint64_t)v40);
              v31 = (uint64_t *)v40;
              goto LABEL_48;
            case 4u:
              v34 = sub_216B1E67C((uint64_t)&v44);
              v35 = (uint64_t)sub_216BEA1E0(a1, v34, v23);
              goto LABEL_61;
            case 5u:
              v36 = sub_216BD5FC0((uint64_t)&v44);
              v35 = sub_216BEA2C4(a1, v36, v23);
              goto LABEL_61;
            default:
              goto LABEL_51;
          }
        }
        sub_216BD5F40(&v42, 1, 1, 0);
        v44 = sub_216BDC9E4(*(uint64_t **)(a1 + 8), v24, v23, &v42);
        v45 = v30;
        switch(sub_216B1E4E0((unsigned int *)&v44))
        {
          case 0u:
          case 1u:
          case 4u:
            v27 = a1;
            v28 = v2;
            v29 = 1186;
LABEL_47:
            sub_216BE4CA8(v27, v28, v29, (uint64_t)v41);
            sub_216B89E58(v41, v24);
            v31 = v41;
LABEL_48:
            sub_216B4B3B4(v31);
            v32 = 1;
            sub_216BECD88(a1, 61, 1, 1);
            v7 = 0;
            break;
          case 2u:
            sub_216BE4464(v41);
            if (sub_216BE5B44(a1, v41))
            {
              v7 = 0;
              goto LABEL_58;
            }
            v37 = *(uint64_t **)(a1 + 8);
            v38 = sub_216BE8AC4((uint64_t)&v44);
            sub_216B1E678((int)v39, &byte_216C19659);
            v33 = sub_216BDEF34(v37, v41, v38, v39[0], v39[1]);
LABEL_60:
            v35 = sub_216BE9DDC(a1, v33, v23);
LABEL_61:
            v7 = (unsigned int *)v35;
            goto LABEL_62;
          case 3u:
          case 5u:
            v7 = sub_216BD8934(*(uint64_t **)(a1 + 8), v23, v24);
            if (v7)
              goto LABEL_62;
LABEL_58:
            v32 = 1;
            break;
          default:
LABEL_51:
            v7 = 0;
LABEL_62:
            v32 = 2;
            break;
        }
        if (v32 == 2)
          goto LABEL_32;
        break;
      case 8:
        v10 = (uint64_t)sub_216BEA3E8(a1);
        goto LABEL_31;
      case 9:
        sub_216BE4CA8(a1, v2, 1040, (uint64_t)&v44);
        v19 = "char constants";
        goto LABEL_37;
      case 13:
        sub_216BE4CA8(a1, v2, 1040, (uint64_t)&v44);
        v19 = "string literals";
        goto LABEL_37;
      default:
        goto LABEL_41;
    }
    return 0;
  }
  sub_216B4AED0(&v44);
  sub_216BF339C((_DWORD *)a1, 0x15u, &v44);
  v7 = (unsigned int *)sub_216BE93D8(a1);
  sub_216B4AED0(v41);
  if (!sub_216BE592C((_DWORD *)a1, 0x16u, v44, v41))
    goto LABEL_32;
  return 0;
}

_DWORD *sub_216BE9BB8(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  _DWORD *result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  char *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20[2];
  uint64_t v21[7];
  uint64_t v22[2];
  int v23;
  unsigned int v24;

  result = (_DWORD *)sub_216BE93D8(a1);
  if (result)
  {
    v7 = (uint64_t)result;
    sub_216B4AED0(&v24);
    if (sub_216B71174(a1 + 32, 60))
    {
      v8 = sub_216BE4DD0(a1);
    }
    else
    {
      v23 = sub_216B1E4E0((unsigned int *)(a1 + 32));
      v9 = sub_216B40EE8(*(_QWORD *)a1);
      if ((sub_216B4F6FC(&v23) || sub_216BE9DC4(*(_QWORD *)a1, v23, (unsigned int *)&v23))
        && (LOBYTE(v21[0]) = 0, v10 = sub_216B62D74(&v23, -1), v11 = sub_216B634EC(v9, v10, v21), !LOBYTE(v21[0]))
        && *v11 == 32
        && (v12 = sub_216B62D74(&v23, -2), v13 = sub_216B634EC(v9, v12, v21), !LOBYTE(v21[0]))
        && *v13 == 32)
      {
        v23 = sub_216B62D74(&v23, -1);
        v14 = ":";
      }
      else
      {
        v14 = ": ";
      }
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 8, (uint64_t)v22);
      v15 = sub_216B89E2C(v22, 0x3Cu);
      v16 = v23;
      sub_216B1E678((int)v20, v14);
      sub_216B73974(v16, v20[0], v20[1], 0, (uint64_t)v21);
      sub_216B73938((uint64_t)v15, (uint64_t)v21);
      sub_216B4C8CC(v21);
      sub_216B4B3B4(v22);
      sub_216BE4CA8(a1, a3, 50, (uint64_t)v21);
      sub_216B60EA8(v21, (uint64_t)"?");
      sub_216B4B3B4(v21);
      v8 = sub_216B1E4E0((unsigned int *)(a1 + 32));
    }
    v24 = v8;
    result = (_DWORD *)sub_216BE9414(a1);
    if (result)
    {
      v17 = (uint64_t)result;
      v18 = *(uint64_t **)(a1 + 8);
      v19 = sub_216B1E4E0(a3);
      return sub_216BDA038(v18, v19, v24, a2, v7, v17);
    }
  }
  return result;
}

uint64_t sub_216BE9DC4(uint64_t a1, int a2, unsigned int *a3)
{
  return sub_216B719BC(a2, *(_DWORD **)(a1 + 48), *(_QWORD *)(a1 + 24), a3);
}

uint64_t sub_216BE9DDC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v10[2];
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[40];
  _BYTE v14[56];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_216B2D768(v14);
  sub_216B35A60(v13);
  sub_216B4AED0(&v12);
  sub_216B4AED0(&v11);
  if (sub_216BEA830((_DWORD *)a1, (uint64_t)v14, (uint64_t)v13, &v12, &v11))
  {
    v6 = 0;
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = v12;
    sub_216BEA8D8(v10, v14);
    v6 = sub_216BE25B8(v7, a2, a3, v8, v10[0], v10[1], v11);
  }
  sub_216B1FF6C(v13);
  sub_216B1FF6C(v14);
  return v6;
}

unsigned int *sub_216BE9EC8(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int *v4;
  unint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;
  unsigned int v32;
  uint64_t v33[2];
  const void *v34[2];

  v2 = a2;
  if (a2)
  {
    v4 = (unsigned int *)(a1 + 32);
    HIDWORD(v5) = sub_216B71644(a1 + 32) - 19;
    LODWORD(v5) = HIDWORD(v5);
    switch((v5 >> 1))
    {
      case 0u:
        v11 = sub_216BEA6F0(a1);
        sub_216B4AED0(v33);
        v12 = sub_216BE93D8(a1);
        if (v12 && (v13 = (unsigned int *)v12, sub_216B71174((uint64_t)v4, 20)))
        {
          LODWORD(v33[0]) = sub_216B1E4E0(v4);
          v10 = (uint64_t)sub_216BD9A08(*(uint64_t **)(a1 + 8), (uint64_t)v2, v11, v13, v33[0]);
        }
        else
        {
          v10 = 0;
        }
        sub_216BE592C((_DWORD *)a1, 0x14u, v11, v33);
        goto LABEL_20;
      case 3u:
        v14 = sub_216BE4BF0(a1, 25);
        if (sub_216B71174((uint64_t)v4, 3))
        {
          v33[0] = sub_216BAB358((uint64_t)v2);
          v15 = sub_216B1E600((uint64_t)v33);
          v16 = sub_216BA7040(v15);
          if (v16)
          {
            v17 = sub_216BA734C(v16);
            sub_216B28BEC(*(_QWORD *)(a1 + 8));
            sub_216BEA494(v17);
          }
          else
          {
            v33[0] = sub_216BAB358((uint64_t)v2);
            v23 = sub_216B1E600((uint64_t)v33);
            v24 = sub_216BA76B8(v23);
            if (v24)
            {
              v25 = sub_216B1E67C(v24);
              v26 = sub_216BD96AC(v25 + 16);
              v28 = v27;
              v29 = sub_216B28BEC(*(_QWORD *)(a1 + 8));
              sub_216BEA628(v26, v28, v29, (uint64_t *)(a1 + 80));
            }
          }
          sub_216BE4DD0(a1);
          goto LABEL_19;
        }
        if (!sub_216B71174((uint64_t)v4, 6))
          goto LABEL_19;
        v18 = sub_216B7068C((uint64_t)v4);
        v19 = sub_216BE4DD0(a1);
        v20 = sub_216B4A11C(v18);
        v22 = v21;
        sub_216B1E678((int)v34, "length");
        if (sub_216B274F0(v20, v22, v34[0], (size_t)v34[1]))
        {
          if (sub_216B7214C((uint64_t)v4, 21))
          {
            sub_216BE4CA8(a1, v4, 8, (uint64_t)v33);
            sub_216B89E2C(v33, 0x15u);
            sub_216B4B3B4(v33);
            sub_216BECD88(a1, 22, 0, 0);
LABEL_19:
            v10 = 0;
            goto LABEL_20;
          }
          v32 = sub_216BE56FC(a1);
          sub_216B4AED0(v33);
          if (sub_216BE592C((_DWORD *)a1, 0x16u, v32, v33))
            goto LABEL_19;
          v31 = sub_216BD973C(*(uint64_t **)(a1 + 8), (uint64_t)v2, v14, v33[0]);
        }
        else
        {
          v31 = sub_216BD93F0(*(uint64_t **)(a1 + 8), v2, v14, v18, v19);
        }
        v10 = (uint64_t)v31;
LABEL_20:
        v2 = (unsigned int *)sub_216BE9EC8(a1, v10);
        break;
      case 7u:
      case 9u:
        v6 = *(uint64_t **)(a1 + 8);
        v7 = sub_216B1E4E0(v4);
        v8 = sub_216B71644((uint64_t)v4);
        v9 = sub_216BE9318(v8);
        v10 = sub_216BD935C(v6, v7, v9, (uint64_t)v2, 1);
        sub_216BE4DD0(a1);
        goto LABEL_20;
      default:
        return v2;
    }
  }
  return v2;
}

unsigned int *sub_216BEA1E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int *v6;
  uint64_t *v7;
  uint64_t v9[2];
  int v10;
  unsigned int v11;
  _BYTE v12[40];
  _BYTE v13[56];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_216B2D768(v13);
  sub_216B35A60(v12);
  sub_216B4AED0(&v11);
  sub_216B4AED0(&v10);
  if (sub_216BEA830((_DWORD *)a1, (uint64_t)v13, (uint64_t)v12, &v11, &v10))
  {
    v6 = 0;
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 8);
    sub_216BEA8D8(v9, v13);
    v6 = sub_216BDA338(v7, a3, a2, v9[0], v9[1], v10);
  }
  sub_216B1FF6C(v12);
  sub_216B1FF6C(v13);
  return v6;
}

uint64_t sub_216BEA2C4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v11[2];
  _BYTE v12[24];
  int v13;
  unsigned int v14;
  _BYTE v15[40];
  _BYTE v16[56];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_216B2D768(v16);
  sub_216B35A60(v15);
  sub_216B4AED0(&v14);
  sub_216B4AED0(&v13);
  if (a2 != 76)
  {
    if (sub_216BEA830((_DWORD *)a1, (uint64_t)v16, (uint64_t)v15, &v14, &v13))
      goto LABEL_3;
LABEL_5:
    v8 = *(uint64_t **)(a1 + 8);
    v9 = v13;
    sub_216BEA8D8(v11, v16);
    v7 = sub_216BDABA0(v8, a3, v9, a2, v11[0], v11[1]);
    goto LABEL_6;
  }
  sub_216BD41B0(v12, *(_QWORD *)(a1 + 8));
  v6 = sub_216BEA830((_DWORD *)a1, (uint64_t)v16, (uint64_t)v15, &v14, &v13);
  sub_216BD41F0(v12);
  if (!v6)
    goto LABEL_5;
LABEL_3:
  v7 = 0;
LABEL_6:
  sub_216B1FF6C(v15);
  sub_216B1FF6C(v16);
  return v7;
}

_DWORD *sub_216BEA3E8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  char v11;
  const void *v12[19];

  sub_216B295EC(v12);
  v2 = sub_216B693F8(a1 + 32);
  sub_216B294F0(v12, v2 + 1);
  v11 = 0;
  v3 = sub_216B9BC28(*(_QWORD *)a1, (unsigned int *)(a1 + 32), v12, &v11);
  if (v11)
  {
    v5 = 0;
  }
  else
  {
    v6 = v3;
    v7 = v4;
    v8 = *(uint64_t **)(a1 + 8);
    v9 = sub_216BE4DD0(a1);
    v5 = sub_216BD8CD4(v8, v6, v7, v9);
  }
  sub_216B2489C(v12);
  return v5;
}

void sub_216BEA494(int a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_216B26D14(&v3);
  sub_216B26D14(&v2);
  __asm { BR              X10 }
}

uint64_t sub_216BEA4E8()
{
  uint64_t *v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7[2];
  uint64_t v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;

  sub_216B1E678((int)&v9, "x");
  v11 = v9;
  sub_216B1E678((int)&v9, "r");
  v10 = v9;
  v3 = 1;
  do
  {
    v4 = v11;
    sub_216B1E678((int)v8, &byte_216C19659);
    sub_216BEA8DC(v4, *((uint64_t *)&v4 + 1), v3, v8[0], v8[1], v1, v0);
    v5 = v10;
    sub_216B1E678((int)v7, &byte_216C19659);
    sub_216BEA8DC(v5, *((uint64_t *)&v5 + 1), v3, v7[0], v7[1], v1, v0);
    v3 = (v3 + 1);
  }
  while (v3 <= v2);
  *(_QWORD *)&v9 = "length()";
  return sub_216BD81CC(v0, (uint64_t)&v9);
}

uint64_t sub_216BEA628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v6 = (uint64_t *)sub_216B1E600((uint64_t)v17);
  result = sub_216B35430(v17);
  if (v6 != (uint64_t *)result)
  {
    v8 = (uint64_t *)result;
    do
    {
      v9 = *v6;
      v10 = (uint64_t *)sub_216BA5E50(*v6);
      result = sub_216BA5E54(v9);
      for (i = (uint64_t *)result; v10 != i; result = sub_216BD81CC(a4, (uint64_t)&v15))
      {
        v12 = *v10++;
        v13 = sub_216BA6A7C(v12);
        sub_216BEA9DC(&v16, a3, v13, v14);
        v15 = sub_216BEA9E0(&v16);
      }
      ++v6;
    }
    while (v6 != v8);
  }
  return result;
}

uint64_t sub_216BEA6F0(uint64_t a1)
{
  unsigned int *v2;
  int v3;

  v2 = (unsigned int *)(a1 + 32);
  if (sub_216B71174(a1 + 32, 19))
  {
    v3 = 1;
LABEL_5:
    *(_DWORD *)(a1 + 64) += v3;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 60))
  {
    v3 = -1;
    goto LABEL_5;
  }
LABEL_6:
  *(_DWORD *)(a1 + 56) = sub_216B1E4E0(v2);
  sub_216B9C594(*(_QWORD *)a1, v2);
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_216BEA75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  int v11;
  uint64_t v12;

  v6 = a1 + 32;
  while (1)
  {
    v12 = 0;
    v12 = sub_216BE9414(a1);
    if (sub_216BEA828(*(_QWORD *)(a1 + 8)))
    {
      v7 = sub_216BEA828(*(_QWORD *)(a1 + 8));
      v8 = sub_216BD415C(v7) == 256;
    }
    else
    {
      v8 = 0;
    }
    v9 = v12 || v8;
    if (v9 != 1)
      break;
    sub_216B268AC(a2, &v12);
    if (sub_216B7214C(v6, 64))
      break;
    v11 = sub_216BE4BF0(a1, 64);
    sub_216B26208(a3, &v11);
  }
  return v9 ^ 1u;
}

uint64_t sub_216BEA828(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184);
}

BOOL sub_216BEA830(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, _DWORD *a5)
{
  sub_216BF339C(a1, 0x15u, a4);
  if (!sub_216B7214C((uint64_t)(a1 + 8), 22) || !sub_216BEA75C((uint64_t)a1, a2, a3))
    return sub_216BE592C(a1, 0x16u, *a4, a5);
  sub_216BECD88((uint64_t)a1, 22, 1, 0);
  return 1;
}

uint64_t sub_216BEA8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  char *v10;
  uint64_t result;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v23 = a2;
  v20 = a4;
  v21 = a5;
  if (sub_216B1E67C((uint64_t)&v20) >= (unint64_t)a3)
  {
    sub_216BEA9DC(v18, a6, v20, v21);
    v19 = sub_216BEA9E0(v18);
    return sub_216BD81CC(a7, (uint64_t)&v19);
  }
  else
  {
    v10 = (char *)sub_216B1E600((uint64_t)&v22);
    result = sub_216B1E608(&v22);
    if (v10 != (char *)result)
    {
      v12 = (char *)result;
      do
      {
        v13 = *v10++;
        sub_216BEAA1C(v18, v20, v21);
        sub_216B6E098((uint64_t)v18, v13);
        v14 = v22;
        v15 = v23;
        v16 = sub_216B28180((uint64_t)v18);
        sub_216BEA8DC(v14, v15, a3, v16, v17, a6, a7);
        result = sub_216B2489C(v18);
      }
      while (v10 != v12);
    }
  }
  return result;
}

char *sub_216BEA9E0(_QWORD *a1)
{
  if (sub_216B603D4(a1))
    return &byte_216C19659;
  else
    return (char *)sub_216BA7490(a1);
}

uint64_t *sub_216BEAA20(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  const void *v14[2];
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  *a1 = 0;
  sub_216B1E678((int)v14, &byte_216C19659);
  if (!sub_216B274F0(a3, a4, v14[0], (size_t)v14[1]))
  {
    v8 = sub_216B1E67C((uint64_t)v15);
    *a1 = sub_216B2663C(a2, (v8 + 5), 4uLL);
    *(_DWORD *)*a1 = sub_216B1E67C((uint64_t)v15);
    v9 = (void *)sub_216BA74C8(a1);
    v10 = (const void *)sub_216B1E600((uint64_t)v15);
    v11 = sub_216B1E67C((uint64_t)v15);
    memcpy(v9, v10, v11);
    v12 = sub_216BA74C8(a1);
    *(_BYTE *)(v12 + sub_216B1E67C((uint64_t)v15)) = 0;
  }
  return a1;
}

uint64_t sub_216BEAAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (char *)sub_216B1E600((uint64_t)v7);
  v5 = (char *)sub_216B1E608(v7);
  return sub_216BEAB48(a1, v4, v5);
}

uint64_t sub_216BEAB48(uint64_t a1, char *a2, char *a3)
{
  const void **v6;

  v6 = (const void **)sub_216B2112C();
  sub_216B202D8(v6, a2, a3);
  return a1;
}

uint64_t sub_216BEAB8C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[3];
  __int128 v13;
  uint64_t v14;
  _BYTE v15[408];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = *a4;
  v14 = *((_QWORD *)a4 + 2);
  sub_216B9B72C(v15);
  v5 = sub_216B1E4E0((unsigned int *)&v13);
  sub_216BEACF4(521, v5, v12);
  sub_216B623F0((uint64_t)v15, (uint64_t)v12);
  while (sub_216B7214C((uint64_t)&v13, 2))
  {
    sub_216B623F0((uint64_t)v15, (uint64_t)&v13);
    sub_216B89BC0(a2, (uint64_t)&v13);
  }
  v6 = sub_216B1E4E0((unsigned int *)&v13);
  sub_216BEACF4(522, v6, v12);
  sub_216B623F0((uint64_t)v15, (uint64_t)v12);
  v7 = sub_216B60724((uint64_t)v15);
  v12[0] = sub_216BEAD44(v7, a2);
  v12[1] = v8;
  sub_216B1E600((uint64_t)v15);
  sub_216B1E67C((uint64_t)v15);
  sub_216B262E0((uint64_t)v12);
  sub_216B7AC98();
  v9 = sub_216B262E0((uint64_t)v12);
  v10 = sub_216B60724((uint64_t)v15);
  sub_216B92C84(a2, v9, v10, 1, 0);
  return sub_216B1FF6C(v15);
}

_DWORD *sub_216BEACF4@<X0>(__int16 a1@<W0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  sub_216B70D84(a3);
  sub_216B75074((uint64_t)a3);
  sub_216B74800((uint64_t)a3, a1);
  return sub_216B2A7D8(a3, a2);
}

uint64_t sub_216BEAD44(unsigned int a1, uint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;

  v3 = (uint64_t *)sub_216BEB7F0(a2);
  v4 = sub_216B3DE34();
  v5 = sub_216B2663C(v3, 24 * a1, v4);
  sub_216BEB7F8(&v7, v5, a1);
  return v7;
}

uint64_t sub_216BEADB4(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *a1;
  v2 = (_QWORD *)sub_216B1D1D4(32);
  sub_216BEADE8(v2);
  return sub_216B9B060(v1, (uint64_t)v2);
}

uint64_t sub_216BEADEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19[2];
  _QWORD v20[2];
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23;
  double v24[3];

  sub_216BEB198((uint64_t)v24, a1);
  sub_216BE4BF0(a1, 521);
  v22[1] = a1;
  v23 = a1;
  v21[1] = a1;
  v22[0] = a1;
  v21[0] = a1;
  v2 = sub_216B7068C(a1 + 32);
  if (!v2)
  {
    sub_216B1E678((int)v20, "pragma");
    v12 = v20[0];
    v13 = v20[1];
    goto LABEL_10;
  }
  v3 = v2;
  if (!sub_216BEB210(v2, "optimize") && !sub_216BEB25C(v3, (uint64_t)"debug"))
  {
    if (!sub_216BEB25C(v3, (uint64_t)"STDGL"))
    {
      sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 875, (uint64_t)v19);
      sub_216B89E58(v19, v3);
      goto LABEL_19;
    }
    sub_216BE4BF0(a1, 6);
    if (sub_216B7214C(a1 + 32, 361))
    {
      v14 = 361;
LABEL_22:
      sub_216BEB2B4(v22, v14);
      goto LABEL_23;
    }
    sub_216BE4BF0(a1, 361);
    if (sub_216B7214C(a1 + 32, 21))
    {
LABEL_21:
      v14 = 21;
      goto LABEL_22;
    }
    sub_216BE4DD0(a1);
    if (sub_216B7214C(a1 + 32, 6))
    {
      v14 = 6;
      goto LABEL_22;
    }
    v17 = sub_216B7068C(a1 + 32);
    if (sub_216B9B008(v17, (unsigned __int16 *)"all"))
    {
      sub_216BE4BF0(a1, 6);
      if (sub_216B7214C(a1 + 32, 22))
      {
        v14 = 22;
      }
      else
      {
        sub_216BE4DD0(a1);
        if (!sub_216B7214C(a1 + 32, 522))
        {
          sub_216BE4BF0(a1, 522);
          sub_216BEB350(*(_QWORD *)(a1 + 8), 1);
          goto LABEL_23;
        }
        v14 = 2;
      }
      goto LABEL_22;
    }
    sub_216B1E678((int)v18, "all");
    v12 = v18[0];
    v13 = v18[1];
LABEL_10:
    sub_216BEB19C(v21, v12, v13);
    goto LABEL_23;
  }
  v4 = sub_216BEB210(v3, "optimize");
  v5 = sub_216BE4BF0(a1, 6);
  if (!sub_216B71174(a1 + 32, 21))
    goto LABEL_21;
  v6 = sub_216BE4DD0(a1);
  v7 = sub_216B7068C(a1 + 32);
  if (!v7 || (v8 = v7, sub_216B7214C(a1 + 32, 6)))
  {
    v9 = a1;
    v10 = (unsigned int *)(a1 + 32);
    v11 = 639;
LABEL_8:
    sub_216BE4CA8(v9, v10, v11, (uint64_t)v19);
    sub_216B7A71C(v19, !v4);
LABEL_19:
    sub_216B4B3B4(v19);
    sub_216BEB320(&v23);
    goto LABEL_23;
  }
  if (!sub_216B9AFBC(v8, (unsigned __int16 *)"on") && !sub_216B9B008(v8, (unsigned __int16 *)"off"))
    goto LABEL_25;
  sub_216B9AFBC(v8, (unsigned __int16 *)"on");
  sub_216BE4BF0(a1, 6);
  if (sub_216B7214C(a1 + 32, 22))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 8, (uint64_t)v19);
    sub_216B89E2C(v19, 0x16u);
    sub_216B4B3B4(v19);
    sub_216BECEE0(a1, v6, 50, (uint64_t)v19);
    sub_216B89E2C(v19, 0x15u);
    goto LABEL_19;
  }
  sub_216BE4DD0(a1);
  if (sub_216B7214C(a1 + 32, 522))
  {
LABEL_25:
    v9 = a1;
    v10 = (unsigned int *)(a1 + 32);
    v11 = 640;
    goto LABEL_8;
  }
  sub_216BE4BF0(a1, 522);
  v16 = *(_QWORD *)(a1 + 8);
  if (v4)
    sub_216BDCF70(v16, v5);
  else
    sub_216BDCFCC(v16, v5);
LABEL_23:
  sub_216BEB358(v24);
  return 0;
}

uint64_t sub_216BEB19C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v9[2];

  v5 = a1 + 1;
  v6 = *a1;
  v7 = (unsigned int *)sub_216B96ED8(*a1);
  sub_216BE4CA8(v6, v7, 8, (uint64_t)v9);
  sub_216B4B340(v9, a2, a3);
  sub_216B4B3B4(v9);
  return sub_216BEB320(v5);
}

BOOL sub_216BEB210(uint64_t a1, _QWORD *a2)
{
  return sub_216B4AA80(a1) == 8 && *(_QWORD *)sub_216B4AA68(a1) == *a2;
}

BOOL sub_216BEB25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (sub_216B4AA80(a1) != 5)
    return 0;
  v4 = sub_216B4AA68(a1);
  return *(_DWORD *)v4 == *(_DWORD *)a2 && *(unsigned __int8 *)(v4 + 4) == *(unsigned __int8 *)(a2 + 4);
}

uint64_t sub_216BEB2B4(uint64_t *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v7[2];

  v3 = a1 + 1;
  v4 = *a1;
  v5 = (unsigned int *)sub_216B96ED8(*a1);
  sub_216BE4CA8(v4, v5, 8, (uint64_t)v7);
  sub_216B89E2C(v7, a2);
  sub_216B4B3B4(v7);
  return sub_216BEB320(v3);
}

uint64_t sub_216BEB320(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_216BEB834(*a1, 522);
  return sub_216BE4BF0(v1, 522);
}

uint64_t sub_216BEB350(uint64_t result, char a2)
{
  *(_BYTE *)(result + 216) = a2;
  return result;
}

_WORD *sub_216BEB35C(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  int v5;
  uint64_t v7[2];
  uint64_t v8;

  sub_216BE4BF0(a1, 523);
  v2 = sub_216B1E4E0((unsigned int *)(a1 + 32));
  v8 = a1;
  v3 = sub_216B1E67C(a1 + 32);
  v4 = sub_216BA3A1C(v3);
  if (v4)
  {
    v5 = v4;
    sub_216BE4BF0(a1, 8);
    sub_216BEB464(*(_QWORD *)(a1 + 16), v5);
    sub_216BE4BF0(a1, 2);
    return sub_216BDD028(*(uint64_t **)(a1 + 8), v5, v2);
  }
  else
  {
    sub_216BECEE0(a1, v2, 432, (uint64_t)v7);
    sub_216B7A71C(v7, v3);
    sub_216B4B3B4(v7);
    sub_216BEB434(&v8);
    return 0;
  }
}

uint64_t sub_216BEB434(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_216BEB834(*a1, 2);
  return sub_216BE4BF0(v1, 2);
}

uint64_t sub_216BEB464(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 0xE0 | a2 & 0x1F;
  return result;
}

unsigned int *sub_216BEB474(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  uint64_t *v25[2];
  uint64_t v26;

  v26 = a1;
  sub_216BE4BF0(a1, 524);
  v2 = sub_216B1E4E0((unsigned int *)(a1 + 32));
  v3 = sub_216B7068C(a1 + 32);
  v4 = sub_216B4A11C(v3);
  v6 = v5;
  sub_216BECC3C((_DWORD *)a1, 6, 8, (uint64_t)"extension name", 0);
  v7 = sub_216B7068C(a1 + 32);
  v8 = sub_216B4A11C(v7);
  v10 = v9;
  sub_216BECC3C((_DWORD *)a1, 6, 8, (uint64_t)"extension behavior", 0);
  v11 = sub_216BEB6B4(v8, v10);
  if (!v11)
  {
    sub_216BECEE0(a1, v2, 430, (uint64_t)v25);
    v15 = v8;
    v16 = v10;
LABEL_8:
    sub_216B4B340((uint64_t *)v25, v15, v16);
    goto LABEL_9;
  }
  v12 = v11;
  v13 = (unsigned __int8 *)sub_216BA043C(*(_QWORD *)(a1 + 16), v4, v6);
  if (!sub_216B8B400(v13))
  {
    sub_216BECEE0(a1, v2, 429, (uint64_t)v25);
    v15 = v4;
    v16 = v6;
    goto LABEL_8;
  }
  v14 = sub_216B8B400(v13);
  if (v12 <= 2 && v14 == 178)
  {
    sub_216BECEE0(a1, v2, 426, (uint64_t)v25);
    sub_216B77520((uint64_t *)v25, v12 != 1);
LABEL_9:
    sub_216B4B3B4(v25);
    sub_216BEB434(&v26);
    return 0;
  }
  if (sub_216B8B400(v13) == 180)
  {
    v25[0] = (uint64_t *)a1;
    sub_216B1E678((int)v24, "centroid");
    sub_216BEB74C(v25, 302, v24[0], v24[1]);
    sub_216B1E678((int)v23, "smooth");
    sub_216BEB74C(v25, 423, v23[0], v23[1]);
    v18 = *(_QWORD *)a1;
    sub_216B1E678((int)v22, "fwidth");
    v19 = (unsigned int *)sub_216B89E24(v18, v22[0], v22[1]);
    sub_216B4ABA8(v19, 0);
  }
  sub_216BEB7C0(v13, v12);
  sub_216BE4BF0(a1, 2);
  v20 = *(uint64_t **)(a1 + 8);
  v21 = sub_216B8B400(v13);
  return sub_216BDD140(v20, v21, v12, v2);
}

uint64_t sub_216BEB6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _QWORD v12[3];

  sub_216B32854(v12, a1, a2);
  v11 = 2;
  v2 = sub_216B32A7C((uint64_t)v12, (uint64_t)"enable", (uint64_t)&v11);
  v10 = 1;
  v3 = sub_216B32858(v2, "require", (uint64_t)&v10);
  v9 = 4;
  v4 = sub_216B32A18(v3, "warn", (uint64_t)&v9);
  v8 = 3;
  v5 = sub_216B32858(v4, "disable", (uint64_t)&v8);
  v7 = 0;
  return sub_216B32B50(v5, &v7);
}

uint64_t sub_216BEB74C(uint64_t **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t result;
  unsigned int *v8;

  v6 = *a1;
  result = sub_216BA28DC(a2, (*a1)[2]);
  if ((result & 1) == 0)
  {
    v8 = (unsigned int *)sub_216B89E24(*v6, a3, a4);
    result = sub_216B91C38(v8);
    if ((_DWORD)result != 6)
      return (uint64_t)sub_216BEB8B4(v8);
  }
  return result;
}

_WORD *sub_216BEB7C0(_WORD *result, char a2)
{
  *result = *result & 0xF8FF | ((a2 & 7) << 8);
  return result;
}

void sub_216BEB7DC()
{
  void *v0;

  v0 = (void *)sub_216BEB7D8();
  j__free(v0);
}

uint64_t sub_216BEB7F0(uint64_t a1)
{
  return a1 + 104;
}

_QWORD *sub_216BEB7FC(_QWORD *a1)
{
  _QWORD *result;

  result = sub_216B9A354(a1);
  *result = &off_24D6061B0;
  return result;
}

double sub_216BEB81C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = *(double *)(a2 + 60);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 68);
  return result;
}

BOOL sub_216BEB834(uint64_t a1, int a2)
{
  uint64_t v4;
  _BOOL8 result;

  v4 = a1 + 32;
  for (result = sub_216B7214C(a1 + 32, a2); result; result = sub_216B7214C(v4, a2))
  {
    result = sub_216BEB890(a1);
    if (result)
      break;
    sub_216BE5AD8(a1);
  }
  return result;
}

BOOL sub_216BEB890(uint64_t a1)
{
  return sub_216B71174(a1 + 32, 1);
}

double sub_216BEB89C(double *a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)a1;
  result = a1[1];
  *(double *)(v1 + 60) = result;
  *(_DWORD *)(v1 + 68) = *((_DWORD *)a1 + 4);
  return result;
}

unsigned int *sub_216BEB8B4(unsigned int *result)
{
  *result = *result & 0xDFFFFE00 | 0x20000006;
  return result;
}

_DWORD *sub_216BEB8D4(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  _DWORD *v4;
  const char *v5;
  _DWORD *result;
  uint64_t *v7;
  int v8;
  _BYTE v9[16];

  v2 = (unsigned int *)(a1 + 32);
  v3 = sub_216B71644(a1 + 32);
  if (v3 > 95)
  {
    if (v3 > 107)
    {
      if (v3 == 108)
        return sub_216BEBFD4(a1);
      if (v3 != 305)
        return (_DWORD *)sub_216BEBB58(a1);
      v4 = sub_216BEC7B0(a1);
      v5 = "discard";
    }
    else
    {
      if (v3 != 96)
      {
        if (v3 == 102)
          return (_DWORD *)sub_216BEC438(a1);
        return (_DWORD *)sub_216BEBB58(a1);
      }
      v4 = sub_216BEC73C(a1);
      v5 = "return";
    }
LABEL_23:
    if (sub_216B71174((uint64_t)v2, 61))
    {
      sub_216BE4BF0(a1, 61);
    }
    else if (v4)
    {
      sub_216BECC3C((_DWORD *)a1, 61, 1011, (uint64_t)v5, 0);
      sub_216BECD88(a1, 24, 1, 1);
    }
    return v4;
  }
  if (v3 <= 75)
  {
    if (v3 == 23)
      return (_DWORD *)sub_216BEBDA8(a1);
    if (v3 != 24)
    {
      if (v3 == 61)
      {
        v7 = *(uint64_t **)(a1 + 8);
        v8 = sub_216BE4BF0(a1, 61);
        return sub_216BDD1F8(v7, v8);
      }
      return (_DWORD *)sub_216BEBB58(a1);
    }
    sub_216BE4CA8(a1, v2, 1015, (uint64_t)v9);
    sub_216B4B3B4(v9);
    return 0;
  }
  switch(v3)
  {
    case 'L':
      v4 = sub_216BEC710(a1);
      v5 = "break";
      goto LABEL_23;
    case 'M':
      result = sub_216BEC560(a1);
      break;
    case 'P':
      v4 = sub_216BEC6E4(a1);
      v5 = "continue";
      goto LABEL_23;
    case 'Q':
      result = sub_216BEC630(a1);
      break;
    case 'R':
      v4 = sub_216BEC08C(a1);
      v5 = "do/while";
      goto LABEL_23;
    case 'X':
      result = sub_216BEC180(a1);
      break;
    case 'Z':
      result = sub_216BEBE00(a1);
      break;
    default:
      return (_DWORD *)sub_216BEBB58(a1);
  }
  return result;
}

uint64_t sub_216BEBB58(uint64_t a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  _QWORD v23[2];
  uint64_t v24[2];
  __int128 v25[4];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _BYTE v29[56];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)(a1 + 32);
  if (sub_216B71174(a1 + 32, 399))
  {
    v3 = *(uint64_t **)(a1 + 8);
    *(_QWORD *)&v25[0] = sub_216BE5D14(a1);
    sub_216B6E0CC(v28, (uint64_t)v25);
    v4 = v28[0];
    v5 = v28[1];
    v6 = v3;
    return sub_216BDD204(v6, v4, v5);
  }
  if (!sub_216B71174((uint64_t)v2, 521))
  {
    sub_216B2D768(v29);
    if (sub_216BE4BF4(a1))
    {
      sub_216BE45E0(a1, v29, 0);
      v9 = *(uint64_t **)(a1 + 8);
      sub_216B2D798(v26, v29);
      v10 = v26[0];
      v11 = v26[1];
LABEL_9:
      v12 = sub_216BDD204(v9, v10, v11);
LABEL_20:
      v8 = v12;
      goto LABEL_21;
    }
    if ((sub_216BE7890(a1) & 1) != 0)
    {
      v13 = sub_216B1E4E0(v2);
      sub_216BE4400((uint64_t)v25, v13);
      if (sub_216BE4CEC(a1, (uint64_t)v25, 1))
        goto LABEL_16;
      if (!sub_216B71174((uint64_t)v2, 21))
      {
        sub_216BE6674(a1, v29, v25, 0, 0);
        v9 = *(uint64_t **)(a1 + 8);
        sub_216B2D798(v23, v29);
        v10 = v23[0];
        v11 = v23[1];
        goto LABEL_9;
      }
      v14 = *(uint64_t **)(a1 + 8);
      sub_216B1E678((int)v24, &byte_216C19659);
      sub_216BDF260(v14, v25, v24[0], v24[1]);
      v16 = v15;
      v17 = sub_216B1E4E0((unsigned int *)v25);
      v18 = (unsigned int *)sub_216BE9DDC(a1, v16, v17);
      if (!v18 || (v19 = sub_216BE9EC8(a1, v18)) == 0 || (v20 = sub_216BE9450(a1, v19, 1)) == 0)
      {
LABEL_16:
        sub_216BF335C(a1);
        v8 = 0;
LABEL_21:
        sub_216B1FF6C(v29);
        return v8;
      }
    }
    else
    {
      v20 = (uint64_t)sub_216BE93D8(a1);
      if (!v20)
        goto LABEL_16;
    }
    v21 = (unsigned int *)v20;
    sub_216BECC3C((_DWORD *)a1, 61, 1007, (uint64_t)&byte_216C19659, 61);
    v12 = sub_216BDD5D0(*(uint64_t **)(a1 + 8), v21);
    goto LABEL_20;
  }
  *(_QWORD *)&v25[0] = sub_216BEADEC(a1);
  if (!*(_QWORD *)&v25[0])
    return 0;
  v7 = *(uint64_t **)(a1 + 8);
  sub_216B6E0CC(v27, (uint64_t)v25);
  v4 = v27[0];
  v5 = v27[1];
  v6 = v7;
  return sub_216BDD204(v6, v4, v5);
}

uint64_t sub_216BEBDA8(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[8];

  sub_216BD41AC(v4, *(_QWORD *)(a1 + 8), 8);
  v2 = sub_216BEC7DC(a1);
  if (!v2)
    sub_216BECEEC();
  sub_216BD41EC(v4);
  return v2;
}

_DWORD *sub_216BEBE00(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v2 = sub_216BE4BF0(a1, 90);
  sub_216B4AED0(&v14);
  if (!sub_216BF339C((_DWORD *)a1, 0x15u, &v14))
  {
    v3 = sub_216BE93D8(a1);
    if (v3)
    {
      v4 = v3;
      sub_216B4AED0(&v13);
      if (!sub_216BE592C((_DWORD *)a1, 0x16u, v14, &v13))
      {
        v5 = sub_216B1E4E0((unsigned int *)(a1 + 32));
        sub_216BD41AC(&v12, *(_QWORD *)(a1 + 8), 72);
        if (sub_216B71174(a1 + 32, 23))
          v6 = sub_216BEC7DC(a1);
        else
          v6 = sub_216BEB8D4(a1);
        v7 = v6;
        if (v6)
        {
          sub_216BD41EC(&v12);
          v8 = sub_216B1E4E0((unsigned int *)(a1 + 32));
          if (!sub_216B71174(a1 + 32, 84))
          {
            v10 = 0;
            return sub_216BDD6BC(*(uint64_t **)(a1 + 8), v2, v4, v7, v5, v10, v8);
          }
          sub_216BE4BF0(a1, 84);
          sub_216BD41AC(&v12, *(_QWORD *)(a1 + 8), 72);
          if (sub_216B71174(a1 + 32, 23))
            v9 = sub_216BEC7DC(a1);
          else
            v9 = sub_216BEB8D4(a1);
          v10 = v9;
          if (v9)
          {
            sub_216BD41EC(&v12);
            return sub_216BDD6BC(*(uint64_t **)(a1 + 8), v2, v4, v7, v5, v10, v8);
          }
          sub_216BECEEC();
        }
        else
        {
          sub_216BECEEC();
          if (sub_216B71174(a1 + 32, 84))
          {
            sub_216BE4DD0(a1);
            sub_216BECEEC();
            sub_216BF335C(a1);
          }
        }
        sub_216BD41EC(&v12);
      }
    }
    else
    {
      sub_216BF335C(a1);
    }
  }
  return 0;
}

_DWORD *sub_216BEBFD4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _BYTE v8[8];

  sub_216BD41AC(v8, *(_QWORD *)(a1 + 8), 78);
  v2 = sub_216BE4BF0(a1, 108);
  v3 = sub_216BEC968(a1, 0);
  if (!v3
    || ((v4 = v3, !sub_216B71174(a1 + 32, 23)) ? (v5 = sub_216BEB8D4(a1)) : (v5 = sub_216BEC7DC(a1)),
        (v6 = sub_216BDD7A8(*(uint64_t **)(a1 + 8), v2, v4, v5)) == 0))
  {
    sub_216BECEEC();
    v6 = 0;
  }
  sub_216BD41EC(v8);
  return v6;
}

_DWORD *sub_216BEC08C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[16];
  _BYTE v8[8];

  v2 = sub_216BE4BF0(a1, 82);
  sub_216BD41AC(v8, *(_QWORD *)(a1 + 8), 78);
  if (sub_216B71174(a1 + 32, 23))
    v3 = sub_216BEC7DC(a1);
  else
    v3 = sub_216BEB8D4(a1);
  v4 = v3;
  if (!v3)
  {
    sub_216BECEEC();
    sub_216BD41EC(v8);
    return 0;
  }
  sub_216BD41EC(v8);
  if (sub_216B7214C(a1 + 32, 108))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 1022, (uint64_t)v7);
    sub_216B4B3B4(v7);
    return 0;
  }
  sub_216BE4BF0(a1, 108);
  v6 = sub_216BEC968(a1, 1);
  return sub_216BDD7B4(*(uint64_t **)(a1 + 8), v2, v4, v6);
}

_DWORD *sub_216BEC180(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v13[2];
  uint64_t v14[2];
  unsigned int v15;
  _BYTE v16[8];
  _DWORD v17[14];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = sub_216BE4BF0(a1, 88);
  sub_216BD41AC(v16, *(_QWORD *)(a1 + 8), 78);
  sub_216B4AED0(&v15);
  if (sub_216BF339C((_DWORD *)a1, 0x15u, &v15))
    goto LABEL_2;
  if (sub_216B71174(a1 + 32, 61))
  {
    sub_216BE4BF0(a1, 61);
    v3 = 0;
  }
  else if (sub_216BE79EC(a1))
  {
    sub_216B2D768(v17);
    sub_216BE45E0(a1, v17, 0);
    v4 = *(uint64_t **)(a1 + 8);
    sub_216B2D798(v14, v17);
    v3 = sub_216BDD204(v4, v14[0], v14[1]);
    sub_216B1FF6C(v17);
  }
  else
  {
    v5 = sub_216BE93D8(a1);
    v3 = sub_216BDD5D0(*(uint64_t **)(a1 + 8), v5);
    if (sub_216BECC3C((_DWORD *)a1, 61, 1014, (uint64_t)&byte_216C19659, 0))
      goto LABEL_2;
  }
  if (sub_216B71174(a1 + 32, 61))
  {
    sub_216BE4BF0(a1, 61);
    v6 = 0;
    goto LABEL_13;
  }
  if (sub_216BE79EC(a1))
  {
    sub_216B2D768(v17);
    sub_216BE45E0(a1, v17, 0);
    v7 = *(uint64_t **)(a1 + 8);
    sub_216B2D798(v13, v17);
    v6 = sub_216BDD204(v7, v13[0], v13[1]);
    sub_216B1FF6C(v17);
    goto LABEL_13;
  }
  v8 = sub_216BE93D8(a1);
  v6 = sub_216BDD5D0(*(uint64_t **)(a1 + 8), v8);
  if (sub_216BECC3C((_DWORD *)a1, 61, 1014, (uint64_t)&byte_216C19659, 0))
  {
LABEL_2:
    sub_216BECEEC();
    sub_216BECD88(a1, 22, 0, 0);
LABEL_22:
    v11 = 0;
    goto LABEL_23;
  }
LABEL_13:
  if (sub_216B7214C(a1 + 32, 22))
    v9 = sub_216BE93D8(a1);
  else
    v9 = 0;
  sub_216B4AED0(v17);
  if (sub_216BE592C((_DWORD *)a1, 0x16u, v15, v17)
    || (!sub_216B71174(a1 + 32, 23) ? (v10 = sub_216BEB8D4(a1)) : (v10 = sub_216BEC7DC(a1)),
        (v11 = sub_216BDD79C(*(uint64_t **)(a1 + 8), v2, v3, v6, (uint64_t)v9, v10)) == 0))
  {
    sub_216BECEEC();
    goto LABEL_22;
  }
LABEL_23:
  sub_216BD41EC(v16);
  return v11;
}

uint64_t sub_216BEC438(uint64_t a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];
  int v10;
  unsigned int v11;

  v2 = sub_216BE4BF0(a1, 102);
  sub_216B4AED0(&v11);
  if (sub_216BF339C((_DWORD *)a1, 0x15u, &v11))
    return 0;
  v3 = sub_216BE93D8(a1);
  if (!v3)
    return 0;
  v4 = v3;
  sub_216B4AED0(&v10);
  if (sub_216BE592C((_DWORD *)a1, 0x16u, v11, &v10))
    return 0;
  if (sub_216B7214C(a1 + 32, 23))
  {
    sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 8, (uint64_t)v9);
    sub_216B89E2C(v9, 0x17u);
    sub_216B4B3B4(v9);
    sub_216BF335C(a1);
    return 0;
  }
  sub_216BD41AC(v9, *(_QWORD *)(a1 + 8), 34);
  v7 = sub_216BDD8E4(*(uint64_t **)(a1 + 8), v2, v4);
  v8 = sub_216BEC7DC(a1);
  v5 = sub_216BDD9D8(*(_QWORD *)(a1 + 8), v7, v8);
  if (!v5)
    sub_216BECEEC();
  sub_216BD41EC(v9);
  return v5;
}

_DWORD *sub_216BEC560(uint64_t a1)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t *v5;
  int v7;
  uint64_t v8[2];

  v2 = sub_216BE4BF0(a1, 77);
  v3 = sub_216BE93D8(a1);
  if (sub_216B7214C(a1 + 32, 60))
  {
    v4 = sub_216B98364(*(_QWORD *)a1, *(_DWORD *)(a1 + 56), 0);
    sub_216BECEE0(a1, v4, 9, (uint64_t)v8);
    v5 = sub_216B60EA8(v8, (uint64_t)"'case'");
    sub_216B89E2C(v5, 0x3Cu);
    sub_216B4B3B4(v8);
    return 0;
  }
  else
  {
    v7 = sub_216BE4BF0(a1, 60);
    return sub_216BDDF64(*(uint64_t **)(a1 + 8), v2, v7, (unint64_t)v3);
  }
}

_DWORD *sub_216BEC630(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t *v4;
  int v6;
  uint64_t v7[2];

  v2 = sub_216BE4BF0(a1, 81);
  if (sub_216B7214C(a1 + 32, 60))
  {
    v3 = sub_216B98364(*(_QWORD *)a1, *(_DWORD *)(a1 + 56), 0);
    sub_216BECEE0(a1, v3, 9, (uint64_t)v7);
    v4 = sub_216B60EA8(v7, (uint64_t)"'default'");
    sub_216B89E2C(v4, 0x3Cu);
    sub_216B4B3B4(v7);
    return 0;
  }
  else
  {
    v6 = sub_216BE4BF0(a1, 60);
    return sub_216BDE104(*(uint64_t **)(a1 + 8), v2, v6);
  }
}

_DWORD *sub_216BEC6E4(uint64_t a1)
{
  uint64_t *v1;
  unsigned int v2;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = sub_216BE4BF0(a1, 80);
  return sub_216BDD878(v1, v2);
}

_DWORD *sub_216BEC710(uint64_t a1)
{
  uint64_t *v1;
  unsigned int v2;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = sub_216BE4BF0(a1, 76);
  return sub_216BDD80C(v1, v2);
}

_DWORD *sub_216BEC73C(uint64_t a1)
{
  unsigned int v2;
  unsigned int *v3;

  v2 = sub_216BE4BF0(a1, 96);
  if (sub_216B7214C(a1 + 32, 61))
  {
    v3 = sub_216BE93D8(a1);
    if (!v3)
    {
      sub_216BECD88(a1, 61, 0, 1);
      return 0;
    }
  }
  else
  {
    v3 = 0;
  }
  return sub_216BDE1A4(*(uint64_t **)(a1 + 8), v2, v3);
}

_DWORD *sub_216BEC7B0(uint64_t a1)
{
  uint64_t *v1;
  int v2;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = sub_216BE4BF0(a1, 305);
  return sub_216BDE198(v1, v2);
}

_DWORD *sub_216BEC7DC(uint64_t a1)
{
  unsigned int v2;
  _DWORD *v3;
  uint64_t *v4;
  int v5;
  uint64_t v7[2];
  _DWORD *v8;
  _BYTE v9[280];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = sub_216BEC8FC(a1);
  sub_216B8F100(v9);
  while (sub_216B7214C(a1 + 32, 24))
  {
    if (!sub_216B7214C(a1 + 32, 1))
      break;
    v8 = 0;
    v8 = sub_216BEB8D4(a1);
    if (v8)
      sub_216B268AC((uint64_t)v9, &v8);
  }
  sub_216B4AED0(&v8);
  if (sub_216BE592C((_DWORD *)a1, 0x18u, v2, &v8))
  {
    v3 = 0;
  }
  else
  {
    v4 = *(uint64_t **)(a1 + 8);
    v5 = (int)v8;
    sub_216B2D798(v7, v9);
    v3 = sub_216BDD6AC(v4, v2, v5, v7[0], v7[1]);
  }
  sub_216B1FF6C(v9);
  return v3;
}

uint64_t sub_216BEC8FC(uint64_t a1)
{
  unsigned int *v2;
  int v3;

  v2 = (unsigned int *)(a1 + 32);
  if (sub_216B71174(a1 + 32, 23))
  {
    v3 = 1;
LABEL_5:
    *(_DWORD *)(a1 + 68) += v3;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 60))
  {
    v3 = -1;
    goto LABEL_5;
  }
LABEL_6:
  *(_DWORD *)(a1 + 56) = sub_216B1E4E0(v2);
  sub_216B9C594(*(_QWORD *)a1, v2);
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_216BEC968(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11[2];
  _BYTE v12[16];
  uint64_t v13[8];

  v13[7] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 32);
  if (sub_216B7214C(a1 + 32, 21))
  {
    sub_216BE4CA8(a1, v4, 8, (uint64_t)v13);
    sub_216B89E2C(v13, 0x15u);
    v5 = v13;
LABEL_6:
    sub_216B4B3B4(v5);
    sub_216BECD88(a1, 22, 0, 0);
    return 0;
  }
  v6 = sub_216BE56FC(a1);
  if (sub_216BE79EC(a1))
  {
    if (a2)
    {
      sub_216BE4CA8(a1, v4, 954, (uint64_t)v12);
      v5 = (uint64_t *)v12;
      goto LABEL_6;
    }
    sub_216B2D768(v13);
    sub_216BE45E0(a1, v13, 0);
    v10 = *(uint64_t **)(a1 + 8);
    sub_216B2D798(v11, v13);
    v9 = sub_216BDD204(v10, v11[0], v11[1]);
    sub_216B1FF6C(v13);
  }
  else
  {
    v8 = sub_216BE93D8(a1);
    v9 = sub_216BDD5D0(*(uint64_t **)(a1 + 8), v8);
  }
  sub_216B4AED0(v13);
  if (sub_216BE592C((_DWORD *)a1, 0x16u, v6, v13))
    return 0;
  else
    return v9;
}

uint64_t sub_216BECAD4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v10[2];

  v4 = sub_216BEC7DC(a1);
  if (a2)
  {
    v5 = v4;
    if (!v4)
    {
      sub_216BECEEC();
      v6 = *(uint64_t **)(a1 + 8);
      v7 = sub_216B693F8(a2);
      v8 = sub_216B693F8(a2);
      sub_216B26D14(v10);
      v5 = sub_216BDD6AC(v6, v7, v8, v10[0], v10[1]);
    }
    sub_216BD7CF8(*(_QWORD *)(a1 + 8), a2, (uint64_t)v5);
  }
  return a2;
}

uint64_t sub_216BECB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = sub_216B1E67C(a3);
  *(_QWORD *)(a1 + 24) = sub_216B2037C(a2);
  sub_216B70D84(a1 + 32);
  sub_216B4AED0((_DWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 65) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  sub_216B2C030((_QWORD *)(a1 + 80));
  sub_216B75074(a1 + 32);
  sub_216B74800(a1 + 32, 1);
  return a1;
}

uint64_t sub_216BECBEC(uint64_t a1)
{
  sub_216B3D560(a1 + 80);
  return a1;
}

uint64_t sub_216BECC18(uint64_t *a1)
{
  sub_216BEADB4(a1);
  return sub_216BE4DD0(a1);
}

BOOL sub_216BECC3C(_DWORD *a1, int a2, int a3, uint64_t a4, int a5)
{
  unsigned int *v9;
  _BOOL4 v10;
  uint64_t v12[2];

  v9 = a1 + 8;
  v10 = sub_216B71174((uint64_t)(a1 + 8), a2);
  if (v10)
  {
    sub_216BECCE0(a1);
  }
  else
  {
    sub_216BE4CA8((uint64_t)a1, v9, a3, (uint64_t)v12);
    sub_216B60EA8(v12, a4);
    sub_216B4B3B4(v12);
    if (a5)
      sub_216BECD88((uint64_t)a1, a5, 1, 0);
  }
  return !v10;
}

uint64_t sub_216BECCE0(_DWORD *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  switch(sub_216B71644((uint64_t)(a1 + 8)))
  {
    case 0x13u:
      v2 = a1[16] + 1;
      goto LABEL_5;
    case 0x14u:
      v3 = a1[16];
      if (v3)
      {
        v2 = v3 - 1;
LABEL_5:
        a1[16] = v2;
      }
      return sub_216BE5AD8((uint64_t)a1);
    case 0x15u:
      v4 = a1[15] + 1;
      goto LABEL_9;
    case 0x16u:
      v5 = a1[15];
      if (!v5)
        return sub_216BE5AD8((uint64_t)a1);
      v4 = v5 - 1;
LABEL_9:
      a1[15] = v4;
      break;
    case 0x17u:
      v6 = a1[17] + 1;
      goto LABEL_13;
    case 0x18u:
      v7 = a1[17];
      if (!v7)
        return sub_216BE5AD8((uint64_t)a1);
      v6 = v7 - 1;
LABEL_13:
      a1[17] = v6;
      break;
    default:
      return sub_216BE5AD8((uint64_t)a1);
  }
  return sub_216BE5AD8((uint64_t)a1);
}

uint64_t sub_216BECD88(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v8 = a1 + 32;
  if (sub_216B7214C(a1 + 32, a2))
  {
    while (sub_216B7214C(v8, 1))
    {
      result = sub_216B71644(v8);
      switch((int)result)
      {
        case 19:
          sub_216BEA6F0(a1);
          v10 = a1;
          v11 = 20;
          goto LABEL_13;
        case 20:
          sub_216BEA6F0(a1);
          goto LABEL_16;
        case 21:
          sub_216BE56FC(a1);
          v10 = a1;
          v11 = 22;
          goto LABEL_13;
        case 22:
          sub_216BE56FC(a1);
          goto LABEL_16;
        case 23:
          sub_216BEC8FC(a1);
          v10 = a1;
          v11 = 24;
LABEL_13:
          sub_216BECD88(v10, v11, 0, 0);
          goto LABEL_16;
        case 24:
          sub_216BEC8FC(a1);
          goto LABEL_16;
        default:
          if ((_DWORD)result == 3)
          {
            sub_216BECEEC();
          }
          else
          {
            if ((_DWORD)result == 61 && (a3 & 1) != 0)
              return result;
            sub_216BE4DD0(a1);
          }
LABEL_16:
          if (!sub_216B7214C(v8, a2))
            goto LABEL_17;
          break;
      }
    }
  }
LABEL_17:
  result = sub_216B71174(v8, a2);
  if ((_DWORD)result)
  {
    if ((a4 & 1) == 0)
      return sub_216BE4DD0(a1);
  }
  return result;
}

uint64_t sub_216BECEE0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_216B4CD2C(*(_QWORD *)(a1 + 24), a2, a3, a4);
}

BOOL sub_216BECEEC()
{
  uint64_t *v0;
  _BOOL4 v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  _DWORD *v13[2];
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18[2];
  uint64_t v19[2];
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  uint64_t v25[2];
  uint64_t v26[2];
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  uint64_t v30[2];
  uint64_t v31[2];
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[2];
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  uint64_t v42[2];
  uint64_t v43[2];
  uint64_t v44[2];
  uint64_t v45[2];
  uint64_t v46[2];
  uint64_t v47[2];
  uint64_t v48[2];
  uint64_t v49[2];
  uint64_t v50[2];
  uint64_t v51[2];
  uint64_t v52[2];
  uint64_t v53[2];
  uint64_t v54[2];
  uint64_t v55[2];
  uint64_t v56[2];
  uint64_t v57[2];
  uint64_t v58[2];
  uint64_t v59[2];
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63[2];
  uint64_t v64[2];
  uint64_t v65[2];
  uint64_t v66[2];
  uint64_t v67[2];
  uint64_t v68[2];
  uint64_t v69[2];
  uint64_t v70[2];
  uint64_t v71[2];
  uint64_t v72[2];
  uint64_t v73[2];
  uint64_t v74[2];
  uint64_t v75[2];
  uint64_t v76[2];
  uint64_t v77[2];
  uint64_t v78[2];
  uint64_t v79[2];
  uint64_t v80[2];
  uint64_t v81[2];
  uint64_t v82[2];
  uint64_t v83[2];
  uint64_t v84[2];
  uint64_t v85[2];
  uint64_t v86[2];
  uint64_t v87[2];
  uint64_t v88[2];
  uint64_t v89[2];
  uint64_t v90[2];
  uint64_t v91[2];
  uint64_t v92[2];
  uint64_t v93[2];
  uint64_t v94[2];
  uint64_t v95[2];
  uint64_t v96[2];
  uint64_t v97[2];
  uint64_t v98[2];
  uint64_t v99[2];
  uint64_t v100[2];
  uint64_t v101[2];
  uint64_t v102[2];
  uint64_t v103[2];
  uint64_t v104[2];
  uint64_t v105[2];
  uint64_t v106[2];
  uint64_t v107[2];
  uint64_t v108[2];
  uint64_t v109[2];
  uint64_t v110[2];
  uint64_t v111[2];
  uint64_t v112[2];
  uint64_t v113[2];
  uint64_t v114[2];
  uint64_t v115[2];
  uint64_t v116[2];
  uint64_t v117[2];
  uint64_t v118[2];
  uint64_t v119[2];
  uint64_t v120[2];
  uint64_t v121[2];
  uint64_t v122[2];
  uint64_t v123[2];
  uint64_t v124[2];
  uint64_t v125[2];
  uint64_t v126[2];
  uint64_t v127[2];
  uint64_t v128[2];
  uint64_t v129[2];
  uint64_t v130[2];
  uint64_t v131[2];
  uint64_t v132[2];
  uint64_t v133[2];
  uint64_t v134[2];
  uint64_t v135[2];
  uint64_t v136[2];
  uint64_t v137[2];
  uint64_t v138[2];
  uint64_t v139[2];
  uint64_t v140[2];
  uint64_t v141[2];
  uint64_t v142[2];
  uint64_t v143[2];
  uint64_t v144[2];
  uint64_t v145[2];
  uint64_t v146[2];
  uint64_t v147[2];
  uint64_t v148[2];
  uint64_t v149[2];
  uint64_t v150[2];
  uint64_t v151[2];
  uint64_t v152[2];
  uint64_t v153[2];
  uint64_t v154[2];
  uint64_t v155[2];
  uint64_t v156[2];
  uint64_t v157[2];
  uint64_t v158[2];
  uint64_t v159[2];
  uint64_t v160[2];
  uint64_t v161[2];
  uint64_t v162[2];
  uint64_t v163[2];
  uint64_t v164[2];
  uint64_t v165[2];
  uint64_t v166[2];
  uint64_t v167[2];
  uint64_t v168[2];
  uint64_t v169[2];
  uint64_t v170[2];
  uint64_t v171[2];
  uint64_t v172[2];
  uint64_t v173[2];
  uint64_t v174[2];
  uint64_t v175[2];
  uint64_t v176[2];
  uint64_t v177[2];
  uint64_t v178[2];
  uint64_t v179[2];
  uint64_t v180[2];
  uint64_t v181[2];
  uint64_t v182[2];
  uint64_t v183[2];
  uint64_t v184[2];
  uint64_t v185[2];
  uint64_t v186[2];
  uint64_t v187[2];
  uint64_t v188[2];
  uint64_t v189[2];
  uint64_t v190[2];
  uint64_t v191[2];
  uint64_t v192[2];
  uint64_t v193[2];
  uint64_t v194[2];
  uint64_t v195[2];
  uint64_t v196[2];
  uint64_t v197[2];
  uint64_t v198[2];
  uint64_t v199[2];
  uint64_t v200[2];
  uint64_t v201[2];
  uint64_t v202[2];
  uint64_t v203[2];
  uint64_t v204[2];
  uint64_t v205[2];
  uint64_t v206[2];
  uint64_t v207[2];
  uint64_t v208[2];
  uint64_t v209[2];
  uint64_t v210[2];
  uint64_t v211[2];
  uint64_t v212[2];
  uint64_t v213[2];
  uint64_t v214[2];
  uint64_t v215[2];
  uint64_t v216[2];
  uint64_t v217[2];
  uint64_t v218[2];
  uint64_t v219[2];
  uint64_t v220[2];
  uint64_t v221[2];
  uint64_t v222[2];
  uint64_t v223[2];
  uint64_t v224[2];
  uint64_t v225[2];
  uint64_t v226[2];
  uint64_t v227[2];
  uint64_t v228[2];
  uint64_t v229[2];
  uint64_t v230[2];
  uint64_t v231[2];
  uint64_t v232[2];
  uint64_t v233[2];
  uint64_t v234[2];
  uint64_t v235[2];
  uint64_t v236[2];
  uint64_t v237[2];
  uint64_t v238[2];
  uint64_t v239[2];
  uint64_t v240[2];
  uint64_t v241[2];
  uint64_t v242[2];
  uint64_t v243[2];
  uint64_t v244[2];
  uint64_t v245[2];
  uint64_t v246[2];
  uint64_t v247[2];
  uint64_t v248[2];
  uint64_t v249[2];
  uint64_t v250[2];
  uint64_t v251[2];
  uint64_t v252[2];
  uint64_t v253[2];
  uint64_t v254[2];
  uint64_t v255[2];
  uint64_t v256[2];
  uint64_t v257[2];
  uint64_t v258[2];
  uint64_t v259[2];
  uint64_t v260[2];
  uint64_t v261[2];
  uint64_t v262[2];
  uint64_t v263[2];
  uint64_t v264[2];
  uint64_t v265[2];
  uint64_t v266[2];
  uint64_t v267[2];
  uint64_t v268[2];
  uint64_t v269[2];
  uint64_t v270[2];
  uint64_t v271[2];
  uint64_t v272[2];
  uint64_t v273[2];
  uint64_t v274[2];
  uint64_t v275[2];
  uint64_t v276[2];
  uint64_t v277[2];
  uint64_t v278[2];
  uint64_t v279[2];
  uint64_t v280[2];
  uint64_t v281[2];
  uint64_t v282[2];
  uint64_t v283[2];
  uint64_t v284[2];
  uint64_t v285[2];
  uint64_t v286[2];
  uint64_t v287[2];
  uint64_t v288[2];
  uint64_t v289[2];
  uint64_t v290[2];
  uint64_t v291[2];
  uint64_t v292[2];
  uint64_t v293[2];
  uint64_t v294[2];
  uint64_t v295[2];
  uint64_t v296[2];
  uint64_t v297[2];
  uint64_t v298[2];
  uint64_t v299[2];
  uint64_t v300[2];
  uint64_t v301[2];
  uint64_t v302[2];
  uint64_t v303[2];
  uint64_t v304[2];
  uint64_t v305[2];
  uint64_t v306[2];
  uint64_t v307[2];
  uint64_t v308[2];
  uint64_t v309[2];
  uint64_t v310[2];
  uint64_t v311[2];
  uint64_t v312[2];
  uint64_t v313[2];
  uint64_t v314[2];
  uint64_t v315[2];
  uint64_t v316[2];
  uint64_t v317[2];
  uint64_t v318[2];
  uint64_t v319[2];
  uint64_t v320[2];
  uint64_t v321[2];
  uint64_t v322[2];
  uint64_t v323[2];
  uint64_t v324[2];
  uint64_t v325[2];
  uint64_t v326[2];
  uint64_t v327[2];
  uint64_t v328[2];
  uint64_t v329[2];
  uint64_t v330[2];
  uint64_t v331[2];
  uint64_t v332[2];
  uint64_t v333[2];
  uint64_t v334[2];
  uint64_t v335[2];
  uint64_t v336[2];
  uint64_t v337[2];
  uint64_t v338[2];
  uint64_t v339[2];
  uint64_t v340[2];
  uint64_t v341[2];
  uint64_t v342[2];
  uint64_t v343[2];
  uint64_t v344[2];
  uint64_t v345[2];
  uint64_t v346[2];
  uint64_t v347[2];
  uint64_t v348[2];
  uint64_t v349[2];
  uint64_t v350[2];
  uint64_t v351[2];
  uint64_t v352[2];
  uint64_t v353[2];
  uint64_t v354[2];
  uint64_t v355[2];
  uint64_t v356[2];
  uint64_t v357[2];
  uint64_t v358[2];
  uint64_t v359[2];
  uint64_t v360[2];
  uint64_t v361[2];
  uint64_t v362[2];
  uint64_t v363[2];
  uint64_t v364[2];
  uint64_t v365[2];
  uint64_t v366[2];
  uint64_t v367[2];
  uint64_t v368[2];
  uint64_t v369[2];
  uint64_t v370[2];
  uint64_t v371[2];
  uint64_t v372[2];
  uint64_t v373[2];
  uint64_t v374[2];
  uint64_t v375[2];
  uint64_t v376[2];
  uint64_t v377[2];
  uint64_t v378[2];
  uint64_t v379[2];
  uint64_t v380[2];
  uint64_t v381[2];
  uint64_t v382[2];
  uint64_t v383[2];
  uint64_t v384[2];
  uint64_t v385[2];
  uint64_t v386[2];
  uint64_t v387[2];
  uint64_t v388[2];
  uint64_t v389[2];
  uint64_t v390[2];
  uint64_t v391[2];
  uint64_t v392[2];
  uint64_t v393[2];
  uint64_t v394[2];
  uint64_t v395[2];
  uint64_t v396[2];
  uint64_t v397[2];
  uint64_t v398[2];
  uint64_t v399[2];
  uint64_t v400[2];
  uint64_t v401[2];
  uint64_t v402[2];
  uint64_t v403[2];
  uint64_t v404[2];
  uint64_t v405[2];
  uint64_t v406[2];
  uint64_t v407[2];
  uint64_t v408[2];
  uint64_t v409[2];
  uint64_t v410[2];
  uint64_t v411[2];
  uint64_t v412[2];
  uint64_t v413[2];
  uint64_t v414[2];
  uint64_t v415[2];
  uint64_t v416[2];
  uint64_t v417[2];
  uint64_t v418[2];
  uint64_t v419[2];
  uint64_t v420[2];
  uint64_t v421[2];
  uint64_t v422[2];
  uint64_t v423[2];
  uint64_t v424[2];
  uint64_t v425[2];
  uint64_t v426[2];
  uint64_t v427[2];
  uint64_t v428[2];
  uint64_t v429[2];
  uint64_t v430[2];
  uint64_t v431[2];
  uint64_t v432[2];
  uint64_t v433[2];
  uint64_t v434[2];
  uint64_t v435[2];
  uint64_t v436[2];
  uint64_t v437[2];
  uint64_t v438[2];
  uint64_t v439[2];
  uint64_t v440[2];
  uint64_t v441[2];
  uint64_t v442[2];
  uint64_t v443[2];
  uint64_t v444[2];
  uint64_t v445[2];
  uint64_t v446[2];
  uint64_t v447[2];
  uint64_t v448[2];
  uint64_t v449[2];
  uint64_t v450[2];
  uint64_t v451[2];
  uint64_t v452[2];
  uint64_t v453[2];
  uint64_t v454[2];
  uint64_t v455[2];
  uint64_t v456[2];
  uint64_t v457[2];
  uint64_t v458[2];
  uint64_t v459[2];
  uint64_t v460[2];
  uint64_t v461[2];
  uint64_t v462[2];
  uint64_t v463[2];
  uint64_t v464[2];
  uint64_t v465[2];
  uint64_t v466[2];
  uint64_t v467[2];
  uint64_t v468[2];
  uint64_t v469[2];
  uint64_t v470[2];
  uint64_t v471[2];
  uint64_t v472[2];
  uint64_t v473[2];
  uint64_t v474[2];
  uint64_t v475[2];
  uint64_t v476[2];
  uint64_t v477[2];
  uint64_t v478[2];
  uint64_t v479[2];
  uint64_t v480[2];
  uint64_t v481[2];
  uint64_t v482[2];
  uint64_t v483[2];
  uint64_t v484[2];
  uint64_t v485[2];
  uint64_t v486[2];
  uint64_t v487[2];
  uint64_t v488[2];
  uint64_t v489[2];
  uint64_t v490[2];
  uint64_t v491[2];
  uint64_t v492[2];
  uint64_t v493[2];
  uint64_t v494[2];
  uint64_t v495[2];
  uint64_t v496[2];
  uint64_t v497[2];
  uint64_t v498[2];
  uint64_t v499[2];
  uint64_t v500[2];
  uint64_t v501[2];
  uint64_t v502[2];
  uint64_t v503[2];
  uint64_t v504[2];
  uint64_t v505[2];
  uint64_t v506[2];
  uint64_t v507[2];
  uint64_t v508[2];
  uint64_t v509[2];
  uint64_t v510[2];
  uint64_t v511[2];
  uint64_t v512[2];
  uint64_t v513[2];
  uint64_t v514[2];
  uint64_t v515[2];
  uint64_t v516[2];
  uint64_t *v517;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v1 = sub_216B7214C((uint64_t)(v0 + 4), 3);
  if (!v1)
  {
    v2 = sub_216BDBC28(*v0);
    v517 = v0;
    v3 = v0 + 2;
    if (sub_216BA28DC(75, v0[2]))
    {
      sub_216B1E678((int)v516, "auto");
      sub_216B4AAC4(v2, v516[0], v516[1]);
    }
    if (sub_216BA28DC(76, *v3))
    {
      sub_216B1E678((int)v515, "break");
      sub_216B4AAC4(v2, v515[0], v515[1]);
    }
    if (sub_216BA28DC(77, *v3))
    {
      sub_216B1E678((int)v514, "case");
      sub_216B4AAC4(v2, v514[0], v514[1]);
    }
    if (sub_216BA28DC(78, *v3))
    {
      sub_216B1E678((int)v513, "char");
      sub_216B4AAC4(v2, v513[0], v513[1]);
    }
    if (sub_216BA28DC(79, *v3))
    {
      sub_216B1E678((int)v512, "const");
      sub_216B4AAC4(v2, v512[0], v512[1]);
    }
    if (sub_216BA28DC(80, *v3))
    {
      sub_216B1E678((int)v511, "continue");
      sub_216B4AAC4(v2, v511[0], v511[1]);
    }
    if (sub_216BA28DC(81, *v3))
    {
      sub_216B1E678((int)v510, "default");
      sub_216B4AAC4(v2, v510[0], v510[1]);
    }
    if (sub_216BA28DC(82, *v3))
    {
      sub_216B1E678((int)v509, "do");
      sub_216B4AAC4(v2, v509[0], v509[1]);
    }
    if (sub_216BA28DC(83, *v3))
    {
      sub_216B1E678((int)v508, "double");
      sub_216B4AAC4(v2, v508[0], v508[1]);
    }
    if (sub_216BA28DC(84, *v3))
    {
      sub_216B1E678((int)v507, "else");
      sub_216B4AAC4(v2, v507[0], v507[1]);
    }
    if (sub_216BA28DC(85, *v3))
    {
      sub_216B1E678((int)v506, "enum");
      sub_216B4AAC4(v2, v506[0], v506[1]);
    }
    if (sub_216BA28DC(86, *v3))
    {
      sub_216B1E678((int)v505, "extern");
      sub_216B4AAC4(v2, v505[0], v505[1]);
    }
    if (sub_216BA28DC(87, *v3))
    {
      sub_216B1E678((int)v504, "float");
      sub_216B4AAC4(v2, v504[0], v504[1]);
    }
    if (sub_216BA28DC(88, *v3))
    {
      sub_216B1E678((int)v503, "for");
      sub_216B4AAC4(v2, v503[0], v503[1]);
    }
    if (sub_216BA28DC(89, *v3))
    {
      sub_216B1E678((int)v502, "goto");
      sub_216B4AAC4(v2, v502[0], v502[1]);
    }
    if (sub_216BA28DC(90, *v3))
    {
      sub_216B1E678((int)v501, "if");
      sub_216B4AAC4(v2, v501[0], v501[1]);
    }
    if (sub_216BA28DC(91, *v3))
    {
      sub_216B1E678((int)v500, "inline");
      sub_216B4AAC4(v2, v500[0], v500[1]);
    }
    if (sub_216BA28DC(92, *v3))
    {
      sub_216B1E678((int)v499, "int");
      sub_216B4AAC4(v2, v499[0], v499[1]);
    }
    if (sub_216BA28DC(93, *v3))
    {
      sub_216B1E678((int)v498, "long");
      sub_216B4AAC4(v2, v498[0], v498[1]);
    }
    if (sub_216BA28DC(94, *v3))
    {
      sub_216B1E678((int)v497, "register");
      sub_216B4AAC4(v2, v497[0], v497[1]);
    }
    if (sub_216BA28DC(95, *v3))
    {
      sub_216B1E678((int)v496, "restrict");
      sub_216B4AAC4(v2, v496[0], v496[1]);
    }
    if (sub_216BA28DC(96, *v3))
    {
      sub_216B1E678((int)v495, "return");
      sub_216B4AAC4(v2, v495[0], v495[1]);
    }
    if (sub_216BA28DC(97, *v3))
    {
      sub_216B1E678((int)v494, "short");
      sub_216B4AAC4(v2, v494[0], v494[1]);
    }
    if (sub_216BA28DC(98, *v3))
    {
      sub_216B1E678((int)v493, "signed");
      sub_216B4AAC4(v2, v493[0], v493[1]);
    }
    if (sub_216BA28DC(99, *v3))
    {
      sub_216B1E678((int)v492, "sizeof");
      sub_216B4AAC4(v2, v492[0], v492[1]);
    }
    if (sub_216BA28DC(100, *v3))
    {
      sub_216B1E678((int)v491, "static");
      sub_216B4AAC4(v2, v491[0], v491[1]);
    }
    if (sub_216BA28DC(101, *v3))
    {
      sub_216B1E678((int)v490, "struct");
      sub_216B4AAC4(v2, v490[0], v490[1]);
    }
    if (sub_216BA28DC(102, *v3))
    {
      sub_216B1E678((int)v489, "switch");
      sub_216B4AAC4(v2, v489[0], v489[1]);
    }
    if (sub_216BA28DC(103, *v3))
    {
      sub_216B1E678((int)v488, "typedef");
      sub_216B4AAC4(v2, v488[0], v488[1]);
    }
    if (sub_216BA28DC(104, *v3))
    {
      sub_216B1E678((int)v487, "union");
      sub_216B4AAC4(v2, v487[0], v487[1]);
    }
    if (sub_216BA28DC(105, *v3))
    {
      sub_216B1E678((int)v486, "unsigned");
      sub_216B4AAC4(v2, v486[0], v486[1]);
    }
    if (sub_216BA28DC(106, *v3))
    {
      sub_216B1E678((int)v485, "void");
      sub_216B4AAC4(v2, v485[0], v485[1]);
    }
    if (sub_216BA28DC(107, *v3))
    {
      sub_216B1E678((int)v484, "volatile");
      sub_216B4AAC4(v2, v484[0], v484[1]);
    }
    if (sub_216BA28DC(108, *v3))
    {
      sub_216B1E678((int)v483, "while");
      sub_216B4AAC4(v2, v483[0], v483[1]);
    }
    if (sub_216BA28DC(109, *v3))
    {
      sub_216B1E678((int)v482, "_Alignas");
      sub_216B4AAC4(v2, v482[0], v482[1]);
    }
    if (sub_216BA28DC(110, *v3))
    {
      sub_216B1E678((int)v481, "_Alignof");
      sub_216B4AAC4(v2, v481[0], v481[1]);
    }
    if (sub_216BA28DC(111, *v3))
    {
      sub_216B1E678((int)v480, "_Atomic");
      sub_216B4AAC4(v2, v480[0], v480[1]);
    }
    if (sub_216BA28DC(112, *v3))
    {
      sub_216B1E678((int)v479, "_Bool");
      sub_216B4AAC4(v2, v479[0], v479[1]);
    }
    if (sub_216BA28DC(113, *v3))
    {
      sub_216B1E678((int)v478, "_Complex");
      sub_216B4AAC4(v2, v478[0], v478[1]);
    }
    if (sub_216BA28DC(114, *v3))
    {
      sub_216B1E678((int)v477, "_Generic");
      sub_216B4AAC4(v2, v477[0], v477[1]);
    }
    if (sub_216BA28DC(115, *v3))
    {
      sub_216B1E678((int)v476, "_Imaginary");
      sub_216B4AAC4(v2, v476[0], v476[1]);
    }
    if (sub_216BA28DC(116, *v3))
    {
      sub_216B1E678((int)v475, "_Noreturn");
      sub_216B4AAC4(v2, v475[0], v475[1]);
    }
    if (sub_216BA28DC(117, *v3))
    {
      sub_216B1E678((int)v474, "_Static_assert");
      sub_216B4AAC4(v2, v474[0], v474[1]);
    }
    if (sub_216BA28DC(118, *v3))
    {
      sub_216B1E678((int)v473, "_Thread_local");
      sub_216B4AAC4(v2, v473[0], v473[1]);
    }
    if (sub_216BA28DC(119, *v3))
    {
      sub_216B1E678((int)v472, "__func__");
      sub_216B4AAC4(v2, v472[0], v472[1]);
    }
    if (sub_216BA28DC(120, *v3))
    {
      sub_216B1E678((int)v471, "__objc_yes");
      sub_216B4AAC4(v2, v471[0], v471[1]);
    }
    if (sub_216BA28DC(121, *v3))
    {
      sub_216B1E678((int)v470, "__objc_no");
      sub_216B4AAC4(v2, v470[0], v470[1]);
    }
    if (sub_216BA28DC(122, *v3))
    {
      sub_216B1E678((int)v469, "asm");
      sub_216B4AAC4(v2, v469[0], v469[1]);
    }
    if (sub_216BA28DC(123, *v3))
    {
      sub_216B1E678((int)v468, "BOOL");
      sub_216B4AAC4(v2, v468[0], v468[1]);
    }
    if (sub_216BA28DC(124, *v3))
    {
      sub_216B1E678((int)v467, "catch");
      sub_216B4AAC4(v2, v467[0], v467[1]);
    }
    if (sub_216BA28DC(125, *v3))
    {
      sub_216B1E678((int)v466, "class");
      sub_216B4AAC4(v2, v466[0], v466[1]);
    }
    if (sub_216BA28DC(126, *v3))
    {
      sub_216B1E678((int)v465, "const_cast");
      sub_216B4AAC4(v2, v465[0], v465[1]);
    }
    if (sub_216BA28DC(127, *v3))
    {
      sub_216B1E678((int)v464, "delete");
      sub_216B4AAC4(v2, v464[0], v464[1]);
    }
    if (sub_216BA28DC(128, *v3))
    {
      sub_216B1E678((int)v463, "dynamic_cast");
      sub_216B4AAC4(v2, v463[0], v463[1]);
    }
    if (sub_216BA28DC(129, *v3))
    {
      sub_216B1E678((int)v462, "explicit");
      sub_216B4AAC4(v2, v462[0], v462[1]);
    }
    if (sub_216BA28DC(130, *v3))
    {
      sub_216B1E678((int)v461, "export");
      sub_216B4AAC4(v2, v461[0], v461[1]);
    }
    if (sub_216BA28DC(131, *v3))
    {
      sub_216B1E678((int)v460, "false");
      sub_216B4AAC4(v2, v460[0], v460[1]);
    }
    if (sub_216BA28DC(132, *v3))
    {
      sub_216B1E678((int)v459, "friend");
      sub_216B4AAC4(v2, v459[0], v459[1]);
    }
    if (sub_216BA28DC(133, *v3))
    {
      sub_216B1E678((int)v458, "mutable");
      sub_216B4AAC4(v2, v458[0], v458[1]);
    }
    if (sub_216BA28DC(134, *v3))
    {
      sub_216B1E678((int)v457, "namespace");
      sub_216B4AAC4(v2, v457[0], v457[1]);
    }
    if (sub_216BA28DC(135, *v3))
    {
      sub_216B1E678((int)v456, "new");
      sub_216B4AAC4(v2, v456[0], v456[1]);
    }
    if (sub_216BA28DC(136, *v3))
    {
      sub_216B1E678((int)v455, "operator");
      sub_216B4AAC4(v2, v455[0], v455[1]);
    }
    if (sub_216BA28DC(137, *v3))
    {
      sub_216B1E678((int)v454, "private");
      sub_216B4AAC4(v2, v454[0], v454[1]);
    }
    if (sub_216BA28DC(138, *v3))
    {
      sub_216B1E678((int)v453, "protected");
      sub_216B4AAC4(v2, v453[0], v453[1]);
    }
    if (sub_216BA28DC(139, *v3))
    {
      sub_216B1E678((int)v452, "public");
      sub_216B4AAC4(v2, v452[0], v452[1]);
    }
    if (sub_216BA28DC(140, *v3))
    {
      sub_216B1E678((int)v451, "reinterpret_cast");
      sub_216B4AAC4(v2, v451[0], v451[1]);
    }
    if (sub_216BA28DC(141, *v3))
    {
      sub_216B1E678((int)v450, "static_cast");
      sub_216B4AAC4(v2, v450[0], v450[1]);
    }
    if (sub_216BA28DC(142, *v3))
    {
      sub_216B1E678((int)v449, "template");
      sub_216B4AAC4(v2, v449[0], v449[1]);
    }
    if (sub_216BA28DC(143, *v3))
    {
      sub_216B1E678((int)v448, "this");
      sub_216B4AAC4(v2, v448[0], v448[1]);
    }
    if (sub_216BA28DC(144, *v3))
    {
      sub_216B1E678((int)v447, "throw");
      sub_216B4AAC4(v2, v447[0], v447[1]);
    }
    if (sub_216BA28DC(145, *v3))
    {
      sub_216B1E678((int)v446, "true");
      sub_216B4AAC4(v2, v446[0], v446[1]);
    }
    if (sub_216BA28DC(146, *v3))
    {
      sub_216B1E678((int)v445, "try");
      sub_216B4AAC4(v2, v445[0], v445[1]);
    }
    if (sub_216BA28DC(147, *v3))
    {
      sub_216B1E678((int)v444, "typename");
      sub_216B4AAC4(v2, v444[0], v444[1]);
    }
    if (sub_216BA28DC(148, *v3))
    {
      sub_216B1E678((int)v443, "typeid");
      sub_216B4AAC4(v2, v443[0], v443[1]);
    }
    if (sub_216BA28DC(149, *v3))
    {
      sub_216B1E678((int)v442, "using");
      sub_216B4AAC4(v2, v442[0], v442[1]);
    }
    if (sub_216BA28DC(150, *v3))
    {
      sub_216B1E678((int)v441, "virtual");
      sub_216B4AAC4(v2, v441[0], v441[1]);
    }
    if (sub_216BA28DC(151, *v3))
    {
      sub_216B1E678((int)v440, "wchar_t");
      sub_216B4AAC4(v2, v440[0], v440[1]);
    }
    if (sub_216BA28DC(152, *v3))
    {
      sub_216B1E678((int)v439, "alignas");
      sub_216B4AAC4(v2, v439[0], v439[1]);
    }
    if (sub_216BA28DC(153, *v3))
    {
      sub_216B1E678((int)v438, "alignof");
      sub_216B4AAC4(v2, v438[0], v438[1]);
    }
    if (sub_216BA28DC(154, *v3))
    {
      sub_216B1E678((int)v437, "char16_t");
      sub_216B4AAC4(v2, v437[0], v437[1]);
    }
    if (sub_216BA28DC(155, *v3))
    {
      sub_216B1E678((int)v436, "char32_t");
      sub_216B4AAC4(v2, v436[0], v436[1]);
    }
    if (sub_216BA28DC(156, *v3))
    {
      sub_216B1E678((int)v435, "constexpr");
      sub_216B4AAC4(v2, v435[0], v435[1]);
    }
    if (sub_216BA28DC(157, *v3))
    {
      sub_216B1E678((int)v434, "decltype");
      sub_216B4AAC4(v2, v434[0], v434[1]);
    }
    if (sub_216BA28DC(158, *v3))
    {
      sub_216B1E678((int)v433, "noexcept");
      sub_216B4AAC4(v2, v433[0], v433[1]);
    }
    if (sub_216BA28DC(159, *v3))
    {
      sub_216B1E678((int)v432, "nullptr");
      sub_216B4AAC4(v2, v432[0], v432[1]);
    }
    if (sub_216BA28DC(160, *v3))
    {
      sub_216B1E678((int)v431, "static_assert");
      sub_216B4AAC4(v2, v431[0], v431[1]);
    }
    if (sub_216BA28DC(161, *v3))
    {
      sub_216B1E678((int)v430, "thread_local");
      sub_216B4AAC4(v2, v430[0], v430[1]);
    }
    if (sub_216BA28DC(162, *v3))
    {
      sub_216B1E678((int)v429, "_Decimal32");
      sub_216B4AAC4(v2, v429[0], v429[1]);
    }
    if (sub_216BA28DC(163, *v3))
    {
      sub_216B1E678((int)v428, "_Decimal64");
      sub_216B4AAC4(v2, v428[0], v428[1]);
    }
    if (sub_216BA28DC(164, *v3))
    {
      sub_216B1E678((int)v427, "_Decimal128");
      sub_216B4AAC4(v2, v427[0], v427[1]);
    }
    if (sub_216BA28DC(165, *v3))
    {
      sub_216B1E678((int)v426, "__null");
      sub_216B4AAC4(v2, v426[0], v426[1]);
    }
    if (sub_216BA28DC(166, *v3))
    {
      sub_216B1E678((int)v425, "__alignof");
      sub_216B4AAC4(v2, v425[0], v425[1]);
    }
    if (sub_216BA28DC(167, *v3))
    {
      sub_216B1E678((int)v424, "__attribute");
      sub_216B4AAC4(v2, v424[0], v424[1]);
    }
    if (sub_216BA28DC(168, *v3))
    {
      sub_216B1E678((int)v423, "__builtin_choose_expr");
      sub_216B4AAC4(v2, v423[0], v423[1]);
    }
    if (sub_216BA28DC(169, *v3))
    {
      sub_216B1E678((int)v422, "__builtin_offsetof");
      sub_216B4AAC4(v2, v422[0], v422[1]);
    }
    if (sub_216BA28DC(170, *v3))
    {
      sub_216B1E678((int)v421, "__builtin_types_compatible_p");
      sub_216B4AAC4(v2, v421[0], v421[1]);
    }
    if (sub_216BA28DC(171, *v3))
    {
      sub_216B1E678((int)v420, "__builtin_va_arg");
      sub_216B4AAC4(v2, v420[0], v420[1]);
    }
    if (sub_216BA28DC(172, *v3))
    {
      sub_216B1E678((int)v419, "__extension__");
      sub_216B4AAC4(v2, v419[0], v419[1]);
    }
    if (sub_216BA28DC(173, *v3))
    {
      sub_216B1E678((int)v418, "__imag");
      sub_216B4AAC4(v2, v418[0], v418[1]);
    }
    if (sub_216BA28DC(174, *v3))
    {
      sub_216B1E678((int)v417, "__int128");
      sub_216B4AAC4(v2, v417[0], v417[1]);
    }
    if (sub_216BA28DC(175, *v3))
    {
      sub_216B1E678((int)v416, "__label__");
      sub_216B4AAC4(v2, v416[0], v416[1]);
    }
    if (sub_216BA28DC(176, *v3))
    {
      sub_216B1E678((int)v415, "__real");
      sub_216B4AAC4(v2, v415[0], v415[1]);
    }
    if (sub_216BA28DC(177, *v3))
    {
      sub_216B1E678((int)v414, "__thread");
      sub_216B4AAC4(v2, v414[0], v414[1]);
    }
    if (sub_216BA28DC(178, *v3))
    {
      sub_216B1E678((int)v413, "__FUNCTION__");
      sub_216B4AAC4(v2, v413[0], v413[1]);
    }
    if (sub_216BA28DC(179, *v3))
    {
      sub_216B1E678((int)v412, "__PRETTY_FUNCTION__");
      sub_216B4AAC4(v2, v412[0], v412[1]);
    }
    if (sub_216BA28DC(180, *v3))
    {
      sub_216B1E678((int)v411, "typeof");
      sub_216B4AAC4(v2, v411[0], v411[1]);
    }
    if (sub_216BA28DC(181, *v3))
    {
      sub_216B1E678((int)v410, "__FUNCDNAME__");
      sub_216B4AAC4(v2, v410[0], v410[1]);
    }
    if (sub_216BA28DC(182, *v3))
    {
      sub_216B1E678((int)v409, "__FUNCSIG__");
      sub_216B4AAC4(v2, v409[0], v409[1]);
    }
    if (sub_216BA28DC(183, *v3))
    {
      sub_216B1E678((int)v408, "L__FUNCTION__");
      sub_216B4AAC4(v2, v408[0], v408[1]);
    }
    if (sub_216BA28DC(184, *v3))
    {
      sub_216B1E678((int)v407, "__is_interface_class");
      sub_216B4AAC4(v2, v407[0], v407[1]);
    }
    if (sub_216BA28DC(185, *v3))
    {
      sub_216B1E678((int)v406, "__is_sealed");
      sub_216B4AAC4(v2, v406[0], v406[1]);
    }
    if (sub_216BA28DC(186, *v3))
    {
      sub_216B1E678((int)v405, "__is_destructible");
      sub_216B4AAC4(v2, v405[0], v405[1]);
    }
    if (sub_216BA28DC(187, *v3))
    {
      sub_216B1E678((int)v404, "__is_nothrow_destructible");
      sub_216B4AAC4(v2, v404[0], v404[1]);
    }
    if (sub_216BA28DC(188, *v3))
    {
      sub_216B1E678((int)v403, "__is_nothrow_assignable");
      sub_216B4AAC4(v2, v403[0], v403[1]);
    }
    if (sub_216BA28DC(189, *v3))
    {
      sub_216B1E678((int)v402, "__is_constructible");
      sub_216B4AAC4(v2, v402[0], v402[1]);
    }
    if (sub_216BA28DC(190, *v3))
    {
      sub_216B1E678((int)v401, "__is_nothrow_constructible");
      sub_216B4AAC4(v2, v401[0], v401[1]);
    }
    if (sub_216BA28DC(191, *v3))
    {
      sub_216B1E678((int)v400, "__has_nothrow_assign");
      sub_216B4AAC4(v2, v400[0], v400[1]);
    }
    if (sub_216BA28DC(192, *v3))
    {
      sub_216B1E678((int)v399, "__has_nothrow_move_assign");
      sub_216B4AAC4(v2, v399[0], v399[1]);
    }
    if (sub_216BA28DC(193, *v3))
    {
      sub_216B1E678((int)v398, "__has_nothrow_copy");
      sub_216B4AAC4(v2, v398[0], v398[1]);
    }
    if (sub_216BA28DC(194, *v3))
    {
      sub_216B1E678((int)v397, "__has_nothrow_constructor");
      sub_216B4AAC4(v2, v397[0], v397[1]);
    }
    if (sub_216BA28DC(195, *v3))
    {
      sub_216B1E678((int)v396, "__has_trivial_assign");
      sub_216B4AAC4(v2, v396[0], v396[1]);
    }
    if (sub_216BA28DC(196, *v3))
    {
      sub_216B1E678((int)v395, "__has_trivial_move_assign");
      sub_216B4AAC4(v2, v395[0], v395[1]);
    }
    if (sub_216BA28DC(197, *v3))
    {
      sub_216B1E678((int)v394, "__has_trivial_copy");
      sub_216B4AAC4(v2, v394[0], v394[1]);
    }
    if (sub_216BA28DC(198, *v3))
    {
      sub_216B1E678((int)v393, "__has_trivial_constructor");
      sub_216B4AAC4(v2, v393[0], v393[1]);
    }
    if (sub_216BA28DC(199, *v3))
    {
      sub_216B1E678((int)v392, "__has_trivial_move_constructor");
      sub_216B4AAC4(v2, v392[0], v392[1]);
    }
    if (sub_216BA28DC(200, *v3))
    {
      sub_216B1E678((int)v391, "__has_trivial_destructor");
      sub_216B4AAC4(v2, v391[0], v391[1]);
    }
    if (sub_216BA28DC(201, *v3))
    {
      sub_216B1E678((int)v390, "__has_virtual_destructor");
      sub_216B4AAC4(v2, v390[0], v390[1]);
    }
    if (sub_216BA28DC(202, *v3))
    {
      sub_216B1E678((int)v389, "__is_abstract");
      sub_216B4AAC4(v2, v389[0], v389[1]);
    }
    if (sub_216BA28DC(203, *v3))
    {
      sub_216B1E678((int)v388, "__is_base_of");
      sub_216B4AAC4(v2, v388[0], v388[1]);
    }
    if (sub_216BA28DC(204, *v3))
    {
      sub_216B1E678((int)v387, "__is_class");
      sub_216B4AAC4(v2, v387[0], v387[1]);
    }
    if (sub_216BA28DC(205, *v3))
    {
      sub_216B1E678((int)v386, "__is_convertible_to");
      sub_216B4AAC4(v2, v386[0], v386[1]);
    }
    if (sub_216BA28DC(206, *v3))
    {
      sub_216B1E678((int)v385, "__is_empty");
      sub_216B4AAC4(v2, v385[0], v385[1]);
    }
    if (sub_216BA28DC(207, *v3))
    {
      sub_216B1E678((int)v384, "__is_enum");
      sub_216B4AAC4(v2, v384[0], v384[1]);
    }
    if (sub_216BA28DC(208, *v3))
    {
      sub_216B1E678((int)v383, "__is_final");
      sub_216B4AAC4(v2, v383[0], v383[1]);
    }
    if (sub_216BA28DC(209, *v3))
    {
      sub_216B1E678((int)v382, "__is_literal");
      sub_216B4AAC4(v2, v382[0], v382[1]);
    }
    if (sub_216BA28DC(210, *v3))
    {
      sub_216B1E678((int)v381, "__is_pod");
      sub_216B4AAC4(v2, v381[0], v381[1]);
    }
    if (sub_216BA28DC(211, *v3))
    {
      sub_216B1E678((int)v380, "__is_polymorphic");
      sub_216B4AAC4(v2, v380[0], v380[1]);
    }
    if (sub_216BA28DC(212, *v3))
    {
      sub_216B1E678((int)v379, "__is_trivial");
      sub_216B4AAC4(v2, v379[0], v379[1]);
    }
    if (sub_216BA28DC(213, *v3))
    {
      sub_216B1E678((int)v378, "__is_union");
      sub_216B4AAC4(v2, v378[0], v378[1]);
    }
    if (sub_216BA28DC(214, *v3))
    {
      sub_216B1E678((int)v377, "__is_trivially_constructible");
      sub_216B4AAC4(v2, v377[0], v377[1]);
    }
    if (sub_216BA28DC(215, *v3))
    {
      sub_216B1E678((int)v376, "__is_trivially_copyable");
      sub_216B4AAC4(v2, v376[0], v376[1]);
    }
    if (sub_216BA28DC(216, *v3))
    {
      sub_216B1E678((int)v375, "__is_trivially_assignable");
      sub_216B4AAC4(v2, v375[0], v375[1]);
    }
    if (sub_216BA28DC(217, *v3))
    {
      sub_216B1E678((int)v374, "__underlying_type");
      sub_216B4AAC4(v2, v374[0], v374[1]);
    }
    if (sub_216BA28DC(218, *v3))
    {
      sub_216B1E678((int)v373, "__is_lvalue_expr");
      sub_216B4AAC4(v2, v373[0], v373[1]);
    }
    if (sub_216BA28DC(219, *v3))
    {
      sub_216B1E678((int)v372, "__is_rvalue_expr");
      sub_216B4AAC4(v2, v372[0], v372[1]);
    }
    if (sub_216BA28DC(220, *v3))
    {
      sub_216B1E678((int)v371, "__is_arithmetic");
      sub_216B4AAC4(v2, v371[0], v371[1]);
    }
    if (sub_216BA28DC(221, *v3))
    {
      sub_216B1E678((int)v370, "__is_floating_point");
      sub_216B4AAC4(v2, v370[0], v370[1]);
    }
    if (sub_216BA28DC(222, *v3))
    {
      sub_216B1E678((int)v369, "__is_integral");
      sub_216B4AAC4(v2, v369[0], v369[1]);
    }
    if (sub_216BA28DC(223, *v3))
    {
      sub_216B1E678((int)v368, "__is_complete_type");
      sub_216B4AAC4(v2, v368[0], v368[1]);
    }
    if (sub_216BA28DC(224, *v3))
    {
      sub_216B1E678((int)v367, "__is_void");
      sub_216B4AAC4(v2, v367[0], v367[1]);
    }
    if (sub_216BA28DC(225, *v3))
    {
      sub_216B1E678((int)v366, "__is_array");
      sub_216B4AAC4(v2, v366[0], v366[1]);
    }
    if (sub_216BA28DC(226, *v3))
    {
      sub_216B1E678((int)v365, "__is_function");
      sub_216B4AAC4(v2, v365[0], v365[1]);
    }
    if (sub_216BA28DC(227, *v3))
    {
      sub_216B1E678((int)v364, "__is_reference");
      sub_216B4AAC4(v2, v364[0], v364[1]);
    }
    if (sub_216BA28DC(228, *v3))
    {
      sub_216B1E678((int)v363, "__is_lvalue_reference");
      sub_216B4AAC4(v2, v363[0], v363[1]);
    }
    if (sub_216BA28DC(229, *v3))
    {
      sub_216B1E678((int)v362, "__is_rvalue_reference");
      sub_216B4AAC4(v2, v362[0], v362[1]);
    }
    if (sub_216BA28DC(230, *v3))
    {
      sub_216B1E678((int)v361, "__is_fundamental");
      sub_216B4AAC4(v2, v361[0], v361[1]);
    }
    if (sub_216BA28DC(231, *v3))
    {
      sub_216B1E678((int)v360, "__is_object");
      sub_216B4AAC4(v2, v360[0], v360[1]);
    }
    if (sub_216BA28DC(232, *v3))
    {
      sub_216B1E678((int)v359, "__is_scalar");
      sub_216B4AAC4(v2, v359[0], v359[1]);
    }
    if (sub_216BA28DC(233, *v3))
    {
      sub_216B1E678((int)v358, "__is_compound");
      sub_216B4AAC4(v2, v358[0], v358[1]);
    }
    if (sub_216BA28DC(234, *v3))
    {
      sub_216B1E678((int)v357, "__is_pointer");
      sub_216B4AAC4(v2, v357[0], v357[1]);
    }
    if (sub_216BA28DC(235, *v3))
    {
      sub_216B1E678((int)v356, "__is_member_object_pointer");
      sub_216B4AAC4(v2, v356[0], v356[1]);
    }
    if (sub_216BA28DC(236, *v3))
    {
      sub_216B1E678((int)v355, "__is_member_function_pointer");
      sub_216B4AAC4(v2, v355[0], v355[1]);
    }
    if (sub_216BA28DC(237, *v3))
    {
      sub_216B1E678((int)v354, "__is_member_pointer");
      sub_216B4AAC4(v2, v354[0], v354[1]);
    }
    if (sub_216BA28DC(238, *v3))
    {
      sub_216B1E678((int)v353, "__is_const");
      sub_216B4AAC4(v2, v353[0], v353[1]);
    }
    if (sub_216BA28DC(239, *v3))
    {
      sub_216B1E678((int)v352, "__is_volatile");
      sub_216B4AAC4(v2, v352[0], v352[1]);
    }
    if (sub_216BA28DC(240, *v3))
    {
      sub_216B1E678((int)v351, "__is_standard_layout");
      sub_216B4AAC4(v2, v351[0], v351[1]);
    }
    if (sub_216BA28DC(241, *v3))
    {
      sub_216B1E678((int)v350, "__is_signed");
      sub_216B4AAC4(v2, v350[0], v350[1]);
    }
    if (sub_216BA28DC(242, *v3))
    {
      sub_216B1E678((int)v349, "__is_unsigned");
      sub_216B4AAC4(v2, v349[0], v349[1]);
    }
    if (sub_216BA28DC(243, *v3))
    {
      sub_216B1E678((int)v348, "__is_same");
      sub_216B4AAC4(v2, v348[0], v348[1]);
    }
    if (sub_216BA28DC(244, *v3))
    {
      sub_216B1E678((int)v347, "__is_convertible");
      sub_216B4AAC4(v2, v347[0], v347[1]);
    }
    if (sub_216BA28DC(245, *v3))
    {
      sub_216B1E678((int)v346, "__array_rank");
      sub_216B4AAC4(v2, v346[0], v346[1]);
    }
    if (sub_216BA28DC(246, *v3))
    {
      sub_216B1E678((int)v345, "__array_extent");
      sub_216B4AAC4(v2, v345[0], v345[1]);
    }
    if (sub_216BA28DC(247, *v3))
    {
      sub_216B1E678((int)v344, "__private_extern__");
      sub_216B4AAC4(v2, v344[0], v344[1]);
    }
    if (sub_216BA28DC(248, *v3))
    {
      sub_216B1E678((int)v343, "__module_private__");
      sub_216B4AAC4(v2, v343[0], v343[1]);
    }
    if (sub_216BA28DC(249, *v3))
    {
      sub_216B1E678((int)v342, "__declspec");
      sub_216B4AAC4(v2, v342[0], v342[1]);
    }
    if (sub_216BA28DC(250, *v3))
    {
      sub_216B1E678((int)v341, "__cdecl");
      sub_216B4AAC4(v2, v341[0], v341[1]);
    }
    if (sub_216BA28DC(251, *v3))
    {
      sub_216B1E678((int)v340, "__stdcall");
      sub_216B4AAC4(v2, v340[0], v340[1]);
    }
    if (sub_216BA28DC(252, *v3))
    {
      sub_216B1E678((int)v339, "__fastcall");
      sub_216B4AAC4(v2, v339[0], v339[1]);
    }
    if (sub_216BA28DC(253, *v3))
    {
      sub_216B1E678((int)v338, "__thiscall");
      sub_216B4AAC4(v2, v338[0], v338[1]);
    }
    if (sub_216BA28DC(254, *v3))
    {
      sub_216B1E678((int)v337, "__forceinline");
      sub_216B4AAC4(v2, v337[0], v337[1]);
    }
    if (sub_216BA28DC(255, *v3))
    {
      sub_216B1E678((int)v336, "__unaligned");
      sub_216B4AAC4(v2, v336[0], v336[1]);
    }
    if (sub_216BA28DC(256, *v3))
    {
      sub_216B1E678((int)v335, "__global");
      sub_216B4AAC4(v2, v335[0], v335[1]);
    }
    if (sub_216BA28DC(257, *v3))
    {
      sub_216B1E678((int)v334, "__local");
      sub_216B4AAC4(v2, v334[0], v334[1]);
    }
    if (sub_216BA28DC(258, *v3))
    {
      sub_216B1E678((int)v333, "__constant");
      sub_216B4AAC4(v2, v333[0], v333[1]);
    }
    if (sub_216BA28DC(259, *v3))
    {
      sub_216B1E678((int)v332, "__private");
      sub_216B4AAC4(v2, v332[0], v332[1]);
    }
    if (sub_216BA28DC(260, *v3))
    {
      sub_216B1E678((int)v331, "__kernel");
      sub_216B4AAC4(v2, v331[0], v331[1]);
    }
    if (sub_216BA28DC(261, *v3))
    {
      sub_216B1E678((int)v330, "__read_only");
      sub_216B4AAC4(v2, v330[0], v330[1]);
    }
    if (sub_216BA28DC(262, *v3))
    {
      sub_216B1E678((int)v329, "__write_only");
      sub_216B4AAC4(v2, v329[0], v329[1]);
    }
    if (sub_216BA28DC(263, *v3))
    {
      sub_216B1E678((int)v328, "__read_write");
      sub_216B4AAC4(v2, v328[0], v328[1]);
    }
    if (sub_216BA28DC(264, *v3))
    {
      sub_216B1E678((int)v327, "__builtin_astype");
      sub_216B4AAC4(v2, v327[0], v327[1]);
    }
    if (sub_216BA28DC(265, *v3))
    {
      sub_216B1E678((int)v326, "vec_step");
      sub_216B4AAC4(v2, v326[0], v326[1]);
    }
    if (sub_216BA28DC(266, *v3))
    {
      sub_216B1E678((int)v325, "__pascal");
      sub_216B4AAC4(v2, v325[0], v325[1]);
    }
    if (sub_216BA28DC(267, *v3))
    {
      sub_216B1E678((int)v324, "__vector");
      sub_216B4AAC4(v2, v324[0], v324[1]);
    }
    if (sub_216BA28DC(268, *v3))
    {
      sub_216B1E678((int)v323, "__pixel");
      sub_216B4AAC4(v2, v323[0], v323[1]);
    }
    if (sub_216BA28DC(269, *v3))
    {
      sub_216B1E678((int)v322, "half");
      sub_216B4AAC4(v2, v322[0], v322[1]);
    }
    if (sub_216BA28DC(270, *v3))
    {
      sub_216B1E678((int)v321, "__bridge");
      sub_216B4AAC4(v2, v321[0], v321[1]);
    }
    if (sub_216BA28DC(271, *v3))
    {
      sub_216B1E678((int)v320, "__bridge_transfer");
      sub_216B4AAC4(v2, v320[0], v320[1]);
    }
    if (sub_216BA28DC(272, *v3))
    {
      sub_216B1E678((int)v319, "__bridge_retained");
      sub_216B4AAC4(v2, v319[0], v319[1]);
    }
    if (sub_216BA28DC(273, *v3))
    {
      sub_216B1E678((int)v318, "__bridge_retain");
      sub_216B4AAC4(v2, v318[0], v318[1]);
    }
    if (sub_216BA28DC(274, *v3))
    {
      sub_216B1E678((int)v317, "__nonnull");
      sub_216B4AAC4(v2, v317[0], v317[1]);
    }
    if (sub_216BA28DC(275, *v3))
    {
      sub_216B1E678((int)v316, "__nullable");
      sub_216B4AAC4(v2, v316[0], v316[1]);
    }
    if (sub_216BA28DC(276, *v3))
    {
      sub_216B1E678((int)v315, "__null_unspecified");
      sub_216B4AAC4(v2, v315[0], v315[1]);
    }
    if (sub_216BA28DC(277, *v3))
    {
      sub_216B1E678((int)v314, "__ptr64");
      sub_216B4AAC4(v2, v314[0], v314[1]);
    }
    if (sub_216BA28DC(278, *v3))
    {
      sub_216B1E678((int)v313, "__ptr32");
      sub_216B4AAC4(v2, v313[0], v313[1]);
    }
    if (sub_216BA28DC(279, *v3))
    {
      sub_216B1E678((int)v312, "__sptr");
      sub_216B4AAC4(v2, v312[0], v312[1]);
    }
    if (sub_216BA28DC(280, *v3))
    {
      sub_216B1E678((int)v311, "__uptr");
      sub_216B4AAC4(v2, v311[0], v311[1]);
    }
    if (sub_216BA28DC(281, *v3))
    {
      sub_216B1E678((int)v310, "__w64");
      sub_216B4AAC4(v2, v310[0], v310[1]);
    }
    if (sub_216BA28DC(282, *v3))
    {
      sub_216B1E678((int)v309, "__uuidof");
      sub_216B4AAC4(v2, v309[0], v309[1]);
    }
    if (sub_216BA28DC(283, *v3))
    {
      sub_216B1E678((int)v308, "__try");
      sub_216B4AAC4(v2, v308[0], v308[1]);
    }
    if (sub_216BA28DC(284, *v3))
    {
      sub_216B1E678((int)v307, "__finally");
      sub_216B4AAC4(v2, v307[0], v307[1]);
    }
    if (sub_216BA28DC(285, *v3))
    {
      sub_216B1E678((int)v306, "__leave");
      sub_216B4AAC4(v2, v306[0], v306[1]);
    }
    if (sub_216BA28DC(286, *v3))
    {
      sub_216B1E678((int)v305, "uint64_t");
      sub_216B4AAC4(v2, v305[0], v305[1]);
    }
    if (sub_216BA28DC(287, *v3))
    {
      sub_216B1E678((int)v304, "__if_exists");
      sub_216B4AAC4(v2, v304[0], v304[1]);
    }
    if (sub_216BA28DC(288, *v3))
    {
      sub_216B1E678((int)v303, "__if_not_exists");
      sub_216B4AAC4(v2, v303[0], v303[1]);
    }
    if (sub_216BA28DC(289, *v3))
    {
      sub_216B1E678((int)v302, "__single_inheritance");
      sub_216B4AAC4(v2, v302[0], v302[1]);
    }
    if (sub_216BA28DC(290, *v3))
    {
      sub_216B1E678((int)v301, "__multiple_inheritance");
      sub_216B4AAC4(v2, v301[0], v301[1]);
    }
    if (sub_216BA28DC(291, *v3))
    {
      sub_216B1E678((int)v300, "__virtual_inheritance");
      sub_216B4AAC4(v2, v300[0], v300[1]);
    }
    if (sub_216BA28DC(292, *v3))
    {
      sub_216B1E678((int)v299, "__interface");
      sub_216B4AAC4(v2, v299[0], v299[1]);
    }
    if (sub_216BA28DC(293, *v3))
    {
      sub_216B1E678((int)v298, "__builtin_convertvector");
      sub_216B4AAC4(v2, v298[0], v298[1]);
    }
    if (sub_216BA28DC(294, *v3))
    {
      sub_216B1E678((int)v297, "active");
      sub_216B4AAC4(v2, v297[0], v297[1]);
    }
    if (sub_216BA28DC(295, *v3))
    {
      sub_216B1E678((int)v296, "atomic_uint");
      sub_216B4AAC4(v2, v296[0], v296[1]);
    }
    if (sub_216BA28DC(296, *v3))
    {
      sub_216B1E678((int)v295, "attribute");
      sub_216B4AAC4(v2, v295[0], v295[1]);
    }
    if (sub_216BA28DC(297, *v3))
    {
      sub_216B1E678((int)v294, "bvec2");
      sub_216B4AAC4(v2, v294[0], v294[1]);
    }
    if (sub_216BA28DC(298, *v3))
    {
      sub_216B1E678((int)v293, "bvec3");
      sub_216B4AAC4(v2, v293[0], v293[1]);
    }
    if (sub_216BA28DC(299, *v3))
    {
      sub_216B1E678((int)v292, "bvec4");
      sub_216B4AAC4(v2, v292[0], v292[1]);
    }
    if (sub_216BA28DC(300, *v3))
    {
      sub_216B1E678((int)v291, "buffer");
      sub_216B4AAC4(v2, v291[0], v291[1]);
    }
    if (sub_216BA28DC(301, *v3))
    {
      sub_216B1E678((int)v290, "cast");
      sub_216B4AAC4(v2, v290[0], v290[1]);
    }
    if (sub_216BA28DC(302, *v3))
    {
      sub_216B1E678((int)v289, "centroid");
      sub_216B4AAC4(v2, v289[0], v289[1]);
    }
    if (sub_216BA28DC(303, *v3))
    {
      sub_216B1E678((int)v288, "coherent");
      sub_216B4AAC4(v2, v288[0], v288[1]);
    }
    if (sub_216BA28DC(304, *v3))
    {
      sub_216B1E678((int)v287, "common");
      sub_216B4AAC4(v2, v287[0], v287[1]);
    }
    if (sub_216BA28DC(305, *v3))
    {
      sub_216B1E678((int)v286, "discard");
      sub_216B4AAC4(v2, v286[0], v286[1]);
    }
    if (sub_216BA28DC(306, *v3))
    {
      sub_216B1E678((int)v285, "dmat2");
      sub_216B4AAC4(v2, v285[0], v285[1]);
    }
    if (sub_216BA28DC(307, *v3))
    {
      sub_216B1E678((int)v284, "dmat2x2");
      sub_216B4AAC4(v2, v284[0], v284[1]);
    }
    if (sub_216BA28DC(308, *v3))
    {
      sub_216B1E678((int)v283, "dmat2x3");
      sub_216B4AAC4(v2, v283[0], v283[1]);
    }
    if (sub_216BA28DC(309, *v3))
    {
      sub_216B1E678((int)v282, "dmat2x4");
      sub_216B4AAC4(v2, v282[0], v282[1]);
    }
    if (sub_216BA28DC(310, *v3))
    {
      sub_216B1E678((int)v281, "dmat3");
      sub_216B4AAC4(v2, v281[0], v281[1]);
    }
    if (sub_216BA28DC(311, *v3))
    {
      sub_216B1E678((int)v280, "dmat3x2");
      sub_216B4AAC4(v2, v280[0], v280[1]);
    }
    if (sub_216BA28DC(312, *v3))
    {
      sub_216B1E678((int)v279, "dmat3x3");
      sub_216B4AAC4(v2, v279[0], v279[1]);
    }
    if (sub_216BA28DC(313, *v3))
    {
      sub_216B1E678((int)v278, "dmat3x4");
      sub_216B4AAC4(v2, v278[0], v278[1]);
    }
    if (sub_216BA28DC(314, *v3))
    {
      sub_216B1E678((int)v277, "dmat4");
      sub_216B4AAC4(v2, v277[0], v277[1]);
    }
    if (sub_216BA28DC(315, *v3))
    {
      sub_216B1E678((int)v276, "dmat4x2");
      sub_216B4AAC4(v2, v276[0], v276[1]);
    }
    if (sub_216BA28DC(316, *v3))
    {
      sub_216B1E678((int)v275, "dmat4x3");
      sub_216B4AAC4(v2, v275[0], v275[1]);
    }
    if (sub_216BA28DC(317, *v3))
    {
      sub_216B1E678((int)v274, "dmat4x4");
      sub_216B4AAC4(v2, v274[0], v274[1]);
    }
    if (sub_216BA28DC(318, *v3))
    {
      sub_216B1E678((int)v273, "dvec2");
      sub_216B4AAC4(v2, v273[0], v273[1]);
    }
    if (sub_216BA28DC(319, *v3))
    {
      sub_216B1E678((int)v272, "dvec3");
      sub_216B4AAC4(v2, v272[0], v272[1]);
    }
    if (sub_216BA28DC(320, *v3))
    {
      sub_216B1E678((int)v271, "dvec4");
      sub_216B4AAC4(v2, v271[0], v271[1]);
    }
    if (sub_216BA28DC(321, *v3))
    {
      sub_216B1E678((int)v270, "filter");
      sub_216B4AAC4(v2, v270[0], v270[1]);
    }
    if (sub_216BA28DC(322, *v3))
    {
      sub_216B1E678((int)v269, "fixed");
      sub_216B4AAC4(v2, v269[0], v269[1]);
    }
    if (sub_216BA28DC(323, *v3))
    {
      sub_216B1E678((int)v268, "flat");
      sub_216B4AAC4(v2, v268[0], v268[1]);
    }
    if (sub_216BA28DC(324, *v3))
    {
      sub_216B1E678((int)v267, "fvec2");
      sub_216B4AAC4(v2, v267[0], v267[1]);
    }
    if (sub_216BA28DC(325, *v3))
    {
      sub_216B1E678((int)v266, "fvec3");
      sub_216B4AAC4(v2, v266[0], v266[1]);
    }
    if (sub_216BA28DC(326, *v3))
    {
      sub_216B1E678((int)v265, "fvec4");
      sub_216B4AAC4(v2, v265[0], v265[1]);
    }
    if (sub_216BA28DC(327, *v3))
    {
      sub_216B1E678((int)v264, "highp");
      sub_216B4AAC4(v2, v264[0], v264[1]);
    }
    if (sub_216BA28DC(328, *v3))
    {
      sub_216B1E678((int)v263, "hvec2");
      sub_216B4AAC4(v2, v263[0], v263[1]);
    }
    if (sub_216BA28DC(329, *v3))
    {
      sub_216B1E678((int)v262, "hvec3");
      sub_216B4AAC4(v2, v262[0], v262[1]);
    }
    if (sub_216BA28DC(330, *v3))
    {
      sub_216B1E678((int)v261, "hvec4");
      sub_216B4AAC4(v2, v261[0], v261[1]);
    }
    if (sub_216BA28DC(331, *v3))
    {
      sub_216B1E678((int)v260, "iimage1D");
      sub_216B4AAC4(v2, v260[0], v260[1]);
    }
    if (sub_216BA28DC(332, *v3))
    {
      sub_216B1E678((int)v259, "iimage1DArray");
      sub_216B4AAC4(v2, v259[0], v259[1]);
    }
    if (sub_216BA28DC(333, *v3))
    {
      sub_216B1E678((int)v258, "iimage2D");
      sub_216B4AAC4(v2, v258[0], v258[1]);
    }
    if (sub_216BA28DC(334, *v3))
    {
      sub_216B1E678((int)v257, "iimage2DArray");
      sub_216B4AAC4(v2, v257[0], v257[1]);
    }
    if (sub_216BA28DC(335, *v3))
    {
      sub_216B1E678((int)v256, "iimage2DMS");
      sub_216B4AAC4(v2, v256[0], v256[1]);
    }
    if (sub_216BA28DC(336, *v3))
    {
      sub_216B1E678((int)v255, "iimage2DMSArray");
      sub_216B4AAC4(v2, v255[0], v255[1]);
    }
    if (sub_216BA28DC(337, *v3))
    {
      sub_216B1E678((int)v254, "iimage2DRect");
      sub_216B4AAC4(v2, v254[0], v254[1]);
    }
    if (sub_216BA28DC(338, *v3))
    {
      sub_216B1E678((int)v253, "iimage3D");
      sub_216B4AAC4(v2, v253[0], v253[1]);
    }
    if (sub_216BA28DC(339, *v3))
    {
      sub_216B1E678((int)v252, "iimageBuffer");
      sub_216B4AAC4(v2, v252[0], v252[1]);
    }
    if (sub_216BA28DC(340, *v3))
    {
      sub_216B1E678((int)v251, "iimageCube");
      sub_216B4AAC4(v2, v251[0], v251[1]);
    }
    if (sub_216BA28DC(341, *v3))
    {
      sub_216B1E678((int)v250, "iimageCubeArray");
      sub_216B4AAC4(v2, v250[0], v250[1]);
    }
    if (sub_216BA28DC(342, *v3))
    {
      sub_216B1E678((int)v249, "image1D");
      sub_216B4AAC4(v2, v249[0], v249[1]);
    }
    if (sub_216BA28DC(343, *v3))
    {
      sub_216B1E678((int)v248, "image1DArray");
      sub_216B4AAC4(v2, v248[0], v248[1]);
    }
    if (sub_216BA28DC(344, *v3))
    {
      sub_216B1E678((int)v247, "image1DArrayShadow");
      sub_216B4AAC4(v2, v247[0], v247[1]);
    }
    if (sub_216BA28DC(345, *v3))
    {
      sub_216B1E678((int)v246, "image1DShadow");
      sub_216B4AAC4(v2, v246[0], v246[1]);
    }
    if (sub_216BA28DC(346, *v3))
    {
      sub_216B1E678((int)v245, "image2D");
      sub_216B4AAC4(v2, v245[0], v245[1]);
    }
    if (sub_216BA28DC(347, *v3))
    {
      sub_216B1E678((int)v244, "image2DArray");
      sub_216B4AAC4(v2, v244[0], v244[1]);
    }
    if (sub_216BA28DC(348, *v3))
    {
      sub_216B1E678((int)v243, "image2DArrayShadow");
      sub_216B4AAC4(v2, v243[0], v243[1]);
    }
    if (sub_216BA28DC(349, *v3))
    {
      sub_216B1E678((int)v242, "image2DMS");
      sub_216B4AAC4(v2, v242[0], v242[1]);
    }
    if (sub_216BA28DC(350, *v3))
    {
      sub_216B1E678((int)v241, "image2DMSArray");
      sub_216B4AAC4(v2, v241[0], v241[1]);
    }
    if (sub_216BA28DC(351, *v3))
    {
      sub_216B1E678((int)v240, "image2DRect");
      sub_216B4AAC4(v2, v240[0], v240[1]);
    }
    if (sub_216BA28DC(352, *v3))
    {
      sub_216B1E678((int)v239, "image2DShadow");
      sub_216B4AAC4(v2, v239[0], v239[1]);
    }
    if (sub_216BA28DC(353, *v3))
    {
      sub_216B1E678((int)v238, "image3D");
      sub_216B4AAC4(v2, v238[0], v238[1]);
    }
    if (sub_216BA28DC(354, *v3))
    {
      sub_216B1E678((int)v237, "imageBuffer");
      sub_216B4AAC4(v2, v237[0], v237[1]);
    }
    if (sub_216BA28DC(355, *v3))
    {
      sub_216B1E678((int)v236, "imageCube");
      sub_216B4AAC4(v2, v236[0], v236[1]);
    }
    if (sub_216BA28DC(356, *v3))
    {
      sub_216B1E678((int)v235, "imageCubeArray");
      sub_216B4AAC4(v2, v235[0], v235[1]);
    }
    if (sub_216BA28DC(357, *v3))
    {
      sub_216B1E678((int)v234, "in");
      sub_216B4AAC4(v2, v234[0], v234[1]);
    }
    if (sub_216BA28DC(358, *v3))
    {
      sub_216B1E678((int)v233, "inout");
      sub_216B4AAC4(v2, v233[0], v233[1]);
    }
    if (sub_216BA28DC(359, *v3))
    {
      sub_216B1E678((int)v232, "input");
      sub_216B4AAC4(v2, v232[0], v232[1]);
    }
    if (sub_216BA28DC(360, *v3))
    {
      sub_216B1E678((int)v231, "interface");
      sub_216B4AAC4(v2, v231[0], v231[1]);
    }
    if (sub_216BA28DC(361, *v3))
    {
      sub_216B1E678((int)v230, "invariant");
      sub_216B4AAC4(v2, v230[0], v230[1]);
    }
    if (sub_216BA28DC(362, *v3))
    {
      sub_216B1E678((int)v229, "isampler");
      sub_216B4AAC4(v2, v229[0], v229[1]);
    }
    if (sub_216BA28DC(363, *v3))
    {
      sub_216B1E678((int)v228, "isampler1D");
      sub_216B4AAC4(v2, v228[0], v228[1]);
    }
    if (sub_216BA28DC(364, *v3))
    {
      sub_216B1E678((int)v227, "isampler1DArray");
      sub_216B4AAC4(v2, v227[0], v227[1]);
    }
    if (sub_216BA28DC(365, *v3))
    {
      sub_216B1E678((int)v226, "isampler2D");
      sub_216B4AAC4(v2, v226[0], v226[1]);
    }
    if (sub_216BA28DC(366, *v3))
    {
      sub_216B1E678((int)v225, "isampler2DArray");
      sub_216B4AAC4(v2, v225[0], v225[1]);
    }
    if (sub_216BA28DC(367, *v3))
    {
      sub_216B1E678((int)v224, "isampler2DMS");
      sub_216B4AAC4(v2, v224[0], v224[1]);
    }
    if (sub_216BA28DC(368, *v3))
    {
      sub_216B1E678((int)v223, "isampler2DMSArray");
      sub_216B4AAC4(v2, v223[0], v223[1]);
    }
    if (sub_216BA28DC(369, *v3))
    {
      sub_216B1E678((int)v222, "isampler2DRect");
      sub_216B4AAC4(v2, v222[0], v222[1]);
    }
    if (sub_216BA28DC(370, *v3))
    {
      sub_216B1E678((int)v221, "isampler2DShadow");
      sub_216B4AAC4(v2, v221[0], v221[1]);
    }
    if (sub_216BA28DC(371, *v3))
    {
      sub_216B1E678((int)v220, "isampler3D");
      sub_216B4AAC4(v2, v220[0], v220[1]);
    }
    if (sub_216BA28DC(372, *v3))
    {
      sub_216B1E678((int)v219, "isamplerBuffer");
      sub_216B4AAC4(v2, v219[0], v219[1]);
    }
    if (sub_216BA28DC(373, *v3))
    {
      sub_216B1E678((int)v218, "isamplerCube");
      sub_216B4AAC4(v2, v218[0], v218[1]);
    }
    if (sub_216BA28DC(374, *v3))
    {
      sub_216B1E678((int)v217, "isamplerCubeArray");
      sub_216B4AAC4(v2, v217[0], v217[1]);
    }
    if (sub_216BA28DC(375, *v3))
    {
      sub_216B1E678((int)v216, "ivec2");
      sub_216B4AAC4(v2, v216[0], v216[1]);
    }
    if (sub_216BA28DC(376, *v3))
    {
      sub_216B1E678((int)v215, "ivec3");
      sub_216B4AAC4(v2, v215[0], v215[1]);
    }
    if (sub_216BA28DC(377, *v3))
    {
      sub_216B1E678((int)v214, "ivec4");
      sub_216B4AAC4(v2, v214[0], v214[1]);
    }
    if (sub_216BA28DC(378, *v3))
    {
      sub_216B1E678((int)v213, "layout");
      sub_216B4AAC4(v2, v213[0], v213[1]);
    }
    if (sub_216BA28DC(379, *v3))
    {
      sub_216B1E678((int)v212, "lowp");
      sub_216B4AAC4(v2, v212[0], v212[1]);
    }
    if (sub_216BA28DC(380, *v3))
    {
      sub_216B1E678((int)v211, "mat2");
      sub_216B4AAC4(v2, v211[0], v211[1]);
    }
    if (sub_216BA28DC(381, *v3))
    {
      sub_216B1E678((int)v210, "mat2x2");
      sub_216B4AAC4(v2, v210[0], v210[1]);
    }
    if (sub_216BA28DC(382, *v3))
    {
      sub_216B1E678((int)v209, "mat2x3");
      sub_216B4AAC4(v2, v209[0], v209[1]);
    }
    if (sub_216BA28DC(383, *v3))
    {
      sub_216B1E678((int)v208, "mat2x4");
      sub_216B4AAC4(v2, v208[0], v208[1]);
    }
    if (sub_216BA28DC(384, *v3))
    {
      sub_216B1E678((int)v207, "mat3");
      sub_216B4AAC4(v2, v207[0], v207[1]);
    }
    if (sub_216BA28DC(385, *v3))
    {
      sub_216B1E678((int)v206, "mat3x2");
      sub_216B4AAC4(v2, v206[0], v206[1]);
    }
    if (sub_216BA28DC(386, *v3))
    {
      sub_216B1E678((int)v205, "mat3x3");
      sub_216B4AAC4(v2, v205[0], v205[1]);
    }
    if (sub_216BA28DC(387, *v3))
    {
      sub_216B1E678((int)v204, "mat3x4");
      sub_216B4AAC4(v2, v204[0], v204[1]);
    }
    if (sub_216BA28DC(388, *v3))
    {
      sub_216B1E678((int)v203, "mat4");
      sub_216B4AAC4(v2, v203[0], v203[1]);
    }
    if (sub_216BA28DC(389, *v3))
    {
      sub_216B1E678((int)v202, "mat4x2");
      sub_216B4AAC4(v2, v202[0], v202[1]);
    }
    if (sub_216BA28DC(390, *v3))
    {
      sub_216B1E678((int)v201, "mat4x3");
      sub_216B4AAC4(v2, v201[0], v201[1]);
    }
    if (sub_216BA28DC(391, *v3))
    {
      sub_216B1E678((int)v200, "mat4x4");
      sub_216B4AAC4(v2, v200[0], v200[1]);
    }
    if (sub_216BA28DC(392, *v3))
    {
      sub_216B1E678((int)v199, "mediump");
      sub_216B4AAC4(v2, v199[0], v199[1]);
    }
    if (sub_216BA28DC(393, *v3))
    {
      sub_216B1E678((int)v198, "noinline");
      sub_216B4AAC4(v2, v198[0], v198[1]);
    }
    if (sub_216BA28DC(394, *v3))
    {
      sub_216B1E678((int)v197, "noperspective");
      sub_216B4AAC4(v2, v197[0], v197[1]);
    }
    if (sub_216BA28DC(395, *v3))
    {
      sub_216B1E678((int)v196, "out");
      sub_216B4AAC4(v2, v196[0], v196[1]);
    }
    if (sub_216BA28DC(396, *v3))
    {
      sub_216B1E678((int)v195, "output");
      sub_216B4AAC4(v2, v195[0], v195[1]);
    }
    if (sub_216BA28DC(397, *v3))
    {
      sub_216B1E678((int)v194, "partition");
      sub_216B4AAC4(v2, v194[0], v194[1]);
    }
    if (sub_216BA28DC(398, *v3))
    {
      sub_216B1E678((int)v193, "patch");
      sub_216B4AAC4(v2, v193[0], v193[1]);
    }
    if (sub_216BA28DC(399, *v3))
    {
      sub_216B1E678((int)v192, "precision");
      sub_216B4AAC4(v2, v192[0], v192[1]);
    }
    if (sub_216BA28DC(400, *v3))
    {
      sub_216B1E678((int)v191, "readonly");
      sub_216B4AAC4(v2, v191[0], v191[1]);
    }
    if (sub_216BA28DC(401, *v3))
    {
      sub_216B1E678((int)v190, "resource");
      sub_216B4AAC4(v2, v190[0], v190[1]);
    }
    if (sub_216BA28DC(402, *v3))
    {
      sub_216B1E678((int)v189, "sample");
      sub_216B4AAC4(v2, v189[0], v189[1]);
    }
    if (sub_216BA28DC(403, *v3))
    {
      sub_216B1E678((int)v188, "sampler");
      sub_216B4AAC4(v2, v188[0], v188[1]);
    }
    if (sub_216BA28DC(404, *v3))
    {
      sub_216B1E678((int)v187, "sampler1D");
      sub_216B4AAC4(v2, v187[0], v187[1]);
    }
    if (sub_216BA28DC(405, *v3))
    {
      sub_216B1E678((int)v186, "sampler1DArray");
      sub_216B4AAC4(v2, v186[0], v186[1]);
    }
    if (sub_216BA28DC(406, *v3))
    {
      sub_216B1E678((int)v185, "sampler1DArrayShadow");
      sub_216B4AAC4(v2, v185[0], v185[1]);
    }
    if (sub_216BA28DC(407, *v3))
    {
      sub_216B1E678((int)v184, "sampler1DShadow");
      sub_216B4AAC4(v2, v184[0], v184[1]);
    }
    if (sub_216BA28DC(408, *v3))
    {
      sub_216B1E678((int)v183, "sampler2D");
      sub_216B4AAC4(v2, v183[0], v183[1]);
    }
    if (sub_216BA28DC(409, *v3))
    {
      sub_216B1E678((int)v182, "sampler2DArray");
      sub_216B4AAC4(v2, v182[0], v182[1]);
    }
    if (sub_216BA28DC(410, *v3))
    {
      sub_216B1E678((int)v181, "sampler2DArrayShadow");
      sub_216B4AAC4(v2, v181[0], v181[1]);
    }
    if (sub_216BA28DC(411, *v3))
    {
      sub_216B1E678((int)v180, "sampler2DMS");
      sub_216B4AAC4(v2, v180[0], v180[1]);
    }
    if (sub_216BA28DC(412, *v3))
    {
      sub_216B1E678((int)v179, "sampler2DMSArray");
      sub_216B4AAC4(v2, v179[0], v179[1]);
    }
    if (sub_216BA28DC(413, *v3))
    {
      sub_216B1E678((int)v178, "sampler2DRect");
      sub_216B4AAC4(v2, v178[0], v178[1]);
    }
    if (sub_216BA28DC(414, *v3))
    {
      sub_216B1E678((int)v177, "sampler2DRectShadow");
      sub_216B4AAC4(v2, v177[0], v177[1]);
    }
    if (sub_216BA28DC(415, *v3))
    {
      sub_216B1E678((int)v176, "sampler2DShadow");
      sub_216B4AAC4(v2, v176[0], v176[1]);
    }
    if (sub_216BA28DC(416, *v3))
    {
      sub_216B1E678((int)v175, "sampler3D");
      sub_216B4AAC4(v2, v175[0], v175[1]);
    }
    if (sub_216BA28DC(417, *v3))
    {
      sub_216B1E678((int)v174, "sampler3DRect");
      sub_216B4AAC4(v2, v174[0], v174[1]);
    }
    if (sub_216BA28DC(418, *v3))
    {
      sub_216B1E678((int)v173, "samplerBuffer");
      sub_216B4AAC4(v2, v173[0], v173[1]);
    }
    if (sub_216BA28DC(419, *v3))
    {
      sub_216B1E678((int)v172, "samplerCube");
      sub_216B4AAC4(v2, v172[0], v172[1]);
    }
    if (sub_216BA28DC(420, *v3))
    {
      sub_216B1E678((int)v171, "samplerCubeArray");
      sub_216B4AAC4(v2, v171[0], v171[1]);
    }
    if (sub_216BA28DC(421, *v3))
    {
      sub_216B1E678((int)v170, "samplerCubeArrayShadow");
      sub_216B4AAC4(v2, v170[0], v170[1]);
    }
    if (sub_216BA28DC(422, *v3))
    {
      sub_216B1E678((int)v169, "samplerCubeShadow");
      sub_216B4AAC4(v2, v169[0], v169[1]);
    }
    if (sub_216BA28DC(423, *v3))
    {
      sub_216B1E678((int)v168, "smooth");
      sub_216B4AAC4(v2, v168[0], v168[1]);
    }
    if (sub_216BA28DC(424, *v3))
    {
      sub_216B1E678((int)v167, "subroutine");
      sub_216B4AAC4(v2, v167[0], v167[1]);
    }
    if (sub_216BA28DC(425, *v3))
    {
      sub_216B1E678((int)v166, "superp");
      sub_216B4AAC4(v2, v166[0], v166[1]);
    }
    if (sub_216BA28DC(426, *v3))
    {
      sub_216B1E678((int)v165, "uimage1D");
      sub_216B4AAC4(v2, v165[0], v165[1]);
    }
    if (sub_216BA28DC(427, *v3))
    {
      sub_216B1E678((int)v164, "uimage1DArray");
      sub_216B4AAC4(v2, v164[0], v164[1]);
    }
    if (sub_216BA28DC(428, *v3))
    {
      sub_216B1E678((int)v163, "uimage2D");
      sub_216B4AAC4(v2, v163[0], v163[1]);
    }
    if (sub_216BA28DC(429, *v3))
    {
      sub_216B1E678((int)v162, "uimage2DArray");
      sub_216B4AAC4(v2, v162[0], v162[1]);
    }
    if (sub_216BA28DC(430, *v3))
    {
      sub_216B1E678((int)v161, "uimage2DMS");
      sub_216B4AAC4(v2, v161[0], v161[1]);
    }
    if (sub_216BA28DC(431, *v3))
    {
      sub_216B1E678((int)v160, "uimage2DMSArray");
      sub_216B4AAC4(v2, v160[0], v160[1]);
    }
    if (sub_216BA28DC(432, *v3))
    {
      sub_216B1E678((int)v159, "uimage2DRect");
      sub_216B4AAC4(v2, v159[0], v159[1]);
    }
    if (sub_216BA28DC(433, *v3))
    {
      sub_216B1E678((int)v158, "uimage3D");
      sub_216B4AAC4(v2, v158[0], v158[1]);
    }
    if (sub_216BA28DC(434, *v3))
    {
      sub_216B1E678((int)v157, "uimageBuffer");
      sub_216B4AAC4(v2, v157[0], v157[1]);
    }
    if (sub_216BA28DC(435, *v3))
    {
      sub_216B1E678((int)v156, "uimageCube");
      sub_216B4AAC4(v2, v156[0], v156[1]);
    }
    if (sub_216BA28DC(436, *v3))
    {
      sub_216B1E678((int)v155, "uimageCubeArray");
      sub_216B4AAC4(v2, v155[0], v155[1]);
    }
    if (sub_216BA28DC(437, *v3))
    {
      sub_216B1E678((int)v154, "uint");
      sub_216B4AAC4(v2, v154[0], v154[1]);
    }
    if (sub_216BA28DC(438, *v3))
    {
      sub_216B1E678((int)v153, "uniform");
      sub_216B4AAC4(v2, v153[0], v153[1]);
    }
    if (sub_216BA28DC(439, *v3))
    {
      sub_216B1E678((int)v152, "usampler");
      sub_216B4AAC4(v2, v152[0], v152[1]);
    }
    if (sub_216BA28DC(440, *v3))
    {
      sub_216B1E678((int)v151, "usampler1D");
      sub_216B4AAC4(v2, v151[0], v151[1]);
    }
    if (sub_216BA28DC(441, *v3))
    {
      sub_216B1E678((int)v150, "usampler1DArray");
      sub_216B4AAC4(v2, v150[0], v150[1]);
    }
    if (sub_216BA28DC(442, *v3))
    {
      sub_216B1E678((int)v149, "usampler2D");
      sub_216B4AAC4(v2, v149[0], v149[1]);
    }
    if (sub_216BA28DC(443, *v3))
    {
      sub_216B1E678((int)v148, "usampler2DArray");
      sub_216B4AAC4(v2, v148[0], v148[1]);
    }
    if (sub_216BA28DC(444, *v3))
    {
      sub_216B1E678((int)v147, "usampler2DMS");
      sub_216B4AAC4(v2, v147[0], v147[1]);
    }
    if (sub_216BA28DC(445, *v3))
    {
      sub_216B1E678((int)v146, "usampler2DMSArray");
      sub_216B4AAC4(v2, v146[0], v146[1]);
    }
    if (sub_216BA28DC(446, *v3))
    {
      sub_216B1E678((int)v145, "usampler2DRect");
      sub_216B4AAC4(v2, v145[0], v145[1]);
    }
    if (sub_216BA28DC(447, *v3))
    {
      sub_216B1E678((int)v144, "usampler3D");
      sub_216B4AAC4(v2, v144[0], v144[1]);
    }
    if (sub_216BA28DC(448, *v3))
    {
      sub_216B1E678((int)v143, "usamplerBuffer");
      sub_216B4AAC4(v2, v143[0], v143[1]);
    }
    if (sub_216BA28DC(449, *v3))
    {
      sub_216B1E678((int)v142, "usamplerCube");
      sub_216B4AAC4(v2, v142[0], v142[1]);
    }
    if (sub_216BA28DC(450, *v3))
    {
      sub_216B1E678((int)v141, "usamplerCubeArray");
      sub_216B4AAC4(v2, v141[0], v141[1]);
    }
    if (sub_216BA28DC(451, *v3))
    {
      sub_216B1E678((int)v140, "uvec2");
      sub_216B4AAC4(v2, v140[0], v140[1]);
    }
    if (sub_216BA28DC(452, *v3))
    {
      sub_216B1E678((int)v139, "uvec3");
      sub_216B4AAC4(v2, v139[0], v139[1]);
    }
    if (sub_216BA28DC(453, *v3))
    {
      sub_216B1E678((int)v138, "uvec4");
      sub_216B4AAC4(v2, v138[0], v138[1]);
    }
    if (sub_216BA28DC(454, *v3))
    {
      sub_216B1E678((int)v137, "varying");
      sub_216B4AAC4(v2, v137[0], v137[1]);
    }
    if (sub_216BA28DC(455, *v3))
    {
      sub_216B1E678((int)v136, "vec2");
      sub_216B4AAC4(v2, v136[0], v136[1]);
    }
    if (sub_216BA28DC(456, *v3))
    {
      sub_216B1E678((int)v135, "vec3");
      sub_216B4AAC4(v2, v135[0], v135[1]);
    }
    if (sub_216BA28DC(457, *v3))
    {
      sub_216B1E678((int)v134, "vec4");
      sub_216B4AAC4(v2, v134[0], v134[1]);
    }
    if (sub_216BA28DC(458, *v3))
    {
      sub_216B1E678((int)v133, "writeonly");
      sub_216B4AAC4(v2, v133[0], v133[1]);
    }
    if (sub_216BA28DC(459, *v3))
    {
      sub_216B1E678((int)v132, "kernel");
      sub_216B4AAC4(v2, v132[0], v132[1]);
    }
    if (sub_216BA28DC(460, *v3))
    {
      sub_216B1E678((int)v131, "__attribute__");
      sub_216B4AAC4(v2, v131[0], v131[1]);
    }
    if (sub_216BA28DC(461, *v3))
    {
      sub_216B1E678((int)v130, "sample_f");
      sub_216B4AAC4(v2, v130[0], v130[1]);
    }
    if (sub_216BA28DC(462, *v3))
    {
      sub_216B1E678((int)v129, "sample_h");
      sub_216B4AAC4(v2, v129[0], v129[1]);
    }
    if (sub_216BA28DC(463, *v3))
    {
      sub_216B1E678((int)v128, "sampler_f");
      sub_216B4AAC4(v2, v128[0], v128[1]);
    }
    if (sub_216BA28DC(464, *v3))
    {
      sub_216B1E678((int)v127, "sampler_h");
      sub_216B4AAC4(v2, v127[0], v127[1]);
    }
    if (sub_216BA28DC(465, *v3))
    {
      sub_216B1E678((int)v126, "hmat2");
      sub_216B4AAC4(v2, v126[0], v126[1]);
    }
    if (sub_216BA28DC(466, *v3))
    {
      sub_216B1E678((int)v125, "hmat2x2");
      sub_216B4AAC4(v2, v125[0], v125[1]);
    }
    if (sub_216BA28DC(467, *v3))
    {
      sub_216B1E678((int)v124, "hmat2x3");
      sub_216B4AAC4(v2, v124[0], v124[1]);
    }
    if (sub_216BA28DC(468, *v3))
    {
      sub_216B1E678((int)v123, "hmat2x4");
      sub_216B4AAC4(v2, v123[0], v123[1]);
    }
    if (sub_216BA28DC(469, *v3))
    {
      sub_216B1E678((int)v122, "hmat3");
      sub_216B4AAC4(v2, v122[0], v122[1]);
    }
    if (sub_216BA28DC(470, *v3))
    {
      sub_216B1E678((int)v121, "hmat3x2");
      sub_216B4AAC4(v2, v121[0], v121[1]);
    }
    if (sub_216BA28DC(471, *v3))
    {
      sub_216B1E678((int)v120, "hmat3x3");
      sub_216B4AAC4(v2, v120[0], v120[1]);
    }
    if (sub_216BA28DC(472, *v3))
    {
      sub_216B1E678((int)v119, "hmat3x4");
      sub_216B4AAC4(v2, v119[0], v119[1]);
    }
    if (sub_216BA28DC(473, *v3))
    {
      sub_216B1E678((int)v118, "hmat4");
      sub_216B4AAC4(v2, v118[0], v118[1]);
    }
    if (sub_216BA28DC(474, *v3))
    {
      sub_216B1E678((int)v117, "hmat4x2");
      sub_216B4AAC4(v2, v117[0], v117[1]);
    }
    if (sub_216BA28DC(475, *v3))
    {
      sub_216B1E678((int)v116, "hmat4x3");
      sub_216B4AAC4(v2, v116[0], v116[1]);
    }
    if (sub_216BA28DC(476, *v3))
    {
      sub_216B1E678((int)v115, "hmat4x4");
      sub_216B4AAC4(v2, v115[0], v115[1]);
    }
    if (sub_216BA28DC(477, *v3))
    {
      sub_216B1E678((int)v114, "float2");
      sub_216B4AAC4(v2, v114[0], v114[1]);
    }
    if (sub_216BA28DC(478, *v3))
    {
      sub_216B1E678((int)v113, "float3");
      sub_216B4AAC4(v2, v113[0], v113[1]);
    }
    if (sub_216BA28DC(479, *v3))
    {
      sub_216B1E678((int)v112, "float4");
      sub_216B4AAC4(v2, v112[0], v112[1]);
    }
    if (sub_216BA28DC(480, *v3))
    {
      sub_216B1E678((int)v111, "half2");
      sub_216B4AAC4(v2, v111[0], v111[1]);
    }
    if (sub_216BA28DC(481, *v3))
    {
      sub_216B1E678((int)v110, "half3");
      sub_216B4AAC4(v2, v110[0], v110[1]);
    }
    if (sub_216BA28DC(482, *v3))
    {
      sub_216B1E678((int)v109, "half4");
      sub_216B4AAC4(v2, v109[0], v109[1]);
    }
    if (sub_216BA28DC(483, *v3))
    {
      sub_216B1E678((int)v108, "float2x2");
      sub_216B4AAC4(v2, v108[0], v108[1]);
    }
    if (sub_216BA28DC(484, *v3))
    {
      sub_216B1E678((int)v107, "float3x3");
      sub_216B4AAC4(v2, v107[0], v107[1]);
    }
    if (sub_216BA28DC(485, *v3))
    {
      sub_216B1E678((int)v106, "float4x4");
      sub_216B4AAC4(v2, v106[0], v106[1]);
    }
    if (sub_216BA28DC(486, *v3))
    {
      sub_216B1E678((int)v105, "half2x2");
      sub_216B4AAC4(v2, v105[0], v105[1]);
    }
    if (sub_216BA28DC(487, *v3))
    {
      sub_216B1E678((int)v104, "half3x3");
      sub_216B4AAC4(v2, v104[0], v104[1]);
    }
    if (sub_216BA28DC(488, *v3))
    {
      sub_216B1E678((int)v103, "half4x4");
      sub_216B4AAC4(v2, v103[0], v103[1]);
    }
    if (sub_216BA28DC(489, *v3))
    {
      sub_216B1E678((int)v102, "hsampler");
      sub_216B4AAC4(v2, v102[0], v102[1]);
    }
    if (sub_216BA28DC(490, *v3))
    {
      sub_216B1E678((int)v101, "hsampler2D");
      sub_216B4AAC4(v2, v101[0], v101[1]);
    }
    if (sub_216BA28DC(491, *v3))
    {
      sub_216B1E678((int)v100, "__sample");
      sub_216B4AAC4(v2, v100[0], v100[1]);
    }
    if (sub_216BA28DC(492, *v3))
    {
      sub_216B1E678((int)v99, "__color");
      sub_216B4AAC4(v2, v99[0], v99[1]);
    }
    if (sub_216BA28DC(493, *v3))
    {
      sub_216B1E678((int)v98, "__table");
      sub_216B4AAC4(v2, v98[0], v98[1]);
    }
    if (sub_216BA28DC(494, *v3))
    {
      sub_216B1E678((int)v97, "__unknown_anytype");
      sub_216B4AAC4(v2, v97[0], v97[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 3u))
    {
      sub_216B1E678((int)v96, "radians");
      sub_216B4AAC4(v2, v96[0], v96[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 4u))
    {
      sub_216B1E678((int)v95, "degrees");
      sub_216B4AAC4(v2, v95[0], v95[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 5u))
    {
      sub_216B1E678((int)v94, "sin");
      sub_216B4AAC4(v2, v94[0], v94[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 6u))
    {
      sub_216B1E678((int)v93, "cos");
      sub_216B4AAC4(v2, v93[0], v93[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 7u))
    {
      sub_216B1E678((int)v92, "tan");
      sub_216B4AAC4(v2, v92[0], v92[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 8u))
    {
      sub_216B1E678((int)v91, "asin");
      sub_216B4AAC4(v2, v91[0], v91[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 9u))
    {
      sub_216B1E678((int)v90, "acos");
      sub_216B4AAC4(v2, v90[0], v90[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0xAu))
    {
      sub_216B1E678((int)v89, "atan");
      sub_216B4AAC4(v2, v89[0], v89[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0xBu))
    {
      sub_216B1E678((int)v88, "atan");
      sub_216B4AAC4(v2, v88[0], v88[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0xCu))
    {
      sub_216B1E678((int)v87, "sinh");
      sub_216B4AAC4(v2, v87[0], v87[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0xDu))
    {
      sub_216B1E678((int)v86, "cosh");
      sub_216B4AAC4(v2, v86[0], v86[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0xEu))
    {
      sub_216B1E678((int)v85, "tanh");
      sub_216B4AAC4(v2, v85[0], v85[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0xFu))
    {
      sub_216B1E678((int)v84, "asinh");
      sub_216B4AAC4(v2, v84[0], v84[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x10u))
    {
      sub_216B1E678((int)v83, "acosh");
      sub_216B4AAC4(v2, v83[0], v83[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x11u))
    {
      sub_216B1E678((int)v82, "atanh");
      sub_216B4AAC4(v2, v82[0], v82[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x12u))
    {
      sub_216B1E678((int)v81, "pow");
      sub_216B4AAC4(v2, v81[0], v81[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x13u))
    {
      sub_216B1E678((int)v80, "exp");
      sub_216B4AAC4(v2, v80[0], v80[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x14u))
    {
      sub_216B1E678((int)v79, "log");
      sub_216B4AAC4(v2, v79[0], v79[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x15u))
    {
      sub_216B1E678((int)v78, "exp2");
      sub_216B4AAC4(v2, v78[0], v78[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x16u))
    {
      sub_216B1E678((int)v77, "log2");
      sub_216B4AAC4(v2, v77[0], v77[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x17u))
    {
      sub_216B1E678((int)v76, "sqrt");
      sub_216B4AAC4(v2, v76[0], v76[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x18u))
    {
      sub_216B1E678((int)v75, "inversesqrt");
      sub_216B4AAC4(v2, v75[0], v75[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x19u))
    {
      sub_216B1E678((int)v74, "abs");
      sub_216B4AAC4(v2, v74[0], v74[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x1Au))
    {
      sub_216B1E678((int)v73, "sign");
      sub_216B4AAC4(v2, v73[0], v73[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x1Bu))
    {
      sub_216B1E678((int)v72, "floor");
      sub_216B4AAC4(v2, v72[0], v72[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x1Cu))
    {
      sub_216B1E678((int)v71, "trunc");
      sub_216B4AAC4(v2, v71[0], v71[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x1Du))
    {
      sub_216B1E678((int)v70, "round");
      sub_216B4AAC4(v2, v70[0], v70[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x1Eu))
    {
      sub_216B1E678((int)v69, "roundEven");
      sub_216B4AAC4(v2, v69[0], v69[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x1Fu))
    {
      sub_216B1E678((int)v68, "ceil");
      sub_216B4AAC4(v2, v68[0], v68[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x20u))
    {
      sub_216B1E678((int)v67, "fract");
      sub_216B4AAC4(v2, v67[0], v67[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x21u))
    {
      sub_216B1E678((int)v66, "mod");
      sub_216B4AAC4(v2, v66[0], v66[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x22u))
    {
      sub_216B1E678((int)v65, "modf");
      sub_216B4AAC4(v2, v65[0], v65[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x23u))
    {
      sub_216B1E678((int)v64, "min");
      sub_216B4AAC4(v2, v64[0], v64[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x24u))
    {
      sub_216B1E678((int)v63, "max");
      sub_216B4AAC4(v2, v63[0], v63[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x25u))
    {
      sub_216B1E678((int)v62, "clamp");
      sub_216B4AAC4(v2, v62[0], v62[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x26u))
    {
      sub_216B1E678((int)v61, "mix");
      sub_216B4AAC4(v2, v61[0], v61[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x27u))
    {
      sub_216B1E678((int)v60, "mix");
      sub_216B4AAC4(v2, v60[0], v60[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x28u))
    {
      sub_216B1E678((int)v59, "step");
      sub_216B4AAC4(v2, v59[0], v59[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x29u))
    {
      sub_216B1E678((int)v58, "smoothstep");
      sub_216B4AAC4(v2, v58[0], v58[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x2Au))
    {
      sub_216B1E678((int)v57, "isnan");
      sub_216B4AAC4(v2, v57[0], v57[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x2Bu))
    {
      sub_216B1E678((int)v56, "isinf");
      sub_216B4AAC4(v2, v56[0], v56[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x2Cu))
    {
      sub_216B1E678((int)v55, "floatBitsToInt");
      sub_216B4AAC4(v2, v55[0], v55[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x2Du))
    {
      sub_216B1E678((int)v54, "floatBitsToUint");
      sub_216B4AAC4(v2, v54[0], v54[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x2Eu))
    {
      sub_216B1E678((int)v53, "intBitsToFloat");
      sub_216B4AAC4(v2, v53[0], v53[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x2Fu))
    {
      sub_216B1E678((int)v52, "uintBitsToFloat");
      sub_216B4AAC4(v2, v52[0], v52[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x30u))
    {
      sub_216B1E678((int)v51, "packSnorm2x16");
      sub_216B4AAC4(v2, v51[0], v51[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x31u))
    {
      sub_216B1E678((int)v50, "unpackSnorm2x16");
      sub_216B4AAC4(v2, v50[0], v50[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x32u))
    {
      sub_216B1E678((int)v49, "packUnorm2x16");
      sub_216B4AAC4(v2, v49[0], v49[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x33u))
    {
      sub_216B1E678((int)v48, "unpackUnorm2x16");
      sub_216B4AAC4(v2, v48[0], v48[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x34u))
    {
      sub_216B1E678((int)v47, "packHalf2x16");
      sub_216B4AAC4(v2, v47[0], v47[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x35u))
    {
      sub_216B1E678((int)v46, "unpackHalf2x16");
      sub_216B4AAC4(v2, v46[0], v46[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x36u))
    {
      sub_216B1E678((int)v45, "length");
      sub_216B4AAC4(v2, v45[0], v45[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x37u))
    {
      sub_216B1E678((int)v44, "distance");
      sub_216B4AAC4(v2, v44[0], v44[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x38u))
    {
      sub_216B1E678((int)v43, "dot");
      sub_216B4AAC4(v2, v43[0], v43[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x39u))
    {
      sub_216B1E678((int)v42, "cross");
      sub_216B4AAC4(v2, v42[0], v42[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x3Au))
    {
      sub_216B1E678((int)v41, "normalize");
      sub_216B4AAC4(v2, v41[0], v41[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x3Bu))
    {
      sub_216B1E678((int)v40, "faceforward");
      sub_216B4AAC4(v2, v40[0], v40[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x3Cu))
    {
      sub_216B1E678((int)v39, "reflect");
      sub_216B4AAC4(v2, v39[0], v39[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x3Du))
    {
      sub_216B1E678((int)v38, "refract");
      sub_216B4AAC4(v2, v38[0], v38[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x3Eu))
    {
      sub_216B1E678((int)v37, "matrixCompMult");
      sub_216B4AAC4(v2, v37[0], v37[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x3Fu))
    {
      sub_216B1E678((int)v36, "outerProduct");
      sub_216B4AAC4(v2, v36[0], v36[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x40u))
    {
      sub_216B1E678((int)v35, "transpose");
      sub_216B4AAC4(v2, v35[0], v35[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x41u))
    {
      sub_216B1E678((int)v34, "determinant");
      sub_216B4AAC4(v2, v34[0], v34[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x42u))
    {
      sub_216B1E678((int)v33, "inverse");
      sub_216B4AAC4(v2, v33[0], v33[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x43u))
    {
      sub_216B1E678((int)v32, "lessThan");
      sub_216B4AAC4(v2, v32[0], v32[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x44u))
    {
      sub_216B1E678((int)v31, "lessThanEqual");
      sub_216B4AAC4(v2, v31[0], v31[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x45u))
    {
      sub_216B1E678((int)v30, "greaterThan");
      sub_216B4AAC4(v2, v30[0], v30[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x46u))
    {
      sub_216B1E678((int)v29, "greaterThanEqual");
      sub_216B4AAC4(v2, v29[0], v29[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x47u))
    {
      sub_216B1E678((int)v28, "equal");
      sub_216B4AAC4(v2, v28[0], v28[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x48u))
    {
      sub_216B1E678((int)v27, "notEqual");
      sub_216B4AAC4(v2, v27[0], v27[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x49u))
    {
      sub_216B1E678((int)v26, "any");
      sub_216B4AAC4(v2, v26[0], v26[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x4Au))
    {
      sub_216B1E678((int)v25, "all");
      sub_216B4AAC4(v2, v25[0], v25[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x4Bu))
    {
      sub_216B1E678((int)v24, "not");
      sub_216B4AAC4(v2, v24[0], v24[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x4Cu))
    {
      sub_216B1E678((int)v23, "$assert");
      sub_216B4AAC4(v2, v23[0], v23[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x4Du))
    {
      sub_216B1E678((int)v22, "sample");
      sub_216B4AAC4(v2, v22[0], v22[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x4Eu))
    {
      sub_216B1E678((int)v21, "samplerTransform");
      sub_216B4AAC4(v2, v21[0], v21[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x4Fu))
    {
      sub_216B1E678((int)v20, "samplerExtent");
      sub_216B4AAC4(v2, v20[0], v20[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x50u))
    {
      sub_216B1E678((int)v19, "samplerCoord");
      sub_216B4AAC4(v2, v19[0], v19[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 0x51u))
    {
      sub_216B1E678((int)v18, "texture2D");
      sub_216B4AAC4(v2, v18[0], v18[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 1u))
    {
      sub_216B1E678((int)v17, "ci_outColorF");
      sub_216B4AAC4(v2, v17[0], v17[1]);
    }
    if (sub_216BF3130((uint64_t *)&v517, 2u))
    {
      sub_216B1E678((int)v16, "ci_outColorH");
      sub_216B4AAC4(v2, v16[0], v16[1]);
    }
    v15 = (_QWORD *)sub_216BF3164(v2);
    v14 = sub_216BF3168(v2);
    while (sub_216B3760C(&v15, &v14))
    {
      v4 = sub_216B3C9C8((uint64_t)&v15);
      sub_216BD4510(v13, *(_QWORD *)(v4 + 8));
      if (!sub_216BD6DA4((uint64_t)v13, v5) || !sub_216BF316C(v13) || sub_216BD689C(v13))
      {
        v6 = sub_216B28BEC(v0[1]);
        v7 = (unsigned int *)sub_216B3C9C8((uint64_t)&v15);
        v8 = sub_216B3CA54(v7);
        sub_216BEA9DC(&v12, v6, v8, v9);
        v11 = sub_216BEA9E0(&v12);
        sub_216BD81CC(v0 + 10, (uint64_t)&v11);
      }
      sub_216BD4548(v13);
      sub_216B3CA9C(&v15);
    }
    sub_216BE4DD0(v0);
  }
  return !v1;
}

uint64_t sub_216BF3130(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = sub_216B1E600(*(_QWORD *)(*a1 + 8));
  v5 = sub_216BAE264(v4, a2);
  return sub_216BAE310(v5, *(_QWORD *)(v3 + 16));
}

BOOL sub_216BF316C(_DWORD **a1)
{
  return sub_216B91C38(*a1) == 6;
}

uint64_t sub_216BF318C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11[2];
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  v11[0] = (uint64_t)v12;
  v11[1] = a1;
  if (!sub_216BF32E8(v11))
  {
    while (sub_216B7214C(a1 + 32, 1) && sub_216B7214C(a1 + 32, 0))
    {
      result = sub_216B71644(a1 + 32);
      switch((int)result)
      {
        case 19:
          sub_216BEA6F0(a1);
          v9 = a1;
          v10 = 20;
          goto LABEL_14;
        case 20:
          sub_216BEA6F0(a1);
          goto LABEL_17;
        case 21:
          sub_216BE56FC(a1);
          v9 = a1;
          v10 = 22;
          goto LABEL_14;
        case 22:
          sub_216BE56FC(a1);
          goto LABEL_17;
        case 23:
          sub_216BEC8FC(a1);
          v9 = a1;
          v10 = 24;
LABEL_14:
          sub_216BECD88(v9, v10, 0, 0);
          goto LABEL_17;
        case 24:
          sub_216BEC8FC(a1);
          goto LABEL_17;
        default:
          if ((_DWORD)result == 3)
          {
            sub_216BECEEC();
          }
          else
          {
            if ((_DWORD)result == 61 && (a4 & 1) != 0)
              return result;
            sub_216BE4DD0(a1);
          }
LABEL_17:
          if (sub_216BF32E8(v11))
            goto LABEL_18;
          break;
      }
    }
  }
LABEL_18:
  result = sub_216BF32E8(v11);
  if ((_DWORD)result)
  {
    if ((a5 & 1) == 0)
      return sub_216BE5AD8(a1);
  }
  return result;
}

BOOL sub_216BF32E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v7;

  v2 = a1[1];
  v3 = sub_216B1E600(*a1);
  v4 = sub_216BF360C((_QWORD *)*a1);
  v7 = sub_216B71644(v2 + 32);
  v5 = sub_216BF35A8(v3, v4, &v7);
  return v5 != sub_216BF360C((_QWORD *)*a1);
}

uint64_t sub_216BF335C(uint64_t a1)
{
  uint64_t result;

  result = sub_216BECEEC();
  if ((result & 1) == 0)
    return sub_216BECD88(a1, 61, 0, 0);
  return result;
}

BOOL sub_216BF339C(_DWORD *a1, unsigned int a2, _DWORD *a3)
{
  unsigned int *v6;
  int v7;
  uint64_t v9[2];

  v6 = a1 + 8;
  v7 = sub_216B71644((uint64_t)(a1 + 8));
  if (v7 == a2)
  {
    if (a2 == 19)
    {
      ++a1[16];
    }
    else if (a2 == 21)
    {
      ++a1[15];
    }
    else
    {
      ++a1[17];
    }
    *a3 = sub_216BE4DD0(a1);
  }
  else
  {
    sub_216BE4CA8((uint64_t)a1, v6, 8, (uint64_t)v9);
    sub_216B89E2C(v9, a2);
    sub_216B4B3B4(v9);
  }
  return v7 != a2;
}

uint64_t sub_216BF3470(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t result;
  uint64_t v10[2];

  if (a2 == 24)
  {
    v8 = 23;
  }
  else if (a2 == 22)
  {
    v8 = 21;
  }
  else
  {
    v8 = 19;
  }
  sub_216BE4CA8(a1, (unsigned int *)(a1 + 32), 8, (uint64_t)v10);
  sub_216B89E2C(v10, a2);
  sub_216B4B3B4(v10);
  sub_216BECEE0(a1, a3, 50, (uint64_t)v10);
  sub_216B89E2C(v10, v8);
  sub_216B4B3B4(v10);
  *a4 = sub_216B1E4E0((unsigned int *)(a1 + 32));
  sub_216BECD88(a1, a2, 0, 0);
  result = sub_216B71644(a1 + 32);
  if ((_DWORD)result == a2)
  {
    *a4 = sub_216B1E4E0((unsigned int *)(a1 + 32));
    return sub_216BE4DD0(a1);
  }
  return result;
}

BOOL sub_216BF3570(uint64_t a1)
{
  _BOOL8 result;

  for (result = sub_216BEB890(a1); !result; result = sub_216BEB890(a1))
    sub_216BE455C(a1);
  return result;
}

uint64_t sub_216BF35A8(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v6 = j_j_nullsub_1(a1);
  v7 = j_j_nullsub_1(a2);
  v8 = sub_216BF3618(v6, v7, a3, (uint64_t)&v10);
  return sub_216B20710(a1, v8);
}

uint64_t sub_216BF360C(_QWORD *a1)
{
  return *a1 + 2 * a1[1];
}

uint64_t sub_216BF3618(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    while (*(unsigned __int16 *)sub_216B3557C(a4, v4) != *a3)
    {
      v4 += 2;
      if (v4 == a2)
        return a2;
    }
  }
  return v4;
}

uint64_t sub_216BF3680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[8];

  *(_OWORD *)a1 = 0u;
  sub_216B5F9A0(a1 + 16, 0);
  sub_216B39B60((_QWORD *)(a1 + 40));
  sub_216B8F100(a1 + 176);
  sub_216B324FC(a1 + 456);
  sub_216BAC9C0(a1 + 464);
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  sub_216B26DE8(a1 + 576, "main");
  sub_216B25034(a1 + 600);
  *(_BYTE *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 628) = 0;
  sub_216C0BD38(a2, a3, 0, (uint64_t)v7);
  sub_216BF3748(a1 + 456, (uint64_t)v7);
  sub_216B27C04(v7);
  return a1;
}

uint64_t sub_216BF3748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = sub_216B28054(a2, a2);
  sub_216B27C30(a1, v4);
  v5 = j_j_nullsub_1(a2);
  j_nullsub_1(&v8, v5);
  j_nullsub_1(a1, v6);
  return a1;
}

uint64_t sub_216BF37A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[3];
  uint64_t v119[3];
  uint64_t v120[2];
  _QWORD v121[3];
  unsigned int v122;
  uint64_t v123[2];
  uint64_t v124[2];
  _BYTE v125[152];
  _BYTE v126[32];
  uint64_t v127[4];
  unsigned int v128;
  uint64_t v129[2];
  _BYTE v130[32];
  uint64_t v131[9];

  v131[7] = *MEMORY[0x24BDAC8D0];
  v10 = a1 + 456;
  v11 = sub_216B25CA8(a1 + 456, a2);
  v117 = sub_216BF4054(v11, v12);
  sub_216BF405C((uint64_t)v129, v117);
  v116 = v10;
  v14 = sub_216B25CA8(v10, v13);
  v16 = sub_216BF4060(v14, v15);
  sub_216B4AED0(&v128);
  v115 = sub_216B40EE8(v16);
  sub_216BF4068(a2, a5, (uint64_t)v127);
  sub_216BF40A8((uint64_t)v126);
  if (!sub_216BF40E8((uint64_t)v127, (uint64_t)v126))
  {
LABEL_65:
    sub_216BF4650(v126);
    sub_216BF4650(v127);
    return 1;
  }
  while (1)
  {
    sub_216B295EC(v125);
    v118[0] = 0;
    v17 = sub_216BF4138((uint64_t)v127);
    v18 = sub_216BF4100(v17);
    v118[0] = v18;
    if (v18)
    {
      if (sub_216B5EE7C(v18))
        goto LABEL_6;
      v131[0] = sub_216B27CB0(v118[0]);
      v19 = sub_216BB5260(a1 + 16, v131);
      v20 = v118[0];
      if (v19)
      {
        v131[0] = sub_216B27CB0(v118[0]);
        v21 = sub_216B61D98(a1 + 16, v131);
        sub_216B7D14C(v20, *v21);
LABEL_6:
        v22 = 4;
        goto LABEL_7;
      }
      v34 = "filter";
      if (sub_216BF4154(v118[0]))
      {
        v35 = v118[0];
        sub_216BF4160(v118[0], v131);
        sub_216BF41F0(v35, v119);
        while (sub_216BF4250(v131, v119))
        {
          sub_216BF4268((uint64_t)v131);
          sub_216BF42A8(v131, v36);
        }
        v34 = "coordinate-transform";
      }
      if (sub_216BF431C(v118[0]))
        v37 = "sample-with-transform";
      else
        v37 = (char *)v34;
      v38 = (char *)sub_216B27CB0(v118[0]);
      sub_216B1E678((int)v124, v38);
      sub_216B1E678((int)v123, v37);
      v39 = sub_216B271E8(v124[0], v124[1], v123[0], v123[1], 0);
      sub_216B4AED0(&v122);
      v40 = sub_216B9BFA8(v115, v39, 0, 0, 0, v122);
      sub_216B9277C(v16, v40, 0, v128);
      v41 = sub_216BF4328(a4);
      v43 = sub_216B25CA8(v116, v42);
      v45 = sub_216BF4330(v43, v44);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, v45, v16);
      sub_216BF4338(a3);
      sub_216B2D768(v131);
      v46 = 0;
      if (!sub_216BEB890(a3))
      {
        v46 = 0;
        do
        {
          while (1)
          {
            v68 = sub_216B96ED8(a3);
            if (!sub_216B71174(v68, 79))
              break;
            sub_216BE455C(a3);
            if (sub_216BEB890(a3))
              goto LABEL_21;
          }
          v121[0] = v131;
          v121[1] = v16;
          v121[2] = v118;
          sub_216BF4340(v130, v121);
          v46 = sub_216BE493C(a3, (uint64_t)v130);
          sub_216BA5334(v130);
          if (!sub_216B29084(v131))
          {
            v69 = (_QWORD *)sub_216B5F148((uint64_t)v131);
            sub_216BD4510(v119, *v69);
            v70 = (uint64_t *)sub_216B28BEC(v117);
            sub_216BDB93C(v119, v46, v70);
            sub_216BD4548(v119);
          }
        }
        while (!sub_216BEB890(a3));
      }
LABEL_21:
      v47 = (uint64_t *)sub_216B1E600((uint64_t)v131);
      v48 = sub_216B1E67C((uint64_t)v131);
      while (v47 != (uint64_t *)v48)
      {
        v49 = *v47++;
        sub_216BD4510(v119, v49);
        sub_216BDBA38((uint64_t)v119);
        sub_216BD4548(v119);
      }
      if (v46 && sub_216BEB890(a3))
      {
        v50 = v118[0];
        v51 = sub_216B3DB48(v46);
        sub_216B7D14C(v50, v51);
        v52 = sub_216B5EE7C(v118[0]);
        v119[0] = sub_216B27CB0(v118[0]);
        *sub_216B61D98(a1 + 16, v119) = v52;
        sub_216B9C008(v16);
        v53 = sub_216BF4328(a4);
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 32))(v53);
        v22 = 4;
      }
      else
      {
        sub_216BD433C(v117, v128, 2331, (uint64_t)v119);
        v67 = sub_216B27CB0(v118[0]);
        sub_216B60EA8(v119, v67);
        sub_216B4B3B4(v119);
        v22 = 1;
      }
      sub_216B1FF6C(v131);
      goto LABEL_7;
    }
    v131[0] = sub_216BF4138((uint64_t)v127);
    if (sub_216BF4344((uint64_t)v131, v23))
    {
      v24 = sub_216BF4348((uint64_t)v127);
      v26 = sub_216BF434C(v24, v25);
      sub_216BF37A8(a1, v26, a3, a4, a5);
LABEL_56:
      sub_216B2489C(v125);
      goto LABEL_57;
    }
    v27 = sub_216BF4138((uint64_t)v127);
    v29 = sub_216BF436C(v27, v28);
    if (v29)
    {
      v30 = (_QWORD *)v29;
      sub_216B1E678((int)v120, "_dc");
      v31 = sub_216BF43A4(v129, v120[0], v120[1]);
      v32 = sub_216B3DB48(v31);
      v33 = v30;
LABEL_55:
      sub_216B210B8(v33, v32);
      goto LABEL_56;
    }
    v54 = sub_216BF4138((uint64_t)v127);
    v55 = sub_216BF43CC(v54);
    if (v55)
    {
      v56 = v55;
      sub_216B25FA8((uint64_t)v119, "c");
      v57 = sub_216BF4404(v56);
      sub_216BD39B4((uint64_t)v118, v57);
      sub_216B29830(v131, v119, v118);
      sub_216B34DE0(v131, (uint64_t)v125);
      v59 = v58;
      v61 = v60;
      v62 = sub_216BF440C(v56);
      v63 = sub_216B2EF1C(v56);
      v65 = sub_216BF4418((uint64_t)v129, v63, v64);
      v66 = sub_216BF4428((uint64_t)v129, v59, v61, v62, v65, 0, 2);
      if (!v66)
        goto LABEL_66;
      v32 = v66;
      v33 = (_QWORD *)v56;
      goto LABEL_55;
    }
    v71 = sub_216BF4138((uint64_t)v127);
    v73 = sub_216BF4484(v71, v72);
    if (v73)
    {
      v74 = v73;
      if (sub_216BF4154(v73))
        v75 = "_t";
      else
        v75 = "_u";
      sub_216B25FA8((uint64_t)v119, v75);
      v76 = sub_216BF4404(v74);
      sub_216BD39B4((uint64_t)v118, v76);
      sub_216B29830(v131, v119, v118);
      sub_216B34DE0(v131, (uint64_t)v125);
      v78 = v77;
      v80 = v79;
      v81 = sub_216BF4574(v74);
      v82 = sub_216BF44BC((uint64_t)v129, v78, v80, v81, 3, 7);
      if (!v82)
        goto LABEL_66;
      v83 = v82;
LABEL_53:
      if (!sub_216BDD244(v117, v83))
        goto LABEL_66;
      v33 = (_QWORD *)v74;
      v32 = v83;
      goto LABEL_55;
    }
    v84 = sub_216BF4138((uint64_t)v127);
    v86 = sub_216BF4580(v84, v85);
    if (v86)
      break;
    v94 = sub_216BF4138((uint64_t)v127);
    v96 = sub_216BF45C4(v94, v95);
    if (v96)
    {
      v97 = (_QWORD *)v96;
      if (sub_216BF45B8(v96))
      {
        sub_216B25FA8((uint64_t)v119, "_i");
        v98 = sub_216BF4404((uint64_t)v97);
        sub_216BD39B4((uint64_t)v118, v98);
        sub_216B29830(v131, v119, v118);
        sub_216B34DE0(v131, (uint64_t)v125);
        v100 = v99;
        v102 = v101;
        v103 = v100;
        v104 = 44;
      }
      else
      {
        sub_216B25FA8((uint64_t)v119, "_i");
        v109 = sub_216BF4404((uint64_t)v97);
        sub_216BD39B4((uint64_t)v118, v109);
        sub_216B29830(v131, v119, v118);
        sub_216B34DE0(v131, (uint64_t)v125);
        v111 = v110;
        v102 = v112;
        v103 = v111;
        v104 = 43;
      }
      v113 = sub_216BF44BC((uint64_t)v129, v102, v103, v104, 1, 7);
      if (v113 && sub_216BDD244(v117, v113))
      {
        sub_216B210B8(v97, v113);
        goto LABEL_6;
      }
      v22 = 1;
    }
    else
    {
      v22 = 0;
    }
LABEL_7:
    sub_216B2489C(v125);
    if (v22 != 4)
      goto LABEL_67;
LABEL_57:
    sub_216BF45FC(v127);
    if ((sub_216BF40E8((uint64_t)v127, (uint64_t)v126) & 1) == 0)
      goto LABEL_65;
  }
  v74 = v86;
  if (sub_216BF45B8(v86))
  {
    sub_216B25FA8((uint64_t)v119, "_s");
    v87 = sub_216BF4404(v74);
    sub_216BD39B4((uint64_t)v118, v87);
    sub_216B29830(v131, v119, v118);
    sub_216B34DE0(v131, (uint64_t)v125);
    v89 = v88;
    v91 = v90;
    v92 = v89;
    v93 = 42;
  }
  else
  {
    sub_216B25FA8((uint64_t)v119, "_s");
    v105 = sub_216BF4404(v74);
    sub_216BD39B4((uint64_t)v118, v105);
    sub_216B29830(v131, v119, v118);
    sub_216B34DE0(v131, (uint64_t)v125);
    v107 = v106;
    v91 = v108;
    v92 = v107;
    v93 = 41;
  }
  v83 = sub_216BF44BC((uint64_t)v129, v91, v92, v93, 0, 7);
  if (v83)
    goto LABEL_53;
LABEL_66:
  sub_216B2489C(v125);
LABEL_67:
  sub_216BF4650(v126);
  sub_216BF4650(v127);
  return 0;
}

uint64_t sub_216BF4054(uint64_t a1, uint64_t a2)
{
  return sub_216B25CA8(a1 + 16, a2);
}

uint64_t sub_216BF4060(uint64_t a1, uint64_t a2)
{
  return sub_216B25CA8(a1 + 56, a2);
}

uint64_t sub_216BF4068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v5[32];

  sub_216BF5FFC(a1, a2, (uint64_t)v5);
  sub_216BF602C(a3, v5);
  return sub_216BF5E2C(v5);
}

uint64_t sub_216BF40A8@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[32];

  sub_216BF6868((uint64_t)v3);
  sub_216BF602C(a1, v3);
  return sub_216BF5E2C(v3);
}

uint64_t sub_216BF40E8(uint64_t a1, uint64_t a2)
{
  return sub_216BF68A0(a1, a2) ^ 1;
}

uint64_t sub_216BF4100(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BF5F98(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BF4138(uint64_t a1)
{
  return *(_QWORD *)sub_216B2C7A4(a1 + 8);
}

uint64_t sub_216BF4154(uint64_t a1)
{
  return *(_BYTE *)(a1 + 11) & 1;
}

_QWORD *sub_216BF4160@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_216BF4100(a1);
  if (v4)
  {
    v6 = v4;
    v7 = (unsigned __int8 *)sub_216B28BEC(v4);
    v8 = sub_216BD4848(v7);
    return sub_216BF5D84(a2, v6, v8);
  }
  else
  {
    v10 = sub_216BF504C(a1, v5);
    if (v10)
    {
      v11 = v10;
      v12 = sub_216B2037C(v10);
      return sub_216BF5D88(a2, v11, v12);
    }
    else
    {
      return sub_216BF5D8C(a2, a1);
    }
  }
}

_QWORD *sub_216BF41F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = sub_216BF4100(a1);
  if (!v4)
    return sub_216BF5D8C(a2, a1);
  v5 = v4;
  v6 = (unsigned __int8 *)sub_216B28BEC(v4);
  v7 = sub_216BD4884(v6);
  return sub_216BF5D84(a2, v5, v7);
}

BOOL sub_216BF4250(_QWORD *a1, _QWORD *a2)
{
  return !sub_216BF6A24(a1, a2);
}

uint64_t sub_216BF4268(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  if (sub_216B601E8((unsigned __int8 *)(a1 + 8)))
    v3 = j_j_nullsub_1(v1);
  else
    v3 = sub_216BA9CCC(v1, v2);
  return *(_QWORD *)v3;
}

uint64_t *sub_216BF42A8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a1 + 1;
  if (!sub_216BD5344(a1 + 1, a2))
  {
    if (sub_216BF4100(*a1))
    {
      v6 = sub_216BA9CCC(v3, v4) + 8;
      sub_216BDB34C(v3, &v6);
    }
    else
    {
      sub_216BD2540(&v6);
      *v3 = v6;
    }
  }
  return a1;
}

uint64_t sub_216BF431C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 11) >> 1) & 1;
}

uint64_t sub_216BF4328(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_216BF4330(uint64_t a1, uint64_t a2)
{
  return sub_216B25CA8(a1 + 48, a2);
}

uint64_t sub_216BF4338(uint64_t a1)
{
  return sub_216BE4BF0(a1, 1);
}

uint64_t sub_216BF434C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BF504C(a1, a2);
  if (result)
    return sub_216B5EE7C(result);
  return result;
}

uint64_t sub_216BF436C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  if (sub_216BF5048((uint64_t)&v3, a2))
    return sub_216B3DB48(v3);
  else
    return 0;
}

uint64_t sub_216BF43A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_216BF4E74(a1, a2, a3);
  return sub_216BF5E10((uint64_t **)a1, v4);
}

uint64_t sub_216BF43CC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BF6DC8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BF4404(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 12);
}

uint64_t sub_216BF440C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 11) & 0x7F;
}

_DWORD *sub_216BF4418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BD8CD4(*(uint64_t **)a1, a2, a3, *(_DWORD *)(a1 + 8));
}

uint64_t sub_216BF4428(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int *a5, char a6, char a7)
{
  uint64_t v9;
  uint64_t v10;

  v9 = sub_216BF44BC(a1, a2, a3, a4, a6, a7);
  v10 = sub_216BF5E18(a1, v9);
  sub_216BD6FD4(*(uint64_t **)a1, v10, a5, *(_DWORD *)(a1 + 8));
  return v10;
}

uint64_t sub_216BF4484(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  if (sub_216BF5044((uint64_t)&v3, a2))
    return sub_216B3DB48(v3);
  else
    return 0;
}

uint64_t sub_216BF44BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v12;
  unsigned int *v13;
  _BYTE v15[40];
  _BYTE v16[64];

  sub_216BDF270((uint64_t)v16);
  sub_216BE7AF8((uint64_t)v16, a5);
  sub_216BE5A88((uint64_t)v16, a4);
  sub_216BE59F0((uint64_t)v16, *(_DWORD *)(a1 + 8), a6);
  v12 = sub_216BF4E74((uint64_t *)a1, a2, a3);
  sub_216BE5B14((uint64_t)v15, (uint64_t)v16, v12, *(_DWORD *)(a1 + 8));
  v13 = sub_216BD6188(*(_QWORD *)a1, (uint64_t)v15, 1);
  return sub_216BF5E18(a1, (uint64_t)v13);
}

uint64_t sub_216BF4574(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 25;
}

uint64_t sub_216BF4580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  if (sub_216BF503C((uint64_t)&v3, a2))
    return sub_216B3DB48(v3);
  else
    return 0;
}

uint64_t sub_216BF45B8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 11) & 3;
}

uint64_t sub_216BF45C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  if (sub_216BF5040((uint64_t)&v3, a2))
    return sub_216B3DB48(v3);
  else
    return 0;
}

uint64_t *sub_216BF45FC(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = a1 + 1;
  v3 = (_QWORD *)sub_216B2C7A4((uint64_t)(a1 + 1));
  nullsub_1(a1, *v3);
  sub_216BF6A88(v2);
  if (!sub_216B29084(v2))
    sub_216BF613C(a1);
  return a1;
}

uint64_t sub_216BF4654(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[100];
  unsigned int v33;
  uint64_t v34[2];
  uint64_t v35[2];
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[2];
  unsigned int v39[3];

  sub_216B4AED0(v39);
  v3 = sub_216B25CA8(a1 + 456, v2);
  v5 = sub_216C0B130(v3, v4);
  v7 = sub_216B25CA8(a1 + 456, v6);
  v9 = sub_216BF4060(v7, v8);
  v11 = sub_216B25CA8(a1 + 456, v10);
  v13 = (uint64_t *)sub_216BF4054(v11, v12);
  sub_216BF405C((uint64_t)v38, (uint64_t)v13);
  v15 = sub_216B25CA8(a1 + 456, v14);
  v17 = sub_216BF48A4(v15, v16);
  v18 = sub_216B40EE8(v9);
  sub_216BD459C(v13);
  sub_216BF48AC((uint64_t)v38, 3, 3);
  sub_216B1E678((int)v37, "_dc");
  sub_216BF4920(v38, v37[0], v37[1], 8, 3, 0);
  sub_216B1E678((int)v36, "p0");
  sub_216BF4920(v38, v36[0], v36[1], 8, 3, 8);
  v19 = (char **)sub_216B1E600(a1 + 464);
  v20 = sub_216B1E67C(a1 + 464);
  if (v19 != (char **)v20)
  {
    v21 = (char **)v20;
    do
    {
      sub_216B1E678((int)v35, *v19);
      sub_216B1E678((int)v34, "lib");
      v22 = sub_216B271E8(v35[0], v35[1], v34[0], v34[1], 0);
      sub_216B4AED0(&v33);
      v23 = sub_216B9BFA8(v18, v22, 0, 0, 0, v33);
      sub_216B9277C(v9, v23, 0, v39[0]);
      v24 = sub_216BF4328(v5);
      v26 = sub_216B25CA8(a1 + 456, v25);
      v28 = sub_216BF4330(v26, v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v28, v9);
      sub_216BF4338(v17);
      while (!sub_216BEB890(v17))
        sub_216BE455C(v17);
      ++v19;
    }
    while (v19 != v21);
  }
  sub_216BAC9C4(v32);
  v29 = sub_216BF37A8(a1, *(_QWORD *)a1, v17, v5, (uint64_t)v32);
  v30 = sub_216BF4328(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  *(_BYTE *)(a1 + 624) = v29 ^ 1;
  sub_216B9B960(v32);
  return v29;
}

uint64_t sub_216BF48A4(uint64_t a1, uint64_t a2)
{
  return sub_216B25CA8(a1 + 24, a2);
}

uint64_t sub_216BF48AC(uint64_t a1, char a2, char a3)
{
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v9[16];

  sub_216BDF270((uint64_t)v9);
  sub_216BE7AF8((uint64_t)v9, a2);
  sub_216BE5A88((uint64_t)v9, a3);
  v6 = *(uint64_t **)a1;
  v7 = sub_216BD7F2C(*(uint64_t **)a1, v9, *(_DWORD *)(a1 + 8));
  return sub_216BDD244((uint64_t)v6, (uint64_t)v7);
}

uint64_t sub_216BF4920(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = sub_216BF44BC((uint64_t)a1, a2, a3, a4, a5, a6);
  return sub_216BDD244(v6, v7);
}

BOOL sub_216BF4948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v58[2];
  uint64_t v59[2];
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63[2];
  _BYTE v64[24];
  _BYTE v65[24];
  _QWORD v66[3];
  _QWORD v67[3];
  uint64_t v68[3];
  _BYTE v69[152];
  _BYTE v70[32];
  uint64_t v71[4];
  unsigned int v72;
  uint64_t v73[3];

  v8 = sub_216B25CA8(a1 + 456, a2);
  v10 = (uint64_t *)sub_216BF4054(v8, v9);
  sub_216BF405C((uint64_t)v73, (uint64_t)v10);
  sub_216B4AED0(&v72);
  sub_216BF4068(a2, a4, (uint64_t)v71);
  sub_216BF40A8((uint64_t)v70);
  if (sub_216BF40E8((uint64_t)v71, (uint64_t)v70))
  {
    while (1)
    {
      sub_216B295EC(v69);
      v11 = sub_216BF4138((uint64_t)v71);
      v12 = sub_216BF4100(v11);
      if (v12)
        break;
      v68[0] = sub_216BF4138((uint64_t)v71);
      if ((sub_216BF503C((uint64_t)v68, v35) & 1) == 0)
      {
        v68[0] = sub_216BF4138((uint64_t)v71);
        if ((sub_216BF5040((uint64_t)v68, v36) & 1) == 0)
        {
          v37 = sub_216BF4138((uint64_t)v71);
          v38 = sub_216BF43CC(v37);
          if (v38)
          {
            v39 = sub_216B1E600(v38);
            v68[0] = 0;
            v67[0] = v39;
            sub_216B6E0CC(v62, (uint64_t)v67);
            v68[0] = sub_216BDD204(v10, v62[0], v62[1]);
            if (v68[0])
            {
              sub_216B268AC(a3, v68);
              goto LABEL_14;
            }
            goto LABEL_32;
          }
          v68[0] = sub_216BF4138((uint64_t)v71);
          if ((sub_216BF5044((uint64_t)v68, v40) & 1) == 0)
          {
            v68[0] = sub_216BF4138((uint64_t)v71);
            if ((sub_216BF5048((uint64_t)v68, v41) & 1) == 0)
            {
              v42 = sub_216BF4138((uint64_t)v71);
              v34 = sub_216BF504C(v42, v43);
              if (!v34)
                goto LABEL_33;
              sub_216B25FA8((uint64_t)v67, "_pos_");
              v44 = sub_216BF4E34(v34);
              sub_216BD39B4((uint64_t)v66, v44);
              sub_216B29830(v68, v67, v66);
              sub_216B34DE0(v68, (uint64_t)v69);
              v46 = v45;
              v48 = v47;
              sub_216B1E678((int)v61, "_dc");
              v49 = sub_216BF5084(v73, v46, v48, 8, v61[0], v61[1], 0, 0);
              if (v49)
              {
                v68[0] = 0;
                v67[0] = v49;
                sub_216B6E0CC(v60, (uint64_t)v67);
                v68[0] = sub_216BDD204(v10, v60[0], v60[1]);
                if (v68[0])
                {
                  sub_216B268AC(a3, v68);
                  sub_216B1E678((int)v59, "_dc");
                  v50 = sub_216B2037C(v34);
                  v51 = sub_216BF514C(v50);
                  v53 = (unsigned int *)sub_216BF50EC(v73, v59[0], v59[1], v51, v52, 4);
                  if (v53)
                  {
                    v67[0] = 0;
                    v67[0] = sub_216BDD5D0(v10, v53);
                    if (v67[0])
                    {
                      sub_216B268AC(a3, v67);
                      v54 = sub_216B5EE7C(v34);
                      if (sub_216BF4948(a1, v54, a3, a4))
                      {
                        sub_216B1E678((int)v58, "_dc");
                        v55 = (unsigned int *)sub_216BF50EC(v73, v58[0], v58[1], v46, v48, 4);
                        if (v55)
                        {
                          v66[0] = 0;
                          v66[0] = sub_216BDD5D0(v10, v55);
                          if (v66[0])
                          {
                            sub_216B268AC(a3, v66);
                            v56 = sub_216B5EE7C(v34);
                            v33 = sub_216B1E600(v56);
                            v32 = (_QWORD *)v34;
LABEL_13:
                            sub_216B210B8(v32, v33);
LABEL_14:
                            LODWORD(v34) = 4;
LABEL_33:
                            sub_216B2489C(v69);
                            if ((_DWORD)v34 != 4)
                              goto LABEL_37;
                            goto LABEL_34;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_32:
              LODWORD(v34) = 1;
              goto LABEL_33;
            }
          }
        }
      }
      sub_216B2489C(v69);
LABEL_34:
      sub_216BF45FC(v71);
      if ((sub_216BF40E8((uint64_t)v71, (uint64_t)v70) & 1) == 0)
        goto LABEL_35;
    }
    v13 = v12;
    if (sub_216BF4154(v12))
      v14 = "dc";
    else
      v14 = &byte_216C19659;
    if (sub_216BF431C(v13))
      v14 = "rp";
    sub_216B25FA8((uint64_t)v66, "_");
    v15 = sub_216BF4E34(v13);
    sub_216BD39B4((uint64_t)v65, v15);
    sub_216B29830(v67, v66, v65);
    sub_216B25FA8((uint64_t)v64, v14);
    sub_216B29830(v68, v67, v64);
    sub_216B34DE0(v68, (uint64_t)v69);
    v17 = v16;
    v19 = v18;
    v20 = sub_216BF4E40(v13);
    v21 = sub_216BF44BC((uint64_t)v73, v17, v19, v20, 0, 0);
    if (!v21
      || (v22 = v21,
          v23 = sub_216B5EE7C(v13),
          v24 = sub_216BA6A7C(v23),
          v26 = sub_216BF4E74(v73, v24, v25),
          v27 = (unsigned __int8 *)sub_216B28BEC(v13),
          v29 = sub_216BF4FB0(v27, v28),
          (v31 = (unsigned int *)sub_216BF4EA8((uint64_t)v73, v26, v29, v30)) == 0)
      || !sub_216BD6FD4(v10, v22, v31, v72))
    {
      sub_216B2489C(v69);
      LODWORD(v34) = 1;
      goto LABEL_37;
    }
    v68[0] = 0;
    v67[0] = v22;
    sub_216B6E0CC(v63, (uint64_t)v67);
    v68[0] = sub_216BDD204(v10, v63[0], v63[1]);
    if (v68[0])
    {
      sub_216B268AC(a3, v68);
      v32 = (_QWORD *)v13;
      v33 = v22;
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_35:
  LODWORD(v34) = 2;
LABEL_37:
  sub_216BF4650(v70);
  sub_216BF4650(v71);
  return (_DWORD)v34 == 2;
}

uint64_t sub_216BF4E34(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) >> 3) & 0x3FFFF;
}

uint64_t sub_216BF4E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_216B939E0(*(_QWORD *)(a1 + 24));
  v1 = sub_216B1E600((uint64_t)&v4);
  v2 = sub_216BAED9C(v1);
  return sub_216BA7EA4(v2);
}

uint64_t sub_216BF4E74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216BC66EC(*a1);
  v6 = sub_216BDBC28(v5);
  return sub_216B4AAC4(v6, a2, a3);
}

uint64_t sub_216BF4EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v17[2];
  _DWORD *v18;
  _QWORD v19[2];
  _BYTE v20[56];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19[0] = a3;
  v19[1] = a4;
  sub_216B2D768(v20);
  v6 = (uint64_t *)sub_216B1E600((uint64_t)v19);
  v7 = sub_216B35430(v19);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    do
    {
      v9 = *v6++;
      v10 = sub_216BF514C(v9);
      v18 = sub_216BF5E58((uint64_t *)a1, v10, v11);
      sub_216B268AC((uint64_t)v20, &v18);
    }
    while (v6 != v8);
  }
  v12 = *(uint64_t **)a1;
  v13 = *(_DWORD *)(a1 + 8);
  sub_216BEA8D8(v17, v20);
  v14 = sub_216BDA338(v12, v13, a2, v17[0], v17[1], *(_DWORD *)(a1 + 8));
  v15 = sub_216BF5E18(a1, (uint64_t)v14);
  sub_216B1FF6C(v20);
  return v15;
}

uint64_t sub_216BF4FB0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (sub_216BD5344(a1, a2))
  {
    sub_216B26D14(&v9);
  }
  else if (sub_216B601E8(a1))
  {
    v4 = j_j_nullsub_1(a1);
    sub_216B6E0CC(&v9, v4);
  }
  else
  {
    v5 = sub_216BA9CCC(a1, v3);
    v6 = sub_216B1E600(v5);
    v7 = sub_216B1E67C(v5);
    sub_216BC0E28(&v9, v6, v7);
  }
  return v9;
}

uint64_t sub_216BF504C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  if (sub_216BF4344((uint64_t)&v3, a2))
    return sub_216B3DB48(v3);
  else
    return 0;
}

uint64_t sub_216BF5084(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  unsigned int *v14;

  v14 = sub_216BF5E58(a1, a5, a6);
  return sub_216BF4428((uint64_t)a1, a2, a3, a4, v14, a7, a8);
}

uint64_t sub_216BF50EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _DWORD *v10;
  _DWORD *v11;

  v10 = sub_216BF5E58(a1, a2, a3);
  v11 = sub_216BF5E58(a1, a4, a5);
  return sub_216BF5E94((uint64_t)a1, (uint64_t)v10, (uint64_t)v11, a6);
}

uint64_t sub_216BF514C(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_216B1E600(a1);
  return sub_216BA6A7C(v1);
}

BOOL sub_216BF5160(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  uint64_t v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  uint64_t v37;
  _QWORD v38[12];
  uint64_t v39[2];
  uint64_t v40[2];
  _BYTE v41[8];
  uint64_t v42[2];
  _BYTE v43[68];
  int v44;
  uint64_t v45[2];
  _QWORD v46[35];
  _BYTE v47[216];
  uint64_t v48;

  v4 = a2;
  v48 = *MEMORY[0x24BDAC8D0];
  v6 = sub_216B25CA8(a1 + 456, a2);
  v8 = (uint64_t *)sub_216BF4054(v6, v7);
  sub_216BF405C((uint64_t)v45, (uint64_t)v8);
  *(_DWORD *)(a1 + 628) = v4;
  *(_DWORD *)(a1 + 632) = a3;
  if (*(_BYTE *)(a1 + 624))
    return 0;
  v9 = sub_216BC66EC((uint64_t)v8);
  v10 = sub_216B2037C(v9);
  if ((sub_216B8E76C(v10) & 1) != 0)
    return 0;
  sub_216B4AED0(&v44);
  sub_216BDF270((uint64_t)v43);
  sub_216BE5A88((uint64_t)v43, 2);
  v13 = (char *)sub_216B26084(a1 + 576);
  sub_216B1E678((int)v42, v13);
  v14 = sub_216BF4E74(v45, v42[0], v42[1]);
  sub_216BE4DD4((uint64_t)v47, (uint64_t)v43, v14, v44);
  sub_216BD41AC(v41, v8, 9);
  v15 = sub_216BD7C68(v8, (uint64_t)v47);
  v16 = (_WORD *)sub_216B3DB48(v15);
  *(_QWORD *)(a1 + 8) = v16;
  sub_216BF54A0(v16);
  if (*(_BYTE *)(a1 + 552))
    sub_216BF54AC(*(_QWORD *)(a1 + 8));
  sub_216BF54B8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 560));
  sub_216BF54C0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 568));
  sub_216B8F100(v46);
  if (!*(_DWORD *)(a1 + 628))
  {
    sub_216B1E678((int)v40, "_dc");
    sub_216B1E678((int)v39, "p0");
    v17 = (unsigned int *)sub_216BF50EC(v45, v40[0], v40[1], v39[0], v39[1], 4);
    v38[0] = sub_216BDD5D0(v8, v17);
    sub_216B268AC((uint64_t)v46, v38);
  }
  sub_216BAC9C4(v38);
  v11 = sub_216BF4948(a1, *(_QWORD *)a1, (uint64_t)v46, (uint64_t)v38);
  if (v11)
  {
    v18 = sub_216BF514C(*(_QWORD *)a1);
    v20 = (unsigned __int8 *)sub_216BF43A4(v45, v18, v19);
    v37 = sub_216BAB580(v20);
    v21 = sub_216B1E600((uint64_t)&v37);
    v22 = sub_216BA7040(v21);
    v23 = sub_216B1E67C(v22);
    if (sub_216BD36C0(v23))
    {
      sub_216BF54C8(*(_QWORD *)(a1 + 8), 0);
      sub_216B1E678((int)v36, "ci_outColorF");
      v24 = sub_216BF514C(*(_QWORD *)a1);
      v26 = v25;
      v27 = v36[0];
      v28 = v36[1];
    }
    else
    {
      sub_216BD36E4(v23);
      sub_216BF54C8(*(_QWORD *)(a1 + 8), 1);
      sub_216B1E678((int)v35, "ci_outColorH");
      v24 = sub_216BF514C(*(_QWORD *)a1);
      v26 = v29;
      v27 = v35[0];
      v28 = v35[1];
    }
    v30 = (unsigned int *)sub_216BF50EC(v45, v27, v28, v24, v26, 4);
    v37 = sub_216BDD5D0(v8, v30);
    sub_216B268AC((uint64_t)v46, &v37);
    v31 = *(_QWORD *)(a1 + 8);
    v32 = v44;
    sub_216B2D798(v34, v46);
    v33 = sub_216BDD6AC(v8, v32, v32, v34[0], v34[1]);
    sub_216BD7CF8((uint64_t)v8, v31, (uint64_t)v33);
  }
  else
  {
    sub_216B20594(v46);
    sub_216BDD244((uint64_t)v8, *(_QWORD *)(a1 + 8));
    sub_216BD48D8((uint64_t)v8);
  }
  sub_216B9B960(v38);
  sub_216B1FF6C(v46);
  sub_216BD41EC(v41);
  if (v11)
  {
    sub_216BDD244((uint64_t)v8, *(_QWORD *)(a1 + 8));
    sub_216BD48D8((uint64_t)v8);
  }
  sub_216BE56F0((uint64_t)v47);
  return v11;
}

_WORD *sub_216BF54A0(_WORD *result)
{
  *((_BYTE *)result + 24) = 1;
  return sub_216BC04F0(result);
}

uint64_t sub_216BF54AC(uint64_t result)
{
  *(_BYTE *)(result + 153) = 1;
  return result;
}

uint64_t sub_216BF54B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 160) = a2;
  return result;
}

uint64_t sub_216BF54C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 168) = a2;
  return result;
}

uint64_t sub_216BF54C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t sub_216BF54D0(_QWORD *a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BF54F8(a1, v2);
}

uint64_t sub_216BF54F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[120];
  _BYTE v7[120];

  sub_216B248A0(a2, "Filter DAG:\n");
  sub_216BF558C(a1, v3, (uint64_t)v7);
  sub_216BF5590((uint64_t)v6);
  if (sub_216BF5594((uint64_t)v7, (uint64_t)v6))
  {
    do
    {
      v4 = sub_216BF55AC((uint64_t)v7);
      sub_216BF55B0(v4);
      sub_216BF55D8((uint64_t)v7);
    }
    while ((sub_216BF5594((uint64_t)v7, (uint64_t)v6) & 1) != 0);
  }
  sub_216BF55FC((uint64_t)v6);
  return sub_216BF55FC((uint64_t)v7);
}

uint64_t sub_216BF5594(uint64_t a1, uint64_t a2)
{
  return sub_216BF7060(a1, a2) ^ 1;
}

uint64_t sub_216BF55B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B40C20();
  return sub_216BF57A4(a1, v2);
}

uint64_t sub_216BF55D8(uint64_t a1)
{
  sub_216BF71FC(a1);
  return a1;
}

void **sub_216BF5600(uint64_t a1)
{
  void **v2;

  v2 = (void **)sub_216B40C20();
  return sub_216BF5628(a1, v2);
}

void **sub_216BF5628(uint64_t a1, void **a2)
{
  std::string *v3;

  v3 = sub_216BF5654(a1, 0);
  return sub_216B2E0B0(a2, (uint64_t)v3);
}

std::string *sub_216BF5654(uint64_t a1, uint64_t a2)
{
  int v2;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[48];

  v2 = a2;
  v4 = (std::string *)(a1 + 600);
  sub_216B25BB0(a1 + 600, a2);
  std::string::reserve(v4, 0x400uLL);
  sub_216B6042C(v26, v4);
  v6 = sub_216B25CA8(a1 + 456, v5);
  v8 = sub_216C0B130(v6, v7);
  if ((sub_216B8E76C(v8) & 1) != 0)
  {
    sub_216B248A0((uint64_t)v26, "// An error occurred, see stderr for the error message");
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 628);
    switch(v10)
    {
      case 2:
        v15 = sub_216B25CA8(a1 + 456, v9);
        v16 = sub_216B1E67C(v15);
        v24 = sub_216BF577C(v16);
        v25 = v17;
        v18 = (uint64_t *)sub_216B1E600((uint64_t)&v24);
        sub_216BC6BF4(*v18, (uint64_t)v26);
        break;
      case 1:
        v19 = sub_216B25CA8(a1 + 456, v9);
        v20 = sub_216B1E67C(v19);
        v24 = sub_216BF577C(v20);
        v25 = v21;
        v22 = (uint64_t *)sub_216B1E600((uint64_t)&v24);
        sub_216BC9B70(*v22, (uint64_t)v26, v2);
        break;
      case 0:
        v11 = sub_216B25CA8(a1 + 456, v9);
        v12 = sub_216B1E67C(v11);
        v24 = sub_216BF577C(v12);
        v25 = v13;
        v14 = (uint64_t *)sub_216B1E600((uint64_t)&v24);
        sub_216BC3BA8(*v14, (uint64_t)v26);
        break;
    }
  }
  sub_216B40CD4(v26);
  return v4;
}

uint64_t sub_216BF577C(uint64_t a1)
{
  uint64_t v2;

  sub_216B2D798(&v2, a1 + 144);
  return v2;
}

uint64_t sub_216BF57A4(uint64_t a1, uint64_t a2)
{
  void **v4;
  unsigned int v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  char *v11;
  void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unsigned int v24;
  uint64_t v25;
  void **v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  unsigned int v37;
  void **v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  unsigned int v52;
  void **v53;
  void **v54;
  uint64_t v55;
  unsigned int v56;
  void **v57;
  _QWORD v58[2];
  uint64_t v59[2];
  _BYTE v60[56];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  sub_216B2D768(v60);
  v4 = sub_216B248A0(a2, "Node: ");
  v5 = sub_216BF4E34(a1);
  v6 = sub_216B248D8(v4, v5);
  sub_216B248A0((uint64_t)v6, "\n");
  v7 = sub_216BF4100(a1);
  if (v7)
  {
    v9 = v7;
    if (sub_216BF4154(v7))
      sub_216B248A0(a2, "  <coordinate transform>\n");
    if (sub_216BF431C(v9))
      sub_216B248A0(a2, "  <sample with transform>\n");
    v10 = sub_216B248A0(a2, "  original source: ");
    v11 = (char *)sub_216B27CB0(v9);
    v12 = sub_216B248A0((uint64_t)v10, v11);
    sub_216B248A0((uint64_t)v12, "\n");
    if (sub_216B5EE7C(v9))
    {
      sub_216B248A0(a2, "  printed AST: ");
      v13 = (unsigned __int8 *)sub_216B5EE7C(v9);
      sub_216BA5894(v13, a2);
    }
    sub_216B248A0(a2, "  children:");
    sub_216BF5BF4(v9, (uint64_t)v59);
    sub_216BF5C48(v9, v58);
    while (sub_216BF4250(v59, v58))
    {
      v14 = sub_216BF5CA8((uint64_t)v59);
      v15 = sub_216B248A0(a2, " ");
      v16 = sub_216BF4E34(v14);
      sub_216B248D8(v15, v16);
      sub_216BF5CE8(v59, v17);
    }
    v18 = "\n";
    goto LABEL_11;
  }
  v20 = sub_216BF4580(a1, v8);
  if (v20)
  {
    v22 = v20;
    v23 = sub_216B248A0(a2, "  sampler: ");
    v24 = sub_216BF4404(v22);
LABEL_16:
    v26 = sub_216B248D8(v23, v24);
    sub_216B248A0((uint64_t)v26, "\n");
    sub_216B248A0(a2, "  printed: ");
    v27 = (unsigned __int8 *)sub_216B1E600(v22);
    sub_216BA5894(v27, a2);
    v19 = (void **)a2;
LABEL_17:
    v18 = "\n";
    goto LABEL_18;
  }
  v25 = sub_216BF45C4(a1, v21);
  if (v25)
  {
    v22 = v25;
    v23 = sub_216B248A0(a2, "  image: ");
    v24 = sub_216BF4404(v22);
    goto LABEL_16;
  }
  v33 = sub_216BF43CC(a1);
  if (v33)
  {
    v35 = v33;
    v36 = sub_216B248A0(a2, "  constant: ");
    v37 = sub_216BF4404(v35);
    v38 = sub_216B248D8(v36, v37);
    sub_216B248A0((uint64_t)v38, "\n");
    v39 = sub_216B248A0(a2, "  value: ");
    v40 = sub_216B2EF1C(v35);
    v19 = sub_216B248E0((uint64_t)v39, v40, v41);
    goto LABEL_17;
  }
  v42 = sub_216BF4484(a1, v34);
  if (v42)
  {
    v44 = v42;
    if (sub_216BF4154(v42))
      sub_216B248A0(a2, "  <transform>\n");
    v45 = sub_216B248A0(a2, "  uniform: ");
    v46 = sub_216BF4404(v44);
    v19 = sub_216B248D8(v45, v46);
    v18 = "\n";
    goto LABEL_18;
  }
  v47 = sub_216BF504C(a1, v43);
  if (!v47)
  {
    v59[0] = a1;
    sub_216BF5048((uint64_t)v59, v48);
    v18 = "  position use <_dc>\n";
LABEL_11:
    v19 = (void **)a2;
LABEL_18:
    sub_216B248A0((uint64_t)v19, v18);
    goto LABEL_19;
  }
  v49 = v47;
  v50 = sub_216B248A0(a2, "  new position: ");
  v51 = sub_216B2037C(v49);
  v52 = sub_216BF4E34(v51);
  v53 = sub_216B248D8(v50, v52);
  sub_216B248A0((uint64_t)v53, "\n");
  v54 = sub_216B248A0(a2, "  continuation: ");
  v55 = sub_216B5EE7C(v49);
  v56 = sub_216BF4E34(v55);
  v57 = sub_216B248D8(v54, v56);
  sub_216B248A0((uint64_t)v57, "\n");
  v59[0] = sub_216B5EE7C(v49);
  sub_216B268AC((uint64_t)v60, v59);
LABEL_19:
  sub_216B248A0(a2, "End Filter Node\n\n");
  v28 = (uint64_t *)sub_216B1E600((uint64_t)v60);
  v29 = sub_216B1E67C((uint64_t)v60);
  if (v28 != (uint64_t *)v29)
  {
    v30 = (uint64_t *)v29;
    do
    {
      v31 = *v28++;
      sub_216BF55B0(v31);
    }
    while (v28 != v30);
  }
  return sub_216B1FF6C(v60);
}

uint64_t sub_216BF5BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_216BF4160(a1, &v6);
  v3 = v6;
  v4 = sub_216B262E0((uint64_t)&v7);
  return sub_216BF5EFC(a2, v3, v4);
}

_QWORD *sub_216BF5C48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = sub_216BF4100(a1);
  if (!v4)
    return sub_216BF5D8C(a2, a1);
  v5 = v4;
  v6 = (unsigned __int8 *)sub_216B28BEC(v4);
  v7 = sub_216BF5F30(v6);
  return (_QWORD *)sub_216BF5F34(a2, v5, v7);
}

uint64_t sub_216BF5CA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  if (sub_216B601E8((unsigned __int8 *)(a1 + 8)))
    v3 = j_j_nullsub_1(v1);
  else
    v3 = sub_216B5F854(v1, v2);
  return *(_QWORD *)v3;
}

uint64_t *sub_216BF5CE8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a1 + 1;
  if (!sub_216B85624(a1 + 1, a2))
  {
    if (sub_216BF4100(*a1))
    {
      v6 = sub_216B5F854(v3, v4) + 8;
      sub_216B817D0(v3, &v6);
    }
    else
    {
      sub_216BD2540(&v6);
      *v3 = v6;
    }
  }
  return a1;
}

uint64_t sub_216BF5D5C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  sub_216B4AED0((_DWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_216BF5D90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_216BD28E8((uint64_t)(a1 + 1), a3);
  return a1;
}

_QWORD *sub_216BF5DBC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_216BD28E4((uint64_t)(a1 + 1), a3);
  return a1;
}

_QWORD *sub_216BF5DE8(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  sub_216BD2540(a1 + 1);
  return a1;
}

uint64_t sub_216BF5E10(uint64_t **a1, uint64_t a2)
{
  return sub_216BDBAD0(*a1, a2);
}

uint64_t sub_216BF5E18(uint64_t a1, uint64_t a2)
{
  return sub_216BF5E20(a2);
}

uint64_t sub_216BF5E20(uint64_t a1)
{
  if (a1)
    return sub_216B3DB48(a1);
  return a1;
}

uint64_t sub_216BF5E30(uint64_t a1)
{
  sub_216B4B098(a1 + 8);
  return a1;
}

_DWORD *sub_216BF5E58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_216BF4E74(a1, a2, a3);
  return sub_216BF5E80((uint64_t)a1, v4);
}

_DWORD *sub_216BF5E80(uint64_t a1, uint64_t a2)
{
  return sub_216BD8934(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), a2);
}

uint64_t sub_216BF5E94(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  v5 = sub_216BDA1F0(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), a4, a2, a3);
  return sub_216BF5E18(a1, v5);
}

uint64_t sub_216BF5ED4(uint64_t a1)
{
  sub_216B4B098(a1 + 96);
  return sub_216BC4230(a1);
}

_QWORD *sub_216BF5F00(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = sub_216BD4DA4(a3);
  return a1;
}

_QWORD *sub_216BF5F38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_216BF5F64(a1 + 1, a3);
  return a1;
}

uint64_t sub_216BF5F68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a2, a2);
  return sub_216B7CD38(a1, v3, 1);
}

uint64_t sub_216BF5F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BF5FC4(&v3);
}

uint64_t sub_216BF5FC4(_QWORD *a1)
{
  return sub_216BF5FCC(*a1);
}

BOOL sub_216BF5FD4(uint64_t a1)
{
  return sub_216BF5FF0(a1) == 0;
}

uint64_t sub_216BF5FF0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 7;
}

uint64_t sub_216BF5FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = nullsub_1(a1, a2);
  return sub_216BF6030(a3, v5, a2);
}

uint64_t *sub_216BF6034(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v9 = a2;
  v5 = sub_216B210B8(a1, a3) + 1;
  sub_216B2C030(v5);
  if (sub_216BF60C4(a1, 0, a2))
  {
    sub_216BF6138(v7, a2);
    sub_216BF6128((uint64_t)&v9, (uint64_t)v7, (uint64_t)v8);
    sub_216BF60D0(v5, (uint64_t)v8);
    sub_216BF613C(a1);
  }
  return a1;
}

uint64_t sub_216BF60C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_216BD53FC(*a1, a3);
}

uint64_t sub_216BF60D0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216BF62A8(a1, a2);
  }
  else
  {
    sub_216BF6238((uint64_t)a1, a2);
    result = v4 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216BF6128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216BF6558(a3, a1, a2);
}

BOOL sub_216BF613C(uint64_t *a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[2];
  _QWORD v11[3];
  uint64_t v12;

  v2 = a1 + 1;
  v3 = (_QWORD *)(sub_216B2C7A4((uint64_t)(a1 + 1)) + 8);
  v4 = (_QWORD *)sub_216B2C7A4((uint64_t)v2);
  sub_216BF658C(v11, *v4);
  for (result = sub_216BF4250(v3, v11); result; result = sub_216BF4250(v8, v11))
  {
    v12 = 0;
    v6 = sub_216B2C7A4((uint64_t)v2);
    sub_216BF6590((uint64_t *)(v6 + 8), (uint64_t)v11);
    v12 = sub_216BF4268((uint64_t)v11);
    v7 = (uint64_t *)sub_216B2C7A4((uint64_t)v2);
    if (sub_216BF60C4(a1, *v7, v12))
    {
      sub_216BF6138(v10, v12);
      sub_216BF6128((uint64_t)&v12, (uint64_t)v10, (uint64_t)v11);
      sub_216BF60D0(v2, (uint64_t)v11);
    }
    v8 = (_QWORD *)(sub_216B2C7A4((uint64_t)v2) + 8);
    v9 = (_QWORD *)sub_216B2C7A4((uint64_t)v2);
    sub_216BF658C(v11, *v9);
  }
  return result;
}

_QWORD *sub_216BF6238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B2C328(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216BF6354(v5, v7, a2);
  v10 += 24;
  return sub_216B2C330(&v9);
}

uint64_t sub_216BF62A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B2BFE4(a1);
  v6 = sub_216B2C364(a1, v5 + 1);
  v7 = sub_216B2BFE4(a1);
  sub_216B2C3DC(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216BF6354(v4, v9, a2);
  v13 += 24;
  sub_216BF63A4(a1, v12);
  v10 = a1[1];
  sub_216B4D778(v12);
  return v10;
}

uint64_t sub_216BF6358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BF6364(a2, a3);
}

_QWORD *sub_216BF6368(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  sub_216BF6394(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *sub_216BF6398(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  return result;
}

uint64_t sub_216BF63A4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216BF6490(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B2BFE4(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216BF6490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216B2C7A0((uint64_t)&v16);
    v9 = sub_216B2C7A4((uint64_t)v18);
    sub_216BF6354(a1, v8, v9);
    sub_216B2C7B0((uint64_t)v18);
    sub_216B2C7B0((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

_QWORD *sub_216BF655C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  sub_216BF6394(a1 + 1, a3);
  return a1;
}

uint64_t *sub_216BF6590@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  sub_216BF6394(a2, a1);
  return sub_216BF42A8(a1, v3);
}

_QWORD *sub_216BF65C0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = sub_216B27FFC(a1, a2);
  sub_216BF65F4(v4 + 1, a2 + 1);
  return a1;
}

uint64_t *sub_216BF65F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v12;

  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v12 = 0;
  v5 = sub_216B2C144((uint64_t)a2, (uint64_t)a2);
  nullsub_1(v5, v6);
  sub_216B76FE8(v4, &v12, &v11);
  v7 = *a2;
  v8 = a2[1];
  v9 = sub_216B2BFE4(a2);
  sub_216BF6674(a1, v7, v8, v9);
  return a1;
}

uint64_t sub_216BF6674(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  char v11;

  sub_216B20C64(&v10, (uint64_t)a1);
  sub_216B2F49C(v10, (uint64_t)&v11);
  if (a4)
  {
    sub_216B77094(a1, a4);
    sub_216BF66F8((uint64_t)a1, a2, a3, a4);
  }
  sub_216B2C7C0(&v11);
  return j_nullsub_1(&v11, v8);
}

_QWORD *sub_216BF66F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_216B2C328(&v10, a1, a4);
  v8 = sub_216B2C144(a1, v7);
  v11 = sub_216BF6760(v8, a2, a3, v11);
  return sub_216B2C330(&v10);
}

uint64_t sub_216BF6760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216B20688(a2, a3);
  v8 = v7;
  v9 = j_j_nullsub_1(a4);
  v10 = sub_216BF67C0(a1, v6, v8, v9);
  return sub_216B20710(a4, v10);
}

uint64_t sub_216BF67C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a4;
  v16 = a4;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  if (a2 != a3)
  {
    v8 = v16;
    do
    {
      v9 = nullsub_1(v8, v7);
      sub_216BF6354(a1, v9, a2);
      a2 += 24;
      v8 = v16 + 24;
      v16 += 24;
    }
    while (a2 != a3);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216BF6868@<X0>(uint64_t a1@<X8>)
{
  return sub_216BF6870(a1);
}

_QWORD *sub_216BF6874(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = sub_216B210B8(a1, a2);
  sub_216B2C030(v3 + 1);
  return a1;
}

uint64_t sub_216BF68A0(uint64_t a1, uint64_t a2)
{
  return sub_216BF68AC((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
}

uint64_t sub_216BF68AC(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_216B2BFE4(a1);
  if (v4 != sub_216B2BFE4(a2))
    return 0;
  v5 = sub_216B2C910(a1);
  v6 = sub_216B2C000((uint64_t)a1);
  v7 = sub_216B2C910(a2);
  return sub_216BF692C(v5, v6, v7);
}

BOOL sub_216BF6930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  v5 = (_QWORD *)sub_216B2F028(a1);
  v6 = (_QWORD *)sub_216B2F028(a2);
  v7 = (_QWORD *)sub_216B2F028(a3);
  return sub_216BF6990(v5, v6, v7, (uint64_t)&v9);
}

BOOL sub_216BF6990(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  v7 = a1;
  do
  {
    result = sub_216BF69F4(a4, v7, a3);
    if (!result)
      break;
    v7 += 3;
    a3 += 3;
  }
  while (v7 != a2);
  return result;
}

BOOL sub_216BF69F4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return sub_216BF6A00(a2, a3);
}

BOOL sub_216BF6A00(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && sub_216BF6A24(a1 + 1, a2 + 1);
}

BOOL sub_216BF6A24(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && sub_216BF6A48(a1[1], a2[1]);
}

BOOL sub_216BF6A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a1;
  v2 = sub_216B262E0((uint64_t)&v5);
  return v2 == sub_216B262E0((uint64_t)&v4);
}

uint64_t sub_216BF6A88(_QWORD *a1)
{
  return sub_216B7C418(a1, a1[1] - 24);
}

uint64_t sub_216BF6AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8[3];
  char v9;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = sub_216BBDF98();
  sub_216B6E0CC(&v7, (uint64_t)&v9);
  sub_216B3BAE0((uint64_t)v8, v4);
  v5 = sub_216B1E600((uint64_t)v8);
  sub_216BF6B24(v5, a2);
  *(_QWORD *)(a1 + 24) = sub_216BAA72C(v8);
  sub_216BBDFA8(v8);
  return a1;
}

_QWORD *sub_216BF6B28(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BF6B74(a1);
  *v6 = &off_24D6061E0;
  sub_216BBDFF8(v6 + 1, a2, a3);
  return a1;
}

_QWORD *sub_216BF6B74(_QWORD *result)
{
  *result = &unk_24D606228;
  return result;
}

void sub_216BF6B8C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_124();
  j__free(v0);
}

uint64_t sub_216BF6BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BBDF98();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BF6B24(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BBDFA8(v7);
  return v4;
}

uint64_t sub_216BF6C14(uint64_t a1, uint64_t a2)
{
  return sub_216BF6B24(a2, a1 + 8);
}

uint64_t sub_216BF6C28(uint64_t a1)
{
  return sub_216BBE1AC(a1, 1);
}

uint64_t sub_216BF6C30(uint64_t a1)
{
  return sub_216BF6C40(a1 + 8);
}

uint64_t sub_216BF6C48(uint64_t a1, uint64_t *a2)
{
  return sub_216BF6C50(a1, *a2);
}

uint64_t sub_216BF6C50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE v12[24];
  const void *v13[2];
  _QWORD v14[2];
  _QWORD v15[3];
  _QWORD v16[2];
  _BYTE v17[24];
  uint64_t v18[3];
  _BYTE v19[152];
  uint64_t v20;

  v20 = a2;
  sub_216B268AC(*(_QWORD *)a1, &v20);
  sub_216B295EC(v19);
  v3 = sub_216BDBC28(*(_QWORD *)(a1 + 8));
  v16[0] = sub_216B4A11C(v20);
  v16[1] = v4;
  sub_216B25FB0((uint64_t)v17, (uint64_t)v16);
  v14[0] = sub_216B4A11C(v20);
  v14[1] = v5;
  sub_216B1E678((int)v13, "_");
  if (sub_216B2A2EC((uint64_t)v14, v13[0], (size_t)v13[1]))
  {
    sub_216B25FA8((uint64_t)v15, &byte_216C19659);
  }
  else
  {
    sub_216B25FA8((uint64_t)v12, "_");
    v6 = sub_216BF4E34(**(_QWORD **)(a1 + 16));
    sub_216BD39B4((uint64_t)v11, v6);
    sub_216B29830(v15, v12, v11);
  }
  sub_216B29830(v18, v17, v15);
  sub_216B34DE0(v18, (uint64_t)v19);
  v9 = sub_216B4AAC4(v3, v7, v8);
  sub_216B2489C(v19);
  return v9;
}

uint64_t sub_216BF6D74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BF6D9C(&v3);
}

uint64_t sub_216BF6D9C(_QWORD *a1)
{
  return sub_216BF6DA4(*a1);
}

BOOL sub_216BF6DAC(uint64_t a1)
{
  return sub_216BF5FF0(a1) == 5;
}

uint64_t sub_216BF6DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BF6DF4(&v3);
}

uint64_t sub_216BF6DF4(_QWORD *a1)
{
  return sub_216BF6DFC(*a1);
}

BOOL sub_216BF6E04(uint64_t a1)
{
  return sub_216BF5FF0(a1) == 3;
}

uint64_t sub_216BF6E20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BF6E48(&v3);
}

uint64_t sub_216BF6E48(_QWORD *a1)
{
  return sub_216BF6E50(*a1);
}

BOOL sub_216BF6E58(uint64_t a1)
{
  return sub_216BF5FF0(a1) == 1;
}

uint64_t sub_216BF6E74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BF6E9C(&v3);
}

uint64_t sub_216BF6E9C(_QWORD *a1)
{
  return sub_216BF6EA4(*a1);
}

BOOL sub_216BF6EAC(uint64_t a1)
{
  return sub_216BF5FF0(a1) == 2;
}

uint64_t sub_216BF6EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BF6EF0(&v3);
}

uint64_t sub_216BF6EF0(_QWORD *a1)
{
  return sub_216BF6EF8(*a1);
}

BOOL sub_216BF6F00(uint64_t a1)
{
  return sub_216BF5FF0(a1) == 4;
}

uint64_t sub_216BF6F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BF6F44(&v3);
}

uint64_t sub_216BF6F44(_QWORD *a1)
{
  return sub_216BF6F4C(*a1);
}

BOOL sub_216BF6F54(uint64_t a1)
{
  return sub_216BF5FF0(a1) == 6;
}

uint64_t sub_216BF6F70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = nullsub_1(*a1, a2);
  return sub_216BF6F9C(a3, v4);
}

uint64_t sub_216BF6FA0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD v6[2];
  _BYTE v7[8];
  _BYTE v8[24];

  v4 = (uint64_t *)(sub_216BD5394(a1) + 96);
  sub_216B2C030(v4);
  sub_216BD53FC(a1, a2);
  sub_216BDB2EC(v7, a2, 0);
  sub_216BF6138(v6, a2);
  sub_216BF6128((uint64_t)v7, (uint64_t)v6, (uint64_t)v8);
  sub_216BF60D0(v4, (uint64_t)v8);
  return a1;
}

uint64_t sub_216BF7028@<X0>(uint64_t a1@<X8>)
{
  return sub_216BF7030(a1);
}

uint64_t sub_216BF7034(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BD5394(a1);
  sub_216B2C030((_QWORD *)(v2 + 96));
  return a1;
}

uint64_t sub_216BF7060(uint64_t a1, uint64_t a2)
{
  return sub_216BF706C((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
}

uint64_t sub_216BF706C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_216B2BFE4(a1);
  if (v4 != sub_216B2BFE4(a2))
    return 0;
  v5 = sub_216B2C910(a1);
  v6 = sub_216B2C000((uint64_t)a1);
  v7 = sub_216B2C910(a2);
  return sub_216BF70EC(v5, v6, v7);
}

BOOL sub_216BF70F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  v5 = (_QWORD *)sub_216B2F028(a1);
  v6 = (_QWORD *)sub_216B2F028(a2);
  v7 = (_QWORD *)sub_216B2F028(a3);
  return sub_216BF7150(v5, v6, v7, (uint64_t)&v9);
}

BOOL sub_216BF7150(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  v7 = a1;
  do
  {
    result = sub_216BF71B4(a4, v7, a3);
    if (!result)
      break;
    v7 += 3;
    a3 += 3;
  }
  while (v7 != a2);
  return result;
}

BOOL sub_216BF71B4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return sub_216BF71C0(a2, a3);
}

BOOL sub_216BF71C0(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = sub_216B37620(a1, a2);
  if (result)
    return sub_216BF6A24(a1 + 1, a2 + 1);
  return result;
}

uint64_t sub_216BF71FC(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  _BYTE v11[8];
  _QWORD v12[3];

  v2 = (uint64_t *)(a1 + 96);
  while (1)
  {
    v3 = (_QWORD *)sub_216B2C7A4((uint64_t)v2);
    v5 = sub_216B5F264(v3, v4);
    v6 = v3 + 1;
    if (!sub_216BD8168(v3))
    {
      sub_216BF6138(v12, v5);
      sub_216BF6398(v3 + 1, v12);
      sub_216BE44A8(v3, 1u);
    }
    sub_216BF658C(v12, v5);
    if (sub_216BF4250(v3 + 1, v12))
      break;
LABEL_8:
    sub_216BF6A88(v2);
    result = sub_216B29084(v2);
    if ((_DWORD)result)
      return result;
  }
  while (1)
  {
    sub_216BF6590(v6, (uint64_t)v12);
    v7 = sub_216BF4268((uint64_t)v12);
    if (v7)
    {
      v8 = v7;
      if (!sub_216BD53CC(a1, v7))
        break;
    }
    sub_216BF658C(v12, v5);
    if (!sub_216BF4250(v6, v12))
      goto LABEL_8;
  }
  sub_216BD53FC(a1, v8);
  sub_216BDB2EC(v11, v8, 0);
  sub_216BF6138(v10, v8);
  sub_216BF6128((uint64_t)v11, (uint64_t)v10, (uint64_t)v12);
  return sub_216BF60D0(v2, (uint64_t)v12);
}

uint64_t sub_216BF7340(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)sub_216B2C7A4(a1 + 96);
  return sub_216B5F264(v1, v2);
}

uint64_t fosl_filter_interface_version()
{
  return 2;
}

uint64_t fosl_filter_kernelpool_hasError(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)sub_216B4ADBC(a1);
  return sub_216B8B400(v1);
}

uint64_t fosl_filter_kernelpool_lookupKernel(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = sub_216B4ADBC(a1);
  sub_216B1E678((int)v5, a2);
  return sub_216BF73C4(v3, v5[0], v5[1]);
}

uint64_t sub_216BF73C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)sub_216BF805C(a1 + 152, a2, a3);
}

uint64_t sub_216BF73E0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)sub_216BD837C((_QWORD *)(a1 + 344), a2);
}

_DWORD *fosl_filter_kernelpool_getDiagnosticByIdx(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B4ADBC(a1);
  return sub_216BF9F04(v3, a2);
}

uint64_t sub_216BF7420(int a1)
{
  return (a1 - 1);
}

uint64_t sub_216BF7428(int a1)
{
  return dword_216C194F0[a1 - 3];
}

uint64_t fosl_filter_kernelpool_getKernelDimensionality(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned __int8 v2;

  v1 = *a1;
  if (((v1 >> 2) & 7) == 1)
    v2 = 2;
  else
    v2 = 4;
  if (((v1 >> 2) & 7) != 0)
    return v2;
  else
    return -1;
}

uint64_t sub_216BF7468(_QWORD *a1, unsigned int a2)
{
  return *a1 + 24 * a2;
}

uint64_t sub_216BF7478(int a1)
{
  return dword_216C19598[a1 - 1];
}

uint64_t fosl_filter_kernelpool_getAttributeKeyword(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = (uint64_t *)sub_216BD837C((_QWORD *)(a1 + 120), a2);
  v5[0] = sub_216B38064(*v2);
  v5[1] = v3;
  return sub_216B1E600((uint64_t)v5);
}

uint64_t fosl_filter_kernelpool_getAttributeParameters(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_216BD837C((_QWORD *)(a1 + 120), a2);
  return sub_216B27CB0(*v2);
}

BOOL fosl_filter_kernelpool_hasAttributeParameters(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_216BD837C((_QWORD *)(a1 + 120), a2);
  return sub_216BA835C(*v2);
}

uint64_t fosl_filter_createGraph()
{
  uint64_t v0;

  v0 = sub_216B1D1D4(24);
  return sub_216BF7510(v0);
}

void fosl_filter_destroyGraph(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)sub_216BF7530();
    j__free(v1);
  }
}

_QWORD *fosl_filter_assignRoot(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216BF4054(a1, a2);
  return sub_216B210B8(v3, a2);
}

uint64_t fosl_filter_addLibraryFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF757C(v3, a2);
}

uint64_t sub_216BF757C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216B268AC(a1 + 464, &v3);
}

uint64_t fosl_filter_addChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_216B3DB48(a2);
  v7 = sub_216BF4054(a1, v6);
  return sub_216BF75E8(v7, v5, a3);
}

uint64_t sub_216BF75E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BF838C(a2, a3, (uint64_t *)(a1 + 40));
}

uint64_t fosl_filter_createKernel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF7628(v3, a2, 0, 0);
}

uint64_t sub_216BF7628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = (uint64_t *)(a1 + 40);
  v8 = a1 + 176;
  v9 = sub_216B26878(a1 + 176);
  v10 = sub_216BF83C8(v7, v9, a2, a3, a4);
  v12 = v10;
  sub_216B268AC(v8, &v12);
  return v10;
}

uint64_t fosl_filter_createSampler(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _BOOL8 v6;

  v5 = sub_216BF4054(a1, a2);
  v6 = sub_216BF7754(a3);
  return sub_216BF76E8(v5, a2, v6);
}

uint64_t sub_216BF76E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = (uint64_t *)(a1 + 40);
  v6 = a1 + 176;
  v7 = sub_216B26878(a1 + 176);
  v8 = sub_216BF84E0(v5, v7, a2, a3);
  v10 = v8;
  sub_216B268AC(v6, &v10);
  return v8;
}

BOOL sub_216BF7754(int a1)
{
  return a1 != 0;
}

uint64_t fosl_filter_createImage(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _BOOL8 v6;

  v5 = sub_216BF4054(a1, a2);
  v6 = sub_216BF7754(a3);
  return sub_216BF77A4(v5, a2, v6);
}

uint64_t sub_216BF77A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = (uint64_t *)(a1 + 40);
  v6 = a1 + 176;
  v7 = sub_216B26878(a1 + 176);
  v8 = sub_216BF8580(v5, v7, a2, a3);
  v10 = v8;
  sub_216B268AC(v6, &v10);
  return v8;
}

uint64_t fosl_filter_createConstant(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_216BF4054(a1, a2);
  v8 = sub_216BF78D8(a3);
  return sub_216BF785C(v7, a2, v8, a4);
}

uint64_t sub_216BF785C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = (uint64_t *)(a1 + 40);
  v8 = a1 + 176;
  v9 = sub_216B26878(a1 + 176);
  v10 = sub_216BF8620(v7, v9, a2, a3, a4);
  v12 = v10;
  sub_216B268AC(v8, &v12);
  return v10;
}

uint64_t sub_216BF78D8(int a1)
{
  if ((a1 - 1) > 0x19)
    return 3;
  else
    return dword_216C195A4[a1 - 1];
}

uint64_t fosl_filter_createUniform(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216BF4054(a1, a2);
  v6 = sub_216BF78D8(a3);
  return sub_216BF7940(v5, a2, v6);
}

uint64_t sub_216BF7940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = (uint64_t *)(a1 + 40);
  v6 = a1 + 176;
  v7 = sub_216B26878(a1 + 176);
  v8 = sub_216BF86DC(v5, v7, a2, a3, 0);
  v10 = v8;
  sub_216B268AC(v6, &v10);
  return v8;
}

uint64_t fosl_filter_createTransformMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF79D4(v3, a2);
}

uint64_t sub_216BF79D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = (uint64_t *)(a1 + 40);
  v4 = a1 + 176;
  v5 = sub_216B26878(a1 + 176);
  v6 = sub_216BF86DC(v3, v5, a2, 24, 1);
  v8 = v6;
  sub_216B268AC(v4, &v8);
  return v6;
}

uint64_t fosl_filter_createPositionUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BF4054(a1, a2);
  return sub_216BF7A54(v2);
}

uint64_t sub_216BF7A54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = (uint64_t *)(a1 + 40);
  v2 = a1 + 176;
  v3 = sub_216B26878(a1 + 176);
  v4 = sub_216BF87A4(v1, v3);
  v6 = v4;
  sub_216B268AC(v2, &v6);
  return v4;
}

uint64_t fosl_filter_createUsePosition(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BF4054(a1, a2);
  return sub_216BF7ABC(v2);
}

uint64_t sub_216BF7ABC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = (uint64_t *)(a1 + 40);
  v2 = a1 + 176;
  v3 = sub_216B26878(a1 + 176);
  v4 = sub_216BF87E0(v1, v3);
  v6 = v4;
  sub_216B268AC(v2, &v6);
  return v4;
}

uint64_t fosl_filter_createSampleTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF7628(v3, a2, 0, 1);
}

uint64_t fosl_filter_createCoordinateTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF7628(v3, a2, 1, 0);
}

uint64_t fosl_filter_setPositionUpdatePosition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_216B3DB48(a2);
  v4 = sub_216B3DB48(a1);
  return sub_216B3BE48(v4, v3);
}

uint64_t fosl_filter_setPositionUpdateContinuation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DB48(a1);
  return sub_216B7D14C(v3, a2);
}

uint64_t fosl_filter_setSamplerNeedsSRGBToLinear(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BF4054(a1, a2);
  return sub_216BF7BD4(v2);
}

uint64_t sub_216BF7BD4(uint64_t result)
{
  *(_BYTE *)(result + 552) = 1;
  return result;
}

uint64_t fosl_filter_setSamplerSwizzleMask(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF7C04(v3, a2);
}

uint64_t sub_216BF7C04(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 560) = a2;
  return result;
}

uint64_t fosl_filter_setSamplerSwizzleMacro(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF7C30(v3, a2);
}

uint64_t sub_216BF7C30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 568) = a2;
  return result;
}

void fosl_filter_setMainEntryPointName(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  sub_216BF7C5C(v3, a2);
}

void sub_216BF7C5C(uint64_t a1, uint64_t a2)
{
  std::string v3;

  sub_216B26DE8(&v3, a2);
  sub_216B26E7C(a1 + 576, (uint64_t)&v3);
  std::string::~string(&v3);
}

uint64_t fosl_filter_parseNodesInGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BF4054(a1, a2);
  return sub_216BF4654(v2);
}

BOOL fosl_filter_synthesizeMainInGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BF4054(a1, a2);
  return sub_216BF5160(v2, 0, 0);
}

BOOL fosl_filter_synthesizeMainInGraphOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216BF4054(a1, a2);
  return sub_216BF5160(v3, a2, 0);
}

BOOL fosl_filter_synthesizeMainInGraphOfTypeWithOptions(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  v5 = sub_216BF4054(a1, a2);
  return sub_216BF5160(v5, a2, a3);
}

uint64_t fosl_filter_dumpGraph(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_216BF4054(a1, a2);
  return sub_216BF54D0(v2);
}

void **fosl_filter_printGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BF4054(a1, a2);
  return sub_216BF5600(v2);
}

uint64_t fosl_filter_getStringForGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string *v3;

  v2 = sub_216BF4054(a1, a2);
  v3 = sub_216BF5654(v2, 0);
  return sub_216B26084(v3);
}

uint64_t fosl_filter_getStringForGraphWithOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;

  v3 = sub_216BF4054(a1, a2);
  v4 = sub_216BF5654(v3, a2);
  return sub_216B26084(v4);
}

uint64_t sub_216BF7D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[8];

  v2 = sub_216B1D1D4(936);
  sub_216BA3AC4(v2);
  sub_216B27D7C(a1, v2);
  v3 = sub_216B40C20();
  sub_216C0C9CC(v3, 1, a1 + 8);
  v5 = sub_216B25CA8(a1, v4);
  v7 = sub_216B25CA8(a1 + 8, v6);
  sub_216C0BD38(v5, v7, 0, (uint64_t)v11);
  sub_216BF7E44(a1 + 16, v11);
  sub_216B27C04(v11);
  v9 = sub_216B25CA8(a1 + 16, v8);
  sub_216BF930C(a1 + 24, v9);
  return a1;
}

uint64_t sub_216BF7E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v6 = sub_216B28054(a2, a2);
  v4 = j_j_nullsub_1(a2);
  return sub_216BF7E94(a1, &v6, v4);
}

uint64_t sub_216BF7E98(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = sub_216B27FFC(a1, a2);
  return j_nullsub_1(v4, a3);
}

uint64_t sub_216BF7EBC(uint64_t a1)
{
  sub_216BF93AC(a1 + 24);
  sub_216B27C04(a1 + 16);
  sub_216BF7EF4(a1 + 8);
  return sub_216BF7EF8(a1);
}

uint64_t sub_216BF7EFC(uint64_t a1)
{
  sub_216BF7F24(a1, 0);
  return a1;
}

void sub_216BF7F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216BF7F80(v7, v4);
  }
}

void sub_216BF7F80(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B4B0A8(a2);
    j__free(v2);
  }
}

uint64_t sub_216BF7FA0(uint64_t a1)
{
  sub_216BF7FC8(a1, 0);
  return a1;
}

void sub_216BF7FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216BF8024(v7, v4);
  }
}

void sub_216BF8024(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216BA3B68(a2);
    j__free(v2);
  }
}

uint64_t sub_216BF8044(uint64_t a1)
{
  return sub_216B2E220((_QWORD *)(a1 + 344));
}

uint64_t sub_216BF805C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_216BF8070(a1, a2, a3);
  return sub_216B3DBD0(v3);
}

uint64_t sub_216BF8070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216BF8078(a1, a2, a3, 0);
}

uint64_t sub_216BF8078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7[3];
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216B3DD18((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216BF80CC(a1, v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216BF80CC(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *a2, a2[1]);
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B4AD2C(*a2, a2[1], *(uint64_t **)(a1 + 24), a2[2]);
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216BF81B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_216B1D1D4(936);
  sub_216BA3AC4(v2);
  sub_216B27D7C(a1, v2);
  v3 = sub_216B40C20();
  sub_216C0C9CC(v3, 0, a1 + 8);
  v4 = sub_216B1D1D4(640);
  v6 = sub_216B25CA8(a1, v5);
  v8 = sub_216B25CA8(a1 + 8, v7);
  sub_216BF37A4(v4, v6, v8);
  sub_216B27D7C(a1 + 16, v4);
  return a1;
}

uint64_t sub_216BF8258(uint64_t a1)
{
  sub_216BF8288(a1 + 16);
  sub_216BF7EF4(a1 + 8);
  return sub_216BF7EF8(a1);
}

uint64_t sub_216BF828C(uint64_t a1)
{
  sub_216BF82B4(a1, 0);
  return a1;
}

void sub_216BF82B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216BF8310(v7, v4);
  }
}

void sub_216BF8310(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216BF8330(a2);
    j__free(v2);
  }
}

std::string *sub_216BF8334(std::string *a1)
{
  std::string::~string(a1 + 25);
  std::string::~string(a1 + 24);
  sub_216B1FF6C(&a1[19].__r_.__value_.__r.__words[1]);
  sub_216B27C04(&a1[19]);
  sub_216B1FF6C(&a1[7].__r_.__value_.__r.__words[1]);
  sub_216B3A034(&a1[1].__r_.__value_.__r.__words[2]);
  sub_216B5F5B0(&a1->__r_.__value_.__r.__words[2]);
  return a1;
}

uint64_t sub_216BF838C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_216BF4154(a1);
  return sub_216BDA6EC((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t sub_216BF83C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = sub_216B89B20(0x28uLL, a1);
  return sub_216BF8414(v9, a2, a3, a4, a5);
}

uint64_t sub_216BF8418(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v9;
  int v10;
  int v11;

  v9 = sub_216BF8490((_QWORD *)a1, 0, a2);
  sub_216BD2538(v9 + 2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  if (a4)
    v10 = 0x1000000;
  else
    v10 = 0;
  if (a5)
    v11 = 0x2000000;
  else
    v11 = 0;
  *(_DWORD *)(a1 + 8) = v11 | v10 | *(_DWORD *)(a1 + 8) & 0xFCFFFFFF;
  return a1;
}

_QWORD *sub_216BF8490(_QWORD *a1, char a2, uint64_t a3)
{
  int v3;

  v3 = a3;
  *a1 = 0;
  nullsub_1(a1, a3);
  a1[1] = 0;
  *((_DWORD *)a1 + 2) = a2 & 7 | (8 * (v3 & 0x3FFFF));
  return a1;
}

uint64_t sub_216BF84E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_216B89B20(0x10uLL, a1);
  return sub_216BF8524(v7, a2, a3, a4);
}

uint64_t sub_216BF8528(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;

  v7 = sub_216BF8490((_QWORD *)a1, 1, a2);
  nullsub_1(v7, a3);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFCFFFFFF | ((a4 & 3) << 24);
  *(_WORD *)(a1 + 12) = a3;
  return a1;
}

uint64_t sub_216BF8580(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_216B89B20(0x10uLL, a1);
  return sub_216BF85C4(v7, a2, a3, a4);
}

uint64_t sub_216BF85C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;

  v7 = sub_216BF8490((_QWORD *)a1, 2, a2);
  nullsub_1(v7, a3);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFCFFFFFF | ((a4 & 3) << 24);
  *(_WORD *)(a1 + 12) = a3;
  return a1;
}

uint64_t sub_216BF8620(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = sub_216B89B20(0x28uLL, a1);
  return sub_216BF866C(v9, a2, a3, a4, a5);
}

uint64_t sub_216BF8670(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v9;

  v9 = sub_216BF8490((_QWORD *)a1, 3, a2);
  sub_216B26DE8(v9 + 2, a5);
  nullsub_1(a1, a3);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0x80FFFFFF | ((a4 & 0x7F) << 24);
  *(_WORD *)(a1 + 12) = a3;
  return a1;
}

uint64_t sub_216BF86DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = sub_216B89B20(0x10uLL, a1);
  return sub_216BF8728(v9, a2, a3, a4, a5);
}

_QWORD *sub_216BF872C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = sub_216BF8490(a1, 4, a2);
  nullsub_1(v9, a3);
  v10 = 0x1000000;
  if (!a5)
    v10 = 0;
  a1[1] = a1[1] & 0xFFFF000000FFFFFFLL | (a4 << 25) | ((unint64_t)(unsigned __int16)a3 << 32) | v10;
  return a1;
}

uint64_t sub_216BF87A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B89B20(0x20uLL, a1);
  return sub_216BF87D0(v3, a2);
}

_QWORD *sub_216BF87D4(_QWORD *a1, uint64_t a2)
{
  return sub_216BF8490(a1, 5, a2);
}

uint64_t sub_216BF87E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B89B20(0x10uLL, a1);
  return sub_216BF880C(v3, a2);
}

_QWORD *sub_216BF8810(_QWORD *a1, uint64_t a2)
{
  return sub_216BF8490(a1, 6, a2);
}

_BYTE *sub_216BF881C(_BYTE *a1, uint64_t a2)
{
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  _QWORD v8[40];

  v8[39] = *MEMORY[0x24BDAC8D0];
  *a1 = 1;
  sub_216BF88F4((uint64_t)(a1 + 8));
  sub_216BAC868(v7, sub_216BF88F8);
  sub_216BAC874(v6, sub_216BF8900);
  sub_216BF8908((uint64_t)v5, (uint64_t)a1);
  sub_216BAC87C((uint64_t)v8, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5);
  sub_216BA5334(v5);
  sub_216BA5334(v6);
  sub_216BA5334(v7);
  sub_216BAC890(v8, a2);
  sub_216BA5298(v8);
  return a1;
}

uint64_t sub_216BF88F8()
{
  return 1;
}

uint64_t sub_216BF8900()
{
  return 1;
}

uint64_t sub_216BF8910(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  char v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;

  v3 = a2 + 8;
  v4 = *(_QWORD *)sub_216BA9B1C(a2 + 8, 0);
  v5 = *(_QWORD *)sub_216BA9B1C(v3, 1u);
  v6 = sub_216BAB1D8(v4);
  v7 = sub_216B1E67C(v6);
  result = sub_216BAE088(v5);
  if (!result)
  {
    *a1 = 0;
    return result;
  }
  v9 = result;
  v17 = v7;
  result = sub_216BA9AB4(result);
  if ((_DWORD)result == 2)
  {
    v11 = v9 + 8;
    v12 = (uint64_t *)sub_216BA9B1C(v11, 0);
    v13 = sub_216BF8A14(&v17, *v12);
    if (*a1)
      v14 = v13;
    else
      v14 = 0;
    *a1 = v14;
    v15 = (uint64_t *)sub_216BA9B1C(v11, 1u);
    result = sub_216BF8A4C(*v15);
    goto LABEL_10;
  }
  if ((_DWORD)result == 4)
  {
    v10 = (uint64_t *)sub_216BA9B1C(v9 + 8, 0);
    result = sub_216BF8A14(&v17, *v10);
LABEL_10:
    if (*a1)
      v16 = result;
    else
      v16 = 0;
    goto LABEL_14;
  }
  v16 = 0;
LABEL_14:
  *a1 = v16;
  return result;
}

uint64_t sub_216BF8A14(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216BAB1D8(a2);
  if (result)
    return sub_216B1E67C(result) == *a1;
  return result;
}

uint64_t sub_216BF8A4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15[2];
  uint64_t v16;
  const void *v17[2];

  v2 = sub_216BAB288(a1);
  if (v2)
  {
    v3 = sub_216B2037C(v2);
    v4 = sub_216BA6A7C(v3);
    v6 = v5;
    sub_216B1E678((int)v17, "destCoord");
    return sub_216B274F0(v4, v6, v17[0], (size_t)v17[1]);
  }
  else
  {
    result = sub_216BAB1D8(a1);
    if (result)
    {
      v8 = result;
      v16 = sub_216B1E67C(result);
      if ((sub_216BB8698(&v16) & 1) != 0)
      {
        v9 = sub_216B1E67C(v8);
        v10 = sub_216B3DB48(v9);
        v11 = sub_216BA6A7C(v10);
        v13 = v12;
        sub_216B1E678((int)v15, "_dc");
        if (sub_216B274F0(v11, v13, v15[0], (size_t)v15[1]))
        {
          return 1;
        }
        else
        {
          result = sub_216B5EE7C(v10);
          if (result)
          {
            v14 = sub_216B5EE7C(v10);
            return sub_216BF8A4C(v14);
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

_BYTE *sub_216BF8B40(_BYTE *a1, uint64_t a2)
{
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  _QWORD v8[40];

  v8[39] = *MEMORY[0x24BDAC8D0];
  *a1 = 1;
  sub_216BAC868(v7, sub_216BF88F8);
  sub_216BAC874(v6, sub_216BF8900);
  sub_216BF8C14((uint64_t)v5, (uint64_t)a1);
  sub_216BAC87C((uint64_t)v8, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5);
  sub_216BA5334(v5);
  sub_216BA5334(v6);
  sub_216BA5334(v7);
  sub_216BAC890(v8, a2);
  sub_216BA5298(v8);
  return a1;
}

uint64_t sub_216BF8C1C(uint64_t a1)
{
  return sub_216B9CD70(a1, a1 + 32, 4);
}

uint64_t sub_216BF8C28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BF8C4C(a1, &v3);
}

uint64_t sub_216BF8C54(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BF8C7C();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BF8C80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &off_24D606270;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BF8CD0()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_125();
  j__free(v0);
}

uint64_t sub_216BF8CE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BF8C7C(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BF8D58(uint64_t a1, uint64_t a2)
{
  return sub_216BF8C7C(a2, a1 + 8);
}

uint64_t sub_216BF8D6C(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BF8D74(uint64_t a1)
{
  return sub_216BF8D7C(a1 + 8);
}

BOOL sub_216BF8D84(_BYTE **a1, uint64_t *a2)
{
  return sub_216BF8D8C(a1, *a2);
}

BOOL sub_216BF8D8C(_BYTE **a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  v4 = sub_216BAE088(a2);
  if (v4 && (v5 = v4, sub_216BA9AB4(v4) == 1))
  {
    sub_216BF8910(v3, v5);
    return 0;
  }
  else
  {
    v7 = sub_216BAB1D8(a2);
    if (v7)
    {
      v8 = sub_216B1E67C(v7);
      v9 = sub_216BD8C0C(v8);
      if (v9)
      {
        v12 = sub_216B2037C(v9);
        v10 = sub_216B1E600((uint64_t)&v12);
        v11 = sub_216BA7EB0(v10);
        if (v11)
        {
          if (!sub_216BA7EC0(v11))
            *v3 = 0;
        }
      }
    }
    return *v3 != 0;
  }
}

uint64_t sub_216BF8E34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BF8E58(a1, &v3);
}

uint64_t sub_216BF8E60(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BF8E88();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BF8E8C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &off_24D6062B8;
  sub_216BAA5B8(v6 + 1, a2, a3);
  return a1;
}

void sub_216BF8EDC()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_126();
  j__free(v0);
}

uint64_t sub_216BF8EF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BF8E88(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BF8F64(uint64_t a1, uint64_t a2)
{
  return sub_216BF8E88(a2, a1 + 8);
}

uint64_t sub_216BF8F78(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BF8F80(uint64_t a1)
{
  return sub_216BF8F88(a1 + 8);
}

BOOL sub_216BF8F90(_BYTE **a1, uint64_t *a2)
{
  return sub_216BF8F98(a1, *a2);
}

BOOL sub_216BF8F98(_BYTE **a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  const void *v16[2];
  const void *v17[2];

  v3 = *a1;
  v4 = sub_216BAB1D8(a2);
  if (!v4
    || (v5 = sub_216B1E67C(v4),
        v6 = sub_216BA6A7C(v5),
        v8 = v7,
        sub_216B1E678((int)v17, "_dc"),
        !sub_216B274F0(v6, v8, v17[0], (size_t)v17[1])))
  {
    v9 = sub_216BAB288(a2);
    if (!v9
      || (v10 = sub_216B2037C(v9),
          v11 = sub_216BA6A7C(v10),
          v13 = v12,
          sub_216B1E678((int)v16, "destCoord"),
          !sub_216B274F0(v11, v13, v16[0], (size_t)v16[1])))
    {
      v14 = sub_216BAE088(a2);
      if (!v14 || sub_216BA9AB4(v14) != 4)
        return *v3 != 0;
    }
  }
  result = 0;
  *v3 = 0;
  return result;
}

uint64_t fosl_filter_kernelpool_isPositionInvariant_0(uint64_t a1)
{
  unsigned __int8 *v1;
  char v3;

  v1 = sub_216BF8C18(&v3, *(_QWORD *)(a1 + 8));
  return sub_216B8B400(v1);
}

uint64_t fosl_filter_kernelpool_preservesAlpha_0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3[192];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  sub_216BF9110(v3, *(_QWORD *)(a1 + 8));
  v1 = sub_216B8B400(v3);
  sub_216BF9114((uint64_t)v3);
  return v1;
}

uint64_t sub_216BF9118(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v9;
  _BYTE v10[16];
  _BYTE v11[16];
  uint64_t v12;

  v12 = a2;
  v5 = sub_216B1E600((uint64_t)&v12);
  v6 = sub_216BA7ED0(v5);
  if (v6)
  {
    v7 = sub_216BA7EA4(v6);
    if (v7 == 8)
      return 1;
    if (v7 == 13 || v7 == 10)
      return 2;
    sub_216BF91BC(a1, a3, 2332, (uint64_t)v10);
    v9 = v10;
  }
  else
  {
    sub_216BF91BC(a1, a3, 2332, (uint64_t)v11);
    v9 = v11;
  }
  sub_216B4B3B4(v9);
  return 0;
}

uint64_t sub_216BF91BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  uint64_t v7;

  v5 = a2;
  v7 = sub_216BF9C80(a1, a2);
  return sub_216B4CD2C(v7, v5, a3, a4);
}

uint64_t sub_216BF91F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8[2];
  uint64_t v9[2];
  uint64_t v10[2];
  int v11;

  *(_BYTE *)a1 = 0;
  v4 = a1 + 8;
  sub_216BF9304(a1 + 8);
  sub_216B39B60((_QWORD *)(a1 + 16));
  sub_216BF9308(a1 + 152, a1 + 16);
  sub_216BAC9C4(a1 + 184);
  sub_216BF88F4(a1 + 280);
  sub_216BDB348(a1 + 344, v4, 16);
  *(_QWORD *)(a1 + 368) = a2;
  sub_216B4AED0((_DWORD *)(a1 + 376));
  sub_216B4AED0(&v11);
  v6 = (uint64_t *)sub_216BF4054(*(_QWORD *)(a1 + 368), v5);
  sub_216BD459C(v6);
  sub_216BF405C((uint64_t)v10, (uint64_t)v6);
  sub_216BF48AC((uint64_t)v10, 3, 3);
  sub_216B1E678((int)v9, "_dc");
  sub_216BF4920(v10, v9[0], v9[1], 8, 3, 0);
  sub_216B1E678((int)v8, "p0");
  sub_216BF4920(v10, v8[0], v8[1], 8, 3, 8);
  return a1;
}

uint64_t sub_216BF9310(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_216BF9370(a1);
  v3 = sub_216BF4054(*(_QWORD *)(a1 + 368), v2);
  sub_216BD48D8(v3);
  j_nullsub_1(a1 + 344, v4);
  sub_216B9B960(a1 + 280);
  sub_216B9B960(a1 + 184);
  sub_216BF93A8(a1 + 152);
  sub_216B3A034(a1 + 16);
  sub_216BDB2E0(a1 + 8);
  return a1;
}

_QWORD *sub_216BF9370(uint64_t a1)
{
  sub_216BFC8E0(a1 + 152);
  sub_216B5F938(a1 + 184);
  sub_216B5F938(a1 + 280);
  return sub_216B36E84((_QWORD *)(a1 + 344));
}

uint64_t sub_216BF93B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t v12[2];

  v6 = sub_216BF4060(*(_QWORD *)(a1 + 368), a2);
  v7 = sub_216B40EE8(v6);
  sub_216B1E678((int)v12, "kernel-pool");
  v8 = sub_216B271E8(a2, a3, v12[0], v12[1], 0);
  sub_216B4AED0(&v11);
  v9 = sub_216B9BFA8(v7, v8, 0, 0, 0, v11);
  return sub_216BF944C(a1, v9);
}

uint64_t sub_216BF944C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t i;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t j;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t k;
  unsigned __int8 *v60;
  _DWORD **v61;
  uint64_t v62;
  __n128 v63;
  _DWORD **v64;
  char v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  _BYTE v89[16];
  _BYTE v90[16];
  uint64_t v91;
  _BYTE v92[64];
  _QWORD v93[8];
  uint64_t v94[6];
  _QWORD *v95[35];
  _QWORD v96[4];
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  __n128 v100;
  __int16 v101;
  _BYTE v102[88];
  _BYTE v103[32];
  uint64_t v104;

  v2 = a2;
  v104 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 376) = a2;
  v4 = sub_216BF48A4(*(_QWORD *)(a1 + 368), a2);
  v6 = sub_216BF4060(*(_QWORD *)(a1 + 368), v5);
  sub_216B4AED0(&v99);
  sub_216B9277C(v6, v2, 0, v99);
  v8 = sub_216BF9C80(a1, v7);
  v9 = sub_216BF4328(v8);
  v11 = sub_216BF4330(*(_QWORD *)(a1 + 368), v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v11, v6);
  sub_216BF4338(v4);
  if (!sub_216BEB890(v4))
  {
    v16 = a1 + 184;
    v88 = (uint64_t *)(a1 + 16);
    while (1)
    {
      v17 = sub_216B96ED8(v4);
      if (!sub_216B9837C(v17))
      {
        v18 = sub_216B96ED8(v4);
        if (!sub_216B71174(v18, 399))
          break;
      }
      if (!sub_216BE455C(v4))
        goto LABEL_9;
LABEL_10:
      if (sub_216BEB890(v4))
        goto LABEL_2;
    }
    v19 = sub_216B96ED8(v4);
    if (sub_216B71174(v19, 79))
    {
      v20 = sub_216BE455C(v4);
      if (v20)
      {
        v21 = v20;
        v22 = (_QWORD **)sub_216BA5E50(v20);
        v23 = sub_216BA5E54(v21);
        if (v22 == (_QWORD **)v23)
          goto LABEL_10;
        v24 = (_QWORD **)v23;
        while (1)
        {
          v95[0] = 0;
          v95[0] = *v22;
          if ((sub_216BAA0D0(v95) & 1) == 0)
            break;
          v25 = sub_216B3DB48((uint64_t)v95[0]);
          sub_216BD53FC(a1 + 280, v25);
          if (++v22 == v24)
            goto LABEL_10;
        }
      }
    }
    else
    {
      v26 = sub_216B96ED8(v4);
      v27 = sub_216B71174(v26, 459);
      v98 = 0;
      sub_216BF9CA0((uint64_t)v103);
      v28 = sub_216BE493C(v4, (uint64_t)v103);
      sub_216BA5334(v103);
      v98 = v28;
      if (!v28 || (sub_216BA9DCC(&v98) & 1) == 0)
      {
        sub_216B2C7C0((_BYTE *)a1);
        goto LABEL_2;
      }
      v29 = (unsigned __int8 *)sub_216B3DB48(v98);
      if (!v27)
      {
        sub_216BD53FC(v16, (uint64_t)v29);
        goto LABEL_10;
      }
      v97 = 0;
      v30 = sub_216B89B20(0x90uLL, v88);
      v97 = sub_216BF9CA4(v30, a1 + 8);
      *(_QWORD *)(v97 + 8) = v29;
      v31 = sub_216B939E0((uint64_t)v29);
      v32 = sub_216B34190((uint64_t)v29);
      v33 = sub_216BF9118(a1, v31, v32);
      *(_BYTE *)v97 = *(_BYTE *)v97 & 0xE3 | (4 * v33);
      v34 = sub_216BA6A7C((uint64_t)v29);
      sub_216BEA9DC(v95, v88, v34, v35);
      v36 = sub_216BA7424(v95);
      v37 = v97;
      *(_QWORD *)(v97 + 16) = v36;
      *(_QWORD *)(v37 + 24) = v38;
      if ((*(_BYTE *)v37 & 0x1C) != 0)
      {
        sub_216BAC9C0(v102);
        sub_216BAC9C4(v95);
        v96[0] = a1;
        v96[1] = v95;
        v96[2] = &v100;
        v96[3] = v102;
        sub_216BF9CA8(&v100, v96);
        sub_216BABC28((uint64_t)&v100);
        sub_216BA5334(&v100);
        sub_216B9B960(v95);
        v39 = (uint64_t *)sub_216B1E600((uint64_t)v102);
        for (i = sub_216B1E67C((uint64_t)v102); v39 != (uint64_t *)i; ++v39)
        {
          v41 = *v39;
          if (sub_216BD53CC(v16, *v39))
          {
            v42 = (_QWORD *)(v97 + 72);
            sub_216B20C64(v95, v41);
            sub_216BF9CAC(v42, v95, (_QWORD *)(a1 + 8));
          }
        }
        v95[0] = (_QWORD *)sub_216B938A4(a1 + 280);
        v95[1] = v43;
        v100.n128_u64[0] = sub_216B938D4(a1 + 280);
        v100.n128_u64[1] = v44;
        while (sub_216B3760C(v95, &v100))
        {
          v46 = sub_216BD44CC(v95, v45);
          if (sub_216BD53CC(a1 + 280, v46))
          {
            v47 = (_QWORD *)(v97 + 96);
            sub_216B20C64(v93, v46);
            sub_216BF9CAC(v47, v93, (_QWORD *)(a1 + 8));
          }
          sub_216B93914(v95);
        }
        v48 = sub_216BF9D00((uint64_t)v29);
        v49 = (uint64_t *)sub_216B1E600(v48);
        v50 = sub_216B1E67C(v48);
        while (v49 != (uint64_t *)v50)
        {
          v51 = *v49++;
          v52 = (_QWORD *)(v97 + 120);
          sub_216B20C64(v95, v51);
          sub_216BF9CAC(v52, v95, (_QWORD *)(a1 + 8));
        }
        sub_216B1FD68(v95);
        sub_216B40D84(v94);
        sub_216BF88F4((uint64_t)v93);
        v53 = v97 + 96;
        v54 = (uint64_t *)sub_216B1E600(v97 + 96);
        for (j = sub_216B1E67C(v53); v54 != (uint64_t *)j; ++v54)
        {
          v56 = (unsigned __int8 *)*v54;
          if (!sub_216BD53CC((uint64_t)v93, *v54))
          {
            sub_216BA5894(v56, (uint64_t)v94);
            sub_216B248A0((uint64_t)v94, ";\n");
            sub_216BD53FC((uint64_t)v93, (uint64_t)v56);
          }
        }
        sub_216BF88F4((uint64_t)v92);
        v57 = v97 + 72;
        v58 = (uint64_t *)sub_216B1E600(v97 + 72);
        for (k = sub_216B1E67C(v57); v58 != (uint64_t *)k; ++v58)
        {
          v60 = (unsigned __int8 *)*v58;
          if (!sub_216BD53CC((uint64_t)v92, *v58))
          {
            sub_216BA5894(v60, (uint64_t)v94);
            sub_216BD53FC((uint64_t)v92, (uint64_t)v60);
          }
        }
        v61 = (_DWORD **)sub_216B262E0((uint64_t)(v29 + 16));
        v62 = sub_216BA8258((uint64_t)(v29 + 16));
        if (v61 == (_DWORD **)v62)
        {
          v76 = 3;
LABEL_54:
          v78 = v16;
          if ((*(_BYTE *)v97 & 0x1C) == 4)
            v76 = 2;
          *(_BYTE *)v97 = *(_BYTE *)v97 & 0xFC | v76;
          if ((*(_BYTE *)v97 & 3) == 1)
          {
            sub_216BF890C(&v100, v29, v63);
            if (sub_216B8B400((unsigned __int8 *)&v100))
            {
              *(_BYTE *)v97 |= 3u;
              sub_216BF9D88((uint64_t)v29);
            }
            sub_216BF9D94((uint64_t)&v100);
          }
          sub_216BA5894(v29, (uint64_t)v94);
          v79 = sub_216B40E80(v94);
          sub_216BEA9DC(&v100, v88, v79, v80);
          v81 = sub_216BA7424(&v100);
          v82 = v97;
          *(_QWORD *)(v97 + 32) = v81;
          *(_QWORD *)(v82 + 40) = v83;
          v84 = sub_216BA6A7C(v98);
          *(_QWORD *)sub_216BF805C(a1 + 152, v84, v85) = v82;
          sub_216BDB28C((_QWORD *)(a1 + 344), &v97, (_QWORD *)(a1 + 8));
          v16 = v78;
        }
        else
        {
          v64 = (_DWORD **)v62;
          v87 = v16;
          v65 = 0;
          do
          {
            v66 = *v61;
            sub_216BF9D08(&v100);
            v67 = sub_216BA6A7C((uint64_t)v66);
            sub_216BEA9DC(&v91, v88, v67, v68);
            v100.n128_u64[0] = sub_216BA7424(&v91);
            v100.n128_u64[1] = v69;
            v91 = sub_216B2037C((uint64_t)v66);
            v70 = sub_216B1E600((uint64_t)&v91);
            v71 = sub_216BA7ED0(v70);
            if (!v71 || (v72 = v71, v73 = sub_216BA7EA4(v71), (sub_216BF9D0C(v73) & 1) == 0))
            {
              v77 = sub_216B34198((uint64_t)v66);
              sub_216BF91BC(a1, v77, 2359, (uint64_t)v90);
              sub_216B4B3B4(v90);
              sub_216B2C7C0((_BYTE *)a1);
              if ((v65 & 1) != 0)
                goto LABEL_50;
LABEL_47:
              v76 = 3;
LABEL_52:
              v16 = v87;
              goto LABEL_54;
            }
            v74 = sub_216BA7EA4(v72);
            v101 = v101 & 0xFF80 | v74 & 0x7F;
            v75 = sub_216BA836C(v66);
            v101 = ((v75 & 3) << 7) | v101 & 0xFE7F;
            v63 = sub_216BF9D2C((_QWORD *)(v97 + 48), &v100, (_QWORD *)(a1 + 8));
            v65 |= (v101 & 0x7Fu) - 41 < 2;
            ++v61;
          }
          while (v61 != v64);
          if ((v65 & 1) == 0)
            goto LABEL_47;
LABEL_50:
          if ((*(_BYTE *)v97 & 0x1C) == 8)
          {
            v76 = 1;
            goto LABEL_52;
          }
          v86 = sub_216B34190((uint64_t)v29);
          sub_216BF91BC(a1, v86, 2360, (uint64_t)v89);
          sub_216B4B3B4(v89);
          sub_216B2C7C0((_BYTE *)a1);
          v16 = v87;
        }
        sub_216B9B960(v92);
        sub_216B9B960(v93);
        sub_216B40DB8(v94);
        sub_216B1FF6C(v95);
        sub_216B1FF6C(v102);
        goto LABEL_10;
      }
    }
LABEL_9:
    sub_216B2C7C0((_BYTE *)a1);
    goto LABEL_10;
  }
LABEL_2:
  if (sub_216B8B400((unsigned __int8 *)a1))
    sub_216BF9370(a1);
  v13 = sub_216BF9C80(a1, v12);
  v14 = sub_216BF4328(v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
}

uint64_t sub_216BF9C78(uint64_t a1)
{
  return sub_216BFC95C(*(_QWORD *)(a1 + 8));
}

uint64_t sub_216BF9C80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216BF4060(*(_QWORD *)(a1 + 368), a2);
  return sub_216B2037C(v2);
}

uint64_t sub_216BF9C98(uint64_t a1)
{
  return sub_216B1E600(a1 + 32);
}

_QWORD *sub_216BF9CAC(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = result;
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= result[2])
  {
    result = (_QWORD *)sub_216BFCB54(result, a3, 1uLL);
    v5 = (_QWORD *)v4[1];
  }
  *v5 = *a2;
  v4[1] += 8;
  return result;
}

uint64_t sub_216BF9D00(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_216BF9D0C(unsigned int a1)
{
  return (a1 < 0x2D) & (0x1E0703803F38uLL >> a1);
}

__n128 sub_216BF9D2C(_QWORD *a1, __n128 *a2, _QWORD *a3)
{
  __n128 *v5;
  __n128 result;

  v5 = (__n128 *)a1[1];
  if ((unint64_t)v5 >= a1[2])
  {
    sub_216BFCA64(a1, a3, 1uLL);
    v5 = (__n128 *)a1[1];
  }
  result = *a2;
  v5[1].n128_u64[0] = a2[1].n128_u64[0];
  *v5 = result;
  a1[1] += 24;
  return result;
}

uint64_t sub_216BF9D88(uint64_t result)
{
  *(_BYTE *)(result + 152) = 1;
  return result;
}

uint64_t sub_216BF9D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22[2];

  v6 = sub_216BF48A4(*(_QWORD *)(a1 + 368), a2);
  v8 = sub_216BF4060(*(_QWORD *)(a1 + 368), v7);
  v9 = sub_216B40EE8(v8);
  sub_216B1E678((int)v22, "kernel-pool");
  v10 = sub_216B271E8(a2, a3, v22[0], v22[1], 0);
  sub_216B4AED0(&v21);
  LODWORD(v10) = sub_216B9BFA8(v9, v10, 0, 0, 0, v21);
  sub_216B4AED0(&v20);
  sub_216B9277C(v8, v10, 0, v20);
  v12 = sub_216BF9C80(a1, v11);
  v13 = sub_216BF4328(v12);
  v15 = sub_216BF4330(*(_QWORD *)(a1 + 368), v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 24))(v13, v15, v8);
  sub_216BF4338(v6);
  while (!sub_216BEB890(v6))
    sub_216BE455C(v6);
  v17 = sub_216BF9C80(a1, v16);
  v18 = sub_216BF4328(v17);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
}

uint64_t sub_216BF9ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216C0B130(*(_QWORD *)(a1 + 368), a2);
  v3 = sub_216BF4328(v2);
  return sub_216BF9EEC(v3);
}

uint64_t sub_216BF9EEC(uint64_t a1)
{
  return sub_216BFCC10((_QWORD *)(a1 + 16));
}

_DWORD *sub_216BF9F04(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v51;
  uint64_t v52;
  uint64_t v53[3];
  uint64_t v54[3];

  v2 = a2;
  v4 = sub_216C0B130(*(_QWORD *)(a1 + 368), a2);
  v5 = sub_216BF4328(v4);
  v7 = sub_216BF4060(*(_QWORD *)(a1 + 368), v6);
  v8 = (_DWORD *)sub_216B40EE8(v7);
  sub_216B2C030(v54);
  sub_216B2C030(v53);
  sub_216B4B134(v54);
  sub_216BFA25C(v53);
  v9 = sub_216B27CA8(v5);
  sub_216BFA290(v54, v9);
  v10 = sub_216B69B74(v5);
  sub_216BFA2E8(v53, v10);
  if (sub_216BF9EEC(v5) <= v2)
  {
    v11 = 0;
  }
  else
  {
    v51.n128_u64[0] = sub_216BFA340(v5);
    v52 = sub_216BFA348((uint64_t *)&v51, v2);
    v11 = malloc_type_malloc(0x38uLL, 0x1070040C582C436uLL);
    v12 = sub_216B2E220(v54);
    v14 = sub_216B4B51C(&v52, v13) + 32;
    v15 = (unsigned int *)sub_216B1E600(v14);
    v16 = sub_216B1E67C(v14);
    if (v15 != (unsigned int *)v16)
    {
      v17 = (unsigned int *)v16;
      do
      {
        v18 = sub_216B71D08(v15);
        v51.n128_u32[0] = sub_216BFA3CC(v8, v18);
        v19 = sub_216B69130(v15);
        v51.n128_u32[1] = sub_216BFA3CC(v8, v19);
        sub_216BFA374(v54, (uint64_t)&v51);
        v15 += 3;
      }
      while (v15 != v17);
    }
    v20 = sub_216B2D0E0(v53);
    v22 = sub_216B4B51C(&v52, v21) + 80;
    v23 = (unsigned int *)sub_216B1E600(v22);
    v24 = sub_216B1E67C(v22);
    if (v23 != (unsigned int *)v24)
    {
      v26 = v24;
      do
      {
        v27 = sub_216B71D08(v23);
        v28 = sub_216B69130(v23);
        if (sub_216B71E34((uint64_t)v23))
        {
          v30 = sub_216BF4330(*(_QWORD *)(a1 + 368), v29);
          v28 = sub_216B7185C(v28, 0, v8, v30);
        }
        v51 = 0uLL;
        v51.n128_u32[0] = sub_216BFA3CC(v8, v27);
        v51.n128_u32[1] = sub_216BFA3CC(v8, v28);
        v51.n128_u64[1] = 0;
        v31 = v23 + 6;
        if (sub_216B25DD0((uint64_t)(v23 + 6), v32))
          sub_216B774B4(v23 + 3);
        v51.n128_u64[1] = sub_216B26084(v23 + 6);
        sub_216BFA3E8(v53, &v51);
        v23 += 14;
      }
      while (v31 + 8 != (unsigned int *)v26);
    }
    v33 = sub_216B4B51C(&v52, v25);
    v34 = sub_216BFA3CC(v8, *(_DWORD *)(v33 + 24));
    v36 = sub_216B4B51C(&v52, v35);
    *v11 = sub_216BFA440(*(_DWORD *)(v36 + 216));
    v11[1] = sub_216B63A50((uint64_t)v8, *(_DWORD *)(a1 + 376), v34, 0);
    v11[2] = sub_216B6369C((uint64_t)v8, *(_DWORD *)(a1 + 376), v34, 0);
    v38 = sub_216B4B51C(&v52, v37);
    v11[3] = sub_216BFA3CC(v8, *(_DWORD *)(v38 + 24));
    v40 = sub_216B4B51C(&v52, v39);
    *((_QWORD *)v11 + 2) = sub_216B26084(v40);
    v42 = sub_216B4B51C(&v52, v41);
    v43 = sub_216B4D4A0(v42 + 32);
    v11[6] = v43;
    if (v43)
      v45 = sub_216B4B51C(v54, v44) + 8 * v12;
    else
      v45 = 0;
    *((_QWORD *)v11 + 4) = v45;
    v46 = sub_216B4B51C(&v52, v44);
    v47 = sub_216B4D4E0(v46 + 80);
    v11[10] = v47;
    if (v47)
      v49 = sub_216B4B51C(v53, v48) + 16 * v20;
    else
      v49 = 0;
    *((_QWORD *)v11 + 6) = v49;
  }
  sub_216B2CFC8(v53);
  sub_216B2ED08(v54);
  return v11;
}

uint64_t sub_216BFA25C(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_216B2D0E0(a1);
  sub_216B2F174(a1);
  return nullsub_1(a1, v2);
}

_QWORD *sub_216BFA290(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B2E220(a1);
  if (a2 > (unint64_t)result)
    return sub_216BFD1E8(a1, a2 - (_QWORD)result);
  if (a2 < (unint64_t)result)
    return (_QWORD *)sub_216B88894(a1, *a1 + 8 * a2);
  return result;
}

_QWORD *sub_216BFA2E8(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B2D0E0(a1);
  if (a2 > (unint64_t)result)
    return sub_216BFD740(a1, a2 - (_QWORD)result);
  if (a2 < (unint64_t)result)
    return (_QWORD *)sub_216B2F25C(a1, *a1 + 16 * a2);
  return result;
}

uint64_t sub_216BFA340(uint64_t a1)
{
  return sub_216B2C910((uint64_t *)(a1 + 16));
}

uint64_t sub_216BFA348(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  sub_216BFDA34(&v3, a2);
  return v3;
}

uint64_t sub_216BFA374(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216BFDA48(a1, a2);
  }
  else
  {
    sub_216B3F714((uint64_t)a1, a2);
    result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

unint64_t sub_216BFA3CC(_DWORD *a1, int a2)
{
  return (unint64_t)sub_216B60568(a1, a2) >> 32;
}

uint64_t sub_216BFA3E8(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, (uint64_t)a2))
  {
    result = sub_216BFDAF4(a1, a2);
  }
  else
  {
    sub_216B2E55C((uint64_t)a1, a2);
    result = v4 + 16;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216BFA440(int a1)
{
  return dword_216C1960C[a1 - 1];
}

uint64_t sub_216BFA454(uint64_t a1, uint64_t a2)
{
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  sub_216BFA524(a1 + 8);
  sub_216BFA528(v7, a1);
  sub_216BFA52C(v6, a1);
  sub_216BFA530(v5, a1);
  sub_216BAA4FC(a1 + 64, v7, v6, v5);
  sub_216BA5334(v5);
  sub_216BA5334(v6);
  sub_216BA5334(v7);
  sub_216BFA534((_BYTE *)a1, a2);
  return a1;
}

uint64_t sub_216BFA534(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = sub_216B939E0(a2);
  v4 = sub_216B1E600((uint64_t)&v12);
  result = sub_216BD6AD0(v4);
  if ((result & 1) == 0)
  {
    v6 = (uint64_t *)sub_216B262E0(a2 + 16);
    result = sub_216BA8258(a2 + 16);
    if (v6 != (uint64_t *)result)
    {
      v7 = (uint64_t *)result;
      while (1)
      {
        v8 = *v6;
        v12 = sub_216B2037C(*v6);
        v9 = sub_216B1E600((uint64_t)&v12);
        result = sub_216BA7ED0(v9);
        if (result)
        {
          result = sub_216BA7EA4(result);
          if ((_DWORD)result == 10)
            break;
        }
        if (++v6 == v7)
          return result;
      }
      if (v8)
      {
        sub_216BFC7D4(&v11, 0, 0, 0, 1);
        sub_216BFA9C8((uint64_t)(a1 + 8), v8, v11);
        *a1 = 1;
        v10 = sub_216BA8288(a2);
        return sub_216BAC1EC(a1 + 64, v10);
      }
    }
  }
  return result;
}

uint64_t sub_216BFA634(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216BA570C(a1, 0);
  sub_216B5F9A0(v2 + 24, 0);
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_216BFA66C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BFA690(a1, (uint64_t)&v3);
}

uint64_t sub_216BFA690(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BFA6D0(a1, a2, &v5);
}

uint64_t sub_216BFA6D4(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216B3269C())
  {
    j_j_nullsub_1(&v6);
    j_j_nullsub_1(&v5);
    sub_216BFA748(a1, a2, &v5);
    *(_QWORD *)(a1 + 24) = a1;
  }
  return a1;
}

_QWORD *sub_216BFA74C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA5A4(a1);
  *v6 = &unk_24D606300;
  sub_216BAD8EC(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BFA79C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B2E930(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BFA748(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BADABC(v11);
  return v8;
}

uint64_t sub_216BFA84C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BFA748(a2, v4, v5);
}

uint64_t sub_216BFA894(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216BFA89C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v5);
  nullsub_1(v2, v3);
  return sub_216B2ECAC((uint64_t)&v5, a1, 1);
}

uint64_t sub_216BFA8F0(uint64_t a1, uint64_t a2)
{
  return sub_216BFA8F8(a1 + 8, a2);
}

uint64_t sub_216BFA8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BFA91C(v3, a2);
}

BOOL sub_216BFA920(_BYTE **a1, uint64_t *a2)
{
  return sub_216BFA928(a1, *a2);
}

BOOL sub_216BFA928(_BYTE **a1, uint64_t a2)
{
  _BYTE *v2;

  v2 = *a1;
  return *v2 && sub_216BFA940((uint64_t)v2, a2);
}

BOOL sub_216BFA940(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = sub_216BD5F44(a2);
  v4 = v3;
  if (v3 && sub_216B5EE7C(v3))
  {
    sub_216B5EE7C(v4);
    sub_216BABC4C(a1 + 64);
    v5 = a1 + 8;
    v6 = sub_216B5EE7C(v4);
    v7 = sub_216BFAA34(v5, v6);
    sub_216BFA9C8(v5, v4, v7);
  }
  return v4 == 0;
}

uint64_t *sub_216BFA9C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *result;
  uint64_t v6;
  char v7;

  v7 = a3;
  v6 = a2;
  if (sub_216BFAA90(&v7) || sub_216BFAAA0(a1))
    return (uint64_t *)sub_216BFAAB8(a1, a2);
  result = sub_216BFAAFC(a1, &v6);
  *(_BYTE *)result = v7;
  return result;
}

uint64_t sub_216BFAA34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;

  v6 = a2;
  v2 = a1 + 24;
  if (sub_216BB5260(a1 + 24, &v6))
  {
    v4 = sub_216BFADE4(v2, &v6);
  }
  else
  {
    v4 = (uint64_t *)&v7;
    sub_216B2C7CC(&v7, v3);
  }
  return *(unsigned __int8 *)v4;
}

BOOL sub_216BFAA90(_BYTE *a1)
{
  return *a1 == 0;
}

BOOL sub_216BFAAA0(uint64_t a1)
{
  return !sub_216BFAB14(a1);
}

_BYTE *sub_216BFAAB8(uint64_t a1, uint64_t a2)
{
  _BYTE *result;
  uint64_t *v4;
  uint64_t v5;

  v5 = a2;
  result = (_BYTE *)sub_216BCEFD4(a1, &v5);
  if ((_DWORD)result)
  {
    v4 = sub_216BFAAFC(a1, &v5);
    return sub_216B2C7D0(v4);
  }
  return result;
}

uint64_t *sub_216BFAAFC(uint64_t a1, uint64_t *a2)
{
  return sub_216BFAB24(a1, a2) + 1;
}

BOOL sub_216BFAB14(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t *sub_216BFAB24(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v6;
  uint64_t *v7;

  v7 = 0;
  if (sub_216BCF068(a1, a2, &v7))
    return v7;
  sub_216B2C7CC(&v6, v4);
  return sub_216BFAB80(a1, a2, &v6, v7);
}

uint64_t *sub_216BFAB80(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t *a4)
{
  uint64_t *result;

  result = sub_216BFABB8(a1, a2, a4);
  *result = *a2;
  *((_BYTE *)result + 8) = *a3;
  return result;
}

uint64_t *sub_216BFABB8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;

  v11 = a3;
  v5 = sub_216B4D0A4(a1);
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216BFACA0(a1, (2 * v6));
    sub_216BCF068(a1, a2, &v11);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216BFACA0(a1, v7);
    sub_216BCF068(a1, a2, &v11);
  }
  v8 = sub_216B4D0B0(a1);
  v9 = sub_216B512E8(v8);
  if (!sub_216B2A5FC(*v11, v9))
    sub_216B4D0D8(a1);
  return v11;
}

void sub_216BFACA4(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(void **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B5FA0C(a1, *v5);
  if (v4)
  {
    sub_216BFAD2C(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    j__free(v4);
  }
  else
  {
    sub_216BA57C8(a1);
  }
}

uint64_t sub_216BFAD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216BA57C8(a1);
  v7 = sub_216B512E8(v6);
  result = sub_216BA5500();
  if (a2 != a3)
  {
    v9 = result;
    do
    {
      result = sub_216B2A5FC(*(_QWORD *)a2, v7);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*(_QWORD *)a2, v9);
        if ((result & 1) == 0)
        {
          v10 = 0;
          sub_216BCF068(a1, (uint64_t *)a2, &v10);
          *(_QWORD *)v10 = *(_QWORD *)a2;
          *(_BYTE *)(v10 + 8) = *(_BYTE *)(a2 + 8);
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 16;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t *sub_216BFADE4(uint64_t a1, uint64_t *a2)
{
  return sub_216BFADFC(a1, a2) + 1;
}

uint64_t *sub_216BFADFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v6;
  uint64_t *v7;

  v7 = 0;
  if (sub_216B65E8C(a1, a2, &v7))
    return v7;
  sub_216B2C7CC(&v6, v4);
  return sub_216B67C88(a1, a2, &v6, v7);
}

uint64_t sub_216BFAE58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BFAE7C(a1, (uint64_t)&v3);
}

uint64_t sub_216BFAE7C(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BFAEBC(a1, a2, &v5);
}

uint64_t sub_216BFAEC0(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216B3269C())
  {
    j_j_nullsub_1(&v6);
    j_j_nullsub_1(&v5);
    sub_216BFAF34(a1, a2, &v5);
    *(_QWORD *)(a1 + 24) = a1;
  }
  return a1;
}

_QWORD *sub_216BFAF38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAA874(a1);
  *v6 = &unk_24D606348;
  sub_216BAD8EC(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BFAF88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B2E930(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BFAF34(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BADABC(v11);
  return v8;
}

uint64_t sub_216BFB038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BFAF34(a2, v4, v5);
}

uint64_t sub_216BFB080(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216BFB088(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v5);
  nullsub_1(v2, v3);
  return sub_216B2ECAC((uint64_t)&v5, a1, 1);
}

uint64_t sub_216BFB0DC(uint64_t a1, uint64_t a2)
{
  return sub_216BFB0E4(a1 + 8, a2);
}

uint64_t sub_216BFB0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BFB108(v3, a2);
}

uint64_t sub_216BFB10C(_BYTE **a1, uint64_t *a2)
{
  return sub_216BFB114(a1, *a2);
}

uint64_t sub_216BFB114(_BYTE **a1, uint64_t a2)
{
  _BYTE *v2;

  v2 = *a1;
  if (*v2)
    return sub_216BFB12C((uint64_t)v2, a2);
  else
    return 0;
}

uint64_t sub_216BFB12C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v4 = sub_216BFB35C(a2);
  if (v4)
  {
    v5 = v4;
    v6 = a1 + 64;
    sub_216B1E67C(v4);
    sub_216BABC4C(a1 + 64);
    ++*(_DWORD *)(a1 + 56);
    v7 = sub_216B2037C(v5);
    sub_216BAC1EC(a1 + 64, v7);
    if (!sub_216B5EE7C(v5))
    {
LABEL_11:
      result = 0;
      --*(_DWORD *)(a1 + 56);
      return result;
    }
    v8 = sub_216B5EE7C(v5);
LABEL_10:
    sub_216BAC1EC(v6, v8);
    goto LABEL_11;
  }
  v9 = sub_216BFB394(a2);
  if (v9)
  {
    v10 = v9;
    v6 = a1 + 64;
    sub_216B1E67C(v9);
    sub_216BABC4C(a1 + 64);
    ++*(_DWORD *)(a1 + 56);
    v8 = sub_216B2037C(v10);
    goto LABEL_10;
  }
  v11 = sub_216BFB3CC(a2);
  if (v11)
  {
    v12 = v11;
    v6 = a1 + 64;
    v13 = sub_216B1E67C(v11);
    sub_216BAC1EC(a1 + 64, v13);
    ++*(_DWORD *)(a1 + 56);
    v14 = sub_216B2037C(v12);
    sub_216BAC1EC(a1 + 64, v14);
    sub_216B5EE7C(v12);
    sub_216BABC4C(a1 + 64);
    v8 = sub_216B27CB0(v12);
    goto LABEL_10;
  }
  v15 = sub_216BFB404(a2);
  if (v15)
  {
    v16 = v15;
    ++*(_DWORD *)(a1 + 56);
    v6 = a1 + 64;
    v17 = sub_216B1E67C(v15);
    sub_216BAC1EC(a1 + 64, v17);
    v8 = sub_216B2037C(v16);
    goto LABEL_10;
  }
  v19 = sub_216BFB43C(a2);
  if (v19)
  {
    v20 = v19;
    ++*(_DWORD *)(a1 + 56);
    v21 = sub_216B1E67C(v19);
    sub_216BAC1EC(a1 + 64, v21);
    sub_216B2037C(v20);
    sub_216BABC4C(a1 + 64);
    goto LABEL_11;
  }
  v22 = sub_216BFB474(a2);
  if (!v22)
    return 1;
  v23 = v22;
  sub_216B1E67C(v22);
  sub_216BABC4C(a1 + 64);
  v24 = sub_216B1E67C(v23);
  v25 = sub_216BFB4AC(a1 + 8, v24, 3);
  result = 0;
  if (!*(_BYTE *)a1)
    v25 = 0;
  *(_BYTE *)a1 = v25;
  ++*(_DWORD *)(a1 + 4);
  return result;
}

uint64_t sub_216BFB35C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFB4FC(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFB394(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFB554(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFB3CC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFB58C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFB404(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFB5C4(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFB43C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFB5FC(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFB474(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFB634(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFB4AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a1 + 24;
  result = sub_216BB5260(a1 + 24, &v7);
  if ((_DWORD)result)
  {
    v6 = sub_216BFADE4(v4, &v7);
    return sub_216BFB68C((unsigned __int8 *)v6, a3);
  }
  return result;
}

uint64_t sub_216BFB500(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BFB528(&v3);
}

uint64_t sub_216BFB528(_QWORD *a1)
{
  return sub_216BFB530(*a1);
}

BOOL sub_216BFB538(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 3;
}

uint64_t sub_216BFB558(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BFB580(&v3);
}

uint64_t sub_216BFB580(_QWORD *a1)
{
  return sub_216BFB588(*a1);
}

uint64_t sub_216BFB590(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BFB5B8(&v3);
}

uint64_t sub_216BFB5B8(_QWORD *a1)
{
  return sub_216BFB5C0(*a1);
}

uint64_t sub_216BFB5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BFB5F0(&v3);
}

uint64_t sub_216BFB5F0(_QWORD *a1)
{
  return sub_216BFB5F8(*a1);
}

uint64_t sub_216BFB600(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BFB628(&v3);
}

uint64_t sub_216BFB628(_QWORD *a1)
{
  return sub_216BFB630(*a1);
}

uint64_t sub_216BFB638(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BFB660(&v3);
}

uint64_t sub_216BFB660(_QWORD *a1)
{
  return sub_216BFB668(*a1);
}

BOOL sub_216BFB670(unsigned __int8 *a1)
{
  return sub_216B8B400(a1) == 13;
}

uint64_t sub_216BFB68C(unsigned __int8 *a1, char a2)
{
  return (*a1 >> a2) & 1;
}

uint64_t sub_216BFB69C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BFB6C0(a1, (uint64_t)&v3);
}

uint64_t sub_216BFB6C0(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BFB700(a1, a2, &v5);
}

uint64_t sub_216BFB704(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216B3269C())
  {
    j_j_nullsub_1(&v6);
    j_j_nullsub_1(&v5);
    sub_216BFB778(a1, a2, &v5);
    *(_QWORD *)(a1 + 24) = a1;
  }
  return a1;
}

_QWORD *sub_216BFB77C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &unk_24D606390;
  sub_216BAD8EC(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BFB7CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B2E930(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BFB778(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BADABC(v11);
  return v8;
}

uint64_t sub_216BFB87C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BFB778(a2, v4, v5);
}

uint64_t sub_216BFB8C4(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216BFB8CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v5);
  nullsub_1(v2, v3);
  return sub_216B2ECAC((uint64_t)&v5, a1, 1);
}

uint64_t sub_216BFB920(uint64_t a1, uint64_t a2)
{
  return sub_216BFB928(a1 + 8, a2);
}

uint64_t sub_216BFB928(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BFB94C(v3, a2);
}

uint64_t sub_216BFB950(_BYTE **a1, uint64_t *a2)
{
  return sub_216BFB958(a1, *a2);
}

uint64_t sub_216BFB958(_BYTE **a1, uint64_t a2)
{
  _BYTE *v2;

  v2 = *a1;
  if (*v2)
    return sub_216BFB970((uint64_t)v2, a2);
  else
    return 0;
}

uint64_t sub_216BFB970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;

  v4 = sub_216BAB1D8(a2);
  if (v4)
  {
    v5 = a1 + 8;
    v6 = sub_216B1E67C(v4);
    v7 = sub_216BFBF1C(v5, v6);
    v8 = v5;
    v9 = a2;
LABEL_8:
    sub_216BFBEBC(v8, v9, v7);
    return 0;
  }
  v10 = sub_216BC21EC(a2);
  if (v10 || (v10 = sub_216BFBF74(a2)) != 0)
  {
    v11 = v10;
    sub_216B1E67C(v10);
    sub_216BABC4C(a1 + 64);
    v12 = a1 + 8;
    v13 = sub_216B1E67C(v11);
    v7 = sub_216BFAA34(v12, v13);
LABEL_6:
    v8 = v12;
LABEL_7:
    v9 = v11;
    goto LABEL_8;
  }
  v15 = sub_216BFBFAC(a2);
  if (v15)
  {
    v11 = v15;
    sub_216B2037C(v15);
    sub_216BABC4C(a1 + 64);
    ++*(_DWORD *)(a1 + 56);
    sub_216B5EE7C(v11);
    sub_216BABC4C(a1 + 64);
    sub_216B27CB0(v11);
    sub_216BABC4C(a1 + 64);
    --*(_DWORD *)(a1 + 56);
    v16 = sub_216B5EE7C(v11);
    LOBYTE(v70) = sub_216BFAA34(a1 + 8, v16);
    v17 = sub_216B27CB0(v11);
    v18 = sub_216BFAA34(a1 + 8, v17);
    sub_216BFBFE4(&v70, v18);
    v7 = v70;
    v8 = a1 + 8;
    goto LABEL_7;
  }
  v19 = sub_216BC21B4(a2);
  if (v19)
  {
    v11 = v19;
    sub_216B2037C(v19);
    sub_216BABC4C(a1 + 64);
    v12 = a1 + 8;
    v20 = sub_216B2037C(v11);
    v72 = sub_216BFAA34(v12, v20);
    v70 = sub_216BA9B14(v11);
    v71 = v21;
    sub_216B2C7CC(&v69, v21);
    if (sub_216B1E67C((uint64_t)&v70))
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = sub_216B26288(&v70, v22);
        v25 = sub_216BFC018((unsigned __int8 *)&v72, v24);
        sub_216BFBFF4(&v69, v23++, v25);
        v22 = v23;
      }
      while (sub_216B1E67C((uint64_t)&v70) > (unint64_t)v23);
    }
    v7 = v69;
    goto LABEL_6;
  }
  v26 = sub_216BFC044(a2);
  if (!v26)
  {
    v35 = sub_216BFC188(a2);
    if (v35)
    {
      v36 = v35;
      v37 = sub_216BA9790(v35);
      if (v37 == 5 || v37 == 3)
      {
        v38 = sub_216B2037C(v36);
        sub_216BFC07C(a1, v38);
        return 0;
      }
      return 1;
    }
    v39 = sub_216BCA744(a2);
    v40 = v39;
    if (v39)
    {
      v70 = sub_216B2037C(v39);
      v41 = sub_216B1E600((uint64_t)&v70);
      if (!sub_216BE41A8(v41))
      {
        v54 = 1;
LABEL_48:
        if (v40)
          return v54;
        else
          return 1;
      }
      sub_216B2C7CC(&v72, v42);
      v43 = (uint64_t *)sub_216B262E0(v40 + 8);
      v44 = sub_216BA9ACC(v40 + 8);
      if (v43 != (uint64_t *)v44)
      {
        v45 = (uint64_t *)v44;
        v46 = 0;
        do
        {
          v47 = *v43;
          sub_216BABC4C(a1 + 64);
          v69 = sub_216BFAA34(a1 + 8, v47);
          v70 = sub_216BAB358(v47);
          v48 = sub_216B1E600((uint64_t)&v70);
          if (sub_216BAEC44(v48))
          {
            v49 = sub_216BFB68C((unsigned __int8 *)&v69, 0);
            sub_216BFBFF4(&v72, v46++, v49);
          }
          else
          {
            v70 = sub_216BAB358(v47);
            v50 = sub_216B1E600((uint64_t)&v70);
            v51 = sub_216BAED9C(v50);
            if (sub_216BA734C(v51))
            {
              v52 = 0;
              do
              {
                v53 = sub_216BFB68C((unsigned __int8 *)&v69, v52);
                sub_216BFBFF4(&v72, v46 + v52++, v53);
              }
              while (v52 < sub_216BA734C(v51));
              v46 += v52;
            }
          }
          ++v43;
        }
        while (v43 != v45);
      }
      sub_216BFBEBC(a1 + 8, v40, v72);
    }
    v54 = 0;
    goto LABEL_48;
  }
  v27 = v26;
  sub_216B2037C(v26);
  sub_216BABC4C(a1 + 64);
  v28 = a1 + 8;
  v29 = sub_216B2037C(v27);
  v72 = sub_216BFAA34(a1 + 8, v29);
  if (!sub_216BFAA90(&v72) && sub_216BA9AA8(v27) == 4)
  {
    v30 = sub_216B1E67C(v27);
    v31 = sub_216BAB1D8(v30);
    if (v31)
    {
      v32 = sub_216B1E67C(v31);
      v33 = sub_216B2037C(v27);
      v34 = sub_216BFAA34(v28, v33);
      sub_216BFA9C8(v28, v32, v34);
      return 0;
    }
    v55 = sub_216B1E67C(v27);
    v56 = sub_216BC21B4(v55);
    if (v56)
    {
      v57 = v56;
      v58 = sub_216B2037C(v56);
      v59 = sub_216BAB1D8(v58);
      if (v59)
      {
        v60 = v59;
        v70 = sub_216BA9B14(v57);
        v71 = v61;
        if (sub_216B1E67C((uint64_t)&v70))
        {
          v62 = 0;
          v63 = 0;
          do
          {
            v64 = sub_216B1E67C(v60);
            v65 = sub_216B26288(&v70, v62);
            v66 = sub_216BC2CE4(v65);
            v67 = sub_216BFB68C((unsigned __int8 *)&v72, v63);
            sub_216BFC114(v28, v64, v66, v67);
            v62 = ++v63;
          }
          while (sub_216B1E67C((uint64_t)&v70) > (unint64_t)v63);
        }
        return 0;
      }
    }
  }
  v68 = sub_216B1E67C(v27);
  return sub_216BFC07C(a1, v68);
}

uint64_t *sub_216BFBEBC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *result;
  uint64_t v6;
  char v7;

  v7 = a3;
  v6 = a2;
  if (sub_216BFAA90(&v7))
    return (uint64_t *)sub_216BFC1C0(a1, a2);
  result = sub_216BFADE4(a1 + 24, &v6);
  *(_BYTE *)result = v7;
  return result;
}

uint64_t sub_216BFBF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;

  v6 = a2;
  if (sub_216BCEFD4(a1, &v6))
  {
    v4 = sub_216BFAAFC(a1, &v6);
  }
  else
  {
    v4 = (uint64_t *)&v7;
    sub_216B2C7CC(&v7, v3);
  }
  return *(unsigned __int8 *)v4;
}

uint64_t sub_216BFBF74(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFC208(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFBFAC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFC234(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

_BYTE *sub_216BFBFE4(_BYTE *result, char a2)
{
  *result &= a2;
  return result;
}

_BYTE *sub_216BFBFF4(_BYTE *result, char a2, int a3)
{
  int v3;
  int v4;

  v3 = *result;
  v4 = v3 | (1 << a2);
  if (!a3)
    LOBYTE(v4) = v3 & ~(1 << a2);
  *result = v4;
  return result;
}

uint64_t sub_216BFC018(unsigned __int8 *a1, int a2)
{
  char v3;

  v3 = sub_216BC2CE4(a2);
  return sub_216BFB68C(a1, v3);
}

uint64_t sub_216BFC044(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFC260(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216BFC07C(uint64_t a1, uint64_t a2)
{
  char v4;
  _BYTE v5[32];
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_216B2C7CC(&v4, a2);
  sub_216BFC28C(v5, &v4, a1);
  sub_216BAB864(v6, v5);
  sub_216BA5334(v5);
  sub_216BABC8C(v6);
  sub_216BA5330(v6);
  return 0;
}

_BYTE *sub_216BFC114(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  _BYTE *result;
  uint64_t *v8;
  _BOOL4 v9;
  uint64_t v10;

  v10 = a2;
  if ((a4 & 1) != 0 || (result = (_BYTE *)sub_216BCEFD4(a1, &v10), (_DWORD)result))
  {
    v8 = sub_216BFAAFC(a1, &v10);
    v9 = sub_216BFAB14(a1);
    return sub_216BFBFF4(v8, a3, v9 & a4);
  }
  return result;
}

uint64_t sub_216BFC188(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216BFC7A8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

_BYTE *sub_216BFC1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *result;
  uint64_t *v4;
  uint64_t v5;

  v5 = a2;
  v2 = a1 + 24;
  result = (_BYTE *)sub_216BB5260(a1 + 24, &v5);
  if ((_DWORD)result)
  {
    v4 = sub_216BFADE4(v2, &v5);
    return sub_216B2C7D0(v4);
  }
  return result;
}

uint64_t sub_216BFC20C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9920(&v3);
}

uint64_t sub_216BFC238(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9A1C(&v3);
}

uint64_t sub_216BFC264(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA9A70(&v3);
}

uint64_t sub_216BFC290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_216BFC2B4(a1, (uint64_t)v4);
}

uint64_t sub_216BFC2B4(uint64_t a1, uint64_t a2)
{
  char v5;

  j_j_nullsub_1(&v5);
  return sub_216BFC2F4(a1, a2, &v5);
}

uint64_t sub_216BFC2F8(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;

  *(_QWORD *)(a1 + 24) = 0;
  if (sub_216B3269C())
  {
    j_j_nullsub_1(&v6);
    j_j_nullsub_1(&v5);
    sub_216BFC36C(a1, a2, &v5);
    *(_QWORD *)(a1 + 24) = a1;
  }
  return a1;
}

_QWORD *sub_216BFC370(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BAAA54(a1);
  *v6 = &unk_24D6063D8;
  sub_216BFC3C0(v6 + 1, a2, a3);
  return a1;
}

uint64_t sub_216BFC3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  _BYTE v11[31];
  char v12;

  v1 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  v2 = j_j_nullsub_1(&v12);
  v3 = sub_216B2C628(v2, 1uLL);
  sub_216B1E684(v10, &v12, 1);
  sub_216B3BAE0((uint64_t)v11, v3);
  v5 = sub_216B25CA8((uint64_t)v11, v4);
  v6 = j_j_nullsub_1(v1);
  j_j_nullsub_1(v10);
  sub_216BFC36C(v5, v6, v10);
  v8 = sub_216B28054((uint64_t)v11, v7);
  sub_216BFC590(v11);
  return v8;
}

uint64_t sub_216BFC474(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = j_j_nullsub_1(a1 + 8);
  v5 = j_j_nullsub_1(v3);
  return sub_216BFC36C(a2, v4, v5);
}

uint64_t sub_216BFC4BC(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216BFC4C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = a1 + 8;
  j_j_nullsub_1(a1 + 8);
  j_j_nullsub_1(&v5);
  nullsub_1(v2, v3);
  return sub_216B2C1F8((uint64_t)&v5, a1, 1);
}

uint64_t sub_216BFC518(uint64_t a1, uint64_t a2)
{
  return sub_216BFC624(a1 + 8, a2);
}

uint64_t sub_216BFC520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216B514B8(a2);
  v6 = sub_216B514B8(a3);
  return sub_216BFC568(a1, v5, v6);
}

uint64_t sub_216BFC56C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;

  v4 = sub_216BD8858(a1, a2);
  return sub_216BACD54((uint64_t)v4, a3);
}

uint64_t sub_216BFC594(uint64_t a1)
{
  sub_216BFC5BC(a1, 0);
  return a1;
}

_QWORD *sub_216BFC5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = (uint64_t *)sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216BFC618(v8, v4);
  }
  return result;
}

uint64_t sub_216BFC618(uint64_t *a1, uint64_t a2)
{
  return sub_216B2C140(*a1, a2, a1[1]);
}

uint64_t sub_216BFC624(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a1, a2);
  return sub_216BFC648(v3, a2);
}

uint64_t sub_216BFC64C(uint64_t a1, _QWORD *a2)
{
  return sub_216BFC654(a1, *a2);
}

BOOL sub_216BFC658(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  int i;
  uint64_t v16;
  _QWORD v18[2];

  v4 = a1[1];
  v5 = sub_216BAB1D8(a2);
  if (v5)
  {
    v6 = (uint64_t)(v4 + 8);
    if (sub_216BFAA90(*a1))
    {
      v7 = sub_216B1E67C(v5);
      sub_216BFAAB8((uint64_t)(v4 + 8), v7);
    }
    else
    {
      for (i = 0; i != 4; ++i)
      {
        if (sub_216BFB68C(*a1, i))
        {
          v16 = sub_216B1E67C(v5);
          sub_216BFC114(v6, v16, i, 0);
        }
      }
    }
  }
  else
  {
    v8 = sub_216BC21B4(a2);
    if (v8)
    {
      v18[0] = sub_216BA9B14(v8);
      v18[1] = v9;
      if (sub_216B1E67C((uint64_t)v18))
      {
        v10 = 0;
        v11 = 1;
        do
        {
          v12 = *a1;
          v13 = sub_216B26288(v18, v10);
          sub_216BFC774(v12, v13, 1);
          v10 = v11;
        }
        while (sub_216B1E67C((uint64_t)v18) > (unint64_t)v11++);
      }
    }
  }
  return v5 == 0;
}

_BYTE *sub_216BFC774(_BYTE *a1, int a2, int a3)
{
  char v5;

  v5 = sub_216BC2CE4(a2);
  return sub_216BFBFF4(a1, v5, a3);
}

uint64_t sub_216BFC7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216BA99C8(&v3);
}

_BYTE *sub_216BFC7D8(_BYTE *a1, int a2, int a3, int a4, int a5)
{
  *a1 = 0;
  sub_216BFBFF4(a1, 0, a2);
  sub_216BFBFF4(a1, 1, a3);
  sub_216BFBFF4(a1, 2, a4);
  sub_216BFBFF4(a1, 3, a5);
  return a1;
}

uint64_t sub_216BFC84C(uint64_t a1)
{
  sub_216BA52F4(a1 + 64);
  sub_216BFC87C(a1 + 8);
  return a1;
}

uint64_t sub_216BFC880(uint64_t a1)
{
  sub_216B5F5B0(a1 + 24);
  return sub_216BA5260(a1);
}

uint64_t sub_216BFC8A8(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_216B1D1D4(136);
  sub_216B39B60(v2);
  return sub_216BDB2EC(a1, v2, 1);
}

uint64_t sub_216BFC8E0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216B3D818(a1);
  if ((result & 1) == 0)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v7)
        {
          result = sub_216B25120();
          if (v7 != result)
            result = sub_216B51208(*(unsigned int **)(v6 + v4), *(_QWORD *)(a1 + 24));
        }
        *(_QWORD *)(v6 + v4) = 0;
        v4 += 8;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_216BFC95C(uint64_t a1)
{
  return a1 + 184;
}

uint64_t sub_216BFC964(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 &= 0xE0u;
  *(_QWORD *)(a1 + 8) = 0;
  sub_216B1E678(a1 + 16, &byte_216C19659);
  sub_216B1E678(a1 + 32, &byte_216C19659);
  sub_216BFCA00(a1 + 48, a2, 4);
  sub_216BFCA04(a1 + 72, a2, 2);
  sub_216BFCA04(a1 + 96, a2, 0);
  sub_216BFCA04(a1 + 120, a2, 0);
  return a1;
}

_QWORD *sub_216BFCA08(_QWORD *a1, _QWORD *a2, unsigned int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_216BFCA34(a1, a2, a3);
  return a1;
}

_QWORD *sub_216BFCA34(_QWORD *result, _QWORD *a2, unsigned int a3)
{
  if (-1431655765 * ((result[2] - *result) >> 3) < a3)
    return (_QWORD *)sub_216BFCA64(result, a2, a3);
  return result;
}

uint64_t sub_216BFCA64(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t result;

  v6 = (uint64_t)(a1[2] - *a1) >> 3;
  v8 = sub_216B2BFE4(a1);
  if (0x5555555555555556 * v6 > a3)
    a3 = 0x5555555555555556 * v6;
  v9 = sub_216B6EFA4(a2, v7);
  v10 = (_OWORD *)sub_216B4ABDC(v9, a3);
  sub_216B987F0((__int128 *)*a1, (__int128 *)a1[1], v10);
  result = nullsub_1(a1, *a1);
  *a1 = v10;
  a1[1] = (char *)v10 + 24 * v8;
  a1[2] = &v10[24 * a3 / 0x10];
  return result;
}

_QWORD *sub_216BFCB04(_QWORD *a1, _QWORD *a2, unsigned int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_216BFCB30(a1, a2, a3);
  return a1;
}

_QWORD *sub_216BFCB30(_QWORD *result, _QWORD *a2, unsigned int a3)
{
  if (((result[2] - *result) >> 3) < a3)
    return (_QWORD *)sub_216BFCB54(result, a2, a3);
  return result;
}

uint64_t sub_216BFCB54(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v6 = a1[2] - *a1;
  v8 = sub_216B2E220(a1);
  if (v6 >> 2 > a3)
    a3 = v6 >> 2;
  v9 = sub_216B6EFA4(a2, v7);
  v10 = (_QWORD *)sub_216B900E8(v9, a3);
  sub_216BDCC38((uint64_t *)*a1, (uint64_t *)a1[1], v10);
  result = nullsub_1(a1, *a1);
  *a1 = v10;
  a1[1] = &v10[v8];
  a1[2] = &v10[a3];
  return result;
}

uint64_t sub_216BFCBE8(uint64_t a1)
{
  sub_216B9B960(a1 + 8);
  return a1;
}

uint64_t sub_216BFCC10(_QWORD *a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 5);
}

uint64_t sub_216BFCC34(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B3D760(a1, 16);
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_216BFCC5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B51208(v5, *(_QWORD *)(a1 + 24));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_216BFCCD4(uint64_t a1)
{
  char v2;

  return sub_216BFCCF4(a1, &v2);
}

uint64_t sub_216BFCCFC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0;
  result = sub_216BFCD24();
  *(_QWORD *)(result + 24) = result;
  return result;
}

_QWORD *sub_216BFCD28(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *sub_216BF6B74(a1) = &off_24D606420;
  sub_216BB57D4(a2, a3);
  return a1;
}

void sub_216BFCD78()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_127();
  j__free(v0);
}

uint64_t sub_216BFCD8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BAA720();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BFCD24(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BAA73C(v7);
  return v4;
}

uint64_t sub_216BFCE00(uint64_t a1, uint64_t a2)
{
  return sub_216BFCD24(a2, a1 + 8);
}

uint64_t sub_216BFCE14(uint64_t a1)
{
  return sub_216BAA7B0(a1, 1);
}

uint64_t sub_216BFCE1C(uint64_t a1, uint64_t a2)
{
  return sub_216BAEDA0(a2);
}

uint64_t sub_216BFCE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8[3];
  char v9;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = sub_216BFCEB4();
  sub_216B6E0CC(&v7, (uint64_t)&v9);
  sub_216B3BAE0((uint64_t)v8, v4);
  v5 = sub_216B1E600((uint64_t)v8);
  sub_216BFCEC0(v5, a2);
  *(_QWORD *)(a1 + 24) = sub_216BAA72C(v8);
  sub_216BFCEC4(v8);
  return a1;
}

uint64_t sub_216BFCEB4()
{
  return sub_216B25CA0(40, 8);
}

_QWORD *sub_216BFCEC8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = sub_216BFCF14(a1);
  *v6 = &off_24D606468;
  sub_216BFCF28(v6 + 1, a2, a3);
  return a1;
}

_QWORD *sub_216BFCF14(_QWORD *result)
{
  *result = &unk_24D6064B0;
  return result;
}

void sub_216BFCF30()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_128();
  j__free(v0);
}

uint64_t sub_216BFCF44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  char v8;

  v1 = a1 + 8;
  v2 = sub_216BFCEB4();
  sub_216B6E0CC(&v6, (uint64_t)&v8);
  sub_216B3BAE0((uint64_t)v7, v2);
  v3 = sub_216B1E600((uint64_t)v7);
  sub_216BFCEC0(v3, v1);
  v4 = sub_216BAA72C(v7);
  sub_216BFCEC4(v7);
  return v4;
}

uint64_t sub_216BFCFB8(uint64_t a1, uint64_t a2)
{
  return sub_216BFCEC0(a2, a1 + 8);
}

uint64_t sub_216BFCFCC(uint64_t a1)
{
  return sub_216BFD0DC(a1, 1);
}

uint64_t sub_216BFCFD4(uint64_t a1)
{
  return sub_216BFD0EC(a1 + 8);
}

uint64_t sub_216BFCFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B514B8(a2);
  sub_216BAA6B8(a3);
  return sub_216BFD028(a1, v5);
}

_OWORD *sub_216BFD030(_OWORD *a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 v4;
  uint64_t v6;

  v6 = a2;
  v3 = (_OWORD *)sub_216B262E0((uint64_t)&v6);
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  return a1;
}

uint64_t *sub_216BFD06C(uint64_t *a1)
{
  sub_216BFD090(a1);
  return a1;
}

uint64_t *sub_216BFD090(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = sub_216B3DBD0((uint64_t)result);
    return (uint64_t *)sub_216BFD0C8(v2, v1);
  }
  return result;
}

uint64_t sub_216BFD0C8(uint64_t a1, uint64_t a2)
{
  return sub_216BFD0D8(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216BFD0DC(uint64_t a1, uint64_t a2)
{
  return sub_216B25C38(a1, 40 * a2, 8);
}

uint64_t sub_216BFD0F4(_QWORD *a1, uint64_t *a2)
{
  return sub_216BFD0FC(a1, *a2);
}

uint64_t sub_216BFD0FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = a2;
  v4 = sub_216BF4054(*(_QWORD *)(*a1 + 368), a2);
  v5 = sub_216BFD1BC(v4, a2);
  v6 = (uint64_t *)sub_216BFD1E4((unsigned __int8 *)v5);
  v7 = sub_216BF5F30((unsigned __int8 *)v5);
  if (v6 != (uint64_t *)v7)
  {
    v8 = (uint64_t *)v7;
    do
    {
      v9 = *v6;
      v10 = a1[1];
      v11 = sub_216B2037C(*v6);
      if (!sub_216BD53CC(v10, v11))
      {
        v12 = a1[2];
        sub_216B2037C(v9);
        sub_216BABC28(v12);
      }
      ++v6;
    }
    while (v6 != v8);
  }
  return sub_216B268AC(a1[3], &v14);
}

uint64_t *sub_216BFD1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216BD4830(a1 + 456, &v3);
}

_QWORD *sub_216BFD1E8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  if (a2 <= (*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - a1[1]) >> 3)
    return sub_216BFD2AC((uint64_t)a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B2E220(a1);
  v7 = sub_216B3F830(a1, v6 + a2);
  v8 = sub_216B2E220(a1);
  sub_216BFD328(v10, v7, v8, v5);
  sub_216BFD32C((uint64_t)v10, a2);
  sub_216BFD3A4(a1, v10);
  return (_QWORD *)sub_216BFD490(v10);
}

_QWORD *sub_216BFD2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_216B2F610(&v10, a1, a2);
  v4 = v11;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = sub_216B2C144(a1, v3);
    v8 = nullsub_1(v4, v7);
    sub_216BFD494(v6, v8);
    v4 += 8;
    v11 = v4;
  }
  return sub_216B2C330(&v10);
}

uint64_t sub_216BFD32C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216BFD528(&v9, a1 + 16, a2);
  v3 = v9;
  v4 = v10;
  while (v3 != v4)
  {
    v5 = sub_216B2C5E4(a1);
    v7 = nullsub_1(v9, v6);
    sub_216BFD494(v5, v7);
    v4 = v10;
    v3 = v9 + 8;
    v9 += 8;
  }
  return sub_216B701B0((uint64_t)&v9);
}

uint64_t sub_216BFD3A4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216BFD544();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2E220(a1);
  return nullsub_1(a1, v10);
}

void sub_216BFD498(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

uint64_t *sub_216BFD4A0(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B2F5AC(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 8 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 8 * v9;
  return a1;
}

_QWORD *sub_216BFD52C(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  *result = *a2;
  result[1] = *a2 + 8 * a3;
  result[2] = a2;
  return result;
}

uint64_t sub_216BFD544()
{
  return sub_216BFD560();
}

uint64_t sub_216BFD560()
{
  _QWORD v1[3];

  sub_216BFD584(v1);
  return v1[2];
}

uint64_t sub_216BFD58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216BFD658(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216BFD658@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  while (sub_216B2C76C((uint64_t)v13, (uint64_t)v12))
  {
    v9 = (_QWORD *)sub_216B3FBC4((uint64_t)v13, v8);
    *(_QWORD *)sub_216B3FBE8((uint64_t)v11) = *v9;
    sub_216B3FBF4((uint64_t)v13);
    sub_216B3FBF4((uint64_t)v11);
  }
  return sub_216B26D04((uint64_t)v13, (uint64_t)v11, a7);
}

uint64_t *sub_216BFD6E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216B3FC60((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B3FC68(a1, v4);
    sub_216B2EE74(v2, v3, v5);
  }
  return a1;
}

_QWORD *sub_216BFD740(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  if (a2 <= (*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - a1[1]) >> 4)
    return sub_216BFD804((uint64_t)a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B2D0E0(a1);
  v7 = sub_216B2E6A0(a1, v6 + a2);
  v8 = sub_216B2D0E0(a1);
  sub_216B2E718(v10, v7, v8, v5);
  sub_216BFD880((uint64_t)v10, a2);
  sub_216BFD8F8(a1, v10);
  return (_QWORD *)sub_216B2E808(v10);
}

_QWORD *sub_216BFD804(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_216B2E678(&v10, a1, a2);
  v4 = v11;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = sub_216B2C144(a1, v3);
    v8 = nullsub_1(v4, v7);
    sub_216BFD9E4(v6, v8);
    v4 += 16;
    v11 = v4;
  }
  return sub_216B2C330(&v10);
}

uint64_t sub_216BFD880(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B8FE98(&v9, (_QWORD *)(a1 + 16), a2);
  v3 = v9;
  v4 = v10;
  while (v3 != v4)
  {
    v5 = sub_216B2C5E4(a1);
    v7 = nullsub_1(v9, v6);
    sub_216BFD9E4(v5, v7);
    v4 = v10;
    v3 = v9 + 16;
    v9 += 16;
  }
  return sub_216B701B0((uint64_t)&v9);
}

uint64_t sub_216BFD8F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216BFD9F0();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2D0E0(a1);
  return nullsub_1(a1, v10);
}

void sub_216BFD9E8(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
}

uint64_t sub_216BFD9F0()
{
  return sub_216BFDA0C();
}

uint64_t sub_216BFDA0C()
{
  _QWORD v1[3];

  sub_216BFDA30(v1);
  return v1[2];
}

_QWORD *sub_216BFDA34(_QWORD *result, uint64_t a2)
{
  *result += 224 * a2;
  return result;
}

uint64_t sub_216BFDA48(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B2E220(a1);
  v6 = sub_216B3F830(a1, v5 + 1);
  v7 = sub_216B2E220(a1);
  sub_216BFD328(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216B2F730(v4, v9, a2);
  v13 += 8;
  sub_216BFD3A4(a1, v12);
  v10 = a1[1];
  sub_216BFD490(v12);
  return v10;
}

uint64_t sub_216BFDAF4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, (uint64_t)a2);
  v5 = sub_216B2D0E0(a1);
  v6 = sub_216B2E6A0(a1, v5 + 1);
  v7 = sub_216B2D0E0(a1);
  sub_216B2E718(v12, v6, v7, v4);
  v9 = (__n128 *)nullsub_1(v13, v8);
  sub_216B2E67C(v4, v9, a2);
  v13 += 16;
  sub_216BFD8F8(a1, v12);
  v10 = a1[1];
  sub_216B2E808(v12);
  return v10;
}

uint64_t sub_216BFDBA0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  unsigned int v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v8 = a2;
  v14 = a2;
  v12 = a3;
  v13 = a4;
  if (sub_216B29094((uint64_t)&v12))
    return 1;
  sub_216B64C00(&v11);
  if ((a5 & 1) != 0)
  {
    if (sub_216BFDD50((_DWORD **)a1, v8, &v11, &v14))
    {
      v8 = v14;
LABEL_6:
      sub_216BFDEA8(a1, v8, v11, v12, v13, a6);
      return 1;
    }
  }
  else if ((sub_216BFDC4C((_DWORD **)a1, v8, &v11) & 1) != 0)
  {
    goto LABEL_6;
  }
  result = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_216BFDC4C(_DWORD **a1, unsigned int a2, uint64_t *a3)
{
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v10 = a2;
  if (sub_216B4B4A8(&v10))
    return 0;
  if (sub_216B5E144(&v10))
    sub_216BFE5A0((uint64_t)a1, v10, &v10);
  v5 = *a1;
  if (sub_216B62E10(*a1, v10))
  {
    do
      v10 = sub_216B62E68(v5, v10);
    while ((sub_216B62E10(v5, v10) & 1) != 0);
  }
  if (!sub_216B5E144(&v10) || (result = sub_216BFE5A0((uint64_t)a1, v10, &v10), (_DWORD)result))
  {
    if (!sub_216B4ED84((uint64_t)v5, v10))
    {
      v9 = sub_216B60568(v5, v10);
      if (!sub_216B4B4A8(&v9))
      {
        sub_216BFE5B4(&v8, v9, SHIDWORD(v9));
        v7 = v8;
        *a3 = v8;
        return sub_216BFE5BC((uint64_t)a1, v10, v7);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_216BFDD50(_DWORD **a1, unsigned int a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v7;
  int v8;
  _DWORD *v9;
  uint64_t result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v15 = a2;
  if (sub_216B4B4A8(&v15))
    return 0;
  v7 = sub_216B603E4(*a1, v15);
  v8 = sub_216B711E0(v7, *a1, (uint64_t)a1[1]);
  *a4 = sub_216B62D74(&v15, v8);
  if (sub_216B5E144(&v15))
    sub_216BFE6C0((uint64_t)a1, v15, &v15);
  v9 = *a1;
  if (sub_216B62E10(*a1, v15))
  {
    do
      v15 = sub_216B62E68(v9, v15);
    while ((sub_216B62E10(v9, v15) & 1) != 0);
  }
  if (!sub_216B5E144(&v15) || (result = sub_216BFE6C0((uint64_t)a1, v15, &v15), (_DWORD)result))
  {
    if (!sub_216B4ED84((uint64_t)v9, v15))
    {
      v15 = sub_216B7185C(v15, 0, *a1, (uint64_t)a1[1]);
      v11 = sub_216B4B4A8(&v15);
      result = 0;
      if (v11)
        return result;
      v14 = sub_216B60568(v9, v15);
      if (!sub_216B4B4A8(&v14))
      {
        sub_216BFE5B4(&v13, v14, SHIDWORD(v14));
        v12 = v13;
        *a3 = v13;
        return sub_216BFE5BC((uint64_t)a1, v15, v12);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_216BFDEA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a4;
  v18 = a5;
  result = sub_216B29094((uint64_t)&v17);
  if ((result & 1) == 0)
  {
    sub_216BFE4B0((uint64_t)&v12);
    LODWORD(v12) = 0;
    v14 = a2;
    v15 = a3;
    *((_QWORD *)&v12 + 1) = sub_216BFE4B4(a1, v17, v18);
    v13 = v11;
    v16 = a6;
    return sub_216BFE534(a1 + 40, &v12);
  }
  return result;
}

uint64_t sub_216BFDF24(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, char a5, char a6)
{
  unsigned int v10;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v10 = a2;
  v19 = a4;
  v20 = a2;
  v18 = a3;
  sub_216B64C00(&v17);
  v16 = 0;
  if ((sub_216BFE02C(a1, a3, a4, &v17, &v16) & 1) == 0)
    goto LABEL_8;
  sub_216B64C00(&v15);
  if ((a5 & 1) == 0)
  {
    if ((sub_216BFDC4C((_DWORD **)a1, v10, &v15) & 1) != 0)
      goto LABEL_6;
LABEL_8:
    result = 0;
    *(_BYTE *)(a1 + 32) = 0;
    return result;
  }
  if (!sub_216BFDD50((_DWORD **)a1, v10, &v15, &v20))
    goto LABEL_8;
  v10 = v20;
LABEL_6:
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = sub_216B71D08((unsigned int *)&v18);
    if (sub_216BFE190(v12, v10, v13))
      goto LABEL_8;
  }
  sub_216BFE1E0(a1, v10, v15, v17, v16, a6);
  return 1;
}

uint64_t sub_216BFE02C(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, _DWORD *a5)
{
  _DWORD *v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v22 = a3;
  v8 = *(_DWORD **)a1;
  v21 = sub_216B71A44(a2, a3, *(_DWORD **)a1, *(_QWORD *)(a1 + 8));
  LOBYTE(v22) = v9;
  if ((sub_216B71F50() & 1) != 0)
    return 0;
  LODWORD(v20) = sub_216B71D08((unsigned int *)&v21);
  if ((sub_216B5E144(&v20) & 1) != 0)
    return 0;
  LODWORD(v19) = sub_216B69130(&v21);
  if ((sub_216B5E144(&v19) & 1) != 0)
    return 0;
  v10 = sub_216B71D08((unsigned int *)&v21);
  if (sub_216B4ED84((uint64_t)v8, v10))
    return 0;
  v11 = sub_216B69130(&v21);
  if (sub_216B4ED84((uint64_t)v8, v11))
    return 0;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = (uint64_t *)nullsub_1(&v21, v12);
    if (sub_216B89414(v13, *v14))
      return 0;
  }
  v15 = sub_216B71D08((unsigned int *)&v21);
  v20 = sub_216B60568(v8, v15);
  v16 = sub_216B69130(&v21);
  v19 = sub_216B60568(v8, v16);
  if (sub_216B651D4(&v20, &v19) || HIDWORD(v20) > HIDWORD(v19))
    return 0;
  sub_216BFE5B4(&v18, v20, SHIDWORD(v20));
  *a4 = v18;
  *a5 = HIDWORD(v19) - HIDWORD(v20);
  return 1;
}

BOOL sub_216BFE190(uint64_t a1, int a2, int a3)
{
  unsigned int v6;
  unsigned int v7;

  v7 = sub_216B895EC(a1, a2);
  v6 = sub_216B895EC(a1, a3);
  return sub_216B750B0(&v7, &v6);
}

uint64_t sub_216BFE1E0(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;

  if (a5)
  {
    v11 = result;
    sub_216BFE4B0((uint64_t)&v12);
    LODWORD(v12) = 1;
    v13 = a2;
    v14 = a3;
    v15 = a4;
    v16 = a5;
    v17 = a6;
    return sub_216BFE534(v11 + 40, &v12);
  }
  return result;
}

uint64_t sub_216BFE25C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v11 = a2;
  v12 = a3;
  sub_216B64C00(&v10);
  v9 = 0;
  v6 = sub_216BFE02C(a1, a2, a3, &v10, &v9);
  if ((v6 & 1) != 0)
  {
    v7 = sub_216B71D08((unsigned int *)&v11);
    sub_216BFE2EC(a1, v7, v10, v9);
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
  }
  return v6;
}

uint64_t sub_216BFE2EC(uint64_t result, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a4)
  {
    v7 = result;
    sub_216BFE4B0((uint64_t)&v8);
    LODWORD(v8) = 2;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    return sub_216BFE534(v7 + 40, &v8);
  }
  return result;
}

uint64_t sub_216BFE350(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v15 = a5;
  v16 = a2;
  v17 = a3;
  v14 = a4;
  if (sub_216B29094((uint64_t)&v14))
    return sub_216BFE25C(a1, a2, a3);
  sub_216B64C00(&v13);
  v12 = 0;
  v9 = sub_216B71D08((unsigned int *)&v16);
  if (sub_216BFDC4C((_DWORD **)a1, v9, &v13) && (sub_216BFE02C(a1, v16, v17, &v13, &v12) & 1) != 0)
  {
    v10 = sub_216B71D08((unsigned int *)&v16);
    sub_216BFE2EC(a1, v10, v13, v12);
    v11 = sub_216B71D08((unsigned int *)&v16);
    sub_216BFDEA8(a1, v11, v13, v14, v15, 0);
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

unint64_t sub_216BFE440(unsigned int *a1, int a2)
{
  return *a1 | ((unint64_t)(a1[1] + a2) << 32);
}

uint64_t sub_216BFE450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a1;
  v6[0] = sub_216B6497C((uint64_t)&v8, (uint64_t)&v8 + 4);
  v6[1] = v2;
  v5[0] = sub_216B6497C((uint64_t)&v7, (uint64_t)&v7 + 4);
  v5[1] = v3;
  return sub_216BFE6FC((uint64_t)v6, (uint64_t)v5);
}

uint64_t sub_216BFE4A0(uint64_t a1, uint64_t a2)
{
  return sub_216BFE450(a2, a1);
}

uint64_t sub_216BFE4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;

  v10[0] = a2;
  v10[1] = a3;
  v3 = a1 + 512;
  v4 = sub_216B1E67C((uint64_t)v10);
  v5 = (void *)sub_216B3D300(v3, v4);
  v6 = (const void *)sub_216B1E600((uint64_t)v10);
  v7 = sub_216B1E67C((uint64_t)v10);
  memcpy(v5, v6, v7);
  v8 = sub_216B1E67C((uint64_t)v10);
  sub_216B1E684(&v11, v5, v8);
  return v11;
}

uint64_t sub_216BFE534(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216BFE88C((const void **)a1, 0);
  v4 = sub_216B1E67C(a1);
  v6 = a2[1];
  v5 = a2[2];
  v7 = *a2;
  *(_QWORD *)(v4 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)v4 = v7;
  v8 = sub_216B1E67C(a1) + 56;
  return sub_216B203A4(a1, v8);
}

uint64_t sub_216BFE5A0(uint64_t a1, int a2, unsigned int *a3)
{
  return sub_216B719BC(a2, *(_DWORD **)a1, *(_QWORD *)(a1 + 8), a3);
}

_DWORD *sub_216BFE5B4(_DWORD *a1, int a2, int a3)
{
  return sub_216B775A0(a1, a2, a3);
}

BOOL sub_216BFE5BC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD **v13;
  int v15;
  int v16;
  uint64_t v17;

  v17 = a3;
  v5 = a1 + 40;
  v6 = sub_216B4D4E0(a1 + 40);
  if (v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = (_DWORD *)sub_216BFE6D4(v5, v7);
      if (*v8 == 2)
      {
        v9 = v8;
        v10 = v8 + 7;
        v16 = sub_216B1E4E0(v8 + 7);
        v15 = sub_216B1E4E0((unsigned int *)&v17);
        if (sub_216B4CC88(&v16, &v15))
        {
          if (sub_216BFE4A0(v17, *(_QWORD *)v10))
          {
            v11 = v17;
            v12 = sub_216BFE440(v10, v9[11]);
            if ((sub_216BFE450(v11, v12) & 1) != 0)
              return 0;
          }
        }
      }
      if (v6 == ++v7)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v13 = *(_DWORD ***)(a1 + 24);
    return !v13 || sub_216BFE9E0(v13, a2, v17);
  }
}

uint64_t sub_216BFE6C0(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  return sub_216B71904(a2, *(_DWORD **)a1, *(_QWORD *)(a1 + 8), a3);
}

uint64_t sub_216BFE6D4(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 56 * a2;
}

uint64_t sub_216BFE6FC(uint64_t a1, uint64_t a2)
{
  char v3;

  return sub_216BFE724((uint64_t)&v3, a1, a2);
}

uint64_t sub_216BFE724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v8;
  _DWORD *v9;
  char v10;

  v5 = (_DWORD *)sub_216B262E0(a2);
  v6 = (_DWORD *)sub_216B262E0(a3);
  if (sub_216B65340(v5, v6))
    return 1;
  v8 = (_DWORD *)sub_216B262E0(a3);
  v9 = (_DWORD *)sub_216B262E0(a2);
  if (sub_216B65340(v8, v9))
    return 0;
  else
    return sub_216BFE7BC((uint64_t)&v10, a2, a3);
}

uint64_t sub_216BFE7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v7;

  v5 = *(_DWORD *)sub_216B2C660(a2);
  if (v5 < *(_DWORD *)sub_216B2C660(a3))
    return 1;
  v7 = *(_DWORD *)sub_216B2C660(a3);
  if (v7 >= *(_DWORD *)sub_216B2C660(a2))
    return sub_216B2043C();
  else
    return 0;
}

uint64_t sub_216BFE84C(uint64_t a1)
{
  sub_216B26D14((_QWORD *)(a1 + 8));
  sub_216B4AED0((_DWORD *)(a1 + 24));
  sub_216B64C00((_DWORD *)(a1 + 28));
  sub_216B64C00((_DWORD *)(a1 + 36));
  return a1;
}

char *sub_216BFE88C(const void **a1, uint64_t a2)
{
  return sub_216B203B4(a1, 56 * a2, 56);
}

uint64_t sub_216BFE89C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD v7[2];

  sub_216B26D14(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, a3, v7[0], v7[1]);
}

uint64_t sub_216BFE8F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[152];

  sub_216B295EC(v8);
  sub_216B34DE0(a2, (uint64_t)v8);
  v6 = sub_216BFE960(a1, v4, v5);
  sub_216B2489C(v8);
  return v6;
}

uint64_t sub_216BFE960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;

  v10[0] = a2;
  v10[1] = a3;
  v3 = a1 + 72;
  v4 = sub_216B1E67C((uint64_t)v10);
  v5 = (void *)sub_216B3D300(v3, v4);
  v6 = (const void *)sub_216B1E600((uint64_t)v10);
  v7 = sub_216B1E67C((uint64_t)v10);
  memcpy(v5, v6, v7);
  v8 = sub_216B1E67C((uint64_t)v10);
  sub_216B1E684(&v11, v5, v8);
  return v11;
}

BOOL sub_216BFE9E0(_DWORD **a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  __n128 v12;
  __n128 v13;
  uint64_t v14[2];
  unsigned int v15;
  int v16;
  uint64_t *v17;

  v17 = sub_216BFEAF4((uint64_t)a1, a3);
  v14[0] = sub_216B3875C((uint64_t)(a1 + 3), v6);
  if (sub_216B38758(&v17, v14))
  {
    v7 = (uint64_t *)sub_216B38740((uint64_t)&v17);
    if ((sub_216BFEBAC(*v7, a3) & 1) != 0)
      return 0;
  }
  if (!sub_216B62E10(*a1, a2))
    return 1;
  v16 = sub_216B62EDC(*a1, a2);
  v9 = *a1;
  v8 = (uint64_t)(a1 + 6);
  v15 = sub_216B62EDC(v9, v16);
  v13.n128_u32[0] = sub_216B1E4E0(&v15);
  sub_216BFEBC4(v8, &v13, (uint64_t)v14);
  sub_216BFEC34(v8, (uint64_t)&v12);
  sub_216BFEC7C(&v13, &v12);
  if (!sub_216B50AF4(v14, (uint64_t)&v13))
    return 1;
  v10 = sub_216B1E600((uint64_t)v14);
  return !sub_216B750B0((unsigned int *)(v10 + 4), (unsigned int *)&v16);
}

uint64_t *sub_216BFEAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v10 = a2;
  v2 = a1 + 24;
  v9 = (uint64_t *)sub_216BFF0F0(a1 + 24, &v10);
  v8 = sub_216BFF11C(v2, v3);
  if (!sub_216B3AC28(&v9, &v8)
    && (sub_216BFF148(&v9),
        v5 = sub_216B38740((uint64_t)&v9),
        v8 = *(_QWORD *)sub_216B38740((uint64_t)&v9),
        v6 = sub_216BFE440((unsigned int *)&v8, *(_DWORD *)(v5 + 24)),
        sub_216BFF614(v10, v8))
    && sub_216BFE450(v10, v6))
  {
    return v9;
  }
  else
  {
    return (uint64_t *)sub_216B3875C(v2, v4);
  }
}

uint64_t sub_216BFEBAC(uint64_t a1, uint64_t a2)
{
  return sub_216BFF16C(a1, a2) ^ 1;
}

uint64_t sub_216BFEBC4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216BFFCD0(a1, a2, &v8))
    return sub_216BFEC34(a1, a3);
  v5 = v8;
  v6 = sub_216B4CB78(a1);
  return sub_216B4F71C(a3, v5, v6, 1);
}

uint64_t sub_216BFEC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B4CB78(a1);
  v5 = sub_216B4CB78(a1);
  return sub_216B4F71C(a2, v4, v5, 1);
}

BOOL sub_216BFEC80(_DWORD **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _BOOL8 v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE v16[24];
  _DWORD v17[6];
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a3;
  v19 = a4;
  v20 = a5;
  v9 = sub_216BFE9E0(a1, a2, a3);
  if (v9 && !sub_216B29094((uint64_t)&v19))
  {
    if (sub_216B62E10(*a1, a2))
    {
      v10 = sub_216B62EDC(*a1, a2);
      LODWORD(v18[0]) = sub_216B62EDC(*a1, v10);
      v17[0] = sub_216B1E4E0((unsigned int *)v18);
      *sub_216BFEDAC((uint64_t)(a1 + 6), v17) = v10;
    }
    v11 = (uint64_t *)sub_216BFEDC4((uint64_t)(a1 + 3), &v21);
    if (sub_216B29094((uint64_t)v11))
    {
      v12 = sub_216BFE960((uint64_t)a1, v19, v20);
    }
    else
    {
      if (a6)
      {
        sub_216B25FB0((uint64_t)v17, (uint64_t)&v19);
        v14 = v11;
      }
      else
      {
        sub_216B25FB0((uint64_t)v17, (uint64_t)v11);
        v14 = &v19;
      }
      sub_216B25FB0((uint64_t)v16, (uint64_t)v14);
      sub_216B29830(v18, v17, v16);
      v12 = sub_216BFE8F4((uint64_t)a1, v18);
    }
    *v11 = v12;
    v11[1] = v13;
  }
  return v9;
}

_DWORD *sub_216BFEDAC(uint64_t a1, _DWORD *a2)
{
  return sub_216BFFE20(a1, a2) + 1;
}

uint64_t sub_216BFEDC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v10 = sub_216B514B8((uint64_t)a2);
  nullsub_1(v10, v4);
  v11[0] = sub_216C000D0(a1, a2, (uint64_t)&unk_216C19620, (uint64_t)&v10, (uint64_t)&v9);
  v11[1] = v5;
  v6 = sub_216B3B45C((uint64_t)v11);
  return nullsub_1(v6, v7) + 8;
}

uint64_t sub_216BFEE2C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t i;
  uint64_t *v33;
  uint64_t v34;
  const void *v35[19];

  if (a5)
  {
    sub_216B295EC(v35);
    v34 = a4;
    v12 = sub_216BFE440((unsigned int *)&v34, a5);
    v33 = (uint64_t *)sub_216BFF0F0((uint64_t)(a1 + 3), &v34);
    i = sub_216BFF11C((uint64_t)(a1 + 3), v13);
    if (sub_216B38758(&v33, &i))
      sub_216BFF148(&v33);
    for (i = sub_216B3875C((uint64_t)(a1 + 3), v14); sub_216B38758(&v33, &i); i = sub_216B3875C((uint64_t)(a1 + 3), v18))
    {
      v16 = sub_216B38740((uint64_t)&v33);
      i = *(_QWORD *)sub_216B38740((uint64_t)&v33);
      v17 = sub_216BFE440((unsigned int *)&i, *(_DWORD *)(v16 + 24));
      if ((sub_216BFF16C(v34, i) & 1) != 0)
        break;
      if (sub_216BFE450(v34, v17))
      {
        if (sub_216BFE4A0(v34, i))
        {
          v34 = v17;
          sub_216BFF1A4((uint64_t *)&v33);
        }
        break;
      }
      sub_216BFF1A4((uint64_t *)&v33);
    }
    for (i = sub_216B3875C((uint64_t)(a1 + 3), v15); sub_216B38758(&v33, &i); i = sub_216B3875C((uint64_t)(a1 + 3), v25))
    {
      v20 = (uint64_t *)sub_216B38740((uint64_t)&v33);
      if (!sub_216BFE4A0(v12, *v20))
        break;
      v21 = sub_216B38740((uint64_t)&v33);
      i = *(_QWORD *)sub_216B38740((uint64_t)&v33);
      v22 = sub_216BFE440((unsigned int *)&i, *(_DWORD *)(v21 + 24));
      if (sub_216BFE450(v34, i))
      {
        v31 = 0;
        v23 = sub_216BFF1C8(a1, v34, i, &v31);
        if (v31)
          goto LABEL_20;
        sub_216B341A4(v35, v23, v24);
      }
      sub_216B341A4(v35, *(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + 16));
      v34 = v22;
      sub_216BFF1A4((uint64_t *)&v33);
    }
    if (sub_216BFE450(v34, v12))
    {
      LOBYTE(i) = 0;
      v26 = sub_216BFF1C8(a1, v34, v12, &i);
      if ((_BYTE)i)
      {
LABEL_20:
        v19 = 0;
LABEL_23:
        sub_216B2489C(v35);
        return v19;
      }
      sub_216B341A4(v35, v26, v27);
    }
    v28 = sub_216B24850((uint64_t)v35);
    v19 = sub_216BFEC80((_DWORD **)a1, a2, a3, v28, v29, a6);
    goto LABEL_23;
  }
  return 1;
}

uint64_t sub_216BFF0F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = sub_216C003F4(a1, a2);
  sub_216B20C64(&v4, v2);
  return v4;
}

uint64_t sub_216BFF11C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = sub_216C004B4(a1, a2);
  sub_216B20C64(&v4, v2);
  return v4;
}

uint64_t **sub_216BFF148(uint64_t **a1)
{
  sub_216C004E0(a1);
  return a1;
}

uint64_t sub_216BFF16C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  LODWORD(result) = sub_216B4CC88(&v4, &v3);
  if (HIDWORD(v4) == HIDWORD(v3))
    return result;
  else
    return 0;
}

uint64_t *sub_216BFF1A4(uint64_t *a1)
{
  sub_216C0050C(a1);
  return a1;
}

uint64_t sub_216BFF1C8(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a3;
  v16 = a2;
  v6 = *a1;
  v7 = sub_216B1E4E0((unsigned int *)&v16);
  v14 = sub_216B64050(v6, v7);
  v8 = sub_216B693F8((uint64_t)&v16);
  v14 = sub_216B62D74(&v14, v8);
  LODWORD(v6) = sub_216B693F8((uint64_t)&v15);
  v9 = sub_216B693F8((uint64_t)&v16);
  v10 = sub_216B62D74(&v14, (int)v6 - v9);
  v11 = sub_216B7744C(v14, v10);
  return sub_216B71E54(v11, v12, (_DWORD *)*a1, a1[1], a4);
}

uint64_t sub_216BFF270(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a3;
  if (a4)
  {
    v5 = result;
    v6 = sub_216BFE440((unsigned int *)&v37, a4);
    v36 = v6;
    v7 = v5 + 24;
    v35 = (uint64_t *)sub_216BFF0F0(v7, &v37);
    v30[0] = sub_216BFF11C(v7, v8);
    if (sub_216B38758(&v35, v30))
      sub_216BFF148(&v35);
    for (v30[0] = sub_216B3875C(v7, v9); sub_216B38758(&v35, v30); v30[0] = sub_216B3875C(v7, v12))
    {
      v10 = sub_216B38740((uint64_t)&v35);
      v30[0] = *(_QWORD *)sub_216B38740((uint64_t)&v35);
      v11 = sub_216BFE440((unsigned int *)v30, *(_DWORD *)(v10 + 24));
      if ((sub_216BFE450(v37, v11) & 1) != 0)
        break;
      sub_216BFF1A4((uint64_t *)&v35);
    }
    sub_216B64C00(&v34);
    sub_216B64C00(&v33);
    v30[0] = sub_216B3875C(v7, v13);
    if (sub_216B3AC28(&v35, v30))
    {
      sub_216B51A7C(&v31, v35);
      sub_216BFF610(v29);
      sub_216BFF600((uint64_t)&v37, (uint64_t)v29, (uint64_t)v30);
      v32 = sub_216BFF5D4();
      result = sub_216B38740((uint64_t)&v32);
      *(_DWORD *)(result + 24) = a4;
      return result;
    }
    v14 = sub_216B38740((uint64_t)&v35);
    v32 = *(_QWORD *)sub_216B38740((uint64_t)&v35);
    v15 = sub_216BFE440((unsigned int *)&v32, *(_DWORD *)(v14 + 24));
    if (sub_216BFE450(v37, v32))
    {
      sub_216B51A7C(&v27, v35);
      sub_216BFF610(v29);
      sub_216BFF600((uint64_t)&v37, (uint64_t)v29, (uint64_t)v30);
      v28 = sub_216BFF5D4();
      v33 = v6;
      v34 = v37;
      v17 = sub_216B38740((uint64_t)&v28);
      *(_DWORD *)(v17 + 24) = a4;
    }
    else
    {
      v33 = v15;
      v34 = v32;
      v17 = sub_216B38740((uint64_t)&v35);
      result = sub_216BFF614(v33, v6);
      if ((result & 1) != 0)
        return result;
      v18 = sub_216B693F8((uint64_t)&v36);
      v19 = sub_216B693F8((uint64_t)&v33);
      v20 = v37;
      v33 = v36;
      *(_DWORD *)(v17 + 24) += v18 - v19;
      if (sub_216BFF16C(v32, v20))
      {
        sub_216B26D14(v30);
        *(_OWORD *)(v17 + 8) = *(_OWORD *)v30;
      }
      sub_216BFF1A4((uint64_t *)&v35);
    }
    v30[0] = sub_216B3875C(v7, v16);
    result = sub_216B38758(&v35, v30);
    if ((_DWORD)result)
    {
      do
      {
        v21 = sub_216B38740((uint64_t)&v35);
        v30[0] = *(_QWORD *)sub_216B38740((uint64_t)&v35);
        v22 = sub_216BFE440((unsigned int *)v30, *(_DWORD *)(v21 + 24));
        v29[0] = v22;
        result = sub_216BFF614(v30[0], v33);
        if ((result & 1) != 0)
          break;
        if ((sub_216BFF62C(v22, v33) & 1) == 0)
        {
          result = sub_216BFE450(v30[0], v33);
          if ((_DWORD)result)
          {
            v25 = sub_216B693F8((uint64_t)v29);
            v26 = sub_216B693F8((uint64_t)&v33);
            v33 = v29[0];
            *(_DWORD *)(v17 + 24) += v25 - v26;
            return sub_216BFF650(v7, (uint64_t)v35);
          }
          return result;
        }
        v23 = sub_216BFF698((uint64_t *)&v35);
        sub_216BFF650(v7, v23);
        v30[0] = sub_216B3875C(v7, v24);
        result = sub_216B38758(&v35, v30);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t sub_216BFF5D4()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_216C00558();
  sub_216B20C64(&v2, v0);
  return v2;
}

uint64_t sub_216BFF600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216C00538(a3, a1, a2);
}

uint64_t sub_216BFF614(uint64_t a1, uint64_t a2)
{
  return sub_216BFE450(a1, a2) ^ 1;
}

uint64_t sub_216BFF62C(uint64_t a1, uint64_t a2)
{
  return sub_216BFE450(a2, a1) ^ 1;
}

uint64_t sub_216BFF650(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  sub_216B20C64(&v5, a2);
  v3 = sub_216C00964(a1, v5);
  sub_216B20C64(&v6, v3);
  return v6;
}

uint64_t sub_216BFF698(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_216BFF1A4(a1);
  return v1;
}

uint64_t sub_216BFF6BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;

  v4 = sub_216BFF790(a2);
  if ((_DWORD)v4)
  {
    v5 = sub_216BFF798(a2);
    v6 = sub_216BFF7A0(a2);
    if (v5 != v6)
    {
      v8 = v6;
      v9 = (unsigned __int8 *)(v5 + 48);
      do
      {
        v10 = *((_DWORD *)v9 - 12);
        switch(v10)
        {
          case 2:
            sub_216BFF270((uint64_t)a1, v7, *(_QWORD *)(v9 - 20), *((_DWORD *)v9 - 1));
            break;
          case 1:
            sub_216BFEE2C(a1, *((_DWORD *)v9 - 6), *(_QWORD *)(v9 - 20), *(_QWORD *)(v9 - 12), *((_DWORD *)v9 - 1), *v9);
            break;
          case 0:
            sub_216BFEC80((_DWORD **)a1, *((_DWORD *)v9 - 6), *(_QWORD *)(v9 - 20), *((_QWORD *)v9 - 5), *((_QWORD *)v9 - 4), *v9);
            break;
        }
        v11 = v9 + 8;
        v9 += 56;
      }
      while (v11 != (unsigned __int8 *)v8);
    }
  }
  return v4;
}

uint64_t sub_216BFF790(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_216BFF798(uint64_t a1)
{
  return sub_216B1E600(a1 + 40);
}

uint64_t sub_216BFF7A0(uint64_t a1)
{
  return sub_216B1E67C(a1 + 40);
}

uint64_t sub_216BFF7A8(_DWORD **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23[19];

  sub_216B295EC(v23);
  sub_216B64C00(&v22);
  sub_216B64C00(&v21);
  if (!sub_216B4C998((uint64_t)(a1 + 3), v4))
  {
    v20 = sub_216BFF11C((uint64_t)(a1 + 3), v5);
    v22 = *(_QWORD *)sub_216B38740((uint64_t)&v20);
    v6 = sub_216B38740((uint64_t)&v20);
    sub_216B6C7A4(v23, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    v7 = *(_DWORD *)(sub_216B38740((uint64_t)&v20) + 24);
    v21 = sub_216BFE440((unsigned int *)&v22, v7);
    sub_216BFF1A4(&v20);
    v19 = sub_216B3875C((uint64_t)(a1 + 3), v8);
    if (sub_216B38758(&v20, &v19))
    {
      do
      {
        v9 = *(_QWORD *)sub_216B38740((uint64_t)&v20);
        v10 = sub_216B38740((uint64_t)&v20);
        v11 = *(_QWORD *)(v10 + 8);
        v12 = *(_QWORD *)(v10 + 16);
        v13 = *(_DWORD *)(v10 + 24);
        if (sub_216BFF16C(v9, v21))
        {
          sub_216B341A4(v23, v11, v12);
          sub_216BFE440((unsigned int *)&v21, v13);
          v13 += v7;
        }
        else
        {
          v14 = sub_216B24850((uint64_t)v23);
          sub_216BFF97C(a2, v14, v15, v22, v7, *a1, a1[1]);
          v22 = v9;
          sub_216B6C7A4(v23, v11, v12);
          v21 = sub_216BFE440((unsigned int *)&v22, v13);
        }
        sub_216BFF1A4(&v20);
        v7 = v13;
      }
      while (sub_216B38758(&v20, &v19));
    }
    else
    {
      v13 = v7;
    }
    v16 = sub_216B24850((uint64_t)v23);
    sub_216BFF97C(a2, v16, v17, v22, v13, *a1, a1[1]);
  }
  return sub_216B2489C(v23);
}

uint64_t sub_216BFF97C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6, _QWORD *a7)
{
  int v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  __int128 v23;

  v9 = a5;
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v22 = a4;
  v21 = a5;
  v11 = sub_216B1E4E0((unsigned int *)&v22);
  v20 = sub_216B64050((uint64_t)a6, v11);
  v12 = sub_216B693F8((uint64_t)&v22);
  v20 = sub_216B62D74(&v20, v12);
  if (sub_216B29094((uint64_t)&v23))
  {
    sub_216BFFAB8(a6, a7, v20, v22, &v21, &v23);
    v9 = v21;
  }
  v13 = v20;
  v14 = sub_216B62D74(&v20, v9);
  v15 = sub_216B7744C(v13, v14);
  v17 = v16;
  if (sub_216B29094((uint64_t)&v23))
    return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 32))(a1, v15, v17);
  v19 = *a1;
  if (v9)
    return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(v19 + 24))(a1, v15, v17, v23, *((_QWORD *)&v23 + 1));
  else
    return (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, _QWORD))(v19 + 16))(a1, v20, v23, *((_QWORD *)&v23 + 1));
}

_QWORD *sub_216BFFAA0(_QWORD *a1)
{
  _QWORD *result;

  result = sub_216B26D14(a1);
  *((_DWORD *)result + 4) = 0;
  return result;
}

double sub_216BFFAB8(_DWORD *a1, _QWORD *a2, unsigned int a3, uint64_t a4, _DWORD *a5, _OWORD *a6)
{
  double result;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  __int128 v21;
  _QWORD v22[2];
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25[3];
  unsigned int v26;

  v26 = a3;
  *(_QWORD *)v25 = a4;
  v24 = sub_216B7139C(a3, a1, (uint64_t)a2);
  if (!sub_216B750B0(&v24, &v26))
  {
    v23 = 0;
    v11 = sub_216B1E4E0(v25);
    v22[0] = sub_216B627D4((uint64_t)a1, v11, &v23);
    v22[1] = v12;
    if (!v23)
    {
      v13 = sub_216B693F8((uint64_t)v25);
      v14 = (*a5 + v13);
      v15 = sub_216B26288(v22, v14);
      v16 = v15;
      if (v13)
      {
        v17 = sub_216B26288(v22, (v13 - 1));
        if (v16 != 32)
        {
          v20 = sub_216B26288(v22, v14);
          if ((sub_216BFFC8C(v17, v20, a2) & 1) == 0)
          {
            sub_216B1E678((int)&v21, " ");
            result = *(double *)&v21;
            *a6 = v21;
          }
          return result;
        }
        v18 = sub_216B26288(v22, (v14 - 1));
        v19 = sub_216B26288(v22, (v14 + 1));
        if (!sub_216BFFC18(v17, v18, v19, a2))
          return result;
      }
      else if (v15 != 32)
      {
        return result;
      }
      ++*a5;
    }
  }
  return result;
}

uint64_t sub_216BFFC18(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, _QWORD *a4)
{
  uint64_t result;

  result = sub_216BFFC8C(a1, a3, a4);
  if ((_DWORD)result)
  {
    if (sub_216B71384(a1) || sub_216B71384(a3))
      return 1;
    else
      return sub_216BFFC8C(a2, a3, a4) ^ 1;
  }
  return result;
}

uint64_t sub_216BFFC8C(unsigned __int8 a1, unsigned __int8 a2, _QWORD *a3)
{
  if (sub_216B71F68(a1, a3))
    return sub_216B71F68(a2, a3) ^ 1;
  else
    return 1;
}

uint64_t sub_216BFFCD0(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = sub_216BFFD08(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t sub_216BFFD08(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v15 = sub_216B4CB74();
    v14 = sub_216BFFE18();
    v9 = v8 - 1;
    v10 = sub_216BFFE1C(a2) & (v8 - 1);
    v11 = (_DWORD *)(v6 + 8 * v10);
    if (sub_216B4CC88(a2, v11))
    {
LABEL_8:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (!sub_216B4CC88(v11, &v15))
      {
        if (sub_216B4CC88(v11, &v14) && v12 == 0)
          v12 = v11;
        v10 = (v10 + v13) & v9;
        v11 = (_DWORD *)(v6 + 8 * v10);
        ++v13;
        if (sub_216B4CC88(a2, v11))
          goto LABEL_8;
      }
      result = 0;
      if (v12)
        v11 = v12;
    }
    *a3 = v11;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

_DWORD *sub_216BFFE20(uint64_t a1, _DWORD *a2)
{
  int v5;
  _DWORD *v6;

  v6 = 0;
  if (sub_216BFFCD0(a1, a2, &v6))
    return v6;
  sub_216B4AED0(&v5);
  return sub_216BFFE7C(a1, a2, &v5, v6);
}

_DWORD *sub_216BFFE7C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *result;

  result = sub_216BFFEB4(a1, a2, a4);
  *result = *a2;
  result[1] = *a3;
  return result;
}

_DWORD *sub_216BFFEB4(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _DWORD *v10;

  v10 = a3;
  v5 = sub_216B4D0A4(a1);
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216BFFF9C(a1, (2 * v6));
    sub_216BFFCD0(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216BFFF9C(a1, v7);
    sub_216BFFCD0(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v9 = sub_216B4CB74();
  if (!sub_216B4CC88(v10, &v9))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216BFFFA0(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B4CAC0(a1, *v5);
  if (v4)
  {
    sub_216C00028(a1, v4, &v4[2 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B4CB08(a1);
  }
}

uint64_t sub_216C00028(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;

  sub_216B4CB08(a1);
  v10 = sub_216B4CB74();
  result = sub_216BFFE18();
  v9 = result;
  while (a2 != a3)
  {
    result = sub_216B4CC88(a2, &v10);
    if ((result & 1) == 0)
    {
      result = sub_216B4CC88(a2, &v9);
      if ((result & 1) == 0)
      {
        v8 = 0;
        sub_216BFFCD0(a1, a2, &v8);
        v7 = v8;
        *v8 = *a2;
        v7[1] = a2[1];
        result = sub_216B4D0B0(a1);
      }
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_216C000D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  uint64_t *v19;
  uint64_t v20;

  v9 = sub_216C001A0(a1, &v19, a2);
  v10 = *v9;
  v18 = 0;
  if (!v10)
  {
    v11 = v9;
    sub_216C0025C(a1, a3, a4, a5, (uint64_t)v17);
    v12 = v19;
    v14 = (_QWORD *)sub_216B25CA8((uint64_t)v17, v13);
    sub_216B3BA48(a1, (uint64_t)v12, v11, v14);
    v10 = sub_216B28054((uint64_t)v17, v15);
    v18 = 1;
    sub_216B3BAD0(v17);
  }
  sub_216B20C64(v17, v10);
  sub_216B31104(&v20, v17, &v18);
  return v20;
}

uint64_t *sub_216C001A0(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_216B3A8D8(a1, (uint64_t)a2);
  v8 = sub_216B3BAD4(a1, v7);
  if (v6)
  {
    v10 = (uint64_t *)v8;
    do
    {
      while (1)
      {
        v11 = (uint64_t *)v6;
        v12 = sub_216B2C144(a1, v9);
        v13 = v6 + 32;
        if (!sub_216C0030C(v12, a3, v13))
          break;
        v6 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_10;
      }
      v14 = sub_216B2C144(a1, v9);
      if (!sub_216C00340(v14, v13, a3))
        break;
      v10 = v11 + 1;
      v6 = v11[1];
    }
    while (v6);
  }
  else
  {
    v11 = (uint64_t *)sub_216B3A914(a1, v9);
    v10 = v11;
  }
LABEL_10:
  *a2 = v11;
  return v10;
}

uint64_t sub_216C0025C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = sub_216B3A8F0(a1, a2);
  v10 = sub_216B3BAD8(v9, 1);
  sub_216B3BADC((uint64_t)&v18, v9, 0);
  v11 = sub_216B3BAE0(a5, v10);
  v13 = sub_216B25CA8(v11, v12);
  v15 = j_nullsub_1(v13 + 32, v14);
  sub_216C00380(v9, v15, a2, a3, a4);
  result = sub_216B3BAE8(a5, v16);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_216C0030C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)nullsub_1(a3, a2);
  return sub_216C00374(a1, a2, v5);
}

uint64_t sub_216C00340(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)nullsub_1(a2, a2);
  return sub_216C00374(a1, v5, a3);
}

uint64_t sub_216C00374(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_216BFE450(*a2, *a3);
}

uint64_t sub_216C00384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_216C00390(a2, *a4);
}

uint64_t sub_216C00390(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  return sub_216C003B8(a1, &v4, &v3);
}

_QWORD *sub_216C003BC(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)sub_216B262E0(a2);
  sub_216BFF610(a1 + 1);
  return a1;
}

uint64_t sub_216C003F4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)sub_216B3A8D8(a1, (uint64_t)a2);
  v6 = sub_216B3A914(a1, v5);
  return sub_216C0043C(a1, a2, v4, v6);
}

uint64_t sub_216C0043C(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v12;

  if (a3)
  {
    v5 = a3;
    do
    {
      v8 = sub_216B2C144(a1, (uint64_t)a2);
      v9 = sub_216C0030C(v8, a2, (uint64_t)(v5 + 4));
      v10 = v5 + 1;
      if (v9)
      {
        v10 = v5;
        a4 = (uint64_t)v5;
      }
      v5 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  sub_216B20C64(&v12, a4);
  return v12;
}

uint64_t sub_216C004B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v2 = (uint64_t *)nullsub_1(a1, a2);
  sub_216B20C64(&v4, *v2);
  return v4;
}

uint64_t **sub_216C004E0(uint64_t **a1)
{
  *a1 = (uint64_t *)sub_216B680B4(*a1);
  return a1;
}

uint64_t *sub_216C0050C(uint64_t *a1)
{
  *a1 = (uint64_t)sub_216B52158(*a1);
  return a1;
}

__n128 sub_216C0053C(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  __n128 result;

  *(_QWORD *)a1 = *a2;
  result = *a3;
  *(_QWORD *)(a1 + 24) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_216C00560(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_216C00568(a1, a2, a3, (uint64_t)a3);
}

uint64_t sub_216C00568(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = sub_216C00624(a1, a2, &v17, &v16, a3);
  v7 = *v6;
  v15 = 0;
  if (!v7)
  {
    v8 = v6;
    sub_216C007F4(a1, a4, (uint64_t)v14);
    v9 = v17;
    v11 = (_QWORD *)sub_216B25CA8((uint64_t)v14, v10);
    sub_216B3BA48(a1, (uint64_t)v9, v8, v11);
    v7 = sub_216B28054((uint64_t)v14, v12);
    v15 = 1;
    sub_216B3BAD0(v14);
  }
  sub_216B20C64(v14, v7);
  sub_216B31104(&v18, v14, &v15);
  return v18;
}

uint64_t *sub_216C00624(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;

  v31 = a2;
  v9 = sub_216B3B300(a1, (uint64_t)a2);
  sub_216B20C64(&v30, v9);
  if (!sub_216B37620(&v31, &v30))
  {
    v11 = sub_216B2C144(a1, v10);
    v12 = sub_216B3B360((uint64_t)&v31);
    if ((sub_216C0030C(v11, a5, v12) & 1) == 0)
    {
      v19 = sub_216B2C144(a1, v10);
      v20 = sub_216B3B360((uint64_t)&v31);
      if (!sub_216C00340(v19, v20, a5))
      {
        v27 = v31;
        *a3 = v31;
        *a4 = (uint64_t)v27;
        return a4;
      }
      v21 = v31;
      sub_216C0088C((uint64_t)v31, 1);
      v30 = v21;
      v23 = sub_216B3B300(a1, v22);
      sub_216B20C64(&v29, v23);
      if (sub_216B37620(&v30, &v29)
        || (v25 = sub_216B2C144(a1, v24), v26 = sub_216B3B360((uint64_t)&v30), (sub_216C0030C(v25, a5, v26) & 1) != 0))
      {
        if (!*(_QWORD *)(sub_216B1E600((uint64_t)&v31) + 8))
        {
          v18 = v31;
          goto LABEL_7;
        }
        a4 = v30;
LABEL_13:
        *a3 = a4;
        return a4;
      }
      return sub_216C001A0(a1, a3, a5);
    }
  }
  v30 = v31;
  v13 = sub_216C004B4(a1, v10);
  sub_216B20C64(&v29, v13);
  if (!sub_216B37620(&v30, &v29))
  {
    v15 = sub_216B2C144(a1, v14);
    v16 = sub_216C004E0(&v30);
    v17 = sub_216B3B360((uint64_t)v16);
    if ((sub_216C00340(v15, v17, a5) & 1) == 0)
      return sub_216C001A0(a1, a3, a5);
  }
  a4 = v31;
  if (!*v31)
    goto LABEL_13;
  v18 = v30;
LABEL_7:
  *a3 = v18;
  return v18 + 1;
}

uint64_t sub_216C007F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = sub_216B3A8F0(a1, a2);
  v6 = sub_216B3BAD8(v5, 1);
  sub_216B3BADC((uint64_t)&v14, v5, 0);
  v7 = sub_216B3BAE0(a3, v6);
  v9 = sub_216B25CA8(v7, v8);
  v11 = j_nullsub_1(v9 + 32, v10);
  sub_216C00934(v5, v11, a2);
  result = sub_216B3BAE8(a3, v12);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216C0088C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_216C008B4(&v2, a2);
}

uint64_t **sub_216C008B4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216C008E0(a1, v3);
}

uint64_t **sub_216C008E0(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  unint64_t v4;

  v2 = a2;
  v3 = result;
  if (a2 < 0)
  {
    do
      result = sub_216C004E0(v3);
    while (!__CFADD__(v2++, 1));
  }
  else if (a2)
  {
    v4 = a2 + 1;
    do
    {
      result = (uint64_t **)sub_216C0050C((uint64_t *)v3);
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

uint64_t sub_216C00938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216C00944(a2, a3);
}

__n128 sub_216C00948(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_216C00964(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a2;
  v3 = sub_216B1E600((uint64_t)&v11);
  v4 = sub_216C009E8(a1, v3);
  v6 = sub_216B3A8F0(a1, v5);
  v7 = sub_216B3B360((uint64_t)&v11);
  v9 = j_nullsub_1(v7, v8);
  sub_216B3A8F8(v6, v9);
  sub_216B3A900(v6, v3, 1);
  return v4;
}

uint64_t sub_216C009E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v11;

  sub_216B20C64(&v11, a2);
  sub_216C0050C(&v11);
  if (*(_QWORD *)nullsub_1(a1, v4) == a2)
  {
    v6 = v11;
    *(_QWORD *)nullsub_1(a1, v5) = v6;
  }
  v7 = (_QWORD *)sub_216B2C144(a1, v5);
  --*v7;
  v9 = (uint64_t **)sub_216B3A914(a1, v8);
  sub_216B51DE4(*v9, a2);
  return v11;
}

uint64_t sub_216C00A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_24D606530;
  *(_QWORD *)(a1 + 8) = a2;
  sub_216B4AEC8(a1 + 16, a3);
  sub_216B4AED0((_DWORD *)(a1 + 24));
  sub_216B4AED0((_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

_QWORD *sub_216C00AC0(_QWORD *a1)
{
  *a1 = off_24D606530;
  sub_216B4B0A0(a1 + 2);
  return a1;
}

uint64_t sub_216C00AF8(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, _DWORD *a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28[2];
  unsigned int v29;
  uint64_t v30[2];
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37;
  _BYTE v38[24];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE v43[472];
  _BYTE v44[264];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v42 = a2;
  v40 = a6;
  v41 = a7;
  v39 = a9;
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, a11);
  if (sub_216B27BAC(&v42))
  {
    v17 = (uint64_t *)sub_216B1E600((uint64_t)&v40);
    v18 = (uint64_t *)sub_216B4C810(&v40);
    sub_216C00DE0((uint64_t)v44, v17, v18);
    sub_216B4AED8(v43);
    if (!sub_216B29094((uint64_t)&v39))
    {
      sub_216C00DE4(v39, *((uint64_t *)&v39 + 1), (uint64_t)a10, a1[1], (uint64_t)v43);
      sub_216C01008(&v35, v43);
      v39 = v35;
    }
    v19 = sub_216B1E600((uint64_t)&v39);
    v20 = sub_216B4C820(&v39);
    if (v19 != v20)
    {
      v21 = v20;
      do
      {
        if (sub_216B774B4(v19))
          sub_216B4B57C((uint64_t)v44, v19);
        v19 += 56;
      }
      while (v19 != v21);
    }
    v37 = v42;
    v22 = sub_216B9B2C0(a10, v42);
    v42 = v22;
    v23 = sub_216B1E600((uint64_t)(a1 + 2));
    sub_216B63858((uint64_t)a10, v22, (*(_DWORD *)(v23 + 4) >> 10) & 1, (uint64_t)&v35);
    v33 = v35;
    v34 = v36;
    sub_216C0100C((uint64_t)a1, v42, (uint64_t)&v33, a3, (uint64_t)a10);
    v32 = v36;
    v31 = v35;
    (*(void (**)(uint64_t *, _QWORD, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t))(*a1 + 16))(a1, v42, &v31, a3, a4, a5, v40, v41, a10, a11);
    v24 = v42;
    sub_216C01194(v30, v44);
    sub_216C010BC((uint64_t)a1, v24, a3, v30[0], v30[1], v39, *((uint64_t *)&v39 + 1), a10);
    if (sub_216B27BAC(&v37) && sub_216B5E144(&v37))
    {
      v29 = 0;
      v25 = v37;
      sub_216C01194(v28, v44);
      sub_216C01198((uint64_t)a1, v25, a3, v28[0], v28[1], v39, *((uint64_t *)&v39 + 1), a10, &v29, 0);
    }
    sub_216B4B094(v43);
    sub_216B1FF6C(v44);
  }
  else
  {
    v26 = v42;
    sub_216B6402C((uint64_t)v38);
    (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t))(*a1 + 16))(a1, v26, v38, a3, a4, a5, a6, a7, a10, a11);
  }
  *((_DWORD *)a1 + 6) = v42;
  *((_DWORD *)a1 + 8) = a3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 72))(a1, a11, a3);
}

uint64_t sub_216C00DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  _QWORD v24[2];
  uint64_t v25[26];
  _BYTE v26[648];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v24[0] = a1;
  v24[1] = a2;
  sub_216C01D50((uint64_t)v26, a3, a4, 0);
  v9 = sub_216B1E600((uint64_t)v24);
  v10 = sub_216B4C820(v24);
  if (v9 != v10)
  {
    v12 = v10;
    v13 = (char *)(v9 + 48);
    do
    {
      if (sub_216B25DD0((uint64_t)(v13 - 24), v11))
      {
        if (sub_216B774B4(v13 - 36))
        {
          v14 = sub_216B71D08((unsigned int *)v13 - 12);
          v5 = v5 & 0xFFFFFFFF00000000 | *((unsigned int *)v13 - 7);
          sub_216BFDF24((uint64_t)v26, v14, *(_QWORD *)(v13 - 36), v5, 0, *v13);
        }
        else
        {
          v6 = v6 & 0xFFFFFFFF00000000 | *((unsigned int *)v13 - 10);
          sub_216BFE25C((uint64_t)v26, *((_QWORD *)v13 - 6), v6);
        }
      }
      else if ((sub_216B71E34((uint64_t)(v13 - 48)) & 1) != 0
             || (LODWORD(v25[0]) = sub_216B71D08((unsigned int *)v13 - 12),
                 LODWORD(v21[0]) = sub_216B69130(v13 - 48),
                 sub_216B750B0((unsigned int *)v25, (unsigned int *)v21)))
      {
        v15 = *((_QWORD *)v13 - 6);
        v16 = *((unsigned int *)v13 - 10);
        sub_216B26CA0(v23, v13 - 24);
        v9 = v9 & 0xFFFFFFFF00000000 | v16;
        sub_216BFE350((uint64_t)v26, v15, v9, v23[0], v23[1]);
      }
      else
      {
        v17 = sub_216B71D08((unsigned int *)v13 - 12);
        sub_216B26CA0(v22, v13 - 24);
        sub_216BFDBA0((uint64_t)v26, v17, v22[0], v22[1], 0, *v13);
      }
      v18 = v13 + 8;
      v13 += 56;
    }
    while (v18 != (char *)v12);
  }
  sub_216C01D54(v25, a3, a4, 0);
  if ((sub_216BFF6BC(v25, (uint64_t)v26) & 1) != 0)
  {
    sub_216C01D58(v21, a5);
    sub_216BFF7A8((_DWORD **)v25, v21);
    j_j_nullsub_1_129(v21);
  }
  sub_216C01D60((uint64_t)v25);
  return sub_216C01D64((uint64_t)v26);
}

uint64_t sub_216C0100C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v10;

  v10 = sub_216B4CBC4(a3);
  result = sub_216B632B8((unsigned int *)(a1 + 28), &v10);
  if ((result & 1) == 0)
  {
    *(_DWORD *)(a1 + 28) = v10;
    result = sub_216B1E600(a1 + 16);
    if (a4 != 1 || (*(_DWORD *)(result + 4) & 0x1000) != 0)
    {
      if (sub_216B27BAC(&v10))
      {
        return sub_216C0151C(a1, v10, a5);
      }
      else
      {
        sub_216C01614(a1, a5);
        return sub_216C016F8(a1, a2, a5);
      }
    }
  }
  return result;
}

uint64_t sub_216C010BC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  _QWORD v17[10];

  v17[9] = *MEMORY[0x24BDAC8D0];
  sub_216C018F8((uint64_t)v17);
  sub_216C018FC(a2, a4, a5, (uint64_t)v17, a8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a1 + 32))(a1, a2, a3, v17, a6, a7, a8);
  return sub_216B1FF6C(v17);
}

uint64_t sub_216C01198(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, unsigned int *a9, unsigned int a10)
{
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[6];
  _BYTE v46[228];
  unsigned int v47;
  uint64_t v48[11];

  v48[9] = *MEMORY[0x24BDAC8D0];
  v47 = sub_216C01BD0(a8, a2);
  if (sub_216B5E144(&v47))
  {
    sub_216C01198(a1, v47, a3, a4, a5, a6, a7, a8, a9, a10 + 1);
    v18 = *a9;
  }
  else
  {
    v18 = a10 + 1;
    *a9 = a10 + 1;
  }
  if (v18 > *(_DWORD *)(sub_216B1E600(a1 + 16) + 12)
    && *(_DWORD *)(sub_216B1E600(a1 + 16) + 12)
    && ((v19 = *(_QWORD *)(sub_216B1E600(a1 + 16) + 8) >> 33,
         v20 = (*(_DWORD *)(sub_216B1E600(a1 + 16) + 12) & 1) + v19,
         v21 = *a9,
         result = sub_216B1E600(a1 + 16),
         v23 = v21 - (*(_QWORD *)(result + 8) >> 33),
         v20 <= a10)
      ? (v24 = v23 > a10)
      : (v24 = 0),
        v24))
  {
    if (v20 == a10)
    {
      sub_216C01C38(v46);
      v35 = sub_216B40D84(v48);
      v36 = sub_216B248A0(v35, "(skipping ");
      v37 = sub_216B248D8(v36, v23 - a10);
      sub_216B248A0((uint64_t)v37, " expansions in backtrace; use -fmacro-backtrace-limit=0 to see all)");
      v38 = sub_216B40E80(v48);
      sub_216C01498(a1, v38, v39);
      sub_216B40DB8(v48);
      return sub_216B2489C(v46);
    }
  }
  else
  {
    v25 = sub_216B62E10(a8, a2);
    v26 = a2;
    if (v25)
      v26 = sub_216B62EDC(a8, a2);
    v27 = sub_216B603E4(a8, v26);
    sub_216C018F8((uint64_t)v48);
    sub_216C018FC(a2, a4, a5, (uint64_t)v48, a8);
    sub_216C01C3C(v46);
    sub_216B40D84(v45);
    v43 = sub_216C01C40(a2, a8, *(_QWORD *)(a1 + 8));
    v44 = v28;
    if (sub_216B29094((uint64_t)&v43))
    {
      v29 = "expanded from here";
      v30 = (void **)v45;
    }
    else
    {
      v31 = sub_216B248A0((uint64_t)v45, "expanded from macro '");
      v30 = sub_216B248E0((uint64_t)v31, v43, v44);
      v29 = "'";
    }
    sub_216B248A0((uint64_t)v30, v29);
    v32 = sub_216B40E80(v45);
    v34 = v33;
    sub_216C01194(v42, v48);
    sub_216B26D14(&v41);
    sub_216C01D4C((uint64_t)&v40, 0);
    sub_216C00AF8(a1, v27, 1, v32, v34, v42[0], v42[1]);
    sub_216B40DB8(v45);
    sub_216B2489C(v46);
    return sub_216B1FF6C(v48);
  }
  return result;
}

uint64_t sub_216C01498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  _QWORD v8[2];
  _BYTE v9[28];
  unsigned int v10;

  sub_216B4AED0(&v10);
  sub_216B6402C((uint64_t)v9);
  sub_216B26D14(v8);
  sub_216BD2540(&v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, v10, v9, 1, a2, a3, v8[0], v8[1], 0, v7);
}

uint64_t sub_216C0151C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;

  v16 = a2;
  if (sub_216B4B4A8(&v16))
    return sub_216C01614(a1, a3);
  v6 = v16;
  v7 = sub_216B1E600(a1 + 16);
  sub_216B63858(a3, v6, (*(_DWORD *)(v7 + 4) >> 10) & 1, (uint64_t)&v14);
  result = sub_216B603D4(&v14);
  if ((result & 1) == 0)
  {
    sub_216C01764(a3, v16, &v11);
    if (sub_216B27BAC(&v11))
    {
      return sub_216C017E8(a1, v11, v12, v13, a3);
    }
    else
    {
      v8 = sub_216B4CBC4((uint64_t)&v14);
      sub_216C0151C(a1, v8, a3);
      v9 = v14;
      v10 = v15;
      return (*(uint64_t (**)(uint64_t, _QWORD, __int128 *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v16, &v9, a3);
    }
  }
  return result;
}

uint64_t sub_216C01614(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _BYTE v13[24];
  _QWORD v14[2];

  v14[0] = sub_216C018C0(a2);
  v14[1] = v3;
  result = sub_216B1E67C((uint64_t)v14);
  v5 = result;
  if ((_DWORD)result)
  {
    v6 = 0;
    do
    {
      v7 = sub_216C018E8(v14, v6);
      v8 = sub_216B1E67C(v7 + 24);
      v9 = *(unsigned int *)(sub_216C018E8(v14, v6) + 24);
      v10 = sub_216B1E600(a1 + 16);
      sub_216B63858(v8, v9, (*(_DWORD *)(v10 + 4) >> 10) & 1, (uint64_t)v13);
      v11 = sub_216C018E8(v14, v6);
      sub_216B26CA0(v12, v11);
      result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 56))(a1, v9, v13, v12[0], v12[1], v8);
      ++v6;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_216C016F8(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v9 = a2;
  if (sub_216B4B4A8(&v9))
    return sub_216C01614(a1, a3);
  sub_216C01764(a3, v9, &v6);
  return sub_216C017E8(a1, v6, v7, v8, a3);
}

_DWORD *sub_216C01764@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  _QWORD v9[2];

  v5 = sub_216B60454((_DWORD *)a1, a2);
  if ((int)v5 < -1)
    return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 528) + 24))(*(_QWORD *)(a1 + 528), v5);
  sub_216B4AED0(&v8);
  v9[0] = sub_216C02064((uint64_t)&v8, (uint64_t)&byte_216C19659);
  v9[1] = v6;
  return sub_216C02090(a3, (uint64_t)v9);
}

uint64_t sub_216C017E8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;

  v19 = a2;
  result = sub_216B4B4A8(&v19);
  if ((result & 1) == 0)
  {
    v10 = v19;
    v11 = sub_216B1E600(a1 + 16);
    sub_216B63858(a5, v10, (*(_DWORD *)(v11 + 4) >> 10) & 1, (uint64_t)&v17);
    result = sub_216B603D4(&v17);
    if ((result & 1) == 0)
    {
      sub_216C01764(a5, v19, &v14);
      sub_216C017E8(a1, v14, v15, v16, a5);
      v12 = v17;
      v13 = v18;
      return (*(uint64_t (**)(uint64_t, _QWORD, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v19, &v12, a3, a4, a5);
    }
  }
  return result;
}

uint64_t sub_216C018C0(uint64_t a1)
{
  uint64_t v2;

  sub_216B2E464(&v2, a1 + 704);
  return v2;
}

uint64_t sub_216C018E8(_QWORD *a1, uint64_t a2)
{
  return *a1 + 40 * a2;
}

uint64_t sub_216C018FC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int *v7;
  uint64_t result;
  unsigned int *v9;
  char v10;
  int *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD v15[3];
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _QWORD v21[2];
  int v22[10];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v21[0] = a2;
  v21[1] = a3;
  v20 = sub_216B60454(a5, a1);
  v7 = (unsigned int *)sub_216B1E600((uint64_t)v21);
  result = sub_216B4C810(v21);
  if (v7 != (unsigned int *)result)
  {
    v9 = (unsigned int *)result;
    do
    {
      v19 = sub_216B71D08(v7);
      v18 = sub_216B69130(v7);
      v10 = sub_216B71E34((uint64_t)v7);
      v17 = sub_216B60454(a5, v19);
      v16 = sub_216B60454(a5, v18);
      sub_216C020D8((uint64_t)v22, 0);
      if (sub_216B5E144(&v19))
      {
        do
        {
          if (!sub_216B651D4(&v17, &v16))
            break;
          v11 = sub_216C020DC(v22, &v17);
          *v11 = v19;
          v19 = sub_216B62EDC(a5, v19);
          v17 = sub_216B60454(a5, v19);
        }
        while ((sub_216B5E144(&v19) & 1) != 0);
      }
      if (sub_216B651D4(&v17, &v16))
      {
        if (sub_216B5E144(&v18))
        {
          do
          {
            if (sub_216C020F4((uint64_t)v22, &v16))
              break;
            v18 = (unint64_t)sub_216B62EDC(a5, v18) >> 32;
            v16 = sub_216B60454(a5, v18);
          }
          while ((sub_216B5E144(&v18) & 1) != 0);
        }
        if (sub_216B5E144(&v18))
        {
          v19 = *sub_216C020DC(v22, &v16);
          v17 = v16;
        }
      }
      while (sub_216B5E144(&v19) && sub_216B651D4(&v17, &v20))
      {
        if (sub_216B62E10(a5, v19))
        {
          v19 = sub_216B62E68(a5, v19);
          LODWORD(v12) = sub_216B62E68(a5, v18);
        }
        else
        {
          v19 = sub_216B62EDC(a5, v19);
          v12 = (unint64_t)sub_216B62EDC(a5, v18) >> 32;
        }
        v18 = v12;
        v17 = sub_216B60454(a5, v19);
        v15[0] = sub_216B60454(a5, v18);
        if (sub_216B651D4(&v17, v15))
        {
          sub_216B4AED0(v15);
          v13 = v15[0];
          v18 = v15[0];
          v19 = v15[0];
          goto LABEL_20;
        }
      }
      v13 = v19;
LABEL_20:
      v19 = sub_216B603E4(a5, v13);
      v18 = sub_216B603E4(a5, v18);
      sub_216B746DC(&v14, v19, v18);
      sub_216B3BADC((uint64_t)v15, v14, v10);
      sub_216B4B57C(a4, (uint64_t)v15);
      result = (uint64_t)sub_216C02118(v22);
      v7 += 3;
    }
    while (v7 != v9);
  }
  return result;
}

uint64_t sub_216C01BD0(_DWORD *a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  unsigned int v6;

  v6 = a2;
  v3 = sub_216B5E144(&v6);
  v4 = v6;
  if (v3)
  {
    if (sub_216B62E10(a1, v6))
      return sub_216B62E68(a1, v6);
    else
      return sub_216B62EDC(a1, v6);
  }
  return v4;
}

uint64_t sub_216C01C40(int a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;

  v5 = a1;
  if (sub_216B62E10(a2, a1))
  {
    do
      v5 = sub_216B62EDC(a2, v5);
    while ((sub_216B62E10(a2, v5) & 1) != 0);
  }
  v6 = sub_216B603E4(a2, v5);
  v7 = sub_216B60454(a2, v6);
  if (sub_216B81B44((uint64_t)a2, v7))
  {
    v8 = sub_216B62EDC(a2, v5);
    v9 = sub_216B603E4(a2, v8);
    v10 = sub_216B60568(a2, v9);
    v11 = v10;
    v12 = HIDWORD(v10);
    v13 = sub_216B711E0(v9, a2, a3);
    v16[0] = sub_216B627D4((uint64_t)a2, v11, 0);
    v16[1] = v14;
    return sub_216B2864C(v16, v12, v13);
  }
  else
  {
    sub_216B26D14(&v17);
    return v17;
  }
}

uint64_t sub_216C01D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  sub_216B4AED8(a1 + 40);
  sub_216B39B60((_QWORD *)(a1 + 512));
  return a1;
}

uint64_t *sub_216C01DA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  sub_216B39B64((uint64_t)(a1 + 3), a2);
  sub_216B4CA54(a1 + 6, 0);
  sub_216B39B60(a1 + 9);
  return a1;
}

_QWORD *sub_216C01DEC(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_216C01E18(a1);
  *result = &off_24D606590;
  result[1] = a2;
  return result;
}

_QWORD *sub_216C01E18(_QWORD *result)
{
  *result = &unk_24D6064F8;
  return result;
}

void sub_216C01E2C()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_129();
  j__free(v0);
}

uint64_t sub_216C01E40(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _BYTE v6[56];

  v4 = *(_QWORD **)(a1 + 8);
  sub_216B73974(a2, a3, a4, 0, (uint64_t)v6);
  sub_216C01EE4(v4, (uint64_t)v6);
  return sub_216B4C8CC(v6);
}

uint64_t sub_216C01E90(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _BYTE v7[56];

  v5 = *(_QWORD **)(a1 + 8);
  sub_216B754D4(a2, a3, a4, a5, (uint64_t)v7);
  sub_216C01EE4(v5, (uint64_t)v7);
  return sub_216B4C8CC(v7);
}

uint64_t sub_216C01EE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B4DA28(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B4DBB8(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 56;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216C01F40(uint64_t a1)
{
  sub_216B3A034(a1 + 72);
  sub_216C01F78(a1 + 48);
  sub_216C01F7C(a1 + 24);
  return a1;
}

void **sub_216C01F80(void **a1)
{
  sub_216C01FAC((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216C01FAC(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v6 = sub_216B4CB74();
    v5 = sub_216BFFE18();
    v3 = (_DWORD *)sub_216B262E0(a1);
    result = sub_216B4CB78(a1);
    if (v3 != (_DWORD *)result)
    {
      v4 = (_DWORD *)result;
      do
      {
        result = sub_216B4CC88(v3, &v6);
        if ((result & 1) == 0)
          result = sub_216B4CC88(v3, &v5);
        v3 += 2;
      }
      while (v3 != v4);
    }
  }
  return result;
}

uint64_t sub_216C02034(uint64_t a1)
{
  sub_216B3A034(a1 + 512);
  sub_216B1FF6C(a1 + 40);
  return a1;
}

uint64_t sub_216C02064(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216C02094(&v3, a1, a2);
  return v3;
}

uint64_t sub_216C02098(uint64_t result, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = a3;
  return result;
}

_DWORD *sub_216C020A8(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  sub_216B1E678((_DWORD)a1 + 8, *(char **)(a2 + 8));
  return a1;
}

int *sub_216C020DC(int *a1, unsigned int *a2)
{
  return sub_216C02274(a1, a2) + 1;
}

uint64_t sub_216C020F4(uint64_t a1, unsigned int *a2)
{
  int *v3;

  v3 = 0;
  return sub_216C02340(a1, a2, &v3);
}

uint64_t sub_216C0211C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int *v4;

  v2 = a2;
  v4 = (int *)nullsub_1(a1, a2);
  sub_216C0214C(v4, v2);
  return a1;
}

uint64_t sub_216C0214C(int *a1, unsigned int a2)
{
  int v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  *a1 |= 1u;
  if (a2 >= 5)
  {
    *a1 = v3 & 0xFFFFFFFE;
    v5 = (_QWORD *)sub_216B68BC0((uint64_t)a1);
    *v5 = sub_216B68BC4((uint64_t)a1, a2);
    v5[1] = v6;
  }
  return sub_216C021B0(a1);
}

uint64_t sub_216C021B0(int *a1)
{
  int v2;
  _DWORD *v3;
  uint64_t result;

  sub_216B68C50(a1, 0);
  sub_216B68C54((uint64_t)a1, 0);
  v2 = sub_216B66E78();
  v3 = (_DWORD *)sub_216C02214(a1);
  result = sub_216C02218((uint64_t)a1);
  while (v3 != (_DWORD *)result)
  {
    *v3 = v2;
    v3 += 2;
  }
  return result;
}

uint64_t sub_216C02218(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216C02214();
  return v2 + 8 * sub_216C02248(a1);
}

uint64_t sub_216C0224C(_BYTE *a1)
{
  if ((*a1 & 1) != 0)
    return 4;
  else
    return *(unsigned int *)(sub_216B3DBD0((uint64_t)a1) + 8);
}

int *sub_216C02274(int *a1, unsigned int *a2)
{
  int v5;
  int *v6;

  v6 = 0;
  if (sub_216C022D0((uint64_t)a1, a2, &v6))
    return v6;
  sub_216B4AED0(&v5);
  return sub_216C02308(a1, a2, &v5, v6);
}

uint64_t sub_216C022D0(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;
  int *v5;

  v5 = 0;
  result = sub_216C02340(a1, a2, &v5);
  *a3 = v5;
  return result;
}

int *sub_216C02308(int *a1, unsigned int *a2, int *a3, int *a4)
{
  int *result;

  result = sub_216C02468(a1, a2, a4);
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_216C02340(uint64_t a1, unsigned int *a2, int **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;

  v6 = sub_216B68CA4(a1);
  result = sub_216C02248(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B66E78();
    v10 = sub_216B67208();
    v11 = v8 - 1;
    v12 = sub_216B682FC(a2) & (v8 - 1);
    v13 = (int *)(v6 + 8 * v12);
    if (sub_216B6720C(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (!sub_216B6720C(*v13, v9))
      {
        if (sub_216B6720C(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (int *)(v6 + 8 * v12);
        ++v15;
        if (sub_216B6720C(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_13:
  *a3 = v13;
  return result;
}

int *sub_216C02468(int *a1, unsigned int *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v10;

  v10 = a3;
  v5 = sub_216B69128(a1);
  v6 = sub_216C02248(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216C02554(a1, (2 * v6));
    sub_216C022D0((uint64_t)a1, a2, &v10);
    sub_216C02248(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B69130(a1) <= v6 >> 3)
  {
    sub_216C02554(a1, v7);
    sub_216C022D0((uint64_t)a1, a2, &v10);
  }
  sub_216B69134(a1);
  v8 = sub_216B66E78();
  if (!sub_216B6720C(*v10, v8))
    sub_216B6915C((uint64_t)a1);
  return v10;
}

void sub_216C02558(int *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17[8];
  uint64_t v18;

  v2 = a2;
  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 4)
  {
    v17[0] = 64;
    v16 = sub_216B1E3F4(a2 - 1);
    v2 = *(_DWORD *)sub_216B21E8C(v17, &v16);
  }
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    if (v2 >= 4)
    {
      v7 = sub_216B66E78();
      v8 = sub_216B67208();
      v9 = sub_216B68CA4(a1);
      v10 = 0;
      v11 = v17;
      do
      {
        if (!sub_216B6720C(*(_DWORD *)(v9 + v10), v7) && !sub_216B6720C(*(_DWORD *)(v9 + v10), v8))
        {
          *v11 = *(_DWORD *)(v9 + v10);
          v11[1] = *(_DWORD *)(v9 + v10 + 4);
          v11 += 2;
        }
        v10 += 8;
      }
      while (v10 != 32);
      *a1 &= ~1u;
      v12 = (_QWORD *)sub_216B68BC0((uint64_t)a1);
      *v12 = sub_216B68BC4((uint64_t)a1, v2);
      v12[1] = v13;
      sub_216C02710(a1, v17, v11);
    }
  }
  else
  {
    v4 = sub_216B68BC0((uint64_t)a1);
    v5 = *(int **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    sub_216B68BC0((uint64_t)a1);
    if (v2 > 4)
    {
      v14 = (_QWORD *)sub_216B68BC0((uint64_t)a1);
      *v14 = sub_216B68BC4((uint64_t)a1, v2);
      v14[1] = v15;
    }
    else
    {
      *a1 |= 1u;
    }
    sub_216C02710(a1, v5, &v5[2 * v6]);
    j__free(v5);
  }
}

int *sub_216C02710(int *a1, int *a2, int *a3)
{
  int v6;
  int *result;
  int v8;
  int *v9;
  int *v10;

  sub_216C021B0(a1);
  v6 = sub_216B66E78();
  result = (int *)sub_216B67208();
  if (a2 != a3)
  {
    v8 = (int)result;
    do
    {
      result = (int *)sub_216B6720C(*a2, v6);
      if ((result & 1) == 0)
      {
        result = (int *)sub_216B6720C(*a2, v8);
        if ((result & 1) == 0)
        {
          v10 = 0;
          sub_216C022D0((uint64_t)a1, (unsigned int *)a2, &v10);
          v9 = v10;
          *v10 = *a2;
          v9[1] = a2[1];
          result = sub_216B69134(a1);
        }
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

_BYTE *sub_216C027C8(_BYTE *a1)
{
  sub_216C027F4((uint64_t)a1);
  sub_216B68DB4(a1);
  return a1;
}

uint64_t sub_216C027F4(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  int *v5;
  int *v6;

  result = sub_216C02248(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B66E78();
    v4 = sub_216B67208();
    v5 = (int *)sub_216C02214(a1);
    result = sub_216C02218(a1);
    if (v5 != (int *)result)
    {
      v6 = (int *)result;
      do
      {
        result = sub_216B6720C(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B6720C(*v5, v4);
        v5 += 2;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t *sub_216C02880(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B4D4A0(a2);
  return a1;
}

uint64_t *sub_216C028BC(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B4D4E0(a2);
  return a1;
}

uint64_t sub_216C028F8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  const void **v6;

  v6 = (const void **)sub_216B4DC4C(a1, 0x14u);
  sub_216C0293C(v6, a2, a3);
  return a1;
}

uint64_t sub_216C0293C(const void **a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_216B4E434(a2, a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > 0xAAAAAAAAAAAAAAABLL * ((v7 - sub_216B1E67C((uint64_t)a1)) >> 2))
  {
    v8 = sub_216B4D4A0((uint64_t)a1);
    sub_216B4DA18(a1, v8 + v6);
  }
  v9 = (_QWORD *)sub_216B1E67C((uint64_t)a1);
  sub_216C029F0(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + 12 * v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216C029F0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  sub_216C02A08(a1, a2, a3);
  return v3;
}

uint64_t sub_216C02A08(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = a3;
  v10 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      v5 = v9;
      v6 = *((_DWORD *)v4 + 2);
      v7 = *v4;
      v4 = (uint64_t *)((char *)v4 + 12);
      *v9 = v7;
      *((_DWORD *)v5 + 2) = v6;
      v9 = (_QWORD *)((char *)v5 + 12);
      v10 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v11, &v10, &v9);
  return v11;
}

uint64_t sub_216C02A84(uint64_t a1)
{
  return sub_216B4DC4C(a1, 4u);
}

uint64_t sub_216C02A90()
{
  return sub_216B2112C();
}

uint64_t sub_216C02A9C()
{
  return sub_216B2112C();
}

uint64_t sub_216C02AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a2, a2);
  return sub_216BD2918(a1, v3);
}

_QWORD *sub_216C02AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sub_216C00A78(a1, a3, a4);
  *result = &off_24D6065C8;
  result[5] = a2;
  return result;
}

void sub_216C02B14()
{
  void *v0;

  v0 = (void *)sub_216C02B10();
  j__free(v0);
}

uint64_t sub_216C02B28(uint64_t *a1, unsigned int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  unsigned int v28;

  v28 = a2;
  v16 = sub_216C02C78(a1[5]);
  if (sub_216B27BAC(&v28))
  {
    v26 = *a3;
    v27 = *((_QWORD *)a3 + 2);
    (*(void (**)(uint64_t *, _QWORD, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 24))(a1, v28, &v26, a4, a7, a8, a9);
  }
  v17 = (uint64_t)(a1 + 2);
  if ((*(_BYTE *)(sub_216B1E600((uint64_t)(a1 + 2)) + 5) & 0x80) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a1[5] + 24))(a1[5]);
  v18 = a1[5];
  v19 = (*(_DWORD *)(sub_216B1E600((uint64_t)(a1 + 2)) + 4) >> 15) & 1;
  v20 = sub_216B1E600((uint64_t)(a1 + 2));
  sub_216C02CB0(v18, a4, v19, (*(_DWORD *)(v20 + 4) >> 19) & 1);
  v21 = (uint64_t *)a1[5];
  v22 = sub_216C02C78((uint64_t)v21) - v16;
  v23 = *(unsigned int *)(sub_216B1E600(v17) + 28);
  v24 = sub_216B1E600(v17);
  return sub_216C02E30(v21, a4 == 1, a5, a6, v22, v23, (*(_DWORD *)(v24 + 4) >> 15) & 1);
}

uint64_t sub_216C02C78(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  return sub_216C04FF0(a1) + v2;
}

void **sub_216C02CB0(uint64_t a1, int a2, int a3, int a4)
{
  char *v7;
  void **result;

  if (a3)
  {
    switch(a2)
    {
      case 1:
        (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 0, 1, 0);
        v7 = "note";
        goto LABEL_10;
      case 2:
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 4, 1, 0);
        v7 = "remark";
        goto LABEL_10;
      case 3:
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 5, 1, 0);
        v7 = "warning";
        goto LABEL_10;
      case 4:
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 1, 1, 0);
        v7 = "error";
        goto LABEL_10;
      case 5:
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 1, 1, 0);
        v7 = "fatal error";
        goto LABEL_10;
      default:
        break;
    }
  }
  else if ((a2 - 1) <= 4)
  {
    v7 = off_24D606618[a2 - 1];
LABEL_10:
    sub_216B248A0(a1, v7);
  }
  if (a4)
    sub_216B248A0(a1, "(clang)");
  result = sub_216B248A0(a1, ": ");
  if (a3)
    return (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

uint64_t sub_216C02E30(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  int v13;
  char v15;

  v13 = a7 ^ 1 | a2;
  if ((v13 & 1) == 0)
    (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(*a1 + 16))(a1, 8, 1, 0);
  if (!(_DWORD)a6)
  {
    v15 = 1;
    sub_216C030F0(a1, a3, a4, &v15, v13 ^ 1);
    if (!a7)
      return sub_216B251FC((uint64_t)a1, 10);
    goto LABEL_5;
  }
  sub_216C02F0C((void **)a1, a3, a4, a6, a5, v13 ^ 1);
  if (a7)
LABEL_5:
    (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  return sub_216B251FC((uint64_t)a1, 10);
}

uint64_t sub_216C02F0C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v23[5];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v26 = a3;
  v23[0] = (const void *)sub_216B26CA8(&v25, 0xAu, 0);
  v24 = sub_216B1E67C((uint64_t)&v25);
  v10 = *(_QWORD *)sub_216B24E80(v23, &v24);
  LOBYTE(v24) = 1;
  sub_216B78900(v23);
  sub_216C05000(v23, 6u, 32);
  if ((_DWORD)v10)
  {
    v11 = 0;
    do
    {
      v12 = sub_216C05024(v11, v25, v26, v10);
      if (v12 == (_DWORD)v10)
        break;
      v13 = v12;
      v11 = sub_216C05088(v12, v25, v26, v10, a5, a4);
      v14 = v11 - v13;
      if ((int)v14 + a5 >= a4)
      {
        sub_216B251FC((uint64_t)a1, 10);
        v15 = (_BYTE *)sub_216B1FF44((uint64_t)v23, 0);
        sub_216B3FFE4(a1, v15, 6uLL);
        v16 = sub_216B2864C(&v25, v13, v14);
        sub_216C030F0((uint64_t *)a1, v16, v17, &v24, a6);
        a5 = v14 + 6;
      }
      else
      {
        if (v13)
        {
          sub_216B251FC((uint64_t)a1, 32);
          a5 += v14 + 1;
        }
        else
        {
          a5 += v14;
        }
        v18 = sub_216B2864C(&v25, v13, v14);
        sub_216C030F0((uint64_t *)a1, v18, v19, &v24, a6);
      }
    }
    while (v11 < v10);
  }
  v20 = sub_216B2864C(&v25, v10, 0xFFFFFFFFFFFFFFFFLL);
  sub_216C030F0((uint64_t *)a1, v20, v21, &v24, a6);
  return sub_216B2489C(v23);
}

void **sub_216C030F0(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v16 = a3;
  while (1)
  {
    v8 = sub_216B26CA8(&v15, 0x7Fu, 0);
    v9 = sub_216B26D18(&v15, 0, v8);
    result = sub_216B248E0((uint64_t)a1, v9, v10);
    if (v8 == -1)
      return result;
    v15 = sub_216B2864C(&v15, v8 + 1, 0xFFFFFFFFFFFFFFFFLL);
    v16 = v12;
    v13 = *a1;
    if (*a4)
    {
      v14 = 6;
    }
    else
    {
      (*(void (**)(uint64_t *))(v13 + 24))(a1);
      if (!a5)
        goto LABEL_8;
      v13 = *a1;
      v14 = 8;
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(v13 + 16))(a1, v14, 1, 0);
LABEL_8:
    *a4 ^= 1u;
  }
}

uint64_t sub_216C031D0(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  void **v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int *v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  void **v39;
  unsigned int v40;
  void **v41;
  void **v42;
  unsigned int v43;
  void **v44;
  void **v45;
  unsigned int v46;
  void **v47;
  void **v48;
  int v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  _QWORD v56[2];

  v56[0] = a5;
  v56[1] = a6;
  if (sub_216B603D4(a3))
  {
    LODWORD(v52) = sub_216B60454(a7, a2);
    result = sub_216B4B4A8(&v52);
    if ((result & 1) == 0)
    {
      result = sub_216B81B44((uint64_t)a7, v52);
      if (result)
      {
        v12 = result;
        result = sub_216B503A8(result);
        if ((_DWORD)result)
        {
          v13 = *(_QWORD *)(a1 + 40);
          v14 = (char *)sub_216B1E600(v12);
          sub_216B248A0(v13, v14);
          if (sub_216C03638(v12))
            sub_216B248A0(*(_QWORD *)(a1 + 40), " (in PCH)");
          return (uint64_t)sub_216B248A0(*(_QWORD *)(a1 + 40), ": ");
        }
      }
    }
    return result;
  }
  v15 = sub_216B4D100((uint64_t)a3);
  result = sub_216B1E600(a1 + 16);
  if ((*(_BYTE *)(result + 4) & 0x20) == 0)
    return result;
  if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 5) & 0x80) != 0)
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 8, 1, 0);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = (char *)sub_216B1E600((uint64_t)a3);
  sub_216B248A0(v16, v17);
  v18 = sub_216B1E600(a1 + 16);
  v19 = sub_216C03640(v18);
  switch(v19)
  {
    case 2:
      v22 = sub_216B248A0(*(_QWORD *)(a1 + 40), " +");
LABEL_18:
      sub_216B248D8(v22, v15);
      break;
    case 1:
      v20 = *(_QWORD *)(a1 + 40);
      v21 = 40;
      goto LABEL_17;
    case 0:
      v20 = *(_QWORD *)(a1 + 40);
      v21 = 58;
LABEL_17:
      v22 = (void **)sub_216B251FC(v20, v21);
      goto LABEL_18;
  }
  if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 4) & 0x10) != 0)
  {
    v23 = sub_216B4D23C((uint64_t)a3);
    if (v23)
    {
      v24 = v23;
      v25 = sub_216B1E600(a1 + 16);
      v26 = sub_216C03640(v25);
      v27 = *(_QWORD *)(a1 + 40);
      if (v26 == 1)
      {
        sub_216B251FC(v27, 44);
        v24 = (__PAIR64__(v24, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 52) - 1) - 169999999) >> 32;
      }
      else
      {
        sub_216B251FC(v27, 58);
      }
      sub_216B248D8(*(void ***)(a1 + 40), v24);
    }
  }
  v28 = sub_216B1E600(a1 + 16);
  v29 = sub_216C03640(v28);
  if (v29 == 2)
  {
LABEL_28:
    sub_216B251FC(*(_QWORD *)(a1 + 40), 58);
    goto LABEL_30;
  }
  if (v29 != 1)
  {
    if (v29)
      goto LABEL_30;
    goto LABEL_28;
  }
  sub_216B248A0(*(_QWORD *)(a1 + 40), ") : ");
LABEL_30:
  if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 5) & 1) != 0 && !sub_216B29094((uint64_t)v56))
  {
    v30 = sub_216B4EDA4(a7, a2);
    v55 = sub_216B60454(a7, v30);
    v31 = (unsigned int *)sub_216B1E600((uint64_t)v56);
    v32 = sub_216B4C810(v56);
    if (v31 != (unsigned int *)v32)
    {
      v33 = (unsigned int *)v32;
      v34 = 0;
      do
      {
        if (sub_216B774B4(v31))
        {
          v35 = sub_216B71D08(v31);
          v54 = sub_216B4EDA4(a7, v35);
          v36 = sub_216B69130(v31);
          v53 = sub_216B4EDA4(a7, v36);
          if (sub_216B632B8((unsigned int *)&v54, &v53))
          {
            LODWORD(v52) = sub_216B69130(v31);
            if (sub_216B5E144(&v52))
            {
              v37 = sub_216B69130(v31);
              v53 = (unint64_t)sub_216B630BC(a7, v37) >> 32;
            }
          }
          v52 = sub_216B60568(a7, v54);
          v51 = sub_216B60568(a7, v53);
          if (!sub_216B651D4(&v52, &v55) && !sub_216B651D4(&v51, &v55))
          {
            if (sub_216B71E34((uint64_t)v31))
              v38 = sub_216B711E0(v53, a7, *(_QWORD *)(a1 + 8));
            else
              v38 = 0;
            v39 = (void **)sub_216B251FC(*(_QWORD *)(a1 + 40), 123);
            v40 = sub_216B63A50((uint64_t)a7, v52, SHIDWORD(v52), 0);
            v41 = sub_216B248D8(v39, v40);
            v42 = (void **)sub_216B251FC((uint64_t)v41, 58);
            v43 = sub_216B6369C((uint64_t)a7, v52, HIDWORD(v52), 0);
            v44 = sub_216B248D8(v42, v43);
            v45 = (void **)sub_216B251FC((uint64_t)v44, 45);
            v46 = sub_216B63A50((uint64_t)a7, v51, SHIDWORD(v51), 0);
            v47 = sub_216B248D8(v45, v46);
            v48 = (void **)sub_216B251FC((uint64_t)v47, 58);
            v49 = sub_216B6369C((uint64_t)a7, v51, HIDWORD(v51), 0);
            v50 = sub_216B248D8(v48, v49 + v38);
            sub_216B251FC((uint64_t)v50, 125);
            v34 = 1;
          }
        }
        v31 += 3;
      }
      while (v31 != v33);
      if ((v34 & 1) != 0)
        sub_216B251FC(*(_QWORD *)(a1 + 40), 58);
    }
  }
  return sub_216B251FC(*(_QWORD *)(a1 + 40), 32);
}

uint64_t sub_216C03638(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_216C03640(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) & 3;
}

void **sub_216C0364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void **v6;
  char *v7;
  void **v8;
  char *v9;
  void **v10;
  void **v11;
  unsigned int v12;

  v5 = sub_216B1E600(a1 + 16);
  v6 = *(void ***)(a1 + 40);
  if ((*(_BYTE *)(v5 + 4) & 0x20) != 0)
  {
    v8 = sub_216B248A0((uint64_t)v6, "In file included from ");
    v9 = (char *)sub_216B1E600(a3);
    v10 = sub_216B248A0((uint64_t)v8, v9);
    v11 = (void **)sub_216B251FC((uint64_t)v10, 58);
    v12 = sub_216B4D100(a3);
    v6 = sub_216B248D8(v11, v12);
    v7 = ":\n";
  }
  else
  {
    v7 = "In included file:\n";
  }
  return sub_216B248A0((uint64_t)v6, v7);
}

void **sub_216C036DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;
  char *v13;
  void **v14;
  void **v15;
  void **v16;
  char *v17;
  void **v18;
  void **v19;
  unsigned int v20;

  v9 = sub_216B1E600(a1 + 16);
  v10 = *(_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(v9 + 4) & 0x20) != 0)
  {
    v14 = sub_216B248A0(v10, "In module '");
    v15 = sub_216B248E0((uint64_t)v14, a4, a5);
    v16 = sub_216B248A0((uint64_t)v15, "' imported from ");
    v17 = (char *)sub_216B1E600(a3);
    v18 = sub_216B248A0((uint64_t)v16, v17);
    v19 = (void **)sub_216B251FC((uint64_t)v18, 58);
    v20 = sub_216B4D100(a3);
    v12 = sub_216B248D8(v19, v20);
    v13 = ":\n";
  }
  else
  {
    v11 = sub_216B248A0(v10, "In module ");
    v12 = sub_216B248E0((uint64_t)v11, a4, a5);
    v13 = "':\n";
  }
  return sub_216B248A0((uint64_t)v12, v13);
}

void **sub_216C037AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v9;
  void **v10;
  void **v11;
  char *v12;
  void **v13;
  void **v14;
  unsigned int v15;
  void **v16;
  char *v17;
  void **v18;

  if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 4) & 0x20) != 0 && sub_216B1E600(a3))
  {
    v9 = sub_216B248A0(*(_QWORD *)(a1 + 40), "While building module '");
    v10 = sub_216B248E0((uint64_t)v9, a4, a5);
    v11 = sub_216B248A0((uint64_t)v10, "' imported from ");
    v12 = (char *)sub_216B1E600(a3);
    v13 = sub_216B248A0((uint64_t)v11, v12);
    v14 = (void **)sub_216B251FC((uint64_t)v13, 58);
    v15 = sub_216B4D100(a3);
    v16 = sub_216B248D8(v14, v15);
    v17 = ":\n";
  }
  else
  {
    v18 = sub_216B248A0(*(_QWORD *)(a1 + 40), "While building module '");
    v16 = sub_216B248E0((uint64_t)v18, a4, a5);
    v17 = "':\n";
  }
  return sub_216B248A0((uint64_t)v16, v17);
}

void sub_216C03888(uint64_t a1, int a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t i;
  unsigned int v24;
  BOOL v25;
  int v26;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  void **v45;
  uint64_t v46[2];
  uint64_t v47;
  uint64_t v48;
  std::string v49;
  std::string v50;
  _QWORD v51[2];
  _QWORD v52[209];
  std::string v53;
  std::string v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;

  v58 = a2;
  v56 = a5;
  v57 = a6;
  v11 = a1 + 16;
  if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 4) & 0x40) != 0
    && (!sub_216B632B8((unsigned int *)&v58, (unsigned int *)(a1 + 24))
     || !sub_216B29084(a4)
     || !sub_216B29094((uint64_t)&v56)
     || a3 != 1 && *(_DWORD *)(a1 + 32) == 1))
  {
    v12 = sub_216B60568(a7, v58);
    v55 = 0;
    v13 = v12;
    v52[0] = sub_216B627D4((uint64_t)a7, v12, &v55);
    v52[1] = v14;
    v15 = sub_216B1E600((uint64_t)v52);
    if (!v55)
    {
      v16 = v15;
      v17 = HIDWORD(v12);
      v18 = sub_216B63A50((uint64_t)a7, v12, SHIDWORD(v12), 0);
      v19 = sub_216B6369C((uint64_t)a7, v13, v17, 0);
      if (v19 <= 0x1000)
      {
        v20 = v19;
        v21 = (unsigned __int8 *)(v16 + v17);
        v22 = v16 + v17 - v19 + 1;
        for (i = v19 - 1; ; ++i)
        {
          v24 = *v21;
          v25 = v24 > 0xD;
          v26 = (1 << v24) & 0x2401;
          if (!v25 && v26 != 0)
            break;
          ++v21;
        }
        if (i <= 0x1000)
        {
          sub_216B2B9D0(&v54, v22, v21);
          sub_216B2E21C(&v53, i, 32);
          sub_216B26CA0(v51, &v54);
          v28 = sub_216B1E600(v11);
          sub_216C03CF0(v52, v51[0], v51[1], *(unsigned int *)(v28 + 24));
          v29 = (unsigned int *)sub_216B1E600((uint64_t)a4);
          v30 = sub_216B1E67C((uint64_t)a4);
          if (v29 != (unsigned int *)v30)
          {
            v31 = (unsigned int *)v30;
            do
            {
              sub_216C03CF4(v29, v18, v13, (uint64_t)v52, &v53, a7, *(_QWORD *)(a1 + 8));
              v29 += 3;
            }
            while (v29 != v31);
          }
          v32 = sub_216C04044((uint64_t)v52, v20 - 1);
          v34 = sub_216B25B78((uint64_t)&v53, v33);
          v35 = v32 + 1;
          if (v34 < v35)
            std::string::resize(&v53, v35, 32);
          *(_BYTE *)sub_216B25B54((uint64_t)&v53, v32) = 94;
          v36 = v56;
          v37 = v57;
          v38 = sub_216B1E600(v11);
          sub_216C04090(v18, (uint64_t)v52, v36, v37, a7, v38, &v50);
          v39 = *(_DWORD *)(sub_216B1E600(v11) + 28);
          if (v39)
            sub_216C04298(&v54, (uint64_t)&v53, &v50, v39, (uint64_t)v52);
          if ((*(_BYTE *)(sub_216B1E600(v11) + 5) & 1) != 0)
          {
            sub_216C0480C(32, (uint64_t)&v54, (uint64_t)&v49);
            sub_216B26E7C((uint64_t)&v54, (uint64_t)&v49);
            std::string::~string(&v49);
            sub_216C0480C(32, (uint64_t)&v53, (uint64_t)&v49);
            sub_216B26E7C((uint64_t)&v53, (uint64_t)&v49);
            std::string::~string(&v49);
          }
          while (1)
          {
            v41 = sub_216B25B78((uint64_t)&v53, v40);
            if (*(_BYTE *)sub_216B25B54((uint64_t)&v53, v41 - 1) != 32)
              break;
            v47 = sub_216B29ABC((uint64_t)&v53, v42);
            v49.__r_.__value_.__r.__words[0] = sub_216B9ACE0(&v47, 1);
            sub_216B2C008(&v48, &v49);
            sub_216B9AC1C(&v53, v48);
          }
          sub_216B26CA0(v46, &v54);
          sub_216C048C0(a1, v46[0], v46[1]);
          if ((*(_BYTE *)(sub_216B1E600(v11) + 5) & 0x80) != 0)
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 2, 1, 0);
          v43 = sub_216B2E0B0(*(void ***)(a1 + 40), (uint64_t)&v53);
          sub_216B251FC((uint64_t)v43, 10);
          if ((*(_BYTE *)(sub_216B1E600(v11) + 5) & 0x80) != 0)
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
          if (!sub_216B25DD0((uint64_t)&v50, v44))
          {
            if ((*(_BYTE *)(sub_216B1E600(v11) + 5) & 0x80) != 0)
              (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 2, 0, 0);
            if ((*(_BYTE *)(sub_216B1E600(v11) + 5) & 1) != 0)
              sub_216B251FC(*(_QWORD *)(a1 + 40), 32);
            v45 = sub_216B2E0B0(*(void ***)(a1 + 40), (uint64_t)&v50);
            sub_216B251FC((uint64_t)v45, 10);
            if ((*(_BYTE *)(sub_216B1E600(v11) + 5) & 0x80) != 0)
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
          }
          sub_216C04A80(a1, v56, v57, a7);
          std::string::~string(&v50);
          sub_216C04D34(v52);
          std::string::~string(&v53);
          std::string::~string(&v54);
        }
      }
    }
  }
}

uint64_t sub_216C03CF4(unsigned int *a1, unsigned int a2, int a3, uint64_t a4, std::string *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t result;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v46 = a3;
  result = sub_216B774B4(a1);
  if ((_DWORD)result)
  {
    v14 = sub_216B71D08(a1);
    v15 = sub_216B69130(a1);
    result = sub_216B63E40(a6, v14, 0);
    if (result <= a2)
    {
      v16 = result;
      LODWORD(v44) = sub_216B60454(a6, v14);
      result = sub_216B651D4(&v44, &v46);
      if ((result & 1) == 0)
      {
        result = sub_216B63E40(a6, v15, 0);
        if (result >= a2)
        {
          v17 = result;
          LODWORD(v44) = sub_216B60454(a6, v15);
          result = sub_216B651D4(&v44, &v46);
          if ((result & 1) == 0)
          {
            if (v16 == a2)
            {
              v18 = sub_216B637EC(a6, v14, 0);
              if (v18)
                v19 = v18 - 1;
              else
                v19 = 0;
            }
            else
            {
              v19 = 0;
            }
            v44 = sub_216B52934(a4);
            v45 = v20;
            v21 = sub_216B1E67C((uint64_t)&v44);
            if (v17 == a2)
            {
              v22 = sub_216B637EC(a6, v15, 0);
              if (v22)
              {
                v24 = v22 - 1;
                if (sub_216B71E34((uint64_t)a1))
                  v24 += sub_216B711E0(v15, a6, a7);
              }
              else
              {
                v24 = sub_216B25B78((uint64_t)a5, v23);
              }
            }
            else
            {
              v24 = v21;
            }
            if (sub_216B71E34((uint64_t)a1))
            {
              v44 = sub_216B52934(a4);
              v45 = v25;
              if (sub_216B1E67C((uint64_t)&v44) > (unint64_t)v19)
              {
                v26 = v19;
                do
                {
                  v42 = sub_216B52934(a4);
                  v43 = v27;
                  if (sub_216B26288(&v42, v26) != 32)
                  {
                    v41[0] = sub_216B52934(a4);
                    v41[1] = v28;
                    if (sub_216B26288(v41, v26) != 9)
                      break;
                  }
                  v19 = sub_216C056F0(a4, v19);
                  v26 = v19;
                  v44 = sub_216B52934(a4);
                  v45 = v29;
                }
                while (sub_216B1E67C((uint64_t)&v44) > (unint64_t)v19);
              }
              v44 = sub_216B52934(a4);
              v45 = v30;
              if (sub_216B1E67C((uint64_t)&v44) < (unint64_t)v24)
              {
                v44 = sub_216B52934(a4);
                v45 = v31;
                v24 = sub_216B1E67C((uint64_t)&v44);
              }
              if (v24)
              {
                while (1)
                {
                  v44 = sub_216B52934(a4);
                  v45 = v32;
                  if (sub_216B26288(&v44, v24 - 1) != 32)
                  {
                    v42 = sub_216B52934(a4);
                    v43 = v33;
                    if (sub_216B26288(&v42, v24 - 1) != 9)
                      break;
                  }
                  v24 = sub_216C0572C(a4, v24);
                  if (!v24)
                    goto LABEL_29;
                }
              }
              else
              {
LABEL_29:
                v24 = 0;
              }
            }
            v34 = sub_216C04044(a4, v19);
            v35 = sub_216C04044(a4, v24);
            if (sub_216B25B78((uint64_t)a5, v36) < (unint64_t)v35)
              std::string::resize(a5, v35, 32);
            v44 = sub_216B29A94((uint64_t)a5, v37);
            v38 = sub_216B2EF68(&v44, v34);
            v42 = sub_216B29A94((uint64_t)a5, v39);
            v40 = sub_216B2EF68(&v42, v35);
            LOBYTE(v41[0]) = 126;
            return sub_216C05768(v38, v40, v41);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_216C04044(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  _DWORD *v4;

  v3 = a1 + 24;
  do
    v4 = (_DWORD *)sub_216B4B528(v3, a2--);
  while (*v4 == -1);
  return *(unsigned int *)sub_216B4B528(v3, a2 + 1);
}

_BYTE *sub_216C04090@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  _BYTE *result;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  std::string::size_type v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37[2];
  uint64_t v38[2];
  uint64_t v39[2];
  _QWORD v40[2];

  v40[0] = a3;
  v40[1] = a4;
  sub_216B25034(a7);
  result = (_BYTE *)sub_216B29094((uint64_t)v40);
  if ((result & 1) != 0 || (*(_BYTE *)(a6 + 4) & 0x80) == 0)
    return result;
  v35 = a6;
  v12 = (unsigned int *)sub_216B1E600((uint64_t)v40);
  v13 = sub_216B4C820(v40);
  if (v12 == (unsigned int *)v13)
    return sub_216C05880(a7, *(unsigned int *)(v35 + 24));
  v15 = (unsigned int *)v13;
  v16 = 0;
  while (sub_216B25DD0((uint64_t)(v12 + 6), v14))
  {
LABEL_14:
    v12 += 14;
    if (v12 == v15)
      return sub_216C05880(a7, *(unsigned int *)(v35 + 24));
  }
  v17 = sub_216B71D08(v12);
  v18 = sub_216B61470(a5, v17);
  v19 = HIDWORD(v18);
  v20 = v18;
  if (sub_216B63A50((uint64_t)a5, v18, SHIDWORD(v18), 0) == a1)
  {
    sub_216B26CA0(v39, v12 + 6);
    sub_216B1E678((int)v38, "\n\r");
    if (sub_216B31D14(v39, v38[0], v38[1], 0) == -1)
    {
      v22 = sub_216B6369C((uint64_t)a5, v20, v19, 0);
      v23 = sub_216C04044(a2, v22 - 1);
      if (v23 < v16)
        v25 = v16 + 1;
      else
        v25 = v23;
      v26 = sub_216B25B78((uint64_t)a7, v24);
      v28 = v25 - v16 + sub_216B25B78((uint64_t)(v12 + 6), v27) + v26;
      if (sub_216B25B78((uint64_t)a7, v29) < v28)
        std::string::resize(a7, v28, 32);
      sub_216B29A94((uint64_t)(v12 + 6), v30);
      sub_216B29ABC((uint64_t)(v12 + 6), v31);
      v39[0] = sub_216B29ABC((uint64_t)a7, v32);
      v34 = sub_216B25B78((uint64_t)(v12 + 6), v33);
      sub_216B9ACE0(v39, v34);
      sub_216C05868();
      sub_216B26CA0(v37, v12 + 6);
      v16 = sub_216B271D0(v37[0], v37[1]) + v25;
      goto LABEL_14;
    }
  }
  sub_216B25BB0((uint64_t)a7, v21);
  return sub_216C05880(a7, *(unsigned int *)(v35 + 24));
}

uint64_t sub_216C04298(std::string *a1, uint64_t a2, std::string *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  _BOOL4 v17;
  unsigned int v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int i;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int j;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int k;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  std::string *v69;
  int v70;
  unsigned int v71;
  std::string v72;
  uint64_t v73[2];
  std::string::size_type __n1;
  int v75;
  unsigned int v76;

  v76 = sub_216C05A04(a5);
  v72.__r_.__value_.__r.__words[0] = sub_216B25B78(a2, v10);
  __n1 = sub_216B25B78((uint64_t)a3, v11);
  v75 = *(_QWORD *)sub_216B25C44(&v72, &__n1);
  result = sub_216B21E8C(&v76, &v75);
  if (*(_DWORD *)result <= a4)
    return result;
  LODWORD(__n1) = 0;
  v76 = sub_216B25B78(a2, v13);
  v15 = __n1;
  if ((_DWORD)__n1 != v76)
  {
    while (1)
    {
      v16 = (unsigned __int8 *)sub_216B25B54(a2, v15);
      v17 = sub_216B71384(*v16);
      v18 = v76;
      v19 = __n1;
      if (!v17)
        break;
      v15 = __n1 + 1;
      LODWORD(__n1) = v15;
      if (v15 == v76)
        goto LABEL_9;
    }
    while (v18 != v19)
    {
      v20 = (unsigned __int8 *)sub_216B25B54(a2, v18 - 1);
      if (!sub_216B71384(*v20))
        break;
      v18 = --v76;
      v19 = __n1;
    }
  }
LABEL_9:
  v69 = (std::string *)a2;
  if (!sub_216B25DD0((uint64_t)a3, v14))
  {
    v23 = sub_216B25B78((uint64_t)a3, v21);
    LODWORD(v24) = v23;
    if (v23)
    {
      v25 = 0;
      v26 = v23;
      do
      {
        v27 = (unsigned __int8 *)sub_216B25B54((uint64_t)a3, v25);
        if (!sub_216B71384(*v27))
          goto LABEL_17;
        ++v25;
      }
      while (v26 != v25);
      LODWORD(v25) = v24;
    }
    else
    {
      LODWORD(v25) = 0;
    }
LABEL_17:
    while ((_DWORD)v25 != (_DWORD)v24)
    {
      v24 = (v24 - 1);
      v28 = (unsigned __int8 *)sub_216B25B54((uint64_t)a3, v24);
      if (!sub_216B71384(*v28))
      {
        v29 = v24 + 1;
LABEL_21:
        v75 = v25;
        sub_216B9817C((uint64_t)a3, 0, v29, (uint64_t)&v72);
        sub_216B26CA0(v73, &v72);
        v30 = sub_216B271D0(v73[0], v73[1]);
        std::string::~string(&v72);
        LODWORD(v72.__r_.__value_.__l.__data_) = v30;
        LODWORD(__n1) = *(_DWORD *)sub_216B1D574(&v75, &__n1);
        i = *(_DWORD *)sub_216B21E8C(&v72, &v76);
        goto LABEL_22;
      }
    }
    v29 = v25;
    goto LABEL_21;
  }
  for (i = v76; i < (int)sub_216C05A04(a5) && sub_216C05A20(a5, v76) == -1; v76 = i)
  {
    i = v76 + 1;
LABEL_22:
    ;
  }
  LODWORD(v72.__r_.__value_.__l.__data_) = sub_216C05A04(a5);
  v31 = (unsigned int *)sub_216B1D574(&__n1, &v72);
  v32 = sub_216C05A20(a5, *v31);
  LODWORD(v72.__r_.__value_.__l.__data_) = sub_216C05A04(a5);
  v33 = (unsigned int *)sub_216B1D574(&v76, &v72);
  v34 = sub_216C05A20(a5, *v33);
  v35 = v76 - __n1;
  v36 = sub_216C0576C(a5, v34);
  v70 = sub_216C0576C(a5, v32) - v36 + v35;
  v71 = a4;
  v38 = v70 + 8;
  if (v70 + 8 >= a4)
    v38 = 0;
  v39 = a4 - v38;
  while (1)
  {
    while (v32)
    {
      v40 = a5;
      for (j = v32; ; j = v43)
      {
        v42 = sub_216C0572C(v40, j);
        v43 = v42;
        if (!v42)
          break;
        v44 = (unsigned __int8 *)sub_216B25B54((uint64_t)a1, v42);
        if (!sub_216B71384(*v44))
          break;
        v40 = a5;
      }
      do
      {
        v45 = v43;
        if (!v43)
          break;
        v43 = sub_216C0572C(a5, v43);
        v46 = (unsigned __int8 *)sub_216B25B54((uint64_t)a1, v43);
      }
      while (!sub_216B71384(*v46));
      v47 = sub_216C0576C(a5, v34);
      v49 = v47 - sub_216C0576C(a5, v45);
      v50 = v49 <= v39;
      if (v49 <= v39)
        v32 = v45;
      if (sub_216B25B78((uint64_t)a1, v48) > (unint64_t)v34)
        goto LABEL_43;
      if (v49 > v39)
        goto LABEL_58;
    }
    if (sub_216B25B78((uint64_t)a1, v37) <= (unint64_t)v34)
    {
      v32 = 0;
      goto LABEL_58;
    }
    v50 = 0;
    v32 = 0;
    if (sub_216B25B78((uint64_t)a1, v51) <= (unint64_t)v34)
      break;
LABEL_43:
    v52 = a5;
    for (k = v34; ; k = v54)
    {
      v54 = sub_216C056F0(v52, k);
      v55 = v54;
      if (sub_216B25B78((uint64_t)a1, v56) <= (unint64_t)v54)
        break;
      v58 = (unsigned __int8 *)sub_216B25B54((uint64_t)a1, v54);
      if (!sub_216B71384(*v58))
      {
        v55 = v54;
        break;
      }
      v52 = a5;
    }
    if (sub_216B25B78((uint64_t)a1, v57) > v55)
    {
      do
      {
        v59 = (unsigned __int8 *)sub_216B25B54((uint64_t)a1, v55);
        if (!sub_216B71384(*v59))
          break;
        v54 = sub_216C056F0(a5, v54);
        v55 = v54;
      }
      while (sub_216B25B78((uint64_t)a1, v60) > (unint64_t)v54);
    }
    v61 = sub_216C0576C(a5, v54);
    if (v61 - sub_216C0576C(a5, v32) > v39)
    {
      v62 = v50;
    }
    else
    {
      v34 = v54;
      v62 = 1;
    }
    if ((v62 & 1) == 0)
      goto LABEL_58;
  }
  v32 = 0;
LABEL_58:
  LODWORD(__n1) = sub_216C0576C(a5, v32);
  v76 = sub_216C0576C(a5, v34) + v70;
  v64 = sub_216B25B78((uint64_t)a1, v63);
  v65 = sub_216C0576C(a5, v64);
  result = sub_216C0576C(a5, v34);
  v66 = __n1;
  v67 = v76;
  if ((v65 - result) >= 4)
    result = (uint64_t)std::string::replace(a1, v34, 0xFFFFFFFFFFFFFFFFLL, "...");
  if (v67 > v71 && v66 >= 6)
  {
    std::string::replace(a1, 0, v32, "  ...");
    std::string::replace(v69, 0, __n1, "     ");
    result = sub_216B25DD0((uint64_t)a3, v68);
    if ((result & 1) == 0)
      return (uint64_t)std::string::replace(a3, 0, __n1, "     ");
  }
  return result;
}

_BYTE *sub_216C0480C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char v14;
  char v15;

  v6 = sub_216B25B78(a2, a2);
  j_j_j_nullsub_1(a2);
  nullsub_1(&v14, v7);
  sub_216B2B3F0(a3, v6 + 1, &v15);
  v9 = sub_216B25CC0(a3, v8);
  v11 = (_BYTE *)nullsub_1(v9, v10);
  sub_216B2B3F4(v11, 1, a1);
  sub_216B26088(a2, v12);
  sub_216B2B250((uint64_t)(v11 + 1));
  return sub_216B2B3F4(&v11[v6 + 1], 1, 0);
}

void sub_216C048C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4;
  void ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v17[40];
  unsigned __int8 v18;
  std::string v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a2;
  v22 = a3;
  if (!sub_216B29094((uint64_t)&v21))
  {
    v20 = 0;
    sub_216B25034(&v19);
    if (!sub_216B1E67C((uint64_t)&v21))
      goto LABEL_14;
    v4 = 0;
    v5 = (void ***)(a1 + 40);
    do
    {
      v6 = v21;
      v7 = v22;
      v8 = sub_216B1E600(a1 + 16);
      sub_216C04D38(v6, v7, (uint64_t *)&v20, *(_DWORD *)(v8 + 24), (uint64_t)v17);
      v9 = v18;
      v10 = v18 == 0;
      v11 = *(_DWORD *)(sub_216B1E600(a1 + 16) + 4) & 0x8000;
      if (v9 == v4 && v11 != 0)
      {
        if (v4)
          (*((void (**)(void **))**v5 + 4))(*v5);
        sub_216B2E0B0(*v5, (uint64_t)&v19);
        sub_216B25BB0((uint64_t)&v19, v13);
        if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 5) & 0x80) != 0)
          (*((void (**)(void **))**v5 + 3))(*v5);
      }
      v14 = sub_216B24850((uint64_t)v17);
      sub_216B26B40(&v19, v14, v15);
      sub_216C04FE4(v17);
      v16 = v20;
      v4 = v10;
    }
    while (v16 < sub_216B1E67C((uint64_t)&v21));
    if (!v9)
    {
      if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 5) & 0x80) != 0)
        (*((void (**)(void **))**v5 + 4))(*v5);
      sub_216B2E0B0(*v5, (uint64_t)&v19);
      if ((*(_BYTE *)(sub_216B1E600(a1 + 16) + 5) & 0x80) != 0)
        (*((void (**)(void **))**v5 + 3))(*v5);
    }
    else
    {
LABEL_14:
      sub_216B2E0B0(*(void ***)(a1 + 40), (uint64_t)&v19);
      v5 = (void ***)(a1 + 40);
    }
    sub_216B251FC((uint64_t)*v5, 10);
    std::string::~string(&v19);
  }
}

uint64_t sub_216C04A80(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  void **v21;
  unsigned int v22;
  void **v23;
  void **v24;
  unsigned int v25;
  void **v26;
  void **v27;
  unsigned int v28;
  void **v29;
  void **v30;
  unsigned int v31;
  void **v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35[2];
  _QWORD v36[3];
  int v37;
  _QWORD v38[2];

  v38[0] = a2;
  v38[1] = a3;
  result = sub_216B1E600(a1 + 16);
  if ((*(_BYTE *)(result + 5) & 2) != 0)
  {
    v7 = (unsigned int *)sub_216B1E600((uint64_t)v38);
    v8 = sub_216B4C820(v38);
    if (v7 == (unsigned int *)v8)
    {
LABEL_9:
      v10 = (unsigned int *)sub_216B1E600((uint64_t)v38);
      result = sub_216B4C820(v38);
      if (v10 != (unsigned int *)result)
      {
        v11 = (unsigned int *)result;
        do
        {
          v12 = sub_216B71D08(v10);
          v13 = sub_216B69130(v10);
          v14 = v12;
          v15 = sub_216B60568(a4, v12);
          v16 = sub_216B60568(a4, v13);
          v17 = v16;
          v18 = HIDWORD(v16);
          if (sub_216B71E34((uint64_t)v10))
            LODWORD(v18) = sub_216B711E0(v13, a4, *(_QWORD *)(a1 + 8)) + v18;
          sub_216B63858((uint64_t)a4, v14, 1, (uint64_t)v36);
          result = sub_216B603D4(v36);
          if ((result & 1) != 0)
            break;
          sub_216B248A0(*(_QWORD *)(a1 + 40), "fix-it:\"");
          v19 = *(_QWORD *)(a1 + 40);
          v20 = (char *)sub_216B1E600((uint64_t)v36);
          sub_216B1E678((int)v35, v20);
          sub_216B40238(v19, v35[0], v35[1], 0);
          v21 = sub_216B248A0(*(_QWORD *)(a1 + 40), "\":{");
          v22 = sub_216B63A50((uint64_t)a4, v15, SHIDWORD(v15), 0);
          v23 = sub_216B248D8(v21, v22);
          v24 = (void **)sub_216B251FC((uint64_t)v23, 58);
          v25 = sub_216B6369C((uint64_t)a4, v15, HIDWORD(v15), 0);
          v26 = sub_216B248D8(v24, v25);
          v27 = (void **)sub_216B251FC((uint64_t)v26, 45);
          v28 = sub_216B63A50((uint64_t)a4, v17, v18, 0);
          v29 = sub_216B248D8(v27, v28);
          v30 = (void **)sub_216B251FC((uint64_t)v29, 58);
          v31 = sub_216B6369C((uint64_t)a4, v17, v18, 0);
          v32 = sub_216B248D8(v30, v31);
          sub_216B248A0((uint64_t)v32, "}:\"");
          v33 = *(_QWORD *)(a1 + 40);
          sub_216B26CA0(v34, v10 + 6);
          sub_216B40238(v33, v34[0], v34[1], 0);
          result = (uint64_t)sub_216B248A0(*(_QWORD *)(a1 + 40), "\"\n");
          v10 += 14;
        }
        while (v10 != v11);
      }
    }
    else
    {
      v9 = (unsigned int *)v8;
      while (1)
      {
        result = sub_216B71F50();
        if ((result & 1) != 0)
          break;
        LODWORD(v36[0]) = sub_216B71D08(v7);
        result = sub_216B5E144(v36);
        if ((result & 1) != 0)
          break;
        v37 = sub_216B69130(v7);
        result = sub_216B5E144(&v37);
        if ((result & 1) != 0)
          break;
        v7 += 14;
        if (v7 == v9)
          goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t sub_216C04D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  char v16;
  char v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _QWORD v22[2];
  char v23;
  _QWORD v24[2];
  unsigned int *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  const void *v28[5];
  uint64_t v29;
  uint64_t v30;

  v29 = a1;
  v30 = a2;
  if (sub_216B26288(&v29, *a3) == 9)
  {
    v8 = sub_216C05A6C(v29, v30, *a3);
    v9 = a4 + v8 / a4 * a4 - v8;
    ++*a3;
    sub_216B78900(v28);
    sub_216C05000(v28, v9, 32);
    LOBYTE(v27) = 1;
    v10 = (char *)&v27;
LABEL_12:
    sub_216C05ADC((uint64_t)v28, (uint64_t)v10, a5);
    return sub_216B2489C(v28);
  }
  v11 = (unsigned __int8 *)(sub_216B1E600((uint64_t)&v29) + *a3);
  v27 = v11;
  v12 = sub_216B1E67C((uint64_t)&v29);
  if (!sub_216B2535C(v11, (uint64_t)&v11[v12 - *a3]))
  {
    sub_216B1E678((int)v22, "<XX>");
    sub_216C05AEC(v28, v22[0], v22[1]);
    v15 = sub_216B26288(&v29, *a3);
    v16 = sub_216B403E0(v15 >> 4);
    *(_BYTE *)sub_216B1FF44((uint64_t)v28, 1u) = v16;
    v17 = sub_216B403E0(v15 & 0xF);
    *(_BYTE *)sub_216B1FF44((uint64_t)v28, 2u) = v17;
    ++*a3;
    LOBYTE(v25) = 0;
    v10 = (char *)&v25;
    goto LABEL_12;
  }
  v26 = 0;
  v25 = &v26;
  v13 = sub_216B26288(&v29, *a3);
  v14 = &v11[sub_216B2546C(v13)];
  sub_216B2586C(&v27, v14, &v25, (unint64_t)&v27, 0);
  *a3 += v27 - v11;
  if ((sub_216B271D4(v26) & 1) == 0)
  {
    sub_216B1E678((int)v24, "<U+>");
    sub_216C05AEC(v28, v24[0], v24[1]);
    if (v26)
    {
      do
      {
        v18 = (_BYTE *)(sub_216B1E600((uint64_t)v28) + 3);
        v23 = sub_216B403E0(v26 & 0xF);
        sub_216B70C8C((uint64_t)v28, v18, &v23);
        v19 = v26;
        v26 >>= 4;
      }
      while (v19 >= 0x10);
    }
    if ((unint64_t)sub_216B1FF14((uint64_t)v28) <= 7)
    {
      do
      {
        v20 = (_BYTE *)(sub_216B1E600((uint64_t)v28) + 3);
        v23 = sub_216B403E0(0);
        sub_216B70C8C((uint64_t)v28, v20, &v23);
      }
      while ((unint64_t)sub_216B1FF14((uint64_t)v28) < 8);
    }
    v23 = 0;
    v10 = &v23;
    goto LABEL_12;
  }
  sub_216C05B00(v28, v11, v14);
  v23 = 1;
  sub_216C05AF0((uint64_t)v28, (uint64_t)&v23, a5);
  return sub_216B2489C(v28);
}

void sub_216C04FE8(uint64_t a1, int a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  sub_216C03888(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_216C04FF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 8);
}

uint64_t sub_216C05000(const void **a1, unsigned int a2, char a3)
{
  char v4;

  v4 = a3;
  return sub_216C05254(a1, a2, (uint64_t)&v4);
}

uint64_t sub_216C05024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v6;
  _QWORD v8[2];

  v4 = a1;
  v8[0] = a2;
  v8[1] = a3;
  if (a1 < a4)
  {
    v4 = a1;
    while (1)
    {
      v6 = sub_216B26288(v8, v4);
      if (!sub_216B71384(v6))
        break;
      if ((_DWORD)a4 == (_DWORD)++v4)
        return a4;
    }
  }
  return v4;
}

uint64_t sub_216C05088(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  char v21;
  _QWORD v22[5];
  char v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v25 = a3;
  v10 = a1 + 1;
  if (sub_216B1E67C((uint64_t)&v24) != v10)
  {
    v11 = sub_216B26288(&v24, a1);
    v12 = sub_216C052FC(v11);
    v23 = v12;
    if (v12)
    {
      sub_216B78900(v22);
      sub_216B1FBBC((uint64_t)v22, &v23);
      v13 = v10;
      if (v10 < a4)
      {
        v13 = v10;
        while (!sub_216B29084(v22))
        {
          v14 = sub_216B26288(&v24, v13);
          if (*(unsigned __int8 *)sub_216B6D364((uint64_t)v22) == v14)
          {
            sub_216B295C4((uint64_t)v22);
          }
          else
          {
            v21 = 0;
            v15 = sub_216B26288(&v24, v13);
            v16 = sub_216C052FC(v15);
            v21 = v16;
            if (v16)
              sub_216B1FBBC((uint64_t)v22, &v21);
          }
          if ((_DWORD)a4 == (_DWORD)++v13)
          {
LABEL_16:
            v13 = a4;
            goto LABEL_21;
          }
        }
      }
      if (v13 < a4)
      {
        v13 = v13;
        while (1)
        {
          v17 = sub_216B26288(&v24, v13);
          if (sub_216B71384(v17))
            break;
          if ((_DWORD)a4 == (_DWORD)++v13)
            goto LABEL_16;
        }
      }
LABEL_21:
      if (v13 - a1 >= a6 / 3 && v13 - a1 + a5 > a6)
        v13 = sub_216C05088(v10, v24, v25, a4, (a5 + 1), a6);
      sub_216B2489C(v22);
      return v13;
    }
    else if (v10 < a4)
    {
      while (1)
      {
        v18 = sub_216B26288(&v24, v10);
        if (sub_216B71384(v18))
          break;
        if ((_DWORD)a4 == (_DWORD)++v10)
          return a4;
      }
    }
  }
  return v10;
}

uint64_t sub_216C05254(const void **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_216B20594(a1);
  if (sub_216B28190((uint64_t)a1) < (unint64_t)a2)
    sub_216B20384(a1, a2);
  v6 = sub_216B1E600((uint64_t)a1);
  sub_216B203A4((uint64_t)a1, v6 + a2);
  v7 = sub_216B1E600((uint64_t)a1);
  v8 = sub_216B1E67C((uint64_t)a1);
  return sub_216C052D8(v7, v8, a3);
}

_BYTE *sub_216C052DC(_BYTE *result, _BYTE *a2, _BYTE *a3)
{
  if (result != a2)
  {
    do
      *result++ = *a3;
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t sub_216C052FC(int a1)
{
  uint64_t result;

  result = 39;
  if (a1 > 90)
  {
    switch(a1)
    {
      case '[':
        return 93;
        return result;
      case '{':
        return 125;
    }
  }
  else
  {
    switch(a1)
    {
      case '"':
        return 34;
      case '\'':
        return result;
      case '(':
        return 41;
    }
  }
  return 0;
}

uint64_t sub_216C05364(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a3;
  sub_216B24898(&v7, a1);
  sub_216C053E0(a1 + 24);
  sub_216C053E0(a1 + 848);
  sub_216C053E4(v7, v8, a4, (const void **)(a1 + 24));
  sub_216C054E0(v7, v8, a4, (const void **)(a1 + 848));
  return a1;
}

_DWORD *sub_216C053E4(uint64_t a1, uint64_t a2, unsigned int a3, const void **a4)
{
  _DWORD *result;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[12];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  sub_216B20594(a4);
  if (sub_216B29094((uint64_t)&v14))
  {
    v12[0] = 0;
    return (_DWORD *)sub_216C055FC(a4, 1u, (uint64_t)v12);
  }
  else
  {
    v7 = sub_216B1E67C((uint64_t)&v14);
    v12[0] = -1;
    sub_216C055FC(a4, v7 + 1, (uint64_t)v12);
    v13 = 0;
    if (sub_216B1E67C((uint64_t)&v14))
    {
      LODWORD(v8) = 0;
      v9 = 0;
      do
      {
        *(_DWORD *)sub_216B4B528((uint64_t)a4, v8) = v9;
        sub_216C04D38(v14, v15, (uint64_t *)&v13, a3, (uint64_t)v12);
        v10 = sub_216B28180((uint64_t)v12);
        v9 += sub_216B271D0(v10, v11);
        sub_216C04FE4(v12);
        v8 = v13;
      }
      while (v8 < sub_216B1E67C((uint64_t)&v14));
    }
    else
    {
      v9 = 0;
    }
    result = (_DWORD *)sub_216B3AF70((uint64_t)a4);
    *result = v9;
  }
  return result;
}

_DWORD *sub_216C054E0(uint64_t a1, uint64_t a2, unsigned int a3, const void **a4)
{
  _DWORD *result;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD v12[12];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  sub_216B20594(a4);
  if (sub_216B29094((uint64_t)&v14))
  {
    v12[0] = 0;
    return (_DWORD *)sub_216C055FC(a4, 1u, (uint64_t)v12);
  }
  else
  {
    v13 = 0;
    if (sub_216B1E67C((uint64_t)&v14))
    {
      LODWORD(v7) = 0;
      v8 = 0;
      do
      {
        v12[0] = -1;
        sub_216C055FC(a4, v8 + 1, (uint64_t)v12);
        *(_DWORD *)sub_216B3AF70((uint64_t)a4) = v7;
        sub_216C04D38(v14, v15, (uint64_t *)&v13, a3, (uint64_t)v12);
        v9 = sub_216B28180((uint64_t)v12);
        v8 += sub_216B271D0(v9, v10);
        sub_216C04FE4(v12);
        v7 = v13;
      }
      while (v7 < sub_216B1E67C((uint64_t)&v14));
      v11 = v8 + 1;
    }
    else
    {
      LODWORD(v7) = 0;
      v11 = 1;
    }
    v12[0] = -1;
    sub_216C055FC(a4, v11, (uint64_t)v12);
    result = (_DWORD *)sub_216B3AF70((uint64_t)a4);
    *result = v7;
  }
  return result;
}

uint64_t sub_216C055F4(uint64_t a1)
{
  return sub_216B264A8(a1, 0xC8u);
}

unint64_t sub_216C055FC(const void **a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a2;
  if (sub_216B262E4((uint64_t)a1) <= (unint64_t)a2)
  {
    result = sub_216B262E4((uint64_t)a1);
    if (result >= v5)
      return result;
    if (sub_216B7AB20((uint64_t)a1) < v5)
      sub_216B26598(a1, v5);
    v9 = sub_216B1E67C((uint64_t)a1);
    v10 = sub_216B1E600((uint64_t)a1);
    sub_216C056CC(v9, v10 + 4 * v5, a3);
  }
  else
  {
    v6 = sub_216B1E600((uint64_t)a1) + 4 * v5;
    v7 = sub_216B1E67C((uint64_t)a1);
    nullsub_1(v6, v7);
  }
  v11 = sub_216B1E600((uint64_t)a1) + 4 * v5;
  return sub_216B203A4((uint64_t)a1, v11);
}

_DWORD *sub_216C056D0(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result != a2)
  {
    do
      *result++ = *a3;
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t sub_216C056F0(uint64_t a1, int a2)
{
  uint64_t v2;

  LODWORD(v2) = a2;
  do
    v2 = (v2 + 1);
  while (sub_216C0576C(a1, v2) == -1);
  return v2;
}

uint64_t sub_216C0572C(uint64_t a1, int a2)
{
  uint64_t v2;

  LODWORD(v2) = a2;
  do
    v2 = (v2 - 1);
  while (sub_216C0576C(a1, v2) == -1);
  return v2;
}

uint64_t sub_216C0576C(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)sub_216B4B528(a1 + 24, a2);
}

uint64_t sub_216C05788(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a1;
  v5 = sub_216B2AA64((uint64_t)&v7, (uint64_t)&v8);
  return sub_216C057D0(a1, v5, a3);
}

uint64_t sub_216C057D0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = nullsub_1(a2, a2);
  result = a1;
  sub_216C05804(a1, v5, a3);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216C05804(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (a2 >= 1)
  {
    v4 = a2 + 1;
    do
    {
      v5 = *a3;
      *(_BYTE *)sub_216B1E600((uint64_t)&v6) = v5;
      sub_216B2AB40(&v6);
      --v4;
    }
    while (v4 > 1);
  }
}

uint64_t sub_216C05868()
{
  uint64_t v0;

  sub_216C05928();
  return v0;
}

_BYTE *sub_216C05880(std::string *a1, uint64_t a2)
{
  unsigned int v2;
  _BYTE *result;
  uint64_t v5;
  const std::string::value_type *v6;
  uint64_t v7[2];
  _BYTE v8[48];
  uint64_t v9;

  v2 = a2;
  result = (_BYTE *)sub_216B25B78((uint64_t)a1, a2);
  if (result)
  {
    v5 = (uint64_t)(result - 1);
    do
    {
      result = (_BYTE *)sub_216B25B54((uint64_t)a1, v5);
      if (*result == 9)
      {
        v9 = v5;
        sub_216B26CA0(v7, a1);
        sub_216C04D38(v7[0], v7[1], &v9, v2, (uint64_t)v8);
        v6 = (const std::string::value_type *)sub_216B2A0B4((uint64_t)v8);
        std::string::replace(a1, v5, 1uLL, v6);
        result = (_BYTE *)sub_216C04FE4(v8);
      }
      --v5;
    }
    while (v5 != -1);
  }
  return result;
}

uint64_t sub_216C05930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216C059BC(a1, a2);
  v7 = v6;
  v8 = (char *)sub_216B2F028(a3);
  v9 = sub_216B206CC((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216C05A00(a1, v9);
  v13 = sub_216B2F02C(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216C059BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = sub_216B2F028(a1);
  v4 = sub_216B2F028(a2);
  return sub_216B206E0((uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_216C05A04(uint64_t a1)
{
  return *(unsigned int *)sub_216B3AF70(a1 + 24);
}

uint64_t sub_216C05A20(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)sub_216B4B528(a1 + 848, a2);
}

void sub_216C05A3C(std::string *a1)
{
  sub_216B1FF6C(&a1[35].__r_.__value_.__r.__words[1]);
  sub_216B1FF6C(&a1[1]);
  std::string::~string(a1);
}

uint64_t sub_216C05A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  if (!a3)
    return 0;
  v4 = 0;
  v5 = a3 - 1;
  while (sub_216B26288(v7, v5) != 9)
  {
    v4 = (v4 + 1);
    if (--v5 == -1)
      return a3;
  }
  return v4;
}

uint64_t sub_216C05ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216C05B04(a3, a1, a2);
}

uint64_t sub_216C05AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216C05C0C(a3, a1, a2);
}

uint64_t sub_216C05B08(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_216C05B30();
  *(_BYTE *)(result + 40) = *a3;
  return result;
}

const void **sub_216C05B38(const void **a1, _QWORD *a2)
{
  sub_216B2112C();
  if (!sub_216B29084(a2))
    sub_216B2A3F0(a1, (uint64_t)a2);
  return a1;
}

uint64_t sub_216C05B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (char *)sub_216B1E600((uint64_t)v7);
  v5 = (char *)sub_216B1E608(v7);
  return sub_216C05BC8(a1, v4, v5);
}

uint64_t sub_216C05BC8(uint64_t a1, char *a2, char *a3)
{
  const void **v6;

  v6 = (const void **)sub_216B2112C();
  sub_216B202D8(v6, a2, a3);
  return a1;
}

uint64_t sub_216C05C10(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_216C05C38();
  *(_BYTE *)(result + 40) = *a3;
  return result;
}

uint64_t sub_216C05C40(uint64_t a1, _QWORD *a2)
{
  sub_216B2112C();
  if (!sub_216B29084(a2))
    sub_216C05C84(a1, a2);
  return a1;
}

uint64_t sub_216C05C84(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;

  if ((_QWORD *)a1 != a2)
  {
    if (sub_216B2081C(a2))
    {
      v4 = sub_216B1FF14((uint64_t)a2);
      v5 = sub_216B1FF14(a1);
      if (v5 >= v4)
      {
        v13 = sub_216B1E600(a1);
        if (v4)
        {
          sub_216B1E600((uint64_t)a2);
          sub_216B1E67C((uint64_t)a2);
          v13 = sub_216B205D4();
        }
        v14 = sub_216B1E67C(a1);
        nullsub_1(v13, v14);
        v15 = a1;
        v16 = v13;
      }
      else
      {
        v6 = v5;
        if (sub_216B28190(a1) >= v4)
        {
          if (v6)
          {
            sub_216B1E600((uint64_t)a2);
            sub_216B1E600((uint64_t)a2);
            sub_216B1E600(a1);
            sub_216B205D4();
          }
        }
        else
        {
          v7 = sub_216B1E600(a1);
          v8 = sub_216B1E67C(a1);
          nullsub_1(v7, v8);
          v9 = sub_216B1E600(a1);
          sub_216B203A4(a1, v9);
          sub_216B20384((const void **)a1, v4);
          v6 = 0;
        }
        v17 = (void *)(sub_216B1E600((uint64_t)a2) + v6);
        v18 = sub_216B1E67C((uint64_t)a2);
        v19 = sub_216B1E600(a1);
        sub_216B3B518(v17, v18, (void *)(v19 + v6));
        v16 = sub_216B1E600(a1) + v4;
        v15 = a1;
      }
      sub_216B203A4(v15, v16);
      sub_216B20594(a2);
    }
    else
    {
      v10 = sub_216B1E600(a1);
      v11 = sub_216B1E67C(a1);
      nullsub_1(v10, v11);
      if (!sub_216B2081C((_QWORD *)a1))
      {
        v12 = (void *)sub_216B1E600(a1);
        free(v12);
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      sub_216B86098(a2);
    }
  }
  return a1;
}

void sub_216C05E78(_DWORD *a1, int a2, _QWORD *a3)
{
  const void *v5[16];

  sub_216B4B7AC(a1, a2);
  sub_216C01C3C(v5);
  sub_216B4B808(a3, v5);
  __asm { BR              X10 }
}

uint64_t sub_216C05ECC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _BYTE v6[24];
  _DWORD v7[8];
  _BYTE v8[176];

  v2 = sub_216B4B764(v0);
  v5[0] = sub_216B24850((uint64_t)v8);
  v5[1] = v3;
  sub_216C05FA4(v2, (uint64_t)v5, (uint64_t)v6);
  sub_216C05FB4(v7, (uint64_t)v6);
  sub_216C05F4C((uint64_t *)(v1 + 16), (uint64_t)v7);
  sub_216B4F49C(v7);
  return sub_216B2489C(v8);
}

uint64_t sub_216C05F4C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216C060F0(a1, a2);
  }
  else
  {
    sub_216C06080((uint64_t)a1, a2);
    result = v4 + 32;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216C05FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216C06068(a3, a1, a2);
}

uint64_t sub_216C05FB8(uint64_t a1)
{
  return sub_216B2C000(a1 + 16);
}

_QWORD *sub_216C05FC0(_QWORD *result)
{
  *result += 32;
  return result;
}

uint64_t sub_216C05FD0(uint64_t a1)
{
  return sub_216B2C910((uint64_t *)(a1 + 40));
}

uint64_t sub_216C05FD8(uint64_t a1)
{
  return sub_216B2C000(a1 + 40);
}

uint64_t sub_216C05FE0(uint64_t a1)
{
  return sub_216B2C910((uint64_t *)(a1 + 64));
}

uint64_t sub_216C05FE8(uint64_t a1)
{
  return sub_216B2C000(a1 + 64);
}

uint64_t sub_216C05FF0(uint64_t a1)
{
  return sub_216B2C910((uint64_t *)(a1 + 88));
}

uint64_t sub_216C05FF8(uint64_t a1)
{
  return sub_216B2C000(a1 + 88);
}

void sub_216C06004()
{
  void *v0;

  v0 = (void *)sub_216C06000();
  j__free(v0);
}

uint64_t sub_216C06018(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_24D606650;
  v2 = a1 + 2;
  sub_216B4F3E0(a1 + 11);
  sub_216B4F3E0(a1 + 8);
  sub_216B4F3E0(a1 + 5);
  sub_216B4F3E0(v2);
  return nullsub_1(a1, v3);
}

__n128 sub_216C0606C(uint64_t a1, _DWORD *a2, __n128 *a3)
{
  __n128 result;

  *(_DWORD *)a1 = *a2;
  result = *a3;
  *(__n128 *)(a1 + 8) = *a3;
  return result;
}

_QWORD *sub_216C06080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216C0619C(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216C061A0(v5, v7, a2);
  v10 += 32;
  return sub_216B2C330(&v9);
}

uint64_t sub_216C060F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B6C220(a1);
  v6 = sub_216B6FE30(a1, v5 + 1);
  v7 = sub_216B6C220(a1);
  sub_216B6FEA8(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216C061A0(v4, v9, a2);
  v13 += 32;
  sub_216C061F4(a1, v12);
  v10 = a1[1];
  sub_216C062E0(v12);
  return v10;
}

_QWORD *sub_216C061A4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *result = a2;
  v3 = *(_QWORD *)(a2 + 8);
  result[1] = v3;
  result[2] = v3 + 32 * a3;
  return result;
}

uint64_t sub_216C061B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216C061C4(a2, a3);
}

_DWORD *sub_216C061C8(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  sub_216B2B018(a1 + 2, a2 + 2);
  return a1;
}

uint64_t sub_216C061F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216C062E4(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B6C220(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216C062E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216C063AC(&v16);
    v9 = sub_216B703A0((uint64_t)v18);
    sub_216C061A0(a1, v8, v9);
    sub_216B703AC((uint64_t)v18);
    sub_216B703AC((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216C063B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216C063C4(a1);
  return nullsub_1(v1, v2);
}

uint64_t *sub_216C063C8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216C06424((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B70420(a1, v4);
    sub_216B4F584(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216C06424(uint64_t a1)
{
  return sub_216C0642C(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216C06430(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 32;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216B4F61C(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

_DWORD *sub_216C06498(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  sub_216B24898((_QWORD *)(a2 + 8), (uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_216C064CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;

  v8 = sub_216C06540((_QWORD *)a1);
  *v8 = off_24D6066A0;
  v8[2] = a2;
  sub_216B4AEC8(v8 + 3, a3);
  sub_216B324FC(a1 + 32);
  sub_216B25034(a1 + 40);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFE | a4;
  return a1;
}

_QWORD *sub_216C06540(_QWORD *result)
{
  *result = &unk_24D5F0820;
  result[1] = 0;
  return result;
}

uint64_t sub_216C06558(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24D6066A0;
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  std::string::~string((std::string *)(a1 + 40));
  sub_216B27C04(a1 + 32);
  sub_216B4B0A0(a1 + 24);
  return nullsub_1(a1, v3);
}

void sub_216C065BC()
{
  void *v0;

  v0 = (void *)sub_216C065B8();
  j__free(v0);
}

_QWORD *sub_216C065D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 32;
  v5 = sub_216B1D1D4(48);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = sub_216B1E600(a1 + 24);
  sub_216C02B08(v5, v6, a2, v7);
  return sub_216B27C30(v4, v5);
}

_QWORD *sub_216C06638(uint64_t a1)
{
  return sub_216B27C30(a1 + 32, 0);
}

uint64_t sub_216C06644(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  void **v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38[6];
  const void *v39[17];

  sub_216B4B7AC((_DWORD *)a1, a2);
  sub_216C01C3C(v39);
  sub_216B4B808(a3, v39);
  sub_216B40D84(v38);
  v6 = sub_216B1E600(a1 + 24);
  sub_216C06850((uint64_t)v38, a2, (uint64_t)a3, v6);
  v7 = sub_216C02C78(*(_QWORD *)(a1 + 16));
  if (!sub_216B25DD0(a1 + 40, v8))
  {
    v9 = sub_216B2E0B0(*(void ***)(a1 + 16), a1 + 40);
    sub_216B248A0((uint64_t)v9, ": ");
  }
  v10 = (_DWORD *)sub_216B4B764(a3);
  if (sub_216B27BAC(v10))
  {
    v36 = (uint64_t *)sub_216B25CA8(a1 + 32, v11);
    v12 = *(_DWORD *)sub_216B4B764(a3);
    v13 = sub_216B40E80(v38);
    v15 = v14;
    v16 = sub_216C06A48(a3);
    v18 = v17;
    v19 = sub_216C06A74(a3);
    v21 = v20;
    v22 = (_DWORD *)sub_216B4C808(a3);
    sub_216C01D4C((uint64_t)&v37, 0);
    *(_QWORD *)&v35 = v19;
    *((_QWORD *)&v35 + 1) = v21;
    sub_216C00AF8(v36, v12, a2, v13, v15, v16, v18, v23, v35, v22, v37);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = (*(_DWORD *)(sub_216B1E600(a1 + 24) + 4) >> 15) & 1;
    v26 = sub_216B1E600(a1 + 24);
    sub_216C02CB0(v24, a2, v25, (*(_DWORD *)(v26 + 4) >> 19) & 1);
    v27 = *(uint64_t **)(a1 + 16);
    v28 = sub_216B40E80(v38);
    v30 = v29;
    v31 = sub_216C02C78(*(_QWORD *)(a1 + 16)) - v7;
    v32 = *(unsigned int *)(sub_216B1E600(a1 + 24) + 28);
    v33 = sub_216B1E600(a1 + 24);
    sub_216C02E30(v27, a2 != 0, v28, v30, v31, v32, (*(_DWORD *)(v33 + 4) >> 15) & 1);
  }
  sub_216B408F0(*(uint64_t **)(a1 + 16));
  sub_216B40DB8(v38);
  return sub_216B2489C(v39);
}

uint64_t sub_216C06850(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  void **v6;
  int v7;
  _BOOL4 v8;
  unsigned int v10;
  unsigned int v11;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  void **v16;
  char *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = (void **)result;
  v7 = *(_DWORD *)(a4 + 4);
  if ((v7 & 0x800) != 0)
  {
    if (sub_216B4B758(a3) == 42)
      return (uint64_t)sub_216B248A0((uint64_t)v6, " [-ferror-limit=]");
    if (a2 == 4 && (v10 = sub_216B4B758(a3), sub_216B4E91C(v10)) && (v11 = sub_216B4B758(a3), !sub_216B4E9E8(v11)))
    {
      sub_216B248A0((uint64_t)v6, " [-Werror");
      v12 = 1;
      v13 = ",";
    }
    else
    {
      v12 = 0;
      v13 = " [";
    }
    v14 = sub_216B4B758(a3);
    v29 = sub_216B4EDEC(v14);
    v30 = v15;
    result = sub_216B29094((uint64_t)&v29);
    if ((result & 1) == 0)
    {
      v16 = sub_216B248A0((uint64_t)v6, v13);
      if (a2 == 2)
        v17 = "-R";
      else
        v17 = "-W";
      v18 = sub_216B248A0((uint64_t)v16, v17);
      sub_216B248E0((uint64_t)v18, v29, v30);
      v19 = sub_216B1E600(a3);
      v27 = sub_216C06AA0(v19);
      v28 = v20;
      result = sub_216B29094((uint64_t)&v27);
      if ((result & 1) == 0)
      {
        v21 = sub_216B248A0((uint64_t)v6, "=");
        result = (uint64_t)sub_216B248E0((uint64_t)v21, v27, v28);
      }
      v12 = 1;
    }
    v8 = v12 != 0;
    v7 = *(_DWORD *)(a4 + 4);
  }
  else
  {
    v8 = 0;
  }
  if ((v7 & 0x6000) != 0)
  {
    v22 = sub_216B4B758(a3);
    result = (uint64_t)sub_216B4E5A4(v22);
    if ((_DWORD)result)
    {
      v23 = result;
      if (v8)
        v24 = ",";
      else
        v24 = " [";
      sub_216B248A0((uint64_t)v6, v24);
      if ((*(_DWORD *)(a4 + 4) & 0x6000) == 0x2000)
      {
        sub_216B248D8(v6, v23);
      }
      else
      {
        v25 = sub_216B4E878(v23);
        sub_216B248E0((uint64_t)v6, v25, v26);
      }
      return sub_216B251FC((uint64_t)v6, 93);
    }
  }
  if (v8)
    return sub_216B251FC((uint64_t)v6, 93);
  return result;
}

uint64_t sub_216C06A48(_QWORD *a1)
{
  uint64_t v2;

  sub_216C01194(&v2, *a1 + 624);
  return v2;
}

uint64_t sub_216C06A74(_QWORD *a1)
{
  uint64_t v2;

  sub_216C01008(&v2, *a1 + 744);
  return v2;
}

uint64_t sub_216C06AA0(uint64_t a1)
{
  uint64_t v2;

  sub_216B26CA0(&v2, a1 + 256);
  return v2;
}

uint64_t sub_216C06AC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;

  v4 = sub_216C06540((_QWORD *)a1);
  sub_216C06BB4(v4 + 2);
  *(_QWORD *)a1 = off_24D6066F0;
  *(_QWORD *)(a1 + 16) = &unk_24D606748;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = sub_216BF4328(a2);
  *(_BYTE *)(a1 + 40) = sub_216C06BC8(*(_QWORD *)(a1 + 24));
  v5 = (_OWORD *)sub_216B1D1D4(112);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  sub_216C06BD0();
  sub_216B27D7C(a1 + 48, (uint64_t)v5);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_216C06BD4((_QWORD *)(a1 + 88));
  sub_216B61794(a1 + 184, 0);
  sub_216B61794(a1 + 208, 0);
  sub_216C06BD8(*(_QWORD *)(a1 + 24));
  if (sub_216C06BE4(*(_QWORD *)(a1 + 24)))
  {
    v6 = sub_216B4CA44(*(_QWORD *)(a1 + 24));
    sub_216B61858(a1, v6);
  }
  return a1;
}

_QWORD *sub_216C06BB4(_QWORD *result)
{
  *result = &unk_24D6028F0;
  return result;
}

uint64_t sub_216C06BC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_216C06BD8(uint64_t a1)
{
  *(_BYTE *)(a1 + 64) = 0;
  return *(_QWORD *)(a1 + 56);
}

BOOL sub_216C06BE4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72) != 0;
}

uint64_t sub_216C06BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24D6066F0;
  *(_QWORD *)(a1 + 16) = &unk_24D606748;
  v2 = a1 + 16;
  *(_QWORD *)(a1 + 72) = 0;
  sub_216C06C84(a1);
  sub_216C06BD8(*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  sub_216B61BB4(a1 + 208);
  sub_216B61BB4(a1 + 184);
  sub_216C06E78(a1 + 88);
  sub_216B3C0E0(a1 + 48);
  nullsub_1(v2, v4);
  return nullsub_1(a1, v5);
}

uint64_t sub_216C06C84(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _BYTE v32[16];

  v2 = sub_216C06BC8(*(_QWORD *)(a1 + 24));
  v3 = sub_216C06BD8(*(_QWORD *)(a1 + 24));
  sub_216B4B0AC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0);
  v5 = *(_DWORD **)(a1 + 72);
  if (v5)
  {
    if (!*(_DWORD *)(a1 + 84))
    {
      sub_216B4B364(*(_QWORD *)(a1 + 24), 458, (uint64_t)v32);
      sub_216C07D00((uint64_t)v32);
      sub_216B4B3B4(v32);
      ++*(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 84) = 1;
      v5 = *(_DWORD **)(a1 + 72);
    }
    v6 = *(_QWORD *)(a1 + 24);
    v7 = sub_216B25CA8(a1 + 48, v4);
    v8 = sub_216C07D0C(v6, v5, v7, (uint64_t *)(a1 + 88));
    v9 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = sub_216B25CA8(a1 + 48, v4);
    v12 = sub_216BFA340(v11);
    v14 = sub_216B25CA8(a1 + 48, v13);
    v15 = sub_216C05FB8(v14);
    LODWORD(v10) = sub_216C07E3C(v10, 0, v12, v15, (uint64_t)"error");
    v16 = *(_QWORD *)(a1 + 24);
    v18 = sub_216B25CA8(a1 + 48, v17);
    v19 = sub_216C05FD0(v18);
    v21 = sub_216B25CA8(a1 + 48, v20);
    v22 = sub_216C05FD8(v21);
    LODWORD(v19) = sub_216C07E3C(v16, 0, v19, v22, (uint64_t)"warn") + v10;
    v23 = *(_QWORD *)(a1 + 24);
    v25 = sub_216B25CA8(a1 + 48, v24);
    v26 = sub_216C05FF0(v25);
    v28 = sub_216B25CA8(a1 + 48, v27);
    v29 = sub_216C05FF8(v28);
    v9 = v19 + sub_216C07E3C(v23, 0, v26, v29, (uint64_t)"note");
    v8 = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v9 + v8;
  sub_216C06BD8(*(_QWORD *)(a1 + 24));
  sub_216B4B0AC(*(_QWORD *)(a1 + 24), v3, v2);
  v30 = (_OWORD *)sub_216B1D1D4(112);
  *v30 = 0u;
  v30[1] = 0u;
  v30[2] = 0u;
  v30[3] = 0u;
  v30[4] = 0u;
  v30[5] = 0u;
  v30[6] = 0u;
  sub_216C06BD0();
  sub_216B3C1E8(a1 + 48, (uint64_t)v30);
  return sub_216C08060((uint64_t *)(a1 + 88));
}

uint64_t sub_216C06E80(uint64_t a1)
{
  return sub_216C06E7C(a1 - 16);
}

void sub_216C06E88(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_216C06E7C(a1);
  j__free(v1);
}

void sub_216C06E9C(uint64_t a1)
{
  sub_216C06E88(a1 - 16);
}

uint64_t sub_216C06EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v6 + 1;
  if (a3 && !v6)
  {
    *(_QWORD *)(a1 + 56) = a3;
    *(_QWORD *)(a1 + 64) = a2;
    v7 = sub_216B40EE8(a3);
    sub_216B61858(a1, v7);
    sub_216B9C9E8(a3, a1 + 16);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t sub_216C06F1C(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v3 = *(_DWORD *)(a1 + 80) - 1;
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4)
      sub_216B9CA10(v4, a1 + 16);
    result = sub_216C06C84(a1);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_216C06F78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (!sub_216C07008(a3))
    goto LABEL_5;
  if (!*(_QWORD *)(a1 + 72) || (result = sub_216B4C808(a3), result == *(_QWORD *)(a1 + 72)))
  {
    v8 = sub_216B4C808(a3);
    sub_216B61858(a1, v8);
LABEL_5:
    v9 = sub_216B25CA8(a1 + 48, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 56))(v9, a2, a3);
  }
  return result;
}

BOOL sub_216C07008(uint64_t *a1)
{
  return sub_216C06BE4(*a1);
}

uint64_t sub_216C07010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[2];
  std::string v25;
  uint64_t v26[2];
  uint64_t v27;

  v27 = a3;
  v5 = sub_216B40EE8(a2);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
    v7 = v5 == v6;
  else
    v7 = 1;
  if (v7)
  {
    v8 = v5;
    v9 = sub_216B1E4E0((unsigned int *)&v27);
    v10 = sub_216B634EC(v8, v9, 0);
    v11 = sub_216B693F8((uint64_t)&v27);
    v12 = sub_216B634EC(v8, v11, 0);
    sub_216B1E684(v26, v10, v12 - v10);
    if (!sub_216B29094((uint64_t)v26))
    {
      v13 = sub_216B26CA8(v26, 0x5Cu, 0);
      if (v13 == -1)
      {
        sub_216C07284(v26[0], v26[1], (uint64_t *)(a1 + 88), v8, a2, v9, (_DWORD *)(a1 + 84));
      }
      else
      {
        v14 = v13;
        sub_216B25034(&v25);
        v15 = sub_216B1E67C((uint64_t)v26);
        std::string::reserve(&v25, v15);
        v16 = 0;
        do
        {
          if (v14 == sub_216B1E67C((uint64_t)v26))
            break;
          v17 = sub_216B2864C(v26, v16, v14 - v16);
          sub_216B26B40(&v25, v17, v18);
          v16 = v14 + 1;
          if (sub_216B26288(v26, v14 + 1) == 10 || sub_216B26288(v26, v14 + 1) == 13)
          {
            if (v14 + 2 < sub_216B1E67C((uint64_t)v26)
              && (sub_216B26288(v26, v14 + 2) == 10 || sub_216B26288(v26, v14 + 2) == 13))
            {
              v19 = sub_216B26288(v26, v14 + 2);
              v16 = v19 == sub_216B26288(v26, v14 + 1) ? v14 + 2 : v14 + 3;
            }
            else
            {
              v16 = v14 + 2;
            }
          }
          else
          {
            sub_216B26B1C(&v25, 92);
          }
          v14 = sub_216B26CA8(v26, 0x5Cu, v16);
        }
        while (v14 != -1);
        v20 = sub_216B2864C(v26, v16, 0xFFFFFFFFFFFFFFFFLL);
        sub_216B26B40(&v25, v20, v21);
        if (!sub_216B25DD0((uint64_t)&v25, v22))
        {
          sub_216B26CA0(v24, &v25);
          sub_216C07284(v24[0], v24[1], (uint64_t *)(a1 + 88), v8, a2, v9, (_DWORD *)(a1 + 84));
        }
        std::string::~string(&v25);
      }
    }
  }
  return 0;
}

void sub_216C07284(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7)
{
  _DWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  _BOOL4 v19;
  const char *v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t *v57;
  unsigned int v58;
  _DWORD *v59;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66[2];
  uint64_t v67[2];
  std::string v68;
  uint64_t v69[2];
  char v70[8];
  uint64_t v71[2];
  _QWORD v72[2];
  const void *v73;
  size_t v74;
  std::string v75;
  const void *v76[2];
  const void *v77[2];
  uint64_t v78[2];
  uint64_t v79[2];
  uint64_t v80[2];
  uint64_t v81[2];
  unsigned int v82;
  unsigned int v83;
  uint64_t v84[2];
  uint64_t v85[2];
  uint64_t v86[2];
  uint64_t v87[2];
  uint64_t v88[2];
  int v89;
  uint64_t v90[2];
  uint64_t v91[2];
  uint64_t v92[2];
  uint64_t v93[2];
  uint64_t v94[2];
  uint64_t v95[2];
  uint64_t v96[2];
  uint64_t v97[2];
  uint64_t v98[2];
  uint64_t v99;
  _BYTE *v100;
  int v101[3];

  v8 = (_DWORD *)a4;
  v101[0] = a6;
  if (a5)
    v12 = sub_216B2037C(a5);
  else
    v12 = sub_216B1E67C(a4);
  v13 = v12;
  sub_216C0839C(v98, a1, a2);
  v14 = a3 + 9;
  if (!a3)
    v14 = 0;
  v61 = v14;
  v62 = (uint64_t)v8;
  v15 = a3 + 6;
  if (!a3)
    v15 = 0;
  v63 = v15;
  v64 = v13;
  v16 = a3 + 3;
  if (!a3)
    v16 = 0;
  v65 = v16;
  while (!sub_216C083A0((uint64_t)v98))
  {
    sub_216B1E678((int)v97, "expected");
    if (!sub_216C083B0(v98, v97[0], v97[1], 1))
      break;
    sub_216C084A4(v98);
    sub_216B1E678((int)v96, "-");
    if (sub_216C084BC(v98, v96[0], v96[1]))
    {
      sub_216C084A4(v98);
      sub_216B1E678((int)v95, "error");
      v17 = a3;
      if (sub_216C084BC(v98, v95[0], v95[1])
        || (sub_216B1E678((int)v94, "warning"), v17 = v65, sub_216C084BC(v98, v94[0], v94[1]))
        || (sub_216B1E678((int)v93, "remark"), v17 = v63, sub_216C084BC(v98, v93[0], v93[1]))
        || (sub_216B1E678((int)v92, "note"), v17 = v61, sub_216C084BC(v98, v92[0], v92[1])))
      {
        sub_216C084A4(v98);
        if (*a7 == 2)
        {
          sub_216B4CD2C(v13, v101[0], 451, (uint64_t)&v75);
          v18 = 0;
          goto LABEL_20;
        }
        *a7 = 3;
        if (!v17)
          return;
        sub_216B1E678((int)v90, "-re");
        v19 = sub_216C084BC(v98, v90[0], v90[1]);
        v20 = "string";
        if (v19)
        {
          sub_216C084A4(v98);
          v20 = "regex";
        }
        sub_216B4AED0(&v89);
        sub_216B1E678((int)v88, "@");
        if (!sub_216C084BC(v98, v88[0], v88[1]))
        {
          v28 = 0;
          v89 = v101[0];
          goto LABEL_48;
        }
        sub_216C084A4(v98);
        LODWORD(v72[0]) = 0;
        sub_216B1E678((int)v87, "+");
        v21 = sub_216C084BC(v98, v87[0], v87[1]);
        if (v21 || (sub_216B1E678((int)v86, "-"), sub_216C084BC(v98, v86[0], v86[1])))
        {
          sub_216C084A4(v98);
          v75.__r_.__value_.__s.__data_[0] = 0;
          v22 = sub_216B63DE4(v8, v101[0], &v75);
          if (!v75.__r_.__value_.__s.__data_[0])
          {
            v23 = v22;
            if (sub_216C08540(v98, (int *)v72))
            {
              v24 = v72[0];
              v25 = LODWORD(v72[0]) < v23 || v21;
              if (v25 == 1)
              {
                if (!v21)
                  v24 = -LODWORD(v72[0]);
                v26 = v24 + v23;
                v27 = sub_216B60454(v8, v101[0]);
                v89 = sub_216B64658((uint64_t)v8, v27, v26, 1);
              }
            }
          }
LABEL_43:
          v28 = 0;
          goto LABEL_44;
        }
        if (sub_216C08540(v98, (int *)v72))
        {
          v29 = v72[0];
          if (!LODWORD(v72[0]))
            goto LABEL_43;
          v30 = sub_216B60454(v8, v101[0]);
          v28 = 0;
          v89 = sub_216B64658((uint64_t)v8, v30, v29, 1);
LABEL_44:
          v13 = v64;
          goto LABEL_45;
        }
        if (!a5)
        {
          v28 = 0;
          goto LABEL_45;
        }
        sub_216B1E678((int)v85, ":");
        v28 = 0;
        if (sub_216C083B0(v98, v85[0], v85[1], 0))
        {
          sub_216B1E684(&v75, v99, &v100[-v99]);
          sub_216C084A4(v98);
          v73 = 0;
          v53 = sub_216B8AAF8(a5, v101[0], (uint64_t)v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_, 0, 0, (uint64_t *)&v73, 0, 0, 0, 0);
          if (v53)
          {
            v54 = v53;
            LODWORD(v68.__r_.__value_.__l.__data_) = sub_216B641CC(v62, v53);
            if (sub_216B4B4A8(&v68))
              sub_216B84BE4(v62, v54, v101[0], 0, 0, 0);
            if (sub_216C08540(v98, (int *)v72) && LODWORD(v72[0]))
            {
              v55 = sub_216B6418C(v62, v54, v72[0], 1);
              v28 = 0;
              goto LABEL_87;
            }
            sub_216B1E678((int)v84, "*");
            if (sub_216C084BC(v98, v84[0], v84[1]))
            {
              v28 = 1;
              v55 = sub_216B6418C(v62, v54, 1u, 1);
LABEL_87:
              v89 = v55;
            }
            else
            {
              v28 = 0;
            }
            v8 = (_DWORD *)v62;
            goto LABEL_45;
          }
          v56 = sub_216B62D74(v101, (int)v99 - LODWORD(v98[0]));
          sub_216B4CD2C(v13, v56, 454, (uint64_t)&v68);
          v57 = sub_216B4B340((uint64_t *)&v68, (uint64_t)v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
          sub_216B60EA8(v57, (uint64_t)v20);
          sub_216B4B3B4(&v68);
          v8 = (_DWORD *)v62;
        }
        else
        {
LABEL_45:
          if (sub_216B4B4A8(&v89))
          {
            v31 = sub_216B62D74(v101, (int)v99 - LODWORD(v98[0]));
            sub_216B4CD2C(v13, v31, 455, (uint64_t)&v75);
            sub_216B60EA8((uint64_t *)&v75, (uint64_t)v20);
            sub_216B4B3B4(&v75);
          }
          else
          {
            sub_216C084A4(v98);
LABEL_48:
            sub_216C085B8((uint64_t)v98);
            v83 = 1;
            v82 = 1;
            if (!sub_216C08540(v98, (int *)&v83))
            {
              sub_216B1E678((int)v79, "+");
              if (!sub_216C084BC(v98, v79[0], v79[1]))
              {
                v32 = 1;
                goto LABEL_59;
              }
              goto LABEL_55;
            }
            sub_216C084A4(v98);
            sub_216B1E678((int)v81, "+");
            if (sub_216C084BC(v98, v81[0], v81[1]))
            {
LABEL_55:
              v32 = -1;
              v82 = -1;
LABEL_56:
              sub_216C084A4(v98);
LABEL_59:
              sub_216C085B8((uint64_t)v98);
              sub_216B1E678((int)v78, "{{");
              if (sub_216C084BC(v98, v78[0], v78[1]))
              {
                sub_216C084A4(v98);
                v34 = v99;
                sub_216B1E678((int)v77, "{{");
                sub_216B1E678((int)v76, "}}");
                if ((sub_216C0860C(v98, v77[0], (size_t)v77[1], v76[0], (size_t)v76[1]) & 1) != 0)
                {
                  v59 = a7;
                  v35 = v100;
                  sub_216C084A4(v98);
                  sub_216B25034(&v75);
                  sub_216B1E678((int)&v73, "\\n");
                  sub_216B1E684(v72, v34, &v35[-v34]);
                  v36 = sub_216B31B5C(v72, v73, v74, 0);
                  if (v36 != -1)
                  {
                    v38 = v36;
                    v39 = 0;
                    do
                    {
                      v40 = sub_216B2864C(v72, v39, v38 - v39);
                      sub_216B26B40(&v75, v40, v41);
                      sub_216B26B1C(&v75, 10);
                      v39 = sub_216B1E67C((uint64_t)&v73) + v38;
                      v38 = sub_216B31B5C(v72, v73, v74, v39);
                    }
                    while (v38 != -1);
                  }
                  if (sub_216B25DD0((uint64_t)&v75, v37))
                    sub_216C086D4(&v75, v34, v35);
                  if (v19 && sub_216B26B94((uint64_t)&v75, "{{", 0) == -1)
                  {
                    v58 = sub_216B62D74(v101, (int)v34 - LODWORD(v98[0]));
                    sub_216B4CD2C(v64, v58, 456, (uint64_t)&v68);
                    sub_216B26CA0(v71, &v75);
                    sub_216B4B340((uint64_t *)&v68, v71[0], v71[1]);
                    sub_216B4B3B4(&v68);
                    std::string::~string(&v75);
                    return;
                  }
                  v42 = v101[0];
                  v43 = v89;
                  sub_216B26CA0(v69, &v75);
                  v44 = sub_216C08094(v19, v42, v43, v28, v69[0], v69[1], v83, v32);
                  sub_216B27D7C((uint64_t)v70, v44);
                  sub_216B25034(&v68);
                  v46 = sub_216B25CA8((uint64_t)v70, v45);
                  if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v46 + 16))(v46, &v68))
                  {
                    v67[0] = sub_216B28054((uint64_t)v70, v47);
                    sub_216BD81CC(v17, (uint64_t)v67);
                    a7 = v59;
                    v8 = (_DWORD *)v62;
                    v13 = v64;
                  }
                  else
                  {
                    v50 = sub_216B62D74(v101, (int)v34 - LODWORD(v98[0]));
                    sub_216B4CD2C(v64, v50, 450, (uint64_t)v67);
                    v51 = sub_216B60EA8(v67, (uint64_t)v20);
                    sub_216B26CA0(v66, &v68);
                    v52 = v51;
                    v13 = v64;
                    sub_216B4B340(v52, v66[0], v66[1]);
                    sub_216B4B3B4(v67);
                    a7 = v59;
                    v8 = (_DWORD *)v62;
                  }
                  std::string::~string(&v68);
                  sub_216B27C04(v70);
                  std::string::~string(&v75);
                }
                else
                {
                  v49 = sub_216B62D74(v101, (int)v99 - LODWORD(v98[0]));
                  sub_216B4CD2C(v13, v49, 453, (uint64_t)&v75);
                  sub_216B60EA8((uint64_t *)&v75, (uint64_t)v20);
                  sub_216B4B3B4(&v75);
                  v8 = (_DWORD *)v62;
                }
              }
              else
              {
                v48 = sub_216B62D74(v101, (int)v99 - LODWORD(v98[0]));
                sub_216B4CD2C(v13, v48, 457, (uint64_t)&v75);
                sub_216B60EA8((uint64_t *)&v75, (uint64_t)v20);
                sub_216B4B3B4(&v75);
              }
            }
            else
            {
              sub_216B1E678((int)v80, "-");
              if (!sub_216C084BC(v98, v80[0], v80[1]))
              {
                v32 = v83;
                v82 = v83;
                goto LABEL_59;
              }
              sub_216C084A4(v98);
              if (sub_216C08540(v98, (int *)&v82))
              {
                v32 = v82;
                if (v82 >= v83)
                  goto LABEL_56;
              }
              v33 = sub_216B62D74(v101, (int)v99 - LODWORD(v98[0]));
              sub_216B4CD2C(v13, v33, 452, (uint64_t)&v75);
              sub_216B60EA8((uint64_t *)&v75, (uint64_t)v20);
              sub_216B4B3B4(&v75);
            }
          }
        }
      }
      else
      {
        sub_216B1E678((int)v91, "no-diagnostics");
        if (sub_216C084BC(v98, v91[0], v91[1]))
        {
          if (*a7 == 3)
          {
            sub_216B4CD2C(v13, v101[0], 451, (uint64_t)&v75);
            v18 = 1;
LABEL_20:
            sub_216B848B0((uint64_t *)&v75, v18);
            sub_216B4B3B4(&v75);
          }
          else
          {
            *a7 = 2;
          }
        }
      }
    }
  }
}

uint64_t sub_216C07CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216C07010(a1 - 16, a2, a3);
  return 0;
}

uint64_t sub_216C07D00(uint64_t result)
{
  *(_BYTE *)(result + 13) = 1;
  return result;
}

uint64_t sub_216C07D0C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_216BFA340(a3);
  v9 = sub_216C05FB8(a3);
  LODWORD(v8) = sub_216C08A44(a1, a2, (uint64_t)"error", a4, v8, v9);
  v10 = sub_216C05FD0(a3);
  v11 = sub_216C05FD8(a3);
  LODWORD(v10) = sub_216C08A44(a1, a2, (uint64_t)"warning", a4 + 3, v10, v11) + v8;
  v12 = sub_216C05FE0(a3);
  v13 = sub_216C05FE8(a3);
  LODWORD(v8) = sub_216C08A44(a1, a2, (uint64_t)"remark", a4 + 6, v12, v13);
  v14 = sub_216C05FF0(a3);
  v15 = sub_216C05FF8(a3);
  return v10 + (_DWORD)v8 + sub_216C08A44(a1, a2, (uint64_t)"note", a4 + 9, v14, v15);
}

uint64_t sub_216C07E3C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _BOOL4 v11;
  uint64_t v12;
  int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  void **v19;
  uint64_t v20;
  int *v21;
  unsigned int v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34[6];
  _BYTE v35[280];
  uint64_t v36;
  uint64_t v37;

  v36 = a4;
  v37 = a3;
  if (sub_216B2AB50((uint64_t)&v37, (uint64_t)&v36))
    return 0;
  sub_216B275E4(v35);
  sub_216B40D84(v34);
  v32[0] = v37;
  v33 = v36;
  while (sub_216B2AB28((uint64_t)v32, (uint64_t)&v33))
  {
    v10 = (_DWORD *)sub_216B4B51C(v32, v9);
    v11 = sub_216B4B4A8(v10);
    if (!a2 || v11)
    {
      sub_216B248A0((uint64_t)v34, "\n  (frontend)");
    }
    else
    {
      sub_216B248A0((uint64_t)v34, "\n ");
      v13 = (int *)sub_216B4B51C(v32, v12);
      v14 = sub_216B60454(a2, *v13);
      v15 = sub_216B81B44((uint64_t)a2, v14);
      if (v15)
      {
        v16 = v15;
        v17 = sub_216B248A0((uint64_t)v34, " File ");
        v18 = (char *)sub_216B1E600(v16);
        sub_216B248A0((uint64_t)v17, v18);
      }
      v19 = sub_216B248A0((uint64_t)v34, " Line ");
      v21 = (int *)sub_216B4B51C(v32, v20);
      v22 = sub_216B63E9C((uint64_t)a2, *v21, 0);
      sub_216B248D8(v19, v22);
    }
    v23 = sub_216B248A0((uint64_t)v34, ": ");
    v25 = sub_216B4B51C(v32, v24);
    sub_216B2E0B0(v23, v25 + 8);
    sub_216C05FC0(v32);
  }
  sub_216B4B364(a1, 449, (uint64_t)v32);
  v26 = (uint64_t *)sub_216C07D00((uint64_t)v32);
  v27 = sub_216B60EA8(v26, a5);
  v28 = sub_216B848B0(v27, 1u);
  v29 = sub_216B40E80(v34);
  sub_216B4B340(v28, v29, v30);
  sub_216B4B3B4(v32);
  v8 = sub_216C090C0(v37, v36);
  sub_216B40DB8(v34);
  sub_216B2489C(v35);
  return v8;
}

uint64_t sub_216C08060(uint64_t *a1)
{
  sub_216C09630(a1);
  sub_216C09630(a1 + 3);
  sub_216C09630(a1 + 6);
  return sub_216C09630(a1 + 9);
}

uint64_t sub_216C08094(char a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v15;
  std::string::size_type v16;
  const std::string::value_type *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26[2];
  std::string v27;
  const void *v28[2];
  const void *v29[2];
  const void *v30[2];
  uint64_t v31;
  uint64_t i;
  std::string v33;

  if ((a1 & 1) != 0)
  {
    sub_216B25034(&v33);
    v31 = a5;
    for (i = a6; !sub_216B29094((uint64_t)&v31); i = v21)
    {
      sub_216B1E678((int)v30, "{{");
      if (sub_216B2A2EC((uint64_t)&v31, v30[0], (size_t)v30[1]))
      {
        v31 = sub_216B3A5FC(&v31, 2uLL);
        i = v15;
        sub_216B1E678((int)v29, "}}");
        v16 = sub_216B31B5C(&v31, v29[0], (size_t)v29[1], 0);
        std::string::append(&v33, "(");
        v17 = (const std::string::value_type *)sub_216B1E600((uint64_t)&v31);
        std::string::append(&v33, v17, v16);
        std::string::append(&v33, ")");
        v18 = v16 + 2;
      }
      else
      {
        sub_216B1E678((int)v28, "{{");
        v18 = sub_216B31B5C(&v31, v28[0], (size_t)v28[1], 0);
        if (v18 == -1)
          v18 = sub_216B1E67C((uint64_t)&v31);
        v19 = sub_216B2864C(&v31, 0, v18);
        sub_216B2BA98(v19, v20, &v27);
        sub_216B26C9C(&v33, (uint64_t)&v27);
        std::string::~string(&v27);
      }
      v31 = sub_216B3A5FC(&v31, v18);
    }
    v22 = sub_216B1D1D4(72);
    sub_216B26CA0(v26, &v33);
    sub_216C082B8(v22, a2, a3, a4, a5, a6, a7, a8, v26[0], v26[1]);
    std::string::~string(&v33);
  }
  else
  {
    v22 = sub_216B1D1D4(56);
    sub_216C082AC(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  return v22;
}

_QWORD *sub_216C082AC(uint64_t a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return sub_216C096B4(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_216C082B8(uint64_t a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return sub_216C097DC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

_QWORD *sub_216C082CC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = sub_216C06540(a1);
  *v2 = off_24D606650;
  v3 = v2 + 11;
  sub_216B2C030(v2 + 2);
  sub_216B2C030(a1 + 5);
  sub_216B2C030(a1 + 8);
  sub_216B2C030(v3);
  return a1;
}

_QWORD *sub_216C08324(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_216B2C030(a1);
  sub_216B2C030(v2 + 3);
  sub_216B2C030(a1 + 6);
  sub_216B2C030(a1 + 9);
  return a1;
}

uint64_t sub_216C08360(uint64_t *a1)
{
  sub_216C08060(a1);
  sub_216B3D560(a1 + 9);
  sub_216B3D560(a1 + 6);
  sub_216B3D560(a1 + 3);
  return sub_216B3D560(a1);
}

BOOL sub_216C083A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >= *(_QWORD *)(a1 + 8);
}

BOOL sub_216C083B0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v15;
  int v16;
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  while (1)
  {
    v7 = a1[1];
    v6 = a1[2];
    v8 = sub_216B1E600((uint64_t)v17);
    v9 = sub_216B1E608(v17);
    v10 = sub_216C08770(v6, v7, v8, v9);
    a1[3] = v10;
    a1[4] = v10 + sub_216B1E67C((uint64_t)v17);
    v11 = a1[3];
    v12 = a1[1];
    result = v11 != v12;
    if (v11 == v12 || a4 == 0)
      break;
    v15 = *a1;
    if (v11 == *a1)
      return 1;
    v16 = *(unsigned __int8 *)(v11 - 1);
    if (sub_216B71384(v16))
      return 1;
    if (v11 > v15 + 1 && (v16 == 47 || v16 == 42) && *(_BYTE *)(v11 - 2) == 47)
      return 1;
    if (!sub_216C084A4(a1))
      return 0;
  }
  return result;
}

BOOL sub_216C084A4(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[4];
  a1[2] = v1;
  return v1 < a1[1];
}

BOOL sub_216C084BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  const void *v8;
  size_t v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v4 = a1[2];
  a1[3] = v4;
  v5 = sub_216B1E67C((uint64_t)v10);
  a1[4] = v4 + v5;
  if ((unint64_t)(v4 + v5) > a1[1])
    return 0;
  v7 = (const void *)a1[3];
  v8 = (const void *)sub_216B1E600((uint64_t)v10);
  v9 = sub_216B1E67C((uint64_t)v10);
  return memcmp(v7, v8, v9) == 0;
}

uint64_t sub_216C08540(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = a1[1];
  v3 = a1[2];
  a1[3] = v3;
  if (v3 >= v2)
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v3 + v4);
    if ((v6 - 48) > 9)
      break;
    v5 = v6 + 10 * v5 - 48;
    a1[3] = v3 + v4++ + 1;
    if (v2 - v3 == v4)
      goto LABEL_7;
  }
  v2 = v3 + v4;
LABEL_7:
  if (v2 == v3)
    return 0;
  a1[4] = v2;
  *a2 = v5;
  return 1;
}

uint64_t sub_216C085B8(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 < v2)
  {
    v3 = result;
    v4 = v2 - v1;
    v5 = v1 + 1;
    do
    {
      result = sub_216B71384(*(unsigned __int8 *)(v5 - 1));
      if (!(_DWORD)result)
        break;
      *(_QWORD *)(v3 + 16) = v5++;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_216C0860C(_QWORD *a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v8;
  const void **v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[16];
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;

  v16 = a2;
  v17 = a3;
  v14 = a4;
  v15 = a5;
  v6 = a1[1];
  v5 = a1[2];
  a1[3] = v5;
  if (v5 < v6)
  {
    v8 = 1;
    do
    {
      sub_216B1E684(v13, v5, v6 - v5);
      if (sub_216B2A2EC((uint64_t)v13, v16, v17))
      {
        ++v8;
        v9 = &v16;
      }
      else
      {
        if (!sub_216B2A2EC((uint64_t)v13, v14, v15))
        {
          v10 = 1;
          goto LABEL_10;
        }
        if (!--v8)
        {
          v12 = a1[3];
          a1[4] = v12 + sub_216B1E67C((uint64_t)&v14);
          return 1;
        }
        v9 = &v14;
      }
      v10 = sub_216B1E67C((uint64_t)v9);
LABEL_10:
      v5 = a1[3] + v10;
      a1[3] = v5;
      v6 = a1[1];
    }
    while (v5 < v6);
  }
  return 0;
}

std::string *sub_216C086D4(std::string *a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v6;

  v6 = sub_216B20378(a2, (uint64_t)a3);
  sub_216C08944(a1, a2, a3, v6);
  return a1;
}

uint64_t *sub_216C08724(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  *a1 = sub_216B1E600((uint64_t)v7);
  v4 = sub_216B1E608(v7);
  v5 = *a1;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v5;
  a1[4] = 0;
  return a1;
}

uint64_t sub_216C08774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;
  char v6;

  v5 = 0;
  return sub_216C087A4(a1, a2, a3, a4, (uint64_t)&v6, (uint64_t)&v5, (uint64_t)&v5);
}

uint64_t sub_216C087A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v10 = a2;
  if (a4 == a3)
  {
    v7 = &v11;
    v8 = &v11;
    return sub_216B206E0((uint64_t)v7, (uint64_t)v8);
  }
  if (a2 - a1 < a4 - a3)
  {
    v7 = &v10;
    v8 = &v10;
    return sub_216B206E0((uint64_t)v7, (uint64_t)v8);
  }
  return sub_216C087FC(a1, a2, a3, a4, a5, a6, a7, a2 - a1, a4 - a3);
}

uint64_t sub_216C087FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = a1;
  v10 = a1 + a8 - a9 + 1;
  if (v10 == a1)
  {
LABEL_9:
    v24 = v9;
    sub_216B210B8(&v24, a2);
    return sub_216B206E0((uint64_t)&v24, (uint64_t)&v24);
  }
  else
  {
    v22 = a2;
    while (1)
    {
      v16 = sub_216B3557C(a6, v9);
      v17 = sub_216B3557C(a7, a3);
      if (sub_216C0892C(a5, v16, v17))
        break;
LABEL_7:
      if (++v9 == v10)
      {
        v9 = v10;
        a2 = v22;
        goto LABEL_9;
      }
    }
    v18 = 1;
    while (a3 + v18 != a4)
    {
      v19 = sub_216B3557C(a6, v9 + v18);
      v20 = sub_216B3557C(a7, a3 + v18++);
      if ((sub_216C0892C(a5, v19, v20) & 1) == 0)
        goto LABEL_7;
    }
    v23 = v9 + a9;
    v24 = v9;
    return sub_216B206E0((uint64_t)&v24, (uint64_t)&v23);
  }
}

BOOL sub_216C08930(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t sub_216C08944(std::string *a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  _BYTE *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t result;
  char v18;

  v6 = (_BYTE *)a2;
  v8 = sub_216B25B78((uint64_t)a1, a2);
  v10 = sub_216B3A92C((uint64_t)a1, v9);
  v12 = a4 - v10;
  if (a4 > v10)
  {
    v13 = v10;
    v14 = sub_216B25B78((uint64_t)a1, v11);
    sub_216B3A964(a1, v13, v12, v14, 0, v14, 0);
    v15 = a4;
LABEL_4:
    nullsub_1(a1, v15);
    goto LABEL_5;
  }
  v15 = a4 - v8;
  if (a4 > v8)
    goto LABEL_4;
LABEL_5:
  v16 = (_BYTE *)sub_216B25CC0((uint64_t)a1, v15);
  while (v6 != a3)
    sub_216B25D5C(v16++, v6++);
  v18 = 0;
  sub_216B25D5C(v16, &v18);
  result = sub_216B3A9B4((uint64_t)a1, a4);
  if (a4 < v8)
    return nullsub_1(a1, v8);
  return result;
}

uint64_t sub_216C08A44(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36[3];

  sub_216B2C030(v36);
  sub_216C08CAC(v35, a5, a6);
  v34 = sub_216B2C910(a4);
  v33 = sub_216B2C000((uint64_t)a4);
  while (sub_216B2AB28((uint64_t)&v34, (uint64_t)&v33))
  {
    v12 = sub_216B1E600((uint64_t)&v34);
    v13 = *(_QWORD *)v12;
    v14 = sub_216B63E9C((uint64_t)a2, *(_DWORD *)(*(_QWORD *)v12 + 12), 0);
    if (*(_DWORD *)(v13 + 44))
    {
      v15 = v14;
      v16 = 0;
      do
      {
        sub_216B2D410(&v32);
        sub_216B2D410(&v31);
        v32 = sub_216B2C910(v35);
        v31 = sub_216B2C000((uint64_t)v35);
        while (sub_216B2AB28((uint64_t)&v32, (uint64_t)&v31))
        {
          if (*(_BYTE *)(v13 + 48)
            || (v18 = (int *)sub_216B4B51C(&v32, v17), v15 == sub_216B63E9C((uint64_t)a2, *v18, 0)))
          {
            v19 = *(_DWORD *)(v13 + 12);
            v20 = (unsigned int *)sub_216B4B51C(&v32, v17);
            if (sub_216C08CB0(a2, v19, *v20))
            {
              v22 = sub_216B4B51C(&v32, v21);
              sub_216B26CA0(v30, v22 + 8);
              if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 24))(v13, v30[0], v30[1]) & 1) != 0)
                break;
            }
          }
          sub_216C05FC0(&v32);
        }
        if (sub_216B2AB50((uint64_t)&v32, (uint64_t)&v31))
        {
          if (v16 >= *(_DWORD *)(v13 + 40))
            break;
          v23 = sub_216B1E600((uint64_t)&v34);
          sub_216BD81CC(v36, v23);
        }
        else
        {
          sub_216B2C008(&v29, &v32);
          sub_216C08D7C(v35, v29);
        }
        ++v16;
      }
      while (v16 < *(_DWORD *)(v13 + 44));
    }
    sub_216B3D138(&v34);
  }
  v24 = sub_216C08DE4(a1, a2, v36, a3);
  v34 = sub_216B2C910(v35);
  sub_216B2C008(&v28, &v34);
  v33 = sub_216B2C000((uint64_t)v35);
  sub_216B2C008(&v27, &v33);
  v25 = sub_216C07E3C(a1, a2, v28, v27, a3) + v24;
  sub_216B4F3E0(v35);
  sub_216B3D560(v36);
  return v25;
}

BOOL sub_216C08CB0(_DWORD *a1, int a2, unsigned int a3)
{
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v9 = a3;
  if (sub_216B5E144(&v9))
  {
    do
      v9 = sub_216C01BD0(a1, v9);
    while ((sub_216B5E144(&v9) & 1) != 0);
  }
  if (sub_216C093B4(a1, a2, v9))
    return 1;
  v6 = sub_216B60454(a1, v9);
  v7 = sub_216B81B44((uint64_t)a1, v6);
  if (!v7 && sub_216C09404(a1, a2))
    return 1;
  v8 = sub_216B60454(a1, a2);
  return v7 == sub_216B81B44((uint64_t)a1, v8);
}

uint64_t sub_216C08D7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v6 = sub_216B9D5F8(a1);
  v3 = *a1 + 32 * sub_216C09170((uint64_t)&v7, (uint64_t)&v6);
  v4 = sub_216C09490();
  sub_216C0944C(a1, v4);
  return sub_216B2A914((uint64_t)a1, v3);
}

uint64_t sub_216C08DE4(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unsigned int v14;
  int *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  unsigned int v21;
  void **v22;
  void **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34[6];
  _BYTE v35[288];

  if (sub_216B29084(a3))
    return 0;
  v30 = a1;
  v31 = a4;
  sub_216B275E4(v35);
  sub_216B40D84(v34);
  v32[0] = sub_216B2C910(a3);
  v33 = sub_216B2C000((uint64_t)a3);
  while (sub_216B2AB28((uint64_t)v32, (uint64_t)&v33))
  {
    v9 = *(_QWORD *)sub_216B1E600((uint64_t)v32);
    v10 = sub_216B248A0((uint64_t)v34, "\n  File ");
    v11 = sub_216C095D4(a2, *(_DWORD *)(v9 + 12));
    sub_216B248E0((uint64_t)v10, v11, v12);
    if (*(_BYTE *)(v9 + 48))
    {
      sub_216B248A0((uint64_t)v34, " Line *");
    }
    else
    {
      v13 = sub_216B248A0((uint64_t)v34, " Line ");
      v14 = sub_216B63E9C((uint64_t)a2, *(_DWORD *)(v9 + 12), 0);
      sub_216B248D8(v13, v14);
    }
    v15 = (int *)(v9 + 8);
    if (sub_216B750B0((unsigned int *)(v9 + 8), (unsigned int *)(v9 + 12)))
    {
      v16 = sub_216B248A0((uint64_t)v34, " (directive at ");
      v17 = sub_216C095D4(a2, *v15);
      v19 = sub_216B248E0((uint64_t)v16, v17, v18);
      v20 = (void **)sub_216B251FC((uint64_t)v19, 58);
      v21 = sub_216B63E9C((uint64_t)a2, *v15, 0);
      v22 = sub_216B248D8(v20, v21);
      sub_216B251FC((uint64_t)v22, 41);
    }
    v23 = sub_216B248A0((uint64_t)v34, ": ");
    sub_216B2E0B0(v23, v9 + 16);
    sub_216B3D138(v32);
  }
  sub_216B4B364(v30, 449, (uint64_t)v32);
  v24 = (uint64_t *)sub_216C07D00((uint64_t)v32);
  v25 = sub_216B60EA8(v24, v31);
  v26 = sub_216B848B0(v25, 0);
  v27 = sub_216B40E80(v34);
  sub_216B4B340(v26, v27, v28);
  sub_216B4B3B4(v32);
  v8 = sub_216B2E220(a3);
  sub_216B40DB8(v34);
  sub_216B2489C(v35);
  return v8;
}

uint64_t *sub_216C09050(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v9 = 0;
  sub_216B2C078(a1 + 2, &v9, &v8);
  v6 = sub_216C090C0(a2, a3);
  sub_216C090C4(a1, a2, a3, v6);
  return a1;
}

uint64_t sub_216C090C4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  char v11;

  sub_216B20C64(&v10, (uint64_t)a1);
  sub_216B2F49C(v10, (uint64_t)&v11);
  if (a4)
  {
    sub_216C091A4(a1, a4);
    sub_216C09204((uint64_t)a1, a2, a3, a4);
  }
  sub_216B2C7C0(&v11);
  return j_nullsub_1(&v11, v8);
}

uint64_t sub_216C09148(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return sub_216C09170((uint64_t)&v3, (uint64_t)&v4);
}

uint64_t sub_216C09170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return (v3 - sub_216B1E600(a2)) >> 5;
}

uint64_t sub_216C091A4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (sub_216B70084((uint64_t)a1, a2) < a2)
    sub_216B2C50C();
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B70154(v5, a2);
  *a1 = v6;
  a1[1] = v6;
  *(_QWORD *)sub_216B2C144((uint64_t)a1, v7) = v6 + 32 * v7;
  return nullsub_1(a1, 0);
}

_QWORD *sub_216C09204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_216C0619C(&v10, a1, a4);
  v8 = sub_216B2C144(a1, v7);
  v11 = sub_216C0926C(v8, a2, a3, v11);
  return sub_216B2C330(&v10);
}

uint64_t sub_216C0926C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216C059BC(a2, a3);
  v8 = v7;
  v9 = j_j_nullsub_1(a4);
  v10 = sub_216C092CC(a1, v6, v8, v9);
  return sub_216B20710(a4, v10);
}

uint64_t sub_216C092CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a4;
  v16 = a4;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  if (a2 != a3)
  {
    v8 = v16;
    do
    {
      v9 = nullsub_1(v8, v7);
      sub_216C09374(a1, v9, a2);
      a2 += 32;
      v8 = v16 + 32;
      v16 += 32;
    }
    while (a2 != a3);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216C09378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216C09384(a2, a3);
}

uint64_t sub_216C09388(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::string::basic_string((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  return a1;
}

BOOL sub_216C093B4(_DWORD *a1, int a2, int a3)
{
  int v6;
  int v7;

  v7 = sub_216B60454(a1, a2);
  v6 = sub_216B60454(a1, a3);
  return sub_216B4CC88(&v7, &v6);
}

BOOL sub_216C09404(_DWORD *a1, int a2)
{
  int v4;
  int v5;

  v5 = sub_216B60454(a1, a2);
  v4 = sub_216B8AEB0((uint64_t)a1);
  return sub_216B4CC88(&v5, &v4);
}

uint64_t sub_216C0944C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B6C220(a1);
  sub_216B4F5B8((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

uint64_t sub_216C09490()
{
  uint64_t v0;

  sub_216C094A8();
  return v0;
}

uint64_t sub_216C094B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (_DWORD *)j_j_nullsub_1(a3);
  v9 = sub_216C0953C((uint64_t)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216C0953C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _DWORD *v8;
  uint64_t v9;

  v8 = a4;
  v9 = a2;
  if (a2 != a3)
  {
    v4 = a4;
    do
    {
      v6 = (_DWORD *)sub_216B30ACC((uint64_t)&v9, a2);
      sub_216C095A8(v4, v6);
      v4 += 8;
      v8 = v4;
      v9 += 32;
    }
    while (v9 != a3);
  }
  return sub_216B206E0((uint64_t)&v9, (uint64_t)&v8);
}

_DWORD *sub_216C095A8(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  sub_216B26E7C((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

uint64_t sub_216C095D4(_DWORD *a1, int a2)
{
  unsigned int v3;
  unint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = sub_216B60454(a1, a2);
  v4 = sub_216B81B44((uint64_t)a1, v3);
  if (v4)
  {
    v5 = (char *)sub_216B1E600(v4);
    sub_216B1E678((int)&v7, v5);
  }
  else
  {
    sub_216B26D14(&v7);
  }
  return v7;
}

uint64_t sub_216C09630(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_216B2C910(a1);
  v4 = sub_216B2C000((uint64_t)a1);
  while (sub_216B2AB28((uint64_t)&v5, (uint64_t)&v4))
  {
    v2 = *(_QWORD *)sub_216B1E600((uint64_t)&v5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    sub_216B3D138(&v5);
  }
  return sub_216B4B134(a1);
}

_QWORD *sub_216C096B4(uint64_t a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  _QWORD *result;

  result = (_QWORD *)sub_216C096DC(a1, a2, a3, a4, a5, a6, a7, a8);
  *result = off_24D606770;
  return result;
}

uint64_t sub_216C096DC(uint64_t a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  _QWORD v13[2];

  v13[0] = a5;
  v13[1] = a6;
  *(_QWORD *)a1 = &unk_24D6067A0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  sub_216B24898(v13, a1 + 16);
  *(_DWORD *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 44) = a8;
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

void sub_216C09748()
{
  void *v0;

  v0 = (void *)sub_216C09744();
  j__free(v0);
}

uint64_t sub_216C0975C()
{
  return 1;
}

BOOL sub_216C09764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4[2];
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  sub_216B26CA0(v4, a1 + 16);
  return sub_216B31B5C(v5, v4[0], (size_t)v4[1], 0) != -1;
}

uint64_t sub_216C097A8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D6067A0;
  std::string::~string((std::string *)(a1 + 16));
  return a1;
}

uint64_t sub_216C097DC(uint64_t a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = sub_216C096DC(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)v11 = off_24D6067D0;
  sub_216B2B630((_DWORD *)(v11 + 56), a9, a10, 0);
  return a1;
}

void sub_216C09834()
{
  void *v0;

  v0 = (void *)sub_216C09830();
  j__free(v0);
}

BOOL sub_216C09848(uint64_t a1, std::string *a2)
{
  return sub_216B2B670(a1 + 56, a2);
}

uint64_t sub_216C09850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B2B6FC((_DWORD *)(a1 + 56), a2, a3, 0);
}

uint64_t sub_216C0985C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D6067D0;
  sub_216B2B66C((void **)(a1 + 56));
  return sub_216C097A8(a1);
}

uint64_t sub_216C0988C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17[2];
  uint64_t v18;
  uint64_t v19;
  const void *v20[16];
  _BYTE v21[24];
  int v22;
  uint64_t v23;
  _QWORD v24[17];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  sub_216B4B7AC((_DWORD *)a1, a2);
  sub_216C01C3C(v20);
  sub_216B4B808(a3, v20);
  sub_216C09A44((uint64_t)v21);
  v18 = sub_216B24850((uint64_t)v20);
  v19 = v6;
  sub_216B24898(&v18, (uint64_t)v17);
  sub_216B26E7C((uint64_t)v21, (uint64_t)v17);
  std::string::~string(v17);
  v22 = *(_DWORD *)sub_216B4B764(a3);
  v25 = a2;
  v17[0].__r_.__value_.__r.__words[0] = sub_216C06A48(a3);
  v17[0].__r_.__value_.__l.__size_ = v7;
  v8 = sub_216B1E600((uint64_t)v17);
  v9 = sub_216B4C810(v17);
  if (v8 != v9)
  {
    v10 = v9;
    do
    {
      v11 = *(_QWORD *)v8;
      LODWORD(v19) = *(_DWORD *)(v8 + 8);
      v18 = v11;
      sub_216B4B57C((uint64_t)&v23, (uint64_t)&v18);
      ++*(_DWORD *)(a1 + 40);
      v8 += 12;
    }
    while (v8 != v10);
  }
  v18 = sub_216C06A74(a3);
  v19 = v12;
  v13 = sub_216B1E600((uint64_t)&v18);
  v14 = sub_216B4C820(&v18);
  if (v13 != v14)
  {
    v15 = v14;
    do
    {
      sub_216B4DB1C(v17, v13);
      sub_216B4B620(v24, (uint64_t)v17);
      ++*(_DWORD *)(a1 + 44);
      sub_216B4C8CC(v17);
      v13 += 56;
    }
    while (v13 != v15);
  }
  sub_216C09A48((uint64_t *)(a1 + 16), (uint64_t)v21);
  sub_216C09AA0(v21);
  return sub_216B2489C(v20);
}

uint64_t sub_216C09A48(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216C09DC8(a1, a2);
  }
  else
  {
    sub_216C09D58((uint64_t)a1, a2);
    result = v4 + 224;
  }
  a1[1] = result;
  return result;
}

_QWORD *sub_216C09AA4(_QWORD *result)
{
  *result += 224;
  return result;
}

uint64_t sub_216C09AB4(uint64_t a1)
{
  uint64_t result;

  result = sub_216C09B7C((uint64_t *)(a1 + 16));
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_216C09AE0()
{
  void *v0;

  v0 = (void *)sub_216C09ADC();
  j__free(v0);
}

uint64_t sub_216C09AF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B25034(a1);
  sub_216B4AED0((_DWORD *)(v2 + 24));
  sub_216C09B30(a1 + 32);
  sub_216C09B34(a1 + 80);
  return a1;
}

uint64_t sub_216C09B38(uint64_t a1)
{
  return sub_216B4DC4C(a1, 2u);
}

uint64_t sub_216C09B40(uint64_t a1)
{
  return sub_216B4D528(a1, 2u);
}

void sub_216C09B48(std::string *a1)
{
  sub_216C09B78(&a1[3].__r_.__value_.__r.__words[1]);
  sub_216B1FF6C(&a1[1].__r_.__value_.__r.__words[1]);
  std::string::~string(a1);
}

uint64_t sub_216C09B7C(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_216BFCC10(a1);
  sub_216C09BB0(a1);
  return nullsub_1(a1, v2);
}

uint64_t sub_216C09BB0(uint64_t *a1)
{
  return sub_216C09BB8((uint64_t)a1, *a1);
}

uint64_t sub_216C09BB8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216C09C1C(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 224;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216C09C20(uint64_t a1, uint64_t a2)
{
  return sub_216C09AA0(a2);
}

uint64_t sub_216C09C28(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24D606800;
  sub_216C09C58(a1 + 2);
  return nullsub_1(a1, v2);
}

uint64_t sub_216C09C5C(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216C09C98(&v3);
  return a1;
}

uint64_t *sub_216C09C98(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216C09BB0(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216C09D00(v6, v8);
    return (uint64_t *)sub_216C09CFC(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216C09D00(_QWORD *a1, uint64_t a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 5);
}

uint64_t sub_216C09D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 224 * a3, 8);
}

_QWORD *sub_216C09D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216C09E74(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216C09E78(v5, v7, a2);
  v10 += 224;
  return sub_216B2C330(&v9);
}

uint64_t sub_216C09DC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216BFCC10(a1);
  v6 = sub_216C0A4BC(a1, v5 + 1);
  v7 = sub_216BFCC10(a1);
  sub_216C0A534(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216C09E78(v4, v9, a2);
  v13 += 224;
  sub_216C0A538(a1, v12);
  v10 = a1[1];
  sub_216C0A624(v12);
  return v10;
}

_QWORD *sub_216C09E7C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *result = a2;
  v3 = *(_QWORD *)(a2 + 8);
  result[1] = v3;
  result[2] = v3 + 224 * a3;
  return result;
}

uint64_t sub_216C09E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216C09EA0(a2, a3);
}

uint64_t sub_216C09EA4(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::string::basic_string((std::string *)a1, (const std::string *)a2);
  LODWORD(v4[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  sub_216C09EF4(&v4[1].__r_.__value_.__r.__words[1], a2 + 32);
  sub_216C09EF8(a1 + 80, a2 + 80);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  return a1;
}

const void **sub_216C09EFC(const void **a1, _QWORD *a2)
{
  sub_216B4DC4C((uint64_t)a1, 2u);
  if (!sub_216B29084(a2))
    sub_216C09F40(a1, (uint64_t)a2);
  return a1;
}

const void **sub_216C09F40(const void **a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != (const void **)a2)
  {
    v4 = sub_216B4D4A0(a2);
    v5 = sub_216B4D4A0((uint64_t)a1);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_216B1E600(a2);
        sub_216B1E600(a2);
        sub_216B1E600((uint64_t)a1);
        v10 = sub_216B4E450();
      }
      else
      {
        v10 = sub_216B1E600((uint64_t)a1);
      }
      v17 = v10;
      v18 = sub_216B1E67C((uint64_t)a1);
      nullsub_1(v17, v18);
      v16 = (uint64_t)a1;
      v15 = v17;
    }
    else
    {
      v6 = v5;
      if (sub_216B4E3EC((uint64_t)a1) >= v4)
      {
        if (v6)
        {
          sub_216B1E600(a2);
          sub_216B1E600(a2);
          sub_216B1E600((uint64_t)a1);
          sub_216B4E450();
        }
      }
      else
      {
        v7 = sub_216B1E600((uint64_t)a1);
        v8 = sub_216B1E67C((uint64_t)a1);
        nullsub_1(v7, v8);
        v9 = sub_216B1E600((uint64_t)a1);
        sub_216B203A4((uint64_t)a1, v9);
        sub_216B4DA18(a1, v4);
        v6 = 0;
      }
      v11 = 3 * v6;
      v12 = (void *)(sub_216B1E600(a2) + 12 * v6);
      v13 = sub_216B1E67C(a2);
      v14 = sub_216B1E600((uint64_t)a1);
      sub_216B2A5E4(v12, v13, (void *)(v14 + 4 * v11));
      v15 = sub_216B1E600((uint64_t)a1) + 12 * v4;
      v16 = (uint64_t)a1;
    }
    sub_216B203A4(v16, v15);
  }
  return a1;
}

_QWORD *sub_216C0A0E0(_QWORD *a1, _QWORD *a2)
{
  sub_216B4D528((uint64_t)a1, 2u);
  if (!sub_216B29084(a2))
    sub_216C0A124(a1, (uint64_t)a2);
  return a1;
}

_QWORD *sub_216C0A124(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != (_QWORD *)a2)
  {
    v4 = sub_216B4D4E0(a2);
    v5 = sub_216B4D4E0((uint64_t)a1);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_216B1E600(a2);
        sub_216B1E600(a2);
        sub_216B1E600((uint64_t)a1);
        v10 = sub_216C0A2C8();
      }
      else
      {
        v10 = sub_216B1E600((uint64_t)a1);
      }
      v17 = v10;
      v18 = sub_216B1E67C((uint64_t)a1);
      sub_216B4C890(v17, v18);
      v16 = (uint64_t)a1;
      v15 = v17;
    }
    else
    {
      v6 = v5;
      if (sub_216B4DB20((uint64_t)a1) >= v4)
      {
        if (v6)
        {
          sub_216B1E600(a2);
          sub_216B1E600(a2);
          sub_216B1E600((uint64_t)a1);
          sub_216C0A2C8();
        }
      }
      else
      {
        v7 = sub_216B1E600((uint64_t)a1);
        v8 = sub_216B1E67C((uint64_t)a1);
        sub_216B4C890(v7, v8);
        v9 = sub_216B1E600((uint64_t)a1);
        sub_216B203A4((uint64_t)a1, v9);
        sub_216B4DA28(a1, v4);
        v6 = 0;
      }
      v11 = 56 * v6;
      v12 = sub_216B1E600(a2) + 56 * v6;
      v13 = sub_216B1E67C(a2);
      v14 = sub_216B1E600((uint64_t)a1);
      sub_216C0A2E0(v12, v13, v14 + v11);
      v15 = sub_216B1E600((uint64_t)a1) + 56 * v4;
      v16 = (uint64_t)a1;
    }
    sub_216B203A4(v16, v15);
  }
  return a1;
}

uint64_t sub_216C0A2C8()
{
  uint64_t v0;

  sub_216C0A2E4();
  return v0;
}

uint64_t sub_216C0A2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (__int128 *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = j_j_nullsub_1(a3);
  v9 = sub_216C0A378((uint64_t)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216C0A378(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  uint64_t v8;
  __int128 *v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_216C0A3E4(a4, v5);
      v5 = (__int128 *)((char *)v5 + 56);
      a4 += 56;
    }
    while (v5 != a3);
    v5 = a3;
  }
  v8 = a4;
  v9 = v5;
  return sub_216B206E0((uint64_t)&v9, (uint64_t)&v8);
}

uint64_t sub_216C0A3E4(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2 + 1);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t sub_216C0A428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_216C0A440(a1, a2, a3);
  return v3;
}

uint64_t sub_216C0A440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a3;
  v7 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      sub_216B4DB1C(v6, v4);
      v4 += 56;
      v6 += 56;
      v7 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v8, &v7, &v6);
  return v8;
}

unint64_t sub_216C0A4BC(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216C0A628((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216C09D00(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216C0A538(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216C0A764(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216BFCC10(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216C0A628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216C0A664(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216C0A668()
{
  return 0x124924924924924;
}

uint64_t *sub_216C0A67C(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216C0A708(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 224 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 224 * v9;
  return a1;
}

uint64_t sub_216C0A708(uint64_t a1, unint64_t a2)
{
  return sub_216C0A72C(a1, a2);
}

uint64_t sub_216C0A72C(uint64_t a1, unint64_t a2)
{
  if (sub_216C0A664(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(224 * a2, 8);
}

uint64_t sub_216C0A764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216C0A830((uint64_t)&v16);
    v9 = sub_216C0A834((uint64_t)v18);
    sub_216C0A82C(a1, v8, v9);
    sub_216C0A840((uint64_t)v18);
    sub_216C0A840((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216C0A834(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 224;
}

uint64_t sub_216C0A840(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 224;
  return result;
}

uint64_t sub_216C0A850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216C0A85C(a2, a3);
}

uint64_t sub_216C0A860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B2B018(a1, a2);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
  sub_216C0A8B0(v4 + 32, a2 + 32);
  sub_216C0A8B4(a1 + 80, a2 + 80);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  return a1;
}

uint64_t sub_216C0A8B8(uint64_t a1, _QWORD *a2)
{
  sub_216B4DC4C(a1, 2u);
  if (!sub_216B29084(a2))
    sub_216C0A8FC(a1, a2);
  return a1;
}

uint64_t sub_216C0A8FC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;

  if ((_QWORD *)a1 != a2)
  {
    if (sub_216B2081C(a2))
    {
      v4 = sub_216B4D4A0((uint64_t)a2);
      v5 = sub_216B4D4A0(a1);
      if (v5 >= v4)
      {
        v13 = sub_216B1E600(a1);
        if (v4)
        {
          v14 = sub_216B1E600((uint64_t)a2);
          v15 = sub_216B1E67C((uint64_t)a2);
          v13 = sub_216C0AAF4(v14, v15, v13);
        }
        v16 = sub_216B1E67C(a1);
        nullsub_1(v13, v16);
        v17 = a1;
        v18 = v13;
      }
      else
      {
        v6 = v5;
        if (sub_216B4E3EC(a1) >= v4)
        {
          if (v6)
          {
            v19 = sub_216B1E600((uint64_t)a2);
            v20 = sub_216B1E600((uint64_t)a2) + 12 * v6;
            v21 = sub_216B1E600(a1);
            sub_216C0AAF4(v19, v20, v21);
          }
        }
        else
        {
          v7 = sub_216B1E600(a1);
          v8 = sub_216B1E67C(a1);
          nullsub_1(v7, v8);
          v9 = sub_216B1E600(a1);
          sub_216B203A4(a1, v9);
          sub_216B4DA18((const void **)a1, v4);
          v6 = 0;
        }
        v22 = 3 * v6;
        v23 = (void *)(sub_216B1E600((uint64_t)a2) + 12 * v6);
        v24 = sub_216B1E67C((uint64_t)a2);
        v25 = sub_216B1E600(a1);
        sub_216B3B518(v23, v24, (void *)(v25 + 4 * v22));
        v18 = sub_216B1E600(a1) + 12 * v4;
        v17 = a1;
      }
      sub_216B203A4(v17, v18);
      sub_216B20594(a2);
    }
    else
    {
      v10 = sub_216B1E600(a1);
      v11 = sub_216B1E67C(a1);
      nullsub_1(v10, v11);
      if (!sub_216B2081C((_QWORD *)a1))
      {
        v12 = (void *)sub_216B1E600(a1);
        free(v12);
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      sub_216B86098(a2);
    }
  }
  return a1;
}

uint64_t sub_216C0AAF8()
{
  uint64_t v0;

  sub_216C0AB10();
  return v0;
}

_QWORD *sub_216C0AB14(_QWORD *a1, _QWORD *a2)
{
  sub_216B4D528((uint64_t)a1, 2u);
  if (!sub_216B29084(a2))
    sub_216C0AB58(a1, a2);
  return a1;
}

_QWORD *sub_216C0AB58(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    if (sub_216B2081C(a2))
    {
      v4 = sub_216B4D4E0((uint64_t)a2);
      v5 = sub_216B4D4E0((uint64_t)a1);
      if (v5 >= v4)
      {
        v13 = sub_216B1E600((uint64_t)a1);
        if (v4)
        {
          v14 = (__int128 *)sub_216B1E600((uint64_t)a2);
          v15 = (__int128 *)sub_216B1E67C((uint64_t)a2);
          v13 = sub_216C0AD54(v14, v15, v13);
        }
        v16 = sub_216B1E67C((uint64_t)a1);
        sub_216B4C890(v13, v16);
        v17 = (uint64_t)a1;
        v18 = v13;
      }
      else
      {
        v6 = v5;
        if (sub_216B4DB20((uint64_t)a1) >= v4)
        {
          if (v6)
          {
            v19 = (__int128 *)sub_216B1E600((uint64_t)a2);
            v20 = (__int128 *)(sub_216B1E600((uint64_t)a2) + 56 * v6);
            v21 = sub_216B1E600((uint64_t)a1);
            sub_216C0AD54(v19, v20, v21);
          }
        }
        else
        {
          v7 = sub_216B1E600((uint64_t)a1);
          v8 = sub_216B1E67C((uint64_t)a1);
          sub_216B4C890(v7, v8);
          v9 = sub_216B1E600((uint64_t)a1);
          sub_216B203A4((uint64_t)a1, v9);
          sub_216B4DA28(a1, v4);
          v6 = 0;
        }
        v22 = 56 * v6;
        v23 = sub_216B1E600((uint64_t)a2) + 56 * v6;
        v24 = sub_216B1E67C((uint64_t)a2);
        v25 = sub_216B1E600((uint64_t)a1);
        sub_216B4DB68(v23, v24, v25 + v22);
        v18 = sub_216B1E600((uint64_t)a1) + 56 * v4;
        v17 = (uint64_t)a1;
      }
      sub_216B203A4(v17, v18);
      sub_216B4B5E0(a2);
    }
    else
    {
      v10 = sub_216B1E600((uint64_t)a1);
      v11 = sub_216B1E67C((uint64_t)a1);
      sub_216B4C890(v10, v11);
      if (!sub_216B2081C(a1))
      {
        v12 = (void *)sub_216B1E600((uint64_t)a1);
        free(v12);
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      sub_216B86098(a2);
    }
  }
  return a1;
}

uint64_t sub_216C0AD54(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_216B8A0A0(a3, v5);
      v5 = (__int128 *)((char *)v5 + 56);
      a3 += 56;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_216C0ADA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216C0ADBC(a1);
  return nullsub_1(v1, v2);
}

uint64_t *sub_216C0ADC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216C0AE1C((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216C0AE24(a1, v4);
    sub_216C09CFC(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216C0AE1C(uint64_t a1)
{
  return sub_216C0AE68(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216C0AE24(_QWORD *a1, uint64_t a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 5);
}

uint64_t sub_216C0AE6C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 224;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216C09C1C(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

_QWORD *sub_216C0AED4(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_216C0AEF4(a1, a2);
  *result = off_24D606850;
  return result;
}

_QWORD *sub_216C0AEF4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  *a1 = off_24D606870;
  a1[1] = a2;
  sub_216B324FC((uint64_t)(a1 + 2));
  sub_216B324FC((uint64_t)(a1 + 3));
  sub_216C0B078(a1 + 4);
  sub_216B2D410(a1 + 9);
  v3 = sub_216B1D1D4(32);
  sub_216BA3080(v3);
  sub_216BA5710(&v5, v3);
  sub_216B6AD78(a1 + 9, &v5);
  sub_216BA525C(&v5);
  return a1;
}

_QWORD *sub_216C0AF88(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_24D606870;
  v2 = a1 + 2;
  sub_216BA525C(a1 + 9);
  sub_216C0B07C(a1 + 4);
  sub_216C0B080(a1 + 3);
  sub_216C0B084(v2);
  return a1;
}

void sub_216C0AFDC()
{
  void *v0;

  v0 = (void *)sub_216C0AFD8();
  j__free(v0);
}

void sub_216C0AFF0(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  const std::string *v6;
  uint64_t v7;
  uint64_t v8[6];
  std::string v9;

  v5 = (std::string *)sub_216B25034(&v9);
  std::string::reserve(v5, 0xFF0uLL);
  sub_216B6042C(v8, &v9);
  sub_216B20C64(&v7, (uint64_t)v8);
  v6 = (const std::string *)sub_216B60430(v8);
  sub_216C0B070(a1, v6);
  sub_216B9B974((uint64_t)a1, a3);
  sub_216B40CD4(v8);
  std::string::~string(&v9);
}

std::string *sub_216C0B070(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 58, a2);
}

void sub_216C0B08C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_216C0B088(a1);
  j__free(v1);
}

_QWORD *sub_216C0B0A0(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_216B2D410(a1);
  sub_216B324FC((uint64_t)(v2 + 1));
  sub_216B324FC((uint64_t)(a1 + 2));
  sub_216B324FC((uint64_t)(a1 + 3));
  sub_216B324FC((uint64_t)(a1 + 4));
  return a1;
}

uint64_t sub_216C0B0E4(uint64_t a1)
{
  sub_216B27C04(a1 + 32);
  sub_216C0B124(a1 + 24);
  sub_216C0B128(a1 + 16);
  sub_216C0B12C(a1 + 8);
  return sub_216BA5258(a1);
}

uint64_t sub_216C0B130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216B25CA8(a1 + 56, a2);
  return sub_216B2037C(v2);
}

_QWORD *sub_216C0B148(uint64_t a1, uint64_t a2)
{
  return sub_216B27C30(a1 + 64, a2);
}

uint64_t sub_216C0B150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B4AEC4(&v4, a2);
  sub_216B6AD78((uint64_t *)(a1 + 32), &v4);
  return sub_216BA5258(&v4);
}

void sub_216C0B190(uint64_t a1, uint64_t a2)
{
  sub_216C0B198(a1 + 56, a2);
}

void sub_216C0B198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0C3A4(v7, v4);
  }
}

void sub_216C0B1F4(uint64_t a1, uint64_t a2)
{
  sub_216C0B1FC(a1 + 48, a2);
}

void sub_216C0B1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0C3C4(v7, v4);
  }
}

void sub_216C0B258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1 + 16;
  v5 = sub_216B1D1D4(480);
  v6 = sub_216B1E67C(a1);
  v7 = sub_216C0B374(a1);
  v9 = sub_216BF4060(a1, v8);
  sub_216BD42C4(v5, v6, v7, a2, v9);
  sub_216C0B318(v4, v5);
  v10 = sub_216B1D1D4(104);
  v12 = sub_216BF4060(a1, v11);
  v14 = sub_216BF4054(a1, v13);
  sub_216BECBE8(v10, v12, v14);
  sub_216C0B37C(a1 + 24, v10);
}

void sub_216C0B318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0C3E4(v7, v4);
  }
}

uint64_t sub_216C0B374(uint64_t a1)
{
  return sub_216B1E600(a1 + 72);
}

void sub_216C0B37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0C404(v7, v4);
  }
}

uint64_t sub_216C0B3D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v8)(_QWORD);
  uint64_t (*v9)(_QWORD);
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const std::string *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::string *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::string *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  _BYTE v113[8];
  _BYTE v114[8];
  _QWORD v115[2];
  _BYTE v116[8];
  _BYTE v117[8];
  _QWORD v118[3];

  v8 = off_254E4AC48;
  if ((*(_BYTE *)off_254E4AC48(&off_254E4AC48) & 1) == 0)
  {
    v97 = (std::string *)sub_216B1D1D4(24);
    sub_216B26934(v97);
    v98 = (void *)off_254E4AC30(&off_254E4AC30);
    sub_216B27D7C((uint64_t)v98, (uint64_t)v97);
    _tlv_atexit((void (__cdecl *)(void *))sub_216C0B99C, v98);
    *(_BYTE *)v8(&off_254E4AC48) = 1;
  }
  v9 = off_254E4AC78;
  if ((*(_BYTE *)off_254E4AC78(&off_254E4AC78) & 1) == 0)
  {
    v99 = sub_216B1D1D4(48);
    v100 = off_254E4AC30(&off_254E4AC30);
    v102 = sub_216B25CA8(v100, v101);
    sub_216B25FAC((uint64_t)v118, v102);
    sub_216B33990(v99, (uint64_t)v118);
    v103 = (void *)off_254E4AC60();
    sub_216B27D7C((uint64_t)v103, v99);
    _tlv_atexit((void (__cdecl *)(void *))sub_216C0B9A0, v103);
    *(_BYTE *)v9(&off_254E4AC78) = 1;
  }
  v10 = off_254E4ACA8;
  if ((*(_BYTE *)off_254E4ACA8(&off_254E4ACA8) & 1) == 0)
  {
    v104 = sub_216B1D1D4(280);
    v105 = off_254E4AC60();
    v107 = sub_216B25CA8(v105, v106);
    v108 = sub_216C0B9A4(v104, v107);
    sub_216C0B9A8(v108);
    v109 = (void *)off_254E4AC90(&off_254E4AC90);
    _tlv_atexit((void (__cdecl *)(void *))sub_216C0B9AC, v109);
    *(_BYTE *)v10(&off_254E4ACA8) = 1;
  }
  v11 = off_254E4ACD8;
  if ((*(_BYTE *)off_254E4ACD8(&off_254E4ACD8) & 1) == 0)
  {
    v110 = sub_216B1D1D4(16);
    v111 = sub_216C0B9B0(v110);
    sub_216C0B9B4(v111);
    v112 = (void *)off_254E4ACC0(&off_254E4ACC0);
    _tlv_atexit((void (__cdecl *)(void *))sub_216C0B9B8, v112);
    *(_BYTE *)v11(&off_254E4ACD8) = 1;
  }
  v12 = sub_216B1D1D4(80);
  sub_216C0AF80(v12, a1);
  sub_216B27D7C(a4, v12);
  if (*(_BYTE *)(a2 + 112))
  {
    v14 = sub_216B1D1D4(232);
    sub_216C06BF4(v14, a3);
    sub_216B4B0AC(a3, v14, 1);
  }
  v15 = sub_216B25CA8(a4, v13);
  v16 = sub_216B1D1D4(808);
  v18 = sub_216B25CA8(a4, v17);
  v19 = sub_216BF9C78(v18);
  sub_216B61860(v16, a3, v19, 0);
  sub_216B4AEC8(v117, v16);
  sub_216C0B150(v15, (uint64_t)v117);
  sub_216BA5258(v117);
  v21 = sub_216B25CA8(a4, v20);
  v22 = sub_216B1D1D4(240);
  sub_216B5E6A8(v22);
  sub_216C0B1F4(v21, v22);
  v24 = sub_216B25CA8(a4, v23);
  v26 = sub_216BF4330(v24, v25);
  sub_216B5E680(v26, 1);
  v28 = sub_216B25CA8(a4, v27);
  v30 = (_QWORD *)sub_216BF4330(v28, v29);
  *v30 &= ~1uLL;
  v32 = sub_216B25CA8(a4, v31);
  v33 = sub_216C0B374(v32);
  sub_216BEB464(v33, 1);
  sub_216C0B9BC(v118);
  v34 = off_254E4AC30(&off_254E4AC30);
  v36 = (const std::string *)sub_216B25CA8(v34, v35);
  v37 = (std::string *)sub_216B1E600((uint64_t)v118);
  std::string::operator=(v37, v36);
  v38 = sub_216B1D1D4(1120);
  sub_216B1E678((int)v115, "/");
  sub_216C0B9F4(v38, v115[0], v115[1]);
  sub_216B4AEC8(v116, v38);
  v39 = sub_216B1D1D4(1216);
  sub_216B4AEC4(v114, v116);
  v41 = sub_216B25CA8(a4, v40);
  v42 = sub_216BF9C98(v41);
  v44 = sub_216B25CA8(a4, v43);
  v46 = (_QWORD *)sub_216BF4330(v44, v45);
  v47 = off_254E4AC90(&off_254E4AC90);
  v48 = sub_216B1E600(v47);
  sub_216B6C140(v39, (uint64_t)v114, v42, a3, v46, v48);
  sub_216B6C218(v114);
  v50 = sub_216B25CA8(a4, v49);
  v51 = sub_216B1D1D4(2128);
  v52 = sub_216B1D1D4(296);
  sub_216C0B9F8();
  sub_216B4AEC8(v113, v52);
  v54 = sub_216B25CA8(a4, v53);
  v56 = sub_216BF4330(v54, v55);
  v58 = sub_216B25CA8(a4, v57);
  v59 = sub_216BF9C98(v58);
  v60 = off_254E4ACC0(&off_254E4ACC0);
  v61 = sub_216B1E600(v60);
  sub_216B9B76C(v51, (uint64_t)v113, a3, v56, v59, v39, v61, 0, 1, 0);
  sub_216C0B190(v50, v51);
  sub_216B9B96C(v113);
  v63 = sub_216B25CA8(a4, v62);
  v65 = sub_216BF4060(v63, v64);
  v67 = sub_216B25CA8(a4, v66);
  v68 = sub_216C0B374(v67);
  sub_216C0B9FC(v65, v68);
  v70 = sub_216B25CA8(a4, v69);
  v71 = sub_216B1D1D4(32);
  v73 = sub_216B25CA8(a4, v72);
  v75 = sub_216BF4060(v73, v74);
  v76 = sub_216BDBC28(v75);
  sub_216C0BA04(v71, v76);
  sub_216C0B148(v70, v71);
  v78 = sub_216B25CA8(a4, v77);
  v80 = (std::string *)sub_216BF4060(v78, v79);
  v82 = sub_216B25CA8(a4, v81);
  sub_216C0B374(v82);
  v83 = sub_216B1E600(v47);
  sub_216C0AFF0(v80, v84, v83);
  v86 = sub_216B25CA8(a4, v85);
  v88 = sub_216BF4060(v86, v87);
  v89 = sub_216BDBC28(v88);
  v91 = sub_216B25CA8(a4, v90);
  v93 = sub_216C0BA08(v91, v92);
  sub_216BF54B8(v89, v93);
  v95 = sub_216B25CA8(a4, v94);
  sub_216C0B258(v95, a3);
  sub_216B6C218(v116);
  return sub_216B69618(v118);
}

uint64_t sub_216C0B9BC@<X0>(_QWORD *a1@<X8>)
{
  char v3;

  j_j_nullsub_1(&v3);
  return sub_216C0C65C(a1);
}

uint64_t sub_216C0B9FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t sub_216C0BA08(uint64_t a1, uint64_t a2)
{
  return sub_216B25CA8(a1 + 64, a2);
}

uint64_t sub_216C0BA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25[2];
  const void *v26[2];
  _BYTE v27[16];
  _BYTE v28[8];
  _BYTE v29[8];
  _BYTE v30[16];
  uint64_t v31[4];

  v31[3] = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 8;
  if (!sub_216B2E044((const std::string *)(a2 + 8), "-"))
  {
    sub_216C0B3D8(a1, a2, a3, (uint64_t)v28);
    if (sub_216B25DD0(v8, v12))
    {
      sub_216B4B364(a3, 4727, (uint64_t)v27);
      v14 = (uint64_t *)v27;
    }
    else
    {
      v16 = sub_216B25CA8((uint64_t)v28, v13);
      v17 = (_DWORD *)sub_216BF9C78(v16);
      v19 = sub_216B25CA8((uint64_t)v28, v18);
      v20 = sub_216BF9C98(v19);
      sub_216B26CA0(v26, v8);
      v21 = sub_216B50040(v17, v26[0], (size_t)v26[1], 0, 1);
      if (v21)
      {
        v22 = v21;
        sub_216B4AED0(&v24);
        v23 = sub_216B84BE4(v20, v22, v24, 0, 0, 0);
        sub_216C0BD30(v20, v23);
        sub_216B27D80(a4, v28);
        return sub_216B27C04(v28);
      }
      sub_216B4B364(a3, 409, (uint64_t)v31);
      sub_216B26CA0(v25, v8);
      sub_216B4B340(v31, v25[0], v25[1]);
      v14 = v31;
    }
    sub_216B4B3B4(v14);
    sub_216B324FC(a4);
    return sub_216B27C04(v28);
  }
  sub_216B2751C();
  if (sub_216B2CFD0((uint64_t)v31))
  {
    v10 = j_nullsub_1(v31, v9);
    sub_216B27D80(v29, v10);
    sub_216C0BC0C(a1, a2, a3, (uint64_t)v29, a4);
    sub_216B27C04(v29);
  }
  else
  {
    sub_216B4B364(a3, 410, (uint64_t)v30);
    sub_216B4B3B4(v30);
    sub_216B324FC(a4);
  }
  return sub_216B2CFE0((uint64_t)v31, v11);
}

uint64_t sub_216C0BC0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26[2];

  sub_216C0B3D8(a1, a2, a3, a5);
  v9 = sub_216B25CA8(a5, v8);
  v11 = sub_216BF9C98(v9);
  if (*(_DWORD *)(a2 + 104))
  {
    v12 = sub_216B25CA8(a5, v10);
    v13 = (_DWORD *)sub_216BF9C78(v12);
    v15 = sub_216B25CA8(a4, v14);
    v16 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    sub_216B1E678((int)v26, v16);
    v17 = sub_216B503F8(v13, v26[0], v26[1], 0, 0);
    sub_216B4AED0(&v25);
    v18 = sub_216B84BE4(v11, v17, v25, 0, 0, 0);
    sub_216C0BD30(v11, v18);
    v20 = sub_216B28054(a4, v19);
    return sub_216B626B0(v11, v17, v20, 0);
  }
  else
  {
    v22 = sub_216B28054(a4, v10);
    sub_216B4AED0(&v24);
    v23 = sub_216B9BFA8(v11, v22, 0, 0, 0, v24);
    return sub_216C0BD30(v11, v23);
  }
}

uint64_t sub_216C0BD30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 576) = a2;
  return result;
}

uint64_t sub_216C0BD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v40[6];
  _BYTE v41[8];
  _BYTE v42[8];
  _BYTE v43[120];
  uint64_t v44[2];
  uint64_t v45[2];
  _BYTE v46[8];

  if (a3)
    v8 = "#abc// expected-error{{}} \n";
  else
    v8 = " // Begin \n";
  sub_216B1E678((int)v45, v8);
  sub_216B1E678((int)v44, "Empty");
  v9 = sub_216B271E8(v45[0], v45[1], v44[0], v44[1], 0);
  sub_216B27D7C((uint64_t)v46, v9);
  sub_216C0BEC4((uint64_t)v43);
  v43[112] = a3;
  sub_216B27D80(v41, v46);
  sub_216C0BC0C(a1, (uint64_t)v43, a2, (uint64_t)v41, (uint64_t)v42);
  sub_216B27C04(v41);
  v11 = sub_216B25CA8((uint64_t)v42, v10);
  v13 = sub_216BF4060(v11, v12);
  sub_216B9BE60(v13);
  if (a3)
  {
    v15 = sub_216B25CA8((uint64_t)v42, v14);
    v17 = sub_216C0B130(v15, v16);
    v18 = sub_216BF4328(v17);
    v20 = sub_216B25CA8((uint64_t)v42, v19);
    v22 = sub_216BF4330(v20, v21);
    v24 = sub_216B25CA8((uint64_t)v42, v23);
    v26 = sub_216BF4060(v24, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, v22, v26);
    sub_216B70D84(v40);
    v28 = sub_216B25CA8((uint64_t)v42, v27);
    v30 = sub_216BF4060(v28, v29);
    sub_216B9C594(v30, v40);
    v32 = sub_216B25CA8((uint64_t)v42, v31);
    v34 = sub_216C0B130(v32, v33);
    v35 = sub_216BF4328(v34);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
  }
  v36 = sub_216B25CA8((uint64_t)v42, v14);
  v38 = (uint64_t *)sub_216BF48A4(v36, v37);
  sub_216BECC18(v38);
  sub_216B27D80(a4, v42);
  sub_216B27C04(v42);
  sub_216C0BEC8(v43);
  return sub_216B27C04(v46);
}

_QWORD *sub_216C0BECC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B69400(a1, a2);
  *result = &off_24D606890;
  return result;
}

void sub_216C0BEF0()
{
  void *v0;

  v0 = (void *)sub_216C0BEEC();
  j__free(v0);
}

_QWORD *sub_216C0BF24(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_216C0BF48(a1, 0);
  *result = &off_24D6069C0;
  return result;
}

uint64_t sub_216C0BF48(uint64_t result, char a2)
{
  *(_QWORD *)result = &unk_24D6028B0;
  *(_BYTE *)(result + 8) = a2;
  *(_BYTE *)(result + 9) = 0;
  return result;
}

void sub_216C0BF68()
{
  void *v0;

  v0 = (void *)j_j_nullsub_1_130();
  j__free(v0);
}

uint64_t sub_216C0BF7C()
{
  uint64_t v1;

  sub_216BD2540(&v1);
  return v1;
}

uint64_t sub_216C0BFA4()
{
  return 0;
}

uint64_t sub_216C0BFAC()
{
  return 0;
}

uint64_t sub_216C0BFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v4 = sub_216B4AEBC((_DWORD *)a1);
  sub_216B24898(v6, (uint64_t)(v4 + 2));
  sub_216B2C030((_QWORD *)(a1 + 32));
  sub_216B2C030((_QWORD *)(a1 + 56));
  sub_216B25034(a1 + 80);
  sub_216B25034(a1 + 104);
  sub_216B25034(a1 + 128);
  *(_BYTE *)(a1 + 152) &= 0xFCu;
  *(_QWORD *)(a1 + 156) = 0x28DE8000093A80;
  *(_QWORD *)(a1 + 168) = 0;
  sub_216C0C05C(a1 + 176);
  sub_216C0C05C(a1 + 632);
  sub_216B2C030((_QWORD *)(a1 + 1088));
  *(_BYTE *)(a1 + 1112) = *(_BYTE *)(a1 + 1112) & 0x80 | 7;
  return a1;
}

uint64_t sub_216C0C060(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216C0C08C();
  sub_216B2C030((_QWORD *)(v2 + 432));
  return a1;
}

uint64_t sub_216C0C090(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B9B72C();
  sub_216BDE710(v2 + 408);
  return a1;
}

uint64_t sub_216C0C0BC(uint64_t a1)
{
  _DWORD *v2;
  char v4;
  int v5;

  v2 = sub_216B4AEBC((_DWORD *)a1);
  sub_216B2C030((_QWORD *)v2 + 1);
  sub_216B2C030((_QWORD *)(a1 + 32));
  sub_216B2C030((_QWORD *)(a1 + 56));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a1 + 80) & 0xFC | 1;
  sub_216B25034(a1 + 88);
  sub_216B2C030((_QWORD *)(a1 + 112));
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) = 0;
  sub_216BDE710(a1 + 144);
  v5 = 0;
  v4 = 1;
  sub_216B9B71C(a1 + 168, &v5, &v4);
  sub_216B25034(a1 + 176);
  sub_216B25034(a1 + 200);
  *(_BYTE *)(a1 + 224) = 1;
  sub_216B2C030((_QWORD *)(a1 + 232));
  sub_216B2C030((_QWORD *)(a1 + 256));
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  sub_216B2D410((_QWORD *)(a1 + 288));
  return a1;
}

_QWORD *sub_216C0C180(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = sub_216B99E10(a1);
  sub_216B4AEBC((_DWORD *)v4 + 2);
  *a1 = &unk_24D602950;
  a1[2] = a2;
  a1[3] = sub_216B9F1E8();
  return a1;
}

uint64_t sub_216C0C1D0(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  sub_216B25034(a1 + 8);
  sub_216B2C030((_QWORD *)(a1 + 32));
  sub_216B25034(a1 + 56);
  sub_216B25034(a1 + 80);
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 256;
  return a1;
}

uint64_t sub_216C0C220(uint64_t a1)
{
  std::string::~string((std::string *)(a1 + 80));
  std::string::~string((std::string *)(a1 + 56));
  sub_216B2C034(a1 + 32);
  std::string::~string((std::string *)(a1 + 8));
  return a1;
}

uint64_t sub_216C0C260(uint64_t a1)
{
  sub_216C0B318(a1, 0);
  return a1;
}

uint64_t sub_216C0C288(uint64_t a1)
{
  sub_216C0B37C(a1, 0);
  return a1;
}

uint64_t sub_216C0C2B0(uint64_t a1)
{
  sub_216C0C2D8(a1, 0);
  return a1;
}

void sub_216C0C2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0C334(v7, v4);
  }
}

void sub_216C0C334(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B9CE50(a2);
    j__free(v2);
  }
}

uint64_t sub_216C0C354(uint64_t a1)
{
  sub_216C0B1FC(a1, 0);
  return a1;
}

uint64_t sub_216C0C37C(uint64_t a1)
{
  sub_216C0B198(a1, 0);
  return a1;
}

void sub_216C0C3A4(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B9B970(a2);
    j__free(v2);
  }
}

void sub_216C0C3C4(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B77314(a2);
    j__free(v2);
  }
}

void sub_216C0C3E4(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216BD4338(a2);
    j__free(v2);
  }
}

void sub_216C0C404(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216BECC14(a2);
    j__free(v2);
  }
}

uint64_t sub_216C0C424(uint64_t a1)
{
  sub_216C0C44C(a1, 0);
  return a1;
}

void sub_216C0C44C(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = *(std::string **)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0C4A8(v7, v4);
  }
}

void sub_216C0C4A8(int a1, std::string *this)
{
  void *v2;

  if (this)
  {
    std::string::~string(this);
    j__free(v2);
  }
}

uint64_t sub_216C0C4C8(uint64_t a1)
{
  sub_216C0C4F0(a1, 0);
  return a1;
}

void sub_216C0C4F0(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = *(std::string **)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0C54C(v7, v4);
  }
}

void sub_216C0C54C(int a1, std::string *this)
{
  void *v2;

  if (this)
  {
    j_std::string::~string(this);
    j__free(v2);
  }
}

uint64_t sub_216C0C56C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216C0C590(&v2);
}

_QWORD *sub_216C0C598()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)off_254E4AC90();
  *result = v1;
  return result;
}

uint64_t *sub_216C0C5C0(uint64_t *a1)
{
  sub_216C0C5E4(a1);
  return a1;
}

uint64_t sub_216C0C5E4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return sub_216C0C5FC(result);
  return result;
}

uint64_t sub_216C0C5FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t sub_216C0C608(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216C0C62C(&v2);
}

_QWORD *sub_216C0C634()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)off_254E4ACC0();
  *result = v1;
  return result;
}

uint64_t sub_216C0C65C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  sub_216C0C6BC((uint64_t)v7, 1);
  v2 = sub_216B2037C((uint64_t)v7);
  sub_216C0C6C0(v2);
  v3 = sub_216B4E054((uint64_t)v7);
  v5 = sub_216B2C5EC(v3, v4);
  sub_216B6B2FC(v5, v3, a1);
  return sub_216C0C6C4(v7);
}

uint64_t sub_216C0C6C8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(j_j_nullsub_1(a1) + 8) = a2;
  *(_QWORD *)(a1 + 16) = sub_216C0C70C();
  return a1;
}

uint64_t sub_216C0C710(uint64_t a1, unint64_t a2)
{
  if (sub_216C0C748() < a2)
    sub_216B25C54();
  return sub_216B25CA0(192 * a2, 8);
}

uint64_t sub_216C0C74C()
{
  return 0x155555555555555;
}

_QWORD *sub_216C0C758(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  v2 = sub_216B6A9AC(a1, 0);
  *v2 = &unk_24D606A00;
  sub_216B6B430((uint64_t)(v2 + 3), (uint64_t)&v8);
  sub_216B2C5EC((uint64_t)a1, v3);
  v5 = sub_216B2C5EC((uint64_t)a1, v4);
  sub_216C0C7BC((uint64_t)&v7, v5);
  return a1;
}

void sub_216C0C7C4()
{
  void *v0;

  v0 = (void *)sub_216C0C7C0();
  j__free(v0);
}

uint64_t sub_216C0C7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  sub_216B2C5EC(a1, a2);
  j_j_nullsub_1(&v7);
  sub_216B6B430(a1 + 24, v3);
  v5 = nullsub_1(a1, v4);
  return sub_216C0C97C(&v7, v5, 1);
}

uint64_t sub_216C0C830(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return sub_216C0C854(a2);
}

uint64_t sub_216C0C858(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B25034(a1);
  sub_216B25034(v2 + 24);
  sub_216B25034(a1 + 48);
  sub_216B25034(a1 + 72);
  sub_216B25034(a1 + 96);
  sub_216B2C030((_QWORD *)(a1 + 120));
  sub_216B2C030((_QWORD *)(a1 + 144));
  return a1;
}

void sub_216C0C8AC(std::__shared_weak_count *a1, uint64_t a2)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D606A00;
  sub_216B6B430((uint64_t)&a1[1], a2);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

uint64_t sub_216C0C8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  sub_216B2C5EC(a1, a2);
  v4 = sub_216B2C5EC(a1, v3);
  return sub_216C0C91C(&v6, v4);
}

uint64_t sub_216C0C920(uint64_t a1, uint64_t a2)
{
  return sub_216C0C928(a2);
}

void sub_216C0C92C(std::string *a1)
{
  sub_216B2C034(&a1[6]);
  sub_216B2C034(&a1[5]);
  std::string::~string(a1 + 4);
  std::string::~string(a1 + 3);
  std::string::~string(a1 + 2);
  std::string::~string(a1 + 1);
  std::string::~string(a1);
}

uint64_t sub_216C0C980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 192 * a3, 8);
}

uint64_t sub_216C0C994(uint64_t a1)
{
  sub_216C0C9B8(a1);
  return a1;
}

uint64_t sub_216C0C9B8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
    return sub_216C0C97C(result, v1, *(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_216C0C9CC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[8];

  v6 = (_BYTE *)off_254E4AD08();
  if (*v6)
  {
    v7 = v6;
    sub_216B2AF4C();
    v8 = (_BYTE *)off_254E4ACF0();
    *v8 = v9;
    *v7 = 0;
  }
  else
  {
    v8 = (_BYTE *)off_254E4ACF0();
  }
  v10 = sub_216B1D1D4(16);
  sub_216B4B234(v10);
  sub_216B4AEC8(v20, v10);
  v11 = sub_216B1D1D4(136);
  sub_216C0CB3C();
  sub_216B4AEC8(&v19, v11);
  v12 = *v8;
  v13 = sub_216B1E600((uint64_t)&v19);
  *(_DWORD *)(v13 + 4) = *(_DWORD *)(v13 + 4) & 0xFFFF7FFF | (v12 << 15);
  if (a2)
  {
    v14 = sub_216B1D1D4(48);
    sub_216C0CB40();
  }
  else
  {
    v14 = sub_216B1D1D4(72);
    v15 = sub_216B1E600((uint64_t)&v19);
    sub_216C06554(v14, a1, v15, 0);
  }
  v16 = sub_216B1D1D4(1216);
  v17 = sub_216B1E600((uint64_t)&v19);
  sub_216B4AFEC(v16, (uint64_t)v20, v17, v14, 1);
  sub_216B27D7C(a3, v16);
  sub_216B4B0A0(&v19);
  return sub_216B4B0A4(v20);
}

BOOL sub_216C0CB44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  _QWORD v5[14];

  v5[13] = *MEMORY[0x24BDAC8D0];
  sub_216C0CBC8(v5, a1, a2);
  sub_216C0CC0C(v5, 0, 0);
  v3 = sub_216C0CBCC((uint64_t)v5, v2);
  sub_216C0CC08((uint64_t)v5);
  return v3;
}

BOOL sub_216C0CBCC(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;

  result = sub_216B3817C(a1 + 40, a2);
  if (result)
  {
    v4 = sub_216BF4328(*(_QWORD *)(a1 + 16));
    return sub_216B4D23C(v4) == 0;
  }
  return result;
}

uint64_t sub_216C0CC0C(_QWORD *a1, uint64_t a2, char a3)
{
  char v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  v4 = a2;
  v6 = (uint64_t)(a1 + 5);
  result = sub_216B3817C((uint64_t)(a1 + 5), a2);
  if ((_DWORD)result)
  {
    v9 = sub_216B25CA8(v6, v8);
    v11 = sub_216BF4060(v9, v10);
    v13 = sub_216B25CA8(v6, v12);
    v15 = (uint64_t *)sub_216BF48A4(v13, v14);
    v17 = sub_216B25CA8(v6, v16);
    v19 = (uint64_t *)sub_216BF4054(v17, v18);
    sub_216B9BE60(v11);
    if ((v4 & 1) == 0)
      sub_216C0D630(a1);
    sub_216C0D520((uint64_t)a1, v20);
    sub_216BECC18(v15);
    sub_216BD459C(v19);
    sub_216BF3570((uint64_t)v15);
    if ((a3 & 1) == 0)
    {
      v21 = sub_216B1E600((uint64_t)(a1 + 3));
      sub_216B26CA0(v39, a1[1] + 80);
      sub_216BCDBC8(v21, v39[0], v39[1]);
      v23 = sub_216B25CA8(v6, v22);
      v24 = sub_216B1E67C(v23);
      v37 = sub_216BF577C(v24);
      v38 = v25;
      v26 = (uint64_t *)sub_216B1E600((uint64_t)&v37);
      v27 = sub_216B35430(&v37);
      if (v26 != (uint64_t *)v27)
      {
        v28 = (uint64_t *)v27;
        do
        {
          v29 = *v26++;
          v30 = sub_216B1E600((uint64_t)(a1 + 3));
          sub_216BCD8FC(v30, v29);
        }
        while (v26 != v28);
      }
    }
    sub_216BD48D8((uint64_t)v19);
    if (sub_216C0CBCC((uint64_t)a1, v31))
    {
      v33 = sub_216B25CA8(v6, v32);
      v34 = sub_216B1E67C(v33);
      v37 = sub_216BF577C(v34);
      v38 = v35;
      sub_216B1E600((uint64_t)&v37);
      sub_216B35430(&v37);
    }
    sub_216C0D928((uint64_t)a1, v32);
    return sub_216C0D5A0((uint64_t)a1, v36);
  }
  return result;
}

BOOL sub_216C0CD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL8 v6;
  _BYTE v8[8];
  _QWORD v9[14];

  v9[13] = *MEMORY[0x24BDAC8D0];
  sub_216B27D80(v8, a2);
  sub_216C0CE2C(v9, a1, a3, (uint64_t)v8);
  sub_216B27C04(v8);
  sub_216C0CC0C(v9, 0, 0);
  v6 = sub_216C0CBCC((uint64_t)v9, v5);
  sub_216C0CC08((uint64_t)v9);
  return v6;
}

uint64_t sub_216C0CE30(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_216C0CE38(uint64_t a1)
{
  _DWORD *v2;

  v2 = sub_216B4AEBC((_DWORD *)a1);
  sub_216B25034(v2 + 10);
  sub_216B25034(a1 + 64);
  sub_216B2C030((_QWORD *)(a1 + 88));
  sub_216B2C030((_QWORD *)(a1 + 112));
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFF8000 | 0xF0;
  sub_216C0CED4(a1, 0);
  *(_DWORD *)(a1 + 4) &= ~0x8000u;
  sub_216C0CEEC(a1, 0);
  *(_DWORD *)(a1 + 4) &= 0xFFF0FFFF;
  *(_QWORD *)(a1 + 24) = 8;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  *(_QWORD *)(a1 + 16) = 0xA0000000ALL;
  return a1;
}

uint64_t sub_216C0CED4(uint64_t result, char a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFFCLL | a2 & 3;
  return result;
}

uint64_t sub_216C0CEEC(uint64_t result, char a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFFBLL | (4 * (a2 & 1));
  return result;
}

_QWORD *sub_216C0CF00(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_216C06540(a1);
  *v2 = off_24D606800;
  sub_216B2C030(v2 + 2);
  a1[5] = 0;
  return a1;
}

_QWORD *sub_216C0CF3C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216B1D1D4(936);
  sub_216BA3AC4(v6);
  sub_216B27D7C((uint64_t)a1, v6);
  a1[1] = a2;
  a1[2] = a3;
  sub_216B26D14(a1 + 3);
  v8 = sub_216B25CA8((uint64_t)a1, v7);
  sub_216C0BA10(v8, a2, a1[2], (uint64_t)(a1 + 5));
  sub_216B5EDE4(a1 + 6);
  if (sub_216B3817C((uint64_t)(a1 + 5), v9))
  {
    v10 = sub_216B1D1D4(200);
    sub_216C0D028(v10, a1[2]);
    sub_216C0CFE8(a1 + 3);
  }
  return a1;
}

uint64_t sub_216C0CFE8(uint64_t *a1)
{
  uint64_t v3[2];

  sub_216C0D02C(v3);
  sub_216B512F8(v3, a1);
  return sub_216B69618(v3);
}

uint64_t *sub_216C0D030(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BYTE v9[8];

  *a1 = a2;
  sub_216B27D7C((uint64_t)v9, a2);
  v4 = sub_216B1D1D4(32);
  j_j_nullsub_1(&v8);
  sub_216C0D0B0(v4, a2);
  a1[1] = v4;
  sub_216B28054((uint64_t)v9, v5);
  nullsub_1(a1, v6);
  sub_216C0D0B4(v9);
  return a1;
}

_QWORD *sub_216C0D0B8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  char v9;

  v7 = a2;
  v3 = sub_216B6A9AC(a1, 0);
  *v3 = &unk_24D606A38;
  v4 = v3 + 3;
  sub_216B28088(v6, &v7, &v9);
  sub_216B28088(v4, v6, &v8);
  return a1;
}

void sub_216C0D124(std::__shared_weak_count *a1)
{
  void *v1;

  j_std::__shared_weak_count::~__shared_weak_count(a1);
  j__free(v1);
}

uint64_t sub_216C0D138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1 + 24;
  v3 = j_nullsub_1(a1 + 24, a2);
  v5 = j_nullsub_1(v3, v4);
  v7 = j_nullsub_1(v2, v6);
  v9 = (uint64_t *)j_nullsub_1(v7, v8);
  sub_216C0D1E4(v5, *v9);
  v11 = j_nullsub_1(v2, v10);
  return j_nullsub_1(v11, v12);
}

uint64_t sub_216C0D184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = a1 + 24;
  j_nullsub_1(a1 + 24, a2);
  j_j_nullsub_1(&v8);
  j_nullsub_1(v3, v4);
  v6 = nullsub_1(a1, v5);
  return sub_216B4F628((uint64_t)&v8, v6, 1);
}

void sub_216C0D1E4(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216C0D204(a2);
    j__free(v2);
  }
}

uint64_t sub_216C0D208(uint64_t a1)
{
  sub_216B3D4A4(a1 + 168);
  return sub_216C0D230(a1);
}

uint64_t sub_216C0D234(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  sub_216C0D268();
  sub_216B3A034(v2);
  return sub_216C0D26C(a1);
}

_QWORD *sub_216C0D270(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result[2])
  {
    v1 = result;
    v2 = (_QWORD *)sub_216BD1440((uint64_t)result);
    v1[2] = v2;
    return sub_216B210B8(v2, (uint64_t)v2);
  }
  return result;
}

uint64_t sub_216C0D2B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_216C0D2F0(a1);
    v2 = sub_216BD1440(a1);
    nullsub_1(v2, v3);
  }
  return a1;
}

uint64_t sub_216C0D2F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 16))
  {
    v1 = result;
    v2 = sub_216BD1408(result);
    v3 = sub_216C0D398(v1);
    return sub_216C0D33C(v1, v2, v3);
  }
  return result;
}

uint64_t sub_216C0D33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  if (sub_216B3760C(&v6, &v5))
    sub_216C0D3D8(a1, v6);
  return v5;
}

uint64_t sub_216C0D398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  sub_216BD1440(a1);
  v2 = sub_216BD1440(a1);
  sub_216B20C64(&v4, v2);
  return v4;
}

void sub_216C0D3D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = a2;
  v2 = sub_216BD1514(a1, &v3);
  sub_216B40EE4(v2);
}

uint64_t sub_216C0D3F4()
{
  uint64_t v1;

  return v1;
}

uint64_t sub_216C0D404(uint64_t a1)
{
  sub_216C0D42C(a1, 0);
  return a1;
}

void sub_216C0D42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216C0D1E4(v7, v4);
  }
}

uint64_t sub_216C0D488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216C0D4BC();
  *(_QWORD *)(v4 + 160) = a2;
  sub_216B3D750(v4 + 168);
  return a1;
}

uint64_t sub_216C0D4C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216C0D4EC();
  sub_216B39B60((_QWORD *)(v2 + 24));
  return a1;
}

uint64_t sub_216C0D4F8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = j_nullsub_1(a1, a2);
  return a1;
}

uint64_t sub_216C0D520(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1 + 40;
  result = sub_216B3817C(a1 + 40, a2);
  if ((_DWORD)result)
  {
    v5 = sub_216BF4328(*(_QWORD *)(a1 + 16));
    v7 = sub_216B25CA8(v3, v6);
    v9 = sub_216BF4330(v7, v8);
    v11 = sub_216B25CA8(v3, v10);
    v13 = sub_216BF4060(v11, v12);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v9, v13);
  }
  return result;
}

uint64_t sub_216C0D5A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_216B3817C(a1 + 40, a2);
  if ((_DWORD)result)
  {
    v4 = sub_216BF4328(*(_QWORD *)(a1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v5 = sub_216BF4328(*(_QWORD *)(a1 + 16));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  return result;
}

uint64_t sub_216C0D5F8(uint64_t a1)
{
  sub_216B1FF6C(a1 + 48);
  sub_216B27C04(a1 + 40);
  sub_216B69618(a1 + 24);
  return sub_216BF7EF8(a1);
}

uint64_t sub_216C0D630(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD v34[2];
  unsigned int v35;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t v38;
  const void *v39[2];
  uint64_t v40;
  unsigned int v41;
  uint64_t v42[2];
  _BYTE v43[32];

  if (!sub_216B29084((_QWORD *)(a1[1] + 32)) || (result = sub_216B29084(a1 + 6), (result & 1) == 0))
  {
    v4 = sub_216B25CA8((uint64_t)(a1 + 5), v2);
    v6 = sub_216BF4060(v4, v5);
    v8 = sub_216B25CA8((uint64_t)(a1 + 5), v7);
    v10 = sub_216BF4054(v8, v9);
    v12 = sub_216B25CA8((uint64_t)(a1 + 5), v11);
    v13 = (_DWORD *)sub_216BF9C78(v12);
    v15 = sub_216B25CA8((uint64_t)(a1 + 5), v14);
    v16 = sub_216BF9C98(v15);
    v17 = (_QWORD *)sub_216B1D1D4(24);
    sub_216C0DAC4(v17, v6);
    sub_216B9CC1C(v6, (uint64_t)v17);
    sub_216BD4588(v10);
    sub_216C0DAC8((uint64_t)v43);
    if (!sub_216B29084(a1 + 6))
    {
      v18 = (uint64_t *)sub_216B1E600((uint64_t)(a1 + 6));
      v19 = sub_216B1E67C((uint64_t)(a1 + 6));
      if (v18 != (uint64_t *)v19)
      {
        v20 = (uint64_t *)v19;
        do
        {
          v21 = *v18;
          v22 = v18[1];
          v18 += 2;
          sub_216B1E678((int)v42, "Prelude");
          v23 = sub_216B271E8(v21, v22, v42[0], v42[1], 0);
          sub_216B4AED0(&v41);
          LODWORD(v37) = sub_216B9BFA8(v16, v23, 0, 0, 0, v41);
          sub_216B26208((uint64_t)v43, &v37);
        }
        while (v18 != v20);
      }
    }
    if (sub_216B29084((_QWORD *)(a1[1] + 32))
      || (v34[0] = sub_216B2C910((uint64_t *)(a1[1] + 32)),
          v40 = sub_216B2C000(a1[1] + 32),
          !sub_216B2AB28((uint64_t)v34, (uint64_t)&v40)))
    {
LABEL_11:
      v37 = sub_216B5EDE8((uint64_t)v43);
      v38 = v27;
      v34[0] = sub_216B5EE14((uint64_t)v43);
      v34[1] = v28;
      while (sub_216B2C76C((uint64_t)&v37, (uint64_t)v34))
      {
        v29 = *(_DWORD *)sub_216C0DACC((uint64_t)&v37);
        sub_216B4AED0(&v33);
        sub_216B9277C(v6, v29, 0, v33);
        sub_216C0DAD8((uint64_t)&v37);
      }
      v37 = sub_216B5EDE8((uint64_t)v43);
      v38 = v30;
      v31 = (int *)sub_216C0DACC((uint64_t)&v37);
      sub_216C0DAE8((uint64_t)v17, *v31);
    }
    else
    {
      while (1)
      {
        v24 = sub_216B1E600((uint64_t)v34);
        sub_216B26CA0(v39, v24);
        v25 = sub_216B50040(v13, v39[0], (size_t)v39[1], 0, 1);
        if (!v25)
          break;
        v26 = v25;
        sub_216B4AED0(&v35);
        LODWORD(v37) = sub_216B84BE4(v16, v26, v35, 0, 0, 0);
        sub_216B26208((uint64_t)v43, &v37);
        sub_216B4B50C(v34);
        if (!sub_216B2AB28((uint64_t)v34, (uint64_t)&v40))
          goto LABEL_11;
      }
      sub_216B4B364(a1[2], 409, (uint64_t)&v37);
      v32 = sub_216B1E600((uint64_t)v34);
      sub_216B26CA0(v36, v32);
      sub_216B4B340(&v37, v36[0], v36[1]);
      sub_216B4B3B4(&v37);
    }
    return sub_216B1FF6C(v43);
  }
  return result;
}

void sub_216C0D928(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int16 **v13;
  uint64_t i;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t *v19;
  _QWORD v20[2];
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  _BYTE v24[56];
  std::string v25;

  if (!sub_216B25DD0(*(_QWORD *)(a1 + 8) + 56, a2))
  {
    sub_216B25034(&v25);
    v3 = (_BYTE *)sub_216B26084(*(_QWORD *)(a1 + 8) + 56);
    sub_216B407F8((uint64_t)v24, v3, (uint64_t)&v25, 0);
    if (sub_216B25DD0((uint64_t)&v25, v4))
    {
      v6 = sub_216B25CA8(a1 + 40, v5);
      v7 = sub_216B1E67C(v6);
      v23[0] = sub_216BF577C(v7);
      v23[1] = v8;
      v9 = (uint64_t *)sub_216B1E600((uint64_t)v23);
      v10 = sub_216B35430(v23);
      if (v9 != (uint64_t *)v10)
      {
        v11 = (uint64_t *)v10;
        do
        {
          v20[0] = sub_216BC38D0(*v9);
          v20[1] = v12;
          v13 = (unsigned __int16 **)sub_216B1E600((uint64_t)v20);
          for (i = sub_216B35430(v20); v13 != (unsigned __int16 **)i; ++v13)
          {
            v15 = *v13;
            if (sub_216BA7644(*v13))
            {
              v16 = sub_216BA6A7C((uint64_t)v15);
              v18 = sub_216B248E0((uint64_t)v24, v16, v17);
              sub_216B248A0((uint64_t)v18, " ");
            }
          }
          ++v9;
        }
        while (v9 != v11);
      }
      sub_216B409F4((uint64_t)v24);
    }
    else
    {
      sub_216B4B364(*(_QWORD *)(a1 + 16), 427, (uint64_t)v23);
      sub_216B26CA0(v22, *(_QWORD *)(a1 + 8) + 56);
      v19 = sub_216B4B340(v23, v22[0], v22[1]);
      sub_216B26CA0(v21, &v25);
      sub_216B4B340(v19, v21[0], v21[1]);
      sub_216B4B3B4(v23);
    }
    sub_216B4091C(v24);
    std::string::~string(&v25);
  }
}

uint64_t sub_216C0DACC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 4;
}

uint64_t sub_216C0DAD8(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 4;
  return result;
}

uint64_t sub_216C0DAE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

_QWORD *sub_216C0DAF0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = sub_216B89400(a1);
  *v4 = &unk_24D606A70;
  v4[1] = a2;
  sub_216B4AED0((_DWORD *)v4 + 4);
  return a1;
}

uint64_t sub_216C0DB2C(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  _BYTE v6[28];
  int v7;

  v7 = a5;
  if (a3 == 1)
  {
    v5 = result;
    result = sub_216B4CC88(&v7, (_DWORD *)(result + 16));
    if ((_DWORD)result)
    {
      sub_216B70D84(v6);
      sub_216B75074((uint64_t)v6);
      sub_216B74800((uint64_t)v6, 525);
      return sub_216C0DB94(*(_QWORD *)(v5 + 8), (unint64_t)v6);
    }
  }
  return result;
}

uint64_t sub_216C0DB94(uint64_t a1, unint64_t a2)
{
  unint64_t v4;

  sub_216B87E30(a1, a2);
  v4 = sub_216B1E600(a1 + 1928) + 24 * *(_QWORD *)(a1 + 1984);
  return sub_216C0DBE0(a1 + 1928, v4, a2);
}

uint64_t sub_216C0DBE0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = a2;
  if (sub_216B1E67C(a1) == a2)
  {
    sub_216B623F0(a1, a3);
    return sub_216B1E67C(a1) - 24;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    {
      v6 = v4 - sub_216B1E600(a1);
      sub_216B67B88((const void **)a1, 0);
      v4 = sub_216B1E600(a1) + v6;
    }
    v7 = sub_216B1E67C(a1);
    v8 = sub_216B3B09C(a1);
    v9 = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_QWORD *)(v7 + 16) = v9;
    sub_216B1E67C(a1);
    sub_216B1E67C(a1);
    sub_216B987EC();
    v10 = sub_216B1E67C(a1);
    sub_216B203A4(a1, v10 + 24);
    if (v4 <= a3)
      a3 += 24 * (*(_QWORD *)(a1 + 8) > a3);
    v11 = *(_OWORD *)a3;
    *(_DWORD *)(v4 + 15) = *(_DWORD *)(a3 + 15);
    *(_OWORD *)v4 = v11;
  }
  return v4;
}

uint64_t sub_216C0DCF0(uint64_t a1)
{
  return sub_216B264A8(a1, 2u);
}

_QWORD *sub_216C0DCF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[8];

  v8 = sub_216B1D1D4(936);
  sub_216BA3AC4(v8);
  sub_216B27D7C((uint64_t)a1, v8);
  a1[1] = a2;
  a1[2] = a3;
  sub_216B26D14(a1 + 3);
  v10 = sub_216B25CA8((uint64_t)a1, v9);
  v11 = a1[2];
  sub_216B27D80(v15, a4);
  sub_216C0BC0C(v10, a2, v11, (uint64_t)v15, (uint64_t)(a1 + 5));
  sub_216B27C04(v15);
  sub_216B5EDE4(a1 + 6);
  if (sub_216B3817C((uint64_t)(a1 + 5), v12))
  {
    v13 = sub_216B1D1D4(200);
    sub_216C0D028(v13, a1[2]);
    sub_216C0CFE8(a1 + 3);
  }
  return a1;
}

uint64_t *sub_216C0DDE4(uint64_t **a1, uint64_t **a2)
{
  return sub_216C0DDF0(*a1, *a2);
}

void fosl_frontend_parseFile(uint64_t a1)
{
  _BYTE v2[8];
  uint64_t v3;

  sub_216C0BEC4((uint64_t)v2);
  sub_216B25DEC(&v3, a1);
}

uint64_t sub_216C0DE20()
{
  _BYTE v1[152];

  sub_216C0DE40((uint64_t)v1);
  return sub_216C0BEC8(v1);
}

BOOL sub_216C0DE40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  _BYTE v7[8];

  v2 = sub_216B40C20();
  sub_216C0C9CC(v2, 0, (uint64_t)v7);
  v4 = sub_216B25CA8((uint64_t)v7, v3);
  v5 = sub_216C0CB44(a1, v4);
  sub_216BF7EF4(v7);
  return v5;
}

uint64_t fosl_frontend_parseString(char *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  const void *v11;
  _BYTE v13[8];
  _BYTE v14[8];
  uint64_t v15[6];
  std::string v16;
  uint64_t v17[2];
  uint64_t v18[2];
  _BYTE v19[8];
  _BYTE v20[120];

  sub_216C0BEC4((uint64_t)v20);
  sub_216B1E678((int)v18, a1);
  sub_216B1E678((int)v17, "Source");
  v4 = sub_216B271E8(v18[0], v18[1], v17[0], v17[1], 0);
  sub_216B27D7C((uint64_t)v19, v4);
  sub_216B25034(&v16);
  sub_216B6042C(v15, &v16);
  sub_216C0C9CC((uint64_t)v15, 0, (uint64_t)v14);
  sub_216B27D80(v13, v19);
  v6 = sub_216B25CA8((uint64_t)v14, v5);
  sub_216C0CD8C((uint64_t)v20, (uint64_t)v13, v6);
  sub_216B27C04(v13);
  sub_216B408F0(v15);
  if (sub_216B25DD0((uint64_t)&v16, v7))
  {
    *a2 = 0;
  }
  else
  {
    v9 = sub_216B25B78((uint64_t)&v16, v8);
    v10 = malloc_type_malloc(v9 + 1, 0x95E5B39BuLL);
    *a2 = v10;
    v11 = (const void *)sub_216B26084(&v16);
    memcpy(v10, v11, v9);
    *(_BYTE *)(*a2 + v9) = 0;
  }
  sub_216BF7EF4(v14);
  sub_216B40CD4(v15);
  std::string::~string(&v16);
  sub_216B27C04(v19);
  return sub_216C0BEC8(v20);
}

uint64_t fosl_createParser()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[8];

  v0 = sub_216B1D1D4(272);
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  sub_216C0E09C((_QWORD *)v0);
  v1 = sub_216B40C20();
  sub_216C0C9CC(v1, 1, (uint64_t)v6);
  sub_216C0E0A0(v0 + 120, (uint64_t)v6);
  sub_216BF7EF4(v6);
  v2 = sub_216B1D1D4(200);
  v4 = sub_216B25CA8(v0 + 120, v3);
  sub_216C0D028(v2, v4);
  sub_216C0CFE8((uint64_t *)(v0 + 136));
  return v0;
}

uint64_t sub_216C0E0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B28054(a2, a2);
  sub_216BF7F24(a1, v4);
  j_j_nullsub_1(a2);
  j_nullsub_1(a1, v5);
  return a1;
}

void fosl_destroyParser(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)sub_216C0E104();
    j__free(v1);
  }
}

uint64_t fosl_setPrimarySource(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18[2];
  uint64_t v19[2];
  _BYTE v20[8];

  v4 = a1 + 120;
  v5 = sub_216B25CA8(a1 + 120, (uint64_t)a2);
  sub_216B4B798(v5);
  v7 = sub_216B25CA8(v4, v6);
  sub_216B4AF34(v7);
  v9 = sub_216B25CA8(v4, v8);
  v10 = (void (***)(_QWORD))sub_216BF4328(v9);
  (**v10)(v10);
  sub_216B1E678((int)v19, a2);
  sub_216B1E678((int)v18, "Source");
  v11 = sub_216B271E8(v19[0], v19[1], v18[0], v18[1], 0);
  sub_216B27D7C((uint64_t)v20, v11);
  v12 = sub_216B1D1D4(104);
  v14 = sub_216B25CA8(v4, v13);
  sub_216C0E22C(v17, (_QWORD *)(a1 + 136));
  sub_216B27D80(&v16, v20);
  sub_216C0E230(v12, a1, v14, v17, &v16);
  sub_216C0E214((uint64_t *)(a1 + 128), v12);
  sub_216B27C04(&v16);
  sub_216B69618(v17);
  return sub_216B27C04(v20);
}

void sub_216C0E214(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    sub_216C10998(v3);
}

uint64_t fosl_addPrelude(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = sub_216B1E600(a1 + 128);
  sub_216B1E678((int)v5, a2);
  return sub_216C0E27C(v3, v5[0], v5[1]);
}

uint64_t sub_216C0E27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;

  *(_QWORD *)&v4 = a2;
  *((_QWORD *)&v4 + 1) = a3;
  return sub_216B267B0(a1 + 48, &v4);
}

uint64_t fosl_parseShader(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)sub_216B1E600(a1 + 128);
  return sub_216C0E2BC(v1, v2);
}

uint64_t sub_216C0E2BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  v3 = (uint64_t)(a1 + 5);
  result = sub_216B3817C((uint64_t)(a1 + 5), a2);
  if ((_DWORD)result)
  {
    v6 = sub_216B25CA8(v3, v5);
    v8 = sub_216BF4060(v6, v7);
    v10 = sub_216B25CA8(v3, v9);
    v12 = (uint64_t *)sub_216BF48A4(v10, v11);
    v14 = sub_216B25CA8(v3, v13);
    v16 = (uint64_t *)sub_216BF4054(v14, v15);
    sub_216B9BE60(v8);
    sub_216C0D630(a1);
    sub_216C0D520((uint64_t)a1, v17);
    sub_216BECC18(v12);
    sub_216BD459C(v16);
    sub_216BF3570((uint64_t)v12);
    v18 = sub_216B1E600((uint64_t)(a1 + 3));
    sub_216B26CA0(v36, a1[1] + 80);
    sub_216BCDBC8(v18, v36[0], v36[1]);
    v20 = sub_216B25CA8(v3, v19);
    v21 = sub_216B1E67C(v20);
    v34 = sub_216BF577C(v21);
    v35 = v22;
    v23 = (uint64_t *)sub_216B1E600((uint64_t)&v34);
    v24 = sub_216B35430(&v34);
    if (v23 != (uint64_t *)v24)
    {
      v25 = (uint64_t *)v24;
      do
      {
        v26 = *v23++;
        v27 = sub_216B1E600((uint64_t)(a1 + 3));
        sub_216BCD8FC(v27, v26);
      }
      while (v23 != v25);
    }
    sub_216BD48D8((uint64_t)v16);
    if (sub_216C0CBCC((uint64_t)a1, v28))
    {
      v30 = sub_216B25CA8(v3, v29);
      v31 = sub_216B1E67C(v30);
      v34 = sub_216BF577C(v31);
      v35 = v32;
      sub_216B1E600((uint64_t)&v34);
      sub_216B35430(&v34);
    }
    sub_216C0D928((uint64_t)a1, v29);
    return sub_216C0D5A0((uint64_t)a1, v33);
  }
  return result;
}

uint64_t fosl_codeComplete(uint64_t a1, char *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  *(_QWORD *)(a1 + 104) = 0x100000001;
  fosl_setPrimarySource(a1, a2);
  v7 = sub_216B1E600(a1 + 128);
  v9 = sub_216B25CA8(v7 + 40, v8);
  v10 = sub_216BF9C98(v9);
  v11 = sub_216B8AEB0(v10);
  *(_DWORD *)(a1 + 104) = sub_216B63A50(v10, v11, a3, 0);
  *(_DWORD *)(a1 + 108) = sub_216B6369C(v10, v11, a3, 0);
  return sub_216C0E4C4(a1, a4);
}

uint64_t sub_216C0E4C4(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)sub_216B1E600(a1 + 128);
  v6 = sub_216B25CA8((uint64_t)(v4 + 5), v5);
  v7 = sub_216BF9C98(v6);
  v9 = sub_216BF4060(v6, v8);
  v10 = sub_216B8AEB0(v7);
  v11 = sub_216B81B44(v7, v10);
  sub_216B9BA14(v9, v11, *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108));
  v13 = sub_216B25CA8(a1 + 120, v12);
  sub_216B8F530(v13, 1);
  sub_216C0E2BC(v4, v14);
  if (!sub_216C0CBCC((uint64_t)v4, v15))
    return 0;
  v17 = sub_216BF48A4(v6, v16);
  v18 = (uint64_t *)sub_216C0CE30(v17);
  v19 = sub_216B2C910(v18);
  v20 = sub_216B2C000((uint64_t)v18);
  sub_216C0F520(v19, v20);
  *a2 = sub_216B2E220(v18);
  return sub_216B4B51C(v18, v21);
}

uint64_t fosl_codeCompleteLineColumn(uint64_t a1, char *a2, int a3, int a4, _DWORD *a5)
{
  *(_DWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 108) = a4;
  fosl_setPrimarySource(a1, a2);
  return sub_216C0E4C4(a1, a5);
}

uint64_t fosl_getNumDiagnostics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B25CA8(a1 + 120, a2);
  v3 = sub_216BF4328(v2);
  return sub_216BF9EEC(v3);
}

char *fosl_getDiagnostics(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t i;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t j;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v53;
  char *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;

  v2 = sub_216B1E600(a1 + 128);
  v4 = sub_216B25CA8(v2 + 40, v3);
  v5 = (_DWORD *)sub_216BF9C98(v4);
  v7 = sub_216B25CA8(a1 + 120, v6);
  v8 = sub_216BF4328(v7);
  v9 = (uint64_t *)(a1 + 224);
  v10 = (uint64_t *)(a1 + 248);
  sub_216B4B134(v9);
  sub_216BFA25C(v10);
  v11 = sub_216B27CA8(v8);
  sub_216BFA290(v9, v11);
  v12 = sub_216B69B74(v8);
  sub_216BFA2E8(v10, v12);
  v13 = sub_216BF9EEC(v8);
  if (!v13)
    return 0;
  v54 = (char *)malloc_type_malloc(56 * v13, 0x1070040AB968983uLL);
  v61 = sub_216BFA340(v8);
  v60 = sub_216C05FB8(v8);
  if (sub_216B2AB28((uint64_t)&v61, (uint64_t)&v60))
  {
    v58 = 0;
    v53 = v4;
    do
    {
      v56 = sub_216B2E220(v9);
      v15 = sub_216B4B51C(&v61, v14) + 32;
      v16 = (unsigned int *)sub_216B1E600(v15);
      for (i = sub_216B1E67C(v15); v16 != (unsigned int *)i; v16 += 3)
      {
        v18 = sub_216B71D08(v16);
        v59.n128_u32[0] = sub_216BFA3CC(v5, v18);
        v19 = sub_216B69130(v16);
        v59.n128_u32[1] = sub_216BFA3CC(v5, v19);
        sub_216BFA374(v9, (uint64_t)&v59);
      }
      v55 = sub_216B2D0E0(v10);
      v21 = sub_216B4B51C(&v61, v20) + 80;
      v22 = (unsigned int *)sub_216B1E600(v21);
      for (j = sub_216B1E67C(v21); v22 != (unsigned int *)j; v22 += 14)
      {
        v25 = sub_216B71D08(v22);
        v26 = sub_216B69130(v22);
        if (sub_216B71E34((uint64_t)v22))
        {
          v28 = sub_216BF4330(v4, v27);
          v26 = sub_216B7185C(v26, 0, v5, v28);
        }
        v59 = 0uLL;
        v59.n128_u32[0] = sub_216BFA3CC(v5, v25);
        v59.n128_u32[1] = sub_216BFA3CC(v5, v26);
        v59.n128_u64[1] = 0;
        if (sub_216B25DD0((uint64_t)(v22 + 6), v29))
          sub_216B774B4(v22 + 3);
        else
          v59.n128_u64[1] = sub_216B26084(v22 + 6);
        sub_216BFA3E8(v10, &v59);
      }
      v30 = sub_216B4B51C(&v61, v23);
      v31 = sub_216BFA3CC(v5, *(_DWORD *)(v30 + 24));
      v33 = sub_216B4B51C(&v61, v32);
      v34 = sub_216B4D4A0(v33 + 32);
      v36 = sub_216B4B51C(&v61, v35);
      v37 = sub_216B4D4E0(v36 + 80);
      v39 = sub_216B4B51C(&v61, v38);
      v40 = sub_216B26084(v39);
      v41 = sub_216B8AEB0((uint64_t)v5);
      v42 = sub_216B63A50((uint64_t)v5, v41, v31, 0);
      v43 = sub_216B8AEB0((uint64_t)v5);
      v57 = sub_216B6369C((uint64_t)v5, v43, v31, 0);
      v45 = v40;
      if (v34)
        v46 = sub_216B4B51C(v9, v44) + 8 * v56;
      else
        v46 = 0;
      v47 = v34;
      if (v37)
        v48 = sub_216B4B51C(v10, v44) + 16 * v55;
      else
        v48 = 0;
      v49 = sub_216B4B51C(&v61, v44);
      v50 = sub_216BF7420(*(_DWORD *)(v49 + 216));
      v51 = &v54[56 * v58];
      *(_QWORD *)v51 = v45;
      *((_DWORD *)v51 + 2) = v31;
      *((_DWORD *)v51 + 3) = v42;
      *((_DWORD *)v51 + 4) = v57;
      *((_DWORD *)v51 + 5) = v47;
      *((_QWORD *)v51 + 3) = v46;
      *((_DWORD *)v51 + 8) = v37;
      *((_QWORD *)v51 + 5) = v48;
      *((_DWORD *)v51 + 12) = v50;
      ++v58;
      sub_216C09AA4(&v61);
      v4 = v53;
    }
    while (sub_216B2AB28((uint64_t)&v61, (uint64_t)&v60));
  }
  return v54;
}

void fosl_removeSpecialization(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4[2];

  v3 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v4, a2);
  sub_216BCE77C(v3, v4[0], v4[1]);
}

uint64_t fosl_specializeFloat(uint64_t a1, char *a2, float a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v7, a2);
  return sub_216BCEB74(v5, v7[0], v7[1], a3);
}

uint64_t fosl_specializeInt(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v7, a2);
  return sub_216BCECA4(v5, v7[0], v7[1], a3);
}

uint64_t fosl_specializeUInt(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v7, a2);
  return sub_216BCECA4(v5, v7[0], v7[1], a3);
}

uint64_t fosl_specializeBool(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v7, a2);
  return sub_216BCED6C(v5, v7[0], v7[1], a3);
}

uint64_t fosl_specializeFloatVector(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10[2];

  v7 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v10, a2);
  sub_216B1E684(v9, a3, a4);
  return sub_216BCEBD4(v7, v10[0], v10[1], v9[0], v9[1]);
}

uint64_t fosl_specializeIntVector(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10[2];

  v7 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v10, a2);
  sub_216B1E684(v9, a3, a4);
  return sub_216BCED04(v7, v10[0], v10[1], v9[0], v9[1]);
}

uint64_t fosl_specializeUIntVector(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10[2];

  v7 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v10, a2);
  sub_216B1E684(v9, a3, a4);
  return sub_216BCED04(v7, v10[0], v10[1], v9[0], v9[1]);
}

uint64_t fosl_specializeBoolVector(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10[2];

  v7 = sub_216B1E600(a1 + 136);
  sub_216B1E678((int)v10, a2);
  sub_216B1E684(v9, a3, a4);
  return sub_216BCEDD0(v7, v10[0], v10[1], v9[0], v9[1]);
}

uint64_t fosl_specializeFloatMatrix(uint64_t a1, char *a2, uint64_t a3, int a4, int a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  _QWORD v25[3];
  int v26;
  int v27;
  uint64_t v28;

  v28 = a3;
  v26 = a5;
  v27 = a4;
  result = a1 + 136;
  v25[0] = &v28;
  v25[1] = &v26;
  v25[2] = &v27;
  switch(a4)
  {
    case 4:
      v8 = sub_216B1E600(result);
      sub_216B1E678((int)v22, a2);
      v9 = sub_216C0EECC((uint64_t)v25, 0);
      v11 = v10;
      v12 = sub_216C0EECC((uint64_t)v25, 1);
      v14 = v13;
      v15 = sub_216C0EECC((uint64_t)v25, 2);
      v17 = v16;
      v18 = sub_216C0EECC((uint64_t)v25, 3);
      return sub_216BCE9E4(v8, v22[0], v22[1], v9, v11, v12, v14, v20, v15, v17, v18, v19);
    case 3:
      v21 = sub_216B1E600(result);
      sub_216B1E678((int)v23, a2);
      sub_216C0EECC((uint64_t)v25, 0);
      sub_216C0EECC((uint64_t)v25, 1);
      sub_216C0EECC((uint64_t)v25, 2);
      return sub_216BCE94C(v21, v23[0], v23[1]);
    case 2:
      v7 = sub_216B1E600(result);
      sub_216B1E678((int)v24, a2);
      sub_216C0EECC((uint64_t)v25, 0);
      sub_216C0EECC((uint64_t)v25, 1);
      return sub_216BCE844(v7, v24[0], v24[1]);
  }
  return result;
}

uint64_t sub_216C0EECC(uint64_t a1, int a2)
{
  uint64_t v3;

  sub_216B1E684(&v3, **(_QWORD **)a1 + 4 * (**(_DWORD **)(a1 + 8) * a2), **(unsigned int **)(a1 + 16));
  return v3;
}

uint64_t fosl_getSpecializedUniforms(uint64_t a1, _DWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[3];

  v4 = (uint64_t *)(a1 + 200);
  sub_216B4B134((uint64_t *)(a1 + 200));
  v5 = sub_216B1E600(a1 + 136);
  sub_216BCEA8C(v5, v12);
  v11 = sub_216B2C910(v12);
  v10 = sub_216B2C000((uint64_t)v12);
  while (sub_216B2AB28((uint64_t)&v11, (uint64_t)&v10))
  {
    v9 = *(_OWORD *)sub_216B1E600((uint64_t)&v11);
    v8 = sub_216B1E600((uint64_t)&v9);
    sub_216BD81CC(v4, (uint64_t)&v8);
    sub_216B8FE9C(&v11);
  }
  sub_216B2CFC8(v12);
  *a2 = sub_216B2E220(v4);
  return sub_216B4B51C(v4, v6);
}

uint64_t fosl_getUsedUniforms(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];
  _QWORD v20[2];

  v4 = sub_216B1E600(a1 + 128);
  v5 = (uint64_t *)(a1 + 176);
  sub_216B4B134(v5);
  v7 = sub_216B25CA8(v4 + 40, v6);
  v8 = sub_216B1E67C(v7);
  v20[0] = sub_216BF577C(v8);
  v20[1] = v9;
  v10 = (uint64_t *)sub_216B1E600((uint64_t)v20);
  v11 = sub_216B35430(v20);
  if (v10 != (uint64_t *)v11)
  {
    v12 = (uint64_t *)v11;
    do
    {
      sub_216C0F0F4(*v10, v19);
      v18 = sub_216B2C910(v19);
      v17 = sub_216B2C000((uint64_t)v19);
      while (sub_216B2AB28((uint64_t)&v18, (uint64_t)&v17))
      {
        v16 = *(_OWORD *)sub_216B1E600((uint64_t)&v18);
        v15 = sub_216B1E600((uint64_t)&v16);
        sub_216BD81CC(v5, (uint64_t)&v15);
        sub_216B8FE9C(&v18);
      }
      sub_216B2CFC8(v19);
      ++v10;
    }
    while (v10 != v12);
  }
  *a2 = sub_216B2E220(v5);
  return sub_216B4B51C(v5, v13);
}

BOOL sub_216C0F0F4@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  sub_216BA9CE0(a1);
  sub_216B2C030(a2);
  v10 = sub_216B2C910((uint64_t *)(a1 + 48));
  v9 = sub_216B2C000(a1 + 48);
  result = sub_216B2AB28((uint64_t)&v10, (uint64_t)&v9);
  if (result)
  {
    v5 = a1 + 176;
    do
    {
      v6 = *(_QWORD *)sub_216B1E600((uint64_t)&v10);
      if (sub_216BA5ED4(v5, v6))
      {
        v8.n128_u64[0] = sub_216BA6A7C(v6);
        v8.n128_u64[1] = v7;
        sub_216BCEB1C(a2, &v8);
      }
      sub_216B3D138(&v10);
      result = sub_216B2AB28((uint64_t)&v10, (uint64_t)&v9);
    }
    while (result);
  }
  return result;
}

char *fosl_astPrint(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19[6];

  v2 = sub_216B1E600(a1 + 128);
  if (!sub_216C0CBCC(v2, v3))
    return &byte_216C19659;
  sub_216B25BB0(a1 + 152, v4);
  sub_216B6042C(v19, a1 + 152);
  v6 = sub_216B25CA8(v2 + 40, v5);
  v7 = sub_216B1E67C(v6);
  v18[0] = sub_216BF577C(v7);
  v18[1] = v8;
  v9 = (uint64_t *)sub_216B1E600((uint64_t)v18);
  v10 = sub_216B35430(v18);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    v12 = a1 + 136;
    do
    {
      v13 = *v9++;
      v14 = sub_216B1E600(v12);
      sub_216BCD8FC(v14, v13);
      sub_216BA5A0C(v13, v19);
    }
    while (v9 != v11);
  }
  v15 = sub_216B60430(v19);
  v16 = sub_216B26084(v15);
  sub_216B40CD4(v19);
  return (char *)v16;
}

char *fosl_astPrintReachable(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19[6];

  v2 = sub_216B1E600(a1 + 128);
  if (!sub_216C0CBCC(v2, v3))
    return &byte_216C19659;
  sub_216B25BB0(a1 + 152, v4);
  sub_216B6042C(v19, a1 + 152);
  v6 = sub_216B25CA8(v2 + 40, v5);
  v7 = sub_216B1E67C(v6);
  v18[0] = sub_216BF577C(v7);
  v18[1] = v8;
  v9 = (uint64_t *)sub_216B1E600((uint64_t)v18);
  v10 = sub_216B35430(v18);
  if (v9 != (uint64_t *)v10)
  {
    v11 = (uint64_t *)v10;
    v12 = a1 + 136;
    do
    {
      v13 = *v9++;
      v14 = sub_216B1E600(v12);
      sub_216BCD8FC(v14, v13);
      sub_216BA5C08(v13, (uint64_t)v19);
    }
    while (v9 != v11);
  }
  v15 = sub_216B60430(v19);
  v16 = sub_216B26084(v15);
  sub_216B40CD4(v19);
  return (char *)v16;
}

_QWORD *sub_216C0F36C(_QWORD *a1)
{
  uint64_t v2;

  v2 = sub_216C0BEC4((uint64_t)a1);
  sub_216B324FC(v2 + 120);
  sub_216BD253C(a1 + 16);
  sub_216B26D14(a1 + 17);
  sub_216B25034(a1 + 19);
  sub_216B2C030(a1 + 22);
  sub_216B2C030(a1 + 25);
  sub_216B2C030(a1 + 28);
  sub_216B2C030(a1 + 31);
  return a1;
}

uint64_t sub_216C0F3D0(uint64_t a1)
{
  sub_216B2CFC8(a1 + 248);
  sub_216B2ED08(a1 + 224);
  sub_216B3D560(a1 + 200);
  sub_216B3D560(a1 + 176);
  std::string::~string((std::string *)(a1 + 152));
  sub_216B69618(a1 + 136);
  sub_216C0F430(a1 + 128);
  sub_216BF7EF4(a1 + 120);
  return sub_216C0BEC8(a1);
}

uint64_t *sub_216C0F434(uint64_t *a1)
{
  sub_216C0E214(a1, 0);
  return a1;
}

_QWORD *sub_216C0F45C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[8];

  v10 = sub_216B1D1D4(936);
  sub_216BA3AC4(v10);
  sub_216B27D7C((uint64_t)a1, v10);
  a1[1] = a2;
  a1[2] = a3;
  sub_216C0E22C(a1 + 3, a4);
  v12 = sub_216B25CA8((uint64_t)a1, v11);
  v13 = a1[2];
  sub_216B27D80(v16, a5);
  sub_216C0BC0C(v12, a2, v13, (uint64_t)v16, (uint64_t)(a1 + 5));
  sub_216B27C04(v16);
  sub_216B5EDE4(a1 + 6);
  sub_216B3817C((uint64_t)(a1 + 5), v14);
  return a1;
}

uint64_t sub_216C0F524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;

  nullsub_1(a1, a2);
  v4 = sub_216B2F028(a1);
  v5 = (uint64_t *)sub_216B2F028(a2);
  sub_216C0F57C(v4, v5);
  sub_216B2F028(a1);
  return sub_216B2F028(a2);
}

uint64_t sub_216C0F57C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = 2 * sub_216B2FBC4(((uint64_t)a2 - a1) >> 3);
  return sub_216C0F5B8(a1, a2, v4, 1);
}

uint64_t sub_216C0F5B8(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  char **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  char v17;
  _BOOL4 v18;
  char *v19[2];
  uint64_t v20[2];
  uint64_t *v21;
  char *v22[2];
  uint64_t v23[2];
  char **v24;
  uint64_t *v25;

  v5 = (char **)a2;
  v6 = (uint64_t *)result;
  v25 = (uint64_t *)result;
  v24 = (char **)a2;
  while (2)
  {
    v7 = 1 - a3;
LABEL_3:
    v8 = (char *)v5 - (char *)v6;
    v9 = ((char *)v5 - (char *)v6) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = v5 - 1;
        sub_216B1E678((int)v23, *(v5 - 1));
        sub_216B1E678((int)v22, (char *)*v25);
        result = sub_216C0F870(v23[0], v23[1], v22[0], (unint64_t)v22[1]);
        if ((_DWORD)result)
          return (uint64_t)sub_216C0DDE4(&v25, (uint64_t **)&v24);
        return result;
      case 3uLL:
        v24 = v5 - 1;
        return (uint64_t)sub_216C0F8C4(v6, v6 + 1, (uint64_t *)v5 - 1);
      case 4uLL:
        v24 = v5 - 1;
        return sub_216C0F8C8(v6, v6 + 1, v6 + 2, v5 - 1);
      case 5uLL:
        v24 = v5 - 1;
        return sub_216C0F8CC(v6, v6 + 1, v6 + 2, v6 + 3, v5 - 1);
      default:
        if (v8 <= 191)
        {
          if ((a4 & 1) != 0)
            return sub_216C0F8D0((uint64_t)v6, (uint64_t)v5);
          else
            return sub_216C0F9C8((uint64_t)v6, v5);
        }
        if (v7 == 1)
          return sub_216C0FAA0(v6, (uint64_t *)v5, (uint64_t)v5);
        v10 = v9 >> 1;
        v11 = (uint64_t *)(v5 - 1);
        if ((unint64_t)v8 < 0x401)
        {
          sub_216C0FB10(&v6[v9 >> 1], v6, v11);
          if ((a4 & 1) != 0)
          {
LABEL_11:
            v5 = v24;
            goto LABEL_12;
          }
        }
        else
        {
          sub_216C0FB10(v6, &v6[v9 >> 1], v11);
          v12 = 8 * v10 - 8;
          v13 = (uint64_t *)v24;
          sub_216C0FB10(v25 + 1, (uint64_t *)((char *)v25 + v12), (uint64_t *)v24 - 2);
          v14 = 8 * v10 + 8;
          sub_216C0FB10(v25 + 2, (uint64_t *)((char *)v25 + v14), v13 - 3);
          sub_216C0FB10((uint64_t *)((char *)v25 + v12), &v25[v10], (uint64_t *)((char *)v25 + v14));
          v21 = &v25[v10];
          sub_216C0DDE4(&v25, &v21);
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        sub_216B1E678((int)v20, (char *)*(v25 - 1));
        sub_216B1E678((int)v19, (char *)*v25);
        v15 = sub_216C0F870(v20[0], v20[1], v19[0], (unint64_t)v19[1]);
        v5 = v24;
        if ((v15 & 1) == 0)
        {
          result = (uint64_t)sub_216C0FC54(v25, (uint64_t *)v24);
          v6 = (uint64_t *)result;
          goto LABEL_20;
        }
LABEL_12:
        v16 = (uint64_t *)sub_216C0FE38(v25, (uint64_t *)v5);
        if ((v17 & 1) == 0)
          goto LABEL_19;
        v18 = sub_216C0FFF0(v25, v16);
        v6 = v16 + 1;
        result = sub_216C0FFF0(v16 + 1, (uint64_t *)v5);
        if (!(_DWORD)result)
        {
          if (v18)
          {
            v25 = v16 + 1;
            goto LABEL_18;
          }
LABEL_19:
          result = sub_216C0F5B8(v25, v16, -v7, a4 & 1);
          v6 = v16 + 1;
LABEL_20:
          a4 = 0;
          v25 = v6;
          a3 = -v7;
          continue;
        }
        if (!v18)
        {
          v24 = (char **)v16;
          v6 = v25;
          v5 = (char **)v16;
LABEL_18:
          ++v7;
          goto LABEL_3;
        }
        return result;
    }
  }
}

uint64_t sub_216C0F870(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  unsigned int v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v6 = sub_216B31798((uint64_t)v8, a3, a4);
  if (!v6)
    v6 = sub_216B3B3F0((uint64_t)v8, a3, a4);
  return v6 >> 31;
}

uint64_t sub_216C0F8D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char **v10;
  char *v11[2];
  uint64_t v12[2];
  char **v13;
  char *v14[2];
  uint64_t v15[2];
  _QWORD v16[7];

  if (result != a2)
  {
    v16[5] = v2;
    v16[6] = v3;
    v5 = (char **)result;
    v16[0] = result + 8;
    if (result + 8 != a2)
    {
      v6 = (char **)result;
      do
      {
        sub_216B1E678((int)v15, v6[1]);
        sub_216B1E678((int)v14, *v6);
        result = sub_216C0F870(v15[0], v15[1], v14[0], (unint64_t)v14[1]);
        if ((_DWORD)result)
        {
          v9 = *(char **)sub_216B30ACC((uint64_t)v16, v7);
          v13 = v6;
          v10 = (char **)v16[0];
          while (1)
          {
            result = sub_216B30ACC((uint64_t)&v13, v8);
            *v10 = *(char **)result;
            v10 = v13;
            if (v13 == v5)
              break;
            sub_216B1E678((int)v12, v9);
            sub_216B1E678((int)v11, *--v13);
            result = sub_216C0F870(v12[0], v12[1], v11[0], (unint64_t)v11[1]);
            if ((result & 1) == 0)
              goto LABEL_10;
          }
          v10 = v5;
LABEL_10:
          *v10 = v9;
        }
        v6 = (char **)v16[0];
        v16[0] += 8;
      }
      while (v16[0] != a2);
    }
  }
  return result;
}

uint64_t sub_216C0F9C8(uint64_t result, char **a2)
{
  uint64_t v2;
  uint64_t v3;
  char **i;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char **v9;
  char *v10[2];
  uint64_t v11[2];
  char **v12;
  char *v13[2];
  uint64_t v14[2];
  _QWORD v15[7];

  if ((char **)result != a2)
  {
    v15[5] = v2;
    v15[6] = v3;
    for (i = (char **)result; ; i = (char **)v15[0])
    {
      v15[0] = i + 1;
      if (i + 1 == a2)
        break;
      sub_216B1E678((int)v14, i[1]);
      sub_216B1E678((int)v13, *i);
      result = sub_216C0F870(v14[0], v14[1], v13[0], (unint64_t)v13[1]);
      if ((_DWORD)result)
      {
        v8 = *(char **)sub_216B30ACC((uint64_t)v15, v6);
        v12 = i;
        v9 = (char **)v15[0];
        do
        {
          *v9 = *(char **)sub_216B30ACC((uint64_t)&v12, v7);
          v9 = v12;
          sub_216B1E678((int)v11, v8);
          sub_216B1E678((int)v10, *--v12);
          result = sub_216C0F870(v11[0], v11[1], v10[0], (unint64_t)v10[1]);
        }
        while ((result & 1) != 0);
        *v9 = v8;
      }
    }
  }
  return result;
}

uint64_t sub_216C0FAA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2)
    return sub_216B30AF0((uint64_t)a1, a3);
  nullsub_1(a1, a3);
  sub_216C103EC(a1, a2, a3);
  return nullsub_1(a2, a3);
}

uint64_t *sub_216C0FB10(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;
  char *v6;
  char ***v7;
  uint64_t *result;
  char ***v9;
  char *v10[2];
  uint64_t v11[2];
  char *v12[2];
  uint64_t v13[2];
  char *v14[2];
  uint64_t v15[2];
  char *v16[2];
  uint64_t v17[2];
  char *v18[2];
  uint64_t v19[2];
  char **v20;
  char **v21;
  char **v22;

  v21 = (char **)a2;
  v22 = (char **)a1;
  v20 = (char **)a3;
  sub_216B1E678((int)v19, (char *)*a2);
  sub_216B1E678((int)v18, (char *)*a1);
  v5 = sub_216C0F870(v19[0], v19[1], v18[0], (unint64_t)v18[1]);
  v6 = (char *)*a3;
  if ((v5 & 1) != 0)
  {
    sub_216B1E678((int)v13, v6);
    sub_216B1E678((int)v12, *v21);
    if (sub_216C0F870(v13[0], v13[1], v12[0], (unint64_t)v12[1]))
    {
      v7 = &v22;
    }
    else
    {
      sub_216C0DDE4((uint64_t **)&v22, (uint64_t **)&v21);
      sub_216B1E678((int)v11, *v20);
      sub_216B1E678((int)v10, *v21);
      result = (uint64_t *)sub_216C0F870(v11[0], v11[1], v10[0], (unint64_t)v10[1]);
      if (!(_DWORD)result)
        return result;
      v7 = &v21;
    }
    v9 = &v20;
    return sub_216C0DDE4((uint64_t **)v7, (uint64_t **)v9);
  }
  sub_216B1E678((int)v17, v6);
  sub_216B1E678((int)v16, *v21);
  result = (uint64_t *)sub_216C0F870(v17[0], v17[1], v16[0], (unint64_t)v16[1]);
  if ((_DWORD)result)
  {
    sub_216C0DDE4((uint64_t **)&v21, (uint64_t **)&v20);
    sub_216B1E678((int)v15, *v21);
    sub_216B1E678((int)v14, *v22);
    result = (uint64_t *)sub_216C0F870(v15[0], v15[1], v14[0], (unint64_t)v14[1]);
    if ((_DWORD)result)
    {
      v7 = &v22;
      v9 = &v21;
      return sub_216C0DDE4((uint64_t **)v7, (uint64_t **)v9);
    }
  }
  return result;
}

char **sub_216C0FC54(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  char **v3;
  char *v4;
  uint64_t v5;
  char **v6;
  uint64_t *v7;
  char *v8;
  char **v10;
  char *v11[2];
  uint64_t v12[2];
  char *v13[2];
  uint64_t v14[2];
  char *v15[2];
  uint64_t v16[2];
  char *v17[2];
  uint64_t v18[2];
  char *v19[2];
  uint64_t v20[2];
  char *v21[2];
  uint64_t v22[2];
  char **v23;
  char **v24;

  v2 = (unint64_t)a2;
  v3 = (char **)a1;
  v23 = (char **)a2;
  v24 = (char **)a1;
  v4 = *(char **)sub_216B30ACC((uint64_t)&v24, (uint64_t)a2);
  sub_216B1E678((int)v22, v4);
  sub_216B1E678((int)v21, *(char **)(v2 - 8));
  if ((sub_216C0F870(v22[0], v22[1], v21[0], (unint64_t)v21[1]) & 1) != 0)
  {
    do
    {
      ++v24;
      sub_216B1E678((int)v20, v4);
      sub_216B1E678((int)v19, *v24);
    }
    while ((sub_216C0F870(v20[0], v20[1], v19[0], (unint64_t)v19[1]) & 1) == 0);
  }
  else
  {
    do
    {
      if ((unint64_t)++v24 >= v2)
        break;
      sub_216B1E678((int)v18, v4);
      sub_216B1E678((int)v17, *v24);
    }
    while (!sub_216C0F870(v18[0], v18[1], v17[0], (unint64_t)v17[1]));
  }
  v6 = v24;
  if ((unint64_t)v24 < v2)
  {
    v7 = (uint64_t *)(v2 - 8);
    do
    {
      v23 = (char **)v7;
      sub_216B1E678((int)v16, v4);
      v8 = (char *)*v7--;
      sub_216B1E678((int)v15, v8);
    }
    while ((sub_216C0F870(v16[0], v16[1], v15[0], (unint64_t)v15[1]) & 1) != 0);
    v6 = v24;
    v2 = (unint64_t)(v7 + 1);
  }
  if ((unint64_t)v6 < v2)
  {
    do
    {
      sub_216C0DDE4((uint64_t **)&v24, (uint64_t **)&v23);
      do
      {
        ++v24;
        sub_216B1E678((int)v14, v4);
        sub_216B1E678((int)v13, *v24);
      }
      while (!sub_216C0F870(v14[0], v14[1], v13[0], (unint64_t)v13[1]));
      do
      {
        --v23;
        sub_216B1E678((int)v12, v4);
        sub_216B1E678((int)v11, *v23);
      }
      while ((sub_216C0F870(v12[0], v12[1], v11[0], (unint64_t)v11[1]) & 1) != 0);
      v6 = v24;
    }
    while (v24 < v23);
  }
  v10 = v6 - 1;
  if (v6 - 1 != v3)
  {
    *v3 = *(char **)sub_216B30ACC((uint64_t)&v10, v5);
    v3 = v10;
  }
  *v3 = v4;
  return v24;
}

uint64_t sub_216C0FE38(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v14;
  char *v15[2];
  uint64_t v16[2];
  char *v17[2];
  uint64_t v18[2];
  BOOL v19;
  char *v20[2];
  uint64_t v21[2];
  char *v22[2];
  uint64_t v23[2];
  char *v24[2];
  uint64_t v25[2];
  uint64_t *v26;
  uint64_t *v27;

  v3 = a1;
  v26 = a2;
  v27 = a1;
  v4 = *(char **)sub_216B30ACC((uint64_t)&v27, (uint64_t)a2);
  do
  {
    v5 = (char *)v27[1];
    ++v27;
    sub_216B1E678((int)v25, v5);
    sub_216B1E678((int)v24, v4);
  }
  while ((sub_216C0F870(v25[0], v25[1], v24[0], (unint64_t)v24[1]) & 1) != 0);
  v7 = a2 - 1;
  if (v27 - 1 == v3)
  {
    while (1)
    {
      v9 = (unint64_t)(v7 + 1);
      if (v27 >= v7 + 1)
        break;
      v26 = v7;
      v10 = (char *)*v7--;
      sub_216B1E678((int)v23, v10);
      sub_216B1E678((int)v22, v4);
      if ((sub_216C0F870(v23[0], v23[1], v22[0], (unint64_t)v22[1]) & 1) != 0)
        goto LABEL_8;
    }
  }
  else
  {
    do
    {
      v26 = v7;
      v8 = (char *)*v7--;
      sub_216B1E678((int)v21, v8);
      sub_216B1E678((int)v20, v4);
    }
    while ((sub_216C0F870(v21[0], v21[1], v20[0], (unint64_t)v20[1]) & 1) == 0);
LABEL_8:
    v9 = (unint64_t)(v7 + 1);
  }
  v11 = v27;
  v19 = (unint64_t)v27 >= v9;
  if ((unint64_t)v27 < v9)
  {
    do
    {
      sub_216C0DDE4(&v27, &v26);
      do
      {
        v12 = (char *)v27[1];
        ++v27;
        sub_216B1E678((int)v18, v12);
        sub_216B1E678((int)v17, v4);
      }
      while ((sub_216C0F870(v18[0], v18[1], v17[0], (unint64_t)v17[1]) & 1) != 0);
      do
      {
        sub_216B1E678((int)v16, (char *)*--v26);
        sub_216B1E678((int)v15, v4);
      }
      while (!sub_216C0F870(v16[0], v16[1], v15[0], (unint64_t)v15[1]));
      v11 = v27;
    }
    while (v27 < v26);
  }
  v14 = v11 - 1;
  if (v11 - 1 != v3)
  {
    *v3 = *(_QWORD *)sub_216B30ACC((uint64_t)&v14, v6);
    v3 = v14;
  }
  *v3 = (uint64_t)v4;
  return sub_216B310D8((uint64_t)&v14, (uint64_t)&v19);
}

BOOL sub_216C0FFF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  char *v6;
  uint64_t *v7;
  char **v8;
  char **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15[2];
  uint64_t v16[2];
  char **v17;
  char *v18[2];
  uint64_t v19[2];
  char **v20;
  char *v21[2];
  uint64_t v22[2];
  uint64_t *v23;
  uint64_t *v24;

  v24 = a1;
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      v6 = (char *)*(a2 - 1);
      v23 = v7;
      sub_216B1E678((int)v22, v6);
      sub_216B1E678((int)v21, (char *)*a1);
      if (sub_216C0F870(v22[0], v22[1], v21[0], (unint64_t)v21[1]))
        sub_216C0DDE4(&v24, &v23);
      return 1;
    case 3:
      sub_216C0F8C4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_216C0F8C8(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_216C0F8CC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = (char **)(a1 + 2);
      sub_216C0F8C4(a1, a1 + 1, a1 + 2);
      v9 = (char **)(a1 + 3);
      v20 = (char **)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    sub_216B1E678((int)v19, *v9);
    sub_216B1E678((int)v18, *v8);
    if (sub_216C0F870(v19[0], v19[1], v18[0], (unint64_t)v18[1]))
    {
      v13 = *(char **)sub_216B30ACC((uint64_t)&v20, v11);
      v17 = v8;
      v14 = v20;
      while (1)
      {
        *v14 = *(_QWORD *)sub_216B30ACC((uint64_t)&v17, v12);
        v14 = v17;
        if (v17 == (char **)a1)
          break;
        sub_216B1E678((int)v16, v13);
        sub_216B1E678((int)v15, *--v17);
        if ((sub_216C0F870(v16[0], v16[1], v15[0], (unint64_t)v15[1]) & 1) == 0)
          goto LABEL_12;
      }
      v14 = a1;
LABEL_12:
      *v14 = v13;
      if (++v10 == 8)
        return v20 + 1 == (char **)a2;
    }
    v8 = v20;
    v9 = v20 + 1;
    v20 = v9;
    if (v9 == (char **)a2)
      return 1;
  }
}

uint64_t *sub_216C101D4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  char *v9[2];
  uint64_t v10[2];
  char *v11[2];
  uint64_t v12[2];
  char *v13[2];
  uint64_t v14[2];
  uint64_t *v15;
  char **v16;
  char **v17;
  uint64_t *v18;

  v17 = (char **)a2;
  v18 = a1;
  v15 = a4;
  v16 = (char **)a3;
  sub_216C0FB10(a1, a2, a3);
  sub_216B1E678((int)v14, (char *)*a4);
  sub_216B1E678((int)v13, (char *)*a3);
  result = (uint64_t *)sub_216C0F870(v14[0], v14[1], v13[0], (unint64_t)v13[1]);
  if ((_DWORD)result)
  {
    sub_216C0DDE4((uint64_t **)&v16, &v15);
    sub_216B1E678((int)v12, *v16);
    sub_216B1E678((int)v11, (char *)*a2);
    result = (uint64_t *)sub_216C0F870(v12[0], v12[1], v11[0], (unint64_t)v11[1]);
    if ((_DWORD)result)
    {
      sub_216C0DDE4((uint64_t **)&v17, (uint64_t **)&v16);
      sub_216B1E678((int)v10, *v17);
      sub_216B1E678((int)v9, (char *)*a1);
      result = (uint64_t *)sub_216C0F870(v10[0], v10[1], v9[0], (unint64_t)v9[1]);
      if ((_DWORD)result)
        return sub_216C0DDE4(&v18, (uint64_t **)&v17);
    }
  }
  return result;
}

uint64_t *sub_216C102BC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  char *v11[2];
  uint64_t v12[2];
  char *v13[2];
  uint64_t v14[2];
  char *v15[2];
  uint64_t v16[2];
  char *v17[2];
  uint64_t v18[2];
  uint64_t *v19;
  char **v20;
  char **v21;
  char **v22;
  uint64_t *v23;

  v22 = (char **)a2;
  v23 = a1;
  v20 = (char **)a4;
  v21 = (char **)a3;
  v19 = a5;
  sub_216C101D4(a1, a2, a3, a4);
  sub_216B1E678((int)v18, (char *)*a5);
  sub_216B1E678((int)v17, (char *)*a4);
  result = (uint64_t *)sub_216C0F870(v18[0], v18[1], v17[0], (unint64_t)v17[1]);
  if ((_DWORD)result)
  {
    sub_216C0DDE4((uint64_t **)&v20, &v19);
    sub_216B1E678((int)v16, *v20);
    sub_216B1E678((int)v15, (char *)*a3);
    result = (uint64_t *)sub_216C0F870(v16[0], v16[1], v15[0], (unint64_t)v15[1]);
    if ((_DWORD)result)
    {
      sub_216C0DDE4((uint64_t **)&v21, (uint64_t **)&v20);
      sub_216B1E678((int)v14, *v21);
      sub_216B1E678((int)v13, (char *)*a2);
      result = (uint64_t *)sub_216C0F870(v14[0], v14[1], v13[0], (unint64_t)v13[1]);
      if ((_DWORD)result)
      {
        sub_216C0DDE4((uint64_t **)&v22, (uint64_t **)&v21);
        sub_216B1E678((int)v12, *v22);
        sub_216B1E678((int)v11, (char *)*a1);
        result = (uint64_t *)sub_216C0F870(v12[0], v12[1], v11[0], (unint64_t)v11[1]);
        if ((_DWORD)result)
          return sub_216C0DDE4(&v23, (uint64_t **)&v22);
      }
    }
  }
  return result;
}

uint64_t *sub_216C103EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char **v4;
  uint64_t v6;
  char **v7;
  char *v9[2];
  uint64_t v10[2];
  uint64_t *v11;
  char **v12;

  v4 = (char **)a1;
  v12 = (char **)a1;
  if (a1 == a2)
    return (uint64_t *)sub_216B30AF0((uint64_t)a1, a3);
  sub_216C104D8((uint64_t)a1, (uint64_t)a2);
  v11 = a2;
  if (a2 != (uint64_t *)a3)
  {
    v6 = ((char *)a2 - (char *)v4) >> 3;
    v7 = (char **)a2;
    do
    {
      sub_216B1E678((int)v10, *v7);
      sub_216B1E678((int)v9, *v12);
      if (sub_216C0F870(v10[0], v10[1], v9[0], (unint64_t)v9[1]))
      {
        sub_216C0DDE4(&v11, (uint64_t **)&v12);
        sub_216C10538((uint64_t)v12, v6, v12);
      }
      v7 = (char **)(v11 + 1);
      v11 = (uint64_t *)v7;
    }
    while (v7 != (char **)a3);
    v4 = v12;
  }
  sub_216C106D4(v4, (uint64_t)a2);
  return v11;
}

uint64_t sub_216C104D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char **v7;

  v2 = a2 - result;
  if (a2 - result >= 9)
  {
    v3 = result;
    v4 = v2 >> 3;
    v5 = (unint64_t)((v2 >> 3) - 2) >> 1;
    v6 = v5 + 1;
    v7 = (char **)(result + 8 * v5);
    do
    {
      result = sub_216C10538(v3, v4, v7--);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_216C10538(uint64_t result, uint64_t a2, char **a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char **v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  int v19;
  char *v20[2];
  uint64_t v21[2];
  char *v22[2];
  uint64_t v23[2];
  char *v24[2];
  uint64_t v25[2];
  char *v26[2];
  uint64_t v27[2];
  char **v28;
  char **v29;

  v29 = a3;
  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v5 = result;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= ((uint64_t)a3 - result) >> 3)
    {
      v8 = ((uint64_t)a3 - result) >> 2;
      v9 = v8 + 1;
      v10 = (char **)(result + 8 * (v8 + 1));
      v28 = v10;
      v11 = v8 + 2;
      if (v8 + 2 < a2)
      {
        sub_216B1E678((int)v27, *v10);
        sub_216B1E678((int)v26, v10[1]);
        if (sub_216C0F870(v27[0], v27[1], v26[0], (unint64_t)v26[1]))
        {
          v28 = ++v10;
          v9 = v11;
        }
      }
      sub_216B1E678((int)v25, *v10);
      sub_216B1E678((int)v24, *a3);
      result = sub_216C0F870(v25[0], v25[1], v24[0], (unint64_t)v24[1]);
      if ((result & 1) == 0)
      {
        v14 = *(char **)sub_216B30ACC((uint64_t)&v29, v12);
        while (1)
        {
          result = sub_216B30ACC((uint64_t)&v28, v13);
          *v29 = *(char **)result;
          v15 = v28;
          v29 = v28;
          if (v6 < v9)
            break;
          v16 = 2 * v9;
          v9 = (2 * v9) | 1;
          v17 = (char **)(v5 + 8 * v9);
          v28 = v17;
          v18 = v16 + 2;
          if (v16 + 2 < a2)
          {
            sub_216B1E678((int)v23, *v17);
            sub_216B1E678((int)v22, v28[1]);
            v19 = sub_216C0F870(v23[0], v23[1], v22[0], (unint64_t)v22[1]);
            v17 = v28;
            if (v19)
            {
              v17 = ++v28;
              v9 = v18;
            }
          }
          sub_216B1E678((int)v21, *v17);
          sub_216B1E678((int)v20, v14);
          result = sub_216C0F870(v21[0], v21[1], v20[0], (unint64_t)v20[1]);
          if ((_DWORD)result)
          {
            v15 = v29;
            break;
          }
        }
        *v15 = v14;
      }
    }
  }
  return result;
}

char **sub_216C106D4(char **result, uint64_t a2)
{
  uint64_t v2;
  char **v3;
  unint64_t v4;

  if (a2 - (uint64_t)result >= 9)
  {
    v2 = a2;
    v3 = result;
    v4 = (unint64_t)(a2 - (_QWORD)result) >> 3;
    do
    {
      result = sub_216C10730(v3, v2, v4);
      v2 -= 8;
    }
    while (v4-- > 2);
  }
  return result;
}

char **sub_216C10730(char **a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char **result;
  uint64_t v7;
  char **v8;
  char **v9;
  char **v10;

  v10 = a1;
  v5 = *(char **)sub_216B30ACC((uint64_t)&v10, a2);
  result = sub_216C107C4(v10, a3);
  v8 = result;
  v9 = (char **)(a2 - 8);
  if (result == (char **)(a2 - 8))
  {
    *result = v5;
  }
  else
  {
    *result = *(char **)sub_216B30ACC((uint64_t)&v9, v7);
    *v9 = v5;
    return (char **)sub_216C1088C((uint64_t)v10, (uint64_t)(v8 + 1), v8 + 1 - v10);
  }
  return result;
}

char **sub_216C107C4(char **a1, uint64_t a2)
{
  uint64_t v4;
  int64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v10[2];
  uint64_t v11[2];
  char **v12;

  v4 = 0;
  v5 = (unint64_t)(a2 - 2) >> 1;
  do
  {
    v6 = &a1[v4 + 1];
    v12 = v6;
    v7 = 2 * v4;
    v4 = (2 * v4) | 1;
    v8 = v7 + 2;
    if (v7 + 2 < a2)
    {
      sub_216B1E678((int)v11, *v6);
      sub_216B1E678((int)v10, v12[1]);
      if (sub_216C0F870(v11[0], v11[1], v10[0], (unint64_t)v10[1]))
      {
        ++v12;
        v4 = v8;
      }
    }
    *a1 = *(char **)sub_216B30ACC((uint64_t)&v12, a2);
    a1 = v12;
  }
  while (v4 <= v5);
  return v12;
}

uint64_t sub_216C1088C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char **v13;
  char *v14[2];
  uint64_t v15[2];
  char *v16[2];
  uint64_t v17[2];
  char **v18;
  _QWORD v19[7];

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v19[5] = v3;
    v19[6] = v4;
    v7 = result;
    v8 = v5 >> 1;
    v18 = (char **)(result + 8 * (v5 >> 1));
    sub_216B1E678((int)v17, *v18);
    v9 = *(char **)(a2 - 8);
    v19[0] = a2 - 8;
    sub_216B1E678((int)v16, v9);
    result = sub_216C0F870(v17[0], v17[1], v16[0], (unint64_t)v16[1]);
    if ((_DWORD)result)
    {
      v12 = *(char **)sub_216B30ACC((uint64_t)v19, v10);
      while (1)
      {
        result = sub_216B30ACC((uint64_t)&v18, v11);
        *(_QWORD *)v19[0] = *(_QWORD *)result;
        v13 = v18;
        v19[0] = v18;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v18 = (char **)(v7 + 8 * v8);
        sub_216B1E678((int)v15, *v18);
        sub_216B1E678((int)v14, v12);
        result = sub_216C0F870(v15[0], v15[1], v14[0], (unint64_t)v14[1]);
        if ((result & 1) == 0)
        {
          v13 = (char **)v19[0];
          break;
        }
      }
      *v13 = v12;
    }
  }
  return result;
}

_QWORD *sub_216C10968(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
    sub_216B50D64();
  return a1;
}

void sub_216C10998(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_216C0CC08(a1);
  j__free(v1);
}

void sub_216C109AC()
{
  const std::error_code *v0;
  std::string *v1;

  sub_216B2C00C(6);
  v0 = (const std::error_code *)usleep(0x3E8u);
  __break(1u);
  std::error_code::message(v1, v0);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x24BEDA988](retstr, this);
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return MEMORY[0x24BEDA9D0](this, __pos1, __n1, __s, __n2);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

void std::string::__init(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  MEMORY[0x24BEDAC28](this, __s, __sz);
}

void std::string::__init(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC30](this, __n, __c);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x24BEDAC78](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDACA0](this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDACD0](this, __str);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACD8](this, __str, __pos, __n, __a);
}

void std::string::~string(std::string *this)
{
  MEMORY[0x24BEDACF0](this);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x24BEDB1B8](__format);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  double result;

  MEMORY[0x24BEDB320](__str, __idx);
  return result;
}

float std::stof(const std::string *__str, size_t *__idx)
{
  float result;

  MEMORY[0x24BEDB328](__str, __idx);
  return result;
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
  MEMORY[0x24BDACF10](termFunc, objAddr);
}

int access(const char *a1, int a2)
{
  return MEMORY[0x24BDAD038](a1, *(_QWORD *)&a2);
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float acoshf(float a1)
{
  float result;

  MEMORY[0x24BDAD120](a1);
  return result;
}

char *__cdecl asctime(const tm *a1)
{
  return (char *)MEMORY[0x24BDAD178](a1);
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

float asinhf(float a1)
{
  float result;

  MEMORY[0x24BDAD1A0](a1);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x24BDAD230](a1);
  return result;
}

float atanhf(float a1)
{
  float result;

  MEMORY[0x24BDAD240](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x24BDAD9F0](a1);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

float coshf(float a1)
{
  float result;

  MEMORY[0x24BDADBF8](a1);
  return result;
}

int del_curterm(TERMINAL *a1)
{
  return MEMORY[0x24BEDCA90](a1);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x24BDAE280](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x24BDAE548](*(_QWORD *)&a1, a2);
}

int getpagesize(void)
{
  return MEMORY[0x24BDAE6B8]();
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int getrusage(int a1, rusage *a2)
{
  return MEMORY[0x24BDAE738](*(_QWORD *)&a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

int isalnum(int _c)
{
  return MEMORY[0x24BDAE8D0](*(_QWORD *)&_c);
}

int isalpha(int _c)
{
  return MEMORY[0x24BDAE8D8](*(_QWORD *)&_c);
}

int isatty(int a1)
{
  return MEMORY[0x24BDAE8E0](*(_QWORD *)&a1);
}

int islower(int _c)
{
  return MEMORY[0x24BDAE8F0](*(_QWORD *)&_c);
}

int isupper(int _c)
{
  return MEMORY[0x24BDAE918](*(_QWORD *)&_c);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x24BDAEB20](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x24BDAF258](a1);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x24BDAF698](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

int pthread_kill(pthread_t a1, int a2)
{
  return MEMORY[0x24BDAF8A0](a1, *(_QWORD *)&a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x24BDAF8E8](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x24BDAF8F0](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x24BDAF908](a1, *(_QWORD *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x24BDAFA88](a1);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x24BDAFAC0](a1, a2);
}

TERMINAL *__cdecl set_curterm(TERMINAL *a1)
{
  return (TERMINAL *)MEMORY[0x24BEDCAC0](a1);
}

int setupterm(char *a1, int a2, int *a3)
{
  return MEMORY[0x24BEDCAD0](a1, *(_QWORD *)&a2, a3);
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

float sinhf(float a1)
{
  float result;

  MEMORY[0x24BDAFE30](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x24BDAFFE0](a1, a2);
  return result;
}

float tanf(float a1)
{
  float result;

  MEMORY[0x24BDB0140](a1);
  return result;
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x24BDB0150](a1);
  return result;
}

int tigetnum(char *a1)
{
  return MEMORY[0x24BEDCB08](a1);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int tolower(int _c)
{
  return MEMORY[0x24BDB0270](*(_QWORD *)&_c);
}

int toupper(int _c)
{
  return MEMORY[0x24BDB0278](*(_QWORD *)&_c);
}

int uname(utsname *a1)
{
  return MEMORY[0x24BDB02A8](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

