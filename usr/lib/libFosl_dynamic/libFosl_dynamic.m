uint64_t fosl_filter_kernelpool_getParamType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  v3 = *(unsigned __int16 *)(sub_216BF7468((_QWORD *)(a1 + 48), a2) + 16);
  v4 = (v3 >> 7) & 3;
  if (v4)
    v5 = sub_216BF7478(v4);
  else
    v5 = sub_216BF7428(v3 & 0x7F);
  v6 = v5;
  v7 = sub_216B8E76C(*(_QWORD *)(a1 + 8));
  if (v6 == 10)
    v8 = 9;
  else
    v8 = v6;
  if (v8 == 26)
    v8 = 25;
  if (v7)
    return v8;
  else
    return v6;
}

uint64_t fosl_filter_kernelpool_getPrintedKernel(uint64_t a1)
{
  return sub_216B1E600(a1 + 32);
}

uint64_t fosl_filter_kernelpool_getParamName(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = sub_216BF7468((_QWORD *)(a1 + 48), a2);
  return sub_216B1E600(v2);
}

uint64_t fosl_filter_kernelpool_getNumKernels(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_216B4ADBC(a1);
  return sub_216BF737C(v1);
}

uint64_t fosl_filter_kernelpool_getNumKernelParameters(uint64_t a1)
{
  return sub_216BA82B0(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t fosl_filter_kernelpool_getNumKernelAttributes(uint64_t a1)
{
  return sub_216B2E220((_QWORD *)(a1 + 120));
}

uint64_t fosl_filter_kernelpool_getNumDiagnostics(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216B4ADBC(a1);
  return sub_216BF9ED0(v1, v2);
}

uint64_t fosl_filter_kernelpool_getKernelReturnType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v5;

  v5 = sub_216B939E0(*(_QWORD *)(a1 + 8));
  v1 = sub_216B1E600((uint64_t)&v5);
  v2 = sub_216BA7ED0(v1);
  v3 = sub_216BA7EA4(v2);
  return sub_216BF7428(v3);
}

uint64_t fosl_filter_kernelpool_getKernelName(uint64_t a1)
{
  return sub_216B1E600(a1 + 16);
}

uint64_t fosl_filter_kernelpool_getKernelKind(_BYTE *a1)
{
  return sub_216BF7420(*a1 & 3);
}

uint64_t fosl_filter_kernelpool_getKernelByIdx(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = sub_216B4ADBC(a1);
  return sub_216BF73E0(v3, a2);
}

void fosl_filter_kernelpool_destroyPool(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)sub_216BF7378();
    j__free(v1);
  }
}

uint64_t fosl_filter_kernelpool_createPool()
{
  uint64_t v0;

  v0 = sub_216B1D1D4(408);
  return sub_216BF7360(v0);
}

uint64_t fosl_filter_kernelpool_addString(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = sub_216B4ADBC(a1);
  sub_216B1E678((int)v5, a2);
  return sub_216BF93B0(v3, v5[0], v5[1]);
}

uint64_t fosl_filter_kernelpool_addLibrary(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v5[2];

  v3 = sub_216B4ADBC(a1);
  sub_216B1E678((int)v5, a2);
  return sub_216BF9D98(v3, v5[0], v5[1]);
}

void *sub_216B1D1D8(size_t a1)
{
  void *result;

  result = malloc_type_malloc(a1, 0x7CDD1027uLL);
  if (!result)
    sub_216C109AC();
  return result;
}

uint64_t sub_216B1D200(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  *a1 = a2;
  result = sub_216B1D238((uint64_t)a1);
  if (result >= 2)
  {
    result = sub_216B1D1D4((8 * result));
    a1[1] = result;
  }
  return result;
}

uint64_t sub_216B1D238(uint64_t a1)
{
  return sub_216B1D99C(*(_DWORD *)(*(_QWORD *)a1 + 4) + 1);
}

void sub_216B1D248(uint64_t a1)
{
  void *v2;

  if (sub_216B1D280(a1))
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
      j__free(v2);
  }
}

BOOL sub_216B1D280(uint64_t a1)
{
  return sub_216B1D238(a1) > 1;
}

_QWORD *sub_216B1D29C(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *result;

  v4 = *(_BYTE *)(a1 + 18) & 0xF7 | (8 * ((*(unsigned __int8 *)(a2 + 18) >> 3) & 1));
  *(_BYTE *)(a1 + 18) = v4;
  *(_BYTE *)(a1 + 18) = v4 & 0xF8 | *(_BYTE *)(a2 + 18) & 7;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  result = (_QWORD *)sub_216B1D310(a1);
  if ((result & 1) != 0 || (*(_BYTE *)(a1 + 18) & 7) == 1)
    return sub_216B1D340(a1, a2);
  return result;
}

BOOL sub_216B1D310(uint64_t a1)
{
  _BOOL8 result;

  result = sub_216B1E3BC(a1);
  if (result)
    return !sub_216B1E3A8(a1);
  return result;
}

_QWORD *sub_216B1D340(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  unsigned int v6;

  v4 = (_QWORD *)sub_216B1D390(a1);
  v5 = (uint64_t *)sub_216B1D3C4(a2);
  v6 = sub_216B1D238(a1);
  return sub_216B24A04(v4, v5, v6);
}

uint64_t sub_216B1D390(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;

  v2 = sub_216B1D238(a1);
  result = a1 + 8;
  if (v2 >= 2)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_216B1D3C8(_BYTE *a1, int a2, int a3, unsigned int *a4)
{
  char v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t result;
  int v18;
  unsigned int v19;

  if (a3)
    v7 = 9;
  else
    v7 = 1;
  a1[18] = v7 | a1[18] & 0xF0;
  v8 = (_QWORD *)sub_216B1D390((uint64_t)a1);
  v9 = sub_216B1D238((uint64_t)a1);
  v19 = v9;
  if (a4)
  {
    if (sub_216B1D53C(a4) < v9)
      sub_216B249E4(v8, 0, v9);
    v10 = (uint64_t *)sub_216B1D544(a4);
    v18 = sub_216B1D53C(a4);
    v11 = (unsigned int *)sub_216B1D574(&v18, &v19);
    sub_216B24A04(v8, v10, *v11);
    v12 = *(_DWORD *)(*(_QWORD *)a1 + 4);
    v13 = (v12 - 1) >> 6;
    v8[v13] &= ~(-1 << (v12 - 1));
    v14 = v19;
    v15 = v13 + 1;
    if (v15 != v19)
    {
      do
        v8[v15++] = 0;
      while (v14 != v15);
    }
  }
  else
  {
    sub_216B249E4(v8, 0, v9);
    v12 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  }
  v16 = v12 - 2;
  if (a2)
  {
    sub_216B24A98((uint64_t)v8, v16);
    result = sub_216B24A20(v8, v19);
    if (!(_DWORD)result)
      goto LABEL_15;
    v16 = v12 - 3;
  }
  result = sub_216B24A7C((uint64_t)v8, v16);
LABEL_15:
  if (*(_UNKNOWN **)a1 == &unk_216C10FE8)
    return sub_216B24A7C((uint64_t)v8, v12 - 1);
  return result;
}

unint64_t sub_216B1D53C(unsigned int *a1)
{
  return sub_216B1FFD8(*a1);
}

_DWORD *sub_216B1D544(_DWORD *a1)
{
  BOOL v2;
  _DWORD *result;

  v2 = sub_216B1FFE8(a1);
  result = a1 + 2;
  if (!v2)
    return *(_DWORD **)result;
  return result;
}

uint64_t sub_216B1D580(uint64_t a1, uint64_t a2)
{
  char v4;

  sub_216B1D248(a1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_BYTE *)(a1 + 18) & 0xF8 | *(_BYTE *)(a2 + 18) & 7;
  *(_BYTE *)(a1 + 18) = v4;
  *(_BYTE *)(a1 + 18) = v4 & 0xF7 | *(_BYTE *)(a2 + 18) & 8;
  *(_QWORD *)a2 = &unk_216C10FF0;
  return a1;
}

BOOL sub_216B1D5F0(unsigned __int16 *a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  result = sub_216B1D310((uint64_t)a1);
  if (result)
  {
    v3 = *(_QWORD *)a1;
    if (a1[8] == *(unsigned __int16 *)(*(_QWORD *)a1 + 2))
    {
      v4 = sub_216B1D3C4(a1);
      return sub_216B24A68(v4, *(_DWORD *)(v3 + 4) - 1) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216B1D64C(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = sub_216B1D3C4(a1);
  v3 = sub_216B1D238(a1);
  return sub_216B24B20(v2, v3);
}

void sub_216B1D680(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;

  v2 = (_QWORD *)sub_216B1D390(a1);
  v3 = sub_216B1D238(a1);
  sub_216B249E4(v2, 0, v3);
}

uint64_t sub_216B1D6B8(unsigned __int16 **a1, int a2, int a3)
{
  uint64_t result;
  int v7;
  unsigned int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;

  result = sub_216B1D310((uint64_t)a1);
  if ((_DWORD)result)
  {
    v7 = sub_216B1D64C((uint64_t)a1);
    v8 = v7 + 1;
    if (v7 == -1)
    {
      if (a3)
      {
        sub_216B1E110((uint64_t)a1, a2);
        if ((v9 & 1) == 0)
        {
          if (!*((_DWORD *)*a1 + 1))
            return 16;
LABEL_35:
          *((_BYTE *)a1 + 18) = *((_BYTE *)a1 + 18) & 0xF8 | 3;
          return 24;
        }
        goto LABEL_5;
      }
      goto LABEL_29;
    }
    v12 = *((__int16 *)a1 + 8);
    v13 = v8 - *((_DWORD *)*a1 + 1) + v12;
    if (v13 > (__int16)**a1)
      return sub_216B1E064((uint64_t)a1, a2);
    v14 = (__int16)(*a1)[1];
    v15 = v14 - v12;
    if (v13 >= v14)
      v16 = v8 - *((_DWORD *)*a1 + 1);
    else
      v16 = v15;
    if ((v16 & 0x80000000) != 0)
    {
      sub_216B1DF94((uint64_t)a1, -v16);
    }
    else
    {
      if (v16)
      {
        v17 = sub_216B1DD44((uint64_t)a1, v16);
        a3 = sub_216B1DF70(v17, a3);
        if (v8 >= v16)
          v8 -= v16;
        else
          v8 = 0;
      }
      if (a3)
      {
        sub_216B1E110((uint64_t)a1, a2);
        if ((v18 & 1) == 0)
        {
          v11 = *((_DWORD *)*a1 + 1);
          goto LABEL_32;
        }
        if (v8)
        {
LABEL_6:
          sub_216B1D9A8((uint64_t)a1);
          v10 = sub_216B1D64C((uint64_t)a1);
          v11 = *((_DWORD *)*a1 + 1);
          if (v10 == v11)
          {
            if (*((unsigned __int16 *)a1 + 8) == **a1)
            {
              *((_BYTE *)a1 + 18) &= 0xF8u;
              return 20;
            }
            sub_216B1DD44((uint64_t)a1, 1u);
            return 16;
          }
          v8 = v10 + 1;
LABEL_32:
          if (v8 == v11)
            return 16;
          if (v8)
            return 24;
          goto LABEL_35;
        }
LABEL_5:
        *((_WORD *)a1 + 8) = (*a1)[1];
        goto LABEL_6;
      }
      if (!v8)
      {
LABEL_29:
        result = 0;
        *((_BYTE *)a1 + 18) = *((_BYTE *)a1 + 18) & 0xF8 | 3;
        return result;
      }
    }
    return 0;
  }
  return result;
}

_QWORD *sub_216B1D894(_QWORD *a1, uint64_t a2)
{
  sub_216B1D200(a1, a2);
  return a1;
}

_QWORD *sub_216B1D8B8(_QWORD *a1, uint64_t *a2)
{
  sub_216B1D200(a1, *a2);
  sub_216B1D29C((uint64_t)a1, (uint64_t)a2);
  return a1;
}

uint64_t sub_216B1D8F4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_216C10FF0;
  return sub_216B1D580(a1, a2);
}

uint64_t sub_216B1D908(uint64_t a1)
{
  sub_216B1D248(a1);
  return a1;
}

uint64_t sub_216B1D92C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;

  v2 = *(void **)a1;
  if (*(_UNKNOWN **)a1 == &unk_216C10FC8)
    return sub_216B1EB70(a1, a2);
  if (v2 == &unk_216C10FD0)
    return sub_216B1EACC(a1, a2);
  if (v2 == &unk_216C10FD8)
    return sub_216B1E920(a1, a2);
  if (v2 == &unk_216C10FE0)
    return sub_216B1E9CC(a1, a2);
  if (v2 == &unk_216C10FF8)
    return sub_216B1E794((uint64_t **)a1, a2);
  return sub_216B1E69C(a1, a2);
}

uint64_t sub_216B1D99C(int a1)
{
  return (a1 + 63) >> 6;
}

BOOL sub_216B1D9A8(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = sub_216B1D390(a1);
  v3 = sub_216B1D238(a1);
  return sub_216B24C80(v2, v3);
}

BOOL sub_216B1D9DC(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  unsigned int v6;

  v4 = (unint64_t *)sub_216B1D390(a1);
  v5 = (uint64_t *)sub_216B1D3C4(a2);
  v6 = sub_216B1D238(a1);
  return sub_216B24BF0(v4, v5, 0, v6);
}

uint64_t sub_216B1DA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  unint64_t *v7;
  unsigned int v8;

  v6 = (unint64_t *)sub_216B1D390(a1);
  v7 = (unint64_t *)sub_216B1D3C4(a2);
  v8 = sub_216B1D238(a1);
  return sub_216B24C38(v6, v7, a3, v8);
}

uint64_t sub_216B1DA88(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unsigned __int16 *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  signed int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  signed int v18;
  unint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  char v26;
  uint64_t v27;

  v8 = *(unsigned __int16 **)a1;
  v9 = *(_DWORD *)(a2 + 4);
  v10 = sub_216B1D99C(v9 + 1);
  v11 = sub_216B1D238(a1);
  v12 = 0;
  v13 = v9 - *((_DWORD *)v8 + 1);
  if ((_UNKNOWN *)a2 != &unk_216C10FE8 && v8 == (unsigned __int16 *)&unk_216C10FE8)
  {
    if ((*(_BYTE *)(a1 + 18) & 7) != 1)
    {
      v12 = 0;
      if ((v13 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_8;
    }
    v12 = *(_QWORD *)sub_216B1D390(a1) >> 62 != 3;
  }
  if ((v13 & 0x80000000) == 0)
  {
LABEL_6:
    v14 = 0;
    goto LABEL_19;
  }
LABEL_8:
  if (sub_216B1D310(a1))
  {
    v15 = sub_216B1D64C(a1) - *((_DWORD *)v8 + 1);
    v16 = *(__int16 *)(a1 + 16);
    v17 = *(__int16 *)(a2 + 2);
    if (v15 + 1 + v16 >= v17)
      v18 = v15 + 1;
    else
      v18 = v17 - v16;
    if (v18 <= v13)
      v18 = v13;
    if (v18 < 0)
    {
      *(_WORD *)(a1 + 16) = v16 + v18;
      v13 -= v18;
      if (v13 >= 0)
        goto LABEL_6;
    }
  }
  if (!sub_216B1D310(a1) && (*(_BYTE *)(a1 + 18) & 7) != 1)
    goto LABEL_6;
  v19 = (unint64_t *)sub_216B1D390(a1);
  v14 = sub_216B1DF28(v19, v11, -v13);
LABEL_19:
  if (v10 <= v11)
  {
    if (v10 == 1 && v11 != 1)
    {
      if (sub_216B1D310(a1) || (*(_BYTE *)(a1 + 18) & 7) == 1)
        v23 = *(_QWORD *)sub_216B1D390(a1);
      else
        v23 = 0;
      sub_216B1D248(a1);
      *(_QWORD *)(a1 + 8) = v23;
    }
  }
  else
  {
    v20 = (_QWORD *)sub_216B1D1D4(8 * v10);
    sub_216B249E4(v20, 0, v10);
    if (sub_216B1D310(a1) || (*(_BYTE *)(a1 + 18) & 7) == 1)
    {
      v21 = (uint64_t *)sub_216B1D390(a1);
      sub_216B24A04(v20, v21, v11);
    }
    sub_216B1D248(a1);
    *(_QWORD *)(a1 + 8) = v20;
  }
  *(_QWORD *)a1 = a2;
  if (v13 >= 1 && (sub_216B1D310(a1) || (*(_BYTE *)(a1 + 18) & 7) == 1))
  {
    v24 = (_QWORD *)sub_216B1D390(a1);
    sub_216B24CC0(v24, v10, v13);
  }
  if (sub_216B1D310(a1))
  {
    result = sub_216B1D6B8((unsigned __int16 **)a1, a3, v14);
    *a4 = (_DWORD)result != 0;
  }
  else if ((*(_BYTE *)(a1 + 18) & 7) == 1)
  {
    if (v14)
      v26 = 1;
    else
      v26 = v12;
    *a4 = v26;
    if (!v12 && *(_UNKNOWN **)a1 == &unk_216C10FE8)
    {
      v27 = sub_216B1D390(a1);
      sub_216B24A7C(v27, 0x3Fu);
    }
    return 0;
  }
  else
  {
    result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t sub_216B1DD44(uint64_t a1, unsigned int a2)
{
  unint64_t *v4;
  unsigned int v5;

  *(_WORD *)(a1 + 16) += a2;
  v4 = (unint64_t *)sub_216B1D390(a1);
  v5 = sub_216B1D238(a1);
  return sub_216B1DF28(v4, v5, a2);
}

uint64_t sub_216B1DD94(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  signed int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  _BYTE v15[24];

  v5 = *(__int16 *)(a2 + 16);
  v6 = *(__int16 *)(a1 + 16) - v5;
  if ((((((*(_BYTE *)(a2 + 18) ^ *(_BYTE *)(a1 + 18)) & 8) == 0) ^ a3) & 1) == 0)
  {
    v8 = *(unsigned __int16 *)(a1 + 16);
    v9 = *(unsigned __int16 *)(a2 + 16);
    sub_216B1D8F0(v15, a2);
    if (v8 == v9)
    {
      v10 = 0;
      v11 = 0;
      if (!sub_216B1DFE8(a1, (uint64_t)v15))
        goto LABEL_12;
    }
    else
    {
      if (v6 < 1)
      {
        v10 = sub_216B1DD44(a1, ~v6);
        sub_216B1DF94((uint64_t)v15, 1u);
LABEL_12:
        sub_216B1DA30((uint64_t)v15, a1, v10 != 0);
        sub_216B1D340(a1, (uint64_t)v15);
        *(_BYTE *)(a1 + 18) ^= 8u;
        goto LABEL_13;
      }
      v11 = sub_216B1DD44((uint64_t)v15, v6 - 1);
      sub_216B1DF94(a1, 1u);
    }
    sub_216B1DA30(a1, (uint64_t)v15, v11 != 0);
    v10 = v11;
LABEL_13:
    if (v10 == 3)
      v14 = 1;
    else
      v14 = v10;
    if (v10 == 1)
      v7 = 3;
    else
      v7 = v14;
    goto LABEL_19;
  }
  if (v6 < 1)
  {
    v12 = sub_216B1DD44(a1, v5 - *(__int16 *)(a1 + 16));
    sub_216B1D9DC(a1, a2);
    return v12;
  }
  sub_216B1D8F0(v15, a2);
  v7 = sub_216B1DD44((uint64_t)v15, v6);
  sub_216B1D9DC(a1, (uint64_t)v15);
LABEL_19:
  sub_216B1D57C(v15);
  return v7;
}

uint64_t sub_216B1DF28(unint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;

  v6 = sub_216B1E468(a1, a2, a3);
  sub_216B24B88(a1, a2, a3);
  return v6;
}

uint64_t sub_216B1DF70(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;

  if ((_DWORD)result == 2)
    v2 = 3;
  else
    v2 = result;
  if ((_DWORD)result)
    v3 = v2;
  else
    v3 = 1;
  if (a2)
    return v3;
  else
    return result;
}

void sub_216B1DF94(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_216B1D238(a1);
    v5 = (_QWORD *)sub_216B1D390(a1);
    sub_216B24CC0(v5, v4, a2);
    *(_WORD *)(a1 + 16) -= a2;
  }
}

uint64_t sub_216B1DFE8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *(__int16 *)(a1 + 16);
  v4 = *(__int16 *)(a2 + 16);
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v7 = sub_216B1D3C4(a1);
    v8 = sub_216B1D3C4(a2);
    v9 = sub_216B1D238(a1);
    v5 = sub_216B24D3C(v7, v8, v9);
  }
  if (v5 <= 0)
    return v5 >= 0;
  else
    return 2;
}

uint64_t sub_216B1E064(uint64_t a1, int a2)
{
  char v3;
  _WORD *v5;
  char *v6;
  unsigned int v7;

  if ((a2 & 0xFFFFFFFB) == 0)
  {
    v3 = *(_BYTE *)(a1 + 18);
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    v3 = *(_BYTE *)(a1 + 18);
    if ((v3 & 8) == 0)
      goto LABEL_8;
  }
  else
  {
    if (a2 == 2)
    {
      v3 = *(_BYTE *)(a1 + 18);
      if ((v3 & 8) == 0)
        goto LABEL_10;
LABEL_8:
      *(_BYTE *)(a1 + 18) = v3 & 0xF8;
      return 20;
    }
    v3 = *(_BYTE *)(a1 + 18);
  }
LABEL_10:
  *(_BYTE *)(a1 + 18) = v3 & 0xF8 | 2;
  v5 = *(_WORD **)a1;
  *(_WORD *)(a1 + 16) = **(_WORD **)a1;
  v6 = (char *)sub_216B1D390(a1);
  v7 = sub_216B1D238(a1);
  sub_216B24D74(v6, v7, *((_DWORD *)v5 + 1));
  return 16;
}

void sub_216B1E110(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

BOOL sub_216B1E140@<W0>(int a1@<W2>, unsigned int a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v5;

  if (a1 == 3)
    return 1;
  if (a1 != 2 || (*(_BYTE *)(a3 + 18) & 7) == 3)
    return 0;
  v5 = sub_216B1D3C4(a3);
  return sub_216B24A68(v5, a2) != 0;
}

void sub_216B1E1C0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_216B1E20C@<X0>(char a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;

  if (v4 != (v1 & 8) >> 3)
    v5 = 8;
  else
    v5 = 0;
  *(_BYTE *)(v2 + 18) = a1 & 0xF0 | v5 | 1;
  sub_216B1D340(v2, v3);
  return 0;
}

void sub_216B1E2C4(unsigned __int8 a1@<W8>)
{
  unsigned __int8 v1;
  _BYTE *v2;
  int v3;

  if ((((((v1 ^ a1) & 8) == 0) ^ v3) & 1) == 0)
  {
    sub_216B1D3C8(v2, 0, 0, 0);
    JUMPOUT(0x216B1E2B4);
  }
  JUMPOUT(0x216B1E23CLL);
}

void sub_216B1E2F4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  int v9;
  char v10;
  char v11;

  sub_216B1E1C0(a1, a2);
  if (v8 == 2)
  {
    v9 = sub_216B1DD94(a1, a2, a4);
    sub_216B1D6B8((unsigned __int16 **)a1, a3, v9);
  }
  v10 = *(_BYTE *)(a1 + 18);
  if ((v10 & 7) == 3)
  {
    v11 = *(_BYTE *)(a2 + 18);
    if ((v11 & 7) != 3 || a4 != ((v11 ^ v10) & 8) >> 3)
      *(_BYTE *)(a1 + 18) = v10 & 0xF7 | (8 * (a3 == 2));
  }
}

void sub_216B1E398(uint64_t a1, uint64_t a2, int a3)
{
  sub_216B1E2F4(a1, a2, a3, 0);
}

void sub_216B1E3A0(uint64_t a1, uint64_t a2, int a3)
{
  sub_216B1E2F4(a1, a2, a3, 1);
}

BOOL sub_216B1E3A8(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 18) & 7) == 3;
}

BOOL sub_216B1E3BC(uint64_t a1)
{
  return !sub_216B1E688(a1) && !sub_216B20044(a1);
}

uint64_t sub_216B1E3F4(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = a1 | (a1 >> 1) | ((a1 | (a1 >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  return (v2 | (v2 >> 16) | ((v2 | (v2 >> 16)) >> 32)) + 1;
}

unsigned int *sub_216B1E418(unsigned int *a1, uint64_t a2)
{
  int v4[4];

  sub_216B20130(a1, a2, (uint64_t)v4);
  sub_216B1E580((uint64_t)a1, v4);
  sub_216B1D998(v4);
  return a1;
}

uint64_t sub_216B1E45C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 18) >> 3) & 1;
}

uint64_t sub_216B1E468(unint64_t *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;

  v6 = sub_216B24AB4(a1, a2);
  if (v6 >= a3)
    return 0;
  if (v6 + 1 == a3)
    return 2;
  if (a3 <= a2 << 6 && sub_216B24A68((uint64_t)a1, a3 - 1))
    return 3;
  return 1;
}

uint64_t sub_216B1E4E0(unsigned int *a1)
{
  return *a1;
}

BOOL sub_216B1E4E8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 16) == 0;
}

uint64_t sub_216B1E4F8(uint64_t a1, int *a2)
{
  sub_216B1E580(a1, a2);
  return a1;
}

BOOL sub_216B1E520(_DWORD *a1)
{
  return sub_216B201F8(a1, *a1 - 1);
}

uint64_t sub_216B1E52C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5[4];

  sub_216B1E414(v5, *a1, 0, 0);
  sub_216B21BCC(v5, (uint64_t)a1, a2);
  return sub_216B1D998(v5);
}

uint64_t sub_216B1E580(uint64_t a1, int *a2)
{
  void *v4;
  int v5;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
LABEL_5:
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    v5 = *a2;
    *a2 = 0;
    *(_DWORD *)a1 = v5;
    return a1;
  }
  if ((int *)a1 != a2)
  {
    v4 = *(void **)(a1 + 8);
    if (v4)
      j__free(v4);
    goto LABEL_5;
  }
  return a1;
}

uint64_t sub_216B1E5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B1E684(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B1E600(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_216B1E608(_QWORD *a1)
{
  return *a1 + a1[1];
}

void sub_216B1E614(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = sub_216B1D578(a3, a1, 0);
  sub_216B1FF70(v4, a2);
}

BOOL sub_216B1E644(uint64_t a1, const void *a2, size_t a3)
{
  return *(_QWORD *)(a1 + 8) == a3 && sub_216B20284(*(const void **)a1, a2, a3) == 0;
}

uint64_t sub_216B1E67C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL sub_216B1E688(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 18) & 7) == 1;
}

uint64_t sub_216B1E69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  if (sub_216B1D310(a1))
  {
    v4 = *(__int16 *)(a1 + 16) + 0x3FFFLL;
    v5 = *(_QWORD *)sub_216B1D3C4(a1);
    v6 = v5 >> 63;
    if (v4 != 1)
      LOWORD(v6) = v4;
    v7 = v6 & 0x7FFF;
    v8 = *(unsigned __int8 *)(a1 + 18);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 18);
    if ((v8 & 7) == 3)
    {
      v7 = 0;
      v5 = 0;
    }
    else
    {
      if ((v8 & 7) != 0)
        v5 = *(_QWORD *)sub_216B1D3C4(a1);
      else
        v5 = 0x8000000000000000;
      v7 = 0x7FFFLL;
    }
  }
  v11[0] = v5;
  v11[1] = v7 | ((unint64_t)((v8 >> 3) & 1) << 15);
  sub_216B1E790(v10, (uint64_t)v11);
  return sub_216B21330(a2, 80, v10[0], v10[1]);
}

uint64_t sub_216B1E794@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[2];
  _DWORD v5[4];
  _DWORD v6[6];
  _BYTE v7[24];
  _BYTE v8[24];
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v9 = **a1;
  WORD1(v9) = -1022;
  sub_216B1D8F0(v8, a1);
  sub_216B1DA88((uint64_t)v8, (uint64_t)&v9, 0, &v10);
  sub_216B1D8F0(v7, v8);
  sub_216B1DA88((uint64_t)v7, (uint64_t)&unk_216C10FD8, 0, &v10);
  sub_216B1E920((uint64_t)v7, (uint64_t)v6);
  v11 = *(_QWORD *)sub_216B1D544(v6);
  sub_216B1D998(v6);
  if (sub_216B1D310((uint64_t)v7) && v10)
  {
    sub_216B1DA88((uint64_t)v7, (uint64_t)&v9, 0, &v10);
    sub_216B1D8F0(v6, v8);
    sub_216B1E3A0((uint64_t)v6, (uint64_t)v7, 0);
    sub_216B1DA88((uint64_t)v6, (uint64_t)&unk_216C10FD8, 0, &v10);
    sub_216B1E920((uint64_t)v6, (uint64_t)v5);
    v12 = *(_QWORD *)sub_216B1D544(v5);
    sub_216B1D998(v5);
    sub_216B1D57C(v6);
  }
  else
  {
    v12 = 0;
  }
  sub_216B1E790(v4, (uint64_t)&v11);
  sub_216B21330(a2, 128, v4[0], v4[1]);
  sub_216B1D57C(v7);
  return sub_216B1D57C(v8);
}

uint64_t sub_216B1E920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (sub_216B1D310(a1))
  {
    v4 = *(__int16 *)(a1 + 16) + 1023;
    v5 = *(_QWORD *)sub_216B1D3C4(a1);
    v6 = (v5 >> 52) & 1;
    if (v4 != 1)
      LOWORD(v6) = v4;
  }
  else if ((*(_BYTE *)(a1 + 18) & 7) == 3)
  {
    LOWORD(v6) = 0;
    v5 = 0;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 18) & 7) != 0)
      v5 = *(_QWORD *)sub_216B1D3C4(a1);
    else
      v5 = 0;
    LOWORD(v6) = 2047;
  }
  return sub_216B1E414(a2, 64, ((unint64_t)*(unsigned __int8 *)(a1 + 18) << 60) & 0x8000000000000000 | ((unint64_t)(v6 & 0x7FF) << 52) | v5 & 0xFFFFFFFFFFFFFLL, 0);
}

uint64_t sub_216B1E9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (sub_216B1D310(a1))
  {
    v4 = *(__int16 *)(a1 + 16) + 0x3FFFLL;
    v5 = (uint64_t *)sub_216B1D3C4(a1);
    v6 = *v5;
    v7 = v5[1];
    v8 = HIWORD(v7) & 1;
    if (v4 != 1)
      LOWORD(v8) = v4;
  }
  else if ((*(_BYTE *)(a1 + 18) & 7) == 3)
  {
    LOWORD(v8) = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 18) & 7) != 0)
    {
      v9 = (uint64_t *)sub_216B1D3C4(a1);
      v6 = *v9;
      v7 = v9[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    LOWORD(v8) = 0x7FFF;
  }
  v10 = ((unint64_t)*(unsigned __int8 *)(a1 + 18) << 60) & 0x8000000000000000 | ((unint64_t)(v8 & 0x7FFF) << 48) | v7 & 0xFFFFFFFFFFFFLL;
  v13[0] = v6;
  v13[1] = v10;
  sub_216B1E790(v12, (uint64_t)v13);
  return sub_216B21330(a2, 128, v12[0], v12[1]);
}

uint64_t sub_216B1EACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  int v6;

  if (sub_216B1D310(a1))
  {
    v4 = *(__int16 *)(a1 + 16) + 127;
    v5 = *(_DWORD *)sub_216B1D3C4(a1);
    v6 = (v5 >> 23) & 1;
    if (v4 != 1)
      LOBYTE(v6) = v4;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 18) & 7;
    if (v5 == 3)
    {
      LOBYTE(v6) = 0;
      v5 = 0;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 18) & 7) != 0)
        v5 = *(_DWORD *)sub_216B1D3C4(a1);
      LOBYTE(v6) = -1;
    }
  }
  return sub_216B1E414(a2, 32, (*(unsigned __int8 *)(a1 + 18) << 28) & 0x80000000 | (v6 << 23) | v5 & 0x7FFFFF, 0);
}

uint64_t sub_216B1EB70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  int v6;

  if (sub_216B1D310(a1))
  {
    v4 = *(__int16 *)(a1 + 16) + 15;
    v5 = *(_DWORD *)sub_216B1D3C4(a1);
    v6 = (v5 >> 10) & 1;
    if (v4 != 1)
      LOBYTE(v6) = v4;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 18) & 7;
    if (v5 == 3)
    {
      LOBYTE(v6) = 0;
      LOWORD(v5) = 0;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 18) & 7) != 0)
        v5 = *(_DWORD *)sub_216B1D3C4(a1);
      LOBYTE(v6) = 31;
    }
  }
  return sub_216B1E414(a2, 16, ((v6 & 0x1F) << 10) & 0x7C00 | (((*(unsigned __int8 *)(a1 + 18) >> 3) & 1) << 15) | v5 & 0x3FF, 0);
}

float sub_216B1EC14(uint64_t a1)
{
  float v1;
  _DWORD v3[4];

  sub_216B1D92C(a1, (uint64_t)v3);
  v1 = sub_216B1EC54(v3);
  sub_216B1D998(v3);
  return v1;
}

float sub_216B1EC54(_DWORD *a1)
{
  BOOL v2;
  _DWORD *v3;

  v2 = sub_216B1FFE8(a1);
  v3 = a1 + 2;
  if (!v2)
    v3 = *(_DWORD **)v3;
  return *(float *)v3;
}

uint64_t sub_216B1EC84(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  char v10;

  v4 = *(_QWORD *)sub_216B1D544(a2);
  v5 = *((_QWORD *)sub_216B1D544(a2) + 1);
  v6 = v5 & 0x7FFF;
  result = sub_216B1D200((_QWORD *)a1, (uint64_t)&unk_216C10FE8);
  if (!(v6 | v4))
  {
    v8 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((v5 & 0x8000) != 0)) | 3;
LABEL_15:
    *(_BYTE *)(a1 + 18) = v8;
    return result;
  }
  if (v6 == 0x7FFF && v4 == 0x8000000000000000)
  {
    v8 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((v5 & 0x8000) != 0));
    goto LABEL_15;
  }
  v10 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((v5 & 0x8000) != 0));
  if (v6 != 0x7FFF || v4 == 0x8000000000000000)
  {
    *(_BYTE *)(a1 + 18) = v10 | 2;
    *(_WORD *)(a1 + 16) = v6 - 0x3FFF;
    *(_QWORD *)sub_216B1D390(a1) = v4;
    result = sub_216B1D390(a1);
    *(_QWORD *)(result + 8) = 0;
    if ((v5 & 0x7FFF) == 0)
      *(_WORD *)(a1 + 16) = -16382;
  }
  else
  {
    *(_BYTE *)(a1 + 18) = v10 | 1;
    *(_QWORD *)sub_216B1D390(a1) = v4;
    result = sub_216B1D390(a1);
    *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t sub_216B1ED88(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[16];
  _DWORD v8[7];
  char v9;

  v4 = *(_QWORD *)sub_216B1D544(a2);
  v5 = *((_QWORD *)sub_216B1D544(a2) + 1);
  sub_216B1E414(v8, 64, v4, 0);
  sub_216B1EE7C(a1, v8);
  sub_216B1D998(v8);
  sub_216B1DA88(a1, (uint64_t)&unk_216C10FF8, 0, &v9);
  result = sub_216B1D310(a1);
  if ((_DWORD)result)
  {
    sub_216B1E414(v7, 64, v5, 0);
    sub_216B1EF68(v8, &unk_216C10FD8, v7);
    sub_216B1D998(v7);
    sub_216B1DA88((uint64_t)v8, (uint64_t)&unk_216C10FF8, 0, &v9);
    sub_216B1E398(a1, (uint64_t)v8, 0);
    return sub_216B1D57C(v8);
  }
  return result;
}

_QWORD *sub_216B1EE7C(uint64_t a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  char v7;
  char v9;

  v3 = *(_QWORD *)sub_216B1D544(a2);
  v4 = (v3 >> 52) & 0x7FF;
  v5 = v3 & 0xFFFFFFFFFFFFFLL;
  result = (_QWORD *)sub_216B1D200((_QWORD *)a1, (uint64_t)&unk_216C10FD8);
  if (!(v4 | v3 & 0xFFFFFFFFFFFFFLL))
  {
    v7 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * (((v3 >> 60) & 8) != 0)) | 3;
LABEL_15:
    *(_BYTE *)(a1 + 18) = v7;
    return result;
  }
  if (v4 == 2047 && v5 == 0)
  {
    v7 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * (((v3 >> 60) & 8) != 0));
    goto LABEL_15;
  }
  v9 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * (((v3 >> 60) & 8) != 0));
  if (v4 != 2047 || v5 == 0)
  {
    *(_BYTE *)(a1 + 18) = v9 | 2;
    *(_WORD *)(a1 + 16) = v4 - 1023;
    result = (_QWORD *)sub_216B1D390(a1);
    *result = v5;
    if (v4)
    {
      result = (_QWORD *)sub_216B1D390(a1);
      *result |= 0x10000000000000uLL;
    }
    else
    {
      *(_WORD *)(a1 + 16) = -1022;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 18) = v9 | 1;
    result = (_QWORD *)sub_216B1D390(a1);
    *result = v5;
  }
  return result;
}

uint64_t sub_216B1EF6C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  char v13;
  char v15;

  v4 = *(_QWORD *)sub_216B1D544(a2);
  v5 = *((_QWORD *)sub_216B1D544(a2) + 1);
  v6 = HIWORD(v5) & 0x7FFF;
  v7 = v5 & 0xFFFFFFFFFFFFLL;
  result = sub_216B1D200((_QWORD *)a1, (uint64_t)&unk_216C10FE0);
  if (v6)
    v9 = 0;
  else
    v9 = v4 == 0;
  if (v9 && v7 == 0)
  {
    v15 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * (((v5 >> 60) & 8) != 0)) | 3;
LABEL_24:
    *(_BYTE *)(a1 + 18) = v15;
    return result;
  }
  if (v6 == 0x7FFF && v4 == 0 && v7 == 0)
  {
    v15 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * (((v5 >> 60) & 8) != 0));
    goto LABEL_24;
  }
  v13 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * (((v5 >> 60) & 8) != 0));
  if (v6 != 0x7FFF || (v4 | v7) == 0)
  {
    *(_BYTE *)(a1 + 18) = v13 | 2;
    *(_WORD *)(a1 + 16) = v6 - 0x3FFF;
    *(_QWORD *)sub_216B1D390(a1) = v4;
    result = sub_216B1D390(a1);
    *(_QWORD *)(result + 8) = v7;
    if (v6)
    {
      result = sub_216B1D390(a1);
      *(_QWORD *)(result + 8) |= 0x1000000000000uLL;
    }
    else
    {
      *(_WORD *)(a1 + 16) = -16382;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 18) = v13 | 1;
    *(_QWORD *)sub_216B1D390(a1) = v4;
    result = sub_216B1D390(a1);
    *(_QWORD *)(result + 8) = v7;
  }
  return result;
}

_QWORD *sub_216B1F0A4(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *result;
  char v7;
  char v9;

  v3 = *(_QWORD *)sub_216B1D544(a2);
  v4 = (v3 >> 23);
  v5 = v3 & 0x7FFFFF;
  result = (_QWORD *)sub_216B1D200((_QWORD *)a1, (uint64_t)&unk_216C10FD0);
  if (!(v4 | v3 & 0x7FFFFF))
  {
    v7 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((int)v3 < 0)) | 3;
LABEL_15:
    *(_BYTE *)(a1 + 18) = v7;
    return result;
  }
  if (v4 == 255 && v5 == 0)
  {
    v7 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((int)v3 < 0));
    goto LABEL_15;
  }
  v9 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((int)v3 < 0));
  if (v4 != 255 || v5 == 0)
  {
    *(_BYTE *)(a1 + 18) = v9 | 2;
    *(_WORD *)(a1 + 16) = v4 - 127;
    result = (_QWORD *)sub_216B1D390(a1);
    *result = v3 & 0x7FFFFF;
    if ((v3 >> 23))
    {
      result = (_QWORD *)sub_216B1D390(a1);
      *result |= 0x800000uLL;
    }
    else
    {
      *(_WORD *)(a1 + 16) = -126;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 18) = v9 | 1;
    result = (_QWORD *)sub_216B1D390(a1);
    *result = v3 & 0x7FFFFF;
  }
  return result;
}

_QWORD *sub_216B1F194(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _QWORD *result;
  char v7;
  char v9;

  v3 = *(_QWORD *)sub_216B1D544(a2);
  v4 = (v3 >> 10) & 0x1F;
  v5 = v3 & 0x3FF;
  result = (_QWORD *)sub_216B1D200((_QWORD *)a1, (uint64_t)&unk_216C10FC8);
  if (!(v4 | v5))
  {
    v7 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((v3 & 0x8000) != 0)) | 3;
LABEL_15:
    *(_BYTE *)(a1 + 18) = v7;
    return result;
  }
  if (v4 == 31 && v5 == 0)
  {
    v7 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((v3 & 0x8000) != 0));
    goto LABEL_15;
  }
  v9 = *(_BYTE *)(a1 + 18) & 0xF0 | (8 * ((v3 & 0x8000) != 0));
  if (v4 != 31 || v5 == 0)
  {
    *(_BYTE *)(a1 + 18) = v9 | 2;
    *(_WORD *)(a1 + 16) = v4 - 15;
    result = (_QWORD *)sub_216B1D390(a1);
    *result = v3 & 0x3FF;
    if (v4)
    {
      result = (_QWORD *)sub_216B1D390(a1);
      *result |= 0x400uLL;
    }
    else
    {
      *(_WORD *)(a1 + 16) = -14;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 18) = v9 | 1;
    result = (_QWORD *)sub_216B1D390(a1);
    *result = v3 & 0x3FF;
  }
  return result;
}

_QWORD *sub_216B1F284(uint64_t a1, void *a2, _DWORD *a3)
{
  if (a2 == &unk_216C10FC8)
    return sub_216B1F194(a1, a3);
  if (a2 == &unk_216C10FD0)
    return sub_216B1F0A4(a1, a3);
  if (a2 == &unk_216C10FD8)
    return sub_216B1EE7C(a1, a3);
  if (a2 == &unk_216C10FE8)
    return (_QWORD *)sub_216B1EC84(a1, a3);
  if (a2 == &unk_216C10FE0)
    return (_QWORD *)sub_216B1EF6C(a1, a3);
  return (_QWORD *)sub_216B1ED88(a1, a3);
}

void *sub_216B1F304(uint64_t a1, int a2)
{
  char v3;
  void *v4;
  int v5;
  char v6;
  unsigned int v7;
  void *result;

  if (a2)
    v3 = 10;
  else
    v3 = 2;
  *(_BYTE *)(a1 + 18) = v3 | *(_BYTE *)(a1 + 18) & 0xF0;
  *(_WORD *)(a1 + 16) = **(_WORD **)a1;
  v4 = (void *)sub_216B1D390(a1);
  v5 = sub_216B1D238(a1);
  v6 = v5;
  v7 = v5 - 1;
  result = memset(v4, 255, 8 * (v5 - 1));
  *((_QWORD *)v4 + v7) = 0xFFFFFFFFFFFFFFFFLL >> ((v6 << 6) - *(_DWORD *)(*(_QWORD *)a1 + 4));
  return result;
}

void *sub_216B1F398@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = sub_216B1D578(a3, a1, 0);
  return sub_216B1F304(v4, a2);
}

uint64_t sub_216B1F3C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  sub_216B1D578(a3, a1, 0);
  *(_BYTE *)(a3 + 18) = *(_BYTE *)(a3 + 18) & 0xF8 | 2;
  sub_216B1D680(a3);
  if (a2)
    v6 = 8;
  else
    v6 = 0;
  *(_BYTE *)(a3 + 18) = *(_BYTE *)(a3 + 18) & 0xF7 | v6;
  *(_WORD *)(a3 + 16) = *(_WORD *)(a1 + 2);
  v7 = *(_DWORD *)(a1 + 4);
  v8 = sub_216B1D390(a3);
  result = sub_216B1D99C(v7);
  *(_QWORD *)(v8 + 8 * (result - 1)) |= 1 << (v7 - 1);
  return result;
}

uint64_t sub_216B1F474(uint64_t a1, void *a2, _DWORD *a3)
{
  sub_216B1F284(a1, a2, a3);
  return a1;
}

uint64_t sub_216B1F498(uint64_t a1, float a2)
{
  _DWORD v4[4];

  sub_216B1F4E4((uint64_t)v4, LODWORD(a2));
  sub_216B1F284(a1, &unk_216C10FD0, v4);
  sub_216B1D998(v4);
  return a1;
}

uint64_t sub_216B1F4E4@<X0>(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  return sub_216B1E414(a1, 32, a2, 0);
}

uint64_t sub_216B1F4FC(uint64_t a1, const void **a2, unsigned int a3, unsigned int a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  int v33;
  unsigned int v34;
  _BYTE *v35;
  char v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;
  _BYTE *v45;
  unsigned int v47;
  _BYTE *v48;
  char v49;
  _BYTE v50[32];
  _DWORD v51[4];
  _BYTE v52[16];
  int v53[70];
  unsigned int v54[5];
  unsigned int v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];

  v7 = *(_BYTE *)(a1 + 18) & 7;
  if (v7 == 3)
  {
    if (sub_216B1E45C(a1))
    {
      LOBYTE(v53[0]) = 45;
      sub_216B1FBBC((uint64_t)a2, v53);
    }
    if (a4)
    {
      LOBYTE(v53[0]) = 48;
      return sub_216B1FBBC((uint64_t)a2, v53);
    }
    sub_216B1E678((int)v56, "0.0E+0");
    v8 = v56[0];
    v9 = v56[1];
    return sub_216B1FB70(a2, v8, v9);
  }
  if (v7 == 1)
  {
    sub_216B1E678((int)v57, "NaN");
    v8 = v57[0];
    v9 = v57[1];
    return sub_216B1FB70(a2, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 18) & 7) == 0)
  {
    if (sub_216B1E45C(a1))
    {
      sub_216B1E678((int)v59, "-Inf");
      v8 = v59[0];
      v9 = v59[1];
    }
    else
    {
      sub_216B1E678((int)v58, "+Inf");
      v8 = v58[0];
      v9 = v58[1];
    }
    return sub_216B1FB70(a2, v8, v9);
  }
  if (sub_216B1E45C(a1))
  {
    LOBYTE(v53[0]) = 45;
    sub_216B1FBBC((uint64_t)a2, v53);
  }
  v12 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  v13 = *(__int16 *)(a1 + 16) - (_DWORD)v12 + 1;
  v14 = sub_216B1D3C4(a1);
  v15 = sub_216B1D99C(v12);
  v16 = sub_216B1E5D4(v14, v15);
  v18 = sub_216B21330(v54, v12, v16, v17);
  if (!a3)
    a3 = 59 * *(_DWORD *)(*(_QWORD *)a1 + 4) / 0xC4u + 2;
  v19 = sub_216B221E8(v18);
  v20 = v19 + v13;
  v55 = v19 + v13;
  sub_216B22A30(v54, v19, (uint64_t)v53);
  sub_216B1E580((uint64_t)v54, v53);
  sub_216B1D998(v53);
  if ((_DWORD)v20)
  {
    if ((int)v20 < 1)
    {
      v21 = -(int)v20;
      v22 = (*(_DWORD *)(*(_QWORD *)a1 + 4) + (-137 * (int)v20 + 136) / 59);
      sub_216B22674((uint64_t)v54, v22, (uint64_t)v53);
      sub_216B1E580((uint64_t)v54, v53);
      sub_216B1D998(v53);
      sub_216B1E414(v53, v22, 5, 0);
      if ((-(int)v20 & 1) == 0)
        goto LABEL_23;
LABEL_22:
      sub_216B21678((uint64_t)v54, (uint64_t)v53);
LABEL_23:
      while (v21 >= 2)
      {
        v21 >>= 1;
        sub_216B21678((uint64_t)v53, (uint64_t)v53);
        if ((v21 & 1) != 0)
          goto LABEL_22;
      }
      sub_216B1D998(v53);
    }
    else
    {
      sub_216B22674((uint64_t)v54, (*(_DWORD *)(*(_QWORD *)a1 + 4) + v20), (uint64_t)v53);
      sub_216B1E580((uint64_t)v54, v53);
      sub_216B1D998(v53);
      sub_216B1E418(v54, v20);
      v55 = 0;
    }
  }
  sub_216B1FC18((int *)v54, &v55, a3);
  sub_216B1FD68(v53);
  v23 = sub_216B1E4E0(v54);
  sub_216B1E414(v52, v23, 10, 0);
  sub_216B1E414(v51, v23, 0, 0);
  v24 = v55;
  if (sub_216B1FD6C((uint64_t)v54, 0))
  {
    LOBYTE(v25) = 1;
    do
    {
      sub_216B2310C((uint64_t)v54, (uint64_t)v52, (uint64_t)v54, (uint64_t)v51);
      v26 = sub_216B1FD84(v51);
      v25 = v25 & (v26 == 0);
      if (v25 == 1)
      {
        ++v24;
      }
      else
      {
        v50[0] = v26 + 48;
        sub_216B1FBBC((uint64_t)v53, v50);
      }
    }
    while (sub_216B1FD6C((uint64_t)v54, 0));
  }
  v55 = v24;
  sub_216B1FDB4(v53, &v55, a3);
  v27 = sub_216B1FF14((uint64_t)v53);
  v28 = v27;
  v29 = v55;
  if (!a4)
    goto LABEL_45;
  if ((v55 & 0x80000000) != 0)
  {
    if (((v27 + v55 - 1) & 0x80000000) == 0 || 1 - (v27 + v55) <= a4)
    {
      v42 = v55 + v27;
      if ((int)(v55 + v27) < 1)
      {
        v50[0] = 48;
        sub_216B1FBBC((uint64_t)a2, v50);
        v50[0] = 46;
        sub_216B1FBBC((uint64_t)a2, v50);
        if (v42)
        {
          do
          {
            v50[0] = 48;
            sub_216B1FBBC((uint64_t)a2, v50);
          }
          while (!__CFADD__(v42++, 1));
          v42 = 0;
        }
      }
      else
      {
        v43 = -v55;
        v44 = v27;
        do
        {
          v45 = (_BYTE *)sub_216B1FF44((uint64_t)v53, --v44);
          sub_216B1FBBC((uint64_t)a2, v45);
        }
        while (v43 != v44);
        v50[0] = 46;
        sub_216B1FBBC((uint64_t)a2, v50);
      }
      if (v42 != v28)
      {
        v47 = ~v42 + v28;
        do
        {
          v48 = (_BYTE *)sub_216B1FF44((uint64_t)v53, v47);
          sub_216B1FBBC((uint64_t)a2, v48);
          --v47;
        }
        while (v47 != -1);
      }
      goto LABEL_61;
    }
    goto LABEL_45;
  }
  if (v55 > a4 || v55 + v27 > a3)
  {
LABEL_45:
    v32 = (_BYTE *)sub_216B1FF44((uint64_t)v53, v27 - 1);
    sub_216B1FBBC((uint64_t)a2, v32);
    v50[0] = 46;
    sub_216B1FBBC((uint64_t)a2, v50);
    v33 = v29 + v28 - 1;
    if (v28 == 1)
    {
      v50[0] = 48;
      sub_216B1FBBC((uint64_t)a2, v50);
    }
    else
    {
      v34 = v28 - 2;
      do
      {
        v35 = (_BYTE *)sub_216B1FF44((uint64_t)v53, v34);
        sub_216B1FBBC((uint64_t)a2, v35);
        --v34;
      }
      while (v34 != -1);
    }
    v50[0] = 69;
    sub_216B1FBBC((uint64_t)a2, v50);
    if (v33 < 0)
      v36 = 45;
    else
      v36 = 43;
    v50[0] = v36;
    if (v33 >= 0)
      v37 = v29 + v28 - 1;
    else
      v37 = -v33;
    sub_216B1FBBC((uint64_t)a2, v50);
    sub_216B1FF68(v50);
    do
    {
      v49 = (char)v37 % 10 + 48;
      sub_216B1FBBC((uint64_t)v50, &v49);
      v38 = v37 + 9;
      v37 /= 10;
    }
    while (v38 > 0x12);
    v39 = sub_216B1FF14((uint64_t)v50);
    if (v39)
    {
      v40 = v39 - 1;
      do
      {
        v41 = (_BYTE *)sub_216B1FF44((uint64_t)v50, v40);
        sub_216B1FBBC((uint64_t)a2, v41);
        --v40;
      }
      while (v40 != -1);
    }
    sub_216B1FF6C(v50);
    goto LABEL_61;
  }
  if (v27)
  {
    v30 = v27 - 1;
    do
    {
      v31 = (_BYTE *)sub_216B1FF44((uint64_t)v53, v30);
      sub_216B1FBBC((uint64_t)a2, v31);
      --v30;
    }
    while (v30 != -1);
  }
  for (; v29; --v29)
  {
    v50[0] = 48;
    sub_216B1FBBC((uint64_t)a2, v50);
  }
LABEL_61:
  sub_216B1D998(v51);
  sub_216B1D998(v52);
  sub_216B1FF6C(v53);
  return sub_216B1D998(v54);
}

uint64_t sub_216B1FB70(const void **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (char *)sub_216B1E600((uint64_t)v7);
  v5 = (char *)sub_216B1E608(v7);
  return sub_216B202D8(a1, v4, v5);
}

uint64_t sub_216B1FBBC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B20384((const void **)a1, 0);
  *(_BYTE *)sub_216B1E67C(a1) = *a2;
  v4 = sub_216B1E67C(a1) + 1;
  return sub_216B203A4(a1, v4);
}

uint64_t sub_216B1FC18(int *a1, _DWORD *a2, int a3)
{
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15[4];
  _BYTE v16[16];
  _BYTE v17[16];

  result = sub_216B2045C(a1);
  v7 = (196 * a3 + 58) / 0x3Bu;
  v8 = result >= v7;
  v9 = result - v7;
  if (v9 != 0 && v8)
  {
    v10 = 59 * v9;
    if (v10 >= 0xC4)
    {
      v11 = v10 / 0xC4;
      *a2 += v10 / 0xC4;
      v12 = sub_216B1E4E0((unsigned int *)a1);
      sub_216B1E414(v17, v12, 1, 0);
      v13 = sub_216B1E4E0((unsigned int *)a1);
      sub_216B1E414(v16, v13, 10, 0);
      if ((v11 & 1) == 0)
        goto LABEL_6;
LABEL_5:
      sub_216B21678((uint64_t)v17, (uint64_t)v16);
LABEL_6:
      while (v11 >= 2)
      {
        v11 >>= 1;
        sub_216B21678((uint64_t)v16, (uint64_t)v16);
        if ((v11 & 1) != 0)
          goto LABEL_5;
      }
      sub_216B22F54((unsigned int *)a1, (uint64_t)v17, (uint64_t)v15);
      sub_216B1E580((uint64_t)a1, v15);
      sub_216B1D998(v15);
      v14 = sub_216B2045C(a1);
      sub_216B22468((uint64_t)a1, v14, (uint64_t)v15);
      sub_216B1E580((uint64_t)a1, v15);
      sub_216B1D998(v15);
      sub_216B1D998(v16);
      return sub_216B1D998(v17);
    }
  }
  return result;
}

BOOL sub_216B1FD6C(uint64_t a1, uint64_t a2)
{
  return !sub_216B204E4(a1, a2);
}

uint64_t sub_216B1FD84(_DWORD *a1)
{
  BOOL v2;
  _DWORD *v3;

  v2 = sub_216B1FFE8(a1);
  v3 = a1 + 2;
  if (!v2)
    v3 = *(_DWORD **)v3;
  return *(_QWORD *)v3;
}

uint64_t sub_216B1FDB4(_QWORD *a1, _DWORD *a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;

  result = sub_216B1FF14((uint64_t)a1);
  v7 = result;
  v8 = result - a3;
  if (result > a3)
  {
    if (*(char *)sub_216B1FF44((uint64_t)a1, v8 - 1) < 53)
    {
      if (v8 < v7)
      {
        v9 = -a3;
        while (1)
        {
          v8 = v7 + v9;
          if (*(_BYTE *)sub_216B1FF44((uint64_t)a1, v7 + v9) != 48)
            break;
          v10 = __CFADD__(v9++, 1);
          if (v10)
          {
            v8 = v7;
            break;
          }
        }
      }
LABEL_19:
      *a2 += v8;
      v13 = sub_216B1FF44((uint64_t)a1, 0);
      sub_216B1FF44((uint64_t)a1, v8);
      return sub_216B2052C((uint64_t)a1, v13);
    }
    if (a3)
    {
      v11 = -a3;
      while (1)
      {
        v8 = v7 + v11;
        if (*(_BYTE *)sub_216B1FF44((uint64_t)a1, v7 + v11) != 57)
          break;
        v10 = __CFADD__(v11++, 1);
        if (v10)
          goto LABEL_17;
      }
      v12 = (_BYTE *)sub_216B1FF44((uint64_t)a1, v7 + v11);
      ++*v12;
    }
    if (v8 != v7)
      goto LABEL_19;
LABEL_17:
    *a2 += v7;
    sub_216B20594(a1);
    v14 = 49;
    return sub_216B1FBBC((uint64_t)a1, &v14);
  }
  return result;
}

uint64_t sub_216B1FF14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return v2 - sub_216B1E600(a1);
}

uint64_t sub_216B1FF44(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + a2;
}

void sub_216B1FF70(uint64_t a1, int a2)
{
  char v3;
  _QWORD *v4;
  unsigned int v5;

  if (a2)
    v3 = 11;
  else
    v3 = 3;
  *(_BYTE *)(a1 + 18) = v3 | *(_BYTE *)(a1 + 18) & 0xF0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(*(_QWORD *)a1 + 2) - 1;
  v4 = (_QWORD *)sub_216B1D390(a1);
  v5 = sub_216B1D238(a1);
  sub_216B249E4(v4, 0, v5);
}

unint64_t sub_216B1FFD8(unsigned int a1)
{
  return ((unint64_t)a1 + 63) >> 6;
}

BOOL sub_216B1FFE8(_DWORD *a1)
{
  return *a1 < 0x41u;
}

uint64_t sub_216B1FFF8(uint64_t a1)
{
  void *v2;

  if (sub_216B2002C((_DWORD *)a1))
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
      j__free(v2);
  }
  return a1;
}

BOOL sub_216B2002C(_DWORD *a1)
{
  return !sub_216B1FFE8(a1);
}

BOOL sub_216B20044(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 18) & 7) == 0;
}

uint64_t sub_216B20054(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  if (sub_216B1FFE8((_DWORD *)a1))
    *(_QWORD *)(a1 + 8) = a3;
  else
    sub_216B2114C(a1, a2, a3, a4);
  sub_216B200BC(a1);
  return a1;
}

uint64_t sub_216B200BC(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if ((*(_DWORD *)a1 & 0x3F) != 0)
  {
    v2 = 0xFFFFFFFFFFFFFFFFLL >> -(*(_DWORD *)a1 & 0x3F);
    if (sub_216B1FFE8((_DWORD *)a1))
    {
      v3 = (_QWORD *)(a1 + 8);
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 8);
      v3 = (_QWORD *)(v4 + 8 * (sub_216B1D53C((unsigned int *)a1) - 1));
    }
    *v3 &= v2;
  }
  return a1;
}

uint64_t sub_216B20130@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!sub_216B1FFE8(a1))
    return sub_216B22C90((uint64_t)a1, a2, a3);
  v6 = *a1;
  if (v6 <= a2)
  {
    v8 = a3;
    v7 = 0;
  }
  else
  {
    v7 = *((_QWORD *)a1 + 1) << a2;
    v8 = a3;
  }
  return sub_216B1E414(v8, v6, v7, 0);
}

uint64_t sub_216B201A8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  if (sub_216B1FFE8((_DWORD *)a1))
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  else
    sub_216B211EC(a1, a2);
  return a1;
}

BOOL sub_216B201F8(_DWORD *a1, unsigned int a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = sub_216B20258(a2);
  v5 = sub_216B1FFE8(a1);
  v6 = (uint64_t *)(a1 + 2);
  if (!v5)
  {
    v7 = *v6;
    v6 = (uint64_t *)(v7 + 8 * sub_216B20274(a2));
  }
  return (*v6 & v4) != 0;
}

uint64_t sub_216B20258(char a1)
{
  return 1 << sub_216B2027C(a1);
}

uint64_t sub_216B20274(unsigned int a1)
{
  return a1 >> 6;
}

uint64_t sub_216B2027C(char a1)
{
  return a1 & 0x3F;
}

uint64_t sub_216B20284(const void *a1, const void *a2, size_t a3)
{
  if (a3)
    return memcmp(a1, a2, a3);
  else
    return 0;
}

_QWORD *sub_216B20294(_QWORD *a1, char *__s)
{
  *a1 = __s;
  a1[1] = strlen(__s);
  return a1;
}

_QWORD *sub_216B202C4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

_QWORD *sub_216B202CC(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 2;
  return result;
}

uint64_t sub_216B202D8(const void **a1, char *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;

  v6 = sub_216B20378((uint64_t)a2, (uint64_t)a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > v7 - sub_216B1E67C((uint64_t)a1))
  {
    v8 = sub_216B1FF14((uint64_t)a1);
    sub_216B20384(a1, v8 + v6);
  }
  v9 = (_BYTE *)sub_216B1E67C((uint64_t)a1);
  sub_216B2038C(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216B2037C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

char *sub_216B20384(const void **a1, unint64_t a2)
{
  return sub_216B203B4(a1, a2, 1);
}

uint64_t sub_216B2038C(char *a1, char *a2, _BYTE *a3)
{
  uint64_t v3;

  sub_216B203C4(a1, a2, a3);
  return v3;
}

uint64_t sub_216B203A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_216B203AC(uint64_t a1, uint64_t a2)
{
  return a2 - a1;
}

char *sub_216B203B4(const void **a1, unint64_t a2, uint64_t a3)
{
  return sub_216B2CE7C(a1, a1 + 3, a2, a3);
}

uint64_t sub_216B203C4(char *a1, char *a2, _BYTE *a3)
{
  char *v4;
  char v5;
  _BYTE *v7;
  char *v8;
  uint64_t v9;

  v7 = a3;
  v8 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      v5 = *v4++;
      *v7++ = v5;
      v8 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v9, &v8, &v7);
  return v9;
}

uint64_t sub_216B2043C()
{
  return 0;
}

_QWORD *sub_216B20448(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_216B2045C(int *a1)
{
  int v1;

  v1 = *a1;
  return v1 - sub_216B20480((uint64_t)a1);
}

uint64_t sub_216B20480(uint64_t a1)
{
  int v2;

  if (!sub_216B1FFE8((_DWORD *)a1))
    return sub_216B22034(a1);
  v2 = *(_DWORD *)a1;
  return v2 + sub_216B204CC(*(_QWORD *)(a1 + 8), 2) - 64;
}

uint64_t sub_216B204CC(unint64_t a1, int a2)
{
  BOOL v2;
  unint64_t v3;

  if (a2)
    v2 = a1 == 0;
  else
    v2 = 0;
  v3 = __clz(a1);
  if (v2)
    return 64;
  else
    return v3;
}

BOOL sub_216B204E4(uint64_t a1, uint64_t a2)
{
  if (sub_216B1FFE8((_DWORD *)a1))
    return *(_QWORD *)(a1 + 8) == a2;
  else
    return sub_216B21D44(a1, a2);
}

uint64_t sub_216B2052C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_216B1E67C(a1);
  v4 = sub_216B205D4();
  v5 = sub_216B1E67C(a1);
  nullsub_1(v4, v5);
  sub_216B203A4(a1, v4);
  return a2;
}

uint64_t sub_216B20594(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  result = nullsub_1(v2, v3);
  a1[1] = *a1;
  return result;
}

uint64_t sub_216B205DC()
{
  uint64_t v0;

  sub_216B205F4();
  return v0;
}

uint64_t sub_216B205FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (char *)j_j_nullsub_1(a3);
  v9 = sub_216B206CC((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B20688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = j_j_nullsub_1(a1);
  v4 = j_j_nullsub_1(a2);
  return sub_216B206E0((uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_216B206CC(int a1, const void *a2, uint64_t a3, char *__dst)
{
  return sub_216B20714(a2, a3, __dst);
}

uint64_t sub_216B206E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B20444(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B20714(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216B20768(__dst, a1, a2 - (_QWORD)a1);
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

void *sub_216B20768(void *__dst, const void *a2, size_t a3)
{
  if (a3)
    memmove(__dst, a2, a3);
  return __dst;
}

uint64_t sub_216B20798(uint64_t a1, uint64_t a2)
{
  return a1 + a2 - nullsub_1();
}

_QWORD *sub_216B207C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  nullsub_1(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

BOOL sub_216B2081C(_QWORD *a1)
{
  return *a1 == (_QWORD)(a1 + 3);
}

_DWORD *sub_216B2082C(_DWORD *a1, _DWORD *a2)
{
  char v5;

  if (sub_216B20868((uint64_t)&v5, a2, a1))
    return a2;
  else
    return a1;
}

BOOL sub_216B20868(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 < *a3;
}

_QWORD *sub_216B2087C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a2;
  result[2] = a2 + a3;
  return result;
}

uint64_t sub_216B2088C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  if (*(_BYTE *)off_254E4AA38())
  {
    v0 = off_254E4AA50();
    *(_QWORD *)v0 = v1;
    *v2 = 0;
  }
  else
  {
    v0 = off_254E4AA50();
  }
  return *(_QWORD *)v0;
}

uint64_t *sub_216B2090C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;

  *a3 = 0;
  a3[1] = a2;
  a3[2] = sub_216B20AFC(a2, 0xB492B66FBE98F273);
  a3[3] = sub_216B20B2C(a2 ^ 0xB492B66FBE98F273, 49);
  a3[4] = 0xB492B66FBE98F273 * a2;
  v6 = sub_216B20B34(a2);
  a3[5] = v6;
  a3[6] = sub_216B20AFC(0xB492B66FBE98F273 * a2, v6);
  return sub_216B209A0(a3, a1);
}

uint64_t *sub_216B209A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1[1] + *a1;
  v5 = a1 + 3;
  v6 = a1[3];
  v7 = sub_216B1E600(a2 + 8);
  *a1 = 0xB492B66FBE98F273 * sub_216B20B2C(v4 + v6 + v7, 37);
  v8 = a1[4] + a1[1];
  v9 = sub_216B1E600(a2 + 48);
  v10 = sub_216B20B2C(v8 + v9, 42);
  *a1 ^= a1[6];
  a1[1] = 0xB492B66FBE98F273 * v10;
  v11 = *v5;
  a1[1] += sub_216B1E600(a2 + 40) + v11;
  a1[2] = 0xB492B66FBE98F273 * sub_216B20B2C(a1[5] + a1[2], 33);
  *v5 = 0xB492B66FBE98F273 * a1[4];
  a1[4] = a1[5] + *a1;
  sub_216B20B3C(a2, v5, a1 + 4);
  a1[5] = a1[6] + a1[2];
  v12 = a1[1];
  a1[6] = sub_216B1E600(a2 + 16) + v12;
  sub_216B20B3C(a2 + 32, a1 + 5, a1 + 6);
  return sub_216B20BF4(a1 + 2, a1);
}

unint64_t sub_216B20AFC(uint64_t a1, uint64_t a2)
{
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (a2 ^ ((0x9DDFEA08EB382D69 * (a2 ^ a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (a2 ^ a1)))) ^ ((0x9DDFEA08EB382D69 * (a2 ^ ((0x9DDFEA08EB382D69 * (a2 ^ a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (a2 ^ a1)))) >> 47));
}

uint64_t sub_216B20B2C(uint64_t a1, char a2)
{
  return __ROR8__(a1, a2);
}

unint64_t sub_216B20B34(unint64_t a1)
{
  return a1 ^ (a1 >> 47);
}

uint64_t sub_216B20B3C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  *a2 += sub_216B1E600(a1);
  v6 = sub_216B1E600(a1 + 24);
  *a3 = sub_216B20B2C(*a3 + v6 + *a2, 21);
  v7 = *a2;
  v8 = sub_216B1E600(a1 + 8);
  v9 = sub_216B1E600(a1 + 16) + v8 + *a2;
  *a2 = v9;
  result = sub_216B20B2C(v9, 44);
  *a3 += result + v7;
  *a2 += v6;
  return result;
}

uint64_t *sub_216B20BF4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

unint64_t sub_216B20C08(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 <= 4)
    return sub_216B20CF4(a1, a2, a3);
  if (a2 - 9 <= 7)
    return sub_216B20D40((uint64_t)a1, a2, a3);
  if (a2 - 17 <= 0xF)
    return sub_216B20DA4((uint64_t)a1, a2, a3);
  if (a2 >= 0x21)
    return sub_216B20E94((uint64_t)a1, a2, a3);
  if (a2)
    return sub_216B2104C((unsigned __int8 *)a1, a2, a3);
  return a3 ^ 0x9AE16A3B2F90404FLL;
}

unint64_t sub_216B20C68(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = sub_216B20AFC(a1[3], a1[5]);
  v5 = v4 - 0x4B6D499041670D8DLL * sub_216B20B34(a1[1]) + a1[2];
  v6 = sub_216B20AFC(a1[4], a1[6]);
  v7 = v6 - 0x4B6D499041670D8DLL * sub_216B20B34(a2) + *a1;
  return sub_216B20AFC(v5, v7);
}

unint64_t sub_216B20CF4(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2 + 8 * sub_216B1E4E0(a1);
  v7 = sub_216B1E4E0((unsigned int *)((char *)a1 + a2 - 4)) ^ a3;
  return sub_216B20AFC(v6, v7);
}

unint64_t sub_216B20D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_216B1E600(a1);
  v7 = sub_216B1E600(a1 + a2 - 8);
  v8 = sub_216B20B2C(v7 + a2, a2);
  return sub_216B20AFC(v6 ^ a3, v8) ^ v7;
}

unint64_t sub_216B20DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = 0xB492B66FBE98F273 * sub_216B1E600(a1);
  v7 = sub_216B1E600(a1 + 8);
  v8 = a1 + a2;
  v9 = 0x9AE16A3B2F90404FLL * sub_216B1E600(v8 - 8);
  v10 = sub_216B1E600(v8 - 16);
  v11 = sub_216B20B2C(v6 - v7, 43);
  v12 = v11 - 0x3C5A37A36834CED9 * v10 + sub_216B20B2C(v9 ^ a3, 30);
  v13 = a3 + a2 + v6 - v9 + sub_216B20B2C(v7 ^ 0xC949D7C7509E6557, 20);
  return sub_216B20AFC(v12, v13);
}

unint64_t sub_216B20E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = a1;
  v5 = sub_216B1E600(a1 + 24);
  v6 = sub_216B1E600(v4);
  v7 = v4 + a2;
  v8 = v4 + a2 - 16;
  v9 = v6 - 0x3C5A37A36834CED9 * (sub_216B1E600(v8) + a2);
  v10 = sub_216B20B2C(v9 + v5, 52);
  v11 = sub_216B20B2C(v9, 37);
  v12 = v9 + sub_216B1E600(v4 + 8);
  v13 = sub_216B20B2C(v12, 7);
  v4 += 16;
  v14 = sub_216B1E600(v4) + v12;
  v15 = v11 + v10 + v13 + sub_216B20B2C(v14, 31);
  v16 = sub_216B1E600(v4);
  v17 = sub_216B1E600(v7 - 32) + v16;
  v18 = sub_216B1E600(v7 - 8);
  v19 = sub_216B20B2C(v17 + v18, 52);
  v20 = sub_216B20B2C(v17, 37);
  v21 = sub_216B1E600(v7 - 24) + v17;
  v22 = sub_216B20B2C(v21, 7);
  v23 = sub_216B1E600(v8) + v21;
  v24 = sub_216B20B2C(v23, 31);
  v25 = sub_216B20B34(0x9AE16A3B2F90404FLL * (v14 + v5 + v19 + v20 + v22 + v24) - 0x3C5A37A36834CED9
                                                                                * (v18 + v23 + v15));
  return 0x9AE16A3B2F90404FLL * sub_216B20B34(((0xC3A5C85C97CB3127 * v25) ^ a3) + v15);
}

unint64_t sub_216B2104C(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  return 0x9AE16A3B2F90404FLL
       * sub_216B20B34((0x9AE16A3B2F90404FLL * (*a1 | ((unint64_t)a1[a2 >> 1] << 8))) ^ a3 ^ (0xC949D7C7509E6557 * (a2 + 4 * a1[a2 - 1])));
}

_QWORD *sub_216B210B8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t sub_216B210C0(const void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)(a3 - (a2 - (_QWORD)a1));
  v5 = a2;
  sub_216B20768(v4, a1, a2 - (_QWORD)a1);
  return sub_216B206E0((uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_216B21100(_QWORD *a1, _QWORD *a2)
{
  return sub_216B2110C(*a1, *a2);
}

char *sub_216B21110(char *result, char *a2)
{
  char v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_216B21124()
{
  return sub_216B2112C();
}

uint64_t sub_216B2112C()
{
  return sub_216B21134();
}

_QWORD *sub_216B21138(_QWORD *a1, uint64_t a2)
{
  return sub_216B2087C(a1, (uint64_t)(a1 + 3), a2);
}

uint64_t sub_216B21144()
{
  return sub_216B2112C();
}

void sub_216B2114C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;

  v7 = sub_216B1D53C((unsigned int *)a1);
  sub_216B211C4(v7);
  *(_QWORD *)(a1 + 8) = v8;
  *v8 = a3;
  if (a3 < 0 && a4 && sub_216B1D53C((unsigned int *)a1) >= 2)
  {
    v9 = 1;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9++) = -1;
    while (v9 < sub_216B1D53C((unsigned int *)a1));
  }
}

void sub_216B211C4(unsigned int a1)
{
  size_t v1;
  void *v2;

  v1 = 8 * a1;
  v2 = (void *)sub_216B1D1D4(v1);
  bzero(v2, v1);
}

void *sub_216B211EC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  const void *v6;
  size_t v7;

  v4 = sub_216B1D53C((unsigned int *)a1);
  v5 = (void *)sub_216B2123C(v4);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(const void **)(a2 + 8);
  v7 = 8 * sub_216B1D53C((unsigned int *)a1);
  return memcpy(v5, v6, v7);
}

uint64_t sub_216B2123C(unsigned int a1)
{
  return sub_216B1D1D4(8 * a1);
}

uint64_t sub_216B21244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  void *v7;
  const void *v8;
  int v10;
  int v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  if (sub_216B1FFE8((_DWORD *)a1))
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)sub_216B212F0(v12, 0);
  }
  else
  {
    v4 = sub_216B1D53C((unsigned int *)a1);
    sub_216B211C4(v4);
    *(_QWORD *)(a1 + 8) = v5;
    v11 = sub_216B1E67C((uint64_t)v12);
    v10 = sub_216B1D53C((unsigned int *)a1);
    v6 = *(_DWORD *)sub_216B1D574(&v11, &v10);
    v7 = *(void **)(a1 + 8);
    v8 = (const void *)sub_216B1E600((uint64_t)v12);
    memcpy(v7, v8, (8 * v6));
  }
  return sub_216B200BC(a1);
}

uint64_t sub_216B212F0(_QWORD *a1, uint64_t a2)
{
  return *a1 + 8 * a2;
}

uint64_t sub_216B212FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  sub_216B21244(a1, a3, a4);
  return a1;
}

uint64_t sub_216B21334(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  const void *v6;
  int v7;
  unsigned int v9;
  void *v10;
  int v11;
  const void *v12;
  int v13;
  _BOOL4 v14;
  void *v15;

  if (a1 == a2)
    return a1;
  v4 = *(_DWORD *)a1;
  if (v4 == sub_216B1E4E0((unsigned int *)a2))
  {
    v5 = *(void **)(a1 + 8);
    v6 = *(const void **)(a2 + 8);
    v7 = sub_216B1D53C((unsigned int *)a1);
    memcpy(v5, v6, (8 * v7));
    return a1;
  }
  if (sub_216B1FFE8((_DWORD *)a1))
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v11 = sub_216B1D53C((unsigned int *)a1);
    if (v11 == sub_216B1D53C((unsigned int *)a2))
    {
      v10 = *(void **)(a1 + 8);
      goto LABEL_10;
    }
    v14 = sub_216B1FFE8((_DWORD *)a2);
    v15 = *(void **)(a1 + 8);
    if (v14)
    {
      if (v15)
        j__free(v15);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      goto LABEL_11;
    }
    if (v15)
      j__free(v15);
  }
  v9 = sub_216B1D53C((unsigned int *)a2);
  v10 = (void *)sub_216B2123C(v9);
  *(_QWORD *)(a1 + 8) = v10;
LABEL_10:
  v12 = *(const void **)(a2 + 8);
  v13 = sub_216B1D53C((unsigned int *)a2);
  memcpy(v10, v12, (8 * v13));
LABEL_11:
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return sub_216B200BC(a1);
}

uint64_t sub_216B21450(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    **(_QWORD **)(a1 + 8) = a2;
    v4 = (void *)(*(_QWORD *)(a1 + 8) + 8);
    v5 = sub_216B1D53C((unsigned int *)a1);
    bzero(v4, (8 * v5 - 8));
  }
  return sub_216B200BC(a1);
}

uint64_t sub_216B214AC(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    ++*(_QWORD *)(a1 + 8);
  }
  else
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = sub_216B1D53C((unsigned int *)a1);
    sub_216B21500(v2, v2, v3);
  }
  return sub_216B200BC(a1);
}

_QWORD *sub_216B21500(_QWORD *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3)
  {
    v3 = a3 - 1;
    do
    {
      v4 = *a2++;
      *result++ = v4 + 1;
    }
    while (v4 == -1 && v3-- != 0);
  }
  return result;
}

uint64_t sub_216B2152C(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  unsigned int v6;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    *(_QWORD *)(a1 + 8) += *(_QWORD *)(a2 + 8);
  }
  else
  {
    v4 = *(unint64_t **)(a1 + 8);
    v5 = *(uint64_t **)(a2 + 8);
    v6 = sub_216B1D53C((unsigned int *)a1);
    sub_216B21598(v4, (uint64_t *)v4, v5, v6);
  }
  return sub_216B200BC(a1);
}

unint64_t *sub_216B21598(unint64_t *result, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  unint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (a4)
  {
    v6 = result;
    v7 = 0;
    v8 = a4;
    do
    {
      result = (unint64_t *)sub_216B24E80(a2, a3);
      v10 = *a2++;
      v9 = v10;
      v11 = *a3++;
      v12 = *result;
      v13 = v9 + (v7 & 1) + v11;
      *v6 = v13;
      if (v13 >= v12)
        v7 &= v13 == v12;
      else
        v7 = 1;
      ++v6;
      --v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *sub_216B21624(_QWORD *result, unint64_t *a2, unint64_t *a3, unsigned int a4)
{
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a4)
  {
    v4 = 0;
    v5 = a4;
    do
    {
      v7 = *a2++;
      v6 = v7;
      if (v4)
      {
        v8 = *a3;
        v4 = *a3 > v6 - 1 || v6 == 0;
        --v6;
      }
      else
      {
        v8 = *a3;
        v4 = *a3 > v6;
      }
      *result++ = v6 - v8;
      ++a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_216B21678(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t *v11;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    *(_QWORD *)(a1 + 8) *= *(_QWORD *)(a2 + 8);
    sub_216B200BC(a1);
  }
  else
  {
    v4 = sub_216B2045C((int *)a1);
    if (v4)
    {
      v5 = sub_216B20274(v4 - 1);
      v6 = v5 + 1;
      if (v5 != -1)
      {
        v7 = sub_216B2045C((int *)a2);
        if (v7 && (v8 = sub_216B20274(v7 - 1), v9 = v8 + 1, v8 != -1))
        {
          v10 = v9 + v6;
          v11 = (unint64_t *)sub_216B2123C(v9 + v6);
          sub_216B217C4(v11, *(unint64_t **)(a1 + 8), v6, *(uint64_t **)(a2 + 8), v9);
          sub_216B2177C(a1);
          if (v9 + v6 >= sub_216B1D53C((unsigned int *)a1))
            v10 = sub_216B1D53C((unsigned int *)a1);
          memcpy(*(void **)(a1 + 8), v11, 8 * v10);
          sub_216B200BC(a1);
          j__free(v11);
        }
        else
        {
          sub_216B2177C(a1);
        }
      }
    }
  }
  return a1;
}

void sub_216B2177C(uint64_t a1)
{
  void *v2;
  size_t v3;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v2 = *(void **)(a1 + 8);
    v3 = 8 * sub_216B1D53C((unsigned int *)a1);
    bzero(v2, v3);
  }
}

unint64_t sub_216B217C4(unint64_t *a1, unint64_t *a2, unsigned int a3, uint64_t *a4, unsigned int a5)
{
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  result = sub_216B24ED4(a1, a2, a3, *a4);
  a1[a3] = result;
  if (a5 >= 2)
  {
    v11 = 1;
    do
    {
      if (a3)
      {
        v12 = 0;
        v13 = 0;
        v14 = a4[v11];
        v15 = HIDWORD(a4[v11]);
        do
        {
          v16 = a2[v12];
          v17 = HIDWORD(a2[v12]);
          v18 = v16 * (unint64_t)v14;
          v19 = __CFADD__(v18, v13);
          if (__CFADD__(v18, v13))
            v20 = 0x100000000;
          else
            v20 = 0;
          v21 = ((v18 + v13) >> 32) + v17 * (unint64_t)v14 + v20;
          v22 = v21 != 0;
          if (v21)
            v19 = 0;
          v23 = __CFADD__(v18, v13);
          v24 = v18 + v13;
          v25 = v16 * (unint64_t)v15;
          result = v21 + v25;
          v26 = v24 | ((unint64_t)result << 32);
          v27 = a1[(v11 + v12)];
          if (v23)
            v22 = 1;
          if (result)
            v22 = 0;
          if (v22 || v19)
            v28 = 0x100000000;
          else
            v28 = 0;
          a1[(v11 + v12)] = v26 + v27;
          v13 = v28
              + __CFADD__(v26, v27)
              + HIDWORD(v25)
              + v17 * (unint64_t)v15
              + HIDWORD(result);
          ++v12;
        }
        while (a3 != v12);
      }
      else
      {
        v13 = 0;
      }
      a1[v11++ + a3] = v13;
    }
    while (v11 != a5);
  }
  return result;
}

uint64_t sub_216B218DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v6 = sub_216B1D53C((unsigned int *)a1);
  v7 = sub_216B2123C(v6);
  v8 = v7;
  if (v6)
  {
    v9 = *(uint64_t **)(a1 + 8);
    v10 = *(uint64_t **)(a2 + 8);
    v11 = v6;
    v12 = (uint64_t *)v7;
    do
    {
      v14 = *v9++;
      v13 = v14;
      v15 = *v10++;
      *v12++ = v15 & v13;
      --v11;
    }
    while (v11);
  }
  v16 = sub_216B1E4E0((unsigned int *)a1);
  return sub_216B21960(a3, v8, v16);
}

uint64_t sub_216B21964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v6 = sub_216B1D53C((unsigned int *)a1);
  v7 = sub_216B2123C(v6);
  v8 = v7;
  if (v6)
  {
    v9 = *(uint64_t **)(a1 + 8);
    v10 = *(uint64_t **)(a2 + 8);
    v11 = v6;
    v12 = (uint64_t *)v7;
    do
    {
      v14 = *v9++;
      v13 = v14;
      v15 = *v10++;
      *v12++ = v15 | v13;
      --v11;
    }
    while (v11);
  }
  v16 = sub_216B1E4E0((unsigned int *)a1);
  return sub_216B21960(a3, v8, v16);
}

uint64_t sub_216B219E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE v19[16];

  v6 = sub_216B1D53C((unsigned int *)a1);
  v7 = sub_216B2123C(v6);
  v8 = v7;
  if (v6)
  {
    v9 = *(uint64_t **)(a1 + 8);
    v10 = *(uint64_t **)(a2 + 8);
    v11 = v6;
    v12 = (uint64_t *)v7;
    do
    {
      v14 = *v9++;
      v13 = v14;
      v15 = *v10++;
      *v12++ = v15 ^ v13;
      --v11;
    }
    while (v11);
  }
  v16 = sub_216B1E4E0((unsigned int *)a1);
  sub_216B21960((uint64_t)v19, v8, v16);
  v17 = sub_216B200BC((uint64_t)v19);
  sub_216B1E51C(a3, v17);
  return sub_216B1D998(v19);
}

uint64_t sub_216B21A94@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;

  if (sub_216B1FFE8(a1))
    return sub_216B1E414(a3, *a1, *(_QWORD *)(a2 + 8) * *((_QWORD *)a1 + 1), 0);
  v7 = sub_216B1E51C(a3, a1);
  return sub_216B21678(v7, a2);
}

uint64_t sub_216B21B00@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[2];

  if (sub_216B1FFE8(a1))
    return sub_216B1E414(a3, *a1, *(_QWORD *)(a2 + 8) + *((_QWORD *)a1 + 1), 0);
  sub_216B1E414(v12, *a1, 0, 0);
  v7 = (unint64_t *)v12[1];
  v8 = (uint64_t *)*((_QWORD *)a1 + 1);
  v9 = *(uint64_t **)(a2 + 8);
  v10 = sub_216B1D53C(a1);
  sub_216B21598(v7, v8, v9, v10);
  v11 = sub_216B200BC((uint64_t)v12);
  sub_216B1E51C(a3, v11);
  return sub_216B1D998(v12);
}

uint64_t sub_216B21BCC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[2];

  if (sub_216B1FFE8(a1))
    return sub_216B1E414(a3, *a1, *((_QWORD *)a1 + 1) - *(_QWORD *)(a2 + 8), 0);
  sub_216B1E414(v12, *a1, 0, 0);
  v7 = (_QWORD *)v12[1];
  v8 = (unint64_t *)*((_QWORD *)a1 + 1);
  v9 = *(unint64_t **)(a2 + 8);
  v10 = sub_216B1D53C(a1);
  sub_216B21624(v7, v8, v9, v10);
  v11 = sub_216B200BC((uint64_t)v12);
  sub_216B1E51C(a3, v11);
  return sub_216B1D998(v12);
}

uint64_t sub_216B21C98(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = sub_216B2045C((int *)a1);
  if (v4 != sub_216B2045C((int *)a2))
    return 0;
  if (v4 <= 0x40)
    return **(_QWORD **)(a1 + 8) == **(_QWORD **)(a2 + 8);
  v6 = sub_216B20274(v4 - 1);
  if (v6 < 0)
    return 1;
  v7 = v6;
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v7);
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v7);
    result = v8 == v9;
    v10 = __OFSUB__(v7--, 1);
  }
  while (v7 < 0 == v10 && v8 == v9);
  return result;
}

BOOL sub_216B21D44(uint64_t a1, uint64_t a2)
{
  return sub_216B2045C((int *)a1) <= 0x40 && **(_QWORD **)(a1 + 8) == a2;
}

uint64_t sub_216B21D88(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    return v4 < v5;
  }
  v7 = sub_216B2045C((int *)a1);
  v17 = v7;
  v8 = sub_216B2045C((int *)a2);
  v16 = v8;
  if (v7 < v8)
    return 1;
  if (v8 < v7)
    return 0;
  if (v7 <= 0x40)
  {
    v4 = **(_QWORD **)(a1 + 8);
    v5 = **(_QWORD **)(a2 + 8);
    return v4 < v5;
  }
  v9 = (_DWORD *)sub_216B21E8C(&v17, &v16);
  v10 = sub_216B20274(*v9 - 1);
  if (v10 < 0)
    return 0;
  v11 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10);
    v13 = *(_QWORD *)(v11 + 8 * v10);
    if (v12 > v13)
      break;
    if (v12 < v13)
    {
      v15 = 1;
      LODWORD(v11) = 1;
      return v15 & v11;
    }
    v14 = __OFSUB__(v10--, 1);
    if (v10 < 0 != v14)
    {
      v15 = 0;
      return v15 & v11;
    }
  }
  LODWORD(v11) = 0;
  v15 = 1;
  return v15 & v11;
}

BOOL sub_216B21E90(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  _DWORD v9[4];
  _BYTE v10[16];

  if (!sub_216B1FFE8((_DWORD *)a1))
  {
    sub_216B1E51C(v10, a1);
    sub_216B1E51C(v9, a2);
    v4 = sub_216B1E520((_DWORD *)a1);
    v5 = sub_216B1E520(v9);
    v6 = v5;
    if (v4)
    {
      sub_216B21F88((uint64_t)v10);
      sub_216B214AC((uint64_t)v10);
      if (!v6)
      {
        v4 = 1;
LABEL_11:
        sub_216B1D998(v9);
        sub_216B1D998(v10);
        return v4;
      }
    }
    else if (!v5)
    {
      v7 = sub_216B21D88((uint64_t)v10, (uint64_t)v9);
      goto LABEL_10;
    }
    sub_216B21F88((uint64_t)v9);
    sub_216B214AC((uint64_t)v9);
    if (!v4)
      goto LABEL_11;
    v7 = sub_216B21FF4((uint64_t)v10, (uint64_t)v9);
LABEL_10:
    v4 = v7;
    goto LABEL_11;
  }
  return (uint64_t)(*(_QWORD *)(a1 + 8) << -*(_BYTE *)a1) >> -*(_BYTE *)a1 < (uint64_t)(*(_QWORD *)(a2 + 8) << -*(_BYTE *)a1) >> -*(_BYTE *)a1;
}

uint64_t sub_216B21F88(uint64_t a1)
{
  unint64_t v2;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    *(_QWORD *)(a1 + 8) = ~*(_QWORD *)(a1 + 8);
  }
  else if (sub_216B1D53C((unsigned int *)a1))
  {
    v2 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v2) = ~*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v2);
      ++v2;
    }
    while (v2 < sub_216B1D53C((unsigned int *)a1));
  }
  return sub_216B200BC(a1);
}

uint64_t sub_216B21FF4(uint64_t a1, uint64_t a2)
{
  if ((sub_216B21D88(a1, a2) & 1) != 0)
    return 0;
  else
    return sub_216B24F74(a1, a2) ^ 1;
}

uint64_t sub_216B22034(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;

  v2 = *(_DWORD *)a1 & 0x3F;
  if (v2)
    v3 = v2;
  else
    v3 = 64;
  if (v2)
    v4 = ~(-1 << *(_DWORD *)a1);
  else
    v4 = -1;
  v5 = sub_216B1D53C((unsigned int *)a1);
  v6 = *(_QWORD *)(a1 + 8);
  if ((v4 & *(_QWORD *)(v6 + 8 * (v5 - 1))) != 0)
    return v3 + sub_216B204CC(v4 & *(_QWORD *)(v6 + 8 * (v5 - 1)), 2) - 64;
  if (v5 != 1)
  {
    v8 = (v3 + (v5 << 6) - 64);
    v9 = v5 - 2;
    while (1)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        break;
      LODWORD(v3) = v3 + 64;
      if (!v9--)
        return v8;
    }
    return sub_216B204CC(v10, 2) + v3;
  }
  return v3;
}

uint64_t sub_216B220E8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  int v5;
  int v6;
  uint64_t v7;

  if (sub_216B1FFE8((_DWORD *)a1))
    return sub_216B221CC(*(_QWORD *)(a1 + 8) << -*(_BYTE *)a1);
  if ((*(_DWORD *)a1 & 0x3F) != 0)
    v3 = *(_DWORD *)a1 & 0x3F;
  else
    v3 = 64;
  if ((*(_DWORD *)a1 & 0x3F) != 0)
    v4 = 64 - (*(_BYTE *)a1 & 0x3F);
  else
    v4 = 0;
  v5 = sub_216B1D53C((unsigned int *)a1);
  v6 = v5 - 1;
  result = sub_216B221CC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v5 - 1)) << v4);
  if ((_DWORD)result == (_DWORD)v3)
  {
    if (v5 - 2 < 0)
    {
      return v3;
    }
    else
    {
      result = (v3 + (v5 << 6) - 64);
      while (1)
      {
        --v6;
        v7 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v7 + 8 * v6) != -1)
          break;
        LODWORD(v3) = v3 + 64;
        if (v6 <= 0)
          return result;
      }
      return sub_216B221CC(*(_QWORD *)(v7 + 8 * v6)) + v3;
    }
  }
  return result;
}

uint64_t sub_216B221CC(uint64_t a1)
{
  return sub_216B204CC(~a1, 2);
}

uint64_t sub_216B221E8(uint64_t a1)
{
  int *v2;
  unint64_t v3;
  int v4;
  int v6;
  int v7;

  if (sub_216B1FFE8((_DWORD *)a1))
  {
    v7 = sub_216B222B4(*(_QWORD *)(a1 + 8), 2);
    v2 = &v7;
  }
  else
  {
    if (sub_216B1D53C((unsigned int *)a1))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3))
          break;
        v4 += 64;
        ++v3;
      }
      while (v3 < sub_216B1D53C((unsigned int *)a1));
    }
    else
    {
      v4 = 0;
      LODWORD(v3) = 0;
    }
    v6 = v4;
    if (v3 < sub_216B1D53C((unsigned int *)a1))
      v6 = v4 + sub_216B222B4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3), 2);
    v2 = &v6;
  }
  return *(unsigned int *)sub_216B1D574(v2, a1);
}

uint64_t sub_216B222B4(unint64_t a1, int a2)
{
  BOOL v2;
  unint64_t v3;

  if (a2)
    v2 = a1 == 0;
  else
    v2 = 0;
  v3 = __clz(__rbit64(a1));
  if (v2)
    return 64;
  else
    return v3;
}

uint64_t sub_216B222D0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!sub_216B1D53C((unsigned int *)a1))
    return 0;
  v2 = 0;
  LODWORD(v3) = 0;
  do
    v3 = sub_216B22334(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v2++)) + v3;
  while (v2 < sub_216B1D53C((unsigned int *)a1));
  return v3;
}

uint64_t sub_216B22334(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t sub_216B2234C(uint64_t result, uint64_t a2, int a3, char a4)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a3 - 1;
  if (a3 - 1 >= 0)
  {
    v5 = 0;
    v6 = (unint64_t *)(a2 + 8 * v4);
    v7 = (unint64_t *)(result + 8 * v4);
    do
    {
      v8 = *v6--;
      *v7-- = (v8 >> a4) | v5;
      v5 = v8 << (64 - a4);
      --a3;
    }
    while (a3);
  }
  return result;
}

BOOL sub_216B2238C(uint64_t a1)
{
  _BOOL8 v2;
  unsigned int v3;
  uint64_t v4;

  if (sub_216B1FFE8((_DWORD *)a1))
    return *(_QWORD *)(a1 + 8) == 0;
  if (!sub_216B1D53C((unsigned int *)a1))
    return 1;
  v3 = 0;
  do
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
    v2 = v4 == 0;
    if (v4)
      break;
    ++v3;
  }
  while (v3 != sub_216B1D53C((unsigned int *)a1));
  return v2;
}

uint64_t sub_216B2240C(uint64_t a1, uint64_t a2)
{
  if (!sub_216B1FFE8((_DWORD *)a1) || !sub_216B1FFE8((_DWORD *)a2))
    return sub_216B21334(a1, a2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  return sub_216B200BC(a1);
}

uint64_t sub_216B22468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (a2 > 0x40)
  {
    v8 = sub_216B1FFD8(a2);
    v9 = sub_216B2123C(v8);
    result = sub_216B21960(a3, v9, a2);
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 8) + v10) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v10);
      v10 += 8;
    }
    while (8 * (a2 >> 6) != v10);
    v11 = -(int)a2 & 0x3F;
    if (v11)
      *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * (a2 >> 6)) = *(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                   + 8 * (a2 >> 6)) & (0xFFFFFFFFFFFFFFFFLL >> v11);
  }
  else
  {
    v6 = *(_QWORD *)sub_216B1D544((_DWORD *)a1);
    return sub_216B1E414(a3, a2, v6, 0);
  }
  return result;
}

uint64_t sub_216B22530@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;

  v3 = a2;
  if (a2 <= 0x40)
    return sub_216B1E414(a3, a2, (unint64_t)((uint64_t)(*((_QWORD *)a1 + 1) << -*(_BYTE *)a1) >> (a2- *a1)) >> -(char)a2, 0);
  v7 = sub_216B1FFD8(a2);
  v8 = sub_216B2123C(v7);
  result = sub_216B21960(a3, v8, v3);
  v9 = *a1;
  if (*a1 >= 0x40)
  {
    v10 = 0;
    do
    {
      result = (uint64_t)sub_216B1D544(a1);
      v12 = *(_QWORD *)(result + 8 * v10);
      *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v10++) = v12;
      v9 = *a1;
    }
    while (v10 != *a1 >> 6);
    v11 = v12 >> 63;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v13 = -(char)v9 & 0x3F;
  if (v13)
  {
    result = (uint64_t)sub_216B1D544(a1);
    v11 = (uint64_t)(*(_QWORD *)(result + 8 * v10) << v13) >> v13;
  }
  if (v10 != v3 >> 6)
  {
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v10) = v11;
      v11 >>= 63;
      ++v10;
    }
    while (v3 >> 6 != v10);
    v10 = v3 >> 6;
  }
  v14 = -v3 & 0x3F;
  if (v14)
    *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v10) = v11 & (0xFFFFFFFFFFFFFFFFLL >> v14);
  return result;
}

void sub_216B22674(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  size_t v10;

  v3 = a2;
  if (a2 > 0x40)
  {
    v6 = sub_216B1FFD8(a2);
    v7 = sub_216B2123C(v6);
    sub_216B21960(a3, v7, v3);
    v8 = 0;
    if (sub_216B1D53C((unsigned int *)a1))
    {
      do
      {
        *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v8) = *(_QWORD *)&sub_216B1D544((_DWORD *)a1)[2 * v8];
        ++v8;
      }
      while (v8 != sub_216B1D53C((unsigned int *)a1));
    }
    v9 = (void *)(*(_QWORD *)(a3 + 8) + 8 * v8);
    v10 = 8 * (sub_216B1D53C((unsigned int *)a3) - v8);
    bzero(v9, v10);
  }
  else
  {
    sub_216B1E414(a3, a2, *(_QWORD *)(a1 + 8), 0);
  }
}

uint64_t sub_216B22738@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];

  if (!(_DWORD)a2)
    return sub_216B1E51C(a3, a1);
  v6 = sub_216B1FFE8(a1);
  v7 = *a1;
  if (v6)
  {
    if ((_DWORD)v7 != (_DWORD)a2)
    {
      v11 = (uint64_t)(*((_QWORD *)a1 + 1) << -(char)v7) >> -(char)v7 >> a2;
      v8 = a3;
LABEL_27:
      v12 = 0;
      return sub_216B1E414(v8, v7, v11, v12);
    }
    v8 = a3;
    v7 = a2;
LABEL_26:
    v11 = 0;
    goto LABEL_27;
  }
  if ((_DWORD)v7 == (_DWORD)a2)
  {
    v10 = sub_216B1E520(a1);
    v7 = *a1;
    if (v10)
    {
      v8 = a3;
      v11 = -1;
      v12 = 1;
      return sub_216B1E414(v8, v7, v11, v12);
    }
    v8 = a3;
    goto LABEL_26;
  }
  v13 = sub_216B1D53C(a1);
  v14 = sub_216B1D1D4(8 * v13);
  v15 = a2 & 0x3F;
  v16 = sub_216B1D53C(a1) - 1;
  v17 = v16 - (a2 >> 6);
  v18 = sub_216B2027C(*a1);
  if (v18)
    v19 = v18;
  else
    v19 = 64;
  if ((a2 & 0x3F) != 0)
  {
    v20 = a2 >> 6;
    v21 = *((_QWORD *)a1 + 1);
    if (v16 != v20)
    {
      if (v17 <= 1)
        v22 = 1;
      else
        v22 = v17;
      v23 = v20;
      v24 = (unint64_t *)v14;
      do
      {
        v25 = *(_QWORD *)(v21 + 8 * v23++);
        *v24++ = (*(_QWORD *)(v21 + 8 * v23) << (64 - v15)) | (v25 >> v15);
        --v22;
      }
      while (v22);
    }
    v26 = *(_QWORD *)(v21 + 8 * v16) >> v15;
    *(_QWORD *)(v14 + 8 * v17) = v26;
    if (!sub_216B1E520(a1))
      goto LABEL_37;
    v27 = v19 - v15;
    if (v19 >= v15)
    {
      v28 = v26 | (-1 << v27);
    }
    else
    {
      if (v16 != v20)
        *(_QWORD *)(v14 + 8 * (v17 - 1)) |= -1 << v27;
      v28 = -1;
    }
  }
  else
  {
    v29 = 0;
    v30 = *((_QWORD *)a1 + 1);
    do
      *(_QWORD *)(v14 + 8 * v29) = *(_QWORD *)(v30 + 8 * ((a2 >> 6) + v29));
    while (v29++ < v17);
    if (!sub_216B1E520(a1) || v19 >= 0x40)
      goto LABEL_37;
    v28 = *(_QWORD *)(v14 + 8 * v17) | (-1 << v19);
  }
  *(_QWORD *)(v14 + 8 * v17) = v28;
LABEL_37:
  v32 = sub_216B1E520(a1);
  v33 = (v17 + 1);
  if (v33 < sub_216B1D53C(a1))
  {
    v34 = v32 << 63 >> 63;
    do
      *(_QWORD *)(v14 + 8 * v33++) = v34;
    while (v33 < sub_216B1D53C(a1));
  }
  sub_216B21960((uint64_t)v36, v14, *a1);
  v35 = sub_216B200BC((uint64_t)v36);
  sub_216B1E51C(a3, v35);
  return sub_216B1D998(v36);
}

uint64_t sub_216B229E0(int *a1, unint64_t a2)
{
  if (sub_216B2045C(a1) <= 0x40 && sub_216B1FD84(a1) <= a2)
    return sub_216B1FD84(a1);
  else
    return a2;
}

uint64_t sub_216B22A30@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE v28[16];

  v6 = sub_216B1FFE8(a1);
  v7 = *a1;
  if (v6)
  {
    if (v7 > a2)
    {
      v8 = *((_QWORD *)a1 + 1) >> a2;
      v9 = a3;
      return sub_216B1E414(v9, v7, v8, 0);
    }
LABEL_8:
    v9 = a3;
    v8 = 0;
    return sub_216B1E414(v9, v7, v8, 0);
  }
  if (v7 <= a2)
    goto LABEL_8;
  if (!a2)
    return sub_216B1E51C(a3, a1);
  v10 = sub_216B1D53C(a1);
  v11 = sub_216B1D1D4(8 * v10);
  if (a2 > 0x3F)
  {
    v15 = a2 & 0x3F;
    v16 = a2 >> 6;
    v17 = sub_216B1D53C(a1);
    if ((a2 & 0x3F) != 0)
    {
      v18 = v17 - v16;
      v19 = *((_QWORD *)a1 + 1);
      v20 = (v18 - 1);
      if ((_DWORD)v18 == 1)
      {
        v20 = 0;
      }
      else
      {
        v21 = (v18 - 1);
        v22 = (unint64_t *)v11;
        do
        {
          v23 = *(_QWORD *)(v19 + 8 * v16++);
          *v22++ = (*(_QWORD *)(v19 + 8 * v16) << (64 - v15)) | (v23 >> v15);
          --v21;
        }
        while (v21);
      }
      *(_QWORD *)(v11 + 8 * v20) = *(_QWORD *)(v19 + 8 * (v17 - 1)) >> v15;
      if (v18 < sub_216B1D53C(a1))
      {
        do
          *(_QWORD *)(v11 + 8 * v18++) = 0;
        while (v18 < sub_216B1D53C(a1));
      }
    }
    else
    {
      if (v17 != v16)
      {
        v24 = 0;
        v25 = (unint64_t)a2 >> 6;
        do
        {
          *(_QWORD *)(v11 + 8 * v24) = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * (v25 + v24));
          ++v24;
        }
        while (v24 < sub_216B1D53C(a1) - v16);
      }
      v26 = sub_216B1D53C(a1) - v16;
      if (v26 < sub_216B1D53C(a1))
      {
        do
          *(_QWORD *)(v11 + 8 * v26++) = 0;
        while (v26 < sub_216B1D53C(a1));
      }
    }
  }
  else
  {
    v12 = *((_QWORD *)a1 + 1);
    v13 = sub_216B1D53C(a1);
    sub_216B2234C(v11, v12, v13, a2);
  }
  sub_216B21960((uint64_t)v28, v11, *a1);
  v27 = sub_216B200BC((uint64_t)v28);
  sub_216B1E51C(a3, v27);
  return sub_216B1D998(v28);
}

uint64_t sub_216B22C54@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = sub_216B229E0(a2, *a1);
  return sub_216B20130(a1, v5, a3);
}

uint64_t sub_216B22C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];

  v3 = a2;
  if (*(_DWORD *)a1 == (_DWORD)a2)
    return sub_216B1E414(a3, a2, 0, 0);
  if (!(_DWORD)a2)
    return sub_216B1E51C(a3, a1);
  v7 = sub_216B1D53C((unsigned int *)a1);
  v8 = (_QWORD *)sub_216B1D1D4(8 * v7);
  v9 = v8;
  if (v3 > 0x3F)
  {
    v15 = v3 >> 6;
    v16 = v3 & 0x3F;
    if ((v3 & 0x3F) != 0)
    {
      v17 = sub_216B1D53C((unsigned int *)a1);
      v18 = v17 - 1;
      v19 = *(_QWORD **)(a1 + 8);
      if (v17 - 1 > v15)
      {
        v20 = v17 - v15 - 2;
        v21 = &v9[v18];
        do
        {
          *v21-- = (v19[v20] >> (64 - v16)) | (v19[v20 + 1] << v16);
          --v20;
          --v18;
        }
        while (v15 < v18);
      }
      v9[v15] = *v19 << v16;
      if (v15 <= 1)
        v22 = 1;
      else
        v22 = v3 >> 6;
      bzero(v9, (8 * v22));
    }
    else
    {
      bzero(v8, (v3 >> 3) & 0x1FFFFFF8);
      if (v15 < sub_216B1D53C((unsigned int *)a1))
      {
        v23 = 0;
        do
        {
          v9[v15 + v23] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v23);
          ++v23;
        }
        while (v15 + v23 < (unint64_t)sub_216B1D53C((unsigned int *)a1));
      }
    }
  }
  else if (sub_216B1D53C((unsigned int *)a1))
  {
    v10 = 0;
    v11 = 0;
    v12 = v3;
    v13 = 64 - v3;
    do
    {
      v14 = *(_QWORD *)(a1 + 8);
      v9[v10] = (*(_QWORD *)(v14 + 8 * v10) << v12) | v11;
      v11 = *(_QWORD *)(v14 + 8 * v10++) >> v13;
    }
    while (v10 < sub_216B1D53C((unsigned int *)a1));
  }
  sub_216B21960((uint64_t)v25, (uint64_t)v9, *(_DWORD *)a1);
  v24 = sub_216B200BC((uint64_t)v25);
  sub_216B1E51C(a3, v24);
  return sub_216B1D998(v25);
}

uint64_t sub_216B22EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  if (!sub_216B1FFE8((_DWORD *)a1))
    return sub_216B21964(a1, a2, a3);
  v6 = sub_216B1E4E0((unsigned int *)a1);
  return sub_216B1E414(a3, v6, *(_QWORD *)(a2 + 8) | *(_QWORD *)(a1 + 8), 0);
}

uint64_t sub_216B22F14(uint64_t a1, uint64_t a2)
{
  if ((sub_216B21D88(a1, a2) & 1) != 0)
    return 1;
  else
    return sub_216B24F74(a1, a2);
}

uint64_t sub_216B22F54@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  _BYTE v18[16];

  if (sub_216B1FFE8(a1))
  {
    v6 = *a1;
    v7 = *((_QWORD *)a1 + 1);
    v8 = *(_QWORD *)(a2 + 8);
LABEL_3:
    v9 = v7 / v8;
    v10 = a3;
    return sub_216B1E414(v10, v6, v9, 0);
  }
  v11 = sub_216B2045C((int *)a2);
  if (v11)
    v12 = sub_216B20274(v11 - 1) + 1;
  else
    v12 = 0;
  v13 = sub_216B2045C((int *)a1);
  if (!v13
    || (v14 = sub_216B20274(v13 - 1), v15 = v14 + 1, v14 == -1)
    || v15 < v12
    || (v16 = v14, sub_216B21D88((uint64_t)a1, a2)))
  {
    v6 = *a1;
    v10 = a3;
    v9 = 0;
    return sub_216B1E414(v10, v6, v9, 0);
  }
  if (sub_216B2346C((uint64_t)a1, a2))
  {
    v6 = *a1;
    v10 = a3;
    v9 = 1;
    return sub_216B1E414(v10, v6, v9, 0);
  }
  if (!v16 && (_DWORD)v12 == 1)
  {
    v6 = *a1;
    v7 = **((_QWORD **)a1 + 1);
    v8 = **(_QWORD **)(a2 + 8);
    goto LABEL_3;
  }
  sub_216B1E414(a3, 1, 0, 0);
  sub_216B1E51C(v18, a1);
  sub_216B234B8((uint64_t)v18, v15, a2, v12, a3, 0);
  return sub_216B1D998(v18);
}

uint64_t sub_216B230B8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];

  sub_216B1E414(v6, *a1, a2, 0);
  sub_216B21B00(a1, (uint64_t)v6, a3);
  return sub_216B1D998(v6);
}

uint64_t sub_216B2310C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _BYTE v27[16];
  int v28[4];

  v8 = sub_216B2045C((int *)a1);
  if (v8)
    v9 = sub_216B20274(v8 - 1) + 1;
  else
    v9 = 0;
  v10 = sub_216B2045C((int *)a2);
  if (!v10)
  {
    v11 = 0;
    if (v9)
      goto LABEL_6;
LABEL_10:
    v13 = a3;
    v14 = 0;
LABEL_11:
    sub_216B21450(v13, v14);
    v12 = a4;
    return sub_216B21450(v12, 0);
  }
  v11 = sub_216B20274(v10 - 1) + 1;
  if (!v9)
    goto LABEL_10;
LABEL_6:
  if (v9 < v11 || sub_216B21D88(a1, a2))
  {
    sub_216B2240C(a4, a1);
    v12 = a3;
    return sub_216B21450(v12, 0);
  }
  if (sub_216B2346C(a1, a2))
  {
    v13 = a3;
    v14 = 1;
    goto LABEL_11;
  }
  if (v9 == 1 && (_DWORD)v11 == 1)
  {
    v16 = sub_216B1FFE8((_DWORD *)a1);
    v17 = (unint64_t *)(a1 + 8);
    if (!v16)
      v17 = *(unint64_t **)(a1 + 8);
    v18 = *v17;
    v19 = sub_216B1FFE8((_DWORD *)a2);
    v22 = *(unint64_t **)(a2 + 8);
    v21 = (unint64_t *)(a2 + 8);
    v20 = v22;
    if (v19)
      v20 = v21;
    v23 = *v20;
    v24 = sub_216B1E4E0((unsigned int *)a1);
    sub_216B1E414(v28, v24, v18 / v23, 0);
    sub_216B1E580(a3, v28);
    sub_216B1D998(v28);
    v25 = sub_216B1E4E0((unsigned int *)a1);
    sub_216B1E414(v28, v25, v18 % v23, 0);
    sub_216B1E580(a4, v28);
    v26 = v28;
  }
  else
  {
    sub_216B1E51C(v27, a1);
    sub_216B234B8((uint64_t)v27, v9, a2, v11, a3, a4);
    v26 = (int *)v27;
  }
  return sub_216B1D998(v26);
}

uint64_t sub_216B232D8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _BYTE v16[16];

  if (sub_216B1FFE8(a1))
  {
    v6 = *a1;
    v7 = *((_QWORD *)a1 + 1);
    v8 = *(_QWORD *)(a2 + 8);
LABEL_3:
    v9 = v7 % v8;
    v10 = a3;
    return sub_216B1E414(v10, v6, v9, 0);
  }
  v11 = sub_216B2045C((int *)a1);
  if (v11)
    v12 = sub_216B20274(v11 - 1) + 1;
  else
    v12 = 0;
  v13 = sub_216B2045C((int *)a2);
  if (v13)
  {
    v14 = sub_216B20274(v13 - 1) + 1;
    if (!v12)
      goto LABEL_15;
  }
  else
  {
    v14 = 0;
    if (!v12)
    {
LABEL_15:
      v6 = *a1;
      v10 = a3;
      v9 = 0;
      return sub_216B1E414(v10, v6, v9, 0);
    }
  }
  if (v12 < v14 || sub_216B21D88((uint64_t)a1, a2))
    return sub_216B1E51C(a3, a1);
  if (sub_216B2346C((uint64_t)a1, a2))
    goto LABEL_15;
  if (v12 == 1)
  {
    v6 = *a1;
    v7 = **((_QWORD **)a1 + 1);
    v8 = **(_QWORD **)(a2 + 8);
    goto LABEL_3;
  }
  sub_216B1E414(a3, 1, 0, 0);
  sub_216B1E51C(v16, a1);
  sub_216B234B8((uint64_t)v16, v12, a2, v14, 0, a3);
  return sub_216B1D998(v16);
}

uint64_t sub_216B23454(uint64_t a1, uint64_t a2)
{
  return sub_216B21D88(a1, a2) ^ 1;
}

uint64_t sub_216B2346C(uint64_t a1, uint64_t a2)
{
  if (sub_216B1FFE8((_DWORD *)a1))
    return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  else
    return sub_216B21C98(a1, a2);
}

void sub_216B234B8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  unsigned int *v16;
  int v17;
  uint64_t *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  void *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  _DWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v10 = (2 * a4);
  v11 = 2 * a2;
  v65 = a4;
  if (a6)
    v12 = 4;
  else
    v12 = 3;
  v59 = v11 - 2 * a4;
  v13 = (v12 * v10 + 2 * v59) | 1;
  v14 = (2 * a2) | 1;
  v15 = 4 * v14;
  if (v13 > 0x80)
  {
    v20 = (_DWORD *)sub_216B1D1D4(4 * v14);
    v16 = (unsigned int *)sub_216B1D1D4(4 * v10);
    v62 = (uint64_t *)sub_216B1D1D4(4 * v11);
    if (a6)
      v61 = (_DWORD *)sub_216B1D1D4(4 * v10);
    else
      v61 = 0;
  }
  else
  {
    v16 = &v66[v14];
    v17 = v10 + v14;
    v18 = (uint64_t *)&v66[v17];
    v19 = &v66[(v17 + v11)];
    v20 = v66;
    if (!a6)
      v19 = 0;
    v61 = v19;
    v62 = v18;
  }
  v63 = a6;
  bzero(v20, v15);
  v64 = a2;
  if (a2)
  {
    v21 = 0;
    v22 = 8 * a2;
    v23 = 1;
    do
    {
      v24 = sub_216B1D53C((unsigned int *)a1);
      v25 = (uint64_t *)(a1 + 8);
      if (v24 != 1)
        v25 = (uint64_t *)(*(_QWORD *)(a1 + 8) + v21);
      v26 = *v25;
      v20[v23 - 1] = v26;
      v20[v23] = HIDWORD(v26);
      v21 += 8;
      v23 += 2;
    }
    while (v22 != v21);
  }
  v20[v11] = 0;
  bzero(v16, 4 * v10);
  if ((_DWORD)v65)
  {
    v27 = 0;
    v28 = 8 * v65;
    v29 = 1;
    do
    {
      v30 = sub_216B1D53C((unsigned int *)a3);
      v31 = (uint64_t *)(*(_QWORD *)(a3 + 8) + v27);
      if (v30 == 1)
        v31 = (uint64_t *)(a3 + 8);
      v32 = *v31;
      v16[v29 - 1] = v32;
      v16[v29] = HIDWORD(v32);
      v27 += 8;
      v29 += 2;
    }
    while (v28 != v27);
  }
  bzero(v62, 4 * v11);
  if (v63)
    bzero(v61, 4 * v10);
  if ((_DWORD)v10)
  {
    while (!v16[v10 - 1])
    {
      if (!--v10)
        goto LABEL_29;
    }
    LODWORD(v11) = v11 - v10;
  }
  else
  {
    LODWORD(v11) = v59;
  }
LABEL_29:
  if ((_DWORD)v11 + (_DWORD)v10)
  {
    v33 = (v11 + v10);
    while (!v20[v33 - 1])
    {
      LODWORD(v11) = v11 - 1;
      if (!(--v33 * 4))
      {
        LODWORD(v11) = -(int)v10;
        break;
      }
    }
  }
  if ((_DWORD)v10 == 1)
  {
    v34 = 0;
    if ((v11 & 0x80000000) == 0)
    {
      v35 = *v16;
      v36 = v11;
      v37 = v65;
      v38 = a5;
      while (1)
      {
        v39 = v34;
        v34 = v20[v36];
        v40 = v34 | (v39 << 32);
        if (v40)
        {
          if (v40 >= v35)
          {
            if (v40 == v35)
            {
              v34 = 0;
              *((_DWORD *)v62 + v36) = 1;
            }
            else
            {
              v42 = v40 / v35;
              *((_DWORD *)v62 + v36) = v42;
              v34 = (v34 - v35 * v42);
            }
            goto LABEL_44;
          }
        }
        else
        {
          v34 = 0;
        }
        *((_DWORD *)v62 + v36) = 0;
LABEL_44:
        if (v36-- <= 0)
          goto LABEL_49;
      }
    }
    v37 = v65;
    v38 = a5;
LABEL_49:
    if (v61)
      *v61 = v34;
  }
  else
  {
    sub_216B239A4(v20, (int *)v16, (uint64_t)v62, (uint64_t)v61, v11, v10);
    v37 = v65;
    v38 = a5;
  }
  if (v38)
  {
    if (*(_DWORD *)v38 == *(_DWORD *)a1)
    {
      sub_216B2177C(v38);
    }
    else
    {
      if (sub_216B1FFE8((_DWORD *)v38))
      {
        *(_QWORD *)(v38 + 8) = 0;
      }
      else
      {
        v43 = *(void **)(v38 + 8);
        if (v43)
          j__free(v43);
      }
      *(_DWORD *)v38 = *(_DWORD *)a1;
      if (!sub_216B1FFE8((_DWORD *)v38))
      {
        v44 = sub_216B1D53C((unsigned int *)v38);
        sub_216B211C4(v44);
        *(_QWORD *)(v38 + 8) = v45;
      }
    }
    if (v64 == 1)
    {
      v46 = *v62;
      v47 = sub_216B1FFE8((_DWORD *)v38);
      v48 = (_QWORD *)(v38 + 8);
      if (!v47)
        v48 = (_QWORD *)*v48;
      *v48 = v46;
    }
    else if (v64)
    {
      v49 = 0;
      v50 = 1;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v38 + 8) + v49) = *((unsigned int *)v62 + v50 - 1) | ((unint64_t)*((unsigned int *)v62 + v50) << 32);
        v49 += 8;
        v50 += 2;
      }
      while (8 * v64 != v49);
    }
  }
  if (v63)
  {
    if (*(_DWORD *)v63 == *(_DWORD *)a3)
    {
      sub_216B2177C(v63);
    }
    else
    {
      if (sub_216B1FFE8((_DWORD *)v63))
      {
        *(_QWORD *)(v63 + 8) = 0;
      }
      else
      {
        v51 = *(void **)(v63 + 8);
        if (v51)
          j__free(v51);
      }
      *(_DWORD *)v63 = *(_DWORD *)a3;
      if (!sub_216B1FFE8((_DWORD *)v63))
      {
        v52 = sub_216B1D53C((unsigned int *)v63);
        sub_216B211C4(v52);
        *(_QWORD *)(v63 + 8) = v53;
      }
    }
    if (v37 == 1)
    {
      v54 = *(_QWORD *)v61;
      v55 = sub_216B1FFE8((_DWORD *)v63);
      v56 = (_QWORD *)(v63 + 8);
      if (!v55)
        v56 = (_QWORD *)*v56;
      *v56 = v54;
    }
    else if (v37)
    {
      v57 = 0;
      v58 = 1;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v63 + 8) + v57) = v61[v58 - 1] | ((unint64_t)v61[v58] << 32);
        v57 += 8;
        v58 += 2;
      }
      while (8 * v37 != v57);
    }
  }
  if (v20 != v66)
  {
    j__free(v20);
    j__free(v16);
    j__free(v62);
    if (v61)
      j__free(v61);
  }
}

uint64_t sub_216B239A4(int *a1, int *a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  unsigned int v6;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  char v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  int *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;

  v6 = a6;
  v12 = a6 - 1;
  v13 = sub_216B24FA4(a2[v12], 2);
  v14 = v6 + a5;
  v58 = v13;
  v59 = a4;
  if (v13)
  {
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = v6 + a5;
      v17 = a1;
      do
      {
        v18 = *v17 >> (32 - v13);
        *v17 = (*v17 << v13) | v15;
        ++v17;
        v15 = v18;
        --v16;
      }
      while (v16);
      if (!v6)
        goto LABEL_11;
      goto LABEL_9;
    }
    v18 = 0;
    if (v6)
    {
LABEL_9:
      v19 = 0;
      v20 = v6;
      v21 = a2;
      do
      {
        v22 = *v21 >> (32 - v13);
        *v21 = (*v21 << v13) | v19;
        ++v21;
        v19 = v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v18 = 0;
  }
LABEL_11:
  a1[v14] = v18;
  v23 = v6 - 2;
  v24 = a5;
  LODWORD(result) = a5 + 3;
  v26 = v6;
  v63 = v12;
  v62 = v6;
  v60 = v23;
  v61 = a3;
  do
  {
    v27 = v24 + v6;
    v28 = a1[v27 - 1] | ((unint64_t)a1[v27] << 32);
    v29 = a2[v12];
    v30 = v28 / v29;
    v31 = v28 % v29;
    if (v28 / v29 == 0x100000000
      || (v32 = v28 / v29, v30 * a2[v23] > (a1[v27 - 2] | (v31 << 32))))
    {
      v32 = v30 - 1;
      v33 = v31 + v29;
      if (!HIDWORD(v33)
        && (v30 == 0x100000001 || v32 * a2[v23] > (a1[v27 - 2] | (v33 << 32))))
      {
        v32 = v30 - 2;
      }
    }
    if (!v6)
      goto LABEL_44;
    v34 = 0;
    v35 = 0;
    v36 = result;
    do
    {
      v37 = v34 + v24 + 1;
      v38 = a1[(v34 + v24)] | ((unint64_t)a1[v37] << 32);
      v39 = v32 * a2[v34];
      v40 = v38 >= v39;
      v41 = v38 - v39;
      a1[(v34 + v24)] = v41;
      v42 = !v40;
      a1[v37] = HIDWORD(v41);
      v43 = v40 || (int)v34 + (int)v24 + 2 > v14;
      if (!v43)
      {
        v44 = v36;
        do
        {
          v45 = a1[v44 - 1];
          v42 = v45 == 0;
          a1[v44 - 1] = v45 - 1;
          if (v45)
            v46 = 1;
          else
            v46 = v44 > v14;
          ++v44;
        }
        while (!v46);
      }
      v35 |= v42;
      ++v34;
      ++v36;
    }
    while (v34 != v26);
    if ((v35 & 1) != 0)
    {
      v47 = 0;
      v48 = 1;
      do
      {
        v49 = ~a1[v47] + (v48 & 1);
        a1[v47] = v49;
        v48 &= v49 == 0;
        v40 = v47++ >= v14;
      }
      while (!v40);
      *(_DWORD *)(a3 + 4 * v24) = v32 - 1;
      v65 = result;
      v64 = v24 + v6;
      LOBYTE(a3) = 0;
      v50 = v26;
      v51 = a2;
      v52 = v24;
      do
      {
        v53 = &a1[v52];
        v54 = *(_DWORD *)sub_216B1D574(v53, v51);
        v55 = *v51++;
        v56 = v55 + (a3 & 1) + *v53;
        *v53 = v56;
        if (v56 >= v54)
          LODWORD(a3) = a3 & (v56 == v54);
        else
          LODWORD(a3) = 1;
        ++v52;
        --v50;
      }
      while (v50);
      v12 = v63;
      a1[v64] += a3;
      v6 = v62;
      v23 = v60;
      a3 = v61;
      LODWORD(result) = v65;
    }
    else
    {
LABEL_44:
      *(_DWORD *)(a3 + 4 * v24) = v32;
    }
    result = (result - 1);
    v43 = v24-- <= 0;
  }
  while (!v43);
  if (v59)
  {
    if (v58)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v57 = 0;
        do
        {
          *(_DWORD *)(v59 + 4 * v12) = (a1[v12] >> v58) | v57;
          v57 = a1[v12] << (32 - v58);
          v43 = v12-- <= 0;
        }
        while (!v43);
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      do
      {
        *(_DWORD *)(v59 + 4 * v12) = a1[v12];
        v43 = v12-- <= 0;
      }
      while (!v43);
    }
  }
  return result;
}

uint64_t sub_216B23D18@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v6;
  _BOOL4 v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  _BYTE v12[16];
  unsigned int v13[4];

  v6 = sub_216B1E520(a1);
  v7 = sub_216B1E520(a2);
  if (v6)
  {
    if (v7)
    {
      sub_216B1E52C(a1, (uint64_t)v13);
      sub_216B1E52C(a2, (uint64_t)v12);
      sub_216B22F54(v13, (uint64_t)v12, a3);
      sub_216B1D998(v12);
      v8 = v13;
      return sub_216B1D998(v8);
    }
    sub_216B1E52C(a1, (uint64_t)v12);
    v10 = (unsigned int *)v12;
    v9 = a2;
LABEL_7:
    sub_216B22F54(v10, (uint64_t)v9, (uint64_t)v13);
    sub_216B1E52C(v13, a3);
    sub_216B1D998(v13);
    v8 = (unsigned int *)v12;
    return sub_216B1D998(v8);
  }
  if (v7)
  {
    sub_216B1E52C(a2, (uint64_t)v12);
    v9 = (unsigned int *)v12;
    v10 = a1;
    goto LABEL_7;
  }
  return sub_216B22F54(a1, (uint64_t)a2, a3);
}

uint64_t sub_216B23E14@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v6;
  _BOOL4 v7;
  unsigned int *v8;
  unsigned int *v9;
  _BYTE v11[16];
  unsigned int v12[4];
  unsigned int v13[4];

  v6 = sub_216B1E520(a1);
  v7 = sub_216B1E520(a2);
  if (v6)
  {
    if (v7)
    {
      sub_216B1E52C(a1, (uint64_t)v12);
      sub_216B1E52C(a2, (uint64_t)v11);
      sub_216B232D8(v12, (uint64_t)v11, (uint64_t)v13);
      sub_216B1E52C(v13, a3);
      sub_216B1D998(v13);
      v8 = (unsigned int *)v11;
    }
    else
    {
      sub_216B1E52C(a1, (uint64_t)v12);
      sub_216B232D8(v12, (uint64_t)a2, (uint64_t)v13);
      sub_216B1E52C(v13, a3);
      v8 = v13;
    }
    sub_216B1D998(v8);
    v9 = v12;
    return sub_216B1D998(v9);
  }
  if (v7)
  {
    sub_216B1E52C(a2, (uint64_t)v13);
    sub_216B232D8(a1, (uint64_t)v13, a3);
    v9 = v13;
    return sub_216B1D998(v9);
  }
  return sub_216B232D8(a1, (uint64_t)a2, a3);
}

BOOL sub_216B23F20@<W0>(unsigned int *a1@<X0>, _DWORD *a2@<X1>, BOOL *a3@<X2>, _DWORD *a4@<X8>)
{
  _BOOL4 v8;
  _BOOL8 result;
  BOOL v10;
  BOOL v11;

  sub_216B21B00(a1, (uint64_t)a2, (uint64_t)a4);
  v8 = sub_216B23F9C(a1);
  result = sub_216B23F9C(a2);
  if (v8 == result)
  {
    v11 = sub_216B23F9C(a4);
    result = sub_216B23F9C(a1);
    v10 = v11 ^ result;
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

BOOL sub_216B23F9C(_DWORD *a1)
{
  return !sub_216B1E520(a1);
}

BOOL sub_216B23FB4@<W0>(unsigned int *a1@<X0>, _DWORD *a2@<X1>, BOOL *a3@<X2>, _DWORD *a4@<X8>)
{
  _BOOL4 v8;
  _BOOL8 result;
  BOOL v10;
  BOOL v11;

  sub_216B21BCC(a1, (uint64_t)a2, (uint64_t)a4);
  v8 = sub_216B23F9C(a1);
  result = sub_216B23F9C(a2);
  if (v8 == result)
  {
    v11 = 0;
  }
  else
  {
    v10 = sub_216B23F9C(a4);
    result = sub_216B23F9C(a1);
    v11 = v10 ^ result;
  }
  *a3 = v11;
  return result;
}

uint64_t sub_216B24030@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  _BOOL4 v8;

  v8 = sub_216B24080((uint64_t)a1);
  if (v8)
    LOBYTE(v8) = sub_216B240D4((uint64_t)a2);
  *a3 = v8;
  return sub_216B23D18(a1, a2, a4);
}

BOOL sub_216B24080(uint64_t a1)
{
  _BOOL8 result;

  if (*(_DWORD *)a1 == 1)
    return *(_QWORD *)(a1 + 8) == 1;
  result = sub_216B1E520((_DWORD *)a1);
  if (result)
    return sub_216B24FBC(a1);
  return result;
}

BOOL sub_216B240D4(uint64_t a1)
{
  if (sub_216B1FFE8((_DWORD *)a1))
    return *(_QWORD *)(a1 + 8) == 0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)a1;
  else
    return sub_216B222D0(a1) == *(_DWORD *)a1;
}

uint64_t sub_216B24128@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X2>, unsigned int *a4@<X8>)
{
  uint64_t result;
  _BYTE v9[16];
  _BYTE v10[16];

  sub_216B21A94(a1, (uint64_t)a2, (uint64_t)a4);
  result = sub_216B1FD6C((uint64_t)a1, 0);
  if ((_DWORD)result && (result = sub_216B1FD6C((uint64_t)a2, 0), (_DWORD)result))
  {
    sub_216B23D18(a4, a2, (uint64_t)v10);
    if (sub_216B241E8((uint64_t)v10, (uint64_t)a1))
    {
      *a3 = 1;
    }
    else
    {
      sub_216B23D18(a4, a1, (uint64_t)v9);
      *a3 = sub_216B241E8((uint64_t)v9, (uint64_t)a2);
      sub_216B1D998(v9);
    }
    return sub_216B1D998(v10);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_216B241E8(uint64_t a1, uint64_t a2)
{
  return sub_216B2346C(a1, a2) ^ 1;
}

uint64_t sub_216B24200@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  int v9;
  unsigned int v11;

  v8 = sub_216B1E4E0(a1);
  v9 = sub_216B242A4(a2, v8);
  *a3 = v9;
  if (v9)
    return sub_216B1E414(a4, *a1, 0, 0);
  if (sub_216B23F9C(a1))
    v11 = sub_216B20480((uint64_t)a1);
  else
    v11 = sub_216B220E8((uint64_t)a1);
  *a3 = sub_216B242A4(a2, v11);
  return sub_216B24300(a1, a2);
}

uint64_t sub_216B242A4(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[16];

  v4 = sub_216B1E4E0(a1);
  sub_216B1E414(v7, v4, a2, 0);
  v5 = sub_216B23454((uint64_t)a1, (uint64_t)v7);
  sub_216B1D998(v7);
  return v5;
}

uint64_t sub_216B24304@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  int v9;
  unsigned int v11;

  v8 = sub_216B1E4E0(a1);
  v9 = sub_216B242A4(a2, v8);
  *a3 = v9;
  if (v9)
    return sub_216B1E414(a4, *a1, 0, 0);
  v11 = sub_216B20480((uint64_t)a1);
  *a3 = sub_216B24390(a2, v11);
  return sub_216B24300(a1, a2);
}

uint64_t sub_216B24390(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[16];

  v4 = sub_216B1E4E0(a1);
  sub_216B1E414(v7, v4, a2, 0);
  v5 = sub_216B21FF4((uint64_t)a1, (uint64_t)v7);
  sub_216B1D998(v7);
  return v5;
}

uint64_t sub_216B243EC(_DWORD *a1, const void **a2, unsigned int a3, int a4, int a5)
{
  unint64_t v9;
  char *v10;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  char *v18;
  BOOL v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  _BYTE v30[16];
  _DWORD v31[4];
  unsigned int v32[4];
  unsigned int v33[16];
  char v34[7];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    HIDWORD(v9) = a3;
    LODWORD(v9) = a3 - 2;
    v10 = off_24D5EF7D0[(int)(v9 >> 1)];
  }
  else
  {
    v10 = &byte_216C19659;
  }
  if (sub_216B204E4((uint64_t)a1, 0))
  {
    if (*v10)
    {
      do
        sub_216B1FBBC((uint64_t)a2, v10);
      while (*++v10);
    }
    LOBYTE(v33[0]) = 48;
    return sub_216B1FBBC((uint64_t)a2, v33);
  }
  if (!sub_216B1FFE8(a1))
  {
    sub_216B1E51C(v33, a1);
    if (a4 && sub_216B1E520(a1))
    {
      sub_216B21F88((uint64_t)v33);
      sub_216B214AC((uint64_t)v33);
      LOBYTE(v32[0]) = 45;
      sub_216B1FBBC((uint64_t)a2, v32);
    }
    if (*v10)
    {
      do
        sub_216B1FBBC((uint64_t)a2, v10);
      while (*++v10);
    }
    v15 = sub_216B1FF14((uint64_t)a2);
    if (a3 != 2)
    {
      if (a3 == 16)
      {
        v16 = 4;
        goto LABEL_31;
      }
      if (a3 != 8)
      {
        if (a3 == 10)
          v22 = 4;
        else
          v22 = 8;
        sub_216B1E414(v32, v22, a3, 0);
        while (sub_216B1FD6C((uint64_t)v33, 0))
        {
          sub_216B1E414(v31, 1, 0, 0);
          v23 = sub_216B1E4E0(v33);
          sub_216B1E414(v30, v23, 0, 0);
          sub_216B1E51C(v29, v33);
          v24 = sub_216B1D53C(v33);
          v25 = sub_216B1D53C(v32);
          sub_216B234B8((uint64_t)v29, v24, (uint64_t)v32, v25, (uint64_t)v30, (uint64_t)v31);
          sub_216B1D998(v29);
          v26 = sub_216B1FD84(v31);
          sub_216B1FBBC((uint64_t)a2, &a0123456789abcd_0[v26]);
          sub_216B2240C((uint64_t)v33, (uint64_t)v30);
          sub_216B1D998(v30);
          sub_216B1D998(v31);
        }
        sub_216B1D998(v32);
        goto LABEL_41;
      }
    }
    if (a3 == 8)
      v16 = 3;
    else
      v16 = 1;
LABEL_31:
    if (sub_216B1FD6C((uint64_t)v33, 0))
    {
      v20 = a3 - 1;
      do
      {
        v21 = sub_216B1D544(v33);
        sub_216B1FBBC((uint64_t)a2, &a0123456789abcd_0[v20 & *v21]);
        sub_216B22A30(v33, v16, (uint64_t)v32);
        sub_216B1E580((uint64_t)v33, (int *)v32);
        sub_216B1D998(v32);
      }
      while (sub_216B1FD6C((uint64_t)v33, 0));
    }
LABEL_41:
    v27 = sub_216B1E600((uint64_t)a2) + v15;
    v28 = sub_216B1E67C((uint64_t)a2);
    sub_216B247D0(v27, v28);
    return sub_216B1D998(v33);
  }
  if ((a4 & 1) != 0)
  {
    v13 = sub_216B2478C((uint64_t)a1);
    if ((v13 & 0x8000000000000000) != 0)
    {
      LOBYTE(v32[0]) = 45;
      sub_216B1FBBC((uint64_t)a2, v32);
      v13 = -(uint64_t)v13;
    }
  }
  else
  {
    v13 = sub_216B1FD84(a1);
  }
  if (*v10)
  {
    do
      sub_216B1FBBC((uint64_t)a2, v10);
    while (*++v10);
  }
  v18 = v34;
  if (v13)
  {
    v18 = v34;
    do
    {
      *--v18 = a0123456789abcd_0[v13 % a3];
      v19 = v13 >= a3;
      v13 /= a3;
    }
    while (v19);
  }
  return sub_216B202D8(a2, v18, v34);
}

uint64_t sub_216B2478C(uint64_t a1)
{
  if (sub_216B1FFE8((_DWORD *)a1))
    return (uint64_t)(*(_QWORD *)(a1 + 8) << -*(_BYTE *)a1) >> -*(_BYTE *)a1;
  else
    return **(_QWORD **)(a1 + 8);
}

uint64_t sub_216B247D4@<X0>(_DWORD *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD v10[2];
  const void *v11[8];

  sub_216B2484C(v11);
  sub_216B243EC(a1, v11, a2, a3, 0);
  v10[0] = sub_216B24850((uint64_t)v11);
  v10[1] = v8;
  sub_216B24898(v10, a4);
  return sub_216B2489C(v11);
}

uint64_t sub_216B24850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B1E600(a1);
  v3 = sub_216B1FF14(a1);
  sub_216B1E684(&v5, v2, v3);
  return v5;
}

void **sub_216B248A0(uint64_t a1, char *a2)
{
  uint64_t v4[2];

  sub_216B1E678((int)v4, a2);
  return sub_216B248E0(a1, v4[0], v4[1]);
}

void **sub_216B248D8(void **a1, unsigned int a2)
{
  return sub_216B3FF24(a1, a2);
}

void **sub_216B248E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v4;
  void *v5;
  size_t v6;
  _BYTE *v7;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v4 = sub_216B1E67C((uint64_t)v9);
  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 16) - (_QWORD)v5;
  v7 = (_BYTE *)sub_216B1E600((uint64_t)v9);
  if (v4 > v6)
    return sub_216B3FFE4((void **)a1, v7, v4);
  memcpy(v5, v7, v4);
  *(_QWORD *)(a1 + 24) += v4;
  return (void **)a1;
}

uint64_t sub_216B24968(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v9[8];

  sub_216B2484C(v9);
  sub_216B243EC(a1, v9, 0xAu, a3, 0);
  v6 = sub_216B24850((uint64_t)v9);
  sub_216B248E0(a2, v6, v7);
  return sub_216B2489C(v9);
}

void sub_216B249E4(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  *a1 = a2;
  if (a3 >= 2)
    bzero(a1 + 1, 8 * (a3 - 2) + 8);
}

_QWORD *sub_216B24A04(_QWORD *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3)
  {
    v3 = a3;
    do
    {
      v4 = *a2++;
      *result++ = v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

BOOL sub_216B24A20(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;

  if (!a2)
    return 1;
  if (*a1)
    return 0;
  v3 = 1;
  do
  {
    v4 = v3;
    if (a2 == v3)
      break;
  }
  while (!a1[v3++]);
  return v4 >= a2;
}

uint64_t sub_216B24A68(uint64_t a1, unsigned int a2)
{
  return (*(_QWORD *)(a1 + 8 * (a2 >> 6)) >> a2) & 1;
}

uint64_t sub_216B24A7C(uint64_t result, unsigned int a2)
{
  *(_QWORD *)(result + 8 * (a2 >> 6)) |= 1 << a2;
  return result;
}

uint64_t sub_216B24A98(uint64_t result, unsigned int a2)
{
  *(_QWORD *)(result + 8 * (a2 >> 6)) &= ~(1 << a2);
  return result;
}

uint64_t sub_216B24AB4(unint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (!a2)
    return 0xFFFFFFFFLL;
  v2 = 0;
  while (1)
  {
    v4 = *a1++;
    v3 = v4;
    if (v4)
      break;
    v2 -= 64;
    if (!(((unint64_t)a2 << 6) + v2))
      return 0xFFFFFFFFLL;
  }
  return sub_216B24B08(v3) - v2;
}

uint64_t sub_216B24B08(unint64_t a1)
{
  return sub_216B25104(a1, 1);
}

uint64_t sub_216B24B20(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;

  v2 = 64 - (a2 << 6);
  v3 = a2 - 1;
  while (!*(_QWORD *)(a1 + 8 * v3))
  {
    v2 += 64;
    if (--v3 == -1)
      return 0xFFFFFFFFLL;
  }
  return sub_216B24B70(*(_QWORD *)(a1 + 8 * v3)) - v2;
}

uint64_t sub_216B24B70(unint64_t a1)
{
  return sub_216B25128(a1, 1);
}

unint64_t *sub_216B24B88(unint64_t *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (a3 && a2)
  {
    v3 = a3 >> 6;
    v4 = a2;
    v5 = result;
    do
    {
      if (v3 >= a2)
      {
        v6 = 0;
      }
      else
      {
        v6 = result[v3];
        if ((a3 & 0x3F) != 0)
        {
          v6 >>= a3 & 0x3F;
          if (v3 + 1 < a2)
            v6 |= result[v3 + 1] << (64 - (a3 & 0x3F));
        }
      }
      *v5++ = v6;
      ++v3;
      --v4;
    }
    while (v4);
  }
  return result;
}

BOOL sub_216B24BF0(unint64_t *a1, uint64_t *a2, _BOOL8 a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t v12;

  if (a4)
  {
    v4 = a4;
    do
    {
      v5 = *a1;
      v7 = *a2++;
      v6 = v7;
      v8 = v7 + *a1;
      v9 = __CFADD__(v7, *a1);
      v10 = v5 + v6;
      v11 = v10 + 1 <= v5;
      if (a3)
        v12 = v10 + 1;
      else
        v12 = v8;
      if (a3)
        a3 = v11;
      else
        a3 = v9;
      *a1++ = v12;
      --v4;
    }
    while (v4);
  }
  return a3;
}

uint64_t sub_216B24C38(unint64_t *a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t v8;

  if (a4)
  {
    v4 = a4;
    do
    {
      v5 = *a2++;
      v6 = *a1 - v5;
      v7 = *a1 < v5;
      v8 = *a1 + ~v5;
      if (a3)
      {
        a3 = v8 >= *a1;
      }
      else
      {
        v8 = v6;
        a3 = v7;
      }
      *a1++ = v8;
      --v4;
    }
    while (v4);
  }
  return a3;
}

BOOL sub_216B24C80(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 8 * v2);
      *(_QWORD *)(a1 + 8 * v2) = v3 + 1;
      if (v3 != -1)
        break;
      if (a2 == ++v2)
      {
        LODWORD(v2) = a2;
        return (_DWORD)v2 == a2;
      }
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return (_DWORD)v2 == a2;
}

void sub_216B24CC0(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;

  if (a3)
  {
    v3 = a3 >> 6;
    if (a3 >> 6 < a2)
    {
      v4 = a2 - 1;
      v5 = &a1[a2 - 1];
      do
      {
        v6 = a1[v4 - v3];
        if ((a3 & 0x3F) != 0)
        {
          v6 <<= a3 & 0x3F;
          if (v3 < v4)
            v6 |= a1[v4 - v3 - 1] >> (64 - (a3 & 0x3F));
        }
        *v5-- = v6;
        v7 = v4 - 1;
      }
      while (v3 < v4--);
      a2 = v7 + 1;
    }
    if (a2)
      bzero(a1, 8 * a2);
  }
}

uint64_t sub_216B24D3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = 8 * a3;
  do
  {
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(a1 - 8 + v3);
    v5 = *(_QWORD *)(a2 - 8 + v3);
    v3 -= 8;
  }
  while (v4 == v5);
  if (v4 > v5)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

void sub_216B24D74(char *__b, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64x2_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int v15;

  v3 = a3;
  v6 = a3 - 65;
  if (a3 < 0x41)
  {
    LODWORD(v9) = 0;
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    v7 = v6 >> 6;
    memset(__b, 255, 8 * (v6 >> 6) + 8);
    v8 = 0;
    v9 = v7 + 1;
    v10 = (uint64x2_t)vdupq_n_s64(v9 - 1);
    v11 = (int32x4_t)v3;
    v12.i64[0] = 0x3F0000003FLL;
    v12.i64[1] = 0x3F0000003FLL;
    do
    {
      v13 = (int8x16_t)v11;
      v11 = vaddq_s32(v11, v12);
      v8 += 4;
    }
    while (((v7 + 4) & 0x7FFFFFC) != v8);
    v14 = (int8x16_t)vdupq_n_s64(v8 - 4);
    v15 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v14, (int8x16_t)xmmword_216C11030), v10), (int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v14, (int8x16_t)xmmword_216C11040), v10)), v13, (int8x16_t)v11));
    LOBYTE(v3) = v15;
    if (!v15)
      goto LABEL_8;
  }
  *(_QWORD *)&__b[8 * v9] = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
  LODWORD(v9) = v9 + 1;
LABEL_8:
  if (v9 < a2)
    bzero(&__b[8 * v9], 8 * (~(_DWORD)v9 + a2) + 8);
}

_QWORD *sub_216B24E84(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (sub_216B24EC0((uint64_t)&v5, a2, a1))
    return a2;
  else
    return a1;
}

BOOL sub_216B24EC0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 < *a3;
}

unint64_t sub_216B24ED4(unint64_t *a1, unint64_t *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL4 v17;
  uint64_t v18;

  v4 = 0;
  if (a3)
  {
    v5 = a3;
    do
    {
      v6 = *a2++;
      v7 = v6;
      v8 = HIDWORD(v6);
      v9 = v6 * (unint64_t)a4;
      v10 = __CFADD__(v9, v4);
      if (__CFADD__(v9, v4))
        v11 = 0x100000000;
      else
        v11 = 0;
      v12 = ((v9 + v4) >> 32) + v8 * (unint64_t)a4 + v11;
      if (v12)
        v10 = 0;
      v13 = __CFADD__(v9, v4);
      v14 = v9 + v4;
      v15 = v7 * (unint64_t)HIDWORD(a4);
      v16 = v12 + v15;
      *a1++ = v14 | ((unint64_t)v16 << 32);
      v17 = v13 || v12 != 0;
      if (v16)
        v17 = 0;
      if (v17 || v10)
        v18 = 0x100000000;
      else
        v18 = 0;
      v4 = HIDWORD(v15) + v8 * (unint64_t)HIDWORD(a4) + HIDWORD(v16) + v18;
      --v5;
    }
    while (v5);
  }
  return v4;
}

uint64_t sub_216B24F68(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_216B24F78(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t sub_216B24F80(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  return result;
}

_DWORD *sub_216B24F98(_DWORD *result)
{
  *result = 1;
  return result;
}

uint64_t sub_216B24FA4(unsigned int a1, int a2)
{
  BOOL v2;
  uint64_t v3;

  if (a2)
    v2 = a1 == 0;
  else
    v2 = 0;
  v3 = __clz(a1);
  if (v2)
    return 32;
  else
    return v3;
}

BOOL sub_216B24FBC(uint64_t a1)
{
  if (sub_216B1FFE8((_DWORD *)a1))
    return sub_216B25000(*(_QWORD *)(a1 + 8));
  else
    return sub_216B222D0(a1) == 1;
}

BOOL sub_216B25000(uint64_t a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

uint64_t sub_216B25018@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  if (*a1)
    return sub_216B25038(a2, *a1, a1[1]);
  else
    return sub_216B25034(a2);
}

uint64_t sub_216B2503C(uint64_t a1)
{
  uint64_t v2;
  char v4;
  char v5;

  v2 = sub_216B25078(a1, &v5, &v4);
  nullsub_1(v2, 0);
  return a1;
}

uint64_t sub_216B2507C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_216B25090(a1);
  return j_j_nullsub_1(v1);
}

_QWORD *sub_216B25090(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_216B2509C(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  std::string *v6;
  char v8;
  char v9;

  v6 = (std::string *)sub_216B250EC(a1, &v9, &v8);
  std::string::__init(v6, a2, a3);
  return a1;
}

uint64_t sub_216B250F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = nullsub_1(a1, a2);
  return j_j_nullsub_1(v2);
}

uint64_t sub_216B25104(unint64_t a1, int a2)
{
  if (a1 || a2 != 1)
    return sub_216B222B4(a1, 0);
  else
    return sub_216B2511C(0);
}

uint64_t sub_216B25120()
{
  return -1;
}

uint64_t sub_216B25128(unint64_t a1, int a2)
{
  if (a1 || a2 != 1)
    return sub_216B204CC(a1, 0) ^ 0x3F;
  else
    return sub_216B2511C(0);
}

_DWORD *sub_216B25154(_DWORD *a1, _DWORD *a2)
{
  char v5;

  if (sub_216B20868((uint64_t)&v5, a1, a2))
    return a2;
  else
    return a1;
}

unint64_t sub_216B25198(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v3 = result;
  if (result != a2)
  {
    v2 = a2 - 1;
    if (a2 - 1 > result)
    {
      do
      {
        result = sub_216B21100(&v3, &v2);
        --v2;
        ++v3;
      }
      while (v3 < v2);
    }
  }
  return result;
}

uint64_t sub_216B251F4()
{
  return sub_216B2112C();
}

uint64_t sub_216B251FC(uint64_t result, char a2)
{
  char *v2;

  v2 = *(char **)(result + 24);
  if ((unint64_t)v2 >= *(_QWORD *)(result + 16))
    return sub_216B40534(result, a2);
  *(_QWORD *)(result + 24) = v2 + 1;
  *v2 = a2;
  return result;
}

uint64_t sub_216B25220(unsigned int **a1, unint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned int v13;
  unint64_t v14;

  v5 = *a1;
  v6 = *a3;
  if ((unint64_t)*a1 >= a2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *a1;
    while (1)
    {
      v10 = *v5++;
      v9 = v10;
      if (!a5 && (v9 & 0xFFFFF800) == 0xD800)
      {
        v7 = 3;
        goto LABEL_32;
      }
      if (v9 >= 0x110000)
        v11 = 65533;
      else
        v11 = v9;
      if (v9 >= 0x110000)
        v12 = 3;
      else
        v12 = 4;
      if (v9 >= 0x110000)
        v13 = 3;
      else
        v13 = v7;
      if (v9 < 0x10000)
      {
        v11 = v9;
        v12 = 3;
        v13 = v7;
      }
      if (v9 < 0x800)
      {
        v11 = v9;
        v12 = 2;
        v13 = v7;
      }
      if (v9 >= 0x80)
      {
        v7 = v13;
      }
      else
      {
        v11 = v9;
        v12 = 1;
        v7 = v7;
      }
      v14 = v6 + v12;
      if (v14 > a4)
        break;
      switch(v12)
      {
        case 1u:
          goto LABEL_26;
        case 2u:
          goto LABEL_25;
        case 3u:
          goto LABEL_24;
        case 4u:
          *(_BYTE *)--v14 = v11 & 0x3F | 0x80;
          v11 >>= 6;
LABEL_24:
          *(_BYTE *)--v14 = v11 & 0x3F | 0x80;
          v11 >>= 6;
LABEL_25:
          *(_BYTE *)--v14 = v11 & 0x3F | 0x80;
          v11 >>= 6;
LABEL_26:
          *(_BYTE *)--v14 = byte_216C11064[v12] | v11;
          break;
        default:
          break;
      }
      v6 = v14 + v12;
      v8 = v5;
      if ((unint64_t)v5 >= a2)
        goto LABEL_33;
    }
    v7 = 2;
LABEL_32:
    v5 = v8;
  }
LABEL_33:
  *a1 = v5;
  *a3 = v6;
  return v7;
}

BOOL sub_216B2535C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = byte_216C1106B[*a1] + 1;
  return a2 - (uint64_t)a1 >= v3 && sub_216B2538C(a1, v3);
}

BOOL sub_216B2538C(unsigned __int8 *a1, int a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  v2 = &a1[a2];
  switch(a2)
  {
    case 1:
      v3 = *a1;
      goto LABEL_3;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      v5 = (char)*--v2;
      if (v5 > -65)
        return 0;
LABEL_6:
      v6 = (char)*--v2;
      if (v6 > -65)
        return 0;
LABEL_7:
      v7 = (char)*(v2 - 1);
      if (v7 > -65)
        return 0;
      v8 = v7;
      v3 = *a1;
      if (v3 > 0xEF)
      {
        if (v3 == 240)
        {
          if (v8 >= 0x90)
          {
            v3 = 240;
            return v3 < 0xF5;
          }
          return 0;
        }
        if (v3 == 244)
        {
          if (v8 <= 0x8F)
          {
            v3 = 244;
            return v3 < 0xF5;
          }
          return 0;
        }
      }
      else
      {
        if (v3 == 224)
        {
          if (v8 >= 0xA0)
          {
            v3 = 224;
            return v3 < 0xF5;
          }
          return 0;
        }
        if (v3 == 237)
        {
          if (v8 <= 0x9F)
          {
            v3 = 237;
            return v3 < 0xF5;
          }
          return 0;
        }
      }
LABEL_3:
      if ((char)v3 >= -62)
        return v3 < 0xF5;
      return 0;
    default:
      return 0;
  }
}

uint64_t sub_216B2546C(int a1)
{
  return (byte_216C1106B[a1] + 1);
}

BOOL sub_216B25480(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v5;
  _BOOL8 result;

  v2 = *a1;
  if (*a1 == a2)
    return 1;
  while (1)
  {
    v5 = byte_216C1106B[*v2] + 1;
    if (a2 - v2 < v5)
      break;
    result = sub_216B2538C(v2, byte_216C1106B[*v2] + 1);
    if (!result)
      return result;
    v2 += v5;
    *a1 = v2;
    if (v2 == a2)
      return 1;
  }
  return 0;
}

uint64_t sub_216B25508(unsigned __int8 **a1, unint64_t a2, _WORD **a3, unint64_t a4, int a5)
{
  unsigned __int8 *v7;
  _WORD *v8;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t result;

  v7 = *a1;
  v8 = *a3;
  if ((unint64_t)*a1 >= a2)
  {
LABEL_22:
    result = 0;
    goto LABEL_27;
  }
  while (1)
  {
    v12 = *v7;
    if ((uint64_t)(a2 - (_QWORD)v7) <= (unsigned __int16)byte_216C1106B[*v7])
    {
      result = 1;
      goto LABEL_27;
    }
    v13 = (unsigned __int16)byte_216C1106B[*v7];
    v14 = (unsigned __int16)byte_216C1106B[*v7] + 1;
    if (!sub_216B2538C(v7, v14))
      goto LABEL_26;
    v15 = 0;
    v16 = v13;
    switch((int)v13)
    {
      case 0:
        goto LABEL_10;
      case 1:
        goto LABEL_9;
      case 2:
        goto LABEL_8;
      case 3:
        goto LABEL_7;
      case 4:
        goto LABEL_6;
      case 5:
        v15 = v12 << 6;
        v17 = *++v7;
        v12 = v17;
LABEL_6:
        v18 = v15 + v12;
        v19 = *++v7;
        v12 = v19;
        v15 = v18 << 6;
LABEL_7:
        v20 = v15 + v12;
        v21 = *++v7;
        v12 = v21;
        v15 = v20 << 6;
LABEL_8:
        v22 = v15 + v12;
        v23 = *++v7;
        v12 = v23;
        v15 = v22 << 6;
LABEL_9:
        v24 = v15 + v12;
        v25 = *++v7;
        v12 = v25;
        v16 = v24 << 6;
LABEL_10:
        ++v7;
        v15 = v16 + v12;
        break;
      default:
        break;
    }
    if ((unint64_t)v8 >= a4)
    {
LABEL_23:
      v7 -= v14;
      result = 2;
      goto LABEL_27;
    }
    v26 = v15 - dword_216C1116C[v13];
    if (!HIWORD(v26))
      break;
    if (v26 >= 0x110000)
      goto LABEL_16;
    if ((unint64_t)(v8 + 1) >= a4)
      goto LABEL_23;
    *v8 = ((v26 + 67043328) >> 10) - 10240;
    v8[1] = v26 & 0x3FF | 0xDC00;
    v8 += 2;
LABEL_21:
    if ((unint64_t)v7 >= a2)
      goto LABEL_22;
  }
  if (v26 >> 11 != 27)
  {
LABEL_18:
    *v8++ = v26;
    goto LABEL_21;
  }
LABEL_16:
  if (a5)
  {
    LOWORD(v26) = -3;
    goto LABEL_18;
  }
  v7 -= v14;
LABEL_26:
  result = 3;
LABEL_27:
  *a1 = v7;
  *a3 = v8;
  return result;
}

uint64_t sub_216B256AC(unsigned __int8 **a1, unsigned __int8 *a2, unsigned int **a3, unint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  unsigned int *v7;
  uint64_t v10;
  BOOL v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;

  v6 = *a1;
  v7 = *a3;
  if (*a1 >= a2)
  {
    v10 = 0;
    goto LABEL_33;
  }
  v10 = 0;
  if (a5)
    v11 = a6 == 0;
  else
    v11 = 0;
  v12 = !v11;
  while (1)
  {
    v13 = *v6;
    if (a2 - v6 > (unsigned __int16)byte_216C1106B[*v6])
      break;
    if ((v12 & 1) != 0)
    {
      v10 = 1;
      goto LABEL_33;
    }
LABEL_28:
    v6 += sub_216B25874(v6, a2);
LABEL_29:
    v10 = 3;
    v27 = 65533;
LABEL_30:
    *v7++ = v27;
    if (v6 >= a2)
      goto LABEL_33;
  }
  if ((unint64_t)v7 >= a4)
  {
    v10 = 2;
    goto LABEL_33;
  }
  v14 = (unsigned __int16)byte_216C1106B[*v6];
  v15 = (unsigned __int16)byte_216C1106B[*v6] + 1;
  if (!sub_216B2538C(v6, v15))
  {
    if (!a5)
      goto LABEL_35;
    goto LABEL_28;
  }
  v16 = 0;
  v17 = v14;
  switch((int)v14)
  {
    case 0:
      goto LABEL_17;
    case 1:
      goto LABEL_16;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_13;
    case 5:
      v16 = v13 << 6;
      v18 = *++v6;
      v13 = v18;
LABEL_13:
      v19 = v16 + v13;
      v20 = *++v6;
      v13 = v20;
      v16 = v19 << 6;
LABEL_14:
      v21 = v16 + v13;
      v22 = *++v6;
      v13 = v22;
      v16 = v21 << 6;
LABEL_15:
      v23 = v16 + v13;
      v24 = *++v6;
      v13 = v24;
      v16 = v23 << 6;
LABEL_16:
      v25 = v16 + v13;
      v26 = *++v6;
      v13 = v26;
      v17 = v25 << 6;
LABEL_17:
      ++v6;
      v16 = v17 + v13;
      break;
    default:
      break;
  }
  v27 = v16 - dword_216C1116C[v14];
  if (HIWORD(v27) > 0x10u)
    goto LABEL_29;
  if ((v27 & 0xFFFFF800) == 0xD800)
  {
    v27 = 65533;
    v28 = a5 == 0;
  }
  else
  {
    v28 = 0;
  }
  if (!v28)
    goto LABEL_30;
  v6 -= v15;
LABEL_35:
  v10 = 3;
LABEL_33:
  *a1 = v6;
  *a3 = v7;
  return v10;
}

uint64_t sub_216B2586C(unsigned __int8 **a1, unsigned __int8 *a2, unsigned int **a3, unint64_t a4, int a5)
{
  return sub_216B256AC(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_216B25874(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t result;
  int v5;
  BOOL v6;
  char *v7;

  if (a1 == a2)
    return 0;
  v2 = *a1;
  if ((v2 + 62) < 0x1Eu || a1 + 1 == a2)
    return 1;
  v5 = (char)a1[1];
  if (v2 == 224)
  {
    if ((v5 & 0xFFFFFFE0) == 0xFFFFFFA0)
      return 2;
    else
      return 1;
  }
  if ((v2 + 31) <= 0xBu)
    goto LABEL_15;
  if (v2 == 237)
  {
    v6 = v5 < -96;
LABEL_18:
    if (v6)
      return 2;
    else
      return 1;
  }
  if ((v2 & 0xFE) == 0xEE)
  {
LABEL_15:
    v6 = v5 < -64;
    goto LABEL_18;
  }
  v7 = (char *)(a1 + 2);
  if (v2 == 240)
  {
    if ((v5 + 112) <= 0x2F)
      goto LABEL_30;
    return 1;
  }
  if ((v2 + 15) > 2u)
  {
    result = 1;
    if (v2 != 244 || v5 > -113)
      return result;
    goto LABEL_30;
  }
  if (v5 > -65)
    return 1;
LABEL_30:
  result = 2;
  if (v7 != (char *)a2)
  {
    if (*v7 >= -64)
      return 2;
    else
      return 3;
  }
  return result;
}

BOOL sub_216B2596C(int a1, uint64_t a2, uint64_t a3, _WORD **a4, _QWORD *a5)
{
  unsigned __int8 *v7;
  _WORD *v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  int v12;
  _WORD *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v21;
  unsigned __int8 *v22;
  _QWORD v23[2];

  v23[0] = a2;
  v23[1] = a3;
  switch(a1)
  {
    case 4:
      v14 = (unsigned __int8 *)sub_216B1E600((uint64_t)v23);
      v21 = *a4;
      v22 = v14;
      v15 = &v14[sub_216B1E67C((uint64_t)v23)];
      v16 = sub_216B1E67C((uint64_t)v23);
      v12 = sub_216B2586C(&v22, v15, (unsigned int **)&v21, (unint64_t)&v21[8 * v16], 0);
      if (!v12)
        goto LABEL_9;
      break;
    case 2:
      v17 = (unsigned __int8 *)sub_216B1E600((uint64_t)v23);
      v21 = *a4;
      v22 = v17;
      v18 = (unint64_t)&v17[sub_216B1E67C((uint64_t)v23)];
      v19 = sub_216B1E67C((uint64_t)v23);
      v12 = sub_216B25508(&v22, v18, &v21, (unint64_t)&v21[2 * v19], 0);
      if (!v12)
      {
LABEL_9:
        v13 = v21;
LABEL_10:
        *a4 = v13;
        return v12 == 0;
      }
      break;
    case 1:
      v22 = (unsigned __int8 *)sub_216B1E600((uint64_t)v23);
      v7 = (unsigned __int8 *)sub_216B1E608(v23);
      if (!sub_216B25480(&v22, v7))
      {
        *a5 = v22;
        v12 = 3;
        return v12 == 0;
      }
      v8 = *a4;
      v9 = (const void *)sub_216B1E600((uint64_t)v23);
      v10 = sub_216B1E67C((uint64_t)v23);
      memcpy(v8, v9, v10);
      v11 = sub_216B1E67C((uint64_t)v23);
      v12 = 0;
      v13 = (_WORD *)((char *)*a4 + v11);
      goto LABEL_10;
    default:
      v12 = 0;
      return v12 == 0;
  }
  *a5 = v22;
  return v12 == 0;
}

BOOL sub_216B25ADC(int a1, uint64_t *a2)
{
  int v3;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;

  v7 = a1;
  v6 = (unsigned int *)&v7;
  v5 = *a2;
  v3 = sub_216B25220(&v6, (unint64_t)&v8, &v5, v5 + 4, 0);
  if (!v3)
    *a2 = v5;
  return v3 == 0;
}

uint64_t sub_216B25B40(_QWORD *a1, uint64_t a2)
{
  return *a1 + a2;
}

void sub_216B25B4C(std::string *a1, std::string::size_type a2)
{
  std::string::resize(a1, a2, 0);
}

uint64_t sub_216B25B54(uint64_t a1, uint64_t a2)
{
  return sub_216B25CC0(a1, a2) + a2;
}

uint64_t sub_216B25B78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (sub_216B25CF8(a1, a2))
    return sub_216B25D28(a1, v3);
  else
    return sub_216B25D40(a1, v3);
}

uint64_t sub_216B25BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char v9;
  char v10;

  v3 = sub_216B25B78(a1, a2);
  if (sub_216B25CF8(a1, v4))
  {
    v6 = (_BYTE *)sub_216B25CA8(a1, v5);
    v10 = 0;
    sub_216B25D5C(v6, &v10);
    sub_216B25D68(a1, 0);
  }
  else
  {
    v7 = (_BYTE *)sub_216B25D14(a1, v5);
    v9 = 0;
    sub_216B25D5C(v7, &v9);
    sub_216B25D8C(a1, 0);
  }
  return nullsub_1(a1, v3);
}

uint64_t sub_216B25C4C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

void sub_216B25C54()
{
  sub_216C109AC();
}

_QWORD *sub_216B25C60(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (sub_216B24EC0((uint64_t)&v5, a1, a2))
    return a2;
  else
    return a1;
}

uint64_t sub_216B25CA8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)j_nullsub_1(a1, a2);
}

uint64_t sub_216B25CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (sub_216B25CF8(a1, a2))
    return sub_216B25CA8(a1, v3);
  else
    return sub_216B25D14(a1, v3);
}

uint64_t sub_216B25CF8(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(j_nullsub_1(a1, a2) + 23) >> 7;
}

uint64_t sub_216B25D14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = j_nullsub_1(a1, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216B25D28(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(j_nullsub_1(a1, a2) + 8);
}

uint64_t sub_216B25D40(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(j_nullsub_1(a1, a2) + 23) & 0x7F;
}

_BYTE *sub_216B25D5C(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_216B25D68(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = j_nullsub_1(a1, a2);
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_216B25D8C(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = a2;
  v4 = j_nullsub_1(a1, a2);
  *(_BYTE *)(v4 + 23) = *(_BYTE *)(v4 + 23) & 0x80 | v2 & 0x7F;
  result = j_nullsub_1(a1, v5);
  *(_BYTE *)(result + 23) &= ~0x80u;
  return result;
}

BOOL sub_216B25DD0(uint64_t a1, uint64_t a2)
{
  return sub_216B25B78(a1, a2) == 0;
}

void *sub_216B25DF8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254E4AE20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254E4AE20))
  {
    sub_216B25E74((pthread_mutex_t **)&unk_254E4AE10, 1);
    __cxa_atexit((void (*)(void *))sub_216B25E78, &unk_254E4AE10, &dword_216B18000);
    __cxa_guard_release(&qword_254E4AE20);
  }
  return &unk_254E4AE10;
}

void sub_216B25E84(_BYTE *a1, uint64_t a2)
{
  uint64_t v3[3];

  sub_216B25FA8((uint64_t)v3, a1);
  sub_216B25EB0(v3, a2);
}

void sub_216B25EB0(uint64_t *a1, uint64_t a2)
{
  void (*v4)(uint64_t, std::string *, uint64_t);
  uint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  _QWORD v11[2];
  uint64_t v12[6];
  std::string v13;

  sub_216B25DF8();
  sub_216B25E7C(&v13, (uint64_t)&unk_254E4AE10);
  v4 = (void (*)(uint64_t, std::string *, uint64_t))off_254E4AE28;
  v5 = qword_254E4AE30;
  sub_216B25E80(&v13);
  if (v4)
  {
    sub_216B34D50((uint64_t)a1, &v13);
    v4(v5, &v13, a2);
    std::string::~string(&v13);
  }
  else
  {
    sub_216B25FB4();
    sub_216B40D84(v12);
    v6 = sub_216B248A0((uint64_t)v12, "LLVM ERROR: ");
    v7 = sub_216B25FB8(v6, a1);
    sub_216B248A0((uint64_t)v7, "\n");
    v11[0] = sub_216B40E80(v12);
    v11[1] = v8;
    v9 = (const void *)sub_216B1E600((uint64_t)v11);
    v10 = sub_216B1E67C((uint64_t)v11);
    write(2, v9, v10);
    sub_216B40DB8(v12);
    sub_216B1FF6C(&v13);
  }
  sub_216B2BD3C();
  exit(1);
}

void **sub_216B25FB8(void **a1, uint64_t *a2)
{
  sub_216B34E90(a2, a1);
  return a1;
}

_QWORD *sub_216B25FE8(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  sub_216B26014(a2);
  return a1;
}

_QWORD *sub_216B26018(_QWORD *a1)
{
  sub_216B26040(*a1);
  return a1;
}

uint64_t sub_216B26044(uint64_t result, _BYTE *a2)
{
  char v2;

  v2 = 1;
  *(_BYTE *)(result + 17) = 1;
  if (*a2)
  {
    *(_QWORD *)result = a2;
    v2 = 3;
  }
  *(_BYTE *)(result + 16) = v2;
  return result;
}

uint64_t sub_216B26064(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 16) = 260;
  *(_QWORD *)result = a2;
  return result;
}

uint64_t sub_216B26074(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 16) = 261;
  *(_QWORD *)result = a2;
  return result;
}

uint64_t sub_216B26088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B25CC0(a1, a2);
  return nullsub_1(v2, v3);
}

pthread_mutex_t **sub_216B2609C(pthread_mutex_t **a1, int a2)
{
  char v2;
  pthread_mutex_t **result;

  v2 = a2;
  result = sub_216B281CC(a1, a2);
  *((_DWORD *)result + 2) = 0;
  *((_BYTE *)result + 12) = v2;
  return result;
}

uint64_t sub_216B260C4()
{
  return sub_216B2112C();
}

uint64_t sub_216B260CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B26100(*(unsigned int **)a1, *(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 8));
  return sub_216B1E600((uint64_t)&v2);
}

BOOL sub_216B26104(uint64_t a1, const void *a2, uint64_t a3)
{
  return *(_QWORD *)(a1 + 8) == a3 && memcmp(*(const void **)a1, a2, 4 * a3) == 0;
}

uint64_t sub_216B2613C(const void **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t vars0;

  v3 = a2;
  return sub_216B26168(a1, (int *)&v3, (int *)&vars0);
}

uint64_t sub_216B26168(const void **a1, int *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  v6 = sub_216B26594((uint64_t)a2, (uint64_t)a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > (v7 - sub_216B1E67C((uint64_t)a1)) >> 2)
  {
    v8 = sub_216B262E4((uint64_t)a1);
    sub_216B26598(a1, v8 + v6);
  }
  v9 = (_DWORD *)sub_216B1E67C((uint64_t)a1);
  sub_216B265A4(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + 4 * v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216B26208(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B26598((const void **)a1, 0);
  *(_DWORD *)sub_216B1E67C(a1) = *a2;
  v4 = sub_216B1E67C(a1) + 4;
  return sub_216B203A4(a1, v4);
}

uint64_t sub_216B26264(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return sub_216B26208(a1, &v3);
}

uint64_t sub_216B26288(_QWORD *a1, uint64_t a2)
{
  return *(char *)(*a1 + a2);
}

uint64_t sub_216B26294(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[16];

  v2 = sub_216B262E0(a1);
  v3 = sub_216B262E4(a1);
  sub_216B1E684(v5, v2, v3);
  return sub_216B260CC((uint64_t)v5);
}

uint64_t sub_216B262E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return (v2 - sub_216B1E600(a1)) >> 2;
}

BOOL sub_216B26318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7[2];

  v4 = sub_216B262E0(a2);
  v5 = sub_216B262E4(a2);
  sub_216B1E684(v7, v4, v5);
  return sub_216B26378(a1, v7[0], (uint64_t)v7[1]);
}

BOOL sub_216B26378(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];

  v6 = sub_216B262E0(a1);
  v7 = sub_216B262E4(a1);
  sub_216B1E684(v9, v6, v7);
  return sub_216B26104((uint64_t)v9, a2, a3);
}

uint64_t sub_216B263DC(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, 4 * a2, 4);
}

uint64_t sub_216B263E8(uint64_t a1, char a2)
{
  *(_QWORD *)a1 = off_24D5EF820;
  *(_DWORD *)(a1 + 16) = 1 << a2;
  *(_QWORD *)(a1 + 8) = sub_216B2642C(1 << a2);
  *(_DWORD *)(a1 + 20) = 0;
  return a1;
}

_QWORD *sub_216B2642C(int a1)
{
  _QWORD *result;

  result = malloc_type_calloc((a1 + 1), 8uLL, 0x80040B8603338uLL);
  result[a1] = -1;
  return result;
}

uint64_t sub_216B2646C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5EF820;
  free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_216B264A8(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 4 * a2);
}

uint64_t sub_216B264B0(unsigned int *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v4 = sub_216B2088C();
  v5 = sub_216B20378((uint64_t)a1, a2);
  v6 = v5;
  if (v5 > 0x40)
  {
    v8 = v5 & 0xFFFFFFFFFFFFFFC0;
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    sub_216B2090C((uint64_t)a1, v4, (uint64_t *)v12);
    v9 = v8 - 64;
    if (v8 != 64)
    {
      v10 = (uint64_t)(a1 + 16);
      do
      {
        sub_216B209A0((uint64_t *)v12, v10);
        v10 += 64;
        v9 -= 64;
      }
      while (v9);
    }
    if ((v6 & 0x3F) != 0)
      sub_216B209A0((uint64_t *)v12, a2 - 64);
    v7 = sub_216B20C68(v12, v6);
  }
  else
  {
    v7 = sub_216B20C08(a1, v5, v4);
  }
  sub_216B20C64(&v14, v7);
  return v14;
}

char *sub_216B26598(const void **a1, uint64_t a2)
{
  return sub_216B203B4(a1, 4 * a2, 4);
}

uint64_t sub_216B265A4(int *a1, int *a2, _DWORD *a3)
{
  uint64_t v3;

  sub_216B265C8(a1, a2, a3);
  return v3;
}

uint64_t sub_216B265BC(uint64_t a1, uint64_t a2)
{
  return (a2 - a1) >> 2;
}

uint64_t sub_216B265C8(int *a1, int *a2, _DWORD *a3)
{
  int *v4;
  int v5;
  _DWORD *v6;
  _DWORD *v8;
  int *v9;
  uint64_t v10;

  v8 = a3;
  v9 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      v5 = *v4++;
      v6 = v8;
      *v8 = v5;
      v8 = v6 + 1;
      v9 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v10, &v9, &v8);
  return v10;
}

uint64_t sub_216B2663C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  size_t v13;

  v6 = *a1;
  if (!v6)
  {
    sub_216B26720(a1);
    v6 = *a1;
  }
  a1[15] += a2;
  if (a3 <= 1)
    a3 = 1;
  result = sub_216B2678C(v6, a3);
  v8 = result + a2;
  if (result + a2 > (unint64_t)a1[1])
  {
    v9 = a2 + a3 - 1;
    v13 = v9;
    if (v9 > 0x1000)
    {
      v12 = sub_216B267A0((int)a1 + 128, v9);
      *(_QWORD *)&v11 = sub_216B2680C((uint64_t)&v12, (uint64_t)&v13);
      *((_QWORD *)&v11 + 1) = v10;
      sub_216B267B0((uint64_t)(a1 + 9), &v11);
      return sub_216B2678C((uint64_t)v12, a3);
    }
    sub_216B26720(a1);
    result = sub_216B2678C(*a1, a3);
    v8 = result + a2;
  }
  *a1 = v8;
  return result;
}

uint64_t sub_216B26720(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  size_t v4;
  uint64_t result;
  char *v6;
  char *v7;

  v2 = (uint64_t)(a1 + 2);
  v3 = sub_216B26878((uint64_t)(a1 + 2));
  v4 = sub_216B26838(v3);
  v7 = (char *)sub_216B267A0((int)a1 + 128, v4);
  result = sub_216B268AC(v2, &v7);
  v6 = &v7[v4];
  *a1 = v7;
  a1[1] = v6;
  return result;
}

uint64_t sub_216B2678C(uint64_t a1, uint64_t a2)
{
  return (a2 + a1 - 1) & -a2;
}

void *sub_216B267A0(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9BAEE824uLL);
}

uint64_t sub_216B267B0(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B26914((const void **)a1, 0);
  *(_OWORD *)sub_216B1E67C(a1) = *a2;
  v4 = sub_216B1E67C(a1) + 16;
  return sub_216B203A4(a1, v4);
}

uint64_t sub_216B2680C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B26920(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B26838(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = 30;
  v2 = a1 >> 7;
  return 4096 << *(_QWORD *)sub_216B24E80(&v3, &v2);
}

uint64_t sub_216B26878(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return (v2 - sub_216B1E600(a1)) >> 3;
}

uint64_t sub_216B268AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B26908((const void **)a1, 0);
  *(_QWORD *)sub_216B1E67C(a1) = *a2;
  v4 = sub_216B1E67C(a1) + 8;
  return sub_216B203A4(a1, v4);
}

char *sub_216B26908(const void **a1, uint64_t a2)
{
  return sub_216B203B4(a1, 8 * a2, 8);
}

char *sub_216B26914(const void **a1, uint64_t a2)
{
  return sub_216B203B4(a1, 16 * a2, 16);
}

_QWORD *sub_216B26924(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *result = *a2;
  result[1] = v3;
  return result;
}

void sub_216B26934(std::string *a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5[2];
  std::string v6;
  std::string v7;
  std::string __str;
  _QWORD v9[4];
  char v10;

  v2 = (_QWORD *)sub_216B1E678((int)&v10, "x86_64-apple-darwin19.0.0");
  sub_216B26A84(v2, 0x2Du, (uint64_t)v9);
  sub_216B24898(v9, (uint64_t)&__str);
  std::string::basic_string(&v7, &__str);
  sub_216B26B1C(&v7, 45);
  sub_216B26B40(&v7, v9[2], v9[3]);
  if (*(_BYTE *)sub_216B25B54((uint64_t)&v7, 0) == 105)
  {
    v3 = (char *)sub_216B25B54((uint64_t)&v7, 1);
    if (sub_216B26B8C(*v3)
      && *(_BYTE *)sub_216B25B54((uint64_t)&v7, 2) == 56
      && *(_BYTE *)sub_216B25B54((uint64_t)&v7, 3) == 54)
    {
      *(_BYTE *)sub_216B25B54((uint64_t)&v7, 1) = 51;
    }
  }
  v4 = sub_216B26B94((uint64_t)&v7, "-darwin", 0);
  if (v4 != -1)
  {
    sub_216B25B4C(&v7, v4 + 7);
    sub_216B26BF0((uint64_t)&v6);
    sub_216B26C9C(&v7, (uint64_t)&v6);
    std::string::~string(&v6);
  }
  sub_216B26CA0(v5, &v7);
  sub_216B33994(v5[0], v5[1], a1);
  std::string::~string(&v7);
  std::string::~string(&__str);
}

uint64_t sub_216B26A84@<X0>(_QWORD *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v5 = sub_216B26CA8(a1, a2, 0);
  if (v5 == -1)
  {
    sub_216B26D14(v11);
    return sub_216B26D04((uint64_t)a1, (uint64_t)v11, a3);
  }
  else
  {
    v6 = v5;
    v11[0] = sub_216B26D18(a1, 0, v5);
    v11[1] = v7;
    v10[0] = sub_216B26D18(a1, v6 + 1, 0xFFFFFFFFFFFFFFFFLL);
    v10[1] = v8;
    return sub_216B26D04((uint64_t)v11, (uint64_t)v10, a3);
  }
}

std::string *sub_216B26B1C(std::string *a1, std::string::value_type a2)
{
  std::string::push_back(a1, a2);
  return a1;
}

std::string *sub_216B26B40(std::string *a1, uint64_t a2, uint64_t a3)
{
  const std::string::value_type *v4;
  std::string::size_type v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (const std::string::value_type *)sub_216B1E600((uint64_t)v7);
  v5 = sub_216B1E67C((uint64_t)v7);
  return std::string::append(a1, v4, v5);
}

BOOL sub_216B26B8C(unsigned int a1)
{
  return sub_216B26DBC(a1, 1024);
}

uint64_t sub_216B26B94(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v6 = sub_216B26088(a1, (uint64_t)a2);
  v8 = sub_216B25B78(a1, v7);
  v9 = sub_216B25DF0(a2);
  return sub_216B27030(v6, v8, a2, a3, v9);
}

uint64_t sub_216B26BF0@<X0>(uint64_t a1@<X8>)
{
  utsname v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (uname(&v3))
    return sub_216B26DE8(a1, &byte_216C19659);
  else
    return sub_216B26DE8(a1, v3.release);
}

unint64_t sub_216B26CA8(_QWORD *a1, unsigned __int8 a2, unint64_t a3)
{
  unint64_t result;
  uint64_t v6;

  result = sub_216B26D84(a3, a1[1]);
  v6 = a1[1];
  if (result == v6)
    return -1;
  while (*(unsigned __int8 *)(*a1 + result) != a2)
  {
    if (v6 == ++result)
      return -1;
  }
  return result;
}

uint64_t sub_216B26D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B26D90(a3, a1, a2);
}

uint64_t sub_216B26D18(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v5 = sub_216B26D84(a2, a1[1]);
  v6 = sub_216B26DB0(v5, a3);
  v7 = sub_216B26D84(v6, a1[1]);
  sub_216B1E684(&v9, *a1 + v5, v7 - v5);
  return v9;
}

unint64_t sub_216B26D84(unint64_t result, unint64_t a2)
{
  if (result >= a2)
    return a2;
  return result;
}

__n128 sub_216B26D94(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  *a1 = *a2;
  result = *a3;
  a1[1] = *a3;
  return result;
}

_QWORD *sub_216B26DA8(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

unint64_t sub_216B26DB0(unint64_t result, unint64_t a2)
{
  if (result <= a2)
    return a2;
  return result;
}

BOOL sub_216B26DBC(unsigned int a1, int a2)
{
  return a1 <= 0xFF && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a1 + 60) & a2) != 0;
}

std::string *sub_216B26DEC(std::string *a1, const std::string::value_type *a2)
{
  std::string::size_type v4;
  char v6;
  char v7;

  sub_216B250EC(a1, &v7, &v6);
  v4 = sub_216B25DF0(a2);
  std::string::__init(a1, a2, v4);
  return a1;
}

uint64_t *sub_216B26E3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = sub_216B26088(a2, a2);
  a1[1] = sub_216B26E78(a2, v4);
  return a1;
}

uint64_t sub_216B26E7C(uint64_t a1, uint64_t a2)
{
  sub_216B26EA0(a1, a2);
  return a1;
}

uint64_t sub_216B26EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  char v25;

  nullsub_1(a1, a2);
  if (sub_216B25CF8(a1, v4))
  {
    v6 = j_j_nullsub_1(a1);
    v8 = sub_216B25CA8(a1, v7);
    v10 = sub_216B26FD4(a1, v9);
    sub_216B26FD0(v6, v8, v10);
  }
  v11 = sub_216B25B78(a2, v5);
  v13 = sub_216B25CF8(a2, v12);
  sub_216B26FF0(a1, a2);
  v15 = j_nullsub_1(a2, v14);
  v17 = j_nullsub_1(a1, v16);
  v18 = *(_QWORD *)(v15 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v15;
  *(_QWORD *)(v17 + 16) = v18;
  sub_216B25D8C(a2, 0);
  v20 = (_BYTE *)sub_216B25D14(a2, v19);
  v25 = 0;
  sub_216B25D5C(v20, &v25);
  if (a1 == a2 || v13)
    nullsub_1(a2, 0);
  else
    nullsub_1(a2, v11);
  result = sub_216B25CF8(a1, v21);
  if (a1 != a2 && !(_DWORD)result)
  {
    v24 = sub_216B25D40(a1, v23);
    return nullsub_1(a1, v24);
  }
  return result;
}

uint64_t sub_216B26FD4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(j_nullsub_1(a1, a2) + 16) & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_216B26FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, a3, 1);
}

uint64_t sub_216B27004(uint64_t a1, uint64_t a2)
{
  j_j_nullsub_1(a2);
  return j_j_nullsub_1(a1);
}

uint64_t sub_216B27030(uint64_t a1, unint64_t a2, char *a3, unint64_t a4, uint64_t a5)
{
  char *v6;
  char *v7;

  if (a4 > a2)
    return -1;
  if (a5)
  {
    v6 = (char *)(a1 + a2);
    v7 = sub_216B27084((char *)(a1 + a4), a1 + a2, a3, &a3[a5]);
    if (v7 == v6)
      return -1;
    else
      return (uint64_t)&v7[-a1];
  }
  return a4;
}

char *sub_216B27084(char *a1, uint64_t a2, char *a3, char *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v7;
  char *v9;
  char v11;

  v4 = a1;
  v5 = a4 - a3;
  if (a4 != a3)
  {
    v7 = a2 - (_QWORD)a1;
    if (a2 - (uint64_t)a1 >= v5)
    {
      v11 = *a3;
      do
      {
        v9 = (char *)sub_216B27118(v4, v7 - v5 + 1, &v11);
        if (!v9)
          break;
        v4 = v9;
        if (!j__memcmp(v9, a3, v5))
          return v4;
        v7 = a2 - (_QWORD)++v4;
      }
      while (a2 - (uint64_t)v4 >= v5);
    }
    return (char *)a2;
  }
  return v4;
}

void *sub_216B27118(void *a1, size_t __n, char *a3)
{
  if (__n)
    return j__memchr(a1, *a3, __n);
  else
    return 0;
}

std::string *sub_216B2713C(std::string *a1, uint64_t a2)
{
  const std::string::value_type *v4;
  uint64_t v5;
  std::string::size_type v6;

  v4 = (const std::string::value_type *)sub_216B26088(a2, a2);
  v6 = sub_216B25B78(a2, v5);
  return std::string::append(a1, v4, v6);
}

BOOL sub_216B27184(float a1)
{
  return sub_216B27198(a1);
}

BOOL sub_216B27198(float a1)
{
  return fabsf(a1) == INFINITY;
}

uint64_t sub_216B271B0()
{
  return sub_216B271C4();
}

uint64_t sub_216B271C4()
{
  return 0;
}

uint64_t sub_216B271E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t sub_216B271E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v10[2];

  sub_216B1E684(v10, a3, a4);
  v8 = sub_216B27248(24, v10);
  return sub_216B27298(v8, a1, a2, a5);
}

uint64_t sub_216B27248(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B1E67C((uint64_t)a2);
  v5 = sub_216B1D1D4(a1 + v4 + 1);
  sub_216B273CC((void *)(v5 + a1), *a2, a2[1]);
  return v5;
}

uint64_t sub_216B2729C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v13);
  v7 = sub_216B27320(v6, a3, a4);
  v8 = v7;
  if (v7)
  {
    v9 = (void *)sub_216B1E67C(v7);
    v10 = (const void *)sub_216B1E600((uint64_t)v13);
    v11 = sub_216B1E67C((uint64_t)v13);
    memcpy(v9, v10, v11);
  }
  return v8;
}

uint64_t sub_216B27320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  v4 = sub_216B1E67C((uint64_t)&v10);
  v5 = sub_216B273B8(v4 + 25, 0x10uLL);
  v6 = sub_216B1D1D4(a1 + v5 + 1);
  v7 = v6;
  if (v6)
  {
    sub_216B273CC((void *)(v6 + 24), v10, v11);
    *(_BYTE *)(v7 + v5 + a1) = 0;
    sub_216B1E684(v9, v7 + v5, a1);
    sub_216B27298(v7, v9[0], v9[1], 1);
  }
  return v7;
}

unint64_t sub_216B273B8(uint64_t a1, unint64_t a2)
{
  return (a1 + a2 - 1) / a2 * a2;
}

uint64_t sub_216B273CC(void *a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  size_t v5;
  uint64_t result;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (const void *)sub_216B1E600((uint64_t)v7);
  v5 = sub_216B1E67C((uint64_t)v7);
  memcpy(a1, v4, v5);
  result = sub_216B1E67C((uint64_t)v7);
  *((_BYTE *)a1 + result) = 0;
  return result;
}

uint64_t sub_216B27424(size_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = sub_216B27320(a1, a2, a3);
  v5 = v4;
  if (v4)
  {
    v6 = (void *)sub_216B1E67C(v4);
    bzero(v6, a1);
  }
  return v5;
}

uint64_t sub_216B27460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9[3];
  const void *v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  sub_216B1E678((int)v10, "-");
  if (sub_216B274F0(a1, a2, v10[0], (size_t)v10[1]))
    return sub_216B2751C();
  sub_216B25FB0((uint64_t)v9, (uint64_t)v11);
  return sub_216B27564(v9, a3, 1, 0, a4);
}

BOOL sub_216B274F0(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return sub_216B1E644((uint64_t)v5, a3, a4);
}

uint64_t sub_216B2751C()
{
  uint64_t v1;

  sub_216B2B138();
  sub_216B1E678((int)&v1, "<stdin>");
  return sub_216B27998();
}

uint64_t sub_216B27564@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  _BYTE v14[280];

  sub_216B275E4(v14);
  v13[0] = sub_216B34FB8(a1, (uint64_t)v14);
  v13[1] = v10;
  v11 = (char *)sub_216B1E600((uint64_t)v13);
  sub_216B275E8(v11, a2, a3, a4, a5);
  return sub_216B2489C(v14);
}

uint64_t sub_216B275E8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  int v15;

  v15 = 0;
  sub_216B25FA8((uint64_t)v12, a1);
  v13 = sub_216B29838(v12, &v15);
  v14 = v10;
  if (sub_216B27BAC(&v13))
    return sub_216B27BBC(a5, v13, v14);
  sub_216B276A8(v15, a1, a2, a2, 0, a3, a4, a5);
  return close(v15);
}

uint64_t sub_216B27694@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return sub_216B276A8(a1, a2, a3, a3, 0, a4, a5, a6);
}

uint64_t sub_216B276A8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  unsigned __int8 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  ssize_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  int v33;
  int v34;
  const std::error_category *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  _QWORD v40[2];
  uint64_t v41[2];
  _BYTE v42[8];
  _QWORD v43[2];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[3];

  v15 = atomic_load((unsigned __int8 *)&qword_254E4AE40);
  if ((v15 & 1) == 0)
  {
    v38 = a3;
    v36 = __cxa_guard_acquire(&qword_254E4AE40);
    a3 = v38;
    if (v36)
    {
      v37 = sub_216B2ABE0();
      dword_254E4AE38 = sub_216B1E67C(v37);
      __cxa_guard_release(&qword_254E4AE40);
      a3 = v38;
    }
  }
  if (a4 == -1)
  {
    a4 = a3;
    if (a3 == -1)
    {
      sub_216B27CA4((uint64_t)v48);
      v46 = sub_216B29D58(a1, v48);
      v47 = v31;
      if (sub_216B27BAC(&v46))
      {
        v28 = v46;
        v29 = v47;
        v27 = a8;
        return sub_216B27BBC(v27, v28, v29);
      }
      v33 = sub_216B27CA8((uint64_t)v48);
      if (v33 != 2 && v33 != 5)
      {
        sub_216B1E678((int)&v45, a2);
        return sub_216B27998();
      }
      a4 = sub_216B27CB0((uint64_t)v48);
      a3 = a4;
    }
  }
  if (sub_216B27CB8(a1, a3, a4, a5, a6, dword_254E4AE38, a7))
  {
    sub_216B27D74(v48);
    sub_216B1E678((int)v43, a2);
    sub_216B1E684(&v46, v43[0], v43[1]);
    v16 = (_QWORD *)sub_216B27248(48, &v46);
    sub_216B27D78(v16, a6, a1, a4, a5, *(uint64_t *)&v48[0], *((uint64_t *)&v48[0] + 1));
    sub_216B27D7C((uint64_t)v44, (uint64_t)v16);
    if (!sub_216B27BAC(v48))
    {
      sub_216B27D80(v42, v44);
      sub_216B27D84(a8, (uint64_t)v42);
      sub_216B27C04(v42);
      v30 = v44;
      return sub_216B27C04(v30);
    }
    sub_216B27C04(v44);
  }
  sub_216B1E678((int)v41, a2);
  v17 = sub_216B27320(a4, v41[0], v41[1]);
  if (!v17)
  {
    v24 = sub_216B27D88(12);
    v26 = v25;
    v27 = a8;
    v28 = v24;
    v29 = v26;
    return sub_216B27BBC(v27, v28, v29);
  }
  sub_216B27D7C((uint64_t)v48, v17);
  v19 = sub_216B25CA8((uint64_t)v48, v18);
  v20 = sub_216B1E67C(v19);
  if (!a4)
  {
LABEL_25:
    sub_216B27D80(v39, v48);
    sub_216B27D84(a8, (uint64_t)v39);
    sub_216B27C04(v39);
    goto LABEL_26;
  }
  v21 = (char *)v20;
  v22 = a4 + a5;
  while (1)
  {
    v23 = pread(a1, v21, a4, v22 - a4);
    if (v23 == -1)
      break;
    if (!v23)
    {
      bzero(v21, a4);
      goto LABEL_25;
    }
    a4 -= v23;
    v21 += v23;
LABEL_14:
    if (!a4)
      goto LABEL_25;
  }
  if (*__error() == 4)
    goto LABEL_14;
  v34 = *__error();
  v35 = std::generic_category();
  sub_216B27DC4((uint64_t)v40, v34, (uint64_t)v35);
  sub_216B27BBC(a8, v40[0], v40[1]);
LABEL_26:
  v30 = v48;
  return sub_216B27C04(v30);
}

uint64_t sub_216B27998()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  ssize_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const std::error_category *v16;
  _BYTE v18[8];
  _BYTE v19[8];
  _QWORD v20[2];
  const void *v21[2051];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v7 = v6;
  sub_216B28110(v21);
  while (1)
  {
    v8 = sub_216B1FF14((uint64_t)v21);
    sub_216B28114(v21, v8 + 0x4000);
    v9 = (void *)sub_216B1E67C((uint64_t)v21);
    v10 = read(v5, v9, 0x4000uLL);
    if (v10 == -1)
      break;
    v11 = sub_216B1FF14((uint64_t)v21);
    sub_216B28154((uint64_t)v21, v11 + v10);
LABEL_5:
    if (!v10)
    {
      v12 = sub_216B28180((uint64_t)v21);
      v14 = sub_216B2729C(v12, v13, v4, v2);
      sub_216B27D7C((uint64_t)v19, v14);
      sub_216B27D80(v18, v19);
      sub_216B27D84(v7, (uint64_t)v18);
      sub_216B27C04(v18);
      sub_216B27C04(v19);
      return sub_216B2489C(v21);
    }
  }
  if (*__error() == 4)
    goto LABEL_5;
  v15 = *__error();
  v16 = std::generic_category();
  sub_216B27DC4((uint64_t)v20, v15, (uint64_t)v16);
  sub_216B27BBC(v7, v20[0], v20[1]);
  return sub_216B2489C(v21);
}

uint64_t sub_216B27AD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_216B281C0(a1);
  sub_216B1E684(&v4, v1, v2);
  return v4;
}

const char *sub_216B27B14()
{
  return "Unknown buffer";
}

_QWORD *sub_216B27B20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  *sub_216B27B84(a1) = &off_24D5EF888;
  v4 = sub_216B1E600((uint64_t)v7);
  v5 = sub_216B1E608(v7);
  sub_216B271E0((uint64_t)a1, v4, v5);
  return a1;
}

_QWORD *sub_216B27B84(_QWORD *result)
{
  *result = off_24D5EF858;
  return result;
}

uint64_t sub_216B27B9C(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_216B27BA4()
{
  return 0;
}

BOOL sub_216B27BAC(_DWORD *a1)
{
  return *a1 != 0;
}

uint64_t sub_216B27BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *(_BYTE *)(a1 + 16) |= 1u;
  v6 = (_QWORD *)nullsub_1(a1, a2);
  *v6 = a2;
  v6[1] = a3;
  return a1;
}

uint64_t sub_216B27C08(uint64_t a1)
{
  sub_216B27C30(a1, 0);
  return a1;
}

_QWORD *sub_216B27C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = j_nullsub_1(a1, v7);
    return (_QWORD *)sub_216B27C8C(v8, v4);
  }
  return result;
}

uint64_t sub_216B27C8C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t sub_216B27CA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_216B27CB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_216B27CB8(int a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, unsigned int a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v13;
  int v14;
  uint64_t v16;
  _QWORD v17[2];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  if ((a7 & 1) != 0)
    return 0;
  v19 = v7;
  v20 = v8;
  v13 = a3 < 0x4000 || a6 > a3;
  v14 = v13;
  result = v14 ^ 1u;
  if (!v13 && a5)
  {
    if (a2 == -1)
    {
      sub_216B27CA4((uint64_t)v18);
      v17[0] = sub_216B29D58(a1, v18);
      v17[1] = v16;
      if (sub_216B27BAC(v17))
        return 0;
      a2 = sub_216B27CB0((uint64_t)v18);
    }
    return a4 + a3 == a2 && (a2 & (int)(a6 - 1)) != 0;
  }
  return result;
}

uint64_t sub_216B27D88(int a1)
{
  const std::error_category *v2;
  uint64_t v4;

  v2 = std::generic_category();
  sub_216B27DC4((uint64_t)&v4, a1, (uint64_t)v2);
  return v4;
}

double sub_216B27DC8(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0xFFFF00000000;
  return result;
}

uint64_t sub_216B27DE4(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = std::system_category();
  return a1;
}

_QWORD *sub_216B27E10(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];

  v17[0] = a6;
  v17[1] = a7;
  v11 = sub_216B27B84(a1);
  *v11 = off_24D5EF8B8;
  v12 = v11 + 3;
  v13 = sub_216B27ED0(a4, a5);
  v14 = sub_216B27F00(a5);
  sub_216B29F48(v12, a3, 0, 0, v13, v14, v17);
  if (!sub_216B27BAC(v17))
  {
    v15 = sub_216B27F2C((uint64_t)a1, a5);
    sub_216B271E0((uint64_t)a1, v15, v15 + a4);
  }
  return a1;
}

unint64_t sub_216B27ED0(uint64_t a1, unint64_t a2)
{
  return a2 + a1 - sub_216B27F00(a2);
}

unint64_t sub_216B27F00(unint64_t a1)
{
  return (int)-sub_216B29F80() & a1;
}

unint64_t sub_216B27F2C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B2037C(a1 + 24);
  return v3 + a2 - sub_216B27F00(a2);
}

void sub_216B27F68()
{
  void *v0;

  v0 = (void *)sub_216B27F64();
  j__free(v0);
}

uint64_t sub_216B27F7C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_216B27F84()
{
  return 1;
}

_QWORD *sub_216B27F8C(_QWORD *a1)
{
  *a1 = off_24D5EF8B8;
  sub_216B29F7C(a1 + 3);
  return a1;
}

uint64_t sub_216B27FBC(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  return sub_216B27FE4(a1, &v4, &v3);
}

uint64_t sub_216B27FE8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = sub_216B27FFC(a1, a2);
  return nullsub_1(v2, v3);
}

_QWORD *sub_216B27FFC(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_216B28008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v6 = sub_216B28054(a2, a2);
  v4 = j_j_nullsub_1(a2);
  return sub_216B28088(a1, &v6, v4);
}

uint64_t sub_216B28054(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v4) = 0;
  return v3;
}

uint64_t sub_216B2808C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = sub_216B27FFC(a1, a2);
  return nullsub_1(v4, a3);
}

uint64_t sub_216B280B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + 16) &= ~1u;
  v4 = nullsub_1(a1, a2);
  v6 = nullsub_1(a2, v5);
  sub_216B27D80(v4, v6);
  return a1;
}

uint64_t sub_216B28104(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  return result;
}

char *sub_216B28114(const void **a1, unsigned int a2)
{
  char *result;

  result = (char *)sub_216B28190((uint64_t)a1);
  if ((unint64_t)result < a2)
    return sub_216B20384(a1, a2);
  return result;
}

uint64_t sub_216B28154(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1) + a2;
  return sub_216B203A4(a1, v3);
}

uint64_t sub_216B28188()
{
  return sub_216B2112C();
}

uint64_t sub_216B28190(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return v2 - sub_216B1E600(a1);
}

uint64_t sub_216B281C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
}

pthread_mutex_t **sub_216B281CC(pthread_mutex_t **a1, int a2)
{
  pthread_mutex_t *v4;
  int v5;
  pthread_mutexattr_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  v4 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  pthread_mutexattr_init(&v7);
  if (a2)
    v5 = 2;
  else
    v5 = 0;
  pthread_mutexattr_settype(&v7, v5);
  pthread_mutex_init(v4, &v7);
  pthread_mutexattr_destroy(&v7);
  *a1 = v4;
  return a1;
}

pthread_mutex_t **sub_216B28280(pthread_mutex_t **a1)
{
  pthread_mutex_t *v2;

  v2 = *a1;
  pthread_mutex_destroy(*a1);
  free(v2);
  return a1;
}

BOOL sub_216B282B4(pthread_mutex_t **a1)
{
  return pthread_mutex_lock(*a1) == 0;
}

BOOL sub_216B282D4(pthread_mutex_t **a1)
{
  return pthread_mutex_unlock(*a1) == 0;
}

uint64_t sub_216B282F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  sub_216B28340(a3);
  *a3 = a1;
  a3[1] = a2;
  result = sub_216B28344(a1, a2);
  a3[2] = result;
  a3[3] = v7;
  a3[4] = 0;
  return result;
}

uint64_t sub_216B28344(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  const void *v9[2];
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  if (sub_216B29094((uint64_t)v10))
    return v10[0];
  if ((unint64_t)sub_216B1E67C((uint64_t)v10) >= 3)
  {
    v3 = sub_216B26288(v10, 0);
    if (sub_216B28640(v3))
    {
      v4 = sub_216B26288(v10, 0);
      if (v4 == sub_216B26288(v10, 1))
      {
        v5 = sub_216B26288(v10, 2);
        if (!sub_216B28640(v5))
        {
          v8 = 2;
          goto LABEL_14;
        }
      }
    }
  }
  v6 = sub_216B26288(v10, 0);
  if (!sub_216B28640(v6))
  {
    sub_216B1E678((int)v9, "..");
    if (sub_216B2A2EC((uint64_t)v10, v9[0], (size_t)v9[1]))
    {
      v7 = 2;
      return sub_216B2864C(v10, 0, v7);
    }
    if (sub_216B26288(v10, 0) != 46)
    {
      v8 = 0;
LABEL_14:
      v7 = sub_216B286AC(v10, 47, v8);
      return sub_216B2864C(v10, 0, v7);
    }
  }
  v7 = 1;
  return sub_216B2864C(v10, 0, v7);
}

uint64_t sub_216B28470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  __int128 v5;

  *(_QWORD *)&v5 = a1;
  *((_QWORD *)&v5 + 1) = a2;
  sub_216B28340(a3);
  *(_OWORD *)a3 = v5;
  result = sub_216B1E67C((uint64_t)&v5);
  a3[4] = result;
  return result;
}

_QWORD *sub_216B284B4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v17;

  v2 = a1 + 2;
  v3 = a1[4] + sub_216B1E67C((uint64_t)(a1 + 2));
  a1[4] = v3;
  if (v3 != sub_216B1E67C((uint64_t)a1))
  {
    if ((unint64_t)sub_216B1E67C((uint64_t)v2) >= 3
      && (v4 = sub_216B26288(v2, 0), sub_216B28640(v4))
      && (v5 = sub_216B26288(v2, 1), v5 == sub_216B26288(v2, 0)))
    {
      v6 = sub_216B26288(v2, 2);
      v7 = !sub_216B28640(v6);
    }
    else
    {
      v7 = 0;
    }
    v8 = sub_216B26288(a1, a1[4]);
    if (sub_216B28640(v8))
    {
      v9 = a1[4];
      v10 = (uint64_t)a1;
      if (v7)
      {
        v11 = sub_216B2864C(a1, a1[4], 1uLL);
LABEL_18:
        a1[2] = v11;
        a1[3] = v12;
        return a1;
      }
      while (v9 != sub_216B1E67C(v10))
      {
        v13 = sub_216B26288(a1, a1[4]);
        if (!sub_216B28640(v13))
          break;
        v9 = a1[4] + 1;
        a1[4] = v9;
        v10 = (uint64_t)a1;
      }
      v14 = a1[4];
      if (v14 == sub_216B1E67C((uint64_t)a1))
      {
        --a1[4];
        sub_216B1E678((int)&v17, ".");
        goto LABEL_3;
      }
    }
    v15 = sub_216B286AC(a1, 47, a1[4]);
    v11 = sub_216B26D18(a1, a1[4], v15);
    goto LABEL_18;
  }
  sub_216B26D14(&v17);
LABEL_3:
  *(_OWORD *)v2 = v17;
  return a1;
}

BOOL sub_216B28640(int a1)
{
  return a1 == 47;
}

uint64_t sub_216B2864C(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = sub_216B26D84(a2, a1[1]);
  v6 = a1[1];
  v7 = *a1 + v5;
  v8 = sub_216B26D84(a3, v6 - v5);
  sub_216B1E684(&v10, v7, v8);
  return v10;
}

BOOL sub_216B286B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B1E600(a1);
  return v4 == sub_216B1E600(a2) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

double sub_216B28708@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)&v8 = a1;
  *((_QWORD *)&v8 + 1) = a2;
  sub_216B28340(v6);
  v6[0] = v8;
  v7 = sub_216B1E67C((uint64_t)&v8);
  sub_216B28764((uint64_t)v6);
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a3 = v6[0];
  *(_OWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t sub_216B28764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;

  v2 = sub_216B2886C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 == sub_216B1E67C(a1)
    && sub_216B1E67C(a1) > (unint64_t)(v2 + 1)
    && (v4 = sub_216B26288((_QWORD *)a1, *(_QWORD *)(a1 + 32) - 1), sub_216B28640(v4)))
  {
    --*(_QWORD *)(a1 + 32);
    sub_216B1E678((int)&v14, ".");
    *(_OWORD *)(a1 + 16) = v14;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v2 + 1;
    do
    {
      v7 = v5;
      if (!v5)
        break;
      if (v6 == v5)
        break;
      --v5;
      v8 = sub_216B26288((_QWORD *)a1, v7 - 1);
    }
    while (sub_216B28640(v8));
    v9 = sub_216B2864C((_QWORD *)a1, 0, v7);
    v11 = sub_216B28974(v9, v10);
    *(_QWORD *)(a1 + 16) = sub_216B26D18((_QWORD *)a1, v11, v7);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v11;
  }
  return a1;
}

uint64_t sub_216B2886C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t result;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  if (sub_216B1E67C((uint64_t)v10) == 2)
  {
    v2 = sub_216B26288(v10, 0);
    if (sub_216B28640(v2))
    {
      v3 = sub_216B26288(v10, 0);
      if (v3 == sub_216B26288(v10, 1))
        return -1;
    }
  }
  if ((unint64_t)sub_216B1E67C((uint64_t)v10) >= 4)
  {
    v4 = sub_216B26288(v10, 0);
    if (sub_216B28640(v4))
    {
      v5 = sub_216B26288(v10, 0);
      if (v5 == sub_216B26288(v10, 1))
      {
        v6 = sub_216B26288(v10, 2);
        if (!sub_216B28640(v6))
          return sub_216B286AC(v10, 47, 2);
      }
    }
  }
  if (!sub_216B1E67C((uint64_t)v10))
    return -1;
  v7 = sub_216B26288(v10, 0);
  v8 = sub_216B28640(v7);
  result = 0;
  if (!v8)
    return -1;
  return result;
}

uint64_t sub_216B28974(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  if (sub_216B1E67C((uint64_t)v13) != 2
    || (v2 = sub_216B26288(v13, 0), !sub_216B28640(v2))
    || (v3 = sub_216B26288(v13, 0), v4 = sub_216B26288(v13, 1), result = 0, v3 != v4))
  {
    if (sub_216B1E67C((uint64_t)v13)
      && (v6 = sub_216B1E67C((uint64_t)v13), v7 = sub_216B26288(v13, v6 - 1), sub_216B28640(v7)))
    {
      return sub_216B1E67C((uint64_t)v13) - 1;
    }
    else
    {
      v8 = sub_216B1E67C((uint64_t)v13);
      v9 = sub_216B29260(v13, 47, v8 - 1);
      if (v9 == -1)
      {
        return 0;
      }
      else
      {
        v10 = v9;
        if (v9 != 1)
          return v10 + 1;
        v11 = sub_216B26288(v13, 0);
        v12 = sub_216B28640(v11);
        result = 0;
        if (!v12)
          return v10 + 1;
      }
    }
  }
  return result;
}

uint64_t sub_216B28A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD v20[5];
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  _QWORD v25[2];
  __int128 v26;

  v25[0] = a1;
  v25[1] = a2;
  sub_216B282F4(a1, a2, (uint64_t *)v23);
  v21[0] = v23[0];
  v21[1] = v23[1];
  v22 = v24;
  sub_216B28470(a1, a2, v20);
  if (!sub_216B28BD4((uint64_t)v23, (uint64_t)v20))
    goto LABEL_10;
  v4 = sub_216B28BEC((uint64_t)v23);
  if ((unint64_t)sub_216B1E67C(v4) < 3
    || (v5 = (_QWORD *)sub_216B28BEC((uint64_t)v23), v6 = sub_216B26288(v5, 0), !sub_216B28640(v6))
    || (v7 = (_QWORD *)sub_216B28BEC((uint64_t)v23),
        v8 = sub_216B26288(v7, 1),
        v9 = (_QWORD *)sub_216B28BEC((uint64_t)v23),
        v8 != sub_216B26288(v9, 0)))
  {
    v17 = (_QWORD *)sub_216B28BEC((uint64_t)v23);
    v18 = sub_216B26288(v17, 0);
    if (sub_216B28640(v18))
      return *(_OWORD *)sub_216B28BEC((uint64_t)v23);
LABEL_10:
    sub_216B26D14(&v26);
    return v26;
  }
  sub_216B284B4(v21);
  if (!sub_216B28BD4((uint64_t)v21, (uint64_t)v20))
    return *(_OWORD *)sub_216B28BEC((uint64_t)v23);
  v10 = (_QWORD *)sub_216B28BEC((uint64_t)v21);
  v11 = sub_216B26288(v10, 0);
  if (!sub_216B28640(v11))
    return *(_OWORD *)sub_216B28BEC((uint64_t)v23);
  v12 = sub_216B28BEC((uint64_t)v23);
  v13 = sub_216B1E67C(v12);
  v14 = sub_216B28BEC((uint64_t)v21);
  v15 = sub_216B1E67C(v14);
  *(_QWORD *)&v26 = sub_216B2864C(v25, 0, v15 + v13);
  *((_QWORD *)&v26 + 1) = v16;
  return v26;
}

BOOL sub_216B28BD4(uint64_t a1, uint64_t a2)
{
  return !sub_216B286B0(a1, a2);
}

uint64_t sub_216B28BEC(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_216B28BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD v11[5];
  uint64_t v12[5];
  __int128 v13;

  sub_216B282F4(a1, a2, v12);
  sub_216B28470(a1, a2, v11);
  if (sub_216B28BD4((uint64_t)v12, (uint64_t)v11)
    && (v4 = sub_216B28BEC((uint64_t)v12), (unint64_t)sub_216B1E67C(v4) >= 3)
    && (v5 = (_QWORD *)sub_216B28BEC((uint64_t)v12), v6 = sub_216B26288(v5, 0), sub_216B28640(v6))
    && (v7 = (_QWORD *)sub_216B28BEC((uint64_t)v12),
        v8 = sub_216B26288(v7, 1),
        v9 = (_QWORD *)sub_216B28BEC((uint64_t)v12),
        v8 == sub_216B26288(v9, 0)))
  {
    return *(_OWORD *)sub_216B28BEC((uint64_t)v12);
  }
  else
  {
    sub_216B26D14(&v13);
  }
  return v13;
}

uint64_t sub_216B28CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _OWORD *v12;
  _QWORD *v13;
  int v14;
  _QWORD v16[5];
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  __int128 v21;

  sub_216B282F4(a1, a2, (uint64_t *)v19);
  v17[0] = v19[0];
  v17[1] = v19[1];
  v18 = v20;
  sub_216B28470(a1, a2, v16);
  if (!sub_216B28BD4((uint64_t)v19, (uint64_t)v16))
    goto LABEL_11;
  v4 = sub_216B28BEC((uint64_t)v19);
  if ((unint64_t)sub_216B1E67C(v4) < 3
    || (v5 = (_QWORD *)sub_216B28BEC((uint64_t)v19), v6 = sub_216B26288(v5, 0), !sub_216B28640(v6))
    || (v7 = (_QWORD *)sub_216B28BEC((uint64_t)v19),
        v8 = sub_216B26288(v7, 1),
        v9 = (_QWORD *)sub_216B28BEC((uint64_t)v19),
        v8 != sub_216B26288(v9, 0)))
  {
    v13 = (_QWORD *)sub_216B28BEC((uint64_t)v19);
    v14 = sub_216B26288(v13, 0);
    if (sub_216B28640(v14))
    {
      v12 = v19;
      return *(_OWORD *)sub_216B28BEC((uint64_t)v12);
    }
LABEL_11:
    sub_216B26D14(&v21);
    return v21;
  }
  sub_216B284B4(v17);
  if (!sub_216B28BD4((uint64_t)v17, (uint64_t)v16))
    goto LABEL_11;
  v10 = (_QWORD *)sub_216B28BEC((uint64_t)v17);
  v11 = sub_216B26288(v10, 0);
  if (!sub_216B28640(v11))
    goto LABEL_11;
  v12 = v17;
  return *(_OWORD *)sub_216B28BEC((uint64_t)v12);
}

uint64_t sub_216B28DE8(const void **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 *v20;
  _BOOL4 v21;
  int v22;
  char *v23;
  BOOL v24;
  int v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 *v30;
  char *v31;
  __int128 v33;
  _BYTE v34[56];
  _BYTE v35[56];
  _BYTE v36[56];
  _BYTE v37[56];
  _BYTE v38[88];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_216B29078(v37);
  sub_216B29078(v36);
  sub_216B29078(v35);
  sub_216B29078(v34);
  sub_216B2907C(v38);
  if ((sub_216B29080(a2) & 1) == 0)
  {
    sub_216B34DE0(a2, (uint64_t)v37);
    *(_QWORD *)&v33 = v10;
    *((_QWORD *)&v33 + 1) = v11;
    sub_216B267B0((uint64_t)v38, &v33);
  }
  if ((sub_216B29080(a3) & 1) == 0)
  {
    sub_216B34DE0(a3, (uint64_t)v36);
    *(_QWORD *)&v33 = v12;
    *((_QWORD *)&v33 + 1) = v13;
    sub_216B267B0((uint64_t)v38, &v33);
  }
  if ((sub_216B29080(a4) & 1) == 0)
  {
    sub_216B34DE0(a4, (uint64_t)v35);
    *(_QWORD *)&v33 = v14;
    *((_QWORD *)&v33 + 1) = v15;
    sub_216B267B0((uint64_t)v38, &v33);
  }
  if ((sub_216B29080(a5) & 1) == 0)
  {
    sub_216B34DE0(a5, (uint64_t)v34);
    *(_QWORD *)&v33 = v16;
    *((_QWORD *)&v33 + 1) = v17;
    sub_216B267B0((uint64_t)v38, &v33);
  }
  v18 = (__int128 *)sub_216B1E600((uint64_t)v38);
  v19 = sub_216B1E67C((uint64_t)v38);
  if (v18 != (__int128 *)v19)
  {
    v20 = (__int128 *)v19;
    do
    {
      if (sub_216B29084(a1))
      {
        v21 = 0;
      }
      else
      {
        v22 = sub_216B1FF14((uint64_t)a1);
        v23 = (char *)sub_216B1FF44((uint64_t)a1, v22 - 1);
        v21 = sub_216B28640(*v23);
      }
      if (sub_216B29094((uint64_t)v18))
      {
        v24 = 0;
      }
      else
      {
        v25 = sub_216B26288(v18, 0);
        v24 = sub_216B28640(v25);
      }
      sub_216B25FB0((uint64_t)&v33, (uint64_t)v18);
      v26 = sub_216B290A4((uint64_t *)&v33);
      if (v21)
      {
        v27 = sub_216B31E68(v18, 0x2Fu, 0);
        *(_QWORD *)&v33 = sub_216B2864C(v18, v27, 0xFFFFFFFFFFFFFFFFLL);
        *((_QWORD *)&v33 + 1) = v28;
        v29 = (char *)sub_216B1E600((uint64_t)&v33);
        v30 = &v33;
      }
      else
      {
        if (!v24 && !sub_216B29084(a1) && !v26)
          sub_216B1FBBC((uint64_t)a1, byte_216C11184);
        v29 = (char *)sub_216B1E600((uint64_t)v18);
        v30 = v18;
      }
      v31 = (char *)sub_216B1E608(v30);
      sub_216B202D8(a1, v29, v31);
      ++v18;
    }
    while (v18 != v20);
  }
  sub_216B1FF6C(v38);
  sub_216B2489C(v34);
  sub_216B2489C(v35);
  sub_216B2489C(v36);
  return sub_216B2489C(v37);
}

BOOL sub_216B29084(_QWORD *a1)
{
  return *a1 == a1[1];
}

BOOL sub_216B29094(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

BOOL sub_216B290A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  _QWORD v7[2];
  _BYTE v8[152];

  sub_216B295EC(v8);
  sub_216B34DE0(a1, (uint64_t)v8);
  v7[0] = sub_216B28BF4(v2, v3);
  v7[1] = v4;
  v5 = !sub_216B29094((uint64_t)v7);
  sub_216B2489C(v8);
  return v5;
}

uint64_t sub_216B290FC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD v4[2];
  uint64_t v5;

  v4[0] = a1;
  v4[1] = a2;
  v2 = sub_216B29144(a1, a2);
  if (v2 != -1)
    return sub_216B2864C(v4, 0, v2);
  sub_216B26D14(&v5);
  return v5;
}

uint64_t sub_216B29144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v2 = sub_216B28974(a1, a2);
  if (sub_216B1E67C((uint64_t)v13))
  {
    v3 = sub_216B26288(v13, v2);
    v4 = !sub_216B28640(v3);
  }
  else
  {
    v4 = 1;
  }
  v5 = sub_216B2864C(v13, 0, v2);
  v7 = sub_216B2886C(v5, v6);
  do
  {
    v8 = v2;
    if (!v2)
      break;
    if (v7 + 1 == v2)
      break;
    --v2;
    v9 = sub_216B26288(v13, v8 - 1);
  }
  while (sub_216B28640(v9));
  if (v8 != 1 || v7 != 0 || v4)
    return v8;
  else
    return -1;
}

uint64_t sub_216B29200(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = sub_216B1E600(a1);
  v3 = sub_216B1FF14(a1);
  sub_216B1E684(v5, v2, v3);
  result = sub_216B29144(v5[0], v5[1]);
  if (result != -1)
    return sub_216B28154(a1, result);
  return result;
}

unint64_t sub_216B29264(uint64_t *a1, _QWORD *a2)
{
  sub_216B20594(a2);
  sub_216B34E50(a1);
  return sub_216B2929C((uint64_t)a2);
}

unint64_t sub_216B2929C(uint64_t a1)
{
  _BYTE *v2;
  unint64_t result;
  _BYTE *v4;

  v2 = (_BYTE *)sub_216B1E600(a1);
  result = sub_216B1E67C(a1);
  if ((unint64_t)v2 < result)
  {
    do
    {
      if (*v2 == 92)
      {
        v4 = v2 + 1;
        if ((unint64_t)(v2 + 1) < result && *v4 == 92)
          goto LABEL_7;
        *v2 = 47;
      }
      v4 = v2;
LABEL_7:
      v2 = v4 + 1;
    }
    while ((unint64_t)(v4 + 1) < result);
  }
  return result;
}

uint64_t sub_216B2930C(uint64_t a1, uint64_t a2)
{
  _BYTE v3[40];

  sub_216B28708(a1, a2, (uint64_t)v3);
  return *(_QWORD *)sub_216B28BEC((uint64_t)v3);
}

uint64_t sub_216B2933C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v10[2];
  const void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v12 = sub_216B2930C(a1, a2);
  v13 = v2;
  v3 = sub_216B29260(&v12, 46, -1);
  if (v3 == -1)
    return v12;
  v4 = v3;
  if (sub_216B1E67C((uint64_t)&v12) == 1)
  {
    v5 = v12;
    v6 = v13;
    sub_216B1E678((int)v11, ".");
    if (sub_216B274F0(v5, v6, v11[0], (size_t)v11[1]))
      return v12;
  }
  if (sub_216B1E67C((uint64_t)&v12) == 2
    && (v7 = v12, v8 = v13, sub_216B1E678((int)v10, ".."), sub_216B274F0(v7, v8, v10[0], (size_t)v10[1])))
  {
    return v12;
  }
  else
  {
    return sub_216B2864C(&v12, 0, v4);
  }
}

uint64_t sub_216B29410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11[2];
  const void *v12[2];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v13 = sub_216B2930C(a1, a2);
  v14 = v2;
  v3 = sub_216B29260(&v13, 46, -1);
  if (v3 == -1
    || (v4 = v3, sub_216B1E67C((uint64_t)&v13) == 1)
    && (v5 = v13, v6 = v14, sub_216B1E678((int)v12, "."), sub_216B274F0(v5, v6, v12[0], (size_t)v12[1]))
    || sub_216B1E67C((uint64_t)&v13) == 2
    && (v7 = v13, v8 = v14, sub_216B1E678((int)v11, ".."), sub_216B274F0(v7, v8, v11[0], (size_t)v11[1])))
  {
    sub_216B26D14(v15);
  }
  else
  {
    v15[0] = sub_216B2864C(&v13, v4, 0xFFFFFFFFFFFFFFFFLL);
    v15[1] = v9;
  }
  return v15[0];
}

unint64_t sub_216B294F0(const void **a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v3 = a2;
  if (sub_216B1FF14((uint64_t)a1) <= (unint64_t)a2)
  {
    result = sub_216B1FF14((uint64_t)a1);
    if (result >= v3)
      return result;
    if (sub_216B28190((uint64_t)a1) < v3)
      sub_216B20384(a1, v3);
    v7 = (_BYTE *)sub_216B1E67C((uint64_t)a1);
    v8 = (_BYTE *)(sub_216B1E600((uint64_t)a1) + v3);
    if (v7 != v8)
      bzero(v7, v8 - v7);
  }
  else
  {
    v4 = sub_216B1E600((uint64_t)a1) + v3;
    v5 = sub_216B1E67C((uint64_t)a1);
    nullsub_1(v4, v5);
  }
  v9 = sub_216B1E600((uint64_t)a1) + v3;
  return sub_216B203A4((uint64_t)a1, v9);
}

uint64_t sub_216B295C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1) - 1;
  return sub_216B203A4(a1, v2);
}

BOOL sub_216B295F0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  _QWORD v7[2];
  _BYTE v8[152];

  sub_216B295EC(v8);
  sub_216B34DE0(a1, (uint64_t)v8);
  v7[0] = sub_216B28CBC(v2, v3);
  v7[1] = v4;
  v5 = !sub_216B29094((uint64_t)v7);
  sub_216B2489C(v8);
  return v5;
}

BOOL sub_216B29648(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  _QWORD v7[2];
  _BYTE v8[152];

  sub_216B295EC(v8);
  sub_216B34DE0(a1, (uint64_t)v8);
  v7[0] = sub_216B290FC(v2, v3);
  v7[1] = v4;
  v5 = !sub_216B29094((uint64_t)v7);
  sub_216B2489C(v8);
  return v5;
}

BOOL sub_216B296A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6[3];
  _QWORD v7[2];
  _BYTE v8[152];

  sub_216B295EC(v8);
  sub_216B34DE0(a1, (uint64_t)v8);
  v7[0] = v2;
  v7[1] = v3;
  sub_216B25FB0((uint64_t)v6, (uint64_t)v7);
  v4 = sub_216B295F0(v6);
  sub_216B2489C(v8);
  return v4;
}

BOOL sub_216B29700(uint64_t *a1)
{
  return !sub_216B296A0(a1);
}

uint64_t sub_216B29718(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  int v8[12];
  __int128 v9;

  sub_216B27CA4((uint64_t)v8);
  *(_QWORD *)&v7 = sub_216B29788(a1, v8);
  *((_QWORD *)&v7 + 1) = v4;
  if (sub_216B27BAC(&v7))
  {
    return v7;
  }
  else
  {
    *a2 = sub_216B29804(v8);
    a2[1] = v5;
    sub_216B27D74(&v9);
  }
  return v9;
}

uint64_t sub_216B29788(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v7;
  stat v9;
  _QWORD v10[2];
  _BYTE v11[152];

  sub_216B295EC(v11);
  v10[0] = sub_216B34FB8(a1, (uint64_t)v11);
  v10[1] = v4;
  v5 = (const char *)sub_216B1E600((uint64_t)v10);
  v6 = stat(v5, &v9);
  v7 = sub_216B29C64(v6, (uint64_t)&v9, a2);
  sub_216B2489C(v11);
  return v7;
}

uint64_t sub_216B29804(int *a1)
{
  uint64_t v2;

  sub_216B1E684(&v2, *a1, *((_QWORD *)a1 + 1));
  return v2;
}

uint64_t sub_216B29838(uint64_t *a1, int *a2)
{
  uint64_t v4;
  const char *v5;
  int v6;
  int v7;
  const std::error_category *v8;
  _QWORD v10[2];
  _BYTE v11[152];
  uint64_t v12;

  sub_216B295EC(v11);
  v10[0] = sub_216B34FB8(a1, (uint64_t)v11);
  v10[1] = v4;
  while (1)
  {
    v5 = (const char *)sub_216B1E600((uint64_t)v10);
    v6 = open(v5, 0);
    *a2 = v6;
    if ((v6 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
    {
      v7 = *__error();
      v8 = std::generic_category();
      sub_216B27DC4((uint64_t)&v12, v7, (uint64_t)v8);
      goto LABEL_6;
    }
  }
  sub_216B27D74(&v12);
LABEL_6:
  sub_216B2489C(v11);
  return v12;
}

uint64_t sub_216B298D4(uint64_t *a1, int *a2, char a3, uint64_t a4)
{
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  int v13;
  const std::error_category *v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[152];
  uint64_t v19;

  if ((a3 & 8) != 0)
    v7 = 514;
  else
    v7 = 513;
  if ((a3 & 2) != 0)
    v8 = 8;
  else
    v8 = 1024;
  v9 = v8 & 0xFFFFF7FF | ((a3 & 1) << 11) | v7;
  sub_216B295EC(v18);
  v16 = sub_216B34FB8(a1, (uint64_t)v18);
  v17 = v10;
  while (1)
  {
    v11 = (const char *)sub_216B1E600((uint64_t)&v16);
    v12 = open(v11, v9, a4, v16, v17);
    *a2 = v12;
    if ((v12 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
    {
      v13 = *__error();
      v14 = std::generic_category();
      sub_216B27DC4((uint64_t)&v19, v13, (uint64_t)v14);
      goto LABEL_12;
    }
  }
  sub_216B27D74(&v19);
LABEL_12:
  sub_216B2489C(v18);
  return v19;
}

uint64_t sub_216B299A4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13[3];
  uint64_t v14[3];
  std::string v15;
  const void *v16[19];

  v6 = sub_216B29A94(a1, (uint64_t)a2);
  v8 = sub_216B29ABC(a1, v7);
  sub_216B29AF0(v16, v6, v8);
  sub_216B29200((uint64_t)v16);
  sub_216B25FA8((uint64_t)&v15, &byte_216C19659);
  sub_216B25FA8((uint64_t)v14, &byte_216C19659);
  sub_216B25FA8((uint64_t)v13, &byte_216C19659);
  sub_216B28DE8(v16, a2, (uint64_t *)&v15, v14, v13);
  v14[0] = sub_216B24850((uint64_t)v16);
  v14[1] = v9;
  sub_216B24898(v14, (uint64_t)&v15);
  sub_216B26E7C(a1, (uint64_t)&v15);
  std::string::~string(&v15);
  v10 = *a3;
  v11 = a3[1];
  *(_OWORD *)(a1 + 56) = a3[2];
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  return sub_216B2489C(v16);
}

uint64_t sub_216B29A94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B25CC0(a1, a2);
  return sub_216B2A914(a1, v3);
}

uint64_t sub_216B29ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_216B25CC0(a1, a2);
  v5 = v3 + sub_216B25B78(a1, v4);
  return sub_216B2A914(a1, v5);
}

uint64_t sub_216B29AF4(uint64_t a1, _OWORD *a2)
{
  uint64_t v4[3];

  sub_216B25FAC((uint64_t)v4, a1);
  return sub_216B29788(v4, a2);
}

uint64_t sub_216B29B30(uint64_t a1)
{
  uint64_t v3;

  sub_216B29B6C((uint64_t)&v3);
  sub_216B29B70((uint64_t)&v3, *(_QWORD *)(a1 + 16));
  return v3;
}

uint64_t sub_216B29B70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2 - 946684800;
  *(_DWORD *)(result + 8) = 0;
  return sub_216B32700(result);
}

BOOL sub_216B29B8C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_216B29BB8(uint64_t *a1, char *a2)
{
  uint64_t v4;
  const char *v5;
  char v6;
  int v7;
  const std::error_category *v8;
  _QWORD v10[2];
  _BYTE v11[152];
  uint64_t v12;

  sub_216B295EC(v11);
  v10[0] = sub_216B34FB8(a1, (uint64_t)v11);
  v10[1] = v4;
  v5 = (const char *)sub_216B1E600((uint64_t)v10);
  if (access(v5, 0) == -1)
  {
    if (*__error() != 2)
    {
      v7 = *__error();
      v8 = std::generic_category();
      sub_216B27DC4((uint64_t)&v12, v7, (uint64_t)v8);
      goto LABEL_7;
    }
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  *a2 = v6;
  sub_216B27D74(&v12);
LABEL_7:
  sub_216B2489C(v11);
  return v12;
}

uint64_t sub_216B29C64(int a1, uint64_t a2, _OWORD *a3)
{
  int v4;
  const std::error_category *v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (a1)
  {
    v4 = *__error();
    v5 = std::generic_category();
    sub_216B27DC4((uint64_t)&v16, v4, (uint64_t)v5);
    sub_216B29834((uint64_t *)&v13, 2);
    v6 = sub_216B2A580((unsigned int *)&v16, (unsigned int *)&v13);
    sub_216B2A790((uint64_t)&v13, v6);
    v10 = v14;
    *a3 = v13;
    a3[1] = v10;
    a3[2] = v15;
  }
  else
  {
    v7 = *(unsigned __int16 *)(a2 + 4);
    v8 = (v7 >> 12) ^ 8;
    if ((_DWORD)v8 == 15)
      v9 = 9;
    else
      v9 = dword_216C11188[v8];
    sub_216B2A794((uint64_t)&v13, v9, v7, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 48), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 96));
    v11 = v14;
    *a3 = v13;
    a3[1] = v11;
    a3[2] = v15;
    sub_216B27D74(&v16);
  }
  return v16;
}

uint64_t sub_216B29D58(int a1, _OWORD *a2)
{
  int v3;
  stat v5;

  v3 = fstat(a1, &v5);
  return sub_216B29C64(v3, (uint64_t)&v5, a2);
}

uint64_t sub_216B29D90(_QWORD *a1)
{
  return *a1 + 946684800;
}

uint64_t sub_216B29DA8(uint64_t a1, int a2, char a3, off_t a4)
{
  _DWORD *v8;
  off_t st_size;
  unint64_t v10;
  int v11;
  int v12;
  void *v13;
  int v14;
  const std::error_category *v15;
  stat v17;
  int v18;
  uint64_t v19;

  v8 = sub_216B29EA4(&v18, a2);
  if ((a3 & 1) == 0)
    sub_216B29EA8(v8);
  if (fstat(a2, &v17) == -1)
    goto LABEL_17;
  st_size = v17.st_size;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    if (v17.st_size < v10)
    {
      if (ftruncate(a2, v10) == -1)
      {
LABEL_17:
        v14 = *__error();
        v15 = std::generic_category();
        sub_216B27DC4((uint64_t)&v19, v14, (uint64_t)v15);
        goto LABEL_18;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v17.st_size;
    v10 = st_size;
  }
  if (*(_DWORD *)a1 == 1)
    v11 = 1;
  else
    v11 = 2;
  if (*(_DWORD *)a1)
    v12 = 3;
  else
    v12 = 1;
  v13 = mmap(0, v10, v12, v11, a2, a4);
  *(_QWORD *)(a1 + 16) = v13;
  if (v13 == (void *)-1)
    goto LABEL_17;
  sub_216B27D74(&v19);
LABEL_18:
  sub_216B29EB4(&v18);
  return v19;
}

_DWORD *sub_216B29EA8(_DWORD *result)
{
  *result = -1;
  return result;
}

uint64_t sub_216B29EB8(uint64_t a1, int a2, char a3, int a4, unint64_t a5, off_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = 0;
  if (sub_216B2511C(a1) >= a5)
  {
    *(_QWORD *)a7 = sub_216B29DA8(a1, a2, a3, a6);
    *(_QWORD *)(a7 + 8) = v13;
    if (sub_216B27BAC((_DWORD *)a7))
      *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a7 = sub_216B27D88(22);
    *(_QWORD *)(a7 + 8) = v12;
  }
  return a1;
}

uint64_t sub_216B29F4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
    munmap(v2, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_216B29F80()
{
  uint64_t v0;

  v0 = sub_216B2ABE0();
  return sub_216B1E67C(v0);
}

uint64_t sub_216B29F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  DIR *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const std::error_category *v9;
  __int128 v11[3];
  std::string v12;
  uint64_t v13[3];
  uint64_t v14[3];
  uint64_t v15[3];
  const void *v16[19];
  _QWORD v17[2];

  sub_216B2A0B0(v16, a2, a3);
  v4 = (const char *)sub_216B2A0B4((uint64_t)v16);
  v5 = opendir(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = v5;
    sub_216B25FA8((uint64_t)&v12, ".");
    sub_216B25FA8((uint64_t)v15, &byte_216C19659);
    sub_216B25FA8((uint64_t)v14, &byte_216C19659);
    sub_216B25FA8((uint64_t)v13, &byte_216C19659);
    sub_216B28DE8(v16, (uint64_t *)&v12, v15, v14, v13);
    v14[0] = sub_216B24850((uint64_t)v16);
    v14[1] = v6;
    sub_216B25FB0((uint64_t)v15, (uint64_t)v14);
    sub_216B27CA4((uint64_t)v11);
    sub_216B2A0F4((uint64_t)&v12, (uint64_t)v15, v11);
    sub_216B2A0F8(a1 + 16, (uint64_t)&v12);
    j_std::string::~string(&v12);
    v17[0] = sub_216B2A138(a1);
    v17[1] = v7;
  }
  else
  {
    v8 = *__error();
    v9 = std::generic_category();
    sub_216B27DC4((uint64_t)v17, v8, (uint64_t)v9);
  }
  sub_216B2489C(v16);
  return v17[0];
}

uint64_t sub_216B2A0B4(uint64_t a1)
{
  char v3;

  v3 = 0;
  sub_216B1FBBC(a1, &v3);
  sub_216B295C4(a1);
  return sub_216B262E0(a1);
}

uint64_t sub_216B2A0F8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  sub_216B26E7C(a1, a2);
  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  return a1;
}

uint64_t sub_216B2A138(uint64_t a1)
{
  dirent *v2;
  char *d_name;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const std::error_category *v9;
  __int128 v11[3];
  uint64_t v12[3];
  _QWORD v13[2];
  _QWORD v14[2];

  *__error() = 0;
  v2 = readdir(*(DIR **)(a1 + 8));
  if (v2)
  {
    d_name = v2->d_name;
    v4 = strlen(v2->d_name);
    v5 = sub_216B1E684(v13, d_name, v4);
    if (sub_216B1E67C(v5) == 1 && sub_216B26288(v13, 0) == 46
      || sub_216B1E67C((uint64_t)v13) == 2
      && sub_216B26288(v13, 0) == 46
      && sub_216B26288(v13, 1) == 46)
    {
      v6 = sub_216B2A138(a1);
LABEL_12:
      v14[0] = v6;
      v14[1] = v7;
      return v14[0];
    }
    sub_216B25FB0((uint64_t)v12, (uint64_t)v13);
    sub_216B27CA4((uint64_t)v11);
    sub_216B299A4(a1 + 16, v12, v11);
    sub_216B27D74(v14);
  }
  else
  {
    if (!*__error())
    {
      v6 = sub_216B2A260(a1);
      goto LABEL_12;
    }
    v8 = *__error();
    v9 = std::generic_category();
    sub_216B27DC4((uint64_t)v14, v8, (uint64_t)v9);
  }
  return v14[0];
}

uint64_t sub_216B2A260(uint64_t a1)
{
  DIR *v2;
  std::string v4;
  uint64_t v5;

  v2 = *(DIR **)(a1 + 8);
  if (v2)
    closedir(v2);
  *(_QWORD *)(a1 + 8) = 0;
  sub_216B2A2BC((uint64_t)&v4);
  sub_216B2A0F8(a1 + 16, (uint64_t)&v4);
  j_std::string::~string(&v4);
  sub_216B27D74(&v5);
  return v5;
}

_QWORD *sub_216B2A2C0(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_216B26D14(a1);
  sub_216B26D14(v2 + 2);
  return a1;
}

BOOL sub_216B2A2EC(uint64_t a1, const void *a2, size_t a3)
{
  return *(_QWORD *)(a1 + 8) >= a3 && sub_216B20284(*(const void **)a1, a2, a3) == 0;
}

BOOL sub_216B2A320(uint64_t a1)
{
  return sub_216B2A358(a1) || sub_216B2A374(a1);
}

BOOL sub_216B2A358(uint64_t a1)
{
  return sub_216B2A390(a1) == 0;
}

BOOL sub_216B2A374(uint64_t a1)
{
  return sub_216B2A390(a1) == 1;
}

uint64_t sub_216B2A390(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_216B2A398(_QWORD *a1, unsigned __int8 a2, unint64_t a3)
{
  int v4;
  unint64_t v5;
  uint64_t result;
  int v7;

  v4 = a2;
  v5 = sub_216B26D84(a3, a1[1]);
  while (v5)
  {
    result = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5-- - 1);
    if (v7 == v4)
      return result;
  }
  return -1;
}

const void **sub_216B2A3F0(const void **a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != (const void **)a2)
  {
    v4 = sub_216B1FF14(a2);
    v5 = sub_216B1FF14((uint64_t)a1);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_216B1E600(a2);
        sub_216B1E600(a2);
        sub_216B1E600((uint64_t)a1);
        v10 = sub_216B205DC();
      }
      else
      {
        v10 = sub_216B1E600((uint64_t)a1);
      }
      v16 = v10;
      v17 = sub_216B1E67C((uint64_t)a1);
      nullsub_1(v16, v17);
      v15 = (uint64_t)a1;
      v14 = v16;
    }
    else
    {
      v6 = v5;
      if (sub_216B28190((uint64_t)a1) >= v4)
      {
        if (v6)
        {
          sub_216B1E600(a2);
          sub_216B1E600(a2);
          sub_216B1E600((uint64_t)a1);
          sub_216B205DC();
        }
      }
      else
      {
        v7 = sub_216B1E600((uint64_t)a1);
        v8 = sub_216B1E67C((uint64_t)a1);
        nullsub_1(v7, v8);
        v9 = sub_216B1E600((uint64_t)a1);
        sub_216B203A4((uint64_t)a1, v9);
        sub_216B20384(a1, v4);
        v6 = 0;
      }
      v11 = (void *)(sub_216B1E600(a2) + v6);
      v12 = sub_216B1E67C(a2);
      v13 = sub_216B1E600((uint64_t)a1);
      sub_216B2A5E4(v11, v12, (void *)(v13 + v6));
      v14 = sub_216B1E600((uint64_t)a1) + v4;
      v15 = (uint64_t)a1;
    }
    sub_216B203A4(v15, v14);
  }
  return a1;
}

BOOL sub_216B2A580(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;

  v4 = sub_216B1E67C((uint64_t)a1);
  v5 = sub_216B1E67C((uint64_t)a2);
  result = sub_216B2A5FC(v4, v5);
  if (result)
  {
    v7 = sub_216B1E4E0(a1);
    return v7 == sub_216B1E4E0(a2);
  }
  return result;
}

void *sub_216B2A5E4(void *__src, uint64_t a2, void *__dst)
{
  return memcpy(__dst, __src, a2 - (_QWORD)__src);
}

BOOL sub_216B2A5FC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_216B2A608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = a1;
  if (sub_216B2A358(a1) || sub_216B2A358(a2))
    return sub_216B2A718(a3, 0);
  result = sub_216B2A374(v4);
  if ((_DWORD)result)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
LABEL_8:
    *(_QWORD *)(a3 + 16) = v7;
    return result;
  }
  result = sub_216B2A374(a2);
  if ((_DWORD)result)
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    v7 = *(_QWORD *)(v4 + 16);
    goto LABEL_8;
  }
  if (sub_216B2A71C(v4))
  {
    v8 = *(_QWORD *)v4;
    v9 = sub_216B2A390(v4);
    v4 = v8;
  }
  else
  {
    v9 = 2;
  }
  if (sub_216B2A71C(a2))
  {
    v10 = *(_QWORD *)a2;
    v11 = sub_216B2A390(a2);
    a2 = v10;
  }
  else
  {
    v11 = 2;
  }
  return sub_216B2A758(a3, v4, v9, a2, v11);
}

BOOL sub_216B2A71C(uint64_t a1)
{
  return sub_216B2A76C(a1) == 1 && !sub_216B2A320(a1);
}

uint64_t sub_216B2A75C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  *(_BYTE *)(result + 17) = 1;
  return result;
}

uint64_t sub_216B2A76C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t sub_216B2A774(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a4;
  *(_BYTE *)(result + 16) = a3;
  *(_BYTE *)(result + 17) = a5;
  return result;
}

uint64_t sub_216B2A784(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_216B2A794(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  return sub_216B2A7BC(result, a2, a3, a4, a5, a6, a7, a8, a9);
}

double sub_216B2A7A0(uint64_t a1, int a2)
{
  double result;

  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = 0xFFFF;
  return result;
}

uint64_t sub_216B2A7BC(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  *(_DWORD *)result = a4;
  *(_QWORD *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 24) = a7;
  *(_DWORD *)(result + 28) = a8;
  *(_QWORD *)(result + 32) = a9;
  *(_DWORD *)(result + 40) = a2;
  *(_DWORD *)(result + 44) = a3;
  return result;
}

_DWORD *sub_216B2A7D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

int *sub_216B2A7E0(int *a1)
{
  int v2;

  v2 = *a1;
  if ((v2 & 0x80000000) == 0)
    close(v2);
  return a1;
}

uint64_t sub_216B2A80C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  sub_216B34D50(a2, (std::string *)a1);
  v5 = *a3;
  v6 = a3[1];
  *(_OWORD *)(a1 + 56) = a3[2];
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  return a1;
}

uint64_t sub_216B2A850(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B25034(a1);
  sub_216B27CA4(v2 + 24);
  return a1;
}

uint64_t sub_216B2A880()
{
  return sub_216B2112C();
}

uint64_t *sub_216B2A888(uint64_t *a1, int a2)
{
  uint64_t v3;

  *a1 = sub_216B27D88(a2);
  a1[1] = v3;
  return a1;
}

uint64_t sub_216B2A8B8()
{
  return sub_216B2112C();
}

uint64_t sub_216B2A8C0(uint64_t a1)
{
  return sub_216B2A8C8(a1, 4u);
}

uint64_t sub_216B2A8C8(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 16 * a2);
}

uint64_t sub_216B2A8D0(uint64_t a1, char *a2, char *a3)
{
  const void **v6;

  v6 = (const void **)sub_216B2112C();
  sub_216B202D8(v6, a2, a3);
  return a1;
}

uint64_t sub_216B2A914(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B20C64(&v3, a2);
  return v3;
}

uint64_t sub_216B2A93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void **v6;

  v6 = (const void **)sub_216B2112C();
  sub_216B2A980(v6, a2, a3);
  return a1;
}

uint64_t sub_216B2A980(const void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;

  v6 = sub_216B2AA20(a2, a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > v7 - sub_216B1E67C((uint64_t)a1))
  {
    v8 = sub_216B1FF14((uint64_t)a1);
    sub_216B20384(a1, v8 + v6);
  }
  v9 = (_BYTE *)sub_216B1E67C((uint64_t)a1);
  sub_216B2AA24(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216B2AA24(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  sub_216B2AA94(a1, a2, a3);
  return v3;
}

uint64_t sub_216B2AA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return sub_216B2AA64((uint64_t)&v3, (uint64_t)&v4);
}

uint64_t sub_216B2AA64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return v3 - sub_216B1E600(a2);
}

uint64_t sub_216B2AA94(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2;
  v6 = a1;
  for (i = a3; sub_216B2AB28((uint64_t)&v6, (uint64_t)&v5); ++i)
  {
    if ((sub_216B2043C() & 1) != 0)
      break;
    *i = *(_BYTE *)sub_216B1E600((uint64_t)&v6);
    sub_216B2AB40(&v6);
  }
  sub_216B20444(&v7, &v6, &i);
  return v7;
}

BOOL sub_216B2AB28(uint64_t a1, uint64_t a2)
{
  return !sub_216B2AB50(a1, a2);
}

_QWORD *sub_216B2AB40(_QWORD *result)
{
  ++*result;
  return result;
}

BOOL sub_216B2AB50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return v3 == sub_216B1E600(a2);
}

uint64_t sub_216B2AB84(unsigned int *a1, uint64_t a2)
{
  return nullsub_1(*a1, a2);
}

uint64_t sub_216B2AB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (char *)sub_216B1E600((uint64_t)v7);
  v5 = (char *)sub_216B1E608(v7);
  return sub_216B2A8D0(a1, v4, v5);
}

uint64_t sub_216B2ABE0()
{
  unsigned __int8 v0;
  unint64_t v1;
  int v3;
  uint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_254E4AE50);
  v1 = 0x254E4A000uLL;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_254E4AE50);
    v1 = 0x254E4A000;
    if (v3)
    {
      v4 = sub_216B1D1D4(16);
      qword_254E4AE48 = sub_216B2AC44(v4);
      __cxa_guard_release(&qword_254E4AE50);
      v1 = 0x254E4A000;
    }
  }
  return *(_QWORD *)(v1 + 3656);
}

uint64_t sub_216B2AC54()
{
  unsigned __int8 v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254E4AE60);
  v1 = 0x254E4A000uLL;
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254E4AE60))
  {
    v4 = (uint64_t *)sub_216B1D1D4(16);
    *v4 = sub_216B327E4();
    v4[1] = v5;
    qword_254E4AE58 = (uint64_t)v4;
    v1 = 0x254E4A000;
    __cxa_guard_release(&qword_254E4AE60);
  }
  v6[0] = sub_216B327E4();
  v6[1] = v2;
  return sub_216B2AFA0((uint64_t)v6, *(_QWORD *)(v1 + 3672));
}

uint64_t sub_216B2ACDC(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  _QWORD v4[2];
  char v5;

  v5 = 0;
  v4[0] = sub_216B29BB8(a1, &v5);
  v4[1] = v1;
  v2 = sub_216B27BAC(v4);
  return (v5 != 0) & ~v2;
}

uint64_t sub_216B2AD20()
{
  uint64_t v1;

  sub_216B2AD44((uint64_t)&v1);
  return v1;
}

uint64_t sub_216B2AD44@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[16];
  _BYTE v4[16];
  rusage v5;

  getrusage(0, &v5);
  sub_216B2AFE8(v4, v5.ru_utime.tv_sec, (1000 * v5.ru_utime.tv_usec));
  sub_216B2AFE8(v3, v5.ru_stime.tv_sec, (1000 * v5.ru_stime.tv_usec));
  return sub_216B26D04((uint64_t)v4, (uint64_t)v3, a1);
}

uint64_t sub_216B2ADB0()
{
  _QWORD v1[3];

  sub_216B2AD44((uint64_t)v1);
  return v1[2];
}

_QWORD *sub_216B2ADD4(_QWORD *a1)
{
  *sub_216B2AE10(a1) = &off_24D5EF8E8;
  a1[1] = j__getpagesize();
  return a1;
}

_QWORD *sub_216B2AE10(_QWORD *result)
{
  *result = off_24D5EF928;
  return result;
}

BOOL sub_216B2AE24(int a1)
{
  return isatty(a1) != 0;
}

BOOL sub_216B2AE40(int a1)
{
  _BOOL8 result;

  result = sub_216B2AE24(a1);
  if (result)
    return sub_216B2AE74(a1);
  return result;
}

BOOL sub_216B2AE74(int a1)
{
  unsigned __int8 v2;
  int v3;
  _BOOL8 v4;
  TERMINAL *v5;
  int v7;
  uint64_t v8;

  v2 = atomic_load((unsigned __int8 *)&qword_254E4AE78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254E4AE78))
  {
    sub_216B25E74((pthread_mutex_t **)&unk_254E4AE68, 1);
    __cxa_atexit((void (*)(void *))sub_216B25E78, &unk_254E4AE68, &dword_216B18000);
    __cxa_guard_release(&qword_254E4AE78);
  }
  sub_216B25E7C(&v8, (uint64_t)&unk_254E4AE68);
  v7 = 0;
  v3 = setupterm(0, a1, &v7);
  v4 = 0;
  if (!v3)
  {
    v4 = tigetnum("colors") > 0;
    v5 = set_curterm(0);
    del_curterm(v5);
  }
  sub_216B25E80(&v8);
  return v4;
}

BOOL sub_216B2AF4C()
{
  return sub_216B2AE40(2);
}

char *sub_216B2AF54(char a1, int a2, int a3)
{
  return &a030m[160 * a3 + 80 * a2 + 10 * (a1 & 7)];
}

const char *sub_216B2AF7C()
{
  return "\x1B[1m";
}

const char *sub_216B2AF88()
{
  return "\x1B[7m";
}

const char *sub_216B2AF94()
{
  return "\x1B[0m";
}

uint64_t sub_216B2AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B2AFE8(&v3, *(_QWORD *)a1 - *(_QWORD *)a2, (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a2 + 8)));
  sub_216B32700((uint64_t)&v3);
  return v3;
}

uint64_t sub_216B2AFEC(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  sub_216B32700(a1);
  return a1;
}

uint64_t sub_216B2B01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = sub_216B2B09C((uint64_t)&v12, a2);
  v5 = *(_QWORD *)(v4 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 16) = v5;
  v7 = (_QWORD *)j_nullsub_1(a2, v6);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  nullsub_1(a2, 0);
  if ((sub_216B25CF8(a1, v8) & 1) == 0)
  {
    v10 = sub_216B25B78(a1, v9);
    nullsub_1(a1, v10);
  }
  return a1;
}

uint64_t sub_216B2B09C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((sub_216B25CF8(a2, a2) & 1) == 0)
    nullsub_1(a2, v3);
  return a2;
}

uint64_t sub_216B2B0D0(uint64_t a1, uint64_t a2, char *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;

  v6 = (void *)j_j_nullsub_1(a1);
  v7 = j_j_nullsub_1(a2);
  v8 = sub_216B2B574(v6, v7, a3);
  return sub_216B20710(a1, (uint64_t)v8);
}

uint64_t sub_216B2B138()
{
  uint64_t v1;

  sub_216B27D74(&v1);
  return v1;
}

uint64_t sub_216B2B15C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = j_j_nullsub_1(a1);
  v2 = sub_216B2511C(v1);
  return (v2 >> (v2 > (unint64_t)sub_216B2511C(v2) >> 1)) - 8;
}

void sub_216B2B194()
{
  sub_216B25C54();
}

BOOL sub_216B2B1A8(unint64_t a1)
{
  return a1 < 0x17;
}

unint64_t sub_216B2B1B4(unint64_t a1)
{
  unint64_t result;

  if (a1 < 0x17)
    return 22;
  result = sub_216B2B2B4(a1 + 1);
  if (result != 24)
    --result;
  return result;
}

_QWORD *sub_216B2B1E8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)j_nullsub_1(a1, a2);
  *result = a2;
  return result;
}

uint64_t sub_216B2B20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = j_nullsub_1(a1, a2);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v4 + 16) & 0x8000000000000000 | a2 & 0x7FFFFFFFFFFFFFFFLL;
  result = j_nullsub_1(a1, v5);
  *(_QWORD *)(result + 16) |= 0x8000000000000000;
  return result;
}

uint64_t sub_216B2B250(uint64_t a1)
{
  sub_216B2B2C0();
  return a1;
}

uint64_t sub_216B2B280(uint64_t a1, unint64_t a2)
{
  if (sub_216B2511C(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(a2, 1);
}

unint64_t sub_216B2B2B4(uint64_t a1)
{
  return (a1 + 7) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_216B2B2C0()
{
  return sub_216B205DC();
}

uint64_t sub_216B2B2C8@<X0>(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;

  v4 = sub_216B2713C(a1, a2);
  return sub_216B2B018(a3, v4);
}

BOOL sub_216B2B2F0(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return !sub_216B274F0(a1, a2, a3, a4);
}

uint64_t sub_216B2B308@<X0>(std::string *a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;

  v4 = std::string::append(a1, a2);
  return sub_216B2B018(a3, v4);
}

_BYTE *sub_216B2B330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;

  v6 = sub_216B25B78(a1, a2);
  v7 = sub_216B25DF0(a2);
  j_j_j_nullsub_1(a1);
  nullsub_1(&v16, v8);
  v9 = sub_216B2B3F0(a3, v7 + v6, &v17);
  v11 = sub_216B25CC0(v9, v10);
  v13 = nullsub_1(v11, v12);
  sub_216B26088(a1, v14);
  sub_216B2B250(v13);
  sub_216B2B250(v13 + v6);
  return sub_216B2B3F4((_BYTE *)(v13 + v6 + v7), 1, 0);
}

_BYTE *sub_216B2B3F4(_BYTE *a1, uint64_t a2, char a3)
{
  char v5;

  v5 = a3;
  sub_216B2B528(a1, a2, &v5);
  return a1;
}

uint64_t sub_216B2B428(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v5 = sub_216B2B4FC(a1, (uint64_t)&v12, a3);
  if (sub_216B2B15C(v5) < a2)
    sub_216B2B194();
  if (sub_216B2B1A8(a2))
  {
    v7 = (_QWORD *)j_nullsub_1(a1, v6);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    sub_216B25D8C(a1, a2);
  }
  else
  {
    v8 = sub_216B2B1B4(a2) + 1;
    v9 = j_j_nullsub_1(a1);
    v10 = sub_216B2B500(v9, v8);
    nullsub_1(v10, v8);
    sub_216B2B20C(a1, v8);
    sub_216B2B1E8(a1, v10);
    sub_216B25D68(a1, a2);
  }
  nullsub_1(a1, a2);
  return a1;
}

uint64_t sub_216B2B504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = nullsub_1(a1, a2);
  return nullsub_1(v4, a3);
}

_BYTE *sub_216B2B528(_BYTE *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;

  v5 = nullsub_1(a2, a2);
  return sub_216B2B55C(a1, v5, a3);
}

_BYTE *sub_216B2B55C(_BYTE *result, uint64_t a2, _BYTE *a3)
{
  for (; a2; --a2)
    *result++ = *a3;
  return result;
}

void *sub_216B2B574(void *a1, uint64_t a2, char *a3)
{
  void *result;

  result = j__memchr(a1, *a3, a2 - (_QWORD)a1);
  if (!result)
    return (void *)a2;
  return result;
}

_DWORD *sub_216B2B5A4(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v6 = (_OWORD *)sub_216B1D1D4(32);
  *v6 = 0u;
  v6[1] = 0u;
  *(_QWORD *)a1 = v6;
  v7 = sub_216B1E608(v11);
  v8 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 16) = v7;
  v9 = (char *)sub_216B1E600((uint64_t)v11);
  a1[2] = sub_216B40FC8(v8, v9, ((4 * (_BYTE)a4) & 8 | (2 * (a4 & 1)) | (a4 >> 2) & 1) ^ 0x21);
  return a1;
}

void **sub_216B2B634(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
  {
    sub_216B46060((uint64_t)v2);
    if (*a1)
      j__free(*a1);
  }
  return a1;
}

BOOL sub_216B2B670(uint64_t a1, std::string *a2)
{
  int v2;
  size_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v5 = sub_216B435F8(*(_DWORD *)(a1 + 8), *(_QWORD *)a1, 0, 0);
    sub_216B25B4C(a2, v5 - 1);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_QWORD *)a1;
    v8 = (_BYTE *)sub_216B25B54((uint64_t)a2, 0);
    sub_216B435F8(v6, v7, v8, v5);
  }
  return v2 == 0;
}

uint64_t sub_216B2B6FC(_DWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unsigned int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;
  _QWORD v21[2];
  const void *v22[20];

  v22[19] = *(const void **)MEMORY[0x24BDAC8D0];
  v21[0] = a2;
  v21[1] = a3;
  if (a4)
    v6 = *(_DWORD *)(*(_QWORD *)a1 + 8) + 1;
  else
    v6 = 0;
  sub_216B2B8C8((uint64_t)v22);
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  sub_216B2B8CC(v22, v7);
  *(_QWORD *)sub_216B2B9AC((uint64_t)v22, 0) = 0;
  v8 = sub_216B1E67C((uint64_t)v21);
  *(_QWORD *)(sub_216B2B9AC((uint64_t)v22, 0) + 8) = v8;
  v9 = *(_QWORD *)a1;
  v10 = (char *)sub_216B1E600((uint64_t)v21);
  v11 = (_QWORD *)sub_216B262E0((uint64_t)v22);
  v12 = sub_216B43798(v9, v10, v6, v11, 4);
  if (v12)
  {
    v13 = 0;
    if (v12 != 1)
    {
      v13 = 0;
      a1[2] = v12;
    }
  }
  else
  {
    if (a4)
    {
      sub_216B20594(a4);
      if (v6)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)sub_216B2B9AC((uint64_t)v22, i) == -1)
          {
            sub_216B26D14(&v20);
          }
          else
          {
            v15 = sub_216B1E600((uint64_t)v21);
            v16 = v15 + *(_QWORD *)sub_216B2B9AC((uint64_t)v22, i);
            v17 = *(_QWORD *)(sub_216B2B9AC((uint64_t)v22, i) + 8);
            v18 = (_QWORD *)sub_216B2B9AC((uint64_t)v22, i);
            sub_216B1E684(&v20, v16, v17 - *v18);
          }
          sub_216B267B0((uint64_t)a4, &v20);
        }
      }
    }
    v13 = 1;
  }
  sub_216B1FF6C(v22);
  return v13;
}

unint64_t sub_216B2B8CC(const void **a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  if (sub_216B2BA30((uint64_t)a1) <= (unint64_t)a2)
  {
    result = sub_216B2BA30((uint64_t)a1);
    if (result >= v3)
      return result;
    if (sub_216B2BB68((uint64_t)a1) < v3)
      sub_216B26914(a1, v3);
    v7 = (void *)sub_216B1E67C((uint64_t)a1);
    v8 = sub_216B1E600((uint64_t)a1) + 16 * v3;
    if (v7 != (void *)v8)
      bzero(v7, ((v8 - (_QWORD)v7 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  else
  {
    v4 = sub_216B1E600((uint64_t)a1) + 16 * v3;
    v5 = sub_216B1E67C((uint64_t)a1);
    nullsub_1(v4, v5);
  }
  v9 = sub_216B1E600((uint64_t)a1) + 16 * v3;
  return sub_216B203A4((uint64_t)a1, v9);
}

uint64_t sub_216B2B9AC(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 16 * a2;
}

uint64_t sub_216B2B9D4(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v5;

  v5 = 0;
  if ((sub_216B32284(*a1, a1[1], a2, &v5) & 1) != 0 || HIDWORD(v5))
    return 1;
  result = 0;
  *a3 = v5;
  return result;
}

uint64_t sub_216B2BA30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return (v2 - sub_216B1E600(a1)) >> 4;
}

uint64_t sub_216B2BA64@<X0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;

  v4 = std::string::insert(this, 0, __s);
  return sub_216B2B018(a3, v4);
}

uint64_t sub_216B2BA98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::string::value_type v8;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  sub_216B25034(a3);
  result = sub_216B1E67C((uint64_t)v9);
  v5 = result;
  if ((_DWORD)result)
  {
    v6 = 0;
    do
    {
      v7 = sub_216B26288(v9, v6);
      if (j__strchr("()^$|*+?.[]\\{}", v7))
        sub_216B26B1C(a3, 92);
      v8 = sub_216B26288(v9, v6);
      result = (uint64_t)sub_216B26B1C(a3, v8);
      ++v6;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_216B2BB3C(uint64_t a1, unint64_t a2)
{
  return sub_216B2B280(a1, a2);
}

uint64_t sub_216B2BB60(uint64_t a1)
{
  return sub_216B2A8C8(a1, 8u);
}

uint64_t sub_216B2BB68(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return (v2 - sub_216B1E600(a1)) >> 4;
}

uint64_t sub_216B2BB9C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v6;
  char v8;
  char v9;

  v6 = sub_216B250EC(a1, &v9, &v8);
  sub_216B2BBEC(v6, a2, a3);
  return a1;
}

uint64_t sub_216B2BBEC(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  unint64_t v6;

  v6 = sub_216B20378((uint64_t)a2, (uint64_t)a3);
  return sub_216B2BC34(a1, a2, a3, v6);
}

uint64_t sub_216B2BC34(uint64_t a1, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (sub_216B2B15C(a1) < a4)
    sub_216B2B194();
  if (sub_216B2B1A8(a4))
  {
    sub_216B25D8C(a1, a4);
    v9 = (_BYTE *)sub_216B25D14(a1, v8);
  }
  else
  {
    v10 = j_j_nullsub_1(a1);
    v11 = sub_216B2B1B4(a4);
    v9 = (_BYTE *)sub_216B2BB3C(v10, v11 + 1);
    v13 = v12;
    nullsub_1(v9, v12);
    sub_216B2B1E8(a1, (uint64_t)v9);
    sub_216B2B20C(a1, v13);
    sub_216B25D68(a1, a4);
  }
  while (a2 != a3)
    sub_216B25D5C(v9++, a2++);
  v15 = 0;
  sub_216B25D5C(v9, &v15);
  return nullsub_1(a1, a4);
}

BOOL sub_216B2BD3C()
{
  sub_216B2BD74();
  sub_216B2BDEC((uint64_t)&unk_254E4AE80);
  sub_216B2BE30();
  sub_216B2BD74();
  return sub_216B2BEC4((uint64_t)&unk_254E4AE80);
}

void sub_216B2BD74()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254E4AE90);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254E4AE90))
    {
      sub_216B25E74((pthread_mutex_t **)&unk_254E4AE80, 1);
      __cxa_atexit((void (*)(void *))sub_216B25E78, &unk_254E4AE80, &dword_216B18000);
      __cxa_guard_release(&qword_254E4AE90);
    }
  }
}

BOOL sub_216B2BDEC(uint64_t a1)
{
  if (sub_216B3269C())
    return sub_216B282B4((pthread_mutex_t **)a1);
  ++*(_DWORD *)(a1 + 8);
  return 1;
}

unint64_t sub_216B2BE30()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  stat v5;

  sub_216B2BF08();
  result = sub_216B2BFE4(qword_254E4AE98);
  v1 = result;
  if ((_DWORD)result)
  {
    v2 = 0;
    do
    {
      sub_216B2BF08();
      v3 = sub_216B2BF7C(qword_254E4AE98, v2);
      v4 = (const char *)sub_216B26084(v3);
      result = stat(v4, &v5);
      if (!(_DWORD)result && (v5.st_mode & 0xF000) == 0x8000)
        result = unlink(v4);
      ++v2;
    }
    while (v1 != v2);
  }
  return result;
}

BOOL sub_216B2BEC4(uint64_t a1)
{
  if (sub_216B3269C())
    return sub_216B282D4((pthread_mutex_t **)a1);
  --*(_DWORD *)(a1 + 8);
  return 1;
}

void sub_216B2BF08()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254E4AEB0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254E4AEB0))
    {
      sub_216B2C030(qword_254E4AE98);
      __cxa_atexit((void (*)(void *))sub_216B2C034, qword_254E4AE98, &dword_216B18000);
      __cxa_guard_release(&qword_254E4AEB0);
    }
  }
}

uint64_t sub_216B2BF7C(_QWORD *a1, uint64_t a2)
{
  return *a1 + 24 * a2;
}

uint64_t sub_216B2BF8C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216B2C27C(a1, a2);
  }
  else
  {
    sub_216B2C20C((uint64_t)a1, a2);
    result = v4 + 24;
  }
  a1[1] = result;
  return result;
}

unint64_t sub_216B2BFE4(_QWORD *a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
}

uint64_t sub_216B2C000(uint64_t a1)
{
  return sub_216B2A914(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B2C00C(int a1)
{
  _opaque_pthread_t *v2;

  v2 = pthread_self();
  return pthread_kill(v2, a1);
}

_QWORD *sub_216B2C038(_QWORD *a1)
{
  char v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  v4 = 0;
  sub_216B2C078(a1 + 2, &v4, &v3);
  return a1;
}

uint64_t sub_216B2C07C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_216B2C090(a1);
  return j_j_nullsub_1(v1);
}

_QWORD *sub_216B2C090(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_216B2C098(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B2C0D4(&v3);
  return a1;
}

uint64_t *sub_216B2C0D4(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B2C138(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B2C14C(v6, v8);
    return (uint64_t *)sub_216B2C140(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B2C138(uint64_t *a1)
{
  return sub_216B2C188((uint64_t)a1, *a1);
}

uint64_t sub_216B2C144(uint64_t a1, uint64_t a2)
{
  return j_nullsub_1(a1 + 16, a2);
}

unint64_t sub_216B2C14C(_QWORD *a1, uint64_t a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 3);
}

uint64_t sub_216B2C188(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B2C1EC(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 24;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void sub_216B2C1F0(int a1, std::string *this)
{
  std::string::~string(this);
}

uint64_t sub_216B2C1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 24 * a3, 8);
}

_QWORD *sub_216B2C20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B2C328(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216B2C32C(v5, v7, a2);
  v10 += 24;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B2C27C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B2BFE4(a1);
  v6 = sub_216B2C364(a1, v5 + 1);
  v7 = sub_216B2BFE4(a1);
  sub_216B2C3DC(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216B2C32C(v4, v9, a2);
  v13 += 24;
  sub_216B2C3E0(a1, v12);
  v10 = a1[1];
  sub_216B2C4CC(v12);
  return v10;
}

_QWORD *sub_216B2C334(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *result = a2;
  v3 = *(_QWORD *)(a2 + 8);
  result[1] = v3;
  result[2] = v3 + 24 * a3;
  return result;
}

uint64_t sub_216B2C34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B2B018(a2, a3);
}

_QWORD *sub_216B2C358(_QWORD *result)
{
  *(_QWORD *)(*result + 8) = result[1];
  return result;
}

unint64_t sub_216B2C364(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216B2C4D0((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B2C14C(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216B2C3E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216B2C668(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B2BFE4(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216B2C4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216B2C520(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

void sub_216B2C50C()
{
  sub_216B25C54();
}

uint64_t sub_216B2C524()
{
  return 0xAAAAAAAAAAAAAAALL;
}

uint64_t *sub_216B2C530(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B2C5C0(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 24 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 24 * v9;
  return a1;
}

uint64_t sub_216B2C5C0(uint64_t a1, unint64_t a2)
{
  return sub_216B2C628(a1, a2);
}

uint64_t sub_216B2C5E4(uint64_t a1)
{
  return sub_216B2C660(a1 + 24);
}

uint64_t sub_216B2C5EC(uint64_t a1, uint64_t a2)
{
  return j_nullsub_1(a1 + 24, a2);
}

_QWORD *sub_216B2C5F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = sub_216B2C090(a1);
  sub_216B210B8(v5 + 1, a3);
  return a1;
}

uint64_t sub_216B2C628(uint64_t a1, unint64_t a2)
{
  if (sub_216B2C520(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(24 * a2, 8);
}

uint64_t sub_216B2C660(uint64_t a1)
{
  return sub_216B1E600(a1 + 8);
}

uint64_t sub_216B2C668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216B2C7A0((uint64_t)&v16);
    v9 = sub_216B2C7A4((uint64_t)v18);
    sub_216B2C32C(a1, v8, v9);
    sub_216B2C7B0((uint64_t)v18);
    sub_216B2C7B0((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216B2C734@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  return sub_216B2C7CC(a2, &v3);
}

BOOL sub_216B2C76C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E67C(a1);
  return v3 != sub_216B1E67C(a2);
}

uint64_t sub_216B2C7A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 24;
}

uint64_t sub_216B2C7B0(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 24;
  return result;
}

_BYTE *sub_216B2C7C0(_BYTE *result)
{
  *result = 1;
  return result;
}

_BYTE *sub_216B2C7D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_QWORD *sub_216B2C7D8(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t sub_216B2C7E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216B2C7F8(a1);
  return nullsub_1(v1, v2);
}

_QWORD *sub_216B2C7FC(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = a2;
  return result;
}

uint64_t *sub_216B2C804(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_216B2C860((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B2C868(a1, v4);
    sub_216B2C140(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B2C860(uint64_t a1)
{
  return sub_216B2C8A4(a1, *(_QWORD *)(a1 + 8));
}

unint64_t sub_216B2C868(_QWORD *a1, uint64_t a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 3);
}

uint64_t sub_216B2C8A8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 24;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216B2C1EC(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B2C910(uint64_t *a1)
{
  return sub_216B2A914((uint64_t)a1, *a1);
}

uint64_t sub_216B2C918(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_216B2BFE4(a1);
  sub_216B2C188((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

uint64_t *sub_216B2C95C(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B1E600(a2);
  return a1;
}

void *sub_216B2C988(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  void *v4;

  free(*(void **)(a1 + 8));
  v2 = *(_DWORD *)(a1 + 20);
  if (v2 < 0x11)
    v3 = 32;
  else
    v3 = 1 << (sub_216B2CA00(v2) + 1);
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v3;
  v4 = malloc_type_malloc(8 * v3, 0x80040B8603338uLL);
  *(_QWORD *)(a1 + 8) = v4;
  return memset(v4, 255, 8 * *(unsigned int *)(a1 + 16));
}

uint64_t sub_216B2CA00(int a1)
{
  return 32 - sub_216B24FA4(a1 - 1, 2);
}

uint64_t sub_216B2CA24(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  if (sub_216B2CB2C((_QWORD *)a1))
  {
    v4 = *(_QWORD **)a1;
    v5 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = *(_QWORD **)a1;
      while (*v7 != a2)
      {
        ++v7;
        v6 -= 8;
        if (!v6)
          goto LABEL_6;
      }
      return 0;
    }
LABEL_6:
    v8 = *(_DWORD *)(a1 + 16);
    if (v5 < v8)
    {
      *(_DWORD *)(a1 + 20) = v5 + 1;
      v4[v5] = a2;
      return 1;
    }
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 16);
    LODWORD(v5) = *(_DWORD *)(a1 + 20);
  }
  if (3 * v8 <= 4 * (int)v5)
  {
    if (v8 >= 0x40)
      v8 *= 2;
    else
      v8 = 128;
    goto LABEL_15;
  }
  if (v8 - v5 - *(_DWORD *)(a1 + 24) < v8 >> 3)
LABEL_15:
    sub_216B2CB3C(a1, v8);
  v9 = sub_216B2CC2C(a1, a2);
  if (*v9 != a2)
  {
    v11 = v9;
    v10 = *v9;
    if (v10 == sub_216B2CCE0())
      --*(_DWORD *)(a1 + 24);
    *v11 = a2;
    ++*(_DWORD *)(a1 + 20);
    return 1;
  }
  return 0;
}

BOOL sub_216B2CB2C(_QWORD *a1)
{
  return a1[1] == *a1;
}

void sub_216B2CB3C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = sub_216B2CB2C((_QWORD *)a1);
  v7 = malloc_type_malloc(8 * a2, 0x80040B8603338uLL);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = a2;
  memset(v7, 255, 8 * a2);
  if (v6)
  {
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *v5++;
        *sub_216B2CC2C(a1, v10) = v10;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else
  {
    if ((_DWORD)v4)
    {
      v11 = 8 * v4;
      v12 = v5;
      do
      {
        v13 = *v12;
        if (v13 != sub_216B2CCE0() && v13 != sub_216B25120())
          *sub_216B2CC2C(a1, v13) = v13;
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
    free(v5);
    *(_DWORD *)(a1 + 24) = 0;
  }
}

_QWORD *sub_216B2CC2C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;

  v4 = sub_216B2CDAC(a2);
  v5 = *(_DWORD *)(a1 + 16) - 1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v4 & v5;
  v8 = (_QWORD *)(v6 + 8 * (v4 & v5));
  v9 = *v8;
  if (*v8 != a2)
  {
    v10 = 0;
    v11 = 1;
    while (v9 != sub_216B25120())
    {
      v12 = *v8;
      v13 = sub_216B2CCE0();
      if (v10)
        v14 = 0;
      else
        v14 = v12 == v13;
      if (v14)
        v10 = v8;
      v15 = v7 + v11++;
      v7 = v15 & v5;
      v8 = (_QWORD *)(v6 + 8 * (v15 & v5));
      v9 = *v8;
      if (*v8 == a2)
        return v8;
    }
    if (v10)
      return v10;
  }
  return v8;
}

uint64_t sub_216B2CCE0()
{
  return -2;
}

uint64_t sub_216B2CCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (sub_216B2CB2C((_QWORD *)a1))
  {
    v4 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = *(_QWORD *)a1 + 8 * v4;
      v7 = 8 * v4;
      while (*v5 != a2)
      {
        ++v5;
        v7 -= 8;
        if (!v7)
          return 0;
      }
      *v5 = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v6 - 8) = sub_216B25120();
      --*(_DWORD *)(a1 + 20);
      return 1;
    }
    return 0;
  }
  v8 = sub_216B2CC2C(a1, a2);
  if (*v8 != a2)
    return 0;
  *v8 = sub_216B2CCE0();
  *(int32x2_t *)(a1 + 20) = vadd_s32(*(int32x2_t *)(a1 + 20), (int32x2_t)0x1FFFFFFFFLL);
  return 1;
}

uint64_t sub_216B2CDAC(unsigned int a1)
{
  return (a1 >> 4) ^ (a1 >> 9);
}

uint64_t sub_216B2CDB8(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  if (sub_216B2CB2C(a4))
  {
    v7 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    memcpy(v7, (const void *)a4[1], 8 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 8) = a4[1];
    a4[1] = v8;
  }
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

int *sub_216B2CE38(int *result, int *a2)
{
  int v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_216B2CE4C(uint64_t a1)
{
  if (!sub_216B2CB2C((_QWORD *)a1))
    free(*(void **)(a1 + 8));
  return a1;
}

char *sub_216B2CE7C(const void **a1, const void *a2, unint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  size_t v10;
  char *result;
  char *v12;

  v8 = sub_216B2CF24(a1);
  v9 = sub_216B2CF30(a1);
  if (a4 + 2 * v9 <= a3)
    v10 = a3;
  else
    v10 = a4 + 2 * v9;
  if (*a1 == a2)
  {
    v12 = (char *)malloc_type_malloc(v10, 0x996D7F68uLL);
    result = (char *)memcpy(v12, *a1, v8);
  }
  else
  {
    result = (char *)malloc_type_realloc((void *)*a1, v10, 0x5F17287BuLL);
    v12 = result;
  }
  *a1 = v12;
  a1[1] = &v12[v8];
  a1[2] = &v12[v10];
  return result;
}

uint64_t sub_216B2CF24(_QWORD *a1)
{
  return a1[1] - *a1;
}

uint64_t sub_216B2CF30(_QWORD *a1)
{
  return a1[2] - *a1;
}

uint64_t sub_216B2CF40(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)a1[6];
  if (v2)
    j__free(v2);
  while (!sub_216B29084(a1))
  {
    v3 = *(_QWORD *)sub_216B2CFB0((uint64_t)a1);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_216B2CFBC(a1);
  }
  sub_216B2C034(a1 + 3);
  return sub_216B2CFC8(a1);
}

uint64_t sub_216B2CFB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 16;
}

uint64_t sub_216B2CFBC(_QWORD *a1)
{
  return sub_216B2F25C(a1, a1[1] - 16);
}

BOOL sub_216B2CFD0(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 16) & 1) == 0;
}

uint64_t sub_216B2CFE4(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  __n128 v7;

  sub_216B2E4D8((uint64_t)&v7);
  v7.n128_u64[0] = a2;
  v7.n128_u64[1] = a3;
  sub_216B2E4DC(a1, &v7);
  return sub_216B2D0E0(a1);
}

uint64_t sub_216B2D038(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v10;

  v10 = a2;
  v3 = sub_216B2D0E0(a1);
  if (!v3)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = sub_216B1E600((uint64_t)&v10);
    v6 = (uint64_t *)sub_216B2D0F0(a1, v4);
    if (v5 >= sub_216B1E67C(*v6))
    {
      v7 = sub_216B1E600((uint64_t)&v10);
      v8 = (uint64_t *)sub_216B2D0F0(a1, v4);
      if (v7 <= sub_216B2037C(*v8))
        break;
    }
    if (v3 == ++v4)
      return 0;
  }
  return (v4 + 1);
}

uint64_t sub_216B2D0E0(_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 4;
}

uint64_t sub_216B2D0F0(_QWORD *a1, uint64_t a2)
{
  return *a1 + 16 * a2;
}

uint64_t sub_216B2D0FC(_QWORD *a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[2];
  _QWORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a3;
  v18 = a2;
  if (!a3)
    v3 = sub_216B2D038(a1, a2);
  v5 = sub_216B2D280(a1, v3);
  v17 = 1;
  v6 = sub_216B1E67C(v5);
  v7 = v6;
  v8 = a1[6];
  v9 = (_BYTE *)v6;
  if (v8)
  {
    v9 = (_BYTE *)v6;
    if (*(_DWORD *)v8 == v3)
    {
      v10 = *(_QWORD *)(v8 + 8);
      v9 = (_BYTE *)v6;
      if (v10 <= sub_216B1E600((uint64_t)&v18))
      {
        v9 = *(_BYTE **)(v8 + 8);
        v17 = *(_DWORD *)(v8 + 16);
      }
    }
  }
  for (v16[0] = sub_216B2D29C((uint64_t)v9); sub_216B2D2CC(v16, &v18); v16[0] = sub_216B2D29C((uint64_t)++v9))
  {
    if (*v9 == 10)
      ++v17;
  }
  v11 = (_QWORD *)a1[6];
  if (!v11)
  {
    v11 = (_QWORD *)sub_216B1D1D4(24);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 0;
    a1[6] = v11;
  }
  *(_DWORD *)v11 = v3;
  v11[1] = v9;
  *((_DWORD *)v11 + 4) = v17;
  sub_216B1E684(v16, v7, &v9[-v7]);
  sub_216B1E678((int)v15, "\n\r");
  v14 = (uint64_t)&v9[-v7 - sub_216B31F84(v16, v15[0], v15[1], 0xFFFFFFFFFFFFFFFFLL)];
  v16[0] = sub_216B2D2E0((uint64_t)&v17, (uint64_t)&v14);
  v16[1] = v12;
  sub_216B2D30C(&v19, (uint64_t)v16);
  return v19;
}

uint64_t sub_216B2D280(_QWORD *a1, int a2)
{
  return *(_QWORD *)sub_216B2D0F0(a1, (a2 - 1));
}

uint64_t sub_216B2D29C(uint64_t a1)
{
  uint64_t v3;

  sub_216B2D410(&v3);
  return a1;
}

BOOL sub_216B2D2CC(_QWORD *a1, _QWORD *a2)
{
  return *a2 != *a1;
}

uint64_t sub_216B2D2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B2F310(&v3, a1, a2);
  return v3;
}

void **sub_216B2D310(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **result;
  int v6;
  uint64_t v7;
  void **v8;
  _QWORD *v9;
  char *v10;
  void **v11;
  void **v12;
  unsigned int v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a2;
  sub_216B2D410(&v15);
  result = (void **)sub_216B2D3FC(&v16, &v15);
  if ((result & 1) == 0)
  {
    v6 = sub_216B2D038(a1, v16);
    v7 = sub_216B2D414(a1, v6);
    sub_216B2D310(a1, *(_QWORD *)(v7 + 8), a3);
    v8 = sub_216B248A0(a3, "Included from ");
    v9 = (_QWORD *)sub_216B2D414(a1, v6);
    v10 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
    v11 = sub_216B248A0((uint64_t)v8, v10);
    v12 = sub_216B248A0((uint64_t)v11, ":");
    v13 = sub_216B2D41C(a1, v16, v6);
    v14 = sub_216B248D8(v12, v13);
    return sub_216B248A0((uint64_t)v14, ":\n");
  }
  return result;
}

BOOL sub_216B2D3FC(_QWORD *a1, _QWORD *a2)
{
  return *a2 == *a1;
}

uint64_t sub_216B2D414(_QWORD *a1, int a2)
{
  return sub_216B2D0F0(a1, (a2 - 1));
}

uint64_t sub_216B2D41C(_QWORD *a1, uint64_t a2, int a3)
{
  return sub_216B2D0FC(a1, a2, a3);
}

uint64_t sub_216B2D430@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  unint64_t v42;
  unint64_t v43;
  int64x2_t v44;
  int32x2_t v45;
  std::string v46;
  std::string v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  _BYTE v51[56];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v49[1] = a6;
  v50 = a2;
  v49[0] = a5;
  sub_216B2D768(v51);
  sub_216B2D410(&v48);
  sub_216B25034(&v47);
  if (sub_216B2D76C(&v50))
  {
    v35 = a7;
    v15 = sub_216B2D038(a1, v50);
    v16 = sub_216B2D280(a1, v15);
    v17 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v18 = sub_216B1E600((uint64_t)&v50);
    v19 = sub_216B1E67C(v16);
    v20 = v19;
    v36 = a9;
    while (v18 != v19)
    {
      v22 = *(unsigned __int8 *)--v18;
      v21 = v22;
      if (v22 == 13 || v21 == 10)
      {
        v20 = v18 + 1;
        break;
      }
    }
    v24 = (unsigned __int8 *)sub_216B1E600((uint64_t)&v50);
    v25 = sub_216B2037C(v16);
    v37 = a3;
    if (v24 != (unsigned __int8 *)v25)
    {
      while (1)
      {
        v26 = *v24;
        if (v26 == 10 || v26 == 13)
          break;
        if (++v24 == (unsigned __int8 *)v25)
        {
          v24 = (unsigned __int8 *)v25;
          break;
        }
      }
    }
    sub_216B2B9D0(&v46, v20, v24);
    sub_216B26E7C((uint64_t)&v47, (uint64_t)&v46);
    std::string::~string(&v46);
    v28 = sub_216B1E67C((uint64_t)v49);
    if (v28)
    {
      for (i = 0; i != v28; ++i)
      {
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)sub_216B2D0F0(v49, i);
        if (sub_216B2D77C(&v46)
          && sub_216B1E600((uint64_t)&v46) <= (unint64_t)v24
          && sub_216B1E600((uint64_t)&v46.__r_.__value_.__l.__size_) >= v20)
        {
          if (sub_216B1E600((uint64_t)&v46) < v20)
            v46.__r_.__value_.__r.__words[0] = sub_216B2D29C(v20);
          if (sub_216B1E600((uint64_t)&v46.__r_.__value_.__l.__size_) > (unint64_t)v24)
            v46.__r_.__value_.__l.__size_ = sub_216B2D29C((uint64_t)v24);
          v43 = sub_216B1E600((uint64_t)&v46) - v20;
          v42 = sub_216B1E600((uint64_t)&v46.__r_.__value_.__l.__size_) - v20;
          v44.i64[0] = sub_216B206E0((uint64_t)&v43, (uint64_t)&v42);
          v44.i64[1] = v30;
          sub_216B2D780(&v45, &v44);
          sub_216B268AC((uint64_t)v51, &v45);
        }
      }
    }
    v46.__r_.__value_.__r.__words[0] = sub_216B2D0FC(a1, v50, v15);
    sub_216B2D784(&v48, &v46);
    a3 = v37;
    a7 = v35;
    a9 = v36;
  }
  else
  {
    v17 = "<unknown>";
  }
  v31 = v50;
  sub_216B1E678((int)v41, v17);
  v32 = v48;
  v33 = HIDWORD(v48) - 1;
  sub_216B34D50(a4, &v46);
  sub_216B26CA0(v40, &v46);
  sub_216B26CA0(v39, &v47);
  sub_216B2D798(v38, v51);
  sub_216B2D79C(a9, (uint64_t)a1, v31, v41[0], v41[1], v32, v33, a3, v40[0], v40[1], v39[0], v39[1], v38[0], v38[1], a7, a8);
  std::string::~string(&v46);
  std::string::~string(&v47);
  return sub_216B1FF6C(v51);
}

BOOL sub_216B2D76C(_QWORD *a1)
{
  return *a1 != 0;
}

_DWORD *sub_216B2D784(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  return result;
}

uint64_t sub_216B2D79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return sub_216B2DF3C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void sub_216B2D7C0(_QWORD *a1, void **a2, uint64_t a3, int a4)
{
  void (*v6)(uint64_t, _QWORD);
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (void (*)(uint64_t, _QWORD))a1[7];
  if (v6)
  {
    v6(a3, a1[8]);
  }
  else
  {
    v12 = sub_216B1E67C(a3);
    if (sub_216B2D76C(&v12))
    {
      v9 = sub_216B1E67C(a3);
      v10 = sub_216B2D038(a1, v9);
      v11 = sub_216B2D414(a1, v10);
      sub_216B2D310(a1, *(_QWORD *)(v11 + 8), (uint64_t)a2);
    }
    sub_216B2D878(a3, 0, a2, a4);
  }
}

void sub_216B2D878(uint64_t a1, char *a2, void **a3, int a4)
{
  uint64_t v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  int v12;
  char *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int *v26;
  std::string::size_type v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t j;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56[2];
  uint64_t v57[2];
  std::string v58;
  char v59;
  uint64_t v60;
  std::string v61;
  uint64_t v62[2];

  v8 = (*((uint64_t (**)(void **))*a3 + 6))(a3) & a4;
  if (v8 == 1)
    (*((void (**)(void **, uint64_t, uint64_t, _QWORD))*a3 + 2))(a3, 8, 1, 0);
  if (a2 && *a2)
  {
    v9 = sub_216B248A0((uint64_t)a3, a2);
    sub_216B248A0((uint64_t)v9, ": ");
  }
  if (!sub_216B25DD0(a1 + 16, v7))
  {
    if (sub_216B2E044((const std::string *)(a1 + 16), "-"))
      sub_216B248A0((uint64_t)a3, "<stdin>");
    else
      sub_216B2E0B0(a3, a1 + 16);
    if (*(_DWORD *)(a1 + 40) != -1)
    {
      v10 = (void **)sub_216B251FC((uint64_t)a3, 58);
      sub_216B2E0F8(v10, *(_DWORD *)(a1 + 40));
      if (*(_DWORD *)(a1 + 44) != -1)
      {
        v11 = (void **)sub_216B251FC((uint64_t)a3, 58);
        sub_216B2E0F8(v11, *(_DWORD *)(a1 + 44) + 1);
      }
    }
    sub_216B248A0((uint64_t)a3, ": ");
  }
  v12 = *(_DWORD *)(a1 + 48);
  if (v12 == 2)
  {
    v13 = "note: ";
    if (v8)
    {
      v14 = 0;
      goto LABEL_23;
    }
  }
  else if (v12 == 1)
  {
    v13 = "warning: ";
    if ((v8 & 1) != 0)
    {
      v14 = 5;
      goto LABEL_23;
    }
  }
  else
  {
    if (v12)
      goto LABEL_25;
    v13 = "error: ";
    if ((v8 & 1) != 0)
    {
      v14 = 1;
LABEL_23:
      (*((void (**)(void **, uint64_t, uint64_t, _QWORD))*a3 + 2))(a3, v14, 1, 0);
    }
  }
  sub_216B248A0((uint64_t)a3, v13);
LABEL_25:
  if (v8)
  {
    (*((void (**)(void **))*a3 + 3))(a3);
    (*((void (**)(void **, uint64_t, uint64_t, _QWORD))*a3 + 2))(a3, 8, 1, 0);
    v15 = sub_216B2E0B0(a3, a1 + 56);
    sub_216B251FC((uint64_t)v15, 10);
    (*((void (**)(void **))*a3 + 3))(a3);
  }
  else
  {
    v17 = sub_216B2E0B0(a3, a1 + 56);
    sub_216B251FC((uint64_t)v17, 10);
  }
  if (*(_DWORD *)(a1 + 40) != -1 && *(_DWORD *)(a1 + 44) != -1)
  {
    v18 = a1 + 80;
    v19 = sub_216B29A94(a1 + 80, v16);
    v21 = sub_216B29ABC(a1 + 80, v20);
    sub_216B2E100(v19, v21, (uint64_t (*)(_QWORD))sub_216B2E168);
    v61.__r_.__value_.__r.__words[0] = v19;
    v58.__r_.__value_.__r.__words[0] = sub_216B29ABC(a1 + 80, v22);
    if (sub_216B2AB28((uint64_t)&v61, (uint64_t)&v58))
    {
      sub_216B26CA0(v62, a1 + 80);
      sub_216B2E170((uint64_t)a3, v62[0], v62[1]);
    }
    else
    {
      v55 = sub_216B25B78(a1 + 80, v23);
      sub_216B2E21C(&v61, v55 + 1, 32);
      v24 = sub_216B2E220((_QWORD *)(a1 + 104));
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v26 = (unsigned int *)sub_216B212F0((_QWORD *)(a1 + 104), i);
          v27 = v26[1];
          v28 = (_BYTE *)sub_216B25B54((uint64_t)&v61, *v26);
          v58.__r_.__value_.__r.__words[0] = v27;
          v60 = sub_216B25B78((uint64_t)&v61, v29);
          v30 = (uint64_t *)sub_216B24E80(&v58, &v60);
          v31 = sub_216B25B54((uint64_t)&v61, *v30);
          v59 = 126;
          sub_216B2E230(v28, v31, &v59);
        }
      }
      sub_216B25034(&v58);
      sub_216B2E464(v57, a1 + 128);
      v32 = sub_216B1E600(a1 + 8) - *(int *)(a1 + 44);
      v34 = sub_216B25B78(a1 + 80, v33);
      v35 = sub_216B1E5D4(v32, v34);
      sub_216B2E234((uint64_t)&v61, &v58, v57[0], v57[1], v35, v36);
      if (v55 >= *(unsigned int *)(a1 + 44))
        v37 = *(int *)(a1 + 44);
      else
        v37 = v55;
      *(_BYTE *)sub_216B25B54((uint64_t)&v61, v37) = 94;
      v38 = sub_216B2E468((uint64_t)&v61, 32, 0xFFFFFFFFFFFFFFFFLL);
      std::string::erase(&v61, v38 + 1, 0xFFFFFFFFFFFFFFFFLL);
      sub_216B26CA0(v56, a1 + 80);
      sub_216B2E170((uint64_t)a3, v56[0], v56[1]);
      if ((v8 & 1) != 0)
        (*((void (**)(void **, uint64_t, uint64_t, _QWORD))*a3 + 2))(a3, 2, 1, 0);
      v41 = sub_216B25B78((uint64_t)&v61, v39);
      if (v41)
      {
        v42 = 0;
        v43 = 0;
        do
        {
          if (sub_216B25B78(v18, v40) > v42 && *(_BYTE *)sub_216B2E4B4(v18, v42) == 9)
          {
            do
            {
              v44 = (char *)sub_216B25B54((uint64_t)&v61, v42);
              sub_216B251FC((uint64_t)a3, *v44);
              ++v43;
            }
            while ((v43 & 7) != 0);
          }
          else
          {
            v45 = (char *)sub_216B25B54((uint64_t)&v61, v42);
            sub_216B251FC((uint64_t)a3, *v45);
            ++v43;
          }
          ++v42;
        }
        while (v42 != v41);
      }
      sub_216B251FC((uint64_t)a3, 10);
      if ((v8 & 1) != 0)
        (*((void (**)(void **))*a3 + 3))(a3);
      if (!sub_216B25DD0((uint64_t)&v58, v46))
      {
        v48 = sub_216B25B78((uint64_t)&v58, v47);
        if (v48)
        {
          v50 = v48;
          v51 = 0;
          for (j = 0; j < v50; ++j)
          {
            if (j < sub_216B25B78(v18, v49) && *(_BYTE *)sub_216B2E4B4(v18, j) == 9)
            {
              do
              {
                v53 = (char *)sub_216B25B54((uint64_t)&v58, j);
                sub_216B251FC((uint64_t)a3, *v53);
                if (*(_BYTE *)sub_216B25B54((uint64_t)&v58, j) != 32)
                  ++j;
                ++v51;
              }
              while ((v51 & 7) != 0 && j != v50);
            }
            else
            {
              v54 = (char *)sub_216B25B54((uint64_t)&v58, j);
              sub_216B251FC((uint64_t)a3, *v54);
              ++v51;
            }
          }
        }
        sub_216B251FC((uint64_t)a3, 10);
      }
      std::string::~string(&v58);
      std::string::~string(&v61);
    }
  }
}

uint64_t sub_216B2DE08(_QWORD *a1, void **a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  _QWORD v14[40];

  v14[39] = *MEMORY[0x24BDAC8D0];
  sub_216B2D430(a1, a3, a4, a5, a6, a7, a9, a10, (uint64_t)v14);
  sub_216B2D7C0(a1, a2, (uint64_t)v14, a11);
  return sub_216B2DEA8((uint64_t)v14);
}

uint64_t sub_216B2DEAC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void **v17;
  uint64_t v18;

  v17 = (void **)sub_216B40C20();
  return sub_216B2DE08(a1, v17, a2, a3, a4, a5, a6, v18, a7, a8, a9);
}

uint64_t sub_216B2DF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];

  v30[0] = a4;
  v30[1] = a5;
  v29[0] = a9;
  v29[1] = a10;
  v28[0] = a11;
  v28[1] = a12;
  v27[0] = a13;
  v27[1] = a14;
  v26[0] = a15;
  v26[1] = a16;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  sub_216B24898(v30, a1 + 16);
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  sub_216B24898(v29, a1 + 56);
  sub_216B24898(v28, a1 + 80);
  sub_216B2E01C(v27, a1 + 104);
  v20 = sub_216B1E600((uint64_t)v26);
  v21 = sub_216B2E02C(v26);
  v22 = sub_216B2E03C(a1 + 128, v20, v21);
  v23 = sub_216B1E600(v22);
  v24 = sub_216B1E67C(a1 + 128);
  sub_216B2E040(v23, v24);
  return a1;
}

uint64_t sub_216B2E01C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B2F394(a2, *a1, *a1 + 8 * a1[1]);
}

uint64_t sub_216B2E02C(_QWORD *a1)
{
  return *a1 + 40 * a1[1];
}

BOOL sub_216B2E044(const std::string *a1, const std::string::value_type *a2)
{
  std::string::size_type v4;
  uint64_t v5;

  v4 = sub_216B25DF0(a2);
  return v4 == sub_216B25B78((uint64_t)a1, v5) && std::string::compare(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a2, v4) == 0;
}

void **sub_216B2E0B0(void **a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  size_t v6;

  v4 = (_BYTE *)sub_216B26088(a2, a2);
  v6 = sub_216B26E78(a2, v5);
  return sub_216B3FFE4(a1, v4, v6);
}

void **sub_216B2E0F8(void **a1, int a2)
{
  return sub_216B40100(a1, a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216B2E100(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  while (sub_216B2AB28((uint64_t)&v6, (uint64_t)&v5))
  {
    v4 = (char *)sub_216B1E600((uint64_t)&v6);
    if ((a3(*v4) & 1) != 0)
      break;
    sub_216B2AB40(&v6);
  }
}

uint64_t sub_216B2E168(unsigned int a1)
{
  return (a1 >> 7) & 1;
}

uint64_t sub_216B2E170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v4 = sub_216B1E67C((uint64_t)v9);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (sub_216B26288(v9, v5) == 9)
      {
        do
        {
          sub_216B251FC(a1, 32);
          ++v6;
        }
        while ((v6 & 7) != 0);
      }
      else
      {
        v7 = sub_216B26288(v9, v5);
        sub_216B251FC(a1, v7);
        ++v6;
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return sub_216B251FC(a1, 10);
}

uint64_t sub_216B2E220(_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 3;
}

unint64_t sub_216B2E234(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];

  v38[0] = a3;
  v38[1] = a4;
  v37[0] = a5;
  v37[1] = a6;
  result = sub_216B29094((uint64_t)v38);
  if ((result & 1) == 0)
  {
    v9 = sub_216B1E600((uint64_t)v37);
    v10 = sub_216B1E608(v37);
    v11 = sub_216B1E600((uint64_t)v38);
    result = sub_216B2E02C(v38);
    if (v11 != result)
    {
      v12 = result;
      v13 = 0;
      v29 = a1;
      v28 = v9;
      do
      {
        v35 = sub_216B2EF1C(v11);
        v36 = v14;
        sub_216B1E678((int)v34, "\n\r\t");
        result = sub_216B31D14(&v35, v34[0], v34[1], 0);
        if (result == -1)
        {
          v35 = sub_216B2EF44(v11);
          v36 = v15;
          result = sub_216B1E600((uint64_t)&v35);
          if (result <= v10)
          {
            result = sub_216B1E600((uint64_t)&v36);
            if (result >= v9)
            {
              if (sub_216B1E600((uint64_t)&v35) >= v9)
                v16 = sub_216B1E600((uint64_t)&v35) - v9;
              else
                v16 = 0;
              if (v13 > v16)
                v17 = (v13 + 1);
              else
                v17 = v16;
              v32 = sub_216B2EF1C(v11);
              v33 = v18;
              v13 = v17 + sub_216B1E67C((uint64_t)&v32);
              if (sub_216B25B78((uint64_t)a2, v19) < v13)
                std::string::resize(a2, v13, 32);
              v32 = sub_216B2EF1C(v11);
              v33 = v20;
              sub_216B1E600((uint64_t)&v32);
              v31[0] = sub_216B2EF1C(v11);
              v31[1] = v21;
              sub_216B1E608(v31);
              v30 = sub_216B29A94((uint64_t)a2, v22);
              sub_216B2EF68(&v30, v17);
              sub_216B2EF50();
              v23 = sub_216B1E600((uint64_t)&v36);
              v24 = v10;
              if (v23 < v10)
                v24 = sub_216B1E600((uint64_t)&v36);
              v9 = v28;
              v25 = (v24 - v28);
              v26 = (_BYTE *)sub_216B25B54(v29, v16);
              v27 = sub_216B25B54(v29, v25);
              LOBYTE(v32) = 126;
              result = (unint64_t)sub_216B2E230(v26, v27, &v32);
            }
          }
        }
        v11 += 40;
      }
      while (v11 != v12);
    }
  }
  return result;
}

uint64_t sub_216B2E468(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2;
  v6 = sub_216B26088(a1, a2);
  v8 = sub_216B25B78(a1, v7);
  return sub_216B311CC(v6, v8, v4, a3);
}

uint64_t sub_216B2E4B4(uint64_t a1, uint64_t a2)
{
  return sub_216B26088(a1, a2) + a2;
}

uint64_t sub_216B2E4DC(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, (uint64_t)a2))
  {
    result = sub_216B2E5CC(a1, a2);
  }
  else
  {
    sub_216B2E55C((uint64_t)a1, a2);
    result = v4 + 16;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216B2E534(uint64_t a1)
{
  sub_216B2D410((_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_216B2E55C(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B2E678(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = (__n128 *)nullsub_1(v10, v6);
  sub_216B2E67C(v5, v7, a2);
  v10 += 16;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B2E5CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, (uint64_t)a2);
  v5 = sub_216B2D0E0(a1);
  v6 = sub_216B2E6A0(a1, v5 + 1);
  v7 = sub_216B2D0E0(a1);
  sub_216B2E718(v12, v6, v7, v4);
  v9 = (__n128 *)nullsub_1(v13, v8);
  sub_216B2E67C(v4, v9, a2);
  v13 += 16;
  sub_216B2E71C(a1, v12);
  v10 = a1[1];
  sub_216B2E808(v12);
  return v10;
}

_QWORD *sub_216B2E680(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *result = a2;
  v3 = *(_QWORD *)(a2 + 8);
  result[1] = v3;
  result[2] = v3 + 16 * a3;
  return result;
}

__n128 sub_216B2E694(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

unint64_t sub_216B2E6A0(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216B2E80C((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B2E848(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216B2E71C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216B2E964();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2D0E0(a1);
  return nullsub_1(a1, v10);
}

uint64_t sub_216B2E80C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216B2E878(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216B2E848(_QWORD *a1, uint64_t a2)
{
  return (uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 4;
}

uint64_t sub_216B2E87C()
{
  return 0xFFFFFFFFFFFFFFFLL;
}

uint64_t *sub_216B2E884(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B2E90C(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 16 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 16 * v9;
  return a1;
}

uint64_t sub_216B2E90C(uint64_t a1, unint64_t a2)
{
  return sub_216B2E930(a1, a2);
}

uint64_t sub_216B2E930(uint64_t a1, unint64_t a2)
{
  if (sub_216B2E878(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(16 * a2, 8);
}

uint64_t sub_216B2E964()
{
  return sub_216B2E980();
}

uint64_t sub_216B2E980()
{
  _QWORD v1[3];

  sub_216B2E9A4(v1);
  return v1[2];
}

uint64_t sub_216B2E9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B2EAD4(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B2EB60(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216B2EA78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = j_nullsub_1(a1, a2);
  v12[1] = v8;
  v11[0] = j_nullsub_1(a3, a4);
  v11[1] = v9;
  return sub_216B26D04((uint64_t)v12, (uint64_t)v11, a5);
}

uint64_t sub_216B2EAD4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  _OWORD *v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  while (sub_216B2C76C((uint64_t)v13, (uint64_t)v12))
  {
    v9 = (_OWORD *)sub_216B2EB68((uint64_t)v13, v8);
    *(_OWORD *)sub_216B2CFB0((uint64_t)v11) = *v9;
    sub_216B2EB8C((uint64_t)v13);
    sub_216B2EB8C((uint64_t)v11);
  }
  return sub_216B26D04((uint64_t)v13, (uint64_t)v11, a7);
}

uint64_t sub_216B2EB68(uint64_t a1, uint64_t a2)
{
  nullsub_1(a1, a2);
  return sub_216B2CFB0(a1);
}

uint64_t sub_216B2EB8C(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 16;
  return result;
}

uint64_t sub_216B2EB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t *sub_216B2EBA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216B2EC04((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B2EC10(a1, v4);
    sub_216B2EC0C(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B2EC04(uint64_t a1)
{
  return sub_216B2EC40(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B2EC10(_QWORD *a1, uint64_t a2)
{
  return (uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 4;
}

uint64_t sub_216B2EC44(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 16;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = j_nullsub_1(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B2ECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 16 * a3, 8);
}

uint64_t sub_216B2ECBC(uint64_t a1)
{
  sub_216B2ED04(a1 + 128);
  sub_216B2ED08(a1 + 104);
  std::string::~string((std::string *)(a1 + 80));
  std::string::~string((std::string *)(a1 + 56));
  std::string::~string((std::string *)(a1 + 16));
  return a1;
}

_QWORD *sub_216B2ED10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  sub_216B2ED64(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216B2ED64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 40;
      result = sub_216B2EDA0(v2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_216B2EDA4(uint64_t a1)
{
  std::string::~string((std::string *)(a1 + 16));
  return a1;
}

uint64_t sub_216B2EDCC(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B2EE08(&v3);
  return a1;
}

uint64_t *sub_216B2EE08(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B2EE6C(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B2EE78(v6, v8);
    return (uint64_t *)sub_216B2EE74(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B2EE6C(uint64_t *a1)
{
  return sub_216B2EEA8((uint64_t)a1, *a1);
}

uint64_t sub_216B2EE78(_QWORD *a1, uint64_t a2)
{
  return (uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 3;
}

uint64_t sub_216B2EEA8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = j_nullsub_1(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 8;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B2EF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 8 * a3, 4);
}

uint64_t sub_216B2EF1C(uint64_t a1)
{
  uint64_t v2;

  sub_216B26CA0(&v2, a1 + 16);
  return v2;
}

uint64_t sub_216B2EF44(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_216B2EF50()
{
  uint64_t v0;

  sub_216B2EF94();
  return v0;
}

uint64_t sub_216B2EF68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  sub_216B2F0C4(&v3, a2);
  return v3;
}

uint64_t sub_216B2EF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (char *)sub_216B2F028(a3);
  v9 = sub_216B206CC((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B2F02C(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B2F030(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216B2F054(&v2);
}

uint64_t sub_216B2F058(uint64_t *a1)
{
  return sub_216B2F060(*a1);
}

uint64_t sub_216B2F060(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = a1;
  v1 = sub_216B1E600((uint64_t)&v4);
  return nullsub_1(v1, v2);
}

uint64_t sub_216B2F088(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a1;
  v3 = sub_216B2F054(&v5);
  return sub_216B2EF68(&v5, a2 - v3);
}

_QWORD *sub_216B2F0C4(_QWORD *result, uint64_t a2)
{
  *result += a2;
  return result;
}

uint64_t sub_216B2F0D4(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B2F110(&v3);
  return a1;
}

uint64_t *sub_216B2F110(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B2F174(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B2E848(v6, v8);
    return (uint64_t *)sub_216B2EC0C(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B2F174(uint64_t *a1)
{
  return sub_216B2F17C((uint64_t)a1, *a1);
}

uint64_t sub_216B2F17C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = j_nullsub_1(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 16;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t *sub_216B2F1E0(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B2F21C(a2);
  return a1;
}

unint64_t sub_216B2F21C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return 0xCCCCCCCCCCCCCCCDLL * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B2F25C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B2D0E0(a1);
  sub_216B2F17C((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

uint64_t sub_216B2F2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v3 = nullsub_1(a1, a2);
    sub_216B27C04(v3);
  }
  return a1;
}

uint64_t sub_216B2F2D4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return *(_OWORD *)j_nullsub_1(a1, a2);
  else
    sub_216B27D74(&v3);
  return v3;
}

uint64_t sub_216B2F314(uint64_t result, _DWORD *a2, _QWORD *a3)
{
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = *a3;
  return result;
}

_DWORD *sub_216B2F328(_DWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *result = *(_DWORD *)a2;
  result[1] = v2;
  return result;
}

uint64_t sub_216B2F338(uint64_t a1)
{
  return sub_216B2F340(a1, 4u);
}

uint64_t sub_216B2F340(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 8 * a2);
}

int32x2_t sub_216B2F348(int32x2_t *a1, int64x2_t *a2)
{
  int32x2_t result;

  result = vmovn_s64(*a2);
  *a1 = result;
  return result;
}

uint64_t *sub_216B2F358(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B26878(a2);
  return a1;
}

uint64_t *sub_216B2F398(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v9 = 0;
  sub_216B2C078(a1 + 2, &v9, &v8);
  v6 = sub_216B2F408(a2, a3);
  sub_216B2F40C(a1, a2, a3, v6);
  return a1;
}

uint64_t sub_216B2F40C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  char v11;

  sub_216B20C64(&v10, (uint64_t)a1);
  sub_216B2F49C(v10, (uint64_t)&v11);
  if (a4)
  {
    sub_216B2F4A8(a1, a4);
    sub_216B2F508((uint64_t)a1, a2, a3, a4);
  }
  sub_216B2C7C0(&v11);
  return j_nullsub_1(&v11, v8);
}

uint64_t sub_216B2F490(uint64_t a1, uint64_t a2)
{
  return (a2 - a1) >> 3;
}

uint64_t sub_216B2F49C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B2C7CC(a2, a1);
}

uint64_t sub_216B2F4A8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (sub_216B2F570((uint64_t)a1, a2) < a2)
    sub_216B2C50C();
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B2F5AC(v5, a2);
  *a1 = v6;
  a1[1] = v6;
  *(_QWORD *)sub_216B2C144((uint64_t)a1, v7) = v6 + 8 * v7;
  return nullsub_1(a1, 0);
}

_QWORD *sub_216B2F508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_216B2F610(&v10, a1, a4);
  v8 = sub_216B2C144(a1, v7);
  v11 = sub_216B2F614(v8, a2, a3, v11);
  return sub_216B2C330(&v10);
}

uint64_t sub_216B2F570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216B2F5D0(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216B2F5AC(uint64_t a1, unint64_t a2)
{
  return sub_216B2F5DC(a1, a2);
}

uint64_t sub_216B2F5D4()
{
  return 0x1FFFFFFFFFFFFFFFLL;
}

uint64_t sub_216B2F5DC(uint64_t a1, unint64_t a2)
{
  if (sub_216B2F5D0(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(8 * a2, 4);
}

uint64_t sub_216B2F614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216B20688(a2, a3);
  v8 = v7;
  v9 = j_j_nullsub_1(a4);
  v10 = sub_216B2F688(a1, v6, v8, v9);
  return sub_216B20710(a4, v10);
}

_QWORD *sub_216B2F674(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *result = a2;
  v3 = *(_QWORD *)(a2 + 8);
  result[1] = v3;
  result[2] = v3 + 8 * a3;
  return result;
}

uint64_t sub_216B2F688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a4;
  v16 = a4;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  if (a2 != a3)
  {
    v8 = v16;
    do
    {
      v9 = nullsub_1(v8, v7);
      sub_216B2F730(a1, v9, a2);
      a2 += 8;
      v8 = v16 + 8;
      v16 += 8;
    }
    while (a2 != a3);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

void sub_216B2F734(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_216B2F740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)sub_216B2F784(a1, 4u);
  sub_216B2F790(v6, a2, a3);
  return a1;
}

uint64_t sub_216B2F784(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 40 * a2);
}

uint64_t sub_216B2F790(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216B2F844(a2, a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > 0xCCCCCCCCCCCCCCCDLL * ((v7 - sub_216B1E67C((uint64_t)a1)) >> 3))
  {
    v8 = sub_216B2F21C((uint64_t)a1);
    sub_216B2F848(a1, v8 + v6);
  }
  v9 = sub_216B1E67C((uint64_t)a1);
  sub_216B2F93C(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + 40 * v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216B2F848(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B2F96C((uint64_t)a1);
  v5 = sub_216B2F21C((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(40 * v7, 0x10520405FBB4089uLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B2F9AC(v9, v10, (uint64_t)v8);
  v11 = sub_216B1E600((uint64_t)a1);
  v12 = sub_216B1E67C((uint64_t)a1);
  sub_216B2ED64(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 40 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 40 * v7;
  return result;
}

uint64_t sub_216B2F93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_216B2FA2C(a1, a2, a3);
  return v3;
}

unint64_t sub_216B2F954(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
}

unint64_t sub_216B2F96C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return 0xCCCCCCCCCCCCCCCDLL * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B2F9AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B2F9FC(a3, v5);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

_OWORD *sub_216B2FA00(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_216B2B018(a1 + 1, a2 + 1);
  return a1;
}

uint64_t sub_216B2FA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a3;
  v7 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      sub_216B2FAA8(v6, v4);
      v4 += 40;
      v6 += 40;
      v7 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v8, &v7, &v6);
  return v8;
}

uint64_t sub_216B2FAAC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::string::basic_string((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  return a1;
}

uint64_t sub_216B2FAD8(uint64_t a1, uint64_t a2)
{
  char v3;

  return sub_216B2FAF8(a1, a2, (uint64_t)&v3);
}

uint64_t sub_216B2FAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  nullsub_1(a1, a2);
  v6 = j_j_nullsub_1(a1);
  v7 = j_j_nullsub_1(a2);
  sub_216B2FB6C(v6, v7, a3);
  v8 = j_j_nullsub_1(a1);
  v9 = j_j_nullsub_1(a2);
  return nullsub_1(v8, v9);
}

uint64_t sub_216B2FB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = 2 * sub_216B2FBC4(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3));
  return sub_216B2FBE4(a1, a2, a3, v6, 1);
}

unint64_t sub_216B2FBC4(unint64_t result)
{
  if (result)
    return 63 - (int)sub_216B2FEC0(result);
  return result;
}

uint64_t sub_216B2FBE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  char v20;
  int v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;

  v7 = (char *)a2;
  v8 = (char *)result;
  v23 = (char *)a2;
  v24 = result;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v7 - v8;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = v7 - 40;
        result = sub_216B2FEC8(a3, (uint64_t)(v7 - 40), (uint64_t)v8);
        if ((_DWORD)result)
          return sub_216B2FED4(&v24, &v23);
        return result;
      case 3uLL:
        v23 = v7 - 40;
        return sub_216B2FEE0((uint64_t)v8, (uint64_t)(v8 + 40), (uint64_t)(v7 - 40), a3);
      case 4uLL:
        v23 = v7 - 40;
        return sub_216B2FEE4(v8, v8 + 40, v8 + 80, v7 - 40, a3);
      case 5uLL:
        v23 = v7 - 40;
        return sub_216B2FEE8(v8, v8 + 40, v8 + 80, v8 + 120, v7 - 40, a3);
      default:
        if (v10 <= 959)
        {
          if ((a5 & 1) != 0)
            return sub_216B2FEEC((uint64_t)v8, (uint64_t)v7, a3);
          else
            return sub_216B2FFD0((uint64_t)v8, (uint64_t)v7, a3);
        }
        if (v9 == 1)
          return sub_216B300A0(v8, (uint64_t)v7, (uint64_t)v7, a3);
        v12 = v11 >> 1;
        v13 = (uint64_t)(v7 - 40);
        if ((unint64_t)v10 < 0x1401)
        {
          sub_216B30124((uint64_t)&v8[40 * (v11 >> 1)], (uint64_t)v8, v13, a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v23;
            goto LABEL_12;
          }
        }
        else
        {
          sub_216B30124((uint64_t)v8, (uint64_t)&v8[40 * (v11 >> 1)], v13, a3);
          v14 = (uint64_t)v23;
          v15 = 5 * v12;
          v16 = 40 * v12;
          v17 = 40 * v12 - 40;
          sub_216B30124(v24 + 40, v24 + v17, (uint64_t)(v23 - 80), a3);
          v16 += 40;
          sub_216B30124(v24 + 80, v24 + v16, v14 - 120, a3);
          sub_216B30124(v24 + v17, v24 + 8 * v15, v24 + v16, a3);
          v22 = v24 + 8 * v15;
          sub_216B2FED4(&v24, &v22);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v18 = sub_216B2FEC8(a3, v24 - 40, v24);
        v7 = v23;
        if ((v18 & 1) == 0)
        {
          result = sub_216B301F8(v24, (uint64_t)v23, a3);
          v8 = (char *)result;
          goto LABEL_20;
        }
LABEL_12:
        v19 = (char *)sub_216B3036C(v24, (uint64_t)v7, a3);
        if ((v20 & 1) == 0)
          goto LABEL_19;
        v21 = sub_216B304E8(v24, v19, a3);
        v8 = v19 + 40;
        result = sub_216B304E8((uint64_t)(v19 + 40), v7, a3);
        if (!(_DWORD)result)
        {
          if (v21)
          {
            v24 = (unint64_t)(v19 + 40);
            goto LABEL_18;
          }
LABEL_19:
          result = sub_216B2FBE4(v24, v19, a3, -v9, a5 & 1);
          v8 = v19 + 40;
LABEL_20:
          a5 = 0;
          v24 = (unint64_t)v8;
          a4 = -v9;
          continue;
        }
        if ((v21 & 1) == 0)
        {
          v23 = v19;
          v8 = (char *)v24;
          v7 = v19;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return result;
    }
  }
}

unint64_t sub_216B2FEC0(unint64_t a1)
{
  return __clz(a1);
}

uint64_t sub_216B2FEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B306D0(a2, a3);
}

uint64_t sub_216B2FED4(_QWORD *a1, _QWORD *a2)
{
  return sub_216B308B8(*a1, *a2);
}

uint64_t sub_216B2FEEC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD v16[2];
  _QWORD v17[7];

  if (result != a2)
  {
    v17[5] = v3;
    v17[6] = v4;
    v6 = (_OWORD *)result;
    v7 = result + 40;
    v17[0] = result + 40;
    if (result + 40 != a2)
    {
      v9 = result;
      do
      {
        result = sub_216B2FEC8(a3, v7, v9);
        if ((_DWORD)result)
        {
          v11 = sub_216B30ACC((uint64_t)v17, v10);
          sub_216B2F9FC(v16, v11);
          v15 = (_OWORD *)v9;
          v13 = (_OWORD *)v17[0];
          while (1)
          {
            v14 = (_OWORD *)sub_216B30ACC((uint64_t)&v15, v12);
            sub_216B30910(v13, v14);
            v13 = v15;
            if (v15 == v6)
              break;
            v15 = (_OWORD *)((char *)v15 - 40);
            if ((sub_216B2FEC8(a3, (uint64_t)v16, (uint64_t)v15) & 1) == 0)
              goto LABEL_10;
          }
          v13 = v6;
LABEL_10:
          sub_216B30910(v13, v16);
          result = sub_216B2EDA0(v16);
        }
        v9 = v17[0];
        v7 = v17[0] + 40;
        v17[0] = v7;
      }
      while (v7 != a2);
    }
  }
  return result;
}

uint64_t sub_216B2FFD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD v15[2];
  _QWORD v16[7];

  if (result != a2)
  {
    v16[5] = v3;
    v16[6] = v4;
    v6 = result;
    v7 = result + 40;
    for (v16[0] = result + 40; v7 != a2; v16[0] = v7)
    {
      result = sub_216B2FEC8(a3, v7, v6);
      if ((_DWORD)result)
      {
        v10 = sub_216B30ACC((uint64_t)v16, v9);
        sub_216B2F9FC(v15, v10);
        v14 = (_OWORD *)v6;
        v12 = (_OWORD *)v16[0];
        do
        {
          v13 = (_OWORD *)sub_216B30ACC((uint64_t)&v14, v11);
          sub_216B30910(v12, v13);
          v12 = v14;
          v14 = (_OWORD *)((char *)v14 - 40);
        }
        while ((sub_216B2FEC8(a3, (uint64_t)v15, (uint64_t)v14) & 1) != 0);
        sub_216B30910(v12, v15);
        result = sub_216B2EDA0(v15);
      }
      v6 = v16[0];
      v7 = v16[0] + 40;
    }
  }
  return result;
}

uint64_t sub_216B300A0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (a1 == (char *)a2)
    return sub_216B30AF0((uint64_t)a1, a3);
  nullsub_1(a1, a3);
  v8 = sub_216B30AF8(a1, a2, a3, a4);
  nullsub_1(a2, a3);
  return v8;
}

uint64_t sub_216B30124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = a1;
  v11 = a3;
  v7 = sub_216B2FEC8(a4, a2, a1);
  result = sub_216B2FEC8(a4, a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    sub_216B2FED4(&v12, &v11);
    if (!sub_216B2FEC8(a4, v12, v13))
      return 1;
    v9 = &v13;
    v10 = &v12;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    sub_216B2FED4(&v13, &v12);
    if (!sub_216B2FEC8(a4, v11, v12))
      return 1;
    v9 = &v12;
    v10 = &v11;
LABEL_9:
    sub_216B2FED4(v9, v10);
    return 2;
  }
  sub_216B2FED4(&v13, &v11);
  return 1;
}

unint64_t sub_216B301F8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v13;
  _OWORD v14[2];
  unint64_t v15;
  unint64_t v16;

  v4 = a2;
  v5 = (_OWORD *)a1;
  v16 = a1;
  v15 = a2;
  v6 = sub_216B30ACC((uint64_t)&v16, a2);
  sub_216B2F9FC(v14, v6);
  if ((sub_216B2FEC8(a3, (uint64_t)v14, v4 - 40) & 1) != 0)
  {
    do
      v16 += 40;
    while ((sub_216B2FEC8(a3, (uint64_t)v14, v16) & 1) == 0);
  }
  else
  {
    do
    {
      v8 = v16 + 40;
      v16 = v8;
    }
    while (v8 < v4 && !sub_216B2FEC8(a3, (uint64_t)v14, v8));
  }
  v9 = v16;
  if (v16 < v4)
  {
    do
    {
      v4 -= 40;
      v15 = v4;
    }
    while ((sub_216B2FEC8(a3, (uint64_t)v14, v4) & 1) != 0);
    v9 = v16;
  }
  if (v9 < v4)
  {
    do
    {
      sub_216B2FED4(&v16, &v15);
      do
        v16 += 40;
      while (!sub_216B2FEC8(a3, (uint64_t)v14, v16));
      do
        v15 -= 40;
      while ((sub_216B2FEC8(a3, (uint64_t)v14, v15) & 1) != 0);
      v9 = v16;
    }
    while (v16 < v15);
  }
  v13 = (_OWORD *)(v9 - 40);
  if ((_OWORD *)(v9 - 40) != v5)
  {
    v10 = (_OWORD *)sub_216B30ACC((uint64_t)&v13, v7);
    sub_216B30910(v5, v10);
    v5 = v13;
  }
  sub_216B30910(v5, v14);
  v11 = v16;
  sub_216B2EDA0(v14);
  return v11;
}

uint64_t sub_216B3036C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD *v12;
  BOOL v13;
  _OWORD v14[2];
  unint64_t v15;
  unint64_t v16;

  v4 = a2;
  v5 = (_OWORD *)a1;
  v15 = a2;
  v16 = a1;
  v6 = sub_216B30ACC((uint64_t)&v16, a2);
  sub_216B2F9FC(v14, v6);
  do
    v16 += 40;
  while ((sub_216B2FEC8(a3, v16, (uint64_t)v14) & 1) != 0);
  if ((_OWORD *)(v16 - 40) == v5)
  {
    do
    {
      if (v16 >= v4)
        break;
      v4 -= 40;
      v15 = v4;
    }
    while ((sub_216B2FEC8(a3, v4, (uint64_t)v14) & 1) == 0);
  }
  else
  {
    do
    {
      v4 -= 40;
      v15 = v4;
    }
    while (!sub_216B2FEC8(a3, v4, (uint64_t)v14));
  }
  v8 = v16;
  v13 = v16 >= v4;
  if (v16 < v4)
  {
    do
    {
      sub_216B2FED4(&v16, &v15);
      do
        v16 += 40;
      while ((sub_216B2FEC8(a3, v16, (uint64_t)v14) & 1) != 0);
      do
        v15 -= 40;
      while (!sub_216B2FEC8(a3, v15, (uint64_t)v14));
      v8 = v16;
    }
    while (v16 < v15);
  }
  v12 = (_OWORD *)(v8 - 40);
  if ((_OWORD *)(v8 - 40) != v5)
  {
    v9 = (_OWORD *)sub_216B30ACC((uint64_t)&v12, v7);
    sub_216B30910(v5, v9);
    v5 = v12;
  }
  sub_216B30910(v5, v14);
  v10 = sub_216B310D8((uint64_t)&v12, (uint64_t)&v13);
  sub_216B2EDA0(v14);
  return v10;
}

uint64_t sub_216B304E8(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v16;
  _OWORD v17[2];
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a1;
  v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      v19 = (uint64_t)a2 - 40;
      if (sub_216B2FEC8(a3, (uint64_t)a2 - 40, a1))
        sub_216B2FED4(&v20, &v19);
      return v6;
    case 3uLL:
      sub_216B2FEE0(a1, a1 + 40, (uint64_t)a2 - 40, a3);
      return v6;
    case 4uLL:
      sub_216B2FEE4(a1, a1 + 40, a1 + 80, (char *)a2 - 40, a3);
      return v6;
    case 5uLL:
      sub_216B2FEE8(a1, a1 + 40, a1 + 80, a1 + 120, (char *)a2 - 40, a3);
      return v6;
    default:
      v7 = a1 + 80;
      sub_216B2FEE0(a1, a1 + 40, a1 + 80, a3);
      v8 = a1 + 120;
      v18 = (_OWORD *)(a1 + 120);
      if ((_OWORD *)(a1 + 120) == a2)
        return 1;
      v9 = 0;
      break;
  }
  while (!sub_216B2FEC8(a3, v8, v7))
  {
LABEL_14:
    v7 = (uint64_t)v18;
    v8 = (uint64_t)v18 + 40;
    v18 = (_OWORD *)v8;
    if ((_OWORD *)v8 == a2)
      return 1;
  }
  v11 = sub_216B30ACC((uint64_t)&v18, v10);
  sub_216B2F9FC(v17, v11);
  v16 = (_OWORD *)v7;
  v13 = v18;
  while (1)
  {
    v14 = (_OWORD *)sub_216B30ACC((uint64_t)&v16, v12);
    sub_216B30910(v13, v14);
    v13 = v16;
    if (v16 == (_OWORD *)a1)
      break;
    v16 = (_OWORD *)((char *)v16 - 40);
    if ((sub_216B2FEC8(a3, (uint64_t)v17, (uint64_t)v16) & 1) == 0)
      goto LABEL_12;
  }
  v13 = (_OWORD *)a1;
LABEL_12:
  sub_216B30910(v13, v17);
  if (++v9 != 8)
  {
    sub_216B2EDA0(v17);
    goto LABEL_14;
  }
  v18 = (_OWORD *)((char *)v18 + 40);
  v6 = v18 == a2;
  sub_216B2EDA0(v17);
  return v6;
}

uint64_t sub_216B306D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = sub_216B1E600(a1);
  if (v4 == sub_216B1E600(a2))
  {
    v7 = sub_216B1E600(a1 + 8);
    v8 = a2 + 8;
    if (v7 == sub_216B1E600(a2 + 8))
      return sub_216B30790(a1 + 16, a2 + 16);
    v9 = sub_216B1E600(a1 + 8);
    v6 = v9 >= sub_216B1E600(v8);
  }
  else
  {
    v5 = sub_216B1E600(a1);
    v6 = v5 >= sub_216B1E600(a2);
  }
  return !v6;
}

uint64_t sub_216B30790(uint64_t a1, uint64_t a2)
{
  return sub_216B307A8(a1, a2) >> 31;
}

uint64_t sub_216B307A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;

  *(_QWORD *)&v5 = sub_216B30870(a2, a2);
  *((_QWORD *)&v5 + 1) = v3;
  return sub_216B307E4(a1, &v5);
}

uint64_t sub_216B307E4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  size_t *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v10 = *a2;
  v9 = sub_216B25B78(a1, (uint64_t)a2);
  v8 = sub_216B1E67C((uint64_t)&v10);
  v4 = (const void *)sub_216B26088(a1, v3);
  v5 = (const void *)sub_216B1E600((uint64_t)&v10);
  v6 = (size_t *)sub_216B24E80(&v9, &v8);
  result = j__memcmp(v4, v5, *v6);
  if (!(_DWORD)result)
  {
    if (v9 >= v8)
      return v9 > v8;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_216B30870(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = sub_216B26088(a1, a2);
  v5 = sub_216B25B78(a1, v4);
  sub_216B1E684(&v7, v3, v5);
  return v7;
}

uint64_t sub_216B308BC(_OWORD *a1, _OWORD *a2)
{
  _OWORD v5[2];

  sub_216B2F9FC(v5, a1);
  sub_216B30910(a1, a2);
  sub_216B30910(a2, v5);
  return sub_216B2EDA0(v5);
}

_OWORD *sub_216B30910(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_216B26E7C((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

uint64_t sub_216B3093C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  sub_216B30124(a1, a2, a3, a5);
  result = sub_216B2FEC8(a5, a4, a3);
  if ((_DWORD)result)
  {
    sub_216B2FED4(&v12, &v11);
    result = sub_216B2FEC8(a5, v12, a2);
    if ((_DWORD)result)
    {
      sub_216B2FED4(&v13, &v12);
      result = sub_216B2FEC8(a5, v13, a1);
      if ((_DWORD)result)
        return sub_216B2FED4(&v14, &v13);
    }
  }
  return result;
}

uint64_t sub_216B309F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v17 = a1;
  v14 = a4;
  v15 = a3;
  v13 = a5;
  sub_216B3093C(a1, a2, a3, a4, a6);
  result = sub_216B2FEC8(a6, a5, a4);
  if ((_DWORD)result)
  {
    sub_216B2FED4(&v14, &v13);
    result = sub_216B2FEC8(a6, v14, a3);
    if ((_DWORD)result)
    {
      sub_216B2FED4(&v15, &v14);
      result = sub_216B2FEC8(a6, v15, a2);
      if ((_DWORD)result)
      {
        sub_216B2FED4(&v16, &v15);
        result = sub_216B2FEC8(a6, v16, a1);
        if ((_DWORD)result)
          return sub_216B2FED4(&v17, &v16);
      }
    }
  }
  return result;
}

uint64_t sub_216B30ACC(uint64_t a1, uint64_t a2)
{
  nullsub_1(a1, a2);
  return *(_QWORD *)a1;
}

uint64_t sub_216B30AF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_216B30AF8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char *v12;

  v5 = a1;
  v12 = a1;
  if (a1 == (char *)a2)
    return sub_216B30AF0((uint64_t)a1, a3);
  sub_216B30BE4((uint64_t)a1, a2, a4);
  v11 = a2;
  if (a2 != a3)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v5) >> 3);
    v9 = a2;
    do
    {
      if (sub_216B2FEC8(a4, v9, (uint64_t)v12))
      {
        sub_216B2FED4(&v11, &v12);
        sub_216B30C68((uint64_t)v12, a4, v8, v12);
      }
      v9 = v11 + 40;
      v11 = v9;
    }
    while (v9 != a3);
    v5 = v12;
  }
  sub_216B30DE4(v5, a2, a4);
  return v11;
}

uint64_t sub_216B30BE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;

  v3 = a2 - result;
  if (a2 - result >= 41)
  {
    v5 = result;
    v6 = v3 / 40;
    v7 = (unint64_t)(v3 / 40 - 2) >> 1;
    v8 = v7 + 1;
    v9 = (_OWORD *)(result + 40 * v7);
    do
    {
      result = sub_216B30C68(v5, a3, v6, v9);
      v9 = (_OWORD *)((char *)v9 - 40);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_216B30C68(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  uint64_t v6;
  int64_t v7;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int v21;
  _OWORD v22[2];
  _OWORD *v23;
  _OWORD *v24;

  v24 = a4;
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 3)))
    {
      v10 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 3)) | 1;
      v11 = result + 40 * v10;
      v23 = (_OWORD *)v11;
      v12 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v12 < a3 && sub_216B2FEC8(a2, result + 40 * v10, v11 + 40))
      {
        v23 = (_OWORD *)(v11 + 40);
        v11 += 40;
        v10 = v12;
      }
      result = sub_216B2FEC8(a2, v11, (uint64_t)a4);
      if ((result & 1) == 0)
      {
        v14 = sub_216B30ACC((uint64_t)&v24, v13);
        sub_216B2F9FC(v22, v14);
        while (1)
        {
          v16 = (_OWORD *)sub_216B30ACC((uint64_t)&v23, v15);
          sub_216B30910(v24, v16);
          v17 = v23;
          v24 = v23;
          if (v7 < v10)
            break;
          v18 = 2 * v10;
          v10 = (2 * v10) | 1;
          v19 = v6 + 40 * v10;
          v23 = (_OWORD *)v19;
          v20 = v18 + 2;
          if (v18 + 2 < a3)
          {
            v21 = sub_216B2FEC8(a2, v19, v19 + 40);
            v19 = (uint64_t)v23;
            if (v21)
            {
              v19 = (uint64_t)v23 + 40;
              v23 = (_OWORD *)((char *)v23 + 40);
              v10 = v20;
            }
          }
          if (sub_216B2FEC8(a2, v19, (uint64_t)v22))
          {
            v17 = v24;
            break;
          }
        }
        sub_216B30910(v17, v22);
        return sub_216B2EDA0(v22);
      }
    }
  }
  return result;
}

uint64_t sub_216B30DE4(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  if (a2 - (uint64_t)a1 >= 41)
  {
    v6 = (a2 - (uint64_t)a1) / 0x28uLL;
    v7 = a2;
    do
    {
      sub_216B30E6C(a1, v7, a3, v6);
      v7 -= 40;
    }
    while (v6-- > 2);
  }
  return nullsub_1(a1, a2);
}

char *sub_216B30E6C(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD v12[2];
  _OWORD *v13;
  char *v14;

  v14 = result;
  if (a4 >= 2)
  {
    v7 = sub_216B30ACC((uint64_t)&v14, a2);
    sub_216B2F9FC(v12, v7);
    v8 = sub_216B30F44(v14, a3, a4);
    v10 = v8;
    v13 = (_OWORD *)(a2 - 40);
    if (v8 == (_OWORD *)(a2 - 40))
    {
      sub_216B30910(v8, v12);
    }
    else
    {
      v11 = (_OWORD *)sub_216B30ACC((uint64_t)&v13, v9);
      sub_216B30910(v10, v11);
      sub_216B30910(v13, v12);
      sub_216B3100C((uint64_t)v14, (uint64_t)v10 + 40, a3, 0xCCCCCCCCCCCCCCCDLL * (((char *)v10 + 40 - v14) >> 3));
    }
    return (char *)sub_216B2EDA0(v12);
  }
  return result;
}

_OWORD *sub_216B30F44(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v14;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (uint64_t)a1 + 40 * v6 + 40;
    v14 = (_OWORD *)v9;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_216B2FEC8(a2, v9, v9 + 40))
    {
      v14 = (_OWORD *)((char *)v14 + 40);
      v6 = v11;
    }
    v12 = (_OWORD *)sub_216B30ACC((uint64_t)&v14, v9);
    sub_216B30910(a1, v12);
    a1 = v14;
  }
  while (v6 <= v8);
  return v14;
}

uint64_t sub_216B3100C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD v15[2];
  _OWORD *v16;
  _OWORD *v17[7];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17[5] = v4;
    v17[6] = v5;
    v8 = result;
    v9 = v6 >> 1;
    v16 = (_OWORD *)(result + 40 * (v6 >> 1));
    v17[0] = (_OWORD *)(a2 - 40);
    result = sub_216B2FEC8(a3, (uint64_t)v16, a2 - 40);
    if ((_DWORD)result)
    {
      v11 = sub_216B30ACC((uint64_t)v17, v10);
      sub_216B2F9FC(v15, v11);
      while (1)
      {
        v13 = (_OWORD *)sub_216B30ACC((uint64_t)&v16, v12);
        sub_216B30910(v17[0], v13);
        v14 = v16;
        v17[0] = v16;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v16 = (_OWORD *)(v8 + 40 * v9);
        if ((sub_216B2FEC8(a3, (uint64_t)v16, (uint64_t)v15) & 1) == 0)
        {
          v14 = v17[0];
          break;
        }
      }
      sub_216B30910(v14, v15);
      return sub_216B2EDA0(v15);
    }
  }
  return result;
}

uint64_t sub_216B310D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B31104(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B31108(uint64_t result, _QWORD *a2, _BYTE *a3)
{
  *(_QWORD *)result = *a2;
  *(_BYTE *)(result + 8) = *a3;
  return result;
}

_BYTE *sub_216B3111C(_BYTE *a1, uint64_t a2, _BYTE *a3)
{
  return sub_216B31124(a1, a2 - (_QWORD)a1, a3);
}

_BYTE *sub_216B31124(_BYTE *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;

  v5 = nullsub_1(a2, a2);
  return sub_216B31158(a1, v5, a3);
}

_BYTE *sub_216B31158(_BYTE *result, uint64_t a2, _BYTE *a3)
{
  unint64_t v3;

  if (a2 >= 1)
  {
    v3 = a2 + 1;
    do
    {
      *result++ = *a3;
      --v3;
    }
    while (v3 > 1);
  }
  return result;
}

uint64_t sub_216B3117C(uint64_t a1, std::string::size_type a2, std::string::value_type a3)
{
  std::string *v6;
  char v8;
  char v9;

  v6 = (std::string *)sub_216B250EC(a1, &v9, &v8);
  std::string::__init(v6, a2, a3);
  return a1;
}

uint64_t sub_216B311CC(uint64_t a1, unint64_t a2, int a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (a4 < a2)
    v5 = a4 + 1;
  else
    v5 = a2;
  v6 = a1 - 1;
  while (v5)
  {
    if (!sub_216B31220(*(char *)(v6 + v5--), a3))
      return v5;
  }
  return -1;
}

BOOL sub_216B31220(int a1, int a2)
{
  return a1 == a2;
}

BOOL sub_216B3122C(uint64_t a1, char *a2, unint64_t a3)
{
  return *(_QWORD *)(a1 + 8) == a3 && sub_216B31798(a1, a2, a3) == 0;
}

uint64_t sub_216B3125C(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 20) = a3;
  if (a2)
  {
    sub_216B31298(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return a1;
}

_QWORD *sub_216B31298(uint64_t a1, int a2)
{
  int v3;
  _QWORD *result;

  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (a2)
    v3 = a2;
  else
    v3 = 16;
  *(_DWORD *)(a1 + 8) = v3;
  result = malloc_type_calloc((v3 + 1), 0xCuLL, 0xE5F47F84uLL);
  *(_QWORD *)a1 = result;
  result[*(unsigned int *)(a1 + 8)] = 2;
  return result;
}

uint64_t sub_216B312EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  const void *v21[2];

  v6 = *(_DWORD *)(a1 + 8);
  if (!v6)
  {
    sub_216B31298(a1, 16);
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7 = sub_216B31434(a2, a3);
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8) + 8;
  v10 = v7 & (v6 - 1);
  v11 = v10;
  v12 = *(unsigned int **)(*(_QWORD *)a1 + 8 * v10);
  if (v12)
  {
    v14 = 1;
    v15 = 0xFFFFFFFFLL;
    do
    {
      v20 = v15;
      if (v12 == (unsigned int *)sub_216B25120())
      {
        if ((_DWORD)v20 == -1)
          v15 = v11;
        else
          v15 = v20;
      }
      else if (*(_DWORD *)(v9 + 4 * v10) == v7)
      {
        v16 = (char *)v12 + *(unsigned int *)(a1 + 20);
        v17 = sub_216B1E4E0(v12);
        sub_216B1E684(v21, v16, v17);
        v18 = sub_216B274F0(a2, a3, v21[0], (size_t)v21[1]);
        v15 = v20;
        if (v18)
          return v11;
      }
      else
      {
        v15 = v20;
      }
      v19 = v11 + v14++;
      v10 = v19 & v8;
      v12 = *(unsigned int **)(*(_QWORD *)a1 + 8 * v10);
      v11 = v10;
    }
    while (v12);
    if ((_DWORD)v15 == -1)
      v11 = v10;
    else
      v11 = v15;
    if ((_DWORD)v15 != -1)
      v10 = (int)v15;
  }
  *(_DWORD *)(v9 + 4 * v10) = v7;
  return v11;
}

uint64_t sub_216B31434(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  result = sub_216B1E67C((uint64_t)v5);
  if (result)
  {
    v3 = result;
    v4 = 0;
    LODWORD(result) = 0;
    do
      result = 33 * (_DWORD)result + sub_216B26288(v5, v4++);
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_216B31498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  unsigned int v16;
  int v17;
  const void *v18[2];

  v3 = *(_DWORD *)(a1 + 8);
  if (!v3)
    return 0xFFFFFFFFLL;
  v7 = sub_216B31434(a2, a3);
  v8 = v3 - 1;
  v9 = v7 & (v3 - 1);
  v10 = *(unsigned int **)(*(_QWORD *)a1 + 8 * v9);
  if (!v10)
    return 0xFFFFFFFFLL;
  v12 = v7;
  v13 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8) + 8;
  v14 = 1;
  while (1)
  {
    if (v10 != (unsigned int *)sub_216B25120() && *(_DWORD *)(v13 + 4 * v9) == v12)
    {
      v15 = (char *)v10 + *(unsigned int *)(a1 + 20);
      v16 = sub_216B1E4E0(v10);
      sub_216B1E684(v18, v15, v16);
      if (sub_216B274F0(a2, a3, v18[0], (size_t)v18[1]))
        break;
    }
    v17 = v9 + v14++;
    v9 = v17 & v8;
    v10 = *(unsigned int **)(*(_QWORD *)a1 + 8 * v9);
    result = 0xFFFFFFFFLL;
    if (!v10)
      return result;
  }
  return v9;
}

uint64_t sub_216B31598(uint64_t a1, unsigned int *a2)
{
  char *v3;
  unsigned int v4;
  uint64_t v6[2];

  v3 = (char *)a2 + *(unsigned int *)(a1 + 20);
  v4 = sub_216B1E4E0(a2);
  sub_216B1E684(v6, v3, v4);
  return sub_216B315E8(a1, v6[0], v6[1]);
}

uint64_t sub_216B315E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;

  v4 = sub_216B31498(a1, a2, a3);
  if (v4 == -1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = sub_216B25120();
  *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
  return v5;
}

uint64_t sub_216B31650(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v24;

  v4 = *(void **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  if (3 * v6 >= 4 * v5)
  {
    if (v6 - (v5 + *(_DWORD *)(a1 + 16)) > v6 >> 3)
      return a2;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v7 = 2 * v6;
    v8 = 2 * v6;
  }
  v9 = malloc_type_calloc((v8 + 1), 0xCuLL, 0xF0B62E6CuLL);
  v10 = &v9[v7];
  *v10 = 2;
  v11 = v10 + 1;
  v12 = *(unsigned int *)(a1 + 8);
  v24 = v8;
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (uint64_t)v4 + 8 * v6 + 8;
    v15 = v8 - 1;
    v16 = a2;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v13);
      if (v17 && v17 != sub_216B25120())
      {
        v18 = *(_DWORD *)(v14 + 4 * v13);
        v19 = v18 & v15;
        v20 = &v9[v19];
        if (*v20)
        {
          v21 = 1;
          do
          {
            v22 = v19 + v21++;
            v19 = v22 & v15;
          }
          while (v9[v19]);
          v20 = &v9[v19];
        }
        *v20 = v17;
        *((_DWORD *)v11 + v19) = v18;
        if (v13 == v16)
          a2 = v19;
        else
          a2 = a2;
      }
      ++v13;
    }
    while (v13 != v12);
  }
  free(*(void **)a1);
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v24;
  *(_DWORD *)(a1 + 16) = 0;
  return a2;
}

uint64_t sub_216B31798(uint64_t a1, char *a2, unint64_t a3)
{
  char *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = *(char **)a1;
  v7 = sub_216B26D84(*(_QWORD *)(a1 + 8), a3);
  result = sub_216B317F8(v6, a2, v7);
  if (!(_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = v9 == a3;
    if (v9 < a3)
      v11 = -1;
    else
      v11 = 1;
    if (v10)
      return 0;
    else
      return v11;
  }
  return result;
}

uint64_t sub_216B317F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  if (!a3)
    return 0;
  v3 = a3;
  while (1)
  {
    v6 = *a1++;
    v7 = sub_216B31B44(v6);
    v8 = *a2++;
    v9 = sub_216B31B44(v8);
    if (v7 != v9)
      break;
    if (!--v3)
      return 0;
  }
  if (v7 < v9)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t sub_216B31864(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v8 = sub_216B1E600(a1);
  v9 = sub_216B1E67C(a1);
  sub_216B1E684(v14, v8, v9);
  v10 = sub_216B1E600((uint64_t)v15);
  v11 = sub_216B1E67C((uint64_t)v15);
  sub_216B1E684(v13, v10, v11);
  return sub_216B318F4(v14[0], v14[1], v13[0], v13[1], a4, a5);
}

uint64_t sub_216B318F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  _BYTE *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  char *v31;
  int v32;
  int v33;
  unsigned int v34;
  char v35[8];
  _QWORD v36[2];
  _QWORD v37[2];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v37[0] = a1;
  v37[1] = a2;
  v36[0] = a3;
  v36[1] = a4;
  v30 = sub_216B1E67C((uint64_t)v37);
  v8 = sub_216B1E67C((uint64_t)v36);
  sub_216B324FC((uint64_t)v35);
  v9 = v8 + 1;
  v10 = 2 * (v8 + 1);
  if (v10 < 0x41)
  {
    v12 = &v38;
  }
  else
  {
    if (v10 >> 62)
      v11 = -1;
    else
      v11 = 8 * v9;
    v12 = (char *)sub_216B1D1D4(v11);
    sub_216B32500((uint64_t)v35, (uint64_t)v12);
  }
  v13 = 0;
  do
  {
    *(_DWORD *)&v12[4 * v13] = v13;
    ++v13;
  }
  while (v8 >= v13);
  if (v30)
  {
    v14 = &v12[4 * v9];
    v15 = 1;
    v29 = a6;
    v28 = v8;
    while (1)
    {
      v16 = v14;
      *(_DWORD *)v14 = v15;
      v34 = 0;
      v17 = *(_DWORD *)v14;
      v34 = v17;
      if (v8)
      {
        v18 = 0;
        v31 = v16;
        v19 = (int *)(v16 + 4);
        v20 = v12 + 4;
        do
        {
          if (a5)
          {
            v21 = *((_DWORD *)v20 - 1);
            v22 = *(unsigned __int8 *)sub_216B25B40(v37, v15 - 1);
            if (v22 == *(unsigned __int8 *)sub_216B25B40(v36, v18))
              v23 = v21;
            else
              v23 = v21 + 1;
            v33 = v23;
            v32 = *(_DWORD *)sub_216B1D574(v19 - 1, v20) + 1;
            v24 = *(_DWORD *)sub_216B1D574(&v33, &v32);
          }
          else
          {
            v25 = *(unsigned __int8 *)sub_216B25B40(v37, v15 - 1);
            if (v25 == *(unsigned __int8 *)sub_216B25B40(v36, v18))
              v24 = *((_DWORD *)v20 - 1);
            else
              v24 = *(_DWORD *)sub_216B1D574(v19 - 1, v20) + 1;
          }
          *v19 = v24;
          v17 = *(_DWORD *)sub_216B1D574(&v34, v19);
          v34 = v17;
          ++v19;
          v20 += 4;
          ++v18;
          --v8;
        }
        while (v8);
        a6 = v29;
        v8 = v28;
        v16 = v31;
      }
      if (a6 && v17 > a6)
        break;
      ++v15;
      v14 = v12;
      v12 = v16;
      if (v15 > v30)
        goto LABEL_28;
    }
    v26 = a6 + 1;
  }
  else
  {
    v16 = v12;
LABEL_28:
    v26 = *(unsigned int *)&v16[4 * v8];
  }
  sub_216B3255C(v35);
  return v26;
}

uint64_t sub_216B31B44(int a1)
{
  if ((a1 - 65) >= 0x1A)
    return (char)a1;
  else
    return (char)(a1 + 32);
}

uint64_t sub_216B31B5C(_QWORD *a1, const void *a2, size_t a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  const void *v22;
  size_t v23;
  _OWORD v24[14];
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = a3;
  v6 = sub_216B1E67C((uint64_t)&v22);
  v7 = a1[1];
  v8 = v7 - v6;
  if (v7 < v6)
    return -1;
  v9 = v6;
  if (v7 >= 0x10 && v6 - 256 > 0xFFFFFFFFFFFFFF00)
  {
    if (v7 > a4)
    {
      v25 = vdupq_n_s8(v6);
      v26 = v25;
      v24[12] = v25;
      v24[13] = v25;
      v24[10] = v25;
      v24[11] = v25;
      v24[8] = v25;
      v24[9] = v25;
      v24[6] = v25;
      v24[7] = v25;
      v24[4] = v25;
      v24[5] = v25;
      v24[2] = v25;
      v24[3] = v25;
      v24[0] = v25;
      v24[1] = v25;
      v10 = v6 - 1;
      if (v6 != 1)
      {
        v11 = 0;
        v12 = 1;
        do
        {
          *((_BYTE *)v24 + sub_216B26288(&v22, v11)) = v10 - v11;
          v11 = v12;
        }
        while (v10 != v12++);
        v7 = a1[1];
      }
      v14 = v7 - a4;
      if (v9 <= (v7 - a4))
      {
        while (1)
        {
          a4 = a4;
          v21[0] = sub_216B2864C(a1, a4, v9);
          v21[1] = v15;
          if (sub_216B1E644((uint64_t)v21, v22, v23))
            break;
          v16 = *((unsigned __int8 *)v24 + sub_216B26288(a1, v10 + a4));
          v14 -= v16;
          LODWORD(a4) = a4 + v16;
          if (v14 < v9)
            return -1;
        }
        return a4;
      }
    }
    return -1;
  }
  v17 = v8 + 1;
  v18 = sub_216B26D84(a4, v8 + 1);
  if (v18 == v17)
    return -1;
  a4 = v18;
  while (1)
  {
    *(_QWORD *)&v24[0] = sub_216B2864C(a1, a4, v9);
    *((_QWORD *)&v24[0] + 1) = v19;
    if (sub_216B1E644((uint64_t)v24, v22, v23))
      break;
    if (v17 == ++a4)
      return -1;
  }
  return a4;
}

uint64_t sub_216B31D14(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[32];
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  sub_216B31DD4(v12);
  if (sub_216B1E67C((uint64_t)v13))
  {
    v6 = 0;
    do
    {
      v7 = sub_216B26288(v13, v6);
      sub_216B31DD8((uint64_t)v12, v7, 1);
      ++v6;
    }
    while (v6 != sub_216B1E67C((uint64_t)v13));
  }
  v8 = sub_216B26D84(a4, a1[1]);
  v9 = a1[1];
  if (v8 == v9)
    return -1;
  v10 = v8;
  while (!sub_216B31E2C((uint64_t)v12, *(unsigned __int8 *)(*a1 + v10)))
  {
    if (v9 == ++v10)
      return -1;
  }
  return v10;
}

uint64_t sub_216B31DD8(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD v7[2];

  if (a2 >= 0x100)
    sub_216B25C54();
  v7[0] = sub_216B32620(a1, a2);
  v7[1] = v5;
  sub_216B32624((uint64_t)v7, a3);
  return a1;
}

BOOL sub_216B31E2C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];

  if (a2 >= 0x100)
    sub_216B25C54();
  v4[0] = sub_216B32620(a1, a2);
  v4[1] = v2;
  return sub_216B32688((uint64_t)v4);
}

unint64_t sub_216B31E68(_QWORD *a1, unsigned __int8 a2, unint64_t a3)
{
  unint64_t result;
  uint64_t v6;

  result = sub_216B26D84(a3, a1[1]);
  v6 = a1[1];
  if (result == v6)
    return -1;
  while (*(unsigned __int8 *)(*a1 + result) == a2)
  {
    if (v6 == ++result)
      return -1;
  }
  return result;
}

uint64_t sub_216B31EC4(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[32];
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  sub_216B31DD4(v12);
  if (sub_216B1E67C((uint64_t)v13))
  {
    v6 = 0;
    do
    {
      v7 = sub_216B26288(v13, v6);
      sub_216B31DD8((uint64_t)v12, v7, 1);
      ++v6;
    }
    while (v6 != sub_216B1E67C((uint64_t)v13));
  }
  v8 = sub_216B26D84(a4, a1[1]);
  v9 = a1[1];
  if (v8 == v9)
    return -1;
  v10 = v8;
  while (sub_216B31E2C((uint64_t)v12, *(unsigned __int8 *)(*a1 + v10)))
  {
    if (v9 == ++v10)
      return -1;
  }
  return v10;
}

uint64_t sub_216B31F84(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  _BYTE v12[32];
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  sub_216B31DD4(v12);
  if (sub_216B1E67C((uint64_t)v13))
  {
    v6 = 0;
    do
    {
      v7 = sub_216B26288(v13, v6);
      sub_216B31DD8((uint64_t)v12, v7, 1);
      ++v6;
    }
    while (v6 != sub_216B1E67C((uint64_t)v13));
  }
  v8 = sub_216B26D84(a4, a1[1]);
  while (v8)
  {
    v9 = v8 - 1;
    v10 = sub_216B31E2C((uint64_t)v12, *(unsigned __int8 *)(*a1 + v8 - 1));
    v8 = v9;
    if (v10)
      return v9;
  }
  return -1;
}

uint64_t sub_216B32040(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  _BYTE v14[32];
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  sub_216B31DD4(v14);
  v6 = sub_216B1E67C((uint64_t)v15);
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = sub_216B26288(v15, i);
      sub_216B31DD8((uint64_t)v14, v9, 1);
    }
  }
  v10 = sub_216B26D84(a4, a1[1]);
  while (v10)
  {
    v11 = v10 - 1;
    v12 = sub_216B31E2C((uint64_t)v14, *(unsigned __int8 *)(*a1 + v10 - 1));
    v10 = v11;
    if (!v12)
      return v11;
  }
  return -1;
}

uint64_t sub_216B320F8(__int128 *a1, uint64_t a2, const void *a3, size_t a4, int a5, int a6)
{
  int v11;
  uint64_t result;
  _OWORD v13[2];
  __int128 v14;

  v14 = *a1;
  if (sub_216B1E600((uint64_t)&v14))
  {
    v11 = 0;
    do
    {
      if ((a5 & 0x80000000) == 0 && v11 >= a5)
        break;
      sub_216B321E0(&v14, a3, a4, (uint64_t)v13);
      if ((a6 & 1) != 0 || sub_216B1E67C((uint64_t)v13))
        sub_216B267B0(a2, v13);
      v14 = v13[1];
      ++v11;
    }
    while (sub_216B1E600((uint64_t)&v14));
  }
  result = sub_216B1E600((uint64_t)&v14);
  if (result)
  {
    result = sub_216B1E67C((uint64_t)&v14);
    if (result || a6)
      return sub_216B267B0(a2, &v14);
  }
  return result;
}

uint64_t sub_216B321E0@<X0>(_QWORD *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v6 = sub_216B31B5C(a1, a2, a3, 0);
  if (v6 == -1)
  {
    sub_216B26D14(v13);
    return sub_216B26D04((uint64_t)a1, (uint64_t)v13, a4);
  }
  else
  {
    v7 = v6;
    v13[0] = sub_216B26D18(a1, 0, v6);
    v13[1] = v8;
    v9 = sub_216B1E67C((uint64_t)v14);
    v12[0] = sub_216B26D18(a1, v9 + v7, 0xFFFFFFFFFFFFFFFFLL);
    v12[1] = v10;
    return sub_216B26D04((uint64_t)v13, (uint64_t)v12, a4);
  }
}

uint64_t sub_216B32284(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t *a4)
{
  unsigned int v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a3;
  v12 = a1;
  v13 = a2;
  if (!a3)
    v5 = sub_216B323D8(&v12);
  if (sub_216B29094((uint64_t)&v12))
    return 1;
  for (*a4 = 0; !sub_216B29094((uint64_t)&v12); v13 = v11)
  {
    if ((int)sub_216B26288(&v12, 0) < 48 || (int)sub_216B26288(&v12, 0) >= 58)
    {
      if ((int)sub_216B26288(&v12, 0) < 97 || (int)sub_216B26288(&v12, 0) >= 123)
      {
        if ((int)sub_216B26288(&v12, 0) < 65 || (int)sub_216B26288(&v12, 0) > 90)
          return 1;
        v7 = -55;
      }
      else
      {
        v7 = -87;
      }
    }
    else
    {
      v7 = -48;
    }
    v8 = v7 + sub_216B26288(&v12, 0);
    if (v8 >= v5)
      return 1;
    v9 = *a4;
    v10 = *a4 * v5 + v8;
    *a4 = v10;
    if (v10 / v5 < v9)
      return 1;
    v12 = sub_216B2864C(&v12, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
  }
  return 0;
}

uint64_t sub_216B323D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v7[2];
  const void *v8[2];
  const void *v9[2];
  const void *v10[2];

  sub_216B1E678((int)v10, "0x");
  if (sub_216B2A2EC((uint64_t)a1, v10[0], (size_t)v10[1]))
  {
    *a1 = sub_216B2864C(a1, 2uLL, 0xFFFFFFFFFFFFFFFFLL);
    a1[1] = v2;
    return 16;
  }
  else
  {
    sub_216B1E678((int)v9, "0b");
    if (sub_216B2A2EC((uint64_t)a1, v9[0], (size_t)v9[1]))
    {
      v3 = 2;
      *a1 = sub_216B2864C(a1, 2uLL, 0xFFFFFFFFFFFFFFFFLL);
      a1[1] = v4;
    }
    else
    {
      sub_216B1E678((int)v8, "0o");
      if (sub_216B2A2EC((uint64_t)a1, v8[0], (size_t)v8[1]))
      {
        *a1 = sub_216B2864C(a1, 2uLL, 0xFFFFFFFFFFFFFFFFLL);
        a1[1] = v5;
        return 8;
      }
      else
      {
        sub_216B1E678((int)v7, "0");
        if (sub_216B2A2EC((uint64_t)a1, v7[0], (size_t)v7[1]))
          return 8;
        else
          return 10;
      }
    }
  }
  return v3;
}

uint64_t sub_216B324E0(char **a1)
{
  return **a1;
}

double sub_216B324F0(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_216B32500(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = *(void **)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B3259C(v7, v4);
  }
}

uint64_t sub_216B32560(uint64_t a1)
{
  char v2;
  char v3;

  return sub_216B32584(a1, &v3, &v2);
}

uint64_t sub_216B32588(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = sub_216B2C090(a1);
  return nullsub_1(v1, v2);
}

void sub_216B3259C(int a1, void *a2)
{
  if (a2)
    j__free(a2);
}

uint64_t sub_216B325AC(uint64_t a1)
{
  sub_216B325D4(a1, 0);
  return a1;
}

void sub_216B325D4(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *(void **)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v4) = 0;
  if (v3)
  {
    v6 = j_nullsub_1(a1, v5);
    sub_216B3259C(v6, v3);
  }
}

uint64_t sub_216B32624(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  if (a2)
    v3 = **(_QWORD **)result | v2;
  else
    v3 = **(_QWORD **)result & ~v2;
  **(_QWORD **)result = v3;
  return result;
}

uint64_t sub_216B32650(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  sub_216B1E684(&v3, a1 + 8 * (a2 >> 6), 1 << a2);
  return v3;
}

BOOL sub_216B32688(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) & **(_QWORD **)a1) != 0;
}

uint64_t sub_216B3269C()
{
  return 1;
}

__int128 *sub_216B326A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254E4AEC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254E4AEC8))
  {
    sub_216B2AFE8(&xmmword_254E4AEB8, 0x8000000000000000, 0);
    __cxa_guard_release(&qword_254E4AEC8);
  }
  return &xmmword_254E4AEB8;
}

uint64_t sub_216B32700(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = 1000000000;
  v2 = *(_DWORD *)(result + 8);
  if (v2 <= 999999999)
  {
    v4 = *(_QWORD *)result;
    if (v2 >= -999999999)
      goto LABEL_16;
    v6 = -1999999999 - v2;
    if (v2 > 0x88CA6C01)
      v6 = 0;
    LODWORD(v7) = ((__PAIR64__(v6, v2) - 2294967297u) >> 32) / 0x3B9ACA00;
    if (v2 >= 0x88CA6C01)
      v7 = v7;
    else
      v7 = (v7 + 1);
    v4 += ~v7;
    v2 += 1000000000 * v7 + 1000000000;
  }
  else
  {
    v3 = *(_QWORD *)result;
    if (v2 > 0x773593FF)
      ++v3;
    v4 = v3 + 1;
    if (v2 >= 0x77359400)
      v5 = -1000000000;
    else
      v5 = 0;
    v2 = v5 + v2 - 1000000000;
  }
  *(_QWORD *)result = v4;
  *(_DWORD *)(result + 8) = v2;
LABEL_16:
  if (v4 >= 1)
  {
    if ((v2 & 0x80000000) == 0)
      return result;
    v8 = -1;
LABEL_23:
    *(_QWORD *)result = v4 + v8;
    *(_DWORD *)(result + 8) = v2 + v1;
    return result;
  }
  if (v4 && v2 >= 1)
  {
    v8 = 1;
    v1 = -1000000000;
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_216B327E4()
{
  timeval v1;
  __int128 v2;

  v1.tv_usec = 0;
  v1.tv_sec = 0;
  if (gettimeofday(&v1, 0))
  {
    sub_216B326A4();
    return xmmword_254E4AEB8;
  }
  else
  {
    sub_216B2AFE8(&v2, v1.tv_sec - 946684800, (1000 * v1.tv_usec));
  }
  return v2;
}

uint64_t sub_216B32858(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 7)
  {
    v6 = (_DWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && *(_DWORD *)((char *)a2 + 3) == *(_DWORD *)((char *)v6 + 3))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B328C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 10)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(unsigned __int16 *)(a2 + 8) == (unint64_t)*(unsigned __int16 *)(v6 + 8))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B32938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 5)
  {
    v6 = sub_216B1E600(a1);
    if (*(_DWORD *)a2 == *(_DWORD *)v6 && *(unsigned __int8 *)(a2 + 4) == *(unsigned __int8 *)(v6 + 4))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B329A8(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 3)
  {
    v6 = (unsigned __int16 *)sub_216B1E600(a1);
    if (*a2 == *v6 && *((unsigned __int8 *)a2 + 2) == *((unsigned __int8 *)v6 + 2))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B32A18(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 4 && *a2 == *(_DWORD *)sub_216B1E600(a1))
    *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_216B32A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 6)
  {
    v6 = sub_216B1E600(a1);
    if (*(_DWORD *)a2 == *(_DWORD *)v6 && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(v6 + 4))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B32AEC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 8 && *a2 == *(_QWORD *)sub_216B1E600(a1))
    *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_216B32B50(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 16);
  if (!v2)
    v2 = a2;
  return *v2;
}

uint64_t sub_216B32B64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  sub_216B34D50(a2, (std::string *)a1);
  v3 = sub_216B330CC(a1);
  *(_DWORD *)(a1 + 24) = sub_216B32C00(v3, v4);
  v5 = sub_216B330CC(a1);
  *(_DWORD *)(a1 + 28) = sub_216B33104(v5, v6);
  v7 = sub_216B33414(a1);
  *(_DWORD *)(a1 + 32) = sub_216B332D8(v7, v8);
  v9 = sub_216B336C4(a1);
  *(_DWORD *)(a1 + 36) = sub_216B33464(v9, v10);
  v11 = sub_216B33868(a1);
  *(_DWORD *)(a1 + 40) = sub_216B3372C(v11, v12);
  v13 = sub_216B33868(a1);
  v15 = sub_216B338D0(v13, v14);
  *(_DWORD *)(a1 + 44) = v15;
  if (!v15)
    *(_DWORD *)(a1 + 44) = sub_216B33950(a1);
  return a1;
}

uint64_t sub_216B32C00(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  _QWORD v95[3];

  v2 = sub_216B32854(v95, a1, a2);
  v94 = 24;
  v3 = sub_216B3421C((uint64_t)v2, "i386", "i486", "i586", "i686", (uint64_t)&v94);
  v93 = 24;
  v4 = sub_216B34274(v3, "i786", "i886", "i986", (uint64_t)&v93);
  v92 = 25;
  v5 = sub_216B342BC(v4, (uint64_t)"amd64", (uint64_t)"x86_64", "x86_64h", (uint64_t)&v92);
  v91 = 11;
  v6 = sub_216B32858(v5, "powerpc", (uint64_t)&v91);
  v90 = 12;
  v7 = sub_216B34304(v6, (uint64_t)"powerpc64", (unsigned __int16 *)"ppu", (uint64_t)&v90);
  v89 = 13;
  v8 = sub_216B34334(v7, "powerpc64le", (uint64_t)&v89);
  v88 = 3;
  v9 = sub_216B32858(v8, "aarch64", (uint64_t)&v88);
  v87 = 4;
  v10 = sub_216B328C8(v9, (uint64_t)"aarch64_be", (uint64_t)&v87);
  v86 = 3;
  v11 = sub_216B32938(v10, (uint64_t)"arm64", (uint64_t)&v86);
  v85 = 1;
  v12 = sub_216B343A4(v11, (unsigned __int16 *)"arm", (uint64_t)"xscale", (uint64_t)&v85);
  v84 = 1;
  v13 = sub_216B343D4(v12, "armv", (uint64_t)&v84);
  v83 = 2;
  v14 = sub_216B32938(v13, (uint64_t)"armeb", (uint64_t)&v83);
  v82 = 2;
  v15 = sub_216B34438(v14, (uint64_t)"armebv", (uint64_t)&v82);
  v81 = 22;
  v16 = sub_216B32938(v15, (uint64_t)"thumb", (uint64_t)&v81);
  v80 = 22;
  v17 = sub_216B34438(v16, (uint64_t)"thumbv", (uint64_t)&v80);
  v79 = 23;
  v18 = sub_216B32858(v17, "thumbeb", (uint64_t)&v79);
  v78 = 23;
  v19 = sub_216B344A8(v18, "thumbebv", (uint64_t)&v78);
  v77 = 10;
  v20 = sub_216B32A7C(v19, (uint64_t)"msp430", (uint64_t)&v77);
  v76 = 6;
  v21 = sub_216B3450C(v20, "mips", (uint64_t)"mipseb", (uint64_t)"mipsallegrex", (uint64_t)&v76);
  v75 = 7;
  v22 = sub_216B34554(v21, (uint64_t)"mipsel", "mipsallegrexel", (uint64_t)&v75);
  v74 = 8;
  v23 = sub_216B34584(v22, (uint64_t)"mips64", "mips64eb", (uint64_t)&v74);
  v73 = 9;
  v24 = sub_216B32AEC(v23, "mips64el", (uint64_t)&v73);
  v72 = 14;
  v25 = sub_216B32A18(v24, "r600", (uint64_t)&v72);
  v71 = 5;
  v26 = sub_216B32858(v25, "hexagon", (uint64_t)&v71);
  v70 = 20;
  v27 = sub_216B32938(v26, (uint64_t)"s390x", (uint64_t)&v70);
  v69 = 18;
  v28 = sub_216B32938(v27, (uint64_t)"sparc", (uint64_t)&v69);
  v68 = 19;
  v29 = sub_216B345B4(v28, "sparcv9", "sparc64", (uint64_t)&v68);
  v67 = 21;
  v30 = sub_216B329A8(v29, (unsigned __int16 *)"tce", (uint64_t)&v67);
  v66 = 26;
  v31 = sub_216B32938(v30, (uint64_t)"xcore", (uint64_t)&v66);
  v65 = 27;
  v32 = sub_216B32938(v31, (uint64_t)"nvptx", (uint64_t)&v65);
  v64 = 28;
  v33 = sub_216B32858(v32, "nvptx64", (uint64_t)&v64);
  v63 = 29;
  v34 = sub_216B32A7C(v33, (uint64_t)"igil32", (uint64_t)&v63);
  v62 = 30;
  v35 = sub_216B32A7C(v34, (uint64_t)"igil64", (uint64_t)&v62);
  v61 = 31;
  v36 = sub_216B32938(v35, (uint64_t)"air64", (uint64_t)&v61);
  v60 = 32;
  v37 = sub_216B32858(v36, "amdil64", (uint64_t)&v60);
  v59 = 33;
  v38 = sub_216B32A7C(v37, (uint64_t)"gpu_32", (uint64_t)&v59);
  v58 = 34;
  v39 = sub_216B32A7C(v38, (uint64_t)"gpu_64", (uint64_t)&v58);
  v57 = 35;
  v40 = sub_216B32A18(v39, "le32", (uint64_t)&v57);
  v56 = 36;
  v41 = sub_216B32938(v40, (uint64_t)"amdil", (uint64_t)&v56);
  v55 = 37;
  v42 = sub_216B32A18(v41, "spir", (uint64_t)&v55);
  v54 = 38;
  v43 = sub_216B32A7C(v42, (uint64_t)"spir64", (uint64_t)&v54);
  v53 = 39;
  v44 = sub_216B32858(v43, "kalimba", (uint64_t)&v53);
  v52 = 15;
  v45 = sub_216B32A18(v44, "agx0", (uint64_t)&v52);
  v51 = 16;
  v46 = sub_216B32A18(v45, "agx1", (uint64_t)&v51);
  v50 = 17;
  v47 = sub_216B32A18(v46, "agx2", (uint64_t)&v50);
  v49 = 0;
  return sub_216B32B50(v47, &v49);
}

uint64_t sub_216B330CC(uint64_t a1)
{
  _QWORD v2[2];
  uint64_t v3;

  sub_216B26CA0(v2, a1);
  sub_216B26A84(v2, 0x2Du, (uint64_t)&v3);
  return v3;
}

uint64_t sub_216B33104(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _QWORD v41[3];

  v2 = sub_216B32854(v41, a1, a2);
  v40 = 1;
  v3 = sub_216B34734((uint64_t)v2, (unsigned __int16 *)"v8", (uint64_t)&v40);
  v39 = 1;
  v4 = sub_216B347A8(v3, (unsigned __int16 *)"v8a", (uint64_t)&v39);
  v38 = 2;
  v5 = sub_216B34734(v4, (unsigned __int16 *)"v7", (uint64_t)&v38);
  v37 = 2;
  v6 = sub_216B347A8(v5, (unsigned __int16 *)"v7a", (uint64_t)&v37);
  v36 = 3;
  v7 = sub_216B34828(v6, "v7em", (uint64_t)&v36);
  v35 = 2;
  v8 = sub_216B347A8(v7, (unsigned __int16 *)"v7l", (uint64_t)&v35);
  v34 = 4;
  v9 = sub_216B347A8(v8, (unsigned __int16 *)"v7m", (uint64_t)&v34);
  v33 = 2;
  v10 = sub_216B347A8(v9, (unsigned __int16 *)"v7r", (uint64_t)&v33);
  v32 = 5;
  v11 = sub_216B347A8(v10, (unsigned __int16 *)"v7s", (uint64_t)&v32);
  v31 = 6;
  v12 = sub_216B347A8(v11, (unsigned __int16 *)"v7k", (uint64_t)&v31);
  v30 = 7;
  v13 = sub_216B34734(v12, (unsigned __int16 *)"v6", (uint64_t)&v30);
  v29 = 8;
  v14 = sub_216B347A8(v13, (unsigned __int16 *)"v6m", (uint64_t)&v29);
  v28 = 9;
  v15 = sub_216B34828(v14, "v6t2", (uint64_t)&v28);
  v27 = 10;
  v16 = sub_216B34734(v15, (unsigned __int16 *)"v5", (uint64_t)&v27);
  v26 = 10;
  v17 = sub_216B347A8(v16, (unsigned __int16 *)"v5e", (uint64_t)&v26);
  v25 = 10;
  v18 = sub_216B347A8(v17, (unsigned __int16 *)"v5t", (uint64_t)&v25);
  v24 = 11;
  v19 = sub_216B34828(v18, "v5te", (uint64_t)&v24);
  v23 = 12;
  v20 = sub_216B347A8(v19, (unsigned __int16 *)"v4t", (uint64_t)&v23);
  v22 = 0;
  return sub_216B32B50(v20, &v22);
}

uint64_t sub_216B332D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _QWORD v27[3];

  v2 = sub_216B32854(v27, a1, a2);
  v26 = 1;
  v3 = sub_216B32938((uint64_t)v2, (uint64_t)"apple", (uint64_t)&v26);
  v25 = 2;
  v4 = sub_216B348A8(v3, (unsigned __int16 *)"pc", (uint64_t)&v25);
  v24 = 3;
  v5 = sub_216B32A18(v4, "scei", (uint64_t)&v24);
  v23 = 4;
  v6 = sub_216B329A8(v5, (unsigned __int16 *)"bgp", (uint64_t)&v23);
  v22 = 5;
  v7 = sub_216B329A8(v6, (unsigned __int16 *)"bgq", (uint64_t)&v22);
  v21 = 6;
  v8 = sub_216B329A8(v7, (unsigned __int16 *)"fsl", (uint64_t)&v21);
  v20 = 7;
  v9 = sub_216B329A8(v8, (unsigned __int16 *)"ibm", (uint64_t)&v20);
  v19 = 8;
  v10 = sub_216B329A8(v9, (unsigned __int16 *)"img", (uint64_t)&v19);
  v18 = 9;
  v11 = sub_216B329A8(v10, (unsigned __int16 *)"mti", (uint64_t)&v18);
  v17 = 10;
  v12 = sub_216B32A7C(v11, (uint64_t)"nvidia", (uint64_t)&v17);
  v16 = 11;
  v13 = sub_216B329A8(v12, (unsigned __int16 *)"csr", (uint64_t)&v16);
  v15 = 0;
  return sub_216B32B50(v13, &v15);
}

uint64_t sub_216B33414(uint64_t a1)
{
  _QWORD v2[2];
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  sub_216B26CA0(v2, a1);
  sub_216B26A84(v2, 0x2Du, (uint64_t)&v3);
  v5 = v4;
  sub_216B26A84(&v5, 0x2Du, (uint64_t)&v3);
  return v3;
}

uint64_t sub_216B33464(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  _QWORD v51[3];

  v2 = sub_216B32854(v51, a1, a2);
  v50 = 1;
  v3 = sub_216B34438((uint64_t)v2, (uint64_t)"darwin", (uint64_t)&v50);
  v49 = 2;
  v4 = sub_216B3490C(v3, (uint64_t)"dragonfly", (uint64_t)&v49);
  v48 = 3;
  v5 = sub_216B3497C(v4, "freebsd", (uint64_t)&v48);
  v47 = 4;
  v6 = sub_216B349EC(v5, (unsigned __int16 *)"ios", (uint64_t)&v47);
  v46 = 5;
  v7 = sub_216B344A8(v6, "kfreebsd", (uint64_t)&v46);
  v45 = 6;
  v8 = sub_216B34A5C(v7, (uint64_t)"linux", (uint64_t)&v45);
  v44 = 7;
  v9 = sub_216B349EC(v8, (unsigned __int16 *)"lv2", (uint64_t)&v44);
  v43 = 8;
  v10 = sub_216B34438(v9, (uint64_t)"macosx", (uint64_t)&v43);
  v42 = 9;
  v11 = sub_216B34438(v10, (uint64_t)"netbsd", (uint64_t)&v42);
  v41 = 10;
  v12 = sub_216B3497C(v11, "openbsd", (uint64_t)&v41);
  v40 = 11;
  v13 = sub_216B3497C(v12, "solaris", (uint64_t)&v40);
  v39 = 12;
  v14 = sub_216B34A5C(v13, (uint64_t)"win32", (uint64_t)&v39);
  v38 = 12;
  v15 = sub_216B3497C(v14, "windows", (uint64_t)&v38);
  v37 = 13;
  v16 = sub_216B34A5C(v15, (uint64_t)"haiku", (uint64_t)&v37);
  v36 = 14;
  v17 = sub_216B34A5C(v16, (uint64_t)"minix", (uint64_t)&v36);
  v35 = 15;
  v18 = sub_216B34A5C(v17, (uint64_t)"rtems", (uint64_t)&v35);
  v34 = 16;
  v19 = sub_216B343D4(v18, "nacl", (uint64_t)&v34);
  v33 = 17;
  v20 = sub_216B349EC(v19, (unsigned __int16 *)"cnk", (uint64_t)&v33);
  v32 = 18;
  v21 = sub_216B34438(v20, (uint64_t)"bitrig", (uint64_t)&v32);
  v31 = 19;
  v22 = sub_216B349EC(v21, (unsigned __int16 *)"aix", (uint64_t)&v31);
  v30 = 20;
  v23 = sub_216B343D4(v22, "cuda", (uint64_t)&v30);
  v29 = 21;
  v24 = sub_216B343D4(v23, "nvcl", (uint64_t)&v29);
  v28 = 22;
  v25 = sub_216B343D4(v24, "tvos", (uint64_t)&v28);
  v27 = 0;
  return sub_216B32B50(v25, &v27);
}

uint64_t sub_216B336C4(uint64_t a1)
{
  _QWORD v2[2];
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  sub_216B26CA0(v2, a1);
  sub_216B26A84(v2, 0x2Du, (uint64_t)&v3);
  v5 = v4;
  sub_216B26A84(&v5, 0x2Du, (uint64_t)&v3);
  v5 = v4;
  sub_216B26A84(&v5, 0x2Du, (uint64_t)&v3);
  return v3;
}

uint64_t sub_216B3372C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _QWORD v27[3];

  v2 = sub_216B32854(v27, a1, a2);
  v26 = 7;
  v3 = sub_216B34438((uint64_t)v2, (uint64_t)"eabihf", (uint64_t)&v26);
  v25 = 6;
  v4 = sub_216B343D4(v3, "eabi", (uint64_t)&v25);
  v24 = 3;
  v5 = sub_216B3490C(v4, (uint64_t)"gnueabihf", (uint64_t)&v24);
  v23 = 2;
  v6 = sub_216B3497C(v5, "gnueabi", (uint64_t)&v23);
  v22 = 4;
  v7 = sub_216B34438(v6, (uint64_t)"gnux32", (uint64_t)&v22);
  v21 = 5;
  v8 = sub_216B34438(v7, (uint64_t)"code16", (uint64_t)&v21);
  v20 = 1;
  v9 = sub_216B349EC(v8, (unsigned __int16 *)"gnu", (uint64_t)&v20);
  v19 = 8;
  v10 = sub_216B3497C(v9, "android", (uint64_t)&v19);
  v18 = 9;
  v11 = sub_216B343D4(v10, "msvc", (uint64_t)&v18);
  v17 = 10;
  v12 = sub_216B3497C(v11, "itanium", (uint64_t)&v17);
  v16 = 11;
  v13 = sub_216B34438(v12, (uint64_t)"cygnus", (uint64_t)&v16);
  v15 = 0;
  return sub_216B32B50(v13, &v15);
}

uint64_t sub_216B33868(uint64_t a1)
{
  _QWORD v2[2];
  _BYTE v3[16];
  __int128 v4;
  __int128 v5;

  sub_216B26CA0(v2, a1);
  sub_216B26A84(v2, 0x2Du, (uint64_t)v3);
  v5 = v4;
  sub_216B26A84(&v5, 0x2Du, (uint64_t)v3);
  v5 = v4;
  sub_216B26A84(&v5, 0x2Du, (uint64_t)v3);
  return v4;
}

uint64_t sub_216B338D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  _QWORD v10[3];

  sub_216B32854(v10, a1, a2);
  v9 = 1;
  v2 = sub_216B34828((uint64_t)v10, "coff", (uint64_t)&v9);
  v8 = 2;
  v3 = sub_216B347A8(v2, (unsigned __int16 *)"elf", (uint64_t)&v8);
  v7 = 3;
  v4 = sub_216B34ACC(v3, (uint64_t)"macho", (uint64_t)&v7);
  v6 = 0;
  return sub_216B32B50(v4, &v6);
}

uint64_t sub_216B33950(uint64_t a1)
{
  if (sub_216B34B4C(a1))
    return 3;
  if (sub_216B34B84(a1))
    return 1;
  return 2;
}

uint64_t sub_216B33994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  _OWORD *v21;
  std::string *v22;
  _BOOL4 v23;
  unsigned int v24;
  _OWORD *v25;
  char *v26;
  _OWORD *v27;
  _OWORD *v28;
  int v29;
  _BOOL4 v31;
  char *v32;
  _OWORD *v33;
  int v34;
  unsigned int i;
  uint64_t *v36;
  std::string *v38;
  _BOOL4 v39;
  __int128 v40;
  _BYTE v41[4];
  const void *v42[2];
  const void *v43[2];
  const void *v44[2];
  __int128 v45;
  const void *v46[13];

  v46[11] = *(const void **)MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v45 = a1;
  *((_QWORD *)&v45 + 1) = a2;
  sub_216B2907C(v46);
  sub_216B1E678((int)v44, "-");
  sub_216B320F8(&v45, (uint64_t)v46, v44[0], (size_t)v44[1], -1, 1);
  if (sub_216B2BA30((uint64_t)v46))
  {
    v4 = (uint64_t *)sub_216B2B9AC((uint64_t)v46, 0);
    v5 = sub_216B32C00(*v4, v4[1]);
  }
  else
  {
    v5 = 0;
  }
  if ((unint64_t)sub_216B2BA30((uint64_t)v46) < 2)
  {
    v7 = 0;
  }
  else
  {
    v6 = (uint64_t *)sub_216B2B9AC((uint64_t)v46, 1u);
    v7 = sub_216B332D8(*v6, v6[1]);
  }
  if ((unint64_t)sub_216B2BA30((uint64_t)v46) < 3)
  {
    v9 = 0;
    v39 = 0;
    v12 = 0;
  }
  else
  {
    v8 = (uint64_t *)sub_216B2B9AC((uint64_t)v46, 2u);
    v9 = sub_216B33464(*v8, v8[1]);
    v10 = sub_216B2B9AC((uint64_t)v46, 2u);
    sub_216B1E678((int)v43, "cygwin");
    v39 = sub_216B2A2EC(v10, v43[0], (size_t)v43[1]);
    v11 = sub_216B2B9AC((uint64_t)v46, 2u);
    sub_216B1E678((int)v42, "mingw");
    v12 = sub_216B2A2EC(v11, v42[0], (size_t)v42[1]);
  }
  if ((unint64_t)sub_216B2BA30((uint64_t)v46) < 4)
  {
    v14 = 0;
  }
  else
  {
    v13 = (uint64_t *)sub_216B2B9AC((uint64_t)v46, 3u);
    v14 = sub_216B3372C(*v13, v13[1]);
  }
  if ((unint64_t)sub_216B2BA30((uint64_t)v46) < 5)
  {
    v16 = 0;
  }
  else
  {
    v15 = (uint64_t *)sub_216B2B9AC((uint64_t)v46, 4u);
    v16 = sub_216B338D0(*v15, v15[1]);
  }
  v38 = a3;
  v41[0] = v5 != 0;
  v41[1] = v7 != 0;
  v41[2] = v9 != 0;
  v41[3] = v14 != 0;
  if (sub_216B34088())
  {
    v17 = 0;
    v18 = 0;
    do
    {
      if (!v41[v17] && sub_216B2BA30((uint64_t)v46))
      {
        v19 = 0;
        v20 = 0;
        do
        {
          if (sub_216B34088() <= v19 || !v41[v19])
          {
            v40 = *(_OWORD *)sub_216B2B9AC((uint64_t)v46, v20);
            __asm { BR              X9 }
          }
          v19 = ++v20;
        }
        while (sub_216B2BA30((uint64_t)v46) != v20);
      }
      v17 = ++v18;
    }
    while (sub_216B34088() != v18);
  }
  if (v9 == 12)
  {
    sub_216B340AC(v46, 4u);
    sub_216B1E678((int)&v40, "windows");
    v21 = (_OWORD *)sub_216B2B9AC((uint64_t)v46, 2u);
    *v21 = v40;
    v22 = v38;
    v23 = v39;
    if (v14)
      goto LABEL_38;
    if (v16 <= 1)
    {
      sub_216B1E678((int)&v40, "msvc");
      v24 = 3;
LABEL_47:
      v33 = (_OWORD *)sub_216B2B9AC((uint64_t)v46, v24);
      *v33 = v40;
      goto LABEL_48;
    }
    v26 = (char *)sub_216B34180(v16);
  }
  else
  {
    v22 = v38;
    if (v12)
    {
      sub_216B340AC(v46, 4u);
      sub_216B1E678((int)&v40, "windows");
      v25 = (_OWORD *)sub_216B2B9AC((uint64_t)v46, 2u);
      *v25 = v40;
      v26 = "gnu";
    }
    else
    {
      v23 = v39;
      if (!v39)
        goto LABEL_38;
      sub_216B340AC(v46, 4u);
      sub_216B1E678((int)&v40, "windows");
      v27 = (_OWORD *)sub_216B2B9AC((uint64_t)v46, 2u);
      *v27 = v40;
      v26 = "cygnus";
    }
  }
  sub_216B1E678((int)&v40, v26);
  v28 = (_OWORD *)sub_216B2B9AC((uint64_t)v46, 3u);
  *v28 = v40;
  v23 = v39;
LABEL_38:
  v29 = v12 || v23;
  v31 = v9 == 12 && v14 != 0;
  if (((v29 | v31) & 1) != 0 && v16 >= 2)
  {
    sub_216B340AC(v46, 5u);
    v32 = (char *)sub_216B34180(v16);
    sub_216B1E678((int)&v40, v32);
    v24 = 4;
    goto LABEL_47;
  }
LABEL_48:
  sub_216B25034(v22);
  v34 = sub_216B2BA30((uint64_t)v46);
  if (v34)
  {
    for (i = 0; i != v34; ++i)
    {
      if (i)
        sub_216B26B1C(v22, 45);
      v36 = (uint64_t *)sub_216B2B9AC((uint64_t)v46, i);
      sub_216B26B40(v22, *v36, v36[1]);
    }
  }
  return sub_216B1FF6C(v46);
}

uint64_t sub_216B34088()
{
  return 4;
}

__n128 sub_216B34090(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a1 = *a2;
  *a2 = result;
  return result;
}

unint64_t sub_216B340AC(const void **a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;

  v3 = a2;
  if (sub_216B2BA30((uint64_t)a1) > (unint64_t)a2)
  {
    v4 = sub_216B1E600((uint64_t)a1) + 16 * v3;
    v5 = sub_216B1E67C((uint64_t)a1);
    nullsub_1(v4, v5);
LABEL_3:
    v6 = sub_216B1E600((uint64_t)a1) + 16 * v3;
    return sub_216B203A4((uint64_t)a1, v6);
  }
  result = sub_216B2BA30((uint64_t)a1);
  if (result < v3)
  {
    if (sub_216B2BB68((uint64_t)a1) < v3)
      sub_216B26914(a1, v3);
    v8 = (_QWORD *)sub_216B1E67C((uint64_t)a1);
    v9 = sub_216B1E600((uint64_t)a1) + 16 * v3;
    while (v8 != (_QWORD *)v9)
    {
      sub_216B26D14(v8);
      v8 += 2;
    }
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_216B34180(int a1)
{
  return *((_QWORD *)&off_24D5EF958 + a1);
}

uint64_t sub_216B34190(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_216B34198(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

const void **sub_216B341A4(const void **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (char *)sub_216B1E600((uint64_t)v7);
  v5 = (char *)sub_216B1E608(v7);
  sub_216B34D4C(a1, v4, v5);
  return a1;
}

uint64_t sub_216B341F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B34D08(a3, a1, a2);
}

uint64_t sub_216B34208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    v2 = a2;
  return *(_QWORD *)v2;
}

uint64_t sub_216B3421C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = sub_216B32A18(a1, a2, a6);
  v11 = sub_216B32A18(v10, a3, a6);
  v12 = sub_216B32A18(v11, a4, a6);
  return sub_216B32A18(v12, a5, a6);
}

uint64_t sub_216B34274(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_216B32A18(a1, a2, a5);
  v9 = sub_216B32A18(v8, a3, a5);
  return sub_216B32A18(v9, a4, a5);
}

uint64_t sub_216B342BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_216B32938(a1, a2, a5);
  v9 = sub_216B32A7C(v8, a3, a5);
  return sub_216B32858(v9, a4, a5);
}

uint64_t sub_216B34304(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_216B345E4(a1, a2, a4);
  return sub_216B329A8(v6, a3, a4);
}

uint64_t sub_216B34334(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 11)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && *(_QWORD *)((char *)a2 + 3) == *(_QWORD *)((char *)v6 + 3))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B343A4(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_216B329A8(a1, a2, a4);
  return sub_216B32A7C(v6, a3, a4);
}

uint64_t sub_216B343D4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 4 && *a2 == *(_DWORD *)sub_216B1E600(a1))
    *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_216B34438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 6)
  {
    v6 = sub_216B1E600(a1);
    if (*(_DWORD *)a2 == *(_DWORD *)v6 && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(v6 + 4))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B344A8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 8 && *a2 == *(_QWORD *)sub_216B1E600(a1))
    *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_216B3450C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_216B32A18(a1, a2, a5);
  v9 = sub_216B32A7C(v8, a3, a5);
  return sub_216B34654(v9, a4, a5);
}

uint64_t sub_216B34554(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_216B32A7C(a1, a2, a4);
  return sub_216B346C4(v6, a3, a4);
}

uint64_t sub_216B34584(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_216B32A7C(a1, a2, a4);
  return sub_216B32AEC(v6, a3, a4);
}

uint64_t sub_216B345B4(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_216B32858(a1, a2, a4);
  return sub_216B32858(v6, a3, a4);
}

uint64_t sub_216B345E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 9)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(unsigned __int8 *)(a2 + 8) == (unint64_t)*(unsigned __int8 *)(v6 + 8))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B34654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 12)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6 && *(_DWORD *)(a2 + 8) == (unint64_t)*(unsigned int *)(v6 + 8))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B346C4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 14)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && *(_QWORD *)((char *)a2 + 6) == *(_QWORD *)((char *)v6 + 6))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B34734(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 2)
  {
    v6 = sub_216B1E600(a1);
    if (*a2 == *(unsigned __int16 *)(v6 + sub_216B1E67C(a1) - 2))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B347A8(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 3)
  {
    v6 = sub_216B1E600(a1);
    v7 = sub_216B1E67C(a1);
    if (*a2 == *(unsigned __int16 *)(v6 + v7 - 3) && *((unsigned __int8 *)a2 + 2) == *(unsigned __int8 *)(v6 + v7 - 1))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B34828(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 4)
  {
    v6 = sub_216B1E600(a1);
    if (*a2 == *(_DWORD *)(v6 + sub_216B1E67C(a1) - 4))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

_QWORD *sub_216B3489C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  result[2] = 0;
  return result;
}

uint64_t sub_216B348A8(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 2 && *a2 == *(unsigned __int16 *)sub_216B1E600(a1))
    *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_216B3490C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 9)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(unsigned __int8 *)(a2 + 8) == (unint64_t)*(unsigned __int8 *)(v6 + 8))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B3497C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 7)
  {
    v6 = (_DWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && *(_DWORD *)((char *)a2 + 3) == *(_DWORD *)((char *)v6 + 3))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B349EC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v6;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 3)
  {
    v6 = (unsigned __int16 *)sub_216B1E600(a1);
    if (*a2 == *v6 && *((unsigned __int8 *)a2 + 2) == *((unsigned __int8 *)v6 + 2))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B34A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 5)
  {
    v6 = sub_216B1E600(a1);
    if (*(_DWORD *)a2 == *(_DWORD *)v6 && *(unsigned __int8 *)(a2 + 4) == *(unsigned __int8 *)(v6 + 4))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B34ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 16) && (unint64_t)sub_216B1E67C(a1) >= 5)
  {
    v6 = sub_216B1E600(a1);
    v7 = sub_216B1E67C(a1);
    if (*(_DWORD *)a2 == *(_DWORD *)(v6 + v7 - 5) && *(unsigned __int8 *)(a2 + 4) == *(unsigned __int8 *)(v6 + v7 - 1))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

BOOL sub_216B34B4C(uint64_t a1)
{
  return (sub_216B34BC0(a1) & 1) != 0 || sub_216B34BF8(a1);
}

BOOL sub_216B34B84(uint64_t a1)
{
  return sub_216B34190(a1) == 12 || sub_216B34C50(a1);
}

uint64_t sub_216B34BC0(uint64_t a1)
{
  uint64_t result;

  result = sub_216B34190(a1);
  if ((_DWORD)result != 1)
    return sub_216B34190(a1) == 8;
  return result;
}

BOOL sub_216B34BF8(uint64_t a1)
{
  return sub_216B34190(a1) == 4 || sub_216B34C34(a1);
}

BOOL sub_216B34C34(uint64_t a1)
{
  return sub_216B34190(a1) == 22;
}

BOOL sub_216B34C50(uint64_t a1)
{
  return sub_216B34C88(a1) || sub_216B34CC8(a1);
}

BOOL sub_216B34C88(uint64_t a1)
{
  return sub_216B34190(a1) == 12 && sub_216B27CA8(a1) == 11;
}

BOOL sub_216B34CC8(uint64_t a1)
{
  return sub_216B34190(a1) == 12 && sub_216B27CA8(a1) == 1;
}

uint64_t sub_216B34D0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(result + 16) = 773;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  return result;
}

__n128 sub_216B34D1C(std::string *a1, uint64_t a2)
{
  std::string *v3;
  __n128 result;

  v3 = std::string::basic_string(a1, (const std::string *)a2);
  result = *(__n128 *)(a2 + 24);
  v3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  *(__n128 *)&v3[1].__r_.__value_.__l.__data_ = result;
  return result;
}

std::string *sub_216B34D50@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  _BYTE v8[280];

  if (*(_BYTE *)(a1 + 16) == 4 && *(_BYTE *)(a1 + 17) == 1)
    return std::string::basic_string(a2, *(const std::string **)a1);
  sub_216B275E4(v8);
  sub_216B34DE0((uint64_t *)a1, (uint64_t)v8);
  v7[0] = v5;
  v7[1] = v6;
  sub_216B25018(v7, (uint64_t)a2);
  return (std::string *)sub_216B2489C(v8);
}

void sub_216B34DE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (sub_216B34EE8((uint64_t)a1))
  {
    sub_216B34F34((uint64_t)a1);
  }
  else
  {
    sub_216B34E50(a1);
    v4 = sub_216B262E0(a2);
    v5 = sub_216B1FF14(a2);
    sub_216B1E684(&v6, v4, v5);
  }
}

uint64_t sub_216B34E50(uint64_t *a1)
{
  void *v3[6];

  sub_216B40D84(v3);
  sub_216B34E90(a1, v3);
  return sub_216B40DB8(v3);
}

uint64_t sub_216B34E90(uint64_t *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = sub_216B2A390((uint64_t)a1);
  sub_216B35078(v5, a2, v4, v5);
  v6 = a1[1];
  v7 = sub_216B2A76C((uint64_t)a1);
  return sub_216B35078(v7, a2, v6, v7);
}

uint64_t sub_216B34EE8(uint64_t a1)
{
  unsigned int v2;

  if (sub_216B2A76C(a1) != 1)
    return 0;
  v2 = sub_216B2A390(a1);
  if (v2 <= 5)
    return (0x3Au >> v2) & 1;
  else
    return 0;
}

void sub_216B34F34(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_216B34F68 + 4 * byte_216C1133C[sub_216B2A390(a1) - 1];
  __asm { BR              X10 }
}

uint64_t sub_216B34F68()
{
  uint64_t v1;

  sub_216B26D14(&v1);
  return v1;
}

uint64_t sub_216B34FB8(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;

  if (!sub_216B2A71C((uint64_t)a1))
    goto LABEL_5;
  v4 = sub_216B2A390((uint64_t)a1);
  if (v4 == 4)
  {
    v7 = *a1;
    v5 = sub_216B26084(*a1);
    v6 = sub_216B25B78(v7, v8);
    goto LABEL_7;
  }
  if (v4 != 3)
  {
LABEL_5:
    sub_216B34E50(a1);
    v10 = 0;
    sub_216B1FBBC(a2, &v10);
    sub_216B295C4(a2);
    v5 = sub_216B262E0(a2);
    v6 = sub_216B1FF14(a2);
LABEL_7:
    sub_216B1E684(&v11, v5, v6);
    return v11;
  }
  sub_216B1E678((int)&v11, (char *)*a1);
  return v11;
}

uint64_t sub_216B35078(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  uint64_t result;

  switch(a4)
  {
    case 2:
      result = sub_216B34E90(a3);
      break;
    case 3:
      result = (uint64_t)sub_216B248A0((uint64_t)a2, (char *)a3);
      break;
    case 4:
      result = (uint64_t)sub_216B2E0B0(a2, a3);
      break;
    case 5:
      result = (uint64_t)sub_216B248E0((uint64_t)a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
      break;
    case 6:
      result = sub_216B251FC((uint64_t)a2, a3);
      break;
    case 7:
      result = (uint64_t)sub_216B248D8(a2, a3);
      break;
    case 8:
      result = (uint64_t)sub_216B2E0F8(a2, a3);
      break;
    case 9:
      result = (uint64_t)sub_216B3FF24(a2, *(_QWORD *)a3);
      break;
    case 10:
      result = (uint64_t)sub_216B40100(a2, *(_QWORD *)a3);
      break;
    case 11:
      result = (uint64_t)sub_216B4013C(a2, *(_QWORD *)a3);
      break;
    case 12:
      result = (uint64_t)sub_216B40140(a2, *(_QWORD *)a3);
      break;
    case 13:
      result = (uint64_t)sub_216B4017C(a2, *(_QWORD *)a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_216B35148(unsigned int a1)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD v6[2];

  v2 = (_QWORD **)off_254E4AA68();
  v3 = *v2;
  if (!*v2)
  {
    v4 = v2;
    v3 = (_QWORD *)sub_216B1D1D4(16);
    sub_216B351E0(v6, (uint64_t)&unk_216C11350);
    sub_216B1E684(v3, v6[0], v6[1]);
    *v4 = v3;
  }
  if (HIWORD(a1) > 0x10u)
    return 0;
  else
    return sub_216B351E4(v3, a1) ^ 1;
}

uint64_t sub_216B351E4(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v6 = a2;
  v3 = sub_216B1E600((uint64_t)a1);
  v4 = sub_216B35430(a1);
  return sub_216B3542C(v3, v4, &v6);
}

uint64_t sub_216B3522C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  _QWORD v16[2];

  v16[0] = a1;
  v16[1] = a2;
  v2 = sub_216B1E67C((uint64_t)v16);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = 0;
  LODWORD(v5) = 0;
  while (1)
  {
    v6 = sub_216B26288(v16, v4);
    v7 = sub_216B2546C(v6);
    if (!v7)
      return 4294967294;
    v8 = v7;
    v9 = v4 + v7;
    if (v9 > sub_216B1E67C((uint64_t)v16))
      return 4294967294;
    v14 = 0;
    v10 = sub_216B1E600((uint64_t)v16);
    v13 = &v15;
    v14 = (unsigned __int8 *)(v10 + v4);
    if (sub_216B2586C(&v14, (unsigned __int8 *)(v10 + v4 + v8), &v13, (unint64_t)v16, 0))
      return 4294967294;
    v11 = sub_216B35324(v15);
    if (v11 < 0)
      break;
    v5 = (v11 + v5);
    v4 = v9;
    if (v9 >= v3)
      return v5;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_216B35324(unsigned int a1)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[2];
  _QWORD v10[2];

  if (!sub_216B35148(a1))
    return 0xFFFFFFFFLL;
  v2 = (_QWORD **)off_254E4AA80();
  v3 = *v2;
  if (!*v2)
  {
    v4 = v2;
    v3 = (_QWORD *)sub_216B1D1D4(16);
    sub_216B355E4(v10, (uint64_t)&unk_216C12470);
    sub_216B1E684(v3, v10[0], v10[1]);
    *v4 = v3;
  }
  if ((sub_216B351E4(v3, a1) & 1) != 0)
    return 0;
  v6 = (_QWORD **)off_254E4AA98();
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (_QWORD *)sub_216B1D1D4(16);
    sub_216B355E8(v9, (uint64_t)&unk_216C12B40);
    sub_216B1E684(v7, v9[0], v9[1]);
    *v8 = v7;
  }
  if (sub_216B351E4(v7, a1))
    return 2;
  else
    return 1;
}

_QWORD *sub_216B35420(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 548;
  return result;
}

uint64_t sub_216B35430(_QWORD *a1)
{
  return *a1 + 8 * a1[1];
}

BOOL sub_216B3543C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  char v7;

  v5 = (_QWORD *)sub_216B35490(a1, a2, (uint64_t)a3, (uint64_t)&v7);
  return v5 != (_QWORD *)a2 && !sub_216B354B4((uint64_t)&v7, a3, v5);
}

uint64_t sub_216B35490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = 0;
  return sub_216B354C0(a1, a2, a3, a4, (uint64_t)&v5);
}

BOOL sub_216B354B4(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  return sub_216B355D8(*a2, *a3);
}

uint64_t sub_216B354C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;

  v9 = sub_216B35568();
  if (v9)
  {
    v10 = v9;
    do
    {
      v11 = sub_216B3556C(v10);
      v15 = a1;
      sub_216B35574(&v15, v11);
      v12 = sub_216B3557C(a5, v15);
      v13 = sub_216B35578(a4, v12, a3);
      if (v13)
        v10 += ~v11;
      else
        v10 = v11;
      if (v13)
        a1 = v15 + 8;
    }
    while (v10);
  }
  return a1;
}

unint64_t sub_216B3556C(unint64_t a1)
{
  return a1 >> 1;
}

_QWORD *sub_216B35580(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B355AC(a1, v3);
}

_QWORD *sub_216B355AC(_QWORD *result, uint64_t a2)
{
  *result += 8 * a2;
  return result;
}

BOOL sub_216B355BC(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  return sub_216B355C8(*a2, *a3);
}

BOOL sub_216B355C8(uint64_t a1, unsigned int a2)
{
  return HIDWORD(a1) < a2;
}

BOOL sub_216B355D8(unsigned int a1, unsigned int a2)
{
  return a2 > a1;
}

_QWORD *sub_216B355EC(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 218;
  return result;
}

_QWORD *sub_216B355F8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 15;
  return result;
}

uint64_t sub_216B35628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;

  v4 = sub_216B35A68(a1);
  v5 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 32);
  if (!sub_216B35B54(a1 + 56))
    sub_216B36140(a1 + 56);
  result = sub_216B35B54(a1 + 56);
  if ((_DWORD)result)
    return sub_216B36168((_QWORD *)(a1 + 96));
  return result;
}

uint64_t sub_216B35694(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char v4;
  char *v5;
  char *v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  v16[0] = a1;
  v16[1] = a2;
  v2 = (char *)sub_216B1E600((uint64_t)v16);
  v3 = sub_216B1E608(v16);
  v4 = *v2;
  if (*v2 < 0)
  {
    v5 = v2 + 1;
    if (v2 + 1 != (char *)v3
      && (v4 & 0xE0) == 0xC0
      && (*v5 & 0xC0) == 0x80
      && (HIDWORD(v14) = *v5 & 0x3F | ((v4 & 0x1F) << 6), HIDWORD(v14) >= 0x80))
    {
      v8 = 2;
    }
    else
    {
      v6 = v2 + 2;
      if (v2 + 2 != (char *)v3
        && (v4 & 0xF0) == 0xE0
        && (v7 = *v5, (*v5 & 0xC0) == 0x80)
        && (*v6 & 0xC0) == 0x80
        && (HIDWORD(v14) = ((v4 & 0xF) << 12) | ((v7 & 0x3F) << 6) | *v6 & 0x3F, HIDWORD(v14) >= 0x800)
        && (((v4 & 0xF) << 12) | ((v7 & 0x3F) << 6)) - 57344 <= 0xFFFFF7FF)
      {
        v8 = 3;
      }
      else
      {
        if (v2 + 3 == (char *)v3
          || (v4 & 0xF8) != 0xF0
          || (v9 = *v5, (v9 & 0xC0) != 0x80)
          || (v10 = *v6, (v10 & 0xC0) != 0x80)
          || (v11 = v2[3], (v11 & 0xC0) != 0x80)
          || (v12 = ((v4 & 7) << 18) | ((v9 & 0x3F) << 12),
              HIDWORD(v14) = v11 & 0x3F | ((v10 & 0x3F) << 6) | v12,
              (v12 - 1114112) < 0xFFF00000))
        {
          v14 = 0;
          v15 = sub_216B3A19C((uint64_t)&v14 + 4, (uint64_t)&v14);
          sub_216B3A1C8(&v17, &v15);
          return v17;
        }
        v8 = 4;
      }
    }
    LODWORD(v14) = v8;
    v15 = sub_216B3A19C((uint64_t)&v14 + 4, (uint64_t)&v14);
    sub_216B3A1C8(&v17, &v15);
    return v17;
  }
  HIDWORD(v14) = 1;
  v15 = sub_216B3A16C((uint64_t)v2, (uint64_t)&v14 + 4);
  sub_216B3A198(&v17, (char *)&v15);
  return v17;
}

uint64_t sub_216B35868(uint64_t result, uint64_t a2)
{
  char *v3;
  char v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (result > 0x7F)
  {
    if (result > 0x7FF)
    {
      if (WORD1(result))
      {
        if (WORD1(result) > 0x10u)
          return result;
        v7 = (result >> 12) & 0x3F | 0x80;
        v8 = (result >> 6) & 0x3F | 0x80;
        v9 = result & 0x3F | 0x80;
        v13 = (result >> 18) | 0xF0;
        sub_216B1FBBC(a2, &v13);
        v12 = v7;
        sub_216B1FBBC(a2, &v12);
        v11 = v8;
        sub_216B1FBBC(a2, &v11);
        v10 = v9;
        v3 = &v10;
      }
      else
      {
        v5 = (result >> 6) & 0x3F | 0x80;
        v6 = result & 0x3F | 0x80;
        v16 = (result >> 12) | 0xE0;
        sub_216B1FBBC(a2, &v16);
        v15 = v5;
        sub_216B1FBBC(a2, &v15);
        v14 = v6;
        v3 = &v14;
      }
    }
    else
    {
      v4 = result & 0x3F | 0x80;
      v18 = (result >> 6) | 0xC0;
      sub_216B1FBBC(a2, &v18);
      v17 = v4;
      v3 = &v17;
    }
  }
  else
  {
    v19 = result;
    v3 = &v19;
  }
  return sub_216B1FBBC(a2, v3);
}

uint64_t sub_216B35990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t *v8;
  unint64_t v10;
  uint64_t v11[2];

  *(_QWORD *)a1 = a4;
  *(_OWORD *)(a1 + 32) = xmmword_216C12C30;
  *(_WORD *)(a1 + 48) = 257;
  *(_BYTE *)(a1 + 50) = 0;
  sub_216B35A5C(a1 + 56);
  sub_216B35A60(a1 + 240);
  sub_216B35A64(a1 + 280);
  sub_216B1E678((int)v11, "YAML");
  v7 = sub_216B271E8(a2, a3, v11[0], v11[1], 1);
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(uint64_t **)a1;
  sub_216B2D410(&v10);
  sub_216B2CFE4(v8, v7, v10);
  *(_QWORD *)(a1 + 16) = sub_216B1E67C(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 24) = sub_216B2037C(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_216B35A68(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[5];

  v2 = 0;
  v3 = a1 + 56;
  v4 = a1 + 280;
  while (1)
  {
    v5 = sub_216B35B54(v3);
    if (((v2 & 1) != 0 || v5) && (sub_216B35B88(a1) & 1) == 0)
      break;
    sub_216B36044(a1);
    sub_216B36114(v12);
    v6 = sub_216B3603C(v3);
    sub_216B20C64(&v11, v6);
    v12[0] = v11;
    v7 = (_QWORD *)sub_216B1E600(v4);
    v8 = (_QWORD *)sub_216B1E67C(v4);
    v9 = sub_216B36118(v7, v8, v12);
    v2 = 1;
    if (v9 == sub_216B1E67C(v4))
      return sub_216B3603C(v3);
  }
  sub_216B35FBC(v3);
  sub_216B36038(v12);
  sub_216B36008(v3, (uint64_t)v12);
  return sub_216B3603C(v3);
}

BOOL sub_216B35B54(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 176);
  return !v1 || v1 == sub_216B39FFC(a1);
}

uint64_t sub_216B35B88(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _BYTE v9[24];
  uint64_t v10[2];
  _QWORD v11[2];

  if (*(_BYTE *)(a1 + 48))
  {
    sub_216B36A98(a1);
    return 1;
  }
  sub_216B369E0(a1);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24))
  {
    sub_216B36DFC(a1);
    return 1;
  }
  sub_216B36044(a1);
  sub_216B3683C(a1, *(_DWORD *)(a1 + 36));
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *v4;
  if (*(_DWORD *)(a1 + 36))
    goto LABEL_7;
  if (v5 == 37)
    return sub_216B36E90(a1);
  v6 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)(v4 + 4) > v6)
  {
LABEL_7:
    if (*v4 <= 0x39u)
    {
      switch(*v4)
      {
        case '!':
          return sub_216B37DD0(a1);
        case '"':
          return sub_216B37660(a1, 1);
        case '&':
          return sub_216B37B60(a1, 0);
        case '\'':
          return sub_216B37660(a1, 0);
        case '*':
          return sub_216B37B60(a1, 1);
        case ',':
          goto LABEL_37;
        case '-':
          goto LABEL_50;
        default:
          goto LABEL_57;
      }
    }
  }
  else if (*v4 <= 0x39u)
  {
    switch(*v4)
    {
      case '!':
        return sub_216B37DD0(a1);
      case '"':
        return sub_216B37660(a1, 1);
      case '&':
        return sub_216B37B60(a1, 0);
      case '\'':
        return sub_216B37660(a1, 0);
      case '*':
        return sub_216B37B60(a1, 1);
      case ',':
LABEL_37:
        sub_216B37220(a1);
        return 1;
      case '-':
        if (v4[1] == 45 && v4[2] == 45 && (v4 + 3 == (unsigned __int8 *)v6 || sub_216B365F8(a1, v4 + 3)))
        {
          v2 = 1;
          sub_216B3702C(a1, 1);
          return v2;
        }
LABEL_50:
        if (!sub_216B365F8(a1, v4 + 1))
          goto LABEL_57;
        sub_216B37298(a1);
        break;
      case '.':
        if (v4[1] != 46 || v4[2] != 46 || v4 + 3 != (unsigned __int8 *)v6 && !sub_216B365F8(a1, v4 + 3))
          goto LABEL_57;
        sub_216B3702C(a1, 0);
        return 1;
      default:
        goto LABEL_57;
    }
    return 1;
  }
  if (*v4 <= 0x5Cu)
  {
    if (*v4 > 0x3Eu)
    {
      if (v5 == 63)
      {
        if (*(_DWORD *)(a1 + 44) || sub_216B365F8(a1, v4 + 1))
        {
          sub_216B37380(a1);
          return 1;
        }
      }
      else if (v5 == 91)
      {
        v2 = 1;
        sub_216B370B4(a1, 1);
        return v2;
      }
    }
    else
    {
      if (v5 != 58)
      {
        if (v5 != 62)
          goto LABEL_57;
        goto LABEL_32;
      }
      if (*(_DWORD *)(a1 + 44) || sub_216B365F8(a1, v4 + 1))
      {
        sub_216B3742C(a1);
        return 1;
      }
    }
LABEL_57:
    sub_216B1E684(v11, v4, 1);
    v7 = *(unsigned __int8 **)(a1 + 16);
    if ((sub_216B365F8(a1, v7) & 1) == 0)
    {
      if (sub_216B31D14(v11, v10[0], v10[1], 0) == -1)
        return sub_216B37890(a1);
      v7 = *(unsigned __int8 **)(a1 + 16);
    }
    v8 = *v7;
    if ((v8 != 45 || sub_216B365F8(a1, v7 + 1))
      && (*(_DWORD *)(a1 + 44)
       || v8 != 63 && v8 != 58
       || (sub_216B365F8(a1, v7 + 1) & 1) == 0
       && (v8 != 58
        || (unint64_t)(v7 + 2) >= *(_QWORD *)(a1 + 24)
        || v7[1] != 58
        || (sub_216B365F8(a1, v7 + 2) & 1) != 0)))
    {
      sub_216B25FA8((uint64_t)v9, "Unrecognized character while tokenizing.");
      sub_216B37EE8(a1, (uint64_t)v9);
      return 0;
    }
    return sub_216B37890(a1);
  }
  if (*v4 <= 0x7Bu)
  {
    if (v5 == 93)
    {
      v2 = 1;
      sub_216B3718C(a1, 1);
      return v2;
    }
    if (v5 == 123)
    {
      sub_216B370B4(a1, 0);
      return 1;
    }
    goto LABEL_57;
  }
  if (v5 != 124)
  {
    if (v5 == 125)
    {
      sub_216B3718C(a1, 0);
      return 1;
    }
    goto LABEL_57;
  }
LABEL_32:
  if (*(_DWORD *)(a1 + 44))
    goto LABEL_57;
  return sub_216B37CC4(a1);
}

uint64_t sub_216B35FBC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 176))
  {
    v1 = result;
    v2 = sub_216B375D4(result);
    v3 = sub_216B37340(v1);
    return sub_216B3AA80(v1, v2, v3);
  }
  return result;
}

uint64_t sub_216B36008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B37340(a1);
  return sub_216B369A8(a1, v4, a2);
}

uint64_t sub_216B3603C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176);
}

uint64_t sub_216B36044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a1 + 280;
  v3 = sub_216B1E600(a1 + 280);
  for (result = sub_216B1E67C(v2); v3 != result; result = sub_216B1E67C(v2))
  {
    if (*(_DWORD *)(v3 + 12) == *(_DWORD *)(a1 + 40)
      && (*(_DWORD *)(v3 + 8) + 1024) >= *(_DWORD *)(a1 + 36))
    {
      v3 += 24;
    }
    else
    {
      if (*(_BYTE *)(v3 + 20))
      {
        sub_216B25FA8((uint64_t)v6, "Could not find expected : for simple key");
        v5 = sub_216B262E0(v3);
        sub_216B1E600(v5 + 24);
        sub_216B366F4(a1, (uint64_t)v6);
      }
      sub_216B36778(v2, v3);
    }
  }
  return result;
}

uint64_t sub_216B36118(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = sub_216B3ABD0(a1, a2, a3);
  return sub_216B3557C((uint64_t)a1, (uint64_t)v4);
}

uint64_t sub_216B36140(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B375D4(a1);
  return sub_216B3AADC(a1, v2);
}

uint64_t sub_216B36168(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t)(a1 + 2);
  result = sub_216B29084(a1 + 2);
  if ((result & 1) == 0)
  {
    a1[15] = 0;
    v4 = (_QWORD *)sub_216B262E0(v2);
    v5 = *v4 + 4096;
    *a1 = *v4;
    a1[1] = v5;
    v6 = sub_216B1E600(v2);
    sub_216B3AC2C(v6, 1);
    v7 = (void **)v6;
    v8 = (void **)sub_216B1E67C(v2);
    sub_216B3A0A0((uint64_t)a1, v7, v8);
    v9 = sub_216B1E600(v2);
    sub_216B3AC2C(v9, 1);
    v10 = v9;
    v11 = sub_216B1E67C(v2);
    sub_216B3AC54(v2, v10, v11);
    sub_216B3A104((uint64_t)a1);
    return sub_216B20594(a1 + 9);
  }
  return result;
}

unsigned __int8 *sub_216B36228(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned __int8 *result;
  unint64_t v5;
  int v6;
  unsigned int v7;

  if (*(unsigned __int8 **)(a1 + 24) == a2)
    return a2;
  v3 = *a2;
  if (v3 == 9 || (v3 - 127) >= 0xFFFFFFA1)
    return a2 + 1;
  if ((v3 & 0x80) == 0)
    return a2;
  v5 = sub_216B362D4(a1, (uint64_t)a2);
  if (!HIDWORD(v5))
    return a2;
  v6 = v5;
  if ((_DWORD)v5 == 65279)
    return a2;
  v7 = v5 - 0x10000;
  result = &a2[HIDWORD(v5)];
  if (v7 >= 0x100000 && (v6 - 57344) >> 1 >= 0xFFF && v6 != 133 && (v6 - 160) >> 5 >= 0x6BB)
    return a2;
  return result;
}

uint64_t sub_216B362D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3[2];

  sub_216B1E684(v3, a2, *(_QWORD *)(a1 + 24) - a2);
  return sub_216B35694(v3[0], v3[1]);
}

unsigned __int8 *sub_216B36304(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v3;

  v2 = *(unsigned __int8 **)(a1 + 24);
  if (v2 != a2)
  {
    v3 = *a2;
    if (v3 == 10)
    {
      ++a2;
    }
    else if (v3 == 13)
    {
      if (a2 + 1 == v2)
      {
        return *(unsigned __int8 **)(a1 + 24);
      }
      else if (a2[1] == 10)
      {
        a2 += 2;
      }
      else
      {
        ++a2;
      }
    }
  }
  return a2;
}

unsigned __int8 *sub_216B36358(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  if (*(unsigned __int8 **)(a1 + 24) != a2)
  {
    v2 = *a2;
    if (v2 == 32 || v2 == 9)
      ++a2;
  }
  return a2;
}

unsigned __int8 *sub_216B3637C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  if (*(unsigned __int8 **)(a1 + 24) == a2)
    return a2;
  v2 = *a2;
  if (v2 == 9 || v2 == 32)
    return a2;
  else
    return sub_216B36228(a1, a2);
}

uint64_t sub_216B363A8(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3, uint64_t a4)
{
  char v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t);

  v4 = a3;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  v7 = a2;
  do
  {
    v8 = a4;
    v9 = a2;
    if ((v4 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v6 + v7);
    a4 = v9(v6, a4);
  }
  while (a4 != v8);
  return v8;
}

uint64_t sub_216B36410(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  BOOL v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v11[2];
  _QWORD v12[2];
  uint64_t v13;

  v1 = *(unsigned __int8 **)(a1 + 16);
  v2 = v1;
  if (v1 != *(unsigned __int8 **)(a1 + 24))
  {
    v2 = *(unsigned __int8 **)(a1 + 24);
    v4 = *(unsigned __int8 **)(a1 + 16);
    do
    {
      v5 = *v4;
      v6 = v4 + 2;
      v7 = v5 != 37 || v6 >= v2;
      if (v7 || (v9 = sub_216B3651C(v4[1]), !v9 || !sub_216B3651C(*v6)))
      {
        if ((sub_216B36548((char)v5) & 1) == 0)
        {
          sub_216B1E684(v12, v4, 1);
          sub_216B1E678((int)v11, "#;/?:@&=+$,_.!~*'()[]");
          v8 = sub_216B31D14(v12, v11[0], v11[1], 0);
          v4 = *(unsigned __int8 **)(a1 + 16);
          if (v8 == -1)
          {
            v2 = *(unsigned __int8 **)(a1 + 16);
            break;
          }
          v2 = *(unsigned __int8 **)(a1 + 24);
        }
      }
      *(_QWORD *)(a1 + 16) = ++v4;
      ++*(_DWORD *)(a1 + 36);
    }
    while (v4 != v2);
  }
  sub_216B1E684(&v13, v1, v2 - v1);
  return v13;
}

BOOL sub_216B3651C(unsigned __int8 a1)
{
  return a1 - 48 < 0xA || a1 - 97 < 0x1A || a1 - 65 < 0x1A;
}

uint64_t sub_216B36548(int a1)
{
  _BOOL4 v1;

  v1 = a1 - 65 < 0x1A;
  if (a1 - 97 < 0x1A)
    v1 = 1;
  return a1 == 45 || v1;
}

uint64_t sub_216B36574(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *v2;

  if (a2 >= 0x80)
    goto LABEL_8;
  v2 = *(unsigned __int8 **)(a1 + 16);
  if (v2 == *(unsigned __int8 **)(a1 + 24))
    return 0;
  if ((char)*v2 < 0)
LABEL_8:
    sub_216B25E84("Not dealing with this yet", 1);
  if (*v2 == a2)
  {
    *(_QWORD *)(a1 + 16) = v2 + 1;
    ++*(_DWORD *)(a1 + 36);
    return 1;
  }
  return 0;
}

uint64_t sub_216B365DC(uint64_t result, unsigned int a2)
{
  *(_QWORD *)(result + 16) += a2;
  *(_DWORD *)(result + 36) += a2;
  return result;
}

uint64_t sub_216B365F8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  BOOL v3;
  unint64_t v4;

  if (*(unsigned __int8 **)(a1 + 24) == a2)
    return 0;
  v2 = *a2;
  v3 = v2 > 0x20;
  v4 = (0x100002600uLL >> v2) & 1;
  if (v3)
    return 0;
  else
    return v4;
}

uint64_t sub_216B3662C(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;

  if (*(_BYTE *)(result + 49))
  {
    v7 = result;
    sub_216B36114(&v8);
    v8 = a2;
    v9 = a3;
    v11 = a4;
    v10 = *(_QWORD *)(v7 + 40);
    return sub_216B36694(v7 + 280, (uint64_t)&v8);
  }
  return result;
}

uint64_t sub_216B36694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B3AE00(a1);
  v4 = sub_216B1E67C(a1);
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = sub_216B1E67C(a1) + 24;
  return sub_216B203A4(a1, v6);
}

unint64_t sub_216B366F4(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  result = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (result >= v5)
  {
    result = v5 - 1;
    *(_QWORD *)(a1 + 16) = v5 - 1;
  }
  if (!*(_BYTE *)(a1 + 50))
  {
    v6 = sub_216B2D29C(result);
    sub_216B26D14(v7);
    result = sub_216B38070((_QWORD **)a1, v6, 0, a2, v7[0], v7[1]);
  }
  *(_BYTE *)(a1 + 50) = 1;
  return result;
}

uint64_t sub_216B36778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 + 24;
  v5 = sub_216B1E67C(a1);
  sub_216B3AE14(v4, v5, a2);
  sub_216B36814(a1);
  return a2;
}

uint64_t sub_216B367C4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 280;
  result = sub_216B29084((_QWORD *)(a1 + 280));
  if ((result & 1) == 0)
  {
    result = sub_216B1E67C(v3);
    if (*(_DWORD *)(result - 8) == a2)
      return sub_216B36814(v3);
  }
  return result;
}

uint64_t sub_216B36814(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1) - 24;
  return sub_216B203A4(a1, v2);
}

uint64_t sub_216B3683C(uint64_t a1, int a2)
{
  int v4;
  __int128 v6;
  _BYTE v7[16];
  int v8;
  __int128 v9;

  sub_216B36038(v7);
  if (!*(_DWORD *)(a1 + 44) && *(_DWORD *)(a1 + 32) > a2)
  {
    do
    {
      v8 = 8;
      sub_216B1E684(&v6, *(_QWORD *)(a1 + 16), 1);
      v9 = v6;
      sub_216B36008(a1 + 56, (uint64_t)v7);
      v4 = sub_216B368E4(a1 + 240);
      *(_DWORD *)(a1 + 32) = v4;
    }
    while (v4 > a2);
  }
  return 1;
}

uint64_t sub_216B368E4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(unsigned int *)sub_216B3AF70(a1);
  sub_216B3AF88(a1);
  return v2;
}

uint64_t sub_216B36914(uint64_t a1, int a2, int a3, uint64_t a4)
{
  __int128 v9;
  _BYTE v10[16];
  int v11;
  __int128 v12;

  if (!*(_DWORD *)(a1 + 44) && *(_DWORD *)(a1 + 32) < a2)
  {
    sub_216B26208(a1 + 240, (_DWORD *)(a1 + 32));
    *(_DWORD *)(a1 + 32) = a2;
    sub_216B36038(v10);
    v11 = a3;
    sub_216B1E684(&v9, *(_QWORD *)(a1 + 16), 0);
    v12 = v9;
    sub_216B369A8(a1 + 56, a4, (uint64_t)v10);
  }
  return 1;
}

uint64_t sub_216B369A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  sub_216B3B058(a1 + 40, a3);
  return sub_216B3AFB0(a1, a2, v5);
}

unsigned __int8 *sub_216B369E0(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *result;
  int v6;
  int v7;

  while (1)
  {
    while (1)
    {
      v2 = *(unsigned __int8 **)(a1 + 16);
      v3 = *v2;
      if (v3 != 9 && v3 != 32)
        break;
      sub_216B365DC(a1, 1u);
    }
    if (v3 == 35)
    {
      while (1)
      {
        v4 = sub_216B36228(a1, v2);
        v2 = v4;
        if (v4 == *(unsigned __int8 **)(a1 + 16))
          break;
        *(_QWORD *)(a1 + 16) = v4;
        ++*(_DWORD *)(a1 + 36);
      }
    }
    result = sub_216B36304(a1, v2);
    if (result == v2)
      break;
    *(_QWORD *)(a1 + 16) = result;
    v6 = *(_DWORD *)(a1 + 44);
    v7 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 40) = v7;
    if (!v6)
      *(_BYTE *)(a1 + 49) = 1;
  }
  return result;
}

uint64_t sub_216B36A98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v6;
  _BYTE v7[16];
  int v8;
  __int128 v9;

  *(_BYTE *)(a1 + 48) = 0;
  v2 = sub_216B36DD0(a1);
  v4 = (unint64_t)sub_216B36B1C(v2, v3) >> 32;
  sub_216B36038(v7);
  v8 = 1;
  sub_216B1E684(&v6, *(_QWORD *)(a1 + 16), v4);
  v9 = v6;
  sub_216B36008(a1 + 56, (uint64_t)v7);
  *(_QWORD *)(a1 + 16) += v4;
  return 1;
}

uint64_t sub_216B36B1C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;

  v9[0] = a1;
  v9[1] = a2;
  if (!sub_216B1E67C((uint64_t)v9))
    goto LABEL_29;
  v2 = sub_216B26288(v9, 0);
  if (v2 <= 0xFD)
  {
    if (v2)
    {
      if (v2 == 239)
      {
        if ((unint64_t)sub_216B1E67C((uint64_t)v9) >= 3
          && sub_216B26288(v9, 1) == -69
          && sub_216B26288(v9, 2) == -65)
        {
          v7 = 4;
          v3 = 3;
LABEL_47:
          v6 = v3;
          goto LABEL_32;
        }
        goto LABEL_29;
      }
      goto LABEL_33;
    }
    if ((unint64_t)sub_216B1E67C((uint64_t)v9) < 4)
      goto LABEL_24;
    if (sub_216B26288(v9, 1)
      || sub_216B26288(v9, 2) != -2
      || sub_216B26288(v9, 3) != -1)
    {
      if (!sub_216B26288(v9, 1)
        && !sub_216B26288(v9, 2)
        && sub_216B26288(v9, 3))
      {
        v4 = 1;
        goto LABEL_30;
      }
LABEL_24:
      if ((unint64_t)sub_216B1E67C((uint64_t)v9) >= 2 && sub_216B26288(v9, 1))
      {
        v4 = 3;
        goto LABEL_30;
      }
LABEL_29:
      v4 = 5;
      goto LABEL_30;
    }
    v7 = 1;
LABEL_46:
    v3 = 4;
    goto LABEL_47;
  }
  if (v2 == 254)
  {
    if ((unint64_t)sub_216B1E67C((uint64_t)v9) >= 2 && sub_216B26288(v9, 1) == -1)
    {
      v7 = 3;
      v3 = 2;
      goto LABEL_47;
    }
    goto LABEL_29;
  }
  if (v2 == 255)
  {
    if ((unint64_t)sub_216B1E67C((uint64_t)v9) < 4
      || sub_216B26288(v9, 1) != -2
      || sub_216B26288(v9, 2)
      || sub_216B26288(v9, 3))
    {
      if ((unint64_t)sub_216B1E67C((uint64_t)v9) >= 2 && sub_216B26288(v9, 1) == -2)
      {
        v3 = 2;
        v7 = 2;
        goto LABEL_47;
      }
      goto LABEL_29;
    }
    v7 = 0;
    goto LABEL_46;
  }
LABEL_33:
  if ((unint64_t)sub_216B1E67C((uint64_t)v9) >= 4
    && !sub_216B26288(v9, 1)
    && !sub_216B26288(v9, 2)
    && !sub_216B26288(v9, 3))
  {
    v7 = 0;
    goto LABEL_31;
  }
  if ((unint64_t)sub_216B1E67C((uint64_t)v9) < 2 || sub_216B26288(v9, 1))
    v4 = 4;
  else
    v4 = 2;
LABEL_30:
  v7 = v4;
LABEL_31:
  v6 = 0;
LABEL_32:
  v8 = sub_216B3A25C((uint64_t)&v7, (uint64_t)&v6);
  sub_216B3A288(&v10, (double *)&v8);
  return v10;
}

uint64_t sub_216B36DD0(uint64_t a1)
{
  uint64_t v2;

  sub_216B1E684(&v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t sub_216B36DFC(uint64_t a1)
{
  int v2;
  __int128 v4;
  _BYTE v5[16];
  int v6;
  __int128 v7;

  if (*(_DWORD *)(a1 + 36))
  {
    v2 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 40) = v2;
  }
  sub_216B3683C(a1, -1);
  sub_216B36E84((_QWORD *)(a1 + 280));
  *(_BYTE *)(a1 + 49) = 0;
  sub_216B36038(v5);
  v6 = 2;
  sub_216B1E684(&v4, *(_QWORD *)(a1 + 16), 0);
  v7 = v4;
  sub_216B36008(a1 + 56, (uint64_t)v5);
  return 1;
}

_QWORD *sub_216B36E84(_QWORD *result)
{
  result[1] = *result;
  return result;
}

BOOL sub_216B36E90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  const void *v14[2];
  __int128 v15;
  const void *v16[2];
  _BYTE v17[16];
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  sub_216B3683C(a1, -1);
  sub_216B36E84((_QWORD *)(a1 + 280));
  *(_BYTE *)(a1 + 49) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  sub_216B36574(a1, 0x25u);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_216B363A8(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_216B3637C, 0, v3);
  *(_QWORD *)(a1 + 16) = v4;
  sub_216B1E684(&v20, v3, v4 - v3);
  *(_QWORD *)(a1 + 16) = sub_216B363A8(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_216B36358, 0, *(_QWORD *)(a1 + 16));
  sub_216B36038(v17);
  v5 = v20;
  v6 = v21;
  sub_216B1E678((int)v16, "YAML");
  if (sub_216B274F0(v5, v6, v16[0], (size_t)v16[1]))
  {
    v7 = sub_216B363A8(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_216B3637C, 0, *(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v7;
    v8 = 3;
  }
  else
  {
    v9 = v20;
    v10 = v21;
    sub_216B1E678((int)v14, "TAG");
    result = sub_216B274F0(v9, v10, v14[0], (size_t)v14[1]);
    if (!result)
      return result;
    v12 = sub_216B363A8(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_216B3637C, 0, *(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v12;
    v13 = sub_216B363A8(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_216B36358, 0, v12);
    *(_QWORD *)(a1 + 16) = v13;
    v7 = sub_216B363A8(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_216B3637C, 0, v13);
    *(_QWORD *)(a1 + 16) = v7;
    v8 = 4;
  }
  v18 = v8;
  sub_216B1E684(&v15, v2, v7 - v2);
  v19 = v15;
  sub_216B36008(a1 + 56, (uint64_t)v17);
  return 1;
}

uint64_t sub_216B3702C(uint64_t a1, int a2)
{
  int v4;
  __int128 v6;
  _BYTE v7[16];
  int v8;
  __int128 v9;

  sub_216B3683C(a1, -1);
  sub_216B36E84((_QWORD *)(a1 + 280));
  *(_BYTE *)(a1 + 49) = 0;
  sub_216B36038(v7);
  if (a2)
    v4 = 5;
  else
    v4 = 6;
  v8 = v4;
  sub_216B1E684(&v6, *(_QWORD *)(a1 + 16), 3);
  v9 = v6;
  sub_216B365DC(a1, 3u);
  sub_216B36008(a1 + 56, (uint64_t)v7);
  return 1;
}

uint64_t sub_216B370B4(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  _BYTE v9[16];
  int v10;
  __int128 v11;

  sub_216B36038(v9);
  if (a2)
    v4 = 12;
  else
    v4 = 14;
  v10 = v4;
  sub_216B1E684(&v8, *(_QWORD *)(a1 + 16), 1);
  v11 = v8;
  sub_216B365DC(a1, 1u);
  sub_216B36008(a1 + 56, (uint64_t)v9);
  v5 = sub_216B37178(a1 + 56);
  sub_216B20C64(&v7, v5);
  sub_216B3662C(a1, v7, *(_DWORD *)(a1 + 36) - 1, 0);
  *(_BYTE *)(a1 + 49) = 1;
  ++*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t sub_216B37178(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_216B39FFC(a1);
  return sub_216B262E0(v1);
}

uint64_t sub_216B3718C(uint64_t a1, int a2)
{
  int v4;
  int v5;
  __int128 v7;
  _BYTE v8[16];
  int v9;
  __int128 v10;

  sub_216B367C4(a1, *(_DWORD *)(a1 + 44));
  *(_BYTE *)(a1 + 49) = 0;
  sub_216B36038(v8);
  if (a2)
    v4 = 13;
  else
    v4 = 15;
  v9 = v4;
  sub_216B1E684(&v7, *(_QWORD *)(a1 + 16), 1);
  v10 = v7;
  sub_216B365DC(a1, 1u);
  sub_216B36008(a1 + 56, (uint64_t)v8);
  v5 = *(_DWORD *)(a1 + 44);
  if (v5)
    *(_DWORD *)(a1 + 44) = v5 - 1;
  return 1;
}

uint64_t sub_216B37220(uint64_t a1)
{
  __int128 v3;
  _BYTE v4[16];
  int v5;
  __int128 v6;

  sub_216B367C4(a1, *(_DWORD *)(a1 + 44));
  *(_BYTE *)(a1 + 49) = 1;
  sub_216B36038(v4);
  v5 = 11;
  sub_216B1E684(&v3, *(_QWORD *)(a1 + 16), 1);
  v6 = v3;
  sub_216B365DC(a1, 1u);
  sub_216B36008(a1 + 56, (uint64_t)v4);
  return 1;
}

uint64_t sub_216B37298(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  _BYTE v7[16];
  int v8;
  __int128 v9;

  v2 = *(_DWORD *)(a1 + 36);
  v3 = a1 + 56;
  v4 = sub_216B37340(a1 + 56);
  sub_216B36914(a1, v2, 9, v4);
  sub_216B367C4(a1, *(_DWORD *)(a1 + 44));
  *(_BYTE *)(a1 + 49) = 1;
  sub_216B36038(v7);
  v8 = 7;
  sub_216B1E684(&v6, *(_QWORD *)(a1 + 16), 1);
  v9 = v6;
  sub_216B365DC(a1, 1u);
  sub_216B36008(v3, (uint64_t)v7);
  return 1;
}

uint64_t sub_216B37340(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  sub_216B39FFC(a1);
  v2 = sub_216B39FFC(a1);
  sub_216B20C64(&v4, v2);
  return v4;
}

uint64_t sub_216B37380(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  __int128 v6;
  _BYTE v7[16];
  int v8;
  __int128 v9;

  v2 = *(_DWORD *)(a1 + 44);
  if (!v2)
  {
    v3 = *(_DWORD *)(a1 + 36);
    v4 = sub_216B37340(a1 + 56);
    sub_216B36914(a1, v3, 10, v4);
    v2 = *(_DWORD *)(a1 + 44);
  }
  sub_216B367C4(a1, v2);
  *(_BYTE *)(a1 + 49) = *(_DWORD *)(a1 + 44) == 0;
  sub_216B36038(v7);
  v8 = 16;
  sub_216B1E684(&v6, *(_QWORD *)(a1 + 16), 1);
  v9 = v6;
  sub_216B365DC(a1, 1u);
  sub_216B36008(a1 + 56, (uint64_t)v7);
  return 1;
}

uint64_t sub_216B3742C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  __int128 v11;
  __int128 v12;

  v2 = a1 + 280;
  if (sub_216B29084((_QWORD *)(a1 + 280)))
  {
    v3 = *(_DWORD *)(a1 + 44);
    if (!v3)
    {
      v4 = *(_DWORD *)(a1 + 36);
      v5 = sub_216B37340(a1 + 56);
      sub_216B36914(a1, v4, 10, v5);
      v3 = *(_DWORD *)(a1 + 44);
    }
    *(_BYTE *)(a1 + 49) = v3 == 0;
  }
  else
  {
    sub_216B3759C(v2, (uint64_t)&v12);
    sub_216B36038(v9);
    v10 = 16;
    v11 = *(_OWORD *)(sub_216B262E0((uint64_t)&v12) + 24);
    sub_216B2D410(&v8);
    sub_216B2D410(&v7);
    v8 = sub_216B375D4(a1 + 56);
    v7 = sub_216B37340(a1 + 56);
    while (sub_216B3760C(&v8, &v7))
    {
      if (sub_216B37620(&v8, &v12))
        break;
      sub_216B37634(&v8);
    }
    v8 = sub_216B369A8(a1 + 56, v8, (uint64_t)v9);
    sub_216B36914(a1, SDWORD2(v12), 10, v8);
    *(_BYTE *)(a1 + 49) = 0;
  }
  sub_216B36038(v9);
  v10 = 17;
  sub_216B1E684(&v12, *(_QWORD *)(a1 + 16), 1);
  v11 = v12;
  sub_216B365DC(a1, 1u);
  sub_216B36008(a1 + 56, (uint64_t)v9);
  return 1;
}

uint64_t sub_216B3759C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_216B3B09C(a1);
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  return sub_216B36814(a1);
}

uint64_t sub_216B375D4(uint64_t a1)
{
  uint64_t v3;

  sub_216B39FFC(a1);
  sub_216B20C64(&v3, *(_QWORD *)(a1 + 176));
  return v3;
}

BOOL sub_216B3760C(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

BOOL sub_216B37620(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t *sub_216B37634(uint64_t *a1)
{
  *a1 = sub_216B3ABC8(*a1);
  return a1;
}

uint64_t sub_216B37660(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unsigned __int8 *i;
  unsigned int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  _BYTE v17[16];
  int v18;
  __int128 v19;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 36);
  if (a2)
  {
    v5 = *(_QWORD *)(a1 + 24);
    for (i = (unsigned __int8 *)(v3 + 1); ; ++i)
    {
      *(_QWORD *)(v2 + 16) = i;
      if (i == (unsigned __int8 *)v5)
        break;
      if (*i == 34 && (*(i - 1) != 92 || !sub_216B37854(v3 + 1, (uint64_t)i)))
        goto LABEL_23;
    }
LABEL_25:
    sub_216B25FA8((uint64_t)v17, "Expected quote at end of scalar");
    sub_216B366F4(v2, (uint64_t)v17);
    return 0;
  }
  v7 = 1;
LABEL_9:
  sub_216B365DC(a1, v7);
  while (1)
  {
    while (1)
    {
      i = *(unsigned __int8 **)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      v8 = *i;
      if ((unint64_t)(i + 1) >= v5)
      {
        if (v8 == 39)
          goto LABEL_23;
      }
      else if (v8 == 39)
      {
        if (i[1] != 39)
          goto LABEL_23;
        a1 = v2;
        v7 = 2;
        goto LABEL_9;
      }
      v9 = sub_216B36228(v2, *(unsigned __int8 **)(v2 + 16));
      i = v9;
      if (v9 == *(unsigned __int8 **)(v2 + 16))
        break;
      if (v9 == *(unsigned __int8 **)(v2 + 24))
      {
        v5 = (unint64_t)v9;
        i = *(unsigned __int8 **)(v2 + 16);
        goto LABEL_23;
      }
      *(_QWORD *)(v2 + 16) = v9;
      ++*(_DWORD *)(v2 + 36);
    }
    v10 = sub_216B36304(v2, v9);
    if (v10 == i)
      break;
    *(_QWORD *)(v2 + 16) = v10;
    v11 = *(_DWORD *)(v2 + 40) + 1;
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = v11;
  }
  v5 = *(_QWORD *)(v2 + 24);
LABEL_23:
  if (i == (unsigned __int8 *)v5)
    goto LABEL_25;
  v12 = 1;
  sub_216B365DC(v2, 1u);
  sub_216B36038(v17);
  v18 = 18;
  sub_216B1E684(&v16, v3, *(_QWORD *)(v2 + 16) - v3);
  v19 = v16;
  sub_216B36008(v2 + 56, (uint64_t)v17);
  v13 = sub_216B37178(v2 + 56);
  sub_216B20C64(&v15, v13);
  sub_216B3662C(v2, v15, v4, 0);
  *(_BYTE *)(v2 + 49) = 0;
  return v12;
}

BOOL sub_216B37854(unint64_t a1, uint64_t a2)
{
  _BYTE *v2;

  v2 = (_BYTE *)(a2 - 1);
  if (a2 - 1 >= a1)
  {
    do
    {
      if (*v2 != 92)
        break;
      --v2;
    }
    while ((unint64_t)v2 >= a1);
  }
  return ((a2 - 1 - (_QWORD)v2) & 0x8000000000000001) == 1;
}

uint64_t sub_216B37890(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  int v20;
  __int128 v21;
  uint64_t v22[2];

  v2 = *(unsigned __int8 **)(a1 + 16);
  if (*v2 == 35)
    goto LABEL_2;
  v4 = 0;
  v5 = *(_DWORD *)(a1 + 36);
  v6 = *(_DWORD *)(a1 + 32) + 1;
  v7 = *(unsigned __int8 **)(a1 + 16);
  while (1)
  {
    v8 = v7;
    if ((sub_216B365F8(a1, v7) & 1) == 0)
      break;
LABEL_16:
    if (sub_216B365F8(a1, v8))
    {
      v7 = v8;
      do
      {
        v12 = sub_216B36358(a1, v7);
        if (v12 == v7)
        {
          v7 = sub_216B36304(a1, v7);
          v14 = *(_DWORD *)(a1 + 40) + 1;
          *(_DWORD *)(a1 + 36) = 0;
          *(_DWORD *)(a1 + 40) = v14;
          v4 = 1;
        }
        else
        {
          v13 = *(_DWORD *)(a1 + 36);
          if (v4 && v13 < v6 && *v7 == 9)
          {
            sub_216B25FA8((uint64_t)v19, "Found invalid tab character in indentation");
            v3 = a1;
            goto LABEL_31;
          }
          *(_DWORD *)(a1 + 36) = v13 + 1;
          v7 = v12;
        }
      }
      while ((sub_216B365F8(a1, v7) & 1) != 0);
      if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 36) >= v6)
      {
        *(_QWORD *)(a1 + 16) = v7;
        v8 = v7;
        if (*v7 != 35)
          continue;
      }
    }
    if (v2 != v8)
    {
      sub_216B36038(v19);
      v20 = 18;
      sub_216B1E684(&v18, v2, *(_QWORD *)(a1 + 16) - (_QWORD)v2);
      v21 = v18;
      sub_216B36008(a1 + 56, (uint64_t)v19);
      v15 = sub_216B37178(a1 + 56);
      sub_216B20C64(&v17, v15);
      sub_216B3662C(a1, v17, v5, 0);
      *(_BYTE *)(a1 + 49) = 0;
      return 1;
    }
LABEL_2:
    sub_216B25FA8((uint64_t)v19, "Got empty plain scalar");
    v3 = a1;
    goto LABEL_31;
  }
  while (1)
  {
    v9 = *v8;
    if (*(_DWORD *)(a1 + 44))
      break;
    if (v9 == 58 && (sub_216B365F8(a1, v8 + 1) & 1) != 0)
      goto LABEL_16;
LABEL_14:
    v11 = sub_216B36228(a1, v8);
    v8 = v11;
    if (v11 != *(unsigned __int8 **)(a1 + 16))
    {
      *(_QWORD *)(a1 + 16) = v11;
      ++*(_DWORD *)(a1 + 36);
      if (!sub_216B365F8(a1, v11))
        continue;
    }
    goto LABEL_16;
  }
  if (v9 != 58)
  {
LABEL_10:
    sub_216B1E684(v19, v8, 1);
    sub_216B1E678((int)v22, ",:?[]{}");
    v10 = sub_216B31D14(v19, v22[0], v22[1], 0);
    v8 = *(unsigned __int8 **)(a1 + 16);
    if (v10 != -1)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (sub_216B365F8(a1, v8 + 1) || v8[1] == 44)
  {
    if ((sub_216B365F8(a1, v8 + 1) & 1) != 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  sub_216B25FA8((uint64_t)v19, "Found unexpected ':' while scanning a plain scalar");
  v3 = a1;
LABEL_31:
  sub_216B366F4(v3, (uint64_t)v19);
  return 0;
}

BOOL sub_216B37B60(uint64_t a1, int a2)
{
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[16];
  int v16;
  __int128 v17;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 36);
  sub_216B365DC(a1, 1u);
  v6 = *(unsigned __int8 **)(a1 + 16);
  while (1)
  {
    v7 = *v6;
    if ((v7 - 44) <= 0x31 && ((1 << (v7 - 44)) & 0x2800000004001) != 0)
      break;
    if (v7 == 123)
      break;
    if (v7 == 125)
      break;
    v9 = sub_216B3637C(a1, v6);
    v6 = v9;
    if (v9 == *(unsigned __int8 **)(a1 + 16))
      break;
    *(_QWORD *)(a1 + 16) = v9;
    ++*(_DWORD *)(a1 + 36);
  }
  if (v4 == v6)
  {
    sub_216B25FA8((uint64_t)v15, "Got empty alias or anchor");
    sub_216B366F4(a1, (uint64_t)v15);
  }
  else
  {
    sub_216B36038(v15);
    if (a2)
      v10 = 19;
    else
      v10 = 20;
    v16 = v10;
    sub_216B1E684(&v14, v4, *(_QWORD *)(a1 + 16) - (_QWORD)v4);
    v17 = v14;
    sub_216B36008(a1 + 56, (uint64_t)v15);
    v11 = sub_216B37178(a1 + 56);
    sub_216B20C64(&v13, v11);
    sub_216B3662C(a1, v13, v5, 0);
    *(_BYTE *)(a1 + 49) = 0;
  }
  return v4 != v6;
}

uint64_t sub_216B37CC4(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *i;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  __int128 v8;
  _BYTE v9[16];
  int v10;
  __int128 v11;

  v2 = *(unsigned __int8 **)(a1 + 16);
  sub_216B365DC(a1, 1u);
  for (i = *(unsigned __int8 **)(a1 + 16); ; i = v5)
  {
    while (1)
    {
      v4 = sub_216B36228(a1, i);
      i = v4;
      if (v4 == *(unsigned __int8 **)(a1 + 16))
        break;
      *(_QWORD *)(a1 + 16) = v4;
      ++*(_DWORD *)(a1 + 36);
    }
    if (!*(_DWORD *)(a1 + 36))
      break;
    v5 = sub_216B36304(a1, v4);
    if (v5 == i)
      return 0;
    v6 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 16) = v5;
  }
  if (v2 != v4)
  {
    sub_216B36038(v9);
    v10 = 18;
    sub_216B1E684(&v8, v2, *(_QWORD *)(a1 + 16) - (_QWORD)v2);
    v11 = v8;
    sub_216B36008(a1 + 56, (uint64_t)v9);
    return 1;
  }
  sub_216B25FA8((uint64_t)v9, "Got empty block scalar");
  sub_216B366F4(a1, (uint64_t)v9);
  return 0;
}

uint64_t sub_216B37DD0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _BYTE v9[16];
  int v10;
  __int128 v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 36);
  sub_216B365DC(a1, 1u);
  v4 = *(_BYTE **)(a1 + 16);
  if (v4 != *(_BYTE **)(a1 + 24) && (sub_216B365F8(a1, *(unsigned __int8 **)(a1 + 16)) & 1) == 0)
  {
    if (*v4 == 60)
    {
      sub_216B365DC(a1, 1u);
      sub_216B36410(a1);
      if ((sub_216B36574(a1, 0x3Eu) & 1) == 0)
        return 0;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = sub_216B363A8(a1, (uint64_t (*)(_QWORD *, uint64_t))sub_216B3637C, 0, (uint64_t)v4);
    }
  }
  sub_216B36038(v9);
  v10 = 21;
  sub_216B1E684(&v8, v2, *(_QWORD *)(a1 + 16) - v2);
  v11 = v8;
  sub_216B36008(a1 + 56, (uint64_t)v9);
  v6 = sub_216B37178(a1 + 56);
  sub_216B20C64(&v7, v6);
  sub_216B3662C(a1, v7, v3, 0);
  *(_BYTE *)(a1 + 49) = 0;
  return 1;
}

unint64_t sub_216B37EE8(uint64_t a1, uint64_t a2)
{
  return sub_216B366F4(a1, a2);
}

uint64_t sub_216B37EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_216B1D1D4(400);
  sub_216B35624(v8, a2, a3, a4);
  sub_216B27D7C(a1, v8);
  sub_216B324FC(a1 + 8);
  return a1;
}

uint64_t sub_216B37F60(uint64_t a1)
{
  sub_216B37F88(a1 + 8);
  return sub_216B37F8C(a1);
}

uint64_t sub_216B37F94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 50);
}

uint64_t sub_216B37F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v11[2];
  __int128 v12;
  _BYTE v13[48];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_216B38060((uint64_t)v13);
  *(_QWORD *)&v12 = sub_216B38064(a2);
  *((_QWORD *)&v12 + 1) = v6;
  sub_216B267B0((uint64_t)v13, &v12);
  v8 = (_QWORD **)sub_216B25CA8(a1, v7);
  v9 = sub_216B38064(a2);
  sub_216B380EC(v11, v13);
  sub_216B38070(v8, v9, 0, a3, v11[0], v11[1]);
  return sub_216B1FF6C(v13);
}

uint64_t sub_216B38064(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_216B38070(_QWORD **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v13[2];

  v11 = *a1;
  sub_216B26D14(v13);
  return sub_216B2DEAC(v11, a2, a3, a4, a5, a6, v13[0], v13[1], 1u);
}

uint64_t sub_216B380F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;

  v3 = a1 + 8;
  if (sub_216B3817C(a1 + 8, a2))
    sub_216B25E84("Can only iterate over the stream once", 1);
  v5 = sub_216B25CA8(a1, v4);
  sub_216B35628(v5, (uint64_t)&v8);
  v6 = (uint64_t *)sub_216B1D1D4(176);
  sub_216B381F8(v6, a1);
  sub_216B3819C(v3, (uint64_t)v6);
  sub_216B20C64(&v9, v3);
  return v9;
}

BOOL sub_216B3817C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)j_nullsub_1(a1, a2) != 0;
}

void sub_216B3819C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B3A7E0(v7, v4);
  }
}

uint64_t sub_216B381FC()
{
  uint64_t v1;

  sub_216B2D410(&v1);
  return v1;
}

BOOL sub_216B38220(uint64_t *a1, uint64_t *a2)
{
  return !sub_216B3A2AC(a1, a2);
}

BOOL sub_216B38238(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE v11[40];

  for (i = *a1; ; i = *a1)
  {
    v4 = sub_216B25CA8(i, a2);
    if ((sub_216B37F94(v4) & 1) != 0)
      return 0;
    v6 = a1[18];
    if (!v6)
    {
      sub_216B39C9C(a1, v5);
      v6 = a1[18];
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v9 = *(_DWORD *)(sub_216B387C0(a1, v7) + 16);
    if (v9 != 6)
      break;
    sub_216B38800(a1, v8, (uint64_t)v11);
  }
  return v9 != 2;
}

uint64_t sub_216B382C8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = (uint64_t *)sub_216B25CA8(*a1, a2);
  v6 = sub_216B38238(v3, v4);
  v7 = *a1;
  if (v6)
  {
    v8 = *(_QWORD *)sub_216B25CA8(v7, v5);
    v9 = *a1;
    v10 = (uint64_t *)sub_216B1D1D4(176);
    sub_216B381F8(v10, v8);
    v7 = v9;
    v11 = (uint64_t)v10;
  }
  else
  {
    v11 = 0;
  }
  sub_216B3819C(v7, v11);
  return *a1;
}

uint64_t sub_216B3833C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  *(_QWORD *)a1 = off_24D5EF988;
  *(_QWORD *)(a1 + 8) = a3;
  sub_216B383D0((_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a7;
  v14 = sub_216B383D4(a1, v13);
  v15 = sub_216B1E600(v14 + 24);
  v16 = sub_216B2D29C(v15);
  sub_216B1E684(&v18, v16, v16);
  *(_OWORD *)(a1 + 16) = v18;
  return a1;
}

uint64_t sub_216B383D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)sub_216B25CA8(*(_QWORD *)(a1 + 8), a2);
  return sub_216B387C0(v2, v3);
}

void sub_216B383EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _QWORD v29[3];
  uint64_t v30[3];
  std::string v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  const void *v35[2];
  std::string v36;
  const void *v37[2];
  uint64_t v38;
  uint64_t v39;

  v38 = sub_216B38700(a1);
  v39 = v4;
  if (sub_216B29094((uint64_t)&v38)
    || (v5 = v38, v6 = v39, sub_216B1E678((int)v37, "!"), !sub_216B2B2F0(v5, v6, v37[0], (size_t)v37[1])))
  {
    switch(sub_216B387B8(a1))
    {
      case 0u:
        v13 = "tag:yaml.org,2002:null";
        break;
      case 1u:
        v13 = "tag:yaml.org,2002:str";
        break;
      case 3u:
        v13 = "tag:yaml.org,2002:map";
        break;
      case 4u:
        v13 = "tag:yaml.org,2002:seq";
        break;
      default:
        v13 = &byte_216C19659;
        break;
    }
    sub_216B26DE8(a2, v13);
  }
  else
  {
    sub_216B25034(&v36);
    if (sub_216B29260(&v38, 33, -1))
    {
      sub_216B1E678((int)v35, "!!");
      if (sub_216B2A2EC((uint64_t)&v38, v35[0], (size_t)v35[1]))
      {
        v9 = sub_216B25CA8(*(_QWORD *)(a1 + 8), v8);
        v10 = sub_216B3870C(v9);
        sub_216B1E678((int)v30, "!!");
        v29[0] = sub_216B38714(v10, v30);
        v11 = sub_216B38740((uint64_t)v29);
        sub_216B24898((_QWORD *)(v11 + 16), (uint64_t)&v31);
        sub_216B26E7C((uint64_t)&v36, (uint64_t)&v31);
        std::string::~string(&v31);
        v12 = 2;
      }
      else
      {
        v17 = sub_216B29260(&v38, 33, -1);
        *(_QWORD *)&v34 = sub_216B2864C(&v38, 0, v17 + 1);
        *((_QWORD *)&v34 + 1) = v18;
        v19 = sub_216B25CA8(*(_QWORD *)(a1 + 8), v18);
        v20 = sub_216B3870C(v19);
        v33 = sub_216B38714(v20, (uint64_t *)&v34);
        v22 = sub_216B25CA8(*(_QWORD *)(a1 + 8), v21);
        v23 = sub_216B3870C(v22);
        v31.__r_.__value_.__r.__words[0] = sub_216B3875C(v23, v24);
        if (sub_216B38758(&v33, &v31))
        {
          v25 = sub_216B38740((uint64_t)&v33);
          sub_216B24898((_QWORD *)(v25 + 16), (uint64_t)&v31);
          sub_216B26E7C((uint64_t)&v36, (uint64_t)&v31);
          std::string::~string(&v31);
        }
        else
        {
          sub_216B36038(&v31);
          LODWORD(v31.__r_.__value_.__r.__words[2]) = 21;
          v32 = v34;
          sub_216B25FA8((uint64_t)v29, "Unknown tag handle ");
          sub_216B25FB0((uint64_t)v28, (uint64_t)&v34);
          sub_216B29830(v30, v29, v28);
          sub_216B38788(a1, (uint64_t)v30, (uint64_t)&v31);
        }
        v12 = sub_216B29260(&v38, 33, -1) + 1;
      }
    }
    else
    {
      v14 = sub_216B25CA8(*(_QWORD *)(a1 + 8), v7);
      v15 = sub_216B3870C(v14);
      sub_216B1E678((int)v30, "!");
      v29[0] = sub_216B38714(v15, v30);
      v16 = sub_216B38740((uint64_t)v29);
      sub_216B24898((_QWORD *)(v16 + 16), (uint64_t)&v31);
      sub_216B26E7C((uint64_t)&v36, (uint64_t)&v31);
      std::string::~string(&v31);
      v12 = 1;
    }
    v26 = sub_216B2864C(&v38, v12, 0xFFFFFFFFFFFFFFFFLL);
    sub_216B26B40(&v36, v26, v27);
    sub_216B2B018(a2, &v36);
    std::string::~string(&v36);
  }
}

uint64_t sub_216B38700(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_216B3870C(uint64_t a1)
{
  return a1 + 152;
}

uint64_t sub_216B38714(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = sub_216B3B1C4(a1, a2);
  sub_216B20C64(&v4, v2);
  return v4;
}

uint64_t sub_216B38740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_216B3B45C(a1);
  v3 = nullsub_1(v1, v2);
  return nullsub_1(v3, v4);
}

uint64_t sub_216B3875C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = sub_216B3B300(a1, a2);
  sub_216B20C64(&v4, v2);
  return v4;
}

unint64_t sub_216B38788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)sub_216B25CA8(*(_QWORD *)(a1 + 8), a2);
  return sub_216B38C7C(v5, a2, a3);
}

uint64_t sub_216B387B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_216B387C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216B25CA8(*a1, a2);
  return sub_216B35A68(v2);
}

uint64_t sub_216B387D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)sub_216B25CA8(*(_QWORD *)(a1 + 8), a2);
  return sub_216B38800(v4, v5, a3);
}

uint64_t sub_216B38800@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = sub_216B25CA8(*a1, a2);
  return sub_216B35628(v4, a3);
}

uint64_t sub_216B38828(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)sub_216B25CA8(*(_QWORD *)(a1 + 8), a2);
  return sub_216B38840(v2, v3);
}

uint64_t sub_216B38840(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v3 = sub_216B387C0(a1, a2);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 16);
  v56 = *(_OWORD *)v3;
  v57 = v5;
  v58 = v4;
  sub_216B36038(&v53);
  sub_216B36038(&v50);
  while (2)
  {
    switch((int)v57)
    {
      case 0:
        return 0;
      case 7:
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (!v12)
          return v12;
        v13 = *a1 + 8;
        v14 = sub_216B2864C((_QWORD *)&v54 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        v16 = v15;
        v17 = *((_QWORD *)&v51 + 1);
        v18 = v52;
        v19 = v12;
        v20 = v13;
        v21 = 2;
        goto LABEL_18;
      case 9:
        sub_216B38800(a1, v6, (uint64_t)&v47);
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (!v12)
          return v12;
        v22 = *a1 + 8;
        v14 = sub_216B2864C((_QWORD *)&v54 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        v16 = v23;
        v17 = *((_QWORD *)&v51 + 1);
        v18 = v52;
        v19 = v12;
        v20 = v22;
        v21 = 0;
        goto LABEL_18;
      case 10:
        sub_216B38800(a1, v6, (uint64_t)&v47);
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (!v12)
          return v12;
        v24 = *a1 + 8;
        v25 = sub_216B2864C((_QWORD *)&v54 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        v27 = v26;
        v28 = *((_QWORD *)&v51 + 1);
        v29 = v52;
        v30 = v12;
        v31 = v24;
        v32 = 0;
        goto LABEL_23;
      case 12:
        sub_216B38800(a1, v6, (uint64_t)&v47);
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (!v12)
          return v12;
        v33 = *a1 + 8;
        v14 = sub_216B2864C((_QWORD *)&v54 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        v16 = v34;
        v17 = *((_QWORD *)&v51 + 1);
        v18 = v52;
        v19 = v12;
        v20 = v33;
        v21 = 1;
LABEL_18:
        sub_216B39CD0(v19, v20, v14, v16, v17, v18, v21);
        return v12;
      case 14:
        sub_216B38800(a1, v6, (uint64_t)&v47);
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (!v12)
          return v12;
        v35 = *a1 + 8;
        v25 = sub_216B2864C((_QWORD *)&v54 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        v27 = v36;
        v28 = *((_QWORD *)&v51 + 1);
        v29 = v52;
        v30 = v12;
        v31 = v35;
        v32 = 1;
        goto LABEL_23;
      case 16:
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (!v12)
          return v12;
        v37 = *a1 + 8;
        v25 = sub_216B2864C((_QWORD *)&v54 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        v27 = v38;
        v28 = *((_QWORD *)&v51 + 1);
        v29 = v52;
        v30 = v12;
        v31 = v37;
        v32 = 2;
LABEL_23:
        sub_216B39CD4(v30, v31, v25, v27, v28, v29, v32);
        return v12;
      case 18:
        sub_216B38800(a1, v6, (uint64_t)&v47);
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (v12)
        {
          v39 = *a1 + 8;
          v40 = sub_216B2864C((_QWORD *)&v54 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
          sub_216B39CD8(v12, v39, v40, v41, *((_QWORD *)&v51 + 1), v52, *((_QWORD *)&v57 + 1), v58);
        }
        return v12;
      case 19:
        sub_216B38800(a1, v6, (uint64_t)&v47);
        v12 = sub_216B396BC(88, a1 + 1, 0x10uLL);
        if (v12)
        {
          v42 = *a1 + 8;
          v43 = sub_216B2864C((_QWORD *)&v57 + 1, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
          sub_216B39CCC(v12, v42, v43, v44);
        }
        return v12;
      case 20:
        if ((_DWORD)v54 == 20)
        {
          v45 = "Already encountered an anchor for this node!";
          goto LABEL_30;
        }
        sub_216B38800(a1, v6, (uint64_t)&v47);
        v53 = v47;
        v54 = v48;
        v55 = v49;
        goto LABEL_7;
      case 21:
        if ((_DWORD)v51 != 21)
        {
          sub_216B38800(a1, v6, (uint64_t)&v47);
          v50 = v47;
          v51 = v48;
          v52 = v49;
LABEL_7:
          v8 = sub_216B387C0(a1, v7);
          v9 = *(_QWORD *)(v8 + 32);
          v10 = *(_OWORD *)(v8 + 16);
          v56 = *(_OWORD *)v8;
          v57 = v10;
          v58 = v9;
          continue;
        }
        v45 = "Already encountered a tag for this node!";
LABEL_30:
        sub_216B25FA8((uint64_t)&v47, v45);
        sub_216B38C7C(a1, (uint64_t)&v47, (uint64_t)&v56);
        return 0;
      default:
        v11 = sub_216B396BC(72, a1 + 1, 0x10uLL);
        v12 = v11;
        if (v11)
          sub_216B396CC(v11, *a1 + 8);
        return v12;
    }
  }
}

uint64_t sub_216B38C60(uint64_t a1, uint64_t a2)
{
  return sub_216B25CA8(*(_QWORD *)(a1 + 8), a2) + 8;
}

unint64_t sub_216B38C7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B25CA8(*a1, a2);
  sub_216B1E600(a3 + 24);
  return sub_216B366F4(v5, a2);
}

uint64_t sub_216B38CC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)sub_216B25CA8(*(_QWORD *)(a1 + 8), a2);
  return sub_216B38CDC(v2, v3);
}

uint64_t sub_216B38CDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_216B25CA8(*a1, a2);
  return sub_216B37F94(v2);
}

uint64_t sub_216B38CF4(uint64_t a1, const void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26[2];
  char v27;
  _QWORD v28[2];
  uint64_t v29[2];
  __int128 v30;
  __int128 v31;

  v4 = (_QWORD *)(a1 + 72);
  if (sub_216B26288((_QWORD *)(a1 + 72), 0) == 34)
  {
    v5 = sub_216B1E67C((uint64_t)v4);
    *(_QWORD *)&v30 = sub_216B2864C(v4, 1uLL, v5 - 2);
    *((_QWORD *)&v30 + 1) = v6;
    sub_216B1E678((int)v29, "\\\r\n");
    v7 = sub_216B31D14(&v30, v29[0], v29[1], 0);
    if (v7 != -1)
    {
      v8 = sub_216B38F24(a1, v30, *((uint64_t *)&v30 + 1), v7, a2);
LABEL_11:
      *(_QWORD *)&v31 = v8;
      *((_QWORD *)&v31 + 1) = v9;
      return v31;
    }
    return v30;
  }
  if (sub_216B26288(v4, 0) != 39)
  {
    sub_216B1E678((int)v26, " ");
    v8 = sub_216B395A0(v4, v26[0], v26[1]);
    goto LABEL_11;
  }
  v10 = sub_216B1E67C((uint64_t)v4);
  *(_QWORD *)&v30 = sub_216B2864C(v4, 1uLL, v10 - 2);
  *((_QWORD *)&v30 + 1) = v11;
  v12 = sub_216B26CA8(&v30, 0x27u, 0);
  if (v12 == -1)
    return v30;
  v13 = v12;
  sub_216B20594(a2);
  v14 = sub_216B1E67C((uint64_t)&v30);
  sub_216B28114(a2, v14);
  do
  {
    v15 = sub_216B1E600((uint64_t)&v30);
    sub_216B1E684(v28, v15, v13);
    v16 = sub_216B1E67C((uint64_t)a2);
    v17 = (char *)sub_216B1E600((uint64_t)v28);
    v18 = (char *)sub_216B1E608(v28);
    sub_216B39408(a2, v16, v17, v18);
    v27 = 39;
    sub_216B1FBBC((uint64_t)a2, &v27);
    *(_QWORD *)&v30 = sub_216B2864C(&v30, v13 + 2, 0xFFFFFFFFFFFFFFFFLL);
    *((_QWORD *)&v30 + 1) = v19;
    v13 = sub_216B26CA8(&v30, 0x27u, 0);
  }
  while (v13 != -1);
  v20 = sub_216B1E67C((uint64_t)a2);
  v21 = (char *)sub_216B1E600((uint64_t)&v30);
  v22 = (char *)sub_216B1E608(&v30);
  sub_216B39408(a2, v20, v21, v22);
  v23 = sub_216B1E600((uint64_t)a2);
  v24 = sub_216B1FF14((uint64_t)a2);
  sub_216B1E684(&v31, v23, v24);
  return v31;
}

uint64_t sub_216B38F24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void **a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35[2];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a2;
  v42 = a3;
  sub_216B20594(a5);
  v8 = sub_216B1E67C((uint64_t)&v41);
  sub_216B28114(a5, v8);
  if (a4 != -1)
  {
    while (1)
    {
      v9 = sub_216B1E600((uint64_t)&v41);
      sub_216B1E684(v40, v9, a4);
      v10 = sub_216B1E67C((uint64_t)a5);
      v11 = (char *)sub_216B1E600((uint64_t)v40);
      v12 = (char *)sub_216B1E608(v40);
      sub_216B39408(a5, v10, v11, v12);
      v41 = sub_216B2864C(&v41, a4, 0xFFFFFFFFFFFFFFFFLL);
      v42 = v13;
      v14 = sub_216B26288(&v41, 0);
      if (v14 == 13 || v14 == 10)
        break;
      if (sub_216B1E67C((uint64_t)&v41) != 1)
      {
        v41 = sub_216B2864C(&v41, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        v42 = v17;
        v18 = sub_216B26288(&v41, 0);
        if (v18 > 91)
        {
          switch(v18)
          {
            case '\\':
              v19 = 92;
              goto LABEL_51;
            case '_':
              v20 = 160;
              goto LABEL_46;
            case 'a':
              v19 = 7;
              goto LABEL_51;
            case 'b':
              LOBYTE(v37) = 8;
              goto LABEL_52;
            case 'e':
              v19 = 27;
              goto LABEL_51;
            case 'f':
              v19 = 12;
              goto LABEL_51;
            case 'n':
              LOBYTE(v37) = 10;
              goto LABEL_52;
            case 'r':
              v19 = 13;
              goto LABEL_51;
            case 't':
              goto LABEL_25;
            case 'u':
              if ((unint64_t)sub_216B1E67C((uint64_t)&v41) < 5)
                goto LABEL_53;
              LODWORD(v36) = 0;
              v37 = sub_216B2864C(&v41, 1uLL, 4uLL);
              v38 = v21;
              if ((sub_216B2B9D4(&v37, 0x10u, &v36) & 1) != 0)
              {
                v22 = 65533;
                LODWORD(v36) = 65533;
              }
              else
              {
                v22 = v36;
              }
              sub_216B35868(v22, (uint64_t)a5);
              v15 = 4;
              break;
            case 'v':
              v19 = 11;
              goto LABEL_51;
            case 'x':
              if ((unint64_t)sub_216B1E67C((uint64_t)&v41) < 3)
                goto LABEL_53;
              LODWORD(v36) = 0;
              v37 = sub_216B2864C(&v41, 1uLL, 2uLL);
              v38 = v23;
              if ((sub_216B2B9D4(&v37, 0x10u, &v36) & 1) != 0)
              {
                v24 = 65533;
                LODWORD(v36) = 65533;
              }
              else
              {
                v24 = v36;
              }
              sub_216B35868(v24, (uint64_t)a5);
              v15 = 2;
              break;
            default:
              goto LABEL_64;
          }
LABEL_9:
          v41 = sub_216B2864C(&v41, v15, 0xFFFFFFFFFFFFFFFFLL);
          v42 = v16;
LABEL_53:
          v41 = sub_216B2864C(&v41, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
          v42 = v27;
          goto LABEL_54;
        }
        if (v18 > 46)
        {
          switch(v18)
          {
            case 'L':
              v20 = 8232;
              goto LABEL_46;
            case 'M':
            case 'O':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
              goto LABEL_64;
            case 'N':
              v20 = 133;
              goto LABEL_46;
            case 'P':
              v20 = 8233;
LABEL_46:
              sub_216B35868(v20, (uint64_t)a5);
              goto LABEL_53;
            case 'U':
              if ((unint64_t)sub_216B1E67C((uint64_t)&v41) < 9)
                goto LABEL_53;
              LODWORD(v36) = 0;
              v37 = sub_216B2864C(&v41, 1uLL, 8uLL);
              v38 = v25;
              if ((sub_216B2B9D4(&v37, 0x10u, &v36) & 1) != 0)
              {
                v26 = 65533;
                LODWORD(v36) = 65533;
              }
              else
              {
                v26 = v36;
              }
              sub_216B35868(v26, (uint64_t)a5);
              v15 = 8;
              goto LABEL_9;
            default:
              if (v18 == 47)
              {
                v19 = 47;
                goto LABEL_51;
              }
              if (v18 != 48)
              {
LABEL_64:
                sub_216B36038(&v37);
                v34 = sub_216B1E600((uint64_t)&v41);
                sub_216B1E684(&v36, v34, 1);
                v39 = v36;
                sub_216B25FA8((uint64_t)&v36, "Unrecognized escape code!");
                sub_216B38788(a1, (uint64_t)&v36, (uint64_t)&v37);
                sub_216B1E678((int)&v43, &byte_216C19659);
                return v43;
              }
              LOBYTE(v37) = 0;
              break;
          }
LABEL_52:
          sub_216B1FBBC((uint64_t)a5, &v37);
          goto LABEL_53;
        }
        if (v18 <= 12)
        {
          if (v18 == 9)
          {
LABEL_25:
            LOBYTE(v37) = 9;
            goto LABEL_52;
          }
          if (v18 != 10)
            goto LABEL_64;
        }
        else if (v18 != 13)
        {
          if (v18 == 32)
          {
            v19 = 32;
          }
          else
          {
            if (v18 != 34)
              goto LABEL_64;
            v19 = 34;
          }
LABEL_51:
          LOBYTE(v37) = v19;
          goto LABEL_52;
        }
LABEL_5:
        if ((unint64_t)sub_216B1E67C((uint64_t)&v41) >= 2
          && (sub_216B26288(&v41, 1) == 13 || sub_216B26288(&v41, 1) == 10))
        {
          v15 = 1;
          goto LABEL_9;
        }
        goto LABEL_53;
      }
LABEL_54:
      sub_216B1E678((int)v35, "\\\r\n");
      a4 = sub_216B31D14(&v41, v35[0], v35[1], 0);
      if (a4 == -1)
        goto LABEL_62;
    }
    LOBYTE(v37) = 10;
    sub_216B1FBBC((uint64_t)a5, &v37);
    goto LABEL_5;
  }
LABEL_62:
  v28 = sub_216B1E67C((uint64_t)a5);
  v29 = (char *)sub_216B1E600((uint64_t)&v41);
  v30 = (char *)sub_216B1E608(&v41);
  sub_216B39408(a5, v28, v29, v30);
  v31 = sub_216B1E600((uint64_t)a5);
  v32 = sub_216B1FF14((uint64_t)a5);
  sub_216B1E684(&v43, v31, v32);
  return v43;
}

_BYTE *sub_216B39408(const void **a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v8 = sub_216B1E600((uint64_t)a1);
  v9 = a2 - v8;
  if (sub_216B1E67C((uint64_t)a1) == a2)
  {
    sub_216B202D8(a1, a3, a4);
    return (_BYTE *)(sub_216B1E600((uint64_t)a1) + v9);
  }
  else
  {
    v10 = sub_216B20378((uint64_t)a3, (uint64_t)a4);
    v11 = sub_216B1FF14((uint64_t)a1);
    sub_216B28114(a1, v11 + v10);
    v12 = sub_216B1E600((uint64_t)a1);
    v13 = (_BYTE *)(v12 + v9);
    v14 = sub_216B1E67C((uint64_t)a1) - (_QWORD)v13;
    v15 = (_BYTE *)sub_216B1E67C((uint64_t)a1);
    v16 = sub_216B1E67C((uint64_t)a1);
    if (v14 >= v10)
    {
      sub_216B20C64(&v25, v16 - v10);
      v22 = sub_216B1E67C((uint64_t)a1);
      sub_216B20C64(&v24, v22);
      sub_216B3B474(a1, v25, v24);
      sub_216B3B514();
      sub_216B205DC();
    }
    else
    {
      sub_216B203A4((uint64_t)a1, v16 + v10);
      v17 = sub_216B1E67C((uint64_t)a1);
      sub_216B3B518(v13, (int)v15, (void *)(v17 - (v15 - v13)));
      if (v15 != v13)
      {
        v18 = v12 + a2 - v8 - (_QWORD)v15;
        v19 = v13;
        do
        {
          v20 = *a3++;
          *v19++ = v20;
        }
        while (!__CFADD__(v18++, 1));
      }
      sub_216B2A5E4(a3, (uint64_t)a4, v15);
    }
  }
  return v13;
}

uint64_t sub_216B395A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v4 = a1 + 1;
  v5 = a1[1];
  v8 = sub_216B32040(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL) + 1;
  v6 = (_QWORD *)sub_216B24E80(v4, &v8);
  return sub_216B3A360(a1, v5 - *v6);
}

uint64_t sub_216B39600(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t *v10;
  _BYTE v11[40];

  result = *(_QWORD *)(a1 + 72);
  if (!result)
  {
    v5 = *(_DWORD *)(sub_216B383D4(a1, a2) + 16);
    if (v5 > 15)
    {
      if (v5 == 16)
      {
        sub_216B387D8(a1, v4, (uint64_t)v11);
        goto LABEL_12;
      }
      if (v5 != 17)
        goto LABEL_12;
    }
    else
    {
      if (v5)
        v6 = v5 == 8;
      else
        v6 = 1;
      if (!v6)
      {
LABEL_12:
        v8 = *(_DWORD *)(sub_216B383D4(a1, v4) + 16);
        v7 = a1;
        if (v8 != 17 && v8 != 8)
        {
          result = sub_216B38828(a1, v4);
LABEL_19:
          *(_QWORD *)(a1 + 72) = result;
          return result;
        }
LABEL_17:
        v10 = (uint64_t *)sub_216B38C60(v7, v4);
        result = sub_216B396BC(72, v10, 0x10uLL);
        if (result)
          result = sub_216B396CC(result, *(_QWORD *)(a1 + 8));
        goto LABEL_19;
      }
    }
    v7 = a1;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_216B396BC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_216B2663C(a2, a1, a3);
}

uint64_t sub_216B396D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _BYTE v12[40];

  result = *(_QWORD *)(a1 + 80);
  if (!result)
  {
    v4 = sub_216B39600(a1, a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (sub_216B38CC4(a1, v5))
      goto LABEL_5;
    v7 = sub_216B383D4(a1, v6);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 > 0x11)
      goto LABEL_13;
    if (((1 << v8) & 0x18901) != 0)
      goto LABEL_5;
    if (v8 == 17)
    {
      sub_216B387D8(a1, v6, (uint64_t)v12);
      v11 = *(_DWORD *)(sub_216B383D4(a1, v10) + 16);
      if (v11 != 16 && v11 != 8)
      {
        result = sub_216B38828(a1, v6);
LABEL_7:
        *(_QWORD *)(a1 + 80) = result;
        return result;
      }
    }
    else
    {
LABEL_13:
      sub_216B25FA8((uint64_t)v12, "Unexpected token in Key Value.");
      sub_216B38788(a1, (uint64_t)v12, v7);
    }
LABEL_5:
    v9 = (uint64_t *)sub_216B38C60(a1, v6);
    result = sub_216B396BC(72, v9, 0x10uLL);
    if (result)
      result = sub_216B396CC(result, *(_QWORD *)(a1 + 8));
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_216B397D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  char *v10;
  _BYTE v11[40];
  _OWORD v12[2];
  uint64_t v13;

  result = sub_216B38CC4(a1, a2);
  if ((_DWORD)result)
    goto LABEL_19;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (*(_DWORD *)(a1 + 72) == 2)
      goto LABEL_19;
  }
  result = sub_216B383D4(a1, v4);
  v7 = *(_QWORD *)(result + 32);
  v8 = *(_OWORD *)(result + 16);
  v12[0] = *(_OWORD *)result;
  v12[1] = v8;
  v13 = v7;
  if ((v8 & 0xFFFFFFFD) != 0x10)
  {
    if (*(_DWORD *)(a1 + 72))
    {
      if ((_DWORD)v8)
      {
        if ((_DWORD)v8 != 15)
        {
          if ((_DWORD)v8 == 11)
          {
            sub_216B387D8(a1, v6, (uint64_t)v11);
            return sub_216B397D4(a1);
          }
          v10 = "Unexpected token. Expected Key, Flow Entry, or Flow Mapping End.";
          goto LABEL_18;
        }
LABEL_15:
        result = sub_216B387D8(a1, v6, (uint64_t)v11);
      }
    }
    else if ((_DWORD)v8)
    {
      if ((_DWORD)v8 != 8)
      {
        v10 = "Unexpected token. Expected Key or Block End";
LABEL_18:
        sub_216B25FA8((uint64_t)v11, v10);
        result = sub_216B38788(a1, (uint64_t)v11, (uint64_t)v12);
        goto LABEL_19;
      }
      goto LABEL_15;
    }
LABEL_19:
    *(_BYTE *)(a1 + 77) = 1;
    *(_QWORD *)(a1 + 80) = 0;
    return result;
  }
  v9 = (uint64_t *)sub_216B38C60(a1, v6);
  result = sub_216B396BC(88, v9, 0x10uLL);
  if (result)
    result = sub_216B398FC((_QWORD *)result, *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

uint64_t sub_216B39900(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[40];
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  result = sub_216B38CC4(a1, a2);
  if ((_DWORD)result)
    goto LABEL_2;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = sub_216B383D4(a1, v4);
  v7 = *(_QWORD *)(result + 32);
  v8 = *(_OWORD *)(result + 16);
  v13 = *(_OWORD *)result;
  v14 = v8;
  v15 = v7;
  v9 = *(_DWORD *)(a1 + 72);
  if (v9 == 2)
  {
    if ((_DWORD)v14 == 7)
      goto LABEL_14;
LABEL_2:
    *(_BYTE *)(a1 + 77) = 1;
    *(_QWORD *)(a1 + 80) = 0;
    return result;
  }
  if (v9 == 1)
  {
    switch((int)v14)
    {
      case 0:
        goto LABEL_2;
      case 2:
      case 5:
      case 6:
        v10 = "Could not find closing ]!";
        goto LABEL_18;
      case 11:
        sub_216B387D8(a1, v6, (uint64_t)v12);
        *(_BYTE *)(a1 + 78) = 1;
        return sub_216B39900(a1);
      case 13:
        goto LABEL_19;
      default:
        if (!*(_BYTE *)(a1 + 78))
        {
          v10 = "Expected , between entries!";
          goto LABEL_18;
        }
        result = sub_216B38828(a1, v6);
        *(_QWORD *)(a1 + 80) = result;
        if (!result)
          *(_BYTE *)(a1 + 77) = 1;
        *(_BYTE *)(a1 + 78) = 0;
        break;
    }
    return result;
  }
  if (v9)
    return result;
  if (!(_DWORD)v14)
    goto LABEL_2;
  if ((_DWORD)v14 == 8)
  {
LABEL_19:
    result = sub_216B387D8(a1, v6, (uint64_t)v12);
    goto LABEL_2;
  }
  if ((_DWORD)v14 != 7)
  {
    v10 = "Unexpected token. Expected Block Entry or Block End.";
LABEL_18:
    sub_216B25FA8((uint64_t)v12, v10);
    result = sub_216B38788(a1, (uint64_t)v12, (uint64_t)&v13);
    goto LABEL_2;
  }
LABEL_14:
  sub_216B387D8(a1, v6, (uint64_t)v12);
  result = sub_216B38828(a1, v11);
  *(_QWORD *)(a1 + 80) = result;
  if (!result)
    goto LABEL_2;
  return result;
}

uint64_t *sub_216B39A78(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11[2];

  *a1 = a2;
  sub_216B39B60(a1 + 1);
  a1[18] = 0;
  sub_216B39B64((uint64_t)(a1 + 19), v3);
  sub_216B1E678((int)v10, "!");
  sub_216B1E678((int)v11, "!");
  v4 = (_OWORD *)sub_216B39B68((uint64_t)(a1 + 19), v11);
  *v4 = v10[0];
  sub_216B1E678((int)v10, "tag:yaml.org,2002:");
  sub_216B1E678((int)v11, "!!");
  v5 = (_OWORD *)sub_216B39B68((uint64_t)(a1 + 19), v11);
  *v5 = v10[0];
  if (sub_216B39BD0(a1, v6))
    sub_216B39C30(a1, 5);
  if (*(_DWORD *)(sub_216B387C0(a1, v7) + 16) == 5)
    sub_216B38800(a1, v8, (uint64_t)v10);
  return a1;
}

uint64_t sub_216B39B68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v10 = sub_216B3B8B4((uint64_t)a2);
  nullsub_1(v10, v4);
  v11[0] = sub_216B3B7E4(a1, a2, (uint64_t)&unk_216C12C23, (uint64_t)&v10, (uint64_t)&v9);
  v11[1] = v5;
  v6 = sub_216B3B45C((uint64_t)v11);
  return nullsub_1(v6, v7) + 16;
}

uint64_t sub_216B39BD0(uint64_t *a1, uint64_t a2)
{
  char i;
  uint64_t v4;
  int v5;

  for (i = 0; ; i = 1)
  {
    while (1)
    {
      v5 = *(_DWORD *)(sub_216B387C0(a1, a2) + 16);
      if (v5 != 3)
        break;
      sub_216B39DE4(a1, v4);
      i = 1;
    }
    if (v5 != 4)
      break;
    sub_216B39CDC(a1, v4);
  }
  return i & 1;
}

BOOL sub_216B39C30(uint64_t *a1, uint64_t a2)
{
  int v2;
  int v4;
  _BYTE v6[24];
  _BYTE v7[16];
  int v8;

  v2 = a2;
  sub_216B38800(a1, a2, (uint64_t)v7);
  v4 = v8;
  if (v8 != v2)
  {
    sub_216B25FA8((uint64_t)v6, "Unexpected token");
    sub_216B38C7C(a1, (uint64_t)v6, (uint64_t)v7);
  }
  return v4 == v2;
}

uint64_t sub_216B39C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = a1[18];
  if (!result)
  {
    result = sub_216B38840(a1, a2);
    a1[18] = result;
  }
  return result;
}

_QWORD *sub_216B39CDC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13[2];
  _QWORD v14[2];
  uint64_t v15[2];
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[24];
  __int128 v22;

  sub_216B38800(a1, a2, (uint64_t)v21);
  v20 = v22;
  sub_216B1E678((int)v17, " \t");
  v3 = sub_216B31D14(&v20, v17[0], v17[1], 0);
  v18 = sub_216B2864C(&v20, v3, 0xFFFFFFFFFFFFFFFFLL);
  v19 = v4;
  sub_216B1E678((int)v16, " \t");
  *(_QWORD *)&v20 = sub_216B39E04(&v18, v16[0], v16[1]);
  *((_QWORD *)&v20 + 1) = v5;
  sub_216B1E678((int)v15, " \t");
  v6 = sub_216B31D14(&v20, v15[0], v15[1], 0);
  v18 = sub_216B2864C(&v20, 0, v6);
  v19 = v7;
  v14[0] = sub_216B2864C(&v20, v6, 0xFFFFFFFFFFFFFFFFLL);
  v14[1] = v8;
  sub_216B1E678((int)v13, " \t");
  v9 = sub_216B39E04(v14, v13[0], v13[1]);
  v11 = v10;
  result = (_QWORD *)sub_216B39E50((uint64_t)(a1 + 19), &v18);
  *result = v9;
  result[1] = v11;
  return result;
}

uint64_t sub_216B39DE4(uint64_t *a1, uint64_t a2)
{
  _BYTE v3[40];

  return sub_216B38800(a1, a2, (uint64_t)v3);
}

uint64_t sub_216B39E04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t *v5;
  uint64_t v7;

  v4 = a1 + 1;
  v7 = sub_216B31EC4(a1, a2, a3, 0);
  v5 = (unint64_t *)sub_216B24E80(v4, &v7);
  return sub_216B3A5FC(a1, *v5);
}

uint64_t sub_216B39E50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v10 = sub_216B3BF48((uint64_t)a2);
  nullsub_1(v10, v4);
  v11[0] = sub_216B3B7E4(a1, a2, (uint64_t)&unk_216C12C23, (uint64_t)&v10, (uint64_t)&v9);
  v11[1] = v5;
  v6 = sub_216B3B45C((uint64_t)v11);
  return nullsub_1(v6, v7) + 16;
}

uint64_t sub_216B39EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = j_j_nullsub_1(a1);
  return nullsub_1(v1, v2);
}

uint64_t sub_216B39ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_216B39600(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = sub_216B396D0(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *sub_216B39F10(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_216B2C030(a1);
  sub_216B2C030(v2 + 3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

uint64_t sub_216B39F44(uint64_t a1)
{
  sub_216B39F7C(a1 + 280);
  sub_216B1FF6C(a1 + 240);
  sub_216B39F80(a1 + 56);
  return a1;
}

_QWORD *sub_216B39F88(_QWORD *a1)
{
  void *v2;

  if (!sub_216B2081C(a1))
  {
    v2 = (void *)sub_216B1E600((uint64_t)a1);
    free(v2);
  }
  return a1;
}

uint64_t sub_216B39FC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 176))
  {
    sub_216B35FBC(a1);
    v2 = sub_216B39FFC(a1);
    nullsub_1(v2, v3);
  }
  return sub_216B3A004(a1);
}

uint64_t sub_216B39FFC(uint64_t a1)
{
  return j_nullsub_1(a1, *(_QWORD *)(a1 + 176));
}

uint64_t sub_216B3A008(uint64_t a1)
{
  sub_216B3A030(a1 + 40);
  return a1;
}

uint64_t sub_216B3A038(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;

  v2 = a1 + 16;
  v3 = (void **)sub_216B1E600(a1 + 16);
  v4 = (void **)sub_216B1E67C(v2);
  sub_216B3A0A0(a1, v3, v4);
  sub_216B3A104(a1);
  sub_216B1FF6C(a1 + 72);
  sub_216B1FF6C(v2);
  return a1;
}

void sub_216B3A0A0(uint64_t a1, void **a2, void **a3)
{
  void **v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = a1 + 16;
    v6 = a1 + 128;
    do
    {
      v7 = sub_216B1E600(v5);
      v8 = sub_216B2F408(v7, (uint64_t)v4);
      sub_216B26838(v8);
      v9 = *v4++;
      sub_216B3A164(v6, v9);
    }
    while (v4 != a3);
  }
}

void sub_216B3A104(uint64_t a1)
{
  int v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  int v6;
  void *v7;

  v1 = a1;
  v2 = a1 + 72;
  v3 = (void **)sub_216B1E600(a1 + 72);
  v4 = sub_216B1E67C(v2);
  if (v3 != (void **)v4)
  {
    v5 = (void **)v4;
    v6 = v1 + 128;
    do
    {
      v7 = *v3;
      v3 += 2;
      sub_216B3A164(v6, v7);
    }
    while (v3 != v5);
  }
}

void sub_216B3A164(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_216B3A16C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B3A1CC(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B3A19C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B3A1F8(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B3A1D0(uint64_t result, _BYTE *a2, _DWORD *a3)
{
  *(_BYTE *)result = *a2;
  *(_DWORD *)(result + 4) = *a3;
  return result;
}

_DWORD *sub_216B3A1E4(_DWORD *result, char *a2)
{
  *result = *a2;
  result[1] = *((_DWORD *)a2 + 1);
  return result;
}

_DWORD *sub_216B3A1FC(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  *result = *a2;
  result[1] = *a3;
  return result;
}

_QWORD *sub_216B3A210(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_216B3A240(a1);
  *((_DWORD *)v2 + 4) = 0;
  sub_216B26D14(v2 + 3);
  return a1;
}

_QWORD *sub_216B3A240(_QWORD *a1)
{
  _QWORD *result;

  result = sub_216B2C090(a1);
  result[1] = 0;
  return result;
}

uint64_t sub_216B3A25C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B3A28C(&v3, a1, a2);
  return v3;
}

_DWORD *sub_216B3A290(_DWORD *result, _DWORD *a2, int *a3)
{
  int v3;

  v3 = *a3;
  *result = *a2;
  result[1] = v3;
  return result;
}

double sub_216B3A2A0(_QWORD *a1, double *a2)
{
  double result;

  result = *a2;
  *a1 = *(_QWORD *)a2;
  return result;
}

BOOL sub_216B3A2AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!sub_216B3A30C(a1, (uint64_t)a2) && !sub_216B3A30C(a2, v4))
    return *a1 == *a2;
  result = sub_216B3A30C(a1, v4);
  if (result)
    return sub_216B3A30C(a2, v6);
  return result;
}

BOOL sub_216B3A30C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  return !v2 || !sub_216B3817C(v2, a2);
}

_QWORD *sub_216B3A334(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_216B2D410(a1);
  sub_216B2D410(v2 + 1);
  return a1;
}

uint64_t sub_216B3A360(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_216B1E67C((uint64_t)a1) - a2;
  return sub_216B2864C(a1, 0, v3);
}

uint64_t sub_216B3A390(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5[2];
  uint64_t v6[2];

  sub_216B26D14(v6);
  sub_216B26D14(v5);
  result = sub_216B3833C((uint64_t)a1, 0, a2, v6[0], v6[1], v5[0], v5[1]);
  *a1 = off_24D5EF9B8;
  return result;
}

uint64_t sub_216B3A3EC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5[2];
  uint64_t v6[2];

  sub_216B26D14(v6);
  sub_216B26D14(v5);
  result = sub_216B3833C((uint64_t)a1, 2, a2, v6[0], v6[1], v5[0], v5[1]);
  *a1 = off_24D5EFA18;
  a1[9] = 0;
  a1[10] = 0;
  return result;
}

uint64_t sub_216B3A44C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9[2];
  uint64_t v10[2];

  sub_216B26D14(v10);
  sub_216B26D14(v9);
  result = sub_216B3833C((uint64_t)a1, 5, a2, v10[0], v10[1], v9[0], v9[1]);
  *a1 = off_24D5EFAA8;
  a1[9] = a3;
  a1[10] = a4;
  return result;
}

uint64_t sub_216B3A4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result;

  result = sub_216B3833C(a1, 4, a2, a3, a4, a5, a6);
  *(_QWORD *)result = off_24D5EFA78;
  *(_DWORD *)(result + 72) = a7;
  *(_WORD *)(result + 76) = 1;
  *(_BYTE *)(result + 78) = 1;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_216B3A514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result;

  result = sub_216B3833C(a1, 3, a2, a3, a4, a5, a6);
  *(_QWORD *)result = off_24D5EFA48;
  *(_DWORD *)(result + 72) = a7;
  *(_WORD *)(result + 76) = 1;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_216B3A568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)&v16 = a7;
  *((_QWORD *)&v16 + 1) = a8;
  v9 = sub_216B3833C(a1, 1, a2, a3, a4, a5, a6);
  *(_QWORD *)v9 = off_24D5EF9E8;
  *(_OWORD *)(v9 + 72) = v16;
  v10 = sub_216B1E600((uint64_t)&v16);
  v11 = sub_216B2D29C(v10);
  v12 = sub_216B1E608(&v16);
  v13 = sub_216B2D29C(v12);
  sub_216B1E684(&v15, v11, v13);
  *(_OWORD *)(a1 + 16) = v15;
  return a1;
}

uint64_t sub_216B3A5FC(_QWORD *a1, unint64_t a2)
{
  return sub_216B2864C(a1, a2, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t sub_216B3A604(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 76))
  {
    v4 = sub_216B3A680(result);
    v3 = sub_216B381FC();
    result = sub_216B3760C(&v4, &v3);
    if ((_DWORD)result)
    {
      do
      {
        v1 = sub_216B3A6B4((uint64_t)&v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
        sub_216B3A6C0(&v4, v2);
        result = sub_216B3760C(&v4, &v3);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t sub_216B3A680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_BYTE *)(a1 + 76) = 0;
  sub_216B20C64(&v3, a1);
  sub_216B3A6C0(&v3, v1);
  return v3;
}

uint64_t sub_216B3A6B4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 80);
}

uint64_t *sub_216B3A6C0(uint64_t *a1, uint64_t a2)
{
  sub_216B397D4(*a1, a2);
  if (!*(_QWORD *)(*a1 + 80))
    *a1 = 0;
  return a1;
}

uint64_t sub_216B3A6F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 76))
  {
    v4 = sub_216B3A774(result);
    v3 = sub_216B381FC();
    result = sub_216B3760C(&v4, &v3);
    if ((_DWORD)result)
    {
      do
      {
        v1 = sub_216B3A6B4((uint64_t)&v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
        sub_216B3A7A8(&v4, v2);
        result = sub_216B3760C(&v4, &v3);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t sub_216B3A774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_BYTE *)(a1 + 76) = 0;
  sub_216B20C64(&v3, a1);
  sub_216B3A7A8(&v3, v1);
  return v3;
}

uint64_t *sub_216B3A7A8(uint64_t *a1, uint64_t a2)
{
  sub_216B39900(*a1, a2);
  if (!*(_QWORD *)(*a1 + 80))
    *a1 = 0;
  return a1;
}

void sub_216B3A7E0(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B3A800(a2);
    j__free(v2);
  }
}

uint64_t sub_216B3A804(uint64_t a1)
{
  sub_216B3A834(a1 + 152);
  sub_216B3A034(a1 + 8);
  return a1;
}

uint64_t sub_216B3A840(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B3A870(a1, v3);
  return a1;
}

uint64_t sub_216B3A870(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    sub_216B3A870(result, *a2);
    sub_216B3A870(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = j_nullsub_1(a2 + 4, v6);
    sub_216B3A8F8(v5, v7);
    return sub_216B3A900(v5, a2, 1);
  }
  return result;
}

uint64_t sub_216B3A8D8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)sub_216B3A914(a1, a2);
}

uint64_t sub_216B3A8F0(uint64_t a1, uint64_t a2)
{
  return j_nullsub_1(a1 + 8, a2);
}

uint64_t sub_216B3A8F8(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a2, a2);
}

uint64_t sub_216B3A904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, a3 << 6, 8);
}

uint64_t sub_216B3A914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = j_nullsub_1(a1 + 8, a2);
  return nullsub_1(v2, v3);
}

uint64_t sub_216B3A92C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (sub_216B25CF8(a1, a2))
    return sub_216B26FD4(a1, v3) - 1;
  else
    return 22;
}

uint64_t sub_216B3A964(std::string *a1, std::string::size_type a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5, std::string::size_type a6, std::string::size_type a7)
{
  uint64_t v11;

  std::string::__grow_by(a1, a2, a3, a4, a5, a6, a7);
  v11 = a4 - a6 + a7;
  sub_216B25D68((uint64_t)a1, v11);
  return nullsub_1(a1, v11);
}

uint64_t sub_216B3A9B4(uint64_t a1, uint64_t a2)
{
  if (sub_216B25CF8(a1, a2))
    return sub_216B25D68(a1, a2);
  else
    return sub_216B25D8C(a1, a2);
}

uint64_t sub_216B3A9FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B3AA28();
  *(_QWORD *)(a1 + 176) = j_nullsub_1(v2, v3);
  return a1;
}

uint64_t sub_216B3AA2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B3AA58();
  sub_216B3AA5C(v2 + 40);
  return a1;
}

uint64_t sub_216B3AA60(uint64_t a1)
{
  return sub_216B264A8(a1, 4u);
}

_QWORD *sub_216B3AA74(_QWORD *a1)
{
  return sub_216B2087C(a1, (uint64_t)(a1 + 3), 96);
}

uint64_t sub_216B3AA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;

  v5 = a3;
  for (i = a2; sub_216B3760C(&i, &v5); i = sub_216B3AADC(a1, i))
    ;
  return v5;
}

uint64_t sub_216B3AADC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v2 = sub_216B3AB08(a1, &v5);
  nullsub_1(v2, v3);
  return v5;
}

_QWORD *sub_216B3AB08(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = (_QWORD *)sub_216B1E600((uint64_t)a2);
  v5 = (_QWORD *)sub_216B3ABC8((uint64_t)v4);
  v6 = sub_216B262E0((uint64_t)v4);
  v7 = v6;
  if (v4 == *(_QWORD **)(a1 + 176))
    *(_QWORD *)(a1 + 176) = v5;
  else
    sub_216B3ABCC(v6, (uint64_t)v5);
  sub_216B20C64(v5, v7);
  sub_216B20C64(&v9, (uint64_t)v5);
  *a2 = v9;
  nullsub_1(a1 + 40, v4);
  sub_216B3ABCC((uint64_t)v4, 0);
  sub_216B20C64(v4, 0);
  return v4;
}

_QWORD *sub_216B3ABD0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = a1;
  if (a1 != a2)
  {
    while (!sub_216B3AC28(v3, a3))
    {
      v3 += 3;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216B3AC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_216B35580(&v2, a2);
}

uint64_t sub_216B3AC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_216B1E67C(a1);
  v7 = sub_216B3ACBC(a3, v6, a2);
  v8 = sub_216B1E67C(a1);
  nullsub_1(v7, v8);
  sub_216B203A4(a1, v7);
  return a2;
}

uint64_t sub_216B3ACC0()
{
  uint64_t v0;

  sub_216B3ACD8();
  return v0;
}

uint64_t sub_216B3ACE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (char *)j_j_nullsub_1(a3);
  v9 = sub_216B3AD6C((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B3AD6C(int a1, const void *a2, uint64_t a3, char *__dst)
{
  return sub_216B3AD7C(a2, a3, __dst);
}

uint64_t sub_216B3AD7C(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216B3ADD0(__dst, a1, (a2 - (uint64_t)a1) >> 3);
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

void *sub_216B3ADD0(void *__dst, const void *a2, uint64_t a3)
{
  if (a3)
    memmove(__dst, a2, 8 * a3);
  return __dst;
}

char *sub_216B3AE04(const void **a1)
{
  return sub_216B2CE7C(a1, a1 + 3, 0, 24);
}

uint64_t sub_216B3AE1C()
{
  uint64_t v0;

  sub_216B3AE34();
  return v0;
}

uint64_t sub_216B3AE38(uint64_t a1, uint64_t a2, void *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_216B3AEA8(a1, a2);
  v7 = sub_216B3AED0(v5, v6, a3);
  v9 = v8;
  v12 = sub_216B3AED4(a1, v7);
  v11 = sub_216B3557C((uint64_t)a3, v9);
  return sub_216B206E0((uint64_t)&v12, (uint64_t)&v11);
}

uint64_t sub_216B3AEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return sub_216B206E0((uint64_t)&v4, (uint64_t)&v3);
}

uint64_t sub_216B3AED8(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216B3AF38(__dst, a1, 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3));
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

void *sub_216B3AF38(void *__dst, const void *a2, uint64_t a3)
{
  if (a3)
    memmove(__dst, a2, 24 * a3 - 3);
  return __dst;
}

uint64_t sub_216B3AF70(uint64_t a1)
{
  return sub_216B1E67C(a1) - 4;
}

uint64_t sub_216B3AF88(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1) - 4;
  return sub_216B203A4(a1, v2);
}

uint64_t sub_216B3AFB0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v5 = (_QWORD *)sub_216B1E600((uint64_t)&v8);
  v6 = sub_216B262E0((uint64_t)v5);
  sub_216B3ABCC((uint64_t)a3, (uint64_t)v5);
  sub_216B20C64(a3, v6);
  if (v5 == *(_QWORD **)(a1 + 176))
    *(_QWORD *)(a1 + 176) = a3;
  else
    sub_216B3ABCC(v6, (uint64_t)a3);
  sub_216B20C64(v5, (uint64_t)a3);
  nullsub_1(a1 + 40, a3);
  sub_216B20C64(&v9, (uint64_t)a3);
  return v9;
}

__n128 sub_216B3B058(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v3 = sub_216B3B08C(a1, 1);
  v4 = *(_QWORD *)(a2 + 32);
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(__n128 *)(v3 + 16) = result;
  *(_QWORD *)(v3 + 32) = v4;
  return result;
}

uint64_t sub_216B3B08C(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, 40 * a2, 8);
}

uint64_t sub_216B3B09C(uint64_t a1)
{
  return sub_216B1E67C(a1) - 24;
}

uint64_t sub_216B3B0B4(uint64_t a1)
{
  sub_216B3B0DC(a1, 0);
  return a1;
}

void sub_216B3B0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B3B138(v7, v4);
  }
}

void sub_216B3B138(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B35690(a2);
    j__free(v2);
  }
}

uint64_t sub_216B3B158(uint64_t a1)
{
  sub_216B3819C(a1, 0);
  return a1;
}

uint64_t sub_216B3B180(uint64_t a1)
{
  return sub_216B2A8C8(a1, 1u);
}

uint64_t *sub_216B3B188(uint64_t *a1, uint64_t a2)
{
  *a1 = sub_216B262E0(a2);
  a1[1] = sub_216B2BA30(a2);
  return a1;
}

uint64_t sub_216B3B1C4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)sub_216B3A8D8(a1, (uint64_t)a2);
  v6 = sub_216B3A914(a1, v5);
  v13 = sub_216B3B270(a1, (uint64_t)a2, v4, v6);
  v12 = sub_216B3B300(a1, v7);
  if (sub_216B3B2E8(&v13, &v12)
    && (v9 = sub_216B2C144(a1, v8), v10 = sub_216B3B360((uint64_t)&v13), !sub_216B3B32C(v9, a2, v10)))
  {
    return v13;
  }
  else
  {
    return sub_216B3B300(a1, v8);
  }
}

uint64_t sub_216B3B270(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  _BOOL4 v9;
  _QWORD *v10;
  uint64_t v12;

  if (a3)
  {
    v5 = a3;
    do
    {
      v8 = sub_216B2C144(a1, a2);
      v9 = sub_216B3B378(v8, (uint64_t)(v5 + 4), a2);
      v10 = v5 + 1;
      if (!v9)
      {
        v10 = v5;
        a4 = (uint64_t)v5;
      }
      v5 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  sub_216B20C64(&v12, a4);
  return v12;
}

BOOL sub_216B3B2E8(_QWORD *a1, _QWORD *a2)
{
  return !sub_216B37620(a1, a2);
}

uint64_t sub_216B3B300(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = sub_216B3A914(a1, a2);
  sub_216B20C64(&v4, v2);
  return v4;
}

BOOL sub_216B3B32C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = nullsub_1(a3, a2);
  return sub_216B3B3AC(a1, a2, v5);
}

uint64_t sub_216B3B360(uint64_t a1)
{
  return sub_216B1E600(a1) + 32;
}

BOOL sub_216B3B378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)nullsub_1(a2, a2);
  return sub_216B3B3AC(a1, v5, a3);
}

BOOL sub_216B3B3AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_216B3B3BC(*a2, a2[1], *(const void **)a3, *(_QWORD *)(a3 + 8));
}

BOOL sub_216B3B3BC(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return sub_216B3B3F0((uint64_t)v5, a3, a4) == -1;
}

uint64_t sub_216B3B3F0(uint64_t a1, const void *a2, unint64_t a3)
{
  const void *v6;
  size_t v7;
  int v8;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;

  v6 = *(const void **)a1;
  v7 = sub_216B26D84(*(_QWORD *)(a1 + 8), a3);
  v8 = sub_216B20284(v6, a2, v7);
  if (v8)
    return (v8 >> 31) | 1u;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = v10 == a3;
  if (v10 < a3)
    v12 = -1;
  else
    v12 = 1;
  if (v11)
    return 0;
  else
    return v12;
}

uint64_t sub_216B3B45C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216B1E600(a1);
  return nullsub_1(v1 + 32, v2);
}

uint64_t sub_216B3B474(const void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;

  v6 = sub_216B2AA20(a2, a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > v7 - sub_216B1E67C((uint64_t)a1))
  {
    v8 = sub_216B1FF14((uint64_t)a1);
    sub_216B20384(a1, v8 + v6);
  }
  v9 = (_BYTE *)sub_216B1E67C((uint64_t)a1);
  sub_216B3B51C(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

uint64_t sub_216B3B51C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  sub_216B3B534(a1, a2, a3);
  return v3;
}

uint64_t sub_216B3B534(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2;
  v6 = a1;
  for (i = a3; sub_216B3B5C8((uint64_t)&v6, (uint64_t)&v5); ++i)
  {
    if ((sub_216B2043C() & 1) != 0)
      break;
    *i = *(_BYTE *)sub_216B1E600((uint64_t)&v6);
    sub_216B2AB40(&v6);
  }
  sub_216B20444(&v7, &v6, &i);
  return v7;
}

BOOL sub_216B3B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return v3 != sub_216B1E600(a2);
}

uint64_t sub_216B3B5FC()
{
  uint64_t v0;

  sub_216B3B614();
  return v0;
}

uint64_t sub_216B3B61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = j_j_nullsub_1(a3);
  v9 = sub_216B3B6A8((uint64_t)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B3B6A8(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  return sub_216B210C0(a2, a3, a4);
}

_QWORD *sub_216B3B6B8(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_216B2D768(a1 + 2);
  sub_216B3B6F0(a1 + 9);
  a1[15] = 0;
  return a1;
}

uint64_t sub_216B3B6F4(uint64_t a1)
{
  return sub_216B2A8C8(a1, 0);
}

uint64_t sub_216B3B6FC(uint64_t a1, uint64_t a2)
{
  char v4;

  j_nullsub_1(&v4, a2);
  return sub_216B3B734(a1, &v4);
}

uint64_t sub_216B3B738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  sub_216B3B798();
  v8 = 0;
  sub_216B3B79C(a1 + 16, &v8, a2);
  v5 = sub_216B3A914(a1, v4);
  *(_QWORD *)nullsub_1(a1, v6) = v5;
  return a1;
}

uint64_t sub_216B3B7A0()
{
  uint64_t v0;

  v0 = sub_216B3A258();
  return j_j_nullsub_1(v0);
}

uint64_t sub_216B3B7B4(_QWORD *a1, int *a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = sub_216B3B7D8(a1, a2);
  return nullsub_1(v4, a3);
}

_QWORD *sub_216B3B7D8(_QWORD *result, int *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_216B3B7E4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  uint64_t *v19;
  uint64_t v20;

  v9 = sub_216B3B8DC(a1, &v19, a2);
  v10 = *v9;
  v18 = 0;
  if (!v10)
  {
    v11 = v9;
    sub_216B3B998(a1, a3, a4, a5, (uint64_t)v17);
    v12 = v19;
    v14 = (_QWORD *)sub_216B25CA8((uint64_t)v17, v13);
    sub_216B3BA48(a1, (uint64_t)v12, v11, v14);
    v10 = sub_216B28054((uint64_t)v17, v15);
    v18 = 1;
    sub_216B3BAD0(v17);
  }
  sub_216B20C64(v17, v10);
  sub_216B31104(&v20, v17, &v18);
  return v20;
}

uint64_t sub_216B3B8B4(uint64_t a1)
{
  uint64_t v2;

  sub_216B3BF3C(&v2, a1);
  return v2;
}

uint64_t *sub_216B3B8DC(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_216B3A8D8(a1, (uint64_t)a2);
  v8 = sub_216B3BAD4(a1, v7);
  if (v6)
  {
    v10 = (uint64_t *)v8;
    do
    {
      while (1)
      {
        v11 = (uint64_t *)v6;
        v12 = sub_216B2C144(a1, v9);
        v13 = v6 + 32;
        if (!sub_216B3B32C(v12, a3, v13))
          break;
        v6 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_10;
      }
      v14 = sub_216B2C144(a1, v9);
      if (!sub_216B3B378(v14, v13, (uint64_t)a3))
        break;
      v10 = v11 + 1;
      v6 = v11[1];
    }
    while (v6);
  }
  else
  {
    v11 = (uint64_t *)sub_216B3A914(a1, v9);
    v10 = v11;
  }
LABEL_10:
  *a2 = v11;
  return v10;
}

uint64_t sub_216B3B998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = sub_216B3A8F0(a1, a2);
  v10 = sub_216B3BAD8(v9, 1);
  sub_216B3BADC((uint64_t)&v18, v9, 0);
  v11 = sub_216B3BAE0(a5, v10);
  v13 = sub_216B25CA8(v11, v12);
  v15 = j_nullsub_1(v13 + 32, v14);
  sub_216B3BAE4(v9, v15, a2, a3, a4);
  result = sub_216B3BAE8(a5, v16);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

_QWORD *sub_216B3BA48(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = (uint64_t)a4;
  if (**(_QWORD **)nullsub_1(a1, a2))
  {
    v7 = **(_QWORD **)nullsub_1(a1, v6);
    *(_QWORD *)nullsub_1(a1, v8) = v7;
  }
  v9 = (uint64_t *)sub_216B3A914(a1, v6);
  sub_216B3BC18(*v9, *a3);
  result = (_QWORD *)sub_216B2C144(a1, v10);
  ++*result;
  return result;
}

uint64_t sub_216B3BAEC(uint64_t a1, unint64_t a2)
{
  if (sub_216B3BB20() < a2)
    sub_216B25C54();
  return sub_216B25CA0(a2 << 6, 8);
}

uint64_t sub_216B3BB24()
{
  return 0x3FFFFFFFFFFFFFFLL;
}

uint64_t sub_216B3BB2C(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = a3;
  return result;
}

uint64_t sub_216B3BB38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216B3BB5C(a1, &v3);
}

_QWORD *sub_216B3BB60(_QWORD *a1, _QWORD *a2, __n128 *a3)
{
  _QWORD *v5;

  v5 = sub_216B27FFC(a1, a2);
  sub_216B3BB94((__n128 *)(v5 + 1), a3);
  return a1;
}

__n128 sub_216B3BB94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_216B3BBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_216B3BBAC(a2, *a4);
}

uint64_t sub_216B3BBAC(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  return sub_216B3BBD4(a1, &v4, &v3);
}

uint64_t sub_216B3BBD8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)sub_216B262E0(a2);
  sub_216B26D14((_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_216B3BC10(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1 + 8, a2);
}

uint64_t sub_216B3BC18(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)(a2 + 24) = a2 == result;
  if (a2 != result)
  {
    v2 = (uint64_t *)a2;
    v3 = result;
    do
    {
      result = sub_216B2037C((uint64_t)v2);
      if (*(_BYTE *)(result + 24))
        break;
      v4 = sub_216B2037C((uint64_t)v2);
      v5 = sub_216B3BD5C(v4);
      v6 = sub_216B2037C((uint64_t)v2);
      if (v5)
      {
        v7 = *(_QWORD *)(sub_216B2037C(v6) + 8);
        if (!v7 || (v9 = *(unsigned __int8 *)(v7 + 24), v8 = (_BYTE *)(v7 + 24), v9))
        {
          if (!sub_216B3BD5C((uint64_t)v2))
          {
            v2 = (uint64_t *)sub_216B2037C((uint64_t)v2);
            sub_216B3BD70((uint64_t)v2);
          }
          v13 = sub_216B2037C((uint64_t)v2);
          *(_BYTE *)(v13 + 24) = 1;
          v14 = sub_216B2037C(v13);
          *(_BYTE *)(v14 + 24) = 0;
          return sub_216B3BDDC((uint64_t *)v14);
        }
      }
      else
      {
        v10 = **(_QWORD **)(v6 + 16);
        if (!v10 || (v11 = *(unsigned __int8 *)(v10 + 24), v8 = (_BYTE *)(v10 + 24), v11))
        {
          if (sub_216B3BD5C((uint64_t)v2))
          {
            v2 = (uint64_t *)sub_216B2037C((uint64_t)v2);
            sub_216B3BDDC(v2);
          }
          v15 = sub_216B2037C((uint64_t)v2);
          *(_BYTE *)(v15 + 24) = 1;
          v16 = sub_216B2037C(v15);
          *(_BYTE *)(v16 + 24) = 0;
          return sub_216B3BD70(v16);
        }
      }
      v12 = sub_216B2037C((uint64_t)v2);
      *(_BYTE *)(v12 + 24) = 1;
      result = sub_216B2037C(v12);
      v2 = (uint64_t *)result;
      *(_BYTE *)(result + 24) = result == v3;
      *v8 = 1;
    }
    while (result != v3);
  }
  return result;
}

BOOL sub_216B3BD5C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 16) == a1;
}

uint64_t sub_216B3BD70(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t **v4;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  *(_QWORD *)(a1 + 8) = *v2;
  if (v3)
    sub_216B3BE48(v3, a1);
  v2[2] = *(_QWORD *)(a1 + 16);
  if (sub_216B3BD5C(a1))
    v4 = *(uint64_t ***)(a1 + 16);
  else
    v4 = (uint64_t **)(sub_216B2037C(a1) + 8);
  *v4 = v2;
  *v2 = a1;
  return sub_216B3BE48(a1, (uint64_t)v2);
}

uint64_t sub_216B3BDDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  *a1 = v3;
  if (v3)
    sub_216B3BE48(v3, (uint64_t)a1);
  *(_QWORD *)(v2 + 16) = a1[2];
  if (sub_216B3BD5C((uint64_t)a1))
    v4 = (uint64_t *)a1[2];
  else
    v4 = (uint64_t *)(sub_216B2037C((uint64_t)a1) + 8);
  *v4 = v2;
  *(_QWORD *)(v2 + 8) = a1;
  return sub_216B3BE48((uint64_t)a1, v2);
}

uint64_t sub_216B3BE48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_216B3BE50(uint64_t a1)
{
  sub_216B3BE78(a1, 0);
  return a1;
}

_QWORD *sub_216B3BE78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216B3BED4(v8, v4);
  }
  return result;
}

uint64_t sub_216B3BED4(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)result;
  if (*(_BYTE *)(result + 8))
  {
    v4 = *(_QWORD *)result;
    v5 = j_nullsub_1(a2 + 32, a2);
    result = sub_216B3A8F8(v4, v5);
  }
  if (a2)
    return sub_216B3A900(*v3, a2, 1);
  return result;
}

uint64_t sub_216B3BF48(uint64_t a1)
{
  uint64_t v2;

  sub_216B3BF70(&v2, a1);
  return v2;
}

_QWORD *sub_216B3BF78(_QWORD *result, uint64_t a2)
{
  *result = off_24D5EFAD8;
  result[1] = a2;
  return result;
}

_QWORD *sub_216B3BF90(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = sub_216B3BF78(a1, a4);
  *v11 = off_24D5EFBB0;
  v12 = (uint64_t)(v11 + 2);
  sub_216B35620(v11 + 2);
  v13 = sub_216B1D1D4(16);
  sub_216B37F5C(v13, a2, a3, v12);
  sub_216B27D7C((uint64_t)(a1 + 11), v13);
  sub_216B324FC((uint64_t)(a1 + 12));
  sub_216B27D74(a1 + 13);
  sub_216B39B60(a1 + 15);
  sub_216B2D410(a1 + 32);
  sub_216B3C074(a1 + 33);
  a1[36] = 0;
  if (a5)
    sub_216B3C078(v12, a5, a6);
  v15 = sub_216B25CA8((uint64_t)(a1 + 11), v14);
  a1[32] = sub_216B380F0(v15, v16);
  return a1;
}

uint64_t sub_216B3C078(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 56) = a2;
  *(_QWORD *)(result + 64) = a3;
  return result;
}

_QWORD *sub_216B3C084(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_24D5EFBB0;
  v2 = a1 + 2;
  sub_216B3C0DC(a1 + 33);
  sub_216B3A034(a1 + 15);
  sub_216B3C0E0(a1 + 12);
  sub_216B3C0E4(a1 + 11);
  sub_216B2CFCC(v2);
  return a1;
}

void sub_216B3C0EC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_216B3C0E8(a1);
  j__free(v1);
}

uint64_t sub_216B3C100(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_216B3C118()
{
  return 0;
}

uint64_t sub_216B3C120(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1 + 32;
  sub_216B25CA8((uint64_t)(a1 + 11), a2);
  v15 = sub_216B381FC();
  result = sub_216B38220(v3, &v15);
  if ((_DWORD)result)
  {
    v5 = sub_216B1E600((uint64_t)v3);
    v7 = (uint64_t *)sub_216B25CA8(v5, v6);
    v15 = sub_216B39C9C(v7, v8);
    if (v15)
    {
      if (sub_216B3C1E4((uint64_t)&v15, v9))
      {
        sub_216B382C8(v3, v10);
        return sub_216B3C120(a1);
      }
      else
      {
        v13 = sub_216B3C244((uint64_t)a1, v15);
        sub_216B3C1E8((uint64_t)(a1 + 12), (uint64_t)v13);
        a1[36] = sub_216B25CA8((uint64_t)(a1 + 12), v14);
        return 1;
      }
    }
    else
    {
      v11 = sub_216B27D88(22);
      result = 0;
      a1[13] = v11;
      a1[14] = v12;
    }
  }
  return result;
}

_QWORD *sub_216B3C1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = j_nullsub_1(a1, v7);
    return (_QWORD *)sub_216B3DB2C(v8, v4);
  }
  return result;
}

_QWORD *sub_216B3C244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  const void *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42[19];
  uint64_t v43;

  v43 = a2;
  sub_216B295EC(v42);
  v4 = sub_216B3D2C8(a2);
  if (v4)
  {
    v5 = sub_216B38CF4(v4, v42);
    v7 = v6;
    if (!sub_216B29084(v42))
    {
      v8 = sub_216B1FF14((uint64_t)v42);
      v9 = a1 + 120;
      v10 = v8;
      v11 = (void *)sub_216B3D300(v9, v8);
      v12 = (const void *)sub_216B1FF44((uint64_t)v42, 0);
      memcpy(v11, v12, v10);
      sub_216B1E684(&v38, v11, v10);
      v5 = v38;
      v7 = v39;
    }
    v13 = (_QWORD *)sub_216B1D1D4(32);
    sub_216B3D308(v13, a2, v5, v7);
  }
  else
  {
    v15 = sub_216B3D30C(a2);
    if (v15)
    {
      v16 = v15;
      v13 = (_QWORD *)sub_216B1D1D4(40);
      sub_216B3D344(v13, a2);
      v38 = sub_216B3D348(v16);
      v41 = sub_216B381FC();
      while (sub_216B3760C(&v38, &v41))
      {
        v17 = sub_216B3A6B4((uint64_t)&v38);
        v40 = 0;
        v40 = sub_216B3C244(a1, v17);
        if (sub_216B27BAC((_DWORD *)(a1 + 104)))
          break;
        sub_216B3D34C(v13 + 2, (uint64_t)&v40);
        sub_216B3A7A8(&v38, v18);
      }
    }
    else
    {
      v19 = sub_216B3D3A4(a2);
      if (v19)
      {
        v21 = v19;
        v13 = (_QWORD *)sub_216B1D1D4(120);
        sub_216B3D3DC(v13, a2);
        v41 = sub_216B3D3E0(v21);
        v40 = sub_216B381FC();
        if (sub_216B3760C(&v41, &v40))
        {
          while (1)
          {
            v22 = sub_216B3A6B4((uint64_t)&v41);
            v24 = sub_216B39600(v22, v23);
            v25 = sub_216B3D2C8(v24);
            if (!v25)
              break;
            v26 = v25;
            sub_216B20594(v42);
            v27 = sub_216B38CF4(v26, v42);
            v29 = v28;
            if (!sub_216B29084(v42))
            {
              v31 = sub_216B1FF14((uint64_t)v42);
              v32 = (void *)sub_216B3D300(a1 + 120, v31);
              v33 = (const void *)sub_216B1FF44((uint64_t)v42, 0);
              memcpy(v32, v33, v31);
              sub_216B1E684(&v38, v32, v31);
              v27 = v38;
              v29 = v39;
            }
            v34 = sub_216B396D0(v22, v30);
            v35 = sub_216B3C244(a1, v34);
            if (!sub_216B27BAC((_DWORD *)(a1 + 104)))
            {
              *(_QWORD *)sub_216B3C81C((uint64_t)(v13 + 2), v27, v29) = v35;
              sub_216B3A6C0(&v41, v36);
              if (sub_216B3760C(&v41, &v40))
                continue;
            }
            goto LABEL_5;
          }
          sub_216B25FA8((uint64_t)&v38, "Map key must be a scalar");
          sub_216B3D27C(a1, v24, (uint64_t)&v38);
        }
      }
      else if (sub_216B3C1E4((uint64_t)&v43, v20))
      {
        v13 = (_QWORD *)sub_216B1D1D4(16);
        sub_216B3D3E4(v13, v43);
      }
      else
      {
        v37 = v43;
        sub_216B25FA8((uint64_t)&v38, "unknown node kind");
        sub_216B3D27C(a1, v37, (uint64_t)&v38);
        v13 = 0;
      }
    }
  }
LABEL_5:
  sub_216B2489C(v42);
  return v13;
}

BOOL sub_216B3C590(uint64_t a1, uint64_t a2, uint64_t a3, _BOOL8 a4)
{
  uint64_t v5;
  const void *v7[2];
  std::string v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  sub_216B383EC(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8), (uint64_t)&v8);
  if (!sub_216B25DD0((uint64_t)&v8, v5))
  {
    sub_216B26CA0(v7, &v8);
    a4 = sub_216B1E644((uint64_t)v9, v7[0], (size_t)v7[1]);
  }
  std::string::~string(&v8);
  return a4;
}

uint64_t sub_216B3C5FC(uint64_t a1)
{
  uint64_t result;

  result = sub_216B27BAC((_DWORD *)(a1 + 104));
  if ((result & 1) == 0)
  {
    result = sub_216B3C640(*(_QWORD *)(a1 + 288));
    if (result)
      return sub_216B20594((_QWORD *)(result + 48));
  }
  return result;
}

uint64_t sub_216B3C640(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (result)
  {
    if (sub_216B3DB44(&v1))
      return sub_216B3DB48(v1);
    else
      return 0;
  }
  return result;
}

uint64_t sub_216B3C67C(uint64_t a1, char *a2, int a3, uint64_t a4, _BYTE *a5, _QWORD *a6)
{
  BOOL v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _QWORD v22[3];
  uint64_t v23[2];
  _QWORD v24[3];
  char *v25;

  v25 = a2;
  *a5 = 0;
  v10 = sub_216B27BAC((_DWORD *)(a1 + 104));
  result = 0;
  if (!v10)
  {
    v12 = *(_QWORD *)(a1 + 288);
    if (v12)
    {
      v13 = sub_216B3C7DC(v12);
      if (v13)
      {
        v14 = v13;
        sub_216B268AC(v13 + 48, &v25);
        sub_216B1E678((int)v23, v25);
        v15 = *(_QWORD *)sub_216B3C81C(v14 + 16, v23[0], v23[1]);
        if (v15)
        {
          *a6 = *(_QWORD *)(a1 + 288);
          *(_QWORD *)(a1 + 288) = v15;
          return 1;
        }
        if (!a3)
        {
          result = 0;
          *a5 = 1;
          return result;
        }
        v18 = *(_QWORD *)(a1 + 288);
        sub_216B25FA8((uint64_t)v21, "missing required key '");
        sub_216B25FA8((uint64_t)v20, v25);
        sub_216B29830(v22, v21, v20);
        sub_216B25FA8((uint64_t)v19, "'");
        sub_216B29830(v24, v22, v19);
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 288);
        sub_216B25FA8((uint64_t)v24, "not a mapping");
      }
      sub_216B3C814(a1, v18, (uint64_t)v24);
    }
    else if (a3)
    {
      v16 = sub_216B27D88(22);
      result = 0;
      *(_QWORD *)(a1 + 104) = v16;
      *(_QWORD *)(a1 + 112) = v17;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_216B3C7DC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B3DB44(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B3C814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B3D27C(a1, *(_QWORD *)(a2 + 8), a3);
}

uint64_t sub_216B3C81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_216B3DBC8(a1, a2, a3);
  return sub_216B3DBD0(v3);
}

uint64_t sub_216B3C830(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 288) = a2;
  return result;
}

uint64_t sub_216B3C838(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _QWORD v11[2];
  _BYTE v12[24];
  _BYTE v13[24];
  _QWORD v14[3];
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;

  result = sub_216B27BAC((_DWORD *)(a1 + 104));
  if ((result & 1) == 0)
  {
    result = sub_216B3C640(*(_QWORD *)(a1 + 288));
    if (result)
    {
      v3 = result;
      v4 = result + 16;
      v17 = (_QWORD *)sub_216B3C960(result + 16);
      v16 = sub_216B3C994(v4);
      result = sub_216B3760C(&v17, &v16);
      if ((_DWORD)result)
      {
        while (1)
        {
          v5 = sub_216B3C9C8((uint64_t)&v17);
          v6 = sub_216B3CA54((unsigned int *)v5);
          if (!sub_216B3C9D4(v3, v6, v7))
            break;
          sub_216B3CA9C(&v17);
          result = sub_216B3760C(&v17, &v16);
          if ((result & 1) == 0)
            return result;
        }
        v8 = *(_QWORD *)(v5 + 8);
        sub_216B25FA8((uint64_t)v13, "unknown key '");
        v11[0] = sub_216B3CA54((unsigned int *)v5);
        v11[1] = v9;
        sub_216B25FB0((uint64_t)v12, (uint64_t)v11);
        sub_216B29830(v14, v13, v12);
        sub_216B25FA8((uint64_t)v10, "'");
        sub_216B29830(v15, v14, v10);
        return sub_216B3C814(a1, v8, (uint64_t)v15);
      }
    }
  }
  return result;
}

uint64_t sub_216B3C960(uint64_t a1)
{
  uint64_t v2;

  sub_216B3DD28(&v2, *(_QWORD *)a1, *(_DWORD *)(a1 + 8) == 0);
  return v2;
}

uint64_t sub_216B3C994(uint64_t a1)
{
  uint64_t v2;

  sub_216B3DD28(&v2, *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8), 1);
  return v2;
}

uint64_t sub_216B3C9C8(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_216B3C9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;
  const void *v10[2];
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v3 = a1 + 48;
  v4 = sub_216B1E600(a1 + 48);
  v5 = sub_216B1E67C(v3);
  if (v4 == v5)
    return 0;
  v6 = v5;
  v7 = v4 + 8;
  do
  {
    sub_216B1E678((int)v10, *(char **)(v7 - 8));
    result = sub_216B1E644((uint64_t)v11, v10[0], (size_t)v10[1]);
    if (result)
      break;
    v9 = v7 == v6;
    v7 += 8;
  }
  while (!v9);
  return result;
}

uint64_t sub_216B3CA54(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v2 = sub_216B28BEC((uint64_t)a1);
  v3 = sub_216B1E4E0(a1);
  sub_216B1E684(&v5, v2, v3);
  return v5;
}

_QWORD **sub_216B3CA9C(_QWORD **a1)
{
  ++*a1;
  sub_216B3DDF0(a1);
  return a1;
}

uint64_t sub_216B3CACC(uint64_t a1)
{
  uint64_t result;

  result = sub_216B3CAF0(*(_QWORD *)(a1 + 288));
  if (result)
    return sub_216B2E220((_QWORD *)(result + 16));
  return result;
}

uint64_t sub_216B3CAF0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B3DE7C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B3CB2C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;

  if (sub_216B27BAC((_DWORD *)(a1 + 104)))
    return 0;
  result = sub_216B3CAF0(*(_QWORD *)(a1 + 288));
  if (result)
  {
    *a3 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)sub_216B212F0((_QWORD *)(result + 16), a2);
    return 1;
  }
  return result;
}

uint64_t sub_216B3CB98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 288) = a2;
  return result;
}

uint64_t sub_216B3CBA0(uint64_t a1)
{
  uint64_t result;

  result = sub_216B3CAF0(*(_QWORD *)(a1 + 288));
  if (result)
    return sub_216B2E220((_QWORD *)(result + 16));
  return result;
}

uint64_t sub_216B3CBC4(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;

  if (sub_216B27BAC((_DWORD *)(a1 + 104)))
    return 0;
  result = sub_216B3CAF0(*(_QWORD *)(a1 + 288));
  if (result)
  {
    *a3 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)sub_216B212F0((_QWORD *)(result + 16), a2);
    return 1;
  }
  return result;
}

uint64_t sub_216B3CC30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 288) = a2;
  return result;
}

uint64_t sub_216B3CC3C(uint64_t result)
{
  *(_BYTE *)(result + 296) = 0;
  return result;
}

uint64_t sub_216B3CC44(uint64_t a1, char *a2)
{
  uint64_t result;
  uint64_t v5;
  const void *v6[2];
  _QWORD v7[2];

  if (*(_BYTE *)(a1 + 296))
    return 0;
  result = sub_216B3CCB4(*(_QWORD *)(a1 + 288));
  if (result)
  {
    v7[0] = sub_216B38064(result);
    v7[1] = v5;
    sub_216B1E678((int)v6, a2);
    result = sub_216B1E644((uint64_t)v7, v6[0], (size_t)v6[1]);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 296) = 1;
    }
  }
  return result;
}

uint64_t sub_216B3CCB4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B3DEDC(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B3CCEC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  if (!*(_BYTE *)(result + 296))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 288);
    sub_216B25FA8((uint64_t)v3, "unknown enumerated scalar");
    return sub_216B3C814(v1, v2, (uint64_t)v3);
  }
  return result;
}

uint64_t sub_216B3CD3C(uint64_t a1, _BYTE *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE v11[23];
  unsigned __int8 v12;
  uint64_t v13[2];

  v4 = (uint64_t *)(a1 + 264);
  sub_216B3CDF8(a1 + 264);
  v5 = sub_216B3CAF0(*(_QWORD *)(a1 + 288));
  if (v5)
  {
    v6 = v5;
    sub_216B3CFD4(v4, (uint64_t)v10);
    sub_216B3CFDC((uint64_t)v13, (uint64_t)v10);
    v7 = sub_216B2E220((_QWORD *)(v6 + 16));
    v12 = 0;
    sub_216B3CE00(v4, v13[0], v13[1], v7, &v12, (uint64_t)v11);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 288);
    sub_216B25FA8((uint64_t)v10, "expected sequence of bit values");
    sub_216B3C814(a1, v8, (uint64_t)v10);
  }
  *a2 = 1;
  return 1;
}

uint64_t sub_216B3CDF8(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_QWORD *sub_216B3CE00@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[2];
  _BYTE v26[16];
  _BYTE v27[16];
  _QWORD *v28;
  uint64_t v29;
  _BYTE v30[16];
  _BYTE v31[16];

  j_nullsub_1(a6, a2);
  v13 = sub_216B3DF68((uint64_t)a1, v12);
  if (v13 >= a4 && sub_216B1E67C((uint64_t)a1) <= v13 - a4)
  {
    sub_216B3DF80(a1, (uint64_t)v31);
    sub_216B3CFDC((uint64_t)&v28, (uint64_t)v31);
    a1[1] += a4;
    v22 = v28;
    v23 = v29;
    sub_216B3DF80(a1, (uint64_t)v30);
    sub_216B3DF88(a2, a3, v22, v23, (uint64_t)v30, (uint64_t)v31);
    sub_216B3E02C(a1, a2, a3, (uint64_t)v31);
    sub_216B3E088(a6, (uint64_t)v31);
  }
  else
  {
    sub_216B3E09C((uint64_t)a1, v14);
    sub_216B3E0C4(&v28);
    v15 = sub_216B3E17C((uint64_t)a1, a1[1] + a4);
    sub_216B3E0C8((uint64_t *)&v28, v15);
    v29 = a1[1] + a4;
    v16 = (unint64_t *)sub_216B3E2A0(a1);
    v18 = v17;
    sub_216B3CFD4(&v28, (uint64_t)v27);
    sub_216B3E1FC(v16, v18, a2, a3, (uint64_t)v27, (uint64_t)v31);
    sub_216B3E088(a6, (uint64_t)v31);
    v19 = (_QWORD *)sub_216B3E2A8(a1);
    v21 = v20;
    sub_216B3DF80(&v28, (uint64_t)v26);
    sub_216B3DF88(a2, a3, v19, v21, (uint64_t)v26, (uint64_t)v31);
    sub_216B3E2B0(a1, (uint64_t *)&v28);
    sub_216B3C0DC(&v28);
  }
  sub_216B3CFDC((uint64_t)v25, a6);
  return sub_216B3E324(v25, a4, *a5);
}

uint64_t sub_216B3CFD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B3DF3C(a1, 0, a2);
}

uint64_t sub_216B3CFE0(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17[2];
  uint64_t v18;
  uint64_t v19;

  if (sub_216B27BAC((_DWORD *)(a1 + 104)))
    return 0;
  v4 = sub_216B3CAF0(*(_QWORD *)(a1 + 288));
  if (!v4)
  {
    v11 = *(_QWORD *)(a1 + 288);
    sub_216B25FA8((uint64_t)&v15, "expected sequence of bit values");
    sub_216B3C814(a1, v11, (uint64_t)&v15);
    return 0;
  }
  v5 = v4 + 16;
  v19 = sub_216B2C910((uint64_t *)(v4 + 16));
  v18 = sub_216B2C000(v5);
  if (!sub_216B2AB28((uint64_t)&v19, (uint64_t)&v18))
    return 0;
  for (i = 0; ; ++i)
  {
    v7 = (uint64_t *)sub_216B1E600((uint64_t)&v19);
    v8 = sub_216B3CCB4(*v7);
    if (!v8)
    {
      v10 = *(_QWORD *)(a1 + 288);
      sub_216B25FA8((uint64_t)&v15, "unexpected scalar in sequence of bit values");
      sub_216B3C814(a1, v10, (uint64_t)&v15);
      goto LABEL_9;
    }
    v15 = sub_216B38064(v8);
    v16 = v9;
    sub_216B1E678((int)v17, a2);
    if (sub_216B1E644((uint64_t)&v15, v17[0], (size_t)v17[1]))
      break;
LABEL_9:
    sub_216B3D138(&v19);
    if (!sub_216B2AB28((uint64_t)&v19, (uint64_t)&v18))
      return 0;
  }
  v15 = sub_216B3D134((_QWORD *)(a1 + 264), i);
  v16 = v13;
  v14 = 1;
  sub_216B32624((uint64_t)&v15, 1);
  return v14;
}

_QWORD *sub_216B3D138(_QWORD *result)
{
  *result += 8;
  return result;
}

unint64_t sub_216B3D148(uint64_t a1)
{
  unint64_t result;
  _QWORD *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];

  result = sub_216B27BAC((_DWORD *)(a1 + 104));
  if ((result & 1) == 0)
  {
    result = sub_216B3CAF0(*(_QWORD *)(a1 + 288));
    if (result)
    {
      v3 = (_QWORD *)(result + 16);
      result = sub_216B2E220((_QWORD *)(result + 16));
      if (result)
      {
        v4 = 0;
        v5 = 1;
        while (1)
        {
          v9[0] = sub_216B3D134((_QWORD *)(a1 + 264), v4);
          v9[1] = v6;
          if (!sub_216B32688((uint64_t)v9))
            break;
          v4 = v5;
          result = sub_216B2E220(v3);
          if (result <= v5++)
            return result;
        }
        v8 = *(_QWORD *)sub_216B212F0(v3, v4);
        sub_216B25FA8((uint64_t)v9, "unknown bit value");
        return sub_216B3C814(a1, v8, (uint64_t)v9);
      }
    }
  }
  return result;
}

uint64_t sub_216B3D218(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v4 = sub_216B3CCB4(*(_QWORD *)(a1 + 288));
  if (v4)
  {
    result = sub_216B38064(v4);
    *a2 = result;
    a2[1] = v6;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 288);
    sub_216B25FA8((uint64_t)v8, "unexpected scalar");
    return sub_216B3C814(a1, v7, (uint64_t)v8);
  }
  return result;
}

uint64_t sub_216B3D27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = sub_216B25CA8(a1 + 88, a2);
  sub_216B37F9C(v6, a2, a3);
  result = sub_216B27D88(22);
  *(_QWORD *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 112) = v8;
  return result;
}

uint64_t sub_216B3D2C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B3F69C(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B3D300(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, a2, 1);
}

uint64_t sub_216B3D30C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B3F6D8(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B3D34C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216B3F784(a1, a2);
  }
  else
  {
    sub_216B3F714((uint64_t)a1, a2);
    result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216B3D3A4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B3FD04(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B3D3E8(uint64_t a1, uint64_t a2)
{
  return sub_216B3C814(a1, *(_QWORD *)(a1 + 288), a2);
}

uint64_t sub_216B3D3F4()
{
  return 0;
}

uint64_t sub_216B3D3FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  *a1 = off_24D5EFC88;
  v2 = (uint64_t)(a1 + 2);
  v7 = (_QWORD *)sub_216B3C960((uint64_t)(a1 + 2));
  v6 = sub_216B3C994(v2);
  while (sub_216B3760C(&v7, &v6))
  {
    v3 = *(_QWORD *)(sub_216B3C9C8((uint64_t)&v7) + 8);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    sub_216B3CA9C(&v7);
  }
  sub_216B1FF6C(a1 + 6);
  sub_216B3D4A4(v2);
  return nullsub_1(a1, v4);
}

void sub_216B3D4AC()
{
  void *v0;

  v0 = (void *)sub_216B3D4A8();
  j__free(v0);
}

uint64_t sub_216B3D4C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_24D5EFCB0;
  v2 = (uint64_t)(a1 + 2);
  v7 = sub_216B2C910(a1 + 2);
  v6 = sub_216B2C000(v2);
  while (sub_216B2AB28((uint64_t)&v7, (uint64_t)&v6))
  {
    v3 = *(_QWORD *)sub_216B1E600((uint64_t)&v7);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    sub_216B3D138(&v7);
  }
  sub_216B3D560(v2);
  return nullsub_1(a1, v4);
}

void sub_216B3D568()
{
  void *v0;

  v0 = (void *)sub_216B3D564();
  j__free(v0);
}

void **sub_216B3D57C(uint64_t a1, uint64_t a2, void **a3)
{
  return sub_216B2E0B0(a3, a1);
}

uint64_t sub_216B3D588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string v6;
  _QWORD v7[2];
  uint64_t v8;

  v7[0] = a1;
  v7[1] = a2;
  sub_216B25018(v7, (uint64_t)&v6);
  sub_216B26E7C(a4, (uint64_t)&v6);
  std::string::~string(&v6);
  sub_216B26D14(&v8);
  return v8;
}

void **sub_216B3D5DC(unsigned int *a1, uint64_t a2, void **a3)
{
  return sub_216B248D8(a3, *a1);
}

uint64_t sub_216B3D5E8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char *v5;
  unint64_t v7;
  uint64_t v8;

  v7 = 0;
  if (sub_216B32284(a1, a2, 0, &v7))
  {
    v5 = "invalid number";
  }
  else
  {
    if (!HIDWORD(v7))
    {
      *a4 = v7;
      sub_216B26D14(&v8);
      return v8;
    }
    v5 = "out of range number";
  }
  sub_216B1E678((int)&v8, v5);
  return v8;
}

uint64_t sub_216B3D65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B3FD40(a3, a1, a2);
}

void sub_216B3D66C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = (void *)j_nullsub_1(a1, a2);
  j__free(v2);
}

void sub_216B3D680(uint64_t a1)
{
  void *v1;

  v1 = (void *)j_j_nullsub_1(a1);
  j__free(v1);
}

_QWORD *sub_216B3D694(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = sub_216B3D6C8(a1, a2);
  *result = &off_24D5EFD28;
  result[2] = a3;
  result[3] = a4;
  return result;
}

_QWORD *sub_216B3D6C8(_QWORD *result, uint64_t a2)
{
  *result = &off_24D5EFCD8;
  result[1] = a2;
  return result;
}

_QWORD *sub_216B3D6D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = sub_216B3D6C8(a1, a2);
  *v3 = off_24D5EFCB0;
  sub_216B2C030(v3 + 2);
  return a1;
}

_QWORD *sub_216B3D70C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = sub_216B3D6C8(a1, a2);
  *v3 = off_24D5EFC88;
  v4 = v3 + 6;
  sub_216B3D750(v3 + 2);
  sub_216B3D754(v4);
  return a1;
}

uint64_t sub_216B3D758(uint64_t a1)
{
  return sub_216B3D760(a1, 16);
}

uint64_t sub_216B3D760(uint64_t result, int a2)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t sub_216B3D76C(uint64_t a1)
{
  return sub_216B2F340(a1, 6u);
}

_QWORD *sub_216B3D774(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_216B3D6C8(a1, a2);
  *result = &off_24D5EFD00;
  return result;
}

uint64_t sub_216B3D794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B3D828(v5, a1 + 24);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

BOOL sub_216B3D818(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 0;
}

void sub_216B3D828(unsigned int *a1, int a2)
{
  sub_216B1E4E0(a1);
  sub_216B3A164(a2, a1);
}

uint64_t sub_216B3D858(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B3D894(&v3);
  return a1;
}

uint64_t *sub_216B3D894(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B2EE6C(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B2EE78(v6, v8);
    return (uint64_t *)sub_216B3D8F8(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B3D8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 8 * a3, 8);
}

_QWORD *sub_216B3D90C(_QWORD *a1)
{
  char v3;
  int v4;

  *a1 = 0;
  a1[1] = 0;
  v4 = 0;
  sub_216B3D94C(a1 + 2, &v4, &v3);
  return a1;
}

uint64_t sub_216B3D950(_QWORD *a1, int *a2)
{
  _QWORD *v2;

  v2 = sub_216B3B7D8(a1, a2);
  return j_j_nullsub_1(v2);
}

uint64_t sub_216B3D964(uint64_t a1)
{
  sub_216B3D98C(a1, 0);
  return a1;
}

void sub_216B3D98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B3D9E8(v7, v4);
  }
}

void sub_216B3D9E8(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B37F90(a2);
    j__free(v2);
  }
}

uint64_t sub_216B3DA08(uint64_t a1)
{
  sub_216B3C1E8(a1, 0);
  return a1;
}

uint64_t sub_216B3DA30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  sub_216B20C64(&v4, a1);
  sub_216B3DA6C(&v4, v2);
  return a1;
}

_QWORD *sub_216B3DA6C(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)*a1;
  if (*result)
  {
    v4 = sub_216B2C144((uint64_t)result, a2);
    v5 = *a1;
    v6 = *(_QWORD *)*a1;
    v8 = *(_QWORD *)sub_216B2C144(v5, v7);
    return (_QWORD *)sub_216B3D8F8(v4, v6, v8);
  }
  return result;
}

uint64_t sub_216B3DAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B3DAE8(&v3);
}

uint64_t sub_216B3DAE8(_QWORD *a1)
{
  return sub_216B3DB08(*a1);
}

uint64_t sub_216B3DAF0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)nullsub_1(a1, a2);
}

BOOL sub_216B3DB10(uint64_t a1)
{
  return sub_216B387B8(a1) == 0;
}

uint64_t sub_216B3DB2C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t sub_216B3DB48(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_216B1E600((uint64_t)&v2);
}

uint64_t sub_216B3DB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B3DB94(&v3);
}

uint64_t sub_216B3DB94(_QWORD *a1)
{
  return sub_216B3DB9C(*a1);
}

BOOL sub_216B3DBA4(uint64_t a1)
{
  return sub_216B3DBAC(*(_QWORD *)(a1 + 8));
}

BOOL sub_216B3DBAC(uint64_t a1)
{
  return sub_216B387B8(a1) == 3;
}

uint64_t sub_216B3DBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B3DBD8(a1, a2, a3, 0);
}

uint64_t sub_216B3DBD0(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_216B3DBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7[3];
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216B3DD18((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216B3DC2C(a1, v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216B3DC2C(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *a2, a2[1]);
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B3DD2C(*a2, a2[1], (int)a1 + 24, a2[2]);
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B3DD18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B3DE64(a3, a1, a2);
}

void *sub_216B3DD2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v12);
  sub_216B3DE34();
  v7 = sub_216B267A0(a3, (v6 + 17));
  v8 = sub_216B3DE3C(v7, v6, a4);
  v9 = (void *)sub_216B28BEC(v8);
  v10 = (const void *)sub_216B1E600((uint64_t)v12);
  memcpy(v9, v10, v6);
  *((_BYTE *)v9 + v6) = 0;
  return v7;
}

_QWORD **sub_216B3DDC0(_QWORD **a1, _QWORD *a2, char a3)
{
  *a1 = a2;
  if ((a3 & 1) == 0)
    sub_216B3DDF0(a1);
  return a1;
}

uint64_t sub_216B3DDF0(_QWORD **a1)
{
  _QWORD *i;
  uint64_t v3;
  uint64_t result;

  for (i = *a1; ; *a1 = i)
  {
    v3 = *i;
    if (!*i)
      goto LABEL_5;
    result = sub_216B25120();
    if (v3 != result)
      break;
    i = *a1;
LABEL_5:
    ++i;
  }
  return result;
}

uint64_t sub_216B3DE34()
{
  return 8;
}

_DWORD *sub_216B3DE40(_DWORD *a1, int a2, uint64_t a3)
{
  _DWORD *result;

  result = sub_216B2A7D8(a1, a2);
  *((_QWORD *)result + 1) = a3;
  return result;
}

__n128 sub_216B3DE68(__n128 *a1, __n128 *a2, unint64_t *a3)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = *a3;
  return result;
}

uint64_t sub_216B3DE80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B3DEA8(&v3);
}

uint64_t sub_216B3DEA8(_QWORD *a1)
{
  return sub_216B3DEB0(*a1);
}

BOOL sub_216B3DEB8(uint64_t a1)
{
  return sub_216B3DEC0(*(_QWORD *)(a1 + 8));
}

BOOL sub_216B3DEC0(uint64_t a1)
{
  return sub_216B387B8(a1) == 4;
}

uint64_t sub_216B3DEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B3DF08(&v3);
}

uint64_t sub_216B3DF08(_QWORD *a1)
{
  return sub_216B3DF10(*a1);
}

BOOL sub_216B3DF18(uint64_t a1)
{
  return sub_216B3DF20(*(_QWORD *)(a1 + 8));
}

BOOL sub_216B3DF20(uint64_t a1)
{
  return sub_216B387B8(a1) == 1;
}

uint64_t sub_216B3DF3C@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B3DF58(a3, *a1 + 8 * (a2 >> 6), a2 & 0x3F);
}

uint64_t sub_216B3DF5C(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

uint64_t sub_216B3DF68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_216B2C144(a1, a2);
  return sub_216B3E380(*v2);
}

uint64_t sub_216B3DF80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B3DF3C(a1, a1[1], a2);
}

uint64_t sub_216B3DF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v12[16];
  _BYTE v13[16];

  if (*(_DWORD *)(a5 + 8) == (_DWORD)a4)
  {
    sub_216B3CFDC((uint64_t)v13, a5);
    return sub_216B3E388(a1, a2, a3, a4, (uint64_t)v13, a6);
  }
  else
  {
    sub_216B3CFDC((uint64_t)v12, a5);
    return sub_216B3E50C(a1, a2, a3, a4, (uint64_t)v12, a6);
  }
}

uint64_t sub_216B3E02C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _BYTE v10[16];
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  sub_216B3CFD4(a1, (uint64_t)v10);
  v9[0] = sub_216B3E2A0(a1);
  v9[1] = v6;
  v7 = sub_216B3E7C4((uint64_t)v11, (uint64_t)v9);
  return sub_216B3E85C((uint64_t)v10, v7, a4);
}

uint64_t sub_216B3E088(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_216B3E09C(uint64_t a1, uint64_t a2)
{
  char v3;

  sub_216B2C144(a1, a2);
  return j_j_nullsub_1(&v3);
}

unint64_t sub_216B3E0C8(uint64_t *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[16];
  _BYTE v9[23];
  uint64_t v10[3];

  result = sub_216B3DF68((uint64_t)a1, a2);
  if (result < a2)
  {
    if (sub_216B3E918((uint64_t)a1, v5) < a2)
      sub_216B2C50C();
    sub_216B3E09C((uint64_t)a1, v6);
    sub_216B3E0C4(v10);
    sub_216B3E95C(v10, a2);
    sub_216B3CFD4(a1, (uint64_t)v9);
    sub_216B3DF80(a1, (uint64_t)v8);
    v7 = sub_216B1E67C((uint64_t)a1);
    sub_216B3E9CC(v10, (uint64_t)v9, (uint64_t)v8, v7);
    sub_216B3E2B0(a1, v10);
    return sub_216B3C0DC(v10);
  }
  return result;
}

unint64_t sub_216B3E17C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v4 = sub_216B3E918(a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B3DF68(a1, v5);
  if (v7 < v6 >> 1)
  {
    v10 = 2 * v7;
    v9 = sub_216B3EFC8(a2);
    return *(_QWORD *)sub_216B25C44(&v10, &v9);
  }
  return v6;
}

uint64_t sub_216B3E1FC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v12[16];
  _BYTE v13[16];

  if (*(_DWORD *)(a5 + 8) == (_DWORD)a2)
  {
    sub_216B3CFDC((uint64_t)v13, a5);
    return sub_216B3EFD4(a1, a2, a3, a4, (uint64_t)v13, a6);
  }
  else
  {
    sub_216B3CFDC((uint64_t)v12, a5);
    return sub_216B3F164(a1, a2, a3, a4, (uint64_t)v12, a6);
  }
}

uint64_t sub_216B3E2A0(_QWORD *a1)
{
  return sub_216B3F404(a1, 0);
}

uint64_t sub_216B3E2A8(_QWORD *a1)
{
  return sub_216B3F404(a1, a1[1]);
}

uint64_t sub_216B3E2B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_216B20BF4(a1, a2);
  sub_216B20BF4(a1 + 1, a2 + 1);
  v5 = (uint64_t *)sub_216B2C144((uint64_t)a1, v4);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a2, v6);
  sub_216B20BF4(v5, v7);
  v9 = sub_216B2C144((uint64_t)a1, v8);
  v11 = sub_216B2C144((uint64_t)a2, v10);
  return nullsub_1(v9, v11);
}

_QWORD *sub_216B3E324(_QWORD *result, unint64_t a2, int a3)
{
  _BYTE v4[16];
  _BYTE v5[16];

  if (a2)
  {
    if (a3)
    {
      sub_216B3CFDC((uint64_t)v5, (uint64_t)result);
      return sub_216B3F43C((uint64_t)v5, a2);
    }
    else
    {
      sub_216B3CFDC((uint64_t)v4, (uint64_t)result);
      return sub_216B3F528((uint64_t)v4, a2);
    }
  }
  return result;
}

uint64_t sub_216B3E380(uint64_t a1)
{
  return a1 << 6;
}

uint64_t sub_216B3E388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];

  v28[0] = a1;
  v28[1] = a2;
  v26 = a3;
  v27 = a4;
  v8 = sub_216B3E7C4((uint64_t)&v26, (uint64_t)v28);
  v25 = v8;
  if (v8 >= 1)
  {
    if ((_DWORD)v27)
    {
      v24 = v27;
      v10 = (uint64_t *)sub_216B3E7E4(&v24, &v25);
      v11 = *v10;
      v25 -= *v10;
      v12 = (-1 << (v27 - v11)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v27);
      v13 = v26;
      v14 = *(_QWORD **)a5;
      **(_QWORD **)a5 = **(_QWORD **)a5 & ~v12 | v12 & *v26;
      *(_DWORD *)(a5 + 8) = (*(_DWORD *)(a5 + 8) - (_BYTE)v11) & 0x3F;
      v8 = v25;
    }
    else
    {
      v14 = *(_QWORD **)a5;
      v13 = v26;
    }
    if (v8 >= 0)
      v15 = v8;
    else
      v15 = v8 + 63;
    *(_QWORD *)a5 = &v14[-(v15 >> 6)];
    v26 = &v13[-(v15 >> 6)];
    nullsub_1(v26, v9);
    nullsub_1(*(_QWORD *)a5, v16);
    sub_216B3E7E8();
    v17 = v25 - (v15 & 0xFFFFFFFFFFFFFFC0);
    v25 = v17;
    if (v17 >= 1)
    {
      v18 = -1 << -(char)v17;
      v19 = *--v26;
      v20 = v19 & v18;
      v21 = (uint64_t *)(*(_QWORD *)a5 - 8);
      v22 = *v21;
      *(_QWORD *)a5 = v21;
      *v21 = v22 & ~v18 | v20;
      *(_DWORD *)(a5 + 8) = -(int)v25 & 0x3F;
    }
  }
  return sub_216B3CFDC(a6, a5);
}

uint64_t sub_216B3E50C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[2];

  v48[0] = a1;
  v48[1] = a2;
  v46 = a3;
  v47 = a4;
  v8 = sub_216B3E7C4((uint64_t)&v46, (uint64_t)v48);
  v45 = v8;
  if (v8 >= 1)
  {
    if ((_DWORD)v47)
    {
      v44 = v47;
      v9 = (uint64_t *)sub_216B3E7E4(&v44, &v45);
      v10 = v45 - *v9;
      v44 = *v9;
      v45 = v10;
      v11 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v47) & *v46 & (-1 << (v47 - v44));
      v12 = *(_DWORD *)(a5 + 8);
      v43 = v12;
      v13 = *(_QWORD *)sub_216B3E7E4(&v44, &v43);
      if (v13)
      {
        v14 = *(_DWORD *)(a5 + 8);
        v15 = v11 << (v14 - v47);
        if (v14 <= v47)
          v15 = v11 >> (v47 - v14);
        **(_QWORD **)a5 = v15 | **(_QWORD **)a5 & ~((-1 << (v14 - v13)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v12));
        *(_DWORD *)(a5 + 8) = ((_BYTE)v14 - (_BYTE)v13) & 0x3F;
        v16 = v44 - v13;
        v44 -= v13;
      }
      else
      {
        v16 = v44;
      }
      if (v16 >= 1)
      {
        v17 = (uint64_t *)(*(_QWORD *)a5 - 8);
        v18 = *v17;
        *(_QWORD *)a5 = v17;
        v19 = -(int)v16;
        v20 = v19 & 0x3F;
        *(_DWORD *)(a5 + 8) = v19 & 0x3F;
        v21 = v18 & ~(-1 << v19);
        *v17 = v21;
        LOBYTE(v18) = v47 - v44;
        LODWORD(v47) = v47 - v44 - v13;
        *v17 = (v11 << (v20 - (v18 - v13))) | v21;
      }
      v8 = v45;
    }
    v22 = *(unsigned int *)(a5 + 8);
    v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
    if (v8 >= 64)
    {
      v24 = v46;
      v25 = *(unint64_t **)a5;
      do
      {
        v27 = *--v24;
        v26 = v27;
        *v25 = *v25 & ~v23 | (v27 >> (64 - v22));
        v28 = *--v25;
        *v25 = v28 & v23 | (v26 << v22);
        v29 = v45;
        v8 = v45 - 64;
        v45 -= 64;
      }
      while (v29 > 127);
      v46 = v24;
      *(_QWORD *)a5 = v25;
    }
    if (v8 >= 1)
    {
      v30 = *--v46;
      v31 = v30 & (-1 << -(char)v8);
      v44 = v22;
      v32 = (uint64_t *)sub_216B3E7E4(&v45, &v44);
      v33 = *v32;
      v34 = *(_DWORD *)(a5 + 8);
      v35 = *(unint64_t **)a5;
      **(_QWORD **)a5 = **(_QWORD **)a5 & ~((-1 << (v34 - *v32)) & v23) | (v31 >> -(char)v34);
      *(_DWORD *)(a5 + 8) = ((_BYTE)v34 - (_BYTE)v33) & 0x3F;
      v36 = v45 - v33;
      v45 = v36;
      if (v36 >= 1)
      {
        v38 = *(v35 - 1);
        v37 = v35 - 1;
        *(_QWORD *)a5 = v37;
        v39 = -(int)v36;
        v40 = v39 & 0x3F;
        *(_DWORD *)(a5 + 8) = v39 & 0x3F;
        v41 = v38 & ~(-1 << v39);
        *v37 = v41;
        *v37 = (v31 << (v33 + v45 + v40)) | v41;
      }
    }
  }
  return sub_216B3CFDC(a6, a5);
}

uint64_t sub_216B3E7C4(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a1 + 8) + 8 * (*(_QWORD *)a1 - *(_QWORD *)a2) - *(unsigned int *)(a2 + 8);
}

uint64_t sub_216B3E7E8()
{
  return sub_216B3E840();
}

_QWORD *sub_216B3E7F0(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (sub_216B3E82C((uint64_t)&v5, a2, a1))
    return a2;
  else
    return a1;
}

BOOL sub_216B3E82C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 < *a3;
}

uint64_t sub_216B3E840()
{
  uint64_t v0;

  sub_216B3E858();
  return v0;
}

uint64_t sub_216B3E85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = sub_216B3CFDC(a3, a1);
  return sub_216B3E888(v4, a2);
}

uint64_t sub_216B3E888(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned int *)(result + 8);
  v3 = a2 + v2;
  if (a2 + v2 - 63 >= 0)
    v3 = a2 + v2 - 63;
  v4 = v3 >> 6;
  if (a2 >= 0)
    v4 = (unint64_t)(v2 + a2) >> 6;
  *(_QWORD *)result += 8 * v4;
  *(_DWORD *)(result + 8) = ((_BYTE)v2 + (_BYTE)a2) & 0x3F;
  return result;
}

_QWORD *sub_216B3E8CC(_QWORD *a1)
{
  _QWORD *v2;
  char v4;
  int v5;

  v2 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v5 = 0;
  j_j_nullsub_1(&v4);
  sub_216B3B79C(v2, &v5, &v4);
  return a1;
}

uint64_t sub_216B3E918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_216B2C144(a1, a2);
  v3 = sub_216B2F5D0(v2);
  v4 = sub_216B2511C(v3);
  if (v3 >= v4 >> 7)
    return v4 >> 1;
  else
    return sub_216B3E380(v3);
}

_QWORD *sub_216B3E95C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (sub_216B3E918((uint64_t)a1, a2) < a2)
    sub_216B2C50C();
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B3EA94(a2);
  v7 = sub_216B3EA70(v5, v6);
  v9 = v8;
  *a1 = v7;
  a1[1] = 0;
  result = (_QWORD *)sub_216B2C144((uint64_t)a1, v8);
  *result = v9;
  return result;
}

uint64_t sub_216B3E9CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  _BYTE v11[16];
  _BYTE v12[16];
  _BYTE v13[16];

  v6 = a1[1];
  v7 = v6 + a4;
  a1[1] = v6 + a4;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  sub_216B3CFDC((uint64_t)v13, a2);
  sub_216B3CFDC((uint64_t)v12, a3);
  sub_216B3DF3C(a1, v6, (uint64_t)v11);
  return sub_216B3EAD8((uint64_t)v13, (uint64_t)v12, (uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B3EA70(uint64_t a1, unint64_t a2)
{
  return sub_216B3EAA4(a1, a2);
}

unint64_t sub_216B3EA94(uint64_t a1)
{
  return ((unint64_t)(a1 - 1) >> 6) + 1;
}

uint64_t sub_216B3EAA4(uint64_t a1, unint64_t a2)
{
  if (sub_216B2F5D0(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(8 * a2, 8);
}

uint64_t sub_216B3EAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v8[16];
  _BYTE v9[16];
  _BYTE v10[16];

  sub_216B3CFDC((uint64_t)v10, a1);
  sub_216B3CFDC((uint64_t)v9, a2);
  sub_216B3CFDC((uint64_t)v8, a3);
  return sub_216B3EB44((uint64_t)v10, (uint64_t)v9, (uint64_t)v8, a4);
}

uint64_t sub_216B3EB44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v8[16];
  _BYTE v9[16];
  _BYTE v10[16];

  sub_216B3CFDC((uint64_t)v10, a1);
  sub_216B3CFDC((uint64_t)v9, a2);
  sub_216B3CFDC((uint64_t)v8, a3);
  return sub_216B3EBB0((uint64_t)v10, (uint64_t)v9, (uint64_t)v8, a4);
}

uint64_t sub_216B3EBB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v9[16];
  _BYTE v10[16];
  _BYTE v11[16];
  _BYTE v12[16];
  _BYTE v13[16];
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];
  uint64_t v20;
  _BYTE v21[16];
  _BYTE v22[16];
  _BYTE v23[16];
  uint64_t v24;

  sub_216B3CFDC((uint64_t)v22, a1);
  sub_216B3CFDC((uint64_t)v21, a2);
  sub_216B3ECC8((uint64_t)v22, (uint64_t)v21, (uint64_t)v23);
  sub_216B3CFDC((uint64_t)v18, (uint64_t)v23);
  sub_216B3CFDC((uint64_t)v17, (uint64_t)&v24);
  sub_216B3CFDC((uint64_t)v15, a3);
  sub_216B3EDCC((uint64_t)v15, (uint64_t)v16);
  sub_216B3ED30((uint64_t)v18, (uint64_t)v17, (uint64_t)v16, (uint64_t)v19);
  sub_216B3CFDC((uint64_t)v13, a1);
  sub_216B3CFDC((uint64_t)v12, (uint64_t)v19);
  sub_216B3EE18((uint64_t)v13, (uint64_t)v12, (uint64_t)v14);
  sub_216B3CFDC((uint64_t)v10, a3);
  sub_216B3CFDC((uint64_t)v9, (uint64_t)&v20);
  sub_216B3EE68((uint64_t)v10, (uint64_t)v9, (uint64_t)v11);
  return sub_216B3EE08((uint64_t)v14, (uint64_t)v11, a4);
}

uint64_t sub_216B3ECC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];
  _BYTE v7[16];
  _BYTE v8[16];
  _BYTE v9[16];

  sub_216B3CFDC((uint64_t)v8, a1);
  sub_216B3EDCC((uint64_t)v8, (uint64_t)v9);
  sub_216B3CFDC((uint64_t)v6, a2);
  sub_216B3EDCC((uint64_t)v6, (uint64_t)v7);
  return sub_216B3EE08((uint64_t)v9, (uint64_t)v7, a3);
}

uint64_t sub_216B3ED30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  while (sub_216B3EEB8(a1, a2))
  {
    v12[0] = sub_216B3EED0(a1);
    v12[1] = v8;
    v11[0] = sub_216B3EED0(a3);
    v11[1] = v9;
    sub_216B3EF04((uint64_t)v11, (uint64_t)v12);
    sub_216B3EF30(a1);
    sub_216B3EF30(a3);
  }
  return sub_216B3EE08(a1, a3, a4);
}

uint64_t sub_216B3EDCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[16];

  sub_216B3CFDC((uint64_t)v4, a1);
  return sub_216B3EF7C((uint64_t)v4, a2);
}

uint64_t sub_216B3EE08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B3EF88(a3, a1, a2);
}

uint64_t sub_216B3EE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];
  _BYTE v7[16];

  sub_216B3CFDC((uint64_t)v7, a1);
  sub_216B3CFDC((uint64_t)v6, a2);
  return sub_216B3EE68((uint64_t)v7, (uint64_t)v6, a3);
}

uint64_t sub_216B3EE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[16];
  _BYTE v7[16];

  sub_216B3CFDC((uint64_t)v7, a1);
  sub_216B3CFDC((uint64_t)v6, a2);
  return sub_216B3EFC0((uint64_t)v6, a3);
}

BOOL sub_216B3EEB8(uint64_t a1, uint64_t a2)
{
  return !sub_216B3EF5C(a1, a2);
}

uint64_t sub_216B3EED0(uint64_t a1)
{
  uint64_t v2;

  sub_216B1E684(&v2, *(_QWORD *)a1, 1 << *(_DWORD *)(a1 + 8));
  return v2;
}

uint64_t sub_216B3EF04(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;

  v3 = sub_216B32688(a2);
  return sub_216B32624(a1, v3);
}

uint64_t sub_216B3EF30(uint64_t result)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(result + 8);
  if (v1 == 63)
  {
    v2 = 0;
    *(_QWORD *)result += 8;
  }
  else
  {
    v2 = v1 + 1;
  }
  *(_DWORD *)(result + 8) = v2;
  return result;
}

BOOL sub_216B3EF5C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t sub_216B3EF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B3CFDC(a2, a1);
}

uint64_t sub_216B3EF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_216B3CFDC(a1, a2);
  sub_216B3CFDC(v5 + 16, a3);
  return a1;
}

uint64_t sub_216B3EFC0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_216B3CFDC(a2, a1);
}

unint64_t sub_216B3EFC8(uint64_t a1)
{
  return (a1 + 63) & 0xFFFFFFFFFFFFFFC0;
}

uint64_t sub_216B3EFD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD *v29;
  uint64_t v30;

  v29 = a1;
  v30 = a2;
  v28[0] = a3;
  v28[1] = a4;
  v8 = sub_216B3E7C4((uint64_t)v28, (uint64_t)&v29);
  v27 = v8;
  if (v8 >= 1)
  {
    if ((_DWORD)v30)
    {
      v10 = 64 - v30;
      v26 = (64 - v30);
      v11 = (uint64_t *)sub_216B3E7E4(&v26, &v27);
      v12 = *v11;
      v27 -= *v11;
      v13 = v29 + 1;
      v14 = *(_QWORD **)a5;
      **(_QWORD **)a5 = **(_QWORD **)a5 & ~((-1 << v30) & (0xFFFFFFFFFFFFFFFFLL >> (v10 - v12))) | (-1 << v30) & (0xFFFFFFFFFFFFFFFFLL >> (v10 - v12)) & *v29;
      v15 = *(unsigned int *)(a5 + 8);
      v16 = __OFADD__(v12, v15);
      v17 = v12 + v15;
      v18 = v17 + 63;
      if (v17 < 0 == v16)
        v18 = v17;
      v19 = v18 >> 6;
      *(_QWORD *)a5 = &v14[v19];
      *(_DWORD *)(a5 + 8) = v17 - ((_DWORD)v19 << 6);
      v29 = v13;
      v20 = v27;
    }
    else
    {
      v20 = v8;
      v13 = v29;
    }
    if (v20 >= 0)
      v21 = v20;
    else
      v21 = v20 + 63;
    nullsub_1(v13, v9);
    nullsub_1(*(_QWORD *)a5, v22);
    sub_216B3E7E8();
    v27 -= v21 & 0xFFFFFFFFFFFFFFC0;
    v23 = v27;
    v24 = (unint64_t *)(*(_QWORD *)a5 + 8 * (v21 >> 6));
    *(_QWORD *)a5 = v24;
    if (v23 >= 1)
    {
      v29 += v21 >> 6;
      *v24 = *v24 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v23) | *v29 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v23);
      *(_DWORD *)(a5 + 8) = v27;
    }
  }
  return sub_216B3CFDC(a6, a5);
}

uint64_t sub_216B3F164@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  unint64_t v19;
  unint64_t *v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  unint64_t *v44;
  uint64_t v45;

  v44 = a1;
  v45 = a2;
  v43[0] = a3;
  v43[1] = a4;
  v8 = sub_216B3E7C4((uint64_t)v43, (uint64_t)&v44);
  v42 = v8;
  if (v8 >= 1)
  {
    if ((_DWORD)v45)
    {
      v9 = 64 - v45;
      v41 = (64 - v45);
      v10 = (uint64_t *)sub_216B3E7E4(&v41, &v42);
      v11 = *v10;
      v42 -= *v10;
      v12 = (-1 << v45) & *v44 & (0xFFFFFFFFFFFFFFFFLL >> (v9 - v11));
      v13 = 64 - *(_DWORD *)(a5 + 8);
      v40 = v13;
      v41 = v11;
      v14 = (uint64_t *)sub_216B24E80(&v41, &v40);
      v15 = *v14;
      v16 = *(unsigned int *)(a5 + 8);
      v17 = *(uint64_t **)a5;
      v18 = v45;
      v19 = v12 >> (v45 - v16);
      if (v16 > v45)
        v19 = v12 << (v16 - v45);
      *v17 = v19 | **(_QWORD **)a5 & ~((-1 << v16) & (0xFFFFFFFFFFFFFFFFLL >> (v13
                                                                               - *v14)));
      v20 = (unint64_t *)&v17[(unint64_t)(v15 + v16) >> 6];
      *(_QWORD *)a5 = v20;
      v21 = ((_BYTE)v16 + (_BYTE)v15) & 0x3F;
      *(_DWORD *)(a5 + 8) = v21;
      if (v11 - v15 >= 1)
      {
        *v20 = *v20 & ~(0xFFFFFFFFFFFFFFFFLL >> (v15 - v11)) | (v12 >> (v15 + v18));
        *(_DWORD *)(a5 + 8) = v11 - v15;
        v21 = v11 - v15;
      }
      ++v44;
      v8 = v42;
    }
    else
    {
      v21 = *(_DWORD *)(a5 + 8);
    }
    v22 = (64 - v21);
    if (v8 >= 64)
    {
      v23 = v21;
      v24 = -1 << v21;
      v25 = v44;
      v26 = *(uint64_t **)a5;
      v27 = **(_QWORD **)a5;
      do
      {
        v29 = *v25++;
        v28 = v29;
        *v26 = v27 & ~v24 | (v29 << v23);
        v30 = v26[1];
        ++v26;
        v27 = v30 & v24 | (v28 >> v22);
        *v26 = v27;
        v31 = v42;
        v8 = v42 - 64;
        v42 -= 64;
      }
      while (v31 > 127);
      *(_QWORD *)a5 = v26;
      v44 = v25;
    }
    if (v8 >= 1)
    {
      v32 = *v44 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v8);
      v41 = v22;
      v33 = (uint64_t *)sub_216B3E7E4(&v42, &v41);
      v34 = *v33;
      v35 = *(unsigned int *)(a5 + 8);
      v36 = *(unint64_t **)a5;
      *v36 = **(_QWORD **)a5 & ~((-1 << v35) & (0xFFFFFFFFFFFFFFFFLL >> (v22 - *v33))) | (v32 << v35);
      v37 = &v36[(unint64_t)(v34 + v35) >> 6];
      *(_QWORD *)a5 = v37;
      *(_DWORD *)(a5 + 8) = ((_BYTE)v35 + (_BYTE)v34) & 0x3F;
      v38 = v42 - v34;
      v42 = v38;
      if (v38 >= 1)
      {
        *v37 = *v37 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v38) | (v32 >> v34);
        *(_DWORD *)(a5 + 8) = v42;
      }
    }
  }
  return sub_216B3CFDC(a6, a5);
}

uint64_t sub_216B3F404(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;

  sub_216B3DF58(&v3, *a1 + 8 * (a2 >> 6), a2 & 0x3F);
  return v3;
}

_QWORD *sub_216B3F43C(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  char v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  v17 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3)
  {
    v16 = (64 - v3);
    v4 = (uint64_t *)sub_216B24E80(&v16, &v17);
    v5 = *v4;
    v6 = v16 - *v4;
    v7 = *(unint64_t **)a1;
    *v7 = (0xFFFFFFFFFFFFFFFFLL >> v6) & (-1 << *(_DWORD *)(a1 + 8)) | **(_QWORD **)a1;
    v8 = v7 + 1;
    v9 = v17 - v5;
    v17 -= v5;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    v9 = a2;
    v8 = *(unint64_t **)a1;
  }
  v10 = v9 >> 6;
  v11 = (_QWORD *)nullsub_1(v8, a2);
  v16 = -1;
  result = sub_216B3F614(v11, v9 >> 6, &v16);
  v13 = v17 - (v9 & 0xC0);
  v17 -= v9 & 0xFFFFFFFFFFFFFFC0;
  if (v17)
  {
    v14 = *(unint64_t **)a1;
    v15 = (_QWORD *)(*(_QWORD *)a1 + 8 * v10);
    *(_QWORD *)a1 = v15;
    v14[v10] = *v15 | (0xFFFFFFFFFFFFFFFFLL >> -v13);
  }
  return result;
}

_QWORD *sub_216B3F528(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  char v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  v17 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3)
  {
    v16 = (64 - v3);
    v4 = (uint64_t *)sub_216B24E80(&v16, &v17);
    v5 = *v4;
    v6 = v16 - *v4;
    v7 = *(unint64_t **)a1;
    *v7 = **(_QWORD **)a1 & ~((0xFFFFFFFFFFFFFFFFLL >> v6) & (-1 << *(_DWORD *)(a1 + 8)));
    v8 = v7 + 1;
    v9 = v17 - v5;
    v17 -= v5;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    v9 = a2;
    v8 = *(unint64_t **)a1;
  }
  v10 = v9 >> 6;
  v11 = (_QWORD *)nullsub_1(v8, a2);
  v16 = 0;
  result = sub_216B3F614(v11, v9 >> 6, &v16);
  v13 = v17 - (v9 & 0xC0);
  v17 -= v9 & 0xFFFFFFFFFFFFFFC0;
  if (v17)
  {
    v14 = *(unint64_t **)a1;
    v15 = (_QWORD *)(*(_QWORD *)a1 + 8 * v10);
    *(_QWORD *)a1 = v15;
    v14[v10] = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -v13);
  }
  return result;
}

_QWORD *sub_216B3F614(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = nullsub_1(a2, a2);
  return sub_216B3F648(a1, v5, a3);
}

_QWORD *sub_216B3F648(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  for (; a2; --a2)
    *result++ = *a3;
  return result;
}

uint64_t sub_216B3F660(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;

  sub_216B1E684(&v3, *a1 + 8 * (a2 >> 6), 1 << a2);
  return v3;
}

uint64_t sub_216B3F6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B3F6C8(&v3);
}

uint64_t sub_216B3F6C8(_QWORD *a1)
{
  return sub_216B3F6D0(*a1);
}

uint64_t sub_216B3F6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B3F704(&v3);
}

uint64_t sub_216B3F704(_QWORD *a1)
{
  return sub_216B3F70C(*a1);
}

_QWORD *sub_216B3F714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B2F610(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216B2F730(v5, v7, a2);
  v10 += 8;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B3F784(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B2E220(a1);
  v6 = sub_216B3F830(a1, v5 + 1);
  v7 = sub_216B2E220(a1);
  sub_216B3F8A8(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216B2F730(v4, v9, a2);
  v13 += 8;
  sub_216B3F8AC(a1, v12);
  v10 = a1[1];
  sub_216B3F998(v12);
  return v10;
}

unint64_t sub_216B3F830(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216B2F570((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B2EE78(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216B3F8AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216B3FA24();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2E220(a1);
  return nullsub_1(a1, v10);
}

uint64_t *sub_216B3F99C(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B3EA70(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 8 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 8 * v9;
  return a1;
}

uint64_t sub_216B3FA24()
{
  return sub_216B3FA40();
}

uint64_t sub_216B3FA40()
{
  _QWORD v1[3];

  sub_216B3FA64(v1);
  return v1[2];
}

uint64_t sub_216B3FA6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B3FB38(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216B3FB38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  while (sub_216B2C76C((uint64_t)v13, (uint64_t)v12))
  {
    v9 = *(_QWORD *)sub_216B3FBC4((uint64_t)v13, v8);
    *(_QWORD *)sub_216B3FBE8((uint64_t)v11) = v9;
    sub_216B3FBF4((uint64_t)v13);
    sub_216B3FBF4((uint64_t)v11);
  }
  return sub_216B26D04((uint64_t)v13, (uint64_t)v11, a7);
}

uint64_t sub_216B3FBC4(uint64_t a1, uint64_t a2)
{
  nullsub_1(a1, a2);
  return sub_216B3FBE8(a1);
}

uint64_t sub_216B3FBE8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 8;
}

uint64_t sub_216B3FBF4(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 8;
  return result;
}

uint64_t *sub_216B3FC04(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216B3FC60((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B3FC68(a1, v4);
    sub_216B3D8F8(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B3FC60(uint64_t a1)
{
  return sub_216B3FC98(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B3FC68(_QWORD *a1, uint64_t a2)
{
  return (uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 3;
}

uint64_t sub_216B3FC9C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 8;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = j_nullsub_1(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B3FD08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B3FD30(&v3);
}

uint64_t sub_216B3FD30(_QWORD *a1)
{
  return sub_216B3FD38(*a1);
}

double sub_216B3FD44(_QWORD *a1, uint64_t a2, double *a3)
{
  _QWORD *v4;
  double result;

  v4 = sub_216B3FD7C(a1, a2);
  *v4 = &unk_24D5EFD50;
  result = *a3;
  v4[2] = *(_QWORD *)a3;
  return result;
}

_QWORD *sub_216B3FD7C(_QWORD *result, uint64_t a2)
{
  *result = &unk_24D5EFF20;
  result[1] = a2;
  return result;
}

uint64_t sub_216B3FD90(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_216B3FDC4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24D5EFD80;
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
      j__free(v2);
  }
  return a1;
}

uint64_t sub_216B3FE14()
{
  return 1024;
}

void sub_216B3FE1C(uint64_t *a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 80))(a1);
  if (v2)
    sub_216B3FE60(a1, v2);
  else
    sub_216B3FE9C(a1);
}

void sub_216B3FE60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_216B408F0(a1);
  v4 = sub_216B1D1D4(a2);
  sub_216B3FECC((uint64_t)a1, v4, a2, 1);
}

void sub_216B3FE9C(uint64_t *a1)
{
  sub_216B408F0(a1);
  sub_216B3FECC((uint64_t)a1, 0, 0, 0);
}

void sub_216B3FECC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v8;

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v8 = *(void **)(a1 + 8);
    if (v8)
      j__free(v8);
  }
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2 + a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = a4;
}

void **sub_216B3FF24(void **a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  _BYTE v5[20];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return (void **)sub_216B251FC((uint64_t)a1, 48);
  v2 = 0;
  do
  {
    v5[v2-- + 19] = (a2 % 0xA) | 0x30;
    v3 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v3);
  return sub_216B3FFE4(a1, &v5[v2 + 20], -v2);
}

void **sub_216B3FFE4(void **a1, _BYTE *a2, size_t __n)
{
  size_t v3;
  _BYTE *v6;
  size_t v7;
  void **v8;
  _BYTE *v9;
  size_t v11;
  _BYTE *v12;

  v3 = __n;
  v6 = a1[3];
  v7 = (_BYTE *)a1[2] - v6;
  if (v7 < __n)
  {
    while (1)
    {
      while (1)
      {
        v12 = a1[1];
        if (!v12)
          break;
        if (v6 == v12)
        {
          v7 *= v3 / v7;
          v3 -= v7;
          (*((void (**)(void **, _BYTE *, size_t))*a1 + 7))(a1, a2, v7);
          v6 = a1[3];
          v11 = (_BYTE *)a1[2] - v6;
          if (v3 <= v11)
          {
            v9 = &a2[v7];
            v8 = a1;
            goto LABEL_3;
          }
        }
        else
        {
          sub_216B405C4(a1, a2, v7);
          sub_216B4051C((uint64_t *)a1);
          v3 -= v7;
          v6 = a1[3];
          v11 = (_BYTE *)a1[2] - v6;
        }
        a2 += v7;
        v7 = v11;
        if (v11 >= v3)
          goto LABEL_2;
      }
      if (!*((_DWORD *)a1 + 8))
        break;
      sub_216B3FE1C((uint64_t *)a1);
      v6 = a1[3];
      v7 = (_BYTE *)a1[2] - v6;
      if (v7 >= v3)
        goto LABEL_2;
    }
    (*((void (**)(void **, _BYTE *, size_t))*a1 + 7))(a1, a2, v3);
  }
  else
  {
LABEL_2:
    v8 = a1;
    v9 = a2;
LABEL_3:
    sub_216B405C4(v8, v9, v3);
  }
  return a1;
}

void **sub_216B40100(void **a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_216B251FC((uint64_t)a1, 45);
    v2 = -(uint64_t)v2;
  }
  return sub_216B3FF24(a1, v2);
}

void **sub_216B40140(void **a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_216B251FC((uint64_t)a1, 45);
    v2 = -(uint64_t)v2;
  }
  return sub_216B4013C(a1, v2);
}

void **sub_216B4017C(void **a1, unint64_t a2)
{
  uint64_t v2;
  char v3;
  BOOL v4;
  _BYTE v6[20];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return (void **)sub_216B251FC((uint64_t)a1, 48);
  v2 = 0;
  do
  {
    if ((a2 & 0xF) >= 0xA)
      v3 = (a2 & 0xF) + 87;
    else
      v3 = a2 & 0xF | 0x30;
    v6[v2-- + 19] = v3;
    v4 = a2 > 0xF;
    a2 >>= 4;
  }
  while (v4);
  return sub_216B3FFE4(a1, &v6[v2 + 20], -v2);
}

uint64_t sub_216B40238(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t i;
  unsigned __int8 v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v6 = sub_216B1E67C((uint64_t)v15);
  if (v6)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = sub_216B26288(v15, i);
      v9 = v8;
      if (v8 > 0x21u)
      {
        if (v8 == 34)
        {
          v10 = sub_216B251FC(a1, 92);
          v11 = 34;
          goto LABEL_18;
        }
        if (v8 == 92)
        {
          v10 = sub_216B251FC(a1, 92);
          v11 = 92;
          goto LABEL_18;
        }
      }
      else
      {
        if (v8 == 9)
        {
          v10 = sub_216B251FC(a1, 92);
          v11 = 116;
          goto LABEL_18;
        }
        if (v8 == 10)
        {
          v10 = sub_216B251FC(a1, 92);
          v11 = 110;
LABEL_18:
          sub_216B251FC(v10, v11);
          continue;
        }
      }
      if (!sub_216B403A8(v8))
      {
        v12 = sub_216B251FC(a1, 92);
        if (a4)
        {
          sub_216B251FC(v12, 120);
          v13 = sub_216B403E0(v9 >> 4);
          sub_216B251FC(a1, v13);
          v11 = sub_216B403E0(v9 & 0xF);
        }
        else
        {
          sub_216B251FC(a1, (v9 >> 6) | 0x30);
          sub_216B251FC(a1, (v9 >> 3) & 7 | 0x30);
          v11 = v9 & 7 | 0x30;
        }
        v10 = a1;
        goto LABEL_18;
      }
      sub_216B403B0(a1, v9);
    }
  }
  return a1;
}

BOOL sub_216B403A8(signed int a1)
{
  return sub_216B40EF0(a1, 0x40000uLL);
}

uint64_t sub_216B403B0(uint64_t result, char a2)
{
  char *v2;

  v2 = *(char **)(result + 24);
  if ((unint64_t)v2 >= *(_QWORD *)(result + 16))
    return sub_216B40534(result, a2);
  *(_QWORD *)(result + 24) = v2 + 1;
  *v2 = a2;
  return result;
}

uint64_t sub_216B403E0(unsigned int a1)
{
  char v1;

  if (a1 >= 0xA)
    v1 = 55;
  else
    v1 = 48;
  return (char)(v1 + a1);
}

uint64_t sub_216B403FC(uint64_t a1, double a2)
{
  _BYTE v4[24];
  double v5;

  v5 = a2;
  sub_216B3D65C((uint64_t)"%e", (uint64_t)&v5, (uint64_t)v4);
  sub_216B40450(a1, (uint64_t)v4);
  j_j_nullsub_1(v4);
  return a1;
}

uint64_t sub_216B40450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE *v11;
  const void *v13[19];

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v5 - v4;
  if ((unint64_t)(v5 - v4) < 4)
  {
    v8 = 127;
  }
  else
  {
    v7 = sub_216B40650(a2, v4, (int)v5 - (int)v4);
    v8 = v7;
    if (v6 >= v7)
    {
      *(_QWORD *)(a1 + 24) += v7;
      return a1;
    }
  }
  sub_216B2A87C(v13);
  do
  {
    v9 = v8;
    sub_216B294F0(v13, v8);
    v10 = sub_216B262E0((uint64_t)v13);
    v8 = sub_216B40650(a2, v10, v8);
  }
  while (v9 < v8);
  v11 = (_BYTE *)sub_216B262E0((uint64_t)v13);
  sub_216B3FFE4((void **)a1, v11, v8);
  sub_216B1FF6C(v13);
  return a1;
}

uint64_t sub_216B4051C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  a1[3] = a1[1];
  return (*(uint64_t (**)(void))(v1 + 56))();
}

uint64_t sub_216B40534(uint64_t a1, char a2)
{
  _BYTE *i;
  unint64_t v5;
  char v7;

  v5 = *(_QWORD *)(a1 + 16);
  for (i = *(_BYTE **)(a1 + 24); ; i = *(_BYTE **)(a1 + 24))
  {
    if ((unint64_t)i < v5)
      goto LABEL_7;
    if (*(_QWORD *)(a1 + 8))
    {
      sub_216B4051C((uint64_t *)a1);
      i = *(_BYTE **)(a1 + 24);
LABEL_7:
      *(_QWORD *)(a1 + 24) = i + 1;
      *i = a2;
      return a1;
    }
    if (!*(_DWORD *)(a1 + 32))
      break;
    sub_216B3FE1C((uint64_t *)a1);
    v5 = *(_QWORD *)(a1 + 16);
  }
  v7 = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v7, 1);
  return a1;
}

void **sub_216B405C4(void **result, _BYTE *a2, size_t __n)
{
  void **v4;

  v4 = result;
  switch(__n)
  {
    case 0uLL:
      break;
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 3uLL:
      goto LABEL_3;
    case 4uLL:
      *((_BYTE *)result[3] + 3) = a2[3];
LABEL_3:
      *((_BYTE *)result[3] + 2) = a2[2];
LABEL_4:
      *((_BYTE *)result[3] + 1) = a2[1];
LABEL_5:
      *(_BYTE *)result[3] = *a2;
      break;
    default:
      result = (void **)memcpy(result[3], a2, __n);
      break;
  }
  v4[3] = (char *)v4[3] + __n;
  return result;
}

uint64_t sub_216B40650(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  unsigned int v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  if (v4 < a3)
    v5 = v4;
  else
    v5 = v4 + 1;
  if (v4 >= 0)
    return v5;
  else
    return 2 * a3;
}

uint64_t sub_216B40690(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const std::error_category *v11;
  char v12;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::error_code v19;

  v8 = sub_216B407DC(a1, 0);
  *(_QWORD *)v8 = off_24D5EFDE8;
  *(_WORD *)(v8 + 41) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  sub_216B25BB0(a3, v9);
  if (*a2 == 45 && !a2[1])
  {
    *(_DWORD *)(a1 + 36) = 1;
    if ((a4 & 4) == 0)
      sub_216B2B138();
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v10 = (uint64_t *)sub_216B25FA8((uint64_t)&v18, a2);
    *(_QWORD *)&v19.__val_ = sub_216B298D4(v10, (int *)(a1 + 36), a4, 438);
    v19.__cat_ = v11;
    if (sub_216B27BAC(&v19))
    {
      sub_216B26DE8(&v15, a2);
      sub_216B2BA64("Error opening output file '", &v15, (uint64_t)&v16);
      sub_216B2B308(&v16, "': ", (uint64_t)&v17);
      std::error_code::message(&v14, &v19);
      sub_216B2B2C8(&v17, (uint64_t)&v14, (uint64_t)&v18);
      sub_216B26E7C(a3, (uint64_t)&v18);
      std::string::~string(&v18);
      std::string::~string(&v14);
      std::string::~string(&v17);
      std::string::~string(&v16);
      std::string::~string(&v15);
      v12 = 0;
    }
    else
    {
      v12 = 1;
    }
    *(_BYTE *)(a1 + 40) = v12;
  }
  return a1;
}

uint64_t sub_216B407DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2 ^ 1;
  *(_QWORD *)result = off_24D5EFD80;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_216B407FC(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v7;
  off_t v8;
  off_t v9;

  v7 = sub_216B407DC(a1, a4);
  *(_QWORD *)v7 = off_24D5EFDE8;
  *(_DWORD *)(v7 + 36) = a2;
  *(_BYTE *)(v7 + 40) = a3;
  *(_WORD *)(v7 + 41) = 0;
  v8 = lseek(a2, 0, 1);
  if (v8 == -1)
    v9 = 0;
  else
    v9 = v8;
  *(_QWORD *)(a1 + 48) = v9;
  return a1;
}

uint64_t sub_216B4086C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5EFDE8;
  if ((*(_DWORD *)(a1 + 36) & 0x80000000) == 0)
  {
    sub_216B408F0((uint64_t *)a1);
    if (*(_BYTE *)(a1 + 40))
    {
      while (close(*(_DWORD *)(a1 + 36)))
      {
        if (*__error() != 4)
        {
          sub_216B40908(a1);
          break;
        }
      }
    }
  }
  if (sub_216B40914(a1))
    sub_216B25E84("IO failure on output stream.", 0);
  return sub_216B3FDC4(a1);
}

uint64_t *sub_216B408F0(uint64_t *a1)
{
  if (a1[3] != a1[1])
    return (uint64_t *)sub_216B4051C(a1);
  return a1;
}

uint64_t sub_216B40908(uint64_t result)
{
  *(_BYTE *)(result + 41) = 1;
  return result;
}

uint64_t sub_216B40914(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

void sub_216B40920()
{
  void *v0;

  v0 = (void *)sub_216B4091C();
  j__free(v0);
}

uint64_t sub_216B40934(uint64_t a1, char *__buf, size_t __nbyte)
{
  size_t v3;
  uint64_t result;
  iovec v7;

  v3 = __nbyte;
  *(_QWORD *)(a1 + 48) += __nbyte;
  while (!*(_BYTE *)(a1 + 42))
  {
    result = write(*(_DWORD *)(a1 + 36), __buf, v3);
    if (result < 0)
      goto LABEL_6;
LABEL_4:
    __buf += result;
    v3 -= result;
LABEL_9:
    if (!v3)
      return result;
  }
  v7.iov_base = __buf;
  v7.iov_len = v3;
  result = writev(*(_DWORD *)(a1 + 36), &v7, 1);
  if ((result & 0x8000000000000000) == 0)
    goto LABEL_4;
LABEL_6:
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 4)
    goto LABEL_9;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_9;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_9;
  return sub_216B40908(a1);
}

uint64_t sub_216B409F4(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 40) = 0;
  sub_216B408F0((uint64_t *)a1);
  while (1)
  {
    result = close(*(_DWORD *)(a1 + 36));
    if (!(_DWORD)result)
      break;
    if (*__error() != 4)
    {
      result = sub_216B40908(a1);
      break;
    }
  }
  *(_DWORD *)(a1 + 36) = -1;
  return result;
}

uint64_t sub_216B40A44(uint64_t a1)
{
  stat v3;

  if (fstat(*(_DWORD *)(a1 + 36), &v3) || (v3.st_mode & 0xF000) == 0x2000 && isatty(*(_DWORD *)(a1 + 36)))
    return 0;
  else
    return v3.st_blksize;
}

uint64_t *sub_216B40AA0(uint64_t *a1, int a2, int a3, int a4)
{
  const char *v8;
  char *v9;
  size_t v10;

  if (sub_216B2043C())
    sub_216B408F0(a1);
  if (a2 == 8)
    v8 = sub_216B2AF7C();
  else
    v8 = sub_216B2AF54(a2, a3, a4);
  v9 = (char *)v8;
  if (v8)
  {
    v10 = strlen(v8);
    sub_216B3FFE4((void **)a1, v9, v10);
    a1[6] -= v10;
  }
  return a1;
}

uint64_t *sub_216B40B38(uint64_t *a1)
{
  const char *v2;
  char *v3;
  size_t v4;

  if (sub_216B2043C())
    sub_216B408F0(a1);
  v2 = sub_216B2AF94();
  if (v2)
  {
    v3 = (char *)v2;
    v4 = strlen(v2);
    sub_216B3FFE4((void **)a1, v3, v4);
    a1[6] -= v4;
  }
  return a1;
}

uint64_t *sub_216B40BA0(uint64_t *a1)
{
  const char *v2;
  char *v3;
  size_t v4;

  if (sub_216B2043C())
    sub_216B408F0(a1);
  v2 = sub_216B2AF88();
  if (v2)
  {
    v3 = (char *)v2;
    v4 = strlen(v2);
    sub_216B3FFE4((void **)a1, v3, v4);
    a1[6] -= v4;
  }
  return a1;
}

BOOL sub_216B40C08(uint64_t a1)
{
  return sub_216B2AE24(*(_DWORD *)(a1 + 36));
}

BOOL sub_216B40C10(uint64_t a1)
{
  return sub_216B2AE40(*(_DWORD *)(a1 + 36));
}

uint64_t sub_216B40C20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253D27E68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253D27E68))
  {
    sub_216B40C18(&qword_253D27E78, 2, 0, 1);
    __cxa_atexit((void (*)(void *))sub_216B40C1C, &qword_253D27E78, &dword_216B18000);
    __cxa_guard_release(&qword_253D27E68);
  }
  return sub_216B1E600((uint64_t)&qword_253D27E78);
}

uint64_t sub_216B40CA4(uint64_t *a1)
{
  *a1 = (uint64_t)off_24D5EFE50;
  sub_216B408F0(a1);
  return sub_216B3FDC4((uint64_t)a1);
}

void sub_216B40CD8()
{
  void *v0;

  v0 = (void *)sub_216B40CD4();
  j__free(v0);
}

std::string *sub_216B40CEC(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 40), a2, a3);
}

uint64_t sub_216B40CF4(uint64_t a1, const void **a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)sub_216B407DC(a1, 0);
  *v4 = off_24D5EFEB8;
  v4[5] = a2;
  v5 = sub_216B1FF14((uint64_t)a2);
  sub_216B28114(a2, v5 + 128);
  v6 = sub_216B1E67C(*(_QWORD *)(a1 + 40));
  v7 = sub_216B28190(*(_QWORD *)(a1 + 40));
  v8 = sub_216B1FF14(*(_QWORD *)(a1 + 40));
  sub_216B40D7C(a1, v6, v7 - v8);
  return a1;
}

void sub_216B40D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216B3FECC(a1, a2, a3, 2);
}

uint64_t sub_216B40D88(uint64_t *a1)
{
  *a1 = (uint64_t)off_24D5EFEB8;
  sub_216B408F0(a1);
  return sub_216B3FDC4((uint64_t)a1);
}

void sub_216B40DBC()
{
  void *v0;

  v0 = (void *)sub_216B40DB8();
  j__free(v0);
}

void sub_216B40DD0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  const void **v7;
  int v8;
  const void **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_216B1E67C(*(_QWORD *)(a1 + 40));
  v7 = *(const void ***)(a1 + 40);
  if ((char *)v6 == a2)
  {
    v8 = sub_216B1FF14((uint64_t)v7);
    sub_216B28154(*(_QWORD *)(a1 + 40), v8 + a3);
  }
  else
  {
    sub_216B202D8(v7, a2, &a2[a3]);
  }
  v9 = *(const void ***)(a1 + 40);
  v10 = sub_216B1FF14((uint64_t)v9);
  sub_216B28114(v9, v10 + 64);
  v11 = sub_216B1E67C(*(_QWORD *)(a1 + 40));
  v12 = sub_216B28190(*(_QWORD *)(a1 + 40));
  v13 = v12 - sub_216B1FF14(*(_QWORD *)(a1 + 40));
  sub_216B40D7C(a1, v11, v13);
}

uint64_t sub_216B40E78(uint64_t a1)
{
  return sub_216B1FF14(*(_QWORD *)(a1 + 40));
}

uint64_t sub_216B40E80(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_216B408F0(a1);
  v2 = sub_216B1E600(a1[5]);
  v3 = sub_216B1FF14(a1[5]);
  sub_216B1E684(&v5, v2, v3);
  return v5;
}

uint64_t sub_216B40ED0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t sub_216B40EDC(uint64_t a1, uint64_t a2)
{
  return sub_216B25B78(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_216B40EE8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

BOOL sub_216B40EF0(signed int a1, unint64_t a2)
{
  BOOL v4;

  if (sub_216B40F44(a1))
    v4 = (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a1 + 60) & a2) == 0;
  else
    v4 = __maskrune(a1, a2) == 0;
  return !v4;
}

BOOL sub_216B40F44(unsigned int a1)
{
  return a1 < 0x80;
}

_QWORD *sub_216B40F50(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_216B1D1D4(56);
  *a1 = sub_216B40868(v8, a2, a3, a4);
  return a1;
}

uint64_t **sub_216B40FA0(uint64_t **a1)
{
  sub_216B408F0(*a1);
  return a1;
}

uint64_t sub_216B40FC8(uint64_t a1, char *__s, int a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  __n128 v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if ((~a3 & 0x11) == 0)
    return 16;
  v30 = v3;
  v31 = v4;
  if ((a3 & 0x20) != 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = v10 - (_QWORD)__s;
    if (v10 < (unint64_t)__s)
      return 16;
  }
  else
  {
    v9 = strlen(__s);
  }
  v11 = malloc_type_malloc(0x18FuLL, 0xF976916uLL);
  if (!v11)
    return 12;
  v12 = v11;
  v18 = 0;
  v14 = 0;
  v16 = 3 * (v9 >> 1) + 1;
  v15 = malloc_type_calloc(v16, 8uLL, 0x100004000313F17uLL);
  v17 = 0;
  if (!v15)
  {
    free(v12);
    return 12;
  }
  v19 = v12;
  v13.n128_u64[0] = (unint64_t)__s;
  v13.n128_u64[1] = (unint64_t)&__s[v9];
  LODWORD(v14) = 0;
  LODWORD(v18) = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v12[4] = 256;
  *(_QWORD *)(v12 + 7) = 0;
  *(_QWORD *)(v12 + 5) = 0;
  *(_OWORD *)(v12 + 34) = 0u;
  *(_OWORD *)(v12 + 66) = 0u;
  v12[9] = 0;
  v12[10] = a3 & 0xFFFFFF7F;
  v12[26] = 0;
  *((_QWORD *)v12 + 14) = 0;
  *(_OWORD *)(v12 + 18) = xmmword_216C12C50;
  *((_QWORD *)v12 + 11) = v12 + 66;
  *((_QWORD *)v12 + 12) = 0;
  *(_OWORD *)(v12 + 38) = 0u;
  *(_OWORD *)(v12 + 42) = 0u;
  *(_OWORD *)(v12 + 46) = 0u;
  *(_OWORD *)(v12 + 50) = 0u;
  *(_OWORD *)(v12 + 54) = 0u;
  *(_OWORD *)(v12 + 58) = 0u;
  *(_OWORD *)(v12 + 62) = 0u;
  *(_OWORD *)(v12 + 70) = 0u;
  *(_OWORD *)(v12 + 74) = 0u;
  *(_OWORD *)(v12 + 78) = 0u;
  *(_OWORD *)(v12 + 82) = 0u;
  *(_OWORD *)(v12 + 86) = 0u;
  *(_OWORD *)(v12 + 90) = 0u;
  *(_OWORD *)(v12 + 94) = 0u;
  v12[30] = 0;
  sub_216B41228((void **)&v13, 0x8000000, 0);
  *((_QWORD *)v12 + 7) = v17 - 1;
  if ((a3 & 1) != 0)
  {
    sub_216B4129C((void **)&v13, 128);
  }
  else if ((a3 & 0x10) != 0)
  {
    sub_216B413F0(&v13);
  }
  else
  {
    sub_216B41448((void **)&v13, 128, 128);
  }
  sub_216B41228((void **)&v13, 0x8000000, 0);
  *((_QWORD *)v12 + 8) = v17 - 1;
  sub_216B41574((uint64_t)&v13, (uint64_t)v12);
  sub_216B4162C((uint64_t)&v13, (uint64_t)v12);
  sub_216B4168C(&v13, (uint64_t)v12);
  *((_QWORD *)v12 + 16) = sub_216B417EC((uint64_t)&v13, (uint64_t)v12);
  *v12 = 53829;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)v12 + 14);
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)a1 = 62053;
  if ((v12[18] & 4) != 0)
    sub_216B4185C((uint64_t)&v13, 15);
  if (!(_DWORD)v14)
    return 0;
  sub_216B46060(a1);
  return v14;
}

void **sub_216B41228(void **result, uint64_t a2, uint64_t a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (!*((_DWORD *)result + 4))
  {
    v5 = result;
    v7 = (uint64_t)result[4];
    v6 = (uint64_t)result[5];
    if (v6 >= v7)
    {
      v8 = v7 + 2;
      if (v7 >= -1)
        v8 = v7 + 1;
      result = sub_216B43060(result, (v8 & 0xFFFFFFFFFFFFFFFELL) + (v8 >> 1));
      v6 = (uint64_t)v5[5];
    }
    v9 = v5[3];
    v5[5] = (void *)(v6 + 1);
    v9[v6] = a3 | a2;
  }
  return result;
}

void sub_216B4129C(void **a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char i;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  int v10;
  void *v12;
  void *v13;

  v4 = 0;
  v5 = 0;
  for (i = 0; ; i = 1)
  {
    v7 = (uint64_t)a1[5];
    v8 = *a1;
    v9 = (unint64_t)a1[1];
    if ((unint64_t)*a1 >= v9)
      goto LABEL_9;
    do
    {
      v10 = (char)*v8;
      if (v10 == 124 || v10 == a2)
        break;
      sub_216B41878((uint64_t)a1);
      v8 = *a1;
      v9 = (unint64_t)a1[1];
    }
    while ((unint64_t)*a1 < v9);
    if (a1[5] == (void *)v7)
    {
LABEL_9:
      sub_216B4185C((uint64_t)a1, 14);
      v8 = *a1;
      v9 = (unint64_t)a1[1];
    }
    if ((unint64_t)v8 >= v9 || *v8 != 124)
      break;
    *a1 = v8 + 1;
    v12 = a1[5];
    if ((i & 1) == 0)
    {
      sub_216B41E34(a1, 2013265920, (uint64_t)v12 - v7 + 1, v7);
      v12 = a1[5];
      v4 = v7;
      v5 = v7;
    }
    sub_216B41228(a1, 0x80000000, (uint64_t)v12 - v4);
    v13 = a1[5];
    v4 = (uint64_t)v13 - 1;
    sub_216B41ED4((uint64_t)a1, v5, (uint64_t)v13 - v5);
    v5 = (uint64_t)a1[5];
    sub_216B41228(a1, 2281701376, 0);
  }
  if ((i & 1) != 0)
  {
    sub_216B41ED4((uint64_t)a1, v5, (uint64_t)a1[5] - v5);
    sub_216B41228(a1, 2415919104, (uint64_t)a1[5] - v4);
  }
}

void sub_216B413F0(__n128 *a1)
{
  char *v2;
  unint64_t v3;

  v2 = (char *)a1->n128_u64[0];
  v3 = a1->n128_u64[1];
  if (a1->n128_u64[0] < v3)
    goto LABEL_5;
  sub_216B4185C((uint64_t)a1, 14);
  while (1)
  {
    v2 = (char *)a1->n128_u64[0];
    v3 = a1->n128_u64[1];
LABEL_5:
    if ((unint64_t)v2 >= v3)
      break;
    a1->n128_u64[0] = (unint64_t)(v2 + 1);
    sub_216B42304(a1, *v2);
  }
}

void **sub_216B41448(void **result, int a2, int a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int32x2_t *v9;
  int32x2_t v10;
  int32x2_t v11;
  int v12;
  char *v13;
  uint64_t v14;

  v5 = (uint64_t)result;
  v6 = (char *)result[5];
  v7 = (char *)*result;
  v8 = (unint64_t)result[1];
  if ((unint64_t)*result < v8 && *v7 == 94)
  {
    *result = v7 + 1;
    result = sub_216B41228(result, 402653184, 0);
    v9 = *(int32x2_t **)(v5 + 56);
    v10 = v9[9];
    v11 = vadd_s32(v10, (int32x2_t)0x100000001);
    v10.i32[0] |= 1u;
    v10.i32[1] = v11.i32[1];
    v9[9] = v10;
    v7 = *(char **)v5;
    v8 = *(_QWORD *)(v5 + 8);
  }
  if ((unint64_t)v7 >= v8)
    goto LABEL_12;
  result = 0;
  v12 = 1;
  do
  {
    if ((unint64_t)(v7 + 1) < v8 && *v7 == a2 && v7[1] == a3)
      break;
    result = (void **)sub_216B43114(v5, v12);
    v12 = 0;
    v7 = *(char **)v5;
    v8 = *(_QWORD *)(v5 + 8);
  }
  while (*(_QWORD *)v5 < v8);
  v13 = *(char **)(v5 + 40);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v5 + 40) = v13 - 1;
    result = sub_216B41228((void **)v5, 0x20000000, 0);
    v14 = *(_QWORD *)(v5 + 56);
    *(_DWORD *)(v14 + 72) |= 2u;
    ++*(_DWORD *)(v14 + 80);
LABEL_12:
    v13 = *(char **)(v5 + 40);
  }
  if (v13 == v6)
    return (void **)sub_216B4185C(v5, 14);
  return result;
}

uint64_t sub_216B41574(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (!*(_DWORD *)(result + 16))
  {
    v3 = *(_QWORD *)(a2 + 88);
    v4 = -128;
    v5 = -127;
    do
    {
      if (!*(_BYTE *)(v3 + v4))
      {
        result = sub_216B43564(a2, v4);
        if ((_DWORD)result)
        {
          v6 = *(_DWORD *)(a2 + 84);
          *(_DWORD *)(a2 + 84) = v6 + 1;
          *(_BYTE *)(v3 + v4) = v6;
          if (v4 <= 126)
          {
            v7 = v5;
            do
            {
              if (!*(_BYTE *)(v3 + v7))
              {
                result = sub_216B435A8(a2, v4, v7);
                if ((_DWORD)result)
                  *(_BYTE *)(v3 + v7) = v6;
              }
              ++v7;
            }
            while (v7 != 128);
          }
        }
      }
      ++v4;
      ++v5;
    }
    while (v4 != 128);
  }
  return result;
}

uint64_t sub_216B4162C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v4;
  result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), 8 * v4, 0x100004000313F17uLL);
  *(_QWORD *)(a2 + 8) = result;
  if (!result)
  {
    result = sub_216B4185C(a1, 12);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 24);
  }
  return result;
}

_BYTE *sub_216B4168C(_BYTE *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  if (*((_DWORD *)result + 4))
    return result;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)(a2 + 8) + 8;
  result = (_BYTE *)v6;
  do
  {
    v8 = *(_QWORD *)result;
    result += 8;
    LODWORD(v7) = v8;
    v9 = ((unint64_t)(v8 & 0xF8000000) - 0x10000000) >> 27;
    if (v9 > 0xD)
      goto LABEL_15;
    if (((1 << v9) & 0x1880) != 0)
      goto LABEL_18;
    if (((1 << v9) & 0x2200) != 0)
    {
      result = (_BYTE *)v6;
      while (1)
      {
        result += 8 * (v7 & 0x7FFFFFF);
        v7 = *(_QWORD *)result;
        v10 = *(_QWORD *)result & 0xF8000000;
        if (v10 == 1610612736)
          break;
        if ((_DWORD)v10 != -2013265920)
        {
          if ((_DWORD)v10 == -1879048192)
            break;
          *(_DWORD *)(a2 + 72) |= 4u;
          return result;
        }
      }
LABEL_15:
      if (v5 > *(int *)(a2 + 104))
      {
        *(_DWORD *)(a2 + 104) = v5;
        v3 = v4;
      }
      v5 = 0;
      goto LABEL_18;
    }
    if (v9)
      goto LABEL_15;
    if (!v5)
      v4 = (uint64_t *)v6;
    ++v5;
LABEL_18:
    v6 = (uint64_t)result;
  }
  while ((v7 & 0xF8000000) != 0x8000000);
  v11 = *(int *)(a2 + 104);
  if ((_DWORD)v11)
  {
    result = malloc_type_malloc(v11 + 1, 0xC6A26501uLL);
    *(_QWORD *)(a2 + 96) = result;
    if (result)
    {
      v12 = *(unsigned int *)(a2 + 104);
      if ((int)v12 >= 1)
      {
        do
        {
          do
          {
            v14 = *v3++;
            v13 = v14;
          }
          while ((v14 & 0xF8000000) != 0x10000000);
          *result++ = v13;
        }
        while (v12-- > 1);
      }
      *result = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 104) = 0;
    }
  }
  return result;
}

uint64_t sub_216B417EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 16))
    return 0;
  v3 = 0;
  result = 0;
  v4 = (uint64_t *)(*(_QWORD *)(a2 + 8) + 8);
  do
  {
    v5 = *v4++;
    v6 = v5 & 0xF8000000;
    if (v3 <= result)
      v7 = result;
    else
      v7 = v3;
    v8 = v3 - 1;
    if ((_DWORD)v6 == 1207959552)
      ++v3;
    if ((_DWORD)v6 == 1342177280)
    {
      v3 = v8;
      result = v7;
    }
  }
  while (v6 != 0x8000000);
  if (v3)
    *(_DWORD *)(a2 + 72) |= 4u;
  return result;
}

uint64_t sub_216B4185C(uint64_t result, int a2)
{
  if (!*(_DWORD *)(result + 16))
    *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)result = &unk_254E4AED0;
  *(_QWORD *)(result + 8) = &unk_254E4AED0;
  return result;
}

void sub_216B41878(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int32x2_t *v17;
  int32x2_t v18;
  int32x2_t v19;
  __n128 *v20;
  char *v21;
  unint64_t v22;
  int v23;
  unsigned __int8 *v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  int v36;
  unsigned __int8 *v37;
  BOOL v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _BYTE *v42;

  v1 = a1;
  v2 = *(_BYTE **)a1;
  v3 = (char *)(*(_QWORD *)a1 + 1);
  *(_QWORD *)a1 = v3;
  v4 = (char)*v2;
  v5 = *(_QWORD *)(a1 + 40);
  if (v4 <= 62)
  {
    switch(*v2)
    {
      case '$':
        sub_216B41228((void **)a1, 0x20000000, 0);
        v6 = *(_QWORD *)(v1 + 56);
        *(_DWORD *)(v6 + 72) |= 2u;
        ++*(_DWORD *)(v6 + 80);
        goto LABEL_42;
      case '(':
        if ((unint64_t)v3 >= *(_QWORD *)(a1 + 8))
          sub_216B4185C(a1, 8);
        v14 = *(_QWORD *)(v1 + 56);
        v15 = *(_QWORD *)(v14 + 112) + 1;
        *(_QWORD *)(v14 + 112) = v15;
        if (v15 <= 9)
          *(_QWORD *)(v1 + 8 * v15 + 64) = *(_QWORD *)(v1 + 40);
        sub_216B41228((void **)v1, 1744830464, v15);
        if (*(_QWORD *)v1 >= *(_QWORD *)(v1 + 8) || **(_BYTE **)v1 != 41)
          sub_216B4129C(v1, 41);
        if (v15 <= 9)
          *(_QWORD *)(v1 + 8 * v15 + 144) = *(_QWORD *)(v1 + 40);
        sub_216B41228((void **)v1, 1879048192, v15);
        v16 = *(char **)v1;
        if (*(_QWORD *)v1 >= *(_QWORD *)(v1 + 8))
          goto LABEL_29;
        *(_QWORD *)v1 = v16 + 1;
        if (*v16 != 41)
          goto LABEL_29;
        goto LABEL_42;
      case ')':
LABEL_29:
        a1 = v1;
        v13 = 8;
        goto LABEL_30;
      case '*':
      case '+':
        goto LABEL_17;
      case '.':
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
          sub_216B41EF8(a1);
        else
          sub_216B41228((void **)a1, 671088640, 0);
        goto LABEL_42;
      default:
        goto LABEL_38;
    }
  }
  if (v4 > 93)
  {
    switch(v4)
    {
      case '^':
        sub_216B41228((void **)a1, 402653184, 0);
        v12 = 0;
        v17 = *(int32x2_t **)(v1 + 56);
        v18 = v17[9];
        v19 = vadd_s32(v18, (int32x2_t)0x100000001);
        v18.i32[0] |= 1u;
        v18.i32[1] = v19.i32[1];
        v17[9] = v18;
        goto LABEL_43;
      case '{':
        if ((unint64_t)v3 < *(_QWORD *)(a1 + 8) && *v3 - 48 <= 9)
          sub_216B4185C(a1, 13);
        break;
      case '|':
        v13 = 14;
LABEL_30:
        sub_216B4185C(a1, v13);
LABEL_42:
        v12 = 1;
        goto LABEL_43;
    }
LABEL_38:
    v20 = (__n128 *)v1;
    v7 = v4;
LABEL_41:
    sub_216B42304(v20, v7);
    goto LABEL_42;
  }
  if (v4 == 63)
  {
LABEL_17:
    v13 = 13;
    goto LABEL_30;
  }
  if (v4 == 91)
  {
    sub_216B41F48(a1);
    goto LABEL_42;
  }
  if (v4 != 92)
    goto LABEL_38;
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 8))
  {
    sub_216B4185C(a1, 5);
    v3 = *(char **)v1;
  }
  *(_QWORD *)v1 = v3 + 1;
  v7 = *v3;
  if ((v7 - 49) > 8)
  {
    v20 = (__n128 *)v1;
    goto LABEL_41;
  }
  v8 = (v7 - 48);
  v9 = v1 + 8 * v8;
  v11 = *(_QWORD *)(v9 + 144);
  v10 = (uint64_t *)(v9 + 144);
  if (!v11)
  {
    a1 = v1;
    v13 = 6;
    goto LABEL_30;
  }
  sub_216B41228((void **)v1, 939524096, v8);
  sub_216B4229C(v1, *(_QWORD *)(v1 + 8 * v8 + 64) + 1, *v10);
  sub_216B41228((void **)v1, 0x40000000, v8);
  v12 = 1;
  *(_DWORD *)(*(_QWORD *)(v1 + 56) + 120) = 1;
LABEL_43:
  v21 = *(char **)v1;
  v22 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)v1 >= v22)
    return;
  v23 = *v21;
  if ((v23 - 42) >= 2 && v23 != 63)
  {
    v24 = (unsigned __int8 *)(v21 + 1);
    v25 = v23 != 123 || (unint64_t)v24 >= v22;
    if (v25 || *v24 - 48 > 9)
      return;
  }
  v26 = (char)v23;
  *(_QWORD *)v1 = v21 + 1;
  if ((v12 & 1) == 0)
    sub_216B4185C(v1, 13);
  if (v26 > 62)
  {
    if (v26 == 63)
    {
      sub_216B41E34((_QWORD *)v1, 2013265920, *(_QWORD *)(v1 + 40) - v5 + 1, v5);
      sub_216B41228((void **)v1, 0x80000000, *(_QWORD *)(v1 + 40) - v5);
      sub_216B41ED4(v1, v5, *(_QWORD *)(v1 + 40) - v5);
      sub_216B41228((void **)v1, 2281701376, 0);
      sub_216B41ED4(v1, *(_QWORD *)(v1 + 40) - 1, 1);
      v28 = (void **)v1;
      v29 = 2415919104;
      v27 = 2;
      goto LABEL_66;
    }
    if (v26 == 123)
    {
      v30 = sub_216B423A4((uint64_t *)v1);
      v31 = v30;
      v32 = *(char **)v1;
      v33 = v30;
      if (*(_QWORD *)v1 < *(_QWORD *)(v1 + 8))
      {
        v33 = v30;
        if (*v32 == 44)
        {
          *(_QWORD *)v1 = v32 + 1;
          if (v32[1] - 48 > 9)
          {
            v33 = 256;
          }
          else
          {
            v33 = sub_216B423A4((uint64_t *)v1);
            if (v31 > (int)v33)
              sub_216B4185C(v1, 10);
          }
        }
      }
      sub_216B42434((void **)v1, v5, v31, v33);
      v40 = *(char **)v1;
      v39 = *(_QWORD *)(v1 + 8);
      if (*(_QWORD *)v1 >= v39)
      {
LABEL_86:
        sub_216B4185C(v1, 9);
      }
      else
      {
        if (*v40 == 125)
        {
          *(_QWORD *)v1 = v40 + 1;
          goto LABEL_67;
        }
        v41 = v39 - (_QWORD)v40;
        v42 = v40 + 1;
        while (*(v42 - 1) != 125)
        {
          *(_QWORD *)v1 = v42++;
          if (!--v41)
            goto LABEL_86;
        }
      }
      sub_216B4185C(v1, 10);
    }
  }
  else
  {
    if (v26 == 42)
    {
      sub_216B41E34((_QWORD *)v1, 1207959552, *(_QWORD *)(v1 + 40) - v5 + 1, v5);
      sub_216B41228((void **)v1, 1342177280, *(_QWORD *)(v1 + 40) - v5);
      sub_216B41E34((_QWORD *)v1, 1476395008, *(_QWORD *)(v1 + 40) - v5 + 1, v5);
      v27 = *(_QWORD *)(v1 + 40) - v5;
      v28 = (void **)v1;
      v29 = 1610612736;
      goto LABEL_66;
    }
    if (v26 == 43)
    {
      sub_216B41E34((_QWORD *)v1, 1207959552, *(_QWORD *)(v1 + 40) - v5 + 1, v5);
      v27 = *(_QWORD *)(v1 + 40) - v5;
      v28 = (void **)v1;
      v29 = 1342177280;
LABEL_66:
      sub_216B41228(v28, v29, v27);
    }
  }
LABEL_67:
  v34 = *(char **)v1;
  v35 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)v1 < v35)
  {
    if ((v36 = *v34, (v36 - 42) < 2)
      || v36 == 63
      || ((v37 = (unsigned __int8 *)(v34 + 1), v36 == 123) ? (v38 = (unint64_t)v37 >= v35) : (v38 = 1),
          !v38 && *v37 - 48 <= 9))
    {
      sub_216B4185C(v1, 13);
    }
  }
}

_QWORD *sub_216B41E34(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (!*((_DWORD *)result + 4))
  {
    v5 = result;
    v6 = result[5];
    sub_216B41228((void **)result, a2, a3);
    v7 = 0;
    v8 = v5[3];
    v9 = *(_QWORD *)(v8 + 8 * v6);
    do
    {
      v10 = &v5[v7];
      v11 = v5[v7 + 9];
      if (v11 >= a4)
        v10[9] = v11 + 1;
      v12 = v10[19];
      if (v12 >= a4)
        v10[19] = v12 + 1;
      ++v7;
    }
    while (v7 != 9);
    result = memmove((void *)(v8 + 8 * a4 + 8), (const void *)(v8 + 8 * a4), 8 * (v5[5] + ~a4));
    *(_QWORD *)(v5[3] + 8 * a4) = v9;
  }
  return result;
}

uint64_t sub_216B41ED4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(result + 16))
    *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a2) = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a2) & 0xF8000000 | a3;
  return result;
}

__n128 sub_216B41EF8(uint64_t a1)
{
  __n128 result;
  __n128 v3;
  int v4;

  v4 = 6097502;
  v3 = *(__n128 *)a1;
  *(_QWORD *)a1 = &v4;
  *(_QWORD *)(a1 + 8) = (char *)&v4 + 3;
  sub_216B41F48(a1);
  result = v3;
  *(__n128 *)a1 = v3;
  return result;
}

void **sub_216B41F48(uint64_t a1)
{
  const char *v2;
  void **result;
  void **v4;
  const char *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  char v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  int v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(const char **)a1;
  if ((unint64_t)(*(_QWORD *)a1 + 5) < *(_QWORD *)(a1 + 8))
  {
    if (!strncmp(*(const char **)a1, "[:<:]]", 6uLL))
    {
      v30 = (void **)a1;
      v31 = 2550136832;
    }
    else
    {
      if (strncmp(v2, "[:>:]]", 6uLL))
        goto LABEL_4;
      v30 = (void **)a1;
      v31 = 2684354560;
    }
    result = sub_216B41228(v30, v31, 0);
    *(_QWORD *)a1 += 6;
    return result;
  }
LABEL_4:
  result = (void **)sub_216B4269C(a1);
  if (result)
  {
    v4 = result;
    v5 = *(const char **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 < v6 && *v5 == 94)
    {
      v7 = 0;
      *(_QWORD *)a1 = ++v5;
    }
    else
    {
      v7 = 1;
    }
    if ((unint64_t)v5 < v6)
    {
      v8 = *(unsigned __int8 *)v5;
      v9 = v8;
      if ((_DWORD)v8 != 93)
      {
        if ((_DWORD)v8 != 45)
          goto LABEL_19;
        v9 = 45;
      }
      *(_QWORD *)a1 = v5 + 1;
      *((_BYTE *)*result + v9) |= *((_BYTE *)result + 8);
      *((_BYTE *)result + 9) += v8;
    }
LABEL_19:
    while (1)
    {
      v12 = *(const char **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 >= v13)
        break;
      v10 = *(unsigned __int8 *)v12;
      if (v10 == 93)
        break;
      v11 = v12 + 1;
      if ((unint64_t)v11 < v13 && v10 == 45 && *v11 == 93)
      {
        *(_QWORD *)a1 = v11;
        *((_BYTE *)*v4 + 45) |= *((_BYTE *)v4 + 8);
        *((_BYTE *)v4 + 9) += 45;
        v12 = *(const char **)a1;
        v13 = *(_QWORD *)(a1 + 8);
        break;
      }
      sub_216B427F0(a1, (uint64_t)v4);
    }
    if ((unint64_t)v12 >= v13 || (*(_QWORD *)a1 = v12 + 1, *v12 != 93))
      sub_216B4185C(a1, 7);
    if (*(_DWORD *)(a1 + 16))
      return (void **)sub_216B42A5C(a1, (uint64_t)v4);
    v14 = *(_QWORD *)(a1 + 56);
    if ((*(_BYTE *)(v14 + 40) & 2) != 0)
    {
      v15 = *(_DWORD *)(v14 + 16);
      if (v15 >= 1)
      {
        v16 = v15 + 1;
        do
        {
          v17 = *v4;
          v18 = *((_BYTE *)v4 + 8);
          if ((v18 & *((_BYTE *)*v4 + (v16 - 2))) != 0)
          {
            if (isalpha(v16 - 2))
            {
              v19 = sub_216B42AC8(v16 - 2);
              if (v16 - 2 != v19)
              {
                v17[v19] |= v18;
                *((_BYTE *)v4 + 9) += v19;
              }
            }
          }
          --v16;
        }
        while (v16 > 1);
      }
    }
    if ((v7 & 1) == 0)
    {
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_DWORD *)(v20 + 16);
      if (v21 >= 1)
      {
        v22 = v21 + 1;
        do
        {
          v23 = v22 - 2;
          v24 = *v4;
          v25 = (v22 - 2);
          v26 = *((unsigned __int8 *)*v4 + v25);
          v27 = *((unsigned __int8 *)v4 + 8);
          if ((v27 & v26) != 0)
          {
            v24[v25] = v26 & ~(_BYTE)v27;
            v28 = *((_BYTE *)v4 + 9) - v23;
          }
          else
          {
            v24[v25] = v27 | v26;
            v28 = *((_BYTE *)v4 + 9) + v23;
          }
          *((_BYTE *)v4 + 9) = v28;
          --v22;
        }
        while (v22 > 1);
        v20 = *(_QWORD *)(a1 + 56);
      }
      if ((*(_BYTE *)(v20 + 40) & 8) != 0)
      {
        *((_BYTE *)*v4 + 10) &= ~*((_BYTE *)v4 + 8);
        *((_BYTE *)v4 + 9) -= 10;
      }
    }
    if (sub_216B42B1C(a1, (uint64_t)v4) == 1)
    {
      v29 = sub_216B42B60(a1, (uint64_t)v4);
      sub_216B42304((__n128 *)a1, v29);
      return (void **)sub_216B42A5C(a1, (uint64_t)v4);
    }
    v32 = (int)sub_216B42BB0(a1, (uint64_t)v4);
    return sub_216B41228((void **)a1, 805306368, v32);
  }
  return result;
}

uint64_t sub_216B4229C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a3 - a2;
  if (a3 != a2)
  {
    sub_216B43060((void **)a1, *(_QWORD *)(a1 + 32) + v4);
    memmove((void *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 40)), (const void *)(*(_QWORD *)(a1 + 24) + 8 * a2), 8 * v4);
    *(_QWORD *)(a1 + 40) += v4;
  }
  return v3;
}

double sub_216B42304(__n128 *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  unint64_t v8;
  int v9;

  v4 = a1[3].n128_u64[1];
  v5 = *(_QWORD *)(v4 + 88);
  v6 = a2;
  if ((*(_BYTE *)(v4 + 40) & 2) != 0 && isalpha(a2) && sub_216B42AC8(a2) != a2)
  {
    *(_QWORD *)&result = sub_216B430C4(a1, a2).n128_u64[0];
  }
  else
  {
    sub_216B41228((void **)a1, 0x10000000, v6);
    if (!*(_BYTE *)(v5 + a2))
    {
      v8 = a1[3].n128_u64[1];
      v9 = *(_DWORD *)(v8 + 84);
      *(_DWORD *)(v8 + 84) = v9 + 1;
      *(_BYTE *)(v5 + a2) = v9;
    }
  }
  return result;
}

uint64_t sub_216B423A4(uint64_t *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v1 = (char *)a1[1];
  if (*a1 >= (unint64_t)v1)
  {
    v4 = 0;
LABEL_11:
    sub_216B4185C((uint64_t)a1, 10);
    return v4;
  }
  v3 = 0;
  v4 = 0;
  while (1)
  {
    v5 = (char *)(v2 + v3);
    if (*(unsigned __int8 *)(v2 + v3) - 48 > 9 || (int)v4 > 255)
      break;
    *a1 = (uint64_t)(v5 + 1);
    v4 = (*v5 + 10 * v4 - 48);
    ++v3;
    if (v5 + 1 == v1)
    {
      LODWORD(v3) = 1;
      break;
    }
  }
  if (!(_DWORD)v3 || (int)v4 >= 256)
    goto LABEL_11;
  return v4;
}

void **sub_216B42434(void **result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;

  if (!*((_DWORD *)result + 4))
  {
    v7 = (uint64_t)result;
LABEL_4:
    if ((_DWORD)a4 == 256)
      v8 = 3;
    else
      v8 = 2;
    if ((int)a4 >= 2)
      v9 = v8;
    else
      v9 = a4;
    do
    {
      v10 = *(_QWORD *)(v7 + 40);
      if (a3 == 256)
        v11 = 3;
      else
        v11 = 2;
      if (a3 < 2)
        v11 = a3;
      v12 = v9 + 8 * v11;
      if (v12 != 19)
      {
        switch(v12)
        {
          case 0:
            *(_QWORD *)(v7 + 40) = a2;
            return result;
          case 1:
          case 2:
          case 3:
            sub_216B41E34((_QWORD *)v7, 2013265920, v10 - a2 + 1, a2);
            sub_216B42434(v7, a2 + 1, 1, a4);
            sub_216B41228((void **)v7, 0x80000000, *(_QWORD *)(v7 + 40) - a2);
            sub_216B41ED4(v7, a2, *(_QWORD *)(v7 + 40) - a2);
            sub_216B41228((void **)v7, 2281701376, 0);
            sub_216B41ED4(v7, *(_QWORD *)(v7 + 40) - 1, 1);
            v13 = (void **)v7;
            v14 = 2415919104;
            v15 = 2;
            return sub_216B41228(v13, v14, v15);
          case 9:
            return result;
          case 10:
            sub_216B41E34((_QWORD *)v7, 2013265920, v10 - a2 + 1, a2);
            sub_216B41228((void **)v7, 0x80000000, *(_QWORD *)(v7 + 40) - a2);
            sub_216B41ED4(v7, a2, *(_QWORD *)(v7 + 40) - a2);
            sub_216B41228((void **)v7, 2281701376, 0);
            a3 = 1;
            sub_216B41ED4(v7, *(_QWORD *)(v7 + 40) - 1, 1);
            sub_216B41228((void **)v7, 2415919104, 2);
            result = (void **)sub_216B4229C(v7, a2 + 1, v10 + 1);
            a2 = (uint64_t)result;
            goto LABEL_21;
          case 11:
            sub_216B41E34((_QWORD *)v7, 1207959552, v10 - a2 + 1, a2);
            v15 = *(_QWORD *)(v7 + 40) - a2;
            v13 = (void **)v7;
            v14 = 1342177280;
            return sub_216B41228(v13, v14, v15);
          case 18:
            result = (void **)sub_216B4229C(v7, a2, *(_QWORD *)(v7 + 40));
            a2 = (uint64_t)result;
            --a3;
LABEL_21:
            a4 = (a4 - 1);
            if (*(_DWORD *)(v7 + 16))
              return result;
            goto LABEL_4;
          default:
            return (void **)sub_216B4185C(v7, 15);
        }
      }
      result = (void **)sub_216B4229C(v7, a2, *(_QWORD *)(v7 + 40));
      a2 = (uint64_t)result;
      --a3;
    }
    while (!*(_DWORD *)(v7 + 16));
  }
  return result;
}

uint64_t sub_216B4269C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned int *)(v2 + 20);
  v4 = *(int *)(v2 + 16);
  *(_DWORD *)(v2 + 20) = v3 + 1;
  v5 = *(int *)(a1 + 48);
  if ((int)v3 >= (int)v5)
  {
    v6 = v5 + 8;
    *(_DWORD *)(a1 + 48) = v5 + 8;
    v7 = malloc_type_realloc(*(void **)(v2 + 24), 32 * (v5 + 8), 0x1010040FE74B554uLL);
    v2 = *(_QWORD *)(a1 + 56);
    if (!v7)
      goto LABEL_11;
    v8 = (v6 >> 3) * v4;
    *(_QWORD *)(v2 + 24) = v7;
    v9 = (char *)malloc_type_realloc(*(void **)(v2 + 32), v8, 0xC063401DuLL);
    v2 = *(_QWORD *)(a1 + 56);
    if (!v9)
      goto LABEL_11;
    *(_QWORD *)(v2 + 32) = v9;
    if ((int)v3 >= 1)
    {
      v10 = 0;
      v11 = *(_QWORD **)(v2 + 24);
      do
      {
        *v11 = &v9[(v10 >> 3) * (uint64_t)(int)v4];
        v11 += 4;
        ++v10;
      }
      while (v3 != v10);
    }
    bzero(&v9[v8 - v4], v4);
    v2 = *(_QWORD *)(a1 + 56);
  }
  v12 = *(_QWORD *)(v2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(v2 + 32);
    if (v13)
    {
      result = v12 + 32 * (int)v3;
      *(_QWORD *)result = v13 + (int)v4 * (uint64_t)((int)v3 / 8);
      *(_WORD *)(result + 8) = (1 << (v3 & 7));
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
  }
LABEL_11:
  free(*(void **)(v2 + 24));
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v15 + 24) = 0;
  free(*(void **)(v15 + 32));
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32) = 0;
  sub_216B4185C(a1, 12);
  return 0;
}

uint64_t sub_216B427F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const char *v5;
  int v6;
  BOOL v7;
  char *v8;
  uint64_t result;
  int v11;
  const char *v12;
  unint64_t v13;
  _BYTE *v14;
  BOOL v15;
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  unint64_t v20;
  const char *v21;
  int v22;
  unint64_t v23;

  v5 = *(const char **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 < v4)
  {
    v6 = *v5;
    if (v6 == 45)
      return sub_216B4185C(a1, 11);
    v7 = v6 == 91;
    v8 = (char *)(v5 + 1);
    if (v7 && (unint64_t)v8 < v4)
    {
      v16 = *v8;
      if (v16 == 61)
      {
        v21 = v5 + 2;
        *(_QWORD *)a1 = v21;
        if ((unint64_t)v21 >= v4)
        {
          sub_216B4185C(a1, 7);
          v21 = *(const char **)a1;
        }
        v22 = *(unsigned __int8 *)v21;
        if (v22 == 93 || v22 == 45)
          sub_216B4185C(a1, 3);
        result = sub_216B42DB8((const char **)a1, a2);
        v19 = *(const char **)a1;
        v23 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)a1 >= v23)
        {
          result = sub_216B4185C(a1, 7);
          v19 = *(const char **)a1;
          v23 = *(_QWORD *)(a1 + 8);
        }
        if ((unint64_t)v19 < v23 && (unint64_t)(v19 + 1) < v23 && *v19 == 61 && v19[1] == 93)
        {
LABEL_44:
          *(_QWORD *)a1 = v19 + 2;
          return result;
        }
        return sub_216B4185C(a1, 3);
      }
      if (v16 == 58)
      {
        v17 = v5 + 2;
        *(_QWORD *)a1 = v17;
        if ((unint64_t)v17 >= v4)
        {
          sub_216B4185C(a1, 7);
          v17 = *(const char **)a1;
        }
        v18 = *(unsigned __int8 *)v17;
        if (v18 == 93 || v18 == 45)
          sub_216B4185C(a1, 4);
        result = sub_216B42C8C((const char **)a1, a2);
        v19 = *(const char **)a1;
        v20 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)a1 >= v20)
        {
          result = sub_216B4185C(a1, 7);
          v19 = *(const char **)a1;
          v20 = *(_QWORD *)(a1 + 8);
        }
        if ((unint64_t)v19 >= v20 || (unint64_t)(v19 + 1) >= v20 || *v19 != 58 || v19[1] != 93)
          return sub_216B4185C(a1, 4);
        goto LABEL_44;
      }
    }
  }
  result = sub_216B42E00(a1);
  v11 = result;
  v12 = *(const char **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 < v13)
  {
    v14 = v12 + 1;
    v15 = *v12 != 45 || (unint64_t)v14 >= v13;
    if (!v15 && *v14 != 93)
    {
      *(_QWORD *)a1 = v14;
      if (*v14 == 45)
      {
        *(_QWORD *)a1 = v12 + 2;
        result = 45;
      }
      else
      {
        result = sub_216B42E00(a1);
      }
      if (v11 > (int)result)
        return sub_216B4185C(a1, 11);
    }
  }
  do
  {
    *(_BYTE *)(*(_QWORD *)a2 + v11) |= *(_BYTE *)(a2 + 8);
    *(_BYTE *)(a2 + 9) += v11++;
  }
  while ((_DWORD)result + 1 != v11);
  return result;
}

uint64_t sub_216B42A5C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_QWORD *)(result + 56);
  v3 = *(int *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24) + 32 * *(int *)(v2 + 20);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      *(_BYTE *)(*(_QWORD *)a2 + i) &= ~*(_BYTE *)(a2 + 8);
      *(_BYTE *)(a2 + 9) -= i;
    }
  }
  if (v4 - 32 == a2)
    --*(_DWORD *)(*(_QWORD *)(result + 56) + 20);
  return result;
}

uint64_t sub_216B42AC8(unsigned __int8 a1)
{
  unsigned __int8 v1;
  int v2;
  unsigned __int8 v3;

  v1 = a1;
  v2 = a1;
  if (isupper(a1))
  {
    v3 = tolower(v2);
LABEL_5:
    v1 = v3;
    return (char)v1;
  }
  if (islower(v2))
  {
    v3 = toupper(v2);
    goto LABEL_5;
  }
  return (char)v1;
}

uint64_t sub_216B42B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t i;

  v2 = *(int *)(*(_QWORD *)(a1 + 56) + 16);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(result) = 0;
  for (i = 0; i != v2; ++i)
  {
    if ((*(_BYTE *)(a2 + 8) & *(_BYTE *)(*(_QWORD *)a2 + i)) != 0)
      result = (result + 1);
    else
      result = result;
  }
  return result;
}

uint64_t sub_216B42B60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(int *)(*(_QWORD *)(a1 + 56) + 16);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = 0;
  while ((*(_BYTE *)(a2 + 8) & *(_BYTE *)(*(_QWORD *)a2 + v4)) == 0)
  {
    ++v4;
    v3 += 0x1000000;
    if (v2 == v4)
      return 0;
  }
  return (v3 >> 24);
}

unint64_t sub_216B42BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(int *)(v2 + 20);
  if ((int)v4 < 1)
  {
LABEL_14:
    v9 = a2;
  }
  else
  {
    v6 = v3 + 32 * v4;
    v7 = *(int *)(v2 + 16);
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    v9 = v3;
    while (1)
    {
      if (v9 != a2 && *(unsigned __int8 *)(v9 + 9) == *(unsigned __int8 *)(a2 + 9))
      {
        v10 = 0;
        if ((_DWORD)v7)
        {
          while (((*(_BYTE *)(v9 + 8) & *(_BYTE *)(*(_QWORD *)v9 + v10)) == 0) != ((*(_BYTE *)(a2 + 8) & *(_BYTE *)(*(_QWORD *)a2 + v10)) != 0))
          {
            if (v8 == ++v10)
            {
              v10 = v8;
              break;
            }
          }
        }
        if (v10 == v7)
          break;
      }
      v9 += 32;
      if (v9 >= v6)
        goto LABEL_14;
    }
    sub_216B42A5C(a1, a2);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24);
  }
  return (v9 - v3) >> 5;
}

uint64_t sub_216B42C8C(const char **a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  int64_t v7;
  size_t v8;
  const char *v9;
  char *i;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  int v15;
  char *v16;
  char *v17;
  int v18;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a1;
  if (*a1 < v5)
  {
    v7 = v5 - v4;
    v6 = *a1;
    while (isalpha(*(unsigned __int8 *)v6))
    {
      *a1 = ++v6;
      if (!--v7)
      {
        v6 = v5;
        break;
      }
    }
  }
  v8 = v6 - v4;
  v9 = "alnum";
  for (i = (char *)&off_24D5EFF50; ; i += 24)
  {
    result = strncmp(v9, v4, v8);
    if (!(_DWORD)result && !v9[v8])
      break;
    v9 = (const char *)*((_QWORD *)i + 1);
    if (!v9)
      return sub_216B4185C((uint64_t)a1, 4);
  }
  v12 = (unsigned __int8 *)*((_QWORD *)i - 1);
  v13 = *v12;
  if (*v12)
  {
    v14 = v12 + 1;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v13) |= *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a2 + 9) += v13;
      v15 = *v14++;
      v13 = v15;
    }
    while (v15);
  }
  v16 = *(char **)i;
  if (**(_BYTE **)i)
  {
    do
    {
      sub_216B42ED0((uint64_t)a1, a2, v16);
      result = strlen(v16);
      v17 = &v16[result];
      v18 = v17[1];
      v16 = v17 + 1;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_216B42DB8(const char **a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B42F6C(a1, 61);
  *(_BYTE *)(*(_QWORD *)a2 + result) |= *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a2 + 9) += result;
  return result;
}

uint64_t sub_216B42E00(uint64_t a1)
{
  const char *v2;
  unint64_t v3;
  _BYTE *v4;
  BOOL v5;
  char v6;
  const char *v8;
  unint64_t v9;

  v2 = *(const char **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v3)
  {
    sub_216B4185C(a1, 7);
    v2 = *(const char **)a1;
    v3 = *(_QWORD *)(a1 + 8);
  }
  v4 = v2 + 1;
  v5 = (unint64_t)v2 >= v3 || (unint64_t)v4 >= v3;
  if (!v5 && *v2 == 91 && *v4 == 46)
  {
    *(_QWORD *)a1 = v2 + 2;
    v6 = sub_216B42F6C((const char **)a1, 46);
    v8 = *(const char **)a1;
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 < v9 && (unint64_t)(v8 + 1) < v9 && *v8 == 46 && v8[1] == 93)
      *(_QWORD *)a1 = v8 + 2;
    else
      sub_216B4185C(a1, 3);
  }
  else
  {
    *(_QWORD *)a1 = v4;
    return *v2;
  }
  return v6;
}

unsigned __int8 *sub_216B42ED0(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v6;
  size_t v7;
  char *v8;
  void *v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + strlen(__s) + 1;
  *(_QWORD *)(a2 + 16) = v7;
  v8 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v7, 0xEFDA1DBDuLL);
  if (v8)
  {
    *(_QWORD *)(a2 + 24) = v8;
    return sub_216B460E8(&v8[v6 - 1], (unint64_t)__s, *(_QWORD *)(a2 + 16) - v6 + 1);
  }
  else
  {
    v10 = *(void **)(a2 + 24);
    if (v10)
      free(v10);
    *(_QWORD *)(a2 + 24) = 0;
    return (unsigned __int8 *)sub_216B4185C(a1, 12);
  }
}

uint64_t sub_216B42F6C(const char **a1, int a2)
{
  const char **v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;
  size_t v11;
  const char *v12;
  char **v13;
  char *v14;

  v2 = a1;
  v4 = *a1;
  v3 = (unint64_t)a1[1];
  if ((unint64_t)*a1 >= v3)
  {
LABEL_7:
    v8 = 7;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = &v4[v6 + 1];
      if ((unint64_t)v7 < v3 && v4[v6] == a2 && *v7 == 93)
        break;
      *a1 = v7;
      ++v6;
      v5 += 0x100000000;
      if (v3 - (_QWORD)v4 == v6)
        goto LABEL_7;
    }
    v11 = v5 >> 32;
    v12 = "NUL";
    v13 = &off_24D5F0088;
    do
    {
      if (!strncmp(v12, v4, v11) && !v12[v11])
        return (char)*((_BYTE *)v13 - 8);
      v14 = *v13;
      v13 += 2;
      v12 = v14;
    }
    while (v14);
    if ((_DWORD)v6 == 1)
      return *v4;
    a1 = v2;
    v8 = 3;
  }
  sub_216B4185C((uint64_t)a1, v8);
  return 0;
}

void **sub_216B43060(void **result, uint64_t a2)
{
  uint64_t v3;

  if ((uint64_t)result[4] < a2)
  {
    v3 = (uint64_t)result;
    result = (void **)malloc_type_realloc(result[3], 8 * a2, 0x100004000313F17uLL);
    if (result)
    {
      *(_QWORD *)(v3 + 24) = result;
      *(_QWORD *)(v3 + 32) = a2;
    }
    else
    {
      return (void **)sub_216B4185C(v3, 12);
    }
  }
  return result;
}

__n128 sub_216B430C4(__n128 *a1, char a2)
{
  __n128 result;
  __n128 v4;
  char v5;
  __int16 v6;

  v5 = a2;
  v6 = 93;
  v4 = *a1;
  a1->n128_u64[0] = (unint64_t)&v5;
  a1->n128_u64[1] = (unint64_t)&v6 + 1;
  sub_216B41F48();
  result = v4;
  *a1 = v4;
  return result;
}

BOOL sub_216B43114(uint64_t a1, int a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(char **)a1;
  v6 = (char *)(*(_QWORD *)a1 + 1);
  *(_QWORD *)a1 = v6;
  v7 = *v5;
  if (v7 == 92)
  {
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 8))
    {
      sub_216B4185C(a1, 5);
      v6 = *(char **)a1;
    }
    *(_QWORD *)a1 = v6 + 1;
    v7 = *v6 | 0x100;
  }
  if (v7 <= 304)
  {
    if (v7 <= 90)
    {
      if (v7 == 42)
      {
        if (!a2)
          sub_216B4185C(a1, 13);
      }
      else if (v7 == 46)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
          sub_216B41EF8(a1);
        else
          sub_216B41228((void **)a1, 671088640, 0);
        goto LABEL_44;
      }
    }
    else
    {
      switch(v7)
      {
        case 91:
          sub_216B41F48(a1);
          goto LABEL_44;
        case 296:
          v12 = *(_QWORD *)(a1 + 56);
          v13 = *(_QWORD *)(v12 + 112) + 1;
          *(_QWORD *)(v12 + 112) = v13;
          if (v13 <= 9)
            *(_QWORD *)(a1 + 8 * v13 + 64) = *(_QWORD *)(a1 + 40);
          sub_216B41228((void **)a1, 1744830464, v13);
          v14 = *(_BYTE **)a1;
          v15 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)a1 < v15 && ((unint64_t)(v14 + 1) >= v15 || *v14 != 92 || v14[1] != 41))
            sub_216B41448(a1, 92, 41);
          if (v13 <= 9)
            *(_QWORD *)(a1 + 8 * v13 + 144) = *(_QWORD *)(a1 + 40);
          sub_216B41228((void **)a1, 1879048192, v13);
          v16 = *(_BYTE **)a1;
          v17 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)a1 < v17 && (unint64_t)(v16 + 1) < v17 && *v16 == 92 && v16[1] == 41)
          {
            *(_QWORD *)a1 = v16 + 2;
            goto LABEL_44;
          }
          goto LABEL_38;
        case 297:
LABEL_38:
          v18 = a1;
          v19 = 8;
LABEL_40:
          sub_216B4185C(v18, v19);
          goto LABEL_44;
      }
    }
LABEL_43:
    sub_216B42304((__n128 *)a1, (char)v7);
    goto LABEL_44;
  }
  if ((v7 - 305) >= 9)
  {
    if (v7 == 379)
    {
      v18 = a1;
      v19 = 13;
      goto LABEL_40;
    }
    if (v7 != 381)
      goto LABEL_43;
    goto LABEL_38;
  }
  v8 = (v7 & 0xFFFFFEFF) - 48;
  v9 = a1 + 8 * v8;
  v11 = *(_QWORD *)(v9 + 144);
  v10 = (uint64_t *)(v9 + 144);
  if (v11)
  {
    sub_216B41228((void **)a1, 939524096, (v7 & 0xFFFFFEFF) - 48);
    sub_216B4229C(a1, *(_QWORD *)(a1 + 8 * v8 + 64) + 1, *v10);
    sub_216B41228((void **)a1, 0x40000000, (v7 & 0xFFFFFEFF) - 48);
  }
  else
  {
    sub_216B4185C(a1, 6);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 120) = 1;
LABEL_44:
  v20 = *(unsigned __int8 **)a1;
  v21 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 < v21)
  {
    v22 = v20 + 1;
    v23 = *v20;
    if (v23 == 42)
    {
      *(_QWORD *)a1 = v22;
      sub_216B41E34((_QWORD *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v4 + 1, v4);
      sub_216B41228((void **)a1, 1342177280, *(_QWORD *)(a1 + 40) - v4);
      sub_216B41E34((_QWORD *)a1, 1476395008, *(_QWORD *)(a1 + 40) - v4 + 1, v4);
      sub_216B41228((void **)a1, 1610612736, *(_QWORD *)(a1 + 40) - v4);
      return 0;
    }
    if ((unint64_t)v22 < v21 && v23 == 92 && *v22 == 123)
    {
      *(_QWORD *)a1 = v20 + 2;
      v24 = sub_216B423A4((uint64_t *)a1);
      v25 = v24;
      v27 = *(_BYTE **)a1;
      v26 = *(_QWORD *)(a1 + 8);
      v28 = v24;
      if (*(_QWORD *)a1 < v26)
      {
        v28 = v24;
        if (*v27 == 44)
        {
          v29 = v27 + 1;
          *(_QWORD *)a1 = v29;
          if ((unint64_t)v29 >= v26 || *v29 - 48 > 9)
          {
            v28 = 256;
          }
          else
          {
            v28 = sub_216B423A4((uint64_t *)a1);
            if (v25 > (int)v28)
              sub_216B4185C(a1, 10);
          }
        }
      }
      sub_216B42434((void **)a1, v4, v25, v28);
      v32 = *(_BYTE **)a1;
      v31 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 >= v31)
      {
LABEL_70:
        sub_216B4185C(a1, 9);
      }
      else
      {
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) < v31 && *v32 == 92 && *v33 == 125)
        {
          *(_QWORD *)a1 = v32 + 2;
          return 0;
        }
        v34 = v31 - (_QWORD)v32;
        while ((unint64_t)v33 >= v31 || *(v33 - 1) != 92 || *v33 != 125)
        {
          *(_QWORD *)a1 = v33++;
          if (!--v34)
            goto LABEL_70;
        }
      }
      sub_216B4185C(a1, 10);
      return 0;
    }
  }
  return v7 == 36;
}

uint64_t sub_216B43564(uint64_t a1, unsigned __int8 a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 20);
  if (v2 < 1)
    return 0;
  v3 = (v2 + 7) >> 3;
  v4 = *(_QWORD *)(a1 + 32);
  while (!*(_BYTE *)(v4 + a2))
  {
    v4 += *(int *)(a1 + 16);
    if (!--v3)
      return 0;
  }
  return 1;
}

uint64_t sub_216B435A8(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(a1 + 20);
  if (v3 < 1)
    return 1;
  v4 = (v3 + 7) >> 3;
  v5 = *(_QWORD *)(a1 + 32);
  while (*(unsigned __int8 *)(v5 + a2) == *(unsigned __int8 *)(v5 + a3))
  {
    v5 += *(int *)(a1 + 16);
    if (!--v4)
      return 1;
  }
  return 0;
}

size_t sub_216B435F8(int a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  const char *v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  size_t v11;
  char __str[50];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1 == 255)
  {
    v6 = sub_216B436F8(a2, __str);
  }
  else
  {
    v7 = &dword_24D5F0678;
    do
    {
      v9 = *v7;
      v7 += 6;
      v8 = v9;
      if (v9)
        v10 = v8 == (a1 & 0xFFFFFEFF);
      else
        v10 = 1;
    }
    while (!v10);
    if ((a1 & 0x100) != 0)
    {
      v6 = __str;
      if (v8)
        sub_216B460E8(__str, *((_QWORD *)v7 - 2), 50);
      else
        snprintf(__str, 0x32uLL, "REG_0x%x", a1 & 0xFFFFFEFF);
    }
    else
    {
      v6 = (const char *)*((_QWORD *)v7 - 1);
    }
  }
  v11 = strlen(v6);
  if (a4)
    sub_216B460E8(a3, (unint64_t)v6, a4);
  return v11 + 1;
}

const char *sub_216B436F8(uint64_t a1, char *a2)
{
  const char *v3;
  const char **v4;
  int v5;
  const char *v6;

  v3 = *(const char **)(a1 + 16);
  if (!strcmp("REG_NOMATCH", v3))
  {
    v5 = 1;
LABEL_7:
    snprintf(a2, 0x32uLL, "%d", v5);
  }
  else
  {
    v4 = (const char **)off_24D5F0698;
    while (1)
    {
      v5 = *((_DWORD *)v4 - 2);
      if (!v5)
        return "0";
      v6 = *v4;
      v4 += 3;
      if (!strcmp(v6, v3))
        goto LABEL_7;
    }
  }
  return a2;
}

uint64_t sub_216B43798(uint64_t a1, char *a2, unint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  int v6;

  if (*(_DWORD *)a1 != 62053)
    return 2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)v5 != 53829 || (*(_BYTE *)(v5 + 72) & 4) != 0)
    return 2;
  v6 = a5 & 7;
  if (*(uint64_t *)(v5 + 48) > 64)
    return sub_216B43BB8(v5, a2, a3, a4, v6);
  else
    return sub_216B437E4(v5, a2, a3, a4, v6);
}

uint64_t sub_216B437E4(uint64_t a1, char *__s, uint64_t a3, _QWORD *a4, int a5)
{
  int v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  unsigned __int8 *v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  int64_t v21;
  BOOL v22;
  char *i;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned __int8 *j;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _OWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v5 = a5;
  v6 = a4;
  v10 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
    a3 = 0;
  if ((a5 & 4) != 0)
  {
    v12 = a4[1];
    v13 = &__s[*a4];
  }
  else
  {
    v12 = strlen(__s);
    v13 = __s;
  }
  v14 = &__s[v12];
  if (&__s[v12] < v13)
    return 16;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v16 = *(unsigned __int8 **)(a1 + 96);
  if (v16)
  {
    v45 = v10;
    v17 = v13;
    if (v13 < v14)
    {
      v42 = v5;
      v43 = v6;
      v44 = a3;
      v18 = *v16;
      v19 = (char *)(&__s[v12] - v13);
      v41 = &__s[v12];
      v20 = v19;
      v17 = v13;
      while (1)
      {
        if (*v17 == v18)
        {
          v21 = *(int *)(a1 + 104);
          if ((uint64_t)v20 >= v21 && !memcmp(v17, v16, v21))
            break;
        }
        ++v17;
        --v20;
        if (!--v19)
        {
          v17 = v41;
          break;
        }
      }
      v6 = v43;
      a3 = v44;
      v5 = v42;
    }
    v22 = v17 == v14;
    v10 = v45;
    if (v22)
      return 1;
  }
  v46 = a1;
  LODWORD(v47) = v5;
  *(_QWORD *)&v48 = __s;
  *((_QWORD *)&v48 + 1) = v13;
  *(_QWORD *)&v50 = 0;
  *(_QWORD *)&v49 = v14;
  v51 = 0u;
  v52 = 0u;
  if (!sub_216B43FE0((uint64_t)&v46, v13, v14, v10 + 1, v9))
  {
LABEL_62:
    free(*((void **)&v47 + 1));
    free((void *)v50);
    return 1;
  }
  while (2)
  {
    if (a3 || *(_DWORD *)(a1 + 120))
    {
      for (i = (char *)*((_QWORD *)&v49 + 1); ; *((_QWORD *)&v49 + 1) = i)
      {
        v24 = sub_216B44280((uint64_t)&v46, i, v14, v10 + 1, v9);
        if (v24)
          break;
        ++i;
      }
      v25 = v24;
      if (a3 != 1 || *(_DWORD *)(a1 + 120))
      {
        v26 = (char *)*((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1)
          || (v26 = (char *)malloc_type_malloc(16 * *(_QWORD *)(v46 + 112) + 16, 0x1000040451B5BE8uLL),
              (*((_QWORD *)&v47 + 1) = v26) != 0))
        {
          v27 = *(_QWORD *)(v46 + 112);
          if (v27)
          {
            v28 = v26 + 16;
            if ((unint64_t)(v27 + 1) > 2)
              v29 = v27 + 1;
            else
              v29 = 2;
            memset(v28, 255, 16 * v29 - 16);
          }
          if (!*(_DWORD *)(a1 + 120) && (BYTE1(v47) & 4) == 0)
          {
            v30 = (uint64_t)sub_216B44524(&v46, *((char **)&v49 + 1), v25, v10 + 1, v9);
            goto LABEL_46;
          }
          v31 = *(_QWORD *)(a1 + 128);
          v32 = (void *)v50;
          if (v31 >= 1 && !(_QWORD)v50)
          {
            v32 = malloc_type_malloc(8 * v31 + 8, 0x10040436913F5uLL);
            *(_QWORD *)&v50 = v32;
            v31 = *(_QWORD *)(a1 + 128);
          }
          if (v31 < 1 || v32)
          {
            for (j = (unsigned __int8 *)*((_QWORD *)&v49 + 1); ; j = (unsigned __int8 *)v34)
            {
              v30 = sub_216B44890(&v46, j, (unsigned __int8 *)v25, v10 + 1, v9, 0, 0);
LABEL_46:
              if (v30)
                goto LABEL_51;
              v34 = *((_QWORD *)&v49 + 1);
              if ((unint64_t)v25 > *((_QWORD *)&v49 + 1))
              {
                v25 = sub_216B44280((uint64_t)&v46, *((char **)&v49 + 1), v25 - 1, v10 + 1, v9);
                if (v25)
                  continue;
              }
              break;
            }
            if ((char *)v34 == v14)
            {
LABEL_51:
              if (a3)
              {
                v35 = &v25[-v48];
                *v6 = *((_QWORD *)&v49 + 1) - v48;
                v6[1] = v35;
                if (a3 != 1)
                {
                  v36 = v46;
                  v37 = (_OWORD *)(*((_QWORD *)&v47 + 1) + 16);
                  v38 = v6 + 2;
                  v39 = 1;
                  do
                  {
                    if (v39 <= *(_QWORD *)(v36 + 112))
                    {
                      *(_OWORD *)v38 = *v37;
                    }
                    else
                    {
                      *v38 = -1;
                      v38[1] = -1;
                    }
                    ++v39;
                    ++v37;
                    v38 += 2;
                  }
                  while (a3 != v39);
                }
              }
              break;
            }
            if (sub_216B43FE0((uint64_t)&v46, (char *)(v34 + 1), v14, v10 + 1, v9))
              continue;
            goto LABEL_62;
          }
          free(*((void **)&v47 + 1));
        }
        return 12;
      }
      v40 = &v24[-v48];
      *v6 = &i[-v48];
      v6[1] = v40;
    }
    break;
  }
  if (*((_QWORD *)&v47 + 1))
    free(*((void **)&v47 + 1));
  result = v50;
  if ((_QWORD)v50)
  {
    free((void *)v50);
    return 0;
  }
  return result;
}

uint64_t sub_216B43BB8(uint64_t a1, char *__s, unint64_t a3, _QWORD *a4, int a5)
{
  int v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  int64_t v21;
  BOOL v22;
  char *v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _OWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;

  v5 = a5;
  v6 = a4;
  v10 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
    a3 = 0;
  if ((a5 & 4) != 0)
  {
    v12 = a4[1];
    v13 = &__s[*a4];
  }
  else
  {
    v12 = strlen(__s);
    v13 = __s;
  }
  v14 = &__s[v12];
  if (&__s[v12] >= v13)
  {
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v16 = *(unsigned __int8 **)(a1 + 96);
    if (v16)
    {
      v46 = v5;
      v17 = v13;
      if (v13 < v14)
      {
        v43 = v10;
        v44 = v6;
        v45 = a3;
        v18 = *v16;
        v19 = (char *)(&__s[v12] - v13);
        v42 = &__s[v12];
        v20 = v19;
        v17 = v13;
        while (1)
        {
          if (*v17 == v18)
          {
            v21 = *(int *)(a1 + 104);
            if ((uint64_t)v20 >= v21 && !memcmp(v17, v16, v21))
              break;
          }
          ++v17;
          --v20;
          if (!--v19)
          {
            v17 = v42;
            break;
          }
        }
        v6 = v44;
        a3 = v45;
        v10 = v43;
      }
      v22 = v17 == v14;
      v5 = v46;
      if (v22)
        return 1;
    }
    v47 = a1;
    LODWORD(v48) = v5;
    *(_QWORD *)&v49 = __s;
    *((_QWORD *)&v49 + 1) = v13;
    v51 = 0;
    *(_QWORD *)&v50 = v14;
    v23 = (char *)malloc_type_malloc(4 * *(_QWORD *)(a1 + 48), 0xEC0DA500uLL);
    v53 = v23;
    if (!v23)
      return 12;
    v24 = v10 + 1;
    v25 = *(_QWORD *)(a1 + 48);
    v55 = &v23[v25];
    v56 = &v23[2 * v25];
    v54 = v23;
    v52 = 4;
    v57 = &v23[3 * v25];
    bzero(v57, v25);
    if (sub_216B44FAC(&v47, v13, v14, v10 + 1, v9))
    {
LABEL_21:
      if (!a3 && !*(_DWORD *)(a1 + 120))
      {
LABEL_58:
        if (*((_QWORD *)&v48 + 1))
          free(*((void **)&v48 + 1));
        if (v51)
          free(v51);
        v15 = 0;
        goto LABEL_66;
      }
      v26 = sub_216B45290(&v47, *((char **)&v50 + 1), v14, v24, v9);
      if (!v26)
      {
        do
        {
          ++*((_QWORD *)&v50 + 1);
          v27 = sub_216B45290(&v47, *((char **)&v50 + 1), v14, v24, v9);
        }
        while (!v27);
        v26 = v27;
      }
      if (a3 == 1 && !*(_DWORD *)(a1 + 120))
      {
LABEL_52:
        v36 = &v26[-v49];
        *v6 = *((_QWORD *)&v50 + 1) - v49;
        v6[1] = v36;
        if (a3 >= 2)
        {
          v37 = v47;
          v38 = (_OWORD *)(*((_QWORD *)&v48 + 1) + 16);
          v39 = v6 + 2;
          v40 = 1;
          do
          {
            if (v40 <= *(_QWORD *)(v37 + 112))
            {
              *(_OWORD *)v39 = *v38;
            }
            else
            {
              *v39 = -1;
              v39[1] = -1;
            }
            ++v40;
            ++v38;
            v39 += 2;
          }
          while (a3 != v40);
        }
        goto LABEL_58;
      }
      v28 = (char *)*((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1)
        || (v28 = (char *)malloc_type_malloc(16 * *(_QWORD *)(v47 + 112) + 16, 0x1000040451B5BE8uLL),
            (*((_QWORD *)&v48 + 1) = v28) != 0))
      {
        v29 = *(_QWORD *)(v47 + 112);
        if (v29)
        {
          v30 = v28 + 16;
          if ((unint64_t)(v29 + 1) > 2)
            v31 = v29 + 1;
          else
            v31 = 2;
          memset(v30, 255, 16 * v31 - 16);
        }
        if (!*(_DWORD *)(a1 + 120) && (BYTE1(v48) & 4) == 0)
        {
          v32 = (uint64_t)sub_216B45570(&v47, *((char **)&v50 + 1), v26, v24, v9);
          goto LABEL_47;
        }
        v33 = *(_QWORD *)(a1 + 128);
        v34 = v51;
        if (v33 >= 1 && !v51)
        {
          v34 = malloc_type_malloc(8 * v33 + 8, 0x10040436913F5uLL);
          v51 = v34;
          v33 = *(_QWORD *)(a1 + 128);
        }
        if (v33 < 1 || v34)
        {
          v35 = *((_QWORD *)&v50 + 1);
          while (1)
          {
            v32 = sub_216B458EC(&v47, (unsigned __int8 *)v35, (unsigned __int8 *)v26, v24, v9, 0, 0);
LABEL_47:
            if (v32)
              break;
            v35 = *((_QWORD *)&v50 + 1);
            if ((unint64_t)v26 > *((_QWORD *)&v50 + 1))
            {
              v26 = sub_216B45290(&v47, *((char **)&v50 + 1), v26 - 1, v24, v9);
              v35 = *((_QWORD *)&v50 + 1);
              if (v26)
                continue;
            }
            if ((char *)v35 != v14)
            {
              if (sub_216B44FAC(&v47, (char *)(v35 + 1), v14, v24, v9))
                goto LABEL_21;
              goto LABEL_65;
            }
            break;
          }
          if (!a3)
            goto LABEL_58;
          goto LABEL_52;
        }
        free(*((void **)&v48 + 1));
      }
      v15 = 12;
    }
    else
    {
LABEL_65:
      free(*((void **)&v48 + 1));
      free(v51);
      v15 = 1;
    }
LABEL_66:
    free(v53);
    return v15;
  }
  return 16;
}

char *sub_216B43FE0(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v21;
  unint64_t v24;
  char *v25;

  v7 = a2;
  if (*(char **)(a1 + 32) == a2)
    v8 = 128;
  else
    v8 = *(a2 - 1);
  v9 = *(_QWORD *)a1;
  v10 = sub_216B44DE8(*(_QWORD *)a1, a4, a5, 1 << a4, 132, 1 << a4);
  v11 = 0;
  v25 = *(char **)(a1 + 40);
  v12 = v10;
  v24 = v10;
  while (1)
  {
    if (v7 == v25)
      v13 = 128;
    else
      v13 = *v7;
    if (v12 == v10)
      v11 = v7;
    if (v8 == 128)
    {
      if ((*(_BYTE *)(a1 + 8) & 1) != 0)
        goto LABEL_13;
    }
    else if (v8 != 10 || (*(_BYTE *)(v9 + 40) & 8) == 0)
    {
LABEL_13:
      v14 = 0;
      v15 = 0;
      v16 = 130;
      goto LABEL_16;
    }
    v15 = *(_DWORD *)(v9 + 76);
    v14 = 129;
    v16 = 131;
LABEL_16:
    if (v13 == 128)
    {
      if ((*(_BYTE *)(a1 + 8) & 2) != 0)
        goto LABEL_19;
    }
    else if (v13 != 10 || (*(_BYTE *)(v9 + 40) & 8) == 0)
    {
LABEL_19:
      v16 = v14;
      goto LABEL_22;
    }
    v15 += *(_DWORD *)(v9 + 80);
LABEL_22:
    if (v15 >= 1)
    {
      v17 = v15 + 1;
      do
      {
        v12 = sub_216B44DE8(v9, a4, a5, v12, v16, v12);
        --v17;
      }
      while (v17 > 1);
    }
    if (v16 != 129)
    {
      if (v8 == 128)
        goto LABEL_46;
      v18 = v8;
      if (isalnum(v8) || v8 == 95 || v13 == 128)
        goto LABEL_39;
LABEL_32:
      v19 = isalnum(v13);
      if (v13 == 95 || v19 != 0)
        v16 = 133;
      goto LABEL_37;
    }
    if (v13 != 128)
      goto LABEL_32;
    v16 = 129;
LABEL_37:
    if (v8 == 128)
      goto LABEL_46;
    v18 = v8;
LABEL_39:
    if ((isalnum(v18) || v8 == 95) && (v16 == 130 || v13 != 128 && !isalnum(v13) && v13 != 95))
    {
      v16 = 134;
LABEL_47:
      v12 = sub_216B44DE8(v9, a4, a5, v12, v16, v12);
      goto LABEL_48;
    }
LABEL_46:
    if ((v16 - 133) <= 1)
      goto LABEL_47;
LABEL_48:
    v10 = v24;
    v21 = v12 & (1 << a5);
    if (v7 == a3 || v21)
      break;
    v12 = sub_216B44DE8(v9, a4, a5, v12, v13, v24);
    ++v7;
    v8 = v13;
  }
  *(_QWORD *)(a1 + 48) = v11;
  if (v21)
    return v7 + 1;
  else
    return 0;
}

char *sub_216B44280(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v20;
  unint64_t v23;
  char *v24;

  v7 = a2;
  v23 = *(_QWORD *)(a1 + 96);
  if (*(char **)(a1 + 32) == a2)
    v8 = 128;
  else
    v8 = *(a2 - 1);
  v9 = *(_QWORD *)a1;
  v10 = sub_216B44DE8(*(_QWORD *)a1, a4, a5, 1 << a4, 132, 1 << a4);
  v11 = 0;
  v24 = *(char **)(a1 + 40);
  while (1)
  {
    v12 = v7 == v24 ? 128 : *v7;
    if (v8 == 128)
    {
      if ((*(_BYTE *)(a1 + 8) & 1) != 0)
        goto LABEL_11;
    }
    else if (v8 != 10 || (*(_BYTE *)(v9 + 40) & 8) == 0)
    {
LABEL_11:
      v13 = 0;
      v14 = 0;
      v15 = 130;
      goto LABEL_14;
    }
    v14 = *(_DWORD *)(v9 + 76);
    v13 = 129;
    v15 = 131;
LABEL_14:
    if (v12 == 128)
    {
      if ((*(_BYTE *)(a1 + 8) & 2) != 0)
        goto LABEL_17;
    }
    else if (v12 != 10 || (*(_BYTE *)(v9 + 40) & 8) == 0)
    {
LABEL_17:
      v15 = v13;
      goto LABEL_20;
    }
    v14 += *(_DWORD *)(v9 + 80);
LABEL_20:
    if (v14 >= 1)
    {
      v16 = v14 + 1;
      do
      {
        v10 = sub_216B44DE8(v9, a4, a5, v10, v15, v10);
        --v16;
      }
      while (v16 > 1);
    }
    if (v15 != 129)
    {
      if (v8 == 128)
        goto LABEL_42;
      v17 = v8;
      if (isalnum(v8) || v8 == 95 || v12 == 128)
        goto LABEL_37;
LABEL_30:
      v18 = isalnum(v12);
      if (v12 == 95 || v18 != 0)
        v15 = 133;
      goto LABEL_35;
    }
    if (v12 != 128)
      goto LABEL_30;
    v15 = 129;
LABEL_35:
    if (v8 == 128)
      goto LABEL_42;
    v17 = v8;
LABEL_37:
    if (!isalnum(v17) && v8 != 95)
    {
LABEL_42:
      v20 = v23;
LABEL_43:
      if ((v15 - 133) > 1)
        goto LABEL_45;
      goto LABEL_44;
    }
    if (v15 == 130)
    {
      v15 = 134;
      v20 = v23;
    }
    else
    {
      if (v12 == 128)
        goto LABEL_42;
      v20 = v23;
      if (isalnum(v12) || v12 == 95)
        goto LABEL_43;
      v15 = 134;
    }
LABEL_44:
    v10 = sub_216B44DE8(v9, a4, a5, v10, v15, v10);
LABEL_45:
    if ((v10 & (1 << a5)) != 0)
      v11 = v7;
    if (v7 == a3 || v10 == v20)
      return v11;
    v10 = sub_216B44DE8(v9, a4, a5, v10, v12, v20);
    ++v7;
    v8 = v12;
  }
}

char *sub_216B44524(_QWORD *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a4 < a5)
  {
    v7 = a4;
    do
    {
      v10 = v7;
      v11 = *(_QWORD *)(*a1 + 8);
      v12 = *(_QWORD *)(v11 + 8 * v7);
      v13 = v12 & 0xF8000000;
      if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
      {
        v15 = (v12 & 0x7FFFFFF) + v7;
      }
      else
      {
        v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
        v15 = v7;
        if (!v16)
        {
          v17 = *(_QWORD *)(v11 + 8 * v7);
          v15 = v7;
          do
          {
            v15 += v17 & 0x7FFFFFF;
            v17 = *(_QWORD *)(v11 + 8 * v15);
          }
          while ((v17 & 0xF8000000) != 0x90000000);
        }
      }
      v7 = v15 + 1;
      switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
        case 4uLL:
        case 5uLL:
          ++a2;
          break;
        case 8uLL:
          v18 = a3;
          do
          {
            v19 = sub_216B44280((uint64_t)a1, a2, v18, v10, v15 + 1);
            v20 = sub_216B44280((uint64_t)a1, v19, a3, v15 + 1, a5);
            v18 = v19 - 1;
          }
          while (v20 != a3);
          v21 = v10 + 1;
          v22 = a2;
          do
          {
            v23 = v22;
            v22 = a2;
            v24 = sub_216B44280((uint64_t)a1, a2, v19, v21, v15);
            a2 = v24;
          }
          while (v24 && v24 != v22);
          if (v24)
            v25 = v22;
          else
            v25 = v23;
          if (v24)
            v26 = v24;
          else
            v26 = v22;
          sub_216B44524(a1, v25, v26, v21, v15);
          a2 = v19;
          break;
        case 0xAuLL:
          v27 = a3;
          do
          {
            v28 = sub_216B44280((uint64_t)a1, a2, v27, v10, v15 + 1);
            v29 = sub_216B44280((uint64_t)a1, v28, a3, v15 + 1, a5);
            v27 = v28 - 1;
          }
          while (v29 != a3);
          v30 = v10 + 1;
          if (sub_216B44280((uint64_t)a1, a2, v28, v30, v15))
            sub_216B44524(a1, a2, v28, v30, v15);
          a2 = v28;
          break;
        case 0xCuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
          break;
        case 0xDuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
          break;
        case 0xEuLL:
          v31 = a3;
          do
          {
            v32 = sub_216B44280((uint64_t)a1, a2, v31, v10, v7);
            v33 = sub_216B44280((uint64_t)a1, v32, a3, v7, a5);
            v31 = v32 - 1;
          }
          while (v33 != a3);
          v34 = v10 + (v12 & 0x7FFFFFF) - 1;
          v35 = v10 + 1;
          while (sub_216B44280((uint64_t)a1, a2, v32, v35, v34) != v32)
          {
            v36 = *(_QWORD *)(v11 + 8 * (v34 + 1)) & 0x7FFFFFFLL;
            v37 = v36 + v34 + 1;
            v38 = v36 + v34;
            v35 = v34 + 2;
            if ((*(_QWORD *)(v11 + 8 * v37) & 0xF8000000) == 0x88000000)
              v34 = v38;
            else
              v34 = v37;
          }
          sub_216B44524(a1, a2, v32, v35, v34);
          a2 = v32;
          break;
        default:
          break;
      }
    }
    while (v7 < a5);
  }
  return a2;
}

uint64_t sub_216B44890(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  unsigned __int8 *v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t result;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = a3;
  if (a4 < a5)
  {
    v10 = a4;
LABEL_3:
    v12 = v10;
LABEL_4:
    v13 = *a1;
    v14 = *(_QWORD *)(*a1 + 8);
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 8 * v12);
      switch(((unint64_t)(v15 & 0xF8000000) - 0x10000000) >> 27)
      {
        case 0uLL:
          if (a2 == v7)
            return 0;
          v16 = (char)*a2++;
          if (v16 != (char)v15)
            return 0;
          goto LABEL_52;
        case 1uLL:
          if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0)
            goto LABEL_52;
          if ((unint64_t)a2 >= a1[5])
            return 0;
          v17 = *(a2 - 1);
          goto LABEL_17;
        case 2uLL:
          v18 = (unsigned __int8 *)a1[5];
          if (a2 == v18 && (a1[1] & 2) == 0)
            goto LABEL_52;
          if (a2 >= v18)
            return 0;
          v17 = *a2;
LABEL_17:
          if (v17 != 10 || (*(_BYTE *)(v13 + 40) & 8) == 0)
            return 0;
          goto LABEL_52;
        case 3uLL:
          if (a2 == v7)
            return 0;
          ++a2;
          goto LABEL_52;
        case 4uLL:
          if (a2 == v7)
            return 0;
          v19 = *(_QWORD *)(v13 + 24) + 32 * (v15 & 0x7FFFFFF);
          v20 = *a2++;
          if ((*(_BYTE *)(v19 + 8) & *(_BYTE *)(*(_QWORD *)v19 + v20)) == 0)
            return 0;
          goto LABEL_52;
        case 0xAuLL:
          goto LABEL_52;
        case 0xEuLL:
          ++v12;
          v21 = *(_QWORD *)(v14 + 8 * v12);
          do
          {
            v12 += v21 & 0x7FFFFFF;
            v21 = *(_QWORD *)(v14 + 8 * v12);
          }
          while ((v21 & 0xF8000000) != 0x90000000);
          goto LABEL_52;
        case 0x11uLL:
          v22 = (unsigned __int8 *)a1[4];
          if (a2 == v22)
          {
            v23 = a1[5];
            if ((a1[1] & 1) == 0)
              goto LABEL_46;
          }
          else
          {
            v23 = a1[5];
          }
          if ((unint64_t)a2 >= v23 || *(a2 - 1) != 10 || (*(_BYTE *)(v13 + 40) & 8) == 0)
          {
            if (a2 <= v22)
              return 0;
            v29 = *(a2 - 1);
            v30 = isalnum(v29);
            result = 0;
            if (v29 == 95 || v30)
              return result;
          }
LABEL_46:
          if ((unint64_t)a2 >= v23)
            return 0;
          v28 = *a2;
LABEL_48:
          v31 = isalnum(v28);
          if (v28 == 95)
          {
            v7 = a3;
          }
          else
          {
            v7 = a3;
            if (!v31)
              return 0;
          }
LABEL_52:
          if (++v12 >= a5)
            goto LABEL_76;
          break;
        case 0x12uLL:
          v24 = (unsigned __int8 *)a1[5];
          if (a2 == v24 && (a1[1] & 2) == 0)
            goto LABEL_37;
          if (a2 >= v24)
            return 0;
          v25 = *a2;
          if (v25 != 10 || (*(_BYTE *)(v13 + 40) & 8) == 0)
          {
            v26 = isalnum(*a2);
            result = 0;
            if (v25 == 95 || v26)
              return result;
          }
LABEL_37:
          if ((unint64_t)a2 <= a1[4])
            return 0;
          v28 = *(a2 - 1);
          goto LABEL_48;
        default:
          v10 = v12 + 1;
          v32 = *(_QWORD *)(*a1 + 8);
          v33 = *(_QWORD *)(v32 + 8 * v12);
          v34 = ((unint64_t)(v33 & 0xF8000000) - 939524096) >> 27;
          if (v34 != 4)
          {
            result = 0;
            switch(v34)
            {
              case 0uLL:
                v35 = v33 & 0x7FFFFFF;
                v36 = a1[2];
                v37 = *(_QWORD *)(v36 + 16 * v35 + 8);
                if (v37 == -1)
                  return 0;
                v38 = *(_QWORD *)(v36 + 16 * v35);
                v39 = v37 - v38;
                if (v37 == v38)
                {
                  v7 = a3;
                  if ((int)a7 > 100)
                    return 0;
                  ++a7;
                }
                else
                {
                  v7 = a3;
                }
                if (a2 > &v7[-v39] || memcmp(a2, (const void *)(a1[3] + v38), v39))
                  return 0;
                do
                  v40 = *(_QWORD *)(v32 + 8 * v12++);
                while (v40 != (v35 | 0x40000000));
                a2 += v39;
                if (v12 >= a5)
                  goto LABEL_76;
                goto LABEL_4;
              case 2uLL:
                ++a6;
                *(_QWORD *)(a1[7] + 8 * a6) = a2;
                goto LABEL_74;
              case 3uLL:
                v41 = a1[7];
                if (a2 == *(unsigned __int8 **)(v41 + 8 * a6))
                {
                  --a6;
LABEL_74:
                  v7 = a3;
                }
                else
                {
                  *(_QWORD *)(v41 + 8 * a6) = a2;
                  v7 = a3;
                  result = sub_216B44890(a1, a2, a3, v10 - (v33 & 0x7FFFFFF), a5, a6, a7);
                  if (result)
                    return result;
                  --a6;
                }
                if (v10 >= a5)
                  goto LABEL_76;
                goto LABEL_3;
              case 6uLL:
                v42 = 16 * (v33 & 0x7FFFFFF);
                v43 = a1[2];
                v44 = *(_QWORD *)(v43 + v42);
                *(_QWORD *)(v43 + v42) = &a2[-a1[3]];
                result = sub_216B44890(a1, a2, a3, v12 + 1, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + v42) = v44;
                return result;
              case 7uLL:
                v45 = v33 & 0x7FFFFFF;
                v46 = a1[2] + 16 * v45;
                v47 = *(_QWORD *)(v46 + 8);
                *(_QWORD *)(v46 + 8) = &a2[-a1[3]];
                result = sub_216B44890(a1, a2, a3, v12 + 1, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + 16 * v45 + 8) = v47;
                return result;
              case 8uLL:
                v48 = v12 + (v33 & 0x7FFFFFF) - 1;
                result = sub_216B44890(a1, a2, a3, v12 + 1, v48, a6, a7);
                if (result)
                  return result;
                while (1)
                {
                  v49 = *(_QWORD *)(*a1 + 8);
                  if ((*(_QWORD *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000)
                    break;
                  v50 = v48 + 2;
                  v51 = *(_QWORD *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
                  v52 = v51 + v48 + 1;
                  v53 = v51 + v48;
                  if ((*(_QWORD *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000)
                    v48 = v53;
                  else
                    v48 = v52;
                  result = sub_216B44890(a1, a2, a3, v50, v48, a6, a7);
                  if (result)
                    return result;
                }
                return 0;
              default:
                return result;
            }
          }
          result = sub_216B44890(a1, a2, v7, v12 + 1, a5, a6, a7);
          if (result)
            return result;
          v12 = (v33 & 0x7FFFFFF) + v10;
          if (v12 >= a5)
            goto LABEL_76;
          goto LABEL_4;
      }
    }
  }
LABEL_76:
  if (a2 == v7)
    return (uint64_t)a2;
  else
    return 0;
}

unint64_t sub_216B44DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != a3)
  {
    v6 = 1 << a2;
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * a2);
      switch(((unint64_t)(v8 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          v11 = a5 == (char)v8;
          goto LABEL_29;
        case 2uLL:
          v11 = (a5 & 0xFFFFFFFD) == 129;
          goto LABEL_29;
        case 3uLL:
          v11 = (a5 & 0xFFFFFFFE) == 130;
          goto LABEL_29;
        case 4uLL:
          if (a5 <= 127)
            a6 |= 2 * (v6 & a4);
          break;
        case 5uLL:
          if (a5 > 127)
            break;
          v12 = *(_QWORD *)(a1 + 24) + 32 * (v8 & 0x7FFFFFF);
          if ((*(_BYTE *)(v12 + 8) & *(_BYTE *)(*(_QWORD *)v12 + a5)) == 0)
            break;
          v9 = v6 & a4;
LABEL_5:
          a6 |= 2 * v9;
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          v9 = v6 & a6;
          goto LABEL_5;
        case 9uLL:
          v13 = a6 | (2 * (v6 & a6));
          v14 = (v6 >> v8) & v13;
          a6 = ((v13 & v6) >> v8) | v13;
          if (v14)
            v15 = 1;
          else
            v15 = (a6 & (v6 >> v8)) == 0;
          if (!v15)
          {
            a2 += ~(unint64_t)(v8 & 0x7FFFFFF);
            v6 = 1 << a2;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          a6 |= 2 * (v6 & a6);
          goto LABEL_7;
        case 0xFuLL:
          if ((v6 & a6) == 0)
            break;
          v16 = *(_QWORD *)(v7 + 8 * a2 + 8);
          if ((v16 & 0xF8000000) == 0x90000000)
          {
            LOBYTE(v17) = 1;
          }
          else
          {
            v17 = 1;
            do
            {
              v17 += v16 & 0x7FFFFFF;
              v16 = *(_QWORD *)(v7 + 8 * (v17 + a2));
            }
            while ((v16 & 0xF8000000) != 0x90000000);
          }
          v10 = (v6 & a6) << v17;
          goto LABEL_35;
        case 0x10uLL:
          a6 |= 2 * (v6 & a6);
          v8 &= 0x7FFFFFFu;
          if ((*(_QWORD *)(v7 + 8 * (v8 + a2)) & 0xF8000000) == 0x90000000)
            break;
LABEL_7:
          v10 = (a6 & v6) << v8;
LABEL_35:
          a6 |= v10;
          break;
        case 0x12uLL:
          v11 = a5 == 133;
          goto LABEL_29;
        case 0x13uLL:
          v11 = a5 == 134;
LABEL_29:
          if (v11)
            a6 |= 2 * (v6 & a4);
          break;
        default:
          break;
      }
      ++a2;
      v6 *= 2;
    }
    while (a2 != a3);
  }
  return a6;
}

char *sub_216B44FAC(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  void *v9;
  void *v10;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  void *__dst;
  void *__src;

  v7 = a2;
  v9 = (void *)a1[10];
  v10 = (void *)a1[11];
  __dst = (void *)a1[12];
  if ((char *)a1[4] == a2)
    v11 = 128;
  else
    v11 = *(a2 - 1);
  bzero(v9, *(_QWORD *)(*a1 + 48));
  *((_BYTE *)v9 + a4) = 1;
  sub_216B45E44(*a1, a4, a5, (uint64_t)v9, 132, (uint64_t)v9);
  memmove(v10, v9, *(_QWORD *)(*a1 + 48));
  v12 = 0;
  __src = v10;
  while (1)
  {
    if (v7 == (char *)a1[5])
      v13 = 128;
    else
      v13 = *v7;
    v14 = *a1;
    if (!memcmp(v9, v10, *(_QWORD *)(*a1 + 48)))
      v12 = v7;
    if (v11 == 128)
    {
      if ((a1[1] & 1) != 0)
        goto LABEL_13;
    }
    else if (v11 != 10 || (*(_BYTE *)(v14 + 40) & 8) == 0)
    {
LABEL_13:
      v15 = 0;
      v16 = 0;
      v17 = 130;
      goto LABEL_16;
    }
    v16 = *(_DWORD *)(v14 + 76);
    v15 = 129;
    v17 = 131;
LABEL_16:
    if (v13 == 128)
    {
      if ((a1[1] & 2) != 0)
        goto LABEL_19;
    }
    else if (v13 != 10 || (*(_BYTE *)(v14 + 40) & 8) == 0)
    {
LABEL_19:
      v17 = v15;
      goto LABEL_22;
    }
    v16 += *(_DWORD *)(v14 + 80);
LABEL_22:
    if (v16 >= 1)
    {
      v18 = v16 + 1;
      do
      {
        sub_216B45E44(*a1, a4, a5, (uint64_t)v9, v17, (uint64_t)v9);
        --v18;
      }
      while (v18 > 1);
    }
    if (v17 != 129)
    {
      if (v11 == 128)
        goto LABEL_46;
      v19 = v11;
      if (isalnum(v11) || v11 == 95 || v13 == 128)
        goto LABEL_39;
LABEL_32:
      v20 = isalnum(v13);
      if (v13 == 95 || v20 != 0)
        v17 = 133;
      goto LABEL_37;
    }
    if (v13 != 128)
      goto LABEL_32;
    v17 = 129;
LABEL_37:
    if (v11 == 128)
      goto LABEL_46;
    v19 = v11;
LABEL_39:
    if ((isalnum(v19) || v11 == 95) && (v17 == 130 || v13 != 128 && !isalnum(v13) && v13 != 95))
    {
      v17 = 134;
LABEL_47:
      sub_216B45E44(*a1, a4, a5, (uint64_t)v9, v17, (uint64_t)v9);
      goto LABEL_48;
    }
LABEL_46:
    if ((v17 - 133) <= 1)
      goto LABEL_47;
LABEL_48:
    if (v7 == a3 || *((_BYTE *)v9 + a5))
      break;
    memmove(__dst, v9, *(_QWORD *)(*a1 + 48));
    v10 = __src;
    memmove(v9, __src, *(_QWORD *)(*a1 + 48));
    sub_216B45E44(*a1, a4, a5, (uint64_t)__dst, v13, (uint64_t)v9);
    ++v7;
    v11 = v13;
  }
  a1[6] = (uint64_t)v12;
  if (*((_BYTE *)v9 + a5))
    return v7 + 1;
  else
    return 0;
}

char *sub_216B45290(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  void *v9;
  void *v10;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  const void *v23;
  size_t v24;
  int v25;
  void *__dst;
  void *__s2;

  v7 = a2;
  v9 = (void *)a1[10];
  v10 = (void *)a1[13];
  __dst = (void *)a1[12];
  if ((char *)a1[4] == a2)
    v11 = 128;
  else
    v11 = *(a2 - 1);
  bzero(v9, *(_QWORD *)(*a1 + 48));
  *((_BYTE *)v9 + a4) = 1;
  sub_216B45E44(*a1, a4, a5, (uint64_t)v9, 132, (uint64_t)v9);
  v12 = 0;
  __s2 = v10;
  while (1)
  {
    v13 = v7 == (char *)a1[5] ? 128 : *v7;
    if (v11 == 128)
    {
      if ((a1[1] & 1) == 0)
      {
        v14 = *a1;
LABEL_14:
        v15 = *(_DWORD *)(v14 + 76);
        v16 = 129;
        v17 = 131;
        goto LABEL_16;
      }
    }
    else if (v11 == 10)
    {
      v14 = *a1;
      if ((*(_BYTE *)(*a1 + 40) & 8) != 0)
        goto LABEL_14;
    }
    v16 = 0;
    v15 = 0;
    v17 = 130;
LABEL_16:
    if (v13 == 128)
    {
      if ((a1[1] & 2) == 0)
      {
        v18 = *a1;
LABEL_22:
        v15 += *(_DWORD *)(v18 + 80);
        goto LABEL_24;
      }
    }
    else if (v13 == 10)
    {
      v18 = *a1;
      if ((*(_BYTE *)(*a1 + 40) & 8) != 0)
        goto LABEL_22;
    }
    v17 = v16;
LABEL_24:
    if (v15 >= 1)
    {
      v19 = v15 + 1;
      do
      {
        sub_216B45E44(*a1, a4, a5, (uint64_t)v9, v17, (uint64_t)v9);
        --v19;
      }
      while (v19 > 1);
    }
    if (v17 == 129)
    {
      if (v13 == 128)
      {
        v17 = 129;
      }
      else
      {
LABEL_34:
        v21 = isalnum(v13);
        if (v13 == 95 || v21 != 0)
          v17 = 133;
      }
      if (v11 == 128)
        goto LABEL_43;
      v20 = v11;
      goto LABEL_41;
    }
    if (v11 == 128)
      goto LABEL_43;
    v20 = v11;
    if (!isalnum(v11) && v11 != 95 && v13 != 128)
      goto LABEL_34;
LABEL_41:
    if (!isalnum(v20) && v11 != 95)
    {
LABEL_43:
      v23 = __s2;
      goto LABEL_44;
    }
    v23 = __s2;
    if (v17 == 130 || v13 != 128 && !isalnum(v13) && v13 != 95)
    {
      v17 = 134;
LABEL_51:
      sub_216B45E44(*a1, a4, a5, (uint64_t)v9, v17, (uint64_t)v9);
      goto LABEL_52;
    }
LABEL_44:
    if ((v17 - 133) <= 1)
      goto LABEL_51;
LABEL_52:
    if (*((_BYTE *)v9 + a5))
      v12 = v7;
    v24 = *(_QWORD *)(*a1 + 48);
    v25 = memcmp(v9, v23, v24);
    if (v7 == a3 || !v25)
      return v12;
    memmove(__dst, v9, v24);
    memmove(v9, v23, *(_QWORD *)(*a1 + 48));
    sub_216B45E44(*a1, a4, a5, (uint64_t)__dst, v13, (uint64_t)v9);
    ++v7;
    v11 = v13;
  }
}

char *sub_216B45570(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a4 < a5)
  {
    v7 = a4;
    do
    {
      v10 = v7;
      v11 = *(_QWORD *)(*a1 + 8);
      v12 = *(_QWORD *)(v11 + 8 * v7);
      v13 = v12 & 0xF8000000;
      if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
      {
        v15 = (v12 & 0x7FFFFFF) + v7;
      }
      else
      {
        v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
        v15 = v7;
        if (!v16)
        {
          v17 = *(_QWORD *)(v11 + 8 * v7);
          v15 = v7;
          do
          {
            v15 += v17 & 0x7FFFFFF;
            v17 = *(_QWORD *)(v11 + 8 * v15);
          }
          while ((v17 & 0xF8000000) != 0x90000000);
        }
      }
      v7 = v15 + 1;
      switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
        case 4uLL:
        case 5uLL:
          ++a2;
          break;
        case 8uLL:
          v18 = a3;
          do
          {
            v19 = sub_216B45290(a1, a2, v18, v10, v15 + 1);
            v20 = sub_216B45290(a1, v19, a3, v15 + 1, a5);
            v18 = v19 - 1;
          }
          while (v20 != a3);
          v21 = v10 + 1;
          v22 = a2;
          do
          {
            v23 = v22;
            v22 = a2;
            v24 = sub_216B45290(a1, a2, v19, v21, v15);
            a2 = v24;
          }
          while (v24 && v24 != v22);
          if (v24)
            v25 = v22;
          else
            v25 = v23;
          if (v24)
            v26 = v24;
          else
            v26 = v22;
          sub_216B45570(a1, v25, v26, v21, v15);
          a2 = v19;
          break;
        case 0xAuLL:
          v27 = a3;
          do
          {
            v28 = sub_216B45290(a1, a2, v27, v10, v15 + 1);
            v29 = sub_216B45290(a1, v28, a3, v15 + 1, a5);
            v27 = v28 - 1;
          }
          while (v29 != a3);
          v30 = v10 + 1;
          if (sub_216B45290(a1, a2, v28, v30, v15))
            sub_216B45570(a1, a2, v28, v30, v15);
          a2 = v28;
          break;
        case 0xCuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
          break;
        case 0xDuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
          break;
        case 0xEuLL:
          v31 = a3;
          do
          {
            v32 = sub_216B45290(a1, a2, v31, v10, v7);
            v33 = sub_216B45290(a1, v32, a3, v7, a5);
            v31 = v32 - 1;
          }
          while (v33 != a3);
          v34 = v10 + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
          v35 = v10 + 1;
          while (sub_216B45290(a1, a2, v32, v35, v34) != v32)
          {
            v36 = *(_QWORD *)(*a1 + 8);
            v37 = *(_QWORD *)(v36 + 8 * (v34 + 1)) & 0x7FFFFFFLL;
            v38 = v37 + v34 + 1;
            v39 = v37 + v34;
            v35 = v34 + 2;
            if ((*(_QWORD *)(v36 + 8 * v38) & 0xF8000000) == 0x88000000)
              v34 = v39;
            else
              v34 = v38;
          }
          sub_216B45570(a1, a2, v32, v35, v34);
          a2 = v32;
          break;
        default:
          break;
      }
    }
    while (v7 < a5);
  }
  return a2;
}

uint64_t sub_216B458EC(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  unsigned __int8 *v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t result;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = a3;
  if (a4 < a5)
  {
    v10 = a4;
LABEL_3:
    v12 = v10;
LABEL_4:
    v13 = *a1;
    v14 = *(_QWORD *)(*a1 + 8);
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 8 * v12);
      switch(((unint64_t)(v15 & 0xF8000000) - 0x10000000) >> 27)
      {
        case 0uLL:
          if (a2 == v7)
            return 0;
          v16 = (char)*a2++;
          if (v16 != (char)v15)
            return 0;
          goto LABEL_52;
        case 1uLL:
          if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0)
            goto LABEL_52;
          if ((unint64_t)a2 >= a1[5])
            return 0;
          v17 = *(a2 - 1);
          goto LABEL_17;
        case 2uLL:
          v18 = (unsigned __int8 *)a1[5];
          if (a2 == v18 && (a1[1] & 2) == 0)
            goto LABEL_52;
          if (a2 >= v18)
            return 0;
          v17 = *a2;
LABEL_17:
          if (v17 != 10 || (*(_BYTE *)(v13 + 40) & 8) == 0)
            return 0;
          goto LABEL_52;
        case 3uLL:
          if (a2 == v7)
            return 0;
          ++a2;
          goto LABEL_52;
        case 4uLL:
          if (a2 == v7)
            return 0;
          v19 = *(_QWORD *)(v13 + 24) + 32 * (v15 & 0x7FFFFFF);
          v20 = *a2++;
          if ((*(_BYTE *)(v19 + 8) & *(_BYTE *)(*(_QWORD *)v19 + v20)) == 0)
            return 0;
          goto LABEL_52;
        case 0xAuLL:
          goto LABEL_52;
        case 0xEuLL:
          ++v12;
          v21 = *(_QWORD *)(v14 + 8 * v12);
          do
          {
            v12 += v21 & 0x7FFFFFF;
            v21 = *(_QWORD *)(v14 + 8 * v12);
          }
          while ((v21 & 0xF8000000) != 0x90000000);
          goto LABEL_52;
        case 0x11uLL:
          v22 = (unsigned __int8 *)a1[4];
          if (a2 == v22)
          {
            v23 = a1[5];
            if ((a1[1] & 1) == 0)
              goto LABEL_46;
          }
          else
          {
            v23 = a1[5];
          }
          if ((unint64_t)a2 >= v23 || *(a2 - 1) != 10 || (*(_BYTE *)(v13 + 40) & 8) == 0)
          {
            if (a2 <= v22)
              return 0;
            v29 = *(a2 - 1);
            v30 = isalnum(v29);
            result = 0;
            if (v29 == 95 || v30)
              return result;
          }
LABEL_46:
          if ((unint64_t)a2 >= v23)
            return 0;
          v28 = *a2;
LABEL_48:
          v31 = isalnum(v28);
          if (v28 == 95)
          {
            v7 = a3;
          }
          else
          {
            v7 = a3;
            if (!v31)
              return 0;
          }
LABEL_52:
          if (++v12 >= a5)
            goto LABEL_76;
          break;
        case 0x12uLL:
          v24 = (unsigned __int8 *)a1[5];
          if (a2 == v24 && (a1[1] & 2) == 0)
            goto LABEL_37;
          if (a2 >= v24)
            return 0;
          v25 = *a2;
          if (v25 != 10 || (*(_BYTE *)(v13 + 40) & 8) == 0)
          {
            v26 = isalnum(*a2);
            result = 0;
            if (v25 == 95 || v26)
              return result;
          }
LABEL_37:
          if ((unint64_t)a2 <= a1[4])
            return 0;
          v28 = *(a2 - 1);
          goto LABEL_48;
        default:
          v10 = v12 + 1;
          v32 = *(_QWORD *)(*a1 + 8);
          v33 = *(_QWORD *)(v32 + 8 * v12);
          v34 = ((unint64_t)(v33 & 0xF8000000) - 939524096) >> 27;
          if (v34 != 4)
          {
            result = 0;
            switch(v34)
            {
              case 0uLL:
                v35 = v33 & 0x7FFFFFF;
                v36 = a1[2];
                v37 = *(_QWORD *)(v36 + 16 * v35 + 8);
                if (v37 == -1)
                  return 0;
                v38 = *(_QWORD *)(v36 + 16 * v35);
                v39 = v37 - v38;
                if (v37 == v38)
                {
                  v7 = a3;
                  if ((int)a7 > 100)
                    return 0;
                  ++a7;
                }
                else
                {
                  v7 = a3;
                }
                if (a2 > &v7[-v39] || memcmp(a2, (const void *)(a1[3] + v38), v39))
                  return 0;
                do
                  v40 = *(_QWORD *)(v32 + 8 * v12++);
                while (v40 != (v35 | 0x40000000));
                a2 += v39;
                if (v12 >= a5)
                  goto LABEL_76;
                goto LABEL_4;
              case 2uLL:
                ++a6;
                *(_QWORD *)(a1[7] + 8 * a6) = a2;
                goto LABEL_74;
              case 3uLL:
                v41 = a1[7];
                if (a2 == *(unsigned __int8 **)(v41 + 8 * a6))
                {
                  --a6;
LABEL_74:
                  v7 = a3;
                }
                else
                {
                  *(_QWORD *)(v41 + 8 * a6) = a2;
                  v7 = a3;
                  result = sub_216B458EC(a1, a2, a3, v10 - (v33 & 0x7FFFFFF), a5, a6, a7);
                  if (result)
                    return result;
                  --a6;
                }
                if (v10 >= a5)
                  goto LABEL_76;
                goto LABEL_3;
              case 6uLL:
                v42 = 16 * (v33 & 0x7FFFFFF);
                v43 = a1[2];
                v44 = *(_QWORD *)(v43 + v42);
                *(_QWORD *)(v43 + v42) = &a2[-a1[3]];
                result = sub_216B458EC(a1, a2, a3, v12 + 1, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + v42) = v44;
                return result;
              case 7uLL:
                v45 = v33 & 0x7FFFFFF;
                v46 = a1[2] + 16 * v45;
                v47 = *(_QWORD *)(v46 + 8);
                *(_QWORD *)(v46 + 8) = &a2[-a1[3]];
                result = sub_216B458EC(a1, a2, a3, v12 + 1, a5, a6, a7);
                if (!result)
                  *(_QWORD *)(a1[2] + 16 * v45 + 8) = v47;
                return result;
              case 8uLL:
                v48 = v12 + (v33 & 0x7FFFFFF) - 1;
                result = sub_216B458EC(a1, a2, a3, v12 + 1, v48, a6, a7);
                if (result)
                  return result;
                while (1)
                {
                  v49 = *(_QWORD *)(*a1 + 8);
                  if ((*(_QWORD *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000)
                    break;
                  v50 = v48 + 2;
                  v51 = *(_QWORD *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
                  v52 = v51 + v48 + 1;
                  v53 = v51 + v48;
                  if ((*(_QWORD *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000)
                    v48 = v53;
                  else
                    v48 = v52;
                  result = sub_216B458EC(a1, a2, a3, v50, v48, a6, a7);
                  if (result)
                    return result;
                }
                return 0;
              default:
                return result;
            }
          }
          result = sub_216B458EC(a1, a2, v7, v12 + 1, a5, a6, a7);
          if (result)
            return result;
          v12 = (v33 & 0x7FFFFFF) + v10;
          if (v12 >= a5)
            goto LABEL_76;
          goto LABEL_4;
      }
    }
  }
LABEL_76:
  if (a2 == v7)
    return (uint64_t)a2;
  else
    return 0;
}

uint64_t sub_216B45E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(v8 + 8 * v7);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          if (a5 == (char)v9)
            goto LABEL_32;
          break;
        case 2uLL:
          if ((a5 & 0xFFFFFFFD) == 0x81)
            goto LABEL_32;
          break;
        case 3uLL:
          if ((a5 & 0xFFFFFFFE) == 0x82)
            goto LABEL_32;
          break;
        case 4uLL:
          if (a5 <= 127)
            goto LABEL_32;
          break;
        case 5uLL:
          if (a5 <= 127)
          {
            v13 = *(_QWORD *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
            if ((*(_BYTE *)(v13 + 8) & *(_BYTE *)(*(_QWORD *)v13 + a5)) != 0)
              goto LABEL_32;
          }
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          *(_BYTE *)(a6 + a2 + 1) |= *(_BYTE *)(a6 + a2);
          break;
        case 9uLL:
          v14 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v14;
          v15 = v9 & 0x7FFFFFF;
          v16 = *(unsigned __int8 *)(a6 + a2 - v15);
          v17 = v16 | v14;
          *(_BYTE *)(a6 + a2 - v15) = v17;
          if (v16)
            v18 = 1;
          else
            v18 = v17 == 0;
          if (!v18)
          {
            v7 += ~v15;
            a2 = v7;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          v10 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v10;
          v11 = (v9 & 0x7FFFFFF) + a2;
          v12 = *(_BYTE *)(a6 + v11) | v10;
          goto LABEL_7;
        case 0xFuLL:
          if (*(_BYTE *)(a6 + a2))
          {
            v19 = *(_QWORD *)(v8 + 8 * v7 + 8);
            if ((v19 & 0xF8000000) == 0x90000000)
            {
              v20 = 1;
            }
            else
            {
              v20 = 1;
              do
              {
                v20 += v19 & 0x7FFFFFF;
                v19 = *(_QWORD *)(v8 + 8 * (v20 + v7));
              }
              while ((v19 & 0xF8000000) != 0x90000000);
            }
            *(_BYTE *)(a6 + v20 + a2) |= *(_BYTE *)(a6 + a2);
          }
          break;
        case 0x10uLL:
          v21 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v21;
          v22 = v9 & 0x7FFFFFF;
          if ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v22 + v7)) & 0xF8000000) != 0x90000000)
          {
            v11 = v22 + a2;
            v12 = *(_BYTE *)(a6 + v11) | v21;
LABEL_7:
            *(_BYTE *)(a6 + v11) = v12;
          }
          break;
        case 0x12uLL:
          if (a5 != 133)
            break;
          goto LABEL_32;
        case 0x13uLL:
          if (a5 == 134)
LABEL_32:
            *(_BYTE *)(a2 + a6 + 1) |= *(_BYTE *)(a4 + a2);
          break;
        default:
          break;
      }
      ++v7;
      ++a2;
    }
    while (v7 != a3);
  }
  return a6;
}

void sub_216B46060(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_DWORD *)a1 == 62053)
  {
    v1 = *(_QWORD **)(a1 + 24);
    if (v1)
    {
      if (*(_DWORD *)v1 == 53829)
      {
        *(_DWORD *)a1 = 0;
        *(_DWORD *)v1 = 0;
        v2 = (void *)v1[1];
        if (v2)
          free(v2);
        v3 = (void *)v1[3];
        if (v3)
          free(v3);
        v4 = (void *)v1[4];
        if (v4)
          free(v4);
        v5 = (void *)v1[12];
        if (v5)
          free(v5);
        free(v1);
      }
    }
  }
}

unsigned __int8 *sub_216B460E8(_BYTE *a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;

  v3 = (unsigned __int8 *)a2;
  if (a3)
  {
    v4 = a3 - 1;
    v3 = (unsigned __int8 *)a2;
    while (v4)
    {
      v5 = *v3++;
      *a1++ = v5;
      --v4;
      if (!v5)
        return &v3[~a2];
    }
    *a1 = 0;
  }
  while (*v3++)
    ;
  return &v3[~a2];
}

uint64_t sub_216B46128(int a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  BOOL v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  BOOL *v346;
  uint64_t result;
  int v348;
  BOOL v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  BOOL v418;
  uint64_t v419;
  BOOL v420;
  uint64_t v421;
  BOOL v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  BOOL v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  _QWORD *v584;
  uint64_t v585;
  BOOL v586;
  uint64_t v587;
  BOOL v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  _QWORD *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _QWORD *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  int v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  const void *v722[2];
  const void *v723[2];
  const void *v724[2];
  char v725;
  BOOL v726;
  char v727;
  char v728;
  char v729;
  char v730;
  char v731;
  char v732;
  char v733;
  char v734;
  char v735;
  char v736;
  char v737;
  char v738;
  char v739;
  char v740;
  char v741;
  char v742;
  char v743;
  char v744;
  char v745;
  char v746;
  char v747;
  char v748;
  char v749;
  char v750;
  char v751;
  char v752;
  char v753;
  char v754;
  char v755;
  char v756;
  char v757;
  char v758;
  char v759;
  char v760;
  char v761;
  char v762;
  char v763;
  char v764;
  char v765;
  char v766;
  char v767;
  char v768;
  char v769;
  char v770;
  char v771;
  char v772;
  char v773;
  char v774;
  char v775;
  char v776;
  char v777;
  char v778;
  char v779;
  char v780;
  char v781;
  char v782;
  char v783;
  char v784;
  char v785;
  char v786;
  char v787;
  char v788;
  char v789;
  char v790;
  char v791;
  char v792;
  char v793;
  char v794;
  char v795;
  char v796;
  char v797;
  char v798;
  char v799;
  char v800;
  char v801;
  char v802;
  char v803;
  char v804;
  char v805;
  char v806;
  char v807;
  char v808;
  char v809;
  char v810;
  char v811;
  char v812;
  char v813;
  char v814;
  char v815;
  BOOL v816;
  char v817;
  char v818;
  char v819;
  char v820;
  char v821;
  char v822;
  char v823;
  char v824;
  char v825;
  char v826;
  char v827;
  char v828;
  char v829;
  char v830;
  char v831;
  char v832;
  char v833;
  char v834;
  char v835;
  char v836;
  char v837;
  char v838;
  char v839;
  char v840;
  char v841;
  char v842;
  char v843;
  char v844;
  char v845;
  char v846;
  char v847;
  char v848;
  char v849;
  char v850;
  char v851;
  char v852;
  char v853;
  char v854;
  char v855;
  char v856;
  char v857;
  char v858;
  char v859;
  char v860;
  char v861;
  char v862;
  char v863;
  char v864;
  char v865;
  char v866;
  char v867;
  char v868;
  char v869;
  char v870;
  char v871;
  char v872;
  char v873;
  char v874;
  char v875;
  char v876;
  char v877;
  char v878;
  char v879;
  char v880;
  char v881;
  char v882;
  char v883;
  char v884;
  char v885;
  char v886;
  char v887;
  char v888;
  char v889;
  char v890;
  char v891;
  char v892;
  char v893;
  char v894;
  char v895;
  char v896;
  char v897;
  char v898;
  char v899;
  char v900;
  char v901;
  char v902;
  char v903;
  char v904;
  char v905;
  char v906;
  char v907;
  char v908;
  char v909;
  char v910;
  char v911;
  char v912;
  char v913;
  char v914;
  char v915;
  char v916;
  char v917;
  BOOL v918;
  char v919;
  char v920;
  char v921;
  char v922;
  char v923;
  char v924;
  char v925;
  char v926;
  char v927;
  char v928;
  char v929;
  char v930;
  char v931;
  char v932;
  char v933;
  char v934;
  char v935;
  char v936;
  char v937;
  char v938;
  char v939;
  char v940;
  char v941;
  char v942;
  char v943;
  char v944;
  char v945;
  char v946;
  char v947;
  char v948;
  char v949;
  char v950;
  char v951;
  char v952;
  BOOL v953;
  char v954;
  char v955;
  char v956;
  char v957;
  char v958;
  char v959;
  char v960;
  char v961;
  char v962;
  char v963;
  char v964;
  char v965;
  char v966;
  char v967;
  char v968;
  char v969;
  char v970;
  char v971;
  char v972;
  char v973;
  char v974;
  char v975;
  char v976;
  char v977;
  char v978;
  char v979;
  char v980;
  char v981;
  char v982;
  char v983;
  BOOL v984;
  BOOL v985;
  BOOL v986;
  BOOL v987;
  BOOL v988;
  BOOL v989;
  BOOL v990;
  BOOL v991;
  BOOL v992;
  BOOL v993;
  BOOL v994;
  BOOL v995;
  BOOL v996;
  BOOL v997;
  BOOL v998;
  BOOL v999;
  BOOL v1000;
  BOOL v1001;
  BOOL v1002;
  BOOL v1003;
  BOOL v1004;
  BOOL v1005;
  BOOL v1006;
  BOOL v1007;
  BOOL v1008;
  BOOL v1009;
  BOOL v1010;
  BOOL v1011;
  BOOL v1012;
  BOOL v1013;
  BOOL v1014;
  BOOL v1015;
  BOOL v1016;
  BOOL v1017;
  BOOL v1018;
  BOOL v1019;
  BOOL v1020;
  BOOL v1021;
  BOOL v1022;
  BOOL v1023;
  BOOL v1024;
  BOOL v1025;
  BOOL v1026;
  BOOL v1027;
  BOOL v1028;
  BOOL v1029;
  BOOL v1030;
  BOOL v1031;
  BOOL v1032;
  BOOL v1033;
  BOOL v1034;
  BOOL v1035;
  BOOL v1036;
  BOOL v1037;
  BOOL v1038;
  BOOL v1039;
  BOOL v1040;
  BOOL v1041;
  BOOL v1042;
  BOOL v1043;
  BOOL v1044;
  BOOL v1045;
  _QWORD v1046[3];
  const void *v1047[2];
  const void *v1048[2];
  uint64_t v1049;
  uint64_t v1050;

  v1049 = sub_216B4A11C(a3);
  v1050 = v9;
  if ((unint64_t)sub_216B1E67C((uint64_t)&v1049) >= 4)
  {
    sub_216B1E678((int)v1048, "__");
    if (sub_216B2A2EC((uint64_t)&v1049, v1048[0], (size_t)v1048[1]))
    {
      sub_216B1E678((int)v1047, "__");
      if (sub_216B4A164(&v1049, v1047[0], (size_t)v1047[1]))
      {
        v10 = sub_216B1E67C((uint64_t)&v1049);
        v1049 = sub_216B2864C(&v1049, 2uLL, v10 - 4);
        v1050 = v11;
      }
    }
  }
  switch(a1)
  {
    case 0:
      sub_216B32854(v1046, v1049, v1050);
      v12 = sub_216B34198(a4);
      v13 = 1;
      v14 = 1;
      if (v12 != 1)
        v14 = sub_216B34198(a4) == 22;
      v1045 = v14;
      v15 = sub_216B345E4((uint64_t)v1046, (uint64_t)"interrupt", (uint64_t)&v1045);
      v1044 = 1;
      v16 = sub_216B4A1B4(v15, (uint64_t)"acquire_capability", (uint64_t)&v1044);
      v1043 = 1;
      v17 = sub_216B4A1B4(v16, (uint64_t)"acquire_capability", (uint64_t)&v1043);
      v1042 = 1;
      v18 = sub_216B4A228(v17, (uint64_t)"acquire_shared_capability", (uint64_t)&v1042);
      v1041 = 1;
      v19 = sub_216B4A228(v18, (uint64_t)"acquire_shared_capability", (uint64_t)&v1041);
      v1040 = 1;
      v20 = sub_216B4A2A8(v19, "exclusive_lock_function", (uint64_t)&v1040);
      v1039 = 1;
      v21 = sub_216B4A31C(v20, (uint64_t)"shared_lock_function", (uint64_t)&v1039);
      v1038 = 1;
      v22 = sub_216B346C4(v21, "acquired_after", (uint64_t)&v1038);
      v1037 = 1;
      v23 = sub_216B4A390(v22, "acquired_before", (uint64_t)&v1037);
      v1036 = 1;
      v24 = sub_216B4A400(v23, "address_space", (uint64_t)&v1036);
      v1035 = 1;
      v25 = sub_216B32938(v24, (uint64_t)"alias", (uint64_t)&v1035);
      v1034 = 1;
      v26 = sub_216B32938(v25, (uint64_t)"alias", (uint64_t)&v1034);
      v1033 = 1;
      v27 = sub_216B32858(v26, "aligned", (uint64_t)&v1033);
      v1032 = 1;
      v28 = sub_216B32858(v27, "aligned", (uint64_t)&v1032);
      v1031 = 1;
      v29 = sub_216B32938(v28, (uint64_t)"align", (uint64_t)&v1031);
      v1030 = 1;
      v30 = sub_216B32858(v29, "alignas", (uint64_t)&v1030);
      v1029 = 1;
      v31 = sub_216B32AEC(v30, "_Alignas", (uint64_t)&v1029);
      v1028 = 1;
      v32 = sub_216B4A400(v31, "always_inline", (uint64_t)&v1028);
      v1027 = 1;
      v33 = sub_216B4A400(v32, "always_inline", (uint64_t)&v1027);
      v1026 = 1;
      v34 = sub_216B4A400(v33, "__forceinline", (uint64_t)&v1026);
      v1025 = 1;
      v35 = sub_216B4A470(v34, (uint64_t)"analyzer_noreturn", (uint64_t)&v1025);
      v1024 = 1;
      v36 = sub_216B32AEC(v35, "annotate", (uint64_t)&v1024);
      v1023 = 1;
      v37 = sub_216B4A4E4(v36, "objc_arc_weak_reference_unavailable", (uint64_t)&v1023);
      v1022 = 1;
      v38 = sub_216B4A54C(v37, "argument_with_type_tag", (uint64_t)&v1022);
      v1021 = 1;
      v39 = sub_216B4A5C0(v38, "pointer_with_type_tag", (uint64_t)&v1021);
      v1020 = 1;
      v40 = sub_216B329A8(v39, (unsigned __int16 *)"asm", (uint64_t)&v1020);
      v1019 = 1;
      v41 = sub_216B32858(v40, "__asm__", (uint64_t)&v1019);
      v1018 = 1;
      v42 = sub_216B4A470(v41, (uint64_t)"assert_capability", (uint64_t)&v1018);
      v1017 = 1;
      v43 = sub_216B4A470(v42, (uint64_t)"assert_capability", (uint64_t)&v1017);
      v1016 = 1;
      v44 = sub_216B4A634(v43, "assert_shared_capability", (uint64_t)&v1016);
      v1015 = 1;
      v45 = sub_216B4A634(v44, "assert_shared_capability", (uint64_t)&v1015);
      v1014 = 1;
      v46 = sub_216B4A5C0(v45, "assert_exclusive_lock", (uint64_t)&v1014);
      v1013 = 1;
      v47 = sub_216B4A1B4(v46, (uint64_t)"assert_shared_lock", (uint64_t)&v1013);
      v1012 = 1;
      v48 = sub_216B34654(v47, (uint64_t)"availability", (uint64_t)&v1012);
      v1011 = 1;
      v49 = sub_216B32A7C(v48, (uint64_t)"blocks", (uint64_t)&v1011);
      v1010 = 1;
      v50 = sub_216B32858(v49, "bounded", (uint64_t)&v1010);
      v1009 = 1;
      v51 = sub_216B345E4(v50, (uint64_t)"_Noreturn", (uint64_t)&v1009);
      v1008 = 1;
      v52 = sub_216B32938(v51, (uint64_t)"cdecl", (uint64_t)&v1008);
      v1007 = 1;
      v53 = sub_216B32938(v52, (uint64_t)"cdecl", (uint64_t)&v1007);
      v1006 = 1;
      v54 = sub_216B32858(v53, "__cdecl", (uint64_t)&v1006);
      v1005 = 1;
      v55 = sub_216B32A7C(v54, (uint64_t)"_cdecl", (uint64_t)&v1005);
      v1004 = 1;
      v56 = sub_216B4A6A8(v55, "cf_audited_transfer", (uint64_t)&v1004);
      v1003 = 1;
      v57 = sub_216B34334(v56, "cf_consumed", (uint64_t)&v1003);
      v1002 = 1;
      v58 = sub_216B4A2A8(v57, "cf_returns_not_retained", (uint64_t)&v1002);
      v1001 = 1;
      v59 = sub_216B4A6A8(v58, "cf_returns_retained", (uint64_t)&v1001);
      v1000 = 1;
      v60 = sub_216B4A6A8(v59, "cf_unknown_transfer", (uint64_t)&v1000);
      v999 = 1;
      v61 = sub_216B32AEC(v60, "constant", (uint64_t)&v999);
      v998 = 1;
      v62 = sub_216B32A7C(v61, (uint64_t)"device", (uint64_t)&v998);
      v997 = 1;
      v63 = sub_216B32A7C(v62, (uint64_t)"global", (uint64_t)&v997);
      v996 = 1;
      v64 = sub_216B32A18(v63, "host", (uint64_t)&v996);
      v995 = 1;
      v65 = sub_216B4A400(v64, "launch_bounds", (uint64_t)&v995);
      v994 = 1;
      v66 = sub_216B32A7C(v65, (uint64_t)"shared", (uint64_t)&v994);
      v993 = 1;
      v67 = sub_216B32AEC(v66, "noreturn", (uint64_t)&v993);
      v992 = 1;
      v68 = sub_216B4A400(v67, "callable_when", (uint64_t)&v992);
      v991 = 1;
      v69 = sub_216B328C8(v68, (uint64_t)"capability", (uint64_t)&v991);
      v990 = 1;
      v70 = sub_216B328C8(v69, (uint64_t)"capability", (uint64_t)&v990);
      v989 = 1;
      v71 = sub_216B4A470(v70, (uint64_t)"shared_capability", (uint64_t)&v989);
      v988 = 1;
      v72 = sub_216B4A470(v71, (uint64_t)"shared_capability", (uint64_t)&v988);
      v987 = 1;
      v73 = sub_216B4A1B4(v72, (uint64_t)"carries_dependency", (uint64_t)&v987);
      v986 = 1;
      v74 = sub_216B4A1B4(v73, (uint64_t)"carries_dependency", (uint64_t)&v986);
      v985 = 1;
      v75 = sub_216B32858(v74, "cleanup", (uint64_t)&v985);
      v984 = 1;
      v76 = sub_216B32858(v75, "cleanup", (uint64_t)&v984);
      v983 = 1;
      v77 = sub_216B32A18(v76, "cold", (uint64_t)&v983);
      v982 = 1;
      v78 = sub_216B32A18(v77, "cold", (uint64_t)&v982);
      v981 = 1;
      v79 = sub_216B32A7C(v78, (uint64_t)"common", (uint64_t)&v981);
      v980 = 1;
      v80 = sub_216B32A7C(v79, (uint64_t)"common", (uint64_t)&v980);
      v979 = 1;
      v81 = sub_216B32938(v80, (uint64_t)"const", (uint64_t)&v979);
      v978 = 1;
      v82 = sub_216B32938(v81, (uint64_t)"const", (uint64_t)&v978);
      v977 = 1;
      v83 = sub_216B32858(v82, "__const", (uint64_t)&v977);
      v976 = 1;
      v84 = sub_216B32858(v83, "__const", (uint64_t)&v976);
      v975 = 1;
      v85 = sub_216B34334(v84, "constructor", (uint64_t)&v975);
      v974 = 1;
      v86 = sub_216B34334(v85, "constructor", (uint64_t)&v974);
      v973 = 1;
      v87 = sub_216B328C8(v86, (uint64_t)"consumable", (uint64_t)&v973);
      v972 = 1;
      v88 = sub_216B4A71C(v87, (uint64_t)"consumable_auto_cast_state", (uint64_t)&v972);
      v971 = 1;
      v89 = sub_216B4A79C(v88, (uint64_t)"consumable_set_state_on_read", (uint64_t)&v971);
      v90 = (sub_216B34198(a4) == 24
          || sub_216B34198(a4) == 25
          || sub_216B34198(a4) == 1
          || sub_216B34198(a4) == 22)
         && sub_216B34190(a4) == 12;
      v970 = v90;
      v91 = sub_216B345E4(v89, (uint64_t)"dllexport", (uint64_t)&v970);
      v92 = (sub_216B34198(a4) == 24
          || sub_216B34198(a4) == 25
          || sub_216B34198(a4) == 1
          || sub_216B34198(a4) == 22)
         && sub_216B34190(a4) == 12;
      v969 = v92;
      v93 = sub_216B345E4(v91, (uint64_t)"dllexport", (uint64_t)&v969);
      v94 = (sub_216B34198(a4) == 24
          || sub_216B34198(a4) == 25
          || sub_216B34198(a4) == 1
          || sub_216B34198(a4) == 22)
         && sub_216B34190(a4) == 12;
      v968 = v94;
      v95 = sub_216B345E4(v93, (uint64_t)"dllexport", (uint64_t)&v968);
      v96 = (sub_216B34198(a4) == 24
          || sub_216B34198(a4) == 25
          || sub_216B34198(a4) == 1
          || sub_216B34198(a4) == 22)
         && sub_216B34190(a4) == 12;
      v967 = v96;
      v97 = sub_216B345E4(v95, (uint64_t)"dllimport", (uint64_t)&v967);
      v98 = (sub_216B34198(a4) == 24
          || sub_216B34198(a4) == 25
          || sub_216B34198(a4) == 1
          || sub_216B34198(a4) == 22)
         && sub_216B34190(a4) == 12;
      v966 = v98;
      v99 = sub_216B345E4(v97, (uint64_t)"dllimport", (uint64_t)&v966);
      v100 = (sub_216B34198(a4) == 24
           || sub_216B34198(a4) == 25
           || sub_216B34198(a4) == 1
           || sub_216B34198(a4) == 22)
          && sub_216B34190(a4) == 12;
      v965 = v100;
      v101 = sub_216B345E4(v99, (uint64_t)"dllimport", (uint64_t)&v965);
      v964 = 1;
      v102 = sub_216B328C8(v101, (uint64_t)"deprecated", (uint64_t)&v964);
      v963 = 1;
      v103 = sub_216B328C8(v102, (uint64_t)"deprecated", (uint64_t)&v963);
      v962 = 1;
      v104 = sub_216B328C8(v103, (uint64_t)"deprecated", (uint64_t)&v962);
      v961 = 1;
      v105 = sub_216B328C8(v104, (uint64_t)"deprecated", (uint64_t)&v961);
      v960 = 1;
      v106 = sub_216B328C8(v105, (uint64_t)"destructor", (uint64_t)&v960);
      v959 = 1;
      v107 = sub_216B328C8(v106, (uint64_t)"destructor", (uint64_t)&v959);
      v958 = 1;
      v108 = sub_216B345E4(v107, (uint64_t)"enable_if", (uint64_t)&v958);
      v957 = 1;
      v109 = sub_216B4A71C(v108, (uint64_t)"exclusive_trylock_function", (uint64_t)&v957);
      v956 = 1;
      v110 = sub_216B4A390(v109, "ext_vector_type", (uint64_t)&v956);
      v955 = 1;
      v111 = sub_216B34334(v110, "fallthrough", (uint64_t)&v955);
      v954 = 1;
      v112 = sub_216B32AEC(v111, "fastcall", (uint64_t)&v954);
      v953 = 1;
      v113 = sub_216B32AEC(v112, "fastcall", (uint64_t)&v953);
      v952 = 1;
      v114 = sub_216B328C8(v113, (uint64_t)"__fastcall", (uint64_t)&v952);
      v951 = 1;
      v115 = sub_216B345E4(v114, (uint64_t)"_fastcall", (uint64_t)&v951);
      v950 = 1;
      v116 = sub_216B32938(v115, (uint64_t)"final", (uint64_t)&v950);
      v949 = 1;
      v117 = sub_216B32A7C(v116, (uint64_t)"sealed", (uint64_t)&v949);
      v948 = 1;
      v118 = sub_216B32858(v117, "flatten", (uint64_t)&v948);
      v947 = 1;
      v119 = sub_216B32858(v118, "flatten", (uint64_t)&v947);
      v946 = 1;
      v120 = sub_216B32A7C(v119, (uint64_t)"format", (uint64_t)&v946);
      v945 = 1;
      v121 = sub_216B32A7C(v120, (uint64_t)"format", (uint64_t)&v945);
      v944 = 1;
      v122 = sub_216B328C8(v121, (uint64_t)"format_arg", (uint64_t)&v944);
      v943 = 1;
      v123 = sub_216B328C8(v122, (uint64_t)"format_arg", (uint64_t)&v943);
      v942 = 1;
      v124 = sub_216B328C8(v123, (uint64_t)"gnu_inline", (uint64_t)&v942);
      v941 = 1;
      v125 = sub_216B328C8(v124, (uint64_t)"gnu_inline", (uint64_t)&v941);
      v940 = 1;
      v126 = sub_216B328C8(v125, (uint64_t)"guarded_by", (uint64_t)&v940);
      v939 = 1;
      v127 = sub_216B34334(v126, "guarded_var", (uint64_t)&v939);
      v938 = 1;
      v128 = sub_216B329A8(v127, (unsigned __int16 *)"hot", (uint64_t)&v938);
      v937 = 1;
      v129 = sub_216B329A8(v128, (unsigned __int16 *)"hot", (uint64_t)&v937);
      v936 = 1;
      v130 = sub_216B32AEC(v129, "ibaction", (uint64_t)&v936);
      v935 = 1;
      v131 = sub_216B32AEC(v130, "iboutlet", (uint64_t)&v935);
      v934 = 1;
      v132 = sub_216B4A1B4(v131, (uint64_t)"iboutletcollection", (uint64_t)&v934);
      v933 = 1;
      v133 = sub_216B4A400(v132, "init_priority", (uint64_t)&v933);
      v932 = 1;
      v134 = sub_216B32AEC(v133, "init_seg", (uint64_t)&v932);
      v931 = 1;
      v135 = sub_216B346C4(v134, "intel_ocl_bicc", (uint64_t)&v931);
      v930 = 1;
      v136 = sub_216B4A400(v135, "lock_returned", (uint64_t)&v930);
      v929 = 1;
      v137 = sub_216B32AEC(v136, "lockable", (uint64_t)&v929);
      v928 = 1;
      v138 = sub_216B346C4(v137, "locks_excluded", (uint64_t)&v928);
      v927 = 1;
      v139 = sub_216B32A18(v138, "loop", (uint64_t)&v927);
      v926 = 1;
      v140 = sub_216B32A7C(v139, (uint64_t)"unroll", (uint64_t)&v926);
      v925 = 1;
      v141 = sub_216B32AEC(v140, "nounroll", (uint64_t)&v925);
      v924 = 1;
      v142 = sub_216B32A7C(v141, (uint64_t)"ms_abi", (uint64_t)&v924);
      v923 = 1;
      v143 = sub_216B32A7C(v142, (uint64_t)"ms_abi", (uint64_t)&v923);
      v922 = 1;
      v144 = sub_216B4A31C(v143, (uint64_t)"__single_inheritance", (uint64_t)&v922);
      v921 = 1;
      v145 = sub_216B4A54C(v144, "__multiple_inheritance", (uint64_t)&v921);
      v920 = 1;
      v146 = sub_216B4A5C0(v145, "__virtual_inheritance", (uint64_t)&v920);
      v919 = 1;
      v147 = sub_216B4A228(v146, (uint64_t)"__unspecified_inheritance", (uint64_t)&v919);
      v918 = sub_216B34198(a4) == 10;
      v148 = sub_216B345E4(v147, (uint64_t)"interrupt", (uint64_t)&v918);
      v917 = 1;
      v149 = sub_216B32A7C(v148, (uint64_t)"malloc", (uint64_t)&v917);
      v916 = 1;
      v150 = sub_216B32A7C(v149, (uint64_t)"malloc", (uint64_t)&v916);
      v915 = 1;
      v151 = sub_216B345E4(v150, (uint64_t)"may_alias", (uint64_t)&v915);
      v914 = 1;
      v152 = sub_216B345E4(v151, (uint64_t)"may_alias", (uint64_t)&v914);
      v913 = 1;
      v153 = sub_216B32858(v152, "minsize", (uint64_t)&v913);
      if (sub_216B34198(a4) != 6)
        v13 = sub_216B34198(a4) == 7;
      v912 = v13;
      v154 = sub_216B32A7C(v153, (uint64_t)"mips16", (uint64_t)&v912);
      v155 = sub_216B34198(a4);
      v156 = 1;
      v157 = 1;
      if (v155 != 6)
        v157 = sub_216B34198(a4) == 7;
      v911 = v157;
      v158 = sub_216B32A7C(v154, (uint64_t)"mips16", (uint64_t)&v911);
      v910 = 1;
      v159 = sub_216B32A18(v158, "mode", (uint64_t)&v910);
      v909 = 1;
      v160 = sub_216B32A18(v159, "mode", (uint64_t)&v909);
      v908 = 1;
      v161 = sub_216B32AEC(v160, "property", (uint64_t)&v908);
      v907 = 1;
      v162 = sub_216B345E4(v161, (uint64_t)"ms_struct", (uint64_t)&v907);
      v906 = 1;
      v163 = sub_216B345E4(v162, (uint64_t)"ms_struct", (uint64_t)&v906);
      v905 = 1;
      v164 = sub_216B34334(v163, "ns_consumed", (uint64_t)&v905);
      v904 = 1;
      v165 = sub_216B4A81C(v164, "ns_consumes_self", (uint64_t)&v904);
      v903 = 1;
      v166 = sub_216B4A2A8(v165, "ns_returns_autoreleased", (uint64_t)&v903);
      v902 = 1;
      v167 = sub_216B4A2A8(v166, "ns_returns_not_retained", (uint64_t)&v902);
      v901 = 1;
      v168 = sub_216B4A6A8(v167, "ns_returns_retained", (uint64_t)&v901);
      v900 = 1;
      v169 = sub_216B32938(v168, (uint64_t)"naked", (uint64_t)&v900);
      v899 = 1;
      v170 = sub_216B32938(v169, (uint64_t)"naked", (uint64_t)&v899);
      v898 = 1;
      v171 = sub_216B32938(v170, (uint64_t)"naked", (uint64_t)&v898);
      v897 = 1;
      v172 = sub_216B4A31C(v171, (uint64_t)"neon_polyvector_type", (uint64_t)&v897);
      v896 = 1;
      v173 = sub_216B4A81C(v172, "neon_vector_type", (uint64_t)&v896);
      v895 = 1;
      v174 = sub_216B32AEC(v173, "nocommon", (uint64_t)&v895);
      v894 = 1;
      v175 = sub_216B32AEC(v174, "nocommon", (uint64_t)&v894);
      v893 = 1;
      v176 = sub_216B32858(v175, "nodebug", (uint64_t)&v893);
      v892 = 1;
      v177 = sub_216B34334(v176, "noduplicate", (uint64_t)&v892);
      v891 = 1;
      v178 = sub_216B34334(v177, "noduplicate", (uint64_t)&v891);
      v890 = 1;
      v179 = sub_216B32AEC(v178, "noescape", (uint64_t)&v890);
      v889 = 1;
      v180 = sub_216B32AEC(v179, "noescape", (uint64_t)&v889);
      v888 = 1;
      v181 = sub_216B32AEC(v180, "noinline", (uint64_t)&v888);
      v887 = 1;
      v182 = sub_216B32AEC(v181, "noinline", (uint64_t)&v887);
      v886 = 1;
      v183 = sub_216B32AEC(v182, "noinline", (uint64_t)&v886);
      v885 = 1;
      v184 = sub_216B4A54C(v183, "no_instrument_function", (uint64_t)&v885);
      v884 = 1;
      v185 = sub_216B4A54C(v184, "no_instrument_function", (uint64_t)&v884);
      if (sub_216B34198(a4) != 6)
        v156 = sub_216B34198(a4) == 7;
      v883 = v156;
      v186 = sub_216B32AEC(v185, "nomips16", (uint64_t)&v883);
      v187 = sub_216B34198(a4);
      v188 = 1;
      if (v187 != 6)
        v188 = sub_216B34198(a4) == 7;
      v882 = v188;
      v189 = sub_216B32AEC(v186, "nomips16", (uint64_t)&v882);
      v881 = 1;
      v190 = sub_216B32AEC(v189, "noreturn", (uint64_t)&v881);
      v880 = 1;
      v191 = sub_216B32AEC(v190, "noreturn", (uint64_t)&v880);
      v879 = 1;
      v192 = sub_216B32AEC(v191, "noreturn", (uint64_t)&v879);
      v878 = 1;
      v193 = sub_216B4A71C(v192, (uint64_t)"no_address_safety_analysis", (uint64_t)&v878);
      v877 = 1;
      v194 = sub_216B4A71C(v193, (uint64_t)"no_address_safety_analysis", (uint64_t)&v877);
      v876 = 1;
      v195 = sub_216B4A6A8(v194, "no_sanitize_address", (uint64_t)&v876);
      v875 = 1;
      v196 = sub_216B4A6A8(v195, "no_sanitize_address", (uint64_t)&v875);
      v874 = 1;
      v197 = sub_216B4A1B4(v196, (uint64_t)"no_sanitize_memory", (uint64_t)&v874);
      v873 = 1;
      v198 = sub_216B4A1B4(v197, (uint64_t)"no_sanitize_thread", (uint64_t)&v873);
      v872 = 1;
      v199 = sub_216B346C4(v198, "no_split_stack", (uint64_t)&v872);
      v871 = 1;
      v200 = sub_216B346C4(v199, "no_split_stack", (uint64_t)&v871);
      v870 = 1;
      v201 = sub_216B4A228(v200, (uint64_t)"no_thread_safety_analysis", (uint64_t)&v870);
      v869 = 1;
      v202 = sub_216B32858(v201, "nothrow", (uint64_t)&v869);
      v868 = 1;
      v203 = sub_216B32858(v202, "nothrow", (uint64_t)&v868);
      v867 = 1;
      v204 = sub_216B32858(v203, "nothrow", (uint64_t)&v867);
      v866 = 1;
      v205 = sub_216B32858(v204, "nonnull", (uint64_t)&v866);
      v865 = 1;
      v206 = sub_216B32858(v205, "nonnull", (uint64_t)&v865);
      v864 = 1;
      v207 = sub_216B34334(v206, "objc_bridge", (uint64_t)&v864);
      v863 = 1;
      v208 = sub_216B4A6A8(v207, "objc_bridge_mutable", (uint64_t)&v863);
      v862 = 1;
      v209 = sub_216B4A6A8(v208, "objc_bridge_related", (uint64_t)&v862);
      v861 = 1;
      v210 = sub_216B4A634(v209, "objc_complete_definition", (uint64_t)&v861);
      v860 = 1;
      v211 = sub_216B4A884(v210, "objc_designated_initializer", (uint64_t)&v860);
      v859 = 1;
      v212 = sub_216B346C4(v211, "objc_exception", (uint64_t)&v859);
      v858 = 1;
      v213 = sub_216B4A904(v212, "objc_protocol_requires_explicit_implementation", (uint64_t)&v858);
      v857 = 1;
      v214 = sub_216B32858(v213, "objc_gc", (uint64_t)&v857);
      v856 = 1;
      v215 = sub_216B4A1B4(v214, (uint64_t)"objc_method_family", (uint64_t)&v856);
      v855 = 1;
      v216 = sub_216B32AEC(v215, "NSObject", (uint64_t)&v855);
      v854 = 1;
      v217 = sub_216B346C4(v216, "objc_ownership", (uint64_t)&v854);
      v853 = 1;
      v218 = sub_216B4A5C0(v217, "objc_precise_lifetime", (uint64_t)&v853);
      v852 = 1;
      v219 = sub_216B4A96C(v218, "objc_requires_property_definitions", (uint64_t)&v852);
      v851 = 1;
      v220 = sub_216B4A6A8(v219, "objc_requires_super", (uint64_t)&v851);
      v850 = 1;
      v221 = sub_216B4A71C(v220, (uint64_t)"objc_returns_inner_pointer", (uint64_t)&v850);
      v849 = 1;
      v222 = sub_216B4A390(v221, "objc_root_class", (uint64_t)&v849);
      v848 = 1;
      v223 = sub_216B4A470(v222, (uint64_t)"objc_runtime_name", (uint64_t)&v848);
      v847 = 1;
      v224 = sub_216B4A884(v223, "objc_subclassing_restricted", (uint64_t)&v847);
      v846 = 1;
      v225 = sub_216B328C8(v224, (uint64_t)"__constant", (uint64_t)&v846);
      v845 = 1;
      v226 = sub_216B32AEC(v225, "constant", (uint64_t)&v845);
      v844 = 1;
      v227 = sub_216B32AEC(v226, "__global", (uint64_t)&v844);
      v843 = 1;
      v228 = sub_216B32A7C(v227, (uint64_t)"global", (uint64_t)&v843);
      v842 = 1;
      v229 = sub_216B34334(v228, "__read_only", (uint64_t)&v842);
      v841 = 1;
      v230 = sub_216B345E4(v229, (uint64_t)"read_only", (uint64_t)&v841);
      v840 = 1;
      v231 = sub_216B34654(v230, (uint64_t)"__write_only", (uint64_t)&v840);
      v839 = 1;
      v232 = sub_216B328C8(v231, (uint64_t)"write_only", (uint64_t)&v839);
      v838 = 1;
      v233 = sub_216B34654(v232, (uint64_t)"__read_write", (uint64_t)&v838);
      v837 = 1;
      v234 = sub_216B328C8(v233, (uint64_t)"read_write", (uint64_t)&v837);
      v836 = 1;
      v235 = sub_216B32AEC(v234, "__kernel", (uint64_t)&v836);
      v835 = 1;
      v236 = sub_216B32A7C(v235, (uint64_t)"kernel", (uint64_t)&v835);
      v834 = 1;
      v237 = sub_216B32858(v236, "__local", (uint64_t)&v834);
      v833 = 1;
      v238 = sub_216B32938(v237, (uint64_t)"local", (uint64_t)&v833);
      v832 = 1;
      v239 = sub_216B345E4(v238, (uint64_t)"__private", (uint64_t)&v832);
      v831 = 1;
      v240 = sub_216B32858(v239, "private", (uint64_t)&v831);
      v830 = 1;
      v241 = sub_216B32858(v240, "optnone", (uint64_t)&v830);
      v829 = 1;
      v242 = sub_216B32858(v241, "optnone", (uint64_t)&v829);
      v828 = 1;
      v243 = sub_216B34654(v242, (uint64_t)"overloadable", (uint64_t)&v828);
      v827 = 1;
      v244 = sub_216B32AEC(v243, "override", (uint64_t)&v827);
      v826 = 1;
      v245 = sub_216B4A390(v244, "ownership_holds", (uint64_t)&v826);
      v825 = 1;
      v246 = sub_216B4A470(v245, (uint64_t)"ownership_returns", (uint64_t)&v825);
      v824 = 1;
      v247 = sub_216B4A390(v246, "ownership_takes", (uint64_t)&v824);
      v823 = 1;
      v248 = sub_216B32A7C(v247, (uint64_t)"packed", (uint64_t)&v823);
      v822 = 1;
      v249 = sub_216B32A7C(v248, (uint64_t)"packed", (uint64_t)&v822);
      v821 = 1;
      v250 = sub_216B4A390(v249, "param_typestate", (uint64_t)&v821);
      v820 = 1;
      v251 = sub_216B32A7C(v250, (uint64_t)"pascal", (uint64_t)&v820);
      v819 = 1;
      v252 = sub_216B32AEC(v251, "__pascal", (uint64_t)&v819);
      v818 = 1;
      v253 = sub_216B32858(v252, "_pascal", (uint64_t)&v818);
      v817 = 1;
      v254 = sub_216B329A8(v253, (unsigned __int16 *)"pcs", (uint64_t)&v817);
      v816 = 1;
      v255 = sub_216B329A8(v254, (unsigned __int16 *)"pcs", (uint64_t)&v816);
      v815 = 1;
      v256 = sub_216B345E4(v255, (uint64_t)"pnaclcall", (uint64_t)&v815);
      v814 = 1;
      v257 = sub_216B4A400(v256, "pt_guarded_by", (uint64_t)&v814);
      v813 = 1;
      v258 = sub_216B346C4(v257, "pt_guarded_var", (uint64_t)&v813);
      v812 = 1;
      v259 = sub_216B32858(v258, "__ptr32", (uint64_t)&v812);
      v811 = 1;
      v260 = sub_216B32858(v259, "__ptr64", (uint64_t)&v811);
      v810 = 1;
      v261 = sub_216B32A18(v260, "pure", (uint64_t)&v810);
      v809 = 1;
      v262 = sub_216B32A18(v261, "pure", (uint64_t)&v809);
      v808 = 1;
      v263 = sub_216B32858(v262, "regparm", (uint64_t)&v808);
      v807 = 1;
      v264 = sub_216B32858(v263, "regparm", (uint64_t)&v807);
      v806 = 1;
      v265 = sub_216B4A1B4(v264, (uint64_t)"release_capability", (uint64_t)&v806);
      v805 = 1;
      v266 = sub_216B4A1B4(v265, (uint64_t)"release_capability", (uint64_t)&v805);
      v804 = 1;
      v267 = sub_216B4A228(v266, (uint64_t)"release_shared_capability", (uint64_t)&v804);
      v803 = 1;
      v268 = sub_216B4A228(v267, (uint64_t)"release_shared_capability", (uint64_t)&v803);
      v802 = 1;
      v269 = sub_216B4A71C(v268, (uint64_t)"release_generic_capability", (uint64_t)&v802);
      v801 = 1;
      v270 = sub_216B4A71C(v269, (uint64_t)"release_generic_capability", (uint64_t)&v801);
      v800 = 1;
      v271 = sub_216B4A390(v270, "unlock_function", (uint64_t)&v800);
      v799 = 1;
      v272 = sub_216B4A31C(v271, (uint64_t)"reqd_work_group_size", (uint64_t)&v799);
      v798 = 1;
      v273 = sub_216B4A6A8(v272, "requires_capability", (uint64_t)&v798);
      v797 = 1;
      v274 = sub_216B4A6A8(v273, "requires_capability", (uint64_t)&v797);
      v796 = 1;
      v275 = sub_216B4A634(v274, "exclusive_locks_required", (uint64_t)&v796);
      v795 = 1;
      v276 = sub_216B4A71C(v275, (uint64_t)"requires_shared_capability", (uint64_t)&v795);
      v794 = 1;
      v277 = sub_216B4A71C(v276, (uint64_t)"requires_shared_capability", (uint64_t)&v794);
      v793 = 1;
      v278 = sub_216B4A5C0(v277, "shared_locks_required", (uint64_t)&v793);
      v792 = 1;
      v279 = sub_216B4A81C(v278, "return_typestate", (uint64_t)&v792);
      v791 = 1;
      v280 = sub_216B4A390(v279, "returns_nonnull", (uint64_t)&v791);
      v790 = 1;
      v281 = sub_216B4A390(v280, "returns_nonnull", (uint64_t)&v790);
      v789 = 1;
      v282 = sub_216B4A400(v281, "returns_twice", (uint64_t)&v789);
      v788 = 1;
      v283 = sub_216B4A400(v282, "returns_twice", (uint64_t)&v788);
      v787 = 1;
      v284 = sub_216B32A7C(v283, (uint64_t)"__sptr", (uint64_t)&v787);
      v786 = 1;
      v285 = sub_216B4A390(v284, "scoped_lockable", (uint64_t)&v786);
      v785 = 1;
      v286 = sub_216B32858(v285, "section", (uint64_t)&v785);
      v784 = 1;
      v287 = sub_216B32858(v286, "section", (uint64_t)&v784);
      v783 = 1;
      v288 = sub_216B32AEC(v287, "allocate", (uint64_t)&v783);
      v782 = 1;
      v289 = sub_216B345E4(v288, (uint64_t)"selectany", (uint64_t)&v782);
      v781 = 1;
      v290 = sub_216B32AEC(v289, "sentinel", (uint64_t)&v781);
      v780 = 1;
      v291 = sub_216B32AEC(v290, "sentinel", (uint64_t)&v780);
      v779 = 1;
      v292 = sub_216B4A400(v291, "set_typestate", (uint64_t)&v779);
      v778 = 1;
      v293 = sub_216B4A2A8(v292, "shared_trylock_function", (uint64_t)&v778);
      v777 = 1;
      v294 = sub_216B32858(v293, "stdcall", (uint64_t)&v777);
      v776 = 1;
      v295 = sub_216B32858(v294, "stdcall", (uint64_t)&v776);
      v775 = 1;
      v296 = sub_216B345E4(v295, (uint64_t)"__stdcall", (uint64_t)&v775);
      v774 = 1;
      v297 = sub_216B32AEC(v296, "_stdcall", (uint64_t)&v774);
      v773 = 1;
      v298 = sub_216B32AEC(v297, "sysv_abi", (uint64_t)&v773);
      v772 = 1;
      v299 = sub_216B32AEC(v298, "sysv_abi", (uint64_t)&v772);
      v771 = 1;
      v300 = sub_216B345E4(v299, (uint64_t)"tls_model", (uint64_t)&v771);
      v770 = 1;
      v301 = sub_216B345E4(v300, (uint64_t)"tls_model", (uint64_t)&v770);
      v769 = 1;
      v302 = sub_216B346C4(v301, "test_typestate", (uint64_t)&v769);
      v768 = 1;
      v303 = sub_216B32AEC(v302, "thiscall", (uint64_t)&v768);
      v767 = 1;
      v304 = sub_216B32AEC(v303, "thiscall", (uint64_t)&v767);
      v766 = 1;
      v305 = sub_216B328C8(v304, (uint64_t)"__thiscall", (uint64_t)&v766);
      v765 = 1;
      v306 = sub_216B345E4(v305, (uint64_t)"_thiscall", (uint64_t)&v765);
      v764 = 1;
      v307 = sub_216B32A7C(v306, (uint64_t)"thread", (uint64_t)&v764);
      v763 = 1;
      v308 = sub_216B4A470(v307, (uint64_t)"transparent_union", (uint64_t)&v763);
      v762 = 1;
      v309 = sub_216B4A470(v308, (uint64_t)"transparent_union", (uint64_t)&v762);
      v761 = 1;
      v310 = sub_216B4A54C(v309, "try_acquire_capability", (uint64_t)&v761);
      v760 = 1;
      v311 = sub_216B4A54C(v310, "try_acquire_capability", (uint64_t)&v760);
      v759 = 1;
      v312 = sub_216B4A9D4(v311, "try_acquire_shared_capability", (uint64_t)&v759);
      v758 = 1;
      v313 = sub_216B4A9D4(v312, "try_acquire_shared_capability", (uint64_t)&v758);
      v757 = 1;
      v314 = sub_216B345E4(v313, (uint64_t)"__nonnull", (uint64_t)&v757);
      v756 = 1;
      v315 = sub_216B4A1B4(v314, (uint64_t)"__null_unspecified", (uint64_t)&v756);
      v755 = 1;
      v316 = sub_216B328C8(v315, (uint64_t)"__nullable", (uint64_t)&v755);
      v754 = 1;
      v317 = sub_216B4A5C0(v316, "type_tag_for_datatype", (uint64_t)&v754);
      v753 = 1;
      v318 = sub_216B4A390(v317, "type_visibility", (uint64_t)&v753);
      v752 = 1;
      v319 = sub_216B4A390(v318, "type_visibility", (uint64_t)&v752);
      v751 = 1;
      v320 = sub_216B32A7C(v319, (uint64_t)"__uptr", (uint64_t)&v751);
      v750 = 1;
      v321 = sub_216B34334(v320, "__unaligned", (uint64_t)&v750);
      v749 = 1;
      v322 = sub_216B34334(v321, "unavailable", (uint64_t)&v749);
      v748 = 1;
      v323 = sub_216B32A7C(v322, (uint64_t)"unused", (uint64_t)&v748);
      v747 = 1;
      v324 = sub_216B32A7C(v323, (uint64_t)"unused", (uint64_t)&v747);
      v746 = 1;
      v325 = sub_216B32A18(v324, "used", (uint64_t)&v746);
      v745 = 1;
      v326 = sub_216B32A18(v325, "used", (uint64_t)&v745);
      v744 = 1;
      v327 = sub_216B32A18(v326, "uuid", (uint64_t)&v744);
      v743 = 1;
      v328 = sub_216B345E4(v327, (uint64_t)"vecreturn", (uint64_t)&v743);
      v742 = 1;
      v329 = sub_216B4A400(v328, "vec_type_hint", (uint64_t)&v742);
      v741 = 1;
      v330 = sub_216B34334(v329, "vector_size", (uint64_t)&v741);
      v740 = 1;
      v331 = sub_216B34334(v330, "vector_size", (uint64_t)&v740);
      v739 = 1;
      v332 = sub_216B328C8(v331, (uint64_t)"visibility", (uint64_t)&v739);
      v738 = 1;
      v333 = sub_216B328C8(v332, (uint64_t)"visibility", (uint64_t)&v738);
      v737 = 1;
      v334 = sub_216B34334(v333, "warn_unused", (uint64_t)&v737);
      v736 = 1;
      v335 = sub_216B4A1B4(v334, (uint64_t)"warn_unused_result", (uint64_t)&v736);
      v735 = 1;
      v336 = sub_216B4A1B4(v335, (uint64_t)"warn_unused_result", (uint64_t)&v735);
      v734 = 1;
      v337 = sub_216B4A1B4(v336, (uint64_t)"warn_unused_result", (uint64_t)&v734);
      v733 = 1;
      v338 = sub_216B32A18(v337, "weak", (uint64_t)&v733);
      v732 = 1;
      v339 = sub_216B32A18(v338, "weak", (uint64_t)&v732);
      v731 = 1;
      v340 = sub_216B34334(v339, "weak_import", (uint64_t)&v731);
      v730 = 1;
      v341 = sub_216B32858(v340, "weakref", (uint64_t)&v730);
      v729 = 1;
      v342 = sub_216B32858(v341, "weakref", (uint64_t)&v729);
      v728 = 1;
      v343 = sub_216B32938(v342, (uint64_t)"__w64", (uint64_t)&v728);
      v727 = 1;
      v344 = sub_216B4A31C(v343, (uint64_t)"work_group_size_hint", (uint64_t)&v727);
      v726 = sub_216B34198(a4) == 24;
      v345 = sub_216B4A2A8(v344, "force_align_arg_pointer", (uint64_t)&v726);
      v725 = 0;
      v346 = (BOOL *)&v725;
      return sub_216B4AA54(v345, (unsigned __int8 *)v346);
    case 1:
      sub_216B32854(v1046, v1049, v1050);
      v348 = sub_216B34198(a4);
      v349 = 1;
      if (v348 != 1)
        v349 = sub_216B34198(a4) == 22;
      v1045 = v349;
      v350 = sub_216B345E4((uint64_t)v1046, (uint64_t)"interrupt", (uint64_t)&v1045);
      v1044 = 1;
      v351 = sub_216B4A1B4(v350, (uint64_t)"acquire_capability", (uint64_t)&v1044);
      v1043 = 1;
      v352 = sub_216B4A228(v351, (uint64_t)"acquire_shared_capability", (uint64_t)&v1043);
      v1042 = 1;
      v353 = sub_216B4A2A8(v352, "exclusive_lock_function", (uint64_t)&v1042);
      v1041 = 1;
      v354 = sub_216B4A31C(v353, (uint64_t)"shared_lock_function", (uint64_t)&v1041);
      v1040 = 1;
      v355 = sub_216B4A1B4(v354, (uint64_t)"acquire_capability", (uint64_t)&v1040);
      v1039 = 1;
      v356 = sub_216B4A228(v355, (uint64_t)"acquire_shared_capability", (uint64_t)&v1039);
      v1038 = 1;
      v357 = sub_216B4A2A8(v356, "exclusive_lock_function", (uint64_t)&v1038);
      v1037 = 1;
      v358 = sub_216B4A31C(v357, (uint64_t)"shared_lock_function", (uint64_t)&v1037);
      v1036 = 1;
      v359 = sub_216B4A1B4(v358, (uint64_t)"acquire_capability", (uint64_t)&v1036);
      v1035 = 1;
      v360 = sub_216B4A228(v359, (uint64_t)"acquire_shared_capability", (uint64_t)&v1035);
      v1034 = 1;
      v361 = sub_216B4A2A8(v360, "exclusive_lock_function", (uint64_t)&v1034);
      v1033 = 1;
      v362 = sub_216B4A31C(v361, (uint64_t)"shared_lock_function", (uint64_t)&v1033);
      v1032 = 1;
      v363 = sub_216B4A1B4(v362, (uint64_t)"acquire_capability", (uint64_t)&v1032);
      v1031 = 1;
      v364 = sub_216B4A228(v363, (uint64_t)"acquire_shared_capability", (uint64_t)&v1031);
      v1030 = 1;
      v365 = sub_216B4A2A8(v364, "exclusive_lock_function", (uint64_t)&v1030);
      v1029 = 1;
      v366 = sub_216B4A31C(v365, (uint64_t)"shared_lock_function", (uint64_t)&v1029);
      v1028 = 1;
      v367 = sub_216B346C4(v366, "acquired_after", (uint64_t)&v1028);
      v1027 = 1;
      v368 = sub_216B4A390(v367, "acquired_before", (uint64_t)&v1027);
      v1026 = 1;
      v369 = sub_216B4A400(v368, "address_space", (uint64_t)&v1026);
      v1025 = 1;
      v370 = sub_216B32938(v369, (uint64_t)"alias", (uint64_t)&v1025);
      v1024 = 1;
      v371 = sub_216B32858(v370, "aligned", (uint64_t)&v1024);
      v1023 = 1;
      v372 = sub_216B4A400(v371, "always_inline", (uint64_t)&v1023);
      v1022 = 1;
      v373 = sub_216B4A470(v372, (uint64_t)"analyzer_noreturn", (uint64_t)&v1022);
      v1021 = 1;
      v374 = sub_216B32AEC(v373, "annotate", (uint64_t)&v1021);
      v1020 = 1;
      v375 = sub_216B4A4E4(v374, "objc_arc_weak_reference_unavailable", (uint64_t)&v1020);
      v1019 = 1;
      v376 = sub_216B4A54C(v375, "argument_with_type_tag", (uint64_t)&v1019);
      v1018 = 1;
      v377 = sub_216B4A5C0(v376, "pointer_with_type_tag", (uint64_t)&v1018);
      v1017 = 1;
      v378 = sub_216B4A54C(v377, "argument_with_type_tag", (uint64_t)&v1017);
      v1016 = 1;
      v379 = sub_216B4A5C0(v378, "pointer_with_type_tag", (uint64_t)&v1016);
      v1015 = 1;
      v380 = sub_216B4A470(v379, (uint64_t)"assert_capability", (uint64_t)&v1015);
      v1014 = 1;
      v381 = sub_216B4A634(v380, "assert_shared_capability", (uint64_t)&v1014);
      v1013 = 1;
      v382 = sub_216B4A470(v381, (uint64_t)"assert_capability", (uint64_t)&v1013);
      v1012 = 1;
      v383 = sub_216B4A634(v382, "assert_shared_capability", (uint64_t)&v1012);
      v1011 = 1;
      v384 = sub_216B4A5C0(v383, "assert_exclusive_lock", (uint64_t)&v1011);
      v1010 = 1;
      v385 = sub_216B4A1B4(v384, (uint64_t)"assert_shared_lock", (uint64_t)&v1010);
      v1009 = 1;
      v386 = sub_216B34654(v385, (uint64_t)"availability", (uint64_t)&v1009);
      v1008 = 1;
      v387 = sub_216B32A7C(v386, (uint64_t)"blocks", (uint64_t)&v1008);
      v1007 = 1;
      v388 = sub_216B32858(v387, "bounded", (uint64_t)&v1007);
      v1006 = 1;
      v389 = sub_216B32938(v388, (uint64_t)"cdecl", (uint64_t)&v1006);
      v1005 = 1;
      v390 = sub_216B4A6A8(v389, "cf_audited_transfer", (uint64_t)&v1005);
      v1004 = 1;
      v391 = sub_216B34334(v390, "cf_consumed", (uint64_t)&v1004);
      v1003 = 1;
      v392 = sub_216B4A2A8(v391, "cf_returns_not_retained", (uint64_t)&v1003);
      v1002 = 1;
      v393 = sub_216B4A6A8(v392, "cf_returns_retained", (uint64_t)&v1002);
      v1001 = 1;
      v394 = sub_216B4A6A8(v393, "cf_unknown_transfer", (uint64_t)&v1001);
      v1000 = 1;
      v395 = sub_216B32AEC(v394, "constant", (uint64_t)&v1000);
      v999 = 1;
      v396 = sub_216B32A7C(v395, (uint64_t)"device", (uint64_t)&v999);
      v998 = 1;
      v397 = sub_216B32A7C(v396, (uint64_t)"global", (uint64_t)&v998);
      v997 = 1;
      v398 = sub_216B32A18(v397, "host", (uint64_t)&v997);
      v996 = 1;
      v399 = sub_216B4A400(v398, "launch_bounds", (uint64_t)&v996);
      v995 = 1;
      v400 = sub_216B32A7C(v399, (uint64_t)"shared", (uint64_t)&v995);
      v994 = 1;
      v401 = sub_216B4A400(v400, "callable_when", (uint64_t)&v994);
      v993 = 1;
      v402 = sub_216B328C8(v401, (uint64_t)"capability", (uint64_t)&v993);
      v992 = 1;
      v403 = sub_216B4A470(v402, (uint64_t)"shared_capability", (uint64_t)&v992);
      v991 = 1;
      v404 = sub_216B328C8(v403, (uint64_t)"capability", (uint64_t)&v991);
      v990 = 1;
      v405 = sub_216B4A470(v404, (uint64_t)"shared_capability", (uint64_t)&v990);
      v989 = 1;
      v406 = sub_216B4A1B4(v405, (uint64_t)"carries_dependency", (uint64_t)&v989);
      v988 = 1;
      v407 = sub_216B32858(v406, "cleanup", (uint64_t)&v988);
      v987 = 1;
      v408 = sub_216B32A18(v407, "cold", (uint64_t)&v987);
      v986 = 1;
      v409 = sub_216B32A7C(v408, (uint64_t)"common", (uint64_t)&v986);
      v985 = 1;
      v410 = sub_216B32938(v409, (uint64_t)"const", (uint64_t)&v985);
      v984 = 1;
      v411 = sub_216B32858(v410, "__const", (uint64_t)&v984);
      v983 = 1;
      v412 = sub_216B32938(v411, (uint64_t)"const", (uint64_t)&v983);
      v982 = 1;
      v413 = sub_216B32858(v412, "__const", (uint64_t)&v982);
      v981 = 1;
      v414 = sub_216B34334(v413, "constructor", (uint64_t)&v981);
      v980 = 1;
      v415 = sub_216B328C8(v414, (uint64_t)"consumable", (uint64_t)&v980);
      v979 = 1;
      v416 = sub_216B4A71C(v415, (uint64_t)"consumable_auto_cast_state", (uint64_t)&v979);
      v978 = 1;
      v417 = sub_216B4A79C(v416, (uint64_t)"consumable_set_state_on_read", (uint64_t)&v978);
      v418 = (sub_216B34198(a4) == 24
           || sub_216B34198(a4) == 25
           || sub_216B34198(a4) == 1
           || sub_216B34198(a4) == 22)
          && sub_216B34190(a4) == 12;
      v977 = v418;
      v419 = sub_216B345E4(v417, (uint64_t)"dllexport", (uint64_t)&v977);
      v420 = (sub_216B34198(a4) == 24
           || sub_216B34198(a4) == 25
           || sub_216B34198(a4) == 1
           || sub_216B34198(a4) == 22)
          && sub_216B34190(a4) == 12;
      v976 = v420;
      v421 = sub_216B345E4(v419, (uint64_t)"dllimport", (uint64_t)&v976);
      v422 = 1;
      v975 = 1;
      v423 = sub_216B328C8(v421, (uint64_t)"deprecated", (uint64_t)&v975);
      v974 = 1;
      v424 = sub_216B328C8(v423, (uint64_t)"destructor", (uint64_t)&v974);
      v973 = 1;
      v425 = sub_216B345E4(v424, (uint64_t)"enable_if", (uint64_t)&v973);
      v972 = 1;
      v426 = sub_216B4A71C(v425, (uint64_t)"exclusive_trylock_function", (uint64_t)&v972);
      v971 = 1;
      v427 = sub_216B4A390(v426, "ext_vector_type", (uint64_t)&v971);
      v970 = 1;
      v428 = sub_216B32AEC(v427, "fastcall", (uint64_t)&v970);
      v969 = 1;
      v429 = sub_216B32858(v428, "flatten", (uint64_t)&v969);
      v968 = 1;
      v430 = sub_216B32A7C(v429, (uint64_t)"format", (uint64_t)&v968);
      v967 = 1;
      v431 = sub_216B328C8(v430, (uint64_t)"format_arg", (uint64_t)&v967);
      v966 = 1;
      v432 = sub_216B328C8(v431, (uint64_t)"gnu_inline", (uint64_t)&v966);
      v965 = 1;
      v433 = sub_216B328C8(v432, (uint64_t)"guarded_by", (uint64_t)&v965);
      v964 = 1;
      v434 = sub_216B34334(v433, "guarded_var", (uint64_t)&v964);
      v963 = 1;
      v435 = sub_216B329A8(v434, (unsigned __int16 *)"hot", (uint64_t)&v963);
      v962 = 1;
      v436 = sub_216B32AEC(v435, "ibaction", (uint64_t)&v962);
      v961 = 1;
      v437 = sub_216B32AEC(v436, "iboutlet", (uint64_t)&v961);
      v960 = 1;
      v438 = sub_216B4A1B4(v437, (uint64_t)"iboutletcollection", (uint64_t)&v960);
      v959 = 1;
      v439 = sub_216B4A400(v438, "init_priority", (uint64_t)&v959);
      v958 = 1;
      v440 = sub_216B346C4(v439, "intel_ocl_bicc", (uint64_t)&v958);
      v957 = 1;
      v441 = sub_216B4A400(v440, "lock_returned", (uint64_t)&v957);
      v956 = 1;
      v442 = sub_216B32AEC(v441, "lockable", (uint64_t)&v956);
      v955 = 1;
      v443 = sub_216B346C4(v442, "locks_excluded", (uint64_t)&v955);
      v954 = 1;
      v444 = sub_216B32A7C(v443, (uint64_t)"ms_abi", (uint64_t)&v954);
      v953 = sub_216B34198(a4) == 10;
      v445 = sub_216B345E4(v444, (uint64_t)"interrupt", (uint64_t)&v953);
      v952 = 1;
      v446 = sub_216B32A7C(v445, (uint64_t)"malloc", (uint64_t)&v952);
      v951 = 1;
      v447 = sub_216B345E4(v446, (uint64_t)"may_alias", (uint64_t)&v951);
      v950 = 1;
      v448 = sub_216B32858(v447, "minsize", (uint64_t)&v950);
      v449 = sub_216B34198(a4);
      v450 = 1;
      if (v449 != 6)
        v450 = sub_216B34198(a4) == 7;
      v949 = v450;
      v451 = sub_216B32A7C(v448, (uint64_t)"mips16", (uint64_t)&v949);
      v948 = 1;
      v452 = sub_216B32A18(v451, "mode", (uint64_t)&v948);
      v947 = 1;
      v453 = sub_216B345E4(v452, (uint64_t)"ms_struct", (uint64_t)&v947);
      v946 = 1;
      v454 = sub_216B34334(v453, "ns_consumed", (uint64_t)&v946);
      v945 = 1;
      v455 = sub_216B4A81C(v454, "ns_consumes_self", (uint64_t)&v945);
      v944 = 1;
      v456 = sub_216B4A2A8(v455, "ns_returns_autoreleased", (uint64_t)&v944);
      v943 = 1;
      v457 = sub_216B4A2A8(v456, "ns_returns_not_retained", (uint64_t)&v943);
      v942 = 1;
      v458 = sub_216B4A6A8(v457, "ns_returns_retained", (uint64_t)&v942);
      v941 = 1;
      v459 = sub_216B32938(v458, (uint64_t)"naked", (uint64_t)&v941);
      v940 = 1;
      v460 = sub_216B4A31C(v459, (uint64_t)"neon_polyvector_type", (uint64_t)&v940);
      v939 = 1;
      v461 = sub_216B4A81C(v460, "neon_vector_type", (uint64_t)&v939);
      v938 = 1;
      v462 = sub_216B32AEC(v461, "nocommon", (uint64_t)&v938);
      v937 = 1;
      v463 = sub_216B32858(v462, "nodebug", (uint64_t)&v937);
      v936 = 1;
      v464 = sub_216B34334(v463, "noduplicate", (uint64_t)&v936);
      v935 = 1;
      v465 = sub_216B32AEC(v464, "noescape", (uint64_t)&v935);
      v934 = 1;
      v466 = sub_216B32AEC(v465, "noinline", (uint64_t)&v934);
      v933 = 1;
      v467 = sub_216B4A54C(v466, "no_instrument_function", (uint64_t)&v933);
      if (sub_216B34198(a4) != 6)
        v422 = sub_216B34198(a4) == 7;
      v932 = v422;
      v468 = sub_216B32AEC(v467, "nomips16", (uint64_t)&v932);
      v931 = 1;
      v469 = sub_216B32AEC(v468, "noreturn", (uint64_t)&v931);
      v930 = 1;
      v470 = sub_216B4A71C(v469, (uint64_t)"no_address_safety_analysis", (uint64_t)&v930);
      v929 = 1;
      v471 = sub_216B4A6A8(v470, "no_sanitize_address", (uint64_t)&v929);
      v928 = 1;
      v472 = sub_216B4A71C(v471, (uint64_t)"no_address_safety_analysis", (uint64_t)&v928);
      v927 = 1;
      v473 = sub_216B4A6A8(v472, "no_sanitize_address", (uint64_t)&v927);
      v926 = 1;
      v474 = sub_216B4A1B4(v473, (uint64_t)"no_sanitize_memory", (uint64_t)&v926);
      v925 = 1;
      v475 = sub_216B4A1B4(v474, (uint64_t)"no_sanitize_thread", (uint64_t)&v925);
      v924 = 1;
      v476 = sub_216B346C4(v475, "no_split_stack", (uint64_t)&v924);
      v923 = 1;
      v477 = sub_216B4A228(v476, (uint64_t)"no_thread_safety_analysis", (uint64_t)&v923);
      v922 = 1;
      v478 = sub_216B32858(v477, "nothrow", (uint64_t)&v922);
      v921 = 1;
      v479 = sub_216B32858(v478, "nonnull", (uint64_t)&v921);
      v920 = 1;
      v480 = sub_216B34334(v479, "objc_bridge", (uint64_t)&v920);
      v919 = 1;
      v481 = sub_216B4A6A8(v480, "objc_bridge_mutable", (uint64_t)&v919);
      v918 = 1;
      v482 = sub_216B4A6A8(v481, "objc_bridge_related", (uint64_t)&v918);
      v917 = 1;
      v483 = sub_216B4A634(v482, "objc_complete_definition", (uint64_t)&v917);
      v916 = 1;
      v484 = sub_216B4A884(v483, "objc_designated_initializer", (uint64_t)&v916);
      v915 = 1;
      v485 = sub_216B346C4(v484, "objc_exception", (uint64_t)&v915);
      v914 = 1;
      v486 = sub_216B4A904(v485, "objc_protocol_requires_explicit_implementation", (uint64_t)&v914);
      v913 = 1;
      v487 = sub_216B32858(v486, "objc_gc", (uint64_t)&v913);
      v912 = 1;
      v488 = sub_216B4A1B4(v487, (uint64_t)"objc_method_family", (uint64_t)&v912);
      v911 = 1;
      v489 = sub_216B32AEC(v488, "NSObject", (uint64_t)&v911);
      v910 = 1;
      v490 = sub_216B346C4(v489, "objc_ownership", (uint64_t)&v910);
      v909 = 1;
      v491 = sub_216B4A5C0(v490, "objc_precise_lifetime", (uint64_t)&v909);
      v908 = 1;
      v492 = sub_216B4A96C(v491, "objc_requires_property_definitions", (uint64_t)&v908);
      v907 = 1;
      v493 = sub_216B4A6A8(v492, "objc_requires_super", (uint64_t)&v907);
      v906 = 1;
      v494 = sub_216B4A71C(v493, (uint64_t)"objc_returns_inner_pointer", (uint64_t)&v906);
      v905 = 1;
      v495 = sub_216B4A390(v494, "objc_root_class", (uint64_t)&v905);
      v904 = 1;
      v496 = sub_216B4A470(v495, (uint64_t)"objc_runtime_name", (uint64_t)&v904);
      v903 = 1;
      v497 = sub_216B4A884(v496, "objc_subclassing_restricted", (uint64_t)&v903);
      v902 = 1;
      v498 = sub_216B32858(v497, "optnone", (uint64_t)&v902);
      v901 = 1;
      v499 = sub_216B34654(v498, (uint64_t)"overloadable", (uint64_t)&v901);
      v900 = 1;
      v500 = sub_216B4A390(v499, "ownership_holds", (uint64_t)&v900);
      v899 = 1;
      v501 = sub_216B4A470(v500, (uint64_t)"ownership_returns", (uint64_t)&v899);
      v898 = 1;
      v502 = sub_216B4A390(v501, "ownership_takes", (uint64_t)&v898);
      v897 = 1;
      v503 = sub_216B4A390(v502, "ownership_holds", (uint64_t)&v897);
      v896 = 1;
      v504 = sub_216B4A470(v503, (uint64_t)"ownership_returns", (uint64_t)&v896);
      v895 = 1;
      v505 = sub_216B4A390(v504, "ownership_takes", (uint64_t)&v895);
      v894 = 1;
      v506 = sub_216B4A390(v505, "ownership_holds", (uint64_t)&v894);
      v893 = 1;
      v507 = sub_216B4A470(v506, (uint64_t)"ownership_returns", (uint64_t)&v893);
      v892 = 1;
      v508 = sub_216B4A390(v507, "ownership_takes", (uint64_t)&v892);
      v891 = 1;
      v509 = sub_216B32A7C(v508, (uint64_t)"packed", (uint64_t)&v891);
      v890 = 1;
      v510 = sub_216B4A390(v509, "param_typestate", (uint64_t)&v890);
      v889 = 1;
      v511 = sub_216B32A7C(v510, (uint64_t)"pascal", (uint64_t)&v889);
      v888 = 1;
      v512 = sub_216B329A8(v511, (unsigned __int16 *)"pcs", (uint64_t)&v888);
      v887 = 1;
      v513 = sub_216B345E4(v512, (uint64_t)"pnaclcall", (uint64_t)&v887);
      v886 = 1;
      v514 = sub_216B4A400(v513, "pt_guarded_by", (uint64_t)&v886);
      v885 = 1;
      v515 = sub_216B346C4(v514, "pt_guarded_var", (uint64_t)&v885);
      v884 = 1;
      v516 = sub_216B32A18(v515, "pure", (uint64_t)&v884);
      v883 = 1;
      v517 = sub_216B32858(v516, "regparm", (uint64_t)&v883);
      v882 = 1;
      v518 = sub_216B4A1B4(v517, (uint64_t)"release_capability", (uint64_t)&v882);
      v881 = 1;
      v519 = sub_216B4A228(v518, (uint64_t)"release_shared_capability", (uint64_t)&v881);
      v880 = 1;
      v520 = sub_216B4A71C(v519, (uint64_t)"release_generic_capability", (uint64_t)&v880);
      v879 = 1;
      v521 = sub_216B4A390(v520, "unlock_function", (uint64_t)&v879);
      v878 = 1;
      v522 = sub_216B4A1B4(v521, (uint64_t)"release_capability", (uint64_t)&v878);
      v877 = 1;
      v523 = sub_216B4A228(v522, (uint64_t)"release_shared_capability", (uint64_t)&v877);
      v876 = 1;
      v524 = sub_216B4A71C(v523, (uint64_t)"release_generic_capability", (uint64_t)&v876);
      v875 = 1;
      v525 = sub_216B4A390(v524, "unlock_function", (uint64_t)&v875);
      v874 = 1;
      v526 = sub_216B4A1B4(v525, (uint64_t)"release_capability", (uint64_t)&v874);
      v873 = 1;
      v527 = sub_216B4A228(v526, (uint64_t)"release_shared_capability", (uint64_t)&v873);
      v872 = 1;
      v528 = sub_216B4A71C(v527, (uint64_t)"release_generic_capability", (uint64_t)&v872);
      v871 = 1;
      v529 = sub_216B4A390(v528, "unlock_function", (uint64_t)&v871);
      v870 = 1;
      v530 = sub_216B4A1B4(v529, (uint64_t)"release_capability", (uint64_t)&v870);
      v869 = 1;
      v531 = sub_216B4A228(v530, (uint64_t)"release_shared_capability", (uint64_t)&v869);
      v868 = 1;
      v532 = sub_216B4A71C(v531, (uint64_t)"release_generic_capability", (uint64_t)&v868);
      v867 = 1;
      v533 = sub_216B4A390(v532, "unlock_function", (uint64_t)&v867);
      v866 = 1;
      v534 = sub_216B4A31C(v533, (uint64_t)"reqd_work_group_size", (uint64_t)&v866);
      v865 = 1;
      v535 = sub_216B4A6A8(v534, "requires_capability", (uint64_t)&v865);
      v864 = 1;
      v536 = sub_216B4A634(v535, "exclusive_locks_required", (uint64_t)&v864);
      v863 = 1;
      v537 = sub_216B4A71C(v536, (uint64_t)"requires_shared_capability", (uint64_t)&v863);
      v862 = 1;
      v538 = sub_216B4A5C0(v537, "shared_locks_required", (uint64_t)&v862);
      v861 = 1;
      v539 = sub_216B4A6A8(v538, "requires_capability", (uint64_t)&v861);
      v860 = 1;
      v540 = sub_216B4A634(v539, "exclusive_locks_required", (uint64_t)&v860);
      v859 = 1;
      v541 = sub_216B4A71C(v540, (uint64_t)"requires_shared_capability", (uint64_t)&v859);
      v858 = 1;
      v542 = sub_216B4A5C0(v541, "shared_locks_required", (uint64_t)&v858);
      v857 = 1;
      v543 = sub_216B4A6A8(v542, "requires_capability", (uint64_t)&v857);
      v856 = 1;
      v544 = sub_216B4A634(v543, "exclusive_locks_required", (uint64_t)&v856);
      v855 = 1;
      v545 = sub_216B4A71C(v544, (uint64_t)"requires_shared_capability", (uint64_t)&v855);
      v854 = 1;
      v546 = sub_216B4A5C0(v545, "shared_locks_required", (uint64_t)&v854);
      v853 = 1;
      v547 = sub_216B4A6A8(v546, "requires_capability", (uint64_t)&v853);
      v852 = 1;
      v548 = sub_216B4A634(v547, "exclusive_locks_required", (uint64_t)&v852);
      v851 = 1;
      v549 = sub_216B4A71C(v548, (uint64_t)"requires_shared_capability", (uint64_t)&v851);
      v850 = 1;
      v550 = sub_216B4A5C0(v549, "shared_locks_required", (uint64_t)&v850);
      v849 = 1;
      v551 = sub_216B4A81C(v550, "return_typestate", (uint64_t)&v849);
      v848 = 1;
      v552 = sub_216B4A390(v551, "returns_nonnull", (uint64_t)&v848);
      v847 = 1;
      v553 = sub_216B4A400(v552, "returns_twice", (uint64_t)&v847);
      v846 = 1;
      v554 = sub_216B4A390(v553, "scoped_lockable", (uint64_t)&v846);
      v845 = 1;
      v555 = sub_216B32858(v554, "section", (uint64_t)&v845);
      v844 = 1;
      v556 = sub_216B32AEC(v555, "sentinel", (uint64_t)&v844);
      v843 = 1;
      v557 = sub_216B4A400(v556, "set_typestate", (uint64_t)&v843);
      v842 = 1;
      v558 = sub_216B4A2A8(v557, "shared_trylock_function", (uint64_t)&v842);
      v841 = 1;
      v559 = sub_216B32858(v558, "stdcall", (uint64_t)&v841);
      v840 = 1;
      v560 = sub_216B32AEC(v559, "sysv_abi", (uint64_t)&v840);
      v839 = 1;
      v561 = sub_216B345E4(v560, (uint64_t)"tls_model", (uint64_t)&v839);
      v838 = 1;
      v562 = sub_216B346C4(v561, "test_typestate", (uint64_t)&v838);
      v837 = 1;
      v563 = sub_216B32AEC(v562, "thiscall", (uint64_t)&v837);
      v836 = 1;
      v564 = sub_216B4A470(v563, (uint64_t)"transparent_union", (uint64_t)&v836);
      v835 = 1;
      v565 = sub_216B4A54C(v564, "try_acquire_capability", (uint64_t)&v835);
      v834 = 1;
      v566 = sub_216B4A9D4(v565, "try_acquire_shared_capability", (uint64_t)&v834);
      v833 = 1;
      v567 = sub_216B4A54C(v566, "try_acquire_capability", (uint64_t)&v833);
      v832 = 1;
      v568 = sub_216B4A9D4(v567, "try_acquire_shared_capability", (uint64_t)&v832);
      v831 = 1;
      v569 = sub_216B4A5C0(v568, "type_tag_for_datatype", (uint64_t)&v831);
      v830 = 1;
      v570 = sub_216B4A390(v569, "type_visibility", (uint64_t)&v830);
      v829 = 1;
      v571 = sub_216B34334(v570, "unavailable", (uint64_t)&v829);
      v828 = 1;
      v572 = sub_216B32A7C(v571, (uint64_t)"unused", (uint64_t)&v828);
      v827 = 1;
      v573 = sub_216B32A18(v572, "used", (uint64_t)&v827);
      v826 = 1;
      v574 = sub_216B345E4(v573, (uint64_t)"vecreturn", (uint64_t)&v826);
      v825 = 1;
      v575 = sub_216B4A400(v574, "vec_type_hint", (uint64_t)&v825);
      v824 = 1;
      v576 = sub_216B34334(v575, "vector_size", (uint64_t)&v824);
      v823 = 1;
      v577 = sub_216B328C8(v576, (uint64_t)"visibility", (uint64_t)&v823);
      v822 = 1;
      v578 = sub_216B34334(v577, "warn_unused", (uint64_t)&v822);
      v821 = 1;
      v579 = sub_216B4A1B4(v578, (uint64_t)"warn_unused_result", (uint64_t)&v821);
      v820 = 1;
      v580 = sub_216B32A18(v579, "weak", (uint64_t)&v820);
      v819 = 1;
      v581 = sub_216B34334(v580, "weak_import", (uint64_t)&v819);
      v818 = 1;
      v582 = sub_216B32858(v581, "weakref", (uint64_t)&v818);
      v817 = 1;
      v583 = sub_216B4A31C(v582, (uint64_t)"work_group_size_hint", (uint64_t)&v817);
      v816 = sub_216B34198(a4) == 24;
      v345 = sub_216B4A2A8(v583, "force_align_arg_pointer", (uint64_t)&v816);
      v815 = 0;
      v346 = (BOOL *)&v815;
      return sub_216B4AA54(v345, (unsigned __int8 *)v346);
    case 2:
      v584 = sub_216B32854(v1046, v1049, v1050);
      v1045 = 1;
      v585 = sub_216B32938((uint64_t)v584, (uint64_t)"align", (uint64_t)&v1045);
      v586 = (sub_216B34198(a4) == 24
           || sub_216B34198(a4) == 25
           || sub_216B34198(a4) == 1
           || sub_216B34198(a4) == 22)
          && sub_216B34190(a4) == 12;
      v1044 = v586;
      v587 = sub_216B345E4(v585, (uint64_t)"dllexport", (uint64_t)&v1044);
      v588 = (sub_216B34198(a4) == 24
           || sub_216B34198(a4) == 25
           || sub_216B34198(a4) == 1
           || sub_216B34198(a4) == 22)
          && sub_216B34190(a4) == 12;
      v1043 = v588;
      v589 = sub_216B345E4(v587, (uint64_t)"dllimport", (uint64_t)&v1043);
      v1042 = 1;
      v590 = sub_216B328C8(v589, (uint64_t)"deprecated", (uint64_t)&v1042);
      v1041 = 1;
      v591 = sub_216B32AEC(v590, "property", (uint64_t)&v1041);
      v1040 = 1;
      v592 = sub_216B32938(v591, (uint64_t)"naked", (uint64_t)&v1040);
      v1039 = 1;
      v593 = sub_216B32AEC(v592, "noinline", (uint64_t)&v1039);
      v1038 = 1;
      v594 = sub_216B32AEC(v593, "noreturn", (uint64_t)&v1038);
      v1037 = 1;
      v595 = sub_216B32858(v594, "nothrow", (uint64_t)&v1037);
      v1036 = 1;
      v596 = sub_216B32AEC(v595, "allocate", (uint64_t)&v1036);
      v1035 = 1;
      v597 = sub_216B345E4(v596, (uint64_t)"selectany", (uint64_t)&v1035);
      v1034 = 1;
      v598 = sub_216B32A7C(v597, (uint64_t)"thread", (uint64_t)&v1034);
      v1033 = 1;
      v345 = sub_216B32A18(v598, "uuid", (uint64_t)&v1033);
      v1032 = 0;
      v346 = &v1032;
      return sub_216B4AA54(v345, (unsigned __int8 *)v346);
    case 3:
      if (!a2
        || (v599 = sub_216B4A11C(a2),
            v601 = v600,
            sub_216B1E678((int)v724, &byte_216C19659),
            sub_216B274F0(v599, v601, v724[0], (size_t)v724[1])))
      {
        v602 = sub_216B32854(v1046, v1049, v1050);
        v1045 = (*a5 & 0x80) != 0;
        v603 = sub_216B32AEC((uint64_t)v602, "noreturn", (uint64_t)&v1045);
        v1044 = (*a5 & 0x80) != 0;
        v604 = sub_216B4A1B4(v603, (uint64_t)"carries_dependency", (uint64_t)&v1044);
        v1043 = (*a5 & 0x80) != 0;
        v605 = sub_216B328C8(v604, (uint64_t)"deprecated", (uint64_t)&v1043);
        v1042 = (*a5 & 0x80) != 0;
        v345 = sub_216B328C8(v605, (uint64_t)"deprecated", (uint64_t)&v1042);
        v1041 = 0;
        v346 = &v1041;
        return sub_216B4AA54(v345, (unsigned __int8 *)v346);
      }
      v616 = sub_216B4A11C(a2);
      v618 = v617;
      sub_216B1E678((int)v723, "clang");
      if (sub_216B274F0(v616, v618, v723[0], (size_t)v723[1]))
      {
        v619 = sub_216B32854(v1046, v1049, v1050);
        v1045 = (*a5 & 0x80) != 0;
        v620 = sub_216B4A1B4((uint64_t)v619, (uint64_t)"acquire_capability", (uint64_t)&v1045);
        v1044 = (*a5 & 0x80) != 0;
        v621 = sub_216B4A228(v620, (uint64_t)"acquire_shared_capability", (uint64_t)&v1044);
        v1043 = (*a5 & 0x80) != 0;
        v622 = sub_216B4A1B4(v621, (uint64_t)"acquire_capability", (uint64_t)&v1043);
        v1042 = (*a5 & 0x80) != 0;
        v623 = sub_216B4A228(v622, (uint64_t)"acquire_shared_capability", (uint64_t)&v1042);
        v1041 = (*a5 & 0x80) != 0;
        v624 = sub_216B4A470(v623, (uint64_t)"assert_capability", (uint64_t)&v1041);
        v1040 = (*a5 & 0x80) != 0;
        v625 = sub_216B4A634(v624, "assert_shared_capability", (uint64_t)&v1040);
        v1039 = (*a5 & 0x80) != 0;
        v626 = sub_216B4A470(v625, (uint64_t)"assert_capability", (uint64_t)&v1039);
        v1038 = (*a5 & 0x80) != 0;
        v627 = sub_216B4A634(v626, "assert_shared_capability", (uint64_t)&v1038);
        v1037 = (*a5 & 0x80) != 0;
        v628 = sub_216B328C8(v627, (uint64_t)"capability", (uint64_t)&v1037);
        v1036 = (*a5 & 0x80) != 0;
        v629 = sub_216B4A470(v628, (uint64_t)"shared_capability", (uint64_t)&v1036);
        v1035 = (*a5 & 0x80) != 0;
        v630 = sub_216B328C8(v629, (uint64_t)"capability", (uint64_t)&v1035);
        v1034 = (*a5 & 0x80) != 0;
        v631 = sub_216B4A470(v630, (uint64_t)"shared_capability", (uint64_t)&v1034);
        v1033 = (*a5 & 0x80) != 0;
        v632 = sub_216B34334(v631, "fallthrough", (uint64_t)&v1033);
        v1032 = (*a5 & 0x80) != 0;
        v633 = sub_216B34334(v632, "noduplicate", (uint64_t)&v1032);
        v1031 = (*a5 & 0x80) != 0;
        v634 = sub_216B32858(v633, "optnone", (uint64_t)&v1031);
        v1030 = (*a5 & 0x80) != 0;
        v635 = sub_216B4A1B4(v634, (uint64_t)"release_capability", (uint64_t)&v1030);
        v1029 = (*a5 & 0x80) != 0;
        v636 = sub_216B4A228(v635, (uint64_t)"release_shared_capability", (uint64_t)&v1029);
        v1028 = (*a5 & 0x80) != 0;
        v637 = sub_216B4A71C(v636, (uint64_t)"release_generic_capability", (uint64_t)&v1028);
        v1027 = (*a5 & 0x80) != 0;
        v638 = sub_216B4A1B4(v637, (uint64_t)"release_capability", (uint64_t)&v1027);
        v1026 = (*a5 & 0x80) != 0;
        v639 = sub_216B4A228(v638, (uint64_t)"release_shared_capability", (uint64_t)&v1026);
        v1025 = (*a5 & 0x80) != 0;
        v640 = sub_216B4A71C(v639, (uint64_t)"release_generic_capability", (uint64_t)&v1025);
        v1024 = (*a5 & 0x80) != 0;
        v641 = sub_216B4A1B4(v640, (uint64_t)"release_capability", (uint64_t)&v1024);
        v1023 = (*a5 & 0x80) != 0;
        v642 = sub_216B4A228(v641, (uint64_t)"release_shared_capability", (uint64_t)&v1023);
        v1022 = (*a5 & 0x80) != 0;
        v643 = sub_216B4A71C(v642, (uint64_t)"release_generic_capability", (uint64_t)&v1022);
        v1021 = (*a5 & 0x80) != 0;
        v644 = sub_216B4A6A8(v643, "requires_capability", (uint64_t)&v1021);
        v1020 = (*a5 & 0x80) != 0;
        v645 = sub_216B4A71C(v644, (uint64_t)"requires_shared_capability", (uint64_t)&v1020);
        v1019 = (*a5 & 0x80) != 0;
        v646 = sub_216B4A6A8(v645, "requires_capability", (uint64_t)&v1019);
        v1018 = (*a5 & 0x80) != 0;
        v647 = sub_216B4A71C(v646, (uint64_t)"requires_shared_capability", (uint64_t)&v1018);
        v1017 = (*a5 & 0x80) != 0;
        v648 = sub_216B4A54C(v647, "try_acquire_capability", (uint64_t)&v1017);
        v1016 = (*a5 & 0x80) != 0;
        v649 = sub_216B4A9D4(v648, "try_acquire_shared_capability", (uint64_t)&v1016);
        v1015 = (*a5 & 0x80) != 0;
        v650 = sub_216B4A54C(v649, "try_acquire_capability", (uint64_t)&v1015);
        v1014 = (*a5 & 0x80) != 0;
        v651 = sub_216B4A9D4(v650, "try_acquire_shared_capability", (uint64_t)&v1014);
        v1013 = (*a5 & 0x80) != 0;
        v652 = sub_216B4A390(v651, "type_visibility", (uint64_t)&v1013);
        v1012 = (*a5 & 0x80) != 0;
        v345 = sub_216B4A1B4(v652, (uint64_t)"warn_unused_result", (uint64_t)&v1012);
        v1011 = 0;
        v346 = &v1011;
        return sub_216B4AA54(v345, (unsigned __int8 *)v346);
      }
      v653 = sub_216B4A11C(a2);
      v655 = v654;
      sub_216B1E678((int)v722, "gnu");
      result = sub_216B274F0(v653, v655, v722[0], (size_t)v722[1]);
      if ((_DWORD)result)
      {
        v656 = sub_216B32854(v1046, v1049, v1050);
        v1045 = (*a5 & 0x80) != 0;
        v657 = sub_216B32938((uint64_t)v656, (uint64_t)"alias", (uint64_t)&v1045);
        v1044 = (*a5 & 0x80) != 0;
        v658 = sub_216B32858(v657, "aligned", (uint64_t)&v1044);
        v1043 = (*a5 & 0x80) != 0;
        v659 = sub_216B4A400(v658, "always_inline", (uint64_t)&v1043);
        v1042 = (*a5 & 0x80) != 0;
        v660 = sub_216B32938(v659, (uint64_t)"cdecl", (uint64_t)&v1042);
        v1041 = (*a5 & 0x80) != 0;
        v661 = sub_216B32858(v660, "cleanup", (uint64_t)&v1041);
        v1040 = (*a5 & 0x80) != 0;
        v662 = sub_216B32A18(v661, "cold", (uint64_t)&v1040);
        v1039 = (*a5 & 0x80) != 0;
        v663 = sub_216B32A7C(v662, (uint64_t)"common", (uint64_t)&v1039);
        v1038 = (*a5 & 0x80) != 0;
        v664 = sub_216B32938(v663, (uint64_t)"const", (uint64_t)&v1038);
        v1037 = (*a5 & 0x80) != 0;
        v665 = sub_216B32858(v664, "__const", (uint64_t)&v1037);
        v1036 = (*a5 & 0x80) != 0;
        v666 = sub_216B32938(v665, (uint64_t)"const", (uint64_t)&v1036);
        v1035 = (*a5 & 0x80) != 0;
        v667 = sub_216B32858(v666, "__const", (uint64_t)&v1035);
        v1034 = (*a5 & 0x80) != 0;
        v668 = sub_216B34334(v667, "constructor", (uint64_t)&v1034);
        if ((sub_216B34198(a4) == 24
           || sub_216B34198(a4) == 25
           || sub_216B34198(a4) == 1
           || sub_216B34198(a4) == 22)
          && sub_216B34190(a4) == 12)
        {
          v669 = *(unsigned __int8 *)a5 >> 7;
        }
        else
        {
          LOBYTE(v669) = 0;
        }
        v1033 = v669;
        v670 = sub_216B345E4(v668, (uint64_t)"dllexport", (uint64_t)&v1033);
        if ((sub_216B34198(a4) == 24
           || sub_216B34198(a4) == 25
           || sub_216B34198(a4) == 1
           || sub_216B34198(a4) == 22)
          && sub_216B34190(a4) == 12)
        {
          v671 = *(unsigned __int8 *)a5 >> 7;
        }
        else
        {
          LOBYTE(v671) = 0;
        }
        v1032 = v671;
        v672 = sub_216B345E4(v670, (uint64_t)"dllimport", (uint64_t)&v1032);
        v1031 = (*a5 & 0x80) != 0;
        v673 = sub_216B328C8(v672, (uint64_t)"deprecated", (uint64_t)&v1031);
        v1030 = (*a5 & 0x80) != 0;
        v674 = sub_216B328C8(v673, (uint64_t)"destructor", (uint64_t)&v1030);
        v1029 = (*a5 & 0x80) != 0;
        v675 = sub_216B32AEC(v674, "fastcall", (uint64_t)&v1029);
        v1028 = (*a5 & 0x80) != 0;
        v676 = sub_216B32858(v675, "flatten", (uint64_t)&v1028);
        v1027 = (*a5 & 0x80) != 0;
        v677 = sub_216B32A7C(v676, (uint64_t)"format", (uint64_t)&v1027);
        v1026 = (*a5 & 0x80) != 0;
        v678 = sub_216B328C8(v677, (uint64_t)"format_arg", (uint64_t)&v1026);
        v1025 = (*a5 & 0x80) != 0;
        v679 = sub_216B328C8(v678, (uint64_t)"gnu_inline", (uint64_t)&v1025);
        v1024 = (*a5 & 0x80) != 0;
        v680 = sub_216B329A8(v679, (unsigned __int16 *)"hot", (uint64_t)&v1024);
        v1023 = (*a5 & 0x80) != 0;
        v681 = sub_216B32A7C(v680, (uint64_t)"ms_abi", (uint64_t)&v1023);
        v1022 = (*a5 & 0x80) != 0;
        v682 = sub_216B32A7C(v681, (uint64_t)"malloc", (uint64_t)&v1022);
        v1021 = (*a5 & 0x80) != 0;
        v683 = sub_216B345E4(v682, (uint64_t)"may_alias", (uint64_t)&v1021);
        if (sub_216B34198(a4) == 6 || sub_216B34198(a4) == 7)
          v684 = *(unsigned __int8 *)a5 >> 7;
        else
          LOBYTE(v684) = 0;
        v1020 = v684;
        v685 = sub_216B32A7C(v683, (uint64_t)"mips16", (uint64_t)&v1020);
        v1019 = (*a5 & 0x80) != 0;
        v686 = sub_216B32A18(v685, "mode", (uint64_t)&v1019);
        v1018 = (*a5 & 0x80) != 0;
        v687 = sub_216B345E4(v686, (uint64_t)"ms_struct", (uint64_t)&v1018);
        v1017 = (*a5 & 0x80) != 0;
        v688 = sub_216B32938(v687, (uint64_t)"naked", (uint64_t)&v1017);
        v1016 = (*a5 & 0x80) != 0;
        v689 = sub_216B32AEC(v688, "nocommon", (uint64_t)&v1016);
        v1015 = (*a5 & 0x80) != 0;
        v690 = sub_216B32AEC(v689, "noescape", (uint64_t)&v1015);
        v1014 = (*a5 & 0x80) != 0;
        v691 = sub_216B32AEC(v690, "noinline", (uint64_t)&v1014);
        v1013 = (*a5 & 0x80) != 0;
        v692 = sub_216B4A54C(v691, "no_instrument_function", (uint64_t)&v1013);
        if (sub_216B34198(a4) == 6 || sub_216B34198(a4) == 7)
          v693 = *(unsigned __int8 *)a5 >> 7;
        else
          LOBYTE(v693) = 0;
        v1012 = v693;
        v694 = sub_216B32AEC(v692, "nomips16", (uint64_t)&v1012);
        v1011 = (*a5 & 0x80) != 0;
        v695 = sub_216B32AEC(v694, "noreturn", (uint64_t)&v1011);
        v1010 = (*a5 & 0x80) != 0;
        v696 = sub_216B4A71C(v695, (uint64_t)"no_address_safety_analysis", (uint64_t)&v1010);
        v1009 = (*a5 & 0x80) != 0;
        v697 = sub_216B4A6A8(v696, "no_sanitize_address", (uint64_t)&v1009);
        v1008 = (*a5 & 0x80) != 0;
        v698 = sub_216B4A71C(v697, (uint64_t)"no_address_safety_analysis", (uint64_t)&v1008);
        v1007 = (*a5 & 0x80) != 0;
        v699 = sub_216B4A6A8(v698, "no_sanitize_address", (uint64_t)&v1007);
        v1006 = (*a5 & 0x80) != 0;
        v700 = sub_216B346C4(v699, "no_split_stack", (uint64_t)&v1006);
        v1005 = (*a5 & 0x80) != 0;
        v701 = sub_216B32858(v700, "nothrow", (uint64_t)&v1005);
        v1004 = (*a5 & 0x80) != 0;
        v702 = sub_216B32858(v701, "nonnull", (uint64_t)&v1004);
        v1003 = (*a5 & 0x80) != 0;
        v703 = sub_216B32A7C(v702, (uint64_t)"packed", (uint64_t)&v1003);
        v1002 = (*a5 & 0x80) != 0;
        v704 = sub_216B329A8(v703, (unsigned __int16 *)"pcs", (uint64_t)&v1002);
        v1001 = (*a5 & 0x80) != 0;
        v705 = sub_216B32A18(v704, "pure", (uint64_t)&v1001);
        v1000 = (*a5 & 0x80) != 0;
        v706 = sub_216B32858(v705, "regparm", (uint64_t)&v1000);
        v999 = (*a5 & 0x80) != 0;
        v707 = sub_216B4A390(v706, "returns_nonnull", (uint64_t)&v999);
        v998 = (*a5 & 0x80) != 0;
        v708 = sub_216B4A400(v707, "returns_twice", (uint64_t)&v998);
        v997 = (*a5 & 0x80) != 0;
        v709 = sub_216B32858(v708, "section", (uint64_t)&v997);
        v996 = (*a5 & 0x80) != 0;
        v710 = sub_216B32AEC(v709, "sentinel", (uint64_t)&v996);
        v995 = (*a5 & 0x80) != 0;
        v711 = sub_216B32858(v710, "stdcall", (uint64_t)&v995);
        v994 = (*a5 & 0x80) != 0;
        v712 = sub_216B32AEC(v711, "sysv_abi", (uint64_t)&v994);
        v993 = (*a5 & 0x80) != 0;
        v713 = sub_216B345E4(v712, (uint64_t)"tls_model", (uint64_t)&v993);
        v992 = (*a5 & 0x80) != 0;
        v714 = sub_216B32AEC(v713, "thiscall", (uint64_t)&v992);
        v991 = (*a5 & 0x80) != 0;
        v715 = sub_216B4A470(v714, (uint64_t)"transparent_union", (uint64_t)&v991);
        v990 = (*a5 & 0x80) != 0;
        v716 = sub_216B32A7C(v715, (uint64_t)"unused", (uint64_t)&v990);
        v989 = (*a5 & 0x80) != 0;
        v717 = sub_216B32A18(v716, "used", (uint64_t)&v989);
        v988 = (*a5 & 0x80) != 0;
        v718 = sub_216B34334(v717, "vector_size", (uint64_t)&v988);
        v987 = (*a5 & 0x80) != 0;
        v719 = sub_216B328C8(v718, (uint64_t)"visibility", (uint64_t)&v987);
        v986 = (*a5 & 0x80) != 0;
        v720 = sub_216B4A1B4(v719, (uint64_t)"warn_unused_result", (uint64_t)&v986);
        v985 = (*a5 & 0x80) != 0;
        v721 = sub_216B32A18(v720, "weak", (uint64_t)&v985);
        v984 = (*a5 & 0x80) != 0;
        v345 = sub_216B32858(v721, "weakref", (uint64_t)&v984);
        v983 = 0;
        v346 = (BOOL *)&v983;
        return sub_216B4AA54(v345, (unsigned __int8 *)v346);
      }
      return result;
    case 4:
      v606 = sub_216B32854(v1046, v1049, v1050);
      v1045 = 1;
      v607 = sub_216B32AEC((uint64_t)v606, "init_seg", (uint64_t)&v1045);
      v1044 = 1;
      v608 = sub_216B32A18(v607, "loop", (uint64_t)&v1044);
      v1043 = 1;
      v609 = sub_216B32A7C(v608, (uint64_t)"unroll", (uint64_t)&v1043);
      v1042 = 1;
      v610 = sub_216B32AEC(v609, "nounroll", (uint64_t)&v1042);
      v1041 = 1;
      v611 = sub_216B32A18(v610, "loop", (uint64_t)&v1041);
      v1040 = 1;
      v612 = sub_216B32A7C(v611, (uint64_t)"unroll", (uint64_t)&v1040);
      v1039 = 1;
      v613 = sub_216B32AEC(v612, "nounroll", (uint64_t)&v1039);
      v1038 = 1;
      v614 = sub_216B32A18(v613, "loop", (uint64_t)&v1038);
      v1037 = 1;
      v615 = sub_216B32A7C(v614, (uint64_t)"unroll", (uint64_t)&v1037);
      v1036 = 1;
      v345 = sub_216B32AEC(v615, "nounroll", (uint64_t)&v1036);
      v1035 = 0;
      v346 = &v1035;
      return sub_216B4AA54(v345, (unsigned __int8 *)v346);
    default:
      return 0;
  }
}

uint64_t sub_216B4A11C(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v2 = sub_216B4AA68(a1);
  v3 = sub_216B4AA80(a1);
  sub_216B1E684(&v5, v2, v3);
  return v5;
}

BOOL sub_216B4A164(_QWORD *a1, const void *a2, size_t a3)
{
  uint64_t v6;

  if (a1[1] < a3)
    return 0;
  v6 = sub_216B1E608(a1);
  return sub_216B20284((const void *)(v6 - a3), a2, a3) == 0;
}

uint64_t sub_216B4A1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 18)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v6 + 8)
      && *(unsigned __int16 *)(a2 + 16) == (unint64_t)*(unsigned __int16 *)(v6 + 16))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B4A228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 25)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v6 + 8)
      && *(_QWORD *)(a2 + 16) == *(_QWORD *)(v6 + 16)
      && *(unsigned __int8 *)(a2 + 24) == (unint64_t)*(unsigned __int8 *)(v6 + 24))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B4A2A8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 23)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && *(_QWORD *)((char *)a2 + 15) == *(_QWORD *)((char *)v6 + 15))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 20)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v6 + 8)
      && *(_DWORD *)(a2 + 16) == (unint64_t)*(unsigned int *)(v6 + 16))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B4A390(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 15)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && *(_QWORD *)((char *)a2 + 7) == *(_QWORD *)((char *)v6 + 7))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A400(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 13)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && *(_QWORD *)((char *)a2 + 5) == *(_QWORD *)((char *)v6 + 5))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 17)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v6 + 8)
      && *(unsigned __int8 *)(a2 + 16) == (unint64_t)*(unsigned __int8 *)(v6 + 16))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B4A4E4(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 35)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x23uLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A54C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 22)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && *(_QWORD *)((char *)a2 + 14) == *(_QWORD *)((char *)v6 + 14))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A5C0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 21)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && *(_QWORD *)((char *)a2 + 13) == *(_QWORD *)((char *)v6 + 13))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A634(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 24)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && a2[2] == v6[2])
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A6A8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 19)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && *(_QWORD *)((char *)a2 + 11) == *(_QWORD *)((char *)v6 + 11))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 26)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v6 + 8)
      && *(_QWORD *)(a2 + 16) == *(_QWORD *)(v6 + 16)
      && *(unsigned __int16 *)(a2 + 24) == (unint64_t)*(unsigned __int16 *)(v6 + 24))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B4A79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 28)
  {
    v6 = sub_216B1E600(a1);
    if (*(_QWORD *)a2 == *(_QWORD *)v6
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(v6 + 8)
      && *(_QWORD *)(a2 + 16) == *(_QWORD *)(v6 + 16)
      && *(_DWORD *)(a2 + 24) == (unint64_t)*(unsigned int *)(v6 + 24))
    {
      *(_QWORD *)(a1 + 16) = a3;
    }
  }
  return a1;
}

uint64_t sub_216B4A81C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 16)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1])
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A884(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 27)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && a2[2] == v6[2] && *(_QWORD *)((char *)a2 + 19) == *(_QWORD *)((char *)v6 + 19))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A904(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 46)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x2EuLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A96C(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 34)
  {
    v6 = (const void *)sub_216B1E600(a1);
    if (!memcmp(a2, v6, 0x22uLL))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4A9D4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 29)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && a2[2] == v6[2] && *(_QWORD *)((char *)a2 + 21) == *(_QWORD *)((char *)v6 + 21))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B4AA54(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a1 + 16);
  if (!v2)
    v2 = a2;
  return *v2;
}

uint64_t sub_216B4AA68(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    return sub_216B28BEC(v2);
  else
    return *(_QWORD *)(a1 + 24);
}

uint64_t sub_216B4AA80(uint64_t a1)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
    return sub_216B1E4E0(v2);
  else
    return (*(char *)(*(_QWORD *)(a1 + 24) - 2) | (*(char *)(*(_QWORD *)(a1 + 24) - 1) << 8)) - 1;
}

uint64_t sub_216B4AAA8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1, a1 + 8);
}

uint64_t sub_216B4AAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  while (1)
  {
    v3 = a3;
    v4 = a2;
    v5 = a1;
    v6 = sub_216B4ABC4(a1, a2, a3);
    result = *(_QWORD *)sub_216B3DBD0(v6);
    if (result)
      break;
    v8 = *(_QWORD *)(v5 + 160);
    if (v8)
    {
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v4, v3);
      if (v11)
      {
        sub_216B4ABCC(v6, &v11);
        return v11;
      }
    }
    if (!sub_216B53B54())
    {
      v9 = sub_216B4ABD8(v5);
      v10 = sub_216B4ABDC(v9, 1);
      v11 = sub_216B52994(v10);
      sub_216B4ABCC(v6, &v11);
      result = v11;
      *(_QWORD *)(v11 + 16) = v6;
      return result;
    }
    a1 = v5;
    a2 = v4;
    a3 = v3;
  }
  return result;
}

unsigned int *sub_216B4ABA8(unsigned int *result, int a2)
{
  *result = *result & 0xFFF001FF | (((((a2 << 9) + 13824) >> 9) & 0x7FF) << 9);
  return result;
}

uint64_t sub_216B4ABC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B4ABEC(a1, a2, a3, 0);
}

uint64_t sub_216B4ABCC(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 8) = *a2;
  return result;
}

uint64_t sub_216B4ABDC(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, 24 * a2, 8);
}

uint64_t sub_216B4ABEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7[3];
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216B3DD18((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216B4AC40(a1, v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216B4AC40(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *a2, a2[1]);
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B4AD2C(*a2, a2[1], (uint64_t *)(a1 + 24), a2[2]);
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B4AD2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v13);
  v7 = sub_216B3DE34();
  v8 = sub_216B2663C(a3, (v6 + 17), v7);
  v9 = sub_216B3DE3C(v8, v6, a4);
  v10 = (void *)sub_216B28BEC(v9);
  v11 = (const void *)sub_216B1E600((uint64_t)v13);
  memcpy(v10, v11, v6);
  *((_BYTE *)v10 + v6) = 0;
  return v8;
}

uint64_t sub_216B4ADBC(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_216B4ADC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _DWORD *v10;
  uint64_t i;

  v10 = sub_216B4AEBC((_DWORD *)a1);
  sub_216B4AEC4(v10 + 10, a2);
  sub_216B4AEC8(a1 + 48, a3);
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 72) = 0;
  sub_216B4AECC(a1 + 80);
  sub_216B2C030((_QWORD *)(a1 + 104));
  sub_216B2C030((_QWORD *)(a1 + 128));
  sub_216B25034(a1 + 208);
  sub_216B25034(a1 + 232);
  sub_216B25034(a1 + 256);
  sub_216B4AED0((_DWORD *)(a1 + 280));
  for (i = 304; i != 544; i += 24)
    sub_216B25034(a1 + i);
  sub_216B4AED4(a1 + 624);
  sub_216B4AED8(a1 + 744);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = sub_216B4AEDC;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 7) = 0;
  *(_WORD *)(a1 + 11) = 1;
  *(_BYTE *)(a1 + 13) = 0;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_216B4AF34(a1);
  return a1;
}

_DWORD *sub_216B4AEBC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_216B4AEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
  char *v9;
  char *v10;
  _QWORD v12[2];

  sub_216B1E678((int)v12, "<can't format argument>");
  v9 = (char *)sub_216B1E600((uint64_t)v12);
  v10 = (char *)sub_216B1E608(v12);
  return sub_216B202D8(a9, v9, v10);
}

uint64_t sub_216B4AF34(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6[2];
  __n128 v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 284) = -1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v2 = (uint64_t *)(a1 + 80);
  *(_DWORD *)(a1 + 200) = 0;
  sub_216B4B0FC(a1 + 80);
  v3 = (uint64_t *)(a1 + 104);
  sub_216B4B100((uint64_t *)(a1 + 104));
  sub_216B4B134((uint64_t *)(a1 + 128));
  v7 = 0uLL;
  v8 = 0;
  sub_216B4B1BC((uint64_t)&v7);
  sub_216B4B168(v2, (uint64_t)&v7);
  sub_216B4B1C0(&v7);
  v4 = sub_216B4B21C(v2);
  sub_216B4B234(v6);
  sub_216B2C768(&v7, v4, v6[0], v6[1]);
  return sub_216B4B1C4(v3, &v7);
}

uint64_t sub_216B4AFF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(_QWORD *)(a1 + 56);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  sub_216B4B094(a1 + 744);
  sub_216B1FF6C(a1 + 624);
  for (i = 520; i != 280; i -= 24)
    std::string::~string((std::string *)(a1 + i));
  std::string::~string((std::string *)(a1 + 256));
  std::string::~string((std::string *)(a1 + 232));
  std::string::~string((std::string *)(a1 + 208));
  sub_216B3D560(a1 + 128);
  sub_216B4B098(a1 + 104);
  sub_216B4B09C(a1 + 80);
  sub_216B4B0A0(a1 + 48);
  sub_216B4B0A4(a1 + 40);
  return a1;
}

uint64_t sub_216B4B0AC(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5;

  v5 = result;
  if (*(_BYTE *)(result + 64))
  {
    result = *(_QWORD *)(result + 56);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  *(_QWORD *)(v5 + 56) = a2;
  *(_BYTE *)(v5 + 64) = a3;
  return result;
}

uint64_t sub_216B4B100(uint64_t *a1)
{
  unint64_t v2;

  v2 = sub_216B2BFE4(a1);
  sub_216B4DF08(a1);
  return nullsub_1(a1, v2);
}

uint64_t sub_216B4B134(uint64_t *a1)
{
  uint64_t v2;

  v2 = sub_216B2E220(a1);
  sub_216B2EE6C(a1);
  return nullsub_1(a1, v2);
}

_QWORD *sub_216B4B168(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *result;

  v3 = sub_216B4DF74((uint64_t)a1, 0, 0, a2);
  v4 = (uint64_t *)j_j_nullsub_1(v3);
  sub_216B4DFFC(a1, v4, (uint64_t)v4);
  result = (_QWORD *)sub_216B2C144((uint64_t)a1, v5);
  ++*result;
  return result;
}

uint64_t sub_216B4B1C4(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, (uint64_t)a2))
  {
    result = sub_216B4D5A4(a1, a2);
  }
  else
  {
    sub_216B4D534((uint64_t)a1, a2);
    result = v4 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216B4B21C(_QWORD *a1)
{
  uint64_t v1;

  v1 = j_j_nullsub_1(*a1);
  return sub_216B28BEC(v1);
}

void sub_216B4B238(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v8[0] = a5;
  v8[1] = a6;
  if (!*(_DWORD *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 200) = a2;
    sub_216B25018(v9, (uint64_t)&v7);
    sub_216B26E7C(a1 + 208, (uint64_t)&v7);
    std::string::~string(&v7);
    sub_216B25018(v8, (uint64_t)&v7);
    sub_216B26E7C(a1 + 232, (uint64_t)&v7);
    std::string::~string(&v7);
  }
}

uint64_t sub_216B4B2B0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t v7[2];
  uint64_t v8[2];

  sub_216B4B364(a1, *(_DWORD *)(a1 + 200), (uint64_t)v8);
  sub_216B26CA0(v7, a1 + 208);
  v2 = sub_216B4B340(v8, v7[0], v7[1]);
  sub_216B26CA0(v6, a1 + 232);
  sub_216B4B340(v2, v6[0], v6[1]);
  sub_216B4B3B4(v8);
  *(_DWORD *)(a1 + 200) = 0;
  sub_216B25BB0(a1 + 208, v3);
  return sub_216B25BB0(a1 + 232, v4);
}

uint64_t *sub_216B4B340(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_216B4CCBC(a1, a2, a3);
  return a1;
}

uint64_t sub_216B4B364@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v7;

  sub_216B4AED0(&v7);
  return sub_216B4CD2C(a1, v7, a2, a3);
}

uint64_t sub_216B4B3B8(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[3];
  __int128 v10;
  uint64_t v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 72);
  if (v3 && (v4 = (_DWORD *)sub_216B4B4A0((uint64_t)v11, a2, v3), !sub_216B4B4A8(v4)))
  {
    v6 = (uint64_t *)(a1 + 104);
    v12 = sub_216B2C000((uint64_t)v6);
    v10 = *(_OWORD *)(sub_216B2C7A4((uint64_t)v6) + 8);
    if (sub_216B27BAC(&v10) && sub_216B4B4B8((uint64_t)v11, v10))
    {
      v7 = sub_216B2C910(v6);
      v8 = sub_216B2C000((uint64_t)v6);
      sub_216B2C768(v9, 0, v11[0], v11[1]);
      v12 = sub_216B4B4C0(v7, v8, v9);
    }
    sub_216B4B4C4(&v12);
    return v12;
  }
  else
  {
    v9[0] = sub_216B2C000(a1 + 104);
    return sub_216B4B498(v9, 1);
  }
}

uint64_t sub_216B4B498(uint64_t *a1, uint64_t a2)
{
  return sub_216B4B4E0(a1, -a2);
}

uint64_t sub_216B4B4A0(uint64_t a1, int a2, uint64_t a3)
{
  return sub_216B28104(a1, a2, a3);
}

BOOL sub_216B4B4A8(_DWORD *a1)
{
  return *a1 == 0;
}

BOOL sub_216B4B4B8(uint64_t a1, int a2)
{
  return sub_216B604B0(a1, a2);
}

_QWORD *sub_216B4B4C4(_QWORD *result)
{
  *result -= 24;
  return result;
}

uint64_t sub_216B4B4D4(_BYTE *a1)
{
  return *a1 & 7;
}

uint64_t sub_216B4B4E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  sub_216B4E368(&v3, a2);
  return v3;
}

_QWORD *sub_216B4B50C(_QWORD *result)
{
  *result += 24;
  return result;
}

uint64_t sub_216B4B51C(_QWORD *a1, uint64_t a2)
{
  return nullsub_1(*a1, a2);
}

uint64_t sub_216B4B528(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 4 * a2;
}

_BYTE *sub_216B4B54C(_BYTE *result, char a2)
{
  *result = *result & 0xF8 | a2 & 7;
  return result;
}

_BYTE *sub_216B4B55C(_BYTE *result, int a2)
{
  char v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *result = *result & 0xDF | v2;
  return result;
}

uint64_t sub_216B4B57C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B4DA18((const void **)a1, 0);
  v4 = sub_216B1E67C(a1);
  v5 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = v5;
  v6 = sub_216B1E67C(a1) + 12;
  return sub_216B203A4(a1, v6);
}

uint64_t sub_216B4B5E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  result = sub_216B4C890(v2, v3);
  a1[1] = *a1;
  return result;
}

uint64_t sub_216B4B620(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B4DA28(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B4DB1C(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 56;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216B4B67C(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  _QWORD v14[3];

  if (a2)
  {
    sub_216B4B754(v14, a1);
    v3 = sub_216B1E600(a1 + 40);
    v4 = sub_216B4B758((uint64_t)v14);
    v5 = (int *)sub_216B4B764(v14);
    v6 = sub_216B4EACC(v3, v4, *v5, (_BYTE *)a1);
    v7 = (_DWORD)v6 != 0;
    if ((_DWORD)v6)
    {
      v8 = v6;
      v9 = sub_216B1E600(a1 + 40);
      sub_216B4F2FC(v9, a1, v8);
    }
    sub_216B4B798(a1);
  }
  else
  {
    v7 = sub_216B4B770(a1);
    v10 = *(_DWORD *)(a1 + 284);
    sub_216B4B798(a1);
    v11 = *(_DWORD *)(a1 + 200);
    if (v11)
      v12 = v11 == v10;
    else
      v12 = 1;
    if (!v12)
      sub_216B4B2B0(a1);
  }
  return v7;
}

uint64_t sub_216B4B758(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 284);
}

uint64_t sub_216B4B764(_QWORD *a1)
{
  return *a1 + 280;
}

uint64_t sub_216B4B770(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E600(a1 + 40);
  return sub_216B4F098(v2, a1);
}

uint64_t sub_216B4B798(uint64_t result)
{
  *(_DWORD *)(result + 284) = -1;
  return result;
}

uint64_t sub_216B4B7AC(_DWORD *a1, int a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
  if ((_DWORD)result)
  {
    if (a2 == 3)
    {
      ++a1[2];
    }
    else if (a2 >= 4)
    {
      ++a1[3];
    }
  }
  return result;
}

uint64_t sub_216B4B808(_QWORD *a1, const void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v4 = a1 + 1;
  if (sub_216B29094((uint64_t)(a1 + 1)))
  {
    v5 = sub_216B1E600((uint64_t)a1);
    v6 = sub_216B4B8D0(v5);
    v7 = sub_216B1E600(v6);
    v8 = sub_216B4B758((uint64_t)a1);
    v15[0] = sub_216B4EA2C(v7, v8);
    v15[1] = v9;
    v10 = (char *)sub_216B1E600((uint64_t)v15);
    v11 = (char *)sub_216B1E608(v15);
    return sub_216B4B8D8(a1, v10, v11, a2);
  }
  else
  {
    v13 = (char *)sub_216B1E600((uint64_t)v4);
    v14 = (char *)sub_216B1E608(v4);
    return sub_216B202D8(a2, v13, v14);
  }
}

uint64_t sub_216B4B8D0(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_216B4B8D8(_QWORD *a1, char *a2, char *a3, const void **a4)
{
  int v8;
  int v9;
  unsigned int i;
  int v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  int v19;
  unsigned int v20;
  char *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  char *v54;
  char *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int16 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  char v81;
  char *v82;
  unsigned __int8 *v83;
  const char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v92;
  char *v93;
  uint64_t v94;
  const void **v95;
  unsigned int v96;
  uint64_t v97[2];
  uint64_t v98[2];
  uint64_t v99[2];
  uint64_t v100[2];
  int v101;
  __int128 v102;
  uint64_t v103[2];
  uint64_t v104[2];
  uint64_t v105[2];
  uint64_t v106[2];
  uint64_t v107[2];
  uint64_t v108[2];
  uint64_t v109[2];
  uint64_t v110[2];
  uint64_t v111[2];
  uint64_t v112[2];
  uint64_t v113[2];
  uint64_t v114[2];
  __int128 v115;
  char v116;
  unsigned int v117;
  _QWORD v118[11];
  _BYTE v119[40];
  _BYTE v120[152];
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  sub_216B2B8C8((uint64_t)v120);
  sub_216B4C3E4(v119);
  sub_216B25FB4();
  v8 = sub_216B4C3E8((uint64_t)a1);
  if (v8)
  {
    v9 = v8;
    for (i = 0; i != v9; ++i)
    {
      if (sub_216B4C3F4(a1, i) == 6)
      {
        *(_QWORD *)&v115 = sub_216B4C404(a1, i);
        sub_216B268AC((uint64_t)v119, &v115);
      }
    }
  }
  if (a2 != a3)
  {
    v95 = a4;
    while (1)
    {
      if (*a2 != 37)
      {
        LOBYTE(v115) = 37;
        v13 = (char *)sub_216B2B0D0((uint64_t)a2, (uint64_t)a3, (char *)&v115);
        sub_216B202D8(a4, a2, v13);
        a2 = v13;
        goto LABEL_12;
      }
      v12 = a2 + 1;
      v11 = a2[1];
      if (sub_216B4C414(v11))
      {
        sub_216B1FBBC((uint64_t)a4, a2 + 1);
        a2 += 2;
        goto LABEL_12;
      }
      if ((sub_216B4C42C(v11) & 1) != 0)
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
      }
      else
      {
        if (v11 == 45 || (v18 = a2 + 1, (v11 - 97) <= 0x19u))
        {
          v18 = a2 + 1;
          do
          {
            v19 = *++v18;
            v11 = v19;
            v20 = (v19 - 97);
          }
          while (v19 == 45 || v20 < 0x1A);
        }
        v15 = (_DWORD)v18 - (_DWORD)v12;
        if (v11 == 123)
        {
          v16 = (unsigned __int8 *)(v18 + 1);
          v22 = sub_216B4C440((unsigned __int8 *)v18 + 1, a3, 0x7Du);
          v17 = (unsigned __int8 *)(a2 + 1);
          v14 = (_DWORD)v22 - (_DWORD)v16;
          LOBYTE(v11) = v22[1];
          v12 = v22 + 1;
        }
        else
        {
          v14 = 0;
          v16 = 0;
          v17 = (unsigned __int8 *)(a2 + 1);
          v12 = v18;
        }
      }
      v117 = 0;
      v96 = (char)v11 - 48;
      v23 = sub_216B4C3F4(a1, v96);
      v117 = v23;
      if (sub_216B4C528(v17, v15))
      {
        a2 = v12 + 3;
        v24 = v12[2];
        v25 = v24 - 48;
        v26 = sub_216B4C3F4(a1, v24 - 48);
        if (v117 != 6 || v26 != 6)
        {
          v52 = v24;
          v53 = sub_216B4C440(v16, (char *)&v16[v14], 0x7Cu);
          v54 = sub_216B4C440(v16, v53, 0x24u);
          v55 = sub_216B4C440((unsigned __int8 *)v54 + 1, v53, 0x24u);
          LOBYTE(v115) = 37;
          BYTE1(v115) = v11;
          LOBYTE(v102) = 37;
          BYTE1(v102) = v52;
          v56 = v16;
          a4 = v95;
          sub_216B4B8D8(a1, v56, v54, v95);
          sub_216B4B8D8(a1, &v115, (char *)&v115 + 2, v95);
          sub_216B4B8D8(a1, v54 + 1, v55, v95);
          sub_216B4B8D8(a1, &v102, (char *)&v102 + 2, v95);
          sub_216B4B8D8(a1, v55 + 1, v53, v95);
          goto LABEL_12;
        }
        v117 = 11;
        v27 = (char)v11 - 48;
LABEL_31:
        *(_QWORD *)&v115 = sub_216B4C404(a1, v27);
        *((_QWORD *)&v115 + 1) = sub_216B4C404(a1, v25);
        v28 = sub_216B1E600((uint64_t)a1);
        v116 = v116 & 0xFB | (4 * *(_BYTE *)(v28 + 11));
        v29 = sub_216B1E600((uint64_t)a1);
        v116 = v116 & 0xE7 | (8 * *(_BYTE *)(v29 + 13));
        v94 = v14;
        v30 = (char *)&v16[v14];
        v93 = sub_216B4C440(v16, v30, 0x7Cu);
        if (!*(_BYTE *)(sub_216B1E600((uint64_t)a1) + 12))
          goto LABEL_34;
        if (!sub_216B29084(v118))
          goto LABEL_34;
        v116 |= 3u;
        v31 = sub_216B1E600((uint64_t)a1);
        v32 = v117;
        sub_216B1E684(v110, v17, v15);
        sub_216B1E684(v109, v16, v94);
        sub_216B380EC(v108, v120);
        sub_216B2D798(v107, v119);
        sub_216B4C7CC(v31, v32, (uint64_t)&v115, v110[0], v110[1], v109[0], v109[1], v33, v108[0], v108[1], (uint64_t)v118, v107[0], v107[1]);
        if (!sub_216B29084(v118))
        {
          v46 = v30;
          v40 = v93;
          a4 = v95;
        }
        else
        {
LABEL_34:
          v34 = sub_216B4C440(v16, v30, 0x24u);
          v35 = v34 + 1;
          v92 = sub_216B4C440((unsigned __int8 *)v34 + 1, v30, 0x24u);
          sub_216B4B8D8(a1, v16, v34, v95);
          v116 = v116 & 0xFC | 2;
          v36 = sub_216B1E600((uint64_t)a1);
          v37 = v117;
          sub_216B1E684(v106, v17, v15);
          sub_216B1E684(v105, v16, v94);
          sub_216B380EC(v104, v120);
          sub_216B2D798(v103, v119);
          sub_216B4C7CC(v36, v37, (uint64_t)&v115, v106[0], v106[1], v105[0], v105[1], v38, v104[0], v104[1], (uint64_t)v95, v103[0], v103[1]);
          if ((v116 & 0x10) == 0)
          {
            v101 = 6;
            *(_QWORD *)&v102 = sub_216B2D2E0((uint64_t)&v101, (uint64_t)&v115);
            *((_QWORD *)&v102 + 1) = v39;
            sub_216B267B0((uint64_t)v120, &v102);
          }
          v40 = v92;
          sub_216B4B8D8(a1, v35, v92, v95);
          v116 &= ~2u;
          v41 = sub_216B1E600((uint64_t)a1);
          v42 = v117;
          sub_216B1E684(v100, v17, v15);
          v43 = v16;
          a4 = v95;
          sub_216B1E684(v99, v43, v94);
          sub_216B380EC(v98, v120);
          sub_216B2D798(v97, v119);
          sub_216B4C7CC(v41, v42, (uint64_t)&v115, v100[0], v100[1], v99[0], v99[1], v44, v98[0], v98[1], (uint64_t)v95, v97[0], v97[1]);
          if ((v116 & 0x10) == 0)
          {
            v101 = 6;
            *(_QWORD *)&v102 = sub_216B2D2E0((uint64_t)&v101, (uint64_t)&v115 + 8);
            *((_QWORD *)&v102 + 1) = v45;
            sub_216B267B0((uint64_t)v120, &v102);
          }
          v27 = v96;
          v46 = v93;
        }
        sub_216B4B8D8(a1, v40 + 1, v46, a4);
        goto LABEL_80;
      }
      a2 = v12 + 1;
      v27 = (char)v11 - 48;
      v25 = v96;
      switch(v23)
      {
        case 0u:
          v60 = sub_216B4C550(a1, v96);
          v62 = sub_216B29A94(v60, v61);
          v64 = sub_216B29ABC(v60, v63);
          a4 = v95;
          sub_216B2A980(v95, v62, v64);
          goto LABEL_80;
        case 1u:
          v65 = sub_216B4C404(a1, v96);
          if (v65)
            v66 = (char *)v65;
          else
            v66 = "(null)";
          v67 = strlen(v66);
          a4 = v95;
          sub_216B202D8(v95, v66, &v66[v67]);
          goto LABEL_80;
        case 2u:
          v68 = sub_216B4C564(a1, v96);
          if (sub_216B4C574((uint64_t)v17, v15, (uint64_t)"select"))
            goto LABEL_57;
          if (sub_216B4C620(v17, v15))
            goto LABEL_64;
          if (sub_216B4C574((uint64_t)v17, v15, (uint64_t)"plural"))
            goto LABEL_71;
          if (sub_216B4C71C(v17, v15))
            goto LABEL_76;
          a4 = v95;
          sub_216B40D84(&v115);
          sub_216B2E0F8((void **)&v115, v68);
          goto LABEL_78;
        case 3u:
          v68 = sub_216B4C564(a1, v96);
          if (sub_216B4C574((uint64_t)v17, v15, (uint64_t)"select"))
          {
LABEL_57:
            v69 = v16;
            a4 = v95;
            sub_216B4C5A4((uint64_t)a1, v68, v69, v14, (uint64_t)v95);
          }
          else if (sub_216B4C620(v17, v15))
          {
LABEL_64:
            a4 = v95;
            sub_216B4C640(v68, (uint64_t)v95);
          }
          else if (sub_216B4C574((uint64_t)v17, v15, (uint64_t)"plural"))
          {
LABEL_71:
            v83 = v16;
            a4 = v95;
            sub_216B4C678((uint64_t)a1, v68, v83, v14, (uint64_t)v95);
          }
          else if (sub_216B4C71C(v17, v15))
          {
LABEL_76:
            a4 = v95;
            sub_216B4C754(v68);
          }
          else
          {
            a4 = v95;
            sub_216B40D84(&v115);
            sub_216B248D8((void **)&v115, v68);
LABEL_78:
            sub_216B40DB8(&v115);
          }
          v27 = v96;
          goto LABEL_80;
        case 4u:
          v70 = sub_216B4C404(a1, v96);
          a4 = v95;
          sub_216B40D84(&v115);
          v71 = sub_216B69A9C(v70);
          if (v71)
          {
            v72 = v71;
            v73 = sub_216B251FC((uint64_t)&v115, 39);
            v74 = sub_216B248A0(v73, v72);
            sub_216B251FC((uint64_t)v74, 39);
LABEL_67:
            v27 = v96;
            goto LABEL_68;
          }
          v82 = sub_216B69AC4(v70);
          if (v82)
          {
            sub_216B248A0((uint64_t)&v115, v82);
            goto LABEL_67;
          }
          v84 = sub_216B4C7B8(v70);
          v27 = v96;
          if (v84)
          {
            v85 = (char *)v84;
          }
          else
          {
            v86 = sub_216B69A8C(v70);
            if (v86)
            {
              v87 = v86;
              v88 = sub_216B251FC((uint64_t)&v115, 60);
              v80 = sub_216B248A0(v88, v87);
              v81 = 62;
LABEL_62:
              sub_216B251FC((uint64_t)v80, v81);
              goto LABEL_68;
            }
            v85 = "(null)";
          }
          sub_216B248A0((uint64_t)&v115, v85);
LABEL_68:
          sub_216B40DB8(&v115);
LABEL_80:
          v23 = v117;
          if (!v117)
          {
LABEL_45:
            v101 = 1;
            v57 = sub_216B4C550(a1, v27);
            *(_QWORD *)&v102 = sub_216B26084(v57);
            v58 = sub_216B2D2E0((uint64_t)&v101, (uint64_t)&v102);
LABEL_83:
            *(_QWORD *)&v115 = v58;
            *((_QWORD *)&v115 + 1) = v59;
            sub_216B267B0((uint64_t)v120, &v115);
            goto LABEL_12;
          }
LABEL_81:
          if (v23 != 11)
          {
            *(_QWORD *)&v102 = sub_216B4C404(a1, v27);
            v58 = sub_216B2D2E0((uint64_t)&v117, (uint64_t)&v102);
            goto LABEL_83;
          }
LABEL_12:
          if (a2 == a3)
            goto LABEL_87;
          break;
        case 5u:
          v75 = sub_216B4C404(a1, v96);
          if (v75)
          {
            v76 = v75;
            a4 = v95;
            sub_216B40D84(&v115);
            v77 = sub_216B251FC((uint64_t)&v115, 39);
            v78 = sub_216B4A11C(v76);
            v80 = sub_216B248E0(v77, v78, v79);
            v81 = 39;
            goto LABEL_62;
          }
          a4 = v95;
          sub_216B202D8(v95, "(null)", "");
          goto LABEL_12;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xCu:
          v47 = sub_216B1E600((uint64_t)a1);
          v48 = v117;
          v49 = sub_216B4C404(a1, v96);
          sub_216B1E684(v114, v17, v15);
          sub_216B1E684(v113, v16, v14);
          sub_216B380EC(v112, v120);
          sub_216B2D798(v111, v119);
          a4 = v95;
          v50 = v48;
          v27 = v96;
          sub_216B4C7CC(v47, v50, v49, v114[0], v114[1], v113[0], v113[1], v51, v112[0], v112[1], (uint64_t)v95, v111[0], v111[1]);
          goto LABEL_80;
        case 0xBu:
          goto LABEL_31;
        default:
          a4 = v95;
          v27 = v96;
          if (!v23)
            goto LABEL_45;
          goto LABEL_81;
      }
    }
  }
LABEL_87:
  v89 = (char *)sub_216B1E600((uint64_t)v118);
  v90 = (char *)sub_216B1E67C((uint64_t)v118);
  sub_216B202D8(a4, v89, v90);
  sub_216B1FF6C(v118);
  sub_216B1FF6C(v119);
  return sub_216B1FF6C(v120);
}

uint64_t sub_216B4C3E8(uint64_t a1)
{
  return *(char *)(*(_QWORD *)a1 + 288);
}

uint64_t sub_216B4C3F4(_QWORD *a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*a1 + a2 + 289);
}

uint64_t sub_216B4C404(_QWORD *a1, unsigned int a2)
{
  return *(_QWORD *)(*a1 + 8 * a2 + 544);
}

BOOL sub_216B4C414(int a1)
{
  return (word_216C12D0C[a1] & 0x780) != 0;
}

uint64_t sub_216B4C42C(int a1)
{
  return ((unsigned __int16)word_216C12D0C[a1] >> 3) & 1;
}

char *sub_216B4C440(unsigned __int8 *a1, char *a2, unsigned __int8 a3)
{
  unsigned __int8 *v3;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v3 = a1;
  if (a1 == (unsigned __int8 *)a2)
    return (char *)v3;
  v5 = 0;
  v6 = a3;
  while (1)
  {
    v7 = (char)*v3;
    if (v5)
    {
      v5 -= v7 == 125;
    }
    else
    {
      if (v7 == v6)
        return (char *)v3;
      v5 = 0;
    }
    if (v7 != 37)
      goto LABEL_12;
    if (v3 + 1 == (unsigned __int8 *)a2)
      return a2;
    v8 = v3[1];
    if ((sub_216B4C42C(v8) & 1) == 0 && !sub_216B4C414(v8))
      break;
    ++v3;
LABEL_12:
    if (++v3 == (unsigned __int8 *)a2)
      return a2;
  }
  for (v3 += 2; v3 != (unsigned __int8 *)a2; ++v3)
  {
    v9 = *v3;
    if ((sub_216B4C42C(v9) & 1) != 0 || v9 == 123)
    {
      if (v9 == 123)
        ++v5;
      goto LABEL_12;
    }
  }
  return a2;
}

BOOL sub_216B4C528(_DWORD *a1, int a2)
{
  return a2 == 4 && *a1 == 1717987684;
}

uint64_t sub_216B4C550(_QWORD *a1, unsigned int a2)
{
  return *a1 + 24 * a2 + 304;
}

uint64_t sub_216B4C564(_QWORD *a1, unsigned int a2)
{
  return *(unsigned int *)(*a1 + 8 * a2 + 544);
}

BOOL sub_216B4C574(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 != 6)
    return 0;
  return *(_DWORD *)a1 == *(_DWORD *)a3 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a3 + 4);
}

uint64_t sub_216B4C5A4(uint64_t a1, int a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  unsigned __int8 *v6;
  char *v8;
  int v9;
  char *v10;

  v6 = a3;
  v8 = (char *)&a3[a4];
  if (a2)
  {
    v9 = a2;
    do
    {
      v6 = (unsigned __int8 *)(sub_216B4C440(v6, v8, 0x7Cu) + 1);
      --v9;
    }
    while (v9);
  }
  v10 = sub_216B4C440(v6, v8, 0x7Cu);
  return sub_216B4B8D8(a1, v6, v10, a5);
}

BOOL sub_216B4C620(unsigned __int8 *a1, int a2)
{
  return a2 == 1 && *a1 == 115;
}

uint64_t sub_216B4C640(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  if ((_DWORD)result != 1)
  {
    v5 = v2;
    v6 = v3;
    v4 = 115;
    return sub_216B1FBBC(a2, &v4);
  }
  return result;
}

uint64_t sub_216B4C678(uint64_t a1, unsigned int a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  unsigned __int8 *v6;
  char *i;
  unsigned __int8 *v10;
  int v11;
  char *v12;

  v6 = a3;
  for (i = (char *)&a3[a4]; ; v6 = (unsigned __int8 *)(sub_216B4C440(v6, i - 1, 0x7Cu) + 1))
  {
    v10 = v6;
    do
      v11 = *v10++;
    while (v11 != 58);
    if ((sub_216B4D26C(a2, v6, v10 - 1) & 1) != 0)
      break;
  }
  v12 = sub_216B4C440(v10, i, 0x7Cu);
  return sub_216B4B8D8(a1, v10, v12, a5);
}

BOOL sub_216B4C71C(_DWORD *a1, int a2)
{
  if (a2 != 7)
    return 0;
  return *a1 == 1768190575 && *(_DWORD *)((char *)a1 + 3) == 1818324585;
}

uint64_t sub_216B4C754(unsigned int a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void *v6[6];

  sub_216B40D84(v6);
  v2 = sub_216B248D8(v6, a1);
  v3 = sub_216B4D41C(a1);
  sub_216B248E0((uint64_t)v2, v3, v4);
  return sub_216B40DB8(v6);
}

const char *sub_216B4C7B8(int a1)
{
  if (a1 == 6)
    return "identifier";
  else
    return 0;
}

uint64_t sub_216B4C7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 192))(a2, a3, a4, a5, a6, a7, a9, a10, a11, *(_QWORD *)(a1 + 184), a12, a13);
}

uint64_t sub_216B4C808(uint64_t *a1)
{
  return sub_216B4CA44(*a1);
}

uint64_t sub_216B4C810(_QWORD *a1)
{
  return *a1 + 12 * a1[1];
}

uint64_t sub_216B4C820(_QWORD *a1)
{
  return *a1 + 56 * a1[1];
}

uint64_t sub_216B4C830()
{
  return 1;
}

_QWORD *sub_216B4C83C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  sub_216B4C890(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216B4C890(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 56;
      result = sub_216B4C8CC(v2);
    }
    while (v2 != v3);
  }
  return result;
}

std::string *sub_216B4C8D0(std::string *a1)
{
  std::string::~string(a1 + 1);
  return a1;
}

uint64_t sub_216B4C8FC(uint64_t a1, uint64_t a2)
{
  sub_216B4C920(a1, a2);
  return a1;
}

uint64_t sub_216B4C920(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_216B4C998(a1, a2);
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (uint64_t *)sub_216B25D14(a1, v4);
    sub_216B4C9B8(v5, *v6);
    result = sub_216B2C144(a1, v7);
    *(_QWORD *)result = 0;
    while ((uint64_t *)v5 != v6)
    {
      v8 = j_j_nullsub_1(v5);
      v5 = *(_QWORD *)(v5 + 8);
      result = sub_216B4C9D4(a1, v8);
    }
  }
  return result;
}

BOOL sub_216B4C998(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)sub_216B2C144(a1, a2) == 0;
}

uint64_t sub_216B4C9B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)result + 8) = *(_QWORD *)(a2 + 8);
  **(_QWORD **)(a2 + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_216B4C9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_216B2C144(a1, a2);
  v4 = sub_216B28BEC(a2);
  sub_216B4CA20(v3, v4);
  j_j_nullsub_1(a2);
  return sub_216B4CA28(v3, a2, 1);
}

uint64_t sub_216B4CA20(uint64_t a1, uint64_t a2)
{
  return sub_216B4CA2C(a2);
}

uint64_t sub_216B4CA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 40 * a3, 8);
}

uint64_t sub_216B4CA44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_216B4CA4C(uint64_t a1)
{
  return sub_216B4CA54(a1, 0);
}

uint64_t sub_216B4CA58(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B4CA88(v4, v2);
  return a1;
}

uint64_t sub_216B4CA88(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B4CAC0(a1, a2);
  if ((_DWORD)result)
    return sub_216B4CB08(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL sub_216B4CAC0(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
    v4 = sub_216B1D1D4(8 * a2);
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a2 != 0;
}

uint64_t sub_216B4CB08(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B4CB74();
  v3 = (_DWORD *)sub_216B262E0(a1);
  result = sub_216B4CB78(a1);
  while (v3 != (_DWORD *)result)
  {
    *v3 = v2;
    v3 += 2;
  }
  return result;
}

uint64_t sub_216B4CB78(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 8 * sub_216B4CBC0(a1);
}

uint64_t sub_216B4CBA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_216B4CBB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t sub_216B4CBB8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_216B4CBC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void **sub_216B4CBD4(void **a1)
{
  sub_216B4CC00((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B4CC00(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v6 = sub_216B4CB74();
    v5 = sub_216B4CC84();
    v3 = (_DWORD *)sub_216B262E0(a1);
    result = sub_216B4CB78(a1);
    if (v3 != (_DWORD *)result)
    {
      v4 = (_DWORD *)result;
      do
      {
        result = sub_216B4CC88(v3, &v6);
        if ((result & 1) == 0)
          result = sub_216B4CC88(v3, &v5);
        v3 += 2;
      }
      while (v3 != v4);
    }
  }
  return result;
}

BOOL sub_216B4CC88(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216B4CC9C()
{
  return 4294967294;
}

_DWORD *sub_216B4CCA4(_DWORD *a1)
{
  _DWORD *result;

  result = sub_216B4AEBC(a1);
  *((_QWORD *)result + 1) = 0;
  return result;
}

void sub_216B4CCBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  std::string v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  *(_BYTE *)(*a1 + *((unsigned int *)a1 + 2) + 289) = 0;
  sub_216B24898(v7, (uint64_t)&v6);
  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v5 + 1;
  sub_216B26E7C(v4 + 24 * v5 + 304, (uint64_t)&v6);
  std::string::~string(&v6);
}

uint64_t sub_216B4CD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)(a1 + 280) = a2;
  *(_DWORD *)(a1 + 284) = a3;
  sub_216B25BB0(a1 + 256, a2);
  return sub_216B4CD64(a4, a1);
}

uint64_t sub_216B4CD68(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 1;
  sub_216B20594((_QWORD *)(a2 + 624));
  sub_216B4B5E0((_QWORD *)(a2 + 744));
  return a1;
}

uint64_t sub_216B4CDAC(uint64_t a1)
{
  sub_216B4CDD0(a1);
  return a1;
}

uint64_t sub_216B4CDD0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_216B4CE18(a1);
  if ((_DWORD)result)
  {
    sub_216B4CE20((_DWORD *)a1);
    v3 = sub_216B4B67C(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 13));
    sub_216B4CE30(a1);
    return v3;
  }
  return result;
}

uint64_t sub_216B4CE18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

_DWORD *sub_216B4CE20(_DWORD *result)
{
  *(_BYTE *)(*(_QWORD *)result + 288) = result[2];
  return result;
}

uint64_t sub_216B4CE30(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_WORD *)(result + 12) = 0;
  return result;
}

uint64_t sub_216B4CE3C(char a1, int a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;

  if (a2)
    v3 = 8;
  else
    v3 = 0;
  v4 = v3 & 0xFFFFFFF8 | a1 & 7;
  if (a3)
    v5 = 16;
  else
    v5 = 0;
  return v4 | v5;
}

uint64_t sub_216B4CE60(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = sub_216B4CE98(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t sub_216B4CE98(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v15 = sub_216B4CB74();
    v14 = sub_216B4CC84();
    v9 = v8 - 1;
    v10 = sub_216B4CFA8(a2) & (v8 - 1);
    v11 = (_DWORD *)(v6 + 8 * v10);
    if (sub_216B4CC88(a2, v11))
    {
LABEL_8:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (!sub_216B4CC88(v11, &v15))
      {
        if (sub_216B4CC88(v11, &v14) && v12 == 0)
          v12 = v11;
        v10 = (v10 + v13) & v9;
        v11 = (_DWORD *)(v6 + 8 * v10);
        ++v13;
        if (sub_216B4CC88(a2, v11))
          goto LABEL_8;
      }
      result = 0;
      if (v12)
        v11 = v12;
    }
    *a3 = v11;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_216B4CFAC(_DWORD *a1)
{
  return (37 * *a1);
}

_DWORD *sub_216B4CFBC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _DWORD *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B4D0A8(a1, (2 * v6));
    sub_216B4CE60(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B4D0A8(a1, v7);
    sub_216B4CE60(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v9 = sub_216B4CB74();
  if (!sub_216B4CC88(v10, &v9))
    sub_216B4D0D8(a1);
  return v10;
}

uint64_t sub_216B4D0B0(uint64_t a1)
{
  int v2;

  v2 = sub_216B4D0A4() + 1;
  return sub_216B4CB6C(a1, v2);
}

uint64_t sub_216B4D0D8(uint64_t a1)
{
  int v2;

  v2 = sub_216B4D0AC() - 1;
  return sub_216B4CB70(a1, v2);
}

uint64_t sub_216B4D100(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_216B4D108(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B4CAC0(a1, *v5);
  if (v4)
  {
    sub_216B4D190(a1, v4, &v4[2 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B4CB08(a1);
  }
}

uint64_t sub_216B4D190(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v7;
  int v8;
  int v9;

  sub_216B4CB08(a1);
  v9 = sub_216B4CB74();
  result = sub_216B4CC84();
  v8 = result;
  while (a2 != a3)
  {
    result = sub_216B4CC88(a2, &v9);
    if ((result & 1) == 0)
    {
      result = sub_216B4CC88(a2, &v8);
      if ((result & 1) == 0)
      {
        v7 = 0;
        sub_216B4CE60(a1, a2, &v7);
        *v7 = *a2;
        v7[1] = a2[1];
        result = sub_216B4D0B0(a1);
      }
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_216B4D23C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

_QWORD *sub_216B4D244(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  sub_216B26D14(a1 + 1);
  return a1;
}

uint64_t sub_216B4D26C(unsigned int a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;

  v11 = a2;
  v3 = *a2;
  if (v3 != 58)
  {
    while (1)
    {
      if (v3 == 37)
      {
        v11 = a2 + 1;
        v7 = sub_216B4D334(&v11, a3);
        ++v11;
        v8 = a1 % v7;
      }
      else
      {
        v8 = a1;
      }
      if (sub_216B4D380(v8, &v11, a3))
        break;
      v10 = 44;
      v9 = sub_216B2B0D0((uint64_t)v11, (uint64_t)a3, &v10);
      if ((unsigned __int8 *)v9 == a3)
        return 0;
      a2 = (unsigned __int8 *)(v9 + 1);
      v3 = *(unsigned __int8 *)(v9 + 1);
      v11 = (unsigned __int8 *)(v9 + 1);
    }
  }
  return 1;
}

uint64_t sub_216B4D334(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = *a1;
  if (*a1 == a2)
    return 0;
  result = 0;
  do
  {
    v5 = *v2;
    if ((v5 - 48) > 9)
      break;
    result = (v5 + 10 * result - 48);
    *a1 = ++v2;
  }
  while (v2 != a2);
  return result;
}

BOOL sub_216B4D380(unsigned int a1, unsigned __int8 **a2, unsigned __int8 *a3)
{
  unsigned int v6;
  unsigned int v7;

  if (**a2 != 91)
    return sub_216B4D334(a2, a3) == a1;
  ++*a2;
  v6 = sub_216B4D334(a2, a3);
  ++*a2;
  v7 = sub_216B4D334(a2, a3);
  ++*a2;
  return v6 <= a1 && v7 >= a1;
}

uint64_t sub_216B4D41C(unsigned int a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v4;

  if (a1 % 0x64 - 11 < 3 || (v1 = a1 % 0xA - 1, v1 > 2))
    v2 = "th";
  else
    v2 = off_24D5F0860[v1];
  sub_216B1E678((int)&v4, v2);
  return v4;
}

unint64_t sub_216B4D4A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return 0xAAAAAAAAAAAAAAABLL * ((v2 - sub_216B1E600(a1)) >> 2);
}

uint64_t sub_216B4D4E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return 0x6DB6DB6DB6DB6DB7 * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B4D528(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 56 * a2);
}

_QWORD *sub_216B4D534(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B4D650(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = (__n128 *)nullsub_1(v10, v6);
  sub_216B4D654(v5, v7, a2);
  v10 += 24;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B4D5A4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, (uint64_t)a2);
  v5 = sub_216B2BFE4(a1);
  v6 = sub_216B2C364(a1, v5 + 1);
  v7 = sub_216B2BFE4(a1);
  sub_216B2C3DC(v12, v6, v7, v4);
  v9 = (__n128 *)nullsub_1(v13, v8);
  sub_216B4D654(v4, v9, a2);
  v13 += 24;
  sub_216B4D68C(a1, v12);
  v10 = a1[1];
  sub_216B4D778(v12);
  return v10;
}

_QWORD *sub_216B4D658(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 24 * a3;
  return result;
}

__n128 sub_216B4D678(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_216B4D68C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216B4D77C();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2BFE4(a1);
  return nullsub_1(a1, v10);
}

uint64_t sub_216B4D77C()
{
  return sub_216B4D798();
}

uint64_t sub_216B4D798()
{
  _QWORD v1[3];

  sub_216B4D7BC(v1);
  return v1[2];
}

uint64_t sub_216B4D7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B4D890(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216B4D890@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  while (sub_216B2C76C((uint64_t)v15, (uint64_t)v14))
  {
    v9 = sub_216B4D924((uint64_t)v15, v8);
    v10 = sub_216B2C7A4((uint64_t)v13);
    v11 = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v10 = *(_OWORD *)v9;
    *(_QWORD *)(v10 + 16) = v11;
    sub_216B2C7B0((uint64_t)v15);
    sub_216B2C7B0((uint64_t)v13);
  }
  return sub_216B26D04((uint64_t)v15, (uint64_t)v13, a7);
}

uint64_t sub_216B4D924(uint64_t a1, uint64_t a2)
{
  nullsub_1(a1, a2);
  return sub_216B2C7A4(a1);
}

uint64_t *sub_216B4D948(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_216B4D9A4((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B2C868(a1, v4);
    sub_216B2C140(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B4D9A4(uint64_t a1)
{
  return sub_216B4D9AC(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B4D9B0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 24;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = j_nullsub_1(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

char *sub_216B4DA18(const void **a1, uint64_t a2)
{
  return sub_216B203B4(a1, 12 * a2, 12);
}

uint64_t sub_216B4DA28(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B4DB20((uint64_t)a1);
  v5 = sub_216B4D4E0((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(56 * v7, 0x1012040998C4DBDuLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B4DB68(v9, v10, (uint64_t)v8);
  v11 = sub_216B1E600((uint64_t)a1);
  v12 = sub_216B1E67C((uint64_t)a1);
  sub_216B4C890(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 56 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 56 * v7;
  return result;
}

uint64_t sub_216B4DB20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return 0x6DB6DB6DB6DB6DB7 * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B4DB68(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B4DBB8(a3, v5);
      v5 += 56;
      a3 += 56;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216B4DBBC(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  sub_216B2B018(a1 + 24, (char *)a2 + 24);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t sub_216B4DC00(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  std::string::basic_string((std::string *)(a1 + 24), (const std::string *)a2 + 1);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t sub_216B4DC44(uint64_t a1)
{
  return sub_216B4DC4C(a1, 8u);
}

uint64_t sub_216B4DC4C(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 12 * a2);
}

uint64_t *sub_216B4DC58(uint64_t *a1, uint64_t *a2)
{
  *a1 = *a2;
  sub_216B4DC84(a1);
  return a1;
}

uint64_t sub_216B4DC84(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216B4DC94();
  return result;
}

_DWORD *sub_216B4DC98(_DWORD *result)
{
  ++*result;
  return result;
}

uint64_t *sub_216B4DCA8(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  sub_216B4DC84(a1);
  return a1;
}

uint64_t sub_216B4DCD4(uint64_t a1)
{
  uint64_t v2;
  char v4;
  int v5;

  v2 = sub_216B4DD14();
  v5 = 0;
  sub_216B3D94C(v2 + 16, &v5, &v4);
  return a1;
}

_QWORD *sub_216B4DD18(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = j_nullsub_1(a1, a2);
  *a1 = nullsub_1(v3, v4);
  v6 = j_nullsub_1(a1, v5);
  a1[1] = nullsub_1(v6, v7);
  return a1;
}

uint64_t sub_216B4DD54(uint64_t a1)
{
  return sub_216B4D528(a1, 8u);
}

uint64_t *sub_216B4DD5C(uint64_t *a1)
{
  sub_216B4DD80(a1);
  return a1;
}

uint64_t sub_216B4DD80(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216B4DD90();
  return result;
}

void sub_216B4DD94(_DWORD *a1)
{
  void *v2;

  if ((*a1)-- == 1)
  {
    v2 = (void *)sub_216B4E918();
    j__free(v2);
  }
}

uint64_t *sub_216B4DDC0(uint64_t *a1)
{
  sub_216B4DDE4(a1);
  return a1;
}

uint64_t sub_216B4DDE4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216B4DDF4();
  return result;
}

void sub_216B4DDF8(_DWORD *a1)
{
  void *v2;

  if ((*a1)-- == 1)
  {
    v2 = (void *)sub_216B4DE24();
    j__free(v2);
  }
}

uint64_t sub_216B4DE28(uint64_t a1)
{
  sub_216B2C034(a1 + 112);
  sub_216B2C034(a1 + 88);
  std::string::~string((std::string *)(a1 + 64));
  std::string::~string((std::string *)(a1 + 40));
  return a1;
}

uint64_t sub_216B4DE68(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B4DEA4(&v3);
  return a1;
}

uint64_t *sub_216B4DEA4(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B4DF08(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B2C14C(v6, v8);
    return (uint64_t *)sub_216B2C140(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B4DF08(uint64_t *a1)
{
  return sub_216B4DF10((uint64_t)a1, *a1);
}

uint64_t sub_216B4DF10(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = j_nullsub_1(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 24;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B4DF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v12 = a3;
  v5 = sub_216B2C144(a1, a2);
  sub_216B4E040((uint64_t)v11, 1);
  v6 = sub_216B2037C((uint64_t)v11);
  sub_216B4E044(v6, &v13, &v12);
  v7 = sub_216B2037C((uint64_t)v11);
  v8 = sub_216B28BEC(v7);
  sub_216B4E050(v5, v8, a4);
  v9 = sub_216B4E054((uint64_t)v11);
  sub_216B4E064(v11);
  return v9;
}

uint64_t sub_216B4DFFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = sub_216B25D14((uint64_t)a1, (uint64_t)a2);
  *(_QWORD *)(a3 + 8) = result;
  v7 = *a1;
  *a2 = *a1;
  *(_QWORD *)(v7 + 8) = a2;
  *a1 = a3;
  return result;
}

uint64_t sub_216B4E044(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return sub_216B4E0E0(a1, *a2, *a3);
}

uint64_t sub_216B4E054(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  return v1;
}

uint64_t sub_216B4E068(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = sub_216B4E094();
  return a1;
}

uint64_t sub_216B4E098(uint64_t a1, unint64_t a2)
{
  if (sub_216B4E0D0() < a2)
    sub_216B25C54();
  return sub_216B25CA0(40 * a2, 8);
}

uint64_t sub_216B4E0D4()
{
  return 0x666666666666666;
}

uint64_t sub_216B4E0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B4E0F0(a2, a3);
}

uint64_t sub_216B4E0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = nullsub_1(a1, a2);
  sub_216B4CA88(v4, 0);
  sub_216B4E138(a1, a2);
  return a1;
}

int *sub_216B4E138(uint64_t a1, uint64_t a2)
{
  sub_216B20BF4((uint64_t *)a1, (uint64_t *)a2);
  sub_216B2CE38((int *)(a1 + 8), (int *)(a2 + 8));
  sub_216B2CE38((int *)(a1 + 12), (int *)(a2 + 12));
  return sub_216B2CE38((int *)(a1 + 16), (int *)(a2 + 16));
}

uint64_t sub_216B4E17C(uint64_t a1)
{
  sub_216B4E1A0(a1);
  return a1;
}

uint64_t sub_216B4E1A0(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
    return sub_216B4CA28(result, v1, *(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_216B4E1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  char v5;

  return sub_216B4E1D8(a1, a2, a3, (uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_216B4E1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v8 = a1;
  v17 = a1;
  v9 = sub_216B4E294(a1, a2);
  if (v9)
  {
    v10 = v9;
    do
    {
      v11 = sub_216B3556C(v10);
      sub_216B4E298(&v17, v11);
      v16 = v12;
      v13 = sub_216B1E600((uint64_t)&v16);
      v14 = sub_216B3557C(a5, v13);
      if ((sub_216B4E2A0(a4, a3, v14) & 1) == 0)
      {
        v17 = *sub_216B4B50C(&v16);
        v11 = v10 + ~v11;
      }
      v10 = v11;
    }
    while (v11);
    return v17;
  }
  return v8;
}

void sub_216B4E298(uint64_t *a1, uint64_t a2)
{
  sub_216B4E310(*a1, a2);
}

unint64_t sub_216B4E2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return sub_216B4E2D0((uint64_t)&v3, (uint64_t)&v4);
}

unint64_t sub_216B4E2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return 0xAAAAAAAAAAAAAAABLL * ((v3 - sub_216B1E600(a2)) >> 3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216B4E310(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_216B4E338((uint64_t)&v2, a2);
}

uint64_t sub_216B4E338(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B4E364(a1, v3);
}

_QWORD *sub_216B4E368(_QWORD *result, uint64_t a2)
{
  *result += 24 * a2;
  return result;
}

BOOL sub_216B4E37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B4E388(a2, a3);
}

BOOL sub_216B4E388(uint64_t a1, uint64_t a2)
{
  _DWORD *v5;

  if (sub_216B4B4A8((_DWORD *)(a2 + 8)))
    return 0;
  v5 = (_DWORD *)(a1 + 8);
  return sub_216B4B4A8(v5) || sub_216B4B4B8((uint64_t)v5, *(_QWORD *)(a2 + 8));
}

uint64_t sub_216B4E3E4(uint64_t a1)
{
  return sub_216B264A8(a1, 0x100u);
}

unint64_t sub_216B4E3EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return 0xAAAAAAAAAAAAAAABLL * ((v2 - sub_216B1E600(a1)) >> 2);
}

uint64_t sub_216B4E42C(uint64_t a1)
{
  return sub_216B2F340(a1, 2u);
}

unint64_t sub_216B4E438(uint64_t a1, uint64_t a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
}

uint64_t sub_216B4E450()
{
  uint64_t v0;

  sub_216B4E468();
  return v0;
}

uint64_t sub_216B4E470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (char *)j_j_nullsub_1(a3);
  v9 = sub_216B4E4FC((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B4E4FC(int a1, const void *a2, uint64_t a3, char *__dst)
{
  return sub_216B4E50C(a2, a3, __dst);
}

uint64_t sub_216B4E50C(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216B4E56C(__dst, a1, 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 2));
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

void *sub_216B4E56C(void *__dst, const void *a2, uint64_t a3)
{
  if (a3)
    memmove(__dst, a2, 12 * a3 - 3);
  return __dst;
}

unsigned __int16 *sub_216B4E5A4(unsigned int a1)
{
  unsigned __int16 *result;

  result = sub_216B4E5C4(a1);
  if (result)
    return (unsigned __int16 *)((result[1] >> 10) & 0x1F);
  return result;
}

unsigned __int16 *sub_216B4E5C4(unsigned int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int16 *v6;

  if (a1 - 5720 < 0xFFFFE9A9)
    return 0;
  if (a1 <= 0x12C)
    v1 = 0;
  else
    v1 = 68;
  if (a1 <= 0x12C)
    v2 = -1;
  else
    v2 = -301;
  v3 = v2 + a1;
  if (a1 > 0x190)
  {
    v1 += 84;
    v3 -= 100;
  }
  if (a1 > 0x1F4)
  {
    v1 += 93;
    v3 -= 100;
  }
  if (a1 > 0x26C)
  {
    v1 += 34;
    v3 -= 120;
  }
  if (a1 > 0x398)
  {
    v1 += 294;
    v3 -= 300;
  }
  if (a1 > 0x58C)
  {
    v1 += 416;
    v3 -= 500;
  }
  if (a1 > 0x5F0)
  {
    v1 += 98;
    v3 -= 100;
  }
  if (a1 > 0x654)
  {
    v1 += 34;
    v3 -= 100;
  }
  if (a1 > 0x120C)
  {
    v1 += 2807;
    v3 -= 3000;
  }
  if (a1 > 0x1270)
    v3 -= 100;
  v4 = v3 + v1;
  if (v4 > 0xF6E)
    return 0;
  v6 = (unsigned __int16 *)((char *)&unk_24D5F0AA8 + 16 * v4);
  if (*v6 == a1)
    return v6;
  else
    return 0;
}

uint64_t sub_216B4E6D4(uint64_t a1, unsigned int a2)
{
  int v3;
  int v5;
  uint64_t v6;
  _BYTE v7[28];
  unsigned int v8;

  v8 = a2;
  v5 = 0;
  v6 = sub_216B3A19C((uint64_t)&v8, (uint64_t)&v5);
  sub_216B4E74C(a1, &v6, (uint64_t)v7);
  if (v7[16])
  {
    v3 = sub_216B4E808(v8);
    *(_DWORD *)(sub_216B1E600((uint64_t)v7) + 4) = v3;
  }
  return sub_216B1E600((uint64_t)v7) + 4;
}

uint64_t sub_216B4E74C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  char v11;
  _BYTE v12[16];
  _DWORD *v13;

  v13 = 0;
  if (sub_216B4CE60(a1, a2, &v13))
  {
    v6 = v13;
    v7 = sub_216B4CB78(a1);
    sub_216B4F71C(v12, v6, v7, 1);
    v11 = 0;
  }
  else
  {
    v8 = sub_216B4F720(a1, a2, a2 + 1, v13);
    v13 = v8;
    v9 = sub_216B4CB78(a1);
    sub_216B4F71C(v12, v8, v9, 1);
    v11 = 1;
  }
  return sub_216B4F70C((uint64_t)v12, (uint64_t)&v11, a3);
}

uint64_t sub_216B4E808(unsigned int a1)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned int v5;

  v5 = sub_216B4CE3C(5, 0, 0);
  v2 = sub_216B4E5C4(a1);
  if (v2)
  {
    v3 = v2;
    sub_216B4B54C(&v5, v2[1] & 7);
    if ((v3[1] & 0x100) != 0)
      sub_216B4B55C(&v5, 1);
  }
  return v5;
}

uint64_t sub_216B4E878(unsigned int a1)
{
  uint64_t v2;

  if (a1 < 0x22)
    return sub_216B4E8B8((uint64_t)&(&off_24D5F0878)[2 * a1]);
  sub_216B26D14(&v2);
  return v2;
}

uint64_t sub_216B4E8B8(uint64_t a1)
{
  uint64_t v2;

  sub_216B1E684(&v2, *(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  return v2;
}

uint64_t sub_216B4E8E4(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (void *)sub_216B4E914();
    j__free(v2);
  }
  return a1;
}

BOOL sub_216B4E91C(unsigned int a1)
{
  return a1 >> 3 <= 0x2CA && sub_216B4E94C(a1) != 5;
}

uint64_t sub_216B4E94C(unsigned int a1)
{
  unsigned __int16 *v1;

  v1 = sub_216B4E5C4(a1);
  if (v1)
    return (v1[1] >> 3) & 7;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_216B4E974(unsigned int a1, BOOL *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >> 3 > 0x2CA)
    return 0;
  v8 = v2;
  v9 = v3;
  if (sub_216B4E94C(a1) != 4)
    return 0;
  v7 = sub_216B4E808(a1);
  *a2 = sub_216B4B4D4(&v7) != 1;
  return 1;
}

BOOL sub_216B4E9E8(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 >> 3 > 0x2CA)
    return 0;
  v5 = v1;
  v6 = v2;
  v4 = sub_216B4E808(a1);
  return sub_216B4B4D4(&v4) == 4;
}

uint64_t sub_216B4EA2C(uint64_t a1, unsigned int a2)
{
  unsigned __int16 *v4;

  v4 = sub_216B4E5C4(a2);
  if (v4)
    return sub_216B4EA6C((uint64_t)v4);
  else
    return sub_216B4EA98(*(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_216B4EA6C(uint64_t a1)
{
  uint64_t v2;

  sub_216B1E684(&v2, *(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 6));
  return v2;
}

uint64_t sub_216B4EA98(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = sub_216B4F6F0(a1, (a2 - 5720));
  sub_216B26CA0(&v4, v2 + 8);
  return v4;
}

uint64_t sub_216B4EACC(uint64_t a1, unsigned int a2, int a3, _BYTE *a4)
{
  uint64_t result;
  int v8;

  if (a2 >> 3 >= 0x2CB)
    return sub_216B4EB4C(*(_QWORD **)(a1 + 8), a2);
  result = sub_216B4E94C(a2);
  if ((_DWORD)result != 1)
  {
    v8 = sub_216B4EB80(result, a2, a3, a4);
    return sub_216B4EB6C(v8);
  }
  return result;
}

uint64_t sub_216B4EB4C(_QWORD *a1, int a2)
{
  return *(unsigned int *)sub_216B4F6F0(a1, (a2 - 5720));
}

uint64_t sub_216B4EB6C(int a1)
{
  return dword_216C17398[a1 - 1];
}

uint64_t sub_216B4EB80(uint64_t a1, unsigned int a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v6 = 5;
  v20 = 5;
  v21 = a3;
  v19 = sub_216B4B3B8((uint64_t)a4, a3);
  v8 = (uint64_t *)sub_216B4B51C(&v19, v7);
  v9 = (unsigned __int8 *)sub_216B4E6D4(*v8, a2);
  if (sub_216B4B4D4(v9))
  {
    v10 = sub_216B4B4D4(v9);
    v6 = v10;
    v20 = v10;
    if (a4[7] && (_DWORD)v10 == 1)
    {
      if ((sub_216B4ED5C(v9) & 1) != 0)
      {
        v6 = 1;
        goto LABEL_12;
      }
      v20 = 3;
    }
    else if ((_DWORD)v10 != 3)
    {
      goto LABEL_12;
    }
    if (sub_216B4E94C(a2) == 2)
    {
      v6 = 2;
      v20 = 2;
    }
    else
    {
      v6 = 3;
    }
  }
LABEL_12:
  v18 = 0;
  v11 = sub_216B4E974(a2, &v18);
  if (a4[4] && v11 && !v18)
    return 1;
  if (v11 && (sub_216B4ED5C(v9) & 1) == 0)
  {
    v12 = (unsigned int *)sub_216B4ED68(&v20, a4 + 32);
    v6 = *v12;
    v20 = *v12;
  }
  if ((_DWORD)v6 != 1)
  {
    if ((_DWORD)v6 == 3)
    {
      if (a4[5])
        return 1;
      if (!a4[6])
      {
LABEL_30:
        v13 = sub_216B4E5C4(a2);
        if (!v13)
          return v20;
        if (!a4[9])
          return v20;
        if ((v13[1] & 0x200) != 0)
          return v20;
        if (!sub_216B27BAC(&v21))
          return v20;
        v14 = sub_216B4CA44((uint64_t)a4);
        v15 = (_DWORD *)sub_216B4CA44((uint64_t)a4);
        v16 = sub_216B4EDA4(v15, v21);
        if (!sub_216B4ED84(v14, v16))
          return v20;
        return 1;
      }
      if (sub_216B4ED6C(v9))
      {
        LODWORD(v6) = v20;
      }
      else
      {
        LODWORD(v6) = 4;
        v20 = 4;
      }
    }
    if ((_DWORD)v6 == 4 && a4[8] && (sub_216B4ED78(v9) & 1) == 0)
      v20 = 5;
    goto LABEL_30;
  }
  return v6;
}

uint64_t sub_216B4ED5C(unsigned __int8 *a1)
{
  return (*a1 >> 3) & 1;
}

uint64_t sub_216B4ED6C(unsigned __int8 *a1)
{
  return (*a1 >> 5) & 1;
}

uint64_t sub_216B4ED78(unsigned __int8 *a1)
{
  return (*a1 >> 6) & 1;
}

BOOL sub_216B4ED84(uint64_t a1, int a2)
{
  return sub_216B63EF8(a1, a2) != 0;
}

uint64_t sub_216B4EDA4(_DWORD *a1, unsigned int a2)
{
  BOOL v3;
  uint64_t v4;
  unsigned int v6;

  v6 = a2;
  v3 = sub_216B4F6FC(&v6);
  v4 = v6;
  if (!v3)
    return sub_216B62C90(a1, v6);
  return v4;
}

uint64_t sub_216B4EDEC(unsigned int a1)
{
  unsigned __int16 *v1;
  int v2;
  uint64_t v4;

  v1 = sub_216B4E5C4(a1);
  if (v1)
  {
    v2 = sub_216B4EE34((uint64_t)v1);
    return sub_216B4EE3C(&word_216C12F28[3 * v2]);
  }
  else
  {
    sub_216B26D14(&v4);
    return v4;
  }
}

uint64_t sub_216B4EE34(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 4);
}

uint64_t sub_216B4EE3C(unsigned __int16 *a1)
{
  uint64_t v2;

  sub_216B1E684(&v2, &byte_216C13BA6[*a1 + 1], byte_216C13BA6[*a1]);
  return v2;
}

uint64_t sub_216B4EE74(uint64_t a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  v9 = (char *)sub_216B4EF10(v14);
  if (v9 == byte_216C13BA6)
    return 1;
  v10 = (uint64_t)v9;
  v11 = sub_216B4EE3C((unsigned __int16 *)v9);
  if (sub_216B2B2F0(v11, v12, a3, a4))
    return 1;
  else
    return sub_216B4EF68(a2, v10, a5);
}

void *sub_216B4EF10(_QWORD *a1)
{
  BOOL (*v2)(unsigned __int16 *, const void *, unint64_t);

  v2 = sub_216B4EF3C;
  return sub_216B4F890(a1, (uint64_t (**)(uint64_t, _QWORD, _QWORD))&v2);
}

BOOL sub_216B4EF3C(unsigned __int16 *a1, const void *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_216B4EE3C(a1);
  return sub_216B3B3BC(v5, v6, a2, a3);
}

uint64_t sub_216B4EF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int16 *v15;
  int v16;
  int v18;

  v6 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2) || *(_WORD *)(a2 + 4))
  {
    v7 = word_216C16548[v6];
    if (v7 == 0xFFFF)
    {
      v9 = 1;
    }
    else
    {
      v8 = &word_216C16548[v6 + 1];
      v9 = 1;
      do
      {
        v10 = (__int16)v7;
        v11 = sub_216B4E5C4((__int16)v7);
        if (sub_216B4F084((uint64_t)v11) == (_DWORD)a1)
        {
          v18 = v10;
          sub_216B26208(a3, &v18);
          v9 = 0;
        }
        v12 = *v8++;
        LOWORD(v7) = v12;
      }
      while (v12 != 0xFFFF);
    }
    v13 = *(unsigned __int16 *)(a2 + 4);
    v14 = word_216C1710E[v13];
    if (v14 != 0xFFFF)
    {
      v15 = &word_216C1710E[v13 + 1];
      do
      {
        v9 &= sub_216B4EF68(a1, (char *)&unk_216C12F28 + 6 * (__int16)v14, a3);
        v16 = *v15++;
        LOWORD(v14) = v16;
      }
      while (v16 != 0xFFFF);
    }
  }
  else
  {
    LOBYTE(v9) = (_DWORD)a1 == 1;
  }
  return v9 & 1;
}

BOOL sub_216B4F084(uint64_t a1)
{
  return (*(_WORD *)(a1 + 2) & 0x38) == 16;
}

uint64_t sub_216B4F098(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int *v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10[2];
  uint64_t v11[2];
  _QWORD v12[3];

  sub_216B4B754(v12, a2);
  if (*(_BYTE *)(a2 + 10))
    return 0;
  v5 = sub_216B4B758((uint64_t)v12);
  v6 = (int *)sub_216B4B764(v12);
  result = sub_216B4EACC(a1, v5, *v6, (_BYTE *)a2);
  v7 = result;
  if ((_DWORD)result != 1)
  {
    if (*(_DWORD *)(a2 + 164) == 5)
      *(_BYTE *)(a2 + 154) = 1;
    *(_DWORD *)(a2 + 164) = result;
    v8 = (int)result > 3;
    if ((int)result < 4)
    {
      if (*(_BYTE *)(a2 + 154))
        return 0;
    }
    else
    {
      ++*(_DWORD *)(a2 + 156);
      result = sub_216B4F28C(a1, v5);
      if ((_DWORD)result)
        ++*(_DWORD *)(a2 + 160);
      if (*(_BYTE *)(a2 + 154))
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 48))(*(_QWORD *)(a2 + 56));
        if ((_DWORD)result)
        {
          result = 0;
          *(int32x2_t *)(a2 + 172) = vadd_s32(*(int32x2_t *)(a2 + 172), (int32x2_t)0x100000001);
        }
        return result;
      }
    }
    if (!(_DWORD)v7)
      return 0;
    if ((_DWORD)v7 != 1)
      goto LABEL_19;
    goto LABEL_18;
  }
  v8 = 0;
  result = 0;
  if (!*(_BYTE *)(a2 + 154))
  {
LABEL_18:
    if (*(_DWORD *)(a2 + 164))
    {
LABEL_19:
      if (!v8)
        goto LABEL_30;
      if (sub_216B4F28C(a1, v5))
        *(_BYTE *)(a2 + 155) = 1;
      if (sub_216B4E9E8(v5))
        *(_BYTE *)(a2 + 153) = 1;
      *(_BYTE *)(a2 + 152) = 1;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 48))(*(_QWORD *)(a2 + 56));
      if ((_DWORD)result)
        ++*(_DWORD *)(a2 + 172);
      v9 = *(_DWORD *)(a2 + 20);
      if (!v9 || (_DWORD)v7 != 4 || *(_DWORD *)(a2 + 172) <= v9)
      {
LABEL_30:
        sub_216B4F2FC(result, a2, v7);
        return 1;
      }
      sub_216B1E678((int)v11, &byte_216C19659);
      sub_216B1E678((int)v10, &byte_216C19659);
      sub_216B4B238(a2, 42, v11[0], v11[1], v10[0], v10[1]);
    }
    return 0;
  }
  return result;
}

BOOL sub_216B4F28C(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  unsigned int v4;

  if (a2 >> 3 >= 0x2CB)
    return (int)sub_216B4EB4C(*(_QWORD **)(a1 + 8), a2) > 3;
  v4 = sub_216B4E94C(a2);
  result = 0;
  if (a2 - 3093 >= 2 && v4 >= 5)
    return !sub_216B4F374(a2);
  return result;
}

uint64_t sub_216B4F2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v6[3];

  sub_216B4B754(v6, a2);
  (*(void (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a2 + 56) + 56))(*(_QWORD *)(a2 + 56), a3, v6);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 48))(*(_QWORD *)(a2 + 56));
  if ((_DWORD)a3 == 3 && (_DWORD)result)
    ++*(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 284) = -1;
  return result;
}

BOOL sub_216B4F374(unsigned int a1)
{
  unsigned int v1;
  uint64_t v2;
  const void *v4[2];
  _QWORD v5[2];

  v1 = sub_216B4E5A4(a1);
  v5[0] = sub_216B4E878(v1);
  v5[1] = v2;
  sub_216B1E678((int)v4, "ARC ");
  return sub_216B2A2EC((uint64_t)v5, v4[0], (size_t)v4[1]);
}

uint64_t sub_216B4F3B4(uint64_t a1)
{
  sub_216B4F3DC(a1 + 24);
  return sub_216B4F3E0(a1);
}

uint64_t sub_216B4F3EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B4F41C(a1, v3);
  return a1;
}

uint64_t sub_216B4F41C(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    sub_216B4F41C(result, *a2);
    sub_216B4F41C(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = j_nullsub_1(a2 + 4, v6);
    sub_216B4F484(v5, v7);
    return sub_216B4F48C(v5, (uint64_t)a2, 1);
  }
  return result;
}

uint64_t sub_216B4F484(uint64_t a1, uint64_t a2)
{
  return sub_216B4F490(a2);
}

uint64_t sub_216B4F4A0(uint64_t a1)
{
  std::string::~string((std::string *)(a1 + 8));
  return a1;
}

uint64_t sub_216B4F4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 72 * a3, 8);
}

uint64_t sub_216B4F4DC(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B4F518(&v3);
  return a1;
}

uint64_t *sub_216B4F518(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B4F57C(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B4F588(v6, v8);
    return (uint64_t *)sub_216B4F584(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B4F57C(uint64_t *a1)
{
  return sub_216B4F5B8((uint64_t)a1, *a1);
}

uint64_t sub_216B4F588(_QWORD *a1, uint64_t a2)
{
  return (uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 5;
}

uint64_t sub_216B4F5B8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B4F61C(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 32;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B4F620(uint64_t a1, uint64_t a2)
{
  return sub_216B4F49C(a2);
}

uint64_t sub_216B4F628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 32 * a3, 8);
}

uint64_t sub_216B4F638(uint64_t a1, uint64_t a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t result;
  size_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;

  v4 = sub_216B25B78(a1, a2);
  if (v4 != sub_216B25B78(a2, v5))
    return 0;
  v7 = (unsigned __int8 *)sub_216B26088(a1, v6);
  v9 = (unsigned __int8 *)sub_216B26088(a2, v8);
  if ((sub_216B25CF8(a1, v10) & 1) != 0)
    return j__memcmp(v7, v9, v4) == 0;
  if (!v4)
    return 1;
  v12 = v4 - 1;
  do
  {
    v14 = *v7++;
    v13 = v14;
    v16 = *v9++;
    v15 = v16;
    v18 = v12-- != 0;
    result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t sub_216B4F6F0(_QWORD *a1, uint64_t a2)
{
  return *a1 + 32 * a2;
}

BOOL sub_216B4F6FC(_DWORD *a1)
{
  return *a1 >= 0;
}

uint64_t sub_216B4F70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B4F758(a3, a1, a2);
}

_DWORD *sub_216B4F720(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *result;

  result = sub_216B4CFBC(a1, a2, a4);
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_216B4F75C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_216B4F784();
  *(_BYTE *)(result + 16) = *a3;
  return result;
}

_QWORD *sub_216B4F788(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  return result;
}

uint64_t *sub_216B4F79C(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  *a1 = a2;
  a1[1] = a3;
  if ((a4 & 1) == 0)
    sub_216B4F7CC(a1);
  return a1;
}

uint64_t sub_216B4F7CC(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;

  v5 = sub_216B4CBB8();
  v4 = sub_216B4CC9C();
  result = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if (!sub_216B4CC88((_DWORD *)result, &v5))
      {
        result = sub_216B4CC88((_DWORD *)*a1, &v4);
        if (!(_DWORD)result)
          break;
      }
      v3 = a1[1];
      result = *a1 + 8;
      *a1 = result;
    }
    while (result != v3);
  }
  return result;
}

_DWORD *sub_216B4F83C(_DWORD *a1, _DWORD *a2)
{
  char v5;

  if (sub_216B4F87C((uint64_t)&v5, a1, a2))
    return a2;
  else
    return a1;
}

BOOL sub_216B4F87C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 < *a3;
}

void *sub_216B4F890(_QWORD *a1, uint64_t (**a2)(uint64_t, _QWORD, _QWORD))
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v4 = 533;
  v5 = &unk_216C12F28;
  do
  {
    v6 = sub_216B3556C(v4);
    v10 = (uint64_t)v5;
    sub_216B4F924(&v10, v6);
    v7 = v10;
    v8 = sub_216B4F928(a2, v10, a1);
    if (v8)
      v4 += ~v6;
    else
      v4 = v6;
    if (v8)
      v5 = (void *)(v7 + 6);
  }
  while (v4);
  return v5;
}

uint64_t sub_216B4F928(uint64_t (**a1)(uint64_t, _QWORD, _QWORD), uint64_t a2, _QWORD *a3)
{
  return (*a1)(a2, *a3, a3[1]);
}

_QWORD *sub_216B4F93C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B4F968(a1, v3);
}

_QWORD *sub_216B4F968(_QWORD *result, uint64_t a2)
{
  *result += 6 * a2;
  return result;
}

uint64_t sub_216B4F97C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v6 = (uint64_t *)(sub_216B4AEBC((_DWORD *)a1) + 2);
  sub_216B4FA60(v6, a3);
  sub_216B4FA64(a1 + 24, a2);
  sub_216B39B64(a1 + 72, v7);
  sub_216B39B64(a1 + 96, v8);
  sub_216B2D768(a1 + 120);
  sub_216B2D768(a1 + 176);
  sub_216B4FA68(a1 + 232, 64);
  sub_216B4FA68(a1 + 392, 64);
  sub_216B4FA6C(a1 + 552, 0);
  sub_216B39B60((_QWORD *)(a1 + 576));
  *(_DWORD *)(a1 + 712) = 0;
  sub_216B324FC(a1 + 736);
  *(_OWORD *)(a1 + 716) = 0u;
  if (!sub_216B4FA70((uint64_t)a3))
  {
    sub_216B69CA4(v10);
    sub_216B4FA8C(v6, v10);
    sub_216B4FAD0(v10);
  }
  return a1;
}

BOOL sub_216B4FA70(uint64_t a1)
{
  return sub_216B1E600(a1) != 0;
}

uint64_t *sub_216B4FA8C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4[2];

  sub_216B512F4(v4, a2);
  sub_216B512F8(v4, a1);
  sub_216B4FAD0(v4);
  return a1;
}

uint64_t sub_216B4FAD8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  int v7;
  unsigned int v8;
  void *v9;

  v2 = a1 + 176;
  v3 = sub_216B26878(a1 + 176);
  if (v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)sub_216B4FBDC(v2, v4);
      if (v5)
      {
        v6 = (void *)sub_216B4FC00(v5);
        j__free(v6);
      }
      ++v4;
    }
    while (v3 != v4);
  }
  v7 = sub_216B26878(a1 + 120);
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)sub_216B4FBDC(a1 + 120, v8);
      if (v9)
        j__free(v9);
      ++v8;
    }
    while (v7 != v8);
  }
  sub_216B3C0E0(a1 + 736);
  sub_216B3A034(a1 + 576);
  sub_216B4FC04(a1 + 552);
  sub_216B4FC08(a1 + 392);
  sub_216B4FC08(a1 + 232);
  sub_216B1FF6C(v2);
  sub_216B1FF6C(a1 + 120);
  sub_216B4FC0C(a1 + 96);
  sub_216B4FC10(a1 + 72);
  sub_216B4FC14(a1 + 24);
  sub_216B4FAD0(a1 + 8);
  return a1;
}

uint64_t sub_216B4FBDC(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 8 * a2;
}

uint64_t sub_216B4FC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v9 = sub_216B290FC(a2, a3);
  v10 = v4;
  result = sub_216B29094((uint64_t)&v9);
  if ((result & 1) == 0)
  {
    v6 = sub_216B4ABC4(a1 + 232, v9, v10);
    result = sub_216B3DBD0(v6);
    if (!*(_QWORD *)result)
    {
      v7 = (uint64_t *)sub_216B1D1D4(8);
      v8 = sub_216B2D410(v7);
      *v7 = sub_216B28BEC(v6);
      sub_216B4ABCC(v6, &v8);
      sub_216B268AC(a1 + 120, &v8);
      return sub_216B4FC1C(a1, v9, v10);
    }
  }
  return result;
}

_QWORD *sub_216B4FCC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v17;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v21 = a3;
  if ((unint64_t)sub_216B1E67C((uint64_t)&v20) >= 2)
  {
    v6 = v20;
    v7 = v21;
    v8 = (const void *)sub_216B28A74(v20, v21);
    if (sub_216B2B2F0(v6, v7, v8, v9))
    {
      v10 = sub_216B4FE64(&v20);
      if (sub_216B28640(v10))
      {
        v11 = sub_216B1E67C((uint64_t)&v20);
        v20 = sub_216B2864C(&v20, 0, v11 - 1);
        v21 = v12;
      }
    }
  }
  ++*(_DWORD *)(a1 + 716);
  v13 = sub_216B4ABC4(a1 + 232, v20, v21);
  if (*(_QWORD *)sub_216B3DBD0(v13))
  {
    if (*(_QWORD *)sub_216B3DBD0(v13) == -1)
      return 0;
    else
      return *(_QWORD **)sub_216B3DBD0(v13);
  }
  else
  {
    ++*(_DWORD *)(a1 + 724);
    v18.__r_.__value_.__r.__words[0] = -1;
    sub_216B4ABCC(v13, &v18);
    v15 = (char *)sub_216B28BEC(v13);
    sub_216B4FE74((uint64_t)&v18);
    if (sub_216B4FE78(a1, v15, (uint64_t)&v18, 0, 0))
    {
      if ((a4 & 1) == 0)
        sub_216B4FF7C((_QWORD *)(a1 + 232), v20, v21);
      v14 = 0;
    }
    else
    {
      v14 = (_QWORD *)sub_216B4FFD8(a1 + 72, (uint64_t)&v19);
      v17 = v14;
      sub_216B4ABCC(v13, &v17);
      if (!sub_216B1E600((uint64_t)v14))
        *v14 = v15;
    }
    j_std::string::~string(&v18);
  }
  return v14;
}

uint64_t sub_216B4FE64(_QWORD *a1)
{
  return *(char *)(a1[1] + *a1 - 1);
}

uint64_t sub_216B4FE78(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  const void *v20[19];

  if (sub_216B25DD0(a1 + 24, (uint64_t)a2))
  {
    v11 = sub_216B25CA8(a1 + 736, v10);
    v12 = sub_216B1E600(a1 + 8);
    return sub_216B526A8(a2, a3, a4, a5, v11, v12);
  }
  else
  {
    sub_216B1E678((int)v19, a2);
    sub_216B2A0B0(v20, v19[0], v19[1]);
    sub_216B505F0(a1, v20);
    v14 = (_BYTE *)sub_216B2A0B4((uint64_t)v20);
    v16 = sub_216B25CA8(a1 + 736, v15);
    v17 = sub_216B1E600(a1 + 8);
    v18 = sub_216B526A8(v14, a3, a4, a5, v16, v17);
    sub_216B2489C(v20);
    return v18;
  }
}

BOOL sub_216B4FF7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v4;
  uint64_t v6;
  uint64_t v7;

  v7 = sub_216B5133C(a1, a2, a3);
  v6 = sub_216B3C994((uint64_t)a1);
  v4 = sub_216B37620(&v7, &v6);
  if (!v4)
    sub_216B51398((uint64_t)a1, v7);
  return !v4;
}

uint64_t sub_216B4FFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v10 = sub_216B514B8(a2);
  nullsub_1(v10, v4);
  v11[0] = sub_216B513E8(a1, a2, (uint64_t)&unk_216C173AC, (uint64_t)&v10, (uint64_t)&v9);
  v11[1] = v5;
  v6 = sub_216B3B45C((uint64_t)v11);
  return nullsub_1(v6, v7) + 16;
}

uint64_t sub_216B50040(_DWORD *a1, const void *a2, size_t a3, int a4, char a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22;
  std::string v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;
  char v27;
  _BYTE v28[8];

  ++a1[180];
  v10 = a1 + 98;
  v11 = sub_216B4ABC4((uint64_t)(a1 + 98), (uint64_t)a2, a3);
  if (*(_QWORD *)sub_216B3DBD0(v11))
  {
    if (*(_QWORD *)sub_216B3DBD0(v11) != -1)
      return *(_QWORD *)sub_216B3DBD0(v11);
    return 0;
  }
  ++a1[182];
  v23.__r_.__value_.__r.__words[0] = -1;
  sub_216B4ABCC(v11, &v23);
  v13 = (char *)sub_216B28BEC(v11);
  v14 = sub_216B502A4((uint64_t)a1, (uint64_t)a2, a3, a5);
  if (!v14)
  {
    if ((a5 & 1) == 0)
      sub_216B4FF7C(v10, (uint64_t)a2, a3);
    return 0;
  }
  v15 = v14;
  sub_216B324FC((uint64_t)v28);
  sub_216B4FE74((uint64_t)&v23);
  if (a4)
    v16 = v28;
  else
    v16 = 0;
  if (sub_216B4FE78((uint64_t)a1, v13, (uint64_t)&v23, 1, (uint64_t)v16))
  {
    if ((a5 & 1) == 0)
      sub_216B4FF7C(v10, (uint64_t)a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = sub_216B50340((uint64_t)(a1 + 24), (uint64_t)&v25);
    v22 = v12;
    sub_216B4ABCC(v11, &v22);
    sub_216B26CA0(v21, &v23);
    if (sub_216B2B2F0(v21[0], v21[1], a2, a3))
    {
      sub_216B26CA0(v20, &v23);
      v17 = sub_216B4ABC4((uint64_t)v10, v20[0], v20[1]);
      if (!*(_QWORD *)sub_216B3DBD0(v17))
      {
        v22 = v12;
        sub_216B4ABCC(v17, &v22);
      }
      v13 = (char *)sub_216B28BEC(v17);
    }
    if (sub_216B503A8(v12))
    {
      if (v15 != *(_QWORD **)(v12 + 24) && v27)
        *(_QWORD *)(v12 + 24) = v15;
      *(_QWORD *)v12 = v13;
    }
    else
    {
      *(_QWORD *)v12 = v13;
      *(_OWORD *)(v12 + 8) = v24;
      *(_QWORD *)(v12 + 24) = v15;
      v18 = a1[178];
      a1[178] = v18 + 1;
      *(_DWORD *)(v12 + 32) = v18;
      *(_OWORD *)(v12 + 40) = v25;
      *(_WORD *)(v12 + 56) = v26;
      sub_216B503B0(v12 + 64, (uint64_t)v28);
      *(_BYTE *)(v12 + 58) = 1;
    }
  }
  j_std::string::~string(&v23);
  sub_216B27C04(v28);
  return v12;
}

_QWORD *sub_216B502A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = a3;
  if (sub_216B29094((uint64_t)&v12))
    return 0;
  v6 = sub_216B1E67C((uint64_t)&v12);
  v7 = sub_216B26288(&v12, v6 - 1);
  if (sub_216B28640(v7))
    return 0;
  *(_QWORD *)&v11 = sub_216B290FC(v12, v13);
  *((_QWORD *)&v11 + 1) = v9;
  if (sub_216B29094((uint64_t)&v11))
  {
    sub_216B1E678((int)&v10, ".");
    v11 = v10;
  }
  return sub_216B4FCC4(a1, v11, *((uint64_t *)&v11 + 1), a4);
}

uint64_t sub_216B50340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v10 = sub_216B514B8(a2);
  nullsub_1(v10, v4);
  v11[0] = sub_216B51A80(a1, a2, (uint64_t)&unk_216C173AC, (uint64_t)&v10, (uint64_t)&v9);
  v11[1] = v5;
  v6 = sub_216B3B45C((uint64_t)v11);
  return nullsub_1(v6, v7) + 16;
}

uint64_t sub_216B503A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 58);
}

uint64_t sub_216B503B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B28054(a2, a2);
  sub_216B27C30(a1, v4);
  j_j_nullsub_1(a2);
  j_nullsub_1(a1, v5);
  return a1;
}

uint64_t sub_216B503F8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  std::string v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  char v25;
  uint64_t v26;

  ++a1[180];
  v10 = sub_216B4ABC4((uint64_t)(a1 + 98), a2, a3);
  if (!*(_QWORD *)sub_216B3DBD0(v10) || *(_QWORD *)sub_216B3DBD0(v10) == -1)
  {
    ++a1[182];
    v20.__r_.__value_.__r.__words[0] = -1;
    sub_216B4ABCC(v10, &v20);
    sub_216B4FC1C((uint64_t)a1, a2, a3);
    v26 = 0;
    v12 = sub_216B502A4((uint64_t)a1, a2, a3, 1);
    sub_216B4FE74((uint64_t)&v20);
    v13 = (char *)sub_216B28BEC(v10);
    if ((sub_216B4FE78((uint64_t)a1, v13, (uint64_t)&v20, 1, 0) & 1) != 0)
      goto LABEL_5;
    v21 = a4;
    v22 = a5;
    v26 = sub_216B50340((uint64_t)(a1 + 24), (uint64_t)&v23);
    sub_216B4ABCC(v10, &v26);
    if (sub_216B3817C(v26 + 64, v16))
      sub_216B505E0(v26);
    if ((sub_216B503A8(v26) & 1) != 0)
      goto LABEL_11;
    v15 = v26;
    *(_OWORD *)(v26 + 40) = v23;
    *(_BYTE *)(v15 + 56) = v24;
    *(_BYTE *)(v15 + 57) = v25;
    if (!v15)
    {
LABEL_5:
      v14 = sub_216B1D1D4(72);
      v26 = sub_216B505EC(v14);
      sub_216B268AC((uint64_t)(a1 + 44), &v26);
      sub_216B4ABCC(v10, &v26);
      v15 = v26;
    }
    *(_QWORD *)v15 = v13;
    v17 = v26;
    *(_QWORD *)(v26 + 8) = a4;
    *(_QWORD *)(v17 + 16) = a5;
    *(_QWORD *)(v17 + 24) = v12;
    v18 = a1[178];
    a1[178] = v18 + 1;
    *(_DWORD *)(v17 + 32) = v18;
    sub_216B27C30(v17 + 64, 0);
LABEL_11:
    v11 = v26;
    j_std::string::~string(&v20);
    return v11;
  }
  return *(_QWORD *)sub_216B3DBD0(v10);
}

_QWORD *sub_216B505E0(uint64_t a1)
{
  return sub_216B27C30(a1 + 64, 0);
}

uint64_t sub_216B505F0(uint64_t a1, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9[3];
  uint64_t v10[3];
  uint64_t v11[3];
  uint64_t v12[3];
  _QWORD v13[2];
  const void *v14[19];
  _BYTE v15[16];

  v4 = sub_216B262E0((uint64_t)a2);
  v5 = sub_216B1FF14((uint64_t)a2);
  sub_216B1E684(v15, v4, v5);
  v6 = a1 + 24;
  result = sub_216B25DD0(v6, v7);
  if ((result & 1) == 0)
  {
    sub_216B25FB0((uint64_t)v14, (uint64_t)v15);
    result = sub_216B296A0((uint64_t *)v14);
    if ((result & 1) == 0)
    {
      sub_216B26CA0(v13, v6);
      sub_216B2A0B0(v14, v13[0], v13[1]);
      sub_216B25FB0((uint64_t)v12, (uint64_t)v15);
      sub_216B25FA8((uint64_t)v11, &byte_216C19659);
      sub_216B25FA8((uint64_t)v10, &byte_216C19659);
      sub_216B25FA8((uint64_t)v9, &byte_216C19659);
      sub_216B28DE8(v14, v12, v11, v10, v9);
      sub_216B2A3F0(a2, (uint64_t)v14);
      return sub_216B2489C(v14);
    }
  }
  return result;
}

uint64_t sub_216B506E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const std::error_category *v16;
  uint64_t v17;
  const std::error_category *v18;
  _BOOL4 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  const std::error_category *v24;
  _BOOL4 v25;
  uint64_t v26;
  _QWORD v28[2];
  std::string v29;
  _QWORD v30[2];
  std::string v31;
  std::error_code v32;
  _BYTE v33[8];

  sub_216B324FC((uint64_t)v33);
  sub_216B27D74(&v32);
  v10 = sub_216B1E67C(a2);
  if ((_DWORD)a4)
    v11 = -1;
  else
    v11 = v10;
  v12 = (_BYTE *)sub_216B1E600(a2);
  if (sub_216B3817C(a2 + 64, v13))
  {
    v15 = sub_216B25CA8(a2 + 64, v14);
    sub_216B25FA8((uint64_t)&v31, v12);
    *(_QWORD *)&v32.__val_ = (*(uint64_t (**)(uint64_t, std::string *, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, &v31, v33, v11, 1, a4);
    v32.__cat_ = v16;
    if (a3)
    {
      std::error_code::message(&v31, &v32);
      sub_216B26E7C(a3, (uint64_t)&v31);
      std::string::~string(&v31);
    }
    if (a5)
      sub_216B505E0(a2);
LABEL_13:
    v20 = sub_216B28054((uint64_t)v33, (uint64_t)v16);
    goto LABEL_18;
  }
  if (sub_216B25DD0(a1 + 24, v14))
  {
    v17 = sub_216B1E600(a1 + 8);
    sub_216B25FA8((uint64_t)&v31, v12);
    *(_QWORD *)&v32.__val_ = sub_216B69BF4(v17, (uint64_t)&v31, (uint64_t)v33, v11, 1, a4);
    v32.__cat_ = v18;
    v19 = sub_216B27BAC(&v32);
    if (a3 && v19)
    {
      std::error_code::message(&v31, &v32);
      sub_216B26E7C(a3, (uint64_t)&v31);
      std::string::~string(&v31);
    }
    goto LABEL_13;
  }
  v21 = (char *)sub_216B1E600(a2);
  sub_216B1E678((int)v30, v21);
  sub_216B2A0B0(&v31, v30[0], v30[1]);
  sub_216B505F0(a1, (const void **)&v31.__r_.__value_.__l.__data_);
  v22 = sub_216B1E600(a1 + 8);
  v28[0] = sub_216B24850((uint64_t)&v31);
  v28[1] = v23;
  sub_216B25FB0((uint64_t)&v29, (uint64_t)v28);
  *(_QWORD *)&v32.__val_ = sub_216B69BF4(v22, (uint64_t)&v29, (uint64_t)v33, v11, 1, a4);
  v32.__cat_ = v24;
  v25 = sub_216B27BAC(&v32);
  if (a3 && v25)
  {
    std::error_code::message(&v29, &v32);
    sub_216B26E7C(a3, (uint64_t)&v29);
    std::string::~string(&v29);
  }
  v20 = sub_216B28054((uint64_t)v33, v26);
  sub_216B2489C(&v31);
LABEL_18:
  sub_216B27C04(v33);
  return v20;
}

BOOL sub_216B50930(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 88) & 1) == 0;
}

uint64_t sub_216B50944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  const char *v5;
  unsigned int v6;
  uint64_t *v7;
  size_t v8;
  void *v9;
  _BYTE v11[24];
  __int128 v12;
  uint64_t v13[2];
  uint64_t v14;
  __int128 v15;
  char __s[1024];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v3 = a1 + 552;
  sub_216B50A84(a1 + 552, &v14, (uint64_t)v13);
  sub_216B50B20(v3, (uint64_t)&v12);
  sub_216B4F784(__s, &v12);
  if (sub_216B50AF4(v13, (uint64_t)__s))
  {
    return *(_OWORD *)(sub_216B1E600((uint64_t)v13) + 8);
  }
  else
  {
    v4 = (char *)sub_216B1E600(v14);
    sub_216B1E678((int)&v15, v4);
    v5 = (const char *)sub_216B1E600(v14);
    if (realpath_DARWIN_EXTSN(v5, __s))
    {
      v6 = strlen(__s);
      v7 = (uint64_t *)(a1 + 576);
      v8 = v6;
      v9 = (void *)sub_216B2663C(v7, v6, 1uLL);
      memcpy(v9, __s, v8);
      sub_216B1E684(&v12, v9, v8);
      v15 = v12;
    }
    sub_216B50C24((uint64_t)&v14, (uint64_t)&v15, (uint64_t)&v12);
    sub_216B50B68(v3, (uint64_t)&v12, (uint64_t)v11);
  }
  return v15;
}

uint64_t sub_216B50A84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216B52214(a1, a2, &v8))
    return sub_216B50B20(a1, a3);
  v5 = v8;
  v6 = sub_216B50ED4(a1);
  return sub_216B5224C(a3, v5, v6, 1);
}

BOOL sub_216B50AF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  return v2 != sub_216B1E600(a2);
}

uint64_t sub_216B50B20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B50ED4(a1);
  v5 = sub_216B50ED4(a1);
  return sub_216B5224C(a2, v4, v5, 1);
}

uint64_t sub_216B50B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v12;
  _BYTE v13[16];
  uint64_t *v14;

  v14 = 0;
  if (sub_216B52214(a1, (uint64_t *)a2, &v14))
  {
    v6 = v14;
    v7 = sub_216B50ED4(a1);
    sub_216B5224C(v13, v6, v7, 1);
    v12 = 0;
  }
  else
  {
    sub_216B52440(a1, (uint64_t *)a2, (__n128 *)(a2 + 8), v14);
    v9 = v8;
    v14 = v8;
    v10 = sub_216B50ED4(a1);
    sub_216B5224C(v13, v9, v10, 1);
    v12 = 1;
  }
  return sub_216B4F70C((uint64_t)v13, (uint64_t)&v12, a3);
}

uint64_t sub_216B50C24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B52428(a3, a1, a2);
}

std::string *sub_216B50C34(std::string *a1, const std::string *a2)
{
  std::string *v4;

  v4 = std::string::basic_string(a1, a2);
  std::string::basic_string(v4 + 1, a2 + 1);
  return a1;
}

uint64_t sub_216B50C68(uint64_t a1)
{
  sub_216B27C04(a1 + 64);
  return a1;
}

void sub_216B50C90(std::string *a1)
{
  std::string::~string(a1 + 1);
  std::string::~string(a1);
}

uint64_t sub_216B50CB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B25034(a1);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  j_nullsub_1(v2 + 40, v3);
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_216B50CEC(uint64_t a1)
{
  sub_216B1E684(a1 + 40, 0, 0);
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = 0;
  sub_216B324FC(a1 + 64);
  return a1;
}

_QWORD *sub_216B50D2C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[1];
  a1[1] = v3;
  if (v3)
    sub_216B50D64();
  return a1;
}

unint64_t sub_216B50D68(uint64_t a1)
{
  return sub_216B50D70((unint64_t *)(a1 + 8));
}

unint64_t sub_216B50D70(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  do
  {
    v1 = __ldxr(a1);
    v2 = v1 + 1;
  }
  while (__stxr(v2, a1));
  return v2;
}

uint64_t sub_216B50D88(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = sub_216B3125C(a1, a2, 16);
  sub_216B39B60((_QWORD *)(v3 + 24));
  return a1;
}

uint64_t sub_216B50DB8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B50DE8(v4, v2);
  return a1;
}

uint64_t sub_216B50DE8(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B50E20(a1, a2);
  if ((_DWORD)result)
    return sub_216B50E6C(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL sub_216B50E20(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
    v4 = sub_216B1D1D4(24 * a2);
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a2 != 0;
}

uint64_t sub_216B50E6C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B50ED0();
  v3 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B50ED4(a1);
  while (v3 != (_QWORD *)result)
  {
    *v3 = v2;
    v3 += 3;
  }
  return result;
}

uint64_t sub_216B50ED4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 24 * sub_216B4CBC0(a1);
}

uint64_t sub_216B50F08()
{
  return -4;
}

uint64_t sub_216B50F10(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    sub_216B50F3C(v2);
  return a1;
}

void sub_216B50F3C(std::__shared_weak_count *a1)
{
  if (sub_216B50F70((unint64_t *)a1))
    std::__shared_weak_count::__release_weak(a1);
}

BOOL sub_216B50F70(unint64_t *a1)
{
  unint64_t v2;

  v2 = sub_216B50FB8(a1 + 1);
  if (v2 == -1)
    (*(void (**)(unint64_t *))(*a1 + 16))(a1);
  return v2 == -1;
}

unint64_t sub_216B50FB8(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  do
  {
    v1 = __ldaxr(a1);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, a1));
  return v2;
}

uint64_t sub_216B50FD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B51008(a1, v3);
  return a1;
}

uint64_t sub_216B51008(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    sub_216B51008(result, *a2);
    sub_216B51008(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = j_nullsub_1(a2 + 4, v6);
    sub_216B3A8F8(v5, v7);
    return sub_216B51070(v5, a2, 1);
  }
  return result;
}

uint64_t sub_216B51074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 56 * a3, 8);
}

uint64_t sub_216B51090(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B510C0(a1, v3);
  return a1;
}

uint64_t sub_216B510C0(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    sub_216B510C0(result, *a2);
    sub_216B510C0(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = j_nullsub_1(a2 + 4, v6);
    sub_216B51128(v5, v7);
    return sub_216B51130(v5, (uint64_t)a2, 1);
  }
  return result;
}

uint64_t sub_216B51128(uint64_t a1, uint64_t a2)
{
  return sub_216B51134(a2);
}

uint64_t sub_216B5113C(uint64_t a1)
{
  sub_216B4FC00(a1 + 16);
  return a1;
}

uint64_t sub_216B51164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 120 * a3, 8);
}

uint64_t sub_216B51178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B51208(v5, a1 + 24);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  sub_216B3A034(a1 + 24);
  return a1;
}

uint64_t sub_216B51208(unsigned int *a1, uint64_t a2)
{
  sub_216B1E4E0(a1);
  return nullsub_1(a2, a1);
}

void **sub_216B51238(void **a1)
{
  sub_216B51264((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B51264(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B50ED0();
    v4 = sub_216B512E8();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B50ED4(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B2A5FC(*v5, v4);
        v5 += 3;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t sub_216B512EC()
{
  return -8;
}

uint64_t *sub_216B512F8(uint64_t *a1, uint64_t *a2)
{
  sub_216B20BF4(a1, a2);
  return sub_216B20BF4(a1 + 1, a2 + 1);
}

_QWORD *sub_216B51324(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_216B5133C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v6;

  v4 = sub_216B31498((uint64_t)a1, a2, a3);
  if (v4 == -1)
    return sub_216B3C994((uint64_t)a1);
  sub_216B3DD28(&v6, *a1 + 8 * v4, 1);
  return v6;
}

uint64_t sub_216B51398(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v5;

  v5 = a2;
  v3 = (unsigned int *)sub_216B3C9C8((uint64_t)&v5);
  sub_216B513E4(a1, v3);
  return sub_216B51208(v3, a1 + 24);
}

uint64_t sub_216B513E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  uint64_t *v19;
  uint64_t v20;

  v9 = sub_216B514E0(a1, &v19, a2);
  v10 = *v9;
  v18 = 0;
  if (!v10)
  {
    v11 = v9;
    sub_216B5159C(a1, a3, a4, a5, (uint64_t)v17);
    v12 = v19;
    v14 = (_QWORD *)sub_216B25CA8((uint64_t)v17, v13);
    sub_216B3BA48(a1, (uint64_t)v12, v11, v14);
    v10 = sub_216B28054((uint64_t)v17, v15);
    v18 = 1;
    sub_216B5164C(v17);
  }
  sub_216B20C64(v17, v10);
  sub_216B31104(&v20, v17, &v18);
  return v20;
}

uint64_t sub_216B514B8(uint64_t a1)
{
  uint64_t v2;

  sub_216B51A78(&v2, a1);
  return v2;
}

uint64_t *sub_216B514E0(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_216B3A8D8(a1, (uint64_t)a2);
  v8 = sub_216B3BAD4(a1, v7);
  if (v6)
  {
    v10 = (uint64_t *)v8;
    do
    {
      while (1)
      {
        v11 = (uint64_t *)v6;
        v12 = sub_216B2C144(a1, v9);
        v13 = v6 + 32;
        if (!sub_216B51650(v12, a3, v13))
          break;
        v6 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_10;
      }
      v14 = sub_216B2C144(a1, v9);
      if (!sub_216B51684(v14, v13, a3))
        break;
      v10 = v11 + 1;
      v6 = v11[1];
    }
    while (v6);
  }
  else
  {
    v11 = (uint64_t *)sub_216B3A914(a1, v9);
    v10 = v11;
  }
LABEL_10:
  *a2 = v11;
  return v10;
}

uint64_t sub_216B5159C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = sub_216B3A8F0(a1, a2);
  v10 = sub_216B518C4(v9, 1);
  sub_216B3BADC((uint64_t)&v18, v9, 0);
  v11 = sub_216B3BAE0(a5, v10);
  v13 = sub_216B25CA8(v11, v12);
  v15 = j_nullsub_1(v13 + 32, v14);
  sub_216B518C8(v9, v15, a2, a3, a4);
  result = sub_216B3BAE8(a5, v16);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_216B51650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = nullsub_1(a3, a2);
  return sub_216B516B8(a1, a2, v5);
}

uint64_t sub_216B51684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = nullsub_1(a2, a2);
  return sub_216B516B8(a1, v5, a3);
}

uint64_t sub_216B516B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B516C4(a2, a3);
}

uint64_t sub_216B516C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = sub_216B51738(a1, a1 + 8);
  v7[1] = v3;
  v6[0] = sub_216B51738(a2, a2 + 8);
  v6[1] = v4;
  return sub_216B51710((uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_216B51710(uint64_t a1, uint64_t a2)
{
  char v3;

  return sub_216B51764((uint64_t)&v3, a1, a2);
}

uint64_t sub_216B51738(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B51884(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B51764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  v5 = *(_QWORD *)sub_216B262E0(a2);
  if (v5 < *(_QWORD *)sub_216B262E0(a3))
    return 1;
  v7 = *(_QWORD *)sub_216B262E0(a3);
  if (v7 >= *(_QWORD *)sub_216B262E0(a2))
    return sub_216B517F4((uint64_t)&v8, a2, a3);
  else
    return 0;
}

uint64_t sub_216B517F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v7;

  v5 = *(_QWORD *)sub_216B2C660(a2);
  if (v5 < *(_QWORD *)sub_216B2C660(a3))
    return 1;
  v7 = *(_QWORD *)sub_216B2C660(a3);
  if (v7 >= *(_QWORD *)sub_216B2C660(a2))
    return sub_216B2043C();
  else
    return 0;
}

_QWORD *sub_216B51890(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = sub_216B210B8(a1, a2);
  sub_216B210B8(v5 + 1, a3);
  return a1;
}

uint64_t sub_216B518CC(uint64_t a1, unint64_t a2)
{
  if (sub_216B51904(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(56 * a2, 8);
}

uint64_t sub_216B51908()
{
  return 0x492492492492492;
}

uint64_t sub_216B5191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_216B51928(a2, *a4);
}

uint64_t sub_216B51928(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  return sub_216B51950(a1, &v4, &v3);
}

uint64_t sub_216B51954(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)sub_216B262E0(a2);
  sub_216B2D410((_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_216B5198C(uint64_t a1)
{
  sub_216B519B4(a1, 0);
  return a1;
}

_QWORD *sub_216B519B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216B51A10(v8, v4);
  }
  return result;
}

uint64_t sub_216B51A10(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)result;
  if (*(_BYTE *)(result + 8))
  {
    v4 = *(_QWORD *)result;
    v5 = j_nullsub_1(a2 + 32, a2);
    result = sub_216B3A8F8(v4, v5);
  }
  if (a2)
    return sub_216B51070(*v3, a2, 1);
  return result;
}

uint64_t sub_216B51A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  uint64_t *v19;
  uint64_t v20;

  v9 = sub_216B514E0(a1, &v19, a2);
  v10 = *v9;
  v18 = 0;
  if (!v10)
  {
    v11 = v9;
    sub_216B51B50(a1, a3, a4, a5, (uint64_t)v17);
    v12 = v19;
    v14 = (_QWORD *)sub_216B25CA8((uint64_t)v17, v13);
    sub_216B3BA48(a1, (uint64_t)v12, v11, v14);
    v10 = sub_216B28054((uint64_t)v17, v15);
    v18 = 1;
    sub_216B51C00(v17);
  }
  sub_216B20C64(v17, v10);
  sub_216B31104(&v20, v17, &v18);
  return v20;
}

uint64_t sub_216B51B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = sub_216B3A8F0(a1, a2);
  v10 = sub_216B51C04(v9, 1);
  sub_216B3BADC((uint64_t)&v18, v9, 0);
  v11 = sub_216B3BAE0(a5, v10);
  v13 = sub_216B25CA8(v11, v12);
  v15 = j_nullsub_1(v13 + 32, v14);
  sub_216B51C08(v9, v15, a2, a3, a4);
  result = sub_216B3BAE8(a5, v16);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_216B51C0C(uint64_t a1, unint64_t a2)
{
  if (sub_216B51C44() < a2)
    sub_216B25C54();
  return sub_216B25CA0(120 * a2, 8);
}

uint64_t sub_216B51C48()
{
  return 0x222222222222222;
}

uint64_t sub_216B51C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_216B51C60(a2, *a4);
}

uint64_t sub_216B51C60(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  return sub_216B51C88(a1, &v4, &v3);
}

_OWORD *sub_216B51C8C(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)sub_216B262E0(a2);
  sub_216B505EC((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_216B51CC4(uint64_t a1)
{
  sub_216B51CEC(a1, 0);
  return a1;
}

_QWORD *sub_216B51CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216B51D48(v8, v4);
  }
  return result;
}

uint64_t sub_216B51D48(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)result;
  if (*(_BYTE *)(result + 8))
  {
    v4 = *(_QWORD *)result;
    v5 = j_nullsub_1(a2 + 32, a2);
    result = sub_216B51128(v4, v5);
  }
  if (a2)
    return sub_216B51130(*v3, a2, 1);
  return result;
}

uint64_t sub_216B51DB0(uint64_t a1, uint64_t a2)
{
  std::string *v3;

  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
  {
    v3 = (std::string *)nullsub_1(a1, a2);
    j_std::string::~string(v3);
  }
  return a1;
}

uint64_t sub_216B51DE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;

  v4 = *(_QWORD *)a2;
  v5 = (uint64_t *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_4;
  if (!*(_QWORD *)(a2 + 8))
  {
    v5 = (uint64_t *)a2;
    goto LABEL_7;
  }
  v5 = sub_216B521C0(a2);
  v4 = *v5;
  if (!*v5)
  {
LABEL_4:
    v4 = v5[1];
    if (!v4)
    {
      v6 = 1;
      goto LABEL_8;
    }
  }
LABEL_7:
  v6 = 0;
  *(_QWORD *)(v4 + 16) = v5[2];
LABEL_8:
  result = sub_216B3BD5C((uint64_t)v5);
  if ((_DWORD)result)
  {
    *(_QWORD *)v5[2] = v4;
    if (v5 == a1)
    {
      v9 = 0;
      a1 = (uint64_t *)v4;
      goto LABEL_13;
    }
    result = sub_216B2037C((uint64_t)v5);
    v8 = (uint64_t *)(result + 8);
  }
  else
  {
    result = sub_216B2037C((uint64_t)v5);
    *(_QWORD *)(result + 8) = v4;
    v8 = (uint64_t *)v5[2];
  }
  v9 = *v8;
LABEL_13:
  v10 = *((unsigned __int8 *)v5 + 24);
  if (v5 != (uint64_t *)a2)
  {
    v5[2] = *(_QWORD *)(a2 + 16);
    if (sub_216B3BD5C(a2))
      v11 = (uint64_t **)v5[2];
    else
      v11 = (uint64_t **)(sub_216B2037C((uint64_t)v5) + 8);
    *v11 = v5;
    v12 = *(_QWORD *)a2;
    *v5 = *(_QWORD *)a2;
    sub_216B3BE48(v12, (uint64_t)v5);
    result = *(_QWORD *)(a2 + 8);
    v5[1] = result;
    if (result)
      result = sub_216B3BE48(result, (uint64_t)v5);
    *((_BYTE *)v5 + 24) = *(_BYTE *)(a2 + 24);
    if (a1 == (uint64_t *)a2)
      a1 = v5;
  }
  if (!v10 || !a1)
    return result;
  if (!v6)
  {
    *(_BYTE *)(v4 + 24) = 1;
    return result;
  }
  while (!sub_216B3BD5C(v9))
  {
    if (!*(_BYTE *)(v9 + 24))
    {
      *(_BYTE *)(v9 + 24) = 1;
      *(_BYTE *)(sub_216B2037C(v9) + 24) = 0;
      v18 = sub_216B2037C(v9);
      sub_216B3BD70(v18);
      if (a1 == *(uint64_t **)v9)
        a1 = (uint64_t *)v9;
      v9 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    }
    v19 = *(_QWORD *)v9;
    if (*(_QWORD *)v9 && !*(_BYTE *)(v19 + 24))
    {
      v20 = *(_QWORD *)(v9 + 8);
      if (!v20)
        goto LABEL_58;
LABEL_57:
      if (*(_BYTE *)(v20 + 24))
      {
LABEL_58:
        *(_BYTE *)(v19 + 24) = 1;
        *(_BYTE *)(v9 + 24) = 0;
        sub_216B3BDDC((uint64_t *)v9);
        v9 = sub_216B2037C(v9);
      }
      *(_BYTE *)(v9 + 24) = *(_BYTE *)(sub_216B2037C(v9) + 24);
      *(_BYTE *)(sub_216B2037C(v9) + 24) = 1;
      *(_BYTE *)(*(_QWORD *)(v9 + 8) + 24) = 1;
      v22 = sub_216B2037C(v9);
      return sub_216B3BD70(v22);
    }
    v20 = *(_QWORD *)(v9 + 8);
    if (v20 && !*(_BYTE *)(v20 + 24))
      goto LABEL_57;
    *(_BYTE *)(v9 + 24) = 0;
    result = sub_216B2037C(v9);
    if ((uint64_t *)result == a1)
      goto LABEL_54;
    v17 = result;
    if (!*(_BYTE *)(result + 24))
    {
      a1 = (uint64_t *)result;
LABEL_54:
      *((_BYTE *)a1 + 24) = 1;
      return result;
    }
LABEL_46:
    if (sub_216B3BD5C(v17))
      v21 = (uint64_t *)(sub_216B2037C(v17) + 8);
    else
      v21 = *(uint64_t **)(v17 + 16);
    v9 = *v21;
  }
  if (!*(_BYTE *)(v9 + 24))
  {
    *(_BYTE *)(v9 + 24) = 1;
    *(_BYTE *)(sub_216B2037C(v9) + 24) = 0;
    v13 = (uint64_t *)sub_216B2037C(v9);
    sub_216B3BDDC(v13);
    v14 = *(uint64_t **)(v9 + 8);
    if (a1 == v14)
      a1 = (uint64_t *)v9;
    v9 = *v14;
  }
  v15 = *(_QWORD *)v9;
  if (*(_QWORD *)v9 && !*(_BYTE *)(v15 + 24))
    goto LABEL_63;
  v16 = *(_QWORD *)(v9 + 8);
  if (!v16 || *(_BYTE *)(v16 + 24))
  {
    *(_BYTE *)(v9 + 24) = 0;
    result = sub_216B2037C(v9);
    v17 = result;
    if (!*(_BYTE *)(result + 24) || (uint64_t *)result == a1)
    {
      *(_BYTE *)(result + 24) = 1;
      return result;
    }
    goto LABEL_46;
  }
  if (!v15 || *(_BYTE *)(v15 + 24))
  {
    *(_BYTE *)(v16 + 24) = 1;
    *(_BYTE *)(v9 + 24) = 0;
    sub_216B3BD70(v9);
    v9 = sub_216B2037C(v9);
  }
LABEL_63:
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(sub_216B2037C(v9) + 24);
  *(_BYTE *)(sub_216B2037C(v9) + 24) = 1;
  *(_BYTE *)(*(_QWORD *)v9 + 24) = 1;
  v23 = (uint64_t *)sub_216B2037C(v9);
  return sub_216B3BDDC(v23);
}

_QWORD *sub_216B52158(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
    return sub_216B521AC(v2);
  for (; !sub_216B3BD5C(v1); v1 = sub_216B2037C(v1))
    ;
  return *(_QWORD **)(v1 + 16);
}

_QWORD *sub_216B521AC(_QWORD *a1)
{
  _QWORD *v1;

  do
  {
    v1 = a1;
    a1 = (_QWORD *)*a1;
  }
  while (a1);
  return v1;
}

_QWORD *sub_216B521C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
    return sub_216B521AC(v2);
  for (; !sub_216B3BD5C(v1); v1 = sub_216B2037C(v1))
    ;
  return (_QWORD *)sub_216B2037C(v1);
}

uint64_t sub_216B52214(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v5;

  v5 = 0;
  result = sub_216B52250(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t sub_216B52250(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B50ED0();
    v10 = sub_216B512E8();
    v11 = v8 - 1;
    v12 = sub_216B52378(a2) & (v8 - 1);
    v13 = (uint64_t *)(v6 + 24 * v12);
    if (sub_216B2A5FC(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v16 = a3;
      v14 = 0;
      v15 = 1;
      while (!sub_216B2A5FC(*v13, v9))
      {
        if (sub_216B2A5FC(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (uint64_t *)(v6 + 24 * v12);
        ++v15;
        if (sub_216B2A5FC(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
LABEL_13:
      a3 = v16;
    }
  }
  else
  {
    v13 = 0;
  }
  *a3 = v13;
  return result;
}

uint64_t sub_216B52378(_QWORD *a1)
{
  return sub_216B2CDAC(*a1);
}

uint64_t sub_216B52380(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B523B0((uint64_t **)a1);
  return a1;
}

uint64_t sub_216B523B0(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = sub_216B50F08();
  result = sub_216B512EC();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B2A5FC(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 3;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

__n128 sub_216B5242C(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  __n128 result;

  *(_QWORD *)a1 = *a2;
  result = *a3;
  *(__n128 *)(a1 + 8) = *a3;
  return result;
}

__n128 sub_216B52440(uint64_t a1, uint64_t *a2, __n128 *a3, uint64_t *a4)
{
  uint64_t *v6;
  __n128 result;

  v6 = sub_216B52478(a1, a2, a4);
  *v6 = *a2;
  result = *a3;
  *(__n128 *)(v6 + 1) = *a3;
  return result;
}

uint64_t *sub_216B52478(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B52560(a1, (2 * v6));
    sub_216B52214(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B52560(a1, v7);
    sub_216B52214(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B50ED0();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B52564(uint64_t a1, int a2)
{
  unsigned int v3;
  void *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(void **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B50E20(a1, *v5);
  if (v4)
  {
    sub_216B525F0(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    j__free(v4);
  }
  else
  {
    sub_216B50E6C(a1);
  }
}

uint64_t sub_216B525F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  sub_216B50E6C(a1);
  v6 = sub_216B50ED0();
  result = sub_216B512E8();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*(_QWORD *)a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*(_QWORD *)a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B52214(a1, (uint64_t *)a2, &v9);
          *(_QWORD *)v9 = *(_QWORD *)a2;
          *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 24;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216B526A8(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[8];
  _QWORD v22[3];
  _QWORD v23[13];

  v8 = a3;
  v23[12] = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v11 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, a1, a2, a3, a4, a6);
  }
  else if (a4 && (a3 & 1) != 0)
  {
    sub_216B324FC((uint64_t)v21);
    sub_216B25FA8((uint64_t)v23, a1);
    v22[0] = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)a6 + 24))(a6, v23, v21);
    v22[1] = v12;
    if (sub_216B27BAC(v22))
    {
      v11 = 1;
    }
    else
    {
      v16 = sub_216B25CA8((uint64_t)v21, v13);
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v16 + 16))(v23);
      if (sub_216B50930((uint64_t)v23))
      {
        v18 = j_nullsub_1(v23, v17);
        sub_216B52888(v18, a2);
        sub_216B503B0(a4, (uint64_t)v21);
        v11 = 0;
      }
      else
      {
        sub_216B27C08(a4);
        v11 = 1;
      }
      sub_216B50940((uint64_t)v23, v19);
    }
    sub_216B27C04(v21);
  }
  else
  {
    sub_216B25FA8((uint64_t)v22, a1);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)a6 + 16))(v23, a6, v22);
    if (sub_216B50930((uint64_t)v23))
    {
      v15 = j_nullsub_1(v23, v14);
      sub_216B52888(v15, a2);
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    sub_216B50940((uint64_t)v23, v14);
  }
  if (v11 != 1)
  {
    if (*(unsigned __int8 *)(a2 + 56) == (v8 ^ 1))
      return 0;
    if (a4)
      sub_216B27C08(a4);
  }
  return 1;
}

uint64_t sub_216B52888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  std::string v9;

  v8[0] = sub_216B52934(a1);
  v8[1] = v4;
  sub_216B24898(v8, (uint64_t)&v9);
  sub_216B26E7C(a2, (uint64_t)&v9);
  std::string::~string(&v9);
  *(_QWORD *)(a2 + 24) = sub_216B5295C(a1);
  v9.__r_.__value_.__r.__words[0] = sub_216B52964(a1);
  v9.__r_.__value_.__l.__size_ = v5;
  *(_QWORD *)(a2 + 32) = sub_216B29D90(&v9);
  *(_QWORD *)(a2 + 40) = sub_216B52970(a1);
  *(_QWORD *)(a2 + 48) = v6;
  *(_BYTE *)(a2 + 56) = sub_216B69BC4(a1);
  result = sub_216B5297C(a1);
  *(_BYTE *)(a2 + 57) = (_DWORD)result == 7;
  *(_BYTE *)(a2 + 58) = 0;
  *(_BYTE *)(a2 + 59) = *(_BYTE *)(a1 + 80);
  return result;
}

uint64_t sub_216B52934(uint64_t a1)
{
  uint64_t v2;

  sub_216B26CA0(&v2, a1);
  return v2;
}

uint64_t sub_216B5295C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_216B52964(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_216B52970(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_216B5297C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_216B52984(uint64_t result)
{
  *(_DWORD *)result = 6;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_216B529A8()
{
  *(_QWORD *)sub_216B1D1D4(8) = 0;
  return sub_216B529C4();
}

uint64_t sub_216B529C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v9[2];

  v6 = sub_216B4FA68(a1, 0x2000);
  *(_QWORD *)(v6 + 160) = a3;
  *(_QWORD *)(v6 + 168) = a2;
  sub_216B52A38(v6, a2);
  sub_216B1E678((int)v9, "import");
  v7 = (unsigned int *)sub_216B4AAC4(a1, v9[0], v9[1]);
  sub_216B53B24(v7, 1);
  return a1;
}

uint64_t sub_216B52A38(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6[2];
  uint64_t v7[2];
  uint64_t v8[2];
  uint64_t v9[2];
  uint64_t v10[2];
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18[2];
  uint64_t v19[2];
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  uint64_t v25[2];
  uint64_t v26[2];
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  uint64_t v30[2];
  uint64_t v31[2];
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  uint64_t v35[2];
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  uint64_t v42[2];
  uint64_t v43[2];
  uint64_t v44[2];
  uint64_t v45[2];
  uint64_t v46[2];
  uint64_t v47[2];
  uint64_t v48[2];
  uint64_t v49[2];
  uint64_t v50[2];
  uint64_t v51[2];
  uint64_t v52[2];
  uint64_t v53[2];
  uint64_t v54[2];
  uint64_t v55[2];
  uint64_t v56[2];
  uint64_t v57[2];
  uint64_t v58[2];
  uint64_t v59[2];
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63[2];
  uint64_t v64[2];
  uint64_t v65[2];
  uint64_t v66[2];
  uint64_t v67[2];
  uint64_t v68[2];
  uint64_t v69[2];
  uint64_t v70[2];
  uint64_t v71[2];
  uint64_t v72[2];
  uint64_t v73[2];
  uint64_t v74[2];
  uint64_t v75[2];
  uint64_t v76[2];
  uint64_t v77[2];
  uint64_t v78[2];
  uint64_t v79[2];
  uint64_t v80[2];
  uint64_t v81[2];
  uint64_t v82[2];
  uint64_t v83[2];
  uint64_t v84[2];
  uint64_t v85[2];
  uint64_t v86[2];
  uint64_t v87[2];
  uint64_t v88[2];
  uint64_t v89[2];
  uint64_t v90[2];
  uint64_t v91[2];
  uint64_t v92[2];
  uint64_t v93[2];

  if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
  {
    sub_216B1E678((int)v93, "and");
    sub_216B5D8B4(v93[0], v93[1], 28, a1);
    if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
    {
      sub_216B1E678((int)v92, "and_eq");
      sub_216B5D8B4(v92[0], v92[1], 29, a1);
      if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
      {
        sub_216B1E678((int)v91, "bitand");
        sub_216B5D8B4(v91[0], v91[1], 27, a1);
        if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
        {
          sub_216B1E678((int)v90, "bitor");
          sub_216B5D8B4(v90[0], v90[1], 56, a1);
          if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
          {
            sub_216B1E678((int)v89, "compl");
            sub_216B5D8B4(v89[0], v89[1], 39, a1);
            if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
            {
              sub_216B1E678((int)v88, "not");
              sub_216B5D8B4(v88[0], v88[1], 40, a1);
              if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
              {
                sub_216B1E678((int)v87, "not_eq");
                sub_216B5D8B4(v87[0], v87[1], 41, a1);
                if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
                {
                  sub_216B1E678((int)v86, "or");
                  sub_216B5D8B4(v86[0], v86[1], 57, a1);
                  if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
                  {
                    sub_216B1E678((int)v85, "or_eq");
                    sub_216B5D8B4(v85[0], v85[1], 58, a1);
                    if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
                    {
                      sub_216B1E678((int)v84, "xor");
                      sub_216B5D8B4(v84[0], v84[1], 54, a1);
                      if ((*(_BYTE *)(a2 + 3) & 0x10) != 0)
                      {
                        sub_216B1E678((int)v83, "xor_eq");
                        sub_216B5D8B4(v83[0], v83[1], 55, a1);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v82, "__is_literal_type");
    sub_216B5D720(v82[0], v82[1], 209, 2u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v81, "global");
    sub_216B5D720(v81[0], v81[1], 256, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v80, "local");
    sub_216B5D720(v80[0], v80[1], 257, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v79, "constant");
    sub_216B5D720(v79[0], v79[1], 258, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v78, "private");
    sub_216B5D720(v78[0], v78[1], 259, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v77, "kernel");
    sub_216B5D720(v77[0], v77[1], 260, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v76, "read_only");
    sub_216B5D720(v76[0], v76[1], 261, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v75, "write_only");
    sub_216B5D720(v75[0], v75[1], 262, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v74, "read_write");
    sub_216B5D720(v74[0], v74[1], 263, 0x200u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v73, "__fp16");
    sub_216B5D720(v73[0], v73[1], 269, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v72, "__alignof__");
    sub_216B5D720(v72[0], v72[1], 166, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v71, "__asm");
    sub_216B5D720(v71[0], v71[1], 122, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v70, "__asm__");
    sub_216B5D720(v70[0], v70[1], 122, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v69, "__attribute__");
    sub_216B5D720(v69[0], v69[1], 167, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v68, "__complex");
    sub_216B5D720(v68[0], v68[1], 113, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v67, "__complex__");
    sub_216B5D720(v67[0], v67[1], 113, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v66, "__const");
    sub_216B5D720(v66[0], v66[1], 79, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v65, "__const__");
    sub_216B5D720(v65[0], v65[1], 79, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v64, "__decltype");
    sub_216B5D720(v64[0], v64[1], 157, 2u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v63, "__imag__");
    sub_216B5D720(v63[0], v63[1], 173, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v62, "__inline");
    sub_216B5D720(v62[0], v62[1], 91, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v61, "__inline__");
    sub_216B5D720(v61[0], v61[1], 91, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v60, "__nullptr");
    sub_216B5D720(v60[0], v60[1], 159, 2u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v59, "__real__");
    sub_216B5D720(v59[0], v59[1], 176, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v58, "__restrict");
    sub_216B5D720(v58[0], v58[1], 95, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v57, "__restrict__");
    sub_216B5D720(v57[0], v57[1], 95, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v56, "__signed");
    sub_216B5D720(v56[0], v56[1], 98, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v55, "__signed__");
    sub_216B5D720(v55[0], v55[1], 98, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v54, "__typeof");
    sub_216B5D720(v54[0], v54[1], 180, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v53, "__typeof__");
    sub_216B5D720(v53[0], v53[1], 180, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v52, "__volatile");
    sub_216B5D720(v52[0], v52[1], 107, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v51, "__volatile__");
    sub_216B5D720(v51[0], v51[1], 107, 0xEFFFu, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v50, "__int8");
    sub_216B5D720(v50[0], v50[1], 78, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v49, "__int16");
    sub_216B5D720(v49[0], v49[1], 97, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v48, "__int32");
    sub_216B5D720(v48[0], v48[1], 92, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v47, "__wchar_t");
    sub_216B5D720(v47[0], v47[1], 151, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v46, "_asm");
    sub_216B5D720(v46[0], v46[1], 122, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v45, "_alignof");
    sub_216B5D720(v45[0], v45[1], 166, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v44, "__builtin_alignof");
    sub_216B5D720(v44[0], v44[1], 166, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v43, "_cdecl");
    sub_216B5D720(v43[0], v43[1], 250, 0x110u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v42, "_fastcall");
    sub_216B5D720(v42[0], v42[1], 252, 0x110u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v41, "_stdcall");
    sub_216B5D720(v41[0], v41[1], 251, 0x110u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v40, "_thiscall");
    sub_216B5D720(v40[0], v40[1], 253, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v39, "_uuidof");
    sub_216B5D720(v39[0], v39[1], 282, 0x110u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v38, "_inline");
    sub_216B5D720(v38[0], v38[1], 91, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v37, "_declspec");
    sub_216B5D720(v37[0], v37[1], 249, 0x10u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v36, "_pascal");
    sub_216B5D720(v36[0], v36[1], 266, 0x100u, a2, a1);
  }
  if (!sub_216B5D8E0(a2))
  {
    sub_216B1E678((int)v35, "__char16_t");
    sub_216B5D720(v35[0], v35[1], 154, 2u, a2, a1);
  }
  result = sub_216B5D8E0(a2);
  if (!(_DWORD)result)
  {
    sub_216B1E678((int)v34, "__char32_t");
    result = sub_216B5D720(v34[0], v34[1], 155, 2u, a2, a1);
  }
  v5 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x400) != 0)
  {
    sub_216B1E678((int)v33, "not_keyword");
    result = (uint64_t)sub_216B5D8EC(v33[0], v33[1], 0, a1);
    v5 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x400) != 0)
    {
      sub_216B1E678((int)v32, "class");
      result = (uint64_t)sub_216B5D8EC(v32[0], v32[1], 1, a1);
      v5 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x400) != 0)
      {
        sub_216B1E678((int)v31, "compatibility_alias");
        result = (uint64_t)sub_216B5D8EC(v31[0], v31[1], 2, a1);
        v5 = *(_QWORD *)a2;
        if ((*(_QWORD *)a2 & 0x400) != 0)
        {
          sub_216B1E678((int)v30, "defs");
          result = (uint64_t)sub_216B5D8EC(v30[0], v30[1], 3, a1);
          v5 = *(_QWORD *)a2;
          if ((*(_QWORD *)a2 & 0x400) != 0)
          {
            sub_216B1E678((int)v29, "encode");
            result = (uint64_t)sub_216B5D8EC(v29[0], v29[1], 4, a1);
            v5 = *(_QWORD *)a2;
            if ((*(_QWORD *)a2 & 0x400) != 0)
            {
              sub_216B1E678((int)v28, "end");
              result = (uint64_t)sub_216B5D8EC(v28[0], v28[1], 5, a1);
              v5 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 0x400) != 0)
              {
                sub_216B1E678((int)v27, "implementation");
                result = (uint64_t)sub_216B5D8EC(v27[0], v27[1], 6, a1);
                v5 = *(_QWORD *)a2;
                if ((*(_QWORD *)a2 & 0x400) != 0)
                {
                  sub_216B1E678((int)v26, "interface");
                  result = (uint64_t)sub_216B5D8EC(v26[0], v26[1], 7, a1);
                  v5 = *(_QWORD *)a2;
                  if ((*(_QWORD *)a2 & 0x400) != 0)
                  {
                    sub_216B1E678((int)v25, "private");
                    result = (uint64_t)sub_216B5D8EC(v25[0], v25[1], 8, a1);
                    v5 = *(_QWORD *)a2;
                    if ((*(_QWORD *)a2 & 0x400) != 0)
                    {
                      sub_216B1E678((int)v24, "protected");
                      result = (uint64_t)sub_216B5D8EC(v24[0], v24[1], 9, a1);
                      v5 = *(_QWORD *)a2;
                      if ((*(_QWORD *)a2 & 0x400) != 0)
                      {
                        sub_216B1E678((int)v23, "protocol");
                        result = (uint64_t)sub_216B5D8EC(v23[0], v23[1], 10, a1);
                        v5 = *(_QWORD *)a2;
                        if ((*(_QWORD *)a2 & 0x400) != 0)
                        {
                          sub_216B1E678((int)v22, "public");
                          result = (uint64_t)sub_216B5D8EC(v22[0], v22[1], 11, a1);
                          v5 = *(_QWORD *)a2;
                          if ((*(_QWORD *)a2 & 0x400) != 0)
                          {
                            sub_216B1E678((int)v21, "selector");
                            result = (uint64_t)sub_216B5D8EC(v21[0], v21[1], 12, a1);
                            v5 = *(_QWORD *)a2;
                            if ((*(_QWORD *)a2 & 0x400) != 0)
                            {
                              sub_216B1E678((int)v20, "throw");
                              result = (uint64_t)sub_216B5D8EC(v20[0], v20[1], 13, a1);
                              v5 = *(_QWORD *)a2;
                              if ((*(_QWORD *)a2 & 0x400) != 0)
                              {
                                sub_216B1E678((int)v19, "try");
                                result = (uint64_t)sub_216B5D8EC(v19[0], v19[1], 14, a1);
                                v5 = *(_QWORD *)a2;
                                if ((*(_QWORD *)a2 & 0x400) != 0)
                                {
                                  sub_216B1E678((int)v18, "catch");
                                  result = (uint64_t)sub_216B5D8EC(v18[0], v18[1], 15, a1);
                                  v5 = *(_QWORD *)a2;
                                  if ((*(_QWORD *)a2 & 0x400) != 0)
                                  {
                                    sub_216B1E678((int)v17, "finally");
                                    result = (uint64_t)sub_216B5D8EC(v17[0], v17[1], 16, a1);
                                    v5 = *(_QWORD *)a2;
                                    if ((*(_QWORD *)a2 & 0x400) != 0)
                                    {
                                      sub_216B1E678((int)v16, "synchronized");
                                      result = (uint64_t)sub_216B5D8EC(v16[0], v16[1], 17, a1);
                                      v5 = *(_QWORD *)a2;
                                      if ((*(_QWORD *)a2 & 0x400) != 0)
                                      {
                                        sub_216B1E678((int)v15, "autoreleasepool");
                                        result = (uint64_t)sub_216B5D8EC(v15[0], v15[1], 18, a1);
                                        v5 = *(_QWORD *)a2;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((v5 & 0x800) != 0)
  {
    sub_216B1E678((int)v14, "property");
    result = (uint64_t)sub_216B5D8EC(v14[0], v14[1], 19, a1);
    if ((*(_BYTE *)(a2 + 1) & 8) != 0)
    {
      sub_216B1E678((int)v13, "package");
      result = (uint64_t)sub_216B5D8EC(v13[0], v13[1], 20, a1);
      if ((*(_BYTE *)(a2 + 1) & 8) != 0)
      {
        sub_216B1E678((int)v12, "required");
        result = (uint64_t)sub_216B5D8EC(v12[0], v12[1], 21, a1);
        if ((*(_BYTE *)(a2 + 1) & 8) != 0)
        {
          sub_216B1E678((int)v11, "optional");
          result = (uint64_t)sub_216B5D8EC(v11[0], v11[1], 22, a1);
          if ((*(_BYTE *)(a2 + 1) & 8) != 0)
          {
            sub_216B1E678((int)v10, "synthesize");
            result = (uint64_t)sub_216B5D8EC(v10[0], v10[1], 23, a1);
            if ((*(_BYTE *)(a2 + 1) & 8) != 0)
            {
              sub_216B1E678((int)v9, "dynamic");
              result = (uint64_t)sub_216B5D8EC(v9[0], v9[1], 24, a1);
              if ((*(_BYTE *)(a2 + 1) & 8) != 0)
              {
                sub_216B1E678((int)v8, "import");
                result = (uint64_t)sub_216B5D8EC(v8[0], v8[1], 25, a1);
                if ((*(_BYTE *)(a2 + 1) & 8) != 0)
                {
                  sub_216B1E678((int)v7, "partial_interface");
                  result = (uint64_t)sub_216B5D8EC(v7[0], v7[1], 26, a1);
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(a2 + 25) & 8) != 0)
  {
    sub_216B1E678((int)v6, "__unknown_anytype");
    return sub_216B5D720(v6[0], v6[1], 494, 0xEFFFu, a2, a1);
  }
  return result;
}

unsigned int *sub_216B53B24(unsigned int *a1, int a2)
{
  unsigned int v2;
  unsigned int v3;

  if (a2)
    v2 = 0x80000000;
  else
    v2 = 0;
  v3 = v2 & 0x80000000 | *a1 & 0x7FFFFFFF;
  *a1 = v3;
  if (!a2)
    return (unsigned int *)sub_216B5E058(a1);
  *a1 = v3 | 0x4000000;
  return a1;
}

uint64_t sub_216B53B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  int v11;
  uint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  int v18;
  int v19;
  uint64_t v20;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v31;
  int v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v48;
  int v49;
  uint64_t v50;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v59;
  uint64_t v60;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v67;
  int v68;
  uint64_t v69;
  int v71;
  int v72;
  uint64_t v73;
  int v75;
  uint64_t v76;
  int v78;
  uint64_t v79;
  BOOL v80;
  int v82;
  uint64_t v83;
  BOOL v84;
  int v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v90;
  int v92;
  uint64_t v93;
  BOOL v94;
  int v96;
  uint64_t v97;
  int v99;
  uint64_t v100;
  int v102;
  uint64_t v103;
  uint64_t v105;
  int v107;
  uint64_t v108;
  BOOL v109;
  int v111;
  uint64_t v112;
  BOOL v113;
  BOOL v114;
  _QWORD *v116;
  int v120;
  int v121;
  uint64_t v122;
  int v124;
  uint64_t v125;
  int v127;
  uint64_t v128;
  uint64_t v130;
  int v132;
  uint64_t v133;
  uint64_t v135;
  int v137;
  uint64_t v138;
  int v140;
  int v141;
  uint64_t v142;
  int v144;
  uint64_t v145;
  int v147;
  uint64_t v148;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v157;
  int v159;
  uint64_t v160;
  uint64_t v162;
  int v165;
  uint64_t v166;
  int v168;
  uint64_t v169;
  int v171;
  uint64_t v172;
  int v174;
  uint64_t v175;
  int v177;
  uint64_t v178;
  int v180;
  uint64_t v181;
  int v183;
  uint64_t v184;
  int v186;
  uint64_t v187;
  uint64_t v189;
  int v191;
  uint64_t v192;
  uint64_t v194;
  int v196;
  uint64_t v197;
  uint64_t v199;
  uint64_t v201;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v207;
  int v209;
  uint64_t v210;
  int v212;
  uint64_t v213;
  int v215;
  uint64_t v216;
  int v218;
  uint64_t v219;
  uint64_t v221;
  int v223;
  uint64_t v224;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v230;
  uint64_t v232;
  int v234;
  uint64_t v235;
  int v237;
  uint64_t v238;
  int v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v244;
  int v247;
  uint64_t v248;
  BOOL v249;
  uint64_t v251;
  int v254;
  uint64_t v255;
  BOOL v256;
  int v258;
  uint64_t v259;
  int v261;
  uint64_t v262;
  uint64_t v264;
  int v267;
  uint64_t v268;
  int v270;
  uint64_t v271;
  uint64_t v273;
  int v275;
  uint64_t v276;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v283;
  uint64_t v285;
  int v287;
  int v288;
  int v289;
  uint64_t v290;
  int v292;
  int v293;
  int v294;
  uint64_t v295;
  int v297;
  uint64_t v298;
  int v300;
  int v301;
  int v302;
  uint64_t v303;
  int v305;
  uint64_t v306;
  int v308;
  int v309;
  int v310;
  uint64_t v311;
  int v313;
  int v314;
  uint64_t v315;
  int v317;
  int v318;
  int v319;
  int v320;
  uint64_t v321;
  uint64_t v323;
  uint64_t v325;
  uint64_t v327;
  uint64_t v329;
  uint64_t v331;
  int v333;
  uint64_t v334;
  uint64_t v336;
  int v338;
  uint64_t v339;
  uint64_t v341;
  uint64_t v343;
  int v345;
  uint64_t v346;
  int v348;
  int v349;
  int v350;
  uint64_t v351;
  uint64_t v353;
  int v355;
  uint64_t v356;
  uint64_t v358;
  int v360;
  int v361;
  uint64_t v362;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v369;
  int v371;
  uint64_t v372;
  uint64_t v374;
  int v376;
  uint64_t v377;
  uint64_t v379;
  uint64_t v381;
  int v383;
  uint64_t v384;
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v390;
  uint64_t v392;
  uint64_t v394;
  int v396;
  int v397;
  uint64_t v398;
  int v400;
  uint64_t v401;
  uint64_t v403;
  uint64_t v405;
  int v407;
  int v408;
  uint64_t v409;
  uint64_t v411;
  uint64_t v413;
  int v415;
  uint64_t v416;
  int v418;
  uint64_t v419;
  int v421;
  uint64_t v422;
  int v424;
  uint64_t v425;
  uint64_t v427;
  int v429;
  uint64_t v430;
  uint64_t v432;
  int v434;
  int v435;
  uint64_t v436;
  int v438;
  uint64_t v439;
  uint64_t v441;
  int v443;
  uint64_t v444;
  uint64_t v446;
  int v449;
  uint64_t v450;
  uint64_t v452;
  uint64_t v454;
  uint64_t v456;
  int v458;
  uint64_t v459;
  uint64_t v461;
  int v463;
  uint64_t v464;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t v471;
  int v473;
  uint64_t v474;
  int v476;
  uint64_t v477;
  int v479;
  uint64_t v480;
  int v482;
  uint64_t v483;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  uint64_t v490;
  uint64_t v492;
  uint64_t v494;
  uint64_t v496;
  uint64_t v498;
  uint64_t v500;
  uint64_t v502;
  int v504;
  uint64_t v505;
  int v507;
  uint64_t v508;
  int v510;
  uint64_t v511;
  uint64_t v513;
  uint64_t v515;
  uint64_t v517;
  int v519;
  int v520;
  uint64_t v521;
  uint64_t v523;
  uint64_t v525;
  uint64_t v527;
  uint64_t v529;
  uint64_t v531;
  uint64_t v533;
  uint64_t v535;
  int v537;
  uint64_t v538;
  uint64_t v540;
  int v542;
  int v543;
  uint64_t v544;
  int v546;
  uint64_t v547;
  int v549;
  uint64_t v550;
  uint64_t v552;
  uint64_t v554;
  uint64_t v556;
  int v558;
  uint64_t v559;
  uint64_t v561;
  uint64_t v564;
  uint64_t v567;
  uint64_t v570;
  int v572;
  uint64_t v573;
  int v575;
  uint64_t v576;
  int v578;
  int v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v583;
  uint64_t v585;
  int v587;
  uint64_t v588;
  uint64_t v590;
  uint64_t v592;
  uint64_t v594;
  int v596;
  uint64_t v597;
  uint64_t v599;
  uint64_t v601;
  uint64_t v603;
  uint64_t v605;
  int v607;
  uint64_t v608;
  int v610;
  uint64_t v611;
  uint64_t v613;
  int v615;
  uint64_t v616;
  uint64_t v618;
  uint64_t v620;
  uint64_t v622;
  uint64_t v624;
  uint64_t v626;
  int v628;
  uint64_t v629;
  uint64_t v631;
  uint64_t v633;
  uint64_t v635;
  uint64_t v637;
  uint64_t v639;
  uint64_t v641;
  uint64_t v643;
  uint64_t v645;
  uint64_t v647;
  int v649;
  int v650;
  uint64_t v651;
  int v653;
  uint64_t v654;
  uint64_t v656;
  uint64_t v658;
  uint64_t v660;
  uint64_t v662;
  uint64_t v664;
  uint64_t v666;
  uint64_t v668;
  uint64_t v670;
  uint64_t v672;
  uint64_t v674;
  uint64_t v676;
  uint64_t v678;
  uint64_t v680;
  uint64_t v682;
  uint64_t v684;
  uint64_t v686;
  uint64_t v688;
  uint64_t v690;
  int v692;
  uint64_t v693;
  uint64_t v695;
  uint64_t v697;
  uint64_t v699;
  uint64_t v701;
  int v703;
  uint64_t v704;
  int v706;
  uint64_t v707;
  int v709;
  uint64_t v710;
  uint64_t v712;
  uint64_t v714;
  uint64_t v716;
  uint64_t v718;
  uint64_t v720;
  uint64_t v722;
  int v724;
  uint64_t v725;
  uint64_t v727;
  int v729;
  int v730;
  uint64_t v731;
  uint64_t v733;
  uint64_t v735;
  uint64_t v737;
  uint64_t v739;
  uint64_t v741;
  int v743;
  int v744;
  uint64_t v745;
  int v747;
  uint64_t v748;
  uint64_t v750;
  uint64_t v752;
  int v754;
  uint64_t v755;
  uint64_t v757;
  uint64_t v759;
  uint64_t v761;
  uint64_t v763;
  uint64_t v765;
  uint64_t v767;
  uint64_t v769;
  uint64_t v771;
  uint64_t v773;
  uint64_t v775;
  uint64_t v777;
  int v779;
  uint64_t v780;
  uint64_t v782;
  uint64_t v784;
  uint64_t v786;
  int v788;
  uint64_t v789;
  uint64_t v791;
  _QWORD v793[2];
  _QWORD v794[2];
  _QWORD v795[2];
  _QWORD v796[2];
  _QWORD v797[2];
  _QWORD v798[2];
  _QWORD v799[2];
  _QWORD v800[2];
  _QWORD v801[2];
  _QWORD v802[2];
  _QWORD v803[2];
  _QWORD v804[2];
  _QWORD v805[2];
  _QWORD v806[2];
  _QWORD v807[2];
  _QWORD v808[2];
  _QWORD v809[2];
  _QWORD v810[2];
  _QWORD v811[2];
  _QWORD v812[2];
  _QWORD v813[2];
  _QWORD v814[2];
  _QWORD v815[2];
  _QWORD v816[2];
  _QWORD v817[2];
  _QWORD v818[2];
  _QWORD v819[2];
  _QWORD v820[2];
  _QWORD v821[2];
  _QWORD v822[2];
  _QWORD v823[2];
  _QWORD v824[2];
  _QWORD v825[2];
  _QWORD v826[2];
  _QWORD v827[2];
  _QWORD v828[2];
  _QWORD v829[2];
  _QWORD v830[2];
  _QWORD v831[2];
  _QWORD v832[2];
  _QWORD v833[2];
  _QWORD v834[2];
  _QWORD v835[2];
  _QWORD v836[2];
  _QWORD v837[2];
  _QWORD v838[2];
  _QWORD v839[2];
  _QWORD v840[2];
  _QWORD v841[2];
  _QWORD v842[2];
  _QWORD v843[2];
  _QWORD v844[2];
  _QWORD v845[2];
  _QWORD v846[2];
  _QWORD v847[2];
  _QWORD v848[2];
  _QWORD v849[2];
  _QWORD v850[2];
  _QWORD v851[2];
  _QWORD v852[2];
  _QWORD v853[2];
  _QWORD v854[2];
  _QWORD v855[2];
  _QWORD v856[2];
  _QWORD v857[2];
  _QWORD v858[2];
  _QWORD v859[2];
  _QWORD v860[2];
  _QWORD v861[2];
  _QWORD v862[2];
  _QWORD v863[2];
  _QWORD v864[2];
  _QWORD v865[2];
  _QWORD v866[2];
  _QWORD v867[2];
  _QWORD v868[2];
  _QWORD v869[2];
  _QWORD v870[2];
  _QWORD v871[2];
  _QWORD v872[2];
  _QWORD v873[2];
  _QWORD v874[2];
  _QWORD v875[2];
  _QWORD v876[2];
  _QWORD v877[2];
  _QWORD v878[2];
  _QWORD v879[2];
  _QWORD v880[2];
  _QWORD v881[2];
  _QWORD v882[2];
  _QWORD v883[2];
  _QWORD v884[2];
  _QWORD v885[2];
  _QWORD v886[2];
  _QWORD v887[2];
  _QWORD v888[2];
  _QWORD v889[2];
  _QWORD v890[2];
  _QWORD v891[2];
  _QWORD v892[2];
  _QWORD v893[2];
  _QWORD v894[2];
  _QWORD v895[2];
  _QWORD v896[2];
  _QWORD v897[2];
  _QWORD v898[2];
  _QWORD v899[2];
  _QWORD v900[2];
  _QWORD v901[2];
  _QWORD v902[2];
  _QWORD v903[2];
  _QWORD v904[2];
  _QWORD v905[2];
  _QWORD v906[2];
  _QWORD v907[2];
  _QWORD v908[2];
  _QWORD v909[2];
  _QWORD v910[2];
  _QWORD v911[2];
  _QWORD v912[2];
  _QWORD v913[2];
  _QWORD v914[2];
  _QWORD v915[2];
  _QWORD v916[2];
  _QWORD v917[2];
  _QWORD v918[2];
  _QWORD v919[2];
  _QWORD v920[2];
  _QWORD v921[2];
  _QWORD v922[2];
  _QWORD v923[2];
  _QWORD v924[2];
  _QWORD v925[2];
  _QWORD v926[2];
  _QWORD v927[2];
  _QWORD v928[2];
  _QWORD v929[2];
  _QWORD v930[2];
  _QWORD v931[2];
  _QWORD v932[2];
  _QWORD v933[2];
  _QWORD v934[2];
  _QWORD v935[2];
  _QWORD v936[2];
  _QWORD v937[2];
  _QWORD v938[2];
  _QWORD v939[2];
  _QWORD v940[2];
  _QWORD v941[2];
  _QWORD v942[2];
  _QWORD v943[2];
  _QWORD v944[2];
  _QWORD v945[2];
  _QWORD v946[2];
  _QWORD v947[2];
  _QWORD v948[2];
  _QWORD v949[2];
  _QWORD v950[2];
  _QWORD v951[2];
  _QWORD v952[2];
  _QWORD v953[2];
  _QWORD v954[2];
  _QWORD v955[2];
  _QWORD v956[2];
  _QWORD v957[2];
  _QWORD v958[2];
  _QWORD v959[2];
  _QWORD v960[2];
  _QWORD v961[2];
  _QWORD v962[2];
  _QWORD v963[2];
  _QWORD v964[2];
  _QWORD v965[2];
  _QWORD v966[2];
  _QWORD v967[2];
  _QWORD v968[2];
  _QWORD v969[2];
  _QWORD v970[2];
  _QWORD v971[2];
  _QWORD v972[2];
  _QWORD v973[2];
  _QWORD v974[2];
  _QWORD v975[2];
  _QWORD v976[2];
  _QWORD v977[2];
  _QWORD v978[2];
  _QWORD v979[2];
  _QWORD v980[2];
  _QWORD v981[2];
  _QWORD v982[2];
  _QWORD v983[2];
  _QWORD v984[2];
  _QWORD v985[2];
  _QWORD v986[2];
  _QWORD v987[2];
  _QWORD v988[2];
  _QWORD v989[2];
  _QWORD v990[2];
  _QWORD v991[2];
  _QWORD v992[2];
  _QWORD v993[2];
  _QWORD v994[2];
  _QWORD v995[2];
  _QWORD v996[2];
  _QWORD v997[2];
  _QWORD v998[2];
  _QWORD v999[2];
  _QWORD v1000[2];
  _QWORD v1001[2];
  _QWORD v1002[2];
  _QWORD v1003[2];
  _QWORD v1004[2];
  _QWORD v1005[2];
  _QWORD v1006[2];
  _QWORD v1007[2];
  _QWORD v1008[2];
  _QWORD v1009[2];
  _QWORD v1010[2];
  _QWORD v1011[2];
  _QWORD v1012[2];
  _QWORD v1013[2];
  _QWORD v1014[2];
  _QWORD v1015[2];
  _QWORD v1016[2];
  _QWORD v1017[2];
  _QWORD v1018[2];
  _QWORD v1019[2];
  _QWORD v1020[2];
  _QWORD v1021[2];
  _QWORD v1022[2];
  _QWORD v1023[2];
  _QWORD v1024[2];
  _QWORD v1025[2];
  _QWORD v1026[2];
  _QWORD v1027[2];
  _QWORD v1028[2];
  _QWORD v1029[2];
  _QWORD v1030[2];
  _QWORD v1031[2];
  _QWORD v1032[2];
  _QWORD v1033[2];
  _QWORD v1034[2];
  _QWORD v1035[2];
  _QWORD v1036[2];
  _QWORD v1037[2];
  _QWORD v1038[2];
  _QWORD v1039[2];
  _QWORD v1040[2];
  _QWORD v1041[2];
  _QWORD v1042[2];
  _QWORD v1043[2];
  _QWORD v1044[2];
  _QWORD v1045[2];
  _QWORD v1046[2];
  _QWORD v1047[2];
  _QWORD v1048[2];
  _QWORD v1049[2];
  _QWORD v1050[2];
  _QWORD v1051[2];
  _QWORD v1052[2];
  _QWORD v1053[2];
  _QWORD v1054[2];
  _QWORD v1055[2];
  _QWORD v1056[2];
  _QWORD v1057[2];
  _QWORD v1058[2];
  _QWORD v1059[2];
  _QWORD v1060[2];
  _QWORD v1061[2];
  _QWORD v1062[2];
  _QWORD v1063[2];
  _QWORD v1064[2];
  _QWORD v1065[2];
  _QWORD v1066[2];
  _QWORD v1067[2];
  _QWORD v1068[2];
  _QWORD v1069[2];
  _QWORD v1070[2];
  _QWORD v1071[2];
  _QWORD v1072[2];
  _QWORD v1073[2];
  _QWORD v1074[2];
  _QWORD v1075[2];
  _QWORD v1076[2];
  _QWORD v1077[2];
  _QWORD v1078[2];
  _QWORD v1079[2];
  _QWORD v1080[2];
  _QWORD v1081[2];
  _QWORD v1082[2];
  _QWORD v1083[2];
  _QWORD v1084[2];
  _QWORD v1085[2];
  _QWORD v1086[2];
  _QWORD v1087[2];
  _QWORD v1088[2];
  _QWORD v1089[2];
  _QWORD v1090[2];
  _QWORD v1091[2];
  _QWORD v1092[2];
  _QWORD v1093[2];
  _QWORD v1094[2];
  _QWORD v1095[2];
  _QWORD v1096[2];
  _QWORD v1097[2];
  _QWORD v1098[2];
  _QWORD v1099[2];
  _QWORD v1100[2];
  _QWORD v1101[2];
  _QWORD v1102[2];
  _QWORD v1103[2];
  _QWORD v1104[2];
  _QWORD v1105[2];
  _QWORD v1106[2];
  _QWORD v1107[2];
  _QWORD v1108[2];
  _QWORD v1109[2];
  _QWORD v1110[2];
  _QWORD v1111[2];
  _QWORD v1112[2];
  _QWORD v1113[2];
  _QWORD v1114[2];
  _QWORD v1115[2];
  _QWORD v1116[2];
  _QWORD v1117[2];
  _QWORD v1118[2];
  _QWORD v1119[2];
  _QWORD v1120[2];
  _QWORD v1121[2];
  _QWORD v1122[2];
  _QWORD v1123[2];
  _QWORD v1124[2];
  _QWORD v1125[2];
  _QWORD v1126[2];
  _QWORD v1127[2];
  _QWORD v1128[2];
  _QWORD v1129[2];
  _QWORD v1130[2];
  _QWORD v1131[2];
  _QWORD v1132[2];
  _QWORD v1133[2];
  _QWORD v1134[2];
  _QWORD v1135[2];
  _QWORD v1136[2];
  _QWORD v1137[2];
  _QWORD v1138[2];
  _QWORD v1139[2];
  _QWORD v1140[2];
  _QWORD v1141[2];
  _QWORD v1142[2];
  _QWORD v1143[2];
  _QWORD v1144[2];
  _QWORD v1145[2];
  _QWORD v1146[2];
  _QWORD v1147[2];
  _QWORD v1148[2];
  _QWORD v1149[2];
  _QWORD v1150[2];
  _QWORD v1151[2];
  _QWORD v1152[2];
  _QWORD v1153[2];
  _QWORD v1154[2];
  _QWORD v1155[2];
  _QWORD v1156[2];
  _QWORD v1157[2];
  _QWORD v1158[2];
  _QWORD v1159[2];
  _QWORD v1160[2];
  _QWORD v1161[2];
  _QWORD v1162[2];
  _QWORD v1163[2];
  _QWORD v1164[2];
  _QWORD v1165[2];
  _QWORD v1166[2];
  _QWORD v1167[2];
  _QWORD v1168[2];
  _QWORD v1169[2];
  _QWORD v1170[2];
  _QWORD v1171[2];
  _QWORD v1172[2];
  _QWORD v1173[2];
  _QWORD v1174[2];
  _QWORD v1175[2];
  _QWORD v1176[2];
  _QWORD v1177[2];
  _QWORD v1178[2];
  _QWORD v1179[2];
  _QWORD v1180[2];
  _QWORD v1181[2];
  _QWORD v1182[2];
  _QWORD v1183[2];
  _QWORD v1184[2];
  _QWORD v1185[2];
  _QWORD v1186[2];
  _QWORD v1187[2];
  _QWORD v1188[2];
  _QWORD v1189[2];
  _QWORD v1190[2];
  _QWORD v1191[2];
  _QWORD v1192[2];
  _QWORD v1193[2];
  _QWORD v1194[2];
  _QWORD v1195[2];
  _QWORD v1196[2];
  _QWORD v1197[2];
  _QWORD v1198[2];
  _QWORD v1199[2];
  _QWORD v1200[2];
  _QWORD v1201[2];
  _QWORD v1202[2];
  _QWORD v1203[2];
  _QWORD v1204[2];
  _QWORD v1205[2];
  _QWORD v1206[2];
  _QWORD v1207[2];
  _QWORD v1208[2];
  _QWORD v1209[2];
  _QWORD v1210[2];

  v0 = MEMORY[0x24BDAC7A8]();
  v1210[0] = v1;
  v1210[1] = v2;
  v3 = sub_216B1E67C((uint64_t)v1210);
  result = 0;
  switch(v3)
  {
    case 2:
      v5 = sub_216B26288(v1210, 0);
      if (v5 != 105)
      {
        if (v5 == 100 && sub_216B26288(v1210, 1) == 111)
        {
          sub_216B1E678((int)v1209, "do");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1209[0];
          v8 = v1209[1];
          v9 = 82;
          goto LABEL_2448;
        }
        return 0;
      }
      v150 = sub_216B26288(v1210, 1);
      if (v150 == 110)
      {
        sub_216B1E678((int)v1207, "in");
        v6 = *(_QWORD *)(v0 + 168);
        v7 = v1207[0];
        v8 = v1207[1];
        v9 = 357;
        goto LABEL_2558;
      }
      if (v150 != 102)
        return 0;
      sub_216B1E678((int)v1208, "if");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v1208[0];
      v8 = v1208[1];
      v9 = 90;
      goto LABEL_2448;
    case 3:
      v10 = sub_216B26288(v1210, 0);
      result = 0;
      switch(v10)
      {
        case 'f':
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 29295)
            return 0;
          sub_216B1E678((int)v1205, "for");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1205[0];
          v8 = v1205[1];
          v9 = 88;
          goto LABEL_2448;
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
          return result;
        case 'i':
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 29806)
            return 0;
          sub_216B1E678((int)v1204, "int");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1204[0];
          v8 = v1204[1];
          v9 = 92;
          goto LABEL_2448;
        case 'n':
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 30565)
            return 0;
          sub_216B1E678((int)v1203, "new");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1203[0];
          v8 = v1203[1];
          v9 = 135;
          goto LABEL_312;
        case 'o':
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 29813)
            return 0;
          sub_216B1E678((int)v1202, "out");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1202[0];
          v8 = v1202[1];
          v9 = 395;
          goto LABEL_2558;
        default:
          if (v10 != 116)
          {
            if (v10 != 97)
              return result;
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) == 28019)
            {
              sub_216B1E678((int)v1206, "asm");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1206[0];
              v8 = v1206[1];
              v9 = 122;
              v26 = 32778;
              return sub_216B5D720(v7, v8, v9, v26, v6, v0);
            }
            return 0;
          }
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 31090)
            return 0;
          sub_216B1E678((int)v1201, "try");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1201[0];
          v8 = v1201[1];
          v9 = 146;
          break;
      }
      goto LABEL_312;
    case 4:
      v11 = sub_216B26288(v1210, 0);
      result = 0;
      switch(v11)
      {
        case 'a':
          v12 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v12 + 1) != 29813 || *(_BYTE *)(v12 + 3) != 111)
            return 0;
          sub_216B1E678((int)v1200, "auto");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1200[0];
          v8 = v1200[1];
          v9 = 75;
          goto LABEL_2448;
        case 'b':
          v276 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v276 + 1) != 28527 || *(_BYTE *)(v276 + 3) != 108)
            return 0;
          sub_216B1E678((int)v1199, "BOOL");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1199[0];
          v8 = v1199[1];
          v9 = 123;
          goto LABEL_1757;
        case 'c':
          v278 = sub_216B26288(v1210, 1);
          if (v278 == 104)
          {
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 29281)
              return 0;
            sub_216B1E678((int)v1196, "char");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1196[0];
            v8 = v1196[1];
            v9 = 78;
          }
          else
          {
            if (v278 != 97 || sub_216B26288(v1210, 2) != 115)
              return 0;
            v279 = sub_216B26288(v1210, 3);
            if (v279 == 116)
            {
              sub_216B1E678((int)v1197, "cast");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1197[0];
              v8 = v1197[1];
              v9 = 301;
              goto LABEL_2558;
            }
            if (v279 != 101)
              return 0;
            sub_216B1E678((int)v1198, "case");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1198[0];
            v8 = v1198[1];
            v9 = 77;
          }
          goto LABEL_2448;
        case 'e':
          v280 = sub_216B26288(v1210, 1);
          if (v280 != 110)
          {
            if (v280 == 108 && *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 25971)
            {
              sub_216B1E678((int)v1195, "else");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1195[0];
              v8 = v1195[1];
              v9 = 84;
              goto LABEL_2448;
            }
            return 0;
          }
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 28021)
            return 0;
          sub_216B1E678((int)v1194, "enum");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1194[0];
          v8 = v1194[1];
          v9 = 85;
          goto LABEL_2448;
        case 'f':
          v281 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v281 + 1) != 24940 || *(_BYTE *)(v281 + 3) != 116)
            return 0;
          sub_216B1E678((int)v1193, "flat");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1193[0];
          v8 = v1193[1];
          v9 = 323;
          goto LABEL_2558;
        case 'g':
          v283 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v283 + 1) != 29807 || *(_BYTE *)(v283 + 3) != 111)
            return 0;
          sub_216B1E678((int)v1192, "goto");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1192[0];
          v8 = v1192[1];
          v9 = 89;
          goto LABEL_2448;
        case 'h':
          v285 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v285 + 1) != 27745 || *(_BYTE *)(v285 + 3) != 102)
            return 0;
          sub_216B1E678((int)v1191, "half");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1191[0];
          v8 = v1191[1];
          v9 = 269;
          v26 = 49152;
          return sub_216B5D720(v7, v8, v9, v26, v6, v0);
        case 'l':
          if (sub_216B26288(v1210, 1) != 111)
            return 0;
          v287 = sub_216B26288(v1210, 2);
          if (v287 != 119)
          {
            if (v287 == 110 && sub_216B26288(v1210, 3) == 103)
            {
              sub_216B1E678((int)v1190, "long");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1190[0];
              v8 = v1190[1];
              v9 = 93;
              goto LABEL_2448;
            }
            return 0;
          }
          if (sub_216B26288(v1210, 3) != 112)
            return 0;
          sub_216B1E678((int)v1189, "lowp");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1189[0];
          v8 = v1189[1];
          v9 = 379;
          goto LABEL_2558;
        case 'm':
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 29793)
            return 0;
          v288 = sub_216B26288(v1210, 3);
          switch(v288)
          {
            case '4':
              sub_216B1E678((int)v1186, "mat4");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1186[0];
              v8 = v1186[1];
              v9 = 388;
              break;
            case '3':
              sub_216B1E678((int)v1187, "mat3");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1187[0];
              v8 = v1187[1];
              v9 = 384;
              break;
            case '2':
              sub_216B1E678((int)v1188, "mat2");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1188[0];
              v8 = v1188[1];
              v9 = 380;
              break;
            default:
              return 0;
          }
          goto LABEL_2558;
        case 't':
          v289 = sub_216B26288(v1210, 1);
          if (v289 != 114)
          {
            if (v289 == 104 && *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 29545)
            {
              sub_216B1E678((int)v1185, "this");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1185[0];
              v8 = v1185[1];
              v9 = 143;
              goto LABEL_1660;
            }
            return 0;
          }
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25973)
            return 0;
          sub_216B1E678((int)v1184, "true");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1184[0];
          v8 = v1184[1];
          v9 = 145;
          goto LABEL_1757;
        case 'u':
          v290 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v290 + 1) != 28265 || *(_BYTE *)(v290 + 3) != 116)
            return 0;
          sub_216B1E678((int)v1183, "uint");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1183[0];
          v8 = v1183[1];
          v9 = 437;
          goto LABEL_2558;
        case 'v':
          v292 = sub_216B26288(v1210, 1);
          if (v292 == 111)
          {
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25705)
              return 0;
            sub_216B1E678((int)v1179, "void");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1179[0];
            v8 = v1179[1];
            v9 = 106;
            goto LABEL_2448;
          }
          if (v292 != 101 || sub_216B26288(v1210, 2) != 99)
            return 0;
          v293 = sub_216B26288(v1210, 3);
          switch(v293)
          {
            case '4':
              sub_216B1E678((int)v1180, "vec4");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1180[0];
              v8 = v1180[1];
              v9 = 457;
              break;
            case '3':
              sub_216B1E678((int)v1181, "vec3");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1181[0];
              v8 = v1181[1];
              v9 = 456;
              break;
            case '2':
              sub_216B1E678((int)v1182, "vec2");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1182[0];
              v8 = v1182[1];
              v9 = 455;
              break;
            default:
              return 0;
          }
          break;
        default:
          return result;
      }
      goto LABEL_2558;
    case 5:
      v14 = sub_216B26288(v1210, 0);
      result = 0;
      switch(v14)
      {
        case '_':
          v15 = sub_216B26288(v1210, 1);
          if (v15 != 95)
          {
            if (v15 == 66)
            {
              v16 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v16 + 2) == 28527 && *(_BYTE *)(v16 + 4) == 108)
              {
                sub_216B1E678((int)v1178, "_Bool");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1178[0];
                v8 = v1178[1];
                v9 = 112;
                goto LABEL_299;
              }
            }
            return 0;
          }
          v485 = sub_216B26288(v1210, 2);
          if (v485 != 119)
          {
            if (v485 == 116 && *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 31090)
            {
              sub_216B1E678((int)v1177, "__try");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1177[0];
              v8 = v1177[1];
              v9 = 283;
              goto LABEL_2053;
            }
            return 0;
          }
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 13366)
            return 0;
          sub_216B1E678((int)v1176, "__w64");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1176[0];
          v8 = v1176[1];
          v9 = 281;
          goto LABEL_2297;
        case 'b':
          v294 = sub_216B26288(v1210, 1);
          if (v294 != 118)
          {
            if (v294 == 114)
            {
              v295 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v295 + 2) == 24933 && *(_BYTE *)(v295 + 4) == 107)
              {
                sub_216B1E678((int)v1175, "break");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1175[0];
                v8 = v1175[1];
                v9 = 76;
                goto LABEL_2448;
              }
            }
            return 0;
          }
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25445)
            return 0;
          v486 = sub_216B26288(v1210, 4);
          switch(v486)
          {
            case '4':
              sub_216B1E678((int)v1172, "bvec4");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1172[0];
              v8 = v1172[1];
              v9 = 299;
              break;
            case '3':
              sub_216B1E678((int)v1173, "bvec3");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1173[0];
              v8 = v1173[1];
              v9 = 298;
              break;
            case '2':
              sub_216B1E678((int)v1174, "bvec2");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1174[0];
              v8 = v1174[1];
              v9 = 297;
              break;
            default:
              return 0;
          }
          goto LABEL_2558;
        case 'c':
          v297 = sub_216B26288(v1210, 1);
          switch(v297)
          {
            case 'o':
              v533 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v533 + 2) == 29550 && *(_BYTE *)(v533 + 4) == 116)
              {
                sub_216B1E678((int)v1169, "const");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1169[0];
                v8 = v1169[1];
                v9 = 79;
                goto LABEL_2448;
              }
              break;
            case 'l':
              v535 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v535 + 2) == 29537 && *(_BYTE *)(v535 + 4) == 115)
              {
                sub_216B1E678((int)v1170, "class");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1170[0];
                v8 = v1170[1];
                v9 = 125;
                goto LABEL_1660;
              }
              break;
            case 'a':
              v298 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v298 + 2) == 25460 && *(_BYTE *)(v298 + 4) == 104)
              {
                sub_216B1E678((int)v1171, "catch");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1171[0];
                v8 = v1171[1];
                v9 = 124;
                goto LABEL_312;
              }
              break;
          }
          return 0;
        case 'd':
          v300 = sub_216B26288(v1210, 1);
          if (v300 == 118)
          {
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25445)
              return 0;
            v487 = sub_216B26288(v1210, 4);
            switch(v487)
            {
              case '4':
                sub_216B1E678((int)v1163, "dvec4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1163[0];
                v8 = v1163[1];
                v9 = 320;
                break;
              case '3':
                sub_216B1E678((int)v1164, "dvec3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1164[0];
                v8 = v1164[1];
                v9 = 319;
                break;
              case '2':
                sub_216B1E678((int)v1165, "dvec2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1165[0];
                v8 = v1165[1];
                v9 = 318;
                break;
              default:
                return 0;
            }
            goto LABEL_2558;
          }
          if (v300 != 109 || *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 29793)
            return 0;
          v301 = sub_216B26288(v1210, 4);
          switch(v301)
          {
            case '4':
              sub_216B1E678((int)v1166, "dmat4");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1166[0];
              v8 = v1166[1];
              v9 = 314;
              break;
            case '3':
              sub_216B1E678((int)v1167, "dmat3");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1167[0];
              v8 = v1167[1];
              v9 = 310;
              break;
            case '2':
              sub_216B1E678((int)v1168, "dmat2");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1168[0];
              v8 = v1168[1];
              v9 = 306;
              break;
            default:
              return 0;
          }
          goto LABEL_464;
        case 'f':
          v302 = sub_216B26288(v1210, 1);
          result = 0;
          if (v302 <= 107)
          {
            if (v302 != 97)
            {
              if (v302 != 105)
                return result;
              v303 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v303 + 2) == 25976 && *(_BYTE *)(v303 + 4) == 100)
              {
                sub_216B1E678((int)v1161, "fixed");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1161[0];
                v8 = v1161[1];
                v9 = 322;
                goto LABEL_2558;
              }
              return 0;
            }
            v570 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v570 + 2) != 29548 || *(_BYTE *)(v570 + 4) != 101)
              return 0;
            sub_216B1E678((int)v1162, "false");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1162[0];
            v8 = v1162[1];
            v9 = 131;
LABEL_1757:
            v26 = 32800;
            return sub_216B5D720(v7, v8, v9, v26, v6, v0);
          }
          if (v302 == 108)
          {
            v573 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v573 + 2) == 24943 && *(_BYTE *)(v573 + 4) == 116)
            {
              sub_216B1E678((int)v1160, "float");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1160[0];
              v8 = v1160[1];
              v9 = 87;
              goto LABEL_2448;
            }
            return 0;
          }
          if (v302 != 118)
            return result;
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25445)
            return 0;
          v466 = sub_216B26288(v1210, 4);
          switch(v466)
          {
            case '4':
              sub_216B1E678((int)v1157, "fvec4");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1157[0];
              v8 = v1157[1];
              v9 = 326;
              break;
            case '3':
              sub_216B1E678((int)v1158, "fvec3");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1158[0];
              v8 = v1158[1];
              v9 = 325;
              break;
            case '2':
              sub_216B1E678((int)v1159, "fvec2");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1159[0];
              v8 = v1159[1];
              v9 = 324;
              break;
            default:
              return 0;
          }
          goto LABEL_2558;
        case 'h':
          v305 = sub_216B26288(v1210, 1);
          result = 0;
          if (v305 > 108)
          {
            if (v305 == 109)
            {
              if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 29793)
                return 0;
              v575 = sub_216B26288(v1210, 4);
              switch(v575)
              {
                case '4':
                  sub_216B1E678((int)v1150, "hmat4");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1150[0];
                  v8 = v1150[1];
                  v9 = 473;
                  break;
                case '3':
                  sub_216B1E678((int)v1151, "hmat3");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1151[0];
                  v8 = v1151[1];
                  v9 = 469;
                  break;
                case '2':
                  sub_216B1E678((int)v1152, "hmat2");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1152[0];
                  v8 = v1152[1];
                  v9 = 465;
                  break;
                default:
                  return 0;
              }
            }
            else
            {
              if (v305 != 118)
                return result;
              if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25445)
                return 0;
              v467 = sub_216B26288(v1210, 4);
              switch(v467)
              {
                case '4':
                  sub_216B1E678((int)v1147, "hvec4");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1147[0];
                  v8 = v1147[1];
                  v9 = 330;
                  break;
                case '3':
                  sub_216B1E678((int)v1148, "hvec3");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1148[0];
                  v8 = v1148[1];
                  v9 = 329;
                  break;
                case '2':
                  sub_216B1E678((int)v1149, "hvec2");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1149[0];
                  v8 = v1149[1];
                  v9 = 328;
                  break;
                default:
                  return 0;
              }
            }
          }
          else
          {
            if (v305 != 97)
            {
              if (v305 != 105)
                return result;
              v306 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v306 + 2) == 26727 && *(_BYTE *)(v306 + 4) == 112)
              {
                sub_216B1E678((int)v1153, "highp");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1153[0];
                v8 = v1153[1];
                v9 = 327;
                goto LABEL_2558;
              }
              return 0;
            }
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 26220)
              return 0;
            v572 = sub_216B26288(v1210, 4);
            switch(v572)
            {
              case '4':
                sub_216B1E678((int)v1154, "half4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1154[0];
                v8 = v1154[1];
                v9 = 482;
                break;
              case '3':
                sub_216B1E678((int)v1155, "half3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1155[0];
                v8 = v1155[1];
                v9 = 481;
                break;
              case '2':
                sub_216B1E678((int)v1156, "half2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1156[0];
                v8 = v1156[1];
                v9 = 480;
                break;
              default:
                return 0;
            }
          }
          goto LABEL_2558;
        case 'i':
          v308 = sub_216B26288(v1210, 1);
          if (v308 == 118)
          {
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25445)
              return 0;
            v488 = sub_216B26288(v1210, 4);
            switch(v488)
            {
              case '4':
                sub_216B1E678((int)v1142, "ivec4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1142[0];
                v8 = v1142[1];
                v9 = 377;
                break;
              case '3':
                sub_216B1E678((int)v1143, "ivec3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1143[0];
                v8 = v1143[1];
                v9 = 376;
                break;
              case '2':
                sub_216B1E678((int)v1144, "ivec2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1144[0];
                v8 = v1144[1];
                v9 = 375;
                break;
              default:
                return 0;
            }
          }
          else
          {
            if (v308 != 110)
              return 0;
            v309 = sub_216B26288(v1210, 2);
            if (v309 != 112)
            {
              if (v309 == 111 && *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 29813)
              {
                sub_216B1E678((int)v1146, "inout");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1146[0];
                v8 = v1146[1];
                v9 = 358;
                goto LABEL_2558;
              }
              return 0;
            }
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 29813)
              return 0;
            sub_216B1E678((int)v1145, "input");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1145[0];
            v8 = v1145[1];
            v9 = 359;
          }
          goto LABEL_2558;
        case 'p':
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1751348321)
            return 0;
          sub_216B1E678((int)v1141, "patch");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1141[0];
          v8 = v1141[1];
          v9 = 398;
          goto LABEL_2558;
        case 's':
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1953656680)
            return 0;
          sub_216B1E678((int)v1140, "short");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1140[0];
          v8 = v1140[1];
          v9 = 97;
          goto LABEL_2448;
        case 't':
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 2003792488)
            return 0;
          sub_216B1E678((int)v1139, "throw");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1139[0];
          v8 = v1139[1];
          v9 = 144;
          goto LABEL_312;
        case 'u':
          v310 = sub_216B26288(v1210, 1);
          switch(v310)
          {
            case 'v':
              if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 25445)
                return 0;
              v537 = sub_216B26288(v1210, 4);
              switch(v537)
              {
                case '4':
                  sub_216B1E678((int)v1134, "uvec4");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1134[0];
                  v8 = v1134[1];
                  v9 = 453;
                  break;
                case '3':
                  sub_216B1E678((int)v1135, "uvec3");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1135[0];
                  v8 = v1135[1];
                  v9 = 452;
                  break;
                case '2':
                  sub_216B1E678((int)v1136, "uvec2");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1136[0];
                  v8 = v1136[1];
                  v9 = 451;
                  break;
                default:
                  return 0;
              }
              goto LABEL_2558;
            case 's':
              v538 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v538 + 2) == 28265 && *(_BYTE *)(v538 + 4) == 103)
              {
                sub_216B1E678((int)v1137, "using");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1137[0];
                v8 = v1137[1];
                v9 = 149;
                goto LABEL_1660;
              }
              break;
            case 'n':
              v311 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v311 + 2) == 28521 && *(_BYTE *)(v311 + 4) == 110)
              {
                sub_216B1E678((int)v1138, "union");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1138[0];
                v8 = v1138[1];
                v9 = 104;
                goto LABEL_2448;
              }
              break;
          }
          break;
        case 'w':
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1701603688)
            return 0;
          sub_216B1E678((int)v1133, "while");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1133[0];
          v8 = v1133[1];
          v9 = 108;
          goto LABEL_2448;
        default:
          return result;
      }
      return 0;
    case 6:
      v18 = sub_216B26288(v1210, 0);
      result = 0;
      switch(v18)
      {
        case '_':
          if (sub_216B26288(v1210, 1) != 95)
            return 0;
          v19 = sub_216B26288(v1210, 2);
          result = 0;
          switch(v19)
          {
            case 'n':
              v20 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v20 + 3) != 27765 || *(_BYTE *)(v20 + 5) != 108)
                return 0;
              sub_216B1E678((int)v1131, "__null");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1131[0];
              v8 = v1131[1];
              v9 = 165;
              goto LABEL_312;
            case 'o':
            case 'p':
            case 'q':
            case 't':
              return result;
            case 'r':
              v682 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v682 + 3) != 24933 || *(_BYTE *)(v682 + 5) != 108)
                return 0;
              sub_216B1E678((int)v1130, "__real");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1130[0];
              v8 = v1130[1];
              v9 = 176;
              goto LABEL_2448;
            case 's':
              v684 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v684 + 3) != 29808 || *(_BYTE *)(v684 + 5) != 114)
                return 0;
              sub_216B1E678((int)v1129, "__sptr");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1129[0];
              v8 = v1129[1];
              v9 = 279;
              goto LABEL_2297;
            case 'u':
              v686 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v686 + 3) != 29808 || *(_BYTE *)(v686 + 5) != 114)
                return 0;
              sub_216B1E678((int)v1128, "__uptr");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1128[0];
              v8 = v1128[1];
              v9 = 280;
              goto LABEL_2297;
            default:
              if (v19 != 105)
                return result;
              v631 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v631 + 3) != 24941 || *(_BYTE *)(v631 + 5) != 103)
                return 0;
              sub_216B1E678((int)v1132, "__imag");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1132[0];
              v8 = v1132[1];
              v9 = 173;
              break;
          }
          goto LABEL_2448;
        case 'a':
          v390 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v390 + 1) != 1986622563 || *(_BYTE *)(v390 + 5) != 101)
            return 0;
          sub_216B1E678((int)v1127, "active");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1127[0];
          v8 = v1127[1];
          v9 = 294;
          goto LABEL_2558;
        case 'b':
          v392 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v392 + 1) != 1701209717 || *(_BYTE *)(v392 + 5) != 114)
            return 0;
          sub_216B1E678((int)v1126, "buffer");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1126[0];
          v8 = v1126[1];
          v9 = 300;
          goto LABEL_464;
        case 'c':
          v394 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v394 + 1) != 1869442415 || *(_BYTE *)(v394 + 5) != 110)
            return 0;
          sub_216B1E678((int)v1125, "common");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1125[0];
          v8 = v1125[1];
          v9 = 304;
          goto LABEL_2558;
        case 'd':
          v396 = sub_216B26288(v1210, 1);
          if (v396 != 111)
          {
            if (v396 == 101 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1702126956)
            {
              sub_216B1E678((int)v1124, "delete");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1124[0];
              v8 = v1124[1];
              v9 = 127;
              goto LABEL_312;
            }
            return 0;
          }
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1701601909)
            return 0;
          sub_216B1E678((int)v1123, "double");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1123[0];
          v8 = v1123[1];
          v9 = 83;
          goto LABEL_2448;
        case 'e':
          if (sub_216B26288(v1210, 1) != 120)
            return 0;
          v397 = sub_216B26288(v1210, 2);
          if (v397 == 116)
          {
            v603 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v603 + 3) == 29285 && *(_BYTE *)(v603 + 5) == 110)
            {
              sub_216B1E678((int)v1121, "extern");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1121[0];
              v8 = v1121[1];
              v9 = 86;
              goto LABEL_2448;
            }
          }
          else if (v397 == 112)
          {
            v398 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v398 + 3) == 29295 && *(_BYTE *)(v398 + 5) == 116)
            {
              sub_216B1E678((int)v1122, "export");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1122[0];
              v8 = v1122[1];
              v9 = 130;
              goto LABEL_312;
            }
          }
          return 0;
        case 'f':
          v400 = sub_216B26288(v1210, 1);
          if (v400 == 114)
          {
            if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1684956521)
              return 0;
            sub_216B1E678((int)v1116, "friend");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1116[0];
            v8 = v1116[1];
            v9 = 132;
            goto LABEL_312;
          }
          if (v400 != 108)
          {
            if (v400 == 105 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1919251564)
            {
              sub_216B1E678((int)v1120, "filter");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1120[0];
              v8 = v1120[1];
              v9 = 321;
              goto LABEL_2558;
            }
            return 0;
          }
          v576 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v576 + 2) != 24943 || *(_BYTE *)(v576 + 4) != 116)
            return 0;
          v578 = sub_216B26288(v1210, 5);
          switch(v578)
          {
            case '4':
              sub_216B1E678((int)v1117, "float4");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1117[0];
              v8 = v1117[1];
              v9 = 479;
              break;
            case '3':
              sub_216B1E678((int)v1118, "float3");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1118[0];
              v8 = v1118[1];
              v9 = 478;
              break;
            case '2':
              sub_216B1E678((int)v1119, "float2");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1119[0];
              v8 = v1119[1];
              v9 = 477;
              break;
            default:
              return 0;
          }
          goto LABEL_2558;
        case 'i':
          v401 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v401 + 1) != 1852402798 || *(_BYTE *)(v401 + 5) != 101)
            return 0;
          sub_216B1E678((int)v1115, "inline");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1115[0];
          v8 = v1115[1];
          v9 = 91;
          v26 = 32779;
          return sub_216B5D720(v7, v8, v9, v26, v6, v0);
        case 'k':
          v403 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v403 + 1) != 1701737061 || *(_BYTE *)(v403 + 5) != 108)
            return 0;
          sub_216B1E678((int)v1114, "kernel");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1114[0];
          v8 = v1114[1];
          v9 = 459;
          goto LABEL_2558;
        case 'l':
          v405 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v405 + 1) != 1970239841 || *(_BYTE *)(v405 + 5) != 116)
            return 0;
          sub_216B1E678((int)v1113, "layout");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1113[0];
          v8 = v1113[1];
          v9 = 378;
          goto LABEL_2558;
        case 'm':
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 29793)
            return 0;
          v407 = sub_216B26288(v1210, 3);
          if (v407 == 52)
          {
            if (sub_216B26288(v1210, 4) != 120)
              return 0;
            v649 = sub_216B26288(v1210, 5);
            switch(v649)
            {
              case '4':
                sub_216B1E678((int)v1104, "mat4x4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1104[0];
                v8 = v1104[1];
                v9 = 391;
                break;
              case '3':
                sub_216B1E678((int)v1105, "mat4x3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1105[0];
                v8 = v1105[1];
                v9 = 390;
                break;
              case '2':
                sub_216B1E678((int)v1106, "mat4x2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1106[0];
                v8 = v1106[1];
                v9 = 389;
                break;
              default:
                return 0;
            }
          }
          else if (v407 == 51)
          {
            if (sub_216B26288(v1210, 4) != 120)
              return 0;
            v650 = sub_216B26288(v1210, 5);
            switch(v650)
            {
              case '4':
                sub_216B1E678((int)v1107, "mat3x4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1107[0];
                v8 = v1107[1];
                v9 = 387;
                break;
              case '3':
                sub_216B1E678((int)v1108, "mat3x3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1108[0];
                v8 = v1108[1];
                v9 = 386;
                break;
              case '2':
                sub_216B1E678((int)v1109, "mat3x2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1109[0];
                v8 = v1109[1];
                v9 = 385;
                break;
              default:
                return 0;
            }
          }
          else
          {
            if (v407 != 50 || sub_216B26288(v1210, 4) != 120)
              return 0;
            v408 = sub_216B26288(v1210, 5);
            switch(v408)
            {
              case '4':
                sub_216B1E678((int)v1110, "mat2x4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1110[0];
                v8 = v1110[1];
                v9 = 383;
                break;
              case '3':
                sub_216B1E678((int)v1111, "mat2x3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1111[0];
                v8 = v1111[1];
                v9 = 382;
                break;
              case '2':
                sub_216B1E678((int)v1112, "mat2x2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1112[0];
                v8 = v1112[1];
                v9 = 381;
                break;
              default:
                return 0;
            }
          }
          goto LABEL_2558;
        case 'o':
          v409 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v409 + 1) != 1970304117 || *(_BYTE *)(v409 + 5) != 116)
            return 0;
          sub_216B1E678((int)v1103, "output");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1103[0];
          v8 = v1103[1];
          v9 = 396;
          goto LABEL_2558;
        case 'p':
          v411 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v411 + 1) != 1768710773 || *(_BYTE *)(v411 + 5) != 99)
            return 0;
          sub_216B1E678((int)v1102, "public");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1102[0];
          v8 = v1102[1];
          v9 = 139;
          goto LABEL_1660;
        case 'r':
          v413 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v413 + 1) != 1920300133 || *(_BYTE *)(v413 + 5) != 110)
            return 0;
          sub_216B1E678((int)v1101, "return");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1101[0];
          v8 = v1101[1];
          v9 = 96;
          goto LABEL_2448;
        case 's':
          v415 = sub_216B26288(v1210, 1);
          result = 0;
          if (v415 <= 115)
          {
            switch(v415)
            {
              case 'a':
                if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1701605485)
                  return 0;
                sub_216B1E678((int)v1100, "sample");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1100[0];
                v8 = v1100[1];
                v9 = 402;
                goto LABEL_2558;
              case 'i':
                v607 = sub_216B26288(v1210, 2);
                if (v607 == 122)
                {
                  v720 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v720 + 3) == 28517 && *(_BYTE *)(v720 + 5) == 102)
                  {
                    sub_216B1E678((int)v1098, "sizeof");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v1098[0];
                    v8 = v1098[1];
                    v9 = 99;
                    goto LABEL_2448;
                  }
                }
                else if (v607 == 103)
                {
                  v608 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v608 + 3) == 25966 && *(_BYTE *)(v608 + 5) == 100)
                  {
                    sub_216B1E678((int)v1099, "signed");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v1099[0];
                    v8 = v1099[1];
                    v9 = 98;
                    goto LABEL_2448;
                  }
                }
                break;
              case 'm':
                if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1752461167)
                {
                  sub_216B1E678((int)v1097, "smooth");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1097[0];
                  v8 = v1097[1];
                  v9 = 423;
                  goto LABEL_2558;
                }
                break;
              default:
                return result;
            }
            return 0;
          }
          if (v415 == 116)
          {
            v610 = sub_216B26288(v1210, 2);
            if (v610 == 114)
            {
              v722 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v722 + 3) == 25461 && *(_BYTE *)(v722 + 5) == 116)
              {
                sub_216B1E678((int)v1095, "struct");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1095[0];
                v8 = v1095[1];
                v9 = 101;
                goto LABEL_2448;
              }
            }
            else if (v610 == 97)
            {
              v611 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v611 + 3) == 26996 && *(_BYTE *)(v611 + 5) == 99)
              {
                sub_216B1E678((int)v1096, "static");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1096[0];
                v8 = v1096[1];
                v9 = 100;
                goto LABEL_2448;
              }
            }
            return 0;
          }
          if (v415 != 117)
          {
            if (v415 != 119)
              return result;
            if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1751348329)
            {
              sub_216B1E678((int)v1093, "switch");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1093[0];
              v8 = v1093[1];
              v9 = 102;
              goto LABEL_2448;
            }
            return 0;
          }
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1886545264)
            return 0;
          sub_216B1E678((int)v1094, "superp");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1094[0];
          v8 = v1094[1];
          v9 = 425;
          goto LABEL_2558;
        case 't':
          v416 = sub_216B1E600((uint64_t)v1210);
          if (*(_WORD *)(v416 + 1) != 28793 || *(_BYTE *)(v416 + 3) != 101)
            return 0;
          v418 = sub_216B26288(v1210, 4);
          if (v418 != 111)
          {
            if (v418 == 105 && sub_216B26288(v1210, 5) == 100)
            {
              sub_216B1E678((int)v1092, "typeid");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1092[0];
              v8 = v1092[1];
              v9 = 148;
              goto LABEL_312;
            }
            return 0;
          }
          if (sub_216B26288(v1210, 5) != 102)
            return 0;
          sub_216B1E678((int)v1091, "typeof");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1091[0];
          v8 = v1091[1];
          v9 = 180;
          v26 = 8;
          break;
        default:
          return result;
      }
      return sub_216B5D720(v7, v8, v9, v26, v6, v0);
    case 7:
      v22 = sub_216B26288(v1210, 0);
      result = 0;
      switch(v22)
      {
        case '_':
          v23 = sub_216B26288(v1210, 1);
          if (v23 != 95)
          {
            if (v23 == 65)
            {
              v24 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v24 + 2) == 1768779636 && *(_BYTE *)(v24 + 6) == 99)
              {
                sub_216B1E678((int)v1090, "_Atomic");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1090[0];
                v8 = v1090[1];
                v9 = 111;
                v26 = 0xFFFF;
                return sub_216B5D720(v7, v8, v9, v26, v6, v0);
              }
            }
            return 0;
          }
          v504 = sub_216B26288(v1210, 2);
          result = 0;
          if (v504 <= 107)
          {
            if (v504 == 99)
            {
              v709 = sub_216B26288(v1210, 3);
              if (v709 == 111)
              {
                v748 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v748 + 4) == 28524 && *(_BYTE *)(v748 + 6) == 114)
                {
                  sub_216B1E678((int)v1088, "__color");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1088[0];
                  v8 = v1088[1];
                  v9 = 492;
                  goto LABEL_2558;
                }
              }
              else if (v709 == 100)
              {
                v710 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v710 + 4) == 25445 && *(_BYTE *)(v710 + 6) == 108)
                {
                  sub_216B1E678((int)v1089, "__cdecl");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1089[0];
                  v8 = v1089[1];
                  v9 = 250;
                  goto LABEL_2448;
                }
              }
            }
            else
            {
              if (v504 != 105)
                return result;
              if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 875983982)
              {
                sub_216B1E678((int)v1087, "uint64_t");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1087[0];
                v8 = v1087[1];
                v9 = 286;
                goto LABEL_2297;
              }
            }
            return 0;
          }
          if (v504 == 108)
          {
            v703 = sub_216B26288(v1210, 3);
            if (v703 == 111)
            {
              v745 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v745 + 4) == 24931 && *(_BYTE *)(v745 + 6) == 108)
              {
                sub_216B1E678((int)v1085, "__local");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1085[0];
                v8 = v1085[1];
                v9 = 257;
                goto LABEL_2088;
              }
            }
            else if (v703 == 101)
            {
              v704 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v704 + 4) == 30305 && *(_BYTE *)(v704 + 6) == 101)
              {
                sub_216B1E678((int)v1086, "__leave");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1086[0];
                v8 = v1086[1];
                v9 = 285;
                goto LABEL_2053;
              }
            }
            return 0;
          }
          if (v504 != 112)
          {
            if (v504 != 116)
              return result;
            if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 1701601889)
            {
              sub_216B1E678((int)v1081, "__table");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1081[0];
              v8 = v1081[1];
              v9 = 493;
              goto LABEL_2558;
            }
            return 0;
          }
          v706 = sub_216B26288(v1210, 3);
          if (v706 != 116)
          {
            if (v706 == 105)
            {
              v707 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v707 + 4) == 25976 && *(_BYTE *)(v707 + 6) == 108)
              {
                sub_216B1E678((int)v1084, "__pixel");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1084[0];
                v8 = v1084[1];
                v9 = 268;
                goto LABEL_2461;
              }
            }
            return 0;
          }
          if (sub_216B26288(v1210, 4) != 114)
            return 0;
          v747 = sub_216B26288(v1210, 5);
          if (v747 != 54)
          {
            if (v747 == 51 && sub_216B26288(v1210, 6) == 50)
            {
              sub_216B1E678((int)v1083, "__ptr32");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1083[0];
              v8 = v1083[1];
              v9 = 278;
              goto LABEL_2297;
            }
            return 0;
          }
          if (sub_216B26288(v1210, 6) != 52)
            return 0;
          sub_216B1E678((int)v1082, "__ptr64");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1082[0];
          v8 = v1082[1];
          v9 = 277;
          goto LABEL_2297;
        case 'a':
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1852270956)
            return 0;
          v313 = sub_216B26288(v1210, 5);
          if (v313 != 111)
          {
            if (v313 == 97 && sub_216B26288(v1210, 6) == 115)
            {
              sub_216B1E678((int)v1080, "alignas");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1080[0];
              v8 = v1080[1];
              v9 = 152;
              goto LABEL_1334;
            }
            return 0;
          }
          if (sub_216B26288(v1210, 6) != 102)
            return 0;
          sub_216B1E678((int)v1079, "alignof");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1079[0];
          v8 = v1079[1];
          v9 = 153;
          goto LABEL_1334;
        case 'd':
          v314 = sub_216B26288(v1210, 1);
          if (v314 != 109)
          {
            if (v314 == 105)
            {
              v544 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v544 + 2) == 1918985075 && *(_BYTE *)(v544 + 6) == 100)
              {
                sub_216B1E678((int)v1077, "discard");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1077[0];
                v8 = v1077[1];
                v9 = 305;
                goto LABEL_2558;
              }
            }
            else if (v314 == 101)
            {
              v315 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v315 + 2) == 1819631974 && *(_BYTE *)(v315 + 6) == 116)
              {
                sub_216B1E678((int)v1078, "default");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1078[0];
                v8 = v1078[1];
                v9 = 81;
                goto LABEL_2448;
              }
            }
            return 0;
          }
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 29793)
            return 0;
          v542 = sub_216B26288(v1210, 4);
          if (v542 == 52)
          {
            if (sub_216B26288(v1210, 5) != 120)
              return 0;
            v743 = sub_216B26288(v1210, 6);
            switch(v743)
            {
              case '4':
                sub_216B1E678((int)v1068, "dmat4x4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1068[0];
                v8 = v1068[1];
                v9 = 317;
                break;
              case '3':
                sub_216B1E678((int)v1069, "dmat4x3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1069[0];
                v8 = v1069[1];
                v9 = 316;
                break;
              case '2':
                sub_216B1E678((int)v1070, "dmat4x2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1070[0];
                v8 = v1070[1];
                v9 = 315;
                break;
              default:
                return 0;
            }
          }
          else if (v542 == 51)
          {
            if (sub_216B26288(v1210, 5) != 120)
              return 0;
            v744 = sub_216B26288(v1210, 6);
            switch(v744)
            {
              case '4':
                sub_216B1E678((int)v1071, "dmat3x4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1071[0];
                v8 = v1071[1];
                v9 = 313;
                break;
              case '3':
                sub_216B1E678((int)v1072, "dmat3x3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1072[0];
                v8 = v1072[1];
                v9 = 312;
                break;
              case '2':
                sub_216B1E678((int)v1073, "dmat3x2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1073[0];
                v8 = v1073[1];
                v9 = 311;
                break;
              default:
                return 0;
            }
          }
          else
          {
            if (v542 != 50 || sub_216B26288(v1210, 5) != 120)
              return 0;
            v543 = sub_216B26288(v1210, 6);
            switch(v543)
            {
              case '4':
                sub_216B1E678((int)v1074, "dmat2x4");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1074[0];
                v8 = v1074[1];
                v9 = 309;
                break;
              case '3':
                sub_216B1E678((int)v1075, "dmat2x3");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1075[0];
                v8 = v1075[1];
                v9 = 308;
                break;
              case '2':
                sub_216B1E678((int)v1076, "dmat2x2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1076[0];
                v8 = v1076[1];
                v9 = 307;
                break;
              default:
                return 0;
            }
          }
          goto LABEL_464;
        case 'h':
          v317 = sub_216B26288(v1210, 1);
          if (v317 == 109)
          {
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 29793)
              return 0;
            v519 = sub_216B26288(v1210, 4);
            if (v519 == 52)
            {
              if (sub_216B26288(v1210, 5) != 120)
                return 0;
              v729 = sub_216B26288(v1210, 6);
              switch(v729)
              {
                case '4':
                  sub_216B1E678((int)v1056, "hmat4x4");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1056[0];
                  v8 = v1056[1];
                  v9 = 476;
                  break;
                case '3':
                  sub_216B1E678((int)v1057, "hmat4x3");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1057[0];
                  v8 = v1057[1];
                  v9 = 475;
                  break;
                case '2':
                  sub_216B1E678((int)v1058, "hmat4x2");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1058[0];
                  v8 = v1058[1];
                  v9 = 474;
                  break;
                default:
                  return 0;
              }
            }
            else if (v519 == 51)
            {
              if (sub_216B26288(v1210, 5) != 120)
                return 0;
              v730 = sub_216B26288(v1210, 6);
              switch(v730)
              {
                case '4':
                  sub_216B1E678((int)v1059, "hmat3x4");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1059[0];
                  v8 = v1059[1];
                  v9 = 472;
                  break;
                case '3':
                  sub_216B1E678((int)v1060, "hmat3x3");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1060[0];
                  v8 = v1060[1];
                  v9 = 471;
                  break;
                case '2':
                  sub_216B1E678((int)v1061, "hmat3x2");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1061[0];
                  v8 = v1061[1];
                  v9 = 470;
                  break;
                default:
                  return 0;
              }
            }
            else
            {
              if (v519 != 50 || sub_216B26288(v1210, 5) != 120)
                return 0;
              v520 = sub_216B26288(v1210, 6);
              switch(v520)
              {
                case '4':
                  sub_216B1E678((int)v1062, "hmat2x4");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1062[0];
                  v8 = v1062[1];
                  v9 = 468;
                  break;
                case '3':
                  sub_216B1E678((int)v1063, "hmat2x3");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1063[0];
                  v8 = v1063[1];
                  v9 = 467;
                  break;
                case '2':
                  sub_216B1E678((int)v1064, "hmat2x2");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1064[0];
                  v8 = v1064[1];
                  v9 = 466;
                  break;
                default:
                  return 0;
              }
            }
          }
          else
          {
            if (v317 != 97 || *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 26220)
              return 0;
            v318 = sub_216B26288(v1210, 4);
            if (v318 == 52)
            {
              if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 5) != 13432)
                return 0;
              sub_216B1E678((int)v1065, "half4x4");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1065[0];
              v8 = v1065[1];
              v9 = 488;
            }
            else
            {
              if (v318 != 51)
              {
                if (v318 == 50 && *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 5) == 12920)
                {
                  sub_216B1E678((int)v1067, "half2x2");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1067[0];
                  v8 = v1067[1];
                  v9 = 486;
                  goto LABEL_2558;
                }
                return 0;
              }
              if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 5) != 13176)
                return 0;
              sub_216B1E678((int)v1066, "half3x3");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1066[0];
              v8 = v1066[1];
              v9 = 487;
            }
          }
          goto LABEL_2558;
        case 'i':
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1701273965)
            return 0;
          v319 = sub_216B26288(v1210, 5);
          if (v319 == 51)
          {
            if (sub_216B26288(v1210, 6) != 68)
              return 0;
            sub_216B1E678((int)v1053, "image3D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1053[0];
            v8 = v1053[1];
            v9 = 353;
          }
          else
          {
            if (v319 != 50)
            {
              if (v319 == 49 && sub_216B26288(v1210, 6) == 68)
              {
                sub_216B1E678((int)v1055, "image1D");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1055[0];
                v8 = v1055[1];
                v9 = 342;
                goto LABEL_2558;
              }
              return 0;
            }
            if (sub_216B26288(v1210, 6) != 68)
              return 0;
            sub_216B1E678((int)v1054, "image2D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1054[0];
            v8 = v1054[1];
            v9 = 346;
          }
          goto LABEL_2558;
        case 'm':
          v320 = sub_216B26288(v1210, 1);
          if (v320 == 117)
          {
            v521 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v521 + 2) == 1818386804 && *(_BYTE *)(v521 + 6) == 101)
            {
              sub_216B1E678((int)v1051, "mutable");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1051[0];
              v8 = v1051[1];
              v9 = 133;
              goto LABEL_312;
            }
          }
          else if (v320 == 101)
          {
            v321 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v321 + 2) == 1836411236 && *(_BYTE *)(v321 + 6) == 112)
            {
              sub_216B1E678((int)v1052, "mediump");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1052[0];
              v8 = v1052[1];
              v9 = 392;
              goto LABEL_2558;
            }
          }
          return 0;
        case 'n':
          v323 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v323 + 1) != 1886153845 || *(_WORD *)(v323 + 5) != 29300)
            return 0;
          sub_216B1E678((int)v1050, "nullptr");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1050[0];
          v8 = v1050[1];
          v9 = 159;
          goto LABEL_1334;
        case 'p':
          v325 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v325 + 1) != 1635150194 || *(_WORD *)(v325 + 5) != 25972)
            return 0;
          sub_216B1E678((int)v1049, "private");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1049[0];
          v8 = v1049[1];
          v9 = 137;
          goto LABEL_312;
        case 's':
          v327 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v327 + 1) != 1819307361 || *(_WORD *)(v327 + 5) != 29285)
            return 0;
          sub_216B1E678((int)v1048, "sampler");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1048[0];
          v8 = v1048[1];
          v9 = 403;
          goto LABEL_2558;
        case 't':
          v329 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v329 + 1) != 1684369529 || *(_WORD *)(v329 + 5) != 26213)
            return 0;
          sub_216B1E678((int)v1047, "typedef");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1047[0];
          v8 = v1047[1];
          v9 = 103;
          goto LABEL_2448;
        case 'u':
          v331 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v331 + 1) != 1868982638 || *(_WORD *)(v331 + 5) != 28018)
            return 0;
          sub_216B1E678((int)v1046, "uniform");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1046[0];
          v8 = v1046[1];
          v9 = 438;
          goto LABEL_2558;
        case 'v':
          v333 = sub_216B26288(v1210, 1);
          if (v333 == 105)
          {
            v523 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v523 + 2) == 1635087474 && *(_BYTE *)(v523 + 6) == 108)
            {
              sub_216B1E678((int)v1044, "virtual");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1044[0];
              v8 = v1044[1];
              v9 = 150;
              goto LABEL_312;
            }
          }
          else if (v333 == 97)
          {
            v334 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v334 + 2) == 1852406130 && *(_BYTE *)(v334 + 6) == 103)
            {
              sub_216B1E678((int)v1045, "varying");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1045[0];
              v8 = v1045[1];
              v9 = 454;
              goto LABEL_2558;
            }
          }
          break;
        case 'w':
          v336 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v336 + 1) != 1918986339 || *(_WORD *)(v336 + 5) != 29791)
            return 0;
          sub_216B1E678((int)v1043, "wchar_t");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1043[0];
          v8 = v1043[1];
          v9 = 151;
          v26 = 0x2000;
          return sub_216B5D720(v7, v8, v9, v26, v6, v0);
        default:
          return result;
      }
      return 0;
    case 8:
      v27 = sub_216B26288(v1210, 0);
      result = 0;
      switch(v27)
      {
        case '_':
          v28 = sub_216B26288(v1210, 1);
          result = 0;
          if (v28 > 70)
          {
            if (v28 != 71)
            {
              if (v28 != 95)
                return result;
              v473 = sub_216B26288(v1210, 2);
              result = 0;
              switch(v473)
              {
                case 'b':
                  v474 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v474 + 3) != 1734633842 || *(_BYTE *)(v474 + 7) != 101)
                    return 0;
                  sub_216B1E678((int)v1038, "__bridge");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1038[0];
                  v8 = v1038[1];
                  v9 = 270;
                  goto LABEL_490;
                case 'f':
                  v750 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v750 + 3) != 1600351861 || *(_BYTE *)(v750 + 7) != 95)
                    return 0;
                  sub_216B1E678((int)v1037, "__func__");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1037[0];
                  v8 = v1037[1];
                  v9 = 119;
                  goto LABEL_2448;
                case 'g':
                  v752 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v752 + 3) != 1633841004 || *(_BYTE *)(v752 + 7) != 108)
                    return 0;
                  sub_216B1E678((int)v1036, "__global");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1036[0];
                  v8 = v1036[1];
                  v9 = 256;
                  goto LABEL_2088;
                case 'i':
                  v754 = sub_216B26288(v1210, 3);
                  if (v754 != 115)
                  {
                    if (v754 == 110 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 4) == 942813556)
                    {
                      sub_216B1E678((int)v1035, "__int128");
                      v6 = *(_QWORD *)(v0 + 168);
                      v7 = v1035[0];
                      v8 = v1035[1];
                      v9 = 174;
                      goto LABEL_2448;
                    }
                    return 0;
                  }
                  if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 4) != 1685024863)
                    return 0;
                  sub_216B1E678((int)v1034, "__is_pod");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1034[0];
                  v8 = v1034[1];
                  v9 = 210;
                  break;
                case 'k':
                  v755 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v755 + 3) != 1701737061 || *(_BYTE *)(v755 + 7) != 108)
                    return 0;
                  sub_216B1E678((int)v1033, "__kernel");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1033[0];
                  v8 = v1033[1];
                  v9 = 260;
                  goto LABEL_2088;
                case 'p':
                  v757 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v757 + 3) != 1633907553 || *(_BYTE *)(v757 + 7) != 108)
                    return 0;
                  sub_216B1E678((int)v1032, "__pascal");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1032[0];
                  v8 = v1032[1];
                  v9 = 266;
                  goto LABEL_2448;
                case 's':
                  v759 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v759 + 3) != 1819307361 || *(_BYTE *)(v759 + 7) != 101)
                    return 0;
                  sub_216B1E678((int)v1031, "__sample");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1031[0];
                  v8 = v1031[1];
                  v9 = 491;
                  goto LABEL_2558;
                case 't':
                  v761 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v761 + 3) != 1634038376 || *(_BYTE *)(v761 + 7) != 100)
                    return 0;
                  sub_216B1E678((int)v1030, "__thread");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1030[0];
                  v8 = v1030[1];
                  v9 = 177;
                  goto LABEL_2448;
                case 'u':
                  v763 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v763 + 3) != 1868851573 || *(_BYTE *)(v763 + 7) != 102)
                    return 0;
                  sub_216B1E678((int)v1029, "__uuidof");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1029[0];
                  v8 = v1029[1];
                  v9 = 282;
                  goto LABEL_2053;
                case 'v':
                  v765 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v765 + 3) != 1869898597 || *(_BYTE *)(v765 + 7) != 114)
                    return 0;
                  sub_216B1E678((int)v1028, "__vector");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v1028[0];
                  v8 = v1028[1];
                  v9 = 267;
LABEL_2461:
                  v26 = 64;
                  return sub_216B5D720(v7, v8, v9, v26, v6, v0);
                default:
                  return result;
              }
              goto LABEL_312;
            }
            v588 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v588 + 2) == 1919250021 && *(_WORD *)(v588 + 6) == 25449)
            {
              sub_216B1E678((int)v1039, "_Generic");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1039[0];
              v8 = v1039[1];
              v9 = 114;
              goto LABEL_2448;
            }
            return 0;
          }
          if (v28 != 65)
          {
            if (v28 != 67)
              return result;
            v29 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v29 + 2) == 1819307375 && *(_WORD *)(v29 + 6) == 30821)
            {
              sub_216B1E678((int)v1040, "_Complex");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1040[0];
              v8 = v1040[1];
              v9 = 113;
              goto LABEL_2448;
            }
            return 0;
          }
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1852270956)
            return 0;
          v587 = sub_216B26288(v1210, 6);
          if (v587 != 111)
          {
            if (v587 == 97 && sub_216B26288(v1210, 7) == 115)
            {
              sub_216B1E678((int)v1042, "_Alignas");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1042[0];
              v8 = v1042[1];
              v9 = 109;
              goto LABEL_2448;
            }
            return 0;
          }
          if (sub_216B26288(v1210, 7) != 102)
            return 0;
          sub_216B1E678((int)v1041, "_Alignof");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1041[0];
          v8 = v1041[1];
          v9 = 110;
          goto LABEL_2448;
        case 'c':
          v338 = sub_216B26288(v1210, 1);
          if (v338 == 111)
          {
            v546 = sub_216B26288(v1210, 2);
            if (v546 == 110)
            {
              v647 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v647 + 3) == 1970170228 && *(_BYTE *)(v647 + 7) == 101)
              {
                sub_216B1E678((int)v1023, "continue");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1023[0];
                v8 = v1023[1];
                v9 = 80;
                goto LABEL_2448;
              }
            }
            else if (v546 == 104)
            {
              v547 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v547 + 3) == 1852142181 && *(_BYTE *)(v547 + 7) == 116)
              {
                sub_216B1E678((int)v1024, "coherent");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1024[0];
                v8 = v1024[1];
                v9 = 303;
                goto LABEL_2558;
              }
            }
            return 0;
          }
          if (v338 != 104)
          {
            if (v338 == 101)
            {
              v339 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v339 + 2) == 1869771886 && *(_WORD *)(v339 + 6) == 25705)
              {
                sub_216B1E678((int)v1027, "centroid");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1027[0];
                v8 = v1027[1];
                v9 = 302;
                goto LABEL_2558;
              }
            }
            return 0;
          }
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 29281)
            return 0;
          v549 = sub_216B26288(v1210, 4);
          if (v549 == 51)
          {
            v735 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v735 + 5) != 24370 || *(_BYTE *)(v735 + 7) != 116)
              return 0;
            sub_216B1E678((int)v1025, "char32_t");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1025[0];
            v8 = v1025[1];
            v9 = 155;
          }
          else
          {
            if (v549 != 49)
              return 0;
            v550 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v550 + 5) != 24374 || *(_BYTE *)(v550 + 7) != 116)
              return 0;
            sub_216B1E678((int)v1026, "char16_t");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1026[0];
            v8 = v1026[1];
            v9 = 154;
          }
          v26 = 4100;
          return sub_216B5D720(v7, v8, v9, v26, v6, v0);
        case 'd':
          v341 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v341 + 1) != 1953260389 || *(_DWORD *)(v341 + 4) != 1701869940)
            return 0;
          sub_216B1E678((int)v1022, "decltype");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1022[0];
          v8 = v1022[1];
          v9 = 157;
          goto LABEL_1334;
        case 'e':
          v343 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v343 + 1) != 1768714360 || *(_DWORD *)(v343 + 4) != 1953063785)
            return 0;
          sub_216B1E678((int)v1021, "explicit");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1021[0];
          v8 = v1021[1];
          v9 = 129;
          goto LABEL_312;
        case 'f':
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1952542572)
            return 0;
          v345 = sub_216B26288(v1210, 5);
          if (v345 == 52)
          {
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 6) != 13432)
              return 0;
            sub_216B1E678((int)v1018, "float4x4");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1018[0];
            v8 = v1018[1];
            v9 = 485;
          }
          else
          {
            if (v345 != 51)
            {
              if (v345 == 50 && *(_WORD *)(sub_216B1E600((uint64_t)v1210) + 6) == 12920)
              {
                sub_216B1E678((int)v1020, "float2x2");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1020[0];
                v8 = v1020[1];
                v9 = 483;
                goto LABEL_2558;
              }
              return 0;
            }
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 6) != 13176)
              return 0;
            sub_216B1E678((int)v1019, "float3x3");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1019[0];
            v8 = v1019[1];
            v9 = 484;
          }
          goto LABEL_2558;
        case 'h':
          v346 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v346 + 1) != 1886216563 || *(_DWORD *)(v346 + 4) != 1919249520)
            return 0;
          sub_216B1E678((int)v1017, "hsampler");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1017[0];
          v8 = v1017[1];
          v9 = 489;
          goto LABEL_2558;
        case 'i':
          v348 = sub_216B26288(v1210, 1);
          if (v348 == 115)
          {
            v525 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v525 + 2) == 1819307361 && *(_WORD *)(v525 + 6) == 29285)
            {
              sub_216B1E678((int)v1013, "isampler");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1013[0];
              v8 = v1013[1];
              v9 = 362;
              goto LABEL_2558;
            }
            return 0;
          }
          if (v348 != 105 || *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1701273965)
            return 0;
          v349 = sub_216B26288(v1210, 6);
          if (v349 == 51)
          {
            if (sub_216B26288(v1210, 7) != 68)
              return 0;
            sub_216B1E678((int)v1014, "iimage3D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1014[0];
            v8 = v1014[1];
            v9 = 338;
          }
          else
          {
            if (v349 != 50)
            {
              if (v349 == 49 && sub_216B26288(v1210, 7) == 68)
              {
                sub_216B1E678((int)v1016, "iimage1D");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1016[0];
                v8 = v1016[1];
                v9 = 331;
                goto LABEL_2558;
              }
              return 0;
            }
            if (sub_216B26288(v1210, 7) != 68)
              return 0;
            sub_216B1E678((int)v1015, "iimage2D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1015[0];
            v8 = v1015[1];
            v9 = 333;
          }
          goto LABEL_2558;
        case 'n':
          if (sub_216B26288(v1210, 1) != 111)
            return 0;
          v350 = sub_216B26288(v1210, 2);
          if (v350 == 105)
          {
            v594 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v594 + 3) == 1852402798 && *(_BYTE *)(v594 + 7) == 101)
            {
              sub_216B1E678((int)v1011, "noinline");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1011[0];
              v8 = v1011[1];
              v9 = 393;
              goto LABEL_2558;
            }
          }
          else if (v350 == 101)
          {
            v351 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v351 + 3) == 1885692792 && *(_BYTE *)(v351 + 7) == 116)
            {
              sub_216B1E678((int)v1012, "noexcept");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1012[0];
              v8 = v1012[1];
              v9 = 158;
              goto LABEL_1334;
            }
          }
          return 0;
        case 'o':
          v353 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v353 + 1) != 1634887024 || *(_DWORD *)(v353 + 4) != 1919906913)
            return 0;
          sub_216B1E678((int)v1010, "operator");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1010[0];
          v8 = v1010[1];
          v9 = 136;
          goto LABEL_312;
        case 'r':
          if (sub_216B26288(v1210, 1) != 101)
            return 0;
          v355 = sub_216B26288(v1210, 2);
          if (v355 != 115)
          {
            if (v355 == 103)
            {
              v616 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v616 + 3) == 1702130537 && *(_BYTE *)(v616 + 7) == 114)
              {
                sub_216B1E678((int)v1008, "register");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1008[0];
                v8 = v1008[1];
                v9 = 94;
                goto LABEL_2448;
              }
            }
            else if (v355 == 97)
            {
              v356 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v356 + 3) == 1819176804 && *(_BYTE *)(v356 + 7) == 121)
              {
                sub_216B1E678((int)v1009, "readonly");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1009[0];
                v8 = v1009[1];
                v9 = 400;
                goto LABEL_2558;
              }
            }
            return 0;
          }
          v615 = sub_216B26288(v1210, 3);
          if (v615 != 116)
          {
            if (v615 == 111 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 4) == 1701016181)
            {
              sub_216B1E678((int)v1007, "resource");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1007[0];
              v8 = v1007[1];
              v9 = 401;
              goto LABEL_2558;
            }
            return 0;
          }
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 4) != 1952672114)
            return 0;
          sub_216B1E678((int)v1006, "restrict");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v1006[0];
          v8 = v1006[1];
          v9 = 95;
          v26 = 32769;
          return sub_216B5D720(v7, v8, v9, v26, v6, v0);
        case 's':
          v358 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v358 + 1) != 1819307361 || *(_WORD *)(v358 + 5) != 24421)
            return 0;
          v360 = sub_216B26288(v1210, 7);
          if (v360 == 104)
          {
            sub_216B1E678((int)v1004, "sample_h");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1004[0];
            v8 = v1004[1];
            v9 = 462;
          }
          else
          {
            if (v360 != 102)
              return 0;
            sub_216B1E678((int)v1005, "sample_f");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1005[0];
            v8 = v1005[1];
            v9 = 461;
          }
          goto LABEL_2558;
        case 't':
          v361 = sub_216B26288(v1210, 1);
          if (v361 == 121)
          {
            v527 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v527 + 2) == 1634624880 && *(_WORD *)(v527 + 6) == 25965)
            {
              sub_216B1E678((int)v1002, "typename");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1002[0];
              v8 = v1002[1];
              v9 = 147;
              goto LABEL_312;
            }
          }
          else if (v361 == 101)
          {
            v362 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v362 + 2) == 1634496621 && *(_WORD *)(v362 + 6) == 25972)
            {
              sub_216B1E678((int)v1003, "template");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v1003[0];
              v8 = v1003[1];
              v9 = 142;
              goto LABEL_1660;
            }
          }
          return 0;
        case 'u':
          v364 = sub_216B26288(v1210, 1);
          if (v364 == 115)
          {
            v552 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v552 + 2) == 1819307361 && *(_WORD *)(v552 + 6) == 29285)
            {
              sub_216B1E678((int)v997, "usampler");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v997[0];
              v8 = v997[1];
              v9 = 439;
              goto LABEL_2558;
            }
            return 0;
          }
          if (v364 == 110)
          {
            v554 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v554 + 2) == 1852270963 && *(_WORD *)(v554 + 6) == 25701)
            {
              sub_216B1E678((int)v998, "unsigned");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v998[0];
              v8 = v998[1];
              v9 = 105;
              goto LABEL_2448;
            }
            return 0;
          }
          if (v364 != 105 || *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1701273965)
            return 0;
          v365 = sub_216B26288(v1210, 6);
          if (v365 == 51)
          {
            if (sub_216B26288(v1210, 7) != 68)
              return 0;
            sub_216B1E678((int)v999, "uimage3D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v999[0];
            v8 = v999[1];
            v9 = 433;
          }
          else
          {
            if (v365 != 50)
            {
              if (v365 == 49 && sub_216B26288(v1210, 7) == 68)
              {
                sub_216B1E678((int)v1001, "uimage1D");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v1001[0];
                v8 = v1001[1];
                v9 = 426;
                goto LABEL_2558;
              }
              return 0;
            }
            if (sub_216B26288(v1210, 7) != 68)
              return 0;
            sub_216B1E678((int)v1000, "uimage2D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v1000[0];
            v8 = v1000[1];
            v9 = 428;
          }
          goto LABEL_2558;
        case 'v':
          v366 = sub_216B26288(v1210, 1);
          if (v366 == 111)
          {
            v529 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v529 + 2) == 1769234796 && *(_WORD *)(v529 + 6) == 25964)
            {
              sub_216B1E678((int)v995, "volatile");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v995[0];
              v8 = v995[1];
              v9 = 107;
              goto LABEL_2448;
            }
          }
          else if (v366 == 101)
          {
            v367 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v367 + 2) == 1953718115 && *(_WORD *)(v367 + 6) == 28773)
            {
              sub_216B1E678((int)v996, "vec_step");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v996[0];
              v8 = v996[1];
              v9 = 265;
              v26 = 576;
              return sub_216B5D720(v7, v8, v9, v26, v6, v0);
            }
          }
          return 0;
        default:
          return result;
      }
    case 9:
      v31 = sub_216B26288(v1210, 0);
      result = 0;
      if (v31 > 104)
      {
        switch(v31)
        {
          case 'n':
            if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 0x6563617073656D61)
              return 0;
            sub_216B1E678((int)v977, "namespace");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v977[0];
            v8 = v977[1];
            v9 = 134;
LABEL_1660:
            v26 = 32770;
            return sub_216B5D720(v7, v8, v9, v26, v6, v0);
          case 'o':
          case 'q':
          case 'r':
          case 't':
          case 'u':
          case 'v':
            return result;
          case 'p':
            v270 = sub_216B26288(v1210, 1);
            if (v270 == 114)
            {
              v482 = sub_216B26288(v1210, 2);
              if (v482 == 111)
              {
                v601 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v601 + 3) == 1952671092 && *(_WORD *)(v601 + 7) == 25701)
                {
                  sub_216B1E678((int)v974, "protected");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v974[0];
                  v8 = v974[1];
                  v9 = 138;
                  goto LABEL_312;
                }
              }
              else if (v482 == 101)
              {
                v483 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v483 + 3) == 1769171299 && *(_WORD *)(v483 + 7) == 28271)
                {
                  sub_216B1E678((int)v975, "precision");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v975[0];
                  v8 = v975[1];
                  v9 = 399;
                  goto LABEL_2558;
                }
              }
            }
            else if (v270 == 97)
            {
              v271 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v271 + 2) == 1953068146 && *(_DWORD *)(v271 + 5) == 1852795252)
              {
                sub_216B1E678((int)v976, "partition");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v976[0];
                v8 = v976[1];
                v9 = 397;
                goto LABEL_2558;
              }
            }
            return 0;
          case 's':
            v273 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v273 + 1) != 1819307361 || *(_WORD *)(v273 + 5) != 29285)
              return 0;
            v275 = sub_216B26288(v1210, 7);
            if (v275 == 51)
            {
              if (sub_216B26288(v1210, 8) != 68)
                return 0;
              sub_216B1E678((int)v971, "sampler3D");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v971[0];
              v8 = v971[1];
              v9 = 416;
            }
            else
            {
              if (v275 != 50)
              {
                if (v275 == 49 && sub_216B26288(v1210, 8) == 68)
                {
                  sub_216B1E678((int)v973, "sampler1D");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v973[0];
                  v8 = v973[1];
                  v9 = 404;
                  goto LABEL_2558;
                }
                return 0;
              }
              if (sub_216B26288(v1210, 8) != 68)
                return 0;
              sub_216B1E678((int)v972, "sampler2D");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v972[0];
              v8 = v972[1];
              v9 = 408;
            }
            goto LABEL_2558;
          case 'w':
            if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 0x796C6E6F65746972)
              return 0;
            sub_216B1E678((int)v970, "writeonly");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v970[0];
            v8 = v970[1];
            v9 = 458;
            goto LABEL_2558;
          default:
            if (v31 != 105)
              return result;
            v258 = sub_216B26288(v1210, 1);
            if (v258 == 110)
            {
              v489 = sub_216B26288(v1210, 2);
              if (v489 == 118)
              {
                v605 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v605 + 3) == 1634300513 && *(_WORD *)(v605 + 7) == 29806)
                {
                  sub_216B1E678((int)v978, "invariant");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v978[0];
                  v8 = v978[1];
                  v9 = 361;
                  goto LABEL_2558;
                }
              }
              else if (v489 == 116)
              {
                v490 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v490 + 3) == 1634103909 && *(_WORD *)(v490 + 7) == 25955)
                {
                  sub_216B1E678((int)v979, "interface");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v979[0];
                  v8 = v979[1];
                  v9 = 360;
                  goto LABEL_2558;
                }
              }
            }
            else if (v258 == 109)
            {
              v259 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v259 + 2) == 26465 && *(_BYTE *)(v259 + 4) == 101)
              {
                v261 = sub_216B26288(v1210, 5);
                if (v261 == 67)
                {
                  v712 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v712 + 6) == 25205 && *(_BYTE *)(v712 + 8) == 101)
                  {
                    sub_216B1E678((int)v980, "imageCube");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v980[0];
                    v8 = v980[1];
                    v9 = 355;
                    goto LABEL_2558;
                  }
                }
                else if (v261 == 50)
                {
                  v262 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v262 + 6) == 19780 && *(_BYTE *)(v262 + 8) == 83)
                  {
                    sub_216B1E678((int)v981, "image2DMS");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v981[0];
                    v8 = v981[1];
                    v9 = 349;
                    goto LABEL_464;
                  }
                }
              }
            }
            break;
        }
        return 0;
      }
      if (v31 == 95)
      {
        v212 = sub_216B26288(v1210, 1);
        if (v212 == 95)
        {
          v435 = sub_216B26288(v1210, 2);
          result = 0;
          switch(v435)
          {
            case 'a':
              v436 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v436 + 3) != 1852270956 || *(_WORD *)(v436 + 7) != 26223)
                return 0;
              sub_216B1E678((int)v993, "__alignof");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v993[0];
              v8 = v993[1];
              v9 = 166;
              goto LABEL_2448;
            case 'f':
              v651 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v651 + 3) != 1818324585 || *(_WORD *)(v651 + 7) != 31084)
                return 0;
              sub_216B1E678((int)v992, "__finally");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v992[0];
              v8 = v992[1];
              v9 = 284;
LABEL_2053:
              v26 = 272;
              return sub_216B5D720(v7, v8, v9, v26, v6, v0);
            case 'i':
              if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
                return 0;
              v653 = sub_216B26288(v1210, 5);
              switch(v653)
              {
                case 'v':
                  v775 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v775 + 6) == 26991 && *(_BYTE *)(v775 + 8) == 100)
                  {
                    sub_216B1E678((int)v989, "__is_void");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v989[0];
                    v8 = v989[1];
                    v9 = 224;
                    goto LABEL_312;
                  }
                  break;
                case 's':
                  v777 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v777 + 6) == 28001 && *(_BYTE *)(v777 + 8) == 101)
                  {
                    sub_216B1E678((int)v990, "__is_same");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v990[0];
                    v8 = v990[1];
                    v9 = 243;
                    goto LABEL_312;
                  }
                  break;
                case 'e':
                  v654 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v654 + 6) == 30062 && *(_BYTE *)(v654 + 8) == 109)
                  {
                    sub_216B1E678((int)v991, "__is_enum");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v991[0];
                    v8 = v991[1];
                    v9 = 207;
                    goto LABEL_312;
                  }
                  break;
              }
              break;
            case 'l':
              v656 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v656 + 3) != 1818583649 || *(_WORD *)(v656 + 7) != 24415)
                return 0;
              sub_216B1E678((int)v988, "__label__");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v988[0];
              v8 = v988[1];
              v9 = 175;
              goto LABEL_2448;
            case 'n':
              v658 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v658 + 3) != 1970171503 || *(_WORD *)(v658 + 7) != 27756)
                return 0;
              sub_216B1E678((int)v987, "__nonnull");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v987[0];
              v8 = v987[1];
              v9 = 274;
              goto LABEL_2448;
            case 'o':
              v660 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v660 + 3) != 1600350818 || *(_WORD *)(v660 + 7) != 28526)
                return 0;
              sub_216B1E678((int)v986, "__objc_no");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v986[0];
              v8 = v986[1];
              v9 = 121;
              goto LABEL_2448;
            case 'p':
              v662 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v662 + 3) != 1635150194 || *(_WORD *)(v662 + 7) != 25972)
                return 0;
              sub_216B1E678((int)v985, "__private");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v985[0];
              v8 = v985[1];
              v9 = 259;
              goto LABEL_2088;
            case 's':
              v664 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v664 + 3) != 1633903732 || *(_WORD *)(v664 + 7) != 27756)
                return 0;
              sub_216B1E678((int)v984, "__stdcall");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v984[0];
              v8 = v984[1];
              v9 = 251;
              goto LABEL_2448;
            default:
              return result;
          }
        }
        else if (v212 == 78)
        {
          v213 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v213 + 2) == 1952805487 && *(_DWORD *)(v213 + 5) == 1852994932)
          {
            sub_216B1E678((int)v994, "_Noreturn");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v994[0];
            v8 = v994[1];
            v9 = 116;
            goto LABEL_2448;
          }
        }
        return 0;
      }
      if (v31 != 97)
      {
        if (v31 != 99)
          return result;
        if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 1) == 0x7270786574736E6FLL)
        {
          sub_216B1E678((int)v982, "constexpr");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v982[0];
          v8 = v982[1];
          v9 = 156;
          goto LABEL_1334;
        }
        return 0;
      }
      if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 0x6574756269727474)
        return 0;
      sub_216B1E678((int)v983, "attribute");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v983[0];
      v8 = v983[1];
      v9 = 296;
      goto LABEL_2558;
    case 10:
      v32 = sub_216B26288(v1210, 0);
      result = 0;
      if (v32 <= 104)
      {
        if (v32 != 95)
        {
          if (v32 == 99)
          {
            v219 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v219 + 1) == 0x7361635F74736E6FLL && *(_BYTE *)(v219 + 9) == 116)
            {
              sub_216B1E678((int)v954, "const_cast");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v954[0];
              v8 = v954[1];
              v9 = 126;
              goto LABEL_312;
            }
          }
          else
          {
            if (v32 != 104)
              return result;
            v33 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v33 + 1) == 0x3272656C706D6173 && *(_BYTE *)(v33 + 9) == 68)
            {
              sub_216B1E678((int)v953, "hsampler2D");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v953[0];
              v8 = v953[1];
              v9 = 490;
              goto LABEL_2558;
            }
          }
          return 0;
        }
        v215 = sub_216B26288(v1210, 1);
        switch(v215)
        {
          case '_':
            v468 = sub_216B26288(v1210, 2);
            result = 0;
            switch(v468)
            {
              case 'c':
                v469 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v469 + 3) != 1953721967 || *(_DWORD *)(v469 + 6) != 1953390964)
                  return 0;
                sub_216B1E678((int)v966, "__constant");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v966[0];
                v8 = v966[1];
                v9 = 258;
                goto LABEL_2088;
              case 'd':
                v688 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v688 + 3) != 1936483173 || *(_DWORD *)(v688 + 6) != 1667592307)
                  return 0;
                sub_216B1E678((int)v965, "__declspec");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v965[0];
                v8 = v965[1];
                v9 = 249;
                goto LABEL_2448;
              case 'e':
              case 'g':
              case 'h':
              case 'j':
              case 'k':
              case 'l':
              case 'm':
                return result;
              case 'f':
                v690 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v690 + 3) != 1668576097 || *(_DWORD *)(v690 + 6) != 1819042147)
                  return 0;
                sub_216B1E678((int)v964, "__fastcall");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v964[0];
                v8 = v964[1];
                v9 = 252;
                goto LABEL_2448;
              case 'i':
                if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 24435)
                {
                  v692 = sub_216B26288(v1210, 5);
                  result = 0;
                  switch(v692)
                  {
                    case 'a':
                      if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 6) != 2036429426)
                        return 0;
                      sub_216B1E678((int)v963, "__is_array");
                      v6 = *(_QWORD *)(v0 + 168);
                      v7 = v963[0];
                      v8 = v963[1];
                      v9 = 225;
                      goto LABEL_312;
                    case 'b':
                    case 'd':
                      return result;
                    case 'c':
                      v788 = sub_216B26288(v1210, 6);
                      if (v788 == 111)
                      {
                        v791 = sub_216B1E600((uint64_t)v1210);
                        if (*(_WORD *)(v791 + 7) == 29550 && *(_BYTE *)(v791 + 9) == 116)
                        {
                          sub_216B1E678((int)v961, "__is_const");
                          v6 = *(_QWORD *)(v0 + 168);
                          v7 = v961[0];
                          v8 = v961[1];
                          v9 = 238;
                          goto LABEL_312;
                        }
                      }
                      else if (v788 == 108)
                      {
                        v789 = sub_216B1E600((uint64_t)v1210);
                        if (*(_WORD *)(v789 + 7) == 29537 && *(_BYTE *)(v789 + 9) == 115)
                        {
                          sub_216B1E678((int)v962, "__is_class");
                          v6 = *(_QWORD *)(v0 + 168);
                          v7 = v962[0];
                          v8 = v962[1];
                          v9 = 204;
                          goto LABEL_312;
                        }
                      }
                      break;
                    case 'e':
                      if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 6) != 2037674093)
                        return 0;
                      sub_216B1E678((int)v960, "__is_empty");
                      v6 = *(_QWORD *)(v0 + 168);
                      v7 = v960[0];
                      v8 = v960[1];
                      v9 = 206;
                      goto LABEL_312;
                    case 'f':
                      if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 6) != 1818324585)
                        return 0;
                      sub_216B1E678((int)v959, "__is_final");
                      v6 = *(_QWORD *)(v0 + 168);
                      v7 = v959[0];
                      v8 = v959[1];
                      v9 = 208;
                      goto LABEL_312;
                    default:
                      if (v692 != 117)
                        return result;
                      if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 6) != 1852795246)
                        return 0;
                      sub_216B1E678((int)v958, "__is_union");
                      v6 = *(_QWORD *)(v0 + 168);
                      v7 = v958[0];
                      v8 = v958[1];
                      v9 = 213;
                      goto LABEL_312;
                  }
                }
                return 0;
              case 'n':
                v693 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v693 + 3) != 1634495605 || *(_DWORD *)(v693 + 6) != 1701601889)
                  return 0;
                sub_216B1E678((int)v957, "__nullable");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v957[0];
                v8 = v957[1];
                v9 = 275;
                goto LABEL_2448;
              case 'o':
                v695 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v695 + 3) != 1600350818 || *(_DWORD *)(v695 + 6) != 1936030047)
                  return 0;
                sub_216B1E678((int)v956, "__objc_yes");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v956[0];
                v8 = v956[1];
                v9 = 120;
                goto LABEL_2448;
              default:
                if (v468 != 116)
                  return result;
                v637 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v637 + 3) != 1668508008 || *(_DWORD *)(v637 + 6) != 1819042147)
                  return 0;
                sub_216B1E678((int)v955, "__thiscall");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v955[0];
                v8 = v955[1];
                v9 = 253;
                break;
            }
            goto LABEL_2448;
          case 'I':
            if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 0x7972616E6967616DLL)
              return 0;
            sub_216B1E678((int)v967, "_Imaginary");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v967[0];
            v8 = v967[1];
            v9 = 115;
            break;
          case 'D':
            v216 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v216 + 2) != 1835623269 || *(_WORD *)(v216 + 6) != 27745)
              return 0;
            v218 = sub_216B26288(v1210, 8);
            if (v218 != 54)
            {
              if (v218 == 51 && sub_216B26288(v1210, 9) == 50)
              {
                sub_216B1E678((int)v969, "_Decimal32");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v969[0];
                v8 = v969[1];
                v9 = 162;
                goto LABEL_2448;
              }
              return 0;
            }
            if (sub_216B26288(v1210, 9) != 52)
              return 0;
            sub_216B1E678((int)v968, "_Decimal64");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v968[0];
            v8 = v968[1];
            v9 = 163;
            break;
          default:
            return 0;
        }
        goto LABEL_2448;
      }
      switch(v32)
      {
        case 'i':
          v226 = sub_216B26288(v1210, 1);
          if (v226 != 115)
          {
            if (v226 == 105 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1701273965)
            {
              v227 = sub_216B26288(v1210, 6);
              if (v227 == 67)
              {
                v643 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v643 + 7) == 25205 && *(_BYTE *)(v643 + 9) == 101)
                {
                  sub_216B1E678((int)v951, "iimageCube");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v951[0];
                  v8 = v951[1];
                  v9 = 340;
                  goto LABEL_2558;
                }
              }
              else if (v227 == 50)
              {
                v228 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v228 + 7) == 19780 && *(_BYTE *)(v228 + 9) == 83)
                {
                  sub_216B1E678((int)v952, "iimage2DMS");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v952[0];
                  v8 = v952[1];
                  v9 = 335;
                  goto LABEL_464;
                }
              }
            }
            return 0;
          }
          v441 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v441 + 2) != 1819307361 || *(_WORD *)(v441 + 6) != 29285)
            return 0;
          v443 = sub_216B26288(v1210, 8);
          if (v443 == 51)
          {
            if (sub_216B26288(v1210, 9) != 68)
              return 0;
            sub_216B1E678((int)v948, "isampler3D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v948[0];
            v8 = v948[1];
            v9 = 371;
          }
          else
          {
            if (v443 != 50)
            {
              if (v443 == 49 && sub_216B26288(v1210, 9) == 68)
              {
                sub_216B1E678((int)v950, "isampler1D");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v950[0];
                v8 = v950[1];
                v9 = 363;
                goto LABEL_2558;
              }
              return 0;
            }
            if (sub_216B26288(v1210, 9) != 68)
              return 0;
            sub_216B1E678((int)v949, "isampler2D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v949[0];
            v8 = v949[1];
            v9 = 365;
          }
          break;
        case 's':
          v230 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v230 + 1) == 0x6E6974756F726275 && *(_BYTE *)(v230 + 9) == 101)
          {
            sub_216B1E678((int)v947, "subroutine");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v947[0];
            v8 = v947[1];
            v9 = 424;
            goto LABEL_2558;
          }
          return 0;
        case 'u':
          v120 = sub_216B26288(v1210, 1);
          if (v120 != 115)
          {
            if (v120 == 105 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1701273965)
            {
              v121 = sub_216B26288(v1210, 6);
              if (v121 == 67)
              {
                v641 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v641 + 7) == 25205 && *(_BYTE *)(v641 + 9) == 101)
                {
                  sub_216B1E678((int)v945, "uimageCube");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v945[0];
                  v8 = v945[1];
                  v9 = 435;
                  goto LABEL_2558;
                }
              }
              else if (v121 == 50)
              {
                v122 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v122 + 7) == 19780 && *(_BYTE *)(v122 + 9) == 83)
                {
                  sub_216B1E678((int)v946, "uimage2DMS");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v946[0];
                  v8 = v946[1];
                  v9 = 430;
                  goto LABEL_464;
                }
              }
            }
            return 0;
          }
          v432 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v432 + 2) != 1819307361 || *(_WORD *)(v432 + 6) != 29285)
            return 0;
          v434 = sub_216B26288(v1210, 8);
          if (v434 == 51)
          {
            if (sub_216B26288(v1210, 9) != 68)
              return 0;
            sub_216B1E678((int)v942, "usampler3D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v942[0];
            v8 = v942[1];
            v9 = 447;
          }
          else
          {
            if (v434 != 50)
            {
              if (v434 == 49 && sub_216B26288(v1210, 9) == 68)
              {
                sub_216B1E678((int)v944, "usampler1D");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v944[0];
                v8 = v944[1];
                v9 = 440;
                goto LABEL_2558;
              }
              return 0;
            }
            if (sub_216B26288(v1210, 9) != 68)
              return 0;
            sub_216B1E678((int)v943, "usampler2D");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v943[0];
            v8 = v943[1];
            v9 = 442;
          }
          break;
        default:
          return result;
      }
      goto LABEL_2558;
    case 11:
      v35 = sub_216B26288(v1210, 0);
      result = 0;
      if (v35 > 104)
      {
        if (v35 == 105)
        {
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1701273965)
            return 0;
          v186 = sub_216B26288(v1210, 5);
          if (v186 == 66)
          {
            v498 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v498 + 6) == 1701209717 && *(_BYTE *)(v498 + 10) == 114)
            {
              sub_216B1E678((int)v928, "imageBuffer");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v928[0];
              v8 = v928[1];
              v9 = 354;
              goto LABEL_2558;
            }
          }
          else if (v186 == 50)
          {
            v187 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v187 + 6) == 1667584580 && *(_BYTE *)(v187 + 10) == 116)
            {
              sub_216B1E678((int)v929, "image2DRect");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v929[0];
              v8 = v929[1];
              v9 = 351;
              goto LABEL_464;
            }
          }
        }
        else
        {
          if (v35 != 115)
            return result;
          v124 = sub_216B26288(v1210, 1);
          if (v124 == 116)
          {
            v379 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v379 + 2) == 0x7361635F63697461 && *(_BYTE *)(v379 + 10) == 116)
            {
              sub_216B1E678((int)v925, "static_cast");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v925[0];
              v8 = v925[1];
              v9 = 141;
              goto LABEL_312;
            }
          }
          else if (v124 == 97)
          {
            v125 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v125 + 2) == 1701605485 && *(_BYTE *)(v125 + 6) == 114)
            {
              v127 = sub_216B26288(v1210, 7);
              if (v127 == 67)
              {
                v613 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v613 + 8) == 25205 && *(_BYTE *)(v613 + 10) == 101)
                {
                  sub_216B1E678((int)v926, "samplerCube");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v926[0];
                  v8 = v926[1];
                  v9 = 419;
                  goto LABEL_2558;
                }
              }
              else if (v127 == 50)
              {
                v128 = sub_216B1E600((uint64_t)v1210);
                if (*(_WORD *)(v128 + 8) == 19780 && *(_BYTE *)(v128 + 10) == 83)
                {
                  sub_216B1E678((int)v927, "sampler2DMS");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v927[0];
                  v8 = v927[1];
                  v9 = 411;
                  goto LABEL_2558;
                }
              }
            }
          }
        }
        return 0;
      }
      if (v35 != 95)
      {
        if (v35 != 97)
          return result;
        v36 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v36 + 1) == 0x69755F63696D6F74 && *(_WORD *)(v36 + 9) == 29806)
        {
          sub_216B1E678((int)v930, "atomic_uint");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v930[0];
          v8 = v930[1];
          v9 = 295;
          goto LABEL_2558;
        }
        return 0;
      }
      v165 = sub_216B26288(v1210, 1);
      if (v165 != 95)
      {
        if (v165 == 68)
        {
          v166 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v166 + 2) == 0x32316C616D696365 && *(_BYTE *)(v166 + 10) == 56)
          {
            sub_216B1E678((int)v941, "_Decimal128");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v941[0];
            v8 = v941[1];
            v9 = 164;
            goto LABEL_2448;
          }
        }
        return 0;
      }
      v386 = sub_216B26288(v1210, 2);
      result = 0;
      if (v386 <= 104)
      {
        if (v386 != 70)
        {
          if (v386 != 97)
            return result;
          if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 0x6574756269727474)
          {
            sub_216B1E678((int)v939, "__attribute");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v939[0];
            v8 = v939[1];
            v9 = 167;
            goto LABEL_2448;
          }
          return 0;
        }
        if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 0x5F5F474953434E55)
          return 0;
        sub_216B1E678((int)v940, "__FUNCSIG__");
        v6 = *(_QWORD *)(v0 + 168);
        v7 = v940[0];
        v8 = v940[1];
        v9 = 182;
      }
      else
      {
        if (v386 != 105)
        {
          if (v386 != 114)
          {
            if (v386 != 117)
              return result;
            if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 0x64656E67696C616ELL)
            {
              sub_216B1E678((int)v931, "__unaligned");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v931[0];
              v8 = v931[1];
              v9 = 255;
              goto LABEL_2297;
            }
            return 0;
          }
          if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 0x796C6E6F5F646165)
            return 0;
          sub_216B1E678((int)v932, "__read_only");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v932[0];
          v8 = v932[1];
          v9 = 261;
          goto LABEL_2088;
        }
        v596 = sub_216B26288(v1210, 3);
        if (v596 != 115)
        {
          if (v596 == 110)
          {
            v727 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v727 + 4) == 1718773108 && *(_DWORD *)(v727 + 7) == 1701011814)
            {
              sub_216B1E678((int)v937, "__interface");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v937[0];
              v8 = v937[1];
              v9 = 292;
              goto LABEL_2297;
            }
          }
          else if (v596 == 102)
          {
            v597 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v597 + 4) == 1769497951 && *(_DWORD *)(v597 + 7) == 1937011561)
            {
              sub_216B1E678((int)v938, "__if_exists");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v938[0];
              v8 = v938[1];
              v9 = 287;
              goto LABEL_2297;
            }
          }
          return 0;
        }
        if (sub_216B26288(v1210, 4) != 95)
          return 0;
        v724 = sub_216B26288(v1210, 5);
        if (v724 != 115)
        {
          if (v724 == 111)
          {
            v725 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v725 + 6) == 1667590754 && *(_BYTE *)(v725 + 10) == 116)
            {
              sub_216B1E678((int)v936, "__is_object");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v936[0];
              v8 = v936[1];
              v9 = 231;
              goto LABEL_312;
            }
          }
          return 0;
        }
        v779 = sub_216B26288(v1210, 6);
        if (v779 == 105)
        {
          if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 7) != 1684368999)
            return 0;
          sub_216B1E678((int)v933, "__is_signed");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v933[0];
          v8 = v933[1];
          v9 = 241;
          goto LABEL_312;
        }
        if (v779 != 101)
        {
          if (v779 == 99 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 7) == 1918987361)
          {
            sub_216B1E678((int)v935, "__is_scalar");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v935[0];
            v8 = v935[1];
            v9 = 232;
            goto LABEL_312;
          }
          return 0;
        }
        if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 7) != 1684368481)
          return 0;
        sub_216B1E678((int)v934, "__is_sealed");
        v6 = *(_QWORD *)(v0 + 168);
        v7 = v934[0];
        v8 = v934[1];
        v9 = 185;
      }
      goto LABEL_2297;
    case 12:
      v38 = sub_216B26288(v1210, 0);
      result = 0;
      if (v38 <= 104)
      {
        if (v38 != 95)
        {
          if (v38 != 100)
            return result;
          v148 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v148 + 1) == 0x635F63696D616E79 && *(_QWORD *)(v148 + 4) == 0x747361635F63696DLL)
          {
            sub_216B1E678((int)v916, "dynamic_cast");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v916[0];
            v8 = v916[1];
            v9 = 128;
            goto LABEL_312;
          }
          return 0;
        }
        if (sub_216B26288(v1210, 1) != 95)
          return 0;
        v209 = sub_216B26288(v1210, 2);
        result = 0;
        if (v209 <= 104)
        {
          if (v209 == 70)
          {
            v585 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v585 + 3) == 0x5F4E4F4954434E55 && *(_BYTE *)(v585 + 11) == 95)
            {
              sub_216B1E678((int)v924, "__FUNCTION__");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v924[0];
              v8 = v924[1];
              v9 = 178;
              goto LABEL_2448;
            }
          }
          else
          {
            if (v209 != 97)
              return result;
            v471 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v471 + 3) == 0x6E61725F79617272 && *(_BYTE *)(v471 + 11) == 107)
            {
              sub_216B1E678((int)v923, "__array_rank");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v923[0];
              v8 = v923[1];
              v9 = 245;
              goto LABEL_312;
            }
          }
        }
        else
        {
          switch(v209)
          {
            case 'i':
              if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
                return 0;
              v579 = sub_216B26288(v1210, 5);
              result = 0;
              HIDWORD(v580) = v579;
              LODWORD(v580) = v579 - 98;
              switch((v580 >> 1))
              {
                case 0u:
                  v581 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v581 + 6) != 1600484193 || *(_WORD *)(v581 + 10) != 26223)
                    return 0;
                  sub_216B1E678((int)v922, "__is_base_of");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v922[0];
                  v8 = v922[1];
                  v9 = 203;
                  goto LABEL_312;
                case 5u:
                  v769 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v769 + 6) != 1919251561 || *(_WORD *)(v769 + 10) != 27745)
                    return 0;
                  sub_216B1E678((int)v921, "__is_literal");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v921[0];
                  v8 = v921[1];
                  v9 = 209;
                  goto LABEL_312;
                case 7u:
                  v771 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v771 + 6) != 1953393007 || *(_WORD *)(v771 + 10) != 29285)
                    return 0;
                  sub_216B1E678((int)v920, "__is_pointer");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v920[0];
                  v8 = v920[1];
                  v9 = 234;
                  goto LABEL_312;
                case 9u:
                  v773 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v773 + 6) != 1769367922 || *(_WORD *)(v773 + 10) != 27745)
                    return 0;
                  sub_216B1E678((int)v919, "__is_trivial");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v919[0];
                  v8 = v919[1];
                  v9 = 212;
                  goto LABEL_312;
                default:
                  return result;
              }
              return result;
            case 'r':
              v583 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v583 + 3) == 0x746972775F646165 && *(_BYTE *)(v583 + 11) == 101)
              {
                sub_216B1E678((int)v918, "__read_write");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v918[0];
                v8 = v918[1];
                v9 = 263;
                goto LABEL_2088;
              }
              break;
            case 'w':
              v210 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v210 + 3) == 0x6C6E6F5F65746972 && *(_BYTE *)(v210 + 11) == 121)
              {
                sub_216B1E678((int)v917, "__write_only");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v917[0];
                v8 = v917[1];
                v9 = 262;
                goto LABEL_2088;
              }
              break;
            default:
              return result;
          }
        }
      }
      else
      {
        switch(v38)
        {
          case 'i':
            v203 = sub_216B26288(v1210, 1);
            if (v203 == 115)
            {
              v456 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v456 + 2) == 1819307361 && *(_WORD *)(v456 + 6) == 29285)
              {
                v458 = sub_216B26288(v1210, 8);
                if (v458 == 67)
                {
                  v676 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v676 + 9) == 25205 && *(_BYTE *)(v676 + 11) == 101)
                  {
                    sub_216B1E678((int)v910, "isamplerCube");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v910[0];
                    v8 = v910[1];
                    v9 = 373;
                    goto LABEL_2558;
                  }
                }
                else if (v458 == 50)
                {
                  v459 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v459 + 9) == 19780 && *(_BYTE *)(v459 + 11) == 83)
                  {
                    sub_216B1E678((int)v911, "isampler2DMS");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v911[0];
                    v8 = v911[1];
                    v9 = 367;
                    goto LABEL_2558;
                  }
                }
              }
            }
            else if (v203 == 109)
            {
              v461 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v461 + 2) == 26465 && *(_BYTE *)(v461 + 4) == 101)
              {
                v463 = sub_216B26288(v1210, 5);
                if (v463 == 50)
                {
                  v678 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v678 + 6) == 1920090436 && *(_WORD *)(v678 + 10) == 31073)
                  {
                    sub_216B1E678((int)v912, "image2DArray");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v912[0];
                    v8 = v912[1];
                    v9 = 347;
                    goto LABEL_2558;
                  }
                }
                else if (v463 == 49)
                {
                  v464 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v464 + 6) == 1920090436 && *(_WORD *)(v464 + 10) == 31073)
                  {
                    sub_216B1E678((int)v913, "image1DArray");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v913[0];
                    v8 = v913[1];
                    v9 = 343;
                    goto LABEL_2558;
                  }
                }
              }
            }
            else if (v203 == 105 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1701273965)
            {
              v204 = sub_216B26288(v1210, 6);
              if (v204 == 66)
              {
                v668 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v668 + 7) == 1701209717 && *(_BYTE *)(v668 + 11) == 114)
                {
                  sub_216B1E678((int)v914, "iimageBuffer");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v914[0];
                  v8 = v914[1];
                  v9 = 339;
                  goto LABEL_2558;
                }
              }
              else if (v204 == 50)
              {
                v205 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v205 + 7) == 1667584580 && *(_BYTE *)(v205 + 11) == 116)
                {
                  sub_216B1E678((int)v915, "iimage2DRect");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v915[0];
                  v8 = v915[1];
                  v9 = 337;
                  goto LABEL_464;
                }
              }
            }
            break;
          case 't':
            v207 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v207 + 1) == 0x6F6C5F6461657268 && *(_QWORD *)(v207 + 4) == 0x6C61636F6C5F6461)
            {
              sub_216B1E678((int)v909, "thread_local");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v909[0];
              v8 = v909[1];
              v9 = 161;
              goto LABEL_1334;
            }
            break;
          case 'u':
            v39 = sub_216B26288(v1210, 1);
            if (v39 == 115)
            {
              v419 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v419 + 2) == 1819307361 && *(_WORD *)(v419 + 6) == 29285)
              {
                v421 = sub_216B26288(v1210, 8);
                if (v421 == 67)
                {
                  v635 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v635 + 9) == 25205 && *(_BYTE *)(v635 + 11) == 101)
                  {
                    sub_216B1E678((int)v905, "usamplerCube");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v905[0];
                    v8 = v905[1];
                    v9 = 449;
                    goto LABEL_2558;
                  }
                }
                else if (v421 == 50)
                {
                  v422 = sub_216B1E600((uint64_t)v1210);
                  if (*(_WORD *)(v422 + 9) == 19780 && *(_BYTE *)(v422 + 11) == 83)
                  {
                    sub_216B1E678((int)v906, "usampler2DMS");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v906[0];
                    v8 = v906[1];
                    v9 = 444;
                    goto LABEL_2558;
                  }
                }
              }
            }
            else if (v39 == 105 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1701273965)
            {
              v40 = sub_216B26288(v1210, 6);
              if (v40 == 66)
              {
                v633 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v633 + 7) == 1701209717 && *(_BYTE *)(v633 + 11) == 114)
                {
                  sub_216B1E678((int)v907, "uimageBuffer");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v907[0];
                  v8 = v907[1];
                  v9 = 434;
                  goto LABEL_2558;
                }
              }
              else if (v40 == 50)
              {
                v41 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v41 + 7) == 1667584580 && *(_BYTE *)(v41 + 11) == 116)
                {
                  sub_216B1E678((int)v908, "uimage2DRect");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v908[0];
                  v8 = v908[1];
                  v9 = 432;
                  goto LABEL_464;
                }
              }
            }
            break;
          default:
            return result;
        }
      }
      return 0;
    case 13:
      v43 = sub_216B26288(v1210, 0);
      result = 0;
      if (v43 <= 109)
      {
        switch(v43)
        {
          case 'L':
            v221 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v221 + 1) == 0x4954434E55465F5FLL && *(_DWORD *)(v221 + 9) == 1600081487)
            {
              sub_216B1E678((int)v904, "L__FUNCTION__");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v904[0];
              v8 = v904[1];
              v9 = 183;
              goto LABEL_2297;
            }
            break;
          case '_':
            v223 = sub_216B26288(v1210, 1);
            if (v223 == 95)
            {
              v438 = sub_216B26288(v1210, 2);
              result = 0;
              switch(v438)
              {
                case 'a':
                  v439 = sub_216B1E600((uint64_t)v1210);
                  if (*(_QWORD *)(v439 + 3) != 0x6574756269727474 || *(_WORD *)(v439 + 11) != 24415)
                    return 0;
                  sub_216B1E678((int)v901, "__attribute__");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v901[0];
                  v8 = v901[1];
                  v9 = 460;
                  goto LABEL_2558;
                case 'b':
                case 'c':
                case 'd':
                case 'g':
                case 'h':
                  return result;
                case 'e':
                  v624 = sub_216B1E600((uint64_t)v1210);
                  if (*(_QWORD *)(v624 + 3) != 0x6E6F69736E657478 || *(_WORD *)(v624 + 11) != 24415)
                    return 0;
                  sub_216B1E678((int)v900, "__extension__");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v900[0];
                  v8 = v900[1];
                  v9 = 172;
                  goto LABEL_2448;
                case 'f':
                  v626 = sub_216B1E600((uint64_t)v1210);
                  if (*(_QWORD *)(v626 + 3) != 0x696C6E696563726FLL || *(_WORD *)(v626 + 11) != 25966)
                    return 0;
                  sub_216B1E678((int)v899, "__forceinline");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v899[0];
                  v8 = v899[1];
                  v9 = 254;
                  goto LABEL_2297;
                case 'i':
                  if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) == 24435)
                  {
                    v628 = sub_216B26288(v1210, 5);
                    result = 0;
                    switch(v628)
                    {
                      case 'a':
                        v629 = sub_216B1E600((uint64_t)v1210);
                        if (*(_DWORD *)(v629 + 6) != 1920234338 || *(_DWORD *)(v629 + 9) != 1952670066)
                          return 0;
                        sub_216B1E678((int)v898, "__is_abstract");
                        v6 = *(_QWORD *)(v0 + 168);
                        v7 = v898[0];
                        v8 = v898[1];
                        v9 = 202;
                        goto LABEL_312;
                      case 'b':
                      case 'd':
                      case 'e':
                      case 'g':
                      case 'h':
                        return result;
                      case 'c':
                        v780 = sub_216B1E600((uint64_t)v1210);
                        if (*(_DWORD *)(v780 + 6) != 1869639023 || *(_DWORD *)(v780 + 9) != 1684960623)
                          return 0;
                        sub_216B1E678((int)v897, "__is_compound");
                        v6 = *(_QWORD *)(v0 + 168);
                        v7 = v897[0];
                        v8 = v897[1];
                        v9 = 233;
                        goto LABEL_312;
                      case 'f':
                        v782 = sub_216B1E600((uint64_t)v1210);
                        if (*(_DWORD *)(v782 + 6) != 1952673397 || *(_DWORD *)(v782 + 9) != 1852795252)
                          return 0;
                        sub_216B1E678((int)v896, "__is_function");
                        v6 = *(_QWORD *)(v0 + 168);
                        v7 = v896[0];
                        v8 = v896[1];
                        v9 = 226;
                        goto LABEL_312;
                      case 'i':
                        v784 = sub_216B1E600((uint64_t)v1210);
                        if (*(_DWORD *)(v784 + 6) != 1734702190 || *(_DWORD *)(v784 + 9) != 1818325607)
                          return 0;
                        sub_216B1E678((int)v895, "__is_integral");
                        v6 = *(_QWORD *)(v0 + 168);
                        v7 = v895[0];
                        v8 = v895[1];
                        v9 = 222;
                        goto LABEL_312;
                      default:
                        if (v628 == 117)
                        {
                          v786 = sub_216B1E600((uint64_t)v1210);
                          if (*(_DWORD *)(v786 + 6) == 1734964078 && *(_DWORD *)(v786 + 9) == 1684368999)
                          {
                            sub_216B1E678((int)v894, "__is_unsigned");
                            v6 = *(_QWORD *)(v0 + 168);
                            v7 = v894[0];
                            v8 = v894[1];
                            v9 = 242;
                            goto LABEL_312;
                          }
                        }
                        else
                        {
                          if (v628 != 118)
                            return result;
                          v767 = sub_216B1E600((uint64_t)v1210);
                          if (*(_DWORD *)(v767 + 6) == 1952541807 && *(_DWORD *)(v767 + 9) == 1701603700)
                          {
                            sub_216B1E678((int)v893, "__is_volatile");
                            v6 = *(_QWORD *)(v0 + 168);
                            v7 = v893[0];
                            v8 = v893[1];
                            v9 = 239;
                            goto LABEL_312;
                          }
                        }
                        break;
                    }
                  }
                  return 0;
                default:
                  if (v438 != 70)
                    return result;
                  v590 = sub_216B1E600((uint64_t)v1210);
                  if (*(_QWORD *)(v590 + 3) != 0x454D414E44434E55 || *(_WORD *)(v590 + 11) != 24415)
                    return 0;
                  sub_216B1E678((int)v902, "__FUNCDNAME__");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v902[0];
                  v8 = v902[1];
                  v9 = 181;
                  break;
              }
              goto LABEL_2297;
            }
            if (v223 == 84)
            {
              v224 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v224 + 2) == 0x6F6C5F6461657268 && *(_QWORD *)(v224 + 5) == 0x6C61636F6C5F6461)
              {
                sub_216B1E678((int)v903, "_Thread_local");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v903[0];
                v8 = v903[1];
                v9 = 118;
                goto LABEL_2448;
              }
            }
            break;
          case 'i':
            v44 = sub_216B26288(v1210, 1);
            if (v44 == 109)
            {
              v427 = sub_216B1E600((uint64_t)v1210);
              if (*(_WORD *)(v427 + 2) == 26465 && *(_BYTE *)(v427 + 4) == 101)
              {
                v429 = sub_216B26288(v1210, 5);
                if (v429 == 50)
                {
                  v645 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v645 + 6) == 1634227012 && *(_DWORD *)(v645 + 9) == 2003788897)
                  {
                    sub_216B1E678((int)v889, "image2DShadow");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v889[0];
                    v8 = v889[1];
                    v9 = 352;
                    goto LABEL_2558;
                  }
                }
                else if (v429 == 49)
                {
                  v430 = sub_216B1E600((uint64_t)v1210);
                  if (*(_DWORD *)(v430 + 6) == 1634227012 && *(_DWORD *)(v430 + 9) == 2003788897)
                  {
                    sub_216B1E678((int)v890, "image1DShadow");
                    v6 = *(_QWORD *)(v0 + 168);
                    v7 = v890[0];
                    v8 = v890[1];
                    v9 = 345;
                    goto LABEL_2558;
                  }
                }
              }
            }
            else if (v44 == 105 && *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) == 1701273965)
            {
              v45 = sub_216B26288(v1210, 6);
              if (v45 == 50)
              {
                v639 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v639 + 7) == 1920090436 && *(_WORD *)(v639 + 11) == 31073)
                {
                  sub_216B1E678((int)v891, "iimage2DArray");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v891[0];
                  v8 = v891[1];
                  v9 = 334;
                  goto LABEL_2558;
                }
              }
              else if (v45 == 49)
              {
                v46 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v46 + 7) == 1920090436 && *(_WORD *)(v46 + 11) == 31073)
                {
                  sub_216B1E678((int)v892, "iimage1DArray");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v892[0];
                  v8 = v892[1];
                  v9 = 332;
                  goto LABEL_2558;
                }
              }
            }
            break;
          default:
            return result;
        }
        return 0;
      }
      if (v43 == 110)
      {
        v232 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v232 + 1) == 0x636570737265706FLL && *(_DWORD *)(v232 + 9) == 1702259060)
        {
          sub_216B1E678((int)v888, "noperspective");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v888[0];
          v8 = v888[1];
          v9 = 394;
          goto LABEL_2558;
        }
        return 0;
      }
      if (v43 != 115)
      {
        if (v43 != 117)
          return result;
        v130 = sub_216B1E600((uint64_t)v1210);
        if (*(_DWORD *)(v130 + 1) == 1734438249 && *(_BYTE *)(v130 + 5) == 101)
        {
          v132 = sub_216B26288(v1210, 6);
          if (v132 == 50)
          {
            v540 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v540 + 7) == 1920090436 && *(_WORD *)(v540 + 11) == 31073)
            {
              sub_216B1E678((int)v882, "uimage2DArray");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v882[0];
              v8 = v882[1];
              v9 = 429;
              goto LABEL_2558;
            }
          }
          else if (v132 == 49)
          {
            v133 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v133 + 7) == 1920090436 && *(_WORD *)(v133 + 11) == 31073)
            {
              sub_216B1E678((int)v883, "uimage1DArray");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v883[0];
              v8 = v883[1];
              v9 = 427;
              goto LABEL_2558;
            }
          }
        }
        return 0;
      }
      v234 = sub_216B26288(v1210, 1);
      if (v234 != 116)
      {
        if (v234 == 97)
        {
          v235 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v235 + 2) == 1701605485 && *(_BYTE *)(v235 + 6) == 114)
          {
            v237 = sub_216B26288(v1210, 7);
            switch(v237)
            {
              case 'B':
                v697 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v697 + 8) == 1701209717 && *(_BYTE *)(v697 + 12) == 114)
                {
                  sub_216B1E678((int)v885, "samplerBuffer");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v885[0];
                  v8 = v885[1];
                  v9 = 418;
                  goto LABEL_2558;
                }
                break;
              case '3':
                v699 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v699 + 8) == 1667584580 && *(_BYTE *)(v699 + 12) == 116)
                {
                  sub_216B1E678((int)v886, "sampler3DRect");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v886[0];
                  v8 = v886[1];
                  v9 = 417;
                  goto LABEL_2558;
                }
                break;
              case '2':
                v238 = sub_216B1E600((uint64_t)v1210);
                if (*(_DWORD *)(v238 + 8) == 1667584580 && *(_BYTE *)(v238 + 12) == 116)
                {
                  sub_216B1E678((int)v887, "sampler2DRect");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v887[0];
                  v8 = v887[1];
                  v9 = 413;
                  goto LABEL_2558;
                }
                break;
            }
          }
        }
        return 0;
      }
      v444 = sub_216B1E600((uint64_t)v1210);
      if (*(_QWORD *)(v444 + 2) != 0x7373615F63697461 || *(_QWORD *)(v444 + 5) != 0x7472657373615F63)
        return 0;
      sub_216B1E678((int)v884, "static_assert");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v884[0];
      v8 = v884[1];
      v9 = 160;
LABEL_1334:
      v26 = 4;
      return sub_216B5D720(v7, v8, v9, v26, v6, v0);
    case 14:
      v48 = sub_216B26288(v1210, 0);
      result = 0;
      if (v48 > 114)
      {
        if (v48 == 115)
        {
          v189 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v189 + 1) == 1819307361 && *(_WORD *)(v189 + 5) == 29285)
          {
            v191 = sub_216B26288(v1210, 7);
            if (v191 == 50)
            {
              v500 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v500 + 8) == 1920090436 && *(_WORD *)(v500 + 12) == 31073)
              {
                sub_216B1E678((int)v873, "sampler2DArray");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v873[0];
                v8 = v873[1];
                v9 = 409;
                goto LABEL_2558;
              }
            }
            else if (v191 == 49)
            {
              v192 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v192 + 8) == 1920090436 && *(_WORD *)(v192 + 12) == 31073)
              {
                sub_216B1E678((int)v874, "sampler1DArray");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v874[0];
                v8 = v874[1];
                v9 = 405;
                goto LABEL_2558;
              }
            }
          }
        }
        else
        {
          if (v48 != 117)
            return result;
          v135 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v135 + 1) == 1886216563 && *(_DWORD *)(v135 + 4) == 1919249520)
          {
            v137 = sub_216B26288(v1210, 8);
            if (v137 == 66)
            {
              v492 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v492 + 9) == 1701209717 && *(_BYTE *)(v492 + 13) == 114)
              {
                sub_216B1E678((int)v871, "usamplerBuffer");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v871[0];
                v8 = v871[1];
                v9 = 448;
                goto LABEL_2558;
              }
            }
            else if (v137 == 50)
            {
              v138 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v138 + 9) == 1667584580 && *(_BYTE *)(v138 + 13) == 116)
              {
                sub_216B1E678((int)v872, "usampler2DRect");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v872[0];
                v8 = v872[1];
                v9 = 446;
                goto LABEL_2558;
              }
            }
          }
        }
        return 0;
      }
      if (v48 == 95)
      {
        v168 = sub_216B26288(v1210, 1);
        if (v168 == 95)
        {
          v387 = sub_216B26288(v1210, 2);
          if (v387 == 105)
          {
            v531 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v531 + 3) == 0x6572656665725F73 && *(_QWORD *)(v531 + 6) == 0x65636E6572656665)
            {
              sub_216B1E678((int)v879, "__is_reference");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v879[0];
              v8 = v879[1];
              v9 = 227;
              goto LABEL_312;
            }
          }
          else if (v387 == 97)
          {
            v388 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v388 + 3) == 0x7478655F79617272 && *(_QWORD *)(v388 + 6) == 0x746E657478655F79)
            {
              sub_216B1E678((int)v880, "__array_extent");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v880[0];
              v8 = v880[1];
              v9 = 246;
              goto LABEL_312;
            }
          }
        }
        else if (v168 == 83)
        {
          v169 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v169 + 2) == 0x73615F6369746174 && *(_DWORD *)(v169 + 10) == 1953654131)
          {
            sub_216B1E678((int)v881, "_Static_assert");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v881[0];
            v8 = v881[1];
            v9 = 117;
            goto LABEL_2448;
          }
        }
        return 0;
      }
      if (v48 != 105)
        return result;
      v49 = sub_216B26288(v1210, 1);
      if (v49 == 115)
      {
        v369 = sub_216B1E600((uint64_t)v1210);
        if (*(_DWORD *)(v369 + 2) == 1819307361 && *(_WORD *)(v369 + 6) == 29285)
        {
          v371 = sub_216B26288(v1210, 8);
          if (v371 == 66)
          {
            v618 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v618 + 9) == 1701209717 && *(_BYTE *)(v618 + 13) == 114)
            {
              sub_216B1E678((int)v875, "isamplerBuffer");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v875[0];
              v8 = v875[1];
              v9 = 372;
              goto LABEL_2558;
            }
          }
          else if (v371 == 50)
          {
            v372 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v372 + 9) == 1667584580 && *(_BYTE *)(v372 + 13) == 116)
            {
              sub_216B1E678((int)v876, "isampler2DRect");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v876[0];
              v8 = v876[1];
              v9 = 369;
              goto LABEL_2558;
            }
          }
        }
        return 0;
      }
      if (v49 != 109)
        return 0;
      v50 = sub_216B1E600((uint64_t)v1210);
      if (*(_WORD *)(v50 + 2) != 26465 || *(_BYTE *)(v50 + 4) != 101)
        return 0;
      v52 = sub_216B26288(v1210, 5);
      if (v52 != 67)
      {
        if (v52 == 50 && *(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 6) == 0x7961727241534D44)
        {
          sub_216B1E678((int)v878, "image2DMSArray");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v878[0];
          v8 = v878[1];
          v9 = 350;
          goto LABEL_464;
        }
        return 0;
      }
      if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 6) != 0x7961727241656275)
        return 0;
      sub_216B1E678((int)v877, "imageCubeArray");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v877[0];
      v8 = v877[1];
      v9 = 356;
      goto LABEL_464;
    case 15:
      v53 = sub_216B26288(v1210, 0);
      result = 0;
      if (v53 > 114)
      {
        if (v53 == 115)
        {
          v194 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v194 + 1) == 1819307361 && *(_WORD *)(v194 + 5) == 29285)
          {
            v196 = sub_216B26288(v1210, 7);
            if (v196 == 50)
            {
              v502 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v502 + 8) == 1634227012 && *(_DWORD *)(v502 + 11) == 2003788897)
              {
                sub_216B1E678((int)v862, "sampler2DShadow");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v862[0];
                v8 = v862[1];
                v9 = 415;
                goto LABEL_2558;
              }
            }
            else if (v196 == 49)
            {
              v197 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v197 + 8) == 1634227012 && *(_DWORD *)(v197 + 11) == 2003788897)
              {
                sub_216B1E678((int)v863, "sampler1DShadow");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v863[0];
                v8 = v863[1];
                v9 = 407;
                goto LABEL_2558;
              }
            }
          }
          return 0;
        }
        if (v53 != 117)
          return result;
        v140 = sub_216B26288(v1210, 1);
        if (v140 == 115)
        {
          v381 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v381 + 2) == 1819307361 && *(_WORD *)(v381 + 6) == 29285)
          {
            v383 = sub_216B26288(v1210, 8);
            if (v383 == 50)
            {
              v622 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v622 + 9) == 1920090436 && *(_WORD *)(v622 + 13) == 31073)
              {
                sub_216B1E678((int)v858, "usampler2DArray");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v858[0];
                v8 = v858[1];
                v9 = 443;
                goto LABEL_2558;
              }
            }
            else if (v383 == 49)
            {
              v384 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v384 + 9) == 1920090436 && *(_WORD *)(v384 + 13) == 31073)
              {
                sub_216B1E678((int)v859, "usampler1DArray");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v859[0];
                v8 = v859[1];
                v9 = 441;
                goto LABEL_2558;
              }
            }
          }
          return 0;
        }
        if (v140 != 105 || *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1701273965)
          return 0;
        v141 = sub_216B26288(v1210, 6);
        if (v141 != 67)
        {
          if (v141 == 50 && *(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 7) == 0x7961727241534D44)
          {
            sub_216B1E678((int)v861, "uimage2DMSArray");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v861[0];
            v8 = v861[1];
            v9 = 431;
            goto LABEL_464;
          }
          return 0;
        }
        if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 7) != 0x7961727241656275)
          return 0;
        sub_216B1E678((int)v860, "uimageCubeArray");
        v6 = *(_QWORD *)(v0 + 168);
        v7 = v860[0];
        v8 = v860[1];
        v9 = 436;
      }
      else
      {
        if (v53 == 95)
        {
          if (sub_216B26288(v1210, 1) != 95)
            return 0;
          v171 = sub_216B26288(v1210, 2);
          if (v171 == 105)
          {
            v476 = sub_216B26288(v1210, 3);
            if (v476 == 115)
            {
              v599 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v599 + 4) == 0x656D68746972615FLL && *(_QWORD *)(v599 + 7) == 0x636974656D687469)
              {
                sub_216B1E678((int)v868, "__is_arithmetic");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v868[0];
                v8 = v868[1];
                v9 = 220;
                goto LABEL_312;
              }
            }
            else if (v476 == 102)
            {
              v477 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v477 + 4) == 0x6978655F746F6E5FLL && *(_QWORD *)(v477 + 7) == 0x7374736978655F74)
              {
                sub_216B1E678((int)v869, "__if_not_exists");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v869[0];
                v8 = v869[1];
                v9 = 288;
                goto LABEL_2297;
              }
            }
          }
          else if (v171 == 98)
          {
            v172 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v172 + 3) == 0x65725F6567646972 && *(_DWORD *)(v172 + 11) == 1852399988)
            {
              sub_216B1E678((int)v870, "__bridge_retain");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v870[0];
              v8 = v870[1];
              v9 = 273;
              goto LABEL_490;
            }
          }
          return 0;
        }
        if (v53 != 105)
          return result;
        v54 = sub_216B26288(v1210, 1);
        if (v54 == 115)
        {
          v374 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v374 + 2) == 1819307361 && *(_WORD *)(v374 + 6) == 29285)
          {
            v376 = sub_216B26288(v1210, 8);
            if (v376 == 50)
            {
              v620 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v620 + 9) == 1920090436 && *(_WORD *)(v620 + 13) == 31073)
              {
                sub_216B1E678((int)v864, "isampler2DArray");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v864[0];
                v8 = v864[1];
                v9 = 366;
                goto LABEL_2558;
              }
            }
            else if (v376 == 49)
            {
              v377 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v377 + 9) == 1920090436 && *(_WORD *)(v377 + 13) == 31073)
              {
                sub_216B1E678((int)v865, "isampler1DArray");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v865[0];
                v8 = v865[1];
                v9 = 364;
                goto LABEL_2558;
              }
            }
          }
          return 0;
        }
        if (v54 != 105 || *(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 2) != 1701273965)
          return 0;
        v55 = sub_216B26288(v1210, 6);
        if (v55 != 67)
        {
          if (v55 == 50 && *(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 7) == 0x7961727241534D44)
          {
            sub_216B1E678((int)v867, "iimage2DMSArray");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v867[0];
            v8 = v867[1];
            v9 = 336;
            goto LABEL_464;
          }
          return 0;
        }
        if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 7) != 0x7961727241656275)
          return 0;
        sub_216B1E678((int)v866, "iimageCubeArray");
        v6 = *(_QWORD *)(v0 + 168);
        v7 = v866[0];
        v8 = v866[1];
        v9 = 341;
      }
      goto LABEL_464;
    case 16:
      v56 = sub_216B26288(v1210, 0);
      result = 0;
      if (v56 > 113)
      {
        if (v56 == 114)
        {
          v199 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v199 + 1) == 0x72707265746E6965 && *(_QWORD *)(v199 + 8) == 0x747361635F746572)
          {
            sub_216B1E678((int)v849, "reinterpret_cast");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v849[0];
            v8 = v849[1];
            v9 = 140;
            goto LABEL_312;
          }
          return 0;
        }
        if (v56 != 115)
          return result;
        v142 = sub_216B1E600((uint64_t)v1210);
        if (*(_DWORD *)(v142 + 1) != 1819307361 || *(_WORD *)(v142 + 5) != 29285)
          return 0;
        v144 = sub_216B26288(v1210, 7);
        if (v144 != 67)
        {
          if (v144 == 50 && *(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 8) == 0x7961727241534D44)
          {
            sub_216B1E678((int)v848, "sampler2DMSArray");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v848[0];
            v8 = v848[1];
            v9 = 412;
            goto LABEL_2558;
          }
          return 0;
        }
        if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 8) != 0x7961727241656275)
          return 0;
        sub_216B1E678((int)v847, "samplerCubeArray");
        v6 = *(_QWORD *)(v0 + 168);
        v7 = v847[0];
        v8 = v847[1];
        v9 = 420;
        goto LABEL_464;
      }
      if (v56 != 95)
      {
        if (v56 != 105)
          return result;
        v57 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v57 + 1) == 0x3272656C706D6173 && *(_QWORD *)(v57 + 8) == 0x776F646168534432)
        {
          sub_216B1E678((int)v850, "isampler2DShadow");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v850[0];
          v8 = v850[1];
          v9 = 370;
          goto LABEL_2558;
        }
        return 0;
      }
      if (sub_216B26288(v1210, 1) != 95)
        return 0;
      v174 = sub_216B26288(v1210, 2);
      if (v174 == 105)
      {
        if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
          return 0;
        v479 = sub_216B26288(v1210, 5);
        result = 0;
        if (v479 <= 107)
        {
          if (v479 == 99)
          {
            v737 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v737 + 6) == 0x6269747265766E6FLL && *(_WORD *)(v737 + 14) == 25964)
            {
              sub_216B1E678((int)v855, "__is_convertible");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v855[0];
              v8 = v855[1];
              v9 = 244;
              goto LABEL_312;
            }
          }
          else
          {
            if (v479 != 102)
              return result;
            v680 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v680 + 6) == 0x746E656D61646E75 && *(_WORD *)(v680 + 14) == 27745)
            {
              sub_216B1E678((int)v854, "__is_fundamental");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v854[0];
              v8 = v854[1];
              v9 = 230;
              goto LABEL_312;
            }
          }
        }
        else
        {
          switch(v479)
          {
            case 'l':
              v731 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v731 + 6) == 0x78655F65756C6176 && *(_WORD *)(v731 + 14) == 29296)
              {
                sub_216B1E678((int)v853, "__is_lvalue_expr");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v853[0];
                v8 = v853[1];
                v9 = 218;
                goto LABEL_312;
              }
              break;
            case 'p':
              v733 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v733 + 6) == 0x6870726F6D796C6FLL && *(_WORD *)(v733 + 14) == 25449)
              {
                sub_216B1E678((int)v852, "__is_polymorphic");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v852[0];
                v8 = v852[1];
                v9 = 211;
                goto LABEL_312;
              }
              break;
            case 'r':
              v480 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v480 + 6) == 0x78655F65756C6176 && *(_WORD *)(v480 + 14) == 29296)
              {
                sub_216B1E678((int)v851, "__is_rvalue_expr");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v851[0];
                v8 = v851[1];
                v9 = 219;
                goto LABEL_312;
              }
              break;
            default:
              return result;
          }
        }
        return 0;
      }
      if (v174 != 98)
        return 0;
      v175 = sub_216B1E600((uint64_t)v1210);
      if (*(_DWORD *)(v175 + 3) != 1953261941 || *(_DWORD *)(v175 + 6) != 1601071476)
        return 0;
      v177 = sub_216B26288(v1210, 10);
      if (v177 == 118)
      {
        v701 = sub_216B1E600((uint64_t)v1210);
        if (*(_DWORD *)(v701 + 11) == 1918984033 && *(_BYTE *)(v701 + 15) == 103)
        {
          sub_216B1E678((int)v856, "__builtin_va_arg");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v856[0];
          v8 = v856[1];
          v9 = 171;
          goto LABEL_2448;
        }
        return 0;
      }
      if (v177 != 97)
        return 0;
      v178 = sub_216B1E600((uint64_t)v1210);
      if (*(_DWORD *)(v178 + 11) != 1887007859 || *(_BYTE *)(v178 + 15) != 101)
        return 0;
      sub_216B1E678((int)v857, "__builtin_astype");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v857[0];
      v8 = v857[1];
      v9 = 264;
LABEL_2088:
      v26 = 512;
      return sub_216B5D720(v7, v8, v9, v26, v6, v0);
    case 17:
      v59 = sub_216B26288(v1210, 0);
      result = 0;
      if (v59 <= 114)
      {
        if (v59 != 95)
        {
          if (v59 != 105)
            return result;
          v60 = sub_216B1E600((uint64_t)v1210);
          if (*(_DWORD *)(v60 + 1) == 1886216563 && *(_DWORD *)(v60 + 4) == 1919249520)
          {
            v62 = sub_216B26288(v1210, 8);
            if (v62 != 67)
            {
              if (v62 == 50 && *(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 9) == 0x7961727241534D44)
              {
                sub_216B1E678((int)v842, "isampler2DMSArray");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v842[0];
                v8 = v842[1];
                v9 = 368;
                goto LABEL_2558;
              }
              return 0;
            }
            if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 9) == 0x7961727241656275)
            {
              sub_216B1E678((int)v841, "isamplerCubeArray");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v841[0];
              v8 = v841[1];
              v9 = 374;
LABEL_464:
              v26 = 0x100000;
              return sub_216B5D720(v7, v8, v9, v26, v6, v0);
            }
          }
          return 0;
        }
        if (sub_216B26288(v1210, 1) != 95)
          return 0;
        v180 = sub_216B26288(v1210, 2);
        switch(v180)
        {
          case 'u':
            v494 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v494 + 3) != 0x6E69796C7265646ELL || *(_QWORD *)(v494 + 9) != 0x657079745F676E69)
              return 0;
            sub_216B1E678((int)v843, "__underlying_type");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v843[0];
            v8 = v843[1];
            v9 = 217;
LABEL_312:
            v26 = 2;
            break;
          case 'i':
            v496 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v496 + 3) != 0x7572747365645F73 || *(_QWORD *)(v496 + 9) != 0x656C626974637572)
              return 0;
            sub_216B1E678((int)v844, "__is_destructible");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v844[0];
            v8 = v844[1];
            v9 = 186;
LABEL_2297:
            v26 = 16;
            break;
          case 'b':
            v181 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v181 + 3) != 1734633842 || *(_WORD *)(v181 + 7) != 24421)
              return 0;
            v183 = sub_216B26288(v1210, 9);
            if (v183 == 116)
            {
              v714 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v714 + 10) != 1936613746 || *(_DWORD *)(v714 + 13) != 1919247987)
                return 0;
              sub_216B1E678((int)v845, "__bridge_transfer");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v845[0];
              v8 = v845[1];
              v9 = 271;
            }
            else
            {
              if (v183 != 114)
                return 0;
              v184 = sub_216B1E600((uint64_t)v1210);
              if (*(_DWORD *)(v184 + 10) != 1767994469 || *(_DWORD *)(v184 + 13) != 1684369001)
                return 0;
              sub_216B1E678((int)v846, "__bridge_retained");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v846[0];
              v8 = v846[1];
              v9 = 272;
            }
LABEL_490:
            v26 = 2048;
            return sub_216B5D720(v7, v8, v9, v26, v6, v0);
          default:
            return 0;
        }
        return sub_216B5D720(v7, v8, v9, v26, v6, v0);
      }
      if (v59 == 115)
      {
        v201 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v201 + 1) != 0x754372656C706D61 || *(_QWORD *)(v201 + 9) != 0x776F646168536562)
          return 0;
        sub_216B1E678((int)v840, "samplerCubeShadow");
        v6 = *(_QWORD *)(v0 + 168);
        v7 = v840[0];
        v8 = v840[1];
        v9 = 422;
LABEL_2558:
        v26 = 0x8000;
        return sub_216B5D720(v7, v8, v9, v26, v6, v0);
      }
      if (v59 != 117)
        return result;
      v145 = sub_216B1E600((uint64_t)v1210);
      if (*(_DWORD *)(v145 + 1) == 1886216563 && *(_DWORD *)(v145 + 4) == 1919249520)
      {
        v147 = sub_216B26288(v1210, 8);
        if (v147 != 67)
        {
          if (v147 == 50 && *(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 9) == 0x7961727241534D44)
          {
            sub_216B1E678((int)v839, "usampler2DMSArray");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v839[0];
            v8 = v839[1];
            v9 = 445;
            goto LABEL_2558;
          }
          return 0;
        }
        if (*(_QWORD *)(sub_216B1E600((uint64_t)v1210) + 9) == 0x7961727241656275)
        {
          sub_216B1E678((int)v838, "usamplerCubeArray");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v838[0];
          v8 = v838[1];
          v9 = 450;
          goto LABEL_464;
        }
      }
      return 0;
    case 18:
      v63 = sub_216B26288(v1210, 0);
      if (v63 == 105)
      {
        if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 1) != 1701273965)
          return 0;
        v151 = sub_216B26288(v1210, 5);
        if (v151 == 50)
        {
          v452 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v452 + 6) == 0x6853796172724144 && *(_DWORD *)(v452 + 14) == 2003788897)
          {
            sub_216B1E678((int)v828, "image2DArrayShadow");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v828[0];
            v8 = v828[1];
            v9 = 348;
            goto LABEL_2558;
          }
        }
        else if (v151 == 49)
        {
          v152 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v152 + 6) == 0x6853796172724144 && *(_DWORD *)(v152 + 14) == 2003788897)
          {
            sub_216B1E678((int)v829, "image1DArrayShadow");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v829[0];
            v8 = v829[1];
            v9 = 344;
            goto LABEL_2558;
          }
        }
      }
      else if (v63 == 95 && sub_216B26288(v1210, 1) == 95)
      {
        v64 = sub_216B26288(v1210, 2);
        result = 0;
        switch(v64)
        {
          case 'b':
            v65 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v65 + 3) != 0x6F5F6E69746C6975 || *(_QWORD *)(v65 + 10) != 0x666F74657366666FLL)
              return 0;
            sub_216B1E678((int)v837, "__builtin_offsetof");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v837[0];
            v8 = v837[1];
            v9 = 169;
            goto LABEL_2448;
          case 'h':
            v505 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v505 + 3) != 29537 || *(_BYTE *)(v505 + 5) != 95)
              return 0;
            v507 = sub_216B26288(v1210, 6);
            if (v507 == 116)
            {
              v716 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v716 + 7) == 0x635F6C6169766972 && *(_QWORD *)(v716 + 10) == 0x79706F635F6C6169)
              {
                sub_216B1E678((int)v835, "__has_trivial_copy");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v835[0];
                v8 = v835[1];
                v9 = 197;
                goto LABEL_312;
              }
            }
            else if (v507 == 110)
            {
              v508 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v508 + 7) == 0x635F776F7268746FLL && *(_QWORD *)(v508 + 10) == 0x79706F635F776F72)
              {
                sub_216B1E678((int)v836, "__has_nothrow_copy");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v836[0];
                v8 = v836[1];
                v9 = 193;
                goto LABEL_312;
              }
            }
            return 0;
          case 'i':
            if (*(_DWORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 1868783475)
              return 0;
            v510 = sub_216B26288(v1210, 7);
            if (v510 == 110)
            {
              v718 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v718 + 8) == 0x6269746375727473 && *(_WORD *)(v718 + 16) == 25964)
              {
                sub_216B1E678((int)v833, "__is_constructible");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v833[0];
                v8 = v833[1];
                v9 = 189;
                goto LABEL_312;
              }
            }
            else if (v510 == 109)
            {
              v511 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v511 + 8) == 0x79745F6574656C70 && *(_WORD *)(v511 + 16) == 25968)
              {
                sub_216B1E678((int)v834, "__is_complete_type");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v834[0];
                v8 = v834[1];
                v9 = 223;
                goto LABEL_312;
              }
            }
            break;
          case 'm':
            v513 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v513 + 3) != 0x72705F656C75646FLL || *(_QWORD *)(v513 + 10) != 0x5F5F657461766972)
              return 0;
            sub_216B1E678((int)v832, "__module_private__");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v832[0];
            v8 = v832[1];
            v9 = 248;
            goto LABEL_2448;
          case 'n':
            v515 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v515 + 3) != 0x70736E755F6C6C75 || *(_QWORD *)(v515 + 10) != 0x6465696669636570)
              return 0;
            sub_216B1E678((int)v831, "__null_unspecified");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v831[0];
            v8 = v831[1];
            v9 = 276;
            goto LABEL_2448;
          case 'p':
            v517 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v517 + 3) != 0x655F657461766972 || *(_QWORD *)(v517 + 10) != 0x5F5F6E7265747865)
              return 0;
            sub_216B1E678((int)v830, "__private_extern__");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v830[0];
            v8 = v830[1];
            v9 = 247;
            goto LABEL_2448;
          default:
            return result;
        }
      }
      return 0;
    case 19:
      v67 = sub_216B26288(v1210, 0);
      if (v67 == 115)
      {
        v154 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v154 + 1) == 0x443272656C706D61
          && *(_QWORD *)(v154 + 9) == 0x6461685374636552
          && *(_WORD *)(v154 + 17) == 30575)
        {
          sub_216B1E678((int)v823, "sampler2DRectShadow");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v823[0];
          v8 = v823[1];
          v9 = 414;
          goto LABEL_2558;
        }
      }
      else if (v67 == 95 && sub_216B26288(v1210, 1) == 95)
      {
        v68 = sub_216B26288(v1210, 2);
        if (v68 == 105)
        {
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
            return 0;
          v424 = sub_216B26288(v1210, 5);
          switch(v424)
          {
            case 'm':
              v670 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v670 + 6) == 0x6F705F7265626D65 && *(_QWORD *)(v670 + 11) == 0x7265746E696F705FLL)
              {
                sub_216B1E678((int)v824, "__is_member_pointer");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v824[0];
                v8 = v824[1];
                v9 = 237;
                goto LABEL_312;
              }
              break;
            case 'f':
              v672 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v672 + 6) == 0x5F676E6974616F6CLL && *(_QWORD *)(v672 + 11) == 0x746E696F705F676ELL)
              {
                sub_216B1E678((int)v825, "__is_floating_point");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v825[0];
                v8 = v825[1];
                v9 = 221;
                goto LABEL_312;
              }
              break;
            case 'c':
              v425 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v425 + 6) == 0x6269747265766E6FLL && *(_QWORD *)(v425 + 11) == 0x6F745F656C626974)
              {
                sub_216B1E678((int)v826, "__is_convertible_to");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v826[0];
                v8 = v826[1];
                v9 = 205;
                goto LABEL_312;
              }
              break;
          }
        }
        else if (v68 == 80)
        {
          v69 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v69 + 3) == 0x55465F5954544552 && *(_QWORD *)(v69 + 11) == 0x5F5F4E4F4954434ELL)
          {
            sub_216B1E678((int)v827, "__PRETTY_FUNCTION__");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v827[0];
            v8 = v827[1];
            v9 = 179;
            goto LABEL_2448;
          }
        }
      }
      return 0;
    case 20:
      v71 = sub_216B26288(v1210, 0);
      if (v71 == 115)
      {
        v157 = sub_216B1E600((uint64_t)v1210);
        if (*(_DWORD *)(v157 + 1) == 1819307361 && *(_WORD *)(v157 + 5) == 29285)
        {
          v159 = sub_216B26288(v1210, 7);
          if (v159 == 50)
          {
            v454 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v454 + 8) == 0x6853796172724144 && *(_DWORD *)(v454 + 16) == 2003788897)
            {
              sub_216B1E678((int)v816, "sampler2DArrayShadow");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v816[0];
              v8 = v816[1];
              v9 = 410;
              goto LABEL_2558;
            }
          }
          else if (v159 == 49)
          {
            v160 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v160 + 8) == 0x6853796172724144 && *(_DWORD *)(v160 + 16) == 2003788897)
            {
              sub_216B1E678((int)v817, "sampler1DArrayShadow");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v817[0];
              v8 = v817[1];
              v9 = 406;
              goto LABEL_2558;
            }
          }
        }
      }
      else if (v71 == 95 && sub_216B26288(v1210, 1) == 95)
      {
        v72 = sub_216B26288(v1210, 2);
        switch(v72)
        {
          case 's':
            v446 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v446 + 3) == 0x6E695F656C676E69
              && *(_QWORD *)(v446 + 11) == 0x636E617469726568
              && *(_BYTE *)(v446 + 19) == 101)
            {
              sub_216B1E678((int)v818, "__single_inheritance");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v818[0];
              v8 = v818[1];
              v9 = 289;
              goto LABEL_2297;
            }
            break;
          case 'i':
            if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
              return 0;
            v449 = sub_216B26288(v1210, 5);
            if (v449 == 115)
            {
              v674 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v674 + 6) == 0x5F647261646E6174 && *(_QWORD *)(v674 + 12) == 0x74756F79616C5F64)
              {
                sub_216B1E678((int)v819, "__is_standard_layout");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v819[0];
                v8 = v819[1];
                v9 = 240;
                goto LABEL_312;
              }
            }
            else if (v449 == 105)
            {
              v450 = sub_216B1E600((uint64_t)v1210);
              if (*(_QWORD *)(v450 + 6) == 0x656361667265746ELL && *(_QWORD *)(v450 + 12) == 0x7373616C635F6563)
              {
                sub_216B1E678((int)v820, "__is_interface_class");
                v6 = *(_QWORD *)(v0 + 168);
                v7 = v820[0];
                v8 = v820[1];
                v9 = 184;
                goto LABEL_2297;
              }
            }
            break;
          case 'h':
            v73 = sub_216B1E600((uint64_t)v1210);
            if (*(_WORD *)(v73 + 3) == 29537 && *(_BYTE *)(v73 + 5) == 95)
            {
              v75 = sub_216B26288(v1210, 6);
              if (v75 == 116)
              {
                v666 = sub_216B1E600((uint64_t)v1210);
                if (*(_QWORD *)(v666 + 7) == 0x615F6C6169766972 && *(_QWORD *)(v666 + 12) == 0x6E67697373615F6CLL)
                {
                  sub_216B1E678((int)v821, "__has_trivial_assign");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v821[0];
                  v8 = v821[1];
                  v9 = 195;
                  goto LABEL_312;
                }
              }
              else if (v75 == 110)
              {
                v76 = sub_216B1E600((uint64_t)v1210);
                if (*(_QWORD *)(v76 + 7) == 0x615F776F7268746FLL && *(_QWORD *)(v76 + 12) == 0x6E67697373615F77)
                {
                  sub_216B1E678((int)v822, "__has_nothrow_assign");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v822[0];
                  v8 = v822[1];
                  v9 = 191;
                  goto LABEL_312;
                }
              }
            }
            break;
        }
      }
      return 0;
    case 21:
      if (*(_WORD *)sub_216B1E600((uint64_t)v1210) != 24415)
        return 0;
      v78 = sub_216B26288(v1210, 2);
      switch(v78)
      {
        case 'v':
          v264 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v264 + 3) == 0x695F6C6175747269
            && *(_QWORD *)(v264 + 11) == 0x6E6174697265686ELL
            && *(_WORD *)(v264 + 19) == 25955)
          {
            sub_216B1E678((int)v812, "__virtual_inheritance");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v812[0];
            v8 = v812[1];
            v9 = 291;
            goto LABEL_2297;
          }
          break;
        case 'i':
          if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
            return 0;
          v267 = sub_216B26288(v1210, 5);
          if (v267 == 114)
          {
            v592 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v592 + 6) == 0x65725F65756C6176 && *(_QWORD *)(v592 + 13) == 0x65636E6572656665)
            {
              sub_216B1E678((int)v813, "__is_rvalue_reference");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v813[0];
              v8 = v813[1];
              v9 = 229;
              goto LABEL_312;
            }
          }
          else if (v267 == 108)
          {
            v268 = sub_216B1E600((uint64_t)v1210);
            if (*(_QWORD *)(v268 + 6) == 0x65725F65756C6176 && *(_QWORD *)(v268 + 13) == 0x65636E6572656665)
            {
              sub_216B1E678((int)v814, "__is_lvalue_reference");
              v6 = *(_QWORD *)(v0 + 168);
              v7 = v814[0];
              v8 = v814[1];
              v9 = 228;
              goto LABEL_312;
            }
          }
          break;
        case 'b':
          v79 = sub_216B1E600((uint64_t)v1210);
          v80 = *(_QWORD *)(v79 + 3) == 0x635F6E69746C6975 && *(_QWORD *)(v79 + 11) == 0x78655F65736F6F68;
          if (v80 && *(_WORD *)(v79 + 19) == 29296)
          {
            sub_216B1E678((int)v815, "__builtin_choose_expr");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v815[0];
            v8 = v815[1];
            v9 = 168;
            goto LABEL_2448;
          }
          break;
      }
      return 0;
    case 22:
      v82 = sub_216B26288(v1210, 0);
      if (v82 == 115)
      {
        v162 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v162 + 1) == 0x754372656C706D61
          && *(_QWORD *)(v162 + 9) == 0x5379617272416562
          && *(_QWORD *)(v162 + 14) == 0x776F646168537961)
        {
          sub_216B1E678((int)v810, "samplerCubeArrayShadow");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v810[0];
          v8 = v810[1];
          v9 = 421;
          goto LABEL_464;
        }
      }
      else if (v82 == 95)
      {
        v83 = sub_216B1E600((uint64_t)v1210);
        v84 = *(_QWORD *)(v83 + 1) == 0x6C7069746C756D5FLL && *(_QWORD *)(v83 + 9) == 0x697265686E695F65;
        if (v84 && *(_QWORD *)(v83 + 14) == 0x65636E6174697265)
        {
          sub_216B1E678((int)v811, "__multiple_inheritance");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v811[0];
          v8 = v811[1];
          v9 = 290;
          goto LABEL_2297;
        }
      }
      return 0;
    case 23:
      if (*(_WORD *)sub_216B1E600((uint64_t)v1210) != 24415)
        return 0;
      v86 = sub_216B26288(v1210, 2);
      if (v86 == 105)
      {
        if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
          return 0;
        v240 = sub_216B26288(v1210, 5);
        if (v240 == 116)
        {
          v561 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v561 + 6) == 0x796C6C6169766972
            && *(_QWORD *)(v561 + 14) == 0x6C626179706F635FLL
            && *(_BYTE *)(v561 + 22) == 101)
          {
            sub_216B1E678((int)v807, "__is_trivially_copyable");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v807[0];
            v8 = v807[1];
            v9 = 215;
            goto LABEL_312;
          }
        }
        else if (v240 == 110)
        {
          v241 = sub_216B1E600((uint64_t)v1210);
          v242 = *(_QWORD *)(v241 + 6) == 0x615F776F7268746FLL && *(_QWORD *)(v241 + 14) == 0x6C62616E67697373;
          if (v242 && *(_BYTE *)(v241 + 22) == 101)
          {
            sub_216B1E678((int)v808, "__is_nothrow_assignable");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v808[0];
            v8 = v808[1];
            v9 = 188;
            goto LABEL_312;
          }
        }
        return 0;
      }
      if (v86 != 98)
        return 0;
      v87 = sub_216B1E600((uint64_t)v1210);
      v88 = *(_QWORD *)(v87 + 3) == 0x635F6E69746C6975 && *(_QWORD *)(v87 + 11) == 0x6576747265766E6FLL;
      if (!v88 || *(_DWORD *)(v87 + 19) != 1919906915)
        return 0;
      sub_216B1E678((int)v809, "__builtin_convertvector");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v809[0];
      v8 = v809[1];
      v9 = 293;
LABEL_2448:
      v26 = 61439;
      return sub_216B5D720(v7, v8, v9, v26, v6, v0);
    case 24:
      v90 = sub_216B1E600((uint64_t)v1210);
      if (*(_DWORD *)v90 != 1634230111 || *(_WORD *)(v90 + 4) != 24435)
        return 0;
      v92 = sub_216B26288(v1210, 6);
      if (v92 == 118)
      {
        v244 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v244 + 7) == 0x645F6C6175747269
          && *(_QWORD *)(v244 + 15) == 0x6F74637572747365
          && *(_BYTE *)(v244 + 23) == 114)
        {
          sub_216B1E678((int)v805, "__has_virtual_destructor");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v805[0];
          v8 = v805[1];
          v9 = 201;
          goto LABEL_312;
        }
      }
      else if (v92 == 116)
      {
        v93 = sub_216B1E600((uint64_t)v1210);
        v94 = *(_QWORD *)(v93 + 7) == 0x645F6C6169766972 && *(_QWORD *)(v93 + 15) == 0x6F74637572747365;
        if (v94 && *(_BYTE *)(v93 + 23) == 114)
        {
          sub_216B1E678((int)v806, "__has_trivial_destructor");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v806[0];
          v8 = v806[1];
          v9 = 200;
          goto LABEL_312;
        }
      }
      return 0;
    case 25:
      if (*(_WORD *)sub_216B1E600((uint64_t)v1210) != 24415)
        return 0;
      v96 = sub_216B26288(v1210, 2);
      if (v96 == 105)
      {
        if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
          return 0;
        v247 = sub_216B26288(v1210, 5);
        if (v247 == 116)
        {
          v564 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v564 + 6) == 0x796C6C6169766972
            && *(_QWORD *)(v564 + 14) == 0x616E67697373615FLL
            && *(_QWORD *)(v564 + 17) == 0x656C62616E676973)
          {
            sub_216B1E678((int)v799, "__is_trivially_assignable");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v799[0];
            v8 = v799[1];
            v9 = 216;
            goto LABEL_312;
          }
        }
        else if (v247 == 110)
        {
          v248 = sub_216B1E600((uint64_t)v1210);
          v249 = *(_QWORD *)(v248 + 6) == 0x645F776F7268746FLL && *(_QWORD *)(v248 + 14) == 0x6974637572747365;
          if (v249 && *(_QWORD *)(v248 + 17) == 0x656C626974637572)
          {
            sub_216B1E678((int)v800, "__is_nothrow_destructible");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v800[0];
            v8 = v800[1];
            v9 = 187;
            goto LABEL_2297;
          }
        }
      }
      else if (v96 == 104)
      {
        v97 = sub_216B1E600((uint64_t)v1210);
        if (*(_WORD *)(v97 + 3) == 29537 && *(_BYTE *)(v97 + 5) == 95)
        {
          v99 = sub_216B26288(v1210, 6);
          if (v99 == 116)
          {
            v556 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v556 + 7) == 1769367922 && *(_DWORD *)(v556 + 10) == 1600938345)
            {
              v558 = sub_216B26288(v1210, 14);
              if (v558 == 109)
              {
                v741 = sub_216B1E600((uint64_t)v1210);
                if (*(_QWORD *)(v741 + 15) == 0x697373615F65766FLL && *(_WORD *)(v741 + 23) == 28263)
                {
                  sub_216B1E678((int)v801, "__has_trivial_move_assign");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v801[0];
                  v8 = v801[1];
                  v9 = 196;
                  goto LABEL_312;
                }
              }
              else if (v558 == 99)
              {
                v559 = sub_216B1E600((uint64_t)v1210);
                if (*(_QWORD *)(v559 + 15) == 0x7463757274736E6FLL && *(_WORD *)(v559 + 23) == 29295)
                {
                  sub_216B1E678((int)v802, "__has_trivial_constructor");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v802[0];
                  v8 = v802[1];
                  v9 = 198;
                  goto LABEL_312;
                }
              }
            }
          }
          else if (v99 == 110)
          {
            v100 = sub_216B1E600((uint64_t)v1210);
            if (*(_DWORD *)(v100 + 7) == 1919448175 && *(_DWORD *)(v100 + 10) == 1601662834)
            {
              v102 = sub_216B26288(v1210, 14);
              if (v102 == 109)
              {
                v739 = sub_216B1E600((uint64_t)v1210);
                if (*(_QWORD *)(v739 + 15) == 0x697373615F65766FLL && *(_WORD *)(v739 + 23) == 28263)
                {
                  sub_216B1E678((int)v803, "__has_nothrow_move_assign");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v803[0];
                  v8 = v803[1];
                  v9 = 192;
                  goto LABEL_312;
                }
              }
              else if (v102 == 99)
              {
                v103 = sub_216B1E600((uint64_t)v1210);
                if (*(_QWORD *)(v103 + 15) == 0x7463757274736E6FLL && *(_WORD *)(v103 + 23) == 29295)
                {
                  sub_216B1E678((int)v804, "__has_nothrow_constructor");
                  v6 = *(_QWORD *)(v0 + 168);
                  v7 = v804[0];
                  v8 = v804[1];
                  v9 = 194;
                  goto LABEL_312;
                }
              }
            }
          }
        }
      }
      return 0;
    case 26:
      v105 = sub_216B1E600((uint64_t)v1210);
      if (*(_DWORD *)v105 != 1936285535 || *(_BYTE *)(v105 + 4) != 95)
        return 0;
      v107 = sub_216B26288(v1210, 5);
      if (v107 == 110)
      {
        v251 = sub_216B1E600((uint64_t)v1210);
        if (*(_QWORD *)(v251 + 6) == 0x635F776F7268746FLL
          && *(_QWORD *)(v251 + 14) == 0x7463757274736E6FLL
          && *(_DWORD *)(v251 + 22) == 1701601897)
        {
          sub_216B1E678((int)v797, "__is_nothrow_constructible");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v797[0];
          v8 = v797[1];
          v9 = 190;
          goto LABEL_312;
        }
      }
      else if (v107 == 109)
      {
        v108 = sub_216B1E600((uint64_t)v1210);
        v109 = *(_QWORD *)(v108 + 6) == 0x626F5F7265626D65 && *(_QWORD *)(v108 + 14) == 0x696F705F7463656ALL;
        if (v109 && *(_DWORD *)(v108 + 22) == 1919251566)
        {
          sub_216B1E678((int)v798, "__is_member_object_pointer");
          v6 = *(_QWORD *)(v0 + 168);
          v7 = v798[0];
          v8 = v798[1];
          v9 = 235;
          goto LABEL_312;
        }
      }
      return 0;
    case 28:
      if (*(_WORD *)sub_216B1E600((uint64_t)v1210) != 24415)
        return 0;
      v111 = sub_216B26288(v1210, 2);
      if (v111 == 105)
      {
        if (*(_WORD *)(sub_216B1E600((uint64_t)v1210) + 3) != 24435)
          return 0;
        v254 = sub_216B26288(v1210, 5);
        if (v254 == 116)
        {
          v567 = sub_216B1E600((uint64_t)v1210);
          if (*(_QWORD *)(v567 + 6) == 0x796C6C6169766972
            && *(_QWORD *)(v567 + 14) == 0x757274736E6F635FLL
            && *(_QWORD *)(v567 + 20) == 0x656C626974637572)
          {
            sub_216B1E678((int)v794, "__is_trivially_constructible");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v794[0];
            v8 = v794[1];
            v9 = 214;
            goto LABEL_312;
          }
        }
        else if (v254 == 109)
        {
          v255 = sub_216B1E600((uint64_t)v1210);
          v256 = *(_QWORD *)(v255 + 6) == 0x75665F7265626D65 && *(_QWORD *)(v255 + 14) == 0x705F6E6F6974636ELL;
          if (v256 && *(_QWORD *)(v255 + 20) == 0x7265746E696F705FLL)
          {
            sub_216B1E678((int)v795, "__is_member_function_pointer");
            v6 = *(_QWORD *)(v0 + 168);
            v7 = v795[0];
            v8 = v795[1];
            v9 = 236;
            goto LABEL_312;
          }
        }
        return 0;
      }
      if (v111 != 98)
        return 0;
      v112 = sub_216B1E600((uint64_t)v1210);
      v113 = *(_QWORD *)(v112 + 3) == 0x745F6E69746C6975 && *(_QWORD *)(v112 + 11) == 0x6D6F635F73657079;
      v114 = v113 && *(_QWORD *)(v112 + 19) == 0x5F656C6269746170;
      if (!v114 || *(_BYTE *)(v112 + 27) != 112)
        return 0;
      sub_216B1E678((int)v796, "__builtin_types_compatible_p");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v796[0];
      v8 = v796[1];
      v9 = 170;
LABEL_299:
      v26 = 128;
      return sub_216B5D720(v7, v8, v9, v26, v6, v0);
    case 30:
      v116 = (_QWORD *)sub_216B1E600((uint64_t)v1210);
      if (*v116 != 0x72745F7361685F5FLL
        || v116[1] != 0x6F6D5F6C61697669
        || v116[2] != 0x74736E6F635F6576
        || *(_QWORD *)((char *)v116 + 22) != 0x726F746375727473)
      {
        return 0;
      }
      sub_216B1E678((int)v793, "__has_trivial_move_constructor");
      v6 = *(_QWORD *)(v0 + 168);
      v7 = v793[0];
      v8 = v793[1];
      v9 = 199;
      goto LABEL_312;
    default:
      return result;
  }
}

uint64_t sub_216B5D720(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  int v12;
  int v13;
  int v14;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unsigned int *v20;

  if (sub_216B5D8E0(a5))
  {
    if ((a4 & 0x8000) == 0)
    {
      v12 = sub_216B5D8E0(a5);
      v13 = 0;
      v14 = 0;
      v16 = (a4 & 0x100000) == 0 || v12 != 2;
      goto LABEL_17;
    }
LABEL_16:
    v16 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_17;
  }
  if (a4 == 61439)
    goto LABEL_16;
  v17 = *(_QWORD *)a5;
  if ((a4 & 2) != 0 && (v17 & 0x40) != 0)
    goto LABEL_16;
  if ((a4 & 4) != 0 && (v17 & 0x80) != 0 || (a4 & 1) != 0 && (v17 & 1) != 0)
    goto LABEL_16;
  if ((a4 & 8) != 0 && (v17 & 0x1000000) != 0
    || (a4 & 0x10) != 0 && (v17 & 8) != 0
    || (a4 & 0x100) != 0 && (v17 & 0x20) != 0)
  {
    v16 = 0;
    v13 = 0;
    v14 = 1;
    goto LABEL_17;
  }
  if ((a4 & 0x20) != 0 && (v17 & 0x40000) != 0
    || (a4 & 0x4000) != 0 && (v17 & 0x80000) != 0
    || (a4 & 0x2000) != 0 && (v17 & 0x100000) != 0
    || (a4 & 0x40) != 0 && (v17 & 0x400000000) != 0
    || (a4 & 0x200) != 0 && (*(_WORD *)(a5 + 16) & 0x4000) != 0
    || (a4 & 0x80) != 0 && (v17 & 0x40) == 0
    || (a4 & 0x400) != 0 && (v17 & 2) != 0
    || (a4 & 0x800) != 0 && (v17 & 0x800) != 0)
  {
    goto LABEL_16;
  }
  v14 = 0;
  v16 = (v17 & 0x40) == 0 || (a4 & 4) == 0;
  v13 = !v16;
LABEL_17:
  v18 = v16 | (a4 >> 12) & ((*(_BYTE *)a5 & 4) >> 2);
  if ((v18 & 1) == 0)
  {
    sub_216B5E150(a6, a1, a2);
    if (v13)
      v19 = 6;
    else
      v19 = a3;
    v20 = sub_216B5E1EC(a6, a1, a2, v19);
    sub_216B5E218(v20, v14);
    sub_216B5E248(v20, v13);
  }
  return v18 ^ 1u;
}

unsigned int *sub_216B5D8B4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  unsigned int *v4;

  v4 = sub_216B5E1EC(a4, a1, a2, a3);
  return sub_216B5E278(v4, 1);
}

uint64_t sub_216B5D8E0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 66) & 3;
}

unsigned int *sub_216B5D8EC(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  unsigned int *v5;

  v5 = (unsigned int *)sub_216B4AAC4(a4, a1, a2);
  return sub_216B5E2A8(v5, a3);
}

uint64_t sub_216B5D91C(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v4;
  unsigned __int16 *v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  int v13;
  int v14;
  _BOOL4 v16;
  int v17;
  int v18;
  _BOOL4 v20;

  v2 = sub_216B4AA80(a1);
  if (v2 < 2)
    return 0;
  v4 = v2;
  v5 = (unsigned __int16 *)sub_216B4AA68(a1);
  result = 0;
  v6 = (*(_BYTE *)v5 + *((_BYTE *)v5 + 2) + 30) & 0x1F | (32 * v4);
  if (v6 > 206)
  {
    if (v6 <= 275)
    {
      switch(v6)
      {
        case 207:
          v7 = (*(_DWORD *)v5 ^ 0x67617270 | v5[2] ^ 0x616D) == 0;
          v8 = 14;
          goto LABEL_71;
        case 208:
        case 209:
        case 211:
        case 212:
        case 214:
          return result;
        case 210:
          v7 = (*(_DWORD *)v5 ^ 0x65737361 | v5[2] ^ 0x7472) == 0;
          v8 = 20;
          goto LABEL_71;
        case 213:
          v7 = (*(_DWORD *)v5 ^ 0x646E6669 | v5[2] ^ 0x6665) == 0;
          v8 = 3;
          goto LABEL_71;
        case 215:
          v7 = (*(_DWORD *)v5 ^ 0x6F706D69 | v5[2] ^ 0x7472) == 0;
          v8 = 15;
          goto LABEL_71;
        default:
          switch(v6)
          {
            case 230:
              v7 = (*(_DWORD *)v5 ^ 0x73726576 | *(_DWORD *)((char *)v5 + 3) ^ 0x6E6F6973) == 0;
              v8 = 24;
              goto LABEL_71;
            case 231:
              v7 = (*(_DWORD *)v5 ^ 0x6E726177 | *(_DWORD *)((char *)v5 + 3) ^ 0x676E696E) == 0;
              v8 = 17;
              goto LABEL_71;
            case 232:
              v7 = (*(_DWORD *)v5 ^ 0x69666564 | *(_DWORD *)((char *)v5 + 3) ^ 0x64656E69) == 0;
              v8 = 7;
              goto LABEL_71;
            case 234:
              v13 = *(_DWORD *)v5;
              v14 = *(_DWORD *)((char *)v5 + 3);
              v16 = v13 == 1818455657 && v14 == 1701082476;
              result = (8 * v16);
              break;
            default:
              return result;
          }
          break;
      }
      return result;
    }
    if (v6 > 460)
    {
      switch(v6)
      {
        case 461:
          v7 = (*(_QWORD *)v5 ^ 0x63696C6275705F5FLL | *(_QWORD *)(v5 + 3) ^ 0x6F7263616D5F6369) == 0;
          v8 = 22;
          break;
        case 493:
          v7 = (*(_QWORD *)v5 ^ 0x7461766972705F5FLL | *(_QWORD *)((char *)v5 + 7) ^ 0x6F7263616D5F6574) == 0;
          v8 = 23;
          break;
        case 518:
          v7 = (*(_QWORD *)v5 ^ 0x64756C636E695F5FLL | *((_QWORD *)v5 + 1) ^ 0x736F7263616D5F65) == 0;
          v8 = 9;
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(v6)
      {
        case 276:
          v7 = *(_QWORD *)v5 == 0x7472657373616E75;
          v8 = 21;
          break;
        case 311:
          v7 = (*(_QWORD *)v5 ^ 0x6F69736E65747865 | *((unsigned __int8 *)v5 + 8) ^ 0x6ELL) == 0;
          v8 = 25;
          break;
        case 394:
          v9 = *(_QWORD *)v5;
          v10 = *((_DWORD *)v5 + 2);
          v12 = v9 == 0x5F6564756C636E69 && v10 == 1954047342;
          return (16 * v12);
        default:
          return result;
      }
    }
LABEL_71:
    if (v7)
      return v8;
    else
      return 0;
  }
  if (v6 > 166)
  {
    if (v6 > 180)
    {
      switch(v6)
      {
        case 181:
          v7 = (*(_DWORD *)v5 ^ 0x6F727265 | *((unsigned __int8 *)v5 + 4) ^ 0x72) == 0;
          v8 = 13;
          break;
        case 183:
          v7 = (*(_DWORD *)v5 ^ 0x65646E75 | *((unsigned __int8 *)v5 + 4) ^ 0x66) == 0;
          v8 = 11;
          break;
        case 200:
          v7 = (*(_DWORD *)v5 ^ 0x69666564 | v5[2] ^ 0x656E) == 0;
          v8 = 10;
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(v6)
      {
        case 167:
          v7 = (*(_DWORD *)v5 ^ 0x69646E65 | *((unsigned __int8 *)v5 + 4) ^ 0x66) == 0;
          v8 = 6;
          break;
        case 171:
          v17 = *(_DWORD *)v5;
          v18 = *((unsigned __int8 *)v5 + 4);
          v20 = v17 == 1701078633 && v18 == 102;
          return (2 * v20);
        case 172:
          v7 = (*(_DWORD *)v5 ^ 0x6E656469 | *((unsigned __int8 *)v5 + 4) ^ 0x74) == 0;
          v8 = 18;
          break;
        default:
          return result;
      }
    }
    goto LABEL_71;
  }
  if (v6 > 147)
  {
    switch(v6)
    {
      case 148:
        v7 = *(_DWORD *)v5 == 1935893363;
        v8 = 19;
        break;
      case 150:
        v7 = *(_DWORD *)v5 == 1702063205;
        v8 = 5;
        break;
      case 152:
        v7 = *(_DWORD *)v5 == 1701734764;
        v8 = 12;
        break;
      default:
        return result;
    }
    goto LABEL_71;
  }
  if (v6 == 71)
    return *v5 == 26217;
  if (v6 == 140)
    return 4 * (*(_DWORD *)v5 == 1718185061);
  return result;
}

uint64_t sub_216B5DEB4(uint64_t a1)
{
  uint64_t v2;

  sub_216B3DDBC(&v2, *(_QWORD *)a1, *(_DWORD *)(a1 + 8) == 0);
  return v2;
}

uint64_t sub_216B5DEE8(uint64_t a1)
{
  uint64_t v2;

  sub_216B3DDBC(&v2, *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8), 1);
  return v2;
}

uint64_t sub_216B5DF1C(_DWORD *a1)
{
  return (*a1 - 48);
}

uint64_t sub_216B5DF28(const void **a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  LODWORD(v3) = a3;
  result = sub_216B26264((uint64_t)a1, a3);
  if ((_DWORD)v3)
  {
    v3 = v3;
    do
    {
      v7 = *a2++;
      result = sub_216B2613C(a1, v7);
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_216B5DF78(_QWORD *a1)
{
  _OWORD *v2;

  v2 = (_OWORD *)sub_216B1D1D4(160);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  *a1 = sub_216B5DFC0();
  return a1;
}

_QWORD *sub_216B5DFC8(_QWORD *a1)
{
  void *v2;

  v2 = (void *)sub_216B5DFF4(*a1);
  j__free(v2);
  return a1;
}

_QWORD *sub_216B5DFFC(_QWORD *a1)
{
  _QWORD *result;

  result = sub_216B5E01C(a1);
  *result = &off_24D600200;
  return result;
}

_QWORD *sub_216B5E01C(_QWORD *result)
{
  *result = off_24D6001A8;
  return result;
}

uint64_t sub_216B5E034()
{
  uint64_t v1;

  sub_216B26D14(&v1);
  return v1;
}

uint64_t sub_216B5E058(unsigned int *a1)
{
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t result;
  int v7;

  v2 = sub_216B5E0FC((uint64_t)a1);
  v3 = sub_216B5E108((uint64_t)a1);
  v4 = sub_216B5E114((uint64_t)a1);
  v5 = sub_216B5E120((uint64_t)a1);
  result = sub_216B5E12C((uint64_t)a1);
  v7 = 0x4000000;
  if ((v2 & 1) == 0 && (v3 & 1) == 0 && (v4 & 1) == 0 && (v5 & 1) == 0 && (result & 1) == 0)
  {
    result = sub_216B5E138((uint64_t)a1);
    if ((result & 1) == 0)
    {
      result = sub_216B5E144(a1);
      if ((_DWORD)result)
        v7 = 0x4000000;
      else
        v7 = 0;
    }
  }
  *a1 = *a1 & 0xFBFFFFFF | v7;
  return result;
}

uint64_t sub_216B5E0FC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 3) & 1;
}

uint64_t sub_216B5E108(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 2) >> 4) & 1;
}

uint64_t sub_216B5E114(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 3) >> 1) & 1;
}

uint64_t sub_216B5E120(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 2) >> 6) & 1;
}

uint64_t sub_216B5E12C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2) >> 7;
}

uint64_t sub_216B5E138(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 3) >> 6) & 1;
}

uint64_t sub_216B5E144(_DWORD *a1)
{
  return *a1 >> 31;
}

unsigned int *sub_216B5E150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  const void *v9[2];
  unsigned int *v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v4 = sub_216B4ABC4(a1, a2, a3);
  result = *(unsigned int **)sub_216B3DBD0(v4);
  if (!result)
  {
    v6 = sub_216B4ABD8(a1);
    v7 = sub_216B4ABDC(v6, 1);
    v10 = (unsigned int *)sub_216B52994(v7);
    sub_216B4ABCC(v4, &v10);
    *((_QWORD *)v10 + 2) = v4;
    sub_216B1E678((int)v9, "import");
    v8 = sub_216B1E644((uint64_t)v11, v9[0], (size_t)v9[1]);
    result = v10;
    if (v8)
    {
      sub_216B53B24(v10, 1);
      return v10;
    }
  }
  return result;
}

unsigned int *sub_216B5E1EC(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  unsigned int *result;

  result = (unsigned int *)sub_216B4AAC4();
  *result = *result & 0xFFFFFE00 | a4 & 0x1FF;
  return result;
}

unsigned int *sub_216B5E218(unsigned int *a1, int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
    v2 = 0x400000;
  else
    v2 = 0;
  v3 = *a1 & 0xFFBFFFFF | v2;
  *a1 = v3;
  if (!a2)
    return (unsigned int *)sub_216B5E058(a1);
  *a1 = v3 | 0x4000000;
  return a1;
}

unsigned int *sub_216B5E248(unsigned int *a1, int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
    v2 = 0x800000;
  else
    v2 = 0;
  v3 = *a1 & 0xFF7FFFFF | v2;
  *a1 = v3;
  if (!a2)
    return (unsigned int *)sub_216B5E058(a1);
  *a1 = v3 | 0x4000000;
  return a1;
}

unsigned int *sub_216B5E278(unsigned int *a1, int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
    v2 = 0x2000000;
  else
    v2 = 0;
  v3 = *a1 & 0xFDFFFFFF | v2;
  *a1 = v3;
  if (!a2)
    return (unsigned int *)sub_216B5E058(a1);
  *a1 = v3 | 0x4000000;
  return a1;
}

unsigned int *sub_216B5E2A8(unsigned int *result, __int16 a2)
{
  *result = *result & 0xFFF001FF | ((a2 & 0x7FF) << 9);
  return result;
}

uint64_t sub_216B5E2B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B5E2E8(a1, 6);
  sub_216B39B60((_QWORD *)(v2 + 24));
  return a1;
}

_QWORD *sub_216B5E2EC(uint64_t a1, char a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B263E8(a1, a2);
  *result = &unk_24D600228;
  return result;
}

void sub_216B5E314()
{
  void *v0;

  v0 = (void *)sub_216B5E310();
  j__free(v0);
}

uint64_t sub_216B5E328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 8;
  else
    v3 = 0;
  return sub_216B5E370(v3, a3);
}

BOOL sub_216B5E33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2)
    v5 = a2 - 8;
  else
    v5 = 0;
  return sub_216B5E3B8(v5, a3, a4, a5);
}

uint64_t sub_216B5E358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 8;
  else
    v3 = 0;
  return sub_216B5E3E8(v3, a3);
}

uint64_t sub_216B5E374(_DWORD *a1, const void **a2)
{
  uint64_t *v4;
  int v5;

  v4 = (uint64_t *)sub_216B28BEC((uint64_t)a1);
  v5 = sub_216B5DF1C(a1);
  return sub_216B5DF28(a2, v4, v5);
}

BOOL sub_216B5E3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_216B5E370(a1, a4);
  return sub_216B26318(a4, a2);
}

uint64_t sub_216B5E3E8(uint64_t a1, uint64_t a2)
{
  sub_216B5E370(a1, a2);
  return sub_216B26294(a2);
}

uint64_t sub_216B5E40C(uint64_t a1)
{
  sub_216B3A034(a1 + 24);
  return sub_216B5E310(a1);
}

uint64_t sub_216B5E434(uint64_t a1)
{
  __int16 v2;
  unint64_t v3;

  sub_216B5E57C((_DWORD *)(a1 + 68));
  sub_216B25034(a1 + 88);
  sub_216B25034(a1 + 112);
  sub_216B25034(a1 + 136);
  sub_216B25034(a1 + 160);
  sub_216B2C030((_QWORD *)(a1 + 184));
  sub_216B5E580((_QWORD *)(a1 + 208));
  v2 = *(_WORD *)(a1 + 16) & 0xE000 | 0xC00;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xF000000000000000 | 0x144430203A04000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = v2;
  sub_216B5E584(a1, 0);
  *(_WORD *)(a1 + 16) &= 0x9FFFu;
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a1 + 20) & 0xFE00000000000000 | 0x802800000000;
  sub_216B5E594(a1, 0);
  *(_QWORD *)(a1 + 20) &= 0xF1FFFFFFFFFFFFFFLL;
  sub_216B5E5BC(a1, 0);
  sub_216B5E5E4(a1, 2);
  sub_216B5E60C(a1, 2);
  sub_216B5E634(a1, 0);
  sub_216B5E65C(a1, 0);
  v3 = *(_QWORD *)(a1 + 52) & 0xFFFFFFF800000000 | 0x100000000;
  *(_QWORD *)(a1 + 44) = 256;
  *(_QWORD *)(a1 + 28) = 0x10000000100;
  *(_QWORD *)(a1 + 36) = 0x10000000000200;
  *(_QWORD *)(a1 + 52) = v3;
  sub_216B5E680(a1, 0);
  *(_QWORD *)(a1 + 52) &= 0xFFFFFFE7FFFFFFFFLL;
  *(_DWORD *)(a1 + 60) = 0;
  return a1;
}

_WORD *sub_216B5E584(uint64_t a1, char a2)
{
  _WORD *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 64);
  result = (_WORD *)(a1 + 64);
  *result = v3 & 0xFFFC | a2 & 3;
  return result;
}

uint64_t sub_216B5E594(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  v4 = v3 & 0xFFFFFFF3 | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xFFF3 | (4 * (a2 & 3));
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216B5E5BC(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  v4 = v3 & 0xFFFFFFCF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xFFCF | (16 * (a2 & 3));
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216B5E5E4(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  v4 = v3 & 0xFFFFFE3F | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xFE3F | ((a2 & 7) << 6);
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216B5E60C(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  v4 = v3 & 0xFFFFF1FF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xF1FF | ((a2 & 7) << 9);
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216B5E634(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  v4 = v3 & 0xFFFFCFFF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0xCFFF | ((a2 & 3) << 12);
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216B5E65C(uint64_t a1, __int16 a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  v4 = v3 & 0xFFFF3FFF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v3 & 0x3FFF | (a2 << 14);
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_216B5E680(uint64_t a1, char a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int16 *)(a1 + 64);
  result = a1 + 64;
  v4 = (v3 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xFFFCFFFF | ((a2 & 3) << 16);
  *(_WORD *)result = v3;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

_DWORD *sub_216B5E6AC(_DWORD *a1)
{
  *a1 = 0;
  sub_216B5E6D4(a1 + 1);
  return a1;
}

int8x8_t sub_216B5E6D8(int8x8_t *a1)
{
  int8x8_t result;
  __int8 v2;

  result = vand_s8(*a1, (int8x8_t)0x8000000080000000);
  *a1 = result;
  v2 = a1[1].i8[4];
  a1[1].i32[0] = 0;
  a1[1].i8[4] = v2 & 0xFC;
  return result;
}

_QWORD *sub_216B5E6FC(_QWORD *a1)
{
  _QWORD *result;

  result = sub_216B2C030(a1);
  *((_BYTE *)result + 24) = 0;
  return result;
}

uint64_t sub_216B5E714(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  __int16 v12;
  __int16 v13;
  char v14;
  __int16 v15;
  __int16 v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v21 = a3;
  sub_216B24898(&v20, a1);
  *(_DWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  sub_216B5E8D8(a1 + 40);
  sub_216B2C030((_QWORD *)(a1 + 48));
  sub_216B5E8DC(a1 + 72);
  *(_QWORD *)(a1 + 104) = 0;
  sub_216B5E8E0(a1 + 112);
  sub_216B2C030((_QWORD *)(a1 + 200));
  sub_216B5E8E4(a1 + 224, 0);
  sub_216B4C3E4(a1 + 248);
  sub_216B4C3E4(a1 + 288);
  sub_216B4C3E4(a1 + 328);
  sub_216B5E8E8(a1 + 368);
  sub_216B5E8EC(a1 + 440);
  if (a7)
    v12 = 16;
  else
    v12 = 0;
  if (a6)
    v13 = 10;
  else
    v13 = 2;
  *(_WORD *)(a1 + 528) = v13 | v12 | *(_WORD *)(a1 + 528) & 0xF000;
  *(_DWORD *)(a1 + 532) = 0;
  sub_216B4AED0((_DWORD *)(a1 + 536));
  sub_216B4AED0((_DWORD *)(a1 + 540));
  sub_216B4C3E4(a1 + 544);
  sub_216B4C3E4(a1 + 584);
  sub_216B5E8F0(a1 + 624);
  sub_216B4C3E4(a1 + 856);
  sub_216B5E8F4(a1 + 896);
  sub_216B5E8EC(a1 + 1096);
  sub_216B2C030((_QWORD *)(a1 + 1184));
  sub_216B2C030((_QWORD *)(a1 + 1208));
  sub_216B2C030((_QWORD *)(a1 + 1232));
  if (a5)
  {
    v14 = sub_216B5E8F8(a5);
    v15 = *(_WORD *)(a1 + 528);
    if ((v14 & 1) == 0)
    {
      v15 &= ~2u;
      *(_WORD *)(a1 + 528) = v15;
    }
    v16 = *(_WORD *)(a5 + 528);
    if ((v16 & 0x20) != 0)
    {
      v15 |= 0x20u;
      *(_WORD *)(a1 + 528) = v15;
      v16 = *(_WORD *)(a5 + 528);
    }
    if ((v16 & 0x40) != 0)
    {
      v15 |= 0x40u;
      *(_WORD *)(a1 + 528) = v15;
      v16 = *(_WORD *)(a5 + 528);
    }
    *(_WORD *)(a1 + 528) = v15 & 0xFFFE | v16 & 1;
    v17 = sub_216B2E220((_QWORD *)(a5 + 48));
    *(_DWORD *)sub_216B5E904(a5 + 72, v20, v21) = v17;
    v19 = a1;
    sub_216B5E918((uint64_t *)(a5 + 48), (uint64_t)&v19);
  }
  return a1;
}

uint64_t sub_216B5E8F8(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 528) >> 1) & 1;
}

uint64_t sub_216B5E904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_216B5FD4C(a1, a2, a3);
  return sub_216B5F25C(v3);
}

uint64_t sub_216B5E918(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216B5FFE4(a1, a2);
  }
  else
  {
    sub_216B5FF74((uint64_t)a1, a2);
    result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216B5E970(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  return sub_216B5E714(a1, a2, a3, a4, a5, a6, a7);
}

void sub_216B5E978(std::string *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = sub_216B5EA90((uint64_t)a1);
  v3 = sub_216B5EA98((uint64_t)a1);
  while (sub_216B2AB28((uint64_t)&v4, (uint64_t)&v3))
  {
    if (*(_QWORD *)sub_216B1E600((uint64_t)&v4))
    {
      v2 = (void *)sub_216B5EAA0();
      j__free(v2);
    }
    sub_216B3D138(&v4);
  }
  sub_216B4F3E0(&a1[51].__r_.__value_.__r.__words[1]);
  sub_216B5EAA4(&a1[50].__r_.__value_.__r.__words[1]);
  sub_216B2C034(&a1[49].__r_.__value_.__r.__words[1]);
  sub_216B5EAA8(&a1[45].__r_.__value_.__r.__words[2]);
  sub_216B5EAAC(&a1[37].__r_.__value_.__r.__words[1]);
  sub_216B1FF6C(&a1[35].__r_.__value_.__r.__words[2]);
  sub_216B5EAB0(&a1[26]);
  sub_216B1FF6C(&a1[24].__r_.__value_.__r.__words[1]);
  sub_216B1FF6C(&a1[22].__r_.__value_.__r.__words[2]);
  sub_216B5EAA8(&a1[18].__r_.__value_.__r.__words[1]);
  sub_216B5EAB4(&a1[15].__r_.__value_.__r.__words[1]);
  sub_216B1FF6C(&a1[13].__r_.__value_.__r.__words[2]);
  sub_216B1FF6C(&a1[12]);
  sub_216B1FF6C(&a1[10].__r_.__value_.__r.__words[1]);
  sub_216B5EAB8(&a1[9].__r_.__value_.__r.__words[1]);
  sub_216B2C034(&a1[8].__r_.__value_.__r.__words[1]);
  sub_216B5EABC(&a1[4].__r_.__value_.__r.__words[2]);
  sub_216B5EAC0(&a1[3]);
  sub_216B3D560(&a1[2]);
  std::string::~string(a1);
}

uint64_t sub_216B5EA90(uint64_t a1)
{
  return sub_216B2C910((uint64_t *)(a1 + 48));
}

uint64_t sub_216B5EA98(uint64_t a1)
{
  return sub_216B2C000(a1 + 48);
}

uint64_t sub_216B5EAC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return (v2 - sub_216B1E600(a1)) >> 5;
}

BOOL sub_216B5EAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  char v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  char v28;
  _QWORD v29[3];
  _QWORD v30[2];

  v30[0] = a1;
  v30[1] = a2;
  sub_216B32854(v29, a1, a2);
  LOBYTE(v20) = (*(_QWORD *)a3 & 0x400000000) != 0;
  v8 = sub_216B32858((uint64_t)v29, "altivec", (uint64_t)&v20);
  v28 = *(_BYTE *)(a3 + 6) & 1;
  v9 = sub_216B32A7C(v8, (uint64_t)"blocks", (uint64_t)&v28);
  v27 = (*(_BYTE *)a3 & 0x40) != 0;
  v10 = sub_216B345E4(v9, (uint64_t)"cplusplus", (uint64_t)&v27);
  v26 = (*(_DWORD *)a3 & 0x80) != 0;
  v11 = sub_216B34334(v10, "cplusplus11", (uint64_t)&v26);
  v25 = (*(_DWORD *)a3 & 0x400) != 0;
  v12 = sub_216B32A18(v11, "objc", (uint64_t)&v25);
  v24 = (*(_QWORD *)(a3 + 20) & 0x20000000000000) != 0;
  v13 = sub_216B32AEC(v12, "objc_arc", (uint64_t)&v24);
  v23 = (*(_WORD *)(a3 + 16) & 0x4000) != 0;
  v14 = sub_216B32A7C(v13, (uint64_t)"opencl", (uint64_t)&v23);
  v22 = sub_216B5F6D0(a4);
  v15 = sub_216B329A8(v14, (unsigned __int16 *)"tls", (uint64_t)&v22);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 192))(a4, a1, a2);
  if ((sub_216B4AA54(v15, &v21) & 1) != 0)
    return 1;
  v17 = (uint64_t *)(a3 + 184);
  v18 = sub_216B2C910(v17);
  v19 = sub_216B2C000((uint64_t)v17);
  v29[0] = sub_216B5F6D8(v18, v19, (uint64_t)v30);
  v20 = sub_216B2C000((uint64_t)v17);
  return sub_216B2AB28((uint64_t)v29, (uint64_t)&v20);
}

BOOL sub_216B5ECB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  do
  {
    v2 = a1;
    if (a1 == a2)
      break;
    a1 = *(_QWORD *)(a1 + 32);
  }
  while (a1);
  return v2 == a2;
}

uint64_t sub_216B5ECD4(uint64_t a1)
{
  uint64_t v1;

  do
  {
    v1 = a1;
    a1 = *(_QWORD *)(a1 + 32);
  }
  while (a1);
  return v1;
}

uint64_t sub_216B5ECE8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v9[2];
  __int128 v10;
  _BYTE v11[56];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_216B5EDE4(v11);
  for (; a1; a1 = *(_QWORD *)(a1 + 32))
  {
    sub_216B26CA0(&v10, a1);
    sub_216B267B0((uint64_t)v11, &v10);
  }
  sub_216B25034(a2);
  *(_QWORD *)&v10 = sub_216B5EDE8((uint64_t)v11);
  *((_QWORD *)&v10 + 1) = v4;
  v9[0] = sub_216B5EE14((uint64_t)v11);
  v9[1] = v5;
  while (sub_216B2C76C((uint64_t)&v10, (uint64_t)v9))
  {
    if (!sub_216B25DD0((uint64_t)a2, v6))
      sub_216B26B1C(a2, 46);
    v7 = (uint64_t *)sub_216B2CFB0((uint64_t)&v10);
    sub_216B26B40(a2, *v7, v7[1]);
    sub_216B2EB8C((uint64_t)&v10);
  }
  return sub_216B1FF6C(v11);
}

uint64_t sub_216B5EDE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = sub_216B1E67C(a1);
  sub_216B2C730(&v3, v1);
  return v3;
}

uint64_t sub_216B5EE14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = sub_216B1E600(a1);
  sub_216B2C730(&v3, v1);
  return v3;
}

uint64_t sub_216B5EE40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B5EE74(a1);
  if (v2)
    return sub_216B5EE7C(v2);
  else
    return sub_216B5EE84((unsigned __int8 *)(a1 + 40));
}

uint64_t sub_216B5EE74(uint64_t a1)
{
  return sub_216B5F808((unsigned __int8 *)(a1 + 40));
}

uint64_t sub_216B5EE7C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_216B5EE84(unsigned __int8 *a1)
{
  uint64_t v2;

  if (sub_216B601E8(a1))
    return sub_216B5F854(a1, v2);
  else
    return 0;
}

uint64_t sub_216B5EEBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = sub_216B5F890(a1, *a2);
  if ((_DWORD)v4)
    sub_216B268AC(a1 + 48, a2);
  return v4;
}

uint64_t sub_216B5EF04(uint64_t *a1)
{
  unint64_t v2;

  v2 = sub_216B2BFE4(a1);
  sub_216B2C138(a1);
  return nullsub_1(a1, v2);
}

uint64_t sub_216B5EF38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t result;
  std::string v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  v12 = a4;
  v9 = (_QWORD *)(a1 + 440);
  sub_216B5F020((uint64_t)&v11, &v13, &v12);
  sub_216B5EFC4(v9, (uint64_t)&v11);
  j_std::string::~string(&v11);
  result = sub_216B5EAF8(v13, v14, a5, a6);
  if (v12 != (_DWORD)result)
    return sub_216B5F024(a1, 1);
  return result;
}

uint64_t sub_216B5EFC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B60238(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B60324(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 32;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216B5F024(uint64_t result, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  v9[5] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(result + 528) & 2) != 0)
  {
    v3 = result;
    sub_216B4C3E4(v9);
    v8 = v3;
    sub_216B268AC((uint64_t)v9, &v8);
    while (!sub_216B29084(v9))
    {
      v4 = *(_QWORD *)sub_216B5F148((uint64_t)v9);
      sub_216B5F160((uint64_t)v9);
      v5 = *(_WORD *)(v4 + 528);
      if ((v5 & 2) != 0)
      {
        *(_WORD *)(v4 + 528) = (v5 | a2) & 0xFFFD;
        v8 = sub_216B5EA90(v4);
        v7 = sub_216B5EA98(v4);
        while (sub_216B2AB28((uint64_t)&v8, (uint64_t)&v7))
        {
          if ((*(_WORD *)(*(_QWORD *)sub_216B1E600((uint64_t)&v8) + 528) & 2) != 0)
          {
            v6 = (_QWORD *)sub_216B1E600((uint64_t)&v8);
            sub_216B268AC((uint64_t)v9, v6);
          }
          sub_216B3D138(&v8);
        }
      }
    }
    return sub_216B1FF6C(v9);
  }
  return result;
}

uint64_t sub_216B5F148(uint64_t a1)
{
  return sub_216B1E67C(a1) - 8;
}

uint64_t sub_216B5F160(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1) - 8;
  return sub_216B203A4(a1, v2);
}

uint64_t sub_216B5F188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + 72;
  v9 = sub_216B5F200((_QWORD *)(a1 + 72), a2, a3);
  v8 = sub_216B5DEE8(v4);
  if (sub_216B37620(&v9, &v8))
    return 0;
  v6 = sub_216B3C9C8((uint64_t)&v9);
  v7 = (unsigned int *)sub_216B5F25C(v6);
  return *(_QWORD *)sub_216B212F0((_QWORD *)(a1 + 48), *v7);
}

uint64_t sub_216B5F200(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v6;

  v4 = sub_216B31498((uint64_t)a1, a2, a3);
  if (v4 == -1)
    return sub_216B5DEE8((uint64_t)a1);
  sub_216B3DDBC(&v6, *a1 + 8 * v4, 1);
  return v6;
}

uint64_t sub_216B5F25C(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_216B5F264(_QWORD *a1, uint64_t a2)
{
  return nullsub_1(*a1 & 0xFFFFFFFFFFFFFFFCLL, a2);
}

uint64_t sub_216B5F270(unsigned __int8 *a1)
{
  return (*a1 >> 1) & 1;
}

uint64_t sub_216B5F27C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return 0x4EC4EC4EC4EC4EC5 * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B5F2C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return 0x2E8BA2E8BA2E8BA3 * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B5F30C(_QWORD *a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
}

_QWORD *sub_216B5F334(_QWORD *a1)
{
  std::string *v2;
  std::string *v3;
  void *v4;

  v2 = (std::string *)sub_216B1E600((uint64_t)a1);
  v3 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B5F388(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

void sub_216B5F388(std::string *a1, std::string *a2)
{
  std::string *v2;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v2 = (std::string *)((char *)v2 - 32);
      j_std::string::~string(v2);
    }
    while (v2 != a1);
  }
}

_QWORD *sub_216B5F3C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  sub_216B5F41C(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216B5F41C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 88;
      result = sub_216B5EAA8(v2);
    }
    while (v2 != v3);
  }
  return result;
}

_QWORD *sub_216B5F45C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  sub_216B5F4B0(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216B5F4B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 104;
      result = sub_216B5F4EC(v2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_216B5F4F0(uint64_t a1)
{
  sub_216B5EAA8(a1 + 8);
  return a1;
}

_QWORD *sub_216B5F51C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  sub_216B5F570(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216B5F570(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 40;
      result = sub_216B4F49C(v2);
    }
    while (v2 != v3);
  }
  return result;
}

void **sub_216B5F5B4(void **a1)
{
  sub_216B5F5E0((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B5F5E0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B50ED0();
    v4 = sub_216B512E8();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B5F664(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B2A5FC(*v5, v4);
        v5 += 2;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t sub_216B5F664(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 16 * sub_216B4CBC0(a1);
}

uint64_t sub_216B5F698(uint64_t a1)
{
  sub_216B1FF6C(a1 + 48);
  return sub_216B5F6C0(a1);
}

uint64_t sub_216B5F6D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_216B5F6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v6 = sub_216B2F028(a1);
  v7 = sub_216B2F028(a2);
  v8 = sub_216B5F740(v6, v7, a3, (uint64_t)&v10);
  return sub_216B5F73C(a1, v8);
}

uint64_t sub_216B5F740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10[2];

  v4 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v8 = sub_216B3557C(a4, v4);
      sub_216B26CA0(v10, v8);
      if (sub_216B274F0(v10[0], v10[1], *(const void **)a3, *(_QWORD *)(a3 + 8)))
        break;
      v4 += 24;
      if (v4 == a2)
        return a2;
    }
  }
  return v4;
}

uint64_t sub_216B5F7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a1;
  v3 = sub_216B2F054(&v5);
  return sub_216B4B4E0(&v5, 0xAAAAAAAAAAAAAAABLL * ((a2 - v3) >> 3));
}

uint64_t sub_216B5F808(unsigned __int8 *a1)
{
  uint64_t v2;

  if (sub_216B5F840(a1))
    return sub_216B5F854(a1, v2);
  else
    return 0;
}

uint64_t sub_216B5F840(unsigned __int8 *a1)
{
  return sub_216B5F270(a1);
}

uint64_t sub_216B5F854(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B5F264(a1, a2);
  return j_nullsub_1(v2, v3);
}

uint64_t sub_216B5F868(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 32 * a2;
}

uint64_t sub_216B5F890(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(a2, a2);
  return sub_216B2CA24(a1, v3);
}

uint64_t sub_216B5F8BC(uint64_t a1)
{
  return sub_216B3D760(a1, 8);
}

uint64_t sub_216B5F8C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B5F8F4();
  sub_216B4C3E4(v2 + 48);
  return a1;
}

uint64_t sub_216B5F8FC(uint64_t a1)
{
  return sub_216B5F908(a1, a1 + 32, 2);
}

uint64_t sub_216B5F90C(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  sub_216B5F938(a1);
  return a1;
}

void *sub_216B5F938(uint64_t a1)
{
  unsigned int v2;
  void *result;

  if (sub_216B2CB2C((_QWORD *)a1))
  {
    v2 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 16);
    if (v2 > 4 * *(_DWORD *)(a1 + 20) && v2 >= 0x21)
      return sub_216B2C988(a1);
  }
  result = memset(*(void **)(a1 + 8), 255, 8 * v2);
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_216B5F9A4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B5F9D4(v4, v2);
  return a1;
}

uint64_t sub_216B5F9D4(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B5FA0C(a1, a2);
  if ((_DWORD)result)
    return sub_216B5FA54(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL sub_216B5FA0C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
    v4 = sub_216B1D1D4(16 * a2);
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a2 != 0;
}

uint64_t sub_216B5FA54(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B50ED0();
  v3 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B5F664(a1);
  while (v3 != (_QWORD *)result)
  {
    *v3 = v2;
    v3 += 2;
  }
  return result;
}

uint64_t sub_216B5FAB8(uint64_t a1)
{
  return sub_216B2F784(a1, 1u);
}

uint64_t sub_216B5FAC0(uint64_t a1)
{
  return sub_216B5FAC8(a1, 2u);
}

uint64_t sub_216B5FAC8(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 32 * a2);
}

uint64_t sub_216B5FAD0(uint64_t a1)
{
  return sub_216B5FAD8(a1, 2u);
}

uint64_t sub_216B5FAD8(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 104 * a2);
}

uint64_t sub_216B5FAE4(uint64_t a1)
{
  return sub_216B5FAEC(a1, 2u);
}

uint64_t sub_216B5FAEC(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 88 * a2);
}

uint64_t sub_216B5FAF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B5FB7C(v5, a1 + 24);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_216B5FB7C(unsigned int *a1, int a2)
{
  sub_216B1E4E0(a1);
  sub_216B3A164(a2, a1);
}

uint64_t sub_216B5FBAC(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B5FBE8(&v3);
  return a1;
}

uint64_t *sub_216B5FBE8(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B5FC4C(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B5FC58(v6, v8);
    return (uint64_t *)sub_216B5FC54(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B5FC4C(uint64_t *a1)
{
  return sub_216B5FC9C((uint64_t)a1, *a1);
}

uint64_t sub_216B5FC58(_QWORD *a1, uint64_t a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 4);
}

uint64_t sub_216B5FC9C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B5FD00(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 112;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B5FD04(uint64_t a1, uint64_t a2)
{
  return sub_216B5FD0C(a2);
}

uint64_t sub_216B5FD10(uint64_t a1)
{
  std::string::~string((std::string *)(a1 + 88));
  return sub_216B5EAA8(a1);
}

uint64_t sub_216B5FD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 112 * a3, 8);
}

uint64_t sub_216B5FD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B5FD54(a1, a2, a3, 0);
}

uint64_t sub_216B5FD54(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  _BYTE v7[24];
  _QWORD v8[2];
  int v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216B5FE94((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216B5FDA8(a1, (uint64_t)v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216B5FDA8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B5FEA4(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), (int)a1 + 24, *(unsigned int *)(a2 + 16));
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B5FE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B5FF5C(a3, a1, a2);
}

void *sub_216B5FEA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v12);
  sub_216B34088();
  v7 = sub_216B267A0(a3, (v6 + 9));
  v8 = sub_216B5FF34(v7, v6, a4);
  v9 = (void *)sub_216B3DBD0(v8);
  v10 = (const void *)sub_216B1E600((uint64_t)v12);
  memcpy(v9, v10, v6);
  *((_BYTE *)v9 + v6) = 0;
  return v7;
}

_DWORD *sub_216B5FF38(_DWORD *a1, int a2, int a3)
{
  _DWORD *result;

  result = sub_216B2A7D8(a1, a2);
  result[1] = a3;
  return result;
}

__n128 sub_216B5FF60(__n128 *a1, __n128 *a2, unsigned __int32 *a3)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = *a3;
  return result;
}

_QWORD *sub_216B5FF74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B60090(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216B2F730(v5, v7, a2);
  v10 += 8;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B5FFE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B2E220(a1);
  v6 = sub_216B3F830(a1, v5 + 1);
  v7 = sub_216B2E220(a1);
  sub_216B3F8A8(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216B2F730(v4, v9, a2);
  v13 += 8;
  sub_216B600B0(a1, v12);
  v10 = a1[1];
  sub_216B3F998(v12);
  return v10;
}

_QWORD *sub_216B60094(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 8 * a3;
  return result;
}

uint64_t sub_216B600B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216B6019C();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2E220(a1);
  return nullsub_1(a1, v10);
}

uint64_t sub_216B6019C()
{
  return sub_216B601B8();
}

uint64_t sub_216B601B8()
{
  _QWORD v1[3];

  sub_216B601DC(v1);
  return v1[2];
}

uint64_t sub_216B601E0(uint64_t a1)
{
  return sub_216B2A8C8(a1, 2u);
}

uint64_t sub_216B601E8(unsigned __int8 *a1)
{
  return sub_216B5F270(a1) ^ 1;
}

uint64_t sub_216B60200(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  sub_216B24898(a2, a1);
  *(_BYTE *)(a1 + 24) = *a3;
  return a1;
}

uint64_t sub_216B60238(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B60328((uint64_t)a1);
  v5 = sub_216B5EAC4((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(32 * v7, 0x101204042049022uLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B6035C(v9, v10, (uint64_t)v8);
  v11 = (std::string *)sub_216B1E600((uint64_t)a1);
  v12 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B5F388(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 32 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 32 * v7;
  return result;
}

uint64_t sub_216B60328(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return (v2 - sub_216B1E600(a1)) >> 5;
}

uint64_t sub_216B6035C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B60324(a3, v5);
      v5 += 32;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216B603AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B2B018(a1, a2);
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

BOOL sub_216B603D4(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t sub_216B603E4(_DWORD *a1, unsigned int a2)
{
  BOOL v3;
  uint64_t v4;
  unsigned int v6;

  v6 = a2;
  v3 = sub_216B4F6FC(&v6);
  v4 = v6;
  if (!v3)
    return sub_216B62CF8(a1, v6);
  return v4;
}

uint64_t sub_216B60430(uint64_t *a1)
{
  sub_216B408F0(a1);
  return a1[5];
}

uint64_t sub_216B60454(_DWORD *a1, int a2)
{
  unsigned int v3;
  int v5;

  v5 = a2;
  v3 = sub_216B6064C(&v5);
  if (sub_216B60658((uint64_t)a1, a1[134], v3))
    return a1[134];
  else
    return sub_216B628A0(a1, v3);
}

BOOL sub_216B604B0(uint64_t a1, int a2)
{
  return sub_216B64D80(*(_DWORD **)(a1 + 8), *(_DWORD *)a1, a2);
}

uint64_t sub_216B604C8(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v12;
  char v13;

  v13 = 0;
  v5 = (_DWORD *)sub_216B606F0(a1, a2, &v13);
  if (v13 || (v7 = (uint64_t)v5, (sub_216B6081C(v5) & 1) == 0))
  {
    if (a3)
      *a3 = 1;
    return sub_216B62098(a1, v6);
  }
  else
  {
    v8 = sub_216B3DBD0(v7);
    v9 = sub_216B60834(v8);
    v10 = *(_QWORD *)(a1 + 8);
    sub_216B4AED0(&v12);
    return sub_216B609C8(v9, v10, a1, v12, a3);
  }
}

uint64_t sub_216B60568(_DWORD *a1, int a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v12 = a2;
  v11 = sub_216B60454(a1, a2);
  v10 = 0;
  v3 = sub_216B606F0((uint64_t)a1, v11, &v10);
  if (v10)
  {
    sub_216B4AED0(&v8);
    v7 = 0;
    v9 = sub_216B3A19C((uint64_t)&v8, (uint64_t)&v7);
    sub_216B3A1C8(&v13, &v9);
    return v13;
  }
  else
  {
    v5 = (_DWORD *)v3;
    v6 = sub_216B6064C(&v12);
    LODWORD(v9) = v6 - sub_216B60718(v5);
    return sub_216B3A19C((uint64_t)&v11, (uint64_t)&v9);
  }
}

_QWORD *sub_216B60614(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B407DC(a1, 0);
  *result = off_24D5EFE50;
  result[5] = a2;
  return result;
}

uint64_t sub_216B6064C(_DWORD *a1)
{
  return *a1 & 0x7FFFFFFF;
}

BOOL sub_216B60658(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _DWORD *v6;
  unsigned int v8;
  _DWORD *v10;

  v6 = (_DWORD *)sub_216B606F0(a1, a2, 0);
  if (sub_216B60718(v6) > a3)
    return 0;
  if (a2 == -2)
    return 1;
  v8 = a2 + 1;
  if (v8 == sub_216B60724(a1 + 224))
  {
    return *(_DWORD *)(a1 + 496) > a3;
  }
  else
  {
    v10 = (_DWORD *)sub_216B60764(a1, v8, 0);
    return sub_216B60718(v10) > a3;
  }
}

uint64_t sub_216B606F0(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  if (a2 + 1 > 1)
    return sub_216B60764(a1, a2, a3);
  if (a3)
    *a3 = 1;
  return sub_216B60770(a1 + 224, 0);
}

uint64_t sub_216B60718(_DWORD *a1)
{
  return *a1 >> 1;
}

unint64_t sub_216B60724(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B1E67C(a1);
  return 0xAAAAAAAAAAAAAAABLL * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B60764(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  if ((a2 & 0x80000000) != 0)
    return sub_216B60798(a1, a2, a3);
  else
    return sub_216B607A4(a1, a2);
}

uint64_t sub_216B60770(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 24 * a2;
}

uint64_t sub_216B60798(uint64_t a1, int a2, _BYTE *a3)
{
  return sub_216B607AC(a1, -2 - a2, a3);
}

uint64_t sub_216B607A4(uint64_t a1, unsigned int a2)
{
  return sub_216B60770(a1 + 224, a2);
}

uint64_t sub_216B607AC(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = sub_216B3D134((_QWORD *)(a1 + 504), a2);
  v8[1] = v6;
  if (sub_216B32688((uint64_t)v8))
    return sub_216B60770(a1 + 440, a2);
  else
    return sub_216B61EEC(a1, a2, a3);
}

uint64_t sub_216B6081C(_DWORD *a1)
{
  return sub_216B60840(a1) ^ 1;
}

unint64_t sub_216B60834(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_216B60840(_DWORD *a1)
{
  return *a1 & 1;
}

uint64_t sub_216B6084C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (sub_216B6088C(a1))
  {
    v3 = sub_216B5F264((_QWORD *)(a1 + 8), v2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

BOOL sub_216B6088C(uint64_t a1)
{
  return (sub_216B60ED0((_DWORD *)(a1 + 8)) & 2) == 0;
}

uint64_t sub_216B608B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(a1 + 8);
  if (!sub_216B5F264((_QWORD *)(a1 + 8), a2))
    return sub_216B1E67C(*(_QWORD *)(a1 + 24));
  v5 = sub_216B5F264(v3, v4);
  return sub_216B281C0(v5);
}

unint64_t *sub_216B608F4(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (!a2 || (v6 = (unint64_t *)(a1 + 8), sub_216B5F264((_QWORD *)(a1 + 8), a2) != a2))
  {
    if (sub_216B6088C(a1))
    {
      v8 = sub_216B5F264((_QWORD *)(a1 + 8), v7);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v6 = (unint64_t *)(a1 + 8);
    sub_216B60994((uint64_t *)(a1 + 8), a2);
  }
  if (a3)
    v9 = 2;
  else
    v9 = 0;
  return sub_216B6097C(v6, v9);
}

unint64_t *sub_216B6097C(unint64_t *result, unsigned int a2)
{
  *result = *result & 0xFFFFFFFFFFFFFFFCLL | a2;
  return result;
}

uint64_t sub_216B60994(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = nullsub_1(a2, a2);
  *a1 = *a1 & 3 | result;
  return result;
}

uint64_t sub_216B609C8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  uint64_t *v10;
  uint64_t v11;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  const char *v65;
  const char *v66;
  char *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  uint64_t v72[3];
  _QWORD v73[2];
  _QWORD v74[2];
  uint64_t v75[2];
  uint64_t v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79[2];
  std::string v80;

  v10 = (uint64_t *)(a1 + 8);
  if (!sub_216B5F264((_QWORD *)(a1 + 8), a2) && *(_QWORD *)(a1 + 24))
  {
    sub_216B25034(&v80);
    if (sub_216B60E90(a3))
      v13 = ((*(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32)) & 0x100000000) == 0;
    else
      v13 = 0;
    v14 = sub_216B2037C(a3);
    v15 = sub_216B506E8(v14, *(_QWORD *)(a1 + 24), (uint64_t)&v80, v13, 1);
    sub_216B60994(v10, v15);
    if (sub_216B5F264(v10, v16))
    {
      v18 = sub_216B60EDC(a1, v17);
      v19 = sub_216B281C0(v18);
      if (v19 == sub_216B1E67C(*(_QWORD *)(a1 + 24)))
      {
        v21 = sub_216B5F264(v10, v20);
        v22 = sub_216B27AD8(v21);
        sub_216B32854(v72, v22, v23);
        v76[0] = (uint64_t)"UTF-16 (BE)";
        v24 = sub_216B60EE4((uint64_t)v72, (unsigned __int16 *)"\xFE\xFF", (uint64_t)v76);
        v71 = "UTF-16 (LE)";
        v25 = sub_216B60EE4(v24, (unsigned __int16 *)"\xFF\xFE", (uint64_t)&v71);
        v70 = "UTF-32 (BE)";
        v26 = sub_216B343D4(v25, &dword_216C175F8, (uint64_t)&v70);
        v69 = "UTF-32 (LE)";
        v27 = sub_216B343D4(v26, &dword_216C175FD, (uint64_t)&v69);
        v68 = "UTF-7";
        v28 = sub_216B349EC(v27, (unsigned __int16 *)"+/v", (uint64_t)&v68);
        v67 = "UTF-1";
        v29 = sub_216B349EC(v28, (unsigned __int16 *)"\xF7\x64\x4CUTF-1", (uint64_t)&v67);
        v66 = "UTF-EBCDIC";
        v30 = sub_216B343D4(v29, "\xDD\x73fs", (uint64_t)&v66);
        v65 = "SDSU";
        v31 = sub_216B349EC(v30, (unsigned __int16 *)"\x0E\xFE\xFF", (uint64_t)&v65);
        v64 = "BOCU-1";
        v32 = sub_216B349EC(v31, (unsigned __int16 *)"\xFB\xEE\x28BOCU-1", (uint64_t)&v64);
        v63 = "GB-18030";
        v33 = sub_216B343D4(v32, "\x841\x953", (uint64_t)&v63);
        v62 = 0;
        v34 = sub_216B34208(v33, (uint64_t)&v62);
        if (v34)
        {
          v36 = v34;
          sub_216B4CD2C(a2, a4, 37, (uint64_t)v72);
          v37 = sub_216B60EA8(v72, v36);
          v38 = sub_216B1E600(*(_QWORD *)(a1 + 24));
          sub_216B60EA8(v37, v38);
          sub_216B4B3B4(v72);
          v39 = sub_216B60ED0(v10);
          sub_216B6097C((unint64_t *)v10, v39 | 1);
        }
        if (a5)
          *a5 = sub_216B60E74(a1);
LABEL_28:
        v61 = sub_216B5F264(v10, v35);
        std::string::~string(&v80);
        return v61;
      }
      if (sub_216B60E98(a2))
      {
        v55 = (char *)sub_216B1E600(*(_QWORD *)(a1 + 24));
        sub_216B1E678((int)v74, v55);
        sub_216B1E678((int)v73, &byte_216C19659);
        v49 = v74[0];
        v50 = v74[1];
        v51 = v73[0];
        v52 = v73[1];
        v53 = a2;
        v54 = 14;
        goto LABEL_22;
      }
      sub_216B4CD2C(a2, a4, 14, (uint64_t)v72);
      v59 = sub_216B1E600(*(_QWORD *)(a1 + 24));
      sub_216B60EA8(v72, v59);
      v58 = v72;
    }
    else
    {
      sub_216B1E678((int)v72, "<<<MISSING SOURCE FILE>>>\n");
      v40 = sub_216B1E67C(*(_QWORD *)(a1 + 24));
      sub_216B1E678((int)v79, "<invalid>");
      v41 = sub_216B27424(v40, v79[0], v79[1]);
      sub_216B60994(v10, v41);
      v43 = sub_216B5F264(v10, v42);
      v44 = sub_216B1E67C(v43);
      v45 = sub_216B1E67C(*(_QWORD *)(a1 + 24));
      if (v45)
      {
        v46 = 0;
        do
        {
          v47 = sub_216B1E67C((uint64_t)v72);
          *(_BYTE *)(v44 + v46) = sub_216B26288(v72, v46 % v47);
          ++v46;
        }
        while (v45 != v46);
      }
      if (sub_216B60E98(a2))
      {
        v48 = (char *)sub_216B1E600(*(_QWORD *)(a1 + 24));
        sub_216B1E678((int)v78, v48);
        sub_216B26CA0(v77, &v80);
        v49 = v78[0];
        v50 = v78[1];
        v51 = v77[0];
        v52 = v77[1];
        v53 = a2;
        v54 = 4;
LABEL_22:
        sub_216B4B238(v53, v54, v49, v50, v51, v52);
        goto LABEL_26;
      }
      sub_216B4CD2C(a2, a4, 4, (uint64_t)v76);
      v56 = sub_216B1E600(*(_QWORD *)(a1 + 24));
      v57 = sub_216B60EA8(v76, v56);
      sub_216B26CA0(v75, &v80);
      sub_216B4B340(v57, v75[0], v75[1]);
      v58 = v76;
    }
    sub_216B4B3B4(v58);
LABEL_26:
    v60 = sub_216B60ED0(v10);
    sub_216B6097C((unint64_t *)v10, v60 | 1);
    if (a5)
      *a5 = 1;
    goto LABEL_28;
  }
  if (a5)
    *a5 = sub_216B60E74(a1);
  return sub_216B5F264(v10, v11);
}

uint64_t sub_216B60E74(uint64_t a1)
{
  return sub_216B60ED0((_DWORD *)(a1 + 8)) & 1;
}

uint64_t sub_216B60E90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 185);
}

BOOL sub_216B60E98(uint64_t a1)
{
  return *(_DWORD *)(a1 + 284) != -1;
}

uint64_t *sub_216B60EA8(uint64_t *a1, uint64_t a2)
{
  sub_216B65358(a1, a2, 1);
  return a1;
}

uint64_t sub_216B60ED0(_DWORD *a1)
{
  return *a1 & 3;
}

uint64_t sub_216B60EDC(uint64_t a1, uint64_t a2)
{
  return sub_216B5F264((_QWORD *)(a1 + 8), a2);
}

uint64_t sub_216B60EE4(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 16)
    && (unint64_t)sub_216B1E67C(a1) >= 2
    && *a2 == *(unsigned __int16 *)sub_216B1E600(a1))
  {
    *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

uint64_t sub_216B60F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v4 = sub_216B60FD0(a1, a2, a3, -1);
  if (*(_DWORD *)sub_216B5F25C(v4) != -1)
    return *(unsigned int *)sub_216B5F25C(v4);
  v6 = (uint64_t *)(a1 + 160);
  v8 = sub_216B2E220(v6);
  sub_216B61024(v4, &v8);
  v7 = v4;
  sub_216B5E918(v6, (uint64_t)&v7);
  return sub_216B2E220(v6) - 1;
}

uint64_t sub_216B60FD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  _BYTE v7[24];
  _QWORD v8[2];
  int v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216B5FE94((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216B65EC4(a1, (uint64_t)v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216B61024(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 4) = *a2;
  return result;
}

uint64_t sub_216B61030(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t *v8;
  int v9;
  int v10;
  __n128 v12;
  int v13;

  v13 = a2;
  v8 = (uint64_t *)sub_216B610E4(a1 + 184, &v13);
  if (sub_216B29084(v8))
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (a5 == -1)
      a5 = *(_DWORD *)(sub_216B6114C((uint64_t)v8) + 8);
    v9 = *(_DWORD *)(sub_216B6114C((uint64_t)v8) + 12);
    v10 = *(_DWORD *)(sub_216B6114C((uint64_t)v8) + 16);
  }
  sub_216B611B0(a3, a4, a5, v9, v10, &v12);
  return sub_216B61158(v8, &v12);
}

uint64_t sub_216B610E4(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v10 = sub_216B514B8((uint64_t)a2);
  nullsub_1(v10, v4);
  v11[0] = sub_216B66040(a1, a2, (uint64_t)&unk_216C17602, (uint64_t)&v10, (uint64_t)&v9);
  v11[1] = v5;
  v6 = sub_216B3B45C((uint64_t)v11);
  return nullsub_1(v6, v7) + 8;
}

uint64_t sub_216B6114C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 20;
}

uint64_t sub_216B61158(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, (uint64_t)a2))
  {
    result = sub_216B664C4(a1, a2);
  }
  else
  {
    sub_216B66454((uint64_t)a1, a2);
    result = v4 + 20;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216B611B0@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_216B611C0(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  __n128 v20;
  int v21;

  v21 = a2;
  v13 = (uint64_t *)sub_216B610E4(a1 + 184, &v21);
  v14 = v13;
  if (a6 == 2)
  {
    v16 = v21;
    v17 = sub_216B6114C((uint64_t)v13);
    v15 = sub_216B612A8(a1, v16, *(_DWORD *)(v17 + 16));
    if (v15)
      goto LABEL_7;
LABEL_8:
    v18 = 0;
    goto LABEL_10;
  }
  if (a6 == 1)
  {
    v18 = a3 - 1;
    goto LABEL_10;
  }
  if (a6 || sub_216B29084(v13))
    goto LABEL_8;
  v15 = sub_216B6114C((uint64_t)v14);
LABEL_7:
  v18 = *(_DWORD *)(v15 + 16);
LABEL_10:
  sub_216B611B0(a3, a4, a5, a7, v18, &v20);
  return sub_216B61158(v14, &v20);
}

uint64_t sub_216B612A8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  v12 = a2;
  v11 = a3;
  v4 = (uint64_t *)sub_216B610E4(a1 + 184, &v12);
  if (*(_DWORD *)sub_216B6114C((uint64_t)v4) <= a3)
    return sub_216B6114C((uint64_t)v4);
  v5 = sub_216B2C910(v4);
  v6 = sub_216B2C000((uint64_t)v4);
  v10 = sub_216B61358(v5, v6, &v11);
  v9 = sub_216B2C910(v4);
  if (sub_216B2AB50((uint64_t)&v10, (uint64_t)&v9))
    return 0;
  v8 = sub_216B6135C(&v10);
  return sub_216B1E600((uint64_t)v8);
}

_QWORD *sub_216B6135C(_QWORD *result)
{
  *result -= 20;
  return result;
}

uint64_t sub_216B6136C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 544);
  if (!v6)
  {
    v7 = sub_216B1D1D4(208);
    v6 = sub_216B613B8(v7);
    *(_QWORD *)(a1 + 544) = v6;
  }
  return sub_216B60F48(v6, a2, a3);
}

uint64_t sub_216B613BC(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v7 = sub_216B61470((_DWORD *)a1, a2);
  v16 = 0;
  v8 = v7;
  v9 = (_DWORD *)sub_216B606F0(a1, v7, &v16);
  result = sub_216B6081C(v9);
  if ((_DWORD)result)
    v11 = v16 == 0;
  else
    v11 = 0;
  if (v11)
  {
    v12 = HIDWORD(v7);
    v13 = sub_216B3DBD0((uint64_t)v9);
    sub_216B61540(v13);
    v14 = *(_QWORD *)(a1 + 544);
    if (!v14)
    {
      v15 = sub_216B1D1D4(208);
      v14 = sub_216B613B8(v15);
      *(_QWORD *)(a1 + 544) = v14;
    }
    return sub_216B61030(v14, v8, v12, a3, a4);
  }
  return result;
}

uint64_t sub_216B61470(_DWORD *a1, int a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v12 = a2;
  v11 = sub_216B60454(a1, a2);
  v10 = 0;
  v3 = sub_216B606F0((uint64_t)a1, v11, &v10);
  if (v10)
  {
    sub_216B4AED0(&v8);
    v7 = 0;
    v9 = sub_216B3A19C((uint64_t)&v8, (uint64_t)&v7);
    sub_216B3A1C8(&v13, &v9);
    return v13;
  }
  else
  {
    v5 = (_DWORD *)v3;
    v6 = sub_216B6064C(&v12);
    LODWORD(v9) = v6 - sub_216B60718(v5);
    if (sub_216B4F6FC(&v12))
      return sub_216B3A19C((uint64_t)&v11, (uint64_t)&v9);
    else
      return sub_216B62F14(a1, v5);
  }
}

uint64_t sub_216B61540(uint64_t result)
{
  *(_QWORD *)(result + 8) |= 4uLL;
  return result;
}

uint64_t sub_216B61550(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  unint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t result;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char v27;

  if (a4 == -1)
    return sub_216B613BC(a1, a2, a3, -1);
  v15 = sub_216B61470((_DWORD *)a1, a2);
  v27 = 0;
  v16 = v15;
  v17 = (_DWORD *)sub_216B606F0(a1, v15, &v27);
  result = sub_216B6081C(v17);
  if ((_DWORD)result)
    v19 = v27 == 0;
  else
    v19 = 0;
  if (v19)
  {
    v20 = HIDWORD(v15);
    v21 = sub_216B3DBD0((uint64_t)v17);
    sub_216B61540(v21);
    v22 = *(_QWORD *)(a1 + 544);
    if (!v22)
    {
      v23 = sub_216B1D1D4(208);
      v22 = sub_216B613B8(v23);
      *(_QWORD *)(a1 + 544) = v22;
    }
    if (a8)
      v24 = 2;
    else
      v24 = a7;
    if (a6)
      v25 = 2;
    else
      v25 = 0;
    if (a5)
      v26 = 1;
    else
      v26 = v25;
    return sub_216B611C0(v22, v16, v20, a3, a4, v26, v24);
  }
  return result;
}

uint64_t sub_216B61674(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;

  v8 = sub_216B4AEBC((_DWORD *)a1);
  v8[1] = a2;
  v8[2] = a3;
  sub_216B39B60(v8 + 3);
  sub_216B5F9A0(a1 + 160, 0);
  *(_BYTE *)(a1 + 184) = 1;
  *(_BYTE *)(a1 + 185) = a4;
  sub_216B324FC(a1 + 192);
  sub_216B2C030((_QWORD *)(a1 + 200));
  sub_216B61780(a1 + 224);
  sub_216B61784(a1 + 440);
  sub_216B3C074((_QWORD *)(a1 + 504));
  *(_QWORD *)(a1 + 528) = 0;
  sub_216B4AED0((_DWORD *)(a1 + 536));
  *(_QWORD *)(a1 + 544) = 0;
  sub_216B4AED0((_DWORD *)(a1 + 552));
  sub_216B4AED0((_DWORD *)(a1 + 576));
  sub_216B4AED0((_DWORD *)(a1 + 580));
  *(_QWORD *)(a1 + 584) = 0;
  sub_216B61788(a1 + 592, 0);
  sub_216B6178C(a1 + 616, 0);
  sub_216B61790((_DWORD *)(a1 + 640));
  sub_216B324FC(a1 + 664);
  sub_216B324FC(a1 + 672);
  sub_216B61794(a1 + 680, 0);
  sub_216B61798(a1 + 704);
  sub_216B6179C(a1);
  sub_216B61858(a2, a1);
  return a1;
}

uint64_t sub_216B6179C(uint64_t a1)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  sub_216B4AED0(&v7);
  *(_DWORD *)(a1 + 576) = v7;
  sub_216B20594((_QWORD *)(a1 + 224));
  sub_216B20594((_QWORD *)(a1 + 440));
  sub_216B3CDF8(a1 + 504);
  sub_216B4AED0(&v7);
  *(_DWORD *)(a1 + 552) = v7;
  *(_QWORD *)(a1 + 560) = 0;
  sub_216B4AED0(&v7);
  *(_DWORD *)(a1 + 536) = v7;
  v2 = *(_QWORD *)(a1 + 544);
  if (v2)
    sub_216B61BCC(v2);
  *(_QWORD *)(a1 + 496) = 0x8000000000000000;
  sub_216B4AED0(&v6);
  sub_216B4AED0(&v5);
  sub_216B4AED0(&v4);
  return sub_216B61BF8(a1, v6, v5, v4, 1, 0, 0);
}

uint64_t sub_216B61858(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t sub_216B61864(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  _BYTE v12[16];
  uint64_t *v13[2];

  v2 = *(_QWORD *)(a1 + 544);
  if (v2)
  {
    v3 = (void *)sub_216B61A24(v2);
    j__free(v3);
  }
  v4 = sub_216B2E220((_QWORD *)(a1 + 200));
  if (v4)
  {
    v5 = 0;
    do
    {
      if (*(_QWORD *)sub_216B212F0((_QWORD *)(a1 + 200), v5))
      {
        v6 = (_QWORD *)sub_216B212F0((_QWORD *)(a1 + 200), v5);
        sub_216B608AC(*v6);
        v7 = (uint64_t *)sub_216B212F0((_QWORD *)(a1 + 200), v5);
        sub_216B61A28(a1 + 24, *v7);
      }
      ++v5;
    }
    while (v4 != v5);
  }
  sub_216B61A34(a1 + 160, (uint64_t)v13);
  sub_216B61AA0(a1 + 160, (uint64_t)v12);
  sub_216B4F784(v11, v12);
  while (sub_216B50AF4((uint64_t *)v13, (uint64_t)v11))
  {
    if (*(_QWORD *)(sub_216B1E600((uint64_t)v13) + 8))
    {
      v8 = sub_216B1E600((uint64_t)v13);
      sub_216B608AC(*(_QWORD *)(v8 + 8));
      v9 = sub_216B1E600((uint64_t)v13);
      sub_216B61A28(a1 + 24, *(_QWORD *)(v9 + 8));
    }
    sub_216B61AE8(v13);
    sub_216B4F784(v11, v12);
  }
  sub_216B61B18(a1 + 680);
  sub_216B61BB0(a1 + 704);
  sub_216B61BB4(a1 + 680);
  sub_216B61BB8(a1 + 672);
  sub_216B27C04(a1 + 664);
  sub_216B61BBC(a1 + 616);
  sub_216B61BC0(a1 + 592);
  sub_216B3C0DC(a1 + 504);
  sub_216B1FF6C(a1 + 440);
  sub_216B1FF6C(a1 + 224);
  sub_216B3D560(a1 + 200);
  sub_216B61BC4(a1 + 192);
  sub_216B5F5B0(a1 + 160);
  sub_216B3A034(a1 + 24);
  return a1;
}

uint64_t sub_216B61A28(uint64_t a1, uint64_t a2)
{
  return j_nullsub_1(a1, a2);
}

uint64_t sub_216B61A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (sub_216B65D78())
    return sub_216B61AA0(a1, a2);
  v5 = sub_216B262E0(a1);
  v6 = sub_216B5F664(a1);
  return sub_216B65DE0(a2, v5, v6, 0);
}

uint64_t sub_216B61AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B5F664(a1);
  v5 = sub_216B5F664(a1);
  return sub_216B65DE0(a2, v4, v5, 1);
}

uint64_t **sub_216B61AE8(uint64_t **a1)
{
  *a1 += 2;
  sub_216B65E14(a1);
  return a1;
}

uint64_t sub_216B61B18(uint64_t a1)
{
  void *v2;
  _BYTE v4[16];
  _BYTE v5[16];
  int *v6[2];

  sub_216B674CC(a1, (uint64_t)v6);
  sub_216B67538(a1, (uint64_t)v5);
  sub_216B4F784(v4, v5);
  while (sub_216B50AF4((uint64_t *)v6, (uint64_t)v4))
  {
    if (*(_QWORD *)(sub_216B1E600((uint64_t)v6) + 8))
    {
      v2 = (void *)sub_216B67580();
      j__free(v2);
    }
    sub_216B67584(v6);
    sub_216B4F784(v4, v5);
  }
  return sub_216B675B4(a1);
}

uint64_t sub_216B61BCC(uint64_t a1)
{
  sub_216B657E8(a1);
  sub_216B4B134((uint64_t *)(a1 + 160));
  return sub_216B65868(a1 + 184);
}

uint64_t sub_216B61BF8(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  int v11;
  unint64_t v13;
  int v14;

  v13 = sub_216B625A8(a2, a3, a4);
  v14 = v11;
  return sub_216B624EC(a1, (uint64_t)&v13, a5, a6, a7);
}

uint64_t sub_216B61C60(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[16];
  _BYTE v23[16];
  uint64_t v24[2];
  uint64_t v25;

  v25 = a2;
  v5 = sub_216B61D98(a1 + 160, &v25);
  result = *v5;
  if (*v5)
    return result;
  *v5 = sub_216B61DB0(a1 + 24, 1);
  if (sub_216B3817C(a1 + 192, v7))
  {
    v9 = sub_216B25CA8(a1 + 192, v8);
    sub_216B61DC0(v9, &v25, (uint64_t)v24);
    v11 = sub_216B25CA8(a1 + 192, v10);
    sub_216B61AA0(v11, (uint64_t)v22);
    sub_216B4F784(v23, v22);
    v12 = sub_216B61E30(v24, (uint64_t)v23);
    v13 = *v5;
    if (!v12)
    {
      if (*(_BYTE *)(a1 + 184))
        v16 = &v25;
      else
        v16 = (uint64_t *)(sub_216B1E600((uint64_t)v24) + 8);
      v17 = *v16;
      v18 = sub_216B1E600((uint64_t)v24);
      sub_216B61E60(v13, v17, *(_QWORD *)(v18 + 8));
      goto LABEL_11;
    }
    v14 = v25;
    v15 = *v5;
  }
  else
  {
    v15 = *v5;
    v14 = v25;
  }
  sub_216B61E5C(v15, v14);
LABEL_11:
  v19 = *v5 + 40;
  v20 = 0x100000000;
  if (!a3)
    v20 = 0;
  v21 = (*(unsigned int *)(*v5 + 40) | ((unint64_t)*(unsigned __int8 *)(*v5 + 44) << 32)) & 0xFFFFFFFEFFFFFFFFLL | v20;
  *(_DWORD *)v19 = *(_DWORD *)(*v5 + 40);
  *(_BYTE *)(v19 + 4) = BYTE4(v21);
  return *v5;
}

uint64_t *sub_216B61D98(uint64_t a1, uint64_t *a2)
{
  return sub_216B678CC(a1, a2) + 1;
}

uint64_t sub_216B61DB0(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, 48 * a2, 8);
}

uint64_t sub_216B61DC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216B65E8C(a1, a2, &v8))
    return sub_216B61AA0(a1, a3);
  v5 = v8;
  v6 = sub_216B5F664(a1);
  return sub_216B65DE0(a3, v5, v6, 1);
}

BOOL sub_216B61E30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  return v2 == sub_216B1E600(a2);
}

uint64_t sub_216B61E64(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = sub_216B61DB0(a1 + 24, 1);
  sub_216B61E5C(v5, 0);
  sub_216B5E918((uint64_t *)(a1 + 200), (uint64_t)&v5);
  sub_216B61EC0(v5, a2);
  return v5;
}

unint64_t *sub_216B61EC0(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;

  v2 = (unint64_t *)(a1 + 8);
  sub_216B60994((uint64_t *)(a1 + 8), a2);
  return sub_216B6097C(v2, 0);
}

uint64_t sub_216B61EEC(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  __n128 v13;
  __int128 v14;
  uint64_t v15;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 528) + 16))(*(_QWORD *)(a1 + 528), -2 - a2))
  {
    if (a3)
      *a3 = 1;
    *(_QWORD *)&v14 = sub_216B3D134((_QWORD *)(a1 + 504), a2);
    *((_QWORD *)&v14 + 1) = v6;
    if (!sub_216B32688((uint64_t)&v14))
    {
      sub_216B4AED0(&v12);
      sub_216B62014(a1, v7);
      v13.n128_u64[0] = sub_216B61FD4(v12);
      v13.n128_u64[1] = v8;
      sub_216B61FC0(0, &v13, (uint64_t)&v14);
      v9 = sub_216B60770(a1 + 440, a2);
      v10 = v15;
      *(_OWORD *)v9 = v14;
      *(_QWORD *)(v9 + 16) = v10;
    }
  }
  return sub_216B60770(a1 + 440, a2);
}

__n128 sub_216B61FC0@<Q0>(int a1@<W0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;

  *(_DWORD *)a3 = 2 * a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

uint64_t sub_216B61FD4(unsigned int a1)
{
  unsigned int v2;

  v2 = a1;
  return sub_216B1E4E0(&v2);
}

uint64_t sub_216B62014(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[8];

  v3 = a1 + 672;
  if (!sub_216B3817C(a1 + 672, a2))
  {
    sub_216B6210C((uint64_t)v10);
    sub_216B62144(v3, (uint64_t)v10);
    sub_216B61BB8(v10);
    v6 = sub_216B25CA8(v3, v5);
    v8 = sub_216B62098(a1, v7);
    sub_216B608F4(v6, v8, 1);
  }
  return sub_216B25CA8(v3, v4);
}

uint64_t sub_216B62098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t v7[2];

  v2 = a1 + 664;
  if (!sub_216B3817C(a1 + 664, a2))
  {
    sub_216B1E678((int)v7, "<<<INVALID BUFFER>>");
    sub_216B1E678((int)v6, &byte_216C19659);
    v4 = sub_216B271E8(v7[0], v7[1], v6[0], v6[1], 1);
    sub_216B27C30(v2, v4);
  }
  return sub_216B25CA8(v2, v3);
}

uint64_t sub_216B6210C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_216B1D1D4(48);
  sub_216B61E5C(v2, 0);
  return sub_216B27D7C(a1, v2);
}

uint64_t sub_216B62144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B28054(a2, a2);
  sub_216B67398(a1, v4);
  j_j_nullsub_1(a2);
  j_nullsub_1(a1, v5);
  return a1;
}

uint64_t sub_216B6218C(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  unsigned int v7;

  v6 = a2;
  if (sub_216B4B4A8(&v6) || v6 == -1)
    goto LABEL_5;
  v3 = (v6 - 1);
  if (v6 < 1)
  {
    v5 = ~v6;
    if (sub_216B60724(a1 + 440) <= v5)
      goto LABEL_5;
    return sub_216B62210(v3);
  }
  if (v6 != 1)
    return sub_216B62210(v3);
LABEL_5:
  sub_216B4AED0(&v7);
  return v7;
}

uint64_t sub_216B62210(uint64_t a1)
{
  int v3;

  sub_216B4AED0(&v3);
  return a1;
}

uint64_t sub_216B62240(uint64_t a1, int a2)
{
  uint64_t v3;
  int v5;
  unsigned int v6;

  v5 = a2;
  if (!sub_216B4B4A8(&v5))
  {
    if (v5 < 1)
    {
      if (v5 <= -3)
      {
        v3 = (v5 + 1);
        return sub_216B62210(v3);
      }
    }
    else
    {
      v3 = (v5 + 1);
      if (v3 < sub_216B622C0(a1))
        return sub_216B62210(v3);
    }
  }
  sub_216B4AED0(&v6);
  return v6;
}

unint64_t sub_216B622C0(uint64_t a1)
{
  return sub_216B60724(a1 + 224);
}

uint64_t sub_216B622D8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  __int128 v21;
  uint64_t v22;

  if ((a5 & 0x80000000) != 0)
  {
    v15 = (-2 - a5);
    v20.n128_u64[0] = sub_216B61FD4(a3);
    v20.n128_u64[1] = v16;
    sub_216B61FC0(a6, &v20, (uint64_t)&v21);
    v17 = sub_216B60770(a1 + 440, v15);
    v18 = v22;
    *(_OWORD *)v17 = v21;
    *(_QWORD *)(v17 + 16) = v18;
    *(_QWORD *)&v21 = sub_216B3D134((_QWORD *)(a1 + 504), v15);
    *((_QWORD *)&v21 + 1) = v19;
    sub_216B32624((uint64_t)&v21, 1);
    return sub_216B62210(a5);
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 496);
    v20.n128_u64[0] = sub_216B61FD4(a3);
    v20.n128_u64[1] = v9;
    sub_216B61FC0(v8, &v20, (uint64_t)&v21);
    sub_216B623F0(a1 + 224, (uint64_t)&v21);
    *(_DWORD *)(a1 + 496) += sub_216B608B0(a2, v10) + 1;
    v11 = sub_216B60724(a1 + 224);
    result = sub_216B62210((v11 - 1));
    *(_DWORD *)(a1 + 536) = result;
  }
  return result;
}

uint64_t sub_216B623F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    sub_216B67B88((const void **)a1, 0);
  v4 = sub_216B1E67C(a1);
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = sub_216B1E67C(a1) + 24;
  return sub_216B203A4(a1, v6);
}

uint64_t sub_216B62454(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  int v6;
  unint64_t v8;
  int v9;

  v8 = sub_216B624A8(a2, a3);
  v9 = v6;
  return sub_216B624EC(a1, (uint64_t)&v8, a4, 0, 0);
}

unint64_t sub_216B624A8(unsigned int a1, unsigned int a2)
{
  unsigned int v5;

  sub_216B4AED0(&v5);
  return sub_216B625A8(a1, a2, v5);
}

uint64_t sub_216B624EC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  if (a4 < 0)
  {
    v7 = a5;
    v8 = (-2 - a4);
    sub_216B62600(a5, a2, (uint64_t)&v13);
    v9 = sub_216B60770(a1 + 440, v8);
    v10 = v14;
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)&v13 = sub_216B3D134((_QWORD *)(a1 + 504), v8);
    *((_QWORD *)&v13 + 1) = v11;
    sub_216B32624((uint64_t)&v13, 1);
  }
  else
  {
    sub_216B62600(*(unsigned int *)(a1 + 496), a2, (uint64_t)&v13);
    sub_216B623F0(a1 + 224, (uint64_t)&v13);
    v7 = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 496) = a3 + v7 + 1;
  }
  return sub_216B62620(v7);
}

unint64_t sub_216B625A8(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v7 = a2;
  v8 = a1;
  v6 = a3;
  v3 = sub_216B1E4E0(&v8);
  v4 = sub_216B1E4E0(&v7);
  sub_216B1E4E0(&v6);
  return v3 | (unint64_t)(v4 << 32);
}

uint64_t sub_216B62600@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = (2 * result) | 1;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a2;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_216B62620(int a1)
{
  int v3;

  sub_216B4AED0(&v3);
  return a1 | 0x80000000;
}

uint64_t sub_216B62650(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v5 = sub_216B61C60(a1, a2, 0);
  v6 = *(_QWORD *)(a1 + 8);
  sub_216B4AED0(&v8);
  return sub_216B609C8(v5, v6, a1, v8, a3);
}

uint64_t sub_216B626B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v7 = sub_216B61C60(a1, a2, 0);
  sub_216B608F4(v7, a3, a4);
  *(_DWORD *)(v7 + 40) |= 0x80000000;
  v9 = sub_216B62724(a1, v8);
  return sub_216B6276C(v9 + 24, (uint64_t)&v12, (uint64_t)&v11);
}

uint64_t sub_216B62724(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 192;
  if (!sub_216B3817C(a1 + 192, a2))
  {
    v4 = sub_216B1D1D4(48);
    sub_216B65A24(v4);
    sub_216B659C8(v2, v4);
  }
  return sub_216B25CA8(v2, v3);
}

uint64_t sub_216B6276C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v7;
  _QWORD v8[2];
  _BYTE v9[16];
  _BYTE v10[24];

  v7 = 0;
  v8[0] = sub_216B67C54(a2, (uint64_t)&v7);
  v8[1] = v5;
  sub_216B67C80((uint64_t)v9, (uint64_t)v8);
  sub_216B67B98(a1, (uint64_t)v9, (uint64_t)v10);
  return sub_216B67C84(a3, (uint64_t)v10);
}

uint64_t sub_216B627D4(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  _DWORD *v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned __int8 v15;
  _QWORD v16[2];

  v15 = 0;
  v5 = (_DWORD *)sub_216B606F0(a1, a2, &v15);
  if (sub_216B6081C(v5))
    v6 = v15 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v7 = sub_216B3DBD0((uint64_t)v5);
    v8 = sub_216B60834(v7);
    v9 = *(_QWORD *)(a1 + 8);
    sub_216B4AED0(&v14);
    v10 = sub_216B609C8(v8, v9, a1, v14, &v15);
    v11 = v15;
    if (a3)
      *a3 = v15;
    if (!v11)
    {
      v16[0] = sub_216B27AD8(v10);
      v16[1] = v12;
      return v16[0];
    }
  }
  else if (a3)
  {
    *a3 = 1;
  }
  sub_216B1E678((int)v16, "<<<<<INVALID SOURCE LOCATION>>>>>");
  return v16[0];
}

uint64_t sub_216B628A0(_DWORD *a1, unsigned int a2)
{
  if (!a2)
    return sub_216B62210(0);
  if (a1[124] <= a2)
    return sub_216B62AAC(a1, a2);
  return sub_216B628C0(a1, a2);
}

uint64_t sub_216B628C0(_DWORD *a1, unsigned int a2)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int i;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v21;

  v4 = a1[134];
  if ((v4 & 0x80000000) != 0
    || (v5 = (_DWORD *)sub_216B60770((uint64_t)(a1 + 56), v4), sub_216B60718(v5) < a2))
  {
    v6 = sub_216B1E67C((uint64_t)(a1 + 56));
  }
  else
  {
    v6 = sub_216B1E600((uint64_t)(a1 + 56)) + 24 * (int)a1[134];
  }
  v7 = -v6;
  v8 = (_DWORD *)(v6 - 24);
  v9 = -1;
  while (sub_216B60718(v8) > a2)
  {
    v7 += 24;
    v8 -= 6;
    if (--v9 == -9)
    {
      v10 = -1431655765 * ((unint64_t)-(sub_216B1E600((uint64_t)(a1 + 56)) + v7) >> 3);
      v11 = v10 >> 1;
      v12 = (_DWORD *)sub_216B607A4((uint64_t)a1, v10 >> 1);
      v13 = sub_216B60718(v12);
      v14 = 0;
      for (i = 1; ; ++i)
      {
        if (v13 <= a2)
        {
          v16 = sub_216B62210(v11);
          if (sub_216B60658((uint64_t)a1, v16, a2))
          {
            v19 = sub_216B62210(v11);
            v21 = (_DWORD *)sub_216B60770((uint64_t)(a1 + 56), v11);
            if ((sub_216B60840(v21) & 1) == 0)
              a1[134] = v19;
            a1[147] += i;
            return v19;
          }
          v14 = v11;
        }
        else
        {
          v10 = v11;
        }
        v11 = v14 + ((v10 - v14) >> 1);
        v17 = (_DWORD *)sub_216B607A4((uint64_t)a1, v14 + ((v10 - v14) >> 1));
        v13 = sub_216B60718(v17);
      }
    }
  }
  v18 = sub_216B1E600((uint64_t)(a1 + 56));
  v19 = sub_216B62210(-1431655765 * ((unint64_t)(-24 - v7 - v18) >> 3));
  if ((sub_216B60840(v8) & 1) == 0)
    a1[134] = v19;
  a1[146] -= v9;
  return v19;
}

uint64_t sub_216B62AAC(_DWORD *a1, unsigned int a2)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v19;
  unsigned int v20;

  if (a1[125] > a2)
    goto LABEL_2;
  v4 = a1[134];
  if (v4 < 0)
  {
    v6 = (_DWORD *)sub_216B60798((uint64_t)a1, a1[134], 0);
    if (sub_216B60718(v6) >= a2)
      v5 = ~v4;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = 0;
  v8 = -v5;
  while (1)
  {
    v9 = (_DWORD *)sub_216B607AC((uint64_t)a1, v5, 0);
    if (sub_216B60718(v9) <= a2)
      break;
    ++v5;
    --v8;
    if (--v7 == -8)
    {
      v10 = sub_216B60724((uint64_t)(a1 + 110));
      v11 = v5 + ((v10 + v8) >> 1);
      v12 = (_DWORD *)sub_216B607AC((uint64_t)a1, v11, 0);
      if (sub_216B60718(v12))
      {
        v13 = v10 - v5;
        v14 = 2;
        do
        {
          if (sub_216B60718(v12) <= a2)
          {
            v15 = sub_216B62210(-2 - v11);
            if (sub_216B60658((uint64_t)a1, v15, a2))
            {
              v19 = sub_216B62210(-2 - v11);
              v20 = v19;
              if ((sub_216B60840(v12) & 1) == 0)
                a1[134] = v19;
              a1[147] += v14;
              return v20;
            }
            v16 = v10 == v11;
            v10 = v11;
            if (v16)
              break;
          }
          else
          {
            v5 = v11;
            if (v13 <= 1)
              break;
          }
          v13 = v10 - v5;
          v11 = v5 + ((v10 - v5) >> 1);
          v12 = (_DWORD *)sub_216B607AC((uint64_t)a1, v11, 0);
          v14 += 2;
        }
        while (sub_216B60718(v12));
      }
LABEL_2:
      sub_216B4AED0(&v20);
      return v20;
    }
  }
  v17 = sub_216B62210(-2 - v5);
  v20 = v17;
  if ((sub_216B60840(v9) & 1) == 0)
    a1[134] = v17;
  a1[146] = a1[146] - v7 + 1;
  return v20;
}

uint64_t sub_216B62C90(_DWORD *a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;

  v7 = a2;
  do
  {
    v3 = sub_216B60454(a1, v7);
    v4 = sub_216B606F0((uint64_t)a1, v3, 0);
    v5 = sub_216B3DBD0(v4);
    v7 = sub_216B62CF0(v5);
  }
  while (!sub_216B4F6FC(&v7));
  return v7;
}

uint64_t sub_216B62CF0(uint64_t a1)
{
  return sub_216B62210(*(unsigned int *)(a1 + 4));
}

uint64_t sub_216B62CF8(_DWORD *a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v8;

  v8 = a2;
  do
  {
    v3 = sub_216B60568(a1, v8);
    v4 = HIDWORD(v3);
    v5 = sub_216B606F0((uint64_t)a1, v3, 0);
    v6 = (unsigned int *)sub_216B3DBD0(v5);
    v8 = sub_216B62D6C(v6);
    v8 = sub_216B62D74(&v8, v4);
  }
  while (!sub_216B4F6FC(&v8));
  return v8;
}

uint64_t sub_216B62D6C(unsigned int *a1)
{
  return sub_216B62210(*a1);
}

uint64_t sub_216B62D74(_DWORD *a1, int a2)
{
  int v5;

  sub_216B4AED0(&v5);
  return (*a1 + a2);
}

uint64_t sub_216B62DAC(_DWORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v5;

  v5 = a2;
  do
  {
    if (sub_216B62E10(a1, v5))
      v3 = sub_216B62E68(a1, v5);
    else
      v3 = sub_216B62EDC(a1, v5);
    v5 = v3;
  }
  while (!sub_216B4F6FC(&v5));
  return v5;
}

uint64_t sub_216B62E10(_DWORD *a1, int a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v7 = a2;
  result = sub_216B5E144(&v7);
  if ((_DWORD)result)
  {
    v4 = sub_216B60454(a1, v7);
    v5 = sub_216B606F0((uint64_t)a1, v4, 0);
    v6 = sub_216B3DBD0(v5);
    return sub_216B6316C(v6);
  }
  return result;
}

uint64_t sub_216B62E68(_DWORD *a1, unsigned int a2)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v10;

  v10 = a2;
  v3 = sub_216B4F6FC(&v10);
  v4 = v10;
  if (!v3)
  {
    v5 = sub_216B60568(a1, v10);
    v6 = HIDWORD(v5);
    v7 = sub_216B606F0((uint64_t)a1, v5, 0);
    v8 = (unsigned int *)sub_216B3DBD0(v7);
    v10 = sub_216B62D6C(v8);
    return sub_216B62D74(&v10, v6);
  }
  return v4;
}

uint64_t sub_216B62EDC(_DWORD *a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_216B60454(a1, a2);
  v4 = sub_216B606F0((uint64_t)a1, v3, 0);
  v5 = sub_216B3DBD0(v4);
  return sub_216B63078(v5);
}

uint64_t sub_216B62F14(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;
  unsigned int v9;

  sub_216B4AED0(&v9);
  sub_216B4AED0(&v8);
  do
  {
    v4 = sub_216B3DBD0((uint64_t)a2);
    v8 = sub_216B62CF0(v4);
    v9 = sub_216B60454(a1, v8);
    a2 = (_DWORD *)sub_216B606F0((uint64_t)a1, v9, 0);
    v5 = sub_216B6064C(&v8);
    v7 = v5 - sub_216B60718(a2);
  }
  while (!sub_216B4F6FC(&v8));
  return sub_216B3A19C((uint64_t)&v9, (uint64_t)&v7);
}

uint64_t sub_216B62FBC(_DWORD *a1, _DWORD *a2, int a3)
{
  unsigned int *v6;
  int v7;
  int v9;
  unsigned int v10;
  int v11;

  sub_216B4AED0(&v10);
  sub_216B4AED0(&v9);
  do
  {
    v6 = (unsigned int *)sub_216B3DBD0((uint64_t)a2);
    v9 = sub_216B62D6C(v6);
    v9 = sub_216B62D74(&v9, a3);
    v10 = sub_216B60454(a1, v9);
    a2 = (_DWORD *)sub_216B606F0((uint64_t)a1, v10, 0);
    v7 = sub_216B6064C(&v9);
    a3 = v7 - sub_216B60718(a2);
    v11 = a3;
  }
  while (!sub_216B4F6FC(&v9));
  return sub_216B3A19C((uint64_t)&v10, (uint64_t)&v11);
}

uint64_t sub_216B63078(uint64_t a1)
{
  int v3;
  int v4;

  v4 = sub_216B62CF0(a1);
  v3 = sub_216B634A0(a1);
  return sub_216B3A19C((uint64_t)&v4, (uint64_t)&v3);
}

uint64_t sub_216B630BC(_DWORD *a1, int a2)
{
  int v4;
  uint64_t i;

  v4 = a2;
  if (sub_216B4F6FC(&v4))
    return sub_216B3A19C((uint64_t)&v4, (uint64_t)&v4);
  for (i = sub_216B62EDC(a1, v4); !sub_216B4F6FC(&i); LODWORD(i) = sub_216B62EDC(a1, i))
    ;
  for (; !sub_216B4F6FC((_DWORD *)&i + 1); HIDWORD(i) = (unint64_t)sub_216B62EDC(a1, SHIDWORD(i)) >> 32)
    ;
  return i;
}

BOOL sub_216B6316C(uint64_t a1)
{
  _BOOL8 result;
  int v3;
  int v4;

  v4 = sub_216B62CF0(a1);
  result = sub_216B27BAC(&v4);
  if (result)
  {
    v3 = sub_216B62210(*(unsigned int *)(a1 + 8));
    return sub_216B4B4A8(&v3);
  }
  return result;
}

uint64_t sub_216B631B8(_DWORD *a1, int a2, _DWORD *a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;

  v5 = sub_216B60568(a1, a2);
  if (HIDWORD(v5))
    return 0;
  v6 = v5;
  v16 = 0;
  v7 = sub_216B606F0((uint64_t)a1, v5, &v16);
  v8 = sub_216B3DBD0(v7);
  result = 0;
  if (v16)
    return result;
  v15 = sub_216B62CF0(v8);
  if (sub_216B6316C(v8))
  {
    v14 = sub_216B6218C((uint64_t)a1, v6);
    if (!sub_216B4B4A8(&v14))
    {
      v10 = (_DWORD *)sub_216B606F0((uint64_t)a1, v14, &v16);
      if (v16)
        return 0;
      v11 = (uint64_t)v10;
      if (sub_216B60840(v10))
      {
        v12 = sub_216B3DBD0(v11);
        v13 = sub_216B62CF0(v12);
        if (sub_216B632B8(&v13, &v15))
          return 0;
      }
    }
  }
  if (a3)
    *a3 = v15;
  return 1;
}

BOOL sub_216B632B8(unsigned int *a1, unsigned int *a2)
{
  int v3;

  v3 = sub_216B1E4E0(a1);
  return v3 == sub_216B1E4E0(a2);
}

uint64_t sub_216B632EC(_DWORD *a1, int a2, _DWORD *a3)
{
  unsigned int v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  int v18;

  v18 = a2;
  v5 = sub_216B60454(a1, a2);
  v6 = sub_216B62D74(&v18, 1);
  v7 = v5;
  if (sub_216B63414((uint64_t)a1, v6, v5, 0))
    return 0;
  v17 = 0;
  v9 = sub_216B606F0((uint64_t)a1, v5, &v17);
  v10 = sub_216B3DBD0(v9);
  result = 0;
  if (!v17)
  {
    if (sub_216B6316C(v10))
    {
      v16 = sub_216B62240((uint64_t)a1, v7);
      if (!sub_216B4B4A8(&v16))
      {
        v11 = (_DWORD *)sub_216B606F0((uint64_t)a1, v16, &v17);
        if (v17)
          return 0;
        v12 = (uint64_t)v11;
        if (sub_216B60840(v11))
        {
          v13 = sub_216B3DBD0(v12);
          v15 = sub_216B62CF0(v13);
          v14 = sub_216B62CF0(v10);
          if (sub_216B632B8(&v15, &v14))
            return 0;
        }
      }
    }
    if (a3)
      *a3 = sub_216B634A0(v10);
    return 1;
  }
  return result;
}

BOOL sub_216B63414(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v7;
  unsigned int v8;
  _BOOL8 v9;
  _BOOL8 v10;
  _DWORD *v11;
  int v13;

  v13 = a2;
  v7 = sub_216B6064C(&v13);
  v8 = a3;
  v9 = sub_216B60658(a1, a3, v7);
  v10 = v9;
  if (a4 && v9)
  {
    v11 = (_DWORD *)sub_216B606F0(a1, v8, 0);
    *a4 = v7 - sub_216B60718(v11);
  }
  return v10;
}

uint64_t sub_216B634A0(uint64_t a1)
{
  unsigned int v3;

  v3 = sub_216B62210(*(unsigned int *)(a1 + 8));
  if (sub_216B4B4A8(&v3))
    return sub_216B62CF0(a1);
  else
    return v3;
}

const char *sub_216B634EC(uint64_t a1, int a2, _BYTE *a3)
{
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v16;
  char v17;

  v5 = sub_216B635C8((_DWORD *)a1, a2);
  v17 = 0;
  v6 = (_DWORD *)sub_216B606F0(a1, v5, &v17);
  if (v17 || (v7 = (uint64_t)v6, (sub_216B6081C(v6) & 1) == 0))
  {
    if (a3)
      *a3 = 1;
    return "<<<<INVALID BUFFER>>>>";
  }
  else
  {
    v8 = HIDWORD(v5);
    v9 = sub_216B3DBD0(v7);
    v10 = sub_216B60834(v9);
    v11 = *(_QWORD *)(a1 + 8);
    sub_216B4AED0(&v16);
    v12 = sub_216B609C8(v10, v11, a1, v16, &v17);
    if (a3)
      *a3 = v17;
    v13 = sub_216B1E67C(v12);
    if (v17)
      v14 = 0;
    else
      v14 = v8;
    return (const char *)(v13 + v14);
  }
}

uint64_t sub_216B635C8(_DWORD *a1, int a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  int v13;
  uint64_t v14;

  v13 = a2;
  v12 = sub_216B60454(a1, a2);
  v11 = 0;
  v3 = sub_216B606F0((uint64_t)a1, v12, &v11);
  if (v11)
  {
    sub_216B4AED0(&v9);
    v8 = 0;
    v10 = sub_216B3A19C((uint64_t)&v9, (uint64_t)&v8);
    sub_216B3A1C8(&v14, &v10);
    return v14;
  }
  else
  {
    v5 = (_DWORD *)v3;
    v6 = sub_216B6064C(&v13);
    v7 = v6 - sub_216B60718(v5);
    LODWORD(v10) = v7;
    if (sub_216B4F6FC(&v13))
      return sub_216B3A19C((uint64_t)&v12, (uint64_t)&v10);
    else
      return sub_216B62FBC(a1, v5, v7);
  }
}

uint64_t sub_216B6369C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned __int8 v21;
  unsigned int v22;

  v22 = a2;
  v21 = 0;
  v7 = sub_216B604C8(a1, a2, &v21);
  v8 = v7;
  v9 = v21;
  if (a4)
    *a4 = v21;
  if (v9)
    return 1;
  if (sub_216B281C0(v7) >= (unint64_t)a3)
  {
    if (sub_216B4CC88((_DWORD *)(a1 + 552), &v22)
      && (v11 = *(_QWORD *)(a1 + 560), (v12 = *(_QWORD *)(v11 + 32)) != 0)
      && (v13 = *(unsigned int *)(a1 + 572), v13 < (*(_DWORD *)(v11 + 40) & 0x7FFFFFFFu))
      && (v14 = *(_DWORD *)(v12 + 4 * (v13 - 1)), v14 <= a3)
      && *(_DWORD *)(v12 + 4 * v13) > a3)
    {
      v15 = a3 - v14;
    }
    else
    {
      v16 = a3;
      v17 = sub_216B1E67C(v8);
      v18 = a3 + 1;
      while (v16)
      {
        v19 = *(unsigned __int8 *)(v17 - 1 + v16--);
        --v18;
        if (v19 == 13 || v19 == 10)
          goto LABEL_23;
      }
      v18 = 0;
LABEL_23:
      v15 = a3 - v18;
    }
    return v15 + 1;
  }
  else
  {
    result = 1;
    if (a4)
      *a4 = 1;
  }
  return result;
}

BOOL sub_216B637B4(int a1, _BYTE *a2)
{
  _BOOL8 result;
  int v4;

  v4 = a1;
  result = sub_216B4B4A8(&v4);
  if (a2)
    *a2 = result;
  return result;
}

uint64_t sub_216B637EC(_DWORD *a1, int a2, unsigned __int8 *a3)
{
  uint64_t v7;

  if (sub_216B637B4(a2, a3))
    return 0;
  v7 = sub_216B61470(a1, a2);
  return sub_216B6369C((uint64_t)a1, v7, HIDWORD(v7), a3);
}

uint64_t sub_216B63858@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v23;
  int v24;
  uint64_t v25;
  int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned __int8 v30;
  int v31;

  v31 = a2;
  if (sub_216B4B4A8(&v31))
    return sub_216B6402C(a4);
  v7 = sub_216B61470((_DWORD *)a1, v31);
  v30 = 0;
  v8 = v7;
  v9 = (_DWORD *)sub_216B606F0(a1, v7, &v30);
  if (v30)
    return sub_216B6402C(a4);
  v10 = (uint64_t)v9;
  if ((sub_216B6081C(v9) & 1) == 0)
    return sub_216B6402C(a4);
  v11 = HIDWORD(v7);
  v12 = (unsigned int *)sub_216B3DBD0(v10);
  v13 = sub_216B60834((uint64_t)v12);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = sub_216B1E600(v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 8);
    sub_216B4AED0(&v29);
    v17 = sub_216B609C8(v13, v16, a1, v29, 0);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = v15;
  v19 = sub_216B63A50(a1, v8, v11, &v30);
  if (v30)
    return sub_216B6402C(a4);
  v20 = v19;
  v21 = sub_216B6369C(a1, v8, v11, &v30);
  if (v30)
    return sub_216B6402C(a4);
  v23 = v21;
  v24 = sub_216B62D6C(v12);
  v28 = v24;
  if (a3)
  {
    if (sub_216B63F9C((uint64_t)v12))
    {
      v25 = sub_216B612A8(*(_QWORD *)(a1 + 544), v8, v11);
      if (v25)
      {
        v26 = (int *)v25;
        v27 = *(_DWORD *)(v25 + 8);
        if (v27 != -1)
          v18 = sub_216B64030(*(_QWORD *)(a1 + 544), v27);
        v20 += v26[1] + ~sub_216B63A50(a1, v8, *v26, 0);
        if (v26[4])
        {
          v28 = sub_216B64050(a1, v8);
          v24 = sub_216B62D74(&v28, v26[4]);
          v28 = v24;
        }
      }
    }
  }
  return sub_216B640B0(a4, v18, v20, v23, v24);
}

unint64_t sub_216B63A50(uint64_t a1, unsigned int a2, int a3, unsigned __int8 *a4)
{
  unint64_t result;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned __int8 v24;
  char v25;
  unsigned int v26;

  v26 = a2;
  if (!sub_216B4B4A8(&v26))
  {
    if (sub_216B4CC88((_DWORD *)(a1 + 552), &v26))
    {
      v8 = *(_QWORD *)(a1 + 560);
    }
    else
    {
      v25 = 0;
      v9 = (_DWORD *)sub_216B606F0(a1, v26, &v25);
      if (v25 || (v10 = (uint64_t)v9, (sub_216B6081C(v9) & 1) == 0))
      {
        if (a4)
          *a4 = 1;
        return 1;
      }
      v11 = sub_216B3DBD0(v10);
      v8 = sub_216B60834(v11);
    }
    if (*(_QWORD *)(v8 + 32))
    {
      if (a4)
        *a4 = 0;
      goto LABEL_18;
    }
    v24 = 0;
    sub_216B63C34(*(_QWORD *)(a1 + 8), v8, a1 + 24, a1, &v24);
    v12 = v24;
    if (a4)
      *a4 = v24;
    if (!v12)
    {
LABEL_18:
      v13 = *(unsigned int **)(v8 + 32);
      v14 = (unint64_t)&v13[*(_DWORD *)(v8 + 40) & 0x7FFFFFFF];
      v15 = a3 + 1;
      v23 = v15;
      if (sub_216B4CC88((_DWORD *)(a1 + 552), &v26))
      {
        v16 = *(unsigned int *)(a1 + 572);
        if (v15 >= *(_DWORD *)(a1 + 568))
        {
          v20 = &v13[v16];
          v19 = v20 - 1;
          v21 = v20 + 4;
          if ((unint64_t)(v20 + 4) < v14)
          {
            if (*v21 <= v15)
            {
              v21 = v20 + 9;
              if ((unint64_t)(v20 + 9) >= v14)
                goto LABEL_23;
              if (*v21 <= v15)
              {
                v22 = v20 + 19;
                if ((unint64_t)v22 < v14 && *v22 > v15)
                  v14 = (unint64_t)v22;
                goto LABEL_23;
              }
            }
            v14 = (unint64_t)v21;
          }
LABEL_23:
          result = (unint64_t)(sub_216B63DE0(v19, v14, &v23) - (_QWORD)v13) >> 2;
          *(_DWORD *)(a1 + 552) = v26;
          *(_QWORD *)(a1 + 560) = v8;
          *(_DWORD *)(a1 + 568) = v23;
          *(_DWORD *)(a1 + 572) = result;
          return result;
        }
        v17 = v16 >= (*(_DWORD *)(v8 + 40) & 0x7FFFFFFFu);
        v18 = (uint64_t)&v13[v16 + 1];
        if (!v17)
          v14 = v18;
      }
      v19 = v13;
      goto LABEL_23;
    }
    return 1;
  }
  result = 1;
  if (a4)
    *a4 = 1;
  return result;
}

uint64_t sub_216B63C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v28;
  unsigned int *v29;
  int v30;
  uint64_t v31;
  int v32;
  _BYTE v33[1052];
  unsigned int v34;

  sub_216B4AED0(&v34);
  result = sub_216B609C8(a2, a1, a4, v34, a5);
  if (!*a5)
  {
    v11 = result;
    sub_216B4B524(v33);
    v32 = 0;
    sub_216B26208((uint64_t)v33, &v32);
    v12 = sub_216B1E67C(v11);
    v13 = sub_216B2037C(v11);
    v32 = 0;
    while (1)
    {
      for (i = 0; ; ++i)
      {
        v15 = *(unsigned __int8 *)(v12 + i);
        v16 = v15 > 0xD;
        v17 = (1 << v15) & 0x2401;
        if (!v16 && v17 != 0)
          break;
      }
      v19 = v32;
      v20 = v32 + i;
      v32 += i;
      v21 = (unsigned __int8 *)(v12 + i);
      v22 = *v21;
      if (v22 == 13 || v22 == 10)
      {
        v24 = v21[1];
        if (v22 != v24)
          ++v19;
        v25 = v19 + i;
        if (v22 == v24)
          v26 = v21;
        else
          v26 = v21 + 1;
        if (v24 == 10 || v24 == 13)
          v21 = v26;
        else
          v25 = v20;
        v32 = v25 + 1;
        sub_216B26208((uint64_t)v33, &v32);
      }
      else
      {
        if (v21 == (unsigned __int8 *)v13)
        {
          v28 = sub_216B262E4((uint64_t)v33);
          v30 = *(_DWORD *)(a2 + 40);
          v29 = (unsigned int *)(a2 + 40);
          *v29 = v30 & 0x80000000 | v28 & 0x7FFFFFFF;
          v31 = sub_216B262E4((uint64_t)v33);
          *((_QWORD *)v29 - 1) = sub_216B263DC(a3, v31);
          sub_216B1E600((uint64_t)v33);
          sub_216B1E67C((uint64_t)v33);
          sub_216B65BC8();
          return sub_216B1FF6C(v33);
        }
        v32 = v19 + i + 1;
      }
      v12 = (uint64_t)(v21 + 1);
    }
  }
  return result;
}

unint64_t sub_216B63DE4(_DWORD *a1, int a2, _BYTE *a3)
{
  uint64_t v6;

  if (sub_216B637B4(a2, a3))
    return 0;
  v6 = sub_216B635C8(a1, a2);
  return sub_216B63A50((uint64_t)a1, v6, SHIDWORD(v6), 0);
}

unint64_t sub_216B63E40(_DWORD *a1, int a2, _BYTE *a3)
{
  uint64_t v6;

  if (sub_216B637B4(a2, a3))
    return 0;
  v6 = sub_216B61470(a1, a2);
  return sub_216B63A50((uint64_t)a1, v6, SHIDWORD(v6), 0);
}

uint64_t sub_216B63E9C(uint64_t a1, int a2, _BYTE *a3)
{
  _BYTE v6[24];

  if (sub_216B637B4(a2, a3))
    return 0;
  sub_216B63858(a1, a2, 1, (uint64_t)v6);
  return sub_216B4D100((uint64_t)v6);
}

uint64_t sub_216B63EF8(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = sub_216B61470((_DWORD *)a1, a2);
  v4 = HIDWORD(v3);
  v10 = 0;
  v5 = v3;
  v6 = (_DWORD *)sub_216B606F0(a1, v3, &v10);
  result = 0;
  if (!v10)
  {
    result = sub_216B6081C(v6);
    if ((_DWORD)result)
    {
      v8 = sub_216B3DBD0((uint64_t)v6);
      if ((sub_216B63F9C(v8) & 1) != 0 && (v9 = sub_216B612A8(*(_QWORD *)(a1 + 544), v5, v4)) != 0)
        return *(unsigned int *)(v9 + 12);
      else
        return sub_216B63FA8(v8);
    }
  }
  return result;
}

uint64_t sub_216B63F9C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_216B63FA8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 3;
}

const char *sub_216B63FB4(_DWORD *a1, int a2, _BYTE *a3)
{
  unsigned int v7;
  uint64_t v8;

  if (sub_216B637B4(a2, a3))
    return "<invalid loc>";
  v7 = sub_216B60454(a1, a2);
  v8 = sub_216B604C8((uint64_t)a1, v7, a3);
  return (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
}

uint64_t sub_216B64030(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_216B212F0((_QWORD *)(a1 + 160), a2);
  return sub_216B3DBD0(*v2);
}

uint64_t sub_216B64050(uint64_t a1, unsigned int a2)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  char v6;
  unsigned int v7;

  v6 = 0;
  v2 = (_DWORD *)sub_216B606F0(a1, a2, &v6);
  if (v6 || (v3 = v2, (sub_216B6081C(v2) & 1) == 0))
  {
    sub_216B4AED0(&v7);
    return v7;
  }
  else
  {
    v4 = sub_216B60718(v3);
    return sub_216B62210(v4);
  }
}

uint64_t sub_216B640B0(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  return sub_216B65D30(a1, a2, a3, a4, a5);
}

uint64_t sub_216B640B8(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;

  v12 = a2;
  if (sub_216B4B4A8(&v12))
    return 0;
  v4 = sub_216B61470((_DWORD *)a1, v12);
  v5 = HIDWORD(v4);
  v11 = 0;
  v6 = v4;
  v7 = (_DWORD *)sub_216B606F0(a1, v4, &v11);
  result = 0;
  if (!v11)
  {
    result = sub_216B6081C(v7);
    if ((_DWORD)result)
    {
      v8 = (unsigned int *)sub_216B3DBD0((uint64_t)v7);
      if (sub_216B63F9C((uint64_t)v8))
      {
        v9 = sub_216B612A8(*(_QWORD *)(a1 + 544), v6, v5);
        if (v9)
        {
          if (*(_DWORD *)(v9 + 16))
            return 0;
        }
      }
      v10 = sub_216B62D6C(v8);
      return sub_216B4B4A8(&v10);
    }
  }
  return result;
}

uint64_t sub_216B64184(uint64_t a1)
{
  return *(unsigned int *)(a1 + 496);
}

uint64_t sub_216B6418C(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v7;

  v7 = sub_216B641CC(a1, a2);
  return sub_216B64658(a1, v7, a3, a4);
}

uint64_t sub_216B641CC(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  const void *v59;
  size_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68[2];
  char v69;
  uint64_t v70[2];
  __int128 v71;
  uint64_t v72[2];
  uint64_t v73[2];
  unsigned int v74;
  unsigned int v75;
  __n128 v76;
  _BYTE v77[24];
  _BYTE v78[24];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  sub_216B4AED0(&v74);
  sub_216B64820((uint64_t)v78);
  sub_216B64820((uint64_t)v77);
  v4 = (unsigned int *)(a1 + 576);
  if (!sub_216B4B4A8((_DWORD *)(a1 + 576)))
  {
    LOBYTE(v71) = 0;
    v12 = (_DWORD *)sub_216B606F0(a1, *(_DWORD *)(a1 + 576), &v71);
    if ((_BYTE)v71)
      goto LABEL_12;
    v14 = (uint64_t)v12;
    if (sub_216B6081C(v12))
    {
      v15 = sub_216B3DBD0(v14);
      v16 = sub_216B60834(v15);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 16);
        if (v17 == a2)
        {
          v74 = *v4;
        }
        else
        {
          v18 = (char *)sub_216B1E600(a2);
          sub_216B1E678((int)v73, v18);
          v76.n128_u64[0] = sub_216B2930C(v73[0], v73[1]);
          v76.n128_u64[1] = v19;
          sub_216B64824((uint64_t)v77, &v76);
          v21 = (uint64_t *)j_nullsub_1(v77, v20);
          v22 = *v21;
          v23 = v21[1];
          v24 = (char *)sub_216B1E600(v17);
          sub_216B1E678((int)v72, v24);
          v25 = (const void *)sub_216B2930C(v72[0], v72[1]);
          if (sub_216B274F0(v22, v23, v25, v26))
          {
            sub_216B64874(a2, v27, &v76);
            sub_216B6490C((uint64_t)v78, (uint64_t)&v76);
            sub_216B64960((uint64_t)&v76, v28);
            if (sub_216B2A390((uint64_t)v78))
            {
              sub_216B64874(v17, v29, &v76);
              if (sub_216B2A390((uint64_t)&v76))
              {
                v31 = (_QWORD *)j_nullsub_1(v78, v30);
                v33 = (_QWORD *)j_nullsub_1(&v76, v32);
                if (sub_216B29B8C(v31, v33))
                {
                  v74 = *v4;
                  a2 = v17;
                }
              }
              sub_216B64960((uint64_t)&v76, v30);
            }
          }
        }
      }
    }
  }
  if (sub_216B4B4A8(&v74))
  {
    v5 = sub_216B622C0(a1);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      do
      {
        v76.n128_u8[0] = 0;
        v8 = (_DWORD *)sub_216B607A4(a1, v7);
        if (v76.n128_u8[0])
          goto LABEL_12;
        v9 = (uint64_t)v8;
        if (sub_216B6081C(v8))
        {
          v10 = sub_216B3DBD0(v9);
          if (sub_216B60834(v10))
          {
            v11 = sub_216B3DBD0(v9);
            if (*(_QWORD *)(sub_216B60834(v11) + 16) == a2)
            {
              v74 = sub_216B62210(v7);
              break;
            }
          }
        }
        v7 = (v7 + 1);
      }
      while (v6 != (_DWORD)v7);
    }
    if (sub_216B4B4A8(&v74))
    {
      v34 = sub_216B64964(a1);
      if (v34)
      {
        v35 = -v34;
        v36 = 2;
        while (1)
        {
          v37 = (_DWORD *)sub_216B607AC(a1, v36 - 2, 0);
          if (sub_216B6081C(v37))
          {
            v38 = sub_216B3DBD0((uint64_t)v37);
            if (sub_216B60834(v38))
            {
              v39 = sub_216B3DBD0((uint64_t)v37);
              if (*(_QWORD *)(sub_216B60834(v39) + 16) == a2)
                break;
            }
          }
          ++v36;
          if (v35 + v36 == 2)
            goto LABEL_33;
        }
        v74 = sub_216B62210(-v36);
      }
    }
  }
LABEL_33:
  if (!sub_216B4B4A8(&v74))
    goto LABEL_49;
  if ((sub_216B2A390((uint64_t)v77) & 1) == 0)
  {
    v40 = (char *)sub_216B1E600(a2);
    sub_216B1E678((int)v70, v40);
    *(_QWORD *)&v71 = sub_216B2930C(v70[0], v70[1]);
    *((_QWORD *)&v71 + 1) = v41;
    v42 = sub_216B64824((uint64_t)v77, &v71);
    if (!sub_216B2A390(v42))
      goto LABEL_49;
  }
  if ((sub_216B2A390((uint64_t)v78) & 1) == 0
    && (sub_216B64874(a2, v43, &v76),
        v44 = sub_216B6490C((uint64_t)v78, (uint64_t)&v76),
        v45 = sub_216B2A390(v44),
        sub_216B64960((uint64_t)&v76, v46),
        !v45)
    || (v69 = 0, (v47 = sub_216B622C0(a1)) == 0))
  {
LABEL_49:
    v75 = v74;
    goto LABEL_50;
  }
  v48 = 0;
  v49 = v47;
  while (1)
  {
    sub_216B4AED0(&v71);
    LODWORD(v71) = v48;
    v50 = (_DWORD *)sub_216B606F0(a1, v48, &v69);
    if (v69)
      break;
    v51 = (uint64_t)v50;
    if (sub_216B6081C(v50))
    {
      v52 = sub_216B3DBD0(v51);
      v53 = sub_216B60834(v52);
      if (v53)
      {
        v54 = *(_QWORD *)(v53 + 16);
        if (v54)
        {
          v55 = (uint64_t *)j_nullsub_1(v77, v13);
          v56 = *v55;
          v57 = v55[1];
          v58 = (char *)sub_216B1E600(v54);
          sub_216B1E678((int)v68, v58);
          v59 = (const void *)sub_216B2930C(v68[0], v68[1]);
          if (sub_216B274F0(v56, v57, v59, v60))
          {
            sub_216B64874(v54, v13, &v76);
            if (sub_216B2A390((uint64_t)&v76))
            {
              v62 = (_QWORD *)j_nullsub_1(v78, v61);
              v64 = (_QWORD *)j_nullsub_1(&v76, v63);
              if (sub_216B29B8C(v62, v64))
              {
                v74 = sub_216B62210(v48);
                sub_216B64960((uint64_t)&v76, v67);
                goto LABEL_49;
              }
            }
            sub_216B64960((uint64_t)&v76, v61);
          }
        }
      }
    }
    if (v49 == ++v48)
      goto LABEL_49;
  }
LABEL_12:
  sub_216B4AED0(&v75);
LABEL_50:
  sub_216B64960((uint64_t)v77, v13);
  sub_216B64960((uint64_t)v78, v65);
  return v75;
}

uint64_t sub_216B64658(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;

  v32 = a2;
  if (sub_216B4B4A8(&v32))
    goto LABEL_25;
  v31 = 0;
  v7 = (_DWORD *)sub_216B606F0(a1, v32, &v31);
  if (v31)
    goto LABEL_25;
  v8 = v7;
  if ((sub_216B6081C(v7) & 1) == 0)
    goto LABEL_25;
  v9 = sub_216B60718(v8);
  v10 = sub_216B62210(v9);
  v30 = v10;
  if (a3 == 1 && a4 == 1)
    return v10;
  v11 = sub_216B3DBD0((uint64_t)v8);
  v12 = sub_216B60834(v11);
  if (v12)
  {
    v13 = v12;
    if (*(_QWORD *)(v12 + 32) || (v29 = 0, sub_216B63C34(*(_QWORD *)(a1 + 8), v12, a1 + 24, a1, &v29), !v29))
    {
      v14 = *(_QWORD *)(a1 + 8);
      if ((*(_DWORD *)(v13 + 40) & 0x7FFFFFFFu) >= a3)
      {
        sub_216B4AED0(&v27);
        v18 = sub_216B609C8(v13, v14, a1, v27, 0);
        v19 = *(unsigned int *)(*(_QWORD *)(v13 + 32) + 4 * (a3 - 1));
        v20 = sub_216B1E67C(v18);
        v21 = sub_216B281C0(v18);
        if ((_DWORD)v19 != v21)
        {
          LODWORD(v22) = v21 + ~(_DWORD)v19;
          if (v22 >= a4 - 1)
            v22 = (a4 - 1);
          else
            v22 = v22;
          if ((_DWORD)v22)
          {
            v23 = 0;
            while (1)
            {
              v24 = *(unsigned __int8 *)(v20 + v19 + v23);
              if (v24 == 10 || v24 == 13)
                break;
              if (v22 == ++v23)
                goto LABEL_28;
            }
            LODWORD(v22) = v23;
          }
LABEL_28:
          LODWORD(v19) = v22 + v19;
        }
        v17 = v19;
      }
      else
      {
        sub_216B4AED0(&v28);
        v15 = sub_216B609C8(v13, v14, a1, v28, 0);
        v16 = sub_216B281C0(v15);
        if (v16)
          v17 = v16 - 1;
        else
          v17 = 0;
      }
      return sub_216B62D74(&v30, v17);
    }
  }
LABEL_25:
  sub_216B4AED0(&v33);
  return v33;
}

uint64_t sub_216B64824(uint64_t a1, _OWORD *a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    *(_OWORD *)j_nullsub_1(a1, a2) = *a2;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

double sub_216B64874@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  _BYTE *v5;
  uint64_t v6;
  double result;
  uint64_t v8[3];
  _QWORD v9[2];
  __n128 v10;

  if (a1)
  {
    j_nullsub_1(&v10, a2);
    v5 = (_BYTE *)sub_216B1E600(a1);
    sub_216B25FA8((uint64_t)v8, v5);
    v9[0] = sub_216B29718(v8, (uint64_t *)&v10);
    v9[1] = v6;
    if (sub_216B27BAC(v9))
      sub_216B64820((uint64_t)a3);
    else
      *(_QWORD *)&result = sub_216B65D40(a3, &v10).n128_u64[0];
  }
  else
  {
    sub_216B64820((uint64_t)a3);
  }
  return result;
}

uint64_t sub_216B6490C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  if ((sub_216B2A390(a2) & 1) != 0)
  {
    v5 = (_OWORD *)j_nullsub_1(a2, v4);
    sub_216B64824(a1, v5);
    v6 = a2;
  }
  else
  {
    v6 = a1;
  }
  sub_216B68084(v6, v4);
  return a1;
}

unint64_t sub_216B64964(uint64_t a1)
{
  return sub_216B60724(a1 + 440);
}

uint64_t sub_216B6497C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B680B0(&v3, a1, a2);
  return v3;
}

uint64_t sub_216B649A8(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;

  v2 = a2;
  *(_DWORD *)sub_216B262E0(a1) = *a2;
  LODWORD(v2) = v2[1];
  *(_DWORD *)sub_216B2C660(a1) = (_DWORD)v2;
  return a1;
}

uint64_t sub_216B649E8(_DWORD *a1, unsigned int a2)
{
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  char v16;
  unsigned int v17;
  uint64_t v18;

  v17 = a2;
  if (sub_216B4B4A8(&v17))
  {
    sub_216B4AED0(&v13);
    v12 = 0;
    v15[0] = sub_216B3A19C((uint64_t)&v13, (uint64_t)&v12);
    sub_216B3A1C8(&v18, v15);
    return v18;
  }
  else
  {
    sub_216B64C00(&v12);
    v13 = sub_216B64BD0((uint64_t)&v17, (uint64_t)&v12);
    v14 = v4;
    sub_216B64B14((uint64_t)(a1 + 148), (uint64_t)&v13, (uint64_t)v15);
    v5 = (_DWORD *)(sub_216B1E600((uint64_t)v15) + 4);
    if (v16)
    {
      sub_216B4AED0(&v12);
      v11 = 0;
      v6 = (_DWORD *)sub_216B606F0((uint64_t)a1, v17, &v11);
      if (!v11)
      {
        v7 = (uint64_t)v6;
        if (sub_216B60840(v6))
        {
          v8 = sub_216B3DBD0(v7);
          v9 = sub_216B62CF0(v8);
        }
        else
        {
          v10 = (unsigned int *)sub_216B3DBD0(v7);
          v9 = sub_216B62D6C(v10);
        }
        v12 = v9;
      }
      if (sub_216B27BAC(&v12))
      {
        v13 = sub_216B60568(a1, v12);
        sub_216B2D784(v5, &v13);
      }
    }
    return *(_QWORD *)v5;
  }
}

uint64_t sub_216B64B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char v11;
  _BYTE v12[16];
  int *v13;

  v13 = 0;
  if (sub_216B68158(a1, (unsigned int *)a2, &v13))
  {
    v6 = v13;
    v7 = sub_216B66E7C(a1);
    sub_216B68190(v12, v6, v7, 1);
    v11 = 0;
  }
  else
  {
    v8 = sub_216B68194(a1, (unsigned int *)a2, (_QWORD *)(a2 + 4), v13);
    v13 = v8;
    v9 = sub_216B66E7C(a1);
    sub_216B68190(v12, v8, v9, 1);
    v11 = 1;
  }
  return sub_216B4F70C((uint64_t)v12, (uint64_t)&v11, a3);
}

uint64_t sub_216B64BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B68140(&v3, a1, a2);
  return v3;
}

int *sub_216B64C04(uint64_t a1, int a2, int a3)
{
  _BYTE v5[16];
  _BYTE v6[16];
  uint64_t v7[2];
  int v8;
  int v9;
  int v10;

  v9 = a3;
  v10 = a2;
  sub_216B3A1F8(&v8, &v10, &v9);
  if (sub_216B64CAC(a1 + 616) <= 0x12B)
    return sub_216B64CB0(a1 + 616, &v8);
  sub_216B64CC8(a1 + 616, &v8, (uint64_t)v7);
  sub_216B64D38(a1 + 616, (uint64_t)v5);
  sub_216B4F784(v6, v5);
  if (sub_216B50AF4(v7, (uint64_t)v6))
    return (int *)(sub_216B1E600((uint64_t)v7) + 8);
  else
    return (int *)(a1 + 640);
}

int *sub_216B64CB0(uint64_t a1, int *a2)
{
  return sub_216B685E8(a1, a2) + 2;
}

uint64_t sub_216B64CC8@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216B6864C(a1, a2, &v8))
    return sub_216B64D38(a1, a3);
  v5 = v8;
  v6 = sub_216B66FEC(a1);
  return sub_216B68A88(a3, v5, v6, 1);
}

uint64_t sub_216B64D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B66FEC(a1);
  v5 = sub_216B66FEC(a1);
  return sub_216B68A88(a2, v4, v5, 1);
}

BOOL sub_216B64D80(_DWORD *a1, int a2, int a3)
{
  _BOOL8 v4;
  int *v6;
  _DWORD *v7;
  _BOOL8 v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  _BYTE v13[16];
  _BYTE v14[16];
  __int128 v15;
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21[34];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = a3;
  v20 = a2;
  if (sub_216B632B8((unsigned int *)&v20, (unsigned int *)&v19))
    return 0;
  v18 = sub_216B60568(a1, v20);
  v17 = sub_216B60568(a1, v19);
  if (!sub_216B4B4A8(&v18) && !sub_216B4B4A8(&v17))
  {
    if (sub_216B4CC88(&v18, &v17))
      return HIDWORD(v18) < HIDWORD(v17);
    v6 = sub_216B64C04((uint64_t)a1, v18, v17);
    if (sub_216B65058(v6, v18, v17))
      return sub_216B65098((uint64_t)v6, HIDWORD(v18), HIDWORD(v17));
    sub_216B65108((uint64_t)v6, v18, v17, (int)v18 < (int)v17);
    sub_216B65114(v21, 0);
    do
      sub_216B65118(v21, (uint64_t)&v18, (uint64_t)v16);
    while (sub_216B651D4(&v18, &v17) && !sub_216B651EC((unsigned int *)&v18, a1));
    sub_216B26D14(v16);
    do
    {
      sub_216B65244((uint64_t)v21, (unsigned int *)&v17, (uint64_t)&v15);
      *(_OWORD *)v16 = v15;
      sub_216B652B4((uint64_t)v21, (uint64_t)v13);
      sub_216B4F784(v14, v13);
    }
    while (sub_216B61E30(v16, (uint64_t)v14) && !sub_216B651EC((unsigned int *)&v17, a1));
    sub_216B652B4((uint64_t)v21, (uint64_t)v14);
    sub_216B4F784(&v15, v14);
    if (sub_216B50AF4(v16, (uint64_t)&v15))
    {
      v7 = (_DWORD *)sub_216B1E600((uint64_t)v16);
      sub_216B2D784(&v18, v7);
    }
    if (sub_216B4CC88(&v18, &v17))
    {
      sub_216B652FC(v6, v18, SHIDWORD(v18), SHIDWORD(v17));
      v8 = sub_216B65098((uint64_t)v6, HIDWORD(v18), HIDWORD(v17));
    }
    else
    {
      sub_216B65308((uint64_t)v6);
      v9 = sub_216B604C8((uint64_t)a1, v18, 0);
      v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      v4 = strcmp("<built-in>", v10) == 0;
      v11 = sub_216B604C8((uint64_t)a1, v17, 0);
      v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      if (v4 == (strcmp("<built-in>", v12) != 0))
      {
LABEL_25:
        sub_216B65354(v21);
        return v4;
      }
      v8 = sub_216B65340(&v18, &v17);
    }
    v4 = v8;
    goto LABEL_25;
  }
  if (!sub_216B4B4A8(&v18))
    return 0;
  return !sub_216B4B4A8(&v17);
}

BOOL sub_216B65058(_DWORD *a1, int a2, int a3)
{
  _BOOL8 result;
  int v5;
  int v6;

  v5 = a3;
  v6 = a2;
  result = sub_216B4CC88(a1, &v6);
  if (result)
    return sub_216B4CC88(a1 + 1, &v5);
  return result;
}

BOOL sub_216B65098(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _DWORD *v6;

  v6 = (_DWORD *)(a1 + 12);
  if (sub_216B651D4((_DWORD *)a1, (_DWORD *)(a1 + 12)))
    a2 = *(_DWORD *)(a1 + 16);
  if (sub_216B651D4((_DWORD *)(a1 + 4), v6))
    a3 = *(_DWORD *)(a1 + 20);
  if (a2 == a3)
    return *(_BYTE *)(a1 + 8) != 0;
  else
    return a2 < a3;
}

uint64_t sub_216B65108(uint64_t result, int a2, int a3, char a4)
{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_BYTE *)(result + 8) = a4;
  return result;
}

uint64_t sub_216B65118@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char v11;
  _BYTE v12[16];
  int *v13;

  v13 = 0;
  if (sub_216B68DF4((uint64_t)a1, (unsigned int *)a2, &v13))
  {
    v6 = v13;
    v7 = sub_216B68C5C((uint64_t)a1);
    sub_216B68E2C(v12, v6, v7, 1);
    v11 = 0;
  }
  else
  {
    v8 = sub_216B68E30(a1, (unsigned int *)a2, (int *)(a2 + 4), v13);
    v13 = v8;
    v9 = sub_216B68C5C((uint64_t)a1);
    sub_216B68E2C(v12, v8, v9, 1);
    v11 = 1;
  }
  return sub_216B4F70C((uint64_t)v12, (uint64_t)&v11, a3);
}

BOOL sub_216B651D4(_DWORD *a1, _DWORD *a2)
{
  return !sub_216B4CC88(a1, a2);
}

BOOL sub_216B651EC(unsigned int *a1, _DWORD *a2)
{
  _BOOL8 v3;
  uint64_t v5;

  v5 = sub_216B649E8(a2, *a1);
  v3 = sub_216B4B4A8(&v5);
  if (!v3)
    sub_216B2D784(a1, &v5);
  return v3;
}

uint64_t sub_216B65244@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216B68DF4(a1, a2, &v8))
    return sub_216B652B4(a1, a3);
  v5 = v8;
  v6 = sub_216B68C5C(a1);
  return sub_216B68E2C(a3, v5, v6, 1);
}

uint64_t sub_216B652B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B68C5C(a1);
  v5 = sub_216B68C5C(a1);
  return sub_216B68E2C(a2, v4, v5, 1);
}

_DWORD *sub_216B652FC(_DWORD *result, int a2, int a3, int a4)
{
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_DWORD *sub_216B65308(uint64_t a1)
{
  _DWORD *result;
  int v3;
  int v4;

  result = sub_216B4AED0(&v4);
  v3 = v4;
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

BOOL sub_216B65340(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t *sub_216B65358(uint64_t *result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(*result + *((unsigned int *)result + 2) + 289) = a3;
  v3 = *result;
  v4 = *((unsigned int *)result + 2);
  *((_DWORD *)result + 2) = v4 + 1;
  *(_QWORD *)(v3 + 8 * v4 + 544) = a2;
  return result;
}

uint64_t sub_216B65384(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B653B8();
  sub_216B2C030((_QWORD *)(v2 + 160));
  sub_216B39B64(a1 + 184, v3);
  return a1;
}

uint64_t sub_216B653BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B3D760(a1, 8);
  sub_216B39B60((_QWORD *)(v2 + 24));
  return a1;
}

_DWORD *sub_216B653EC(_DWORD *a1)
{
  _DWORD *v2;

  v2 = sub_216B4AED0(a1);
  sub_216B4AED0(v2 + 1);
  sub_216B4AED0(a1 + 3);
  return a1;
}

uint64_t sub_216B65420(uint64_t a1)
{
  sub_216B65450(a1 + 184);
  sub_216B3D560(a1 + 160);
  return sub_216B65454(a1);
}

uint64_t sub_216B65460(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B65490(a1, v3);
  return a1;
}

uint64_t sub_216B65490(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    sub_216B65490(result, *a2);
    sub_216B65490(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = j_nullsub_1(a2 + 4, v6);
    sub_216B654F8(v5, v7);
    return sub_216B3A900(v5, a2, 1);
  }
  return result;
}

uint64_t sub_216B654F8(uint64_t a1, uint64_t a2)
{
  return sub_216B65500(a2);
}

uint64_t sub_216B65508(uint64_t a1)
{
  sub_216B65530(a1 + 8);
  return a1;
}

uint64_t sub_216B65534(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B65570(&v3);
  return a1;
}

uint64_t *sub_216B65570(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B655D4(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B655E0(v6, v8);
    return (uint64_t *)sub_216B655DC(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B655D4(uint64_t *a1)
{
  return sub_216B6561C((uint64_t)a1, *a1);
}

unint64_t sub_216B655E0(_QWORD *a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 2);
}

uint64_t sub_216B6561C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = j_nullsub_1(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 20;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B65680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 20 * a3, 4);
}

uint64_t sub_216B65694(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B65724(v5, a1 + 24);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  sub_216B3A034(a1 + 24);
  return a1;
}

uint64_t sub_216B65724(unsigned int *a1, uint64_t a2)
{
  sub_216B1E4E0(a1);
  return nullsub_1(a2, a1);
}

_QWORD *sub_216B65758(_QWORD *a1)
{
  std::string *v2;
  std::string *v3;
  void *v4;

  v2 = (std::string *)sub_216B1E600((uint64_t)a1);
  v3 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B657AC(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

void sub_216B657AC(std::string *a1, std::string *a2)
{
  std::string *v2;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v2 = (std::string *)((char *)v2 - 40);
      j_std::string::~string(v2);
    }
    while (v2 != a1);
  }
}

uint64_t sub_216B657E8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_216B3D818(a1);
  if ((result & 1) == 0)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(*(_QWORD *)a1 + v4);
        if (v7)
        {
          result = sub_216B25120();
          if (v7 != result)
            result = sub_216B65724(*(unsigned int **)(v6 + v4), a1 + 24);
        }
        *(_QWORD *)(v6 + v4) = 0;
        v4 += 8;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

_QWORD *sub_216B6586C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B65490(a1, v3);
  *(_QWORD *)sub_216B2C144(a1, v4) = 0;
  v6 = sub_216B3A914(a1, v5);
  *(_QWORD *)nullsub_1(a1, v7) = v6;
  result = (_QWORD *)sub_216B3A914(a1, v8);
  *result = 0;
  return result;
}

uint64_t sub_216B658C8(uint64_t a1, uint64_t a2)
{
  char v4;

  sub_216B65914(a1 + 8, 0, 0);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = *(_BYTE *)(a1 + 44);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = v4 & 0xFE;
  return a1;
}

uint64_t *sub_216B65918(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  sub_216B6593C(a1, a2, a3);
  return a1;
}

uint64_t sub_216B6593C(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = nullsub_1(a2, a2);
  *a1 = result | a3;
  return result;
}

uint64_t sub_216B65970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  sub_216B65914(a1 + 8, 0, 0);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = *(_BYTE *)(a1 + 44);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = v6 & 0xFE;
  return a1;
}

void sub_216B659C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B65A28(v7, v4);
  }
}

void sub_216B65A28(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B65A48(a2);
    j__free(v2);
  }
}

uint64_t sub_216B65A4C(uint64_t a1)
{
  sub_216B5EAB8(a1 + 24);
  return sub_216B5F5B0(a1);
}

uint64_t sub_216B65A74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B5F9A0(a1, 0);
  sub_216B5E8E4(v2 + 24, 0);
  return a1;
}

uint64_t sub_216B65AA8(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B50ED0();
    v10 = sub_216B512E8();
    v11 = v8 - 1;
    v12 = sub_216B52378(a2) & (v8 - 1);
    v13 = (uint64_t *)(v6 + 16 * v12);
    if (sub_216B2A5FC(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (!sub_216B2A5FC(*v13, v9))
      {
        if (sub_216B2A5FC(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (uint64_t *)(v6 + 16 * v12);
        ++v15;
        if (sub_216B2A5FC(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_13:
  *a3 = v13;
  return result;
}

uint64_t sub_216B65BC8()
{
  uint64_t v0;

  sub_216B65BE0();
  return v0;
}

uint64_t sub_216B65BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (char *)j_j_nullsub_1(a3);
  v9 = sub_216B65C74((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B65C74(int a1, const void *a2, uint64_t a3, char *__dst)
{
  return sub_216B65C84(a2, a3, __dst);
}

uint64_t sub_216B65C84(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216B65CD8(__dst, a1, (a2 - (uint64_t)a1) >> 2);
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

void *sub_216B65CD8(void *__dst, const void *a2, uint64_t a3)
{
  if (a3)
    memmove(__dst, a2, 4 * a3);
  return __dst;
}

uint64_t sub_216B65D08(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  sub_216B4AED0((_DWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_216B65D30(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a5;
  return result;
}

uint64_t sub_216B65D44(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  return result;
}

__n128 sub_216B65D4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[1].n128_u8[0] = 1;
  result = *a2;
  *a1 = *a2;
  return result;
}

_DWORD *sub_216B65D60(_DWORD *a1)
{
  _DWORD *result;

  result = sub_216B4AED0(a1);
  result[1] = 0;
  return result;
}

BOOL sub_216B65D78()
{
  return sub_216B4D0A4() == 0;
}

uint64_t sub_216B65D94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B5F664(a1);
  v3 = sub_216B5F664(a1);
  sub_216B65DE0(&v5, v2, v3, 1);
  return v5;
}

uint64_t sub_216B65DE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B65E14((uint64_t **)a1);
  return a1;
}

uint64_t sub_216B65E14(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = sub_216B50F08();
  result = sub_216B512EC();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B2A5FC(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 2;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t sub_216B65E8C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v5;

  v5 = 0;
  result = sub_216B65AA8(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t sub_216B65EC4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B65FB0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t *)(a1 + 24), *(unsigned int *)(a2 + 16));
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B65FB0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v13);
  v7 = sub_216B34088();
  v8 = sub_216B2663C(a3, (v6 + 9), v7);
  v9 = sub_216B5FF34(v8, v6, a4);
  v10 = (void *)sub_216B3DBD0(v9);
  v11 = (const void *)sub_216B1E600((uint64_t)v13);
  memcpy(v10, v11, v6);
  *((_BYTE *)v10 + v6) = 0;
  return v8;
}

uint64_t sub_216B66040(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  uint64_t *v19;
  uint64_t v20;

  v9 = sub_216B66110(a1, &v19, a2);
  v10 = *v9;
  v18 = 0;
  if (!v10)
  {
    v11 = v9;
    sub_216B661CC(a1, a3, a4, a5, (uint64_t)v17);
    v12 = v19;
    v14 = (_QWORD *)sub_216B25CA8((uint64_t)v17, v13);
    sub_216B3BA48(a1, (uint64_t)v12, v11, v14);
    v10 = sub_216B28054((uint64_t)v17, v15);
    v18 = 1;
    sub_216B6627C(v17);
  }
  sub_216B20C64(v17, v10);
  sub_216B31104(&v20, v17, &v18);
  return v20;
}

uint64_t *sub_216B66110(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_216B3A8D8(a1, (uint64_t)a2);
  v8 = sub_216B3BAD4(a1, v7);
  if (v6)
  {
    v10 = (uint64_t *)v8;
    do
    {
      while (1)
      {
        v11 = (uint64_t *)v6;
        v12 = sub_216B2C144(a1, v9);
        v13 = v6 + 32;
        if (!sub_216B66280(v12, a3, v13))
          break;
        v6 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_10;
      }
      v14 = sub_216B2C144(a1, v9);
      if (!sub_216B662B4(v14, v13, a3))
        break;
      v10 = v11 + 1;
      v6 = v11[1];
    }
    while (v6);
  }
  else
  {
    v11 = (uint64_t *)sub_216B3A914(a1, v9);
    v10 = v11;
  }
LABEL_10:
  *a2 = v11;
  return v10;
}

uint64_t sub_216B661CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = sub_216B3A8F0(a1, a2);
  v10 = sub_216B3BAD8(v9, 1);
  sub_216B3BADC((uint64_t)&v18, v9, 0);
  v11 = sub_216B3BAE0(a5, v10);
  v13 = sub_216B25CA8(v11, v12);
  v15 = j_nullsub_1(v13 + 32, v14);
  sub_216B662F4(v9, v15, a2, a3, a4);
  result = sub_216B3BAE8(a5, v16);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL sub_216B66280(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;

  v5 = (_DWORD *)nullsub_1(a3, a2);
  return sub_216B662E8(a1, a2, v5);
}

BOOL sub_216B662B4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v5;

  v5 = (_DWORD *)nullsub_1(a2, a2);
  return sub_216B662E8(a1, v5, a3);
}

BOOL sub_216B662E8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return sub_216B65340(a2, a3);
}

uint64_t sub_216B662F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_216B66304(a2, *a4);
}

uint64_t sub_216B66304(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  return sub_216B6632C(a1, &v4, &v3);
}

uint64_t sub_216B66330(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)sub_216B262E0(a2);
  sub_216B2C030((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_216B66368(uint64_t a1)
{
  sub_216B66390(a1, 0);
  return a1;
}

_QWORD *sub_216B66390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  result = (_QWORD *)j_nullsub_1(a1, v5);
  *result = a2;
  if (v4)
  {
    v8 = sub_216B3BC10(a1, v7);
    return (_QWORD *)sub_216B663EC(v8, v4);
  }
  return result;
}

uint64_t sub_216B663EC(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)result;
  if (*(_BYTE *)(result + 8))
  {
    v4 = *(_QWORD *)result;
    v5 = j_nullsub_1(a2 + 32, a2);
    result = sub_216B654F8(v4, v5);
  }
  if (a2)
    return sub_216B3A900(*v3, a2, 1);
  return result;
}

_QWORD *sub_216B66454(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B66570(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = (__n128 *)nullsub_1(v10, v6);
  sub_216B66574(v5, v7, a2);
  v10 += 20;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B664C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, (uint64_t)a2);
  v5 = sub_216B66624(a1);
  v6 = sub_216B665AC(a1, v5 + 1);
  v7 = sub_216B66624(a1);
  sub_216B66640(v12, v6, v7, v4);
  v9 = (__n128 *)nullsub_1(v13, v8);
  sub_216B66574(v4, v9, a2);
  v13 += 20;
  sub_216B66644(a1, v12);
  v10 = a1[1];
  sub_216B66730(v12);
  return v10;
}

_QWORD *sub_216B66578(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 20 * a3;
  return result;
}

__n128 sub_216B66598(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u32[0] = a3[1].n128_u32[0];
  *a2 = result;
  return result;
}

unint64_t sub_216B665AC(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216B66734((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B655E0(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

unint64_t sub_216B66624(_QWORD *a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2);
}

uint64_t sub_216B66644(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216B66868();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B66624(a1);
  return nullsub_1(a1, v10);
}

uint64_t sub_216B66734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216B66770(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216B66774()
{
  return 0xCCCCCCCCCCCCCCCLL;
}

uint64_t *sub_216B66780(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B6680C(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 20 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 20 * v9;
  return a1;
}

uint64_t sub_216B6680C(uint64_t a1, unint64_t a2)
{
  return sub_216B66830(a1, a2);
}

uint64_t sub_216B66830(uint64_t a1, unint64_t a2)
{
  if (sub_216B66770(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(20 * a2, 4);
}

uint64_t sub_216B66868()
{
  return sub_216B66884();
}

uint64_t sub_216B66884()
{
  _QWORD v1[3];

  sub_216B668A8(v1);
  return v1[2];
}

uint64_t sub_216B668B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B6697C(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216B6697C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  while (sub_216B2C76C((uint64_t)v15, (uint64_t)v14))
  {
    v9 = sub_216B66A10((uint64_t)v15, v8);
    v10 = sub_216B6114C((uint64_t)v13);
    v11 = *(_DWORD *)(v9 + 16);
    *(_OWORD *)v10 = *(_OWORD *)v9;
    *(_DWORD *)(v10 + 16) = v11;
    sub_216B66A34((uint64_t)v15);
    sub_216B66A34((uint64_t)v13);
  }
  return sub_216B26D04((uint64_t)v15, (uint64_t)v13, a7);
}

uint64_t sub_216B66A10(uint64_t a1, uint64_t a2)
{
  nullsub_1(a1, a2);
  return sub_216B6114C(a1);
}

uint64_t sub_216B66A34(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 20;
  return result;
}

uint64_t *sub_216B66A44(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_216B66AA0((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B66AA8(a1, v4);
    sub_216B655DC(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B66AA0(uint64_t a1)
{
  return sub_216B66AE4(a1, *(_QWORD *)(a1 + 8));
}

unint64_t sub_216B66AA8(_QWORD *a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 2);
}

uint64_t sub_216B66AE8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 20;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = j_nullsub_1(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B66B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  char v5;

  return sub_216B66B74(a1, a2, a3, (uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_216B66B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v8 = a1;
  v17 = a1;
  v9 = sub_216B66C30();
  if (v9)
  {
    v10 = v9;
    do
    {
      v11 = sub_216B3556C(v10);
      sub_216B66C34(&v17, v11);
      v16 = v12;
      v13 = sub_216B1E600((uint64_t)&v16);
      v14 = sub_216B3557C(a5, v13);
      if ((sub_216B66C3C(a4, a3, v14) & 1) == 0)
      {
        v17 = *sub_216B66C40(&v16);
        v11 = v10 + ~v11;
      }
      v10 = v11;
    }
    while (v11);
    return v17;
  }
  return v8;
}

void sub_216B66C34(uint64_t *a1, uint64_t a2)
{
  sub_216B66CBC(*a1, a2);
}

_QWORD *sub_216B66C40(_QWORD *result)
{
  *result += 20;
  return result;
}

unint64_t sub_216B66C54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return sub_216B66C7C((uint64_t)&v3, (uint64_t)&v4);
}

unint64_t sub_216B66C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return 0xCCCCCCCCCCCCCCCDLL * ((v3 - sub_216B1E600(a2)) >> 2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216B66CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_216B66CE4((uint64_t)&v2, a2);
}

uint64_t sub_216B66CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B66D10(a1, v3);
}

_QWORD *sub_216B66D14(_QWORD *result, uint64_t a2)
{
  *result += 20 * a2;
  return result;
}

BOOL sub_216B66D28(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return sub_216B66D34(*a2, a3);
}

BOOL sub_216B66D34(unsigned int a1, unsigned int *a2)
{
  return *a2 > a1;
}

uint64_t sub_216B66D44(uint64_t a1)
{
  return sub_216B66D4C(a1, 8u);
}

uint64_t sub_216B66D4C(uint64_t a1, unsigned int a2)
{
  return sub_216B21134(a1, 24 * a2);
}

uint64_t sub_216B66D58(uint64_t a1)
{
  return sub_216B66D4C(a1, 0);
}

uint64_t sub_216B66D60(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B66D90(v4, v2);
  return a1;
}

uint64_t sub_216B66D90(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B66DC8(a1, a2);
  if ((_DWORD)result)
    return sub_216B66E14(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL sub_216B66DC8(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
    v4 = sub_216B1D1D4(12 * a2);
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a2 != 0;
}

uint64_t sub_216B66E14(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B66E78();
  v3 = (_DWORD *)sub_216B262E0(a1);
  result = sub_216B66E7C(a1);
  while (v3 != (_DWORD *)result)
  {
    *v3 = v2;
    v3 += 3;
  }
  return result;
}

uint64_t sub_216B66E7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 12 * sub_216B4CBC0(a1);
}

uint64_t sub_216B66EB0()
{
  unsigned int v1;

  sub_216B4AED0(&v1);
  return v1;
}

uint64_t sub_216B66ED4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B66F04(v4, v2);
  return a1;
}

uint64_t sub_216B66F04(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B66F3C(a1, a2);
  if ((_DWORD)result)
    return sub_216B66F84(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL sub_216B66F3C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
    v4 = sub_216B1D1D4(32 * a2);
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a2 != 0;
}

uint64_t sub_216B66F84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  v2 = sub_216B4CB70(a1, 0);
  v3 = sub_216B66FE8(v2);
  v4 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B66FEC(a1);
  while (v4 != (_QWORD *)result)
  {
    *v4 = v3;
    v4 += 4;
  }
  return result;
}

uint64_t sub_216B66FEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 32 * sub_216B4CBC0(a1);
}

uint64_t sub_216B67020()
{
  int v1;
  int v2;

  v2 = sub_216B66EB0();
  v1 = sub_216B66EB0();
  return sub_216B3A19C((uint64_t)&v2, (uint64_t)&v1);
}

uint64_t sub_216B67054(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B67084(v4, v2);
  return a1;
}

uint64_t sub_216B67084(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B5FA0C(a1, a2);
  if ((_DWORD)result)
    return sub_216B670BC(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_216B670BC(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B66E78();
  v3 = (_DWORD *)sub_216B262E0(a1);
  result = sub_216B5F664(a1);
  while (v3 != (_DWORD *)result)
  {
    *v3 = v2;
    v3 += 4;
  }
  return result;
}

uint64_t sub_216B67120(uint64_t a1)
{
  return sub_216B2F784(a1, 2u);
}

uint64_t sub_216B67128(uint64_t a1)
{
  sub_216B659C8(a1, 0);
  return a1;
}

void **sub_216B67150(void **a1)
{
  sub_216B6717C((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B6717C(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  int *v5;
  int *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B66E78();
    v4 = sub_216B67208();
    v5 = (int *)sub_216B262E0(a1);
    result = sub_216B66E7C(a1);
    if (v5 != (int *)result)
    {
      v6 = (int *)result;
      do
      {
        result = sub_216B6720C(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B6720C(*v5, v4);
        v5 += 3;
      }
      while (v5 != v6);
    }
  }
  return result;
}

BOOL sub_216B6720C(int a1, int a2)
{
  int v3;
  int v4;

  v4 = a1;
  v3 = a2;
  return sub_216B4CC88(&v4, &v3);
}

uint64_t sub_216B6723C()
{
  return sub_216B62210(0xFFFFFFFFLL);
}

void **sub_216B67244(void **a1)
{
  sub_216B67270((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B67270(uint64_t a1)
{
  uint64_t result;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v6 = sub_216B66FE8(result);
    v5 = sub_216B672F4();
    v3 = (int *)sub_216B262E0(a1);
    result = sub_216B66FEC(a1);
    if (v3 != (int *)result)
    {
      v4 = (int *)result;
      do
      {
        result = sub_216B672F8(v3, (int *)&v6);
        if ((result & 1) == 0)
          result = sub_216B672F8(v3, (int *)&v5);
        v3 += 8;
      }
      while (v3 != v4);
    }
  }
  return result;
}

BOOL sub_216B672F8(int *a1, int *a2)
{
  _BOOL8 result;

  result = sub_216B6720C(*a1, *a2);
  if (result)
    return sub_216B6720C(a1[1], a2[1]);
  return result;
}

uint64_t sub_216B6733C()
{
  int v1;
  int v2;

  v2 = sub_216B67238();
  v1 = sub_216B67238();
  return sub_216B3A19C((uint64_t)&v2, (uint64_t)&v1);
}

uint64_t sub_216B67370(uint64_t a1)
{
  sub_216B67398(a1, 0);
  return a1;
}

void sub_216B67398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B673F4(v7, v4);
  }
}

void sub_216B673F4(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B608AC(a2);
    j__free(v2);
  }
}

void **sub_216B67414(void **a1)
{
  sub_216B67440((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B67440(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  int *v5;
  int *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B66E78();
    v4 = sub_216B67208();
    v5 = (int *)sub_216B262E0(a1);
    result = sub_216B5F664(a1);
    if (v5 != (int *)result)
    {
      v6 = (int *)result;
      do
      {
        result = sub_216B6720C(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B6720C(*v5, v4);
        v5 += 4;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t sub_216B674CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (sub_216B65D78())
    return sub_216B67538(a1, a2);
  v5 = sub_216B262E0(a1);
  v6 = sub_216B5F664(a1);
  return sub_216B676C4(a2, v5, v6, 0);
}

uint64_t sub_216B67538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B5F664(a1);
  v5 = sub_216B5F664(a1);
  return sub_216B676C4(a2, v4, v5, 1);
}

int **sub_216B67584(int **a1)
{
  *a1 += 4;
  sub_216B676F8(a1);
  return a1;
}

uint64_t sub_216B675B4(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;

  if (((uint64_t (*)(void))sub_216B4D0A4)() || (result = sub_216B4D0AC(a1), (_DWORD)result))
  {
    v3 = sub_216B4D0A4(a1);
    if (sub_216B4CBC0(a1) <= 4 * v3 || sub_216B4CBC0(a1) < 0x41)
    {
      v4 = sub_216B66E78();
      v5 = sub_216B67208();
      v6 = (int *)sub_216B262E0(a1);
      v7 = sub_216B5F664(a1);
      if (v6 != (int *)v7)
      {
        v8 = (int *)v7;
        do
        {
          if (!sub_216B6720C(*v6, v4))
          {
            if (!sub_216B6720C(*v6, v5))
              sub_216B67818(a1);
            *v6 = v4;
          }
          v6 += 4;
        }
        while (v6 != v8);
      }
      return sub_216B4CB70(a1, 0);
    }
    else
    {
      return sub_216B67814(a1);
    }
  }
  return result;
}

uint64_t sub_216B676C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B676F8((int **)a1);
  return a1;
}

uint64_t sub_216B676F8(int **a1)
{
  int v2;
  uint64_t result;
  int *v4;
  int v5;
  int *v6;

  v2 = sub_216B66EB0();
  result = sub_216B67238();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B6720C(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B6720C(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 4;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t sub_216B6777C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B677AC(a1, v3);
  return a1;
}

uint64_t sub_216B677AC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    sub_216B677AC(result, *a2);
    sub_216B677AC(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = j_nullsub_1((char *)a2 + 28, v6);
    sub_216B3A8F8(v5, v7);
    return sub_216B4CA28(v5, (uint64_t)a2, 1);
  }
  return result;
}

uint64_t sub_216B67818(uint64_t a1)
{
  int v2;

  v2 = sub_216B4D0A4() - 1;
  return sub_216B4CB6C(a1, v2);
}

uint64_t sub_216B67840(uint64_t a1)
{
  unsigned int v2;
  int v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 8);
  sub_216B67440(a1);
  if (v2)
  {
    v5 = 64;
    v4 = 1 << (sub_216B2CA00(v2) + 1);
    v2 = *(_DWORD *)sub_216B4ED68(&v5, &v4);
  }
  if (v2 == *(_DWORD *)(a1 + 16))
    return sub_216B670BC(a1);
  j__free(*(void **)a1);
  return sub_216B67084(a1, v2);
}

uint64_t *sub_216B678CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t *v6;

  v6 = 0;
  if (sub_216B65E8C(a1, a2, &v6))
    return v6;
  v5 = 0;
  return sub_216B67924(a1, a2, &v5, v6);
}

uint64_t *sub_216B67924(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;

  result = sub_216B6795C(a1, a2, a4);
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t *sub_216B6795C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B67A44(a1, (2 * v6));
    sub_216B65E8C(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B67A44(a1, v7);
    sub_216B65E8C(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B50ED0();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B67A48(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B5FA0C(a1, *v5);
  if (v4)
  {
    sub_216B67AD0(a1, v4, &v4[2 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B5FA54(a1);
  }
}

uint64_t sub_216B67AD0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;

  sub_216B5FA54(a1);
  v6 = sub_216B50ED0();
  result = sub_216B512E8();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B65E8C(a1, a2, &v9);
          *v9 = *a2;
          v9[1] = a2[1];
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

char *sub_216B67B88(const void **a1, uint64_t a2)
{
  return sub_216B203B4(a1, 24 * a2, 24);
}

uint64_t sub_216B67B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v11;
  _BYTE v12[16];
  uint64_t *v13;

  v13 = 0;
  if (sub_216B65E8C(a1, (uint64_t *)a2, &v13))
  {
    v6 = v13;
    v7 = sub_216B5F664(a1);
    sub_216B65DE0(v12, v6, v7, 1);
    v11 = 0;
  }
  else
  {
    v8 = sub_216B67C88(a1, (uint64_t *)a2, (_BYTE *)(a2 + 8), v13);
    v13 = v8;
    v9 = sub_216B5F664(a1);
    sub_216B65DE0(v12, v8, v9, 1);
    v11 = 1;
  }
  return sub_216B4F70C((uint64_t)v12, (uint64_t)&v11, a3);
}

uint64_t sub_216B67C54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_216B67EEC(&v3, a1, a2);
  return v3;
}

uint64_t *sub_216B67C88(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t *a4)
{
  uint64_t *result;

  result = sub_216B67CC0(a1, a2, a4);
  *result = *a2;
  *((_BYTE *)result + 8) = *a3;
  return result;
}

uint64_t *sub_216B67CC0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B67DA8(a1, (2 * v6));
    sub_216B65E8C(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B67DA8(a1, v7);
    sub_216B65E8C(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B50ED0();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B67DAC(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(void **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B5FA0C(a1, *v5);
  if (v4)
  {
    sub_216B67E34(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    j__free(v4);
  }
  else
  {
    sub_216B5FA54(a1);
  }
}

uint64_t sub_216B67E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  sub_216B5FA54(a1);
  v6 = sub_216B50ED0();
  result = sub_216B512E8();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*(_QWORD *)a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*(_QWORD *)a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B65E8C(a1, (uint64_t *)a2, &v9);
          *(_QWORD *)v9 = *(_QWORD *)a2;
          *(_BYTE *)(v9 + 8) = *(_BYTE *)(a2 + 8);
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 16;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216B67EF0(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = *a3;
  return result;
}

uint64_t sub_216B67F04(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_216B67F18(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B67F40();
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t sub_216B67F48(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char v4;
  char v5;

  v4 = 0;
  return sub_216B67F70(a1, a2, a3, (uint64_t)&v5, (uint64_t)&v4);
}

uint64_t sub_216B67F70(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _BOOL4 v13;
  uint64_t v15;

  v9 = sub_216B68018();
  if (v9)
  {
    v10 = v9;
    do
    {
      v11 = sub_216B3556C(v10);
      v15 = a1;
      sub_216B6801C(&v15, v11);
      v12 = (_DWORD *)sub_216B3557C(a5, v15);
      v13 = sub_216B68020(a4, v12, a3);
      if (v13)
        v10 += ~v11;
      else
        v10 = v11;
      if (v13)
        a1 = v15 + 4;
    }
    while (v10);
  }
  return a1;
}

_QWORD *sub_216B68024(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B68050(a1, v3);
}

_QWORD *sub_216B68050(_QWORD *result, uint64_t a2)
{
  *result += 4 * a2;
  return result;
}

uint64_t sub_216B68060(uint64_t a1, uint64_t a2)
{
  sub_216B68084(a1, a2);
  return a1;
}

uint64_t sub_216B68084(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 16))
  {
    v2 = result;
    result = j_nullsub_1(result, a2);
    *(_BYTE *)(v2 + 16) = 0;
  }
  return result;
}

uint64_t sub_216B680B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)a1;
  v2 = *a1;
  if (v2)
    return sub_216B68108(v2);
  for (; sub_216B3BD5C(v1); v1 = sub_216B2037C(v1))
    ;
  return sub_216B2037C(v1);
}

uint64_t sub_216B68108(uint64_t a1)
{
  uint64_t v1;

  do
  {
    v1 = a1;
    a1 = *(_QWORD *)(a1 + 8);
  }
  while (a1);
  return v1;
}

uint64_t sub_216B6811C(unsigned int a1)
{
  unsigned int v2;

  v2 = a1;
  return sub_216B1E4E0(&v2);
}

uint64_t sub_216B68144(uint64_t result, _DWORD *a2, _QWORD *a3)
{
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 4) = *a3;
  return result;
}

uint64_t sub_216B68158(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;
  int *v5;

  v5 = 0;
  result = sub_216B681CC(a1, a2, &v5);
  *a3 = v5;
  return result;
}

int *sub_216B68194(uint64_t a1, unsigned int *a2, _QWORD *a3, int *a4)
{
  int *result;

  result = sub_216B683B0(a1, a2, a4);
  *result = *a2;
  *(_QWORD *)(result + 1) = *a3;
  return result;
}

uint64_t sub_216B681CC(uint64_t a1, unsigned int *a2, int **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;
  int **v16;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B66E78();
    v10 = sub_216B67208();
    v11 = v8 - 1;
    v12 = sub_216B682FC(a2) & (v8 - 1);
    v13 = (int *)(v6 + 12 * v12);
    if (sub_216B6720C(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v16 = a3;
      v14 = 0;
      v15 = 1;
      while (!sub_216B6720C(*v13, v9))
      {
        if (sub_216B6720C(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (int *)(v6 + 12 * v12);
        ++v15;
        if (sub_216B6720C(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
LABEL_13:
      a3 = v16;
    }
  }
  else
  {
    v13 = 0;
  }
  *a3 = v13;
  return result;
}

uint64_t sub_216B682FC(unsigned int *a1)
{
  return sub_216B6811C(*a1);
}

uint64_t sub_216B68304(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B68334((int **)a1);
  return a1;
}

uint64_t sub_216B68334(int **a1)
{
  int v2;
  uint64_t result;
  int *v4;
  int v5;
  int *v6;

  v2 = sub_216B66EB0();
  result = sub_216B67238();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B6720C(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B6720C(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 3;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

int *sub_216B683B0(uint64_t a1, unsigned int *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B6849C(a1, (2 * v6));
    sub_216B68158(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B6849C(a1, v7);
    sub_216B68158(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B66E78();
  if (!sub_216B6720C(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B684A0(uint64_t a1, int a2)
{
  unsigned int v3;
  void *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(void **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B66DC8(a1, *v5);
  if (v4)
  {
    sub_216B6852C(a1, (uint64_t)v4, (uint64_t)v4 + 12 * v3);
    j__free(v4);
  }
  else
  {
    sub_216B66E14(a1);
  }
}

uint64_t sub_216B6852C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  sub_216B66E14(a1);
  v6 = sub_216B66E78();
  result = sub_216B67208();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B6720C(*(_DWORD *)a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B6720C(*(_DWORD *)a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B68158(a1, (unsigned int *)a2, &v9);
          *(_DWORD *)v9 = *(_DWORD *)a2;
          *(_QWORD *)(v9 + 4) = *(_QWORD *)(a2 + 4);
          result = sub_216B4D0B0(a1);
        }
      }
      a2 += 12;
    }
    while (a2 != a3);
  }
  return result;
}

int *sub_216B685E8(uint64_t a1, int *a2)
{
  _QWORD v5[3];
  int *v6;

  v6 = 0;
  if (sub_216B6864C(a1, a2, &v6))
    return v6;
  memset(v5, 0, sizeof(v5));
  sub_216B61790(v5);
  return sub_216B68684(a1, a2, (uint64_t)v5, v6);
}

uint64_t sub_216B6864C(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t result;
  int *v5;

  v5 = 0;
  result = sub_216B686D4(a1, a2, &v5);
  *a3 = v5;
  return result;
}

int *sub_216B68684(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int *v6;
  uint64_t v7;

  v6 = sub_216B68860(a1, a2, a4);
  sub_216B2D784(v6, a2);
  v7 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 2) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 3) = v7;
  return v6;
}

uint64_t sub_216B686D4(uint64_t a1, int *a2, int **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v15 = sub_216B66FE8();
    v14 = sub_216B672F4();
    v9 = v8 - 1;
    v10 = sub_216B687E4(a2) & (v8 - 1);
    v11 = (int *)(v6 + 32 * v10);
    if (sub_216B672F8(a2, v11))
    {
LABEL_8:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (!sub_216B672F8(v11, (int *)&v15))
      {
        if (sub_216B672F8(v11, (int *)&v14) && v12 == 0)
          v12 = v11;
        v10 = ((_DWORD)v10 + v13) & v9;
        v11 = (int *)(v6 + 32 * v10);
        ++v13;
        if (sub_216B672F8(a2, v11))
          goto LABEL_8;
      }
      result = 0;
      if (v12)
        v11 = v12;
    }
    *a3 = v11;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_216B687E8(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = sub_216B6811C(*a1);
  v3 = sub_216B6811C(a1[1]);
  return sub_216B68820(v2, v3);
}

uint64_t sub_216B68820(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (a2 | (unint64_t)(a1 << 32)) + ~((unint64_t)a2 << 32);
  v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ ((_DWORD)v4 + ~((_DWORD)v4 << 27));
}

int *sub_216B68860(uint64_t a1, int *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int *v11;

  v11 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B68948(a1, (2 * v6));
    sub_216B6864C(a1, a2, &v11);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B68948(a1, v7);
    sub_216B6864C(a1, a2, &v11);
  }
  v8 = sub_216B4D0B0(a1);
  v10 = sub_216B66FE8(v8);
  if (!sub_216B672F8(v11, (int *)&v10))
    sub_216B4D0D8(a1);
  return v11;
}

void sub_216B6894C(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(void **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B66F3C(a1, *v5);
  if (v4)
  {
    sub_216B689D4(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    j__free(v4);
  }
  else
  {
    sub_216B66F84(a1);
  }
}

uint64_t sub_216B689D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_216B66F84(a1);
  v12 = sub_216B66FE8(v6);
  result = sub_216B672F4();
  v11 = result;
  while (a2 != a3)
  {
    result = sub_216B672F8((int *)a2, (int *)&v12);
    if ((result & 1) == 0)
    {
      result = sub_216B672F8((int *)a2, (int *)&v11);
      if ((result & 1) == 0)
      {
        v10 = 0;
        sub_216B6864C(a1, (int *)a2, &v10);
        sub_216B2D784(v10, (_DWORD *)a2);
        v8 = v10;
        v9 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(v10 + 2) = *(_OWORD *)(a2 + 8);
        *((_QWORD *)v8 + 3) = v9;
        result = sub_216B4D0B0(a1);
      }
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_216B68A8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B68ABC((int **)a1);
  return a1;
}

int *sub_216B68ABC(int **a1)
{
  int *result;
  int *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_216B67020();
  v4 = sub_216B6733C();
  result = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if (!sub_216B672F8(result, (int *)&v5))
      {
        result = (int *)sub_216B672F8(*a1, (int *)&v4);
        if (!(_DWORD)result)
          break;
      }
      v3 = a1[1];
      result = *a1 + 8;
      *a1 = result;
    }
    while (result != v3);
  }
  return result;
}

uint64_t sub_216B68B2C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int *v4;

  v2 = a2;
  v4 = (int *)nullsub_1(a1, a2);
  sub_216B68B5C(v4, v2);
  return a1;
}

uint64_t sub_216B68B5C(int *a1, unsigned int a2)
{
  int v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  *a1 |= 1u;
  if (a2 >= 0x11)
  {
    *a1 = v3 & 0xFFFFFFFE;
    v5 = (_QWORD *)sub_216B68BC0((uint64_t)a1);
    *v5 = sub_216B68BC4((uint64_t)a1, a2);
    v5[1] = v6;
  }
  return sub_216B68BEC(a1);
}

uint64_t sub_216B68BC4(uint64_t a1, unsigned int a2)
{
  return sub_216B1D1D4(8 * a2);
}

uint64_t sub_216B68BEC(int *a1)
{
  int v2;
  _DWORD *v3;
  uint64_t result;

  sub_216B68C50(a1, 0);
  sub_216B68C54((uint64_t)a1, 0);
  v2 = sub_216B66E78();
  v3 = (_DWORD *)sub_216B68C58(a1);
  result = sub_216B68C5C((uint64_t)a1);
  while (v3 != (_DWORD *)result)
  {
    *v3 = v2;
    v3 += 2;
  }
  return result;
}

uint64_t sub_216B68C5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B68C58();
  return v2 + 8 * sub_216B68CD0(a1);
}

int *sub_216B68C8C(int *result, int a2)
{
  *result = *result & 1 | (2 * a2);
  return result;
}

uint64_t sub_216B68C9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t sub_216B68CA8(_BYTE *a1)
{
  if ((*a1 & 1) != 0)
    return sub_216B3DBD0((uint64_t)a1);
  else
    return *(_QWORD *)sub_216B3DBD0((uint64_t)a1);
}

uint64_t sub_216B68CD4(_BYTE *a1)
{
  if ((*a1 & 1) != 0)
    return 16;
  else
    return *(unsigned int *)(sub_216B3DBD0((uint64_t)a1) + 8);
}

_BYTE *sub_216B68CFC(_BYTE *a1)
{
  sub_216B68D28((uint64_t)a1);
  sub_216B68DB4(a1);
  return a1;
}

uint64_t sub_216B68D28(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  int *v5;
  int *v6;

  result = sub_216B68CD0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B66E78();
    v4 = sub_216B67208();
    v5 = (int *)sub_216B68C58(a1);
    result = sub_216B68C5C(a1);
    if (v5 != (int *)result)
    {
      v6 = (int *)result;
      do
      {
        result = sub_216B6720C(*v5, v3);
        if ((result & 1) == 0)
          result = sub_216B6720C(*v5, v4);
        v5 += 2;
      }
      while (v5 != v6);
    }
  }
  return result;
}

_BYTE *sub_216B68DB4(_BYTE *result)
{
  uint64_t v1;
  void **v2;

  if ((*result & 1) == 0)
  {
    v1 = (uint64_t)result;
    v2 = (void **)sub_216B68BC0((uint64_t)result);
    j__free(*v2);
    return (_BYTE *)sub_216B68BC0(v1);
  }
  return result;
}

uint64_t sub_216B68DF4(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;
  int *v5;

  v5 = 0;
  result = sub_216B68E68(a1, a2, &v5);
  *a3 = v5;
  return result;
}

int *sub_216B68E30(int *a1, unsigned int *a2, int *a3, int *a4)
{
  int *result;

  result = sub_216B6903C(a1, a2, a4);
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_216B68E68(uint64_t a1, unsigned int *a2, int **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;

  v6 = sub_216B68CA4();
  result = sub_216B68CD0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B66E78();
    v10 = sub_216B67208();
    v11 = v8 - 1;
    v12 = sub_216B682FC(a2) & (v8 - 1);
    v13 = (int *)(v6 + 8 * v12);
    if (sub_216B6720C(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (!sub_216B6720C(*v13, v9))
      {
        if (sub_216B6720C(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (int *)(v6 + 8 * v12);
        ++v15;
        if (sub_216B6720C(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_13:
  *a3 = v13;
  return result;
}

uint64_t sub_216B68F90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B68FC0((int **)a1);
  return a1;
}

uint64_t sub_216B68FC0(int **a1)
{
  int v2;
  uint64_t result;
  int *v4;
  int v5;
  int *v6;

  v2 = sub_216B66EB0();
  result = sub_216B67238();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B6720C(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B6720C(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 2;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

int *sub_216B6903C(int *a1, unsigned int *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v10;

  v10 = a3;
  v5 = sub_216B69128(a1);
  v6 = sub_216B68CD0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B6912C(a1, (2 * v6));
    sub_216B68DF4((uint64_t)a1, a2, &v10);
    sub_216B68CD0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B69130(a1) <= v6 >> 3)
  {
    sub_216B6912C(a1, v7);
    sub_216B68DF4((uint64_t)a1, a2, &v10);
  }
  sub_216B69134(a1);
  v8 = sub_216B66E78();
  if (!sub_216B6720C(*v10, v8))
    sub_216B6915C((uint64_t)a1);
  return v10;
}

int *sub_216B69134(int *a1)
{
  int v2;

  v2 = sub_216B69128(a1) + 1;
  return sub_216B68C50(a1, v2);
}

uint64_t sub_216B6915C(uint64_t a1)
{
  int v2;

  v2 = sub_216B69130() - 1;
  return sub_216B68C54(a1, v2);
}

void sub_216B69184(int *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17[32];
  uint64_t v18;

  v2 = a2;
  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x10)
  {
    v17[0] = 64;
    v16 = sub_216B1E3F4(a2 - 1);
    v2 = *(_DWORD *)sub_216B21E8C(v17, &v16);
  }
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    if (v2 >= 0x10)
    {
      v7 = sub_216B66E78();
      v8 = sub_216B67208();
      v9 = sub_216B68CA4(a1);
      v10 = 0;
      v11 = v17;
      do
      {
        if (!sub_216B6720C(*(_DWORD *)(v9 + v10), v7) && !sub_216B6720C(*(_DWORD *)(v9 + v10), v8))
        {
          *v11 = *(_DWORD *)(v9 + v10);
          v11[1] = *(_DWORD *)(v9 + v10 + 4);
          v11 += 2;
        }
        v10 += 8;
      }
      while (v10 != 128);
      *a1 &= ~1u;
      v12 = (_QWORD *)sub_216B68BC0((uint64_t)a1);
      *v12 = sub_216B68BC4((uint64_t)a1, v2);
      v12[1] = v13;
      sub_216B6933C(a1, v17, v11);
    }
  }
  else
  {
    v4 = sub_216B68BC0((uint64_t)a1);
    v5 = *(int **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    sub_216B68BC0((uint64_t)a1);
    if (v2 > 0x10)
    {
      v14 = (_QWORD *)sub_216B68BC0((uint64_t)a1);
      *v14 = sub_216B68BC4((uint64_t)a1, v2);
      v14[1] = v15;
    }
    else
    {
      *a1 |= 1u;
    }
    sub_216B6933C(a1, v5, &v5[2 * v6]);
    j__free(v5);
  }
}

int *sub_216B6933C(int *a1, int *a2, int *a3)
{
  int v6;
  int *result;
  int v8;
  int *v9;

  sub_216B68BEC(a1);
  v6 = sub_216B66E78();
  result = (int *)sub_216B67208();
  if (a2 != a3)
  {
    v8 = (int)result;
    do
    {
      result = (int *)sub_216B6720C(*a2, v6);
      if ((result & 1) == 0)
      {
        result = (int *)sub_216B6720C(*a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B68DF4((uint64_t)a1, (unsigned int *)a2, &v9);
          *v9 = *a2;
          v9[1] = a2[1];
          result = sub_216B69134(a1);
        }
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216B693F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_216B69400(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v6;

  sub_216B4AEBC((_DWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_24D600260;
  sub_216B26D14((_QWORD *)(a1 + 16));
  sub_216B34204((std::string *)(a1 + 32), a2);
  sub_216B4AED0((_DWORD *)(a1 + 172));
  sub_216B26D14((_QWORD *)(a1 + 184));
  sub_216B5E6D4(a1 + 200);
  *(_QWORD *)(a1 + 80) = 0x2008082020000101;
  *(_DWORD *)(a1 + 88) = 537923616;
  *(_BYTE *)(a1 + 92) = 32;
  *(_DWORD *)(a1 + 93) = 1077952576;
  *(_QWORD *)(a1 + 97) = 0x40404020200000;
  *(_WORD *)(a1 + 105) = 0;
  *(_WORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 220) = xmmword_216C17640;
  *(_OWORD *)(a1 + 236) = xmmword_216C17650;
  *(_QWORD *)(a1 + 252) = 0x500000009;
  *(_DWORD *)(a1 + 260) = 5;
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a1 + 264) & 0xF8 | 3;
  *(_DWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 144) = &unk_216C10FD0;
  *(_QWORD *)(a1 + 152) = &unk_216C10FD8;
  *(_QWORD *)(a1 + 160) = &unk_216C10FD8;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = "_";
  *(_QWORD *)(a1 + 128) = "mcount";
  *(_QWORD *)(a1 + 136) = &unk_216C10FC8;
  *(_WORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 216) &= 0xE0u;
  if (sub_216B69598(a1 + 32))
    v4 = 5;
  else
    v4 = 0;
  sub_216B2A7D8((_DWORD *)(a1 + 172), v4);
  *(_QWORD *)(a1 + 176) = &unk_216C1766C;
  *(_BYTE *)(a1 + 272) = 0;
  sub_216B1E678((int)&v6, "unknown");
  *(_OWORD *)(a1 + 184) = v6;
  sub_216B5E6D4(&v6);
  *(_QWORD *)(a1 + 200) = v6;
  *(_QWORD *)(a1 + 205) = *(_QWORD *)((char *)&v6 + 5);
  return a1;
}

BOOL sub_216B69598(uint64_t a1)
{
  return sub_216B34190(a1) == 12 && sub_216B27CA8(a1) == 9;
}

uint64_t sub_216B695D8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24D600260;
  v2 = a1 + 16;
  j_std::string::~string((std::string *)(a1 + 32));
  sub_216B69618(v2);
  return a1;
}

uint64_t sub_216B69624(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 87);
}

uint64_t sub_216B6962C()
{
  return 16;
}

uint64_t sub_216B69634(uint64_t a1, int a2)
{
  return ((uint64_t (*)())((char *)sub_216B69650 + 4 * byte_216C17662[a2 - 1]))();
}

uint64_t sub_216B69664(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 99);
}

uint64_t sub_216B6966C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 101);
}

uint64_t sub_216B69674(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  if ((*(_BYTE *)(a2 + 26) & 8) != 0)
    *(_BYTE *)(result + 264) &= ~2u;
  if ((*(_WORD *)(a2 + 16) & 0x1000) != 0)
  {
    *(_DWORD *)(result + 236) = 4;
    if ((*(_WORD *)(a2 + 16) & 0x4000) == 0)
      return result;
  }
  else if ((*(_WORD *)(a2 + 16) & 0x4000) == 0)
  {
    return result;
  }
  *(_DWORD *)(result + 99) = -2139078592;
  *(_DWORD *)(result + 87) = 269492256;
  *(_WORD *)(result + 91) = 8224;
  if (*(_BYTE *)(result + 93) != 32)
  {
    *(_WORD *)(result + 93) = 16448;
    *(_QWORD *)(result + 152) = &unk_216C10FD8;
  }
  *(_WORD *)(result + 95) = -32640;
  if (*(_BYTE *)(result + 83) == 32)
    v2 = 6;
  else
    v2 = 8;
  if (*(_BYTE *)(result + 83) == 32)
    v3 = 5;
  else
    v3 = 7;
  *(_DWORD *)(result + 228) = v3;
  *(_DWORD *)(result + 232) = v3;
  *(_DWORD *)(result + 220) = v2;
  *(_DWORD *)(result + 224) = 9;
  *(_DWORD *)(result + 252) = 7;
  *(_QWORD *)(result + 136) = &unk_216C10FC8;
  *(_QWORD *)(result + 144) = &unk_216C10FD0;
  *(_QWORD *)(result + 160) = &unk_216C10FE0;
  return result;
}

BOOL sub_216B69744(unsigned __int8 *a1)
{
  return (unint64_t)sub_216B69838(a1, 0) > 0x3F;
}

uint64_t sub_216B69764@<X0>(unsigned __int8 **a1@<X1>, uint64_t a2@<X8>)
{
  int v3;

  v3 = **a1;
  if (v3 == 112)
    return sub_216B26DE8(a2, "r");
  else
    return sub_216B2E21C(a2, 1, (char)v3);
}

uint64_t sub_216B69790@<X0>(uint64_t a1@<X8>)
{
  return sub_216B26DE8(a1, &byte_216C19659);
}

uint64_t sub_216B697A0()
{
  uint64_t v1;

  sub_216B26D14(&v1);
  return v1;
}

uint64_t sub_216B697C4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 172) = a2;
  return 1;
}

_BYTE *sub_216B697D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE *result;

  result = (_BYTE *)sub_216B69850(a2, a3, a4);
  *result = a5;
  return result;
}

uint64_t sub_216B69800()
{
  return 0;
}

BOOL sub_216B69808(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t sub_216B69814(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_216B6981C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

uint64_t sub_216B69824(uint64_t a1)
{
  return *(unsigned int *)(a1 + 228);
}

void sub_216B6982C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
}

uint64_t sub_216B69838(unsigned __int8 *a1, int a2)
{
  if (a2)
    return (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 232))(a1);
  else
    return a1[83];
}

uint64_t sub_216B69850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_216B69864(a1, a2, a3);
  return sub_216B5F25C(v3);
}

uint64_t sub_216B69864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B6986C(a1, a2, a3, 0);
}

uint64_t sub_216B6986C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  _BYTE v7[24];
  _QWORD v8[2];
  char v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216B699AC((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216B698C0(a1, (uint64_t)v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216B698C0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B699BC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), (int)a1 + 24, *(unsigned __int8 *)(a2 + 16));
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B699AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B69A74(a3, a1, a2);
}

void *sub_216B699BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v12);
  sub_216B34088();
  v7 = sub_216B267A0(a3, (v6 + 9));
  v8 = sub_216B69A4C(v7, v6, a4);
  v9 = (void *)sub_216B3DBD0(v8);
  v10 = (const void *)sub_216B1E600((uint64_t)v12);
  memcpy(v9, v10, v6);
  *((_BYTE *)v9 + v6) = 0;
  return v7;
}

_DWORD *sub_216B69A50(_DWORD *a1, int a2, char a3)
{
  _DWORD *result;

  result = sub_216B2A7D8(a1, a2);
  *((_BYTE *)result + 4) = a3;
  return result;
}

__n128 sub_216B69A78(__n128 *a1, __n128 *a2, unsigned __int8 *a3)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = *a3;
  return result;
}

char *sub_216B69A8C(int a1)
{
  return off_24D600380[a1];
}

char *sub_216B69A9C(int a1)
{
  if ((a1 - 19) > 0x37)
    return 0;
  else
    return off_24D6013F8[(__int16)(a1 - 19)];
}

char *sub_216B69AC4(int a1)
{
  if ((a1 - 75) > 0x1A3)
    return 0;
  else
    return off_24D6015B8[(__int16)(a1 - 75)];
}

uint64_t sub_216B69AEC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_216B25034(a1);
  *(_QWORD *)(a1 + 24) = sub_216B29804(a2);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = sub_216B29B30((uint64_t)a2);
  *(_QWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = sub_216B34198((uint64_t)a2);
  *(_DWORD *)(a1 + 60) = sub_216B69B6C((uint64_t)a2);
  *(_QWORD *)(a1 + 64) = sub_216B27CB0((uint64_t)a2);
  *(_DWORD *)(a1 + 72) = sub_216B27CA8((uint64_t)a2);
  *(_DWORD *)(a1 + 76) = sub_216B69B74((uint64_t)a2);
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

uint64_t sub_216B69B6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_216B69B74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

BOOL sub_216B69B80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = sub_216B52970(a1);
  v7[1] = v3;
  v6[0] = sub_216B52970(a2);
  v6[1] = v4;
  return sub_216B29B8C(v7, v6);
}

BOOL sub_216B69BC4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 72) == 3;
}

BOOL sub_216B69BD4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 72) != 0;
}

uint64_t sub_216B69BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  sub_216B324FC((uint64_t)v17);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, a2, v17);
  v19 = v12;
  if (!sub_216B27BAC(&v18))
  {
    v14 = sub_216B25CA8((uint64_t)v17, v13);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a2, a3, a4, a5, a6);
    v19 = v15;
  }
  sub_216B27C04(v17);
  return v18;
}

_QWORD *sub_216B69CA4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = off_254E4AAC8;
  if ((*(_BYTE *)off_254E4AAC8(&off_254E4AAC8) & 1) == 0)
  {
    v6 = (_QWORD *)off_254E4AAB0(&off_254E4AAB0);
    sub_216B26D14(v6);
    _tlv_atexit((void (__cdecl *)(void *))sub_216B4FAD0, v6);
    *(_BYTE *)v2(&off_254E4AAC8) = 1;
  }
  v3 = (uint64_t *)off_254E4AAB0(&off_254E4AAB0);
  if (!sub_216B4FA70((uint64_t)v3))
  {
    v4 = (_QWORD *)sub_216B1D1D4(8);
    *v4 = 0;
    sub_216B69D98();
    sub_216B69D9C(v7, v4);
    sub_216B4FA8C(v3, v7);
    sub_216B4FAD0(v7);
  }
  return sub_216B4FA60(a1, v3);
}

_QWORD *sub_216B69DA0(_QWORD *result)
{
  *result = off_24D602350;
  return result;
}

uint64_t sub_216B69DB4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D6022E8;
  j_std::string::~string((std::string *)(a1 + 8));
  return a1;
}

uint64_t *sub_216B69DF4(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v7;
  _BOOL4 v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  *a1 = a2;
  v7 = a1 + 1;
  sub_216B26D14(a1 + 1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)*a1 + 32))(v12, *a1, a3, a4);
  if (!sub_216B27BAC(a4))
  {
    sub_216B69ED4(v11);
    v8 = sub_216B69EBC((uint64_t)v12, (uint64_t)v11);
    sub_216B69ED8(v11);
    if (v8)
    {
      sub_216B69EDC(v11);
      sub_216B69F14(v7, v11);
      sub_216B69618(v11);
      v9 = sub_216B1E600((uint64_t)v7);
      sub_216B69F58(v9, v12);
    }
  }
  sub_216B69ED8(v12);
  return a1;
}

BOOL sub_216B69EBC(uint64_t a1, uint64_t a2)
{
  return !sub_216B6A128(a1, a2);
}

uint64_t sub_216B69EDC@<X0>(_QWORD *a1@<X8>)
{
  char v3;

  j_j_nullsub_1(&v3);
  return sub_216B6B294(a1);
}

uint64_t *sub_216B69F14(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4[2];

  sub_216B512F4(v4, a2);
  sub_216B512F8(v4, a1);
  sub_216B69618(v4);
  return a1;
}

uint64_t *sub_216B69F60(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[2];
  _BYTE v22[24];
  _QWORD v23[2];
  _BYTE v24[16];

  sub_216B69ED4(v24);
  v4 = sub_216B1E600((uint64_t)(a1 + 1));
  v5 = sub_216B6A0A8(v4);
  v6 = sub_216B6A0AC(v5);
  if (sub_216B69BC4(v6))
  {
    v7 = *a1;
    v8 = sub_216B1E600((uint64_t)(a1 + 1));
    v9 = sub_216B6A0A8(v8);
    v10 = sub_216B6A0AC(v9);
    v21[0] = sub_216B52934(v10);
    v21[1] = v11;
    sub_216B25FB0((uint64_t)v22, (uint64_t)v21);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, _DWORD *))(*(_QWORD *)v7 + 32))(v23, v7, v22, a2);
    if (sub_216B27BAC(a2))
    {
LABEL_5:
      sub_216B69ED8(v23);
      goto LABEL_12;
    }
    if (sub_216B69EBC((uint64_t)v23, (uint64_t)v24))
    {
      v12 = sub_216B1E600((uint64_t)(a1 + 1));
      sub_216B69F58(v12, v23);
      goto LABEL_5;
    }
    sub_216B69ED8(v23);
  }
  v13 = (_QWORD *)sub_216B1E600((uint64_t)(a1 + 1));
  if (!sub_216B6A0C4(v13))
  {
    do
    {
      v14 = sub_216B1E600((uint64_t)(a1 + 1));
      v15 = (uint64_t *)sub_216B6A0A8(v14);
      v16 = sub_216B6A0C8(v15, (uint64_t)a2);
      if (!sub_216B6A128((uint64_t)v16, (uint64_t)v24))
        break;
      v17 = sub_216B1E600((uint64_t)(a1 + 1));
      sub_216B6A1A4(v17);
      v18 = (_QWORD *)sub_216B1E600((uint64_t)(a1 + 1));
    }
    while (!sub_216B6A0C4(v18));
  }
  v19 = (_QWORD *)sub_216B1E600((uint64_t)(a1 + 1));
  if (sub_216B6A0C4(v19))
    sub_216B6A1A8(a1 + 1);
LABEL_12:
  sub_216B69ED8(v24);
  return a1;
}

uint64_t sub_216B6A0AC(uint64_t a1)
{
  return sub_216B1E600(a1) + 8;
}

uint64_t *sub_216B6A0C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_216B1E600((uint64_t)a1);
  *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *(_QWORD *)(a2 + 8) = v5;
  if (sub_216B27BAC((_DWORD *)a2) || (v6 = sub_216B1E600((uint64_t)a1), !sub_216B69BD4(v6 + 8)))
    sub_216B6A1A8(a1);
  return a1;
}

BOOL sub_216B6A128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (sub_216B4FA70(a1) && sub_216B4FA70(a2))
  {
    v4 = sub_216B1E600(a1) + 8;
    v5 = sub_216B1E600(a2) + 8;
    return sub_216B69B80(v4, v5);
  }
  else
  {
    return !sub_216B4FA70(a1) && !sub_216B4FA70(a2);
  }
}

uint64_t sub_216B6A1A8(uint64_t *a1)
{
  uint64_t v3[2];

  sub_216B26D14(v3);
  sub_216B512F8(v3, a1);
  return sub_216B69618(v3);
}

_QWORD *sub_216B6A1E8(_QWORD *a1)
{
  _QWORD *result;

  result = sub_216B69DA0(a1);
  *result = &off_24D602388;
  return result;
}

void sub_216B6A210(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::string v5;
  std::string v6;
  uint64_t v7[2];
  std::string v8;
  int v9[12];

  sub_216B27CA4((uint64_t)v9);
  v8.__r_.__value_.__r.__words[0] = sub_216B29788(a1, v9);
  v8.__r_.__value_.__l.__size_ = v4;
  if (sub_216B27BAC(&v8))
  {
    sub_216B69DB0(a2, (uint64_t)v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else
  {
    sub_216B69B7C((uint64_t)&v8, v9);
    sub_216B34D50((uint64_t)a1, &v6);
    sub_216B26CA0(v7, &v6);
    sub_216B6A3EC((uint64_t)&v8, v7[0], v7[1]);
    std::string::~string(&v6);
    sub_216B6A434((uint64_t)&v5, (uint64_t)&v8);
    sub_216B6A438(a2, (uint64_t)&v5);
    j_std::string::~string(&v5);
    j_std::string::~string(&v8);
  }
}

uint64_t sub_216B6A2D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string v10;
  _QWORD v11[2];
  unsigned int v12;
  _QWORD v13[2];

  v12 = 0;
  v13[0] = sub_216B29838(a2, (int *)&v12);
  v13[1] = v5;
  if (!sub_216B27BAC(v13))
  {
    v6 = sub_216B1D1D4(104);
    sub_216B6A4D0(v6, v12);
    sub_216B27C30(a3, v6);
    v8 = sub_216B25CA8(a3, v7);
    sub_216B34D50((uint64_t)a2, &v10);
    sub_216B26CA0(v11, &v10);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, v11[0], v11[1]);
    std::string::~string(&v10);
    sub_216B27D74(v13);
  }
  return v13[0];
}

uint64_t sub_216B6A390@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD v5[2];
  _QWORD v6[2];

  sub_216B6A868(v5, a1, a2);
  sub_216B512F4(v6, v5);
  sub_216B69DEC(a3, v6);
  sub_216B69618(v6);
  return sub_216B69618(v5);
}

void sub_216B6A3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  sub_216B24898(v5, (uint64_t)&v4);
  sub_216B26E7C(a1, (uint64_t)&v4);
  std::string::~string(&v4);
}

__n128 sub_216B6A43C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = sub_216B2B018(a1, a2);
  result = *(__n128 *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(v3 + 56) = v6;
  *(_OWORD *)(v3 + 40) = v5;
  *(__n128 *)(v3 + 24) = result;
  return result;
}

uint64_t sub_216B6A47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + 88) &= ~1u;
  v4 = nullsub_1(a1, a2);
  v6 = nullsub_1(a2, v5);
  sub_216B6A434(v4, v6);
  return a1;
}

_QWORD *sub_216B6A4D4(_QWORD *a1, int a2)
{
  _QWORD *v4;

  v4 = sub_216B6A514(a1);
  *v4 = off_24D6023C0;
  *((_DWORD *)v4 + 2) = a2;
  sub_216B6A524((uint64_t)(v4 + 2));
  return a1;
}

_QWORD *sub_216B6A514(_QWORD *result)
{
  *result = off_24D602310;
  return result;
}

void sub_216B6A52C()
{
  void *v0;

  v0 = (void *)sub_216B6A528();
  j__free(v0);
}

void sub_216B6A540(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  std::string v8[3];
  std::string v9;
  int v10[12];

  v4 = a1 + 16;
  if (!sub_216B69BD4(a1 + 16))
  {
    sub_216B27CA4((uint64_t)v10);
    v9.__r_.__value_.__r.__words[0] = sub_216B29D58(*(_DWORD *)(a1 + 8), v10);
    v9.__r_.__value_.__l.__size_ = v5;
    if (sub_216B27BAC(&v9))
    {
      sub_216B69DB0(a2, (uint64_t)v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
      return;
    }
    sub_216B69B7C((uint64_t)&v9, v10);
    v6 = sub_216B52934(v4);
    sub_216B6A3EC((uint64_t)&v9, v6, v7);
    sub_216B6A7DC(v4, (uint64_t)&v9);
    j_std::string::~string(&v9);
  }
  sub_216B6A824(v8, v4);
  sub_216B6A438(a2, (uint64_t)v8);
  j_std::string::~string(v8);
}

uint64_t sub_216B6A614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  _QWORD v18[2];
  _BYTE v19[24];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = *(unsigned int *)(a1 + 8);
  sub_216B34D50(a2, &v17);
  v11 = (char *)sub_216B26084(&v17);
  sub_216B27694(v10, v11, a4, a5, a6, (uint64_t)v19);
  std::string::~string(&v17);
  v18[0] = sub_216B2F2D4((uint64_t)v19, v12);
  v18[1] = v13;
  if (!sub_216B27BAC(v18))
  {
    v15 = j_nullsub_1(v19, v14);
    sub_216B503B0(a3, v15);
    sub_216B27D74(v18);
  }
  sub_216B2CFE0((uint64_t)v19, v14);
  return v18[0];
}

uint64_t sub_216B6A6FC(uint64_t a1)
{
  int v2;
  const std::error_category *v3;
  uint64_t v5;

  if (close(*(_DWORD *)(a1 + 8)))
  {
    v2 = *__error();
    v3 = std::generic_category();
    sub_216B27DC4((uint64_t)&v5, v2, (uint64_t)v3);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = -1;
    sub_216B27D74(&v5);
  }
  return v5;
}

void sub_216B6A760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216B6A3EC(a1 + 16, a2, a3);
}

uint64_t sub_216B6A768(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B25034(a1);
  j_nullsub_1(v2 + 24, v3);
  sub_216B29B6C(a1 + 40);
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

_QWORD *sub_216B6A7A0(_QWORD *a1)
{
  std::string *v2;

  *a1 = off_24D6023C0;
  v2 = (std::string *)(a1 + 2);
  sub_216B6A6FC((uint64_t)a1);
  j_std::string::~string(v2);
  return a1;
}

uint64_t sub_216B6A7DC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  sub_216B26E7C(a1, a2);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 65) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  return a1;
}

__n128 sub_216B6A828(std::string *a1, uint64_t a2)
{
  std::string *v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = std::string::basic_string(a1, (const std::string *)a2);
  result = *(__n128 *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)((char *)&v3[2].__r_.__value_.__r.__words[2] + 1) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)&v3[2].__r_.__value_.__r.__words[1] = v6;
  *(_OWORD *)&v3[1].__r_.__value_.__r.__words[2] = v5;
  *(__n128 *)&v3[1].__r_.__value_.__l.__data_ = result;
  return result;
}

uint64_t sub_216B6A86C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  sub_216B6A8E0((uint64_t)v10);
  v6 = sub_216B2037C((uint64_t)v10);
  sub_216B6A8E4(v6, a1, a2);
  v7 = sub_216B4E054((uint64_t)v10);
  v8 = sub_216B4ADBC(v7);
  sub_216B6A8E8(v8, v7, a3);
  return sub_216B6A914(v10);
}

_QWORD *sub_216B6A8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = sub_216B26D14(a3);
  *result = a1;
  result[1] = a2;
  return result;
}

uint64_t sub_216B6A918(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = sub_216B6A948();
  return a1;
}

uint64_t sub_216B6A94C()
{
  return sub_216B25CA0(152, 8);
}

_QWORD *sub_216B6A958(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = sub_216B6A9AC(a1, 0);
  *v6 = off_24D602400;
  v7 = sub_216B4ADBC((uint64_t)v6);
  sub_216B6A9E0(v7, a2, a3);
  return a1;
}

_QWORD *sub_216B6A9AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_216B6AA08(a1, a2);
  *result = MEMORY[0x24BEDB860] + 16;
  result[2] = a2;
  return result;
}

void sub_216B6A9E8()
{
  void *v0;

  v0 = (void *)sub_216B6A9E4();
  j__free(v0);
}

uint64_t sub_216B6AA00(uint64_t a1)
{
  return sub_216B6AFE0(a1, 1);
}

_QWORD *sub_216B6AA08(_QWORD *result, uint64_t a2)
{
  *result = MEMORY[0x24BEDB830] + 16;
  result[1] = a2;
  return result;
}

_QWORD *sub_216B6AA24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  std::string::__raw *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[2];
  std::string v17;
  int v18[12];

  v6 = (std::string *)sub_216B6AB44(a1);
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D602438;
  v7 = (std::string::__raw *)&v6[5];
  v8 = (uint64_t)&v6[4];
  sub_216B34D50(a2, v6 + 4);
  sub_216B25FAC((uint64_t)&v17, v8);
  sub_216B6AB74(v7, &v17, a3);
  if (!sub_216B27BAC((_DWORD *)a3))
  {
    sub_216B6AB90((uint64_t)&v17);
    v9 = sub_216B6AB78(v7, &v17);
    sub_216B6AB94(&v17);
    if (v9)
    {
      sub_216B27CA4((uint64_t)v18);
      v10 = sub_216B6AB98((uint64_t)v7);
      *(_QWORD *)a3 = sub_216B29AF4(v10, v18);
      *(_QWORD *)(a3 + 8) = v11;
      if (!sub_216B27BAC((_DWORD *)a3))
      {
        sub_216B69B7C((uint64_t)&v17, v18);
        sub_216B6A7DC((uint64_t)(a1 + 1), (uint64_t)&v17);
        j_std::string::~string(&v17);
        v12 = sub_216B6AB98((uint64_t)v7);
        v14 = nullsub_1(v12, v13);
        sub_216B26CA0(v16, v14);
        sub_216B6A3EC((uint64_t)(a1 + 1), v16[0], v16[1]);
      }
    }
  }
  return a1;
}

_QWORD *sub_216B6AB44(_QWORD *a1)
{
  *a1 = off_24D6022E8;
  sub_216B6A524((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_216B6AB78(_QWORD *a1, _QWORD *a2)
{
  return sub_216B6AE78(a1, a2) ^ 1;
}

uint64_t sub_216B6AB98(uint64_t a1)
{
  return sub_216B1E600(a1) + 16;
}

void sub_216B6ABB4()
{
  void *v0;

  v0 = (void *)sub_216B6ABB0();
  j__free(v0);
}

uint64_t sub_216B6ABC8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];
  int v12[12];
  std::string v13;
  uint64_t v14[2];

  sub_216B27D74(v14);
  v2 = a1 + 120;
  sub_216B6AF7C(a1 + 120, v14);
  if (!sub_216B27BAC(v14))
  {
    sub_216B6AB90((uint64_t)&v13);
    v3 = sub_216B6AE78((_QWORD *)(a1 + 120), &v13);
    sub_216B6AB94(&v13);
    if (v3)
    {
      sub_216B6A524((uint64_t)&v13);
      sub_216B6A7DC(a1 + 8, (uint64_t)&v13);
      j_std::string::~string(&v13);
    }
    else
    {
      sub_216B27CA4((uint64_t)v12);
      v4 = sub_216B6AB98(a1 + 120);
      v14[0] = sub_216B29AF4(v4, v12);
      v14[1] = v5;
      sub_216B69B7C((uint64_t)&v13, v12);
      v6 = a1 + 8;
      sub_216B6A7DC(v6, (uint64_t)&v13);
      j_std::string::~string(&v13);
      v7 = sub_216B6AB98(v2);
      v9 = nullsub_1(v7, v8);
      sub_216B26CA0(v11, v9);
      sub_216B6A3EC(v6, v11[0], v11[1]);
    }
  }
  return v14[0];
}

uint64_t *sub_216B6ACC4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[152];
  uint64_t v13;

  sub_216B2D410(a1);
  v6 = sub_216B1D1D4(88);
  sub_216B6AD74();
  sub_216B4AEC8(&v13, v6);
  sub_216B6AD78(a1, &v13);
  sub_216B6AD9C(&v13);
  sub_216B295EC(v12);
  v7 = sub_216B1E600((uint64_t)a1);
  sub_216B34DE0(a2, (uint64_t)v12);
  *a3 = sub_216B29F98(v7, v8, v9);
  a3[1] = v10;
  sub_216B2489C(v12);
  return a1;
}

uint64_t *sub_216B6AD78(uint64_t *a1, uint64_t *a2)
{
  sub_216B6ADD0(a1, a2);
  return a1;
}

_DWORD *sub_216B6ADA0(_DWORD *a1)
{
  _DWORD *v2;

  v2 = sub_216B4AEBC(a1);
  *((_QWORD *)v2 + 1) = 0;
  sub_216B2A2BC((uint64_t)(v2 + 4));
  return a1;
}

uint64_t *sub_216B6ADD0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = *result;
  *result = v2;
  return result;
}

uint64_t *sub_216B6ADE4(uint64_t *a1)
{
  sub_216B6AE08(a1);
  return a1;
}

uint64_t sub_216B6AE08(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216B6AE18();
  return result;
}

void sub_216B6AE1C(_DWORD *a1)
{
  void *v2;

  if ((*a1)-- == 1)
  {
    v2 = (void *)sub_216B6AE48();
    j__free(v2);
  }
}

uint64_t sub_216B6AE4C(uint64_t a1)
{
  sub_216B2A260(a1);
  j_std::string::~string((std::string *)(a1 + 16));
  return a1;
}

uint64_t sub_216B6AE78(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  std::string v10;

  if (sub_216B2AB50((uint64_t)a1, (uint64_t)a2))
    return 1;
  if (sub_216B2D76C(a2))
  {
    if (sub_216B2D76C(a1))
    {
      v5 = sub_216B1E600((uint64_t)a1) + 16;
      v6 = sub_216B1E600((uint64_t)a2);
      return sub_216B6AF2C(v5, v6 + 16);
    }
    v8 = (uint64_t)a2;
  }
  else
  {
    v8 = (uint64_t)a1;
  }
  v9 = sub_216B1E600(v8) + 16;
  sub_216B2A2BC((uint64_t)&v10);
  v4 = sub_216B6AF2C(v9, &v10);
  j_std::string::~string(&v10);
  return v4;
}

uint64_t sub_216B6AF30(uint64_t a1)
{
  return sub_216B4AEC8(a1, 0);
}

uint64_t sub_216B6AF3C(std::string *a1)
{
  std::string *v2;

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D602438;
  v2 = a1 + 4;
  sub_216B6AB94(&a1[5]);
  std::string::~string(v2);
  return sub_216B69DB4((uint64_t)a1);
}

uint64_t sub_216B6AF7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B1E600(a1);
  *a2 = sub_216B2A138(v4);
  a2[1] = v5;
  return a1;
}

void sub_216B6AFAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24D602400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_216B6AFBC(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_216B4ADBC(a1);
  return sub_216B6AFD0(v1);
}

uint64_t sub_216B6AFD4(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_216B6AFE4(uint64_t a1, uint64_t a2)
{
  return sub_216B25C38(a1, 152 * a2, 8);
}

uint64_t sub_216B6AFF4(uint64_t a1)
{
  sub_216B6B018(a1);
  return a1;
}

uint64_t sub_216B6B018(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return sub_216B6AFE0(result, *(_QWORD *)(a1 + 8));
  return result;
}

uint64_t *sub_216B6B030(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = sub_216B4FA60(a1, a2);
  v4 = sub_216B1E600((uint64_t)v3);
  if (!sub_216B69BD4(v4 + 8))
    sub_216B6A1A8(a1);
  return a1;
}

uint64_t sub_216B6B06C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t sub_216B6B07C(uint64_t a1, uint64_t a2)
{
  sub_216B6B0A0(a1, a2);
  return a1;
}

uint64_t sub_216B6B0A0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 1))
  {
    v2 = result;
    result = j_nullsub_1(result, a2);
    *(_BYTE *)(v2 + 1) = 0;
  }
  return result;
}

uint64_t sub_216B6B0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *(_BYTE *)(a1 + 88) |= 1u;
  v6 = (_QWORD *)nullsub_1(a1, a2);
  *v6 = a2;
  v6[1] = a3;
  return a1;
}

uint64_t *sub_216B6B110(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *a1 = a2;
  sub_216B6B178((uint64_t)&v7, a2);
  v4 = sub_216B1D1D4(32);
  a1[1] = sub_216B6B17C(v4, a2);
  sub_216B2C090(&v7);
  nullsub_1(a1, v5);
  sub_216B6B180(&v7);
  return a1;
}

uint64_t sub_216B6B184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216B6B1A8(a1, &v3);
}

_QWORD *sub_216B6B1B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v3 = sub_216B6A9AC(a1, 0);
  *v3 = &off_24D602460;
  v4 = v3 + 3;
  sub_216B6B1A8(&v6, &v7);
  sub_216B6B1A8(v4, &v6);
  return a1;
}

void sub_216B6B210(std::__shared_weak_count *a1)
{
  void *v1;

  j_std::__shared_weak_count::~__shared_weak_count(a1);
  j__free(v1);
}

uint64_t sub_216B6B224(uint64_t a1)
{
  return sub_216B6B234(*(_QWORD *)(a1 + 24));
}

uint64_t sub_216B6B234(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_216B6B248(uint64_t a1)
{
  return sub_216B25C38(a1, 32, 8);
}

uint64_t *sub_216B6B254(uint64_t *a1)
{
  sub_216B6B278(a1);
  return a1;
}

uint64_t sub_216B6B278(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return sub_216B6B234(result);
  return result;
}

uint64_t sub_216B6B294@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  sub_216B6B2F4((uint64_t)v7, 1);
  v2 = sub_216B2037C((uint64_t)v7);
  sub_216B6B2F8(v2);
  v3 = sub_216B4E054((uint64_t)v7);
  v5 = sub_216B2C5EC(v3, v4);
  sub_216B6B2FC(v5, v3, a1);
  return sub_216B6B338(v7);
}

uint64_t sub_216B6B2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = sub_216B26D14(a3);
  *v5 = a1;
  v5[1] = a2;
  return nullsub_1(v5, v6);
}

uint64_t sub_216B6B33C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(j_j_nullsub_1(a1) + 8) = a2;
  *(_QWORD *)(a1 + 16) = sub_216B6B380();
  return a1;
}

uint64_t sub_216B6B384(uint64_t a1, unint64_t a2)
{
  if (sub_216B6B3BC() < a2)
    sub_216B25C54();
  return sub_216B25CA0(48 * a2, 8);
}

uint64_t sub_216B6B3C0()
{
  return 0x555555555555555;
}

_QWORD *sub_216B6B3CC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  v2 = sub_216B6A9AC(a1, 0);
  *v2 = &unk_24D602498;
  sub_216B6B430((uint64_t)(v2 + 3), (uint64_t)&v8);
  sub_216B2C5EC((uint64_t)a1, v3);
  v5 = sub_216B2C5EC((uint64_t)a1, v4);
  sub_216B6B434((uint64_t)&v7, v5);
  return a1;
}

void sub_216B6B43C()
{
  void *v0;

  v0 = (void *)sub_216B6B438();
  j__free(v0);
}

uint64_t sub_216B6B454(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  sub_216B2C5EC(a1, a2);
  j_j_nullsub_1(&v7);
  sub_216B6B430(a1 + 24, v3);
  v5 = nullsub_1(a1, v4);
  return sub_216B6B67C(&v7, v5, 1);
}

uint64_t sub_216B6B4A8(uint64_t a1, uint64_t a2)
{
  j_nullsub_1(a1, a2);
  return a1;
}

uint64_t sub_216B6B4CC(uint64_t a1, uint64_t a2)
{
  return sub_216B6B4D4(a2);
}

void sub_216B6B4DC(std::__shared_weak_count *a1, uint64_t a2)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D602498;
  sub_216B6B430((uint64_t)&a1[1], a2);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

uint64_t sub_216B6B510(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  sub_216B2C5EC(a1, a2);
  v4 = sub_216B2C5EC(a1, v3);
  return sub_216B6B54C(&v6, v4);
}

uint64_t sub_216B6B550(uint64_t a1, uint64_t a2)
{
  return sub_216B6B558(a2);
}

uint64_t sub_216B6B564(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B6B5A0(&v3);
  return a1;
}

uint64_t *sub_216B6B5A0(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B6B604(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B2E848(v6, v8);
    return (uint64_t *)sub_216B2EC0C(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B6B604(uint64_t *a1)
{
  return sub_216B6B60C((uint64_t)a1, *a1);
}

uint64_t sub_216B6B60C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B6B670(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 16;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B6B674(uint64_t a1, uint64_t a2)
{
  return sub_216B69ED8(a2);
}

uint64_t sub_216B6B680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B25C38(a2, 48 * a3, 8);
}

uint64_t sub_216B6B694(uint64_t a1)
{
  sub_216B6B6B8(a1);
  return a1;
}

uint64_t sub_216B6B6B8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
    return sub_216B6B67C(result, v1, *(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_216B6B6CC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216B6B794(a1, a2);
  }
  else
  {
    sub_216B6B724((uint64_t)a1, a2);
    result = v4 + 16;
  }
  a1[1] = result;
  return result;
}

_QWORD *sub_216B6B724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B6B840(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216B6B844(v5, v7, a2);
  v10 += 16;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B6B794(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B2D0E0(a1);
  v6 = sub_216B2E6A0(a1, v5 + 1);
  v7 = sub_216B2D0E0(a1);
  sub_216B2E718(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216B6B844(v4, v9, a2);
  v13 += 16;
  sub_216B6B878(a1, v12);
  v10 = a1[1];
  sub_216B6B964(v12);
  return v10;
}

_QWORD *sub_216B6B848(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 16 * a3;
  return result;
}

uint64_t sub_216B6B864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B6B870(a2, a3);
}

uint64_t sub_216B6B878(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216B6B968(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B2D0E0(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216B6B968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216B6BA34((uint64_t)&v16);
    v9 = sub_216B2CFB0((uint64_t)v18);
    sub_216B6BA30(a1, v8, v9);
    sub_216B2EB8C((uint64_t)v18);
    sub_216B2EB8C((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216B6BA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B6BA44(a2, a3);
}

uint64_t sub_216B6BA4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216B6A0A8(a1);
  return nullsub_1(v1, v2);
}

uint64_t *sub_216B6BA60(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216B6BABC((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B2EC10(a1, v4);
    sub_216B2EC0C(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B6BABC(uint64_t a1)
{
  return sub_216B6BAC4(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B6BAC8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 16;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216B6B670(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B6BB30(_QWORD *a1)
{
  return sub_216B6BB3C(a1, a1[1] - 16);
}

uint64_t sub_216B6BB3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B2D0E0(a1);
  sub_216B6B60C((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

uint64_t *sub_216B6BB88(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_216B6BBC0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
}

uint64_t sub_216B6BBD0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
    return sub_216B22348(a2);
  else
    return a2;
}

uint64_t sub_216B6BBE8(uint64_t *a1)
{
  return sub_216B1E67C(*a1);
}

unint64_t sub_216B6BBF0(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_216B1E67C(*a1) + 24;
  v5 = (unsigned int *)(v4 + 12 * a2);
  if ((unint64_t)(v5 + 3) > sub_216B2037C(*a1))
    return 0;
  v7 = a2;
  v8 = sub_216B6BBD0((uint64_t)a1, *v5);
  v9 = v4 + 12 * v7;
  v10 = sub_216B6BBD0((uint64_t)a1, *(unsigned int *)(v9 + 4));
  sub_216B6BBD0((uint64_t)a1, *(unsigned int *)(v9 + 8));
  return v8 | (unint64_t)(v10 << 32);
}

unint64_t sub_216B6BC9C(uint64_t *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = sub_216B6BBE8(a1);
  v5 = sub_216B6BBD0((uint64_t)a1, *(unsigned int *)(v4 + 8)) + a2;
  if (sub_216B281C0(*a1) <= v5)
    return 0;
  else
    return sub_216B1E67C(*a1) + v5;
}

uint64_t sub_216B6BCF4(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  size_t v8;
  uint64_t v9;
  const void *v11;
  size_t v12;
  const void *v13[131];

  sub_216B6BD8C(v13);
  v11 = (const void *)sub_216B6BD90(a1, a2, a3, v13);
  v12 = v8;
  if (sub_216B29094((uint64_t)&v11))
    v9 = 0;
  else
    v9 = sub_216B50040(a4, v11, v12, 0, 1);
  sub_216B2489C(v13);
  return v9;
}

uint64_t sub_216B6BD90(uint64_t *a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  _QWORD v29[2];
  char *v30;
  unint64_t v31;
  _QWORD v32[2];
  uint64_t v33;

  v32[0] = a2;
  v32[1] = a3;
  v8 = sub_216B6BBE8(a1);
  v9 = sub_216B6BBD0((uint64_t)a1, *(unsigned int *)(v8 + 16));
  v10 = v9 - 1;
  if ((v9 & (v9 - 1)) != 0 || (v11 = sub_216B6BF3C(a2, a3), v13 = sub_216B6BBF0(a1, v11 & v10), !(_DWORD)v13))
  {
LABEL_8:
    sub_216B26D14(&v33);
    return v33;
  }
  v14 = v12;
  v15 = (char *)sub_216B6BC9C(a1, v13);
  sub_216B1E678((int)&v30, v15);
  if (!sub_216B3122C((uint64_t)v32, v30, v31))
  {
    v16 = v11 + 1;
    do
    {
      v13 = sub_216B6BBF0(a1, v16 & v10);
      if (!(_DWORD)v13)
        goto LABEL_8;
      v14 = v17;
      v18 = (char *)sub_216B6BC9C(a1, v13);
      sub_216B1E678((int)&v30, v18);
      ++v16;
    }
    while (!sub_216B3122C((uint64_t)v32, v30, v31));
  }
  v19 = (char *)sub_216B6BC9C(a1, SHIDWORD(v13));
  sub_216B1E678((int)v29, v19);
  v20 = (char *)sub_216B6BC9C(a1, v14);
  sub_216B1E678((int)v28, v20);
  sub_216B20594(a4);
  v21 = (char *)sub_216B1E600((uint64_t)v29);
  v22 = (char *)sub_216B1E608(v29);
  sub_216B202D8(a4, v21, v22);
  v23 = (char *)sub_216B1E600((uint64_t)v28);
  v24 = (char *)sub_216B1E608(v28);
  sub_216B202D8(a4, v23, v24);
  v25 = sub_216B1E600((uint64_t)a4);
  v26 = sub_216B1FF14((uint64_t)a4);
  sub_216B1E684(&v33, v25, v26);
  return v33;
}

uint64_t sub_216B6BF3C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v2 = (unsigned __int8 *)sub_216B1E600((uint64_t)v8);
  v3 = sub_216B1E608(v8);
  if (v2 == (unsigned __int8 *)v3)
    return 0;
  v4 = (unsigned __int8 *)v3;
  LODWORD(v5) = 0;
  do
  {
    v6 = *v2++;
    v5 = v5 + 13 * sub_216B6BFB0(v6);
  }
  while (v2 != v4);
  return v5;
}

uint64_t sub_216B6BFB0(unsigned __int8 a1)
{
  int v2;
  char v3;

  v2 = sub_216B6BFE4(a1);
  v3 = a1 + 32;
  if (!v2)
    return (char)a1;
  return v3;
}

uint64_t sub_216B6BFE4(int a1)
{
  return ((unsigned __int16)word_216C12D0C[a1] >> 5) & 1;
}

uint64_t sub_216B6BFFC()
{
  return sub_216B2112C();
}

uint64_t sub_216B6C004(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (!result && a2)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(a1 + 4));
      *(_QWORD *)(a1 + 8) = result;
    }
  }
  return result;
}

uint64_t sub_216B6C04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  *(_QWORD *)(sub_216B4AEC4(a1, a2) + 8) = a4;
  *(_QWORD *)(a1 + 16) = sub_216B2037C(a3);
  sub_216B2C030((_QWORD *)(a1 + 24));
  sub_216B2C030((_QWORD *)(a1 + 64));
  sub_216B25034(a1 + 88);
  sub_216B2C030((_QWORD *)(a1 + 112));
  sub_216B6C134(a1 + 136);
  sub_216B6C138(a1 + 296, 64);
  sub_216B324FC(a1 + 456);
  sub_216B2C030((_QWORD *)(a1 + 464));
  sub_216B7D068((_QWORD *)(a1 + 488), a3, a4, (uint64_t)a5, a6, a1);
  sub_216B5F9A0(a1 + 992, 0);
  sub_216B6C13C(a1 + 1016);
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_BYTE *)(a1 + 1208) = (*a5 & 0x10000000000000) != 0;
  return a1;
}

uint64_t sub_216B6C144(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t *v6;

  v2 = (_QWORD *)(a1 + 464);
  v3 = sub_216B2D0E0((_QWORD *)(a1 + 464));
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(uint64_t **)(sub_216B2D0F0(v2, i) + 8);
      if (v5)
      {
        v6 = sub_216B6BBBC(v5);
        j__free(v6);
      }
    }
  }
  sub_216B6C204(a1 + 1016);
  sub_216B5F5B0(a1 + 992);
  sub_216B7D148(a1 + 488);
  sub_216B2CFC8(v2);
  sub_216B6C208(a1 + 456);
  sub_216B6C20C(a1 + 296);
  sub_216B6C20C(a1 + 136);
  sub_216B6C210(a1 + 112);
  std::string::~string((std::string *)(a1 + 88));
  sub_216B6C214(a1 + 64);
  sub_216B2CFC8(a1 + 24);
  return sub_216B6C218(a1);
}

uint64_t sub_216B6C220(_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 5;
}

uint64_t sub_216B6C230(uint64_t a1)
{
  return a1 + 488;
}

uint64_t sub_216B6C238(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36[2];
  uint64_t v37[3];
  uint64_t v38[3];
  uint64_t v39[3];
  uint64_t v40[3];
  uint64_t v41[2];
  const void *v42[19];
  const void *v43;
  size_t v44;

  v43 = a2;
  v44 = a3;
  v6 = a1 + 488;
  v7 = sub_216B80B30(a1 + 488, (uint64_t)a2, a3);
  if (!v7 && a4)
  {
    v8 = sub_216B2D0E0((_QWORD *)(a1 + 24));
    if (v8)
    {
      for (i = 0; v8 != i; ++i)
      {
        v10 = sub_216B2D0F0((_QWORD *)(a1 + 24), i);
        if (sub_216B6C54C(v10))
        {
          sub_216B295EC(v42);
          v11 = sub_216B2D0F0((_QWORD *)(a1 + 24), i);
          v12 = sub_216B6C568(v11);
          v13 = (char *)sub_216B1E600(v12);
          sub_216B1E678((int)v41, v13);
          sub_216B341A4(v42, v41[0], v41[1]);
          sub_216B341F4((uint64_t)&v43, (uint64_t)".framework", (uint64_t)v40);
          sub_216B25FA8((uint64_t)v39, &byte_216C19659);
          sub_216B25FA8((uint64_t)v38, &byte_216C19659);
          sub_216B25FA8((uint64_t)v37, &byte_216C19659);
          sub_216B28DE8(v42, v40, v39, v38, v37);
          v14 = *(_QWORD *)(a1 + 16);
          v15 = sub_216B28180((uint64_t)v42);
          v17 = sub_216B4FCC4(v14, v15, v16, 1);
          if (v17)
          {
            v18 = v17;
            v19 = sub_216B2D0F0((_QWORD *)(a1 + 24), i);
            v20 = sub_216B6C598(v19) != 0;
            v21 = sub_216B6C5A4(a1, v43, v44, v18, v20);
            if (v21)
              goto LABEL_19;
          }
          sub_216B2489C(v42);
        }
        v22 = sub_216B2D0F0((_QWORD *)(a1 + 24), i);
        if (sub_216B6C660(v22))
        {
          v23 = sub_216B2D0F0((_QWORD *)(a1 + 24), i);
          v24 = sub_216B6C67C(v23);
          v25 = sub_216B2D0F0((_QWORD *)(a1 + 24), i);
          v26 = sub_216B6C774(v25);
          if (sub_216B6C698(a1, v26, v24, 0) == 1)
          {
            v27 = sub_216B80B30(v6, (uint64_t)v43, v44);
            if (v27)
              return v27;
          }
          sub_216B295EC(v42);
          v28 = sub_216B2D0F0((_QWORD *)(a1 + 24), i);
          v29 = sub_216B6C774(v28);
          v30 = (char *)sub_216B1E600(v29);
          sub_216B1E678((int)v36, v30);
          sub_216B6C7A4(v42, v36[0], v36[1]);
          sub_216B25FB0((uint64_t)v40, (uint64_t)&v43);
          sub_216B25FA8((uint64_t)v39, &byte_216C19659);
          sub_216B25FA8((uint64_t)v38, &byte_216C19659);
          sub_216B25FA8((uint64_t)v37, &byte_216C19659);
          sub_216B28DE8(v42, v40, v39, v38, v37);
          v31 = sub_216B28180((uint64_t)v42);
          if (sub_216B6C7E0(a1, v31, v32, v24, 0) == 1
            && (v21 = sub_216B80B30(v6, (uint64_t)v43, v44)) != 0
            || (v33 = sub_216B2D0F0((_QWORD *)(a1 + 24), i), (sub_216B6C840(v33) & 1) == 0)
            && (v34 = sub_216B2D0F0((_QWORD *)(a1 + 24), i),
                sub_216B6C84C(a1, v34),
                (v21 = sub_216B80B30(v6, (uint64_t)v43, v44)) != 0))
          {
LABEL_19:
            v7 = v21;
            sub_216B2489C(v42);
            return v7;
          }
          sub_216B2489C(v42);
        }
      }
    }
    return 0;
  }
  return v7;
}

BOOL sub_216B6C54C(uint64_t a1)
{
  return sub_216B6EF98(a1) == 1;
}

uint64_t sub_216B6C568(uint64_t a1)
{
  if (sub_216B6C54C(a1))
    return *(_QWORD *)a1;
  else
    return 0;
}

uint64_t sub_216B6C598(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) & 3;
}

uint64_t sub_216B6C5A4(uint64_t a1, const void *a2, size_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t result;
  int v12;

  v10 = (uint64_t *)(a1 + 488);
  result = sub_216B80B30(a1 + 488, (uint64_t)a2, a3);
  if (!result)
  {
    v12 = sub_216B6C698(a1, (uint64_t)a4, a5, 1);
    result = 0;
    if (v12)
    {
      if (v12 != 2)
      {
        if (v12 == 1)
          return sub_216B80B30((uint64_t)v10, (uint64_t)a2, a3);
        else
          return sub_216B80B94(v10, a2, a3, a4, a5, 0);
      }
    }
  }
  return result;
}

BOOL sub_216B6C660(uint64_t a1)
{
  return sub_216B6EF98(a1) == 0;
}

BOOL sub_216B6C67C(uint64_t a1)
{
  return sub_216B6C598(a1) != 0;
}

uint64_t sub_216B6C698(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[16];
  _BYTE v12[16];
  uint64_t v13[2];
  uint64_t v14;

  v14 = a2;
  v7 = a1 + 992;
  sub_216B61DC0(a1 + 992, &v14, (uint64_t)v13);
  sub_216B61AA0(v7, (uint64_t)v11);
  sub_216B4F784(v12, v11);
  if (sub_216B50AF4(v13, (uint64_t)v12))
  {
    if (*(_BYTE *)(sub_216B1E600((uint64_t)v13) + 8))
      return 0;
    else
      return 3;
  }
  else
  {
    v9 = sub_216B6ECC8(a1, v14, a4);
    if (v9)
    {
      result = sub_216B6EA58(a1, v9, a3);
      if ((_DWORD)result == 1)
      {
        v10 = sub_216B6EA3C(v7, &v14);
        result = 1;
        *(_BYTE *)v10 = 1;
      }
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t sub_216B6C774(uint64_t a1)
{
  if (sub_216B6C660(a1))
    return *(_QWORD *)a1;
  else
    return 0;
}

const void **sub_216B6C7A4(const void **a1, uint64_t a2, uint64_t a3)
{
  sub_216B20594(a1);
  return sub_216B341A4(a1, a2, a3);
}

uint64_t sub_216B6C7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v8;

  v8 = sub_216B4FCC4(*(_QWORD *)(a1 + 16), a2, a3, 1);
  if (v8)
    return sub_216B6C698(a1, (uint64_t)v8, a4, a5);
  else
    return 2;
}

uint64_t sub_216B6C840(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 5) & 1;
}

uint64_t sub_216B6C84C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  _BOOL4 v12;
  uint64_t v13[2];
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16[3];
  _QWORD v17[19];
  uint64_t v18[2];

  result = sub_216B6C840(a2);
  if ((result & 1) == 0)
  {
    sub_216B27D74(v18);
    sub_216B295EC(v17);
    v5 = sub_216B6C774(a2);
    v6 = (_BYTE *)sub_216B1E600(v5);
    sub_216B25FA8((uint64_t)v16, v6);
    sub_216B29264(v16, v17);
    v14[0] = sub_216B24850((uint64_t)v17);
    v14[1] = v7;
    sub_216B25FB0((uint64_t)v16, (uint64_t)v14);
    sub_216B6AB74(&v15, v16, v18);
    sub_216B6AB90((uint64_t)v16);
    if (sub_216B6AB78(&v15, v16))
    {
      do
      {
        if (sub_216B27BAC(v18))
          break;
        v8 = sub_216B6AB98((uint64_t)&v15);
        v10 = nullsub_1(v8, v9);
        sub_216B26CA0(v13, v10);
        v11 = sub_216B6C67C(a2);
        v12 = sub_216B6C54C(a2);
        sub_216B6C7E0(a1, v13[0], v13[1], v11, v12);
        sub_216B6AF7C((uint64_t)&v15, v18);
      }
      while ((sub_216B6AB78(&v15, v16) & 1) != 0);
    }
    sub_216B6AB94(v16);
    sub_216B6AB94(&v15);
    sub_216B6EF78(a2, 1);
    return sub_216B2489C(v17);
  }
  return result;
}

uint64_t sub_216B6C988(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v4;

  if (sub_216B6C660(a1))
  {
    v2 = sub_216B6C774(a1);
    return sub_216B1E600(v2);
  }
  if (sub_216B6C54C(a1))
  {
    v2 = sub_216B6C568(a1);
    return sub_216B1E600(v2);
  }
  v4 = (_QWORD *)sub_216B6C9E0(a1);
  return sub_216B6BBC0(v4);
}

uint64_t sub_216B6C9E0(uint64_t a1)
{
  if (sub_216B6EEAC(a1))
    return *(_QWORD *)a1;
  else
    return 0;
}

uint64_t sub_216B6CA10(uint64_t a1, uint64_t *a2, uint64_t a3, const void **a4, const void **a5, const void **a6, _BYTE *a7, _BYTE *a8, const void **a9)
{
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  _QWORD *v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  size_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  const void *v49[131];
  uint64_t v50[3];
  const void *v51;
  size_t v52;
  __int128 v53;
  uint64_t v54[2];
  const void *v55[131];

  *a7 = 0;
  *a8 = 0;
  sub_216B6BD8C(v55);
  if (sub_216B6C660(a1))
  {
    v17 = sub_216B6C774(a1);
    v18 = (char *)sub_216B1E600(v17);
    sub_216B1E678((int)v54, v18);
    sub_216B6C7A4(v55, v54[0], v54[1]);
    sub_216B25FB0((uint64_t)v49, (uint64_t)a2);
    sub_216B25FA8((uint64_t)&v53, &byte_216C19659);
    sub_216B25FA8((uint64_t)&v51, &byte_216C19659);
    sub_216B25FA8((uint64_t)v50, &byte_216C19659);
    sub_216B28DE8(v55, (uint64_t *)v49, (uint64_t *)&v53, (uint64_t *)&v51, v50);
    if (a4)
    {
      v19 = sub_216B6C774(a1);
      v20 = (char *)sub_216B1E600(v19);
      sub_216B1E678((int)v49, v20);
      sub_216B20594(a4);
      v21 = (char *)sub_216B1E600((uint64_t)v49);
      v22 = (char *)sub_216B1E608(v49);
      sub_216B202D8(a4, v21, v22);
    }
    if (a5)
    {
      sub_216B20594(a5);
      v23 = (char *)sub_216B1E600((uint64_t)a2);
      v24 = (char *)sub_216B1E608(a2);
      sub_216B202D8(a5, v23, v24);
    }
    v25 = (const void *)sub_216B24850((uint64_t)v55);
    v27 = v26;
    v28 = (_QWORD *)sub_216B6C774(a1);
    v29 = sub_216B6C67C(a1);
    v30 = sub_216B6CD80(a3, v25, v27, v28, v29, a6);
    goto LABEL_9;
  }
  if (sub_216B6C54C(a1))
  {
    v30 = sub_216B6CE68(a1, *a2, a2[1], a3, a4, a5, a6, a7);
LABEL_9:
    v31 = v30;
    goto LABEL_21;
  }
  v32 = (uint64_t *)sub_216B6C9E0(a1);
  sub_216B6BD8C(v49);
  v51 = (const void *)sub_216B6BD90(v32, *a2, a2[1], v49);
  v52 = v33;
  if (sub_216B29094((uint64_t)&v51))
  {
    v31 = 0;
  }
  else
  {
    sub_216B25FB0((uint64_t)&v53, (uint64_t)&v51);
    if (sub_216B29700((uint64_t *)&v53))
    {
      sub_216B20594(a9);
      v34 = (char *)sub_216B1E600((uint64_t)&v51);
      v35 = (char *)sub_216B1E608(&v51);
      sub_216B202D8(a9, v34, v35);
      v36 = sub_216B1E600((uint64_t)a9);
      v37 = sub_216B1FF14((uint64_t)a9);
      sub_216B1E684(&v53, v36, v37);
      *(_OWORD *)a2 = v53;
      *a8 = 1;
      v38 = *a2;
      v39 = a2[1];
      v40 = (_DWORD *)sub_216B2037C(a3);
      v41 = sub_216B6BCF4(v32, v38, v39, v40);
    }
    else
    {
      v42 = (_DWORD *)sub_216B2037C(a3);
      v41 = sub_216B50040(v42, v51, v52, 0, 1);
    }
    v31 = v41;
    if (v41)
    {
      if (a4)
      {
        v43 = (char *)sub_216B6C988(a1);
        sub_216B1E678((int)&v53, v43);
        sub_216B20594(a4);
        v44 = (char *)sub_216B1E600((uint64_t)&v53);
        v45 = (char *)sub_216B1E608(&v53);
        sub_216B202D8(a4, v44, v45);
      }
      if (a5)
      {
        sub_216B20594(a5);
        v46 = (char *)sub_216B1E600((uint64_t)a2);
        v47 = (char *)sub_216B1E608(a2);
        sub_216B202D8(a5, v46, v47);
      }
    }
  }
  sub_216B2489C(v49);
LABEL_21:
  sub_216B2489C(v55);
  return v31;
}

uint64_t sub_216B6CD80(uint64_t a1, const void *a2, size_t a3, _QWORD *a4, uint64_t a5, const void **a6)
{
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_216B6E8C4(a1, (uint64_t)a2, a3, a4, a5);
  v12 = (_DWORD *)sub_216B2037C(a1);
  if (!a6)
    return sub_216B50040(v12, a2, a3, 1, 1);
  v13 = sub_216B50040(v12, a2, a3, 0, 1);
  if (v13)
  {
    *a6 = sub_216B6D49C(a1, v13);
    if (!sub_216B6EFA4(a6, v14))
    {
      if (sub_216B6E8C4(a1, (uint64_t)a2, a3, a4, a5))
        *a6 = sub_216B6D49C(a1, v13);
    }
  }
  return v13;
}

uint64_t sub_216B6CE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, const void **a6, const void **a7, _BYTE *a8)
{
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  const void *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  const void *v49;
  size_t v50;
  size_t v51;
  _BOOL8 v52;
  uint64_t v54[2];
  const void *v55[2];
  uint64_t v56[2];
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63[2];
  const void *v64[131];
  _QWORD v65[2];
  const void *v66[133];

  v66[131] = *(const void **)MEMORY[0x24BDAC8D0];
  v65[0] = a2;
  v65[1] = a3;
  v14 = (_DWORD *)sub_216B2037C(a4);
  v15 = sub_216B26CA8(v65, 0x2Fu, 0);
  if (v15 != -1)
  {
    v16 = v15;
    v17 = sub_216B2864C(v65, 0, v15);
    v19 = sub_216B6D34C(a4, v17, v18);
    if (!*(_QWORD *)v19 || (v20 = *(_QWORD *)v19, v20 == sub_216B6C568(a1)))
    {
      sub_216B6BD8C(v64);
      v22 = sub_216B6C568(a1);
      v23 = (char *)sub_216B1E600(v22);
      sub_216B1E678((int)v63, v23);
      sub_216B341A4(v64, v63[0], v63[1]);
      if (sub_216B29084(v64) || *(_BYTE *)sub_216B6D364((uint64_t)v64) != 47)
      {
        LOBYTE(v66[0]) = 47;
        sub_216B1FBBC((uint64_t)v64, v66);
      }
      v24 = sub_216B1E600((uint64_t)v65);
      sub_216B1E684(v62, v24, v16);
      sub_216B341A4(v64, v62[0], v62[1]);
      sub_216B1E678((int)v61, ".framework/");
      sub_216B341A4(v64, v61[0], v61[1]);
      if (!*(_QWORD *)v19)
      {
        sub_216B6D37C(a4);
        v44 = sub_216B24850((uint64_t)v64);
        if (!sub_216B4FCC4((uint64_t)v14, v44, v45, 1))
        {
          v21 = 0;
LABEL_33:
          sub_216B2489C(v64);
          return v21;
        }
        *(_QWORD *)v19 = sub_216B6C568(a1);
        if (!sub_216B6C598(a1))
        {
          sub_216B6D38C(v66, v64);
          sub_216B1E678((int)v60, ".system_framework");
          sub_216B341A4(v66, v60[0], v60[1]);
          v57[0] = sub_216B24850((uint64_t)v66);
          v57[1] = v46;
          sub_216B25FB0((uint64_t)&v58, (uint64_t)v57);
          if (sub_216B2ACDC(&v58))
            *(_BYTE *)(v19 + 8) = 1;
          sub_216B2489C(v66);
        }
      }
      *a8 = *(_BYTE *)(v19 + 8);
      if (a6)
      {
        sub_216B20594(a6);
        v25 = (char *)(sub_216B1E600((uint64_t)v65) + v16 + 1);
        v26 = (char *)sub_216B1E608(v65);
        sub_216B202D8(a6, v25, v26);
      }
      v27 = sub_216B1FF14((uint64_t)v64);
      sub_216B1E678((int)v56, "Headers/");
      sub_216B341A4(v64, v56[0], v56[1]);
      if (a5)
      {
        sub_216B20594(a5);
        v28 = (char *)sub_216B1E600((uint64_t)v64);
        v29 = sub_216B1E67C((uint64_t)v64);
        sub_216B202D8(a5, v28, (char *)(v29 - 1));
      }
      v30 = (char *)(sub_216B1E600((uint64_t)v65) + v16 + 1);
      v31 = (char *)sub_216B1E608(v65);
      sub_216B34D4C(v64, v30, v31);
      v32 = (const void *)sub_216B24850((uint64_t)v64);
      v21 = sub_216B50040(v14, v32, v33, a7 == 0, 1);
      if (!v21)
      {
        v34 = sub_216B1E600((uint64_t)v64);
        sub_216B39408(v64, v34 + v27, "Private", "");
        if (a5)
        {
          v35 = sub_216B1E600((uint64_t)a5);
          sub_216B39408(a5, v35 + v27, "Private", "");
        }
        v36 = (const void *)sub_216B24850((uint64_t)v64);
        v21 = sub_216B50040(v14, v36, v37, a7 == 0, 1);
      }
      if (a7 && v21)
      {
        v38 = sub_216B5EE7C(v21);
        v39 = (char *)sub_216B1E600(v38);
        sub_216B1E678((int)&v58, v39);
        while (1)
        {
          if (!sub_216B4FCC4((uint64_t)v14, v58, v59, 1))
          {
LABEL_23:
            *a7 = sub_216B6D49C(a4, v21);
            goto LABEL_33;
          }
          v40 = sub_216B29410(v58, v59);
          v42 = v41;
          sub_216B1E678((int)v55, ".framework");
          if (sub_216B274F0(v40, v42, v55[0], (size_t)v55[1]))
            break;
          v58 = sub_216B290FC(v58, v59);
          v59 = v43;
          if (sub_216B29094((uint64_t)&v58))
            goto LABEL_23;
        }
        sub_216B6D390(v66);
        v47 = sub_216B6D394((uint64_t)v14, v58, v59, v66);
        v48 = (char *)sub_216B1E600((uint64_t)v47);
        sub_216B1E678((int)v54, v48);
        v49 = (const void *)sub_216B2933C(v54[0], v54[1]);
        v51 = v50;
        v52 = sub_216B6C598(a1) != 0;
        if (sub_216B6C5A4(a4, v49, v51, v47, v52))
          *a7 = sub_216B6D49C(a4, v21);
        sub_216B6D4DC(v66);
      }
      goto LABEL_33;
    }
  }
  return 0;
}

uint64_t sub_216B6D34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_216B6E590(a1 + 296, a2, a3);
  return sub_216B3DBD0(v3);
}

uint64_t sub_216B6D364(uint64_t a1)
{
  return sub_216B1E67C(a1) - 1;
}

uint64_t sub_216B6D37C(uint64_t result)
{
  ++*(_DWORD *)(result + 1200);
  return result;
}

_QWORD *sub_216B6D394(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  std::string v19;
  const void *v20[2];
  uint64_t v21;
  uint64_t i;

  v6 = sub_216B4FCC4(a1, a2, a3, 1);
  v7 = sub_216B50944(a1, (uint64_t)v6);
  v21 = sub_216B290FC(v7, v8);
  for (i = v9; !sub_216B29094((uint64_t)&v21); i = v16)
  {
    v10 = sub_216B4FCC4(a1, v21, i, 1);
    if (!v10)
      break;
    v11 = v10;
    v12 = sub_216B29410(v21, i);
    v14 = v13;
    sub_216B1E678((int)v20, ".framework");
    if (sub_216B274F0(v12, v14, v20[0], (size_t)v20[1]))
    {
      v18[0] = sub_216B2933C(v21, i);
      v18[1] = v15;
      sub_216B24898(v18, (uint64_t)&v19);
      sub_216B6EFF0(a4, (uint64_t)&v19);
      std::string::~string(&v19);
      v6 = v11;
    }
    v21 = sub_216B290FC(v21, i);
  }
  return v6;
}

const void *sub_216B6D49C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 1184))
    sub_216B6EA54(a1, a2);
  return sub_216B7D9A4((uint64_t *)(a1 + 488), a2, 0);
}

uint64_t sub_216B6D4E0(uint64_t a1, uint64_t a2)
{
  return sub_216B7D14C(a1 + 488, a2);
}

uint64_t sub_216B6D4E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, const void **a11, const void **a12, const void **a13, char a14)
{
  unint64_t v16;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  _BOOL8 v41;
  const void *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void **v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void **v53;
  const void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int16 *v60;
  __int16 *v61;
  char v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 *v76;
  __int16 v77;
  __int16 *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[2];
  const void *v101[2];
  _OWORD v102[6];
  _QWORD v103[2];
  uint64_t v104[2];
  _OWORD v105[65];
  const void *v106;
  const void *v107[2];
  _QWORD v108[2];
  _OWORD v109[2];

  LODWORD(v16) = a5;
  v19 = a13;
  *(_QWORD *)&v109[0] = a2;
  *((_QWORD *)&v109[0] + 1) = a3;
  v108[0] = a9;
  v108[1] = a10;
  v20 = sub_216B1E600(a1);
  if (!sub_216B6DD58(v20 + 632))
  {
    v21 = sub_216B1E600(a1);
    *(_QWORD *)&v105[0] = sub_216B6DD60(v21 + 632);
    v22 = sub_216B1E600(a1);
    *(_QWORD *)&v102[0] = sub_216B6DD94(v22 + 632);
    while (sub_216B2AB28((uint64_t)v105, (uint64_t)v102))
    {
      v23 = *(_DWORD **)(a1 + 16);
      v24 = sub_216B1E600((uint64_t)v105);
      sub_216B26CA0(v107, v24);
      v25 = sub_216B50040(v23, v107[0], (size_t)v107[1], 0, 1);
      if (v25)
        sub_216B6DDC8(a1, v25, 0);
      sub_216B4B50C(v105);
    }
    v26 = sub_216B1E600(a1);
    sub_216B6DDE4((_QWORD *)(v26 + 632));
  }
  if (a13)
  {
    sub_216B6DE08((uint64_t)v105);
    *a13 = *(const void **)&v105[0];
  }
  v27 = a12;
  sub_216B25FB0((uint64_t)v105, (uint64_t)v109);
  if (!sub_216B296A0((uint64_t *)v105))
  {
    sub_216B6DE08((uint64_t)&v106);
    v28 = 0;
    v94 = a7;
    v96 = a4;
    v92 = a6;
    v93 = v16;
    if (!sub_216B29094((uint64_t)v108) && (v16 & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 56))
      {
        v28 = 0;
      }
      else
      {
        sub_216B6BD8C(v105);
        v31 = sub_216B1E600((uint64_t)v108);
        v32 = sub_216B6DE0C(v108);
        if (v31 == v32)
        {
LABEL_24:
          sub_216B2489C(v105);
          v28 = 0;
          v19 = a13;
          a7 = v94;
          a6 = v92;
        }
        else
        {
          v33 = v32;
          v34 = (uint64_t *)(v31 + 8);
          v35 = 1;
          while (1)
          {
            v37 = v34 - 1;
            v36 = *(v34 - 1);
            v38 = (char *)sub_216B1E600(*v34);
            sub_216B1E678((int)v104, v38);
            sub_216B6C7A4((const void **)v105, v104[0], v104[1]);
            LOBYTE(v102[0]) = 47;
            sub_216B1FBBC((uint64_t)v105, v102);
            v39 = (char *)sub_216B1E600((uint64_t)v109);
            v40 = (char *)sub_216B1E608(v109);
            sub_216B34D4C((const void **)v105, v39, v40);
            v41 = (*sub_216B6DE18(a1, v36) & 0xC) != 0;
            v42 = (const void *)sub_216B24850((uint64_t)v105);
            v44 = sub_216B6CD80(a1, v42, v43, (_QWORD *)*v34, v41, a13);
            if (v44)
              break;
            v35 = 0;
            v34 += 2;
            if (v37 + 2 == (uint64_t *)v33)
              goto LABEL_24;
          }
          v28 = v44;
          v76 = sub_216B6DE18(a1, v36);
          v77 = *v76;
          v102[0] = *((_OWORD *)v76 + 1);
          v78 = sub_216B6DE18(a1, v28);
          *v78 = *v78 & 0xFBF3 | v77 & 0x40C;
          *((_OWORD *)v78 + 1) = v102[0];
          if (a11)
          {
            v79 = (char *)sub_216B1E600(*v34);
            sub_216B1E678((int)v103, v79);
            sub_216B20594(a11);
            v80 = (char *)sub_216B1E600((uint64_t)v103);
            v81 = (char *)sub_216B1E608(v103);
            sub_216B202D8(a11, v80, v81);
          }
          v19 = a13;
          a7 = v94;
          a6 = v92;
          if (a12)
          {
            sub_216B20594(a12);
            v82 = (char *)sub_216B1E600((uint64_t)v109);
            v83 = (char *)sub_216B1E608(v109);
            sub_216B202D8(a12, v82, v83);
          }
          if ((v35 & 1) != 0)
          {
            sub_216B2489C(v105);
            return v28;
          }
          v90 = sub_216B6DED4(*(_BYTE **)(a1 + 8), 0x323u, v96);
          v91 = v90;
          if (!a13 || v90)
          {
            sub_216B2489C(v105);
            if (v91)
              return v28;
          }
          else
          {
            v106 = *a13;
            sub_216B6DE08((uint64_t)v103);
            *a13 = (const void *)v103[0];
            sub_216B2489C(v105);
          }
        }
      }
    }
    *a7 = 0;
    if ((_DWORD)v16)
      LODWORD(v16) = *(_DWORD *)(a1 + 48);
    if (a6)
      v16 = (unint64_t)(a6 - sub_216B2D0F0((_QWORD *)(a1 + 24), 0)) >> 4;
    v97 = a1 + 136;
    v45 = sub_216B6DF20(a1 + 136, *(uint64_t *)&v109[0], *((uint64_t *)&v109[0] + 1));
    v46 = sub_216B3DBD0(v45);
    v47 = a11;
    v95 = v28;
    v98 = v46;
    if (a14)
    {
      v48 = v16 + 1;
    }
    else
    {
      v48 = v16 + 1;
      if (*(_DWORD *)v46 == (_DWORD)v16 + 1)
      {
        LODWORD(v16) = *(_DWORD *)(v46 + 4);
        v49 = *(char **)(v46 + 8);
        if (v49)
        {
          sub_216B1E678((int)v105, v49);
          v109[0] = v105[0];
        }
LABEL_35:
        sub_216B341A0(v102);
        if (sub_216B2D0E0((_QWORD *)(a1 + 24)) == v16)
        {
LABEL_41:
          if (!sub_216B29094((uint64_t)v108) && (v93 & 1) == 0 && sub_216B26CA8(v109, 0x2Fu, 0) == -1)
          {
            v59 = (uint64_t *)sub_216B1E600((uint64_t)v108);
            v60 = sub_216B6DE18(a1, *v59);
            if ((*v60 & 0x400) != 0)
            {
              v70 = v60;
              sub_216B295EC(v105);
              sub_216B341A4((const void **)v105, *((_QWORD *)v70 + 2), *((_QWORD *)v70 + 3));
              sub_216B6E098((uint64_t)v105, 47);
              sub_216B341A4((const void **)v105, *(uint64_t *)&v109[0], *((uint64_t *)&v109[0] + 1));
              v71 = sub_216B28180((uint64_t)v105);
              v73 = v72;
              v74 = sub_216B1E600((uint64_t)v108);
              sub_216B6E0CC(&v99, v74);
              v75 = sub_216B6D4E8(a1, v71, v73, v96, 1, v92, v94);
              v28 = v95;
              if (sub_216B6E034(*(_QWORD *)(a1 + 8), v95, v75, v96))
              {
                if (v19)
                  *v19 = v106;
              }
              else
              {
                v84 = sub_216B6DF20(v97, *(uint64_t *)&v109[0], *((uint64_t *)&v109[0] + 1));
                v85 = sub_216B3DBD0(v84);
                v86 = sub_216B28180((uint64_t)v105);
                v88 = sub_216B6DF20(v97, v86, v87);
                *(_DWORD *)(v85 + 4) = *(_DWORD *)(sub_216B3DBD0(v88) + 4);
                v28 = v75;
              }
              sub_216B2489C(v105);
              goto LABEL_72;
            }
          }
          v28 = v95;
          if (sub_216B6E034(*(_QWORD *)(a1 + 8), v95, 0, v96))
            goto LABEL_58;
          v28 = 0;
          *(_DWORD *)(v98 + 4) = sub_216B2D0E0((_QWORD *)(a1 + 24));
        }
        else
        {
          v50 = v16;
          while (1)
          {
            LOBYTE(v105[0]) = 0;
            LOBYTE(v103[0]) = 0;
            v51 = sub_216B2D0F0((_QWORD *)(a1 + 24), v50);
            v52 = sub_216B6CA10(v51, (uint64_t *)v109, a1, v47, v27, v19, v105, v103, (const void **)v102);
            if (LOBYTE(v103[0]))
            {
              v53 = v27;
              v54 = v19;
              v56 = *((_QWORD *)&v109[0] + 1);
              v55 = *(_QWORD *)&v109[0];
              v57 = sub_216B4ADBC(v97);
              v58 = v56;
              v19 = v54;
              v27 = v53;
              v47 = a11;
              *(_QWORD *)(v98 + 8) = sub_216B6DF7C(v55, v58, v57);
            }
            if (v52)
              break;
            LODWORD(v16) = v16 + 1;
            v50 = v16;
            if (sub_216B2D0E0((_QWORD *)(a1 + 24)) == v16)
              goto LABEL_41;
          }
          *v94 = sub_216B2D0F0((_QWORD *)(a1 + 24), v50);
          v61 = sub_216B6DE18(a1, v52);
          v62 = sub_216B6C598(*v94);
          v63 = *v61;
          *v61 = *v61 & 0xFFF3 | (4 * (v62 & 3));
          if ((v62 & 3) == 0 && LOBYTE(v105[0]))
            *v61 = v63 & 0xFFF3 | 4;
          v64 = sub_216B6C220((_QWORD *)(a1 + 64));
          while (v64)
          {
            v65 = sub_216B4F6F0((_QWORD *)(a1 + 64), --v64);
            sub_216B26CA0(v101, v65);
            if (sub_216B2A2EC((uint64_t)v109, v101[0], (size_t)v101[1]))
            {
              *v61 = *v61 & 0xFFF3 | (4 * (*(_BYTE *)(sub_216B4F6F0((_QWORD *)(a1 + 64), v64) + 24) & 0x3F));
              break;
            }
          }
          if (sub_216B6DFF0(*v94))
          {
            v66 = sub_216B26CA8(v109, 0x2Fu, 0);
            if (v66 != -1)
            {
              v67 = v66;
              *v61 |= 0x400u;
              v68 = sub_216B1E600((uint64_t)v109);
              sub_216B1E684(v100, v68, v67);
              *((_QWORD *)v61 + 2) = sub_216B6E01C(a1, v100[0], v100[1]);
              *((_QWORD *)v61 + 3) = v69;
            }
          }
          v28 = v95;
          if (sub_216B6E034(*(_QWORD *)(a1 + 8), v95, v52, v96))
          {
LABEL_58:
            if (v19)
              *v19 = v106;
            goto LABEL_72;
          }
          *(_DWORD *)(v98 + 4) = v16;
          v28 = v52;
        }
LABEL_72:
        sub_216B2489C(v102);
        return v28;
      }
    }
    sub_216B6DF70(v46, v48);
    goto LABEL_35;
  }
  v28 = 0;
  *a7 = 0;
  if (!a6)
  {
    if (a11)
      sub_216B20594(a11);
    if (a12)
    {
      sub_216B20594(a12);
      v29 = (char *)sub_216B1E600((uint64_t)v109);
      v30 = (char *)sub_216B1E608(v109);
      sub_216B202D8(a12, v29, v30);
    }
    return sub_216B50040(*(_DWORD **)(a1 + 16), *(const void **)&v109[0], *((size_t *)&v109[0] + 1), 1, 1);
  }
  return v28;
}

BOOL sub_216B6DD58(uint64_t a1)
{
  return sub_216B29084((_QWORD *)(a1 + 432));
}

uint64_t sub_216B6DD60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B2C910((uint64_t *)(a1 + 432));
  sub_216B2C008(&v3, &v2);
  return v3;
}

uint64_t sub_216B6DD94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B2C000(a1 + 432);
  sub_216B2C008(&v3, &v2);
  return v3;
}

BOOL sub_216B6DDC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B6EA58(a1, a2, a3) > 1;
}

uint64_t sub_216B6DDE4(_QWORD *a1)
{
  sub_216B6FB94(a1);
  return sub_216B5EF04(a1 + 54);
}

uint64_t sub_216B6DE0C(_QWORD *a1)
{
  return *a1 + 16 * a1[1];
}

__int16 *sub_216B6DE18(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  __int16 *v7;
  uint64_t v8;
  __int16 v9;
  _QWORD v11[4];

  v4 = sub_216B387B8(a2);
  if (sub_216B6C220((_QWORD *)(a1 + 112)) <= (unint64_t)v4)
  {
    v5 = sub_216B387B8(a2);
    sub_216B6E5C0((uint64_t *)(a1 + 112), (v5 + 1));
  }
  v6 = sub_216B387B8(a2);
  v7 = (__int16 *)sub_216B4F6F0((_QWORD *)(a1 + 112), v6);
  v8 = *(_QWORD *)(a1 + 1184);
  v9 = *v7;
  if (v8 && (*v7 & 0x200) == 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v11, v8, a2);
    sub_216B6E618(v7, (uint64_t)v11);
    v9 = *v7;
  }
  *v7 = v9 | 0x800;
  return v7;
}

BOOL sub_216B6DED4(_BYTE *a1, unsigned int a2, int a3)
{
  uint64_t v6;

  v6 = sub_216B1E600((uint64_t)(a1 + 40));
  return sub_216B4EB80(v6, a2, a3, a1) == 1;
}

uint64_t sub_216B6DF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7[2];

  sub_216B26D14(v7);
  return sub_216B6F2EC(a1, a2, a3, v7[0], v7[1]);
}

uint64_t sub_216B6DF70(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_216B6DF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v4 = sub_216B1E67C((uint64_t)v7);
  v5 = sub_216B3D300(a3, v4 + 1);
  sub_216B1E600((uint64_t)v7);
  sub_216B1E608(v7);
  sub_216B205DC();
  *(_BYTE *)(v5 + sub_216B1E67C((uint64_t)v7)) = 0;
  return v5;
}

BOOL sub_216B6DFF0(uint64_t a1)
{
  _BOOL8 result;

  result = sub_216B6EEAC(a1);
  if (result)
    return (*(unsigned __int8 *)(a1 + 8) >> 4) & 1;
  return result;
}

uint64_t sub_216B6E01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;

  v3 = (unsigned int *)sub_216B6E874(a1 + 1016, a2, a3);
  return sub_216B6E87C(v3);
}

uint64_t sub_216B6E034(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9[2];

  if (a2)
    v4 = a3 == a2;
  else
    v4 = 1;
  v5 = !v4;
  if (!v4)
  {
    sub_216B4CD2C(a1, a4, 803, (uint64_t)v9);
    v7 = sub_216B1E600(a2);
    sub_216B60EA8(v9, v7);
    sub_216B4B3B4(v9);
  }
  return v5;
}

uint64_t sub_216B6E098(uint64_t a1, char a2)
{
  char v4;

  v4 = a2;
  sub_216B1FBBC(a1, &v4);
  return a1;
}

uint64_t sub_216B6E0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, const void **a6, const void **a7)
{
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  const void *v23;
  const void *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _DWORD *v32;
  const void *v33;
  size_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _DWORD *v40;
  const void *v41;
  size_t v42;
  __int16 v43;
  __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  const void *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57[2];
  uint64_t v58[2];
  uint64_t v59[2];
  const void *v60[131];
  uint64_t v61[2];
  uint64_t v62[2];
  const void *v63[131];
  _QWORD v64[2];
  _QWORD v65[16];

  v65[15] = *MEMORY[0x24BDAC8D0];
  v64[0] = a2;
  v64[1] = a3;
  v12 = sub_216B26CA8(v64, 0x2Fu, 0);
  if (v12 != -1)
  {
    v13 = v12;
    v14 = (char *)sub_216B1E600(a4);
    v15 = j__strstr(v14, ".framework");
    if (v15)
    {
      v16 = v15[10];
      if (v16 == 92 || v16 == 47)
      {
        sub_216B6E58C(v63, v14, v15 + 11);
        sub_216B1E678((int)v62, "Frameworks/");
        sub_216B341A4(v63, v62[0], v62[1]);
        v17 = (char *)sub_216B1E600((uint64_t)v64);
        v18 = sub_216B1E600((uint64_t)v64);
        sub_216B34D4C(v63, v17, (char *)(v18 + v13));
        sub_216B1E678((int)v61, ".framework/");
        sub_216B341A4(v63, v61[0], v61[1]);
        v19 = sub_216B2864C(v64, 0, v13);
        v21 = (unsigned int *)sub_216B6E590(a1 + 296, v19, v20);
        if (!*(_QWORD *)sub_216B3DBD0((uint64_t)v21)
          || (v22 = sub_216B1E4E0(v21), sub_216B1FF14((uint64_t)v63) != v22)
          || (v23 = (const void *)sub_216B4ADBC((uint64_t)v21),
              v24 = (const void *)sub_216B1FF44((uint64_t)v63, 0),
              v25 = sub_216B1E4E0(v21),
              !memcmp(v23, v24, v25)))
        {
          if (*(_QWORD *)sub_216B3DBD0((uint64_t)v21))
          {
            if (!a6)
            {
LABEL_11:
              sub_216B6D38C(v60, v63);
              sub_216B1E678((int)v59, "Headers/");
              sub_216B341A4(v60, v59[0], v59[1]);
              if (a5)
              {
                sub_216B20594(a5);
                v28 = (char *)sub_216B1E600((uint64_t)v60);
                v29 = sub_216B1E67C((uint64_t)v60);
                sub_216B202D8(a5, v28, (char *)(v29 - 1));
              }
              v30 = (char *)(sub_216B1E600((uint64_t)v64) + v13 + 1);
              v31 = (char *)sub_216B1E608(v64);
              sub_216B34D4C(v60, v30, v31);
              v32 = *(_DWORD **)(a1 + 16);
              v33 = (const void *)sub_216B24850((uint64_t)v60);
              v35 = sub_216B50040(v32, v33, v34, 1, 1);
              if (v35)
                goto LABEL_17;
              sub_216B6E59C(v60, (uint64_t)v63);
              sub_216B1E678((int)v58, "PrivateHeaders/");
              sub_216B341A4(v60, v58[0], v58[1]);
              if (a5)
              {
                sub_216B20594(a5);
                v36 = (char *)sub_216B1E600((uint64_t)v60);
                v37 = sub_216B1E67C((uint64_t)v60);
                sub_216B202D8(a5, v36, (char *)(v37 - 1));
              }
              v38 = (char *)(sub_216B1E600((uint64_t)v64) + v13 + 1);
              v39 = (char *)sub_216B1E608(v64);
              sub_216B34D4C(v60, v38, v39);
              v40 = *(_DWORD **)(a1 + 16);
              v41 = (const void *)sub_216B24850((uint64_t)v60);
              v35 = sub_216B50040(v40, v41, v42, 1, 1);
              if (v35)
              {
LABEL_17:
                v43 = *sub_216B6DE18(a1, a4) & 0xC;
                v44 = sub_216B6DE18(a1, v35);
                *v44 = *v44 & 0xFFF3 | v43;
                if (a7)
                {
                  sub_216B295C4((uint64_t)v63);
                  sub_216B6D390(v65);
                  v45 = *(_QWORD *)(a1 + 16);
                  v46 = sub_216B28180((uint64_t)v63);
                  v48 = sub_216B6D394(v45, v46, v47, v65);
                  v49 = (char *)sub_216B1E600((uint64_t)v48);
                  sub_216B1E678((int)v57, v49);
                  v50 = (const void *)sub_216B2933C(v57[0], v57[1]);
                  if (sub_216B6C5A4(a1, v50, v51, v48, 0))
                    *a7 = sub_216B6D49C(a1, v35);
                  sub_216B6D4DC(v65);
                }
              }
              sub_216B2489C(v60);
              goto LABEL_27;
            }
LABEL_10:
            sub_216B20594(a6);
            v26 = (char *)(sub_216B1E600((uint64_t)v64) + v13 + 1);
            v27 = (char *)sub_216B1E608(v64);
            sub_216B202D8(a6, v26, v27);
            goto LABEL_11;
          }
          ++*(_DWORD *)(a1 + 1204);
          v52 = *(_QWORD *)(a1 + 16);
          v53 = sub_216B24850((uint64_t)v63);
          v55 = sub_216B4FCC4(v52, v53, v54, 1);
          if (v55)
          {
            *(_QWORD *)sub_216B3DBD0((uint64_t)v21) = v55;
            if (!a6)
              goto LABEL_11;
            goto LABEL_10;
          }
        }
        v35 = 0;
LABEL_27:
        sub_216B2489C(v63);
        return v35;
      }
    }
  }
  return 0;
}

uint64_t sub_216B6E590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B6F2EC(a1, a2, a3, 0, 0);
}

const void **sub_216B6E59C(const void **a1, uint64_t a2)
{
  sub_216B6F270(a1, a2);
  return a1;
}

_QWORD *sub_216B6E5C0(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B6C220(a1);
  if (a2 > (unint64_t)result)
    return sub_216B6FCAC(a1, a2 - (_QWORD)result);
  if (a2 < (unint64_t)result)
    return (_QWORD *)sub_216B6FD70(a1, *a1 + 32 * a2);
  return result;
}

BOOL sub_216B6E618(__int16 *a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  _BOOL8 result;

  v4 = *a1;
  v5 = *(_WORD *)a2 & 1 | *a1;
  *a1 = v5;
  v6 = (*(_WORD *)a2 | v4) & 2 | v5 & 0xFFFD;
  *a1 = v6;
  v7 = v6 & 0xFFDF | (*(_WORD *)a2 | v4) & 0x20;
  *a1 = v7;
  a1[1] += *(_WORD *)(a2 + 2);
  if (!*((_QWORD *)a1 + 1) && !*((_DWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(a2 + 4);
  }
  if ((*(_WORD *)a2 & 0x10) != 0)
  {
    v8 = *(_WORD *)a2 & 0xC | v7 & 0xFFF3;
    *a1 = v8;
    v9 = *(_WORD *)a2 & 0x10 | v8 & 0xFFEF;
    *a1 = v9;
    *a1 = v9 & 0xFBFF | *(_WORD *)a2 & 0x400;
  }
  result = sub_216B29094((uint64_t)(a1 + 8));
  if (result)
    *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  *a1 |= 0x200u;
  return result;
}

_WORD *sub_216B6E71C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  unsigned int v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  _WORD *v12;
  __int16 v13;

  v8 = sub_216B387B8(a2);
  v9 = (uint64_t *)(a1 + 112);
  if (sub_216B6C220(v9) <= (unint64_t)v8)
  {
    v10 = sub_216B387B8(a2);
    sub_216B6E5C0(v9, (v10 + 1));
  }
  v11 = sub_216B387B8(a2);
  v12 = (_WORD *)sub_216B4F6F0(v9, v11);
  if (a4)
    v13 = 96;
  else
    v13 = 32;
  *v12 = v13 | *v12 & 0xFF9F;
  return sub_216B6E7C0(v12, a3);
}

_WORD *sub_216B6E7C0(_WORD *result, char a2)
{
  *result = *result & 0xFE7F | ((a2 & 3) << 7);
  return result;
}

uint64_t sub_216B6E7D8(uint64_t a1, uint64_t a2, int a3)
{
  __int16 *v5;
  __int16 *v6;
  __int16 v7;
  uint64_t result;
  uint64_t v9;

  ++*(_DWORD *)(a1 + 1192);
  v5 = sub_216B6DE18(a1, a2);
  v6 = v5;
  v7 = *v5;
  if (a3)
  {
    *v5 = v7 | 1;
    if (v5[1])
      return 0;
  }
  else if ((v7 & 1) != 0)
  {
    return 0;
  }
  v9 = sub_216B6C004((uint64_t)v5, *(_QWORD *)(a1 + 1176));
  if (v9 && sub_216B5E108(v9))
  {
    result = 0;
    ++*(_DWORD *)(a1 + 1196);
  }
  else
  {
    ++v6[1];
    return 1;
  }
  return result;
}

uint64_t sub_216B6E874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B704BC(a1, a2, a3, 0);
}

uint64_t sub_216B6E87C(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v2 = sub_216B3DBD0((uint64_t)a1);
  v3 = sub_216B1E4E0(a1);
  sub_216B1E684(&v5, v2, v3);
  return v5;
}

uint64_t sub_216B6E8C4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[40];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!sub_216B6EA34(a1))
    return 0;
  sub_216B4C3E4(v22);
  v20 = sub_216B290FC(a2, a3);
  v21 = v10;
  if (!sub_216B29094((uint64_t)&v20))
  {
    while (1)
    {
      v19 = 0;
      v12 = sub_216B4FCC4(*(_QWORD *)(a1 + 16), v20, v21, 1);
      v19 = v12;
      if (!v12)
        break;
      if (sub_216B6C698(a1, (uint64_t)v12, a5, 0) <= 1)
      {
        v15 = sub_216B26878((uint64_t)v22);
        if (v15)
        {
          v16 = 0;
          v17 = a1 + 992;
          v11 = 1;
          do
          {
            v18 = (uint64_t *)sub_216B4FBDC((uint64_t)v22, v16);
            *(_BYTE *)sub_216B6EA3C(v17, v18) = 1;
            ++v16;
          }
          while (v15 != v16);
        }
        else
        {
          v11 = 1;
        }
        goto LABEL_4;
      }
      if (v19 != a4)
      {
        sub_216B268AC((uint64_t)v22, &v19);
        v20 = sub_216B290FC(v20, v21);
        v21 = v13;
        if (!sub_216B29094((uint64_t)&v20))
          continue;
      }
      break;
    }
  }
  v11 = 0;
LABEL_4:
  sub_216B1FF6C(v22);
  return v11;
}

uint64_t sub_216B6EA34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1208);
}

uint64_t *sub_216B6EA3C(uint64_t a1, uint64_t *a2)
{
  return sub_216B6F294(a1, a2) + 1;
}

uint64_t sub_216B6EA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10[2];
  _BYTE v11[16];
  _BYTE v12[16];
  uint64_t v13[2];
  uint64_t v14;

  v14 = sub_216B5EE7C(a2);
  sub_216B61DC0(a1 + 992, &v14, (uint64_t)v13);
  sub_216B61AA0(a1 + 992, (uint64_t)v11);
  sub_216B4F784(v12, v11);
  if (sub_216B50AF4(v13, (uint64_t)v12))
  {
    if (*(_BYTE *)(sub_216B1E600((uint64_t)v13) + 8))
      return 0;
    else
      return 3;
  }
  else if (sub_216B81458((uint64_t *)(a1 + 488), a2, a3)
         || (v7 = (char *)sub_216B1E600(a2),
             sub_216B1E678((int)v10, v7),
             (v8 = sub_216B6EB7C(v10[0], v10[1], v14, *(_DWORD **)(a1 + 16))) != 0)
         && sub_216B81458((uint64_t *)(a1 + 488), v8, a3))
  {
    *(_BYTE *)sub_216B6EA3C(a1 + 992, &v14) = 0;
    return 3;
  }
  else
  {
    v9 = sub_216B6EA3C(a1 + 992, &v14);
    result = 1;
    *(_BYTE *)v9 = 1;
  }
  return result;
}

uint64_t sub_216B6EB7C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  const void *v15[2];
  uint64_t v16[3];
  uint64_t v17[3];
  uint64_t v18[3];
  uint64_t v19[3];
  const void *v20[2];
  _QWORD v21[2];
  const void *v22[19];

  v6 = sub_216B2930C(a1, a2);
  v8 = v7;
  v9 = (char *)sub_216B1E600(a3);
  sub_216B1E678((int)v21, v9);
  sub_216B2A0B0(v22, v21[0], v21[1]);
  sub_216B1E678((int)v20, "module.map");
  if (sub_216B274F0(v6, v8, v20[0], (size_t)v20[1]))
  {
    v10 = "module_private.map";
  }
  else
  {
    sub_216B1E678((int)v15, "module.modulemap");
    if (!sub_216B274F0(v6, v8, v15[0], (size_t)v15[1]))
    {
      v13 = 0;
      goto LABEL_7;
    }
    v10 = "module.private.modulemap";
  }
  sub_216B25FA8((uint64_t)v19, v10);
  sub_216B25FA8((uint64_t)v18, &byte_216C19659);
  sub_216B25FA8((uint64_t)v17, &byte_216C19659);
  sub_216B25FA8((uint64_t)v16, &byte_216C19659);
  sub_216B28DE8(v22, v19, v18, v17, v16);
  v11 = (const void *)sub_216B28180((uint64_t)v22);
  v13 = sub_216B50040(a4, v11, v12, 0, 1);
LABEL_7:
  sub_216B2489C(v22);
  return v13;
}

uint64_t sub_216B6ECC8(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  _DWORD *v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  _DWORD *v12;
  const void *v13;
  size_t v14;
  uint64_t v16[2];
  uint64_t v17[3];
  uint64_t v18[3];
  uint64_t v19[3];
  uint64_t v20[3];
  _QWORD v21[2];
  const void *v22[19];

  v6 = (char *)sub_216B1E600(a2);
  sub_216B1E678((int)v21, v6);
  sub_216B2A0B0(v22, v21[0], v21[1]);
  if (a3)
  {
    sub_216B25FA8((uint64_t)v20, "Modules");
    sub_216B25FA8((uint64_t)v19, &byte_216C19659);
    sub_216B25FA8((uint64_t)v18, &byte_216C19659);
    sub_216B25FA8((uint64_t)v17, &byte_216C19659);
    sub_216B28DE8(v22, v20, v19, v18, v17);
  }
  sub_216B25FA8((uint64_t)v20, "module.modulemap");
  sub_216B25FA8((uint64_t)v19, &byte_216C19659);
  sub_216B25FA8((uint64_t)v18, &byte_216C19659);
  sub_216B25FA8((uint64_t)v17, &byte_216C19659);
  sub_216B28DE8(v22, v20, v19, v18, v17);
  v7 = *(_DWORD **)(a1 + 16);
  v8 = (const void *)sub_216B28180((uint64_t)v22);
  v10 = sub_216B50040(v7, v8, v9, 0, 1);
  if (!v10)
  {
    v11 = (char *)sub_216B1E600(a2);
    sub_216B1E678((int)v16, v11);
    sub_216B6C7A4(v22, v16[0], v16[1]);
    sub_216B25FA8((uint64_t)v20, "module.map");
    sub_216B25FA8((uint64_t)v19, &byte_216C19659);
    sub_216B25FA8((uint64_t)v18, &byte_216C19659);
    sub_216B25FA8((uint64_t)v17, &byte_216C19659);
    sub_216B28DE8(v22, v20, v19, v18, v17);
    v12 = *(_DWORD **)(a1 + 16);
    v13 = (const void *)sub_216B28180((uint64_t)v22);
    v10 = sub_216B50040(v12, v13, v14, 0, 1);
  }
  sub_216B2489C(v22);
  return v10;
}

BOOL sub_216B6EEAC(uint64_t a1)
{
  return sub_216B6EF98(a1) == 2;
}

uint64_t sub_216B6EEC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  _BOOL4 v12;

  v2 = (_QWORD *)(a1 + 24);
  result = sub_216B2D0E0((_QWORD *)(a1 + 24));
  v4 = result;
  if ((_DWORD)result)
  {
    v5 = 0;
    do
    {
      v6 = sub_216B2D0F0(v2, v5);
      result = sub_216B6C660(v6);
      if ((_DWORD)result)
      {
        v7 = sub_216B2D0F0(v2, v5);
        v8 = sub_216B6C774(v7);
        v9 = sub_216B2D0F0(v2, v5);
        v10 = sub_216B6C67C(v9);
        v11 = sub_216B2D0F0(v2, v5);
        v12 = sub_216B6C54C(v11);
        result = sub_216B6C698(a1, v8, v10, v12);
      }
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_216B6EF78(uint64_t result, int a2)
{
  char v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 0xDF | v2;
  return result;
}

uint64_t sub_216B6EF98(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 3;
}

const void **sub_216B6EFAC(const void **a1, _QWORD *a2)
{
  sub_216B2112C();
  if (!sub_216B29084(a2))
    sub_216B2A3F0(a1, (uint64_t)a2);
  return a1;
}

uint64_t sub_216B6EFF0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B6F04C(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B2B018(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 24;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216B6F04C(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B6F140((uint64_t)a1);
  v5 = sub_216B60724((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(24 * v7, 0x1012040EC159624uLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B6F180(v9, v10, (uint64_t)v8);
  v11 = (std::string *)sub_216B1E600((uint64_t)a1);
  v12 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B6F1D0(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 24 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 24 * v7;
  return result;
}

unint64_t sub_216B6F140(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return 0xAAAAAAAAAAAAAAABLL * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B6F180(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B2B018(a3, v5);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_216B6F1D0(std::string *a1, std::string *a2)
{
  std::string *v2;

  if (a2 != a1)
  {
    v2 = a2;
    do
      std::string::~string(--v2);
    while (v2 != a1);
  }
}

_QWORD *sub_216B6F210(_QWORD *a1)
{
  std::string *v2;
  std::string *v3;
  void *v4;

  v2 = (std::string *)sub_216B1E600((uint64_t)a1);
  v3 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B6F1D0(v2, v3);
  if (!sub_216B2081C(a1))
  {
    v4 = (void *)sub_216B1E600((uint64_t)a1);
    free(v4);
  }
  return a1;
}

uint64_t sub_216B6F264(uint64_t a1)
{
  return sub_216B65914(a1, 0, 0);
}

const void **sub_216B6F270(const void **a1, uint64_t a2)
{
  sub_216B2A3F0(a1, a2);
  return a1;
}

uint64_t *sub_216B6F294(uint64_t a1, uint64_t *a2)
{
  char v5;
  uint64_t *v6;

  v6 = 0;
  if (sub_216B65E8C(a1, a2, &v6))
    return v6;
  v5 = 0;
  return sub_216B67C88(a1, a2, &v5, v6);
}

uint64_t sub_216B6F2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8[4];
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v10[0] = a4;
  v10[1] = a5;
  sub_216B26D04((uint64_t)v11, (uint64_t)v10, (uint64_t)v8);
  v9[0] = sub_216B6F340(a1, v8);
  v9[1] = v6;
  return sub_216B3C9C8((uint64_t)v9);
}

uint64_t sub_216B6F340(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *a2, a2[1]);
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B6F42C(*a2, a2[1], (uint64_t *)(a1 + 24), a2[2], a2[3]);
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B6F42C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v8 = sub_216B1E67C((uint64_t)v15);
  v9 = sub_216B3DE34();
  v10 = sub_216B2663C(a3, (v8 + 25), v9);
  v11 = sub_216B6F4CC(v10, v8, a4, a5);
  v12 = (void *)sub_216B4ADBC(v11);
  v13 = (const void *)sub_216B1E600((uint64_t)v15);
  memcpy(v12, v13, v8);
  *((_BYTE *)v12 + v8) = 0;
  return v10;
}

_DWORD *sub_216B6F4D0(_DWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD *result;

  result = sub_216B2A7D8(a1, a2);
  *((_QWORD *)result + 1) = a3;
  *((_QWORD *)result + 2) = a4;
  return result;
}

uint64_t sub_216B6F4F8(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = sub_216B3125C(a1, a2, 24);
  sub_216B39B60((_QWORD *)(v3 + 24));
  return a1;
}

uint64_t sub_216B6F528(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B3D760(a1, 24);
  sub_216B39B60((_QWORD *)(v2 + 24));
  return a1;
}

uint64_t *sub_216B6F558(uint64_t *a1)
{
  sub_216B6F57C(a1);
  return a1;
}

uint64_t sub_216B6F57C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_216B6F58C();
  return result;
}

void sub_216B6F590(_DWORD *a1)
{
  void *v2;

  if ((*a1)-- == 1)
  {
    v2 = (void *)sub_216B6F5BC();
    j__free(v2);
  }
}

uint64_t sub_216B6F5C0(uint64_t a1)
{
  sub_216B2C034(a1 + 1088);
  sub_216B6F628(a1 + 632);
  sub_216B6F628(a1 + 176);
  std::string::~string((std::string *)(a1 + 128));
  std::string::~string((std::string *)(a1 + 104));
  std::string::~string((std::string *)(a1 + 80));
  sub_216B6C214(a1 + 56);
  sub_216B6C214(a1 + 32);
  std::string::~string((std::string *)(a1 + 8));
  return a1;
}

uint64_t sub_216B6F62C(uint64_t a1)
{
  sub_216B2C034(a1 + 432);
  return sub_216B6F654(a1);
}

uint64_t sub_216B6F658(uint64_t a1)
{
  sub_216B6F680(a1 + 408);
  return sub_216B6D4DC(a1);
}

uint64_t sub_216B6F68C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B6F6BC(a1, v3);
  return a1;
}

uint64_t sub_216B6F6BC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;

  if (a2)
  {
    v3 = result;
    sub_216B6F6BC(result, *a2);
    sub_216B6F6BC(v3, a2[1]);
    v5 = sub_216B3A8F0(v3, v4);
    v7 = (std::string *)nullsub_1(a2 + 4, v6);
    sub_216B6F724(v5, v7);
    return sub_216B51070(v5, a2, 1);
  }
  return result;
}

void sub_216B6F724(int a1, std::string *this)
{
  std::string::~string(this);
}

uint64_t sub_216B6F72C(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B6F768(&v3);
  return a1;
}

uint64_t *sub_216B6F768(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B6F7CC(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B4F588(v6, v8);
    return (uint64_t *)sub_216B4F584(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B6F7CC(uint64_t *a1)
{
  return sub_216B6F7D4((uint64_t)a1, *a1);
}

uint64_t sub_216B6F7D4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B6F838(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 32;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void sub_216B6F83C(int a1, std::string *this)
{
  j_std::string::~string(this);
}

uint64_t sub_216B6F844(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B6F880(&v3);
  return a1;
}

uint64_t *sub_216B6F880(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B6F8E4(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B4F588(v6, v8);
    return (uint64_t *)sub_216B4F584(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B6F8E4(uint64_t *a1)
{
  return sub_216B6F8EC((uint64_t)a1, *a1);
}

uint64_t sub_216B6F8EC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = j_nullsub_1(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 32;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B6F950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B6F9E0(v5, a1 + 24);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  sub_216B3A034(a1 + 24);
  return a1;
}

uint64_t sub_216B6F9E0(unsigned int *a1, uint64_t a2)
{
  sub_216B1E4E0(a1);
  return nullsub_1(a2, a1);
}

uint64_t sub_216B6FA10(uint64_t a1)
{
  sub_216B6FA38(a1, 0);
  return a1;
}

void sub_216B6FA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B6FA94(v7, v4);
  }
}

void sub_216B6FA94(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B6FAB4(a2);
    j__free(v2);
  }
}

uint64_t sub_216B6FAB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  if (!sub_216B3D818(a1))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(unsigned int **)(*(_QWORD *)a1 + v3);
        if (v5 && v5 != (unsigned int *)sub_216B25120())
          sub_216B6FB48(v5, a1 + 24);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  sub_216B3A034(a1 + 24);
  return a1;
}

uint64_t sub_216B6FB48(unsigned int *a1, uint64_t a2)
{
  sub_216B1E4E0(a1);
  sub_216B4F49C(a1);
  return nullsub_1(a2, a1);
}

uint64_t sub_216B6FB8C(uint64_t a1)
{
  return sub_216B66D4C(a1, 4u);
}

uint64_t sub_216B6FB94(_QWORD *a1)
{
  sub_216B6FBB8(a1);
  return sub_216B6FBF8(a1 + 51);
}

void sub_216B6FBB8(_QWORD *a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)sub_216B1E600((uint64_t)a1);
  v3 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B6F1D0(v2, v3);
  a1[1] = *a1;
}

_QWORD *sub_216B6FBFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  v3 = (_QWORD *)sub_216B3A8D8(a1, a2);
  sub_216B6F6BC(a1, v3);
  *(_QWORD *)sub_216B2C144(a1, v4) = 0;
  v6 = sub_216B3A914(a1, v5);
  *(_QWORD *)nullsub_1(a1, v7) = v6;
  result = (_QWORD *)sub_216B3A914(a1, v8);
  *result = 0;
  return result;
}

_QWORD *sub_216B6FC58(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 1;
  return result;
}

uint64_t sub_216B6FC68(uint64_t a1, char *a2, char *a3)
{
  const void **v6;

  v6 = (const void **)sub_216B2112C();
  sub_216B202D8(v6, a2, a3);
  return a1;
}

_QWORD *sub_216B6FCAC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  if (a2 <= (*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - a1[1]) >> 5)
    return sub_216B6FDB4((uint64_t)a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B6C220(a1);
  v7 = sub_216B6FE30(a1, v6 + a2);
  v8 = sub_216B6C220(a1);
  sub_216B6FEA8(v10, v7, v8, v5);
  sub_216B6FEAC((uint64_t)v10, a2);
  sub_216B6FF24(a1, v10);
  return (_QWORD *)sub_216B70010(v10);
}

uint64_t sub_216B6FD70(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B6C220(a1);
  sub_216B6F8EC((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

_QWORD *sub_216B6FDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_216B70014(&v10, a1, a2);
  v4 = v11;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = sub_216B2C144(a1, v3);
    v8 = nullsub_1(v4, v7);
    sub_216B70018(v6, v8);
    v4 += 32;
    v11 = v4;
  }
  return sub_216B2C330(&v10);
}

unint64_t sub_216B6FE30(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216B70084((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B4F588(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216B6FEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B701AC(&v9, (_QWORD *)(a1 + 16), a2);
  v3 = v9;
  v4 = v10;
  while (v3 != v4)
  {
    v5 = sub_216B2C5E4(a1);
    v7 = nullsub_1(v9, v6);
    sub_216B70018(v5, v7);
    v4 = v10;
    v3 = v9 + 32;
    v9 += 32;
  }
  return sub_216B701B0((uint64_t)&v9);
}

uint64_t sub_216B6FF24(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216B701DC();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B6C220(a1);
  return nullsub_1(a1, v10);
}

_QWORD *sub_216B7001C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 32 * a3;
  return result;
}

uint64_t sub_216B70038(uint64_t a1, uint64_t a2)
{
  return sub_216B70040(a2);
}

uint64_t sub_216B70044(uint64_t a1)
{
  *(_DWORD *)a1 = *(_WORD *)a1 & 0xF000;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_216B26D14((_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_216B70084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216B700C0(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216B700C4()
{
  return 0x7FFFFFFFFFFFFFFLL;
}

uint64_t *sub_216B700CC(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B70154(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 32 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 32 * v9;
  return a1;
}

uint64_t sub_216B70154(uint64_t a1, unint64_t a2)
{
  return sub_216B70178(a1, a2);
}

uint64_t sub_216B70178(uint64_t a1, unint64_t a2)
{
  if (sub_216B700C0(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(32 * a2, 8);
}

_QWORD *sub_216B701B4(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  *result = *a2;
  result[1] = *a2 + 32 * a3;
  result[2] = a2;
  return result;
}

uint64_t sub_216B701CC(uint64_t result)
{
  **(_QWORD **)(result + 16) = *(_QWORD *)result;
  return result;
}

uint64_t sub_216B701DC()
{
  return sub_216B701F8();
}

uint64_t sub_216B701F8()
{
  _QWORD v1[3];

  sub_216B7021C(v1);
  return v1[2];
}

uint64_t sub_216B70224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B702F0(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216B702F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  while (sub_216B2C76C((uint64_t)v15, (uint64_t)v14))
  {
    v9 = (_OWORD *)sub_216B7037C((uint64_t)v15, v8);
    v10 = (_OWORD *)sub_216B703A0((uint64_t)v13);
    v11 = v9[1];
    *v10 = *v9;
    v10[1] = v11;
    sub_216B703AC((uint64_t)v15);
    sub_216B703AC((uint64_t)v13);
  }
  return sub_216B26D04((uint64_t)v15, (uint64_t)v13, a7);
}

uint64_t sub_216B7037C(uint64_t a1, uint64_t a2)
{
  nullsub_1(a1, a2);
  return sub_216B703A0(a1);
}

uint64_t sub_216B703A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 32;
}

uint64_t sub_216B703AC(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 32;
  return result;
}

uint64_t *sub_216B703BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216B70418((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B70420(a1, v4);
    sub_216B4F584(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B70418(uint64_t a1)
{
  return sub_216B70450(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B70420(_QWORD *a1, uint64_t a2)
{
  return (uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 5;
}

uint64_t sub_216B70454(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 32;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = j_nullsub_1(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B704BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  _BYTE v7[24];
  _QWORD v8[2];
  char v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9 = a4;
  sub_216B699AC((uint64_t)v10, (uint64_t)&v9, (uint64_t)v7);
  v8[0] = sub_216B70510(a1, (uint64_t)v7);
  v8[1] = v5;
  return sub_216B3C9C8((uint64_t)v8);
}

uint64_t sub_216B70510(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v10;
  _BYTE v11[8];

  v4 = sub_216B312EC(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)a1;
  v6 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (v7)
  {
    if (v7 != sub_216B25120())
    {
      sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v6, 0);
      v10 = 0;
      return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
    }
    v7 = *(_QWORD *)(v5 + 8 * v6);
  }
  if (v7 == sub_216B25120())
    --*(_DWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v6) = sub_216B705FC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t *)(a1 + 24), *(char *)(a2 + 16));
  ++*(_DWORD *)(a1 + 12);
  v8 = sub_216B31650(a1, v6);
  sub_216B3DD28(v11, *(_QWORD *)a1 + 8 * v8, 0);
  v10 = 1;
  return sub_216B310D8((uint64_t)v11, (uint64_t)&v10);
}

uint64_t sub_216B705FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v6 = sub_216B1E67C((uint64_t)v13);
  v7 = sub_216B34088();
  v8 = sub_216B2663C(a3, (v6 + 9), v7);
  v9 = sub_216B69A4C(v8, v6, a4);
  v10 = (void *)sub_216B3DBD0(v9);
  v11 = (const void *)sub_216B1E600((uint64_t)v13);
  memcpy(v10, v11, v6);
  *((_BYTE *)v10 + v6) = 0;
  return v8;
}

uint64_t sub_216B7068C(uint64_t a1)
{
  if ((sub_216B711CC(a1) & 1) != 0)
    return 0;
  else
    return *(_QWORD *)(a1 + 8);
}

double sub_216B706C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10[2];

  *(_QWORD *)(a1 + 392) = a3;
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 128) = a4;
  if (a2 == a3)
  {
    sub_216B1E684(v10, a2, a4 - a2);
    sub_216B32854(v9, v10[0], v10[1]);
    v8 = 3;
    v5 = sub_216B349EC((uint64_t)v9, (unsigned __int16 *)"﻿", (uint64_t)&v8);
    v7 = 0;
    *(_QWORD *)(a1 + 392) += sub_216B34208(v5, (uint64_t)&v7);
  }
  *(_WORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 404) = 0;
  *(_QWORD *)&result = 257;
  *(_DWORD *)(a1 + 400) = 257;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  return result;
}

uint64_t sub_216B7075C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)sub_216B9D61C(a1, a4, a2) = off_24D6024F8;
  v8 = sub_216B40EE8(a4);
  *(_DWORD *)(a1 + 136) = sub_216B64050(v8, a2);
  v9 = sub_216B5EE7C(a4);
  sub_216B70810(a1 + 144, v9);
  v10 = sub_216B1E67C(a3);
  v11 = sub_216B1E67C(a3);
  v12 = sub_216B2037C(a3);
  sub_216B706C0(a1, v10, v11, v12);
  sub_216B70814(a1);
  return a1;
}

uint64_t sub_216B70814(uint64_t a1)
{
  char v2;

  if ((*(_BYTE *)(a1 + 148) & 0x80) != 0)
    return sub_216B70864(a1, 1);
  v2 = sub_216B70880(*(_QWORD *)(a1 + 8));
  return sub_216B70878(a1, v2);
}

uint64_t sub_216B7085C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  return sub_216B7075C(a1, a2, a3, a4);
}

uint64_t sub_216B70864(uint64_t result, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(result + 385) = v2;
  return result;
}

uint64_t sub_216B70878(uint64_t result, char a2)
{
  *(_BYTE *)(result + 385) = a2;
  return result;
}

uint64_t sub_216B70880(uint64_t a1)
{
  return *(_WORD *)(a1 + 436) & 1;
}

uint64_t sub_216B7088C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = sub_216B7090C(a1);
  *(_QWORD *)v12 = off_24D6024F8;
  *(_DWORD *)(v12 + 136) = a2;
  sub_216B70810(v12 + 144, a3);
  sub_216B706C0(a1, a4, a5, a6);
  *(_BYTE *)(a1 + 26) = 1;
  return a1;
}

uint64_t sub_216B7090C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D602918;
  *(_QWORD *)(a1 + 8) = 0;
  sub_216B4AED0((_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 23) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  sub_216B772A0(a1 + 32);
  sub_216B2D768(a1 + 64);
  return a1;
}

uint64_t sub_216B70958(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_216B7088C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216B70960(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)sub_216B7090C(a1) = off_24D6024F8;
  *(_DWORD *)(a1 + 136) = sub_216B64050(a4, a2);
  sub_216B70810(a1 + 144, a5);
  v10 = sub_216B1E67C(a3);
  v11 = sub_216B1E67C(a3);
  v12 = sub_216B2037C(a3);
  sub_216B706C0(a1, v10, v11, v12);
  *(_BYTE *)(a1 + 26) = 1;
  return a1;
}

uint64_t sub_216B70A08(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_216B70960(a1, a2, a3, a4, a5);
}

uint64_t sub_216B70A10(int a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;

  v10 = (_DWORD *)sub_216B40EE8(a5);
  v11 = sub_216B60454(v10, a1);
  v12 = sub_216B604C8((uint64_t)v10, v11, 0);
  v13 = sub_216B1D1D4(408);
  sub_216B7085C(v13, v11, v12, a5);
  v14 = sub_216B634EC((uint64_t)v10, a1, 0);
  *(_QWORD *)(v13 + 392) = v14;
  *(_QWORD *)(v13 + 128) = &v14[a4];
  v15 = sub_216B64050((uint64_t)v10, v11);
  *(_DWORD *)(v13 + 136) = sub_216B61BF8((uint64_t)v10, v15, a2, a3, a4, 0, 0);
  *(_BYTE *)(v13 + 24) = 1;
  *(_BYTE *)(v13 + 384) = 1;
  return v13;
}

char *sub_216B70B04@<X0>(std::string *__str@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v5;
  char *result;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  std::string::const_iterator v11;
  uint64_t v12;
  uint64_t v13;
  std::string::const_iterator __pos;

  std::string::basic_string(a3, __str);
  result = (char *)sub_216B25B78((uint64_t)a3, v5);
  v7 = (int)result;
  if ((_DWORD)result)
  {
    v8 = 0;
    if (a2)
      v9 = 39;
    else
      v9 = 34;
    do
    {
      if (*(_BYTE *)sub_216B25B54((uint64_t)a3, v8) == 92
        || (result = (char *)sub_216B25B54((uint64_t)a3, v8), v9 == *result))
      {
        v12 = sub_216B29A94((uint64_t)a3, v10);
        v13 = sub_216B2EF68(&v12, v8);
        sub_216B2C008(&__pos, &v13);
        v11.__i_ = __pos.__i_;
        result = std::string::insert(a3, v11, 92).__i_;
        ++v8;
        ++v7;
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

_BYTE *sub_216B70BEC(uint64_t a1)
{
  _BYTE *result;
  int v3;
  unsigned int v4;
  uint64_t v5;
  char v6;

  result = (_BYTE *)sub_216B1FF14(a1);
  v3 = (int)result;
  if ((_DWORD)result)
  {
    v4 = 0;
    do
    {
      if (*(_BYTE *)sub_216B1FF44(a1, v4) == 92 || (result = (_BYTE *)sub_216B1FF44(a1, v4), *result == 34))
      {
        v5 = sub_216B1E600(a1);
        v6 = 92;
        result = (_BYTE *)sub_216B70C8C(a1, (_BYTE *)(v5 + v4++), &v6);
        ++v3;
      }
      ++v4;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t sub_216B70C8C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  v4 = a2;
  if ((_BYTE *)sub_216B1E67C(a1) == a2)
  {
    sub_216B1FBBC(a1, a3);
    return sub_216B1E67C(a1) - 1;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a1 + 16))
    {
      v6 = &v4[-sub_216B1E600(a1)];
      sub_216B20384((const void **)a1, 0);
      v4 = &v6[sub_216B1E600(a1)];
    }
    v7 = (_BYTE *)sub_216B1E67C(a1);
    *v7 = *(_BYTE *)sub_216B6D364(a1);
    sub_216B1E67C(a1);
    sub_216B1E67C(a1);
    sub_216B3B514();
    v8 = sub_216B1E67C(a1);
    sub_216B203A4(a1, v8 + 1);
    if (v4 <= a3 && *(_QWORD *)(a1 + 8) > (unint64_t)a3)
      ++a3;
    *v4 = *a3;
  }
  return (uint64_t)v4;
}

BOOL sub_216B70D88(uint64_t a1, uint64_t a2)
{
  sub_216B74DE4(a1, a2);
  return *(_QWORD *)(a1 + 392) == *(_QWORD *)(a1 + 128);
}

unint64_t sub_216B70DB8(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  char v20;
  unint64_t result;
  unsigned int v22;
  unsigned int v23;

  v8 = sub_216B693F8(a1);
  v9 = &a2[v8];
  if (sub_216B71174(a1, 13))
  {
    v10 = 0;
    v11 = v8;
    v12 = a2;
    while (v12 < v9)
    {
      v23 = 0;
      v13 = sub_216B71788(v12, (int *)&v23, a3);
      v14 = v10 + 1;
      *(_BYTE *)(a4 + v10) = v13;
      v12 += v23;
      ++v10;
      if (v13 == 34)
        goto LABEL_8;
    }
    v14 = v10;
LABEL_8:
    if (v14 >= 2 && *(_BYTE *)(v14 + a4 - 2) == 82 && *(_BYTE *)(v14 + a4 - 1) == 34)
    {
      v15 = a2 + 1;
      v16 = a2 + 1 - v12;
      v17 = &a2[v14] - v12 + 1;
      v18 = a2 - 1;
      do
      {
        v19 = v18[v11];
        --v16;
        --v17;
        --v15;
        --v18;
      }
      while (v19 != 34);
      memcpy((void *)(a4 + v14), v12, v11 + v16);
      v14 = v11 + v17;
      a2 = &v15[v11];
    }
    else
    {
      a2 = v12;
    }
  }
  else
  {
    v14 = 0;
  }
  if (a2 >= v9)
    return v14;
  do
  {
    v22 = 0;
    v20 = sub_216B71788(a2, (int *)&v22, a3);
    result = v14 + 1;
    *(_BYTE *)(a4 + v14) = v20;
    a2 += v22;
    ++v14;
  }
  while (a2 < v9);
  return result;
}

void sub_216B70F38(unsigned int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned __int8 *a4@<X3>, std::string *a5@<X8>)
{
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;

  v19 = 0;
  v10 = sub_216B1E4E0(a1);
  v11 = (unsigned __int8 *)sub_216B634EC(a2, v10, &v19);
  v12 = v19;
  if (a4)
    *a4 = v19;
  if (v12)
  {
    sub_216B25034(a5);
  }
  else if ((sub_216B1E45C((uint64_t)a1) & 1) != 0)
  {
    sub_216B25034(a5);
    v13 = sub_216B693F8((uint64_t)a1);
    sub_216B25B4C(a5, v13);
    v18 = sub_216B29A94((uint64_t)a5, v14);
    v15 = sub_216B1E600((uint64_t)&v18);
    v16 = sub_216B70DB8((uint64_t)a1, v11, a3, v15);
    sub_216B25B4C(a5, v16);
  }
  else
  {
    v17 = sub_216B693F8((uint64_t)a1);
    sub_216B2B9D0(a5, v11, &v11[v17]);
  }
}

unint64_t sub_216B7102C(unsigned int *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t result;
  int v14;
  int v15;
  _QWORD v16[2];

  if (sub_216B71174((uint64_t)a1, 7))
  {
    v16[0] = sub_216B71184((uint64_t)a1);
    v16[1] = v10;
    v11 = (unsigned __int8 *)sub_216B1E600((uint64_t)v16);
  }
  else if ((sub_216B711C0((uint64_t)a1) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v12 = sub_216B7068C((uint64_t)a1);
    v11 = (unsigned __int8 *)v12;
    if (v12)
    {
      *a2 = sub_216B4AA68(v12);
      return sub_216B4AA80((uint64_t)v11);
    }
  }
  if (sub_216B711CC((uint64_t)a1))
    v11 = (unsigned __int8 *)sub_216B1E67C((uint64_t)a1);
  if (v11)
    goto LABEL_10;
  LOBYTE(v16[0]) = 0;
  v14 = sub_216B1E4E0(a1);
  v11 = (unsigned __int8 *)sub_216B634EC(a3, v14, v16);
  v15 = LOBYTE(v16[0]);
  if (a5)
    *a5 = v16[0];
  if (!v15)
  {
LABEL_10:
    if ((sub_216B1E45C((uint64_t)a1) & 1) != 0)
    {
      return sub_216B70DB8((uint64_t)a1, v11, a4, *a2);
    }
    else
    {
      *a2 = (uint64_t)v11;
      return sub_216B693F8((uint64_t)a1);
    }
  }
  else
  {
    result = 0;
    *a2 = (uint64_t)&byte_216C19659;
  }
  return result;
}

BOOL sub_216B71174(uint64_t a1, int a2)
{
  return *(unsigned __int16 *)(a1 + 16) == a2;
}

uint64_t sub_216B71184(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_216B693F8(a1);
  sub_216B1E684(&v4, v1, v2);
  return v4;
}

uint64_t sub_216B711C0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 18) >> 6) & 1;
}

uint64_t sub_216B711CC(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_216B71644(a1);
  return sub_216B773A4(v1);
}

uint64_t sub_216B711E0(unsigned int a1, _DWORD *a2, uint64_t a3)
{
  char v6;
  uint64_t result;
  _BYTE v8[24];

  sub_216B70D84(v8);
  v6 = sub_216B71248(a1, (uint64_t)v8, a2, a3, 0);
  result = 0;
  if ((v6 & 1) == 0)
    return sub_216B693F8((uint64_t)v8);
  return result;
}

uint64_t sub_216B71248(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t a4, char a5)
{
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  unsigned __int8 v19;
  _BYTE v20[408];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v9 = sub_216B4EDA4(a3, a1);
  v10 = sub_216B60568(a3, v9);
  v19 = 0;
  v11 = v10;
  v18[0] = sub_216B627D4((uint64_t)a3, v10, &v19);
  v18[1] = v12;
  if (v19)
    return 1;
  v14 = (unsigned __int8 *)(sub_216B1E600((uint64_t)v18) + HIDWORD(v10));
  if ((a5 & 1) == 0 && sub_216B71384(*v14))
    return 1;
  v15 = sub_216B64050((uint64_t)a3, v11);
  v16 = sub_216B1E600((uint64_t)v18);
  v17 = sub_216B1E608(v18);
  sub_216B70958((uint64_t)v20, v15, a4, v16, (uint64_t)v14, v17);
  sub_216B70878((uint64_t)v20, 1);
  sub_216B70D88((uint64_t)v20, a2);
  sub_216B70F34(v20);
  return 0;
}

BOOL sub_216B71384(int a1)
{
  return (word_216C12D0C[a1] & 7) != 0;
}

uint64_t sub_216B7139C(unsigned int a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v13;

  v13 = a1;
  if (sub_216B4F6FC(&v13))
    return sub_216B71458(v13, a2, a3);
  v6 = sub_216B62E10(a2, v13);
  v7 = v13;
  if (v6)
  {
    v8 = sub_216B603E4(a2, v13);
    v9 = sub_216B71458(v8, a2, a3);
    v10 = (unint64_t)sub_216B60568(a2, v8) >> 32;
    v11 = sub_216B60568(a2, v9);
    return sub_216B62D74(&v13, HIDWORD(v11) - (int)v10);
  }
  return v7;
}

uint64_t sub_216B71458(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19[6];
  _QWORD v20[2];
  unsigned __int8 v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE v24[408];
  uint64_t v25;

  v5 = a1;
  v25 = *MEMORY[0x24BDAC8D0];
  v23 = a1;
  v22 = sub_216B60568(a2, a1);
  if (!sub_216B4B4A8(&v22))
  {
    v21 = 0;
    v20[0] = sub_216B627D4((uint64_t)a2, v22, &v21);
    v20[1] = v6;
    if (!v21)
    {
      v7 = sub_216B1E600((uint64_t)v20);
      v8 = HIDWORD(v22);
      if (sub_216B1E67C((uint64_t)v20) > v8)
      {
        v9 = (unsigned __int8 *)(v7 + HIDWORD(v22));
        v10 = *v9;
        if (v10 != 10 && v10 != 13)
        {
          if (HIDWORD(v22))
          {
            for (i = HIDWORD(v22); ; --i)
            {
              if (v10 == 13 || v10 == 10)
              {
                v14 = v7 + i + 1;
                goto LABEL_19;
              }
              if (i == 1)
                break;
              LOBYTE(v10) = *(_BYTE *)(v7 + i - 1);
            }
            v14 = v7;
          }
          else
          {
            v14 = v7;
          }
LABEL_19:
          v15 = sub_216B62D74(&v23, -HIDWORD(v22));
          v16 = sub_216B1E608(v20);
          sub_216B70958((uint64_t)v24, v15, a3, v7, v14, v16);
          sub_216B70878((uint64_t)v24, 1);
          sub_216B70D84(v19);
          while (1)
          {
            sub_216B70D88((uint64_t)v24, (uint64_t)v19);
            if (sub_216B773FC((uint64_t)v24) > (unint64_t)v9)
              break;
            if (sub_216B71644((uint64_t)v19) == 1)
              goto LABEL_24;
          }
          v17 = sub_216B773FC((uint64_t)v24);
          if (v17 - (unint64_t)sub_216B693F8((uint64_t)v19) > (unint64_t)v9)
          {
LABEL_24:
            v5 = v23;
            goto LABEL_26;
          }
          v5 = sub_216B1E4E0(v19);
LABEL_26:
          sub_216B70F34(v24);
        }
      }
    }
  }
  return v5;
}

uint64_t sub_216B71638(uint64_t a1)
{
  return sub_216B71FA4(a1, *(_QWORD *)(a1 + 392), 1);
}

uint64_t sub_216B71644(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16);
}

uint64_t sub_216B7164C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 18) & 1;
}

uint64_t sub_216B71658(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  const char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v12;
  char v13;
  int v14;

  v6 = a1;
  v14 = a1;
  v13 = 0;
  v7 = sub_216B634EC(a3, a1, &v13);
  if (!v13)
  {
    v8 = (unsigned __int8 *)v7;
    if (a2 || !sub_216B71774(*v7))
    {
      if (sub_216B71774((char)*v8))
      {
        v9 = 0;
        do
        {
          if (a2 == (_DWORD)v9)
          {
            LODWORD(v9) = a2;
            return sub_216B62D74(&v14, v9);
          }
        }
        while (sub_216B71774((char)v8[++v9]));
        v8 += v9;
        a2 -= v9;
        if (a2)
          goto LABEL_11;
      }
      else
      {
        for (LODWORD(v9) = 0; a2; --a2)
        {
LABEL_11:
          v12 = 0;
          sub_216B71788(v8, (int *)&v12, a4);
          v8 += v12;
          LODWORD(v9) = v12 + v9;
        }
      }
      if (!sub_216B71774((char)*v8))
        LODWORD(v9) = v9 + sub_216B717EC(v8) - (_DWORD)v8;
      return sub_216B62D74(&v14, v9);
    }
  }
  return v6;
}

BOOL sub_216B71774(int a1)
{
  return a1 != 63 && a1 != 92;
}

uint64_t sub_216B71788(unsigned __int8 *a1, int *a2, _QWORD *a3)
{
  if (sub_216B71774((char)*a1))
  {
    *a2 = 1;
    return (char)*a1;
  }
  else
  {
    *a2 = 0;
    return sub_216B723E4(a1, a2, a3);
  }
}

unsigned __int8 *sub_216B717EC(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;

  do
  {
    v1 = a1;
    v2 = *a1;
    if (v2 == 92)
    {
      v3 = 1;
      goto LABEL_7;
    }
    if (v2 != 63 || a1[1] != 63 || a1[2] != 47)
      break;
    v3 = 3;
LABEL_7:
    v4 = &a1[v3];
    v5 = sub_216B720E4((uint64_t)&a1[v3]);
    a1 = &v4[v5];
  }
  while (v5);
  return v1;
}

uint64_t sub_216B7185C(unsigned int a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v7;
  int v10;
  unsigned int v11;

  v10 = a1;
  if (sub_216B4B4A8(&v10)
    || sub_216B5E144(&v10) && (a2 || (sub_216B71904(v10, a3, a4, (unsigned int *)&v10) & 1) == 0))
  {
    sub_216B4AED0(&v11);
  }
  else
  {
    v7 = sub_216B711E0(v10, a3, a4);
    if (v7 <= a2)
      return v10;
    else
      return sub_216B62D74(&v10, v7 - a2);
  }
  return v11;
}

uint64_t sub_216B71904(unsigned int a1, _DWORD *a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v11 = a1;
  v7 = sub_216B603E4(a2, a1);
  result = sub_216B711E0(v7, a2, a3);
  if ((_DWORD)result)
  {
    v9 = sub_216B62D74(&v11, result);
    sub_216B4AED0(&v10);
    result = sub_216B632EC(a2, v9, &v10);
    if ((_DWORD)result)
    {
      if (sub_216B4F6FC(&v10))
      {
        if (a4)
          *a4 = v10;
        return 1;
      }
      else
      {
        return sub_216B71904(v10, a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t sub_216B719BC(int a1, _DWORD *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;

  sub_216B4AED0(&v9);
  result = sub_216B631B8(a2, a1, &v9);
  if ((_DWORD)result)
  {
    if (sub_216B4F6FC(&v9))
    {
      if (a4)
        *a4 = v9;
      return 1;
    }
    else
    {
      return sub_216B719BC(v9, a2, a3, a4);
    }
  }
  return result;
}

uint64_t sub_216B71A44(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;

  v29 = a1;
  v30 = a2;
  v28 = sub_216B71D08((unsigned int *)&v29);
  v27 = sub_216B69130(&v29);
  if (sub_216B4B4A8(&v28) || sub_216B4B4A8(&v27))
    goto LABEL_3;
  if (sub_216B4F6FC(&v28) && sub_216B4F6FC(&v27))
    goto LABEL_25;
  if (!sub_216B5E144(&v28) || !sub_216B4F6FC(&v27))
  {
    if (sub_216B4F6FC(&v28) && sub_216B5E144(&v27))
    {
      if (sub_216B71E34((uint64_t)&v29) && !sub_216B71904(v27, a3, a4, &v27)
        || sub_216B71E3C((uint64_t)&v29) && (sub_216B719BC(v27, a3, a4, &v27) & 1) == 0)
      {
        goto LABEL_3;
      }
      v7 = v27;
    }
    else
    {
      sub_216B4AED0(&v26);
      sub_216B4AED0(&v25);
      if (!sub_216B719BC(v28, a3, a4, (unsigned int *)&v26)
        || (!sub_216B71E34((uint64_t)&v29) || (sub_216B71904(v27, a3, a4, (unsigned int *)&v25) & 1) == 0)
        && (!sub_216B71E3C((uint64_t)&v29) || !sub_216B719BC(v27, a3, a4, (unsigned int *)&v25)))
      {
        v24 = 0;
        v10 = sub_216B60454(a3, v28);
        v11 = sub_216B606F0((uint64_t)a3, v10, &v24);
        if (!v24)
        {
          v12 = v11;
          v13 = sub_216B3DBD0(v11);
          if (sub_216B6316C(v13))
          {
            v14 = sub_216B60454(a3, v27);
            v15 = sub_216B606F0((uint64_t)a3, v14, &v24);
            if (!v24)
            {
              v16 = v15;
              v17 = sub_216B3DBD0(v15);
              if (sub_216B6316C(v17))
              {
                v18 = sub_216B3DBD0(v12);
                v23 = sub_216B62CF0(v18);
                v19 = sub_216B3DBD0(v16);
                v22 = sub_216B62CF0(v19);
                if (sub_216B632B8(&v23, &v22))
                {
                  v20 = sub_216B62E68(a3, v28);
                  sub_216B71E2C(&v29, v20);
                  v21 = sub_216B62E68(a3, v27);
                  sub_216B71E4C((uint64_t)&v29, v21);
                  v8 = sub_216B71A44(v29, v30, a3, a4);
                  goto LABEL_26;
                }
              }
            }
          }
        }
        goto LABEL_3;
      }
      sub_216B71E2C(&v29, v26);
      v7 = v25;
    }
    sub_216B71E4C((uint64_t)&v29, v7);
    goto LABEL_25;
  }
  if ((sub_216B719BC(v28, a3, a4, &v28) & 1) != 0)
  {
    sub_216B71E2C(&v29, v28);
LABEL_25:
    v8 = sub_216B71D10(v29, v30, a3, a4);
LABEL_26:
    v31 = v8;
    v32 = v9;
    return v31;
  }
LABEL_3:
  sub_216B71D0C();
  return v31;
}

uint64_t sub_216B71D10(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  _QWORD v11[2];
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v16 = a1;
  v17 = a2;
  v6 = sub_216B71D08((unsigned int *)&v16);
  v7 = sub_216B69130(&v16);
  v15 = v7;
  if (sub_216B71E34((uint64_t)&v16))
  {
    v15 = sub_216B7185C(v7, 0, a3, a4);
    if (sub_216B4B4A8(&v15))
      goto LABEL_6;
  }
  sub_216B4AED0(&v14);
  v13 = 0;
  v12 = sub_216B60568(a3, v6);
  v11[0] = sub_216B6497C((uint64_t)&v14, (uint64_t)&v13);
  v11[1] = v8;
  sub_216B649A8((uint64_t)v11, &v12);
  if (sub_216B4B4A8(&v14) || (LODWORD(v11[0]) = 0, !sub_216B63414((uint64_t)a3, v15, v14, v11)) || v13 > LODWORD(v11[0]))
  {
LABEL_6:
    sub_216B71D0C();
  }
  else
  {
    v18 = sub_216B7744C(v6, v15);
    v19 = v10;
  }
  return v18;
}

_DWORD *sub_216B71E2C(_DWORD *a1, int a2)
{
  return sub_216B2A7D8(a1, a2);
}

uint64_t sub_216B71E34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

BOOL sub_216B71E3C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) == 0;
}

uint64_t sub_216B71E4C(uint64_t a1, int a2)
{
  return sub_216B68C9C(a1, a2);
}

uint64_t sub_216B71E54(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, _BYTE *a5)
{
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  unsigned __int8 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[2];

  v18 = a2;
  v17 = sub_216B71A44(a1, a2, a3, a4);
  LOBYTE(v18) = v7;
  if (sub_216B71F50()
    || (v8 = sub_216B71D08((unsigned int *)&v17), v16 = sub_216B60568(a3, v8), sub_216B4B4A8(&v16))
    || (v15 = 0, v9 = sub_216B69130(&v17), !sub_216B63414((uint64_t)a3, v9, v16, &v15))
    || HIDWORD(v16) > v15
    || (v14 = 0, v13[0] = sub_216B627D4((uint64_t)a3, v16, &v14), v13[1] = v10, v14))
  {
    if (a5)
      *a5 = 1;
    sub_216B26D14(v19);
  }
  else
  {
    if (a5)
      *a5 = 0;
    v19[0] = sub_216B2864C(v13, HIDWORD(v16), v15 - HIDWORD(v16));
    v19[1] = v12;
  }
  return v19[0];
}

uint64_t sub_216B71F50()
{
  return sub_216B774B4() ^ 1;
}

uint64_t sub_216B71F68(unsigned __int8 a1, _QWORD *a2)
{
  return sub_216B71F78(a1, (*a2 >> 21) & 1);
}

uint64_t sub_216B71F78(int a1, unsigned int a2)
{
  if ((word_216C12D0C[a1] & 0xE8) != 0)
    return 1;
  if (a1 == 36)
    return a2;
  return 0;
}

uint64_t sub_216B71FA4(uint64_t a1, int a2, int a3)
{
  int v5;
  _DWORD *v6;

  v5 = a2 - *(_DWORD *)(a1 + 120);
  v6 = (_DWORD *)(a1 + 136);
  if (sub_216B4F6FC((_DWORD *)(a1 + 136)))
    return sub_216B62D74(v6, v5);
  else
    return sub_216B7200C(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 136), v5, a3);
}

uint64_t sub_216B7200C(uint64_t a1, unsigned int a2, int a3, int a4)
{
  _DWORD *v7;
  uint64_t v8;
  unsigned int v10;

  v7 = (_DWORD *)sub_216B40EE8(a1);
  v10 = sub_216B603E4(v7, a2);
  v10 = sub_216B62D74(&v10, a3);
  v8 = sub_216B62EDC(v7, a2);
  return sub_216B61BF8((uint64_t)v7, v10, v8, HIDWORD(v8), a4, 0, 0);
}

uint64_t sub_216B72094@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int v7;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = sub_216B71FA4(a1, a2, 1);
  return sub_216B720D8(v6, v7, a3, a4);
}

uint64_t sub_216B720D8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_216B4CD2C(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_216B720E4(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t result;
  int v6;

  v2 = 1;
  while (1)
  {
    v3 = *(unsigned __int8 *)(a1 + v2 - 1);
    result = sub_216B71384(v3);
    if (!(_DWORD)result)
      break;
    ++v2;
    if (v3 == 13 || v3 == 10)
    {
      result = v2 - 1;
      v6 = *(unsigned __int8 *)(a1 + result);
      if (v6 == 10 || v6 == 13)
      {
        if (v3 == v6)
          return result;
        else
          return v2;
      }
      return result;
    }
  }
  return result;
}

BOOL sub_216B7214C(uint64_t a1, int a2)
{
  return *(unsigned __int16 *)(a1 + 16) != a2;
}

BOOL sub_216B7215C(int a1)
{
  return (word_216C12D0C[a1] & 5) != 0;
}

uint64_t sub_216B72178(uint64_t a1, unsigned __int8 *a2, _DWORD *a3, uint64_t a4)
{
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v17;
  char *v18;
  uint64_t v19;
  int v20;
  _BYTE v22[16];

  v8 = *a2;
  if (v8 != 63)
  {
    if (v8 == 92)
    {
      ++*a3;
      v9 = a2 + 1;
LABEL_4:
      if (sub_216B71384(*v9) && (v10 = sub_216B720E4((uint64_t)v9)) != 0)
      {
        v11 = v10;
        if (a4)
        {
          sub_216B72300(a4, 8);
          v12 = *v9;
          if (v12 != 10 && v12 != 13 && (sub_216B72310(a1) & 1) == 0)
          {
            sub_216B72094(a1, (int)v9, 621, (uint64_t)v22);
            sub_216B4B3B4(v22);
          }
        }
        *a3 += v11;
        v13 = v9[v11];
        v14 = v13 > 0xD;
        v15 = (1 << v13) & 0x2401;
        if (v14 || v15 == 0)
          LOBYTE(v17) = sub_216B72178(a1);
        else
          LOBYTE(v17) = 32;
      }
      else
      {
        LOBYTE(v17) = 92;
      }
      return (char)v17;
    }
LABEL_25:
    ++*a3;
    LOBYTE(v17) = *a2;
    return (char)v17;
  }
  if (a2[1] != 63)
    goto LABEL_25;
  v18 = (char *)(a2 + 2);
  v19 = a4 ? a1 : 0;
  v20 = sub_216B72318(v18, v19);
  if (!v20)
    goto LABEL_25;
  v17 = v20;
  if (a4)
    sub_216B72300(a4, 8);
  *a3 += 3;
  if (v17 == 92)
  {
    v9 = a2 + 3;
    goto LABEL_4;
  }
  return (char)v17;
}

uint64_t sub_216B72300(uint64_t result, char a2)
{
  *(_BYTE *)(result + 18) |= a2;
  return result;
}

uint64_t sub_216B72310(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t sub_216B72318(char *a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v9[2];
  uint64_t v10[2];
  _BYTE v11[23];
  char v12;

  v3 = (int)a1;
  v4 = sub_216B724E4(*a1);
  v5 = v4;
  v12 = v4;
  if (a2 && v4)
  {
    v6 = *(_QWORD *)sub_216B735C0(a2);
    v7 = sub_216B72310(a2);
    if ((v6 & 0x10000) != 0)
    {
      if ((v7 & 1) == 0)
      {
        sub_216B72094(a2, v3 - 2, 849, (uint64_t)v10);
        sub_216B1E684(v9, &v12, 1);
        sub_216B4B340(v10, v9[0], v9[1]);
        sub_216B4B3B4(v10);
        return v12;
      }
    }
    else
    {
      if ((v7 & 1) == 0)
      {
        sub_216B72094(a2, v3 - 2, 851, (uint64_t)v11);
        sub_216B4B3B4(v11);
      }
      return 0;
    }
  }
  return v5;
}

uint64_t sub_216B723E4(unsigned __int8 *a1, int *a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;

  while (1)
  {
    v6 = *a1;
    if (v6 == 92)
    {
      v7 = *a2 + 1;
      *a2 = v7;
      v8 = a1 + 1;
      goto LABEL_11;
    }
    if (v6 != 63 || (*a3 & 0x10000) == 0)
      break;
    if (a1[1] != 63)
      break;
    v10 = sub_216B724E4((char)a1[2]);
    if (!v10)
      break;
    v7 = *a2 + 3;
    *a2 = v7;
    if (v10 != 92)
      return (char)v10;
    v8 = a1 + 3;
LABEL_11:
    if (!sub_216B71384(*v8) || (v11 = sub_216B720E4((uint64_t)v8)) == 0)
    {
      LOBYTE(v10) = 92;
      return (char)v10;
    }
    *a2 = v7 + v11;
    a1 = &v8[v11];
    v12 = *a1;
    v13 = v12 > 0xD;
    v14 = (1 << v12) & 0x2401;
    if (!v13 && v14 != 0)
    {
      LOBYTE(v10) = 32;
      return (char)v10;
    }
  }
  ++*a2;
  LOBYTE(v10) = *a1;
  return (char)v10;
}

uint64_t sub_216B724E4(int a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;

  result = 0;
  if (a1 > 59)
  {
    if (a1 == 61)
      v3 = 35;
    else
      v3 = 0;
    if (a1 == 62)
      v4 = 125;
    else
      v4 = v3;
    if (a1 == 60)
      return 123;
    else
      return v4;
  }
  else
  {
    switch(a1)
    {
      case '!':
        result = 124;
        break;
      case '\'':
        result = 94;
        break;
      case '(':
        result = 91;
        break;
      case ')':
        result = 93;
        break;
      case '-':
        result = 126;
        break;
      case '/':
        result = 92;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_216B72570(uint64_t result, unsigned int a2, char a3)
{
  unint64_t v3;

  v3 = *(_QWORD *)(result + 392) + a2;
  if (v3 > *(_QWORD *)(result + 128))
    v3 = *(_QWORD *)(result + 128);
  *(_QWORD *)(result + 392) = v3;
  *(_BYTE *)(result + 400) = a3;
  *(_BYTE *)(result + 401) = a3;
  return result;
}

uint64_t sub_216B72594(_QWORD *a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  unsigned __int8 *v7;
  uint64_t result;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;

  v7 = *a2;
  v15 = &(*a2)[a3];
  result = sub_216B726B4(a1, &v15, (int)v7, 0);
  if ((_DWORD)result)
  {
    v9 = result;
    result = sub_216B729F4(result, a1 + 18);
    if ((_DWORD)result)
    {
      if ((sub_216B72310((uint64_t)a1) & 1) == 0)
      {
        v10 = (_BYTE *)sub_216B2037C(a1[1]);
        v11 = sub_216B72D2C((uint64_t)a1, (int)*a2, (int)v15);
        sub_216B72B08(v10, v9, v11, v12, 0);
      }
      sub_216B72300(a4, 64);
      v13 = *a2;
      v14 = (unsigned __int8 *)(v15 - *a2);
      if (v14 == (unsigned __int8 *)10)
      {
        if (v13[1] != 85)
          goto LABEL_8;
      }
      else if (v14 != (unsigned __int8 *)6 || v13[1] != 117)
      {
LABEL_8:
        if (v13 != v15)
        {
          do
            sub_216B72D84((uint64_t)a1, a2, a4);
          while (*a2 != v15);
        }
        return 1;
      }
      *a2 = v15;
      return 1;
    }
  }
  return result;
}

uint64_t sub_216B726B4(_QWORD *a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[16];
  _BYTE v28[16];
  _QWORD v29[2];
  _BYTE v30[16];
  uint64_t v31[2];
  uint64_t v32[7];
  _BYTE v33[16];
  _BYTE v34[16];
  _QWORD v35[2];
  _BYTE v36[20];
  _DWORD v37[3];

  v37[0] = 0;
  v8 = sub_216B73200((uint64_t)a1, *a2, v37);
  v9 = v8;
  if (v8 == 117)
  {
    v10 = 4;
  }
  else
  {
    if (v8 != 85)
      return 0;
    v10 = 8;
  }
  if ((a1[18] & 0x41) != 0)
  {
    LODWORD(v11) = 0;
    v12 = 0;
    v13 = &(*a2)[v37[0]];
    v14 = v13;
    do
    {
      v15 = sub_216B73200((uint64_t)a1, v14, v37);
      v16 = sub_216B754A4(v15);
      if (v16 == -1)
      {
        if (!a4 || (sub_216B72310((uint64_t)a1) & 1) != 0)
          return 0;
        if (!v12)
        {
          sub_216B72094((uint64_t)a1, a1[49], 910, (uint64_t)v32);
          sub_216B1E684(v35, v13 - 1, 1);
          v24 = v35[0];
          v25 = v35[1];
LABEL_40:
          sub_216B4B340(v32, v24, v25);
          v18 = v32;
          goto LABEL_42;
        }
        sub_216B72094((uint64_t)a1, a1[49], 909, (uint64_t)v34);
        sub_216B4B3B4(v34);
        v11 = 0;
        if (v9 != 117 && v12 == 4)
        {
          v19 = sub_216B72D2C((uint64_t)a1, (int)v13 - 1, (int)v13);
          v21 = v20;
          sub_216B72094((uint64_t)a1, (_DWORD)v13 - 1, 830, (uint64_t)v33);
          sub_216B1E678((int)v31, "u");
          sub_216B754D4(v19, v21, v31[0], v31[1], (uint64_t)v32);
          sub_216B73938((uint64_t)v33, (uint64_t)v32);
          sub_216B4C8CC(v32);
          v18 = (uint64_t *)v33;
          goto LABEL_42;
        }
        return v11;
      }
      v11 = (v16 + 16 * v11);
      v14 += v37[0];
      ++v12;
    }
    while (v10 != v12);
    if (a4 && (sub_216B72300(a4, 64), v17 = *a2, v14 - *a2 != (v10 | 2)))
    {
      while (v17 != v14)
      {
        sub_216B72D84((uint64_t)a1, a2, a4);
        v17 = *a2;
      }
    }
    else
    {
      *a2 = v14;
    }
    if ((a1[18] & 0x400000) != 0)
      return v11;
    if (v11 <= 0x9F)
    {
      if ((v11 - 36) <= 0x3C && ((1 << (v11 - 36)) & 0x1000000010000001) != 0)
        return v11;
      if (a4 && a1[1])
      {
        if ((v11 - 127) <= 0xFFFFFFA0)
        {
          sub_216B72094((uint64_t)a1, a1[49], 761, (uint64_t)v30);
          v18 = (uint64_t *)v30;
          goto LABEL_42;
        }
        v33[0] = v11;
        sub_216B72094((uint64_t)a1, a1[49], 762, (uint64_t)v32);
        sub_216B1E684(v29, v33, 1);
        v24 = v29[0];
        v25 = v29[1];
        goto LABEL_40;
      }
      return 0;
    }
    v22 = v11 & 0xFFFFF800;
    if ((v11 & 0xFFFFF800) == 0xD800)
      v11 = 0;
    else
      v11 = v11;
    if (!a4 || v22 != 55296)
      return v11;
    if (!a1[1])
      return 0;
    v23 = a1[49];
    if ((a1[18] & 0xC0) == 0x40)
    {
      sub_216B72094((uint64_t)a1, v23, 911, (uint64_t)v28);
      v18 = (uint64_t *)v28;
    }
    else
    {
      sub_216B72094((uint64_t)a1, v23, 764, (uint64_t)v27);
      v18 = (uint64_t *)v27;
    }
  }
  else
  {
    if (!a4 || (sub_216B72310((uint64_t)a1) & 1) != 0)
      return 0;
    sub_216B72094((uint64_t)a1, a3, 912, (uint64_t)v36);
    v18 = (uint64_t *)v36;
  }
LABEL_42:
  sub_216B4B3B4(v18);
  return 0;
}

uint64_t sub_216B729F4(int a1, _QWORD *a2)
{
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  if ((*a2 & 0x82) != 0)
  {
    v3 = (_QWORD **)off_254E4AAF8();
    v4 = *v3;
    if (!*v3)
    {
      v5 = v3;
      v4 = (_QWORD *)sub_216B1D1D4(16);
      sub_216B774EC(v13, (uint64_t)&unk_216C177E8);
      v6 = v13[0];
      v7 = v13[1];
LABEL_9:
      sub_216B1E684(v4, v6, v7);
      *v5 = v4;
    }
  }
  else if ((*a2 & 0x40) != 0)
  {
    v9 = (_QWORD **)off_254E4AB10();
    v4 = *v9;
    if (!*v9)
    {
      v5 = v9;
      v4 = (_QWORD *)sub_216B1D1D4(16);
      sub_216B774F0(v12, (uint64_t)&unk_216C17950);
      v6 = v12[0];
      v7 = v12[1];
      goto LABEL_9;
    }
  }
  else
  {
    v8 = (_QWORD **)off_254E4AB28();
    v4 = *v8;
    if (!*v8)
    {
      v5 = v8;
      v4 = (_QWORD *)sub_216B1D1D4(16);
      sub_216B774F4(v11, (uint64_t)&unk_216C17EB8);
      v6 = v11[0];
      v7 = v11[1];
      goto LABEL_9;
    }
  }
  return sub_216B351E4(v4, a1);
}

uint64_t sub_216B72B08(_BYTE *a1, int a2, uint64_t a3, int a4, int a5)
{
  int v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  uint64_t v27;
  int v28;

  v27 = a3;
  v28 = a4;
  v8 = sub_216B71D08((unsigned int *)&v27);
  if (!sub_216B6DED4(a1, 0x358u, v8))
  {
    v9 = (_QWORD **)off_254E4AB40();
    v10 = *v9;
    if (!*v9)
    {
      v10 = (_QWORD *)sub_216B1D1D4(16);
      sub_216B774F4(v26, (uint64_t)&unk_216C17EB8);
      sub_216B1E684(v10, v26[0], v26[1]);
      *v9 = v10;
    }
    v11 = (uint64_t *)off_254E4AB58();
    if (!*v11)
    {
      v12 = sub_216B1D1D4(16);
      sub_216B7751C(v25, (uint64_t)&unk_216C18668);
      sub_216B1E684(v12, v25[0], v25[1]);
      *v11 = v12;
      v10 = *v9;
    }
    if ((sub_216B351E4(v10, a2) & 1) == 0)
    {
      v16 = sub_216B71D08((unsigned int *)&v27);
      sub_216B4CD2C((uint64_t)a1, v16, 856, (uint64_t)v24);
      v14 = sub_216B75654(v24, (uint64_t)&v27);
      v15 = 0;
      goto LABEL_11;
    }
    if (a5 && sub_216B351E4((_QWORD *)*v11, a2))
    {
      v13 = sub_216B71D08((unsigned int *)&v27);
      sub_216B4CD2C((uint64_t)a1, v13, 856, (uint64_t)v24);
      v14 = sub_216B75654(v24, (uint64_t)&v27);
      v15 = 1;
LABEL_11:
      sub_216B77520(v14, v15);
      sub_216B4B3B4(v24);
    }
  }
  v17 = sub_216B71D08((unsigned int *)&v27);
  result = sub_216B6DED4(a1, 0x367u, v17);
  if ((result & 1) == 0)
  {
    v19 = (_QWORD **)off_254E4AB70();
    v20 = *v19;
    if (!*v19)
    {
      v21 = v19;
      v20 = (_QWORD *)sub_216B1D1D4(16);
      sub_216B774F0(v23, (uint64_t)&unk_216C17950);
      sub_216B1E684(v20, v23[0], v23[1]);
      *v21 = v20;
    }
    result = sub_216B351E4(v20, a2);
    if ((result & 1) == 0)
    {
      v22 = sub_216B71D08((unsigned int *)&v27);
      sub_216B4CD2C((uint64_t)a1, v22, 871, (uint64_t)v24);
      sub_216B75654(v24, (uint64_t)&v27);
      return sub_216B4B3B4(v24);
    }
  }
  return result;
}

uint64_t sub_216B72D2C(uint64_t a1, int a2, int a3)
{
  int v5;
  int v6;

  v5 = sub_216B71FA4(a1, a2, 1);
  v6 = sub_216B71FA4(a1, a3, 1);
  return sub_216B7744C(v5, v6);
}

uint64_t sub_216B72D84(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v6;
  char v7;
  unsigned int v9;

  if (sub_216B71774((char)**a2))
  {
    v6 = (*a2)++;
    return (char)*v6;
  }
  else
  {
    v9 = 0;
    v7 = sub_216B72178(a1, *a2, &v9, a3);
    *a2 += v9;
  }
  return v7;
}

uint64_t sub_216B72E08(uint64_t a1, unsigned __int8 **a2)
{
  int v4;
  uint64_t result;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 *v11;

  v11 = *a2;
  v10 = 0;
  v4 = sub_216B72EC0(&v11, *(unsigned __int8 **)(a1 + 128), (unsigned int *)&v10);
  result = 0;
  if (!v4)
  {
    result = sub_216B729F4(v10, (_QWORD *)(a1 + 144));
    if ((_DWORD)result)
    {
      if ((sub_216B72310(a1) & 1) == 0)
      {
        v6 = (_BYTE *)sub_216B2037C(*(_QWORD *)(a1 + 8));
        v7 = v10;
        v8 = sub_216B72D2C(a1, (int)*a2, (int)v11);
        sub_216B72B08(v6, v7, v8, v9, 0);
      }
      *a2 = v11;
      return 1;
    }
  }
  return result;
}

uint64_t sub_216B72EC0(unsigned __int8 **a1, unsigned __int8 *a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int *v8;

  v8 = a3;
  if (*a1 == a2)
    return 1;
  v6 = sub_216B2546C(**a1);
  if (a2 - *a1 < v6)
    return 1;
  else
    return sub_216B2586C(a1, &(*a1)[v6], &v8, (unint64_t)(a3 + 1), 0);
}

uint64_t sub_216B72F40(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  _BYTE v15[20];
  int v16;
  unsigned __int8 *v17;

  v5 = (unsigned __int8 *)(a3 - 1);
  do
  {
    v7 = *++v5;
    v6 = v7;
  }
  while ((sub_216B71F78(v7, 0) & 1) != 0);
  v16 = 0;
  v17 = v5;
  if (sub_216B73170(v6))
  {
    if (v6 == 36)
    {
      if ((*(_BYTE *)(a1 + 146) & 0x20) == 0)
        goto LABEL_29;
    }
    else if (v6 != 63 && v6 != 92)
    {
      goto LABEL_29;
    }
  }
LABEL_9:
  v8 = a1;
  v9 = v5;
LABEL_10:
  v10 = sub_216B73200(v8, v9, &v16);
  while (v10 == 92)
  {
    if (sub_216B72594((_QWORD *)a1, &v17, v16, (uint64_t)a2))
    {
      v9 = v17;
LABEL_27:
      v8 = a1;
      goto LABEL_10;
    }
LABEL_15:
    if (sub_216B73170(v10))
    {
      v5 = v17;
    }
    else
    {
      v11 = sub_216B72E08(a1, &v17);
      v5 = v17;
      if (v11)
        goto LABEL_9;
    }
    if (!sub_216B71F78(v10, 0))
      goto LABEL_29;
    v17 = sub_216B73268(a1, v5, v16, (uint64_t)a2);
    v10 = sub_216B73200(a1, v17, &v16);
    if (sub_216B71F78(v10, 0))
    {
      do
      {
        v17 = sub_216B73268(a1, v17, v16, (uint64_t)a2);
        v10 = sub_216B73200(a1, v17, &v16);
      }
      while ((sub_216B71F78(v10, 0) & 1) != 0);
    }
  }
  if (v10 != 36)
    goto LABEL_15;
  if ((*(_BYTE *)(a1 + 146) & 0x20) != 0)
  {
    if ((sub_216B72310(a1) & 1) == 0)
    {
      sub_216B72094(a1, (int)v17, 778, (uint64_t)v15);
      sub_216B4B3B4(v15);
    }
    v9 = sub_216B73268(a1, v17, v16, (uint64_t)a2);
    v17 = v9;
    goto LABEL_27;
  }
  v5 = v17;
LABEL_29:
  v12 = *(_QWORD *)(a1 + 392);
  sub_216B7317C(a1, a2, (uint64_t)v5, 7);
  sub_216B203A4((uint64_t)a2, v12);
  if (*(_BYTE *)(a1 + 26))
    return 1;
  v13 = sub_216B9C020(*(_QWORD *)(a1 + 8), a2);
  if (!sub_216B731F4((uint64_t)v13))
    return 1;
  else
    return sub_216B9C2F0(*(_QWORD *)(a1 + 8), a2);
}

BOOL sub_216B73170(char a1)
{
  return (a1 & 0x80) == 0;
}

uint64_t sub_216B7317C(uint64_t a1, _DWORD *a2, uint64_t a3, __int16 a4)
{
  int v8;
  int v9;
  uint64_t result;

  v8 = a3 - *(_DWORD *)(a1 + 392);
  sub_216B68C9C((uint64_t)a2, v8);
  v9 = sub_216B71FA4(a1, *(_QWORD *)(a1 + 392), v8);
  sub_216B2A7D8(a2, v9);
  result = sub_216B74800((uint64_t)a2, a4);
  *(_QWORD *)(a1 + 392) = a3;
  return result;
}

uint64_t sub_216B731F4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 3) >> 2) & 1;
}

uint64_t sub_216B73200(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (sub_216B71774((char)*a2))
  {
    *a3 = 1;
    return (char)*a2;
  }
  else
  {
    *a3 = 0;
    return sub_216B72178(a1, a2, a3, 0);
  }
}

unsigned __int8 *sub_216B73268(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;

  if (a3 == 1)
  {
    v5 = 1;
  }
  else
  {
    v7 = 0;
    sub_216B72178(a1, a2, &v7, a4);
    v5 = v7;
  }
  return &a2[v5];
}

BOOL sub_216B732B4(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  int v5;
  _BOOL8 result;
  unsigned int v7;

  v7 = 0;
  v5 = sub_216B71788(a2, (int *)&v7, a3);
  result = 0;
  if (v5 == 48)
    return (sub_216B71788(&a2[v7], (int *)&v7, a3) & 0xFFFFFFDF) == 88;
  return result;
}

uint64_t sub_216B7331C(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  _BOOL8 v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  unsigned __int8 v15;
  char v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  _BYTE v22[16];
  int v23;
  unsigned int v24;
  unsigned __int8 *v25;

  v3 = a3;
  v25 = a3;
  v24 = 0;
  v6 = sub_216B73200(a1, a3, &v24);
  v7 = sub_216B735A4(v6);
  if (v7)
  {
    do
    {
      v8 = v6;
      v3 = sub_216B73268(a1, v3, v24, (uint64_t)a2);
      v25 = v3;
      v6 = sub_216B73200(a1, v3, &v24);
      v7 = sub_216B735A4(v6);
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  if (v6 <= 0x2Cu)
  {
    if (v6 == 39)
    {
      if ((*(_BYTE *)(sub_216B735C0(a1) + 1) & 1) == 0)
        goto LABEL_29;
      v23 = 0;
      v13 = &v3[v24];
      v14 = (_QWORD *)sub_216B735C0(a1);
      v15 = sub_216B71788(v13, &v23, v14);
      if (!sub_216B71F78(v15, 0))
        goto LABEL_29;
      v16 = sub_216B72310(a1);
      v17 = v25;
      if ((v16 & 1) == 0)
      {
        sub_216B72094(a1, (int)v25, 860, (uint64_t)v22);
        sub_216B4B3B4(v22);
      }
      v12 = sub_216B73268(a1, v17, v24, (uint64_t)a2);
      v10 = v23;
      v11 = a1;
LABEL_26:
      v18 = sub_216B73268(v11, v12, v10, (uint64_t)a2);
      goto LABEL_32;
    }
    if (v6 != 43)
      goto LABEL_29;
LABEL_11:
    if ((v8 & 0xDF) != 0x45
      || (*(_BYTE *)(a1 + 144) & 8) != 0
      && (v7 = sub_216B732B4(v7, *(unsigned __int8 **)(a1 + 392), (_QWORD *)(a1 + 144))))
    {
      if (v6 != 45 && v6 != 43)
        goto LABEL_29;
      if ((v8 & 0xDF) != 0x50)
        goto LABEL_29;
      if ((*(_BYTE *)(a1 + 144) & 1) == 0)
      {
        if (!sub_216B732B4(v7, *(unsigned __int8 **)(a1 + 392), (_QWORD *)(a1 + 144)))
          goto LABEL_29;
        v9 = *(_QWORD *)(a1 + 392);
        LOBYTE(v23) = 95;
        if ((unsigned __int8 *)sub_216B2B0D0(v9, (uint64_t)v3, (char *)&v23) != v3)
          goto LABEL_29;
      }
    }
    v10 = v24;
    v11 = a1;
    v12 = v3;
    goto LABEL_26;
  }
  if (v6 == 92)
  {
    if (sub_216B72594((_QWORD *)a1, &v25, v24, (uint64_t)a2))
    {
      v18 = v25;
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  if (v6 == 45)
    goto LABEL_11;
LABEL_29:
  if (sub_216B73170(v6))
  {
    v18 = v25;
LABEL_33:
    v20 = *(_QWORD *)(a1 + 392);
    sub_216B7317C(a1, a2, (uint64_t)v18, 8);
    sub_216B203A4((uint64_t)a2, v20);
    return 1;
  }
  v19 = sub_216B72E08(a1, &v25);
  v18 = v25;
  if (!v19)
    goto LABEL_33;
LABEL_32:
  sub_216B7331C(a1, a2, v18);
  return 1;
}

BOOL sub_216B735A4(int a1)
{
  return (word_216C12D0C[a1] & 0x1E8) != 0;
}

uint64_t sub_216B735C0(uint64_t a1)
{
  return a1 + 144;
}

unsigned __int8 *sub_216B735C8(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  char v22;
  int v23;
  int v24;
  int v25;
  _BYTE *v26;
  int v27;
  _QWORD v29[2];
  uint64_t v30[2];
  _QWORD v31[2];
  int v32[14];
  char v33;
  __int16 v34;
  int v35;
  unsigned __int8 *v36;

  v36 = a3;
  v35 = 0;
  v7 = sub_216B73200((uint64_t)a1, a3, &v35);
  v8 = sub_216B73920(v7);
  if (!v8
    && (v7 != 92 || (sub_216B72594(a1, &v36, v35, a2) & 1) == 0)
    && (sub_216B73170(v7) || !sub_216B72E08((uint64_t)a1, &v36)))
  {
    return v36;
  }
  if ((*(_BYTE *)sub_216B735C0((uint64_t)a1) & 0x80) == 0)
  {
    if ((sub_216B72310((uint64_t)a1) & 1) == 0)
    {
      if (v7 == 95)
        v9 = 862;
      else
        v9 = 861;
      sub_216B72094((uint64_t)a1, (int)v36, v9, (uint64_t)&v33);
      v10 = sub_216B71FA4((uint64_t)a1, (int)v36, 1);
      sub_216B1E678((int)v31, " ");
      v11 = v10;
      v12 = v31[0];
      v13 = v31[1];
LABEL_27:
      sub_216B73974(v11, v12, v13, 0, (uint64_t)v32);
      sub_216B73938((uint64_t)&v33, (uint64_t)v32);
      sub_216B4C8CC(v32);
      sub_216B4B3B4(&v33);
      return v36;
    }
    return v36;
  }
  if (!v8)
  {
LABEL_33:
    sub_216B72300(a2, 32);
    do
    {
      while (1)
      {
        v27 = sub_216B73200((uint64_t)a1, v36, &v35);
        if (!sub_216B71F78(v27, 0))
          break;
        v36 = sub_216B73268((uint64_t)a1, v36, v35, a2);
      }
    }
    while (v27 == 92 && (sub_216B72594(a1, &v36, v35, a2) & 1) != 0
         || !sub_216B73170(v27) && (sub_216B72E08((uint64_t)a1, &v36) & 1) != 0);
    return v36;
  }
  if (v7 == 95 || !a4)
  {
    if (v7 != 95)
      goto LABEL_22;
LABEL_32:
    v36 = sub_216B73268((uint64_t)a1, v36, v35, a2);
    goto LABEL_33;
  }
  if ((*(_BYTE *)(sub_216B735C0((uint64_t)a1) + 1) & 1) == 0)
    goto LABEL_22;
  v33 = v7;
  v34 = 0;
  LODWORD(v14) = v35;
  v32[0] = 0;
  v15 = &v36[v35];
  v16 = (_QWORD *)sub_216B735C0((uint64_t)a1);
  v17 = sub_216B71788(v15, v32, v16);
  if (sub_216B71F78(v17, 0))
  {
    v18 = 1;
    while (v18 != 3)
    {
      *(&v33 + v18) = v17;
      v19 = v18 + 1;
      v14 = (v32[0] + v14);
      v32[0] = 0;
      v20 = &v36[v14];
      v21 = (_QWORD *)sub_216B735C0((uint64_t)a1);
      v17 = sub_216B71788(v20, v32, v21);
      v22 = sub_216B71F78(v17, 0);
      v18 = v19;
      if ((v22 & 1) == 0)
        goto LABEL_29;
    }
    goto LABEL_22;
  }
  LODWORD(v19) = 1;
LABEL_29:
  if ((_DWORD)v19 == 1 && v7 == 115)
    goto LABEL_32;
  v26 = (_BYTE *)sub_216B735C0((uint64_t)a1);
  sub_216B1E684(v30, &v33, v19);
  if ((sub_216B783FC(v26, v30[0], v30[1]) & 1) != 0)
    goto LABEL_32;
LABEL_22:
  if ((sub_216B72310((uint64_t)a1) & 1) == 0)
  {
    v23 = (int)v36;
    if ((*(_QWORD *)sub_216B735C0((uint64_t)a1) & 4) != 0)
      v24 = 788;
    else
      v24 = 812;
    sub_216B72094((uint64_t)a1, v23, v24, (uint64_t)&v33);
    v25 = sub_216B71FA4((uint64_t)a1, (int)v36, 1);
    sub_216B1E678((int)v29, " ");
    v11 = v25;
    v12 = v29[0];
    v13 = v29[1];
    goto LABEL_27;
  }
  return v36;
}

BOOL sub_216B73920(int a1)
{
  return (word_216C12D0C[a1] & 0xE0) != 0;
}

uint64_t sub_216B73938(uint64_t a1, uint64_t a2)
{
  if ((sub_216B71F50() & 1) == 0)
    sub_216B77558(a1, a2);
  return a1;
}

void sub_216B73974(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v8;
  std::string v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  sub_216B77564(a5);
  *(_QWORD *)a5 = sub_216B7744C(a1, a1);
  *(_BYTE *)(a5 + 8) = v8;
  sub_216B24898(v10, (uint64_t)&v9);
  sub_216B26E7C(a5 + 24, (uint64_t)&v9);
  std::string::~string(&v9);
  *(_BYTE *)(a5 + 48) = a4;
}

uint64_t sub_216B739EC(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, __int16 a4)
{
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  unsigned __int8 *v17;

  v17 = a3;
  v7 = sub_216B72310(a1);
  if ((unsigned __int16)(a4 - 19) >= 0xFFFDu && (v7 & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 392);
    if ((*(_QWORD *)sub_216B735C0(a1) & 0x40) != 0)
      v9 = 872;
    else
      v9 = 857;
    sub_216B72094(a1, v8, v9, (uint64_t)v16);
    sub_216B4B3B4(v16);
  }
  v10 = sub_216B72D84(a1, &v17, (uint64_t)a2);
  v11 = 0;
  while (1)
  {
    if (v10 == 92)
    {
      v10 = sub_216B72D84(a1, &v17, (uint64_t)a2);
    }
    else if (v10 == 34)
    {
      if ((*(_BYTE *)sub_216B735C0(a1) & 0x40) != 0)
        v17 = sub_216B735C8((_QWORD *)a1, (uint64_t)a2, v17, 1);
      if (v11 && (sub_216B72310(a1) & 1) == 0)
      {
        sub_216B72094(a1, (int)v11, 833, (uint64_t)v14);
        sub_216B4B3B4(v14);
      }
      v12 = *(_QWORD *)(a1 + 392);
      sub_216B7317C(a1, a2, (uint64_t)v17, a4);
      sub_216B203A4((uint64_t)a2, v12);
      return 1;
    }
    if (v10)
      break;
    if (v17 - 1 == *(unsigned __int8 **)(a1 + 128))
      goto LABEL_20;
    if (sub_216B73BFC(a1, (int)v17 - 1))
    {
      sub_216B9BBF4(*(_QWORD *)(a1 + 8));
      sub_216B7317C(a1, a2, (uint64_t)(v17 - 1), 0);
      sub_216B73C60(a1);
      return 1;
    }
    v11 = v17 - 1;
LABEL_19:
    v10 = sub_216B72D84(a1, &v17, (uint64_t)a2);
  }
  if (v10 != 10 && v10 != 13)
    goto LABEL_19;
LABEL_20:
  if ((sub_216B72310(a1) & 1) == 0 && (*(_BYTE *)(a1 + 146) & 0x40) == 0)
  {
    sub_216B72094(a1, *(_QWORD *)(a1 + 392), 819, (uint64_t)v15);
    sub_216B4B3B4(v15);
  }
  sub_216B7317C(a1, a2, (uint64_t)(v17 - 1), 0);
  return 1;
}

uint64_t sub_216B73BFC(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    result = sub_216B7548C(result);
    if ((_DWORD)result)
    {
      v6 = sub_216B62D74((_DWORD *)(a1 + 136), a2 - *(_DWORD *)(a1 + 120));
      v5 = sub_216B7549C(*(_QWORD *)(a1 + 8));
      return sub_216B632B8(&v6, &v5);
    }
  }
  return result;
}

uint64_t sub_216B73C60(uint64_t result)
{
  *(_QWORD *)(result + 392) = *(_QWORD *)(result + 128);
  return result;
}

uint64_t sub_216B73C6C(_QWORD *a1, _DWORD *a2, const char *a3, __int16 a4)
{
  uint64_t i;
  _BOOL4 v9;
  size_t v10;
  uint64_t v11;
  size_t j;
  uint64_t *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  _BYTE v25[16];
  _BYTE v26[16];

  if ((sub_216B72310((uint64_t)a1) & 1) == 0)
  {
    sub_216B72094((uint64_t)a1, a1[49], 870, (uint64_t)v26);
    sub_216B4B3B4(v26);
  }
  for (i = 0; i != 16; ++i)
  {
    v9 = sub_216B73EBC(a3[i]);
    if (!v9)
      break;
  }
  if (a3[i] == 40)
  {
    v10 = i;
    v11 = 2 * i;
    for (j = v10; ; ++j)
    {
      if (a3[j + 1])
      {
        if (a3[j + 1] == 41 && !strncmp(&a3[j + 2], a3, v10) && a3[v11 + 2] == 34)
        {
          v17 = (unsigned __int8 *)&a3[v11 + 3];
          if ((*(_BYTE *)sub_216B735C0((uint64_t)a1) & 0x40) != 0)
            v17 = sub_216B735C8(a1, (uint64_t)a2, v17, 1);
          v18 = a1[49];
          sub_216B7317C((uint64_t)a1, a2, (uint64_t)v17, a4);
          sub_216B203A4((uint64_t)a2, v18);
          return 1;
        }
      }
      else if (&a3[j + 1] == (const char *)a1[16])
      {
        if ((sub_216B72310((uint64_t)a1) & 1) == 0)
        {
          sub_216B72094((uint64_t)a1, a1[49], 769, (uint64_t)v24);
          sub_216B1E684(v22, a3, v10);
          sub_216B4B340(v24, v22[0], v22[1]);
          sub_216B4B3B4(v24);
        }
        v14 = (uint64_t)a1;
        v15 = a2;
        v16 = (uint64_t)&a3[j + 1];
        goto LABEL_31;
      }
      ++v11;
    }
  }
  if ((sub_216B72310((uint64_t)a1) & 1) == 0)
  {
    if (v9)
    {
      sub_216B72094((uint64_t)a1, (_DWORD)a3 + i, 757, (uint64_t)v25);
      v13 = (uint64_t *)v25;
    }
    else
    {
      sub_216B72094((uint64_t)a1, (_DWORD)a3 + i, 647, (uint64_t)v24);
      sub_216B1E684(v23, &a3[i], 1);
      sub_216B4B340(v24, v23[0], v23[1]);
      v13 = v24;
    }
    sub_216B4B3B4(v13);
  }
  do
  {
    while (1)
    {
      v16 = (uint64_t)a3;
      v20 = *(unsigned __int8 *)a3++;
      v19 = v20;
      if (v20)
        break;
      if (v16 == a1[16])
        goto LABEL_30;
    }
  }
  while (v19 != 34);
  ++v16;
LABEL_30:
  v14 = (uint64_t)a1;
  v15 = a2;
LABEL_31:
  sub_216B7317C(v14, v15, v16, 0);
  return 1;
}

BOOL sub_216B73EBC(int a1)
{
  return (word_216C12D0C[a1] & 0x3E8) != 0;
}

uint64_t sub_216B73ED8(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 v6;
  unsigned __int8 *v7;
  uint64_t v9;
  _BYTE v10[16];
  unsigned __int8 *v11;

  v11 = a3;
  v6 = sub_216B72D84(a1, &v11, (uint64_t)a2);
  v7 = 0;
  while (1)
  {
    if (v6 <= 0xCu)
    {
      if (v6)
      {
        if (v6 == 10)
          goto LABEL_14;
      }
      else
      {
        if (v11 - 1 == *(unsigned __int8 **)(a1 + 128) || sub_216B73BFC(a1, (int)v11 - 1))
        {
LABEL_14:
          sub_216B7317C(a1, a2, (uint64_t)a3, 46);
          return 1;
        }
        v7 = v11 - 1;
      }
      goto LABEL_13;
    }
    if (v6 == 92)
    {
      sub_216B72D84(a1, &v11, (uint64_t)a2);
      goto LABEL_13;
    }
    if (v6 == 13)
      goto LABEL_14;
    if (v6 == 62)
      break;
LABEL_13:
    v6 = sub_216B72D84(a1, &v11, (uint64_t)a2);
  }
  if (v7 && (sub_216B72310(a1) & 1) == 0)
  {
    sub_216B72094(a1, (int)v7, 833, (uint64_t)v10);
    sub_216B4B3B4(v10);
  }
  v9 = *(_QWORD *)(a1 + 392);
  sub_216B7317C(a1, a2, (uint64_t)v11, 15);
  sub_216B203A4((uint64_t)a2, v9);
  return 1;
}

uint64_t sub_216B74014(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, __int16 a4)
{
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  unsigned __int8 *v19;

  v19 = a3;
  v7 = sub_216B72310(a1);
  if (((unsigned __int16)(a4 - 13) == 65534 || (unsigned __int16)(a4 - 13) == 0xFFFF) && (v7 & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 392);
    if ((*(_QWORD *)sub_216B735C0(a1) & 0x40) != 0)
      v9 = 872;
    else
      v9 = 857;
    sub_216B72094(a1, v8, v9, (uint64_t)v18);
    sub_216B4B3B4(v18);
  }
  v10 = sub_216B72D84(a1, &v19, (uint64_t)a2);
  if (v10 != 39)
  {
    v12 = 0;
    while (1)
    {
      if (v10 == 92)
      {
        LOBYTE(v10) = sub_216B72D84(a1, &v19, (uint64_t)a2);
      }
      else if (v10 == 39)
      {
        if ((*(_BYTE *)sub_216B735C0(a1) & 0x40) != 0)
          v19 = sub_216B735C8((_QWORD *)a1, (uint64_t)a2, v19, 0);
        if (v12 && (sub_216B72310(a1) & 1) == 0)
        {
          sub_216B72094(a1, (int)v12, 831, (uint64_t)v15);
          sub_216B4B3B4(v15);
        }
        v14 = *(_QWORD *)(a1 + 392);
        sub_216B7317C(a1, a2, (uint64_t)v19, a4);
        sub_216B203A4((uint64_t)a2, v14);
        return 1;
      }
      if ((_BYTE)v10)
      {
        if (v10 == 10 || v10 == 13)
        {
LABEL_25:
          if ((sub_216B72310(a1) & 1) == 0 && (*(_BYTE *)(a1 + 146) & 0x40) == 0)
          {
            sub_216B72094(a1, *(_QWORD *)(a1 + 392), 818, (uint64_t)v16);
            sub_216B4B3B4(v16);
          }
          v11 = v19 - 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v19 - 1 == *(unsigned __int8 **)(a1 + 128))
          goto LABEL_25;
        if (sub_216B73BFC(a1, (int)v19 - 1))
        {
          sub_216B9BBF4(*(_QWORD *)(a1 + 8));
          sub_216B7317C(a1, a2, (uint64_t)(v19 - 1), 0);
          sub_216B73C60(a1);
          return 1;
        }
        v12 = v19 - 1;
      }
      LOBYTE(v10) = sub_216B72D84(a1, &v19, (uint64_t)a2);
    }
  }
  if ((sub_216B72310(a1) & 1) == 0 && (*(_BYTE *)(a1 + 146) & 0x40) == 0)
  {
    sub_216B72094(a1, *(_QWORD *)(a1 + 392), 780, (uint64_t)v17);
    sub_216B4B3B4(v17);
  }
  v11 = v19;
LABEL_29:
  sub_216B7317C(a1, a2, (uint64_t)v11, 0);
  return 1;
}

uint64_t sub_216B74264(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, _BYTE *a4)
{
  unsigned __int8 *v5;
  char i;
  int v9;
  int v10;
  uint64_t result;
  int v12;

  v5 = a3;
  for (i = sub_216B74350(*(a3 - 1)); ; i = 1)
  {
    do
    {
      v10 = *v5++;
      v9 = v10;
    }
    while (sub_216B7215C(v10));
    if (!sub_216B74350(v9))
      break;
    if (*(_BYTE *)(a1 + 24))
    {
      result = 0;
      *(_QWORD *)(a1 + 392) = v5 - 1;
      return result;
    }
  }
  if (sub_216B74364(a1))
  {
    sub_216B7317C(a1, a2, (uint64_t)(v5 - 1), 0);
    if ((i & 1) != 0)
      *(_WORD *)(a1 + 400) = 257;
    return 1;
  }
  else
  {
    v12 = sub_216B74350(*(v5 - 2));
    sub_216B74374((uint64_t)a2, 2, v12 ^ 1);
    if ((i & 1) != 0)
    {
      sub_216B72300((uint64_t)a2, 1);
      *a4 = 1;
    }
    result = 0;
    *(_QWORD *)(a1 + 392) = v5 - 1;
  }
  return result;
}

uint64_t sub_216B74350(int a1)
{
  return ((unsigned __int16)word_216C12D0C[a1] >> 1) & 1;
}

BOOL sub_216B74364(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 385) > 1u;
}

uint64_t sub_216B74374(uint64_t result, char a2, int a3)
{
  if (a3)
    return sub_216B72300(result, a2);
  else
    return sub_216B747D8(result, a2);
}

uint64_t sub_216B74380(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, _BYTE *a4)
{
  unsigned __int8 *i;
  int v8;
  char v10;
  unsigned __int8 *v11;
  char v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v24;
  int v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _BYTE v34[16];
  _BYTE v35[16];
  _BYTE v36[16];
  unsigned __int8 *v37;

  v37 = a3;
  if ((*(_BYTE *)(a1 + 146) & 2) == 0 && (sub_216B72310(a1) & 1) == 0)
  {
    sub_216B72094(a1, *(_QWORD *)(a1 + 392), 785, (uint64_t)v36);
    sub_216B4B3B4(v36);
    *(_QWORD *)(a1 + 144) |= 0x20000uLL;
  }
  while (1)
  {
LABEL_4:
    for (i = v37; ; v37 = i)
    {
      v8 = *i;
      if (!*i)
        goto LABEL_21;
      if (v8 == 13 || v8 == 10)
        break;
      ++i;
    }
    v10 = 0;
    v11 = i;
    do
    {
      v12 = v10;
      v14 = *--v11;
      v13 = v14;
      v15 = sub_216B7215C(v14);
      v10 = 1;
    }
    while (v15);
    if (v13 == 47)
    {
      if (*(v11 - 1) != 63)
        goto LABEL_50;
      v16 = v11 - 2;
      if (*(v11 - 2) != 63)
        goto LABEL_50;
    }
    else
    {
      v16 = v11;
      if (v13 != 92)
        goto LABEL_50;
    }
    v37 = v16;
    if ((v12 & 1) != 0 && (sub_216B72310(a1) & 1) == 0)
    {
      sub_216B72094(a1, (int)v11, 621, (uint64_t)v35);
      sub_216B4B3B4(v35);
    }
LABEL_21:
    v17 = v37;
    v18 = sub_216B72310(a1);
    *(_BYTE *)(a1 + 26) = 1;
    v19 = sub_216B72D84(a1, &v37, (uint64_t)a2);
    v20 = v19;
    *(_BYTE *)(a1 + 26) = v18;
    v21 = v37;
    v22 = v17 + 1;
    if (v19 && v37 == v22)
    {
      v37 = i;
LABEL_50:
      if (*(_QWORD *)(a1 + 8)
        && (sub_216B72310(a1) & 1) == 0
        && (v29 = *(_QWORD *)(a1 + 8),
            v30 = sub_216B71FA4(a1, *(_QWORD *)(a1 + 392), 1),
            v31 = sub_216B71FA4(a1, (int)v37, 1),
            sub_216B746DC(&v33, v30, v31),
            sub_216B9CB44(v29, (uint64_t)a2, v33)))
      {
        *(_QWORD *)(a1 + 392) = v37;
      }
      else
      {
        if (!sub_216B746E8(a1))
        {
          v32 = v37;
          if (*(_BYTE *)(a1 + 24) || v37 == *(unsigned __int8 **)(a1 + 128))
          {
            result = 0;
          }
          else
          {
            ++v37;
            sub_216B72300((uint64_t)a2, 1);
            *a4 = 1;
            sub_216B747D8((uint64_t)a2, 2);
            result = 0;
            v32 = v37;
          }
          *(_QWORD *)(a1 + 392) = v32;
          return result;
        }
        sub_216B746F8(a1, a2, (uint64_t)v37);
      }
      return 1;
    }
    if (v19 != 47 && v37 != v22 && *v37 != 47 && v17 != v37)
    {
      while (1)
      {
        v24 = *v17;
        if (v24 == 13 || v24 == 10)
          break;
        if (++v17 == v37)
          goto LABEL_41;
      }
      if (!sub_216B71384(v19))
        goto LABEL_39;
      do
      {
        v27 = *v21++;
        v26 = v27;
      }
      while (sub_216B71384(v27));
      if (v26 != 47 || *v21 != 47)
      {
LABEL_39:
        if ((sub_216B72310(a1) & 1) == 0)
        {
          sub_216B72094(a1, (_DWORD)v17 - 1, 789, (uint64_t)v34);
          sub_216B4B3B4(v34);
        }
      }
    }
LABEL_41:
    if (v37 == (unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 1))
    {
      --v37;
      goto LABEL_50;
    }
    if (!v20)
      break;
    if (v20 == 10 || v20 == 13)
      goto LABEL_50;
  }
  if (!sub_216B73BFC(a1, (int)v37 - 1))
    goto LABEL_4;
  sub_216B9BBF4(*(_QWORD *)(a1 + 8));
  sub_216B73C60(a1);
  return 0;
}

_DWORD *sub_216B746DC(_DWORD *a1, int a2, int a3)
{
  return sub_216B775A0(a1, a2, a3);
}

BOOL sub_216B746E8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 385) != 0;
}

uint64_t sub_216B746F8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9[2];
  std::string v10;
  unsigned __int8 v11;

  sub_216B7317C(a1, a2, a3, 5);
  if (*(_BYTE *)(a1 + 24) && !*(_BYTE *)(a1 + 26))
  {
    v11 = 0;
    sub_216B747E8(*(_QWORD *)(a1 + 8), a2, &v11, &v10);
    if (!v11)
    {
      *(_BYTE *)sub_216B25B54((uint64_t)&v10, 1) = 42;
      std::string::append(&v10, "*/");
      sub_216B74800((uint64_t)a2, 5);
      v5 = *(_QWORD *)(a1 + 8);
      sub_216B26CA0(v9, &v10);
      v6 = sub_216B1E4E0(a2);
      v7 = sub_216B1E4E0(a2);
      sub_216B9BCE4(v5, v9[0], v9[1], a2, v6, v7);
    }
    std::string::~string(&v10);
  }
  return 1;
}

uint64_t sub_216B747D8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 18) &= ~a2;
  return result;
}

void sub_216B747E8(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned __int8 *a3@<X2>, std::string *a4@<X8>)
{
  sub_216B70F38(a2, *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 24), a3, a4);
}

uint64_t sub_216B74800(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = a2;
  return result;
}

BOOL sub_216B74808(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, _BYTE *a4)
{
  int v8;
  unsigned __int8 *v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  int v18;
  char v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __int16 v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  _BOOL8 result;
  uint64_t v33;
  _BYTE v34[16];
  _BYTE v35[20];
  unsigned int v36;
  _BYTE v37[20];
  int v38;

  v38 = 0;
  v8 = sub_216B73200(a1, a3, &v38);
  v9 = &a3[v38];
  if (v8 == 47)
  {
    v11 = *v9++;
    LOBYTE(v10) = v11;
    goto LABEL_6;
  }
  LOBYTE(v10) = v8;
  if (!(_BYTE)v8)
  {
    if (v9 != (unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 1))
    {
      LOBYTE(v10) = 0;
      goto LABEL_6;
    }
    if ((sub_216B72310(a1) & 1) == 0)
    {
      sub_216B72094(a1, *(_QWORD *)(a1 + 392), 768, (uint64_t)v37);
      v30 = v37;
      goto LABEL_56;
    }
    goto LABEL_57;
  }
  while (1)
  {
LABEL_6:
    if ((unint64_t)(v9 + 24) >= *(_QWORD *)(a1 + 128))
      goto LABEL_9;
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      v36 = sub_216B74B5C(v12);
      if (sub_216B632B8(&v36, (unsigned int *)(a1 + 136)))
        goto LABEL_9;
    }
    if (v10 != 47 && (v9 & 0xF) != 0)
    {
      v14 = v9 + 1;
      do
      {
        v15 = *v9++;
        LOBYTE(v10) = v15;
        v16 = v14++ & 0xF;
      }
      while (v15 != 47 && v16 != 0);
    }
    if (v10 != 47)
      break;
LABEL_24:
    v18 = *(v9 - 2);
    if (v18 == 10 || v18 == 13)
    {
      if ((sub_216B74B64(v9 - 2, a1) & 1) != 0)
        goto LABEL_44;
    }
    else if (v18 == 42)
    {
LABEL_44:
      if (*(_QWORD *)(a1 + 8))
      {
        if ((sub_216B72310(a1) & 1) == 0)
        {
          v23 = *(_QWORD *)(a1 + 8);
          v24 = sub_216B71FA4(a1, *(_QWORD *)(a1 + 392), 1);
          v25 = sub_216B71FA4(a1, (int)v9, 1);
          sub_216B746DC(&v33, v24, v25);
          if (sub_216B9CB44(v23, (uint64_t)a2, v33))
          {
            *(_QWORD *)(a1 + 392) = v9;
            return 1;
          }
        }
      }
      if (sub_216B746E8(a1))
      {
        v26 = a1;
        v27 = a2;
        v28 = (uint64_t)v9;
        v29 = 5;
        goto LABEL_59;
      }
      if (sub_216B7215C(*v9))
      {
        sub_216B74264(a1, a2, v9 + 1, a4);
      }
      else
      {
        *(_QWORD *)(a1 + 392) = v9;
        sub_216B72300((uint64_t)a2, 2);
      }
      return 0;
    }
    if (*v9 == 42 && v9[1] != 47 && (sub_216B72310(a1) & 1) == 0)
    {
      sub_216B72094(a1, (_DWORD)v9 - 1, 880, (uint64_t)v35);
      sub_216B4B3B4(v35);
    }
LABEL_36:
    v20 = *v9++;
    LOBYTE(v10) = v20;
  }
  v21 = v9 + 1;
  do
  {
    v9 = v21;
    v22 = v21 - 1;
    v10 = *(v21 - 1);
    if (v10 == 47)
      break;
    if (*v21 == 47)
      break;
    if (v21[1] == 47)
      break;
    if (v21[2] == 47)
      break;
    v21 += 4;
  }
  while ((unint64_t)(v22 + 4) < *(_QWORD *)(a1 + 128));
LABEL_9:
  while ((_BYTE)v10)
  {
    if (v10 == 47)
      goto LABEL_24;
    v13 = *v9++;
    LOBYTE(v10) = v13;
  }
  if (v9 != (unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 1))
  {
    if (!sub_216B73BFC(a1, (int)v9 - 1))
      goto LABEL_36;
    sub_216B9BBF4(*(_QWORD *)(a1 + 8));
    sub_216B73C60(a1);
    return 0;
  }
  if ((sub_216B72310(a1) & 1) != 0)
    goto LABEL_57;
  sub_216B72094(a1, *(_QWORD *)(a1 + 392), 768, (uint64_t)v34);
  v30 = v34;
LABEL_56:
  sub_216B4B3B4(v30);
LABEL_57:
  v31 = v9 - 1;
  result = sub_216B74364(a1);
  if (result)
  {
    v26 = a1;
    v27 = a2;
    v28 = (uint64_t)v31;
    v29 = 0;
LABEL_59:
    sub_216B7317C(v26, v27, v28, v29);
    return 1;
  }
  else
  {
    *(_QWORD *)(a1 + 392) = v31;
  }
  return result;
}

uint64_t sub_216B74B5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 704);
}

uint64_t sub_216B74B64(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  unsigned __int8 *v4;
  char v6;
  unsigned __int8 *v7;
  char v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  _BYTE *v17;
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];

  v4 = a1 - 1;
  v3 = *(a1 - 1);
  if (v3 == 13 || v3 == 10)
  {
    if (v3 == *a1)
      return 0;
    v4 = a1 - 2;
  }
  v6 = 0;
  v7 = v4 + 1;
  do
  {
    do
    {
      v8 = v6;
      v10 = *--v7;
      v9 = v10;
      v11 = sub_216B7215C(v10);
      v6 = 1;
    }
    while (v11);
  }
  while (!v9);
  if (v9 != 47)
  {
    if (v9 == 92 && *(v7 - 1) == 42)
      goto LABEL_14;
    return 0;
  }
  if (*(v7 - 1) != 63)
    return 0;
  v13 = (_DWORD)v7 - 2;
  if (*(v7 - 2) != 63 || *(v7 - 3) != 42)
    return 0;
  v14 = *(_QWORD *)sub_216B735C0(a2);
  v15 = sub_216B72310(a2);
  if ((v14 & 0x10000) == 0)
  {
    if ((v15 & 1) == 0)
    {
      v17 = v21;
      sub_216B72094(a2, v13, 852, (uint64_t)v21);
      v12 = 0;
      goto LABEL_27;
    }
    return 0;
  }
  LODWORD(v7) = v13;
  if ((v15 & 1) == 0)
  {
    sub_216B72094(a2, v13, 850, (uint64_t)v20);
    sub_216B4B3B4(v20);
    LODWORD(v7) = v13;
  }
LABEL_14:
  if ((sub_216B72310(a2) & 1) == 0)
  {
    sub_216B72094(a2, (int)v7, 773, (uint64_t)v19);
    sub_216B4B3B4(v19);
  }
  if ((v8 & 1) != 0 && (sub_216B72310(a2) & 1) == 0)
  {
    v17 = v18;
    sub_216B72094(a2, (int)v7, 621, (uint64_t)v18);
    v12 = 1;
LABEL_27:
    sub_216B4B3B4(v17);
    return v12;
  }
  return 1;
}

uint64_t sub_216B74CF4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  _BYTE v9[24];

  sub_216B70D84(v9);
  v8 = *(unsigned __int8 **)(a1 + 392);
  while (1)
  {
    v7 = 0;
    v4 = sub_216B72D84(a1, &v8, (uint64_t)v9);
    v7 = v4;
    if (v4)
      break;
    if (v8 - 1 == *(unsigned __int8 **)(a1 + 128))
      goto LABEL_10;
    if (sub_216B73BFC(a1, (int)v8 - 1))
    {
      sub_216B9BBF4(*(_QWORD *)(a1 + 8));
      return sub_216B73C60(a1);
    }
LABEL_8:
    if (a2)
      sub_216B1FBBC(a2, &v7);
  }
  if (v4 != 10 && v4 != 13)
    goto LABEL_8;
LABEL_10:
  *(_QWORD *)(a1 + 392) = v8 - 1;
  sub_216B74DE4(a1, v9);
  result = sub_216B71174((uint64_t)v9, 3);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
      sub_216B9BBF4(v6);
    return sub_216B74DE4(a1, v9);
  }
  return result;
}

uint64_t sub_216B74DE4(_BYTE *a1, _DWORD *a2)
{
  char v4;

  sub_216B75074((uint64_t)a2);
  if (a1[400])
  {
    sub_216B72300((uint64_t)a2, 1);
    a1[400] = 0;
  }
  if (a1[402])
  {
    sub_216B72300((uint64_t)a2, 2);
    a1[402] = 0;
  }
  if (a1[403])
  {
    sub_216B72300((uint64_t)a2, 16);
    a1[403] = 0;
  }
  v4 = a1[401];
  a1[401] = 0;
  sub_216B72310((uint64_t)a1);
  return sub_216B7598C((uint64_t)a1, a2, v4);
}

uint64_t sub_216B74E78(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v17[2];
  unsigned int v18[14];
  _BYTE v19[16];
  _BYTE v20[16];

  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    sub_216B7317C(a1, a2, a3, 2);
    if (*(_QWORD *)(a1 + 8))
      sub_216B70814(a1);
    return 1;
  }
  else if ((sub_216B72310(a1) & 1) != 0)
  {
    sub_216B75074((uint64_t)a2);
    v7 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 392) = v7;
    v6 = 1;
    sub_216B7317C(a1, a2, v7, 1);
  }
  else
  {
    while (!sub_216B29084((_QWORD *)(a1 + 64)))
    {
      v18[0] = sub_216B74B5C(*(_QWORD *)(a1 + 8));
      if (sub_216B750B0(v18, (unsigned int *)(a1 + 136)))
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = (unsigned int *)sub_216B5F148(a1 + 64);
        sub_216B720D8(v8, *v9, 751, (uint64_t)v20);
        sub_216B4B3B4(v20);
      }
      sub_216B5F160(a1 + 64);
    }
    if (*(_QWORD *)(a1 + 120) != a3)
    {
      v10 = *(unsigned __int8 *)(a3 - 1);
      if (v10 != 10 && v10 != 13)
      {
        v11 = (_BYTE *)sub_216B2037C(*(_QWORD *)(a1 + 8));
        v12 = sub_216B71FA4(a1, *(_QWORD *)(a1 + 128), 1);
        if ((*(_BYTE *)(a1 + 144) & 0x80) != 0)
        {
          if (sub_216B6DED4(v11, 0x364u, v12))
            v13 = 881;
          else
            v13 = 868;
        }
        else
        {
          v13 = 792;
        }
        sub_216B72094(a1, *(_QWORD *)(a1 + 128), v13, (uint64_t)v19);
        sub_216B1E678((int)v17, "\n");
        sub_216B73974(v12, v17[0], v17[1], 0, (uint64_t)v18);
        sub_216B73938((uint64_t)v19, (uint64_t)v18);
        sub_216B4C8CC(v18);
        sub_216B4B3B4(v19);
      }
    }
    *(_QWORD *)(a1 + 392) = a3;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = sub_216B750C8(a1);
    return sub_216B92E5C(v14, a2, v15);
  }
  return v6;
}

_DWORD *sub_216B75074(uint64_t a1)
{
  _DWORD *result;
  int v3;

  *(_QWORD *)(a1 + 11) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  result = sub_216B4AED0(&v3);
  *(_DWORD *)a1 = v3;
  return result;
}

BOOL sub_216B750B0(unsigned int *a1, unsigned int *a2)
{
  return !sub_216B632B8(a1, a2);
}

uint64_t sub_216B750C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 384);
}

uint64_t sub_216B750D0(uint64_t a1)
{
  uint64_t v2;
  char v3;
  __int16 v4;
  char v5;
  _BYTE v7[24];

  *(_BYTE *)(a1 + 26) = 1;
  v2 = *(_QWORD *)(a1 + 392);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_WORD *)(a1 + 400);
  v5 = *(_BYTE *)(a1 + 402);
  sub_216B70D84(v7);
  sub_216B74DE4(a1, v7);
  *(_QWORD *)(a1 + 392) = v2;
  *(_BYTE *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 402) = v5;
  *(_WORD *)(a1 + 400) = v4;
  *(_BYTE *)(a1 + 26) = 0;
  if (sub_216B71174((uint64_t)v7, 1))
    return 2;
  else
    return sub_216B71174((uint64_t)v7, 21);
}

uint64_t sub_216B75168(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  int v4;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  _BYTE v11[16];
  const void *v12[2];
  uint64_t v13[2];
  const void *v14[2];
  uint64_t v15[2];

  v2 = a2;
  if (*(_BYTE **)(a1 + 120) != a2)
  {
    v4 = *(a2 - 1);
    if (v4 != 13 && v4 != 10)
      return 0;
  }
  v6 = *(_QWORD *)(a1 + 128) - (_QWORD)a2;
  if (v6 >= 8)
  {
    sub_216B1E684(v15, a2, 7);
    sub_216B1E678((int)v14, "<<<<<<<");
    if (!sub_216B2B2F0(v15[0], v15[1], v14[0], (size_t)v14[1]))
      goto LABEL_12;
    v6 = *(_QWORD *)(a1 + 128) - (_QWORD)v2;
  }
  if (v6 < 6)
    return 0;
  sub_216B1E684(v13, v2, 5);
  sub_216B1E678((int)v12, ">>>> ");
  if (sub_216B2B2F0(v13[0], v13[1], v12[0], (size_t)v12[1]))
    return 0;
LABEL_12:
  if (*(_DWORD *)(a1 + 404) || (sub_216B72310(a1) & 1) != 0)
    return 0;
  if (*v2 == 60)
    v8 = 1;
  else
    v8 = 2;
  result = sub_216B752B4((uint64_t)v2, *(_QWORD *)(a1 + 128), v8);
  if (result)
  {
    sub_216B72094(a1, (int)v2, 626, (uint64_t)v11);
    sub_216B4B3B4(v11);
    *(_DWORD *)(a1 + 404) = v8;
    while (1)
    {
      v9 = *v2;
      if (v9 == 10 || v9 == 13)
        break;
      ++v2;
    }
    *(_QWORD *)(a1 + 392) = v2;
    return 1;
  }
  return result;
}

uint64_t sub_216B752B4(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v10[2];
  const void *v11[2];
  _QWORD v12[2];

  if (a3 == 2)
    v3 = "<<<<\n";
  else
    v3 = ">>>>>>>";
  v4 = -5;
  if (a3 == 2)
  {
    v5 = 5;
  }
  else
  {
    v4 = -7;
    v5 = 7;
  }
  sub_216B1E684(v12, a1 + v5, a2 - a1 + v4);
  sub_216B1E678((int)v11, v3);
  v6 = sub_216B31B5C(v12, v11[0], (size_t)v11[1], 0);
  if (v6 == -1)
    return 0;
  v7 = v6;
  while (sub_216B26288(v12, v7 - 1) != 13 && sub_216B26288(v12, v7 - 1) != 10)
  {
    v12[0] = sub_216B2864C(v12, v7 + v5, 0xFFFFFFFFFFFFFFFFLL);
    v12[1] = v8;
    sub_216B1E678((int)v10, v3);
    v7 = sub_216B31B5C(v12, v10[0], (size_t)v10[1], 0);
    if (v7 == -1)
      return 0;
  }
  return sub_216B1E600((uint64_t)v12) + v7;
}

uint64_t sub_216B753C8(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (*(unsigned __int8 **)(a1 + 120) == a2 || ((v4 = *(a2 - 1), v4 != 13) ? (v5 = v4 == 10) : (v5 = 1), v5))
  {
    if (*(_DWORD *)(a1 + 404) && (sub_216B72310(a1) & 1) == 0)
    {
      v7 = 1;
      while (a2[v7] == *a2)
      {
        if ((_DWORD)++v7 == 4)
        {
          result = sub_216B752B4((uint64_t)a2, *(_QWORD *)(a1 + 128), *(_DWORD *)(a1 + 404));
          if (result)
          {
            v8 = *(_QWORD *)(a1 + 128);
            if (result != v8)
            {
              while (1)
              {
                v9 = *(unsigned __int8 *)result;
                if (v9 == 10 || v9 == 13)
                  break;
                if (++result == v8)
                {
                  result = *(_QWORD *)(a1 + 128);
                  break;
                }
              }
            }
            *(_QWORD *)(a1 + 392) = result;
            *(_DWORD *)(a1 + 404) = 0;
            return 1;
          }
          return result;
        }
      }
    }
  }
  return 0;
}

BOOL sub_216B7548C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 688) != 0;
}

uint64_t sub_216B7549C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 700);
}

uint64_t sub_216B754A4(int a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = a1 - 48;
  if ((a1 - 65) >= 6)
    v2 = -1;
  else
    v2 = a1 - 55;
  if ((a1 - 97) <= 5)
    v3 = a1 - 87;
  else
    v3 = v2;
  if (v1 <= 9)
    return v1;
  else
    return v3;
}

void sub_216B754D4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  sub_216B77564(a5);
  *(_QWORD *)a5 = a1;
  *(_BYTE *)(a5 + 8) = a2;
  sub_216B24898(v9, (uint64_t)&v8);
  sub_216B26E7C(a5 + 24, (uint64_t)&v8);
  std::string::~string(&v8);
}

uint64_t sub_216B7553C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v8 = (uint64_t *)off_254E4AAE0();
  if (!*v8)
  {
    v9 = sub_216B1D1D4(16);
    sub_216B75644(v15, (uint64_t)&unk_216C177A0);
    sub_216B1E684(v9, v15[0], v15[1]);
    *v8 = v9;
  }
  if ((sub_216B72310(a1) & 1) != 0 || (sub_216B75648(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 0;
  result = sub_216B351E4((_QWORD *)*v8, a3);
  if ((_DWORD)result)
  {
    sub_216B72094(a1, *(_QWORD *)(a1 + 392), 816, (uint64_t)v14);
    v12 = sub_216B72D2C(a1, *(_QWORD *)(a1 + 392), a4);
    v13 = v11;
    sub_216B75654(v14, (uint64_t)&v12);
    sub_216B4B3B4(v14);
    sub_216B72300(a2, 2);
    return 1;
  }
  return result;
}

uint64_t sub_216B75648(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 436) >> 9) & 1;
}

_QWORD *sub_216B75654(_QWORD *a1, uint64_t a2)
{
  sub_216B775B4(a1, a2);
  return a1;
}

uint64_t sub_216B75678(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  _BYTE v15[56];
  _BYTE v16[16];

  v8 = (_QWORD *)(a1 + 144);
  if (sub_216B729F4(a3, (_QWORD *)(a1 + 144)) && sub_216B75814(a3, v8))
  {
    if ((sub_216B72310(a1) & 1) == 0 && !*(_BYTE *)(a1 + 24) && (sub_216B75648(*(_QWORD *)(a1 + 8)) & 1) == 0)
    {
      v9 = (_BYTE *)sub_216B2037C(*(_QWORD *)(a1 + 8));
      v10 = sub_216B72D2C(a1, *(_QWORD *)(a1 + 392), a4);
      sub_216B72B08(v9, a3, v10, v11, 1);
    }
    sub_216B758F4((_WORD *)(a1 + 32));
    return sub_216B72F40(a1, a2, a4);
  }
  else if ((sub_216B72310(a1) & 1) != 0
         || *(_BYTE *)(a1 + 24)
         || (sub_216B75648(*(_QWORD *)(a1 + 8)) & 1) != 0
         || sub_216B73170(**(_BYTE **)(a1 + 392))
         || (sub_216B729F4(a3, v8) & 1) != 0)
  {
    sub_216B758F4((_WORD *)(a1 + 32));
    sub_216B7317C(a1, a2, a4, 0);
    return 1;
  }
  else
  {
    sub_216B72094(a1, *(_QWORD *)(a1 + 392), 693, (uint64_t)v16);
    v13 = sub_216B72D2C(a1, *(_QWORD *)(a1 + 392), a4);
    sub_216B75900(v13, v14, (uint64_t)v15);
    sub_216B73938((uint64_t)v16, (uint64_t)v15);
    sub_216B4C8CC(v15);
    sub_216B4B3B4(v16);
    result = 0;
    *(_QWORD *)(a1 + 392) = a4;
  }
  return result;
}

uint64_t sub_216B75814(int a1, _QWORD *a2)
{
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD v10[2];
  _QWORD v11[2];

  if ((*a2 & 0x82) != 0)
  {
    v3 = (_QWORD **)off_254E4AB88();
    v4 = *v3;
    if (!*v3)
    {
      v5 = v3;
      v4 = (_QWORD *)sub_216B1D1D4(16);
      sub_216B775C0(v11, &unk_216C186D8);
      v6 = v11[0];
      v7 = v11[1];
LABEL_7:
      sub_216B1E684(v4, v6, v7);
      *v5 = v4;
    }
  }
  else
  {
    if ((*a2 & 0x40) != 0)
      return 1;
    v8 = (_QWORD **)off_254E4ABA0();
    v4 = *v8;
    if (!*v8)
    {
      v5 = v8;
      v4 = (_QWORD *)sub_216B1D1D4(16);
      sub_216B7751C(v10, (uint64_t)&unk_216C18668);
      v6 = v10[0];
      v7 = v10[1];
      goto LABEL_7;
    }
  }
  return sub_216B351E4(v4, a1) ^ 1;
}

_WORD *sub_216B758F4(_WORD *result)
{
  *result = 1;
  return result;
}

uint64_t sub_216B75900@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_216B77564(a3);
  *(_QWORD *)result = a1;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_216B75930(_BYTE *a1, uint64_t a2)
{
  uint64_t result;

  a1[400] = sub_216B7164C(a2);
  a1[402] = sub_216B75974(a2);
  result = sub_216B75980(a2);
  a1[403] = result;
  return result;
}

uint64_t sub_216B75974(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 18) >> 1) & 1;
}

uint64_t sub_216B75980(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 18) >> 4) & 1;
}

uint64_t sub_216B7598C(uint64_t a1, _DWORD *a2, char a3)
{
  char v3;
  _BYTE *v6;
  unsigned __int8 *v7;
  int v8;
  int v10;
  _BOOL4 v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  __int16 v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  _DWORD *v47;
  __int16 v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  _DWORD *v54;
  __int16 v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  _DWORD *v62;
  __int16 v63;
  char v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  _BYTE v82[16];
  _BYTE v83[16];
  _BYTE v84[16];
  _BYTE v85[16];
  _BYTE v86[20];
  int v87;
  _BYTE v88[16];
  uint64_t v89;
  unsigned __int8 *v90;
  char v91;

  v91 = a3;
  v6 = (_BYTE *)(a1 + 144);
  while (2)
  {
    sub_216B747D8((uint64_t)a2, 8);
    sub_216B203A4((uint64_t)a2, 0);
    v7 = *(unsigned __int8 **)(a1 + 392);
    v90 = v7;
    v8 = *v7;
    if (v8 == 32 || v8 == 9)
    {
      do
      {
        v90 = ++v7;
        v10 = *v7;
      }
      while (v10 == 32 || v10 == 9);
      v12 = sub_216B74364(a1);
      v13 = v90;
      if (v12)
      {
        v32 = a1;
        v33 = a2;
        v34 = 0;
LABEL_267:
        sub_216B7317C(v32, v33, (uint64_t)v13, v34);
        goto LABEL_268;
      }
      *(_QWORD *)(a1 + 392) = v90;
      sub_216B72300((uint64_t)a2, 2);
    }
    v89 = 0;
    v14 = sub_216B72D84(a1, &v90, (uint64_t)a2);
    LOWORD(v15) = 59;
    switch(v14)
    {
      case 0:
        v17 = v90 - 1;
        if (v90 - 1 == *(unsigned __int8 **)(a1 + 128))
          goto LABEL_197;
        if (sub_216B73BFC(a1, (int)v90 - 1))
        {
          sub_216B75074((uint64_t)a2);
          v13 = v90;
          v32 = a1;
          v33 = a2;
          v34 = 3;
          goto LABEL_267;
        }
        if ((sub_216B72310(a1) & 1) == 0)
        {
          sub_216B72094(a1, (_DWORD)v90 - 1, 832, (uint64_t)v88);
          sub_216B4B3B4(v88);
        }
        v16 = 2;
        sub_216B72300((uint64_t)a2, 2);
        goto LABEL_21;
      case 9:
      case 11:
      case 12:
      case 32:
        goto LABEL_69;
      case 10:
      case 13:
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          if (*(_QWORD *)(a1 + 8))
            sub_216B70814(a1);
          *(_WORD *)(a1 + 400) = 257;
          LOWORD(v15) = 2;
          goto LABEL_266;
        }
        v16 = 2;
        sub_216B747D8((uint64_t)a2, 2);
LABEL_21:
        if ((sub_216B74264(a1, a2, v90, &v91) & 1) != 0)
          goto LABEL_268;
        goto LABEL_88;
      case 26:
        if ((*v6 & 8) == 0)
          goto LABEL_145;
        v17 = v90 - 1;
LABEL_197:
        v64 = sub_216B74E78(a1, a2, (uint64_t)v17);
        goto LABEL_235;
      case 33:
        if (sub_216B73200(a1, v90, (_DWORD *)&v89 + 1) == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 41;
        }
        else
        {
          LOWORD(v15) = 40;
        }
        goto LABEL_266;
      case 34:
        sub_216B758F4((_WORD *)(a1 + 32));
        v45 = v90;
        v46 = a1;
        v47 = a2;
        v48 = 13;
        goto LABEL_147;
      case 35:
        v38 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v38 != 64)
        {
          if (v38 != 35)
            goto LABEL_215;
          v39 = v90;
          v40 = HIDWORD(v89);
          goto LABEL_112;
        }
        if ((*v6 & 8) == 0)
          goto LABEL_215;
        if ((sub_216B72310(a1) & 1) == 0)
        {
          sub_216B72094(a1, *(_QWORD *)(a1 + 392), 777, (uint64_t)v83);
          sub_216B4B3B4(v83);
        }
        v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
        goto LABEL_254;
      case 36:
        if ((v6[2] & 0x20) == 0)
          goto LABEL_145;
        if ((sub_216B72310(a1) & 1) == 0)
        {
          sub_216B72094(a1, (_DWORD)v90 - 1, 778, (uint64_t)v86);
          sub_216B4B3B4(v86);
        }
        goto LABEL_233;
      case 37:
        v56 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v56 == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 45;
          goto LABEL_266;
        }
        v69 = *(_QWORD *)v6 & 0x4000000;
        if (v56 == 62 && v69)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
LABEL_201:
          LOWORD(v15) = 24;
          goto LABEL_266;
        }
        LOWORD(v15) = 44;
        if (v56 != 58 || !v69)
          goto LABEL_266;
        v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
        v73 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v73 == 64)
        {
          if ((*v6 & 8) != 0)
          {
            v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            if ((sub_216B72310(a1) & 1) == 0)
            {
              sub_216B72094(a1, *(_QWORD *)(a1 + 392), 777, (uint64_t)v85);
              sub_216B4B3B4(v85);
            }
LABEL_254:
            LOWORD(v15) = 67;
            goto LABEL_266;
          }
        }
        else if (v73 == 37 && sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 58)
        {
          v39 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v40 = v89;
LABEL_112:
          v90 = sub_216B73268(a1, v39, v40, (uint64_t)a2);
          LOWORD(v15) = 66;
          goto LABEL_266;
        }
LABEL_215:
        if (!v91 || *(_BYTE *)(a1 + 26) || *(_BYTE *)(a1 + 384))
        {
          LOWORD(v15) = 65;
          goto LABEL_266;
        }
        sub_216B7317C(a1, a2, (uint64_t)v90, 65);
        sub_216B8AF18(*(_QWORD *)(a1 + 8), (uint64_t)a2);
        v64 = sub_216B76EA4(*(_QWORD *)(a1 + 8));
        goto LABEL_235;
      case 38:
        v41 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v41 == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 29;
        }
        else if (v41 == 38)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 28;
        }
        else
        {
          LOWORD(v15) = 27;
        }
        goto LABEL_266;
      case 39:
        sub_216B758F4((_WORD *)(a1 + 32));
        v52 = v90;
        v53 = a1;
        v54 = a2;
        v55 = 9;
        goto LABEL_151;
      case 40:
        LOWORD(v15) = 21;
        goto LABEL_266;
      case 41:
        LOWORD(v15) = 22;
        goto LABEL_266;
      case 42:
        if (sub_216B73200(a1, v90, (_DWORD *)&v89 + 1) == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 31;
        }
        else
        {
          LOWORD(v15) = 30;
        }
        goto LABEL_266;
      case 43:
        v42 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v42 == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 34;
        }
        else if (v42 == 43)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 33;
        }
        else
        {
          LOWORD(v15) = 32;
        }
        goto LABEL_266;
      case 44:
        LOWORD(v15) = 64;
        goto LABEL_266;
      case 45:
        v57 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v57 == 62)
        {
          if ((*v6 & 0x40) != 0 && sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 42)
          {
            v72 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            v90 = sub_216B73268(a1, v72, v89, (uint64_t)a2);
            LOWORD(v15) = 69;
          }
          else
          {
            v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            LOWORD(v15) = 36;
          }
        }
        else if (v57 == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 38;
        }
        else if (v57 == 45)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 37;
        }
        else
        {
          LOWORD(v15) = 35;
        }
        goto LABEL_266;
      case 46:
        v43 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if ((v43 - 48) > 9)
        {
          if (v43 == 42 && (*(_QWORD *)v6 & 0x40) != 0)
          {
            v90 += HIDWORD(v89);
            LOWORD(v15) = 68;
          }
          else if (v43 == 46 && sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 46)
          {
            v71 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            v90 = sub_216B73268(a1, v71, v89, (uint64_t)a2);
            LOWORD(v15) = 26;
          }
          else
          {
            LOWORD(v15) = 25;
          }
          goto LABEL_266;
        }
        sub_216B758F4((_WORD *)(a1 + 32));
        v35 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
LABEL_92:
        sub_216B7331C(a1, a2, v35);
        goto LABEL_268;
      case 47:
        v18 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v18 == 42)
        {
          v28 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          if (!sub_216B74808(a1, a2, v28, &v91))
            goto LABEL_87;
          goto LABEL_268;
        }
        if (v18 != 47)
        {
          if (v18 == 61)
          {
            v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            LOWORD(v15) = 43;
            goto LABEL_266;
          }
          goto LABEL_184;
        }
        if (((*(_QWORD *)v6 & 0x20000) == 0 || (*(_QWORD *)v6 & 0x8000000040) == 0x8000000000)
          && ((v19 = *(_QWORD *)(a1 + 8)) != 0 && (sub_216B75648(v19) & 1) != 0
           || sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 42))
        {
LABEL_184:
          LOWORD(v15) = 42;
          goto LABEL_266;
        }
        v20 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
        if ((sub_216B74380(a1, a2, v20, &v91) & 1) != 0)
          goto LABEL_268;
        while (2)
        {
          v30 = *(unsigned __int8 **)(a1 + 392);
          v90 = v30;
          v31 = *v30;
          if (v31 != 47)
            goto LABEL_86;
          while (v30[1] == 47)
          {
            if (sub_216B746E8(a1))
            {
              v30 = v90;
              break;
            }
            v30 = v90;
            if ((*(_QWORD *)v6 & 0x20000) == 0 || (*(_QWORD *)v6 & 0x8000000040) == 0x8000000000)
              break;
            if ((sub_216B74380(a1, a2, v90 + 2, &v91) & 1) != 0)
              goto LABEL_268;
LABEL_78:
            v30 = *(unsigned __int8 **)(a1 + 392);
            v90 = v30;
            v31 = *v30;
            if (v31 != 47)
              goto LABEL_86;
          }
          v31 = *v30;
          if (v31 != 47)
            goto LABEL_86;
          if (v30[1] != 42)
          {
            v31 = 47;
            goto LABEL_86;
          }
          if (!sub_216B746E8(a1))
          {
            if (sub_216B74808(a1, a2, v90 + 2, &v91))
              break;
            goto LABEL_78;
          }
          v31 = *v90;
LABEL_86:
          if (!sub_216B7215C(v31))
          {
LABEL_87:
            v16 = 2;
            goto LABEL_88;
          }
LABEL_69:
          sub_216B72300((uint64_t)a2, 2);
          if ((sub_216B74264(a1, a2, v90, &v91) & 1) == 0)
            continue;
          break;
        }
LABEL_268:
        v3 = 1;
        return v3 & 1;
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        sub_216B758F4((_WORD *)(a1 + 32));
        v35 = v90;
        goto LABEL_92;
      case 58:
        v58 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        v59 = *(_QWORD *)(a1 + 144);
        if ((v59 & 0x4000000) != 0 && v58 == 62)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
LABEL_163:
          LOWORD(v15) = 20;
        }
        else
        {
          LOWORD(v15) = 60;
          if ((v59 & 0x40) != 0 && v58 == 58)
          {
            v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            LOWORD(v15) = 70;
          }
        }
        goto LABEL_266;
      case 59:
        LOWORD(v15) = 61;
        goto LABEL_266;
      case 60:
        v21 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (*(_BYTE *)(a1 + 25))
        {
          sub_216B73ED8(a1, a2, v90);
          goto LABEL_268;
        }
        if (v21 != 60)
        {
          if (v21 == 61)
          {
            v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            LOWORD(v15) = 48;
          }
          else
          {
            v65 = *(_QWORD *)v6;
            if ((*(_QWORD *)v6 & 0x4000000) != 0 && v21 == 58)
            {
              if ((v65 & 0x80) != 0
                && sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 58
                && (v87 = 0, (sub_216B73200(a1, &v90[HIDWORD(v89) + v89], &v87) & 0xFFFFFFFB) != 0x3A))
              {
                if ((sub_216B72310(a1) & 1) == 0)
                {
                  sub_216B72094(a1, *(_QWORD *)(a1 + 392), 865, (uint64_t)v84);
                  sub_216B4B3B4(v84);
                }
                LOWORD(v15) = 46;
              }
              else
              {
                v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
LABEL_182:
                LOWORD(v15) = 19;
              }
            }
            else
            {
              LOWORD(v15) = 46;
              if ((v65 & 0x4000000) != 0 && v21 == 37)
              {
                v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
LABEL_209:
                LOWORD(v15) = 23;
              }
            }
          }
          goto LABEL_266;
        }
        v22 = sub_216B73200(a1, &v90[HIDWORD(v89)], &v89);
        if (v22 == 60)
        {
          if ((sub_216B75168(a1, v90 - 1) & 1) != 0 || (sub_216B753C8(a1, v90 - 1) & 1) != 0)
            goto LABEL_87;
          if ((*(_BYTE *)(a1 + 168) & 2) != 0)
          {
            v75 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            v90 = sub_216B73268(a1, v75, v89, (uint64_t)a2);
            LOWORD(v15) = 72;
            goto LABEL_266;
          }
        }
        else if (v22 == 61)
        {
          v37 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v90 = sub_216B73268(a1, v37, v89, (uint64_t)a2);
          LOWORD(v15) = 49;
          goto LABEL_266;
        }
        v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
        LOWORD(v15) = 47;
        goto LABEL_266;
      case 61:
        if (sub_216B73200(a1, v90, (_DWORD *)&v89 + 1) == 61)
        {
          v23 = v90;
          if (v90[1] == 61)
          {
            if ((sub_216B753C8(a1, v90 - 1) & 1) != 0)
              goto LABEL_87;
            v23 = v90;
          }
          v90 = sub_216B73268(a1, v23, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 63;
        }
        else
        {
          LOWORD(v15) = 62;
        }
        goto LABEL_266;
      case 62:
        v24 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v24 != 62)
        {
          if (v24 == 61)
          {
            v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            LOWORD(v15) = 52;
          }
          else
          {
            LOWORD(v15) = 50;
          }
          goto LABEL_266;
        }
        v25 = sub_216B73200(a1, &v90[HIDWORD(v89)], &v89);
        if (v25 == 62)
        {
          if ((sub_216B75168(a1, v90 - 1) & 1) != 0 || (sub_216B753C8(a1, v90 - 1) & 1) != 0)
            goto LABEL_87;
          if ((*(_BYTE *)(a1 + 168) & 2) != 0)
          {
            v74 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            v90 = sub_216B73268(a1, v74, v89, (uint64_t)a2);
            LOWORD(v15) = 73;
            goto LABEL_266;
          }
        }
        else if (v25 == 61)
        {
          v36 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v90 = sub_216B73268(a1, v36, v89, (uint64_t)a2);
          LOWORD(v15) = 53;
          goto LABEL_266;
        }
        v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
        LOWORD(v15) = 51;
        goto LABEL_266;
      case 63:
        goto LABEL_266;
      case 64:
        if (*(v90 - 1) != 64 || (v6[1] & 4) == 0)
          goto LABEL_145;
        LOWORD(v15) = 71;
        goto LABEL_266;
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 83:
      case 84:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 95:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
        goto LABEL_233;
      case 76:
        sub_216B758F4((_WORD *)(a1 + 32));
        v44 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v44 == 34)
        {
          v45 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v46 = a1;
          v47 = a2;
          v48 = 14;
          goto LABEL_147;
        }
        if (v44 == 82 && (*(_QWORD *)v6 & 0x80) != 0)
        {
          if (sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 34)
          {
            v66 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            v60 = sub_216B73268(a1, v66, v89, (uint64_t)a2);
            v61 = (_QWORD *)a1;
            v62 = a2;
            v63 = 14;
            goto LABEL_277;
          }
        }
        else if (v44 == 39)
        {
          v52 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v53 = a1;
          v54 = a2;
          v55 = 10;
          goto LABEL_151;
        }
LABEL_233:
        sub_216B758F4((_WORD *)(a1 + 32));
        goto LABEL_234;
      case 82:
        sub_216B758F4((_WORD *)(a1 + 32));
        if ((*(_BYTE *)(a1 + 144) & 0x80) == 0 || sub_216B73200(a1, v90, (_DWORD *)&v89 + 1) != 34)
          goto LABEL_234;
        v60 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
        v61 = (_QWORD *)a1;
        v62 = a2;
        v63 = 13;
        goto LABEL_277;
      case 85:
        sub_216B758F4((_WORD *)(a1 + 32));
        if ((*(_BYTE *)(a1 + 144) & 0x82) == 0)
          goto LABEL_234;
        v49 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v49 == 82)
        {
          if ((*v6 & 0x80) != 0 && sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 34)
          {
            v76 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            v60 = sub_216B73268(a1, v76, v89, (uint64_t)a2);
            v61 = (_QWORD *)a1;
            v62 = a2;
            v63 = 18;
            goto LABEL_277;
          }
          goto LABEL_234;
        }
        if (v49 == 39)
        {
          v52 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v53 = a1;
          v54 = a2;
          v55 = 12;
          goto LABEL_151;
        }
        if (v49 != 34)
          goto LABEL_234;
        v45 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
        v46 = a1;
        v47 = a2;
        v48 = 18;
        goto LABEL_147;
      case 91:
        goto LABEL_182;
      case 92:
        v15 = sub_216B726B4((_QWORD *)a1, &v90, *(_QWORD *)(a1 + 392), (uint64_t)a2);
        if (!v15)
          goto LABEL_266;
        if (!sub_216B7553C(a1, (uint64_t)a2, v15, (int)v90))
        {
          v64 = sub_216B75678(a1, a2, v15, (uint64_t)v90);
          goto LABEL_235;
        }
        if ((sub_216B74264(a1, a2, v90, &v91) & 1) == 0)
          goto LABEL_87;
        goto LABEL_268;
      case 93:
        goto LABEL_163;
      case 94:
        v50 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v50 == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 55;
        }
        else
        {
          v67 = v50;
          v68 = sub_216B5D8E0((uint64_t)v6);
          LOWORD(v15) = 54;
          if (v67 == 94 && v68)
          {
            v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            LOWORD(v15) = 74;
          }
        }
        goto LABEL_266;
      case 117:
        sub_216B758F4((_WORD *)(a1 + 32));
        if ((*(_BYTE *)(a1 + 144) & 0x82) == 0)
          goto LABEL_234;
        v51 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v51 <= 0x37)
        {
          if (v51 != 34)
          {
            if (v51 == 39)
            {
              v52 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
              v53 = a1;
              v54 = a2;
              v55 = 11;
LABEL_151:
              sub_216B74014(v53, v54, v52, v55);
              goto LABEL_268;
            }
            goto LABEL_234;
          }
          v45 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v46 = a1;
          v47 = a2;
          v48 = 17;
LABEL_147:
          sub_216B739EC(v46, v47, v45, v48);
          goto LABEL_268;
        }
        if (v51 == 56)
        {
          v77 = sub_216B73200(a1, &v90[HIDWORD(v89)], &v89);
          if (v77 == 82)
          {
            if ((*v6 & 0x80) != 0)
            {
              v87 = 0;
              if (sub_216B73200(a1, &v90[HIDWORD(v89) + v89], &v87) == 34)
              {
                v80 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
                v81 = sub_216B73268(a1, v80, v89, (uint64_t)a2);
                v60 = sub_216B73268(a1, v81, v87, (uint64_t)a2);
                v61 = (_QWORD *)a1;
                v62 = a2;
                v63 = 16;
                goto LABEL_277;
              }
            }
          }
          else if (v77 == 34)
          {
            v78 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
            v45 = sub_216B73268(a1, v78, v89, (uint64_t)a2);
            v46 = a1;
            v47 = a2;
            v48 = 16;
            goto LABEL_147;
          }
        }
        else if (v51 == 82 && (*v6 & 0x80) != 0 && sub_216B73200(a1, &v90[HIDWORD(v89)], &v89) == 34)
        {
          v70 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          v60 = sub_216B73268(a1, v70, v89, (uint64_t)a2);
          v61 = (_QWORD *)a1;
          v62 = a2;
          v63 = 17;
LABEL_277:
          sub_216B73C6C(v61, v62, (const char *)v60, v63);
          goto LABEL_268;
        }
LABEL_234:
        v64 = sub_216B72F40(a1, a2, (uint64_t)v90);
LABEL_235:
        v3 = v64;
        return v3 & 1;
      case 123:
        goto LABEL_209;
      case 124:
        v26 = sub_216B73200(a1, v90, (_DWORD *)&v89 + 1);
        if (v26 == 124)
        {
          v27 = v90;
          if (v90[1] == 124)
          {
            if ((sub_216B753C8(a1, v90 - 1) & 1) != 0)
              goto LABEL_87;
            v27 = v90;
          }
          v90 = sub_216B73268(a1, v27, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 57;
        }
        else if (v26 == 61)
        {
          v90 = sub_216B73268(a1, v90, SHIDWORD(v89), (uint64_t)a2);
          LOWORD(v15) = 58;
        }
        else
        {
          LOWORD(v15) = 56;
        }
        goto LABEL_266;
      case 125:
        goto LABEL_201;
      case 126:
        LOWORD(v15) = 39;
        goto LABEL_266;
      default:
        if (sub_216B73170(v14))
        {
LABEL_145:
          LOWORD(v15) = 0;
LABEL_266:
          sub_216B758F4((_WORD *)(a1 + 32));
          v13 = v90;
          v32 = a1;
          v33 = a2;
          v34 = v15;
          goto LABEL_267;
        }
        v87 = 0;
        --v90;
        if (sub_216B72EC0(&v90, *(unsigned __int8 **)(a1 + 128), (unsigned int *)&v87))
        {
          if ((sub_216B72310(a1) & 1) == 0 && !*(_BYTE *)(a1 + 24) && (sub_216B75648(*(_QWORD *)(a1 + 8)) & 1) == 0)
          {
            sub_216B72094(a1, (int)v90, 654, (uint64_t)v82);
            sub_216B4B3B4(v82);
            *(_QWORD *)(a1 + 392) = v90 + 1;
            goto LABEL_87;
          }
          LOWORD(v15) = 0;
          ++v90;
          goto LABEL_266;
        }
        if (sub_216B7553C(a1, (uint64_t)a2, v87, (int)v90))
        {
          v29 = sub_216B74264(a1, a2, v90, &v91);
          if (v29)
            v16 = 1;
          else
            v16 = 2;
          v3 |= v29;
        }
        else
        {
          v3 = sub_216B75678(a1, a2, v87, (uint64_t)v90);
          v16 = 1;
        }
LABEL_88:
        if (v16 == 1)
          return v3 & 1;
        continue;
    }
  }
}

uint64_t sub_216B76EA4(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + 9);
}

void sub_216B76EB0()
{
  void *v0;

  v0 = (void *)sub_216B70F34();
  j__free(v0);
}

uint64_t sub_216B76EC8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = *(_OWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 68) = v7;
  std::string::basic_string((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  std::string::basic_string((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  std::string::basic_string((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::basic_string((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_216B76F64(a1 + 184, a2 + 184);
  sub_216B76F68(a1 + 208, a2 + 208);
  return a1;
}

uint64_t *sub_216B76F6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v12;

  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v12 = 0;
  v5 = sub_216B2C144((uint64_t)a2, (uint64_t)a2);
  nullsub_1(v5, v6);
  sub_216B76FE8(v4, &v12, &v11);
  v7 = *a2;
  v8 = a2[1];
  v9 = sub_216B2BFE4(a2);
  sub_216B76FEC(a1, v7, v8, v9);
  return a1;
}

uint64_t sub_216B76FEC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  char v11;

  sub_216B20C64(&v10, (uint64_t)a1);
  sub_216B2F49C(v10, (uint64_t)&v11);
  if (a4)
  {
    sub_216B77094(a1, a4);
    sub_216B770F8((uint64_t)a1, a2, a3, a4);
  }
  sub_216B2C7C0(&v11);
  return j_nullsub_1(&v11, v8);
}

uint64_t sub_216B77070(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = sub_216B2C090(a1);
  return nullsub_1(v4, a3);
}

uint64_t sub_216B77094(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (sub_216B2C4D0((uint64_t)a1, a2) < a2)
    sub_216B2C50C();
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B2C5C0(v5, a2);
  *a1 = v6;
  a1[1] = v6;
  *(_QWORD *)sub_216B2C144((uint64_t)a1, v7) = v6 + 24 * v7;
  return nullsub_1(a1, 0);
}

_QWORD *sub_216B770F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_216B2C328(&v10, a1, a4);
  v8 = sub_216B2C144(a1, v7);
  v11 = sub_216B77160(v8, a2, a3, v11);
  return sub_216B2C330(&v10);
}

uint64_t sub_216B77160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216B20688(a2, a3);
  v8 = v7;
  v9 = j_j_nullsub_1(a4);
  v10 = sub_216B771C0(a1, v6, v8, v9);
  return sub_216B20710(a4, v10);
}

uint64_t sub_216B771C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a4;
  v16 = a4;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  if (a2 != a3)
  {
    v8 = v16;
    do
    {
      v9 = nullsub_1(v8, v7);
      sub_216B77268(a1, v9, a2);
      a2 += 24;
      v8 = v16 + 24;
      v16 += 24;
    }
    while (a2 != a3);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

std::string *sub_216B7726C(int a1, std::string *this, std::string *__str)
{
  return std::string::basic_string(this, __str);
}

uint64_t sub_216B77278(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B76F64();
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t sub_216B772A4(uint64_t a1)
{
  sub_216B4AED0((_DWORD *)(a1 + 24));
  sub_216B4AED0((_DWORD *)(a1 + 28));
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

_QWORD *sub_216B772E4(_QWORD *a1)
{
  *a1 = off_24D6024F8;
  sub_216B77314(a1 + 18);
  return sub_216B77318(a1);
}

_QWORD *sub_216B77318(_QWORD *a1)
{
  *a1 = &off_24D602918;
  sub_216B1FF6C(a1 + 8);
  return a1;
}

uint64_t sub_216B7734C(uint64_t a1)
{
  sub_216B7739C(a1 + 208);
  sub_216B2C034(a1 + 184);
  std::string::~string((std::string *)(a1 + 160));
  std::string::~string((std::string *)(a1 + 136));
  std::string::~string((std::string *)(a1 + 112));
  std::string::~string((std::string *)(a1 + 88));
  return a1;
}

uint64_t sub_216B773A4(unsigned int a1)
{
  uint64_t result;

  if (a1 - 8 < 5)
    return 1;
  LODWORD(result) = sub_216B773E0(a1);
  if (a1 == 15)
    return 1;
  else
    return result;
}

uint64_t sub_216B773E0(unsigned int a1)
{
  return (a1 < 0x13) & (0x76000u >> a1);
}

uint64_t sub_216B773FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 392);
}

uint64_t sub_216B77404()
{
  uint64_t result;

  result = sub_216B7741C();
  *(_BYTE *)(result + 8) = 0;
  return result;
}

_DWORD *sub_216B77420(_DWORD *a1)
{
  _DWORD *v2;

  v2 = sub_216B4AED0(a1);
  sub_216B4AED0(v2 + 1);
  return a1;
}

uint64_t sub_216B7744C(int a1, int a2)
{
  uint64_t v3;

  sub_216B746DC(&v3, a1, a2);
  return sub_216B77484(v3);
}

uint64_t sub_216B77484(uint64_t a1)
{
  uint64_t v2;

  sub_216B3BADC((uint64_t)&v2, a1, 0);
  return v2;
}

BOOL sub_216B774B8(_DWORD *a1)
{
  _BOOL8 result;

  result = sub_216B27BAC(a1);
  if (result)
    return sub_216B27BAC(a1 + 1);
  return result;
}

_QWORD *sub_216B774F8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 45;
  return result;
}

_QWORD *sub_216B77504(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 173;
  return result;
}

_QWORD *sub_216B77510(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 246;
  return result;
}

uint64_t *sub_216B77520(uint64_t *a1, int a2)
{
  sub_216B65358(a1, a2, 2);
  return a1;
}

_QWORD *sub_216B7754C(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 14;
  return result;
}

uint64_t sub_216B77558(uint64_t a1, uint64_t a2)
{
  return sub_216B4B620((_QWORD *)(*(_QWORD *)a1 + 744), a2);
}

uint64_t sub_216B77568(uint64_t a1)
{
  sub_216B71D0C();
  sub_216B71D0C();
  sub_216B25034(a1 + 24);
  *(_BYTE *)(a1 + 48) = 0;
  return a1;
}

_DWORD *sub_216B775A0(_DWORD *result, int a2, int a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

_QWORD *sub_216B775A8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 9;
  return result;
}

uint64_t sub_216B775B4(_QWORD *a1, uint64_t a2)
{
  return sub_216B4B57C(*a1 + 624, a2);
}

_QWORD *sub_216B775C4(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 4;
  return result;
}

uint64_t sub_216B775D0(const void **a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t result;
  _BYTE *v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  int v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  v4 = (_BYTE *)sub_216B1E600((uint64_t)v12);
  result = sub_216B1E608(v12);
  if (v4 != (_BYTE *)result)
  {
    v6 = (_BYTE *)result;
    do
    {
      if (*v4 == 92)
      {
        v7 = 0;
        if (v4[1] == 117)
          v8 = 4;
        else
          v8 = 8;
        v9 = v4 + 2;
        v10 = (v8 - 4);
        do
        {
          v11 = *v9++;
          v7 = sub_216B754A4(v11) + 16 * v7;
          --v8;
        }
        while (v8);
        v4 += v10 + 5;
        result = sub_216B776A8(v7, a1);
      }
      else
      {
        result = sub_216B1FBBC((uint64_t)a1, v4);
      }
      ++v4;
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t sub_216B776A8(int a1, const void **a2)
{
  char *v4;
  char v5[4];

  v4 = v5;
  sub_216B25ADC(a1, (uint64_t *)&v4);
  return sub_216B202D8(a2, v5, v4);
}

uint64_t sub_216B776EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  unsigned __int8 *v17;
  _BOOL4 v18;
  char *v19;
  char *v20;
  _BOOL4 v21;
  int v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  int v35;
  _BYTE *v37;
  char v38;
  _BYTE v39[16];
  uint64_t v40[2];
  uint64_t v41[2];
  _BYTE v42[16];
  uint64_t v43[2];
  uint64_t v44[2];
  _QWORD v45[2];

  v45[0] = a2;
  v45[1] = a3;
  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = sub_216B1E600((uint64_t)v45);
  *(_QWORD *)(a1 + 16) = sub_216B1E608(v45);
  sub_216B29078(a1 + 56);
  v8 = *(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = v8;
  *(_WORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 54) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (*v8 != 48)
  {
    *(_DWORD *)(a1 + 48) = 10;
    v10 = sub_216B7828C(a1, v8);
    v9 = v10;
    *(_QWORD *)(a1 + 40) = v10;
    if (v10 != *(unsigned __int8 **)(a1 + 16))
    {
      v11 = *v10;
      if (sub_216B782F8(v11))
      {
        if ((v11 | 0x20) != 0x65)
        {
          v12 = sub_216B78310(a5, a4, (int)v9 - *(_DWORD *)(a1 + 8));
          sub_216B720D8(a5, v12, 649, (uint64_t)v44);
          sub_216B1E684(v43, *(_QWORD *)(a1 + 40), 1);
          sub_216B4B340(v44, v43[0], v43[1]);
          sub_216B4B3B4(v44);
          *(_BYTE *)(a1 + 112) = 1;
          return a1;
        }
        goto LABEL_11;
      }
      if (v11 != 46)
      {
LABEL_11:
        if ((v11 | 0x20) == 0x65)
        {
          sub_216B78328(a1, a4, (char *)v9, 1);
          v14 = *(_QWORD *)(a1 + 40);
          v15 = (char *)(v14 + 1);
          *(_QWORD *)(a1 + 40) = v14 + 1;
          *(_BYTE *)(a1 + 52) = 1;
          v16 = *(unsigned __int8 *)(v14 + 1);
          if (v16 == 45 || v16 == 43)
          {
            v15 = (char *)(v14 + 2);
            *(_QWORD *)(a1 + 40) = v14 + 2;
          }
          sub_216B78328(a1, a4, v15, 0);
          v17 = sub_216B7828C(a1, *(unsigned __int8 **)(a1 + 40));
          if (v17 == *(unsigned __int8 **)(a1 + 40))
          {
            v32 = sub_216B78310(a5, a4, (int)v14 - *(_DWORD *)(a1 + 8));
            sub_216B720D8(a5, v32, 631, (uint64_t)v42);
            v33 = (uint64_t *)v42;
            goto LABEL_85;
          }
          v9 = v17;
          *(_QWORD *)(a1 + 40) = v17;
        }
        goto LABEL_17;
      }
      sub_216B78328(a1, a4, (char *)v9, 1);
      v13 = (char *)(*(_QWORD *)(a1 + 40) + 1);
      *(_QWORD *)(a1 + 40) = v13;
      *(_BYTE *)(a1 + 53) = 1;
      sub_216B78328(a1, a4, v13, 0);
      v9 = sub_216B7828C(a1, *(unsigned __int8 **)(a1 + 40));
      *(_QWORD *)(a1 + 40) = v9;
    }
    v11 = *v9;
    goto LABEL_11;
  }
  sub_216B77D30(a1, a4);
  if (*(_BYTE *)(a1 + 112))
    return a1;
  v9 = *(unsigned __int8 **)(a1 + 40);
LABEL_17:
  *(_QWORD *)(a1 + 32) = v9;
  sub_216B78328(a1, a4, (char *)v9, 1);
  v18 = sub_216B783DC(a1);
  v19 = *(char **)(a1 + 40);
  v20 = *(char **)(a1 + 16);
  if (v19 == v20)
  {
    v22 = 0;
    goto LABEL_78;
  }
  v21 = v18;
  v22 = 0;
  v23 = (_BYTE *)(a1 + 113);
  while (2)
  {
    v24 = *v19;
    if (v24 <= 101)
    {
      switch(*v19)
      {
        case 'F':
          goto LABEL_22;
        case 'G':
        case 'K':
          goto LABEL_73;
        case 'H':
          goto LABEL_26;
        case 'I':
          goto LABEL_30;
        case 'J':
          goto LABEL_66;
        case 'L':
          goto LABEL_41;
        default:
          if (v24 != 85)
            goto LABEL_73;
          goto LABEL_52;
      }
    }
    switch(*v19)
    {
      case 'f':
LABEL_22:
        if (!v21 || *(_BYTE *)(a1 + 116) || *(_BYTE *)(a1 + 114))
          goto LABEL_73;
        *(_BYTE *)(a1 + 116) = 1;
        goto LABEL_68;
      case 'g':
      case 'k':
        goto LABEL_73;
      case 'h':
LABEL_26:
        if (!v21 || *(_BYTE *)(a1 + 117) || *(_BYTE *)(a1 + 114))
          goto LABEL_73;
        *(_BYTE *)(a1 + 117) = 1;
        goto LABEL_68;
      case 'i':
LABEL_30:
        if ((*(_BYTE *)sub_216B5EE7C(a5) & 8) == 0)
          goto LABEL_64;
        if (*(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 115) || *(_BYTE *)(a1 + 119))
          goto LABEL_73;
        v25 = *(_BYTE **)(a1 + 40);
        v26 = *(_BYTE **)(a1 + 16);
        if (v25 + 1 == v26)
          goto LABEL_64;
        break;
      case 'j':
        goto LABEL_66;
      case 'l':
LABEL_41:
        if (*(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 115) || *(_BYTE *)(a1 + 116))
          goto LABEL_73;
        if (v19 + 1 == v20 || v19[1] != *v19)
        {
          *(_BYTE *)(a1 + 114) = 1;
        }
        else
        {
          if (v21)
            goto LABEL_73;
          *(_BYTE *)(a1 + 115) = 1;
          ++v19;
        }
        goto LABEL_68;
      default:
        if (v24 != 117)
          goto LABEL_73;
LABEL_52:
        if (v21 || *v23)
          goto LABEL_73;
        *v23 = 1;
        goto LABEL_68;
    }
    switch(v25[1])
    {
      case '1':
        if (v21 || v25 + 2 == v26)
          goto LABEL_64;
        v27 = v25[2];
        if (v27 == 50)
        {
          if (v25 + 3 != v26 && v25[3] == 56)
          {
            v37 = v25 + 4;
            *(_QWORD *)(a1 + 40) = v37;
            v38 = 0x80;
            goto LABEL_88;
          }
LABEL_64:
          if ((*(_BYTE *)(sub_216B5EE7C(a5) + 1) & 1) != 0 && **(_BYTE **)(a1 + 40) == 105)
            goto LABEL_73;
LABEL_66:
          if (*(_BYTE *)(a1 + 118))
            goto LABEL_73;
          *(_BYTE *)(a1 + 118) = 1;
          v19 = *(char **)(a1 + 40);
          v20 = *(char **)(a1 + 16);
          v22 = (int)v19;
LABEL_68:
          *(_QWORD *)(a1 + 40) = ++v19;
          if (v19 == v20)
          {
LABEL_73:
            v26 = *(_BYTE **)(a1 + 16);
            v37 = *(_BYTE **)(a1 + 40);
            goto LABEL_74;
          }
          continue;
        }
        if (v27 != 54)
          goto LABEL_64;
        v37 = v25 + 3;
        *(_QWORD *)(a1 + 40) = v37;
        v38 = 16;
LABEL_88:
        *(_BYTE *)(a1 + 119) = v38;
LABEL_74:
        if (v37 != v26)
        {
          sub_216B1E684(v41, *(_QWORD *)(a1 + 32), &v26[-*(_QWORD *)(a1 + 32)]);
          sub_216B775D0((const void **)(a1 + 56), v41[0], v41[1]);
          v28 = (_BYTE *)sub_216B5EE7C(a5);
          v29 = sub_216B28180(a1 + 56);
          if (sub_216B783FC(v28, v29, v30))
          {
            *(_DWORD *)(a1 + 116) = 0;
            *(_DWORD *)v23 = 0;
            *(_BYTE *)(a1 + 54) = 1;
            return a1;
          }
          v34 = sub_216B78310(a5, a4, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 8));
          if (v21)
            v35 = 652;
          else
            v35 = 653;
          sub_216B720D8(a5, v34, v35, (uint64_t)v44);
          sub_216B1E684(v40, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 32));
          sub_216B4B340(v44, v40[0], v40[1]);
          v33 = v44;
LABEL_85:
          sub_216B4B3B4(v33);
          *(_BYTE *)(a1 + 112) = 1;
          return a1;
        }
LABEL_78:
        if (*(_BYTE *)(a1 + 118))
        {
          v31 = sub_216B78310(a5, a4, v22 - *(_DWORD *)(a1 + 8));
          sub_216B720D8(a5, v31, 784, (uint64_t)v39);
          sub_216B4B3B4(v39);
        }
        return a1;
      case '3':
        if (v21 || v25 + 2 == v26 || v25[2] != 50)
          goto LABEL_64;
        v37 = v25 + 3;
        *(_QWORD *)(a1 + 40) = v37;
        v38 = 32;
        goto LABEL_88;
      case '6':
        if (v21 || v25 + 2 == v26 || v25[2] != 52)
          goto LABEL_64;
        v37 = v25 + 3;
        *(_QWORD *)(a1 + 40) = v37;
        v38 = 64;
        goto LABEL_88;
      case '8':
        if (v21)
          goto LABEL_64;
        v37 = v25 + 2;
        *(_QWORD *)(a1 + 40) = v37;
        v38 = 8;
        goto LABEL_88;
      default:
        goto LABEL_64;
    }
  }
}

uint64_t sub_216B77D30(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  char *v30;
  unsigned __int8 *v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  _BYTE v55[16];
  _QWORD v56[2];
  _QWORD v57[2];
  uint64_t v58[2];
  _BYTE v59[16];
  _BYTE v60[16];
  _BYTE v61[16];
  _BYTE v62[16];
  _BYTE v63[16];

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (_BYTE *)(v4 + 1);
  *(_QWORD *)(a1 + 40) = v4 + 1;
  v6 = *(unsigned __int8 *)(v4 + 1);
  v9 = *(unsigned __int8 *)(v4 + 2);
  v7 = (unsigned __int8 *)(v4 + 2);
  v8 = v9;
  v10 = v6 & 0xFFFFFFDF;
  if (v10 != 88)
  {
    if (v10 == 66 && (v8 & 0xFE) == 0x30)
    {
      v17 = *(_QWORD *)a1;
      if ((*(_BYTE *)(sub_216B5EE7C(*(_QWORD *)a1) + 1) & 1) != 0)
      {
        v18 = 859;
      }
      else if ((*(_BYTE *)sub_216B5EE7C(*(_QWORD *)a1) & 0x40) != 0)
      {
        v18 = 775;
      }
      else
      {
        v18 = 774;
      }
      sub_216B720D8(v17, a2, v18, (uint64_t)v59);
      sub_216B4B3B4(v59);
      v32 = (_BYTE *)(*(_QWORD *)(a1 + 40) + 1);
      *(_QWORD *)(a1 + 40) = v32;
      *(_DWORD *)(a1 + 48) = 2;
      *(_QWORD *)(a1 + 24) = v32;
      result = (uint64_t)sub_216B78648(a1, v32);
      *(_QWORD *)(a1 + 40) = result;
      if (result == *(_QWORD *)(a1 + 16))
        return result;
      v33 = result;
      result = sub_216B782F8(*(unsigned __int8 *)result);
      if (!(_DWORD)result)
        return result;
      v34 = *(_QWORD *)a1;
      v35 = sub_216B78310(*(_QWORD *)a1, a2, v33 - *(_DWORD *)(a1 + 8));
      sub_216B720D8(v34, v35, 646, (uint64_t)v58);
      sub_216B1E684(v57, *(_QWORD *)(a1 + 40), 1);
      v36 = v57[0];
      v37 = v57[1];
LABEL_44:
      sub_216B4B340(v58, v36, v37);
      result = sub_216B4B3B4(v58);
      *(_BYTE *)(a1 + 112) = 1;
      return result;
    }
LABEL_15:
    *(_DWORD *)(a1 + 48) = 8;
    *(_QWORD *)(a1 + 24) = v5;
    result = (uint64_t)sub_216B786A8(a1, v5);
    *(_QWORD *)(a1 + 40) = result;
    if (result == *(_QWORD *)(a1 + 16))
      return result;
    v19 = (unsigned __int8 *)result;
    v20 = *(unsigned __int8 *)result;
    if (sub_216B4C42C(v20))
    {
      v21 = sub_216B7828C(a1, v19);
      v22 = *v21 - 46;
      v23 = v22 > 0x37;
      v24 = (1 << v22) & 0x80000000800001;
      if (v23 || v24 == 0)
      {
        v19 = *(unsigned __int8 **)(a1 + 40);
      }
      else
      {
        v19 = v21;
        *(_QWORD *)(a1 + 40) = v21;
        *(_DWORD *)(a1 + 48) = 10;
      }
      v20 = *v19;
    }
    result = sub_216B782F8(v20);
    if ((_DWORD)result)
    {
      if ((v20 | 0x20) != 0x65)
      {
        v43 = *(_QWORD *)a1;
        v44 = sub_216B78310(*(_QWORD *)a1, a2, (int)v19 - *(_DWORD *)(a1 + 8));
        sub_216B720D8(v43, v44, 650, (uint64_t)v58);
        sub_216B1E684(v56, *(_QWORD *)(a1 + 40), 1);
        v36 = v56[0];
        v37 = v56[1];
        goto LABEL_44;
      }
    }
    else if (v20 == 46)
    {
      *(_QWORD *)(a1 + 40) = v19 + 1;
      *(_DWORD *)(a1 + 48) = 10;
      *(_BYTE *)(a1 + 53) = 1;
      sub_216B78328(a1, a2, (char *)v19 + 1, 0);
      result = (uint64_t)sub_216B7828C(a1, *(unsigned __int8 **)(a1 + 40));
      v19 = (unsigned __int8 *)result;
      *(_QWORD *)(a1 + 40) = result;
      v20 = *(unsigned __int8 *)result;
    }
    if ((v20 | 0x20) != 0x65)
      return result;
    sub_216B78328(a1, a2, (char *)v19, 1);
    v45 = *(_QWORD *)(a1 + 40);
    v46 = (unsigned __int8 *)(v45 + 1);
    *(_QWORD *)(a1 + 40) = v45 + 1;
    *(_DWORD *)(a1 + 48) = 10;
    *(_BYTE *)(a1 + 52) = 1;
    v47 = *(unsigned __int8 *)(v45 + 1);
    if (v47 == 45 || v47 == 43)
    {
      v46 = (unsigned __int8 *)(v45 + 2);
      *(_QWORD *)(a1 + 40) = v45 + 2;
    }
    v48 = sub_216B7828C(a1, v46);
    v49 = *(char **)(a1 + 40);
    if (v48 != (unsigned __int8 *)v49)
    {
      v50 = v48;
      result = sub_216B78328(a1, a2, v49, 0);
      *(_QWORD *)(a1 + 40) = v50;
      return result;
    }
    v51 = *(_QWORD *)a1;
    v52 = sub_216B78310(*(_QWORD *)a1, a2, (int)v45 - *(_DWORD *)(a1 + 8));
    sub_216B720D8(v51, v52, 631, (uint64_t)v55);
    v40 = v55;
    goto LABEL_55;
  }
  if (!sub_216B782F8(v8) && v8 != 46)
    goto LABEL_15;
  *(_QWORD *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = 16;
  *(_QWORD *)(a1 + 24) = v7;
  result = (uint64_t)sub_216B785DC(a1, v7);
  v12 = result;
  *(_QWORD *)(a1 + 40) = result;
  v13 = *(_QWORD *)(a1 + 24);
  if (result == *(_QWORD *)(a1 + 16) || *(_BYTE *)result != 46)
  {
    if (result == v13)
    {
      v15 = a2;
      goto LABEL_36;
    }
    v16 = (char *)result;
  }
  else
  {
    v14 = result + 1;
    *(_QWORD *)(a1 + 40) = result + 1;
    *(_BYTE *)(a1 + 53) = 1;
    v15 = a2;
    sub_216B78328(a1, a2, (char *)(result + 1), 0);
    result = (uint64_t)sub_216B785DC(a1, *(unsigned __int8 **)(a1 + 40));
    v16 = (char *)result;
    *(_QWORD *)(a1 + 40) = result;
    if (v12 == v13 && v14 == result)
    {
      LODWORD(v12) = v12 + 1;
LABEL_36:
      v38 = *(_QWORD *)a1;
      v39 = sub_216B78310(*(_QWORD *)a1, v15, (int)v12 - *(_DWORD *)(a1 + 8));
      sub_216B720D8(v38, v39, 644, (uint64_t)v63);
      v40 = v63;
LABEL_55:
      result = sub_216B4B3B4(v40);
      *(_BYTE *)(a1 + 112) = 1;
      return result;
    }
  }
  if ((*v16 | 0x20) != 0x70)
  {
    if (!*(_BYTE *)(a1 + 53))
      return result;
    v41 = *(_QWORD *)a1;
    v42 = sub_216B78310(*(_QWORD *)a1, a2, (int)v16 - *(_DWORD *)(a1 + 8));
    sub_216B720D8(v41, v42, 645, (uint64_t)v60);
    v40 = v60;
    goto LABEL_55;
  }
  sub_216B78328(a1, a2, v16, 1);
  v26 = *(_QWORD *)(a1 + 40);
  v27 = (unsigned __int8 *)(v26 + 1);
  *(_QWORD *)(a1 + 40) = v26 + 1;
  *(_BYTE *)(a1 + 52) = 1;
  v28 = *(unsigned __int8 *)(v26 + 1);
  if (v28 == 45 || v28 == 43)
  {
    v27 = (unsigned __int8 *)(v26 + 2);
    *(_QWORD *)(a1 + 40) = v26 + 2;
  }
  v29 = sub_216B7828C(a1, v27);
  v30 = *(char **)(a1 + 40);
  if (v29 == (unsigned __int8 *)v30)
  {
    v53 = *(_QWORD *)a1;
    v54 = sub_216B78310(*(_QWORD *)a1, a2, (int)v26 - *(_DWORD *)(a1 + 8));
    sub_216B720D8(v53, v54, 631, (uint64_t)v62);
    v40 = v62;
    goto LABEL_55;
  }
  v31 = v29;
  sub_216B78328(a1, a2, v30, 0);
  *(_QWORD *)(a1 + 40) = v31;
  result = sub_216B5EE7C(*(_QWORD *)a1);
  if ((*(_BYTE *)(result + 3) & 8) == 0)
  {
    sub_216B720D8(*(_QWORD *)a1, a2, 783, (uint64_t)v61);
    return sub_216B4B3B4(v61);
  }
  return result;
}

unsigned __int8 *sub_216B7828C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  signed __int8 v5;

  v2 = a2;
  v3 = *(unsigned __int8 **)(a1 + 16);
  if (v3 == a2)
    return v2;
  do
  {
    v5 = *v2;
    if ((sub_216B4C42C(*v2) & 1) == 0)
    {
      if (!sub_216B785D0(v5))
        return v2;
      v3 = *(unsigned __int8 **)(a1 + 16);
    }
    ++v2;
  }
  while (v2 != v3);
  return v3;
}

BOOL sub_216B782F8(int a1)
{
  return (word_216C12D0C[a1] & 0x18) != 0;
}

uint64_t sub_216B78310(uint64_t a1, unsigned int a2, int a3)
{
  return sub_216B71658(a2, a3, *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 24));
}

uint64_t sub_216B78328(uint64_t result, unsigned int a2, char *a3, int a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10[2];

  v5 = a3;
  v7 = result;
  if (a4 == 1)
  {
    if (*(char **)(result + 8) == a3)
      return result;
    v5 = a3 - 1;
  }
  else if (*(char **)(result + 16) == a3)
  {
    return result;
  }
  result = sub_216B785D0(*v5);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)v7;
    v9 = sub_216B78310(*(_QWORD *)v7, a2, (int)v5 - *(_DWORD *)(v7 + 8));
    sub_216B720D8(v8, v9, 628, (uint64_t)v10);
    sub_216B77520(v10, a4);
    return sub_216B4B3B4(v10);
  }
  return result;
}

BOOL sub_216B783DC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 53) || *(_BYTE *)(a1 + 52) != 0;
}

uint64_t sub_216B783FC(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  char v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  if ((*a1 & 0x80) == 0 || sub_216B29094((uint64_t)&v13))
    return 0;
  if (sub_216B26288(&v13, 0) == 95)
    return 1;
  if ((a1[1] & 1) == 0)
    return 0;
  sub_216B32854(v12, v13, v14);
  v11 = 1;
  v5 = sub_216B784F8((uint64_t)v12, "h", (unsigned __int16 *)"min", "s", (uint64_t)&v11);
  v10 = 1;
  v6 = sub_216B78540(v5, (unsigned __int16 *)"ms", (unsigned __int16 *)"us", (unsigned __int16 *)"ns", (uint64_t)&v10);
  v9 = 1;
  v7 = sub_216B78588(v6, (unsigned __int16 *)"il", "i", (unsigned __int16 *)"if", (uint64_t)&v9);
  v8 = 0;
  return sub_216B4AA54(v7, &v8);
}

uint64_t sub_216B784F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  return sub_216B776EC(a1, a2, a3, a4, a5);
}

uint64_t sub_216B784F8(uint64_t a1, unsigned __int8 *a2, unsigned __int16 *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_216B7AAB0(a1, a2, a5);
  v9 = sub_216B329A8(v8, a3, a5);
  return sub_216B7AAB0(v9, a4, a5);
}

uint64_t sub_216B78540(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_216B348A8(a1, a2, a5);
  v9 = sub_216B348A8(v8, a3, a5);
  return sub_216B348A8(v9, a4, a5);
}

uint64_t sub_216B78588(uint64_t a1, unsigned __int16 *a2, unsigned __int8 *a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_216B348A8(a1, a2, a5);
  v9 = sub_216B7AAB0(v8, a3, a5);
  return sub_216B348A8(v9, a4, a5);
}

BOOL sub_216B785D0(int a1)
{
  return a1 == 39;
}

unsigned __int8 *sub_216B785DC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  signed __int8 v5;

  v2 = a2;
  v3 = *(unsigned __int8 **)(a1 + 16);
  if (v3 == a2)
    return v2;
  do
  {
    v5 = *v2;
    if (!sub_216B782F8(*v2))
    {
      if (!sub_216B785D0(v5))
        return v2;
      v3 = *(unsigned __int8 **)(a1 + 16);
    }
    ++v2;
  }
  while (v2 != v3);
  return v3;
}

_BYTE *sub_216B78648(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  _BYTE *result;

  v2 = a2;
  result = *(_BYTE **)(a1 + 16);
  if (result == a2)
    return v2;
  do
  {
    if ((*v2 & 0xFE) != 0x30)
    {
      if (!sub_216B785D0((char)*v2))
        return v2;
      result = *(_BYTE **)(a1 + 16);
    }
    ++v2;
  }
  while (v2 != result);
  return result;
}

_BYTE *sub_216B786A8(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  _BYTE *result;

  v2 = a2;
  result = *(_BYTE **)(a1 + 16);
  if (result == a2)
    return v2;
  do
  {
    if ((*v2 & 0xF8) != 0x30)
    {
      if (!sub_216B785D0((char)*v2))
        return v2;
      result = *(_BYTE **)(a1 + 16);
    }
    ++v2;
  }
  while (v2 != result);
  return result;
}

uint64_t sub_216B78708(uint64_t a1, unsigned int *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];

  v5 = *(char **)(a1 + 24);
  v4 = *(char **)(a1 + 32);
  if (sub_216B788E0(*(_DWORD *)(a1 + 48), (_DWORD)v4 - (_DWORD)v5))
  {
    if (v5 == v4)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        if (!sub_216B785D0(*v5))
        {
          v7 = v6 * *(unsigned int *)(a1 + 48);
          v6 = v7 + sub_216B754A4(*v5);
        }
        ++v5;
      }
      while (v5 != *(char **)(a1 + 32));
    }
    sub_216B21450((uint64_t)a2, v6);
    LOBYTE(v11) = sub_216B1FD84(a2) != v6;
  }
  else
  {
    sub_216B21450((uint64_t)a2, 0);
    v8 = *(char **)(a1 + 24);
    v9 = sub_216B1E4E0(a2);
    sub_216B1E414(v21, v9, *(unsigned int *)(a1 + 48), 0);
    v10 = sub_216B1E4E0(a2);
    sub_216B1E414(v20, v10, 0, 0);
    sub_216B1E51C(v19, a2);
    LOBYTE(v11) = 0;
    if ((unint64_t)v8 < *(_QWORD *)(a1 + 32))
    {
      v11 = 0;
      do
      {
        v12 = v8;
        while (1)
        {
          v13 = *v12++;
          if (!sub_216B785D0(v13))
            break;
          v8 = v12;
          if ((unint64_t)v12 >= *(_QWORD *)(a1 + 32))
            goto LABEL_15;
        }
        v14 = *v8++;
        v15 = sub_216B754A4(v14);
        sub_216B21450((uint64_t)v20, v15);
        sub_216B2240C((uint64_t)v19, (uint64_t)a2);
        sub_216B21678((uint64_t)a2, (uint64_t)v21);
        sub_216B22F54(a2, (uint64_t)v21, (uint64_t)v18);
        v16 = sub_216B241E8((uint64_t)v18, (uint64_t)v19);
        sub_216B1D998(v18);
        sub_216B2152C((uint64_t)a2, (uint64_t)v20);
        v11 |= v16 | sub_216B21D88((uint64_t)a2, (uint64_t)v20);
      }
      while ((unint64_t)v8 < *(_QWORD *)(a1 + 32));
    }
LABEL_15:
    sub_216B1D998(v19);
    sub_216B1D998(v20);
    sub_216B1D998(v21);
  }
  return v11 & 1;
}

BOOL sub_216B788E0(int a1, unsigned int a2)
{
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 2;
  return dword_216C18738[(int)(v2 >> 1)] > a2;
}

char *sub_216B78904(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  const void **v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const void **v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  char *v32;
  unsigned int *v33;
  _BOOL4 v34;
  int v35;
  unsigned __int8 *v36;
  unsigned int *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unsigned int v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  char v54;
  _BOOL4 v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  unsigned __int8 *v62;
  _BOOL4 v63;
  unsigned __int8 *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  _BYTE v70[16];
  int v71[4];
  unsigned __int8 *v72[2];
  _BYTE v73[16];
  _BYTE v74[16];
  _BYTE v75[16];
  _BYTE v76[16];
  uint64_t v77[2];
  _BYTE v78[16];
  uint64_t v79[2];
  _BYTE v80[16];
  _BYTE v81[16];
  unsigned int *v82;
  _BYTE v83[40];
  uint64_t v84[2];
  char *v85[2];

  v11 = (const void **)(a1 + 16);
  sub_216B29078(a1 + 16);
  *(_BYTE *)(a1 + 11) = 0;
  v12 = (_BYTE *)(a1 + 11);
  *(_WORD *)(a1 + 8) = a6;
  v68 = a2;
  if (a6 == 9)
    v13 = a2;
  else
    v13 = a2 + 1;
  v14 = (unsigned __int8 *)(v13 + 1);
  v85[0] = (char *)(v13 + 1);
  if (*(_BYTE *)(a3 - 1) != 39)
  {
    v15 = 0;
    do
      v16 = *(unsigned __int8 *)(a3 + v15-- - 2);
    while (v16 != 39);
    v17 = a3 + v15;
    sub_216B1E684(v84, a3 + v15, -v15);
    sub_216B775D0(v11, v84[0], v84[1]);
    *(_DWORD *)(a1 + 72) = a3 - v68 + v15;
    v14 = (unsigned __int8 *)v85[0];
    a3 = v17;
  }
  v18 = (unsigned __int8 *)(a3 - 1);
  v19 = (const void **)sub_216B35A60(v83);
  sub_216B78F1C(v19, a3 - 1 - (_DWORD)v14);
  v20 = (unsigned int *)sub_216B262E0((uint64_t)v83);
  v82 = v20;
  v21 = sub_216B262E4((uint64_t)v83);
  v69 = a1;
  v22 = *(unsigned __int16 *)(a1 + 8);
  switch(v22)
  {
    case 12:
      v24 = 1114111;
      break;
    case 11:
      v24 = 0xFFFF;
      break;
    case 10:
      v23 = sub_216B27CB0(a5);
      v24 = 0xFFFFFFFF >> -(char)sub_216B78FFC(v23);
      break;
    default:
      v24 = 127;
      break;
  }
  if (v14 != v18)
  {
    v66 = (unsigned __int8 *)(a3 - 2);
    v67 = (unint64_t)&v20[v21];
    do
    {
      if (*v14 == 92)
      {
        if ((v14[1] | 0x20) == 0x75)
        {
          LOWORD(v72[0]) = 0;
          v25 = (int *)v82;
          v26 = sub_216B40EE8(a5);
          sub_216B4B4A0((uint64_t)v79, a4, v26);
          v27 = sub_216B2037C(a5);
          v28 = (uint64_t *)sub_216B5EE7C(a5);
          if ((sub_216B79014(v68, v85, v18, v25, (__int16 *)v72, v79[0], v79[1], v27, v28) & 1) != 0)
          {
            if (*v82 > v24)
            {
              *v12 = 1;
              sub_216B720D8(a5, a4, 625, (uint64_t)v78);
              sub_216B4B3B4(v78);
            }
          }
          else
          {
            *v12 = 1;
          }
          ++v82;
        }
        else
        {
          v38 = *(unsigned __int16 *)(v69 + 8);
          sub_216B27CB0(a5);
          v39 = sub_216B79310(v38);
          v40 = sub_216B40EE8(a5);
          sub_216B4B4A0((uint64_t)v77, a4, v40);
          v41 = sub_216B2037C(a5);
          v42 = (_QWORD *)sub_216B5EE7C(a5);
          v43 = sub_216B79350(v68, v85, (char *)v18, v12, v77[0], v77[1], v39, v41, v42);
          v44 = v82++;
          *v44 = v43;
        }
      }
      else
      {
        v72[0] = v14;
        v29 = v14 + 1;
        while (v29 != v18)
        {
          v30 = *v29++;
          if (v30 == 92)
          {
            v31 = v29 - 2;
            v32 = (char *)(v29 - 1);
            goto LABEL_27;
          }
        }
        v31 = v66;
        v32 = (char *)v18;
LABEL_27:
        v85[0] = v32;
        v33 = v82;
        if (sub_216B2586C(v72, (unsigned __int8 *)v32, &v82, v67, 0))
        {
          v34 = sub_216B79004(v69);
          if (v34)
            v35 = 854;
          else
            v35 = 623;
          sub_216B720D8(a5, a4, v35, (uint64_t)v81);
          sub_216B4B3B4(v81);
          if (v34)
          {
            v72[0] = v14;
            v82 = v33;
            if (v14 != (unsigned __int8 *)v32)
            {
              do
              {
                *v33 = *v14;
                v36 = v72[0];
                v14 = ++v72[0];
                v33 = ++v82;
              }
              while (v36 != v31);
            }
          }
          else
          {
            *v12 = 1;
          }
        }
        else
        {
          v37 = v82;
          while (v33 < v37)
          {
            if (*v33 > v24)
            {
              *v12 = 1;
              sub_216B720D8(a5, a4, 625, (uint64_t)v80);
              sub_216B4B3B4(v80);
              v37 = v82;
            }
            ++v33;
          }
        }
      }
      v14 = (unsigned __int8 *)v85[0];
    }
    while ((unsigned __int8 *)v85[0] != v18);
  }
  v45 = v82;
  v46 = (unint64_t)v45 - sub_216B262E0((uint64_t)v83);
  v47 = v46 >> 2;
  if ((v46 >> 2) < 2)
  {
    v54 = 0;
    v48 = (char *)v69;
  }
  else
  {
    v48 = (char *)v69;
    if (sub_216B797F4(v69))
    {
      v49 = a4;
      v50 = v76;
      v51 = v76;
      v52 = a5;
      v53 = 874;
    }
    else
    {
      v55 = sub_216B79004(v69);
      if ((_DWORD)v47 == 4 && v55)
      {
        v49 = a4;
        v50 = v75;
        v51 = v75;
        v52 = a5;
        v53 = 782;
      }
      else
      {
        v56 = sub_216B79004(v69);
        v49 = a4;
        if (v56)
        {
          v50 = v74;
          v51 = v74;
          v52 = a5;
          v53 = 790;
        }
        else
        {
          v50 = v73;
          v51 = v73;
          v52 = a5;
          v53 = 690;
        }
      }
    }
    sub_216B720D8(v52, v49, v53, (uint64_t)v51);
    sub_216B4B3B4(v50);
    v54 = 1;
  }
  v48[10] = v54;
  v57 = sub_216B27CB0(a5);
  v58 = sub_216B69624(v57);
  sub_216B1E414(v72, v58, 0, 0);
  if (sub_216B79004((uint64_t)v48) && sub_216B79804((uint64_t)v48))
  {
    sub_216B21450((uint64_t)v72, 0);
    v59 = (v46 >> 2);
    if (v59)
    {
      v60 = 0;
      v61 = 0;
      do
      {
        v61 |= sub_216B20480((uint64_t)v72) < 8;
        sub_216B1E418((unsigned int *)v72, 8);
        v62 = (unsigned __int8 *)sub_216B4B528((uint64_t)v83, v60);
        sub_216B230B8((unsigned int *)v72, *v62, (uint64_t)v71);
        sub_216B1E580((uint64_t)v72, v71);
        sub_216B1D998(v71);
        ++v60;
      }
      while (v59 != v60);
      if (((*v12 == 0) & v61) == 1)
      {
        sub_216B720D8(a5, a4, 858, (uint64_t)v70);
        sub_216B4B3B4(v70);
      }
    }
  }
  else if ((_DWORD)v47)
  {
    sub_216B21450((uint64_t)v72, *(v82 - 1));
  }
  *(_QWORD *)v48 = sub_216B1FD84(v72);
  v63 = sub_216B79004((uint64_t)v48);
  if ((_DWORD)v47 == 1 && v63 && *v48 < 0 && (*(_WORD *)(sub_216B5EE7C(a5) + 16) & 0x800) != 0)
    *(_QWORD *)v48 = *v48;
  sub_216B1D998(v72);
  sub_216B1FF6C(v83);
  return v48;
}

unint64_t sub_216B78F1C(const void **a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  if (sub_216B262E4((uint64_t)a1) <= (unint64_t)a2)
  {
    result = sub_216B262E4((uint64_t)a1);
    if (result >= v3)
      return result;
    if (sub_216B7AB20((uint64_t)a1) < v3)
      sub_216B26598(a1, v3);
    v7 = (void *)sub_216B1E67C((uint64_t)a1);
    v8 = sub_216B1E600((uint64_t)a1) + 4 * v3;
    if (v7 != (void *)v8)
      bzero(v7, ((v8 - (_QWORD)v7 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    v4 = sub_216B1E600((uint64_t)a1) + 4 * v3;
    v5 = sub_216B1E67C((uint64_t)a1);
    nullsub_1(v4, v5);
  }
  v9 = sub_216B1E600((uint64_t)a1) + 4 * v3;
  return sub_216B203A4((uint64_t)a1, v9);
}

uint64_t sub_216B78FFC(uint64_t a1)
{
  return sub_216B69634(a1, *(_DWORD *)(a1 + 236));
}

BOOL sub_216B79004(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8) == 9;
}

uint64_t sub_216B79014(int a1, char **a2, unsigned __int8 *a3, int *a4, __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  char *v13;
  unsigned __int8 *v14;
  __int16 v18;
  char *v19;
  int v20;
  unsigned int v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  _BYTE v30[16];
  _BYTE v31[16];
  uint64_t v32[2];
  char v33;
  _BYTE v34[16];
  _BYTE v35[16];
  uint64_t v36[2];
  uint64_t v37[2];

  v13 = *a2;
  v14 = (unsigned __int8 *)(*a2 + 2);
  *a2 = (char *)v14;
  if (v14 == a3 || !sub_216B782F8(*v14))
  {
    if (!a8)
      return 0;
    sub_216B7A748(a8, a9, a6, a7, a1, (int)v13, (int)v14, 642, (uint64_t)v37);
    sub_216B1E684(v36, *a2 - 1, 1);
    sub_216B4B340(v37, v36[0], v36[1]);
    v24 = v37;
LABEL_29:
    sub_216B4B3B4(v24);
    return 0;
  }
  if (v13[1] == 117)
    v18 = 4;
  else
    v18 = 8;
  *a5 = v18;
  v19 = *a2;
  if (*a2 == (char *)a3)
  {
    LODWORD(v19) = (_DWORD)a3;
LABEL_27:
    if (!a8)
      return 0;
    sub_216B7A748(a8, a9, a6, a7, a1, (int)v13, (int)v19, 763, (uint64_t)v35);
    v24 = (uint64_t *)v35;
    goto LABEL_29;
  }
  do
  {
    v20 = sub_216B754A4(*v19);
    if (v20 == -1)
      goto LABEL_27;
    *a4 = v20 | (16 * *a4);
    v19 = *a2 + 1;
    *a2 = v19;
    --v18;
  }
  while (v19 != (char *)a3 && v18 != 0);
  if (v18)
    goto LABEL_27;
  v22 = *a4;
  if (HIWORD(*a4) > 0x10u || (v22 & 0xFFFFF800) == 0xD800)
  {
    if (!a8)
      return 0;
    sub_216B7A748(a8, a9, a6, a7, a1, (int)v13, (int)v19, 764, (uint64_t)v34);
    v24 = (uint64_t *)v34;
    goto LABEL_29;
  }
  if (v22 <= 0x9F && (v22 - 36 > 0x3C || ((1 << (v22 - 36)) & 0x1000000010000001) == 0))
  {
    v25 = *a9;
    if (a8)
    {
      v33 = *a4;
      if (v22 - 32 > 0x5E)
      {
        if ((v25 & 0x80) != 0)
          v28 = 866;
        else
          v28 = 761;
        sub_216B7A748(a8, a9, a6, a7, a1, (int)v13, (int)v19, v28, (uint64_t)v31);
        v27 = (uint64_t *)v31;
      }
      else
      {
        if ((v25 & 0x80) != 0)
          v26 = 867;
        else
          v26 = 762;
        sub_216B7A748(a8, a9, a6, a7, a1, (int)v13, (int)v19, v26, (uint64_t)v37);
        sub_216B1E684(v32, &v33, 1);
        sub_216B4B340(v37, v32[0], v32[1]);
        v27 = v37;
      }
      sub_216B4B3B4(v27);
    }
    if ((v25 & 0x80) == 0)
      return 0;
  }
  if ((*a9 & 0x40) != 0)
    return 1;
  result = 1;
  if (a8 && (*a9 & 1) == 0)
  {
    sub_216B7A748(a8, a9, a6, a7, a1, (int)v13, (int)*a2, 913, (uint64_t)v30);
    sub_216B4B3B4(v30);
    return 1;
  }
  return result;
}

uint64_t sub_216B79310(int a1)
{
  return ((uint64_t (*)())((char *)sub_216B7932C + 4 * byte_216C1870E[a1 - 9]))();
}

uint64_t sub_216B7932C()
{
  return sub_216B3DE34();
}

uint64_t sub_216B79334(uint64_t a1, uint64_t a2)
{
  return sub_216B7A938(a2);
}

uint64_t sub_216B7933C(uint64_t a1, uint64_t a2)
{
  return sub_216B78FFC(a2);
}

uint64_t sub_216B79344(uint64_t a1, uint64_t a2)
{
  return sub_216B7A940(a2);
}

uint64_t sub_216B79350(int a1, char **a2, char *a3, _BYTE *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, _QWORD *a9)
{
  int v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  const char *v24;
  uint64_t v25;
  _BOOL4 v28;
  unsigned int v29;
  char v30;
  int v31;
  int v32;
  unsigned int v33;
  char v34;
  uint64_t v36;
  std::string v38;
  uint64_t v39[2];
  uint64_t v40[2];
  _QWORD v41[2];
  std::string v42;
  _QWORD v43[2];
  _BYTE v44[16];
  _BYTE v45[24];

  v14 = a1;
  v15 = *a2;
  v16 = *a2 + 2;
  *a2 = v16;
  v17 = v15[1];
  if ((int)v17 <= 68)
  {
    if ((int)v17 <= 39)
    {
      if ((_DWORD)v17 == 34)
        return v17;
      if ((_DWORD)v17 != 37)
      {
        if ((_DWORD)v17 == 39)
          return v17;
        goto LABEL_34;
      }
    }
    else
    {
      if ((v17 - 48) < 8)
      {
        v18 = 0;
        LODWORD(v17) = 0;
        do
        {
          v19 = &v15[v18 + 2];
          *a2 = v19;
          v17 = (v15[v18 + 1] - 48) | (8 * v17);
          if (v19 == a3 || v18 > 1)
            break;
          ++v18;
        }
        while ((*v19 & 0xF8) == 0x30);
        if (a7 != 32 && v17 >> a7)
        {
          if (a8)
          {
            sub_216B7A748(a8, a9, a5, a6, a1, (int)v15, (int)v19, 694, (uint64_t)v44);
            sub_216B4B3B4(v44);
          }
          return v17 & (0xFFFFFFFF >> -(char)a7);
        }
        return v17;
      }
      if ((_DWORD)v17 != 40)
      {
        if ((_DWORD)v17 == 63)
          return v17;
LABEL_34:
        if (!a8)
          return v17;
        v25 = a6;
        if (!sub_216B7A948(v15[1]))
        {
          sub_216B7A748(a8, a9, a5, v25, a1, (int)v15, (int)v16, 817, (uint64_t)v40);
          sub_216B7A964(v17, (uint64_t)&v38);
          sub_216B2BA64("x", &v38, (uint64_t)&v42);
          sub_216B26CA0(v39, &v42);
          sub_216B4B340(v40, v39[0], v39[1]);
          std::string::~string(&v42);
          std::string::~string(&v38);
          v23 = (std::string *)v40;
          goto LABEL_30;
        }
        sub_216B7A748(a8, a9, a5, v25, a1, (int)v15, (int)v16, 817, (uint64_t)&v38);
        sub_216B2E21C(&v42, 1, v17);
        sub_216B26CA0(v41, &v42);
        v21 = v41[0];
        v22 = v41[1];
LABEL_29:
        sub_216B4B340((uint64_t *)&v38, v21, v22);
        std::string::~string(&v42);
        v23 = &v38;
LABEL_30:
        sub_216B4B3B4(v23);
        return v17;
      }
    }
LABEL_27:
    if (!a8)
      return v17;
    sub_216B7A748(a8, a9, a5, a6, a1, (int)v15, (int)v16, 793, (uint64_t)&v38);
    sub_216B2E21C(&v42, 1, v17);
    sub_216B26CA0(v43, &v42);
    v21 = v43[0];
    v22 = v43[1];
    goto LABEL_29;
  }
  switch(v15[1])
  {
    case '[':
      goto LABEL_27;
    case '\\':
      return v17;
    case ']':
    case '^':
    case '_':
    case 'c':
    case 'd':
      goto LABEL_34;
    case 'a':
      return 7;
    case 'b':
      return 8;
    case 'e':
      if (a8)
      {
        sub_216B7A748(a8, a9, a5, a6, a1, (int)v15, (int)v16, 793, (uint64_t)&v42);
        v24 = "e";
LABEL_40:
        sub_216B60EA8((uint64_t *)&v42, (uint64_t)v24);
        sub_216B4B3B4(&v42);
      }
      return 27;
    case 'f':
      return 12;
    default:
      switch(v15[1])
      {
        case 'n':
          return 10;
        case 'o':
        case 'p':
        case 'q':
        case 's':
        case 'u':
        case 'w':
        case 'y':
        case 'z':
          goto LABEL_34;
        case 'r':
          return 13;
        case 't':
          return 9;
        case 'v':
          return 11;
        case 'x':
          if (v16 == a3 || (v36 = a6, v28 = sub_216B782F8(*v16), a6 = v36, v14 = a1, !v28))
          {
            if (a8)
            {
              sub_216B7A748(a8, a9, a5, a6, v14, (int)v15, (int)v16, 642, (uint64_t)&v42);
              sub_216B60EA8((uint64_t *)&v42, (uint64_t)"x");
              sub_216B4B3B4(&v42);
            }
            v17 = 0;
            *a4 = 1;
            return v17;
          }
          v29 = 0;
          v30 = 0;
          break;
        case '{':
          goto LABEL_27;
        default:
          if ((_DWORD)v17 != 69)
            goto LABEL_34;
          if (!a8)
            return 27;
          sub_216B7A748(a8, a9, a5, a6, a1, (int)v15, (int)v16, 793, (uint64_t)&v42);
          v24 = "E";
          goto LABEL_40;
      }
      break;
  }
  while (1)
  {
    v31 = sub_216B754A4(*v16);
    if (v31 == -1)
      break;
    v32 = v31 | (16 * v29);
    v30 |= (v29 & 0xF0000000) != 0;
    *a2 = ++v16;
    v29 = v32;
    if (v16 == a3)
    {
      v29 = v32;
      LODWORD(v16) = (_DWORD)a3;
      break;
    }
  }
  v33 = v29 & (0xFFFFFFFF >> -(char)a7);
  if (v29 >> a7)
    v34 = 1;
  else
    v34 = v30;
  if (!(v29 >> a7))
    v33 = v29;
  if (a7 == 32)
  {
    v34 = v30;
    v17 = v29;
  }
  else
  {
    v17 = v33;
  }
  if (a8 && (v34 & 1) != 0)
  {
    sub_216B7A748(a8, a9, a5, v36, a1, (int)v15, (int)v16, 643, (uint64_t)v45);
    v23 = (std::string *)v45;
    goto LABEL_30;
  }
  return v17;
}

BOOL sub_216B797F4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8) == 10;
}

uint64_t sub_216B79804(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

char *sub_216B7980C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  return sub_216B78904(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216B79814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = sub_216B40EE8(a4);
  *(_QWORD *)(a1 + 8) = sub_216B5EE7C(a4);
  *(_QWORD *)(a1 + 16) = sub_216B27CB0(a4);
  if (a5)
    v10 = sub_216B2037C(a4);
  else
    v10 = 0;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 38) = 0;
  v11 = sub_216B798C4(a1 + 48);
  *(_QWORD *)(a1 + 584) = sub_216B262E0(v11);
  sub_216B29078(a1 + 592);
  *(_WORD *)(a1 + 656) = 0;
  sub_216B798C8(a1, a2, a3);
  return a1;
}

uint64_t sub_216B798C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int *v28;
  int v29;
  int v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  unsigned int *v48;
  int v49;
  BOOL v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  unsigned __int8 *v56;
  char *v57;
  unsigned int *v58;
  int v59;
  char *v60;
  int v61;
  unsigned int *v62;
  unsigned int *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  int v69;
  _DWORD *v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t *v81;
  int v82;
  uint64_t *v83;
  unsigned int *v84;
  int v85;
  unsigned int *v86;
  int v87;
  _WORD *v88;
  char v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  int v94;
  unsigned int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[2];
  uint64_t v100[2];
  uint64_t v101[2];
  uint64_t v102[2];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[2];
  const void *v106[7];
  const void *v107;
  size_t v108;
  char v109;
  char *v110;
  int v111;
  const void *v112[67];
  _BYTE v113[20];
  unsigned int v114;
  _QWORD v115[3];

  v115[0] = a2;
  v115[1] = a3;
  if (sub_216B29094((uint64_t)v115) || (v4 = sub_216B2BF7C(v115, 0), sub_216B693F8(v4) <= 1))
  {
    sub_216B4AED0(&v114);
    v5 = v114;
    return sub_216B7A1E0(a1, v5);
  }
  v7 = sub_216B2BF7C(v115, 0);
  *(_DWORD *)(a1 + 32) = sub_216B693F8(v7);
  v8 = sub_216B2BF7C(v115, 0);
  *(_DWORD *)(a1 + 36) = sub_216B693F8(v8) - 2;
  v9 = sub_216B2BF7C(v115, 0);
  *(_WORD *)(a1 + 44) = sub_216B71644(v9);
  v10 = (_BYTE *)(a1 + 656);
  *(_BYTE *)(a1 + 656) = 0;
  if (sub_216B1E67C((uint64_t)v115) != 1)
  {
    v11 = 2;
    v12 = 1;
    while (1)
    {
      v13 = sub_216B2BF7C(v115, v12);
      v14 = sub_216B693F8(v13);
      v15 = (unsigned int *)sub_216B2BF7C(v115, v12);
      if (v14 < 2)
        break;
      *(_DWORD *)(a1 + 36) = sub_216B693F8((uint64_t)v15) + *(_DWORD *)(a1 + 36) - 2;
      v16 = sub_216B2BF7C(v115, v12);
      if (sub_216B693F8(v16) > *(_DWORD *)(a1 + 32))
      {
        v17 = sub_216B2BF7C(v115, v12);
        *(_DWORD *)(a1 + 32) = sub_216B693F8(v17);
      }
      v18 = sub_216B2BF7C(v115, v12);
      if (sub_216B7214C(v18, *(unsigned __int16 *)(a1 + 44)))
      {
        v19 = sub_216B2BF7C(v115, v12);
        if (sub_216B7214C(v19, 13))
        {
          if (sub_216B7A220(a1))
          {
            v20 = sub_216B2BF7C(v115, v12);
            *(_WORD *)(a1 + 44) = sub_216B71644(v20);
          }
          else
          {
            v21 = *(_QWORD *)(a1 + 24);
            if (v21)
            {
              v22 = (unsigned int *)sub_216B2BF7C(v115, v12);
              v23 = sub_216B1E4E0(v22);
              sub_216B4CD2C(v21, v23, 765, (uint64_t)v113);
              sub_216B4B3B4(v113);
            }
            *v10 = 1;
          }
        }
      }
      v12 = v11;
      v50 = sub_216B1E67C((uint64_t)v115) == v11++;
      if (v50)
        goto LABEL_20;
    }
    v5 = sub_216B1E4E0(v15);
    return sub_216B7A1E0(a1, v5);
  }
LABEL_20:
  ++*(_DWORD *)(a1 + 36);
  v24 = sub_216B79310(*(unsigned __int16 *)(a1 + 44));
  v25 = *(_DWORD *)(a1 + 36) * (v24 >> 3);
  *(_DWORD *)(a1 + 36) = v25;
  *(_DWORD *)(a1 + 40) = v24 >> 3;
  sub_216B294F0((const void **)(a1 + 48), v25);
  sub_216B798C4(v112);
  sub_216B294F0(v112, *(_DWORD *)(a1 + 32));
  v97 = a1 + 48;
  *(_QWORD *)(a1 + 584) = sub_216B1FF44(a1 + 48, 0);
  *(_BYTE *)(a1 + 657) = 0;
  sub_216B4AED0(&v111);
  v98 = sub_216B1E67C((uint64_t)v115);
  if (v98)
  {
    v26 = 0;
    v27 = (uint64_t *)(a1 + 584);
    while (1)
    {
      v110 = 0;
      v110 = (char *)sub_216B1FF44((uint64_t)v112, 0);
      v109 = 0;
      v28 = (unsigned int *)sub_216B2BF7C(v115, v26);
      v29 = sub_216B7102C(v28, (uint64_t *)&v110, *(_QWORD *)a1, *(_QWORD **)(a1 + 8), &v109);
      if (v109)
        break;
      v30 = v29;
      v31 = (int)v110;
      v32 = &v110[v29];
      v33 = v110;
      if (*(v32 - 1) != 34)
      {
        v34 = 0;
        do
          v35 = v32[v34-- - 2];
        while (v35 != 34);
        v32 += v34;
        sub_216B1E684(&v107, v32, -v34);
        if (sub_216B29084((_QWORD *)(a1 + 592)))
        {
          v36 = sub_216B2BF7C(v115, v26);
          if (sub_216B711C0(v36))
            sub_216B775D0((const void **)(a1 + 592), (uint64_t)v107, v108);
          else
            sub_216B7A230((const void **)(a1 + 592), (uint64_t)v107, v108);
          *(_DWORD *)(a1 + 648) = v26;
          *(_DWORD *)(a1 + 652) = v30 + v31 - (_DWORD)v110 + v34;
          v48 = (unsigned int *)sub_216B2BF7C(v115, v26);
          v111 = sub_216B1E4E0(v48);
        }
        else
        {
          sub_216B29078(v106);
          v37 = sub_216B2BF7C(v115, v26);
          if (sub_216B711C0(v37))
          {
            sub_216B775D0(v106, (uint64_t)v107, v108);
            v107 = (const void *)sub_216B28180((uint64_t)v106);
            v108 = v38;
          }
          v39 = sub_216B28180(a1 + 592);
          if (sub_216B2B2F0(v39, v40, v107, v108))
          {
            if (*(_QWORD *)(a1 + 24))
            {
              v41 = (unsigned int *)sub_216B2BF7C(v115, v26);
              v42 = sub_216B1E4E0(v41);
              sub_216B4CD2C(*(_QWORD *)(a1 + 24), v42, 758, (uint64_t)v105);
              v43 = sub_216B28180(a1 + 592);
              v45 = sub_216B4B340(v105, v43, v44);
              v46 = sub_216B4B340(v45, (uint64_t)v107, v108);
              sub_216B746DC(&v104, v111, v111);
              v47 = sub_216B7A280(v46, &v104);
              sub_216B746DC(&v103, v42, v42);
              sub_216B7A280(v47, &v103);
              sub_216B4B3B4(v105);
            }
            *v10 = 1;
          }
          sub_216B2489C(v106);
        }
        v33 = v110;
      }
      v49 = *v33;
      v50 = (v49 - 76) > 0x29 || ((1 << (v49 - 76)) & 0x20000000201) == 0;
      if (!v50)
      {
        v51 = v33 + 1;
        v110 = v33 + 1;
        v49 = v33[1];
        if (v49 == 56)
        {
          v51 = v33 + 2;
          v110 = v33 + 2;
          v49 = v33[2];
        }
        v33 = v51;
      }
      if (v49 == 34)
      {
        v56 = (unsigned __int8 *)(v32 - 1);
        v57 = v33 + 1;
        v110 = v33 + 1;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 3) & 0x40) != 0
          && v33 + 2 != (char *)v56
          && *v57 == 92
          && v33[2] == 112)
        {
          if (v26)
          {
            if (*(_BYTE *)(a1 + 657))
            {
              v57 = v33 + 3;
              v110 = v33 + 3;
            }
          }
          else
          {
            v110 = v33 + 2;
            *(_BYTE *)(a1 + 657) = 1;
            v57 = v33 + 2;
          }
        }
        while (2)
        {
          if (v57 == (char *)v56)
            goto LABEL_76;
          if (*v57 != 92)
          {
            v60 = v57 + 1;
            do
            {
              v110 = v60;
              if (v60 == (char *)v56)
                break;
              v61 = *v60++;
            }
            while (v61 != 92);
            v62 = (unsigned int *)sub_216B2BF7C(v115, v26);
            sub_216B1E684(v101, v57, v110 - v57);
            if (sub_216B7A2C4(a1, v62, v31, v101[0], v101[1]))
              *v10 = 1;
            goto LABEL_74;
          }
          if ((v57[1] | 0x20) == 0x75)
          {
            v58 = (unsigned int *)sub_216B2BF7C(v115, v26);
            v59 = sub_216B1E4E0(v58);
            sub_216B4B4A0((uint64_t)v100, v59, *(_QWORD *)a1);
            sub_216B7A510(v31, &v110, v56, (uint64_t *)(a1 + 584), (_BYTE *)(a1 + 656), v100[0], v100[1], *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 8));
          }
          else
          {
            v63 = (unsigned int *)sub_216B2BF7C(v115, v26);
            v64 = sub_216B1E4E0(v63);
            sub_216B4B4A0((uint64_t)v99, v64, *(_QWORD *)a1);
            v65 = sub_216B79350(v31, &v110, (char *)v56, (_BYTE *)(a1 + 656), v99[0], v99[1], 8 * *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 8));
            v66 = *(_DWORD *)(a1 + 40);
            if (v66 == 2)
            {
              *(_WORD *)*v27 = v65;
              v67 = *v27 + 2;
            }
            else
            {
              if (v66 != 4)
              {
                v68 = (_BYTE *)(*v27)++;
                *v68 = v65;
                goto LABEL_74;
              }
              *(_DWORD *)*v27 = v65;
              v67 = *v27 + 4;
            }
            *v27 = v67;
          }
LABEL_74:
          v57 = v110;
          continue;
        }
      }
      if (v49 != 82)
        break;
      v52 = v33 + 2;
      v53 = 1 - (_QWORD)v32;
      do
      {
        v110 = v52;
        v54 = *v52++;
        ++v53;
      }
      while (v54 != 40);
      v110 = v52;
      v55 = (unsigned int *)sub_216B2BF7C(v115, v26);
      sub_216B1E684(v102, v110, -v53 - (_QWORD)v110);
      if (sub_216B7A2C4(a1, v55, v31, v102[0], v102[1]))
        *v10 = 1;
LABEL_76:
      if (++v26 == v98)
        goto LABEL_77;
    }
    v71 = (unsigned int *)sub_216B2BF7C(v115, v26);
    v72 = sub_216B1E4E0(v71);
    sub_216B7A1E0(a1, v72);
  }
  else
  {
LABEL_77:
    if (*(_BYTE *)(a1 + 657))
    {
      v69 = *(_DWORD *)(a1 + 40);
      if (v69 == 2)
      {
        v88 = (_WORD *)sub_216B262E0(v97);
        *v88 = sub_216B7A6B8(a1) - 1;
      }
      else if (v69 == 4)
      {
        v70 = (_DWORD *)sub_216B262E0(v97);
        *v70 = sub_216B7A6B8(a1) - 1;
      }
      else
      {
        v89 = sub_216B7A6B8(a1) - 1;
        *(_BYTE *)sub_216B1FF44(v97, 0) = v89;
      }
      if (sub_216B7A6E0(a1) >= 0x101)
      {
        v90 = *(_QWORD *)(a1 + 24);
        if (v90)
        {
          v91 = (unsigned int *)sub_216B1E600((uint64_t)v115);
          v92 = sub_216B1E4E0(v91);
          sub_216B4CD2C(v90, v92, 695, (uint64_t)v106);
          v93 = (unsigned int *)sub_216B1E600((uint64_t)v115);
          v94 = sub_216B1E4E0(v93);
          v95 = (unsigned int *)sub_216B7A708(v115);
          v96 = sub_216B1E4E0(v95);
          sub_216B746DC(&v107, v94, v96);
          sub_216B7A280(v106, (uint64_t *)&v107);
          sub_216B4B3B4(v106);
        }
        *v10 = 1;
      }
    }
    else if (*(_QWORD *)(a1 + 24))
    {
      v73 = **(_QWORD **)(a1 + 8);
      v74 = (v73 & 1) != 0 ? 4095 : 509;
      v75 = (v73 & 0x40) != 0 ? 0x10000 : v74;
      if (sub_216B7A6B8(a1) > v75)
      {
        v76 = *(_QWORD *)(a1 + 24);
        v77 = (unsigned int *)sub_216B1E600((uint64_t)v115);
        v78 = sub_216B1E4E0(v77);
        sub_216B4CD2C(v76, v78, 814, (uint64_t)v106);
        v79 = sub_216B7A6B8(a1);
        v80 = sub_216B7A71C((uint64_t *)v106, v79);
        v81 = sub_216B7A71C(v80, v75);
        if ((**(_QWORD **)(a1 + 8) & 0x40) != 0)
          v82 = 2;
        else
          v82 = **(_DWORD **)(a1 + 8) & 1;
        v83 = sub_216B77520(v81, v82);
        v84 = (unsigned int *)sub_216B1E600((uint64_t)v115);
        v85 = sub_216B1E4E0(v84);
        v86 = (unsigned int *)sub_216B7A708(v115);
        v87 = sub_216B1E4E0(v86);
        sub_216B746DC(&v107, v85, v87);
        sub_216B7A280(v83, (uint64_t *)&v107);
        sub_216B4B3B4(v106);
      }
    }
  }
  return sub_216B2489C(v112);
}

uint64_t sub_216B7A1E0(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  _BYTE v3[16];

  *(_BYTE *)(a1 + 656) = 1;
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_216B4CD2C(result, a2, 655, (uint64_t)v3);
    return sub_216B4B3B4(v3);
  }
  return result;
}

BOOL sub_216B7A220(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 44) == 13;
}

uint64_t sub_216B7A230(const void **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  sub_216B20594(a1);
  v4 = (char *)sub_216B1E600((uint64_t)v7);
  v5 = (char *)sub_216B1E608(v7);
  return sub_216B202D8(a1, v4, v5);
}

_QWORD *sub_216B7A280(_QWORD *a1, uint64_t *a2)
{
  int v3;
  uint64_t v5;
  int v6;

  v5 = sub_216B7AA24(*a2);
  v6 = v3;
  sub_216B775B4(a1, (uint64_t)&v5);
  return a1;
}

BOOL sub_216B7A2C4(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  void **v8;
  _BOOL4 v10;
  void *v11;
  const void *v12;
  size_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  _WORD *v33;
  const void *v34[67];
  __int128 v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  _QWORD v40[2];

  v40[0] = a4;
  v40[1] = a5;
  v39 = 0;
  v8 = (void **)(a1 + 584);
  if (sub_216B2596C(*(_DWORD *)(a1 + 40), a4, a5, (_WORD **)(a1 + 584), &v39))
    return 0;
  v10 = sub_216B7A220(a1);
  if (v10)
  {
    v11 = *v8;
    v12 = (const void *)sub_216B1E600((uint64_t)v40);
    v13 = sub_216B1E67C((uint64_t)v40);
    memcpy(v11, v12, v13);
    *v8 = (char *)*v8 + sub_216B1E67C((uint64_t)v40);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = v39;
    v15 = sub_216B1E4E0(a2);
    sub_216B4B4A0((uint64_t)&v37, v15, *(_QWORD *)a1);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD **)(a1 + 8);
    v18 = v37;
    v19 = v38;
    v20 = (unsigned __int8 *)sub_216B1E608(v40);
    v21 = sub_216B7A820(v14, v20);
    if (v10)
      v22 = 855;
    else
      v22 = 624;
    sub_216B7A748(v16, v17, v18, v19, a3, (int)v14, v21, v22, (uint64_t)v36);
    v23 = (unsigned __int8 *)sub_216B1E608(v40);
    v24 = sub_216B7A820(v14, v23);
    v25 = sub_216B1E608(v40);
    sub_216B1E684(&v35, v24, v25 - (_QWORD)v24);
    sub_216B798C4(v34);
    v26 = sub_216B1E67C((uint64_t)v40);
    sub_216B28114(v34, *(_DWORD *)(a1 + 40) * v26);
    v33 = (_WORD *)sub_216B262E0((uint64_t)v34);
    if (!sub_216B2596C(*(_DWORD *)(a1 + 40), v35, *((uint64_t *)&v35 + 1), &v33, &v39))
    {
      do
      {
        v27 = v39;
        v28 = (unsigned __int8 *)sub_216B1E608(v40);
        v29 = sub_216B7A820(v27, v28);
        *(_QWORD *)&v32 = sub_216B7A89C(*(_QWORD **)(a1 + 8), v37, v38, a3, (int)v27, (int)v29);
        DWORD2(v32) = v30;
        sub_216B75654(v36, (uint64_t)&v32);
        v31 = sub_216B1E608(v40);
        sub_216B1E684(&v32, v29, v31 - (_QWORD)v29);
        v35 = v32;
      }
      while (!sub_216B2596C(*(_DWORD *)(a1 + 40), v32, *((uint64_t *)&v32 + 1), &v33, &v39));
    }
    sub_216B2489C(v34);
    sub_216B4B3B4(v36);
  }
  return !v10;
}

uint64_t sub_216B7A510(int a1, char **a2, unsigned __int8 *a3, uint64_t *a4, _BYTE *a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t result;
  uint64_t v14;
  _WORD *v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _WORD *v23;
  char v24;
  __int16 v25;
  unsigned int v26;

  v26 = 0;
  result = sub_216B79014(a1, a2, a3, (int *)&v26, &v25, a6, a7, a9, a10);
  if ((result & 1) != 0)
  {
    if (a8 == 2)
    {
      v15 = (_WORD *)*a4;
      v16 = v26;
      if (HIWORD(v26))
      {
        *v15 = ((v26 + 67043328) >> 10) - 10240;
        v15[1] = v16 & 0x3FF | 0xDC00;
        v17 = 4;
      }
      else
      {
        *v15 = v26;
        v17 = 2;
      }
      v14 = *a4 + v17;
    }
    else if (a8 == 4)
    {
      *(_DWORD *)*a4 = v26;
      v14 = *a4 + 4;
    }
    else
    {
      v18 = v26;
      if (v26 > 0x7F)
      {
        if (v26 > 0x7FF)
        {
          v20 = 3;
          if (v26 < 0x10000)
            v22 = 3;
          else
            v22 = 4;
          if (v26 >= 0x10000)
            v20 = 4;
          v23 = (_WORD *)(*a4 + v20);
          if (v22 != 3)
          {
            *a4 = (uint64_t)v23 - 1;
            *((_BYTE *)v23 - 1) = v18 & 0x3F | 0x80;
            v18 >>= 6;
            v23 = (_WORD *)*a4;
          }
          *a4 = (uint64_t)v23 - 1;
          *((_BYTE *)v23 - 1) = v18 & 0x3F | 0x80;
          v18 >>= 6;
          v21 = *a4;
        }
        else
        {
          v21 = *a4 + 2;
          v20 = 2u;
        }
        *a4 = v21 - 1;
        *(_BYTE *)(v21 - 1) = v18 & 0x3F | 0x80;
        v18 >>= 6;
        v19 = *a4;
      }
      else
      {
        v19 = *a4 + 1;
        v20 = 1u;
      }
      v24 = *((_BYTE *)&unk_216C18732 + v20) | v18;
      *a4 = v19 - 1;
      *(_BYTE *)(v19 - 1) = v24;
      v14 = *a4 + v20;
    }
    *a4 = v14;
  }
  else
  {
    *a5 = 1;
  }
  return result;
}

uint64_t sub_216B7A6B8(uint64_t a1)
{
  return sub_216B7A6E0(a1) / *(_DWORD *)(a1 + 40);
}

uint64_t sub_216B7A6E0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 584);
  return v1 - sub_216B262E0(a1 + 48);
}

uint64_t sub_216B7A708(_QWORD *a1)
{
  return *a1 + 24 * a1[1] - 24;
}

uint64_t *sub_216B7A71C(uint64_t *a1, unsigned int a2)
{
  sub_216B65358(a1, a2, 3);
  return a1;
}

uint64_t sub_216B7A748@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  unsigned int v13;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  uint64_t v23;
  int v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v13 = a3;
  v26 = a3;
  v27 = a4;
  v17 = a6 - a5;
  v18 = sub_216B1E67C((uint64_t)&v26);
  v19 = sub_216B71658(v13, v17, v18, a2);
  sub_216B4CD2C(a1, v19, a8, (uint64_t)v25);
  v23 = sub_216B7A89C(a2, v26, v27, a5, a6, a7);
  v24 = v20;
  v21 = sub_216B75654(v25, (uint64_t)&v23);
  sub_216B7AA54(a9, v21);
  return sub_216B4B3B4(v25);
}

unsigned __int8 *sub_216B7A820(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t i;
  char v8;
  int v10;
  int v11;

  v2 = a1;
  if (a1 != a2)
  {
    v3 = (int)a2;
    v4 = sub_216B2546C(*a1);
    v10 = v3 - (_DWORD)v2;
    v11 = v4;
    v5 = *(unsigned int *)sub_216B1D574(&v11, &v10);
    v6 = &v2[v5];
    for (i = v5 - 1; i; --i)
    {
      v8 = *++v2;
      if ((v8 & 0xC0) != 0x80)
        return v2;
    }
    return v6;
  }
  return v2;
}

uint64_t sub_216B7A89C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _QWORD v16[2];

  v8 = a2;
  v16[0] = a2;
  v16[1] = a3;
  v10 = a5 - a4;
  v11 = sub_216B1E67C((uint64_t)v16);
  v12 = sub_216B71658(v8, v10, v11, a1);
  v13 = sub_216B1E67C((uint64_t)v16);
  v14 = sub_216B71658(v12, a6 - a5, v13, a1);
  return sub_216B7744C(v12, v14);
}

uint64_t sub_216B7A938(uint64_t a1)
{
  return sub_216B69634(a1, *(_DWORD *)(a1 + 244));
}

uint64_t sub_216B7A940(uint64_t a1)
{
  return sub_216B69634(a1, *(_DWORD *)(a1 + 248));
}

BOOL sub_216B7A948(int a1)
{
  return (word_216C12D0C[a1] & 0x7EC) != 0;
}

uint64_t sub_216B7A964@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = sub_216B7A9CC(a1, (uint64_t)&v5);
  return sub_216B26DE8(a2, v3);
}

uint64_t sub_216B7A9CC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;

  *(_BYTE *)(a2 - 1) = 0;
  v2 = a2 - 1;
  if (a1)
  {
    v3 = a1;
    do
    {
      *(_BYTE *)--v2 = sub_216B403E0(v3 & 0xF);
      v4 = v3 > 0xF;
      v3 >>= 4;
    }
    while (v4);
  }
  else
  {
    *(_BYTE *)(a2 - 2) = 48;
    return a2 - 2;
  }
  return v2;
}

uint64_t sub_216B7AA24(uint64_t a1)
{
  uint64_t v2;

  sub_216B3BADC((uint64_t)&v2, a1, 1);
  return v2;
}

uint64_t sub_216B7AA58(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  sub_216B4CE30(a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t sub_216B7AAA8()
{
  return sub_216B2112C();
}

uint64_t sub_216B7AAB0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 1 && *a2 == *(unsigned __int8 *)sub_216B1E600(a1))
    *(_QWORD *)(a1 + 16) = a3;
  return a1;
}

uint64_t sub_216B7AB18()
{
  return sub_216B2112C();
}

uint64_t sub_216B7AB20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return (v2 - sub_216B1E600(a1)) >> 2;
}

_BYTE *sub_216B7AB54(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int *v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v6 = *(unsigned int **)(a5 + 1296);
  if (v6)
  {
    v7 = 0;
    v8 = (unsigned int **)(a5 + 1296);
    v9 = -1;
    do
    {
      v10 = *v6;
      v11 = sub_216B1E67C((uint64_t)v18);
      v12 = *v8;
      if (v11 <= v10)
      {
        v13 = *v12;
        if (v13 < v9)
        {
          if (sub_216B1E67C((uint64_t)v18) == v13)
          {
            v7 = v8;
            goto LABEL_11;
          }
          v12 = *v8;
          v9 = **v8;
          v7 = v8;
        }
      }
      v6 = (unsigned int *)*((_QWORD *)v12 + 7);
      v8 = (unsigned int **)(v12 + 14);
    }
    while (v6);
    if (!v7)
      goto LABEL_9;
LABEL_11:
    v15 = *v7;
    *v7 = (unsigned int *)*((_QWORD *)*v7 + 7);
    *(_DWORD *)v15 = sub_216B1E67C((uint64_t)v18);
    v15[4] = a4;
  }
  else
  {
LABEL_9:
    v14 = sub_216B1E67C((uint64_t)v18);
    v15 = malloc_type_malloc(24 * v14 + 64, 0x6CD35A13uLL);
    v16 = sub_216B1E67C((uint64_t)v18);
    sub_216B7AC94((uint64_t)v15, v16, a4);
  }
  if (!sub_216B29094((uint64_t)v18))
  {
    sub_216B1E600((uint64_t)v18);
    sub_216B7ACB0(v18);
    sub_216B7ACC0((uint64_t)v15, 0);
    sub_216B7AC98();
  }
  return v15;
}

uint64_t sub_216B7AC98()
{
  uint64_t v0;

  sub_216B7B93C();
  return v0;
}

uint64_t sub_216B7ACB0(_QWORD *a1)
{
  return *a1 + 24 * a1[1];
}

uint64_t sub_216B7ACC0(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = a1 + 64;
  if (a2)
  {
    v3 = a2;
    do
    {
      v4 = sub_216B71174(v2, 1);
      v2 += 24;
      v3 -= v4;
    }
    while (v3);
  }
  return v2;
}

unint64_t sub_216B7AD00(_QWORD *a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  sub_216B4B100(a1 + 4);
  result = sub_216B2BFE4(a1 + 1);
  v5 = result;
  if ((_DWORD)result)
  {
    v6 = 0;
    do
    {
      v7 = (uint64_t *)sub_216B2BF7C(a1 + 1, v6);
      result = sub_216B4B100(v7);
      ++v6;
    }
    while (v5 != v6);
  }
  a1[7] = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(a2 + 1296) = a1;
  return result;
}

uint64_t sub_216B7AD78(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = (void *)sub_216B7ADA0(a1);
  free(v2);
  return v1;
}

uint64_t sub_216B7ADA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = 0;
  if (sub_216B7214C(a1, 1))
  {
    v3 = a1 + 24;
    do
    {
      v2 = (v2 + 1);
      v4 = sub_216B7214C(v3, 1);
      v3 += 24;
    }
    while (v4);
  }
  return v2;
}

BOOL sub_216B7ADF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2;
  result = sub_216B7214C(a2, 1);
  if (result)
  {
    while (1)
    {
      v6 = sub_216B7068C(v4);
      if (v6)
      {
        v7 = v6;
        if (sub_216B5E108(v6))
        {
          v8 = sub_216B7AE74(a3, v7);
          if (sub_216B7AE94(v8))
            break;
        }
      }
      v4 += 24;
      if (!sub_216B7214C(v4, 1))
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_216B7AE74(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B7B880(a1, a2);
  if (result)
    return sub_216B7B8C4(result);
  return result;
}

BOOL sub_216B7AE94(uint64_t a1)
{
  return (*(_WORD *)(a1 + 244) & 0x40) == 0;
}

uint64_t *sub_216B7AEA4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v19;
  uint64_t v20;
  _BYTE v21[16];

  v8 = (uint64_t *)(a1 + 8);
  v9 = sub_216B2BFE4((_QWORD *)(a1 + 8));
  if (v9 < sub_216B4CBC4(a3))
  {
    v10 = sub_216B4CBC4(a3);
    sub_216B7AFE0(v8, v10);
  }
  v11 = (uint64_t *)sub_216B2BF7C(v8, a2);
  if (sub_216B29084(v11))
  {
    v19.n128_u8[0] = 1;
    sub_216B7B03C((uint64_t)v21, (_BYTE *)(a4 + 439), &v19);
    v12 = sub_216B7ACC0(a1, a2);
    v13 = sub_216B7ADA4(v12);
    sub_216B92C84(a4, v12, (v13 + 1), 0, 0);
    do
    {
      v19 = 0uLL;
      v20 = 0;
      sub_216B70D84(&v19);
      sub_216B7B040(v11, &v19);
      v14 = sub_216B2C7A4((uint64_t)v11);
      sub_216B9C594(a4, v14);
      v15 = sub_216B2C7A4((uint64_t)v11);
    }
    while (sub_216B7214C(v15, 1));
    if (sub_216B7B098(a4, v16))
      sub_216B7B0E8(a4, v17);
    sub_216B93838(a4, v17);
    sub_216B7B11C((uint64_t)v21);
  }
  return v11;
}

_QWORD *sub_216B7AFE0(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B2BFE4(a1);
  if (a2 > (unint64_t)result)
    return sub_216B7BA78(a1, a2 - (_QWORD)result);
  if (a2 < (unint64_t)result)
    return (_QWORD *)sub_216B7BB4C(a1, *a1 + 24 * a2);
  return result;
}

uint64_t sub_216B7B040(uint64_t *a1, __n128 *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, (uint64_t)a2))
  {
    result = sub_216B7C004(a1, a2);
  }
  else
  {
    sub_216B4D534((uint64_t)a1, a2);
    result = v4 + 24;
  }
  a1[1] = result;
  return result;
}

BOOL sub_216B7B098(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  return !*(_QWORD *)(a1 + 808)
      && !sub_216B3817C(a1 + 824, a2)
      && !sub_216B3817C(a1 + 800, v3)
      && !sub_216B29084((_QWORD *)(a1 + 848));
}

uint64_t sub_216B7B0E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = sub_216B7B098(a1, a2);
  if ((_DWORD)result)
    return sub_216B93838(a1, v4);
  return result;
}

uint64_t sub_216B7B120@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, _DWORD *a6@<X8>)
{
  __int16 v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  std::string::size_type v26;
  void *v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33[2];
  _BYTE v34[16];
  _BYTE v35[16];
  std::string v36;
  std::string __str;
  unsigned __int8 v38;
  uint64_t v39[2];
  const void *v40[19];
  _BYTE v41[24];

  sub_216B70D84(a6);
  sub_216B75074((uint64_t)a6);
  if (a3)
    v12 = 9;
  else
    v12 = 13;
  sub_216B74800((uint64_t)a6, v12);
  v13 = sub_216B5EE7C(a2);
  if (sub_216B5D8E0(v13))
  {
    sub_216B720D8(a2, a4, 692, (uint64_t)v41);
    sub_216B4B3B4(v41);
  }
  sub_216B295EC(v40);
  sub_216B1E678((int)v39, "\"");
  sub_216B341A4(v40, v39[0], v39[1]);
  v14 = a1;
  if (sub_216B7214C((uint64_t)a1, 1))
  {
    v15 = 1;
    v14 = a1;
    do
    {
      if ((v15 & 1) == 0 && ((sub_216B75974((uint64_t)v14) & 1) != 0 || sub_216B7164C((uint64_t)v14)))
        sub_216B6E098((uint64_t)v40, 32);
      v16 = sub_216B71644((uint64_t)v14);
      if ((sub_216B773E0(v16) & 1) != 0
        || sub_216B71174((uint64_t)v14, 9)
        || sub_216B71174((uint64_t)v14, 10)
        || sub_216B71174((uint64_t)v14, 11)
        || sub_216B71174((uint64_t)v14, 12))
      {
        v38 = 0;
        sub_216B747E8(a2, v14, &v38, &__str);
        if (!v38)
        {
          sub_216B70B04(&__str, 0, &v36);
          v18 = sub_216B29A94((uint64_t)&v36, v17);
          v20 = sub_216B29ABC((uint64_t)&v36, v19);
          sub_216B7B538(v40, v18, v20);
          std::string::~string(&v36);
        }
        std::string::~string(&__str);
      }
      else if (sub_216B71174((uint64_t)v14, 3))
      {
        sub_216B9BBF4(a2);
      }
      else
      {
        v22 = sub_216B1FF14((uint64_t)v40);
        v23 = sub_216B693F8((uint64_t)v14);
        sub_216B294F0(v40, v23 + v22);
        __str.__r_.__value_.__r.__words[0] = 0;
        __str.__r_.__value_.__r.__words[0] = sub_216B1FF44((uint64_t)v40, v22);
        v36.__r_.__value_.__s.__data_[0] = 0;
        v24 = sub_216B7B53C(a2, v14, (uint64_t *)&__str, &v36);
        if (!v36.__r_.__value_.__s.__data_[0])
        {
          v25 = v24;
          v26 = __str.__r_.__value_.__r.__words[0];
          if (v26 != sub_216B1FF44((uint64_t)v40, v22))
          {
            v27 = (void *)sub_216B1FF44((uint64_t)v40, v22);
            memcpy(v27, __str.__r_.__value_.__l.__data_, v25);
          }
          if (v25 != sub_216B693F8((uint64_t)v14))
            sub_216B294F0(v40, v25 + v22);
        }
      }
      v14 += 6;
      v21 = sub_216B7214C((uint64_t)v14, 1);
      v15 = 0;
    }
    while (v21);
  }
  if (*(_BYTE *)sub_216B6D364((uint64_t)v40) == 92)
  {
    v28 = sub_216B1FF14((uint64_t)v40) - 1;
    do
      --v28;
    while (*(_BYTE *)sub_216B1FF44((uint64_t)v40, v28) == 92);
    if (((sub_216B1FF14((uint64_t)v40) + ~v28) & 1) != 0)
    {
      sub_216B7B558(a2, v14 - 6, 843, (uint64_t)v35);
      sub_216B4B3B4(v35);
      sub_216B295C4((uint64_t)v40);
    }
  }
  sub_216B6E098((uint64_t)v40, 34);
  if (a3)
  {
    *(_BYTE *)sub_216B1FF44((uint64_t)v40, 0) = 39;
    v29 = sub_216B1FF14((uint64_t)v40);
    *(_BYTE *)sub_216B1FF44((uint64_t)v40, v29 - 1) = 39;
    if (sub_216B1FF14((uint64_t)v40) == 3)
    {
      if (*(_BYTE *)sub_216B1FF44((uint64_t)v40, 1u) != 39)
        goto LABEL_41;
      goto LABEL_40;
    }
    if (sub_216B1FF14((uint64_t)v40) != 4 || *(_BYTE *)sub_216B1FF44((uint64_t)v40, 1u) != 92)
    {
LABEL_40:
      sub_216B7B558(a2, a1, 648, (uint64_t)v34);
      sub_216B4B3B4(v34);
      sub_216B1E678((int)v33, "' '");
      sub_216B6C7A4(v40, v33[0], v33[1]);
    }
  }
LABEL_41:
  v30 = sub_216B28180((uint64_t)v40);
  sub_216B9BCE4(a2, v30, v31, a6, a4, a5);
  return sub_216B2489C(v40);
}

unint64_t sub_216B7B53C(uint64_t a1, unsigned int *a2, uint64_t *a3, _BYTE *a4)
{
  return sub_216B7102C(a2, a3, *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 24), a4);
}

uint64_t sub_216B7B558@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = sub_216B1E4E0(a2);
  return sub_216B4CD2C(v6, v7, a3, a4);
}

uint64_t sub_216B7B59C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  _BYTE v19[19];

  v10 = (uint64_t *)(a1 + 32);
  if (sub_216B29084((_QWORD *)(a1 + 32)))
  {
    v11 = sub_216B1E4E0((unsigned int *)a1);
    sub_216B7B69C(v10, v11);
    v12 = (void *)sub_216B2BF7C(v10, 0);
    v13 = sub_216B1E4E0((unsigned int *)a1);
    bzero(v12, 24 * v13);
  }
  v14 = sub_216B2BF7C(v10, a2);
  if (sub_216B7214C(v14, 13))
  {
    v15 = (unsigned int *)sub_216B7ACC0(a1, a2);
    sub_216B7B120(v15, a3, 0, a4, a5, v19);
    v16 = sub_216B2BF7C(v10, a2);
    v17 = *(_DWORD *)&v19[15];
    *(_OWORD *)v16 = *(_OWORD *)v19;
    *(_DWORD *)(v16 + 15) = v17;
  }
  return sub_216B2BF7C(v10, a2);
}

_QWORD *sub_216B7B69C(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_216B2BFE4(a1);
  if (a2 > (unint64_t)result)
    return sub_216B7C344(a1, a2 - (_QWORD)result);
  if (a2 < (unint64_t)result)
    return (_QWORD *)sub_216B7C418(a1, *a1 + 24 * a2);
  return result;
}

uint64_t sub_216B7B6F8(uint64_t a1, int a2, char a3)
{
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = a3;
  sub_216B2C030((_QWORD *)(a1 + 8));
  sub_216B2C030((_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_216B7B734(uint64_t a1)
{
  sub_216B4B098(a1 + 32);
  sub_216B7B764(a1 + 8);
  return a1;
}

uint64_t sub_216B7B768(uint64_t a1)
{
  uint64_t v3;

  sub_216B20C64(&v3, a1);
  sub_216B7B7A4(&v3);
  return a1;
}

uint64_t *sub_216B7B7A4(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = (uint64_t *)*a1;
  if (*result)
  {
    sub_216B7B808(result);
    nullsub_1(*a1, v3);
    v5 = sub_216B2C144(*a1, v4);
    v6 = (_QWORD *)*a1;
    v7 = *(_QWORD *)*a1;
    v9 = sub_216B2C14C(v6, v8);
    return (uint64_t *)sub_216B2C140(v5, v7, v9);
  }
  return result;
}

uint64_t sub_216B7B808(uint64_t *a1)
{
  return sub_216B7B810((uint64_t)a1, *a1);
}

uint64_t sub_216B7B810(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; result = sub_216B7B874(v5, v7))
  {
    v5 = sub_216B2C144(v3, a2);
    i -= 24;
    v7 = nullsub_1(i, v6);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_216B7B878(uint64_t a1, uint64_t a2)
{
  return sub_216B4B098(a2);
}

uint64_t sub_216B7B880(uint64_t a1, uint64_t a2)
{
  if (sub_216B5E108(a2))
    return sub_216B941AC(a1, a2);
  else
    return 0;
}

uint64_t sub_216B7B8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[2];

  v3[0] = sub_216B7C9E8(a1);
  v3[1] = v1;
  return sub_216B7B8EC(v3);
}

uint64_t sub_216B7B8EC(uint64_t *a1)
{
  if (sub_216B7B924(a1))
    return 0;
  else
    return sub_216B2037C(*a1);
}

BOOL sub_216B7B924(_QWORD *a1)
{
  return !sub_216B2D76C(a1);
}

uint64_t sub_216B7B944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = (const void *)sub_216B20688(a1, a2);
  v7 = v6;
  v8 = (char *)j_j_nullsub_1(a3);
  v9 = sub_216B7B9D0((int)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B7B9D0(int a1, const void *a2, uint64_t a3, char *__dst)
{
  return sub_216B7B9E0(a2, a3, __dst);
}

uint64_t sub_216B7B9E0(const void *a1, uint64_t a2, char *__dst)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;

  v7 = a2;
  v4 = a2 - (_QWORD)a1;
  sub_216B7BA40(__dst, a1, 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3));
  v6 = &__dst[v4];
  return sub_216B206E0((uint64_t)&v7, (uint64_t)&v6);
}

void *sub_216B7BA40(void *__dst, const void *a2, uint64_t a3)
{
  if (a3)
    memmove(__dst, a2, 24 * a3 - 5);
  return __dst;
}

_QWORD *sub_216B7BA78(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[5];

  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - a1[1]) >> 3) >= a2)
    return sub_216B7BB90((uint64_t)a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B2BFE4(a1);
  v7 = sub_216B2C364(a1, v6 + a2);
  v8 = sub_216B2BFE4(a1);
  sub_216B2C3DC(v10, v7, v8, v5);
  sub_216B7BC0C((uint64_t)v10, a2);
  sub_216B7BC84(a1, v10);
  return (_QWORD *)sub_216B7BD70(v10);
}

uint64_t sub_216B7BB4C(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_216B2BFE4(a1);
  sub_216B7B810((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

_QWORD *sub_216B7BB90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_216B4D650(&v10, a1, a2);
  v4 = v11;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = sub_216B2C144(a1, v3);
    v8 = nullsub_1(v4, v7);
    sub_216B7BD74(v6, v8);
    v4 += 24;
    v11 = v4;
  }
  return sub_216B2C330(&v10);
}

uint64_t sub_216B7BC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B7BD80(&v9, a1 + 16, a2);
  v3 = v9;
  v4 = v10;
  while (v3 != v4)
  {
    v5 = sub_216B2C5E4(a1);
    v7 = nullsub_1(v9, v6);
    sub_216B7BD74(v5, v7);
    v4 = v10;
    v3 = v9 + 24;
    v9 += 24;
  }
  return sub_216B701B0((uint64_t)&v9);
}

uint64_t sub_216B7BC84(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216B7BDA0(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B2BFE4(a1);
  return nullsub_1(a1, v11);
}

_QWORD *sub_216B7BD78(uint64_t a1, _QWORD *a2)
{
  return sub_216B2C030(a2);
}

_QWORD *sub_216B7BD84(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  *result = *a2;
  result[1] = *a2 + 24 * a3;
  result[2] = a2;
  return result;
}

uint64_t sub_216B7BDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216B2C7A0((uint64_t)&v16);
    v9 = sub_216B2C7A4((uint64_t)v18);
    sub_216B7BE68(a1, v8, v9);
    sub_216B2C7B0((uint64_t)v18);
    sub_216B2C7B0((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216B7BE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B7BE78(a2, a3);
}

_QWORD *sub_216B7BE7C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  v11 = 0;
  v5 = sub_216B2C144((uint64_t)a2, (uint64_t)a2);
  sub_216B76FE8(v4, &v11, v5);
  *a1 = *a2;
  a1[1] = a2[1];
  v7 = *(_QWORD *)sub_216B2C144((uint64_t)a2, v6);
  *(_QWORD *)sub_216B2C144((uint64_t)a1, v8) = v7;
  *(_QWORD *)sub_216B2C144((uint64_t)a2, v9) = 0;
  *a2 = 0;
  a2[1] = 0;
  return a1;
}

uint64_t *sub_216B7BF0C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_216B7BF68((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B2C868(a1, v4);
    sub_216B2C140(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B7BF68(uint64_t a1)
{
  return sub_216B7BF70(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B7BF74(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 24;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216B7B874(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B7BFDC(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = *a2;
  *a2 = *a3;
  return result;
}

uint64_t sub_216B7BFF4(uint64_t result)
{
  **(_BYTE **)result = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_216B7C004(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, (uint64_t)a2);
  v5 = sub_216B2BFE4(a1);
  v6 = sub_216B2C364(a1, v5 + 1);
  v7 = sub_216B2BFE4(a1);
  sub_216B2C3DC(v12, v6, v7, v4);
  v9 = (__n128 *)nullsub_1(v13, v8);
  sub_216B4D654(v4, v9, a2);
  v13 += 24;
  sub_216B7C0B0(a1, v12);
  v10 = a1[1];
  sub_216B4D778(v12);
  return v10;
}

uint64_t sub_216B7C0B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  nullsub_1(a1, a2);
  sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(&v14, a1[1]);
  sub_216B2C730(&v13, *a1);
  sub_216B2C730(&v12, a2[1]);
  v15[0] = sub_216B7C19C();
  v15[1] = v5;
  a2[1] = sub_216B1E67C((uint64_t)v15);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v7 = (uint64_t *)sub_216B2C144((uint64_t)a1, v6);
  v9 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v8);
  sub_216B20BF4(v7, v9);
  *a2 = a2[1];
  v10 = sub_216B2BFE4(a1);
  return nullsub_1(a1, v10);
}

uint64_t sub_216B7C19C()
{
  return sub_216B7C1B8();
}

uint64_t sub_216B7C1B8()
{
  _QWORD v1[3];

  sub_216B7C1DC(v1);
  return v1[2];
}

uint64_t sub_216B7C1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[4];

  sub_216B2EA78(a1, a2, a3, a4, (uint64_t)v24);
  v12 = v24[0];
  v13 = v24[1];
  v14 = v24[2];
  v15 = v24[3];
  v16 = j_nullsub_1(a5, a6);
  sub_216B7C2B0(v12, v13, v14, v15, v16, v17, (uint64_t)v23);
  v22[0] = sub_216B3FBC0(a1, a2, v23[0], v23[1]);
  v22[1] = v18;
  v21[0] = sub_216B2EB64(a5, a6, v23[2]);
  v21[1] = v19;
  return sub_216B26D04((uint64_t)v22, (uint64_t)v21, a7);
}

uint64_t sub_216B7C2B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a5;
  v13[1] = a6;
  while (sub_216B2C76C((uint64_t)v15, (uint64_t)v14))
  {
    v9 = sub_216B4D924((uint64_t)v15, v8);
    v10 = sub_216B2C7A4((uint64_t)v13);
    v11 = *(_DWORD *)(v9 + 15);
    *(_OWORD *)v10 = *(_OWORD *)v9;
    *(_DWORD *)(v10 + 15) = v11;
    sub_216B2C7B0((uint64_t)v15);
    sub_216B2C7B0((uint64_t)v13);
  }
  return sub_216B26D04((uint64_t)v15, (uint64_t)v13, a7);
}

_QWORD *sub_216B7C344(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[5];

  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - a1[1]) >> 3) >= a2)
    return sub_216B7C45C((uint64_t)a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  v6 = sub_216B2BFE4(a1);
  v7 = sub_216B2C364(a1, v6 + a2);
  v8 = sub_216B2BFE4(a1);
  sub_216B2C3DC(v10, v7, v8, v5);
  sub_216B7C4D8((uint64_t)v10, a2);
  sub_216B7C0B0(a1, v10);
  return (_QWORD *)sub_216B4D778(v10);
}

uint64_t sub_216B7C418(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_216B2BFE4(a1);
  sub_216B4DF10((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

_QWORD *sub_216B7C45C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_216B4D650(&v10, a1, a2);
  v4 = v11;
  v5 = v12;
  while (v4 != v5)
  {
    v6 = sub_216B2C144(a1, v3);
    v8 = nullsub_1(v4, v7);
    sub_216B7C550(v6, v8);
    v4 += 24;
    v11 = v4;
  }
  return sub_216B2C330(&v10);
}

uint64_t sub_216B7C4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B7BD80(&v9, a1 + 16, a2);
  v3 = v9;
  v4 = v10;
  while (v3 != v4)
  {
    v5 = sub_216B2C5E4(a1);
    v7 = nullsub_1(v9, v6);
    sub_216B7C550(v5, v7);
    v4 = v10;
    v3 = v9 + 24;
    v9 += 24;
  }
  return sub_216B701B0((uint64_t)&v9);
}

uint64_t sub_216B7C554(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_216B70D84(a2);
}

uint64_t sub_216B7C564(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  sub_216B4AED0((_DWORD *)(a1 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_216B61780(a1 + 24);
  *(_WORD *)(a1 + 244) &= 0xF000u;
  return a1;
}

uint64_t sub_216B7C5A8(uint64_t a1, int a2)
{
  return sub_216B7C564(a1, a2);
}

uint64_t sub_216B7C5B0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  unint64_t v9;

  *(_WORD *)(a1 + 244) |= 1u;
  v4 = a1 + 24;
  if (sub_216B29084((_QWORD *)(a1 + 24)))
  {
    result = 0;
    *(_DWORD *)(a1 + 240) = 0;
  }
  else
  {
    v6 = (unsigned int *)sub_216B262E0(v4);
    v7 = (unsigned int *)sub_216B3B09C(v4);
    LODWORD(v6) = sub_216B1E4E0(v6);
    v8 = sub_216B1E4E0(v7);
    v9 = (unint64_t)sub_216B61470(a2, (int)v6) >> 32;
    *(_DWORD *)(a1 + 240) = ((unint64_t)sub_216B61470(a2, v8) >> 32) - v9;
    result = *(_DWORD *)(a1 + 240) + sub_216B693F8((uint64_t)v7);
    *(_DWORD *)(a1 + 240) = result;
  }
  return result;
}

uint64_t sub_216B7C674(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  std::string v32;
  std::string v33;

  v8 = a1 + 24;
  v9 = sub_216B60724(a1 + 24);
  if (v9 == sub_216B60724(a2 + 24))
  {
    v10 = sub_216B4CBC4(a1);
    if (v10 == sub_216B4CBC4(a2))
    {
      v11 = sub_216B7C920(a1);
      if (v11 == sub_216B7C920(a2))
      {
        v12 = sub_216B7C92C(a1);
        if (v12 == sub_216B7C92C(a2))
        {
          v13 = sub_216B7C938(a1);
          if (v13 == sub_216B7C938(a2))
          {
            if ((a4 & 1) == 0)
            {
              v28 = (_QWORD *)sub_216B1E67C(a1);
              v29 = (_QWORD *)sub_216B1E67C(a2);
              v30 = sub_216B7C944(a1);
              while (v28 != (_QWORD *)v30)
              {
                if (*v28 != *v29)
                  return 0;
                ++v28;
                ++v29;
              }
            }
            v31 = sub_216B60724(v8);
            if (!v31)
              return 1;
            v15 = 0;
            while (1)
            {
              v16 = (unsigned int *)sub_216B60770(v8, v15);
              v17 = (unsigned int *)sub_216B60770(a2 + 24, v15);
              v18 = sub_216B71644((uint64_t)v16);
              if (v18 != sub_216B71644((uint64_t)v17))
                break;
              if (v15)
              {
                v19 = sub_216B7164C((uint64_t)v16);
                if (v19 != sub_216B7164C((uint64_t)v17))
                  break;
                v20 = sub_216B75974((uint64_t)v16);
                if (v20 != sub_216B75974((uint64_t)v17))
                  break;
              }
              if (sub_216B7068C((uint64_t)v16) || sub_216B7068C((uint64_t)v17))
              {
                v21 = sub_216B7068C((uint64_t)v16);
                v22 = sub_216B7068C((uint64_t)v17);
                if (v21 == v22 || !a4)
                {
                  if (v21 != v22)
                    return 0;
                }
                else
                {
                  v23 = sub_216B7068C((uint64_t)v16);
                  v24 = sub_216B7C954(a1, v23);
                  if (v24 == -1)
                    return 0;
                  v25 = v24;
                  v26 = sub_216B7068C((uint64_t)v17);
                  if (v25 != sub_216B7C954(a2, v26))
                    return 0;
                }
              }
              else
              {
                sub_216B747E8(a3, v16, 0, &v33);
                sub_216B747E8(a3, v17, 0, &v32);
                v27 = sub_216B7C9D0((uint64_t)&v33, (uint64_t)&v32);
                std::string::~string(&v32);
                std::string::~string(&v33);
                if ((v27 & 1) != 0)
                  return 0;
              }
              ++v15;
              result = 1;
              if (v31 == v15)
                return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_216B7C920(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 1) & 1;
}

uint64_t sub_216B7C92C(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 2) & 1;
}

uint64_t sub_216B7C938(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 3) & 1;
}

uint64_t sub_216B7C944(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 16);
}

unint64_t sub_216B7C954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_216B1E67C(a1);
  v5 = sub_216B7C944(a1);
  if (v4 == v5)
    return 0xFFFFFFFFLL;
  v6 = -v4;
  while (*(_QWORD *)v4 != a2)
  {
    v4 += 8;
    v6 -= 8;
    if (v4 == v5)
      return 0xFFFFFFFFLL;
  }
  return (unint64_t)(-v6 - sub_216B1E67C(a1)) >> 3;
}

uint64_t sub_216B7C9D0(uint64_t a1, uint64_t a2)
{
  return sub_216B4F638(a1, a2) ^ 1;
}

uint64_t sub_216B7C9E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  _BYTE v13[2];
  int v14;
  uint64_t v15;

  sub_216B4AED0(&v14);
  sub_216B7CB08((uint64_t)v13);
  if (a1)
  {
    while (1)
    {
      v2 = sub_216B7CB0C(a1);
      if (v2)
        break;
      v3 = sub_216B7CB4C(a1);
      if (v3)
      {
        v14 = sub_216B4D100(v3);
      }
      else
      {
        v4 = sub_216B3DB48(a1);
        if ((sub_216B6B06C((uint64_t)v13) & 1) == 0)
        {
          v12 = sub_216B7CB84(v4);
          sub_216B7CB90(v13, &v12);
        }
      }
      a1 = sub_216B1E600(a1);
      if (!a1)
        goto LABEL_8;
    }
    v9 = v2;
    v5 = v14;
    if (sub_216B6B06C((uint64_t)v13))
      v7 = *(_BYTE *)j_nullsub_1(v13, v10) != 0;
    else
      v7 = 1;
    v8 = v9;
  }
  else
  {
LABEL_8:
    v5 = v14;
    if (sub_216B6B06C((uint64_t)v13))
      v7 = *(_BYTE *)j_nullsub_1(v13, v6) != 0;
    else
      v7 = 1;
    v8 = 0;
  }
  sub_216B7CB44((uint64_t)&v15, v8, v5, v7);
  sub_216B69DF0(v13);
  return v15;
}

uint64_t sub_216B7CB0C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B7CC80(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B7CB44(uint64_t a1, uint64_t a2, int a3, char a4)
{
  return sub_216B7CC48(a1, a2, a3, a4);
}

uint64_t sub_216B7CB4C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  if (sub_216B7CCE0(&v2))
    return sub_216B3DB48(v2);
  else
    return 0;
}

uint64_t sub_216B7CB84(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 12) >> 4) & 1;
}

_BYTE *sub_216B7CB90(_BYTE *a1, char *a2)
{
  char v3;

  v3 = *a2;
  if (a1[1])
  {
    *(_BYTE *)j_nullsub_1(a1, a2) = v3;
  }
  else
  {
    *a1 = v3;
    a1[1] = 1;
  }
  return a1;
}

BOOL sub_216B7CBDC(uint64_t a1)
{
  return sub_216B27BAC((_DWORD *)(a1 + 8));
}

uint64_t sub_216B7CBE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  if (sub_216B7B924(a1) || !sub_216B1E600(*a1))
  {
    sub_216B7CBE4((uint64_t)&v4);
    return v4;
  }
  else
  {
    v2 = sub_216B1E600(*a1);
    return sub_216B7C9E8(v2);
  }
}

uint64_t sub_216B7CC3C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) & 3;
}

uint64_t sub_216B7CC48(uint64_t result, uint64_t a2, int a3, char a4)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 12) = a4;
  return result;
}

uint64_t sub_216B7CC58(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  sub_216B4AED0((_DWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_216B7CC84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B7CCAC(&v3);
}

uint64_t sub_216B7CCAC(_QWORD *a1)
{
  return sub_216B7CCB4(*a1);
}

BOOL sub_216B7CCBC(uint64_t a1)
{
  return sub_216B7CC3C(a1) == 0;
}

uint64_t sub_216B7CCD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = 0;
  return result;
}

uint64_t sub_216B7CCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B3DAF0(a1, a2);
  return sub_216B7CD0C(&v3);
}

uint64_t sub_216B7CD0C(_QWORD *a1)
{
  return sub_216B7CD14(*a1);
}

BOOL sub_216B7CD1C(uint64_t a1)
{
  return sub_216B7CC3C(a1) == 1;
}

uint64_t sub_216B7CD3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t v28[2];
  uint64_t v29[2];
  std::string v30;
  uint64_t v31[2];
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];

  v8 = sub_216B5F868(a2, 0);
  sub_216B26CA0(v34, v8);
  v9 = sub_216B7CF50(a1, v34[0], v34[1], a3);
  if (v9)
  {
    v10 = v9;
    v11 = sub_216B5EAC4(a2);
    if (v11 == 1)
      return v10;
    v17 = 1;
    while (1)
    {
      v18 = sub_216B5F868(a2, v17);
      sub_216B26CA0(v29, v18);
      result = sub_216B7CFC0(a1, v29[0], v29[1], v10);
      if (!result && a4 != 0)
        break;
      if (result)
      {
        ++v17;
        v10 = result;
        if (v11 != v17)
          continue;
      }
      return result;
    }
    v20 = *(_QWORD *)(a1 + 8);
    v21 = sub_216B5F868(a2, v17);
    sub_216B4CD2C(v20, *(unsigned int *)(v21 + 24), 681, (uint64_t)v33);
    v22 = sub_216B5F868(a2, v17);
    sub_216B26CA0(v28, v22);
    v23 = sub_216B4B340(v33, v28[0], v28[1]);
    sub_216B5ECE8(v10, &v30);
    sub_216B26CA0(v27, &v30);
    v24 = sub_216B4B340(v23, v27[0], v27[1]);
    LODWORD(v23) = *(_DWORD *)(sub_216B5F868(a2, 0) + 24);
    v25 = sub_216B5F868(a2, v17 - 1);
    sub_216B746DC(&v26, (int)v23, *(_DWORD *)(v25 + 24));
    sub_216B7A280(v24, &v26);
    goto LABEL_15;
  }
  if (a4)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = sub_216B5F868(a2, 0);
    sub_216B4CD2C(v13, *(unsigned int *)(v14 + 24), 682, (uint64_t)v33);
    v15 = sub_216B5F868(a2, 0);
    sub_216B26CA0(v32, v15);
    v16 = sub_216B4B340(v33, v32[0], v32[1]);
    sub_216B5ECE8(a3, &v30);
    sub_216B26CA0(v31, &v30);
    sub_216B4B340(v16, v31[0], v31[1]);
LABEL_15:
    std::string::~string(&v30);
    sub_216B4B3B4(v33);
  }
  return 0;
}

uint64_t sub_216B7CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;

  if (!a4)
    return sub_216B80B30(a1, a2, a3);
  v7 = a4;
  while (1)
  {
    result = sub_216B7CFC0(a1, a2, a3, v7);
    if (result)
      break;
    v7 = *(_QWORD *)(v7 + 32);
    if (!v7)
      return sub_216B80B30(a1, a2, a3);
  }
  return result;
}

uint64_t sub_216B7CFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    return sub_216B5F188(a4, a2, a3);
  else
    return sub_216B80B30(a1, a2, a3);
}

_QWORD *sub_216B7CFD0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = 0;
  sub_216B5E6A8(a1 + 6);
  a1[36] = 0;
  a1[37] = 0;
  sub_216B25034(a1 + 38);
  sub_216B3D750(a1 + 41);
  sub_216B7D060(a1 + 45, 0);
  sub_216B5F9A0(a1 + 48, 0);
  sub_216B7D064(a1 + 51, 0);
  sub_216B5F9A0(a1 + 54, 0);
  sub_216B7D060(a1 + 57, 0);
  sub_216B5F9A0(a1 + 60, 0);
  return a1;
}

uint64_t sub_216B7D06C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  _QWORD *v7;

  v2 = a1 + 328;
  v7 = (_QWORD *)sub_216B3C960(a1 + 328);
  v6 = sub_216B3C994(v2);
  while (sub_216B3760C(&v7, &v6))
  {
    v3 = sub_216B3C9C8((uint64_t)&v7);
    if (*(_QWORD *)sub_216B3DBD0(v3))
    {
      v4 = (void *)sub_216B5EAA0();
      j__free(v4);
    }
    sub_216B3CA9C(&v7);
  }
  sub_216B5F5B0(a1 + 480);
  sub_216B7D13C(a1 + 456);
  sub_216B5F5B0(a1 + 432);
  sub_216B7D140(a1 + 408);
  sub_216B5F5B0(a1 + 384);
  sub_216B7D144(a1 + 360);
  sub_216B3D4A4(v2);
  std::string::~string((std::string *)(a1 + 304));
  sub_216B77314(a1 + 48);
  return a1;
}

uint64_t sub_216B7D14C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_216B7D154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[2];
  _BYTE v11[16];
  _BYTE v12[16];
  uint64_t v13[2];
  uint64_t v14;

  v14 = a2;
  v5 = a1 + 360;
  sub_216B7D224(a1 + 360, &v14, (uint64_t)v13);
  sub_216B7D294(v5, (uint64_t)v11);
  sub_216B4F784(v12, v11);
  if (!sub_216B61E30(v13, (uint64_t)v12))
    return sub_216B4F784(a3, v13);
  if (sub_216B5EE7C(v14) != *(_QWORD *)(a1 + 40))
    return sub_216B4F784(a3, v13);
  v6 = (char *)sub_216B1E600(v14);
  sub_216B1E678((int)v10, v6);
  v7 = sub_216B2930C(v10[0], v10[1]);
  if (!sub_216B7D2DC(v7, v8))
    return sub_216B4F784(a3, v13);
  sub_216B6EEC8(*(_QWORD *)(a1 + 32));
  return sub_216B7D224(v5, &v14, a3);
}

uint64_t sub_216B7D224@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216B85024(a1, a2, &v8))
    return sub_216B7D294(a1, a3);
  v5 = v8;
  v6 = sub_216B854C8(a1);
  return sub_216B85A8C(a3, v5, v6, 1);
}

uint64_t sub_216B7D294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B854C8(a1);
  v5 = sub_216B854C8(a1);
  return sub_216B85A8C(a2, v4, v5, 1);
}

uint64_t sub_216B7D2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  _QWORD v24[3];

  sub_216B32854(v24, a1, a2);
  v23 = 1;
  v2 = sub_216B32858((uint64_t)v24, "float.h", (uint64_t)&v23);
  v22 = 1;
  v3 = sub_216B32AEC(v2, "iso646.h", (uint64_t)&v22);
  v21 = 1;
  v4 = sub_216B32AEC(v3, "limits.h", (uint64_t)&v21);
  v20 = 1;
  v5 = sub_216B328C8(v4, (uint64_t)"stdalign.h", (uint64_t)&v20);
  v19 = 1;
  v6 = sub_216B32AEC(v5, "stdarg.h", (uint64_t)&v19);
  v18 = 1;
  v7 = sub_216B345E4(v6, (uint64_t)"stdBOOL.h", (uint64_t)&v18);
  v17 = 1;
  v8 = sub_216B32AEC(v7, "stddef.h", (uint64_t)&v17);
  v16 = 1;
  v9 = sub_216B32AEC(v8, "stdint.h", (uint64_t)&v16);
  v15 = 1;
  v10 = sub_216B32AEC(v9, "tgmath.h", (uint64_t)&v15);
  v14 = 1;
  v11 = sub_216B32AEC(v10, "unwind.h", (uint64_t)&v14);
  v13 = 0;
  return sub_216B4AA54(v11, &v13);
}

uint64_t sub_216B7D3E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  _BYTE v12[16];
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = sub_216B5EE7C(a2);
  v5 = sub_216B2037C(*a1);
  v14 = sub_216B50944(v5, v16);
  v15 = v6;
  while (1)
  {
    sub_216B61DC0((uint64_t)(a1 + 48), &v16, (uint64_t)v13);
    sub_216B61AA0((uint64_t)(a1 + 48), (uint64_t)v11);
    sub_216B4F784(v12, v11);
    if (sub_216B50AF4(v13, (uint64_t)v12))
      break;
    sub_216B268AC(a3, &v16);
    v14 = sub_216B290FC(v14, v15);
    v15 = v7;
    if (!sub_216B29094((uint64_t)&v14))
    {
      v8 = sub_216B2037C(*a1);
      v16 = (uint64_t)sub_216B4FCC4(v8, v14, v15, 1);
      if (v16)
        continue;
    }
    sub_216B6DE08((uint64_t)&v17);
    return v17;
  }
  v9 = sub_216B1E600((uint64_t)v13);
  sub_216B7D4E0(&v17, *(_QWORD *)(v9 + 8), 0);
  return v17;
}

uint64_t sub_216B7D4E4(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  std::string v39;
  _QWORD v40[2];
  uint64_t v41[2];
  uint64_t v42[2];

  v12 = sub_216B7D7A8(a2);
  result = sub_216B7D7A8(a1[37]);
  if (v12 == result)
  {
    v35 = a4;
    v36 = a5;
    if (a2)
      sub_216B7D7B4((uint64_t)a1, a2, 0);
    sub_216B7D154((uint64_t)a1, a6, (uint64_t)v42);
    sub_216B7D294((uint64_t)(a1 + 45), (uint64_t)v41);
    sub_216B4F784(&v39, v41);
    if (sub_216B50AF4(v42, (uint64_t)&v39))
    {
      v14 = sub_216B1E600((uint64_t)v42) + 8;
      v15 = (_DWORD *)sub_216B1E600(v14);
      v16 = sub_216B1E67C(v14);
      if (v15 != (_DWORD *)v16)
      {
        v17 = (_DWORD *)v16;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        do
        {
          result = sub_216B7D878(v15);
          if ((_DWORD)result == 2)
          {
            v18 = 1;
          }
          else
          {
            result = sub_216B6EFA4(v15, v21);
            if (result == a2)
              return result;
            v22 = sub_216B7D878(v15);
            v24 = sub_216B6EFA4(v15, v23);
            result = sub_216B7D87C(a2, v22, v24);
            if ((_DWORD)result)
            {
              result = sub_216B6EFA4(v15, v25);
              v19 = result;
            }
            else
            {
              if (!a2)
                return result;
              if ((*(_BYTE *)(a1[2] + 6) & 0x20) == 0)
                return result;
              v26 = sub_216B6EFA4(v15, v25);
              result = sub_216B7D8B8(a2, v26);
              if ((result & 1) != 0)
                return result;
              result = sub_216B6EFA4(v15, v27);
              v20 = result;
            }
          }
          v15 += 2;
        }
        while (v15 != v17);
        if (v19)
        {
          sub_216B4CD2C(a1[1], a3, 772, (uint64_t)&v39);
          sub_216B4B340((uint64_t *)&v39, v35, v36);
          v28 = &v39;
          return sub_216B4B3B4(v28);
        }
        if (v20)
        {
          sub_216B4CD2C(a1[1], a3, 771, (uint64_t)v41);
          sub_216B5ECE8(a2, &v39);
          sub_216B26CA0(v40, &v39);
          v29 = v40[0];
          v30 = v40[1];
          goto LABEL_31;
        }
        if ((v18 & 1) != 0)
          return result;
      }
    }
    result = sub_216B7D918(a1, a6);
    if ((result & 1) != 0)
      return result;
    if ((*(_BYTE *)(a1[2] + 6) & 0x80) == 0)
    {
      if (!a2)
        return result;
      if ((*(_WORD *)(sub_216B7D9A0(a2) + 528) & 8) != 0)
        v31 = 882;
      else
        v31 = 883;
      sub_216B4CD2C(a1[1], a3, v31, (uint64_t)v41);
      sub_216B5ECE8(a2, &v39);
      sub_216B26CA0(v37, &v39);
      v32 = v37[0];
      v33 = v37[1];
      v34 = v41;
      goto LABEL_32;
    }
    sub_216B4CD2C(a1[1], a3, 771, (uint64_t)v41);
    sub_216B5ECE8(a2, &v39);
    sub_216B26CA0(v38, &v39);
    v29 = v38[0];
    v30 = v38[1];
LABEL_31:
    v34 = sub_216B4B340(v41, v29, v30);
    v32 = v35;
    v33 = v36;
LABEL_32:
    sub_216B4B340(v34, v32, v33);
    std::string::~string(&v39);
    v28 = (std::string *)v41;
    return sub_216B4B3B4(v28);
  }
  return result;
}

uint64_t sub_216B7D7A8(uint64_t result)
{
  if (result)
    return sub_216B7D9A0(result);
  return result;
}

uint64_t sub_216B7D7B4(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  int v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (_QWORD *)(a2 + 896);
  v7 = sub_216B5F2C4(a2 + 896);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v12 = 0;
      v10 = sub_216B81BA4((uint64_t)v6, v8);
      v12 = sub_216B7CD3C(a1, v10, a2, a3);
      if (v12)
        sub_216B268AC(a2 + 856, &v12);
      else
        v9 = 1;
      ++v8;
    }
    while (v7 != v8);
  }
  else
  {
    v9 = 0;
  }
  sub_216B81BCC(v6);
  return v9 & 1;
}

BOOL sub_216B7D87C(uint64_t a1, int a2, uint64_t a3)
{
  return a2 == 1 && sub_216B7D9A0(a3) != a1;
}

BOOL sub_216B7D8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v2 = a1 + 856;
  v3 = sub_216B1E600(a1 + 856);
  v4 = sub_216B1E67C(v2);
  v5 = sub_216B84C60(v3, v4, &v7);
  return v5 != sub_216B1E67C(v2);
}

BOOL sub_216B7D918(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;
  _BYTE v8[40];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_216B4C3E4(v8);
  v7 = sub_216B7D3E8(a1, a2, (uint64_t)v8);
  v5 = sub_216B7DE18(&v7, v4);
  sub_216B1FF6C(v8);
  return v5;
}

const void *sub_216B7D9A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  char *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v50[2];
  uint64_t v51;
  uint64_t v52[2];
  const void *v53[7];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v57 = a2;
  sub_216B7D154((uint64_t)a1, a2, (uint64_t)v56);
  v6 = (uint64_t)(a1 + 45);
  sub_216B7D294((uint64_t)(a1 + 45), (uint64_t)v59);
  sub_216B4F784(v53, v59);
  if (!sub_216B50AF4(v56, (uint64_t)v53))
  {
    sub_216B4C3E4(v59);
    v55 = sub_216B7D3E8(a1, a2, (uint64_t)v59);
    if (!sub_216B7DE18(&v55, v19))
      goto LABEL_36;
    v21 = sub_216B6EFA4(&v55, v20);
    v54 = v21;
    v22 = v21;
    do
    {
      v23 = v22;
      if (sub_216B5EE40(v22))
        break;
      v22 = *(_QWORD *)(v23 + 32);
    }
    while (v22);
    if ((*(_WORD *)(v23 + 528) & 0x100) != 0)
    {
      v28 = sub_216B7DE34((_DWORD **)a1, v23);
      v29 = *(unsigned __int16 *)(v23 + 528);
      v30 = sub_216B26878((uint64_t)v59);
      v31 = (v29 >> 9) & 1;
      if (v30)
      {
        v32 = v30 - 1;
        do
        {
          sub_216B29078(v53);
          v33 = (uint64_t *)sub_216B4FBDC((uint64_t)v59, v32);
          v34 = (char *)sub_216B1E600(*v33);
          sub_216B1E678((int)v52, v34);
          v35 = (const void *)sub_216B2933C(v52[0], v52[1]);
          sub_216B7DE80((uint64_t)v35, v36, v53);
          v54 = sub_216B804D4(a1, v35, v37, v54, 0, v31);
          *sub_216B61D98((uint64_t)(a1 + 54), &v54) = v28;
          v38 = v54;
          *(_WORD *)(v54 + 528) |= 0x80u;
          v39 = (uint64_t *)sub_216B4FBDC((uint64_t)v59, v32);
          *sub_216B61D98((uint64_t)(a1 + 48), v39) = v38;
          if ((*(_WORD *)(v23 + 528) & 0x400) != 0 && sub_216B29084((_QWORD *)(v54 + 584)))
          {
            v40 = v54 + 584;
            sub_216B7CD38(&v51, 0, 1);
            sub_216B268AC(v40, &v51);
          }
          sub_216B2489C(v53);
          --v32;
        }
        while (v32 != -1);
      }
      sub_216B29078(v53);
      v41 = (char *)sub_216B1E600(a2);
      sub_216B1E678((int)v50, v41);
      v42 = (const void *)sub_216B2933C(v50[0], v50[1]);
      sub_216B7DE80((uint64_t)v42, v43, v53);
      v54 = sub_216B804D4(a1, v42, v44, v54, 0, v31);
      *sub_216B61D98((uint64_t)(a1 + 54), &v54) = v28;
      v45 = v54;
      *(_WORD *)(v54 + 528) |= 0x80u;
      sub_216B80630(v45, a2);
      if ((*(_WORD *)(v23 + 528) & 0x400) != 0 && sub_216B29084((_QWORD *)(v54 + 584)))
      {
        v46 = v54 + 584;
        sub_216B7CD38(&v51, 0, 1);
        sub_216B268AC(v46, &v51);
      }
      sub_216B2489C(v53);
    }
    else
    {
      v24 = sub_216B26878((uint64_t)v59);
      if (v24)
      {
        v25 = 0;
        v26 = (uint64_t)(a1 + 48);
        do
        {
          v27 = (uint64_t *)sub_216B4FBDC((uint64_t)v59, v25);
          *sub_216B61D98(v26, v27) = v21;
          ++v25;
        }
        while (v24 != v25);
      }
    }
    v47 = sub_216B80658(v6, &v57);
    sub_216B7D4E0(v53, v54, 0);
    sub_216B268AC((uint64_t)v47, v53);
    if ((sub_216B5E8F8(v54) & 1) != 0)
    {
      v48 = sub_216B80658(v6, &v57);
      v58 = *(_QWORD *)sub_216B5F148((uint64_t)v48);
    }
    else
    {
LABEL_36:
      sub_216B6DE08((uint64_t)&v58);
    }
    sub_216B1FF6C(v59);
    return (const void *)v58;
  }
  v7 = v53;
  sub_216B6DE08((uint64_t)v53);
  v8 = sub_216B1E600((uint64_t)v56);
  v9 = (const void **)sub_216B1E600(v8 + 8);
  v10 = sub_216B1E600((uint64_t)v56);
  v11 = sub_216B1E67C(v10 + 8);
  if (v9 == (const void **)v11)
    return *v7;
  v12 = (const void **)v11;
  while (1)
  {
    if (sub_216B7D878(v9) == 2)
      goto LABEL_13;
    v14 = sub_216B6EFA4(v9, v13);
    if (!sub_216B5E8F8(v14))
      goto LABEL_13;
    if (sub_216B6EFA4(v9, v15) == a3)
      break;
    if (a3 && (*(_BYTE *)(a1[2] + 6) & 0x20) != 0 && (v17 = sub_216B6EFA4(v9, v16), !sub_216B7D8B8(a3, v17)))
    {
LABEL_13:
      if (++v9 == v12)
      {
        v7 = v53;
        return *v7;
      }
    }
    else
    {
      v18 = v9 + 1;
      v53[0] = *v9;
      v7 = v53;
      if (!sub_216B7D878(v9))
        return *v7;
      ++v9;
      if (v18 == v12)
        return *v7;
    }
  }
  v7 = v9;
  return *v7;
}

BOOL sub_216B7DE18(_QWORD *a1, uint64_t a2)
{
  return sub_216B5F264(a1, a2) != 0;
}

unint64_t sub_216B7DE34(_DWORD **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;

  v5 = a2;
  if ((*(_WORD *)(a2 + 528) & 0x80) == 0)
    return sub_216B81AF0(a1, a2);
  v4[0] = sub_216B80A78((uint64_t)(a1 + 54), &v5);
  v4[1] = v3;
  return *(_QWORD *)(sub_216B1E600((uint64_t)v4) + 8);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216B7DE80(uint64_t a1, uint64_t a2, const void **a3)
{
  unsigned __int8 v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  char *v483;
  char *v484;
  unsigned __int8 v485;
  char v486;
  char v487;
  char v488;
  char v489;
  char v490;
  char v491;
  char v492;
  char v493;
  char v494;
  char v495;
  char v496;
  char v497;
  char v498;
  char v499;
  char v500;
  char v501;
  char v502;
  char v503;
  char v504;
  char v505;
  char v506;
  char v507;
  char v508;
  char v509;
  char v510;
  char v511;
  char v512;
  char v513;
  char v514;
  char v515;
  char v516;
  char v517;
  char v518;
  char v519;
  char v520;
  char v521;
  char v522;
  char v523;
  char v524;
  char v525;
  char v526;
  char v527;
  char v528;
  char v529;
  char v530;
  char v531;
  char v532;
  char v533;
  char v534;
  char v535;
  char v536;
  char v537;
  char v538;
  char v539;
  char v540;
  char v541;
  char v542;
  char v543;
  char v544;
  char v545;
  char v546;
  char v547;
  char v548;
  char v549;
  char v550;
  char v551;
  char v552;
  char v553;
  char v554;
  char v555;
  char v556;
  char v557;
  char v558;
  char v559;
  char v560;
  char v561;
  char v562;
  char v563;
  char v564;
  char v565;
  char v566;
  char v567;
  char v568;
  char v569;
  char v570;
  char v571;
  char v572;
  char v573;
  char v574;
  char v575;
  char v576;
  char v577;
  char v578;
  char v579;
  char v580;
  char v581;
  char v582;
  char v583;
  char v584;
  char v585;
  char v586;
  char v587;
  char v588;
  char v589;
  char v590;
  char v591;
  char v592;
  char v593;
  char v594;
  char v595;
  char v596;
  char v597;
  char v598;
  char v599;
  char v600;
  char v601;
  char v602;
  char v603;
  char v604;
  char v605;
  char v606;
  char v607;
  char v608;
  char v609;
  char v610;
  char v611;
  char v612;
  char v613;
  char v614;
  char v615;
  char v616;
  char v617;
  char v618;
  char v619;
  char v620;
  char v621;
  char v622;
  char v623;
  char v624;
  char v625;
  char v626;
  char v627;
  char v628;
  char v629;
  char v630;
  char v631;
  char v632;
  char v633;
  char v634;
  char v635;
  char v636;
  char v637;
  char v638;
  char v639;
  char v640;
  char v641;
  char v642;
  char v643;
  char v644;
  char v645;
  char v646;
  char v647;
  char v648;
  char v649;
  char v650;
  char v651;
  char v652;
  char v653;
  char v654;
  char v655;
  char v656;
  char v657;
  char v658;
  char v659;
  char v660;
  char v661;
  char v662;
  char v663;
  char v664;
  char v665;
  char v666;
  char v667;
  char v668;
  char v669;
  char v670;
  char v671;
  char v672;
  char v673;
  char v674;
  char v675;
  char v676;
  char v677;
  char v678;
  char v679;
  char v680;
  char v681;
  char v682;
  char v683;
  char v684;
  char v685;
  char v686;
  char v687;
  char v688;
  char v689;
  char v690;
  char v691;
  char v692;
  char v693;
  char v694;
  char v695;
  char v696;
  char v697;
  char v698;
  char v699;
  char v700;
  char v701;
  char v702;
  char v703;
  char v704;
  char v705;
  char v706;
  char v707;
  char v708;
  char v709;
  char v710;
  char v711;
  char v712;
  char v713;
  char v714;
  char v715;
  char v716;
  char v717;
  char v718;
  char v719;
  char v720;
  char v721;
  char v722;
  char v723;
  char v724;
  char v725;
  char v726;
  char v727;
  char v728;
  char v729;
  char v730;
  char v731;
  char v732;
  char v733;
  char v734;
  char v735;
  char v736;
  char v737;
  char v738;
  char v739;
  char v740;
  char v741;
  char v742;
  char v743;
  char v744;
  char v745;
  char v746;
  char v747;
  char v748;
  char v749;
  char v750;
  char v751;
  char v752;
  char v753;
  char v754;
  char v755;
  char v756;
  char v757;
  char v758;
  char v759;
  char v760;
  char v761;
  char v762;
  char v763;
  char v764;
  char v765;
  char v766;
  char v767;
  char v768;
  char v769;
  char v770;
  char v771;
  char v772;
  char v773;
  char v774;
  char v775;
  char v776;
  char v777;
  char v778;
  char v779;
  char v780;
  char v781;
  char v782;
  char v783;
  char v784;
  char v785;
  char v786;
  char v787;
  char v788;
  char v789;
  char v790;
  char v791;
  char v792;
  char v793;
  char v794;
  char v795;
  char v796;
  char v797;
  char v798;
  char v799;
  char v800;
  char v801;
  char v802;
  char v803;
  char v804;
  char v805;
  char v806;
  char v807;
  char v808;
  char v809;
  char v810;
  char v811;
  char v812;
  char v813;
  char v814;
  char v815;
  char v816;
  char v817;
  char v818;
  char v819;
  char v820;
  char v821;
  char v822;
  char v823;
  char v824;
  char v825;
  char v826;
  char v827;
  char v828;
  char v829;
  char v830;
  char v831;
  char v832;
  char v833;
  char v834;
  char v835;
  char v836;
  char v837;
  char v838;
  char v839;
  char v840;
  char v841;
  char v842;
  char v843;
  char v844;
  char v845;
  char v846;
  char v847;
  char v848;
  char v849;
  char v850;
  char v851;
  char v852;
  char v853;
  char v854;
  char v855;
  char v856;
  char v857;
  char v858;
  char v859;
  char v860;
  char v861;
  char v862;
  char v863;
  char v864;
  char v865;
  char v866;
  char v867;
  char v868;
  char v869;
  char v870;
  char v871;
  char v872;
  char v873;
  char v874;
  char v875;
  char v876;
  char v877;
  char v878;
  char v879;
  char v880;
  char v881;
  char v882;
  char v883;
  char v884;
  char v885;
  char v886;
  char v887;
  char v888;
  char v889;
  char v890;
  char v891;
  char v892;
  char v893;
  char v894;
  char v895;
  char v896;
  char v897;
  char v898;
  char v899;
  char v900;
  char v901;
  char v902;
  char v903;
  char v904;
  char v905;
  char v906;
  char v907;
  char v908;
  char v909;
  char v910;
  char v911;
  char v912;
  char v913;
  char v914;
  char v915;
  char v916;
  char v917;
  char v918;
  char v919;
  char v920;
  char v921;
  char v922;
  char v923;
  char v924;
  char v925;
  char v926;
  char v927;
  char v928;
  char v929;
  char v930;
  char v931;
  char v932;
  char v933;
  char v934;
  char v935;
  char v936;
  char v937;
  char v938;
  char v939;
  char v940;
  char v941;
  char v942;
  char v943;
  char v944;
  char v945;
  char v946;
  char v947;
  char v948;
  char v949;
  char v950;
  char v951;
  char v952;
  char v953;
  char v954;
  __int128 v955;
  __int128 v956;

  *((_QWORD *)&v956 + 1) = a2;
  if (!sub_216B29094((uint64_t)&v956))
  {
    if (sub_216B84D2C(v956, *((uint64_t *)&v956 + 1)))
      goto LABEL_12;
    sub_216B20594(a3);
    v4 = sub_216B26288(&v956, 0);
    if (sub_216B4C42C(v4))
    {
      LOBYTE(v955) = 95;
      sub_216B1FBBC((uint64_t)a3, &v955);
    }
    v5 = sub_216B1FF14((uint64_t)a3);
    v6 = sub_216B1E67C((uint64_t)&v956);
    sub_216B28114(a3, v6 + v5);
    v7 = sub_216B1E67C((uint64_t)&v956);
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = sub_216B26288(&v956, v8);
        if (sub_216B84DC0(v9))
          LOBYTE(v955) = sub_216B26288(&v956, v8);
        else
          LOBYTE(v955) = 95;
        sub_216B1FBBC((uint64_t)a3, &v955);
        ++v8;
      }
      while (v7 != v8);
    }
    while (1)
    {
      v10 = sub_216B262E0((uint64_t)a3);
      v11 = sub_216B1FF14((uint64_t)a3);
      sub_216B1E684(&v955, v10, v11);
      v956 = v955;
LABEL_12:
      v12 = sub_216B32854(&v955, v956, *((uint64_t *)&v956 + 1));
      v954 = 1;
      v13 = sub_216B32A18((uint64_t)v12, "auto", (uint64_t)&v954);
      v953 = 1;
      v14 = sub_216B32938(v13, (uint64_t)"break", (uint64_t)&v953);
      v952 = 1;
      v15 = sub_216B32A18(v14, "case", (uint64_t)&v952);
      v951 = 1;
      v16 = sub_216B32A18(v15, "char", (uint64_t)&v951);
      v950 = 1;
      v17 = sub_216B32938(v16, (uint64_t)"const", (uint64_t)&v950);
      v949 = 1;
      v18 = sub_216B32AEC(v17, "continue", (uint64_t)&v949);
      v948 = 1;
      v19 = sub_216B32858(v18, "default", (uint64_t)&v948);
      v947 = 1;
      v20 = sub_216B348A8(v19, (unsigned __int16 *)"do", (uint64_t)&v947);
      v946 = 1;
      v21 = sub_216B32A7C(v20, (uint64_t)"double", (uint64_t)&v946);
      v945 = 1;
      v22 = sub_216B32A18(v21, "else", (uint64_t)&v945);
      v944 = 1;
      v23 = sub_216B32A18(v22, "enum", (uint64_t)&v944);
      v943 = 1;
      v24 = sub_216B32A7C(v23, (uint64_t)"extern", (uint64_t)&v943);
      v942 = 1;
      v25 = sub_216B32938(v24, (uint64_t)"float", (uint64_t)&v942);
      v941 = 1;
      v26 = sub_216B329A8(v25, (unsigned __int16 *)"for", (uint64_t)&v941);
      v940 = 1;
      v27 = sub_216B32A18(v26, "goto", (uint64_t)&v940);
      v939 = 1;
      v28 = sub_216B348A8(v27, (unsigned __int16 *)"if", (uint64_t)&v939);
      v938 = 1;
      v29 = sub_216B32A7C(v28, (uint64_t)"inline", (uint64_t)&v938);
      v937 = 1;
      v30 = sub_216B329A8(v29, (unsigned __int16 *)"int", (uint64_t)&v937);
      v936 = 1;
      v31 = sub_216B32A18(v30, "long", (uint64_t)&v936);
      v935 = 1;
      v32 = sub_216B32AEC(v31, "register", (uint64_t)&v935);
      v934 = 1;
      v33 = sub_216B32AEC(v32, "restrict", (uint64_t)&v934);
      v933 = 1;
      v34 = sub_216B32A7C(v33, (uint64_t)"return", (uint64_t)&v933);
      v932 = 1;
      v35 = sub_216B32938(v34, (uint64_t)"short", (uint64_t)&v932);
      v931 = 1;
      v36 = sub_216B32A7C(v35, (uint64_t)"signed", (uint64_t)&v931);
      v930 = 1;
      v37 = sub_216B32A7C(v36, (uint64_t)"sizeof", (uint64_t)&v930);
      v929 = 1;
      v38 = sub_216B32A7C(v37, (uint64_t)"static", (uint64_t)&v929);
      v928 = 1;
      v39 = sub_216B32A7C(v38, (uint64_t)"struct", (uint64_t)&v928);
      v927 = 1;
      v40 = sub_216B32A7C(v39, (uint64_t)"switch", (uint64_t)&v927);
      v926 = 1;
      v41 = sub_216B32858(v40, "typedef", (uint64_t)&v926);
      v925 = 1;
      v42 = sub_216B32938(v41, (uint64_t)"union", (uint64_t)&v925);
      v924 = 1;
      v43 = sub_216B32AEC(v42, "unsigned", (uint64_t)&v924);
      v923 = 1;
      v44 = sub_216B32A18(v43, "void", (uint64_t)&v923);
      v922 = 1;
      v45 = sub_216B32AEC(v44, "volatile", (uint64_t)&v922);
      v921 = 1;
      v46 = sub_216B32938(v45, (uint64_t)"while", (uint64_t)&v921);
      v920 = 1;
      v47 = sub_216B32AEC(v46, "_Alignas", (uint64_t)&v920);
      v919 = 1;
      v48 = sub_216B32AEC(v47, "_Alignof", (uint64_t)&v919);
      v918 = 1;
      v49 = sub_216B32858(v48, "_Atomic", (uint64_t)&v918);
      v917 = 1;
      v50 = sub_216B32938(v49, (uint64_t)"_Bool", (uint64_t)&v917);
      v916 = 1;
      v51 = sub_216B32AEC(v50, "_Complex", (uint64_t)&v916);
      v915 = 1;
      v52 = sub_216B32AEC(v51, "_Generic", (uint64_t)&v915);
      v914 = 1;
      v53 = sub_216B328C8(v52, (uint64_t)"_Imaginary", (uint64_t)&v914);
      v913 = 1;
      v54 = sub_216B345E4(v53, (uint64_t)"_Noreturn", (uint64_t)&v913);
      v912 = 1;
      v55 = sub_216B346C4(v54, "_Static_assert", (uint64_t)&v912);
      v911 = 1;
      v56 = sub_216B4A400(v55, "_Thread_local", (uint64_t)&v911);
      v910 = 1;
      v57 = sub_216B32AEC(v56, "__func__", (uint64_t)&v910);
      v909 = 1;
      v58 = sub_216B328C8(v57, (uint64_t)"__objc_yes", (uint64_t)&v909);
      v908 = 1;
      v59 = sub_216B345E4(v58, (uint64_t)"__objc_no", (uint64_t)&v908);
      v907 = 1;
      v60 = sub_216B329A8(v59, (unsigned __int16 *)"asm", (uint64_t)&v907);
      v906 = 1;
      v61 = sub_216B32A18(v60, "BOOL", (uint64_t)&v906);
      v905 = 1;
      v62 = sub_216B32938(v61, (uint64_t)"catch", (uint64_t)&v905);
      v904 = 1;
      v63 = sub_216B32938(v62, (uint64_t)"class", (uint64_t)&v904);
      v903 = 1;
      v64 = sub_216B328C8(v63, (uint64_t)"const_cast", (uint64_t)&v903);
      v902 = 1;
      v65 = sub_216B32A7C(v64, (uint64_t)"delete", (uint64_t)&v902);
      v901 = 1;
      v66 = sub_216B34654(v65, (uint64_t)"dynamic_cast", (uint64_t)&v901);
      v900 = 1;
      v67 = sub_216B32AEC(v66, "explicit", (uint64_t)&v900);
      v899 = 1;
      v68 = sub_216B32A7C(v67, (uint64_t)"export", (uint64_t)&v899);
      v898 = 1;
      v69 = sub_216B32938(v68, (uint64_t)"false", (uint64_t)&v898);
      v897 = 1;
      v70 = sub_216B32A7C(v69, (uint64_t)"friend", (uint64_t)&v897);
      v896 = 1;
      v71 = sub_216B32858(v70, "mutable", (uint64_t)&v896);
      v895 = 1;
      v72 = sub_216B345E4(v71, (uint64_t)"namespace", (uint64_t)&v895);
      v894 = 1;
      v73 = sub_216B329A8(v72, (unsigned __int16 *)"new", (uint64_t)&v894);
      v893 = 1;
      v74 = sub_216B32AEC(v73, "operator", (uint64_t)&v893);
      v892 = 1;
      v75 = sub_216B32858(v74, "private", (uint64_t)&v892);
      v891 = 1;
      v76 = sub_216B345E4(v75, (uint64_t)"protected", (uint64_t)&v891);
      v890 = 1;
      v77 = sub_216B32A7C(v76, (uint64_t)"public", (uint64_t)&v890);
      v889 = 1;
      v78 = sub_216B4A81C(v77, "reinterpret_cast", (uint64_t)&v889);
      v888 = 1;
      v79 = sub_216B34334(v78, "static_cast", (uint64_t)&v888);
      v887 = 1;
      v80 = sub_216B32AEC(v79, "template", (uint64_t)&v887);
      v886 = 1;
      v81 = sub_216B32A18(v80, "this", (uint64_t)&v886);
      v885 = 1;
      v82 = sub_216B32938(v81, (uint64_t)"throw", (uint64_t)&v885);
      v884 = 1;
      v83 = sub_216B32A18(v82, "true", (uint64_t)&v884);
      v883 = 1;
      v84 = sub_216B329A8(v83, (unsigned __int16 *)"try", (uint64_t)&v883);
      v882 = 1;
      v85 = sub_216B32AEC(v84, "typename", (uint64_t)&v882);
      v881 = 1;
      v86 = sub_216B32A7C(v85, (uint64_t)"typeid", (uint64_t)&v881);
      v880 = 1;
      v87 = sub_216B32938(v86, (uint64_t)"using", (uint64_t)&v880);
      v879 = 1;
      v88 = sub_216B32858(v87, "virtual", (uint64_t)&v879);
      v878 = 1;
      v89 = sub_216B32858(v88, "wchar_t", (uint64_t)&v878);
      v877 = 1;
      v90 = sub_216B32858(v89, "alignas", (uint64_t)&v877);
      v876 = 1;
      v91 = sub_216B32858(v90, "alignof", (uint64_t)&v876);
      v875 = 1;
      v92 = sub_216B32AEC(v91, "char16_t", (uint64_t)&v875);
      v874 = 1;
      v93 = sub_216B32AEC(v92, "char32_t", (uint64_t)&v874);
      v873 = 1;
      v94 = sub_216B345E4(v93, (uint64_t)"constexpr", (uint64_t)&v873);
      v872 = 1;
      v95 = sub_216B32AEC(v94, "decltype", (uint64_t)&v872);
      v871 = 1;
      v96 = sub_216B32AEC(v95, "noexcept", (uint64_t)&v871);
      v870 = 1;
      v97 = sub_216B32858(v96, "nullptr", (uint64_t)&v870);
      v869 = 1;
      v98 = sub_216B4A400(v97, "static_assert", (uint64_t)&v869);
      v868 = 1;
      v99 = sub_216B34654(v98, (uint64_t)"thread_local", (uint64_t)&v868);
      v867 = 1;
      v100 = sub_216B328C8(v99, (uint64_t)"_Decimal32", (uint64_t)&v867);
      v866 = 1;
      v101 = sub_216B328C8(v100, (uint64_t)"_Decimal64", (uint64_t)&v866);
      v865 = 1;
      v102 = sub_216B34334(v101, "_Decimal128", (uint64_t)&v865);
      v864 = 1;
      v103 = sub_216B32A7C(v102, (uint64_t)"__null", (uint64_t)&v864);
      v863 = 1;
      v104 = sub_216B345E4(v103, (uint64_t)"__alignof", (uint64_t)&v863);
      v862 = 1;
      v105 = sub_216B34334(v104, "__attribute", (uint64_t)&v862);
      v861 = 1;
      v106 = sub_216B4A5C0(v105, "__builtin_choose_expr", (uint64_t)&v861);
      v860 = 1;
      v107 = sub_216B4A1B4(v106, (uint64_t)"__builtin_offsetof", (uint64_t)&v860);
      v859 = 1;
      v108 = sub_216B4A79C(v107, (uint64_t)"__builtin_types_compatible_p", (uint64_t)&v859);
      v858 = 1;
      v109 = sub_216B4A81C(v108, "__builtin_va_arg", (uint64_t)&v858);
      v857 = 1;
      v110 = sub_216B4A400(v109, "__extension__", (uint64_t)&v857);
      v856 = 1;
      v111 = sub_216B32A7C(v110, (uint64_t)"__imag", (uint64_t)&v856);
      v855 = 1;
      v112 = sub_216B32AEC(v111, "__int128", (uint64_t)&v855);
      v854 = 1;
      v113 = sub_216B345E4(v112, (uint64_t)"__label__", (uint64_t)&v854);
      v853 = 1;
      v114 = sub_216B32A7C(v113, (uint64_t)"__real", (uint64_t)&v853);
      v852 = 1;
      v115 = sub_216B32AEC(v114, "__thread", (uint64_t)&v852);
      v851 = 1;
      v116 = sub_216B34654(v115, (uint64_t)"__FUNCTION__", (uint64_t)&v851);
      v850 = 1;
      v117 = sub_216B4A6A8(v116, "__PRETTY_FUNCTION__", (uint64_t)&v850);
      v849 = 1;
      v118 = sub_216B32A7C(v117, (uint64_t)"typeof", (uint64_t)&v849);
      v848 = 1;
      v119 = sub_216B4A400(v118, "__FUNCDNAME__", (uint64_t)&v848);
      v847 = 1;
      v120 = sub_216B34334(v119, "__FUNCSIG__", (uint64_t)&v847);
      v846 = 1;
      v121 = sub_216B4A400(v120, "L__FUNCTION__", (uint64_t)&v846);
      v845 = 1;
      v122 = sub_216B4A31C(v121, (uint64_t)"__is_interface_class", (uint64_t)&v845);
      v844 = 1;
      v123 = sub_216B34334(v122, "__is_sealed", (uint64_t)&v844);
      v843 = 1;
      v124 = sub_216B4A470(v123, (uint64_t)"__is_destructible", (uint64_t)&v843);
      v842 = 1;
      v125 = sub_216B4A228(v124, (uint64_t)"__is_nothrow_destructible", (uint64_t)&v842);
      v841 = 1;
      v126 = sub_216B4A2A8(v125, "__is_nothrow_assignable", (uint64_t)&v841);
      v840 = 1;
      v127 = sub_216B4A1B4(v126, (uint64_t)"__is_constructible", (uint64_t)&v840);
      v839 = 1;
      v128 = sub_216B4A71C(v127, (uint64_t)"__is_nothrow_constructible", (uint64_t)&v839);
      v838 = 1;
      v129 = sub_216B4A31C(v128, (uint64_t)"__has_nothrow_assign", (uint64_t)&v838);
      v837 = 1;
      v130 = sub_216B4A228(v129, (uint64_t)"__has_nothrow_move_assign", (uint64_t)&v837);
      v836 = 1;
      v131 = sub_216B4A1B4(v130, (uint64_t)"__has_nothrow_copy", (uint64_t)&v836);
      v835 = 1;
      v132 = sub_216B4A228(v131, (uint64_t)"__has_nothrow_constructor", (uint64_t)&v835);
      v834 = 1;
      v133 = sub_216B4A31C(v132, (uint64_t)"__has_trivial_assign", (uint64_t)&v834);
      v833 = 1;
      v134 = sub_216B4A228(v133, (uint64_t)"__has_trivial_move_assign", (uint64_t)&v833);
      v832 = 1;
      v135 = sub_216B4A1B4(v134, (uint64_t)"__has_trivial_copy", (uint64_t)&v832);
      v831 = 1;
      v136 = sub_216B4A228(v135, (uint64_t)"__has_trivial_constructor", (uint64_t)&v831);
      v830 = 1;
      v137 = sub_216B84DDC(v136, "__has_trivial_move_constructor", (uint64_t)&v830);
      v829 = 1;
      v138 = sub_216B4A634(v137, "__has_trivial_destructor", (uint64_t)&v829);
      v828 = 1;
      v139 = sub_216B4A634(v138, "__has_virtual_destructor", (uint64_t)&v828);
      v827 = 1;
      v140 = sub_216B4A400(v139, "__is_abstract", (uint64_t)&v827);
      v826 = 1;
      v141 = sub_216B34654(v140, (uint64_t)"__is_base_of", (uint64_t)&v826);
      v825 = 1;
      v142 = sub_216B328C8(v141, (uint64_t)"__is_class", (uint64_t)&v825);
      v824 = 1;
      v143 = sub_216B4A6A8(v142, "__is_convertible_to", (uint64_t)&v824);
      v823 = 1;
      v144 = sub_216B328C8(v143, (uint64_t)"__is_empty", (uint64_t)&v823);
      v822 = 1;
      v145 = sub_216B345E4(v144, (uint64_t)"__is_enum", (uint64_t)&v822);
      v821 = 1;
      v146 = sub_216B328C8(v145, (uint64_t)"__is_final", (uint64_t)&v821);
      v820 = 1;
      v147 = sub_216B34654(v146, (uint64_t)"__is_literal", (uint64_t)&v820);
      v819 = 1;
      v148 = sub_216B4A470(v147, (uint64_t)"__is_literal_type", (uint64_t)&v819);
      v818 = 1;
      v149 = sub_216B32AEC(v148, "__is_pod", (uint64_t)&v818);
      v817 = 1;
      v150 = sub_216B4A81C(v149, "__is_polymorphic", (uint64_t)&v817);
      v816 = 1;
      v151 = sub_216B34654(v150, (uint64_t)"__is_trivial", (uint64_t)&v816);
      v815 = 1;
      v152 = sub_216B328C8(v151, (uint64_t)"__is_union", (uint64_t)&v815);
      v814 = 1;
      v153 = sub_216B4A79C(v152, (uint64_t)"__is_trivially_constructible", (uint64_t)&v814);
      v813 = 1;
      v154 = sub_216B4A2A8(v153, "__is_trivially_copyable", (uint64_t)&v813);
      v812 = 1;
      v155 = sub_216B4A228(v154, (uint64_t)"__is_trivially_assignable", (uint64_t)&v812);
      v811 = 1;
      v156 = sub_216B4A470(v155, (uint64_t)"__underlying_type", (uint64_t)&v811);
      v810 = 1;
      v157 = sub_216B4A81C(v156, "__is_lvalue_expr", (uint64_t)&v810);
      v809 = 1;
      v158 = sub_216B4A81C(v157, "__is_rvalue_expr", (uint64_t)&v809);
      v808 = 1;
      v159 = sub_216B4A390(v158, "__is_arithmetic", (uint64_t)&v808);
      v807 = 1;
      v160 = sub_216B4A6A8(v159, "__is_floating_point", (uint64_t)&v807);
      v806 = 1;
      v161 = sub_216B4A400(v160, "__is_integral", (uint64_t)&v806);
      v805 = 1;
      v162 = sub_216B4A1B4(v161, (uint64_t)"__is_complete_type", (uint64_t)&v805);
      v804 = 1;
      v163 = sub_216B345E4(v162, (uint64_t)"__is_void", (uint64_t)&v804);
      v803 = 1;
      v164 = sub_216B328C8(v163, (uint64_t)"__is_array", (uint64_t)&v803);
      v802 = 1;
      v165 = sub_216B4A400(v164, "__is_function", (uint64_t)&v802);
      v801 = 1;
      v166 = sub_216B346C4(v165, "__is_reference", (uint64_t)&v801);
      v800 = 1;
      v167 = sub_216B4A5C0(v166, "__is_lvalue_reference", (uint64_t)&v800);
      v799 = 1;
      v168 = sub_216B4A5C0(v167, "__is_rvalue_reference", (uint64_t)&v799);
      v798 = 1;
      v169 = sub_216B4A81C(v168, "__is_fundamental", (uint64_t)&v798);
      v797 = 1;
      v170 = sub_216B34334(v169, "__is_object", (uint64_t)&v797);
      v796 = 1;
      v171 = sub_216B34334(v170, "__is_scalar", (uint64_t)&v796);
      v795 = 1;
      v172 = sub_216B4A400(v171, "__is_compound", (uint64_t)&v795);
      v794 = 1;
      v173 = sub_216B34654(v172, (uint64_t)"__is_pointer", (uint64_t)&v794);
      v793 = 1;
      v174 = sub_216B4A71C(v173, (uint64_t)"__is_member_object_pointer", (uint64_t)&v793);
      v792 = 1;
      v175 = sub_216B4A79C(v174, (uint64_t)"__is_member_function_pointer", (uint64_t)&v792);
      v791 = 1;
      v176 = sub_216B4A6A8(v175, "__is_member_pointer", (uint64_t)&v791);
      v790 = 1;
      v177 = sub_216B328C8(v176, (uint64_t)"__is_const", (uint64_t)&v790);
      v789 = 1;
      v178 = sub_216B4A400(v177, "__is_volatile", (uint64_t)&v789);
      v788 = 1;
      v179 = sub_216B4A31C(v178, (uint64_t)"__is_standard_layout", (uint64_t)&v788);
      v787 = 1;
      v180 = sub_216B34334(v179, "__is_signed", (uint64_t)&v787);
      v786 = 1;
      v181 = sub_216B4A400(v180, "__is_unsigned", (uint64_t)&v786);
      v785 = 1;
      v182 = sub_216B345E4(v181, (uint64_t)"__is_same", (uint64_t)&v785);
      v784 = 1;
      v183 = sub_216B4A81C(v182, "__is_convertible", (uint64_t)&v784);
      v783 = 1;
      v184 = sub_216B34654(v183, (uint64_t)"__array_rank", (uint64_t)&v783);
      v782 = 1;
      v185 = sub_216B346C4(v184, "__array_extent", (uint64_t)&v782);
      v781 = 1;
      v186 = sub_216B4A1B4(v185, (uint64_t)"__private_extern__", (uint64_t)&v781);
      v780 = 1;
      v187 = sub_216B4A1B4(v186, (uint64_t)"__module_private__", (uint64_t)&v780);
      v779 = 1;
      v188 = sub_216B328C8(v187, (uint64_t)"__declspec", (uint64_t)&v779);
      v778 = 1;
      v189 = sub_216B32858(v188, "__cdecl", (uint64_t)&v778);
      v777 = 1;
      v190 = sub_216B345E4(v189, (uint64_t)"__stdcall", (uint64_t)&v777);
      v776 = 1;
      v191 = sub_216B328C8(v190, (uint64_t)"__fastcall", (uint64_t)&v776);
      v775 = 1;
      v192 = sub_216B328C8(v191, (uint64_t)"__thiscall", (uint64_t)&v775);
      v774 = 1;
      v193 = sub_216B4A400(v192, "__forceinline", (uint64_t)&v774);
      v773 = 1;
      v194 = sub_216B34334(v193, "__unaligned", (uint64_t)&v773);
      v772 = 1;
      v195 = sub_216B32AEC(v194, "__global", (uint64_t)&v772);
      v771 = 1;
      v196 = sub_216B32858(v195, "__local", (uint64_t)&v771);
      v770 = 1;
      v197 = sub_216B328C8(v196, (uint64_t)"__constant", (uint64_t)&v770);
      v769 = 1;
      v198 = sub_216B345E4(v197, (uint64_t)"__private", (uint64_t)&v769);
      v768 = 1;
      v199 = sub_216B32A7C(v198, (uint64_t)"global", (uint64_t)&v768);
      v767 = 1;
      v200 = sub_216B32938(v199, (uint64_t)"local", (uint64_t)&v767);
      v766 = 1;
      v201 = sub_216B32AEC(v200, "constant", (uint64_t)&v766);
      v765 = 1;
      v202 = sub_216B32858(v201, "private", (uint64_t)&v765);
      v764 = 1;
      v203 = sub_216B32AEC(v202, "__kernel", (uint64_t)&v764);
      v763 = 1;
      v204 = sub_216B32A7C(v203, (uint64_t)"kernel", (uint64_t)&v763);
      v762 = 1;
      v205 = sub_216B34334(v204, "__read_only", (uint64_t)&v762);
      v761 = 1;
      v206 = sub_216B34654(v205, (uint64_t)"__write_only", (uint64_t)&v761);
      v760 = 1;
      v207 = sub_216B34654(v206, (uint64_t)"__read_write", (uint64_t)&v760);
      v759 = 1;
      v208 = sub_216B345E4(v207, (uint64_t)"read_only", (uint64_t)&v759);
      v758 = 1;
      v209 = sub_216B328C8(v208, (uint64_t)"write_only", (uint64_t)&v758);
      v757 = 1;
      v210 = sub_216B328C8(v209, (uint64_t)"read_write", (uint64_t)&v757);
      v756 = 1;
      v211 = sub_216B4A81C(v210, "__builtin_astype", (uint64_t)&v756);
      v755 = 1;
      v212 = sub_216B32AEC(v211, "vec_step", (uint64_t)&v755);
      v754 = 1;
      v213 = sub_216B32AEC(v212, "__pascal", (uint64_t)&v754);
      v753 = 1;
      v214 = sub_216B32AEC(v213, "__vector", (uint64_t)&v753);
      v752 = 1;
      v215 = sub_216B32858(v214, "__pixel", (uint64_t)&v752);
      v751 = 1;
      v216 = sub_216B32A7C(v215, (uint64_t)"__fp16", (uint64_t)&v751);
      v750 = 1;
      v217 = sub_216B32A18(v216, "half", (uint64_t)&v750);
      v749 = 1;
      v218 = sub_216B32AEC(v217, "__bridge", (uint64_t)&v749);
      v748 = 1;
      v219 = sub_216B4A470(v218, (uint64_t)"__bridge_transfer", (uint64_t)&v748);
      v747 = 1;
      v220 = sub_216B4A470(v219, (uint64_t)"__bridge_retained", (uint64_t)&v747);
      v746 = 1;
      v221 = sub_216B4A390(v220, "__bridge_retain", (uint64_t)&v746);
      v745 = 1;
      v222 = sub_216B34334(v221, "__alignof__", (uint64_t)&v745);
      v744 = 1;
      v223 = sub_216B32938(v222, (uint64_t)"__asm", (uint64_t)&v744);
      v743 = 1;
      v224 = sub_216B32858(v223, "__asm__", (uint64_t)&v743);
      v742 = 1;
      v225 = sub_216B4A400(v224, "__attribute__", (uint64_t)&v742);
      v741 = 1;
      v226 = sub_216B345E4(v225, (uint64_t)"__complex", (uint64_t)&v741);
      v740 = 1;
      v227 = sub_216B34334(v226, "__complex__", (uint64_t)&v740);
      v739 = 1;
      v228 = sub_216B32858(v227, "__const", (uint64_t)&v739);
      v738 = 1;
      v229 = sub_216B345E4(v228, (uint64_t)"__const__", (uint64_t)&v738);
      v737 = 1;
      v230 = sub_216B328C8(v229, (uint64_t)"__decltype", (uint64_t)&v737);
      v736 = 1;
      v231 = sub_216B32AEC(v230, "__imag__", (uint64_t)&v736);
      v735 = 1;
      v232 = sub_216B32AEC(v231, "__inline", (uint64_t)&v735);
      v734 = 1;
      v233 = sub_216B328C8(v232, (uint64_t)"__inline__", (uint64_t)&v734);
      v733 = 1;
      v234 = sub_216B345E4(v233, (uint64_t)"__nullptr", (uint64_t)&v733);
      v732 = 1;
      v235 = sub_216B32AEC(v234, "__real__", (uint64_t)&v732);
      v731 = 1;
      v236 = sub_216B328C8(v235, (uint64_t)"__restrict", (uint64_t)&v731);
      v730 = 1;
      v237 = sub_216B34654(v236, (uint64_t)"__restrict__", (uint64_t)&v730);
      v729 = 1;
      v238 = sub_216B32AEC(v237, "__signed", (uint64_t)&v729);
      v728 = 1;
      v239 = sub_216B328C8(v238, (uint64_t)"__signed__", (uint64_t)&v728);
      v727 = 1;
      v240 = sub_216B32AEC(v239, "__typeof", (uint64_t)&v727);
      v726 = 1;
      v241 = sub_216B328C8(v240, (uint64_t)"__typeof__", (uint64_t)&v726);
      v725 = 1;
      v242 = sub_216B328C8(v241, (uint64_t)"__volatile", (uint64_t)&v725);
      v724 = 1;
      v243 = sub_216B34654(v242, (uint64_t)"__volatile__", (uint64_t)&v724);
      v723 = 1;
      v244 = sub_216B345E4(v243, (uint64_t)"__nonnull", (uint64_t)&v723);
      v722 = 1;
      v245 = sub_216B328C8(v244, (uint64_t)"__nullable", (uint64_t)&v722);
      v721 = 1;
      v246 = sub_216B4A1B4(v245, (uint64_t)"__null_unspecified", (uint64_t)&v721);
      v720 = 1;
      v247 = sub_216B32858(v246, "__ptr64", (uint64_t)&v720);
      v719 = 1;
      v248 = sub_216B32858(v247, "__ptr32", (uint64_t)&v719);
      v718 = 1;
      v249 = sub_216B32A7C(v248, (uint64_t)"__sptr", (uint64_t)&v718);
      v717 = 1;
      v250 = sub_216B32A7C(v249, (uint64_t)"__uptr", (uint64_t)&v717);
      v716 = 1;
      v251 = sub_216B32938(v250, (uint64_t)"__w64", (uint64_t)&v716);
      v715 = 1;
      v252 = sub_216B32AEC(v251, "__uuidof", (uint64_t)&v715);
      v714 = 1;
      v253 = sub_216B32938(v252, (uint64_t)"__try", (uint64_t)&v714);
      v713 = 1;
      v254 = sub_216B345E4(v253, (uint64_t)"__finally", (uint64_t)&v713);
      v712 = 1;
      v255 = sub_216B32858(v254, "__leave", (uint64_t)&v712);
      v711 = 1;
      v256 = sub_216B32858(v255, "uint64_t", (uint64_t)&v711);
      v710 = 1;
      v257 = sub_216B34334(v256, "__if_exists", (uint64_t)&v710);
      v709 = 1;
      v258 = sub_216B4A390(v257, "__if_not_exists", (uint64_t)&v709);
      v708 = 1;
      v259 = sub_216B4A31C(v258, (uint64_t)"__single_inheritance", (uint64_t)&v708);
      v707 = 1;
      v260 = sub_216B4A54C(v259, "__multiple_inheritance", (uint64_t)&v707);
      v706 = 1;
      v261 = sub_216B4A5C0(v260, "__virtual_inheritance", (uint64_t)&v706);
      v705 = 1;
      v262 = sub_216B34334(v261, "__interface", (uint64_t)&v705);
      v704 = 1;
      v263 = sub_216B32A7C(v262, (uint64_t)"__int8", (uint64_t)&v704);
      v703 = 1;
      v264 = sub_216B32858(v263, "__int16", (uint64_t)&v703);
      v702 = 1;
      v265 = sub_216B32858(v264, "__int32", (uint64_t)&v702);
      v701 = 1;
      v266 = sub_216B345E4(v265, (uint64_t)"__wchar_t", (uint64_t)&v701);
      v700 = 1;
      v267 = sub_216B32A18(v266, "_asm", (uint64_t)&v700);
      v699 = 1;
      v268 = sub_216B32AEC(v267, "_alignof", (uint64_t)&v699);
      v698 = 1;
      v269 = sub_216B4A470(v268, (uint64_t)"__builtin_alignof", (uint64_t)&v698);
      v697 = 1;
      v270 = sub_216B32A7C(v269, (uint64_t)"_cdecl", (uint64_t)&v697);
      v696 = 1;
      v271 = sub_216B345E4(v270, (uint64_t)"_fastcall", (uint64_t)&v696);
      v695 = 1;
      v272 = sub_216B32AEC(v271, "_stdcall", (uint64_t)&v695);
      v694 = 1;
      v273 = sub_216B345E4(v272, (uint64_t)"_thiscall", (uint64_t)&v694);
      v693 = 1;
      v274 = sub_216B32858(v273, "_uuidof", (uint64_t)&v693);
      v692 = 1;
      v275 = sub_216B32858(v274, "_inline", (uint64_t)&v692);
      v691 = 1;
      v276 = sub_216B345E4(v275, (uint64_t)"_declspec", (uint64_t)&v691);
      v690 = 1;
      v277 = sub_216B32858(v276, "_pascal", (uint64_t)&v690);
      v689 = 1;
      v278 = sub_216B4A2A8(v277, "__builtin_convertvector", (uint64_t)&v689);
      v688 = 1;
      v279 = sub_216B328C8(v278, (uint64_t)"__char16_t", (uint64_t)&v688);
      v687 = 1;
      v280 = sub_216B328C8(v279, (uint64_t)"__char32_t", (uint64_t)&v687);
      v686 = 1;
      v281 = sub_216B32A7C(v280, (uint64_t)"active", (uint64_t)&v686);
      v685 = 1;
      v282 = sub_216B34334(v281, "atomic_uint", (uint64_t)&v685);
      v684 = 1;
      v283 = sub_216B345E4(v282, (uint64_t)"attribute", (uint64_t)&v684);
      v683 = 1;
      v284 = sub_216B32938(v283, (uint64_t)"bvec2", (uint64_t)&v683);
      v682 = 1;
      v285 = sub_216B32938(v284, (uint64_t)"bvec3", (uint64_t)&v682);
      v681 = 1;
      v286 = sub_216B32938(v285, (uint64_t)"bvec4", (uint64_t)&v681);
      v680 = 1;
      v287 = sub_216B32A7C(v286, (uint64_t)"buffer", (uint64_t)&v680);
      v679 = 1;
      v288 = sub_216B32A18(v287, "cast", (uint64_t)&v679);
      v678 = 1;
      v289 = sub_216B32AEC(v288, "centroid", (uint64_t)&v678);
      v677 = 1;
      v290 = sub_216B32AEC(v289, "coherent", (uint64_t)&v677);
      v676 = 1;
      v291 = sub_216B32A7C(v290, (uint64_t)"common", (uint64_t)&v676);
      v675 = 1;
      v292 = sub_216B32858(v291, "discard", (uint64_t)&v675);
      v674 = 1;
      v293 = sub_216B32938(v292, (uint64_t)"dmat2", (uint64_t)&v674);
      v673 = 1;
      v294 = sub_216B32858(v293, "dmat2x2", (uint64_t)&v673);
      v672 = 1;
      v295 = sub_216B32858(v294, "dmat2x3", (uint64_t)&v672);
      v671 = 1;
      v296 = sub_216B32858(v295, "dmat2x4", (uint64_t)&v671);
      v670 = 1;
      v297 = sub_216B32938(v296, (uint64_t)"dmat3", (uint64_t)&v670);
      v669 = 1;
      v298 = sub_216B32858(v297, "dmat3x2", (uint64_t)&v669);
      v668 = 1;
      v299 = sub_216B32858(v298, "dmat3x3", (uint64_t)&v668);
      v667 = 1;
      v300 = sub_216B32858(v299, "dmat3x4", (uint64_t)&v667);
      v666 = 1;
      v301 = sub_216B32938(v300, (uint64_t)"dmat4", (uint64_t)&v666);
      v665 = 1;
      v302 = sub_216B32858(v301, "dmat4x2", (uint64_t)&v665);
      v664 = 1;
      v303 = sub_216B32858(v302, "dmat4x3", (uint64_t)&v664);
      v663 = 1;
      v304 = sub_216B32858(v303, "dmat4x4", (uint64_t)&v663);
      v662 = 1;
      v305 = sub_216B32938(v304, (uint64_t)"dvec2", (uint64_t)&v662);
      v661 = 1;
      v306 = sub_216B32938(v305, (uint64_t)"dvec3", (uint64_t)&v661);
      v660 = 1;
      v307 = sub_216B32938(v306, (uint64_t)"dvec4", (uint64_t)&v660);
      v659 = 1;
      v308 = sub_216B32A7C(v307, (uint64_t)"filter", (uint64_t)&v659);
      v658 = 1;
      v309 = sub_216B32938(v308, (uint64_t)"fixed", (uint64_t)&v658);
      v657 = 1;
      v310 = sub_216B32A18(v309, "flat", (uint64_t)&v657);
      v656 = 1;
      v311 = sub_216B32938(v310, (uint64_t)"fvec2", (uint64_t)&v656);
      v655 = 1;
      v312 = sub_216B32938(v311, (uint64_t)"fvec3", (uint64_t)&v655);
      v654 = 1;
      v313 = sub_216B32938(v312, (uint64_t)"fvec4", (uint64_t)&v654);
      v653 = 1;
      v314 = sub_216B32938(v313, (uint64_t)"highp", (uint64_t)&v653);
      v652 = 1;
      v315 = sub_216B32938(v314, (uint64_t)"hvec2", (uint64_t)&v652);
      v651 = 1;
      v316 = sub_216B32938(v315, (uint64_t)"hvec3", (uint64_t)&v651);
      v650 = 1;
      v317 = sub_216B32938(v316, (uint64_t)"hvec4", (uint64_t)&v650);
      v649 = 1;
      v318 = sub_216B32AEC(v317, "iimage1D", (uint64_t)&v649);
      v648 = 1;
      v319 = sub_216B4A400(v318, "iimage1DArray", (uint64_t)&v648);
      v647 = 1;
      v320 = sub_216B32AEC(v319, "iimage2D", (uint64_t)&v647);
      v646 = 1;
      v321 = sub_216B4A400(v320, "iimage2DArray", (uint64_t)&v646);
      v645 = 1;
      v322 = sub_216B328C8(v321, (uint64_t)"iimage2DMS", (uint64_t)&v645);
      v644 = 1;
      v323 = sub_216B4A390(v322, "iimage2DMSArray", (uint64_t)&v644);
      v643 = 1;
      v324 = sub_216B34654(v323, (uint64_t)"iimage2DRect", (uint64_t)&v643);
      v642 = 1;
      v325 = sub_216B32AEC(v324, "iimage3D", (uint64_t)&v642);
      v641 = 1;
      v326 = sub_216B34654(v325, (uint64_t)"iimageBuffer", (uint64_t)&v641);
      v640 = 1;
      v327 = sub_216B328C8(v326, (uint64_t)"iimageCube", (uint64_t)&v640);
      v639 = 1;
      v328 = sub_216B4A390(v327, "iimageCubeArray", (uint64_t)&v639);
      v638 = 1;
      v329 = sub_216B32858(v328, "image1D", (uint64_t)&v638);
      v637 = 1;
      v330 = sub_216B34654(v329, (uint64_t)"image1DArray", (uint64_t)&v637);
      v636 = 1;
      v331 = sub_216B4A1B4(v330, (uint64_t)"image1DArrayShadow", (uint64_t)&v636);
      v635 = 1;
      v332 = sub_216B4A400(v331, "image1DShadow", (uint64_t)&v635);
      v634 = 1;
      v333 = sub_216B32858(v332, "image2D", (uint64_t)&v634);
      v633 = 1;
      v334 = sub_216B34654(v333, (uint64_t)"image2DArray", (uint64_t)&v633);
      v632 = 1;
      v335 = sub_216B4A1B4(v334, (uint64_t)"image2DArrayShadow", (uint64_t)&v632);
      v631 = 1;
      v336 = sub_216B345E4(v335, (uint64_t)"image2DMS", (uint64_t)&v631);
      v630 = 1;
      v337 = sub_216B346C4(v336, "image2DMSArray", (uint64_t)&v630);
      v629 = 1;
      v338 = sub_216B34334(v337, "image2DRect", (uint64_t)&v629);
      v628 = 1;
      v339 = sub_216B4A400(v338, "image2DShadow", (uint64_t)&v628);
      v627 = 1;
      v340 = sub_216B32858(v339, "image3D", (uint64_t)&v627);
      v626 = 1;
      v341 = sub_216B34334(v340, "imageBuffer", (uint64_t)&v626);
      v625 = 1;
      v342 = sub_216B345E4(v341, (uint64_t)"imageCube", (uint64_t)&v625);
      v624 = 1;
      v343 = sub_216B346C4(v342, "imageCubeArray", (uint64_t)&v624);
      v623 = 1;
      v344 = sub_216B348A8(v343, (unsigned __int16 *)"in", (uint64_t)&v623);
      v622 = 1;
      v345 = sub_216B32938(v344, (uint64_t)"inout", (uint64_t)&v622);
      v621 = 1;
      v346 = sub_216B32938(v345, (uint64_t)"input", (uint64_t)&v621);
      v620 = 1;
      v347 = sub_216B345E4(v346, (uint64_t)"interface", (uint64_t)&v620);
      v619 = 1;
      v348 = sub_216B345E4(v347, (uint64_t)"invariant", (uint64_t)&v619);
      v618 = 1;
      v349 = sub_216B32AEC(v348, "isampler", (uint64_t)&v618);
      v617 = 1;
      v350 = sub_216B328C8(v349, (uint64_t)"isampler1D", (uint64_t)&v617);
      v616 = 1;
      v351 = sub_216B4A390(v350, "isampler1DArray", (uint64_t)&v616);
      v615 = 1;
      v352 = sub_216B328C8(v351, (uint64_t)"isampler2D", (uint64_t)&v615);
      v614 = 1;
      v353 = sub_216B4A390(v352, "isampler2DArray", (uint64_t)&v614);
      v613 = 1;
      v354 = sub_216B34654(v353, (uint64_t)"isampler2DMS", (uint64_t)&v613);
      v612 = 1;
      v355 = sub_216B4A470(v354, (uint64_t)"isampler2DMSArray", (uint64_t)&v612);
      v611 = 1;
      v356 = sub_216B346C4(v355, "isampler2DRect", (uint64_t)&v611);
      v610 = 1;
      v357 = sub_216B4A81C(v356, "isampler2DShadow", (uint64_t)&v610);
      v609 = 1;
      v358 = sub_216B328C8(v357, (uint64_t)"isampler3D", (uint64_t)&v609);
      v608 = 1;
      v359 = sub_216B346C4(v358, "isamplerBuffer", (uint64_t)&v608);
      v607 = 1;
      v360 = sub_216B34654(v359, (uint64_t)"isamplerCube", (uint64_t)&v607);
      v606 = 1;
      v361 = sub_216B4A470(v360, (uint64_t)"isamplerCubeArray", (uint64_t)&v606);
      v605 = 1;
      v362 = sub_216B32938(v361, (uint64_t)"ivec2", (uint64_t)&v605);
      v604 = 1;
      v363 = sub_216B32938(v362, (uint64_t)"ivec3", (uint64_t)&v604);
      v603 = 1;
      v364 = sub_216B32938(v363, (uint64_t)"ivec4", (uint64_t)&v603);
      v602 = 1;
      v365 = sub_216B32A7C(v364, (uint64_t)"layout", (uint64_t)&v602);
      v601 = 1;
      v366 = sub_216B32A18(v365, "lowp", (uint64_t)&v601);
      v600 = 1;
      v367 = sub_216B32A18(v366, "mat2", (uint64_t)&v600);
      v599 = 1;
      v368 = sub_216B32A7C(v367, (uint64_t)"mat2x2", (uint64_t)&v599);
      v598 = 1;
      v369 = sub_216B32A7C(v368, (uint64_t)"mat2x3", (uint64_t)&v598);
      v597 = 1;
      v370 = sub_216B32A7C(v369, (uint64_t)"mat2x4", (uint64_t)&v597);
      v596 = 1;
      v371 = sub_216B32A18(v370, "mat3", (uint64_t)&v596);
      v595 = 1;
      v372 = sub_216B32A7C(v371, (uint64_t)"mat3x2", (uint64_t)&v595);
      v594 = 1;
      v373 = sub_216B32A7C(v372, (uint64_t)"mat3x3", (uint64_t)&v594);
      v593 = 1;
      v374 = sub_216B32A7C(v373, (uint64_t)"mat3x4", (uint64_t)&v593);
      v592 = 1;
      v375 = sub_216B32A18(v374, "mat4", (uint64_t)&v592);
      v591 = 1;
      v376 = sub_216B32A7C(v375, (uint64_t)"mat4x2", (uint64_t)&v591);
      v590 = 1;
      v377 = sub_216B32A7C(v376, (uint64_t)"mat4x3", (uint64_t)&v590);
      v589 = 1;
      v378 = sub_216B32A7C(v377, (uint64_t)"mat4x4", (uint64_t)&v589);
      v588 = 1;
      v379 = sub_216B32858(v378, "mediump", (uint64_t)&v588);
      v587 = 1;
      v380 = sub_216B32AEC(v379, "noinline", (uint64_t)&v587);
      v586 = 1;
      v381 = sub_216B4A400(v380, "noperspective", (uint64_t)&v586);
      v585 = 1;
      v382 = sub_216B329A8(v381, (unsigned __int16 *)"out", (uint64_t)&v585);
      v584 = 1;
      v383 = sub_216B32A7C(v382, (uint64_t)"output", (uint64_t)&v584);
      v583 = 1;
      v384 = sub_216B345E4(v383, (uint64_t)"partition", (uint64_t)&v583);
      v582 = 1;
      v385 = sub_216B32938(v384, (uint64_t)"patch", (uint64_t)&v582);
      v581 = 1;
      v386 = sub_216B345E4(v385, (uint64_t)"precision", (uint64_t)&v581);
      v580 = 1;
      v387 = sub_216B32AEC(v386, "readonly", (uint64_t)&v580);
      v579 = 1;
      v388 = sub_216B32AEC(v387, "resource", (uint64_t)&v579);
      v578 = 1;
      v389 = sub_216B32A7C(v388, (uint64_t)"sample", (uint64_t)&v578);
      v577 = 1;
      v390 = sub_216B32858(v389, "sampler", (uint64_t)&v577);
      v576 = 1;
      v391 = sub_216B345E4(v390, (uint64_t)"sampler1D", (uint64_t)&v576);
      v575 = 1;
      v392 = sub_216B346C4(v391, "sampler1DArray", (uint64_t)&v575);
      v574 = 1;
      v393 = sub_216B4A31C(v392, (uint64_t)"sampler1DArrayShadow", (uint64_t)&v574);
      v573 = 1;
      v394 = sub_216B4A390(v393, "sampler1DShadow", (uint64_t)&v573);
      v572 = 1;
      v395 = sub_216B345E4(v394, (uint64_t)"sampler2D", (uint64_t)&v572);
      v571 = 1;
      v396 = sub_216B346C4(v395, "sampler2DArray", (uint64_t)&v571);
      v570 = 1;
      v397 = sub_216B4A31C(v396, (uint64_t)"sampler2DArrayShadow", (uint64_t)&v570);
      v569 = 1;
      v398 = sub_216B34334(v397, "sampler2DMS", (uint64_t)&v569);
      v568 = 1;
      v399 = sub_216B4A81C(v398, "sampler2DMSArray", (uint64_t)&v568);
      v567 = 1;
      v400 = sub_216B4A400(v399, "sampler2DRect", (uint64_t)&v567);
      v566 = 1;
      v401 = sub_216B4A6A8(v400, "sampler2DRectShadow", (uint64_t)&v566);
      v565 = 1;
      v402 = sub_216B4A390(v401, "sampler2DShadow", (uint64_t)&v565);
      v564 = 1;
      v403 = sub_216B345E4(v402, (uint64_t)"sampler3D", (uint64_t)&v564);
      v563 = 1;
      v404 = sub_216B4A400(v403, "sampler3DRect", (uint64_t)&v563);
      v562 = 1;
      v405 = sub_216B4A400(v404, "samplerBuffer", (uint64_t)&v562);
      v561 = 1;
      v406 = sub_216B34334(v405, "samplerCube", (uint64_t)&v561);
      v560 = 1;
      v407 = sub_216B4A81C(v406, "samplerCubeArray", (uint64_t)&v560);
      v559 = 1;
      v408 = sub_216B4A54C(v407, "samplerCubeArrayShadow", (uint64_t)&v559);
      v558 = 1;
      v409 = sub_216B4A470(v408, (uint64_t)"samplerCubeShadow", (uint64_t)&v558);
      v557 = 1;
      v410 = sub_216B32A7C(v409, (uint64_t)"smooth", (uint64_t)&v557);
      v556 = 1;
      v411 = sub_216B328C8(v410, (uint64_t)"subroutine", (uint64_t)&v556);
      v555 = 1;
      v412 = sub_216B32A7C(v411, (uint64_t)"superp", (uint64_t)&v555);
      v554 = 1;
      v413 = sub_216B32AEC(v412, "uimage1D", (uint64_t)&v554);
      v553 = 1;
      v414 = sub_216B4A400(v413, "uimage1DArray", (uint64_t)&v553);
      v552 = 1;
      v415 = sub_216B32AEC(v414, "uimage2D", (uint64_t)&v552);
      v551 = 1;
      v416 = sub_216B4A400(v415, "uimage2DArray", (uint64_t)&v551);
      v550 = 1;
      v417 = sub_216B328C8(v416, (uint64_t)"uimage2DMS", (uint64_t)&v550);
      v549 = 1;
      v418 = sub_216B4A390(v417, "uimage2DMSArray", (uint64_t)&v549);
      v548 = 1;
      v419 = sub_216B34654(v418, (uint64_t)"uimage2DRect", (uint64_t)&v548);
      v547 = 1;
      v420 = sub_216B32AEC(v419, "uimage3D", (uint64_t)&v547);
      v546 = 1;
      v421 = sub_216B34654(v420, (uint64_t)"uimageBuffer", (uint64_t)&v546);
      v545 = 1;
      v422 = sub_216B328C8(v421, (uint64_t)"uimageCube", (uint64_t)&v545);
      v544 = 1;
      v423 = sub_216B4A390(v422, "uimageCubeArray", (uint64_t)&v544);
      v543 = 1;
      v424 = sub_216B32A18(v423, "uint", (uint64_t)&v543);
      v542 = 1;
      v425 = sub_216B32858(v424, "uniform", (uint64_t)&v542);
      v541 = 1;
      v426 = sub_216B32AEC(v425, "usampler", (uint64_t)&v541);
      v540 = 1;
      v427 = sub_216B328C8(v426, (uint64_t)"usampler1D", (uint64_t)&v540);
      v539 = 1;
      v428 = sub_216B4A390(v427, "usampler1DArray", (uint64_t)&v539);
      v538 = 1;
      v429 = sub_216B328C8(v428, (uint64_t)"usampler2D", (uint64_t)&v538);
      v537 = 1;
      v430 = sub_216B4A390(v429, "usampler2DArray", (uint64_t)&v537);
      v536 = 1;
      v431 = sub_216B34654(v430, (uint64_t)"usampler2DMS", (uint64_t)&v536);
      v535 = 1;
      v432 = sub_216B4A470(v431, (uint64_t)"usampler2DMSArray", (uint64_t)&v535);
      v534 = 1;
      v433 = sub_216B346C4(v432, "usampler2DRect", (uint64_t)&v534);
      v533 = 1;
      v434 = sub_216B328C8(v433, (uint64_t)"usampler3D", (uint64_t)&v533);
      v532 = 1;
      v435 = sub_216B346C4(v434, "usamplerBuffer", (uint64_t)&v532);
      v531 = 1;
      v436 = sub_216B34654(v435, (uint64_t)"usamplerCube", (uint64_t)&v531);
      v530 = 1;
      v437 = sub_216B4A470(v436, (uint64_t)"usamplerCubeArray", (uint64_t)&v530);
      v529 = 1;
      v438 = sub_216B32938(v437, (uint64_t)"uvec2", (uint64_t)&v529);
      v528 = 1;
      v439 = sub_216B32938(v438, (uint64_t)"uvec3", (uint64_t)&v528);
      v527 = 1;
      v440 = sub_216B32938(v439, (uint64_t)"uvec4", (uint64_t)&v527);
      v526 = 1;
      v441 = sub_216B32858(v440, "varying", (uint64_t)&v526);
      v525 = 1;
      v442 = sub_216B32A18(v441, "vec2", (uint64_t)&v525);
      v524 = 1;
      v443 = sub_216B32A18(v442, "vec3", (uint64_t)&v524);
      v523 = 1;
      v444 = sub_216B32A18(v443, "vec4", (uint64_t)&v523);
      v522 = 1;
      v445 = sub_216B345E4(v444, (uint64_t)"writeonly", (uint64_t)&v522);
      v521 = 1;
      v446 = sub_216B32A7C(v445, (uint64_t)"kernel", (uint64_t)&v521);
      v520 = 1;
      v447 = sub_216B4A400(v446, "__attribute__", (uint64_t)&v520);
      v519 = 1;
      v448 = sub_216B32AEC(v447, "sample_f", (uint64_t)&v519);
      v518 = 1;
      v449 = sub_216B32AEC(v448, "sample_h", (uint64_t)&v518);
      v517 = 1;
      v450 = sub_216B345E4(v449, (uint64_t)"sampler_f", (uint64_t)&v517);
      v516 = 1;
      v451 = sub_216B345E4(v450, (uint64_t)"sampler_h", (uint64_t)&v516);
      v515 = 1;
      v452 = sub_216B32938(v451, (uint64_t)"hmat2", (uint64_t)&v515);
      v514 = 1;
      v453 = sub_216B32858(v452, "hmat2x2", (uint64_t)&v514);
      v513 = 1;
      v454 = sub_216B32858(v453, "hmat2x3", (uint64_t)&v513);
      v512 = 1;
      v455 = sub_216B32858(v454, "hmat2x4", (uint64_t)&v512);
      v511 = 1;
      v456 = sub_216B32938(v455, (uint64_t)"hmat3", (uint64_t)&v511);
      v510 = 1;
      v457 = sub_216B32858(v456, "hmat3x2", (uint64_t)&v510);
      v509 = 1;
      v458 = sub_216B32858(v457, "hmat3x3", (uint64_t)&v509);
      v508 = 1;
      v459 = sub_216B32858(v458, "hmat3x4", (uint64_t)&v508);
      v507 = 1;
      v460 = sub_216B32938(v459, (uint64_t)"hmat4", (uint64_t)&v507);
      v506 = 1;
      v461 = sub_216B32858(v460, "hmat4x2", (uint64_t)&v506);
      v505 = 1;
      v462 = sub_216B32858(v461, "hmat4x3", (uint64_t)&v505);
      v504 = 1;
      v463 = sub_216B32858(v462, "hmat4x4", (uint64_t)&v504);
      v503 = 1;
      v464 = sub_216B32A7C(v463, (uint64_t)"float2", (uint64_t)&v503);
      v502 = 1;
      v465 = sub_216B32A7C(v464, (uint64_t)"float3", (uint64_t)&v502);
      v501 = 1;
      v466 = sub_216B32A7C(v465, (uint64_t)"float4", (uint64_t)&v501);
      v500 = 1;
      v467 = sub_216B32938(v466, (uint64_t)"half2", (uint64_t)&v500);
      v499 = 1;
      v468 = sub_216B32938(v467, (uint64_t)"half3", (uint64_t)&v499);
      v498 = 1;
      v469 = sub_216B32938(v468, (uint64_t)"half4", (uint64_t)&v498);
      v497 = 1;
      v470 = sub_216B32AEC(v469, "float2x2", (uint64_t)&v497);
      v496 = 1;
      v471 = sub_216B32AEC(v470, "float3x3", (uint64_t)&v496);
      v495 = 1;
      v472 = sub_216B32AEC(v471, "float4x4", (uint64_t)&v495);
      v494 = 1;
      v473 = sub_216B32858(v472, "half2x2", (uint64_t)&v494);
      v493 = 1;
      v474 = sub_216B32858(v473, "half3x3", (uint64_t)&v493);
      v492 = 1;
      v475 = sub_216B32858(v474, "half4x4", (uint64_t)&v492);
      v491 = 1;
      v476 = sub_216B32AEC(v475, "hsampler", (uint64_t)&v491);
      v490 = 1;
      v477 = sub_216B328C8(v476, (uint64_t)"hsampler2D", (uint64_t)&v490);
      v489 = 1;
      v478 = sub_216B32AEC(v477, "__sample", (uint64_t)&v489);
      v488 = 1;
      v479 = sub_216B32858(v478, "__color", (uint64_t)&v488);
      v487 = 1;
      v480 = sub_216B32858(v479, "__table", (uint64_t)&v487);
      v486 = 1;
      v481 = sub_216B4A470(v480, (uint64_t)"__unknown_anytype", (uint64_t)&v486);
      v485 = 0;
      if (!sub_216B4AA54(v481, &v485))
        break;
      v482 = sub_216B1E600((uint64_t)&v956);
      if (v482 != sub_216B262E0((uint64_t)a3))
      {
        v483 = (char *)sub_216B1E600((uint64_t)&v956);
        v484 = (char *)sub_216B1E608(&v956);
        sub_216B202D8(a3, v483, v484);
      }
      LOBYTE(v955) = 95;
      sub_216B1FBBC((uint64_t)a3, &v955);
    }
  }
}

uint64_t sub_216B804D4(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v19[2];
  std::string v20;
  uint64_t v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = (uint64_t)a2;
  v25 = a3;
  v20.__r_.__value_.__r.__words[0] = sub_216B7CFC0((uint64_t)a1, (uint64_t)a2, a3, a4);
  if (v20.__r_.__value_.__r.__words[0])
  {
    LOBYTE(v23) = 0;
    v12 = &v20;
    v13 = (std::string *)&v23;
  }
  else
  {
    v14 = sub_216B1D1D4(1256);
    sub_216B4AED0(&v22);
    sub_216B5E970(v14, (uint64_t)a2, a3, v22, a4, a5, a6);
    v23 = v14;
    sub_216B26CA0(v21, a1[2] + 136);
    if (sub_216B274F0(v21[0], v21[1], a2, a3))
    {
      a1[37] = v14;
      sub_216B24898(&v24, (uint64_t)&v20);
      sub_216B26E7C((uint64_t)(a1 + 38), (uint64_t)&v20);
      std::string::~string(&v20);
    }
    if (!a4)
    {
      *(_QWORD *)sub_216B3C81C((uint64_t)(a1 + 41), v24, v25) = v14;
      if (!sub_216B25DD0(a1[2] + 136, v15) && !a1[36])
      {
        v16 = v24;
        v17 = v25;
        sub_216B26CA0(v19, a1[2] + 136);
        if (sub_216B274F0(v16, v17, v19[0], (size_t)v19[1]))
          a1[36] = v14;
      }
    }
    v20.__r_.__value_.__s.__data_[0] = 1;
    v12 = (std::string *)&v23;
    v13 = &v20;
  }
  return sub_216B310D8((uint64_t)v12, (uint64_t)v13);
}

uint64_t sub_216B80630(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_216B5EEBC(a1 + 112, &v3);
}

uint64_t *sub_216B80658(uint64_t a1, uint64_t *a2)
{
  return sub_216B85B38(a1, a2) + 1;
}

uint64_t sub_216B80670(uint64_t *a1, uint64_t a2)
{
  return sub_216B80678(a1, a2, 0);
}

uint64_t sub_216B80678(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47[2];
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[40];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v48 = a3;
  v49 = a2;
  v5 = (uint64_t)(a1 + 45);
  v47[0] = sub_216B80988((uint64_t)(a1 + 45), &v49);
  v47[1] = v6;
  v40 = sub_216B809EC(v5);
  v41 = v7;
  if (sub_216B50AF4(v47, (uint64_t)&v40))
  {
    v8 = sub_216B1E600((uint64_t)v47);
    v9 = (_QWORD *)sub_216B1E600(v8 + 8);
    v10 = sub_216B1E600((uint64_t)v47);
    v11 = sub_216B1E67C(v10 + 8);
    if (v9 == (_QWORD *)v11)
    {
      return 1;
    }
    else
    {
      v12 = (_QWORD *)v11;
      while (1)
      {
        if (sub_216B80A38(v9))
        {
          if (!a3)
            break;
          v14 = sub_216B6EFA4(v9, v13);
          if (sub_216B5ECB4(v14, a3))
            break;
        }
        if (++v9 == v12)
          return 1;
      }
      return 0;
    }
  }
  else
  {
    v16 = sub_216B5EE7C(v49);
    v46 = (_QWORD *)v16;
    sub_216B4C3E4(v50);
    v17 = (char *)sub_216B1E600(v16);
    sub_216B1E678((int)&v44, v17);
    v43 = &v48;
    while (1)
    {
      v42[0] = sub_216B80A78((uint64_t)(a1 + 48), (uint64_t *)&v46);
      v42[1] = v18;
      v40 = sub_216B65D94((uint64_t)(a1 + 48));
      v41 = v19;
      if (sub_216B50AF4(v42, (uint64_t)&v40))
        break;
      sub_216B268AC((uint64_t)v50, &v46);
      v44 = sub_216B290FC(v44, v45);
      v45 = v20;
      if (!sub_216B29094((uint64_t)&v44))
      {
        v21 = sub_216B2037C(*a1);
        v46 = sub_216B4FCC4(v21, v44, v45, 1);
        if (v46)
          continue;
      }
      goto LABEL_13;
    }
    v22 = *(_QWORD *)(sub_216B1E600((uint64_t)v42) + 8);
    if (sub_216B80ADC(&v43, v22))
    {
LABEL_15:
      v15 = 1;
    }
    else
    {
      v23 = v22;
      do
      {
        v24 = v23;
        if (sub_216B5EE40(v23))
          break;
        v23 = *(_QWORD *)(v24 + 32);
      }
      while (v23);
      if ((*(_WORD *)(v24 + 528) & 0x100) != 0)
      {
        v26 = sub_216B26878((uint64_t)v50) - 1;
        while (v26 != -1)
        {
          sub_216B29078(&v40);
          v27 = (uint64_t *)sub_216B4FBDC((uint64_t)v50, v26);
          v28 = (char *)sub_216B1E600(*v27);
          sub_216B1E678((int)v39, v28);
          v29 = sub_216B2933C(v39[0], v39[1]);
          sub_216B7DE80(v29, v30, (const void **)&v40);
          v32 = sub_216B7CFC0((uint64_t)a1, v29, v31, v22);
          if (!v32)
          {
            sub_216B2489C(&v40);
            goto LABEL_13;
          }
          v22 = v32;
          v33 = sub_216B80ADC(&v43, v32);
          sub_216B2489C(&v40);
          --v26;
          if (v33)
            goto LABEL_15;
        }
        sub_216B29078(&v40);
        v34 = (char *)sub_216B1E600(v49);
        sub_216B1E678((int)v38, v34);
        v35 = sub_216B2933C(v38[0], v38[1]);
        sub_216B7DE80(v35, v36, (const void **)&v40);
        v22 = sub_216B7CFC0((uint64_t)a1, v35, v37, v22);
        sub_216B2489C(&v40);
        if (v22)
          goto LABEL_21;
LABEL_13:
        v15 = 0;
        goto LABEL_22;
      }
LABEL_21:
      v15 = sub_216B80ADC(&v43, v22);
    }
LABEL_22:
    sub_216B1FF6C(v50);
  }
  return v15;
}

uint64_t sub_216B80988(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v6 = 0;
  if (!sub_216B850AC(a1, a2, &v6))
    return sub_216B809EC(a1);
  v3 = v6;
  v4 = sub_216B854C8(a1);
  sub_216B85A8C(&v7, v3, v4, 1);
  return v7;
}

uint64_t sub_216B809EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_216B854C8(a1);
  v3 = sub_216B854C8(a1);
  sub_216B85A8C(&v5, v2, v3, 1);
  return v5;
}

uint64_t sub_216B80A38(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v4;

  if (sub_216B7D878(a1) == 2)
    return 0;
  v4 = sub_216B6EFA4(a1, v2);
  return sub_216B5E8F8(v4);
}

uint64_t sub_216B80A78(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v6 = 0;
  if (!sub_216B65AA8(a1, a2, &v6))
    return sub_216B65D94(a1);
  v3 = v6;
  v4 = sub_216B5F664(a1);
  sub_216B65DE0(&v7, v3, v4, 1);
  return v7;
}

BOOL sub_216B80ADC(uint64_t **a1, uint64_t a2)
{
  uint64_t v5;

  if ((sub_216B5E8F8(a2) & 1) != 0)
    return 0;
  v5 = **a1;
  return !v5 || sub_216B5ECB4(a2, v5);
}

uint64_t sub_216B80B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = a1 + 328;
  v7 = sub_216B5F200((_QWORD *)(a1 + 328), a2, a3);
  v6 = sub_216B5DEE8(v3);
  if (!sub_216B3760C(&v7, &v6))
    return 0;
  v4 = sub_216B3C9C8((uint64_t)&v7);
  return *(_QWORD *)sub_216B3DBD0(v4);
}

uint64_t sub_216B80B94(uint64_t *a1, const void *a2, size_t a3, _QWORD *a4, char a5, uint64_t a6)
{
  int v13;

  sub_216B80C10(&v13);
  LOBYTE(v13) = v13 & 0xFE | a5;
  return sub_216B80C14(a1, a2, a3, a4, v13, a6);
}

uint64_t sub_216B80C14(uint64_t *a1, const void *a2, size_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  unint64_t v15;
  char *v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  uint64_t v63;
  char v65;
  uint64_t v66[2];
  const void *v67[7];
  uint64_t v68[2];
  const void *v69[2];
  uint64_t v70[4];
  _QWORD v71[2];
  uint64_t v72[2];
  int v73;
  uint64_t v74;
  uint64_t v75[3];
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  __int128 v79;
  const void *v80[2];
  uint64_t v81;
  const void *v82;
  size_t v83;
  std::string v84;
  _OWORD v85[9];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v82 = a2;
  v83 = a3;
  v12 = sub_216B7CFC0((uint64_t)a1, (uint64_t)a2, a3, a6);
  if (!v12)
  {
    v13 = a5;
    v14 = (_DWORD *)sub_216B2037C(*a1);
    if (a6)
    {
      v15 = sub_216B7DE34((_DWORD **)a1, a6);
    }
    else
    {
      v45 = sub_216B2037C(*a1);
      v76 = sub_216B50944(v45, (uint64_t)a4);
      v77 = v46;
      v47 = sub_216B2933C(v76, v46);
      if (sub_216B2B2F0(v47, v48, a2, a3))
        return 0;
      v49 = (uint64_t *)sub_216B25FB0((uint64_t)v85, (uint64_t)&v76);
      if (!sub_216B29648(v49))
        return 0;
      v75[0] = sub_216B290FC(v76, v77);
      v75[1] = v50;
      v81 = (uint64_t)sub_216B4FCC4((uint64_t)v14, v75[0], v50, 1);
      if (!v81)
        return 0;
      sub_216B813A0((uint64_t)(a1 + 51), &v81, (uint64_t)v85);
      sub_216B4F784(v70, v85);
      sub_216B81410((uint64_t)(a1 + 51), (uint64_t)&v84);
      sub_216B4F784(v85, &v84);
      if (sub_216B61E30(v70, (uint64_t)v85))
      {
        sub_216B1E678((int)v80, ".framework");
        v51 = sub_216B4A164(v75, v80[0], (size_t)v80[1]);
        v52 = sub_216B6ECC8(a1[4], v81, v51);
        if (v52)
        {
          sub_216B81458(a1, v52, a5 & 1);
          sub_216B813A0((uint64_t)(a1 + 51), &v81, (uint64_t)&v84);
          sub_216B4F784(v85, &v84);
          *(_OWORD *)v70 = v85[0];
        }
        sub_216B81410((uint64_t)(a1 + 51), (uint64_t)&v84);
        sub_216B4F784(v85, &v84);
        if (sub_216B61E30(v70, (uint64_t)v85))
        {
          sub_216B81760(&v84);
          sub_216B81750((uint64_t)&v81, (uint64_t)&v84, (uint64_t)v85);
          sub_216B81694((uint64_t)(a1 + 51), (uint64_t *)v85, (uint64_t)v67);
          sub_216B4F784(&v79, v67);
          *(_OWORD *)v70 = v79;
          sub_216B81764((uint64_t)v85);
          sub_216B81768(&v84);
        }
      }
      if ((*(_BYTE *)(sub_216B1E600((uint64_t)v70) + 8) & 1) == 0)
        return 0;
      *(_QWORD *)&v85[0] = sub_216B2933C(v76, v77);
      *((_QWORD *)&v85[0] + 1) = v53;
      v54 = sub_216B1E600((uint64_t)v70);
      v55 = sub_216B1E600(v54 + 24);
      v56 = sub_216B1E600((uint64_t)v70);
      v57 = sub_216B1E67C(v56 + 24);
      v58 = sub_216B8176C(v55, v57, (uint64_t)v85);
      v59 = sub_216B1E600((uint64_t)v70);
      v60 = sub_216B1E67C(v59 + 24);
      v65 = *(_BYTE *)(sub_216B1E600((uint64_t)v70) + 12);
      v61 = *(_BYTE *)(sub_216B1E600((uint64_t)v70) + 12);
      v62 = *(_BYTE *)(sub_216B1E600((uint64_t)v70) + 12);
      v63 = sub_216B1E600((uint64_t)v70);
      if (v58 != v60)
        return 0;
      v15 = *(_QWORD *)(v63 + 16);
      v13 = v65 & 1 | a5 & 0xF9 | (v61 | a5) & 2 | (v62 | a5) & 4;
    }
    v16 = (char *)sub_216B1E600((uint64_t)a4);
    sub_216B1E678((int)v78, v16);
    sub_216B2A0B0(v85, v78[0], v78[1]);
    sub_216B25FA8((uint64_t)&v84, "Headers");
    sub_216B341F4((uint64_t)&v82, (uint64_t)".h", (uint64_t)v67);
    sub_216B25FA8((uint64_t)&v76, &byte_216C19659);
    sub_216B25FA8((uint64_t)v75, &byte_216C19659);
    sub_216B28DE8((const void **)v85, (uint64_t *)&v84, (uint64_t *)v67, &v76, v75);
    v17 = (const void *)sub_216B28180((uint64_t)v85);
    v81 = sub_216B50040(v14, v17, v18, 0, 1);
    if (v81)
    {
      v19 = sub_216B1D1D4(1256);
      v20 = (uint64_t)v82;
      v21 = v83;
      sub_216B4AED0(&v73);
      sub_216B5E970(v19, v20, v21, v73, a6, 1, 0);
      v74 = v19;
      *sub_216B61D98((uint64_t)(a1 + 54), &v74) = v15;
      *(_WORD *)(v74 + 528) |= 0x80u;
      sub_216B26CA0(v72, a1[2] + 136);
      if (sub_216B274F0(v72[0], v72[1], v82, v83))
      {
        a1[37] = v74;
        sub_216B24898(&v82, (uint64_t)&v84);
        sub_216B26E7C((uint64_t)(a1 + 38), (uint64_t)&v84);
        std::string::~string(&v84);
      }
      v22 = v74;
      *(_WORD *)(v74 + 528) |= ((_WORD)v13 << 9) & 0x800 | (unsigned __int16)(32 * (v13 & 3));
      if (!a6)
      {
        *(_QWORD *)sub_216B3C81C((uint64_t)(a1 + 41), (uint64_t)v82, v83) = v22;
        v22 = v74;
      }
      sub_216B817D0((uint64_t *)(v22 + 40), &v81);
      v23 = sub_216B80658((uint64_t)(a1 + 45), &v81);
      sub_216B7D4E0(&v84, v74, 0);
      sub_216B268AC((uint64_t)v23, &v84);
      v24 = v74;
      v84.__r_.__value_.__r.__words[0] = sub_216B5EE7C(v81);
      *sub_216B61D98((uint64_t)(a1 + 48), (uint64_t *)&v84) = v24;
      v25 = v74 + 584;
      sub_216B7CD38(&v84, 0, 1);
      sub_216B268AC(v25, &v84);
      *(_WORD *)(v74 + 528) |= 0x500u;
      sub_216B27D74(&v79);
      v26 = (char *)sub_216B1E600((uint64_t)a4);
      sub_216B1E678((int)v71, v26);
      sub_216B2A0B0(&v84, v71[0], v71[1]);
      sub_216B25FA8((uint64_t)v67, "Frameworks");
      v27 = (unint64_t)&byte_216C19659;
      sub_216B25FA8((uint64_t)&v76, &byte_216C19659);
      sub_216B25FA8((uint64_t)v75, &byte_216C19659);
      sub_216B25FA8((uint64_t)v70, &byte_216C19659);
      sub_216B28DE8((const void **)&v84.__r_.__value_.__l.__data_, (uint64_t *)v67, &v76, v75, v70);
      sub_216B2929C((uint64_t)&v84);
      v76 = sub_216B24850((uint64_t)&v84);
      v77 = v28;
      sub_216B25FB0((uint64_t)v67, (uint64_t)&v76);
      sub_216B6AB74(v75, v67, &v79);
      sub_216B6AB90((uint64_t)v70);
      if (sub_216B6AB78(v75, v70))
      {
        do
        {
          if (sub_216B27BAC(&v79))
            break;
          v29 = sub_216B6AB98((uint64_t)v75);
          v31 = nullsub_1(v29, v30);
          sub_216B26CA0(v67, v31);
          sub_216B1E678((int)v69, ".framework");
          if (sub_216B4A164(v67, v69[0], (size_t)v69[1]))
          {
            v32 = sub_216B6AB98((uint64_t)v75);
            v34 = nullsub_1(v32, v33);
            sub_216B26CA0(v68, v34);
            v35 = sub_216B4FCC4((uint64_t)v14, v68[0], v68[1], 1);
            if (v35)
            {
              v36 = v35;
              v76 = sub_216B50944((uint64_t)v14, (uint64_t)v35);
              v77 = v37;
              while (1)
              {
                v76 = sub_216B290FC(v76, v77);
                v77 = v38;
                if (sub_216B29094((uint64_t)&v76))
                  break;
                if (sub_216B4FCC4((uint64_t)v14, v76, v77, 1) == a4)
                {
                  sub_216B29078(v67);
                  v39 = sub_216B6AB98((uint64_t)v75);
                  v41 = nullsub_1(v39, v40);
                  sub_216B26CA0(v66, v41);
                  v42 = sub_216B2933C(v66[0], v66[1]);
                  sub_216B7DE80(v42, v43, v67);
                  v27 = a5 & 0xFFFFFF00 | (unint64_t)v13 | v27 & 0xFFFFFFFF00000000;
                  sub_216B80C14(a1, v42, v44, v36, v27, v74);
                  sub_216B2489C(v67);
                  break;
                }
              }
            }
          }
          sub_216B6AF7C((uint64_t)v75, (uint64_t *)&v79);
        }
        while ((sub_216B6AB78(v75, v70) & 1) != 0);
      }
      sub_216B6AB94(v70);
      sub_216B6AB94(v75);
      if ((sub_216B81808(v74) & 1) == 0)
        sub_216B81824(v74, (uint64_t)a4, v14);
      v12 = v74;
      sub_216B2489C(&v84);
    }
    else
    {
      v12 = 0;
    }
    sub_216B2489C(v85);
  }
  return v12;
}

uint64_t sub_216B813A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!sub_216B86104(a1, a2, &v8))
    return sub_216B81410(a1, a3);
  v5 = v8;
  v6 = sub_216B85824(a1);
  return sub_216B8613C(a3, v5, v6, 1);
}

uint64_t sub_216B81410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_216B85824(a1);
  v5 = sub_216B85824(a1);
  return sub_216B8613C(a2, v4, v5, 1);
}

BOOL sub_216B81458(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v19[2];
  const void *v20[2];
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24[2];
  uint64_t v25;
  _BYTE v26[240];
  _BYTE v27[408];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v25 = a2;
  v5 = (uint64_t)(a1 + 60);
  sub_216B61DC0((uint64_t)(a1 + 60), &v25, (uint64_t)v24);
  sub_216B61AA0(v5, (uint64_t)v26);
  sub_216B4F784(v27, v26);
  if (sub_216B50AF4(v24, (uint64_t)v27))
    return *(_BYTE *)(sub_216B1E600((uint64_t)v24) + 8) != 0;
  v7 = *a1;
  v8 = v25;
  sub_216B4AED0(&v23);
  v9 = sub_216B84BE4(v7, v8, v23, a3, 0, 0);
  if (sub_216B604C8(*a1, v9, 0))
  {
    v10 = sub_216B5EE7C(v25);
    v11 = (char *)sub_216B1E600(v10);
    sub_216B1E678((int)&v21, v11);
    v12 = sub_216B2930C(v21, v22);
    v14 = v13;
    sub_216B1E678((int)v20, "Modules");
    if (sub_216B274F0(v12, v14, v20[0], (size_t)v20[1]))
    {
      v21 = sub_216B290FC(v21, v22);
      v22 = v15;
      sub_216B1E678((int)v19, ".framework");
      if (sub_216B4A164(&v21, v19[0], (size_t)v19[1]))
      {
        v16 = sub_216B2037C(*a1);
        v10 = (uint64_t)sub_216B4FCC4(v16, v21, v22, 1);
      }
    }
    v17 = sub_216B604C8(*a1, v9, 0);
    sub_216B70A08((uint64_t)v27, v9, v17, *a1, (uint64_t)(a1 + 6));
    sub_216B84C44((uint64_t)v26, (uint64_t)v27, *a1, a1[3], a1[1], (uint64_t)a1, v25, v10, a1[5], a3);
    v6 = sub_216B84B34((uint64_t)v26);
    *(_BYTE *)sub_216B6EA3C(v5, &v25) = v6;
    sub_216B84C58((uint64_t)v26);
    sub_216B70F34(v27);
  }
  else
  {
    v6 = 1;
    *(_BYTE *)sub_216B6EA3C(v5, &v25) = 1;
  }
  return v6;
}

uint64_t sub_216B81694@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v11;
  _BYTE v12[16];
  uint64_t *v13;

  v13 = 0;
  if (sub_216B86104(a1, a2, &v13))
  {
    v6 = v13;
    v7 = sub_216B85824(a1);
    sub_216B8613C(v12, v6, v7, 1);
    v11 = 0;
  }
  else
  {
    v8 = sub_216B86610(a1, a2, (uint64_t)(a2 + 1), v13);
    v13 = v8;
    v9 = sub_216B85824(a1);
    sub_216B8613C(v12, v8, v9, 1);
    v11 = 1;
  }
  return sub_216B4F70C((uint64_t)v12, (uint64_t)&v11, a3);
}

uint64_t sub_216B81750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216B86310(a3, a1, a2);
}

uint64_t sub_216B8176C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v6 = j_j_nullsub_1(a1);
  v7 = j_j_nullsub_1(a2);
  v8 = sub_216B5F740(v6, v7, a3, (uint64_t)&v10);
  return sub_216B20710(a1, v8);
}

uint64_t *sub_216B817D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(*a2, a2);
  sub_216B85668(a1, v3, 1);
  return a1;
}

uint64_t sub_216B81808(uint64_t a1)
{
  uint64_t v1;

  if ((*(_WORD *)(a1 + 528) & 8) != 0 && (v1 = *(_QWORD *)(a1 + 32)) != 0)
    return sub_216B84638(v1);
  else
    return 0;
}

uint64_t sub_216B81824(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char *v6;
  const void *v7;
  size_t v8;
  std::string v10;
  uint64_t v11[3];
  uint64_t v12[3];
  uint64_t v13[3];
  uint64_t v14[2];
  const void *v15[19];

  sub_216B295EC(v15);
  v6 = (char *)sub_216B1E600(a2);
  sub_216B1E678((int)v14, v6);
  sub_216B341A4(v15, v14[0], v14[1]);
  sub_216B25FAC((uint64_t)&v10, a1);
  sub_216B25FA8((uint64_t)v13, &byte_216C19659);
  sub_216B25FA8((uint64_t)v12, &byte_216C19659);
  sub_216B25FA8((uint64_t)v11, &byte_216C19659);
  sub_216B28DE8(v15, (uint64_t *)&v10, v13, v12, v11);
  v7 = (const void *)sub_216B28180((uint64_t)v15);
  if (sub_216B50040(a3, v7, v8, 0, 1))
  {
    sub_216B848E4(&v10, a1, 1);
    sub_216B5EFC4((_QWORD *)(a1 + 1096), (uint64_t)&v10);
    j_std::string::~string(&v10);
  }
  return sub_216B2489C(v15);
}

uint64_t *sub_216B8192C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  v5 = sub_216B80658(a1 + 360, &v8);
  sub_216B7D4E0(&v7, a2, 0);
  sub_216B268AC((uint64_t)v5, &v7);
  sub_216B817D0((uint64_t *)(a2 + 40), &v8);
  v7 = sub_216B5EE7C(v8);
  result = sub_216B61D98(a1 + 384, &v7);
  *result = a2;
  return result;
}

uint64_t *sub_216B819B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v6;

  v6 = a3;
  sub_216B81A00((uint64_t *)(a2 + 40), &v6);
  result = sub_216B61D98(a1 + 384, &v6);
  *result = a2;
  return result;
}

uint64_t *sub_216B81A00(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = j_nullsub_1(*a2, a2);
  sub_216B86898(a1, v3);
  return a1;
}

uint64_t sub_216B81A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a3;
  if ((_DWORD)a4 == 1)
  {
    v7 = a2 + 328;
LABEL_6:
    sub_216B268AC(v7, &v12);
    v8 = sub_216B7D9A0(a2) == *(_QWORD *)(a1 + 288);
    sub_216B6E71C(*(_QWORD *)(a1 + 32), v12, a4, v8);
    goto LABEL_7;
  }
  if ((_DWORD)a4 != 2)
  {
    v7 = a2 + 248;
    goto LABEL_6;
  }
  sub_216B268AC(a2 + 288, &v12);
LABEL_7:
  v9 = sub_216B80658(a1 + 360, &v12);
  sub_216B7D4E0(&v11, a2, a4);
  return sub_216B268AC((uint64_t)v9, &v11);
}

unint64_t sub_216B81AF0(_DWORD **a1, uint64_t a2)
{
  int *v3;
  _DWORD *v5;
  unsigned int v6;

  v3 = (int *)(a2 + 24);
  if (sub_216B4B4A8((_DWORD *)(a2 + 24)))
    return 0;
  v5 = *a1;
  v6 = sub_216B60454(v5, *v3);
  return sub_216B81B44((uint64_t)v5, v6);
}

unint64_t sub_216B81B44(uint64_t a1, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;

  v6 = 0;
  v2 = (_DWORD *)sub_216B606F0(a1, a2, &v6);
  if (v6)
    return 0;
  v3 = (uint64_t)v2;
  if (!sub_216B6081C(v2))
    return 0;
  v4 = sub_216B3DBD0(v3);
  result = sub_216B60834(v4);
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_216B81BA4(uint64_t a1, unsigned int a2)
{
  return sub_216B1E600(a1) + 88 * a2;
}

uint64_t sub_216B81BCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_216B1E600((uint64_t)a1);
  v3 = sub_216B1E67C((uint64_t)a1);
  result = sub_216B5F41C(v2, v3);
  a1[1] = *a1;
  return result;
}

uint64_t sub_216B81C0C(uint64_t a1, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  char v6;
  unsigned int v7;

  v6 = 0;
  v2 = (_DWORD *)sub_216B606F0(a1, a2, &v6);
  if (v6 || (v3 = (uint64_t)v2, (sub_216B6081C(v2) & 1) == 0))
  {
    sub_216B4AED0(&v7);
    return v7;
  }
  else
  {
    v4 = (unsigned int *)sub_216B3DBD0(v3);
    return sub_216B62D6C(v4);
  }
}

uint64_t sub_216B81C6C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  const void *v30;
  _BYTE v31[16];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[82];
  char v35;
  _BYTE v36[16];
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51[6];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)(a1 + 208);
  while (1)
  {
    while (1)
    {
      v3 = sub_216B62CF0((uint64_t)v2);
      sub_216B82088((uint64_t)v2);
      sub_216B70D84(v51);
      sub_216B70D88(*(_QWORD *)a1, (uint64_t)v51);
      LODWORD(v34[0]) = sub_216B1E4E0(v51);
      *(_DWORD *)(a1 + 212) = sub_216B1E4E0((unsigned int *)v34);
      v4 = sub_216B71644((uint64_t)v51);
      if (v4 > 12)
        break;
      if (v4 != 5)
      {
        if (v4 == 1)
        {
          v10 = 3;
          goto LABEL_26;
        }
        if (v4 == 7)
        {
          v52 = sub_216B71184((uint64_t)v51);
          v53 = v11;
          *(_QWORD *)(a1 + 224) = sub_216B1E600((uint64_t)&v52);
          *(_DWORD *)(a1 + 216) = sub_216B1E67C((uint64_t)&v52);
          sub_216B32854(v34, v52, v53);
          LODWORD(v32[0]) = 1;
          v12 = sub_216B4A400((uint64_t)v34, "config_macros", (uint64_t)v32);
          v50 = 2;
          v13 = sub_216B32AEC(v12, "conflict", (uint64_t)&v50);
          v49 = 7;
          v14 = sub_216B32858(v13, "exclude", (uint64_t)&v49);
          v48 = 8;
          v15 = sub_216B32AEC(v14, "explicit", (uint64_t)&v48);
          v47 = 9;
          v16 = sub_216B32A7C(v15, (uint64_t)"export", (uint64_t)&v47);
          v46 = 10;
          v17 = sub_216B32A7C(v16, (uint64_t)"extern", (uint64_t)&v46);
          v45 = 11;
          v18 = sub_216B345E4(v17, (uint64_t)"framework", (uint64_t)&v45);
          v44 = 4;
          v19 = sub_216B32A7C(v18, (uint64_t)"header", (uint64_t)&v44);
          v43 = 12;
          v20 = sub_216B32A18(v19, "link", (uint64_t)&v43);
          v42 = 13;
          v21 = sub_216B32A7C(v20, (uint64_t)"module", (uint64_t)&v42);
          v41 = 15;
          v22 = sub_216B32858(v21, "private", (uint64_t)&v41);
          v40 = 18;
          v23 = sub_216B32AEC(v22, "requires", (uint64_t)&v40);
          v39 = 16;
          v24 = sub_216B32AEC(v23, "umbrella", (uint64_t)&v39);
          v38 = 17;
          v25 = sub_216B329A8(v24, (unsigned __int16 *)"use", (uint64_t)&v38);
          v37 = 5;
          *(_DWORD *)(a1 + 208) = sub_216B32B50(v25, &v37);
          return v3;
        }
        goto LABEL_16;
      }
    }
    if (v4 > 18)
      break;
    if (v4 == 13)
    {
      if (sub_216B820A0((uint64_t)v51))
      {
        v5 = *(_QWORD *)(a1 + 24);
        v6 = sub_216B1E4E0(v51);
        sub_216B4CD2C(v5, v6, 19, (uint64_t)v36);
        v7 = v36;
        goto LABEL_17;
      }
      sub_216B5E6A8(&v52);
      sub_216B6E0CC(v33, (uint64_t)v51);
      sub_216B820AC(v34, v33[0], v33[1], *(_QWORD *)(a1 + 8), &v52, *(_QWORD *)(a1 + 16), 0);
      if (!v35)
      {
        v27 = sub_216B7A6E0((uint64_t)v34);
        v28 = (void *)sub_216B3D300(a1 + 72, v27 + 1);
        v32[0] = sub_216B820B0((uint64_t)v34);
        v32[1] = v29;
        v30 = (const void *)sub_216B1E600((uint64_t)v32);
        memcpy(v28, v30, v27);
        *((_BYTE *)v28 + v27) = 0;
        *(_DWORD *)(a1 + 208) = 20;
        *(_QWORD *)(a1 + 224) = v28;
        *(_DWORD *)(a1 + 216) = v27;
        sub_216B820FC((uint64_t)v34);
        sub_216B77314(&v52);
        return v3;
      }
      sub_216B820FC((uint64_t)v34);
      sub_216B77314(&v52);
    }
    else
    {
LABEL_16:
      v8 = *(_QWORD *)(a1 + 24);
      v9 = sub_216B1E4E0(v51);
      sub_216B4CD2C(v8, v9, 689, (uint64_t)v31);
      v7 = v31;
LABEL_17:
      sub_216B4B3B4(v7);
      *(_BYTE *)(a1 + 65) = 1;
    }
  }
  switch(v4)
  {
    case 19:
      v10 = 23;
      goto LABEL_26;
    case 20:
      v10 = 24;
      goto LABEL_26;
    case 21:
    case 22:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_16;
    case 23:
      v10 = 21;
      goto LABEL_26;
    case 24:
      v10 = 22;
      goto LABEL_26;
    case 25:
      v10 = 14;
      goto LABEL_26;
    case 30:
      v10 = 19;
      goto LABEL_26;
    default:
      if (v4 != 40)
      {
        if (v4 == 64)
        {
          *v2 = 0;
          return v3;
        }
        goto LABEL_16;
      }
      v10 = 6;
LABEL_26:
      *v2 = v10;
      return v3;
  }
}

double sub_216B82088(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 3;
  *(_QWORD *)a1 = 3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_216B820A0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 18) >> 5) & 1;
}

uint64_t sub_216B820B0(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v2 = sub_216B262E0(a1 + 48);
  v3 = sub_216B7A6E0(a1);
  sub_216B1E684(&v5, v2, v3);
  return v5;
}

uint64_t sub_216B82100(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  _DWORD *v6;

  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = (_DWORD *)(result + 208);
  while (2)
  {
    switch(*v6)
    {
      case 0x15:
        result = sub_216B8221C(v6, a2);
        if (!(_DWORD)result || v5 || v4)
        {
          ++v5;
          goto LABEL_23;
        }
        return result;
      case 0x16:
        if (v5)
        {
          --v5;
          goto LABEL_23;
        }
        result = sub_216B8221C(v6, a2);
        if ((result & 1) == 0)
          goto LABEL_20;
        return result;
      case 0x17:
        result = sub_216B8221C(v6, a2);
        if (!(_DWORD)result || v5 || v4)
        {
          ++v4;
          goto LABEL_23;
        }
        return result;
      case 0x18:
        if (v4)
        {
          --v4;
          goto LABEL_23;
        }
        result = sub_216B8221C(v6, a2);
        if ((result & 1) == 0)
        {
          v4 = 0;
          goto LABEL_23;
        }
        return result;
      default:
        if (*v6 == 3)
          return result;
        if (v5 | v4)
          goto LABEL_23;
        result = sub_216B8221C(v6, a2);
        if ((result & 1) == 0)
        {
          v4 = 0;
LABEL_20:
          v5 = 0;
LABEL_23:
          result = sub_216B81C6C(v3);
          continue;
        }
        return result;
    }
  }
}

BOOL sub_216B8221C(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

uint64_t sub_216B8222C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  _BYTE v9[20];
  int v10;
  _QWORD v11[2];
  _BYTE v12[24];
  std::string v13;

  sub_216B82328(a2);
  v4 = a1 + 208;
  while (sub_216B8221C((_DWORD *)(a1 + 208), 5) || sub_216B8221C((_DWORD *)(a1 + 208), 20))
  {
    v11[0] = sub_216B823C4(a1 + 208);
    v11[1] = v5;
    v10 = sub_216B62CF0(a1 + 208);
    sub_216B5FE94((uint64_t)v11, (uint64_t)&v10, (uint64_t)v12);
    sub_216B823F0((uint64_t)&v13, (uint64_t)v12);
    sub_216B82368(a2, (uint64_t)&v13);
    j_std::string::~string(&v13);
    sub_216B81C6C(a1);
    if (!sub_216B8221C((_DWORD *)(a1 + 208), 14))
      return 0;
    sub_216B81C6C(a1);
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = sub_216B62CF0(v4);
  sub_216B4CD2C(v7, v8, 672, (uint64_t)v9);
  sub_216B4B3B4(v9);
  return 1;
}

void sub_216B82328(_QWORD *a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)sub_216B1E600((uint64_t)a1);
  v3 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B5F388(v2, v3);
  a1[1] = *a1;
}

uint64_t sub_216B82368(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B868C0(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B869AC(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 32;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216B823C4(uint64_t a1)
{
  uint64_t v2;

  sub_216B1E684(&v2, *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 8));
  return v2;
}

uint64_t sub_216B823F4(uint64_t a1)
{
  _DWORD *v2;
  uint64_t result;
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  const char *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  _BOOL4 v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  _BYTE v63[16];
  _BYTE v64[16];
  _BYTE v65[20];
  unsigned int v66;
  _BYTE v67[16];
  _BYTE v68[16];
  _BYTE v69[20];
  _BYTE v70[4];
  _BYTE v71[16];
  std::string v72;
  uint64_t v73[2];
  uint64_t v74[2];
  uint64_t v75[2];
  uint64_t v76[2];
  _BYTE v77[16];
  _BYTE v78[20];
  unsigned int data;
  _QWORD v80[12];

  v80[11] = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD *)(a1 + 208);
  if (sub_216B8221C((_DWORD *)(a1 + 208), 10))
    return sub_216B82C70(a1);
  sub_216B4AED0(&data);
  v4 = sub_216B8221C(v2, 8);
  if (v4)
    data = sub_216B81C6C(a1);
  v5 = sub_216B8221C(v2, 11);
  if (v5)
    sub_216B81C6C(a1);
  if (!sub_216B8221C(v2, 13))
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = sub_216B62CF0((uint64_t)v2);
    sub_216B4CD2C(v6, v7, 671, (uint64_t)v78);
    sub_216B4B3B4(v78);
    result = sub_216B81C6C(a1);
    *(_BYTE *)(a1 + 65) = 1;
    return result;
  }
  sub_216B81C6C(a1);
  if (sub_216B8221C(v2, 19))
    return sub_216B82E8C(a1, v5, v4);
  sub_216B5E8EC(v80);
  if (sub_216B8222C(a1, v80))
    goto LABEL_37;
  v8 = *(_QWORD *)(a1 + 232);
  v9 = sub_216B5EAC4((uint64_t)v80);
  if (v8)
  {
    if (v9 >= 2)
    {
      v10 = *(_QWORD *)(a1 + 24);
      v11 = sub_216B262E0((uint64_t)v80);
      sub_216B4CD2C(v10, *(unsigned int *)(v11 + 24), 685, (uint64_t)&v72);
      LODWORD(v10) = *(_DWORD *)(sub_216B262E0((uint64_t)v80) + 24);
      v12 = sub_216B832F4((uint64_t)v80);
      sub_216B746DC(v75, v10, *(_DWORD *)(v12 + 24));
      sub_216B7A280(&v72, v75);
      v13 = &v72;
      goto LABEL_36;
    }
  }
  else
  {
    v14 = !v4;
    if (v9 != 1)
      v14 = 1;
    if ((v14 & 1) == 0)
    {
      sub_216B4CD2C(*(_QWORD *)(a1 + 24), data, 676, (uint64_t)v77);
      sub_216B4B3B4(v77);
      sub_216B4AED0(&v72);
      v4 = 0;
      data = v72.__r_.__value_.__l.__data_;
      *(_BYTE *)(a1 + 65) = 1;
    }
  }
  v15 = *(_QWORD *)(a1 + 232);
  if ((unint64_t)sub_216B5EAC4((uint64_t)v80) >= 2)
  {
    *(_QWORD *)(a1 + 232) = 0;
    v16 = sub_216B5EAC4((uint64_t)v80);
    v17 = 0;
    v18 = v16 - 1;
    if (v16 != 1)
    {
      v19 = 0;
      while (1)
      {
        v20 = *(_QWORD *)(a1 + 32);
        v21 = sub_216B5F868((uint64_t)v80, v19);
        sub_216B26CA0(v76, v21);
        v22 = sub_216B7CFC0(v20, v76[0], v76[1], *(_QWORD *)(a1 + 232));
        if (!v22)
          break;
        if (!v19)
          v17 = v22;
        *(_QWORD *)(a1 + 232) = v22;
        if (v18 == ++v19)
          goto LABEL_26;
      }
      if (!*(_QWORD *)(a1 + 232))
      {
        v59 = *(_QWORD *)(a1 + 24);
        v60 = sub_216B5F868((uint64_t)v80, v19);
        sub_216B4CD2C(v59, *(unsigned int *)(v60 + 24), 672, (uint64_t)v71);
        v13 = (std::string *)v71;
        goto LABEL_36;
      }
      v31 = *(_QWORD *)(a1 + 24);
      v32 = sub_216B5F868((uint64_t)v80, v19);
      sub_216B4CD2C(v31, *(unsigned int *)(v32 + 24), 681, (uint64_t)v75);
      v33 = sub_216B5F868((uint64_t)v80, v19);
      sub_216B26CA0(v74, v33);
      v34 = sub_216B4B340(v75, v74[0], v74[1]);
      v35 = sub_216B7D9A0(*(_QWORD *)(a1 + 232));
      sub_216B5ECE8(v35, &v72);
      sub_216B26CA0(v73, &v72);
      sub_216B4B340(v34, v73[0], v73[1]);
      std::string::~string(&v72);
      goto LABEL_35;
    }
LABEL_26:
    v23 = *(_QWORD *)(a1 + 40);
    if (v23 != sub_216B81AF0(*(_DWORD ***)(a1 + 32), v17))
      sub_216B8330C(*(_QWORD *)(a1 + 32), v17, *(_QWORD *)(a1 + 40));
  }
  v24 = sub_216B832F4((uint64_t)v80);
  sub_216B26CA0(&v72, v24);
  v25 = *(unsigned int *)(sub_216B832F4((uint64_t)v80) + 24);
  sub_216B80C10(v70);
  sub_216B83348(a1, v70);
  if (!sub_216B8221C(v2, 21))
  {
    v29 = *(_QWORD *)(a1 + 24);
    v30 = sub_216B62CF0((uint64_t)v2);
    sub_216B4CD2C(v29, v30, 666, (uint64_t)v75);
    sub_216B4B340(v75, (uint64_t)v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
LABEL_35:
    v13 = (std::string *)v75;
    goto LABEL_36;
  }
  v26 = sub_216B81C6C(a1);
  v27 = sub_216B7CFC0(*(_QWORD *)(a1 + 32), (uint64_t)v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_, *(_QWORD *)(a1 + 232));
  if (!v27)
  {
    v36 = sub_216B804D4(*(_QWORD **)(a1 + 32), v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_, *(_QWORD *)(a1 + 232), v5, v4);
    *(_QWORD *)(a1 + 232) = v36;
    *(_DWORD *)(v36 + 24) = v25;
    v37 = v70[0];
    if ((v70[0] & 1) != 0 || *(_BYTE *)(a1 + 64))
      *(_WORD *)(*(_QWORD *)(a1 + 232) + 528) |= 0x20u;
    if ((v37 & 2) != 0)
      *(_WORD *)(*(_QWORD *)(a1 + 232) + 528) |= 0x40u;
    while (1)
    {
      switch(*v2)
      {
        case 1:
          sub_216B835AC(a1);
          continue;
        case 2:
          sub_216B8373C(a1);
          continue;
        case 3:
        case 0x16:
          if (sub_216B8221C(v2, 22))
          {
            sub_216B81C6C(a1);
          }
          else
          {
            v48 = *(_QWORD *)(a1 + 24);
            v49 = sub_216B62CF0((uint64_t)v2);
            sub_216B4CD2C(v48, v49, 673, (uint64_t)v64);
            sub_216B4B3B4(v64);
            sub_216B4CD2C(*(_QWORD *)(a1 + 24), v26, 824, (uint64_t)v63);
            sub_216B4B3B4(v63);
            *(_BYTE *)(a1 + 65) = 1;
          }
          v50 = *(_QWORD *)(a1 + 232);
          if ((*(_WORD *)(v50 + 528) & 8) != 0)
          {
            v51 = sub_216B81808(*(_QWORD *)(a1 + 232));
            v50 = *(_QWORD *)(a1 + 232);
            if ((v51 & 1) == 0)
            {
              v52 = sub_216B29084((_QWORD *)(v50 + 1096));
              v50 = *(_QWORD *)(a1 + 232);
              if (v52)
              {
                v53 = *(_QWORD *)(a1 + 48);
                v54 = (_DWORD *)sub_216B2037C(*(_QWORD *)(a1 + 8));
                sub_216B81824(v50, v53, v54);
                v50 = *(_QWORD *)(a1 + 232);
              }
            }
          }
          if ((*(_WORD *)(v50 + 528) & 3) == 0 && *(_QWORD *)(v50 + 32))
          {
            v55 = sub_216B7D9A0(v50);
            sub_216B5F024(v55, 0);
            v56 = (_QWORD *)(sub_216B7D9A0(*(_QWORD *)(a1 + 232)) + 368);
            v57 = sub_216B1E600(*(_QWORD *)(a1 + 232) + 368);
            v58 = sub_216B1E67C(*(_QWORD *)(a1 + 232) + 368);
            sub_216B84568(v56, v57, v58);
          }
          *(_QWORD *)(a1 + 232) = v15;
          return sub_216B5EAA8(v80);
        case 4:
          sub_216B4AED0(&v66);
          sub_216B83BD8(a1, 4, v66);
          continue;
        case 7:
          v40 = sub_216B81C6C(a1);
          if (!sub_216B8221C(v2, 4))
          {
            v43 = *(_QWORD *)(a1 + 24);
            v44 = sub_216B62CF0((uint64_t)v2);
            sub_216B4CD2C(v43, v44, 664, (uint64_t)v75);
            v45 = "exclude";
            goto LABEL_64;
          }
          sub_216B83BD8(a1, 7, v40);
          break;
        case 8:
        case 0xA:
        case 0xB:
        case 0xD:
          sub_216B823F4(a1);
          continue;
        case 9:
          sub_216B838C8(a1);
          continue;
        case 0xC:
          sub_216B8444C(a1);
          continue;
        case 0xF:
          v41 = sub_216B81C6C(a1);
          if (sub_216B8221C(v2, 4))
          {
            sub_216B83BD8(a1, 15, v41);
          }
          else
          {
            v46 = *(_QWORD *)(a1 + 24);
            v47 = sub_216B62CF0((uint64_t)v2);
            sub_216B4CD2C(v46, v47, 664, (uint64_t)v75);
            v45 = "private";
LABEL_64:
            sub_216B60EA8(v75, (uint64_t)v45);
            sub_216B4B3B4(v75);
          }
          break;
        case 0x10:
          v42 = sub_216B81C6C(a1);
          if (sub_216B8221C(v2, 4))
            sub_216B83BD8(a1, 16, v42);
          else
            sub_216B84194(a1, v42);
          continue;
        case 0x11:
          sub_216B83A4C(a1);
          continue;
        case 0x12:
          sub_216B83ACC(a1);
          continue;
        default:
          v38 = *(_QWORD *)(a1 + 24);
          v39 = sub_216B62CF0((uint64_t)v2);
          sub_216B4CD2C(v38, v39, 669, (uint64_t)v65);
          sub_216B4B3B4(v65);
          sub_216B81C6C(a1);
          continue;
      }
    }
  }
  v28 = (unsigned int *)(v27 + 24);
  if (!sub_216B4B4A8((_DWORD *)(v27 + 24)) || *(_QWORD *)(a1 + 232))
  {
    sub_216B4CD2C(*(_QWORD *)(a1 + 24), v25, 684, (uint64_t)v75);
    sub_216B4B340(v75, (uint64_t)v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
    sub_216B4B3B4(v75);
    sub_216B4CD2C(*(_QWORD *)(a1 + 24), *v28, 826, (uint64_t)v67);
    sub_216B4B3B4(v67);
    sub_216B82100(a1, 22);
    if (sub_216B8221C(v2, 22))
      sub_216B81C6C(a1);
    goto LABEL_37;
  }
  sub_216B82100(a1, 22);
  if (sub_216B8221C(v2, 22))
  {
    sub_216B81C6C(a1);
    return sub_216B5EAA8(v80);
  }
  v61 = *(_QWORD *)(a1 + 24);
  v62 = sub_216B62CF0((uint64_t)v2);
  sub_216B4CD2C(v61, v62, 673, (uint64_t)v69);
  sub_216B4B3B4(v69);
  sub_216B4CD2C(*(_QWORD *)(a1 + 24), v26, 824, (uint64_t)v68);
  v13 = (std::string *)v68;
LABEL_36:
  sub_216B4B3B4(v13);
LABEL_37:
  *(_BYTE *)(a1 + 65) = 1;
  return sub_216B5EAA8(v80);
}

uint64_t sub_216B82C70(uint64_t a1)
{
  const void *v2;
  char *v3;
  size_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12[3];
  uint64_t v13[3];
  uint64_t v14[3];
  uint64_t v15[2];
  uint64_t v16[3];
  const void *v17[19];
  const void *v18;
  size_t v19;
  std::string v20;
  _BYTE v21[16];
  _BYTE v22[16];
  _QWORD v23[12];

  v23[11] = *MEMORY[0x24BDAC8D0];
  sub_216B81C6C(a1);
  if (!sub_216B8221C((_DWORD *)(a1 + 208), 13))
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = sub_216B62CF0(a1 + 208);
    sub_216B4CD2C(v7, v8, 671, (uint64_t)v22);
    sub_216B4B3B4(v22);
    result = sub_216B81C6C(a1);
    *(_BYTE *)(a1 + 65) = 1;
    return result;
  }
  sub_216B81C6C(a1);
  sub_216B5E8EC(v23);
  if (!sub_216B8222C(a1, v23))
  {
    if (sub_216B8221C((_DWORD *)(a1 + 208), 20))
    {
      v17[0] = (const void *)sub_216B823C4(a1 + 208);
      v17[1] = v2;
      sub_216B24898(v17, (uint64_t)&v20);
      sub_216B81C6C(a1);
      sub_216B26CA0(&v18, &v20);
      sub_216B295EC(v17);
      sub_216B25FB0((uint64_t)v16, (uint64_t)&v18);
      if (sub_216B29700(v16))
      {
        v3 = (char *)sub_216B1E600(*(_QWORD *)(a1 + 48));
        sub_216B1E678((int)v15, v3);
        sub_216B341A4(v17, v15[0], v15[1]);
        sub_216B25FAC((uint64_t)v16, (uint64_t)&v20);
        sub_216B25FA8((uint64_t)v14, &byte_216C19659);
        sub_216B25FA8((uint64_t)v13, &byte_216C19659);
        sub_216B25FA8((uint64_t)v12, &byte_216C19659);
        sub_216B28DE8(v17, v16, v14, v13, v12);
        v18 = (const void *)sub_216B24850((uint64_t)v17);
        v19 = v4;
      }
      v5 = (_DWORD *)sub_216B2037C(*(_QWORD *)(a1 + 8));
      v6 = sub_216B50040(v5, v18, v19, 0, 1);
      if (v6)
        sub_216B81458(*(_QWORD *)(a1 + 32), v6, 0);
      sub_216B2489C(v17);
      std::string::~string(&v20);
      return sub_216B5EAA8(v23);
    }
    v10 = *(_QWORD *)(a1 + 24);
    v11 = sub_216B62CF0(a1 + 208);
    sub_216B4CD2C(v10, v11, 670, (uint64_t)v21);
    sub_216B4B3B4(v21);
  }
  *(_BYTE *)(a1 + 65) = 1;
  return sub_216B5EAA8(v23);
}

uint64_t sub_216B82E8C(uint64_t a1, int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int *v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  std::string *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE v39[16];
  _BYTE v40[16];
  _BYTE v41[16];
  _QWORD v42[2];
  std::string v43;
  _BYTE v44[16];
  _BYTE v45[20];
  _BYTE v46[4];
  _BYTE v47[16];
  _BYTE v48[16];
  _BYTE v49[16];
  _BYTE v50[16];
  _BYTE v51[16];
  _BYTE v52[16];

  v6 = sub_216B81C6C(a1);
  v7 = *(_QWORD *)(a1 + 232);
  if (v7)
    v8 = 1;
  else
    v8 = a2;
  if ((v8 & 1) != 0)
  {
    if (v7)
    {
      v9 = *(_WORD *)(v7 + 528);
      if ((v9 & 2) != 0)
      {
        if (!sub_216B5EE40(v7))
        {
          v11 = *(_QWORD *)(a1 + 24);
          v12 = v6;
          v13 = v51;
          v14 = v51;
          v15 = 678;
          goto LABEL_20;
        }
        v9 = *(_WORD *)(*(_QWORD *)(a1 + 232) + 528);
      }
      if ((v9 & 0x100) == 0)
      {
        v10 = 0;
        if (!a2)
        {
LABEL_28:
          if (v10)
          {
LABEL_29:
            result = sub_216B8221C((_DWORD *)(a1 + 208), 21);
            if ((_DWORD)result)
            {
              sub_216B81C6C(a1);
              sub_216B82100(a1, 22);
              result = sub_216B8221C((_DWORD *)(a1 + 208), 22);
              if ((_DWORD)result)
                result = sub_216B81C6C(a1);
            }
            goto LABEL_57;
          }
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      sub_216B4CD2C(*(_QWORD *)(a1 + 24), v6, 679, (uint64_t)v50);
      sub_216B4B3B4(v50);
      if (!sub_216B27BAC((_DWORD *)(*(_QWORD *)(a1 + 232) + 540)))
      {
LABEL_21:
        v10 = 1;
        if (!a2)
          goto LABEL_28;
LABEL_22:
        sub_216B4CD2C(*(_QWORD *)(a1 + 24), v6, 677, (uint64_t)v48);
        sub_216B4B3B4(v48);
        if ((v10 & 1) != 0)
          goto LABEL_29;
        goto LABEL_23;
      }
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 232) + 540);
      v13 = v49;
      v14 = v49;
      v15 = 826;
LABEL_20:
      sub_216B4CD2C(v11, v12, v15, (uint64_t)v14);
      sub_216B4B3B4(v13);
      goto LABEL_21;
    }
  }
  else
  {
    sub_216B4CD2C(*(_QWORD *)(a1 + 24), v6, 686, (uint64_t)v52);
    sub_216B4B3B4(v52);
    if (*(_QWORD *)(a1 + 232))
      goto LABEL_21;
  }
  if (!a3)
  {
    v10 = v8 ^ 1;
    goto LABEL_28;
  }
  sub_216B4CD2C(*(_QWORD *)(a1 + 24), v6, 675, (uint64_t)v47);
  sub_216B4B3B4(v47);
  if ((v8 & 1) == 0)
    goto LABEL_29;
  a3 = 0;
LABEL_23:
  sub_216B80C10(v46);
  sub_216B83348(a1, v46);
  v16 = *(_QWORD *)(a1 + 232);
  if (v16)
  {
    *(_WORD *)(v16 + 528) |= 0x100u;
    *(_DWORD *)(*(_QWORD *)(a1 + 232) + 540) = v6;
    if (a3)
      v17 = 512;
    else
      v17 = 0;
    *(_WORD *)(*(_QWORD *)(a1 + 232) + 528) = *(_WORD *)(*(_QWORD *)(a1 + 232) + 528) & 0xFDFF | v17;
  }
  else
  {
    v19 = sub_216B849E0(*(_QWORD *)(a1 + 32) + 408, (uint64_t *)(a1 + 48));
    *(_BYTE *)v19 |= 1u;
    v20 = sub_216B849E0(*(_QWORD *)(a1 + 32) + 408, (uint64_t *)(a1 + 48));
    *((_BYTE *)v20 + 4) = v46[0];
    v21 = *(_QWORD *)(a1 + 40);
    sub_216B849E0(*(_QWORD *)(a1 + 32) + 408, (uint64_t *)(a1 + 48))[1] = v21;
  }
  v22 = (int *)(a1 + 208);
  if (!sub_216B8221C((_DWORD *)(a1 + 208), 21))
  {
    v34 = *(_QWORD *)(a1 + 24);
    v35 = sub_216B62CF0(a1 + 208);
    sub_216B4CD2C(v34, v35, 667, (uint64_t)v45);
    v36 = v45;
    goto LABEL_56;
  }
  v23 = sub_216B81C6C(a1);
  while (1)
  {
    while (1)
    {
      v24 = *v22;
      if (*v22 > 8)
        break;
      if (v24 != 7)
      {
        if (v24 == 3)
          goto LABEL_53;
        goto LABEL_47;
      }
      if (*(_QWORD *)(a1 + 232))
        goto LABEL_47;
      sub_216B81C6C(a1);
      if (sub_216B8221C((_DWORD *)(a1 + 208), 5))
      {
        v25 = sub_216B849E0(*(_QWORD *)(a1 + 32) + 408, (uint64_t *)(a1 + 48)) + 2;
        v42[0] = sub_216B823C4(a1 + 208);
        v42[1] = v26;
        sub_216B24898(v42, (uint64_t)&v43);
        sub_216B6EFF0(v25, (uint64_t)&v43);
        std::string::~string(&v43);
        goto LABEL_49;
      }
      v32 = *(_QWORD *)(a1 + 24);
      v33 = sub_216B62CF0(a1 + 208);
      sub_216B4CD2C(v32, v33, 680, (uint64_t)v44);
      sub_216B4B3B4(v44);
    }
    if (v24 != 9)
      break;
    if (!*(_QWORD *)(a1 + 232))
      goto LABEL_47;
    sub_216B81C6C(a1);
    if (sub_216B8221C((_DWORD *)(a1 + 208), 19))
    {
      *(_WORD *)(*(_QWORD *)(a1 + 232) + 528) |= 0x400u;
      goto LABEL_49;
    }
    v30 = *(_QWORD *)(a1 + 24);
    v31 = sub_216B62CF0(a1 + 208);
    sub_216B4CD2C(v30, v31, 662, (uint64_t)v41);
    v29 = (std::string *)v41;
LABEL_48:
    sub_216B4B3B4(v29);
LABEL_49:
    sub_216B81C6C(a1);
  }
  if (v24 != 22)
  {
LABEL_47:
    v27 = *(_QWORD *)(a1 + 24);
    v28 = sub_216B62CF0(a1 + 208);
    sub_216B4CD2C(v27, v28, 665, (uint64_t)&v43);
    sub_216B848B0((uint64_t *)&v43, *(_QWORD *)(a1 + 232) != 0);
    v29 = &v43;
    goto LABEL_48;
  }
LABEL_53:
  if (sub_216B8221C((_DWORD *)(a1 + 208), 22))
    return sub_216B81C6C(a1);
  v37 = *(_QWORD *)(a1 + 24);
  v38 = sub_216B62CF0(a1 + 208);
  sub_216B4CD2C(v37, v38, 673, (uint64_t)v40);
  sub_216B4B3B4(v40);
  sub_216B4CD2C(*(_QWORD *)(a1 + 24), v23, 824, (uint64_t)v39);
  v36 = v39;
LABEL_56:
  result = sub_216B4B3B4(v36);
LABEL_57:
  *(_BYTE *)(a1 + 65) = 1;
  return result;
}

uint64_t sub_216B832F4(uint64_t a1)
{
  return sub_216B1E67C(a1) - 32;
}

uint64_t sub_216B8330C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v4 = sub_216B84FA0(a1 + 456, &v6);
  return sub_216B5F890((uint64_t)v4, a3);
}

uint64_t sub_216B83348(uint64_t a1, _BYTE *a2)
{
  _DWORD *v4;
  char v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE v19[16];
  _BYTE v20[16];
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25[3];
  _BYTE v26[16];

  v4 = (_DWORD *)(a1 + 208);
  v5 = 0;
  while (sub_216B8221C(v4, 23))
  {
    v6 = sub_216B81C6C(a1);
    if (!sub_216B8221C(v4, 5))
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = sub_216B62CF0((uint64_t)v4);
      sub_216B4CD2C(v7, v8, 658, (uint64_t)v26);
      sub_216B4B3B4(v26);
      sub_216B82100(a1, 24);
      if (sub_216B8221C(v4, 24))
        sub_216B81C6C(a1);
      v5 = 1;
    }
    v9 = sub_216B823C4((uint64_t)v4);
    sub_216B32854(v25, v9, v10);
    v24 = 3;
    sub_216B849F8((uint64_t)v25, (uint64_t)&v24);
    v23 = 2;
    sub_216B84A68((uint64_t)v25, (uint64_t)&v23);
    v22 = 1;
    sub_216B84ACC((uint64_t)v25, (uint64_t)&v22);
    v21 = 0;
    switch(sub_216B32B50((uint64_t)v25, &v21))
    {
      case 0u:
        v11 = *(_QWORD *)(a1 + 24);
        v12 = sub_216B62CF0((uint64_t)v4);
        sub_216B4CD2C(v11, v12, 879, (uint64_t)v25);
        v13 = sub_216B823C4((uint64_t)v4);
        sub_216B4B340(v25, v13, v14);
        sub_216B4B3B4(v25);
        break;
      case 1u:
        v15 = *a2 | 1;
        goto LABEL_11;
      case 2u:
        v15 = *a2 | 2;
        goto LABEL_11;
      case 3u:
        v15 = *a2 | 4;
LABEL_11:
        *a2 = v15;
        break;
      default:
        break;
    }
    sub_216B81C6C(a1);
    if (!sub_216B8221C(v4, 24))
    {
      v16 = *(_QWORD *)(a1 + 24);
      v17 = sub_216B62CF0((uint64_t)v4);
      sub_216B4CD2C(v16, v17, 674, (uint64_t)v20);
      sub_216B4B3B4(v20);
      sub_216B4CD2C(*(_QWORD *)(a1 + 24), v6, 825, (uint64_t)v19);
      sub_216B4B3B4(v19);
      sub_216B82100(a1, 24);
      v5 = 1;
    }
    if (sub_216B8221C(v4, 24))
      sub_216B81C6C(a1);
  }
  return v5 & 1;
}

uint64_t sub_216B835AC(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  std::string v17;
  _BYTE v18[4];
  _BYTE v19[16];

  v2 = sub_216B81C6C(a1);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 232) + 32))
  {
    sub_216B4CD2C(*(_QWORD *)(a1 + 24), v2, 657, (uint64_t)v19);
    sub_216B4B3B4(v19);
  }
  sub_216B80C10(v18);
  sub_216B83348(a1, v18);
  if ((v18[0] & 4) != 0)
  {
    v3 = *(_QWORD *)(a1 + 232);
    if (!*(_QWORD *)(v3 + 32))
      *(_WORD *)(v3 + 528) |= 0x800u;
  }
  v4 = a1 + 208;
  result = sub_216B8221C((_DWORD *)(a1 + 208), 5);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 232);
    if (!*(_QWORD *)(v6 + 32))
    {
      v7 = (uint64_t *)(v6 + 1184);
      v15 = sub_216B823C4(a1 + 208);
      v16 = v8;
      sub_216B25018(&v15, (uint64_t)&v17);
      sub_216B2BF8C(v7, (uint64_t)&v17);
      std::string::~string(&v17);
    }
    sub_216B81C6C(a1);
    result = sub_216B8221C((_DWORD *)(a1 + 208), 0);
    if ((_DWORD)result)
    {
      while (1)
      {
        sub_216B81C6C(a1);
        if (!sub_216B8221C((_DWORD *)(a1 + 208), 5))
          break;
        v9 = *(_QWORD *)(a1 + 232);
        if (!*(_QWORD *)(v9 + 32))
        {
          v10 = (uint64_t *)(v9 + 1184);
          v15 = sub_216B823C4(a1 + 208);
          v16 = v11;
          sub_216B25018(&v15, (uint64_t)&v17);
          sub_216B2BF8C(v10, (uint64_t)&v17);
          std::string::~string(&v17);
        }
        sub_216B81C6C(a1);
        result = sub_216B8221C((_DWORD *)(a1 + 208), 0);
        if ((result & 1) == 0)
          return result;
      }
      v12 = *(_QWORD *)(a1 + 24);
      v13 = sub_216B62CF0(v4);
      sub_216B4CD2C(v12, v13, 659, (uint64_t)v14);
      return sub_216B4B3B4(v14);
    }
  }
  return result;
}

uint64_t sub_216B8373C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  std::string *v7;
  uint64_t v8;
  unsigned int v9;
  std::string v11;
  uint64_t v12[2];
  uint64_t v13[2];
  _QWORD v14[11];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  v2 = sub_216B81C6C(a1);
  sub_216B848E8((uint64_t)v14);
  if ((sub_216B8222C(a1, v14) & 1) == 0)
  {
    v3 = a1 + 208;
    if (sub_216B8221C((_DWORD *)(a1 + 208), 0))
    {
      sub_216B81C6C(a1);
      if (sub_216B8221C((_DWORD *)(a1 + 208), 20))
      {
        v13[0] = sub_216B823C4(a1 + 208);
        v13[1] = v4;
        sub_216B25018(v13, (uint64_t)&v11);
        sub_216B26E7C((uint64_t)v15, (uint64_t)&v11);
        std::string::~string(&v11);
        sub_216B81C6C(a1);
        sub_216B84988((uint64_t *)(*(_QWORD *)(a1 + 232) + 1208), (uint64_t)v14);
        return sub_216B5FD0C(v14);
      }
      v8 = *(_QWORD *)(a1 + 24);
      v9 = sub_216B62CF0(v3);
      sub_216B4CD2C(v8, v9, 661, (uint64_t)v13);
      sub_216B848EC((uint64_t)v14, (uint64_t)&v11);
      sub_216B26CA0(v12, &v11);
      sub_216B4B340(v13, v12[0], v12[1]);
      std::string::~string(&v11);
      v7 = (std::string *)v13;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 24);
      v6 = sub_216B62CF0(v3);
      sub_216B4CD2C(v5, v6, 660, (uint64_t)&v11);
      sub_216B848DC(v13, v2);
      sub_216B7A280(&v11, v13);
      v7 = &v11;
    }
    sub_216B4B3B4(v7);
  }
  return sub_216B5FD0C(v14);
}

uint64_t sub_216B838C8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v8[20];
  int v9;
  _QWORD v10[2];
  _BYTE v11[24];
  std::string v12;
  char v13;
  _QWORD v14[12];

  v14[11] = *MEMORY[0x24BDAC8D0];
  v2 = sub_216B81C6C(a1);
  sub_216B5E8EC(v14);
  if (sub_216B8221C((_DWORD *)(a1 + 208), 5))
  {
    while (1)
    {
      v10[0] = sub_216B823C4(a1 + 208);
      v10[1] = v3;
      v9 = sub_216B62CF0(a1 + 208);
      sub_216B5FE94((uint64_t)v10, (uint64_t)&v9, (uint64_t)v11);
      sub_216B823F0((uint64_t)&v12, (uint64_t)v11);
      sub_216B82368(v14, (uint64_t)&v12);
      j_std::string::~string(&v12);
      sub_216B81C6C(a1);
      if (!sub_216B8221C((_DWORD *)(a1 + 208), 14))
        break;
      sub_216B81C6C(a1);
      if (!sub_216B8221C((_DWORD *)(a1 + 208), 5))
        goto LABEL_4;
    }
    v4 = 0;
    goto LABEL_8;
  }
LABEL_4:
  if (sub_216B8221C((_DWORD *)(a1 + 208), 19))
  {
    sub_216B81C6C(a1);
    v4 = 1;
LABEL_8:
    LODWORD(v12.__r_.__value_.__l.__data_) = v2;
    sub_216B847F4(&v12.__r_.__value_.__r.__words[1], v14);
    v13 = v4;
    sub_216B847F8((_QWORD *)(*(_QWORD *)(a1 + 232) + 624), (uint64_t)&v12);
    sub_216B5F4EC(&v12);
    return sub_216B5EAA8(v14);
  }
  v5 = *(_QWORD *)(a1 + 24);
  v6 = sub_216B62CF0(a1 + 208);
  sub_216B4CD2C(v5, v6, 683, (uint64_t)v8);
  sub_216B4B3B4(v8);
  *(_BYTE *)(a1 + 65) = 1;
  return sub_216B5EAA8(v14);
}

uint64_t sub_216B83A4C(uint64_t a1)
{
  _QWORD v3[12];

  v3[11] = *MEMORY[0x24BDAC8D0];
  sub_216B81C6C(a1);
  sub_216B5E8EC(v3);
  sub_216B8222C(a1, v3);
  sub_216B84854((_QWORD *)(*(_QWORD *)(a1 + 232) + 896), (uint64_t)v3);
  return sub_216B5EAA8(v3);
}

void sub_216B83ACC(uint64_t a1)
{
  _BOOL4 v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8[2];
  _QWORD v9[2];
  std::string v10;
  _BYTE v11[16];

  sub_216B81C6C(a1);
  while (1)
  {
    v2 = sub_216B8221C((_DWORD *)(a1 + 208), 6);
    v3 = v2;
    if (v2)
      sub_216B81C6C(a1);
    if (!sub_216B8221C((_DWORD *)(a1 + 208), 5))
    {
      v6 = *(_QWORD *)(a1 + 24);
      v7 = sub_216B62CF0(a1 + 208);
      sub_216B4CD2C(v6, v7, 663, (uint64_t)v11);
      sub_216B4B3B4(v11);
      *(_BYTE *)(a1 + 65) = 1;
      return;
    }
    v9[0] = sub_216B823C4(a1 + 208);
    v9[1] = v4;
    sub_216B24898(v9, (uint64_t)&v10);
    sub_216B81C6C(a1);
    v5 = *(_QWORD *)(a1 + 232);
    sub_216B26CA0(v8, &v10);
    sub_216B5EF38(v5, v8[0], v8[1], !v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    if (!sub_216B8221C((_DWORD *)(a1 + 208), 0))
      break;
    sub_216B81C6C(a1);
    std::string::~string(&v10);
  }
  std::string::~string(&v10);
}

uint64_t sub_216B83BD8(uint64_t a1, int a2, unsigned int a3)
{
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  _DWORD *v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  _DWORD *v18;
  const void *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  const void *v25;
  size_t v26;
  uint64_t v27;
  char *v28;
  _DWORD *v29;
  const void *v30;
  size_t v31;
  uint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  uint64_t v35[2];
  uint64_t v36[3];
  _QWORD v37[2];
  std::string v38;
  uint64_t v39[2];
  uint64_t v40[3];
  uint64_t v41[3];
  uint64_t v42[3];
  uint64_t v43[2];
  uint64_t v44[2];
  std::string v45;
  uint64_t v46[2];
  unsigned int v47;
  _BYTE v48[32];

  sub_216B81C6C(a1);
  if (!sub_216B8221C((_DWORD *)(a1 + 208), 20))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = sub_216B62CF0(a1 + 208);
    sub_216B4CD2C(v8, v9, 664, (uint64_t)&v45);
    sub_216B60EA8((uint64_t *)&v45, (uint64_t)"header");
    result = sub_216B4B3B4(&v45);
    *(_BYTE *)(a1 + 65) = 1;
    return result;
  }
  sub_216B8461C(&v47);
  v38.__r_.__value_.__r.__words[0] = sub_216B823C4(a1 + 208);
  v38.__r_.__value_.__l.__size_ = v6;
  sub_216B24898(&v38, (uint64_t)&v45);
  sub_216B26E7C((uint64_t)v48, (uint64_t)&v45);
  std::string::~string(&v45);
  v47 = sub_216B81C6C(a1);
  if (a2 != 16 || !sub_216B84620((_QWORD *)(*(_QWORD *)(a1 + 232) + 40), v7))
  {
    sub_216B295EC(&v45);
    sub_216B25FAC((uint64_t)&v38, (uint64_t)v48);
    if (sub_216B296A0((uint64_t *)&v38))
    {
      sub_216B26CA0(v44, v48);
      sub_216B6C7A4((const void **)&v45.__r_.__value_.__l.__data_, v44[0], v44[1]);
    }
    else
    {
      v16 = (char *)sub_216B1E600(*(_QWORD *)(a1 + 48));
      sub_216B1E678((int)v43, v16);
      sub_216B6C7A4((const void **)&v45.__r_.__value_.__l.__data_, v43[0], v43[1]);
      v17 = sub_216B1FF14((uint64_t)&v45);
      if (!sub_216B84638(*(_QWORD *)(a1 + 232)))
      {
        sub_216B25FAC((uint64_t)&v38, (uint64_t)v48);
        sub_216B25FA8((uint64_t)v42, &byte_216C19659);
        sub_216B25FA8((uint64_t)v41, &byte_216C19659);
        sub_216B25FA8((uint64_t)v40, &byte_216C19659);
        sub_216B28DE8((const void **)&v45.__r_.__value_.__l.__data_, (uint64_t *)&v38, v42, v41, v40);
        v24 = (_DWORD *)sub_216B2037C(*(_QWORD *)(a1 + 8));
        v25 = (const void *)sub_216B28180((uint64_t)&v45);
        v14 = sub_216B50040(v24, v25, v26, 0, 1);
        v15 = 0;
        if (a2 != 16 && (*(_WORD *)(*(_QWORD *)(a1 + 232) + 528) & 0x20) != 0)
        {
          v27 = *(_QWORD *)(a1 + 56);
          if (!v27)
            goto LABEL_9;
          if (v27 == *(_QWORD *)(a1 + 48))
            goto LABEL_9;
          sub_216B26CA0(v39, v48);
          if (!sub_216B7D2DC(v39[0], v39[1]))
            goto LABEL_9;
          v28 = (char *)sub_216B1E600(*(_QWORD *)(a1 + 56));
          sub_216B1E678((int)v37, v28);
          sub_216B2A0B0(&v38, v37[0], v37[1]);
          sub_216B25FAC((uint64_t)v42, (uint64_t)v48);
          sub_216B25FA8((uint64_t)v41, &byte_216C19659);
          sub_216B25FA8((uint64_t)v40, &byte_216C19659);
          sub_216B25FA8((uint64_t)v36, &byte_216C19659);
          sub_216B28DE8((const void **)&v38.__r_.__value_.__l.__data_, v42, v41, v40, v36);
          v29 = (_DWORD *)sub_216B2037C(*(_QWORD *)(a1 + 8));
          v30 = (const void *)sub_216B28180((uint64_t)&v38);
          v32 = sub_216B50040(v29, v30, v31, 0, 1);
          v33 = v14 == 0;
          v34 = v32 != 0;
          if (v33 && v34)
            v15 = 0;
          else
            v15 = v32;
          if (v33 && v34)
            v14 = v32;
          sub_216B2489C(&v38);
        }
LABEL_10:
        if (!v14)
        {
          if (a2 != 7)
          {
            v48[24] = a2 == 16;
            sub_216B5F024(*(_QWORD *)(a1 + 232), 0);
            sub_216B84798((_QWORD *)(*(_QWORD *)(a1 + 232) + 368), (uint64_t)&v47);
          }
LABEL_36:
          sub_216B2489C(&v45);
          return sub_216B4F49C(&v47);
        }
LABEL_16:
        if (a2 == 16)
        {
          v41[0] = 0;
          v41[0] = sub_216B5EE7C(v14);
          v22 = *sub_216B61D98(*(_QWORD *)(a1 + 32) + 384, v41);
          if (v22)
          {
            sub_216B4CD2C(*(_QWORD *)(a1 + 24), a3, 687, (uint64_t)v42);
            sub_216B5ECE8(v22, &v38);
            sub_216B26CA0(v35, &v38);
            sub_216B4B340(v42, v35[0], v35[1]);
            std::string::~string(&v38);
            sub_216B4B3B4(v42);
            *(_BYTE *)(a1 + 65) = 1;
          }
          else
          {
            sub_216B8192C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 232), v14);
          }
        }
        else
        {
          if (a2 == 7)
            v23 = 2;
          else
            v23 = a2 == 15;
          sub_216B81A34(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 232), v14, v23);
          if (v15)
            sub_216B81A34(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 232), v15, v23);
        }
        goto LABEL_36;
      }
      sub_216B84660(*(_QWORD *)(a1 + 232), (const void **)&v45.__r_.__value_.__l.__data_);
      sub_216B25FA8((uint64_t)&v38, "Headers");
      sub_216B25FAC((uint64_t)v42, (uint64_t)v48);
      sub_216B25FA8((uint64_t)v41, &byte_216C19659);
      sub_216B25FA8((uint64_t)v40, &byte_216C19659);
      sub_216B28DE8((const void **)&v45.__r_.__value_.__l.__data_, (uint64_t *)&v38, v42, v41, v40);
      v18 = (_DWORD *)sub_216B2037C(*(_QWORD *)(a1 + 8));
      v19 = (const void *)sub_216B28180((uint64_t)&v45);
      v21 = sub_216B50040(v18, v19, v20, 0, 1);
      if (v21)
      {
        v14 = v21;
        v15 = 0;
        goto LABEL_16;
      }
      sub_216B294F0((const void **)&v45.__r_.__value_.__l.__data_, v17);
      sub_216B25FA8((uint64_t)&v38, "PrivateHeaders");
      sub_216B25FAC((uint64_t)v42, (uint64_t)v48);
      sub_216B25FA8((uint64_t)v41, &byte_216C19659);
      sub_216B25FA8((uint64_t)v40, &byte_216C19659);
      sub_216B28DE8((const void **)&v45.__r_.__value_.__l.__data_, (uint64_t *)&v38, v42, v41, v40);
    }
    v11 = (_DWORD *)sub_216B2037C(*(_QWORD *)(a1 + 8));
    v12 = (const void *)sub_216B28180((uint64_t)&v45);
    v14 = sub_216B50040(v11, v12, v13, 0, 1);
LABEL_9:
    v15 = 0;
    goto LABEL_10;
  }
  sub_216B4CD2C(*(_QWORD *)(a1 + 24), v47, 687, (uint64_t)&v38);
  sub_216B5ECE8(*(_QWORD *)(a1 + 232), &v45);
  sub_216B26CA0(v46, &v45);
  sub_216B4B340((uint64_t *)&v38, v46[0], v46[1]);
  std::string::~string(&v45);
  sub_216B4B3B4(&v38);
  *(_BYTE *)(a1 + 65) = 1;
  return sub_216B4F49C(&v47);
}

void sub_216B84194(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  std::string::size_type v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21[2];
  uint64_t v22[3];
  uint64_t v23[3];
  uint64_t v24[3];
  uint64_t v25[3];
  uint64_t v26[2];
  std::string v27;
  uint64_t v28[2];
  _QWORD v29[2];
  std::string v30;

  v4 = a1 + 208;
  if (!sub_216B8221C((_DWORD *)(a1 + 208), 20))
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = sub_216B62CF0(v4);
    sub_216B4CD2C(v10, v11, 664, (uint64_t)&v27);
    sub_216B60EA8((uint64_t *)&v27, (uint64_t)"umbrella");
    sub_216B4B3B4(&v27);
    *(_BYTE *)(a1 + 65) = 1;
    return;
  }
  v27.__r_.__value_.__r.__words[0] = sub_216B823C4(v4);
  v27.__r_.__value_.__l.__size_ = v5;
  sub_216B24898(&v27, (uint64_t)&v30);
  v6 = sub_216B81C6C(a1);
  if (!sub_216B84620((_QWORD *)(*(_QWORD *)(a1 + 232) + 40), v7))
  {
    sub_216B25FAC((uint64_t)&v27, (uint64_t)&v30);
    if (sub_216B296A0((uint64_t *)&v27))
    {
      v12 = sub_216B2037C(*(_QWORD *)(a1 + 8));
      sub_216B26CA0(v28, &v30);
      v24[0] = (uint64_t)sub_216B4FCC4(v12, v28[0], v28[1], 1);
      if (v24[0])
      {
LABEL_7:
        v13 = *sub_216B61D98(*(_QWORD *)(a1 + 32) + 384, v24);
        if (!v13)
        {
          sub_216B819B8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 232), v24[0]);
          goto LABEL_13;
        }
        sub_216B4CD2C(*(_QWORD *)(a1 + 24), a2, 687, (uint64_t)v25);
        sub_216B5ECE8(v13, &v27);
        sub_216B26CA0(v20, &v27);
        v8 = v20[0];
        v9 = v20[1];
        goto LABEL_9;
      }
    }
    else
    {
      sub_216B295EC(&v27);
      v15 = (char *)sub_216B1E600(*(_QWORD *)(a1 + 48));
      sub_216B1E678((int)v26, v15);
      sub_216B6C7A4((const void **)&v27.__r_.__value_.__l.__data_, v26[0], v26[1]);
      sub_216B25FAC((uint64_t)v25, (uint64_t)&v30);
      sub_216B25FA8((uint64_t)v24, &byte_216C19659);
      sub_216B25FA8((uint64_t)v23, &byte_216C19659);
      sub_216B25FA8((uint64_t)v22, &byte_216C19659);
      sub_216B28DE8((const void **)&v27.__r_.__value_.__l.__data_, v25, v24, v23, v22);
      v16 = sub_216B2037C(*(_QWORD *)(a1 + 8));
      v17 = sub_216B28180((uint64_t)&v27);
      v19 = sub_216B4FCC4(v16, v17, v18, 1);
      v24[0] = (uint64_t)v19;
      sub_216B2489C(&v27);
      if (v19)
        goto LABEL_7;
    }
    sub_216B4CD2C(*(_QWORD *)(a1 + 24), v6, 688, (uint64_t)&v27);
    sub_216B26CA0(v21, &v30);
    sub_216B4B340((uint64_t *)&v27, v21[0], v21[1]);
    v14 = &v27;
    goto LABEL_12;
  }
  sub_216B4CD2C(*(_QWORD *)(a1 + 24), v6, 687, (uint64_t)v25);
  sub_216B5ECE8(*(_QWORD *)(a1 + 232), &v27);
  sub_216B26CA0(v29, &v27);
  v8 = v29[0];
  v9 = v29[1];
LABEL_9:
  sub_216B4B340(v25, v8, v9);
  std::string::~string(&v27);
  v14 = (std::string *)v25;
LABEL_12:
  sub_216B4B3B4(v14);
  *(_BYTE *)(a1 + 65) = 1;
LABEL_13:
  std::string::~string(&v30);
}

void sub_216B8444C(uint64_t a1)
{
  int v2;
  _BOOL8 v3;
  std::string::size_type v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  std::string v9;
  std::string v10;

  v2 = sub_216B81C6C(a1);
  v3 = sub_216B8221C((_DWORD *)(a1 + 208), 11);
  if (v3)
    sub_216B81C6C(a1);
  if (sub_216B8221C((_DWORD *)(a1 + 208), 20))
  {
    v9.__r_.__value_.__r.__words[0] = sub_216B823C4(a1 + 208);
    v9.__r_.__value_.__l.__size_ = v4;
    sub_216B24898(&v9, (uint64_t)&v10);
    sub_216B81C6C(a1);
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 232) + 1096);
    sub_216B848E4(&v9, &v10, v3);
    sub_216B5EFC4(v5, (uint64_t)&v9);
    j_std::string::~string(&v9);
    std::string::~string(&v10);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = sub_216B62CF0(a1 + 208);
    sub_216B4CD2C(v6, v7, 668, (uint64_t)&v9);
    v8 = sub_216B848B0((uint64_t *)&v9, v3);
    sub_216B848DC(&v10, v2);
    sub_216B7A280(v8, (uint64_t *)&v10);
    sub_216B4B3B4(&v9);
    *(_BYTE *)(a1 + 65) = 1;
  }
}

uint64_t sub_216B84568(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_216B2F844(a2, a3);
  v7 = sub_216B2037C((uint64_t)a1);
  if (v6 > 0xCCCCCCCCCCCCCCCDLL * ((v7 - sub_216B1E67C((uint64_t)a1)) >> 3))
  {
    v8 = sub_216B2F21C((uint64_t)a1);
    sub_216B86A60(a1, v8 + v6);
  }
  v9 = sub_216B1E67C((uint64_t)a1);
  sub_216B86B54(a2, a3, v9);
  v10 = sub_216B1E67C((uint64_t)a1) + 40 * v6;
  return sub_216B203A4((uint64_t)a1, v10);
}

BOOL sub_216B84620(_QWORD *a1, uint64_t a2)
{
  return !sub_216B85624(a1, a2);
}

uint64_t sub_216B84638(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  if (!a1)
    return 0;
  do
  {
    v1 = *(unsigned __int16 *)(a1 + 528);
    v2 = (v1 >> 3) & 1;
    if ((v1 & 8) != 0)
      break;
    a1 = *(_QWORD *)(a1 + 32);
  }
  while (a1);
  return v2;
}

uint64_t sub_216B84660(uint64_t a1, const void **a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9[3];
  uint64_t v10[3];
  uint64_t v11[3];
  _QWORD v12[8];

  v12[7] = *MEMORY[0x24BDAC8D0];
  sub_216B5EDE4(v12);
  for (; a1; a1 = *(_QWORD *)(a1 + 32))
  {
    if ((*(_WORD *)(a1 + 528) & 8) != 0)
    {
      sub_216B26CA0(v11, a1);
      sub_216B267B0((uint64_t)v12, v11);
    }
  }
  if (!sub_216B29084(v12))
  {
    v4 = sub_216B2BA30((uint64_t)v12);
    if (v4 != 1)
    {
      v5 = v4 - 2;
      do
      {
        sub_216B25FA8((uint64_t)v11, "Frameworks");
        v6 = sub_216B2B9AC((uint64_t)v12, v5);
        sub_216B341F4(v6, (uint64_t)".framework", (uint64_t)v10);
        sub_216B25FA8((uint64_t)v9, &byte_216C19659);
        sub_216B25FA8((uint64_t)v8, &byte_216C19659);
        sub_216B28DE8(a2, v11, v10, v9, v8);
        --v5;
      }
      while (v5 != -1);
    }
  }
  return sub_216B1FF6C(v12);
}

uint64_t sub_216B84798(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B86A60(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B86C74(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 40;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216B847F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B87090(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B87184(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 104;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t sub_216B84854(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1[1] >= a1[2])
    sub_216B87554(a1, 0);
  v4 = sub_216B1E67C((uint64_t)a1);
  sub_216B847F4(v4, a2);
  v5 = sub_216B1E67C((uint64_t)a1) + 88;
  return sub_216B203A4((uint64_t)a1, v5);
}

uint64_t *sub_216B848B0(uint64_t *a1, unsigned int a2)
{
  sub_216B65358(a1, a2, 2);
  return a1;
}

_DWORD *sub_216B848DC(_DWORD *a1, int a2)
{
  return sub_216B85548(a1, a2);
}

uint64_t sub_216B848EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v8[6];

  sub_216B25034(a2);
  sub_216B6042C(v8, a2);
  v4 = sub_216B5EAC4(a1);
  if (v4)
  {
    v5 = 0;
    do
    {
      if (v5)
        sub_216B248A0((uint64_t)v8, ".");
      v6 = sub_216B5F868(a1, v5);
      sub_216B2E0B0(v8, v6);
      ++v5;
    }
    while (v4 != v5);
  }
  return sub_216B40CD4(v8);
}

uint64_t sub_216B84988(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216B87750(a1, a2);
  }
  else
  {
    sub_216B876E0((uint64_t)a1, a2);
    result = v4 + 112;
  }
  a1[1] = result;
  return result;
}

uint64_t *sub_216B849E0(uint64_t a1, uint64_t *a2)
{
  return sub_216B87D6C(a1, a2) + 1;
}

uint64_t sub_216B849F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 10)
  {
    v4 = sub_216B1E600(a1);
    if (*(_QWORD *)v4 == 0x6974737561687865 && *(_WORD *)(v4 + 8) == 25974)
      *(_QWORD *)(a1 + 16) = a2;
  }
  return a1;
}

uint64_t sub_216B84A68(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 8 && *(_QWORD *)sub_216B1E600(a1) == 0x635F6E7265747865)
    *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

uint64_t sub_216B84ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 6)
  {
    v4 = sub_216B1E600(a1);
    if (*(_DWORD *)v4 == 1953724787 && *(_WORD *)(v4 + 4) == 28005)
      *(_QWORD *)(a1 + 16) = a2;
  }
  return a1;
}

uint64_t sub_216B84B34(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE v7[16];

  v2 = (_DWORD *)(a1 + 208);
  while (1)
  {
    while (1)
    {
      while (*v2 > 0x18u)
        ;
      v3 = 1 << *v2;
      if ((v3 & 0x1FFD2F7) == 0)
        break;
      v4 = *(_QWORD *)(a1 + 24);
      v5 = sub_216B62CF0((uint64_t)v2);
      sub_216B4CD2C(v4, v5, 671, (uint64_t)v7);
      sub_216B4B3B4(v7);
      *(_BYTE *)(a1 + 65) = 1;
      sub_216B81C6C(a1);
    }
    if ((v3 & 0x2D00) == 0)
      break;
    sub_216B823F4(a1);
  }
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_216B84BE4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;

  v11 = sub_216B61C60(a1, a2, a4 != 0);
  return sub_216B622D8(a1, v11, a3, a4, a5, a6);
}

uint64_t sub_216B84C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return sub_216B855A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_216B84C60(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v6 = j_j_nullsub_1(a1);
  v7 = j_j_nullsub_1(a2);
  v8 = sub_216B84CC4(v6, v7, a3, (uint64_t)&v10);
  return sub_216B20710(a1, v8);
}

uint64_t sub_216B84CC4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    while (*(_QWORD *)sub_216B3557C(a4, v4) != *a3)
    {
      v4 += 8;
      if (v4 == a2)
        return a2;
    }
  }
  return v4;
}

BOOL sub_216B84D2C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  if (sub_216B29094((uint64_t)v9))
    return 0;
  v3 = sub_216B26288(v9, 0);
  result = sub_216B73920(v3);
  if (result)
  {
    v4 = sub_216B1E600((uint64_t)v9);
    v5 = sub_216B1E608(v9);
    if (v4 == v5)
    {
      return 1;
    }
    else
    {
      v6 = v5;
      v7 = v4 + 1;
      do
        result = sub_216B84DC0(*(unsigned __int8 *)(v7 - 1));
      while (result && v7++ != v6);
    }
  }
  return result;
}

BOOL sub_216B84DC0(int a1)
{
  return (word_216C12D0C[a1] & 0xE8) != 0;
}

uint64_t sub_216B84DDC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;

  if (!*(_QWORD *)(a1 + 16) && sub_216B1E67C(a1) == 30)
  {
    v6 = (_QWORD *)sub_216B1E600(a1);
    if (*a2 == *v6 && a2[1] == v6[1] && a2[2] == v6[2] && *(_QWORD *)((char *)a2 + 22) == *(_QWORD *)((char *)v6 + 22))
      *(_QWORD *)(a1 + 16) = a3;
  }
  return a1;
}

_BYTE *sub_216B84E5C(_BYTE *result)
{
  *result &= 0xF8u;
  return result;
}

_BYTE *sub_216B84E6C(_BYTE *a1)
{
  *a1 &= ~1u;
  sub_216B80C10(a1 + 4);
  sub_216B84EA8(a1 + 16);
  return a1;
}

uint64_t sub_216B84EAC(uint64_t a1)
{
  return sub_216B66D4C(a1, 2u);
}

uint64_t sub_216B84EB4(uint64_t a1)
{
  sub_216B81768(a1 + 8);
  return a1;
}

uint64_t sub_216B84EDC(uint64_t a1)
{
  sub_216B6D4DC(a1 + 16);
  return a1;
}

uint64_t sub_216B84F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 38) = 0;
  v10 = sub_216B798C4(a1 + 48);
  *(_QWORD *)(a1 + 584) = sub_216B262E0(v10);
  sub_216B29078(a1 + 592);
  *(_WORD *)(a1 + 656) = 0;
  sub_216B798C8(a1, a2, a3);
  return a1;
}

uint64_t sub_216B84F70(uint64_t a1)
{
  sub_216B2489C(a1 + 592);
  sub_216B2489C(a1 + 48);
  return a1;
}

uint64_t *sub_216B84FA0(uint64_t a1, uint64_t *a2)
{
  return sub_216B84FB8(a1, a2) + 1;
}

uint64_t *sub_216B84FB8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  _BYTE v6[40];
  uint64_t *v7;

  v7 = 0;
  if (sub_216B85024(a1, a2, &v7))
    return v7;
  sub_216B850A4((uint64_t)v6);
  v4 = sub_216B8505C(a1, a2, (uint64_t)v6, v7);
  sub_216B850A8(v6);
  return v4;
}

uint64_t sub_216B85024(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v5;

  v5 = 0;
  result = sub_216B850AC(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t *sub_216B8505C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;

  v6 = sub_216B851D4(a1, a2, a4);
  *v6 = *a2;
  sub_216B852BC((uint64_t)(v6 + 1), a3);
  return v6;
}

uint64_t sub_216B850AC(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B50ED0();
    v10 = sub_216B512E8();
    v11 = v8 - 1;
    v12 = sub_216B52378(a2) & (v8 - 1);
    v13 = (uint64_t *)(v6 + 48 * v12);
    if (sub_216B2A5FC(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v16 = a3;
      v14 = 0;
      v15 = 1;
      while (!sub_216B2A5FC(*v13, v9))
      {
        if (sub_216B2A5FC(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (uint64_t *)(v6 + 48 * v12);
        ++v15;
        if (sub_216B2A5FC(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
LABEL_13:
      a3 = v16;
    }
  }
  else
  {
    v13 = 0;
  }
  *a3 = v13;
  return result;
}

uint64_t *sub_216B851D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B852C0(a1, (2 * v6));
    sub_216B85024(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B852C0(a1, v7);
    sub_216B85024(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B50ED0();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B852C4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B85350(a1, *v5);
  if (v4)
  {
    sub_216B85400(a1, v4, &v4[6 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B8539C(a1);
  }
}

BOOL sub_216B85350(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
    v4 = sub_216B1D1D4(48 * a2);
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a2 != 0;
}

uint64_t sub_216B8539C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B50ED0();
  v3 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B854C8(a1);
  while (v3 != (_QWORD *)result)
  {
    *v3 = v2;
    v3 += 6;
  }
  return result;
}

uint64_t sub_216B85400(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;

  sub_216B8539C(a1);
  v6 = sub_216B50ED0();
  result = sub_216B512E8();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B85024(a1, a2, &v9);
          *v9 = *a2;
          sub_216B852BC((uint64_t)(v9 + 1), (uint64_t)(a2 + 1));
          sub_216B4D0B0(a1);
          result = sub_216B850A8(a2 + 1);
        }
      }
      a2 += 6;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216B854C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 48 * sub_216B4CBC0(a1);
}

uint64_t sub_216B854FC(uint64_t a1, uint64_t a2)
{
  return sub_216B8550C(a1, a1 + 32, 1, a2);
}

uint64_t sub_216B85510(uint64_t a1)
{
  return sub_216B5F908(a1, a1 + 32, 1);
}

_DWORD *sub_216B8551C(_DWORD *a1)
{
  _DWORD *v2;

  v2 = sub_216B4AED0(a1);
  sub_216B25034(v2 + 2);
  return a1;
}

_DWORD *sub_216B85548(_DWORD *result, int a2)
{
  *result = a2;
  result[1] = a2;
  return result;
}

std::string *sub_216B85550(std::string *a1, const std::string *a2, std::string::value_type a3)
{
  std::string *result;

  result = std::string::basic_string(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = a3;
  return result;
}

uint64_t sub_216B85574(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B5E8EC();
  sub_216B25034(v2 + 88);
  return a1;
}

uint64_t sub_216B855A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = a8;
  *(_QWORD *)(a1 + 56) = a9;
  *(_BYTE *)(a1 + 64) = a10;
  *(_BYTE *)(a1 + 65) = 0;
  sub_216B39B60((_QWORD *)(a1 + 72));
  *(_QWORD *)(a1 + 232) = 0;
  sub_216B82088(a1 + 208);
  sub_216B81C6C(a1);
  return a1;
}

uint64_t sub_216B855FC(uint64_t a1)
{
  sub_216B3A034(a1 + 72);
  return a1;
}

BOOL sub_216B85624(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_216B5F264(a1, a2);
  return j_nullsub_1(v2, v3) == 0;
}

uint64_t *sub_216B85644(uint64_t *a1, uint64_t a2, int a3)
{
  sub_216B85668(a1, a2, a3);
  return a1;
}

uint64_t sub_216B85668(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;

  result = nullsub_1(a2, a2);
  v6 = 2;
  if (!a3)
    v6 = 0;
  *a1 = v6 | result;
  return result;
}

uint64_t sub_216B856A4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B856D4(v4, v2);
  return a1;
}

uint64_t sub_216B856D4(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B85350(a1, a2);
  if ((_DWORD)result)
    return sub_216B8539C(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_216B8570C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = a2;
  v4 = nullsub_1(a1, a2);
  sub_216B8573C(v4, v2);
  return a1;
}

uint64_t sub_216B8573C(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_216B85774(a1, a2);
  if ((_DWORD)result)
    return sub_216B857C0(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL sub_216B85774(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_DWORD *)(a1 + 16) = a2;
  if (a2)
    v4 = sub_216B1D1D4(96 * a2);
  else
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a2 != 0;
}

uint64_t sub_216B857C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  sub_216B4CB6C(a1, 0);
  sub_216B4CB70(a1, 0);
  v2 = sub_216B50ED0();
  v3 = (_QWORD *)sub_216B262E0(a1);
  result = sub_216B85824(a1);
  while (v3 != (_QWORD *)result)
  {
    *v3 = v2;
    v3 += 12;
  }
  return result;
}

uint64_t sub_216B85824(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B262E0(a1);
  return v2 + 96 * sub_216B4CBC0(a1);
}

void **sub_216B85858(void **a1)
{
  sub_216B85884((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B85884(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B50ED0();
    v4 = sub_216B512E8();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B854C8(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
        {
          result = sub_216B2A5FC(*v5, v4);
          if ((result & 1) == 0)
            result = sub_216B1FF6C(v5 + 1);
        }
        v5 += 6;
      }
      while (v5 != v6);
    }
  }
  return result;
}

void **sub_216B85914(void **a1)
{
  sub_216B85940((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B85940(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B50ED0();
    v4 = sub_216B512E8();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B85824(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
        {
          result = sub_216B2A5FC(*v5, v4);
          if ((result & 1) == 0)
            result = sub_216B81768(v5 + 1);
        }
        v5 += 12;
      }
      while (v5 != v6);
    }
  }
  return result;
}

void **sub_216B859D0(void **a1)
{
  sub_216B859FC((uint64_t)a1);
  j__free(*a1);
  return a1;
}

uint64_t sub_216B859FC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v3 = sub_216B50ED0();
    v4 = sub_216B512E8();
    v5 = (uint64_t *)sub_216B262E0(a1);
    result = sub_216B854C8(a1);
    if (v5 != (uint64_t *)result)
    {
      v6 = (uint64_t *)result;
      do
      {
        result = sub_216B2A5FC(*v5, v3);
        if ((result & 1) == 0)
        {
          result = sub_216B2A5FC(*v5, v4);
          if ((result & 1) == 0)
            result = sub_216B850A8(v5 + 1);
        }
        v5 += 6;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t sub_216B85A90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B85AC0((uint64_t **)a1);
  return a1;
}

uint64_t sub_216B85AC0(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = sub_216B50F08();
  result = sub_216B512EC();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B2A5FC(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 6;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t *sub_216B85B38(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v6;
  _BYTE v7[40];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  if (sub_216B85024(a1, a2, &v6))
    return v6;
  sub_216B85C18(v7);
  v4 = sub_216B85BD0(a1, a2, (uint64_t)v7, v6);
  sub_216B1FF6C(v7);
  return v4;
}

uint64_t *sub_216B85BD0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;

  v6 = sub_216B85C1C(a1, a2, a4);
  *v6 = *a2;
  sub_216B85D04(v6 + 1, a3);
  return v6;
}

uint64_t *sub_216B85C1C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B85D08(a1, (2 * v6));
    sub_216B85024(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B85D08(a1, v7);
    sub_216B85024(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B50ED0();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B85D0C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B85350(a1, *v5);
  if (v4)
  {
    sub_216B85D98(a1, v4, &v4[6 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B8539C(a1);
  }
}

uint64_t sub_216B85D98(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;

  sub_216B8539C(a1);
  v6 = sub_216B50ED0();
  result = sub_216B512E8();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B85024(a1, a2, &v9);
          *v9 = *a2;
          sub_216B85D04(v9 + 1, a2 + 1);
          sub_216B4D0B0(a1);
          result = sub_216B1FF6C(a2 + 1);
        }
      }
      a2 += 6;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216B85E60(uint64_t a1, _QWORD *a2)
{
  sub_216B2F340(a1, 1u);
  if (!sub_216B29084(a2))
    sub_216B85EA4(a1, a2);
  return a1;
}

uint64_t sub_216B85EA4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;

  if ((_QWORD *)a1 != a2)
  {
    if (sub_216B2081C(a2))
    {
      v4 = sub_216B26878((uint64_t)a2);
      v5 = sub_216B26878(a1);
      if (v5 >= v4)
      {
        v13 = sub_216B1E600(a1);
        if (v4)
        {
          sub_216B1E600((uint64_t)a2);
          sub_216B1E67C((uint64_t)a2);
          v13 = sub_216B860A8();
        }
        v14 = sub_216B1E67C(a1);
        nullsub_1(v13, v14);
        v15 = a1;
        v16 = v13;
      }
      else
      {
        v6 = v5;
        if (sub_216B860AC(a1) >= v4)
        {
          if (v6)
          {
            sub_216B1E600((uint64_t)a2);
            sub_216B1E600((uint64_t)a2);
            sub_216B1E600(a1);
            sub_216B860A8();
          }
        }
        else
        {
          v7 = sub_216B1E600(a1);
          v8 = sub_216B1E67C(a1);
          nullsub_1(v7, v8);
          v9 = sub_216B1E600(a1);
          sub_216B203A4(a1, v9);
          sub_216B26908((const void **)a1, v4);
          v6 = 0;
        }
        v17 = (void *)(sub_216B1E600((uint64_t)a2) + 8 * v6);
        v18 = sub_216B1E67C((uint64_t)a2);
        v19 = sub_216B1E600(a1);
        sub_216B3B518(v17, v18, (void *)(v19 + 8 * v6));
        v16 = sub_216B1E600(a1) + 8 * v4;
        v15 = a1;
      }
      sub_216B203A4(v15, v16);
      sub_216B20594(a2);
    }
    else
    {
      v10 = sub_216B1E600(a1);
      v11 = sub_216B1E67C(a1);
      nullsub_1(v10, v11);
      if (!sub_216B2081C((_QWORD *)a1))
      {
        v12 = (void *)sub_216B1E600(a1);
        free(v12);
      }
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = a2[2];
      sub_216B86098(a2);
    }
  }
  return a1;
}

_QWORD *sub_216B86098(_QWORD *result)
{
  result[1] = result + 3;
  result[2] = result + 3;
  *result = result + 3;
  return result;
}

uint64_t sub_216B860AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return (v2 - sub_216B1E600(a1)) >> 3;
}

uint64_t sub_216B860E0()
{
  uint64_t v0;

  sub_216B860F8();
  return v0;
}

uint64_t sub_216B860FC(uint64_t a1)
{
  return sub_216B2F340(a1, 1u);
}

uint64_t sub_216B86104(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v5;

  v5 = 0;
  result = sub_216B86140(a1, a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t sub_216B86140(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;

  v6 = sub_216B262E0(a1);
  result = sub_216B4CBC0(a1);
  if ((_DWORD)result)
  {
    v8 = result;
    v9 = sub_216B50ED0();
    v10 = sub_216B512E8();
    v11 = v8 - 1;
    v12 = sub_216B52378(a2) & (v8 - 1);
    v13 = (uint64_t *)(v6 + 96 * v12);
    if (sub_216B2A5FC(*a2, *v13))
    {
      result = 1;
    }
    else
    {
      v16 = a3;
      v14 = 0;
      v15 = 1;
      while (!sub_216B2A5FC(*v13, v9))
      {
        if (sub_216B2A5FC(*v13, v10) && v14 == 0)
          v14 = v13;
        v12 = (v12 + v15) & v11;
        v13 = (uint64_t *)(v6 + 96 * v12);
        ++v15;
        if (sub_216B2A5FC(*a2, *v13))
        {
          result = 1;
          goto LABEL_13;
        }
      }
      result = 0;
      if (v14)
        v13 = v14;
LABEL_13:
      a3 = v16;
    }
  }
  else
  {
    v13 = 0;
  }
  *a3 = v13;
  return result;
}

uint64_t sub_216B86268(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if ((a4 & 1) == 0)
    sub_216B86298((uint64_t **)a1);
  return a1;
}

uint64_t sub_216B86298(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = sub_216B50F08();
  result = sub_216B512EC();
  v4 = *a1;
  if (*a1 != a1[1])
  {
    v5 = result;
    do
    {
      result = sub_216B2A5FC(*v4, v2);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(**a1, v5);
        if (!(_DWORD)result)
          break;
      }
      v6 = a1[1];
      v4 = *a1 + 12;
      *a1 = v4;
    }
    while (v4 != v6);
  }
  return result;
}

_QWORD *sub_216B86314(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  sub_216B86344(a1 + 1, a3);
  return a1;
}

_OWORD *sub_216B86348(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_216B86374(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *sub_216B86378(_QWORD *a1, _QWORD *a2)
{
  sub_216B66D4C((uint64_t)a1, 2u);
  if (!sub_216B29084(a2))
    sub_216B863BC(a1, a2);
  return a1;
}

_QWORD *sub_216B863BC(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  void *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    if (sub_216B2081C(a2))
    {
      v4 = sub_216B60724((uint64_t)a2);
      v5 = sub_216B60724((uint64_t)a1);
      if (v5 >= v4)
      {
        v13 = (std::string *)sub_216B1E600((uint64_t)a1);
        if (v4)
        {
          v14 = sub_216B1E600((uint64_t)a2);
          v15 = sub_216B1E67C((uint64_t)a2);
          v13 = (std::string *)sub_216B865BC(v14, v15, (uint64_t)v13);
        }
        v16 = (std::string *)sub_216B1E67C((uint64_t)a1);
        sub_216B6F1D0(v13, v16);
        v17 = (uint64_t)a1;
        v18 = (uint64_t)v13;
      }
      else
      {
        v6 = v5;
        if (sub_216B6F140((uint64_t)a1) >= v4)
        {
          if (v6)
          {
            v19 = sub_216B1E600((uint64_t)a2);
            v20 = sub_216B1E600((uint64_t)a2) + 24 * v6;
            v21 = sub_216B1E600((uint64_t)a1);
            sub_216B865BC(v19, v20, v21);
          }
        }
        else
        {
          v7 = (std::string *)sub_216B1E600((uint64_t)a1);
          v8 = (std::string *)sub_216B1E67C((uint64_t)a1);
          sub_216B6F1D0(v7, v8);
          v9 = sub_216B1E600((uint64_t)a1);
          sub_216B203A4((uint64_t)a1, v9);
          sub_216B6F04C(a1, v4);
          v6 = 0;
        }
        v22 = 3 * v6;
        v23 = sub_216B1E600((uint64_t)a2) + 24 * v6;
        v24 = sub_216B1E67C((uint64_t)a2);
        v25 = sub_216B1E600((uint64_t)a1);
        sub_216B6F180(v23, v24, v25 + 8 * v22);
        v18 = sub_216B1E600((uint64_t)a1) + 24 * v4;
        v17 = (uint64_t)a1;
      }
      sub_216B203A4(v17, v18);
      sub_216B6FBB8(a2);
    }
    else
    {
      v10 = (std::string *)sub_216B1E600((uint64_t)a1);
      v11 = (std::string *)sub_216B1E67C((uint64_t)a1);
      sub_216B6F1D0(v10, v11);
      if (!sub_216B2081C(a1))
      {
        v12 = (void *)sub_216B1E600((uint64_t)a1);
        free(v12);
      }
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      sub_216B86098(a2);
    }
  }
  return a1;
}

uint64_t sub_216B865BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_216B26E7C(a3, v5);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_216B86610(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;

  v6 = sub_216B86658(a1, a2, a4);
  *v6 = *a2;
  sub_216B86344(v6 + 1, a3);
  return v6;
}

uint64_t *sub_216B86658(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = a3;
  v5 = sub_216B4D0A4();
  v6 = sub_216B4CBC0(a1);
  v7 = v6;
  if (4 * v5 + 4 >= (3 * v6))
  {
    sub_216B86740(a1, (2 * v6));
    sub_216B86104(a1, a2, &v10);
    sub_216B4CBC0(a1);
  }
  else if ((_DWORD)v6 + ~v5 - sub_216B4D0AC(a1) <= v6 >> 3)
  {
    sub_216B86740(a1, v7);
    sub_216B86104(a1, a2, &v10);
  }
  sub_216B4D0B0(a1);
  v8 = sub_216B50ED0();
  if (!sub_216B2A5FC(*v10, v8))
    sub_216B4D0D8(a1);
  return v10;
}

void sub_216B86744(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unsigned int *v5;
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v7 = 64;
  v6 = sub_216B1E3F4((a2 - 1));
  v5 = (unsigned int *)sub_216B21E8C(&v7, &v6);
  sub_216B85774(a1, *v5);
  if (v4)
  {
    sub_216B867D0(a1, v4, &v4[12 * v3]);
    j__free(v4);
  }
  else
  {
    sub_216B857C0(a1);
  }
}

uint64_t sub_216B867D0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;

  sub_216B857C0(a1);
  v6 = sub_216B50ED0();
  result = sub_216B512E8();
  if (a2 != a3)
  {
    v8 = result;
    do
    {
      result = sub_216B2A5FC(*a2, v6);
      if ((result & 1) == 0)
      {
        result = sub_216B2A5FC(*a2, v8);
        if ((result & 1) == 0)
        {
          v9 = 0;
          sub_216B86104(a1, a2, &v9);
          *v9 = *a2;
          sub_216B86344(v9 + 1, a2 + 1);
          sub_216B4D0B0(a1);
          result = sub_216B81768(a2 + 1);
        }
      }
      a2 += 12;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_216B86898(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = nullsub_1(a2, a2);
  *a1 = result;
  return result;
}

uint64_t sub_216B868C0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B60328((uint64_t)a1);
  v5 = sub_216B5EAC4((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(32 * v7, 0x10120405C87E9CEuLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B869B0(v9, v10, (uint64_t)v8);
  v11 = (std::string *)sub_216B1E600((uint64_t)a1);
  v12 = (std::string *)sub_216B1E67C((uint64_t)a1);
  sub_216B5F388(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 32 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 32 * v7;
  return result;
}

uint64_t sub_216B869B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B869AC(a3, v5);
      v5 += 32;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216B86A00(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B2B018(a1, a2);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t sub_216B86A28(uint64_t a1, uint64_t a2)
{
  sub_216B24898((_QWORD *)a2, a1);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_216B86A60(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B2F96C((uint64_t)a1);
  v5 = sub_216B2F21C((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(40 * v7, 0x1012040ABBA4411uLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B86B6C(v9, v10, (uint64_t)v8);
  v11 = sub_216B1E600((uint64_t)a1);
  v12 = sub_216B1E67C((uint64_t)a1);
  sub_216B5F570(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 40 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 40 * v7;
  return result;
}

uint64_t sub_216B86B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_216B86BF8(a1, a2, a3);
  return v3;
}

uint64_t sub_216B86B6C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B86BBC(a3, v5);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216B86BC0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_216B2B018(a1 + 8, a2 + 8);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_216B86BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a3;
  v7 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      sub_216B86C74(v6, v4);
      v4 += 40;
      v6 += 40;
      v7 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v8, &v7, &v6);
  return v8;
}

uint64_t sub_216B86C78(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::string::basic_string((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

_QWORD *sub_216B86CB0(_QWORD *a1, _QWORD *a2)
{
  sub_216B5FAC8((uint64_t)a1, 2u);
  if (!sub_216B29084(a2))
    sub_216B86CF4(a1, (uint64_t)a2);
  return a1;
}

_QWORD *sub_216B86CF4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;

  if (a1 != (_QWORD *)a2)
  {
    v4 = sub_216B5EAC4(a2);
    v5 = sub_216B5EAC4((uint64_t)a1);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_216B1E600(a2);
        sub_216B1E600(a2);
        sub_216B1E600((uint64_t)a1);
        v10 = sub_216B86E84();
      }
      else
      {
        v10 = sub_216B1E600((uint64_t)a1);
      }
      v16 = (std::string *)v10;
      v17 = (std::string *)sub_216B1E67C((uint64_t)a1);
      sub_216B5F388(v16, v17);
      v15 = (uint64_t)a1;
      v14 = (uint64_t)v16;
    }
    else
    {
      v6 = v5;
      if (sub_216B60328((uint64_t)a1) >= v4)
      {
        if (v6)
        {
          sub_216B1E600(a2);
          sub_216B1E600(a2);
          sub_216B1E600((uint64_t)a1);
          sub_216B86E84();
        }
      }
      else
      {
        v7 = (std::string *)sub_216B1E600((uint64_t)a1);
        v8 = (std::string *)sub_216B1E67C((uint64_t)a1);
        sub_216B5F388(v7, v8);
        v9 = sub_216B1E600((uint64_t)a1);
        sub_216B203A4((uint64_t)a1, v9);
        sub_216B868C0(a1, v4);
        v6 = 0;
      }
      v11 = sub_216B1E600(a2) + 32 * v6;
      v12 = sub_216B1E67C(a2);
      v13 = sub_216B1E600((uint64_t)a1);
      sub_216B86E9C(v11, v12, v13 + 32 * v6);
      v14 = sub_216B1E600((uint64_t)a1) + 32 * v4;
      v15 = (uint64_t)a1;
    }
    sub_216B203A4(v15, v14);
  }
  return a1;
}

uint64_t sub_216B86E84()
{
  uint64_t v0;

  sub_216B86EA0();
  return v0;
}

uint64_t sub_216B86EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_216B20688(a1, a2);
  v7 = v6;
  v8 = j_j_nullsub_1(a3);
  v9 = sub_216B86F34((uint64_t)&v14, v5, v7, v8);
  v11 = v10;
  v14 = sub_216B2070C(a1, v9);
  v13 = sub_216B20710(a3, v11);
  return sub_216B206E0((uint64_t)&v14, (uint64_t)&v13);
}

uint64_t sub_216B86F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_216B86FA0(a4, v5);
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    v5 = a3;
  }
  v8 = a4;
  v9 = v5;
  return sub_216B206E0((uint64_t)&v9, (uint64_t)&v8);
}

uint64_t sub_216B86FA0(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t sub_216B86FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_216B86FE8(a1, a2, a3);
  return v3;
}

uint64_t sub_216B86FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a3;
  v7 = a1;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      if ((sub_216B2043C() & 1) != 0)
        break;
      sub_216B87064(v6, v4);
      v4 += 32;
      v6 += 32;
      v7 = v4;
    }
    while (v4 != a2);
  }
  sub_216B20444(&v8, &v7, &v6);
  return v8;
}

std::string *sub_216B87068(std::string *a1, uint64_t a2)
{
  std::string *result;

  result = std::string::basic_string(a1, (const std::string *)a2);
  LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t sub_216B87090(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B87188((uint64_t)a1);
  v5 = sub_216B5F27C((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(104 * v7, 0x1080040D6D0946FuLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B871D0(v9, v10, (uint64_t)v8);
  v11 = sub_216B1E600((uint64_t)a1);
  v12 = sub_216B1E67C((uint64_t)a1);
  sub_216B5F4B0(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 104 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 104 * v7;
  return result;
}

uint64_t sub_216B87188(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return 0x4EC4EC4EC4EC4EC5 * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B871D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B87220(a3, v5);
      v5 += 104;
      a3 += 104;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216B87224(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_216B8725C(a1 + 8, a2 + 8);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

_QWORD *sub_216B87260(_QWORD *a1, _QWORD *a2)
{
  sub_216B5FAC8((uint64_t)a1, 2u);
  if (!sub_216B29084(a2))
    sub_216B872A4(a1, a2);
  return a1;
}

_QWORD *sub_216B872A4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  void *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    if (sub_216B2081C(a2))
    {
      v4 = sub_216B5EAC4((uint64_t)a2);
      v5 = sub_216B5EAC4((uint64_t)a1);
      if (v5 >= v4)
      {
        v13 = (std::string *)sub_216B1E600((uint64_t)a1);
        if (v4)
        {
          v14 = sub_216B1E600((uint64_t)a2);
          v15 = sub_216B1E67C((uint64_t)a2);
          v13 = (std::string *)sub_216B87498(v14, v15, (uint64_t)v13);
        }
        v16 = (std::string *)sub_216B1E67C((uint64_t)a1);
        sub_216B5F388(v13, v16);
        v17 = (uint64_t)a1;
        v18 = (uint64_t)v13;
      }
      else
      {
        v6 = v5;
        if (sub_216B60328((uint64_t)a1) >= v4)
        {
          if (v6)
          {
            v19 = sub_216B1E600((uint64_t)a2);
            v20 = sub_216B1E600((uint64_t)a2) + 32 * v6;
            v21 = sub_216B1E600((uint64_t)a1);
            sub_216B87498(v19, v20, v21);
          }
        }
        else
        {
          v7 = (std::string *)sub_216B1E600((uint64_t)a1);
          v8 = (std::string *)sub_216B1E67C((uint64_t)a1);
          sub_216B5F388(v7, v8);
          v9 = sub_216B1E600((uint64_t)a1);
          sub_216B203A4((uint64_t)a1, v9);
          sub_216B868C0(a1, v4);
          v6 = 0;
        }
        v22 = sub_216B1E600((uint64_t)a2) + 32 * v6;
        v23 = sub_216B1E67C((uint64_t)a2);
        v24 = sub_216B1E600((uint64_t)a1);
        sub_216B869B0(v22, v23, v24 + 32 * v6);
        v18 = sub_216B1E600((uint64_t)a1) + 32 * v4;
        v17 = (uint64_t)a1;
      }
      sub_216B203A4(v17, v18);
      sub_216B82328(a2);
    }
    else
    {
      v10 = (std::string *)sub_216B1E600((uint64_t)a1);
      v11 = (std::string *)sub_216B1E67C((uint64_t)a1);
      sub_216B5F388(v10, v11);
      if (!sub_216B2081C(a1))
      {
        v12 = (void *)sub_216B1E600((uint64_t)a1);
        free(v12);
      }
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      sub_216B86098(a2);
    }
  }
  return a1;
}

uint64_t sub_216B87498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_216B874EC(a3, v5);
      v5 += 32;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_216B874EC(uint64_t a1, uint64_t a2)
{
  sub_216B26E7C(a1, a2);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t sub_216B8751C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_216B847F4(a1 + 8, a2 + 8);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t sub_216B87554(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;

  v4 = sub_216B87648((uint64_t)a1);
  v5 = sub_216B5F2C4((uint64_t)a1);
  v6 = sub_216B1E3F4(v4 + 2);
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = malloc_type_malloc(88 * v7, 0x10800404030E7B3uLL);
  v9 = sub_216B1E600((uint64_t)a1);
  v10 = sub_216B1E67C((uint64_t)a1);
  sub_216B87690(v9, v10, (uint64_t)v8);
  v11 = sub_216B1E600((uint64_t)a1);
  v12 = sub_216B1E67C((uint64_t)a1);
  sub_216B5F41C(v11, v12);
  if (!sub_216B2081C(a1))
  {
    v13 = (void *)sub_216B1E600((uint64_t)a1);
    free(v13);
  }
  sub_216B203A4((uint64_t)a1, (uint64_t)v8 + 88 * v5);
  *a1 = v8;
  result = sub_216B1E600((uint64_t)a1);
  a1[2] = result + 88 * v7;
  return result;
}

uint64_t sub_216B87648(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_216B2037C(a1);
  return 0x2E8BA2E8BA2E8BA3 * ((v2 - sub_216B1E600(a1)) >> 3);
}

uint64_t sub_216B87690(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = sub_216B8725C(a3, v5);
      v5 += 88;
      a3 += 88;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *sub_216B876E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B877FC(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216B87800(v5, v7, a2);
  v10 += 112;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B87750(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B5F30C(a1);
  v6 = sub_216B87868(a1, v5 + 1);
  v7 = sub_216B5F30C(a1);
  sub_216B878E0(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216B87800(v4, v9, a2);
  v13 += 112;
  sub_216B878E4(a1, v12);
  v10 = a1[1];
  sub_216B879D0(v12);
  return v10;
}

_QWORD *sub_216B87804(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 112 * a3;
  return result;
}

uint64_t sub_216B87824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B87830(a2, a3);
}

uint64_t sub_216B87834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B847F4(a1, a2);
  std::string::basic_string((std::string *)(v4 + 88), (const std::string *)(a2 + 88));
  return a1;
}

unint64_t sub_216B87868(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216B879D4((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B5FC58(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216B878E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216B87B10(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B5F30C(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216B879D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216B87A10(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216B87A14()
{
  return 0x249249249249249;
}

uint64_t *sub_216B87A28(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B87AB4(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 112 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 112 * v9;
  return a1;
}

uint64_t sub_216B87AB4(uint64_t a1, unint64_t a2)
{
  return sub_216B87AD8(a1, a2);
}

uint64_t sub_216B87AD8(uint64_t a1, unint64_t a2)
{
  if (sub_216B87A10(a1) < a2)
    sub_216B25C54();
  return sub_216B25CA0(112 * a2, 8);
}

uint64_t sub_216B87B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216B87BDC((uint64_t)&v16);
    v9 = sub_216B87BE0((uint64_t)v18);
    sub_216B87BD8(a1, v8, v9);
    sub_216B87BEC((uint64_t)v18);
    sub_216B87BEC((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216B87BE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 112;
}

uint64_t sub_216B87BEC(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 112;
  return result;
}

uint64_t sub_216B87BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B87C08(a2, a3);
}

uint64_t sub_216B87C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B8725C(a1, a2);
  sub_216B2B018(v4 + 88, a2 + 88);
  return a1;
}

uint64_t sub_216B87C40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216B87C54(a1);
  return nullsub_1(v1, v2);
}

uint64_t *sub_216B87C58(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216B87CB4((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B87CBC(a1, v4);
    sub_216B5FC54(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B87CB4(uint64_t a1)
{
  return sub_216B87D00(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B87CBC(_QWORD *a1, uint64_t a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 4);
}

uint64_t sub_216B87D04(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 112;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216B5FD00(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t *sub_216B87D6C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v6;
  _BYTE v7[88];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  if (sub_216B86104(a1, a2, &v6))
    return v6;
  sub_216B81760(v7);
  v4 = sub_216B86610(a1, a2, (uint64_t)v7, v6);
  sub_216B81768(v7);
  return v4;
}

uint64_t sub_216B87E04(uint64_t a1)
{
  uint64_t v2;

  sub_216B5E918((uint64_t *)(a1 + 1992), a1 + 1984);
  return sub_216B87E30(a1, v2);
}

uint64_t sub_216B87E30(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_216B7B098(a1, a2);
  if ((result & 1) == 0)
  {
    result = sub_216B87FB8(a1);
    *(_DWORD *)(a1 + 832) = 3;
  }
  return result;
}

uint64_t sub_216B87E64(uint64_t a1)
{
  return sub_216B87E6C((_QWORD *)(a1 + 1992));
}

uint64_t sub_216B87E6C(_QWORD *a1)
{
  return sub_216B88894(a1, a1[1] - 8);
}

BOOL sub_216B87E78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(a1 + 1992);
  *(_QWORD *)(a1 + 1984) = *(_QWORD *)sub_216B3FBE8(a1 + 1992);
  sub_216B87E6C(v2);
  return sub_216B9B9B4(a1, v3);
}

uint64_t sub_216B87EB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = sub_216B7B098(a1, a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 1984);
    if (v5 >= sub_216B60724(a1 + 1928))
    {
      sub_216B7B0E8(a1, v6);
      sub_216B9C594(a1, a2);
      if (sub_216B87F9C(a1))
      {
        sub_216B87E30(a1, v9);
        result = sub_216B623F0(a1 + 1928, a2);
        ++*(_QWORD *)(a1 + 1984);
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 1984);
        if (v10 >= sub_216B60724(a1 + 1928))
        {
          result = sub_216B20594((_QWORD *)(a1 + 1928));
          *(_QWORD *)(a1 + 1984) = 0;
        }
        else
        {
          return sub_216B87E30(a1, v11);
        }
      }
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 1984);
      *(_QWORD *)(a1 + 1984) = v7 + 1;
      result = sub_216B60770(a1 + 1928, v7);
      v8 = *(_DWORD *)(result + 15);
      *(_OWORD *)a2 = *(_OWORD *)result;
      *(_DWORD *)(a2 + 15) = v8;
    }
  }
  return result;
}

BOOL sub_216B87F9C(uint64_t a1)
{
  return !sub_216B29084((_QWORD *)(a1 + 1992));
}

uint64_t sub_216B87FB8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  _BYTE v4[56];

  v2 = (uint64_t *)(a1 + 848);
  sub_216B88074((uint64_t)v4, *(_DWORD *)(a1 + 832), *(_QWORD *)(a1 + 840), a1 + 792, a1 + 800, *(_QWORD *)(a1 + 808), a1 + 824, *(_QWORD *)(a1 + 816));
  sub_216B8801C(v2, (uint64_t)v4);
  result = sub_216B88078(v4);
  *(_QWORD *)(a1 + 808) = 0;
  return result;
}

uint64_t sub_216B8801C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= *(_QWORD *)sub_216B2C144((uint64_t)a1, a2))
  {
    result = sub_216B880EC(a1, a2);
  }
  else
  {
    sub_216B8807C((uint64_t)a1, a2);
    result = v4 + 56;
  }
  a1[1] = result;
  return result;
}

_QWORD *sub_216B8807C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_216B88198(&v9, a1, 1);
  v5 = sub_216B2C144(a1, v4);
  v7 = nullsub_1(v10, v6);
  sub_216B8819C(v5, v7, a2);
  v10 += 56;
  return sub_216B2C330(&v9);
}

uint64_t sub_216B880EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;

  v4 = sub_216B2C144((uint64_t)a1, a2);
  v5 = sub_216B882B0(a1);
  v6 = sub_216B88238(a1, v5 + 1);
  v7 = sub_216B882B0(a1);
  sub_216B882D4(v12, v6, v7, v4);
  v9 = nullsub_1(v13, v8);
  sub_216B8819C(v4, v9, a2);
  v13 += 56;
  sub_216B882D8(a1, v12);
  v10 = a1[1];
  sub_216B883C4(v12);
  return v10;
}

_QWORD *sub_216B881A0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 56 * a3;
  return result;
}

uint64_t sub_216B881C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B881CC(a2, a3);
}

uint64_t sub_216B881D0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_216B27D80(a1 + 16, a2 + 16);
  sub_216B27D80(a1 + 24, a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_216B27D80(a1 + 40, a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

unint64_t sub_216B88238(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v10 = a2;
  v4 = sub_216B883C8((uint64_t)a1, a2);
  if (v4 < a2)
    sub_216B2C50C();
  v6 = v4;
  v7 = sub_216B88404(a1, v5);
  if (v7 < v6 >> 1)
  {
    v9 = 2 * v7;
    return *(_QWORD *)sub_216B25C44(&v9, &v10);
  }
  return v6;
}

uint64_t sub_216B882B0(_QWORD *a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3);
}

uint64_t sub_216B882D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];
  _QWORD v16[2];

  nullsub_1(a1, a2);
  v5 = sub_216B2C144((uint64_t)a1, v4);
  sub_216B2C730(v15, a1[1]);
  sub_216B2C730(v14, *a1);
  sub_216B2C730(v13, a2[1]);
  v16[0] = sub_216B884F8(v5, v15[0], v15[1], v14[0], v14[1], v13[0], v13[1]);
  v16[1] = v6;
  a2[1] = sub_216B1E67C((uint64_t)v16);
  sub_216B20BF4(a1, a2 + 1);
  sub_216B20BF4(a1 + 1, a2 + 2);
  v8 = (uint64_t *)sub_216B2C144((uint64_t)a1, v7);
  v10 = (uint64_t *)sub_216B2C5EC((uint64_t)a2, v9);
  sub_216B20BF4(v8, v10);
  *a2 = a2[1];
  v11 = sub_216B882B0(a1);
  return nullsub_1(a1, v11);
}

uint64_t sub_216B883C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_216B2C144(a1, a2);
  v5 = sub_216B51904(v2);
  v4 = sub_216B25C48();
  return *(_QWORD *)sub_216B24E80(&v5, &v4);
}

uint64_t sub_216B88404(_QWORD *a1, uint64_t a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)sub_216B2C144((uint64_t)a1, a2) - *a1) >> 3);
}

uint64_t *sub_216B88448(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_216B2C5BC(a1 + 3, &v12, a4);
  if (a2)
  {
    v7 = sub_216B2C5E4((uint64_t)a1);
    v8 = sub_216B884D4(v7, a2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 56 * a3;
  a1[1] = v10;
  a1[2] = v10;
  *a1 = v8;
  *(_QWORD *)sub_216B2C5EC((uint64_t)a1, v9) = v8 + 56 * v9;
  return a1;
}

uint64_t sub_216B884D4(uint64_t a1, unint64_t a2)
{
  return sub_216B518CC(a1, a2);
}

uint64_t sub_216B884F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v17[0] = a4;
  v17[1] = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  sub_216B2C768(&v13, a1, (uint64_t)&v15, (uint64_t)&v16);
  sub_216B2C734(&v13, (uint64_t)&v14);
  while (sub_216B2C76C((uint64_t)v18, (uint64_t)v17))
  {
    v8 = sub_216B885C0((uint64_t)&v16);
    v9 = sub_216B885C4((uint64_t)v18);
    sub_216B8819C(a1, v8, v9);
    sub_216B885D0((uint64_t)v18);
    sub_216B885D0((uint64_t)&v16);
  }
  sub_216B2C7C0(&v14);
  v10 = v16;
  j_nullsub_1(&v14, v11);
  return v10;
}

uint64_t sub_216B885C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 56;
}

uint64_t sub_216B885D0(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 56;
  return result;
}

uint64_t sub_216B885E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_216B885F4(a1);
  return nullsub_1(v1, v2);
}

uint64_t *sub_216B885F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_216B88654((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_216B2C5E4((uint64_t)a1);
    v3 = *a1;
    v5 = sub_216B8865C(a1, v4);
    sub_216B51070(v2, v3, v5);
  }
  return a1;
}

uint64_t sub_216B88654(uint64_t a1)
{
  return sub_216B886A0(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_216B8865C(_QWORD *a1, uint64_t a2)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)sub_216B2C5EC((uint64_t)a1, a2) - *a1) >> 3);
}

uint64_t sub_216B886A4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 16) != a2)
  {
    v3 = result;
    do
    {
      v4 = sub_216B2C5E4(v3);
      v5 = *(_QWORD *)(v3 + 16) - 56;
      *(_QWORD *)(v3 + 16) = v5;
      v7 = nullsub_1(v5, v6);
      result = sub_216B8870C(v4, v7);
    }
    while (*(_QWORD *)(v3 + 16) != a2);
  }
  return result;
}

uint64_t sub_216B88710(uint64_t a1, uint64_t a2)
{
  return sub_216B88078(a2);
}

uint64_t sub_216B88718(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  sub_216B27D80(a1 + 16, a4);
  sub_216B27D80(a1 + 24, a5);
  *(_QWORD *)(a1 + 32) = a6;
  sub_216B27D80(a1 + 40, a7);
  *(_QWORD *)(a1 + 48) = a8;
  return a1;
}

uint64_t sub_216B8878C(uint64_t a1)
{
  sub_216B887C4(a1 + 40);
  sub_216B3C0E0(a1 + 24);
  sub_216B3C0E0(a1 + 16);
  return a1;
}

uint64_t sub_216B887C8(uint64_t a1)
{
  sub_216B887F0(a1, 0);
  return a1;
}

void sub_216B887F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)j_nullsub_1(a1, a2);
  *(_QWORD *)j_nullsub_1(a1, v5) = a2;
  if (v4)
  {
    v7 = j_nullsub_1(a1, v6);
    sub_216B8884C(v7, v4);
  }
}

void sub_216B8884C(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)sub_216B8886C(a2);
    j__free(v2);
  }
}

uint64_t sub_216B88870(uint64_t a1)
{
  sub_216B9DA34(a1);
  return a1;
}

uint64_t sub_216B88894(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_216B2E220(a1);
  sub_216B2EEA8((uint64_t)a1, a2);
  return nullsub_1(a1, v4);
}

void sub_216B888E0()
{
  void *v0;

  v0 = (void *)sub_216B888DC();
  j__free(v0);
}

uint64_t sub_216B888F4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a5;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v8, a3, a4, v9);
}

uint64_t sub_216B88964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_216B889BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_216B88A2C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int v22;

  v22 = a6;
  v15 = a2;
  v16 = a8;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v15, a3, a4, a5, v22, a7, v16, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_216B88AEC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v9, a3, a4, a5);
}

uint64_t sub_216B88B58(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_216B88B90(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), v5, a3);
}

uint64_t sub_216B88BE4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_216B88C40(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_216B88C9C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 104))(*(_QWORD *)(a1 + 16), v13, a3, a4, a5, a6, a7);
}

uint64_t sub_216B88D20(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_216B88D7C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_216B88DD8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  v13 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 128))(*(_QWORD *)(a1 + 16), v13, a3, a4, a5, a6, a7);
}

uint64_t sub_216B88E5C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a4;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16), v8, a3, v9, a5);
}

uint64_t sub_216B88ECC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16), v11, a3, a4, a5, a6);
}

uint64_t sub_216B88F40(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16), v5, a3);
}

uint64_t sub_216B88F94(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16), v3);
}

uint64_t sub_216B88FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_216B89040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_216B89090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_216B890E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_216B89138(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_216B89178(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_216B891D4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a5;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16), v8, a3, a4, v9);
}

uint64_t sub_216B89244(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_216B892A0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 232))(*(_QWORD *)(a1 + 16), v7, a3, a4);
}

uint64_t sub_216B892FC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a3;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 240))(*(_QWORD *)(a1 + 8), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16), v4, v5);
}

uint64_t sub_216B89354(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = a3;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 248))(*(_QWORD *)(a1 + 16), v4, v5);
}

uint64_t sub_216B893AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_24D602530;
  v3 = a1[2];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return nullsub_1(a1, a2);
}

_QWORD *sub_216B89400(_QWORD *result)
{
  *result = &unk_24D602648;
  return result;
}

BOOL sub_216B89414(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  if (sub_216B89580(&v22))
    return 0;
  v3 = sub_216B2C910((uint64_t *)(a1 + 64));
  v4 = sub_216B2C000(a1 + 64);
  LODWORD(v19) = sub_216B1E4E0((unsigned int *)&v22);
  sub_216B20C64(&v20, *(_QWORD *)(a1 + 8));
  v21 = sub_216B89598(v3, v4, (int *)&v19, v20);
  v19 = sub_216B2C000(a1 + 64);
  if (sub_216B2AB50((uint64_t)&v21, (uint64_t)&v19))
    return 0;
  v5 = *(_DWORD **)(a1 + 8);
  v6 = sub_216B693F8((uint64_t)&v22);
  v8 = (unsigned int *)sub_216B4B51C(&v21, v7);
  v9 = sub_216B1E4E0(v8);
  if (sub_216B64D80(v5, v6, v9))
    return 0;
  v11 = v21;
  v12 = sub_216B2C000(a1 + 64);
  LODWORD(v16) = sub_216B693F8((uint64_t)&v22);
  sub_216B20C64(&v18, *(_QWORD *)(a1 + 8));
  v19 = sub_216B895C4(v11, v12, (int *)&v16, v18);
  sub_216B4AED0(&v17);
  v16 = sub_216B2C000(a1 + 64);
  if (sub_216B2AB28((uint64_t)&v19, (uint64_t)&v16))
  {
    v14 = sub_216B4B51C(&v19, v13);
    v17 = sub_216B693F8(v14);
  }
  v15 = sub_216B4B51C(&v21, v13);
  LODWORD(v16) = sub_216B693F8(v15);
  return sub_216B750B0((unsigned int *)&v16, &v17);
}

BOOL sub_216B89580(_DWORD *a1)
{
  return !sub_216B774B8(a1);
}

uint64_t sub_216B89598(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  char v5;
  _DWORD *v6;

  v6 = a4;
  v5 = 0;
  return sub_216B896CC(a1, a2, a3, &v6, (uint64_t)&v5);
}

uint64_t sub_216B895C4(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  char v5;
  _DWORD *v6;

  v6 = a4;
  return sub_216B89850(a1, a2, a3, &v6, (uint64_t)&v5);
}

uint64_t sub_216B895EC(uint64_t a1, int a2)
{
  _DWORD *v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v13 = a2;
  if (sub_216B4B4A8(&v13) || sub_216B29084((_QWORD *)(a1 + 64)))
  {
    sub_216B4AED0(&v14);
  }
  else
  {
    v4 = *(_DWORD **)(a1 + 8);
    v5 = (unsigned int *)sub_216B3FBE8(a1 + 64);
    v6 = sub_216B1E4E0(v5);
    if (sub_216B64D80(v4, v6, v13))
    {
      return *(unsigned int *)sub_216B3AF70(a1 + 16);
    }
    else
    {
      v7 = sub_216B2C910((uint64_t *)(a1 + 64));
      v8 = sub_216B2C000(a1 + 64);
      sub_216B20C64(&v11, *(_QWORD *)(a1 + 8));
      v12 = sub_216B89598(v7, v8, &v13, v11);
      v10 = sub_216B4B51C(&v12, v9);
      return sub_216B693F8(v10);
    }
  }
  return v14;
}

uint64_t sub_216B896CC(uint64_t a1, uint64_t a2, int *a3, _DWORD **a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v15;

  v9 = sub_216B8977C();
  if (v9)
  {
    v10 = v9;
    do
    {
      v11 = sub_216B3556C(v10);
      v15 = a1;
      sub_216B89780(&v15, v11);
      v12 = sub_216B1E600((uint64_t)&v15);
      v13 = (unsigned int *)sub_216B3557C(a5, v12);
      if (sub_216B89784(a4, v13, a3))
      {
        a1 = *sub_216B3D138(&v15);
        v11 = v10 + ~v11;
      }
      v10 = v11;
    }
    while (v11);
  }
  return a1;
}

BOOL sub_216B89784(_DWORD **a1, unsigned int *a2, int *a3)
{
  return sub_216B8981C(a1, a2, *a3);
}

uint64_t sub_216B89790(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return sub_216B897B8((uint64_t)&v3, (uint64_t)&v4);
}

uint64_t sub_216B897B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B1E600(a1);
  return (v3 - sub_216B1E600(a2)) >> 3;
}

_QWORD *sub_216B897EC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = nullsub_1(a2, a2);
  return sub_216B89818(a1, v3);
}

BOOL sub_216B8981C(_DWORD **a1, unsigned int *a2, int a3)
{
  _DWORD *v4;
  int v5;

  v4 = *a1;
  v5 = sub_216B1E4E0(a2);
  return sub_216B64D80(v4, v5, a3);
}

uint64_t sub_216B89850(uint64_t a1, uint64_t a2, int *a3, _DWORD **a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v16;
  uint64_t v17;

  v8 = a1;
  v17 = a1;
  v9 = sub_216B8977C();
  if (v9)
  {
    v10 = v9;
    do
    {
      v11 = sub_216B3556C(v10);
      sub_216B8990C(&v17, v11);
      v16 = v12;
      v13 = sub_216B1E600((uint64_t)&v16);
      v14 = (unsigned int *)sub_216B3557C(a5, v13);
      if (!sub_216B89914(a4, a3, v14))
      {
        v17 = *sub_216B3D138(&v16);
        v11 = v10 + ~v11;
      }
      v10 = v11;
    }
    while (v11);
    return v17;
  }
  return v8;
}

void sub_216B8990C(uint64_t *a1, uint64_t a2)
{
  sub_216B8991C(*a1, a2);
}

BOOL sub_216B89914(_DWORD **a1, int *a2, unsigned int *a3)
{
  return sub_216B89944(a1, *a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_216B8991C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_216B897EC(&v2, a2);
}

BOOL sub_216B89944(_DWORD **a1, int a2, unsigned int *a3)
{
  _DWORD *v4;
  int v5;

  v4 = *a1;
  v5 = sub_216B1E4E0(a3);
  return sub_216B64D80(v4, a2, v5);
}

uint64_t sub_216B89978(uint64_t a1)
{
  uint64_t result;

  result = sub_216B899AC(a1 + 104, 1);
  *(_QWORD *)(result + 248) = *(_QWORD *)(a1 + 2016);
  *(_QWORD *)(a1 + 2016) = result;
  return result;
}

uint64_t sub_216B899AC(uint64_t a1, uint64_t a2)
{
  return sub_216B26638(a1, a2 << 8, 8);
}

uint64_t sub_216B899B8(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = sub_216B89978(a1);
  return sub_216B7C5A8(v3, a2);
}

uint64_t sub_216B899DC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a5;
  v17 = a6;
  v10 = sub_216B1E67C((uint64_t)&v16);
  if (a4)
    v11 = v10 + 1;
  else
    v11 = v10;
  v12 = 4 * v11 + 24;
  v13 = sub_216B3DE34();
  v14 = sub_216B2663C((uint64_t *)(a1 + 104), v12, v13);
  return sub_216B89A64(v14, a2, a3, a4, v16, v17);
}

uint64_t sub_216B89A64(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_216B8F368(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216B89A6C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a4;
  v15 = a5;
  v8 = sub_216B1E67C((uint64_t)&v14);
  if (a3)
    v9 = v8 + 1;
  else
    v9 = v8;
  v10 = 4 * v9 + 16;
  v11 = sub_216B3DE34();
  v12 = sub_216B2663C((uint64_t *)(a1 + 104), v10, v11);
  return sub_216B89AE4(v12, a2, a3, v14, v15);
}

uint64_t sub_216B89AE4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_216B8F4A4(a1, a2, a3, a4, a5);
}

uint64_t sub_216B89AEC(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  v5 = sub_216B89B20(0x10uLL, (uint64_t *)(a1 + 104));
  return sub_216B89B70(v5, a2, a3);
}

uint64_t sub_216B89B20(unint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 8;
  v7 = sub_216B1E3F4(a1);
  v4 = (unint64_t *)sub_216B24E80(&v7, &v6);
  return sub_216B2663C(a2, a1, *v4);
}

uint64_t sub_216B89B70(uint64_t a1, int a2, int a3)
{
  return sub_216B8F4BC(a1, a2, a3);
}

BOOL sub_216B89B78(uint64_t a1)
{
  _BOOL8 result;
  _BYTE v3[24];

  sub_216B70D84(v3);
  do
  {
    sub_216B89BC0(a1, (uint64_t)v3);
    result = sub_216B7214C((uint64_t)v3, 2);
  }
  while (result);
  return result;
}

uint64_t sub_216B89BC0(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t result;

  v3 = *(_WORD *)(a1 + 436);
  *(_WORD *)(a1 + 436) = v3 | 0x20;
  result = sub_216B9C594(a1, a2);
  *(_WORD *)(a1 + 436) = *(_WORD *)(a1 + 436) & 0xFFDF | v3 & 0x20;
  return result;
}

uint64_t sub_216B89C00(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  std::string::size_type v16;
  _BYTE v17[16];
  uint64_t v18[2];
  uint64_t v19[2];
  std::string v20;
  unsigned __int8 v21;

  if (!sub_216B71174((uint64_t)a2, 2))
  {
    v11 = sub_216B7068C((uint64_t)a2);
    if (v11)
    {
      if (!a3)
        goto LABEL_21;
    }
    else
    {
      v21 = 0;
      sub_216B747E8(a1, a2, &v21, &v20);
      if (v21 || (sub_216B26CA0(v18, &v20), v11 = sub_216B89E24(a1, v18[0], v18[1]), (sub_216B5E114(v11) & 1) == 0))
      {
        sub_216B7B558(a1, a2, 741, (uint64_t)v19);
        v9 = sub_216B3269C();
        sub_216B4B3B4(v19);
        std::string::~string(&v20);
        return v9;
      }
      if ((*(_QWORD *)sub_216B5EE7C(a1) & 8) != 0)
        v12 = 807;
      else
        v12 = 746;
      sub_216B7B558(a1, a2, v12, (uint64_t)v19);
      v13 = sub_216B89E58(v19, v11);
      v14 = sub_216B71644((uint64_t)a2);
      sub_216B89E2C(v13, v14);
      sub_216B4B3B4(v19);
      sub_216B203A4((uint64_t)a2, v11);
      std::string::~string(&v20);
      if (!a3)
        goto LABEL_21;
    }
    if (sub_216B5D91C(v11) == 7)
    {
      v6 = a1;
      v7 = a2;
      v8 = 627;
      goto LABEL_3;
    }
    if (a3 == 2)
    {
      if (sub_216B5E108(v11))
      {
        v15 = sub_216B7AE74(a1, v11);
        if (sub_216B89E80(v15))
        {
          sub_216B7B558(a1, a2, 809, (uint64_t)v17);
          sub_216B4B3B4(v17);
        }
      }
    }
LABEL_21:
    if (!sub_216B5D8E0(*(_QWORD *)(a1 + 24)))
      return 0;
    v20.__r_.__value_.__r.__words[0] = sub_216B4A11C(v11);
    v20.__r_.__value_.__l.__size_ = v16;
    if ((unint64_t)sub_216B1E67C((uint64_t)&v20) < 0x401)
      return 0;
    v6 = a1;
    v7 = a2;
    v8 = 656;
    goto LABEL_3;
  }
  v6 = a1;
  v7 = a2;
  v8 = 743;
LABEL_3:
  sub_216B7B558(v6, v7, v8, (uint64_t)&v20);
  v9 = sub_216B3269C();
  sub_216B4B3B4(&v20);
  return v9;
}

uint64_t sub_216B89E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216B4AAC4(a1 + 440, a2, a3);
}

uint64_t *sub_216B89E2C(uint64_t *a1, unsigned int a2)
{
  sub_216B65358(a1, a2, 4);
  return a1;
}

uint64_t *sub_216B89E58(uint64_t *a1, uint64_t a2)
{
  sub_216B65358(a1, a2, 5);
  return a1;
}

uint64_t sub_216B89E80(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 4) & 1;
}

uint64_t sub_216B89E8C(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  uint64_t result;

  sub_216B89BC0(a1, (uint64_t)a2);
  if (sub_216B71174((uint64_t)a2, 3))
  {
    v6 = *(_QWORD *)(a1 + 680);
    if (v6)
      (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v6 + 32))(v6, a3 == 1);
    sub_216B89F40(a1);
    sub_216B89BC0(a1, (uint64_t)a2);
  }
  result = sub_216B89C00(a1, a2, a3);
  if ((_DWORD)result)
  {
    result = sub_216B7214C((uint64_t)a2, 2);
    if ((_DWORD)result)
    {
      sub_216B74800((uint64_t)a2, 2);
      return sub_216B89B78(a1);
    }
  }
  return result;
}

uint64_t sub_216B89F40(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(a1 + 780) = 1;
  v1 = sub_216B2037C(a1);
  return sub_216B8F530(v1, 1);
}

uint64_t sub_216B89F60(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10[2];
  __int128 v11[3];
  _BYTE v12[56];
  unsigned int v13[6];

  sub_216B70D84(v13);
  if (a3)
    sub_216B9C594(a1, v13);
  else
    sub_216B89BC0(a1, (uint64_t)v13);
  while (sub_216B71174((uint64_t)v13, 5))
    sub_216B89BC0(a1, (uint64_t)v13);
  result = sub_216B7214C((uint64_t)v13, 2);
  if ((_DWORD)result)
  {
    sub_216B77564(v12);
    if ((**(_DWORD **)(a1 + 24) & 0x800041) != 0 && !sub_216B3817C(a1 + 824, v7))
    {
      v8 = sub_216B1E4E0(v13);
      sub_216B1E678((int)v10, "//");
      sub_216B73974(v8, v10[0], v10[1], 0, (uint64_t)v11);
      sub_216B8A0A0((uint64_t)v12, v11);
      sub_216B4C8CC(v11);
    }
    sub_216B7B558(a1, v13, 799, (uint64_t)v11);
    v9 = sub_216B60EA8((uint64_t *)v11, a2);
    sub_216B73938((uint64_t)v9, (uint64_t)v12);
    sub_216B4B3B4(v11);
    sub_216B89B78(a1);
    return sub_216B4C8CC(v12);
  }
  return result;
}

uint64_t sub_216B8A0A0(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  sub_216B26E7C(a1 + 24, (uint64_t)a2 + 24);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t sub_216B8A0E4(uint64_t a1, int a2, char a3, char a4, int a5)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  const void *v22;
  std::string::size_type v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[16];
  const void *v53[2];
  _BYTE v54[16];
  const void *v55[2];
  const void *v56[2];
  const void *v57[2];
  const void *v58[2];
  const void *v59[2];
  __int128 v60;
  std::string v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[16];
  unsigned int v65[6];
  int v66;
  _BYTE __dst[20];
  uint64_t v68;

  v5 = a2;
  v68 = *MEMORY[0x24BDAC8D0];
  v66 = a5;
  ++*(_DWORD *)(a1 + 1388);
  sub_216B8A804(*(_QWORD *)(a1 + 808), a2, 0, a3, a4);
  if (sub_216B3817C(a1 + 800, v7))
    return (uint64_t)sub_216B8A86C(a1, v8);
  *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 1;
  sub_216B70D84(v65);
  while (1)
  {
    while (1)
    {
      v11 = sub_216B25CA8(a1 + 792, v10);
      sub_216B74DE4(v11, v65);
      if (!sub_216B71174((uint64_t)v65, 3))
        break;
      v12 = *(_QWORD *)(a1 + 680);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      sub_216B89F40(a1);
    }
    if (sub_216B71174((uint64_t)v65, 1))
      break;
    if (!sub_216B7214C((uint64_t)v65, 65) && sub_216B7164C((uint64_t)v65))
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 808) + 24) = 1;
      if (sub_216B3817C(a1 + 792, v10))
      {
        v14 = sub_216B25CA8(a1 + 792, v13);
        sub_216B70864(v14, 0);
      }
      sub_216B89BC0(a1, (uint64_t)v65);
      if (sub_216B7214C((uint64_t)v65, 7))
        goto LABEL_14;
      *(_QWORD *)&v63 = sub_216B71184((uint64_t)v65);
      *((_QWORD *)&v63 + 1) = v17;
      v18 = sub_216B26288(&v63, 0);
      if ((v18 - 97) <= 0x19 && v18 != 101 && v18 != 105)
        goto LABEL_14;
      sub_216B26D14(&v62);
      if ((sub_216B1E45C((uint64_t)v65) & 1) == 0 && (unint64_t)sub_216B1E67C((uint64_t)&v63) <= 0x13)
      {
        v62 = v63;
        goto LABEL_24;
      }
      sub_216B747E8(a1, v65, 0, &v61);
      v21 = sub_216B25B78((uint64_t)&v61, v19);
      if (v21 >= 0x14)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 808) + 24) = 0;
        if (sub_216B3817C(a1 + 792, v20))
        {
          v29 = sub_216B25CA8(a1 + 792, v28);
          sub_216B70814(v29);
        }
        std::string::~string(&v61);
      }
      else
      {
        v22 = (const void *)sub_216B25B54((uint64_t)&v61, 0);
        memcpy(__dst, v22, v21);
        sub_216B1E684(&v60, __dst, v21);
        v62 = v60;
        std::string::~string(&v61);
LABEL_24:
        sub_216B1E678((int)v59, "if");
        if (sub_216B2A2EC((uint64_t)&v62, v59[0], (size_t)v59[1]))
        {
          v61.__r_.__value_.__r.__words[0] = sub_216B2864C(&v62, 2uLL, 0xFFFFFFFFFFFFFFFFLL);
          v61.__r_.__value_.__l.__size_ = v23;
          if (sub_216B29094((uint64_t)&v61)
            || (v24 = *(_OWORD *)&v61.__r_.__value_.__l.__data_,
                sub_216B1E678((int)v58, "def"),
                sub_216B274F0(v24, *((uint64_t *)&v24 + 1), v58[0], (size_t)v58[1]))
            || (v25 = *(_OWORD *)&v61.__r_.__value_.__l.__data_,
                sub_216B1E678((int)v57, "ndef"),
                sub_216B274F0(v25, *((uint64_t *)&v25 + 1), v57[0], (size_t)v57[1])))
          {
            sub_216B89B78(a1);
            v26 = *(_QWORD *)(a1 + 808);
            v27 = sub_216B1E4E0(v65);
            sub_216B8A804(v26, v27, 1, 0, 0);
          }
        }
        else if (sub_216B26288(&v62, 0) == 101)
        {
          v30 = sub_216B2864C(&v62, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
          v32 = v31;
          sub_216B1E678((int)v56, "ndif");
          if (sub_216B274F0(v30, v32, v56[0], (size_t)v56[1]))
          {
            sub_216B70D84(&v61);
            v61.__r_.__value_.__s.__data_[4] = 1;
            sub_216B8A9C8(*(_QWORD *)(a1 + 808), (uint64_t)&v61);
            if (!v61.__r_.__value_.__s.__data_[4])
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 0;
              result = sub_216B89F60(a1, (uint64_t)"endif", 0);
              *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 1;
              v44 = *(_QWORD *)(a1 + 872);
              if (v44)
              {
                v45 = sub_216B1E4E0(v65);
                result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 248))(v44, v45, LODWORD(v61.__r_.__value_.__l.__data_));
              }
              goto LABEL_57;
            }
LABEL_52:
            sub_216B89B78(a1);
            goto LABEL_14;
          }
          sub_216B1E678((int)v55, "lse");
          if (sub_216B274F0(v30, v32, v55[0], (size_t)v55[1]))
          {
            v33 = (unsigned __int8 *)sub_216B8AA20(*(_QWORD *)(a1 + 808));
            if (v33[6])
            {
              sub_216B7B558(a1, v65, 837, (uint64_t)v54);
              sub_216B4B3B4(v54);
            }
            v33[6] = 1;
            if (!(v33[4] | v33[5]))
            {
              v33[5] = 1;
              *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 0;
              result = sub_216B89F60(a1, (uint64_t)"else", 0);
              *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 1;
              v46 = *(_QWORD *)(a1 + 872);
              if (v46)
              {
                v47 = sub_216B1E4E0(v65);
                result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v46 + 240))(v46, v47, *(unsigned int *)v33);
              }
              goto LABEL_57;
            }
            goto LABEL_52;
          }
          sub_216B1E678((int)v53, "lif");
          if (sub_216B274F0(v30, v32, v53[0], (size_t)v53[1]))
          {
            v34 = (unsigned __int8 *)sub_216B8AA20(*(_QWORD *)(a1 + 808));
            if (v34[6])
            {
              sub_216B7B558(a1, v65, 835, (uint64_t)v52);
              sub_216B4B3B4(v52);
            }
            if (v34[4] | v34[5])
              goto LABEL_52;
            v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
            *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 0;
            v61.__r_.__value_.__r.__words[0] = 0;
            result = sub_216B90250(a1, &v61);
            v35 = result;
            *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 1;
            if (*(_QWORD *)(a1 + 872))
            {
              v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
              v37 = *(_QWORD *)(a1 + 872);
              v48 = sub_216B1E4E0(v65);
              sub_216B746DC(&v51, v49, v36);
              if (v35)
                v38 = 2;
              else
                v38 = 1;
              result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v37 + 216))(v37, v48, v51, v38, *(unsigned int *)v34);
            }
            if ((v35 & 1) != 0)
            {
              v34[5] = 1;
              goto LABEL_57;
            }
          }
        }
LABEL_14:
        *(_BYTE *)(*(_QWORD *)(a1 + 808) + 24) = 0;
        if (sub_216B3817C(a1 + 792, v15))
        {
          v16 = sub_216B25CA8(a1 + 792, v10);
          sub_216B70814(v16);
        }
      }
    }
  }
  for (result = sub_216B29084((_QWORD *)(*(_QWORD *)(a1 + 808) + 64));
        (result & 1) == 0;
        result = sub_216B29084((_QWORD *)(*(_QWORD *)(a1 + 808) + 64)))
  {
    v40 = sub_216B25CA8(a1 + 792, v39);
    LODWORD(v61.__r_.__value_.__l.__data_) = sub_216B8A9C0(v40);
    if (sub_216B750B0((unsigned int *)&v61, (unsigned int *)(a1 + 704)))
    {
      v41 = (unsigned int *)sub_216B5F148(*(_QWORD *)(a1 + 808) + 64);
      sub_216B720D8(a1, *v41, 751, (uint64_t)v64);
      sub_216B4B3B4(v64);
    }
    sub_216B5F160(*(_QWORD *)(a1 + 808) + 64);
  }
LABEL_57:
  *(_BYTE *)(*(_QWORD *)(a1 + 808) + 26) = 0;
  if (*(_QWORD *)(a1 + 872))
  {
    if (sub_216B27BAC(&v66))
      v5 = v66;
    v42 = *(_QWORD *)(a1 + 872);
    v43 = sub_216B1E4E0(v65);
    sub_216B746DC(&v50, v5, v43);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 200))(v42, v50);
  }
  return result;
}

uint64_t sub_216B8A804(uint64_t a1, int a2, char a3, char a4, char a5)
{
  uint64_t v11;

  sub_216B70D84(&v11);
  LODWORD(v11) = a2;
  BYTE4(v11) = a3;
  BYTE5(v11) = a4;
  BYTE6(v11) = a5;
  return sub_216B268AC(a1 + 64, &v11);
}

_BYTE *sub_216B8A86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *result;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  unsigned int v20[6];

  v3 = a1 + 800;
  while (1)
  {
    v4 = (_QWORD *)sub_216B25CA8(v3, a2);
    if (sub_216B99CB0(v4, v5))
      break;
    sub_216B70D84(v20);
    sub_216B89BC0(a1, (uint64_t)v20);
    v6 = sub_216B7068C((uint64_t)v20);
    v7 = sub_216B5D91C(v6);
    v9 = sub_216B25CA8(v3, v8);
    result = (_BYTE *)sub_216B8AA20(v9);
    v11 = result;
    if (v7 == 5)
    {
      result[6] = 1;
      if (!result[5])
      {
        result[5] = 1;
        *(_BYTE *)(sub_216B25CA8(v3, a2) + 24) = 1;
        sub_216B89B78(a1);
        result = (_BYTE *)sub_216B25CA8(v3, v17);
        result[24] = 0;
        return result;
      }
LABEL_11:
      v14 = 2;
      goto LABEL_12;
    }
    if (result[6])
    {
      sub_216B7B558(a1, v20, 835, (uint64_t)v19);
      result = (_BYTE *)sub_216B4B3B4(v19);
    }
    if (v11[5])
      goto LABEL_11;
    v18 = 0;
    *(_BYTE *)(sub_216B25CA8(v3, a2) + 24) = 1;
    v12 = sub_216B90250(a1, &v18);
    result = (_BYTE *)sub_216B25CA8(v3, v13);
    result[24] = 0;
    if (!v12)
      goto LABEL_11;
    v11[5] = 1;
    v14 = 3;
LABEL_12:
    if (v14 == 3)
      return result;
  }
  sub_216B70D84(v20);
  v16 = sub_216B25CA8(v3, v15);
  return (_BYTE *)sub_216B8A9C8(v16, (uint64_t)v20);
}

uint64_t sub_216B8A9C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

BOOL sub_216B8A9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;

  v3 = a1 + 64;
  v4 = sub_216B29084((_QWORD *)(a1 + 64));
  if (!v4)
  {
    v5 = sub_216B8F538(v3);
    *(_DWORD *)a2 = v5;
    *(_BYTE *)(a2 + 6) = BYTE6(v5);
    *(_WORD *)(a2 + 4) = WORD2(v5);
  }
  return v4;
}

uint64_t sub_216B8AA20(uint64_t a1)
{
  return sub_216B5F148(a1 + 64);
}

uint64_t sub_216B8AA28(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t result;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;

  v4 = (uint64_t *)sub_216B6C230(*(_QWORD *)(a1 + 64));
  if (sub_216B640B8(*(_QWORD *)(a1 + 48), a2))
  {
    result = sub_216B9BDF4(a1);
    if (!result)
      return *(_QWORD *)(sub_216B6C230(*(_QWORD *)(a1 + 64)) + 296);
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 48);
    v7 = sub_216B4EDA4(v6, a2);
    v8 = sub_216B60454(v6, v7);
    v9 = sub_216B81B44(*(_QWORD *)(a1 + 48), v8);
    if (v9)
    {
      v11 = sub_216B7D9A4(v4, v9, 0);
      return sub_216B6EFA4(&v11, v10);
    }
    else
    {
      return sub_216B9BDF4(a1);
    }
  }
  return result;
}

uint64_t sub_216B8AAF8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t *a7, const void **a8, const void **a9, const void **a10, char a11)
{
  const void **v18;
  const void **v19;
  uint64_t v20;
  const void **v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  const void **v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v70;
  uint64_t v71[2];
  uint64_t v72[2];
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  _BYTE v76[280];
  uint64_t v77;

  v19 = a9;
  v18 = a10;
  v77 = *MEMORY[0x24BDAC8D0];
  sub_216B8AEAC(v76);
  if (a6)
    goto LABEL_16;
  v66 = a2;
  v21 = a8;
  v22 = sub_216B92700(a1, v20);
  v23 = sub_216B4CBC4(v22);
  v24 = sub_216B81B44(*(_QWORD *)(a1 + 48), v23);
  v75 = v24;
  v25 = a3;
  if (v24)
  {
    v26 = sub_216B5EE7C(v24);
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 48);
    v28 = sub_216B8AEB0(v27);
    v75 = sub_216B81B44(v27, v28);
    if (!v75)
      goto LABEL_7;
    v29 = *(_QWORD *)(a1 + 40);
    sub_216B1E678((int)v72, ".");
    v26 = (uint64_t)sub_216B4FCC4(v29, v72[0], v72[1], 1);
  }
  v73 = v26;
  *(_QWORD *)&v74 = sub_216B206E0((uint64_t)&v75, (uint64_t)&v73);
  *((_QWORD *)&v74 + 1) = v30;
  sub_216B267B0((uint64_t)v76, &v74);
LABEL_7:
  if ((**(_BYTE **)(a1 + 24) & 4) != 0 && (a5 & 1) == 0)
  {
    v31 = sub_216B882B0((_QWORD *)(a1 + 848));
    v32 = v31;
    if (v31)
    {
      v33 = v31 - 1;
      do
      {
        v34 = sub_216B8AEB8((_QWORD *)(a1 + 848), v33);
        if (sub_216B8AEC8(v34, v35))
        {
          v36 = *(_QWORD *)(a1 + 48);
          v37 = sub_216B4CBC4(*(_QWORD *)(v34 + 32));
          v38 = sub_216B81B44(v36, v37);
          v75 = v38;
          if (v38)
          {
            v73 = sub_216B5EE7C(v38);
            *(_QWORD *)&v74 = sub_216B206E0((uint64_t)&v75, (uint64_t)&v73);
            *((_QWORD *)&v74 + 1) = v39;
            sub_216B267B0((uint64_t)v76, &v74);
          }
        }
        --v33;
        --v32;
      }
      while (v32);
    }
  }
  a3 = v25;
  a8 = v21;
  v18 = a10;
  v19 = a9;
  a6 = 0;
  a2 = v66;
LABEL_16:
  v68 = a7;
  *a7 = *(_QWORD *)(a1 + 816);
  v40 = *(_QWORD *)(a1 + 64);
  sub_216B380EC(v71, v76);
  v41 = a2;
  v42 = v19;
  v67 = v41;
  v44 = sub_216B6D4E8(v40, a3, a4, v41, a5, a6, v68, v43, v71[0], v71[1], a8, v19, v18, a11);
  if (v44)
    goto LABEL_17;
  v50 = a8;
  if (sub_216B8AEF0(a1, v45))
  {
    v51 = a3;
    v52 = *(_QWORD *)(a1 + 48);
    v53 = sub_216B4CBC4(*(_QWORD *)(a1 + 808));
    v54 = v52;
    a3 = v51;
    v55 = sub_216B81B44(v54, v53);
    if (v55)
    {
      v44 = sub_216B6E0D0(*(_QWORD *)(a1 + 64), v51, a4, v55, v50, v42, v18);
      if (v44)
      {
LABEL_17:
        v46 = v44;
        if (!v18 || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 2) & 0x40) != 0)
          goto LABEL_30;
LABEL_19:
        v47 = a3;
        v48 = (uint64_t *)sub_216B6C230(*(_QWORD *)(a1 + 64));
        v49 = sub_216B8AA28(a1, v67);
        sub_216B7D4E4(v48, v49, v67, v47, a4, v46);
        goto LABEL_30;
      }
    }
  }
  v56 = sub_216B882B0((_QWORD *)(a1 + 848));
  v57 = v56;
  if (!v56)
  {
LABEL_29:
    v46 = 0;
    goto LABEL_30;
  }
  v70 = a3;
  v58 = v56 - 1;
  while (1)
  {
    v59 = sub_216B8AEB8((_QWORD *)(a1 + 848), v58);
    if (sub_216B8AEC8(v59, v60))
    {
      v61 = *(_QWORD *)(a1 + 48);
      v62 = sub_216B4CBC4(*(_QWORD *)(v59 + 32));
      v63 = sub_216B81B44(v61, v62);
      if (v63)
      {
        v64 = sub_216B6E0D0(*(_QWORD *)(a1 + 64), v70, a4, v63, v50, v42, v18);
        if (v64)
          break;
      }
    }
    --v58;
    if (!--v57)
      goto LABEL_29;
  }
  v46 = v64;
  if (v18)
  {
    a3 = v70;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 2) & 0x40) == 0)
      goto LABEL_19;
  }
LABEL_30:
  sub_216B1FF6C(v76);
  return v46;
}

uint64_t sub_216B8AEB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 576);
}

uint64_t sub_216B8AEB8(_QWORD *a1, uint64_t a2)
{
  return *a1 + 56 * a2;
}

uint64_t sub_216B8AEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B25CA8(a1 + 16, a2);
  return sub_216B8F568(v3, *(_QWORD *)(a1 + 32));
}

uint64_t sub_216B8AEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_216B25CA8(a1 + 792, a2);
  return sub_216B8F568(v3, *(_QWORD *)(a1 + 808));
}

_BYTE *sub_216B8AF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  __int128 *v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t i;
  _BYTE v34[16];
  _BYTE v35[16];
  _BYTE v36[16];
  uint64_t v37[2];
  _BYTE v38[24];

  *(_BYTE *)(*(_QWORD *)(a1 + 808) + 24) = 1;
  v4 = a1 + 792;
  if (sub_216B3817C(a1 + 792, a2))
  {
    v6 = sub_216B25CA8(v4, v5);
    sub_216B70864(v6, 0);
  }
  v7 = sub_216B6B06C(*(_QWORD *)(a1 + 808) + 32);
  sub_216B7CCD8(*(_QWORD *)(a1 + 808) + 32);
  ++*(_DWORD *)(a1 + 1328);
  v8 = sub_216B8B400((unsigned __int8 *)(*(_QWORD *)(a1 + 808) + 32));
  *(_OWORD *)v38 = *(_OWORD *)a2;
  *(_QWORD *)&v38[16] = *(_QWORD *)(a2 + 16);
  sub_216B89BC0(a1, a2);
  if (sub_216B5D8E0(*(_QWORD *)(a1 + 24)) && sub_216B8B408(a2))
  {
    sub_216B7B558(a1, (unsigned int *)a2, 633, (uint64_t)v37);
    v9 = sub_216B7068C(a2);
    sub_216B89E58(v37, v9);
    return (_BYTE *)sub_216B4B3B4(v37);
  }
  if ((*(_WORD *)(a1 + 436) & 8) != 0)
  {
    v11 = sub_216B7068C(a2);
    if (v11)
    {
      v12 = v11;
      v13 = sub_216B5D91C(v11);
      if (v13 <= 0x10 && ((1 << v13) & 0x18300) != 0)
      {
        sub_216B7B558(a1, (unsigned int *)a2, 629, (uint64_t)v37);
        v14 = sub_216B4A11C(v12);
        sub_216B4B340(v37, v14, v15);
        sub_216B4B3B4(v37);
        return (_BYTE *)sub_216B89B78(a1);
      }
    }
    sub_216B7B558(a1, (unsigned int *)a2, 779, (uint64_t)v36);
    sub_216B4B3B4(v36);
  }
  sub_216B8B47C((uint64_t)v37, a1);
  v16 = sub_216B71644(a2);
  if (v16 != 2)
  {
    if (v16 != 8)
    {
      if (v16 == 3)
      {
        v17 = *(_QWORD *)(a1 + 680);
        if (v17)
        {
          v18 = sub_216B8B480(*(_QWORD *)(a1 + 808)) != 0;
          (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v17 + 16))(v17, v18);
        }
        sub_216B89F40(a1);
        return sub_216B8E2BC(v37);
      }
      v19 = sub_216B7068C(a2);
      if (v19)
      {
        switch(sub_216B5D91C(v19))
        {
          case 1u:
            sub_216B8B708(a1, (unsigned int *)a2, v8);
            return sub_216B8E2BC(v37);
          case 2u:
            v22 = a1;
            v23 = (__int128 *)a2;
            v24 = 0;
            v25 = 1;
            goto LABEL_32;
          case 3u:
            v22 = a1;
            v23 = (__int128 *)a2;
            v24 = 1;
            v25 = v8;
LABEL_32:
            sub_216B8B880(v22, v23, v24, v25);
            return sub_216B8E2BC(v37);
          case 4u:
            sub_216B8BA78(a1, (unsigned int *)a2);
            return sub_216B8E2BC(v37);
          case 5u:
            sub_216B8BBCC(a1, (unsigned int *)a2);
            return sub_216B8E2BC(v37);
          case 6u:
            sub_216B8BCD8(a1, (unsigned int *)a2);
            return sub_216B8E2BC(v37);
          case 8u:
            v26 = sub_216B1E4E0((unsigned int *)v38);
            sub_216B8BD94(a1, v26, a2, 0, 0);
            return sub_216B8E2BC(v37);
          case 9u:
            v27 = sub_216B1E4E0((unsigned int *)v38);
            sub_216B8CBE4(a1, v27, (unsigned int *)a2);
            return sub_216B8E2BC(v37);
          case 0xAu:
            sub_216B8CCB0(a1, (unsigned int *)a2, v7);
            return sub_216B8E2BC(v37);
          case 0xBu:
            sub_216B8D4E0(a1);
            return sub_216B8E2BC(v37);
          case 0xCu:
            sub_216B8D64C(a1);
            return sub_216B8E2BC(v37);
          case 0xDu:
            v28 = a1;
            v29 = (unsigned int *)a2;
            v30 = 0;
            goto LABEL_43;
          case 0xEu:
            v20 = sub_216B1E4E0((unsigned int *)v38);
            sub_216B9A644(a1, v20, 0);
            return sub_216B8E2BC(v37);
          case 0xFu:
            v21 = sub_216B1E4E0((unsigned int *)v38);
            sub_216B8D9D4(a1, v21, (unsigned int *)a2);
            return sub_216B8E2BC(v37);
          case 0x10u:
            v31 = sub_216B1E4E0((unsigned int *)v38);
            sub_216B8DA68(a1, v31, (unsigned int *)a2);
            return sub_216B8E2BC(v37);
          case 0x11u:
            sub_216B7B558(a1, (unsigned int *)a2, 810, (uint64_t)v35);
            sub_216B4B3B4(v35);
            v28 = a1;
            v29 = (unsigned int *)a2;
            v30 = 1;
LABEL_43:
            sub_216B8D8E0(v28, v29, v30);
            break;
          case 0x12u:
          case 0x13u:
            sub_216B8DB20(a1, (unsigned int *)a2);
            break;
          case 0x16u:
            if ((*(_BYTE *)(sub_216B5EE7C(a1) + 6) & 0x10) == 0)
              goto LABEL_45;
            sub_216B8E11C(a1);
            break;
          case 0x17u:
            if ((*(_BYTE *)(sub_216B5EE7C(a1) + 6) & 0x10) == 0)
              goto LABEL_45;
            sub_216B8E1EC(a1);
            break;
          case 0x18u:
            sub_216B8DC5C((uint64_t *)a1, (unsigned int *)a2);
            break;
          case 0x19u:
            sub_216B8DE88(a1, (unsigned int *)a2);
            break;
          default:
            goto LABEL_45;
        }
        return sub_216B8E2BC(v37);
      }
LABEL_45:
      if ((*(_BYTE *)(sub_216B5EE7C(a1) + 2) & 0x40) != 0)
      {
        v32 = sub_216B1D1D4(48);
        for (i = 0; i != 48; i += 24)
          sub_216B70D84(v32 + i);
        *(_OWORD *)v32 = *(_OWORD *)v38;
        *(_DWORD *)(v32 + 15) = *(_DWORD *)&v38[15];
        *(_OWORD *)(v32 + 24) = *(_OWORD *)a2;
        *(_DWORD *)(v32 + 39) = *(_DWORD *)(a2 + 15);
        if (sub_216B71174(a2, 66))
          sub_216B74800(v32 + 24, 0);
        sub_216B92C84(a1, v32, 2, 0, 1);
      }
      else
      {
        sub_216B7B558(a1, (unsigned int *)a2, 730, (uint64_t)v34);
        sub_216B4B3B4(v34);
        sub_216B89B78(a1);
      }
      return sub_216B8E2BC(v37);
    }
    if ((*(_BYTE *)(sub_216B5EE7C(a1) + 2) & 0x40) != 0)
      goto LABEL_45;
    sub_216B8B498(a1, (unsigned int *)a2);
  }
  return sub_216B8E2BC(v37);
}

uint64_t sub_216B8B400(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_216B8B408(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = sub_216B71644(a1);
  switch(v2)
  {
    case 2:
      return 0;
    case 8:
      return 1;
    case 3:
      return 1;
  }
  v3 = sub_216B7068C(a1);
  if (!v3)
    return 1;
  v4 = sub_216B5D91C(v3);
  if (v4 <= 0x19)
    return (0xFF8381u >> v4) & 1;
  else
    return 1;
}

uint64_t sub_216B8B480(uint64_t a1)
{
  return sub_216B26878(a1 + 64);
}

uint64_t sub_216B8B498(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  _BYTE v23[16];
  _QWORD v24[2];
  _BYTE v25[664];
  _BYTE v26[16];
  _BYTE v27[20];
  __int16 v28;
  __int16 v29;
  unsigned int v30[7];
  int v31;

  v31 = 0;
  result = sub_216B8E2C0(a2, (unsigned int *)&v31, 740, a1, 1u);
  if ((result & 1) != 0)
    return result;
  sub_216B70D84(v30);
  sub_216B9C594(a1, v30);
  v29 = 0;
  v28 = 0;
  if (!sub_216B71174((uint64_t)v30, 2))
  {
    if (sub_216B7214C((uint64_t)v30, 13))
    {
      sub_216B7B558(a1, v30, 737, (uint64_t)v27);
      v17 = v27;
    }
    else
    {
      if (!sub_216B820A0((uint64_t)v30))
      {
        sub_216B6E0CC(v24, (uint64_t)v30);
        sub_216B7A1DC(v25, v24[0], v24[1], a1, 1);
        if (!v25[656])
        {
          if (!v25[657])
          {
            v18 = *(_QWORD *)(a1 + 48);
            v19 = sub_216B820B0((uint64_t)v25);
            v9 = sub_216B6136C(v18, v19, v20);
            v21 = sub_216B8E4CC((_BYTE *)&v29 + 1, &v29, (_BYTE *)&v28 + 1, &v28, a1);
            result = sub_216B820FC((uint64_t)v25);
            if ((v21 & 1) != 0)
              return result;
            v8 = HIBYTE(v29);
            v7 = v29;
            v6 = HIBYTE(v28);
            v5 = v28;
            goto LABEL_4;
          }
          sub_216B7B558(a1, v30, 737, (uint64_t)v23);
          sub_216B4B3B4(v23);
        }
        sub_216B89B78(a1);
        return sub_216B820FC((uint64_t)v25);
      }
      sub_216B7B558(a1, v30, 19, (uint64_t)v26);
      v17 = v26;
    }
    sub_216B4B3B4(v17);
    return sub_216B89B78(a1);
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = -1;
LABEL_4:
  v10 = *(_QWORD *)(a1 + 48);
  v11 = sub_216B1E4E0(a2);
  result = sub_216B61550(v10, v11, v31, v9, v8 != 0, v7 != 0, v6 != 0, v5 != 0);
  v12 = *(_QWORD *)(a1 + 872);
  if (v12)
  {
    if (v7)
      v13 = 1;
    else
      v13 = 3;
    if (v8)
      v14 = 0;
    else
      v14 = v13;
    if (v5)
      v15 = 2;
    else
      v15 = v6;
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
    sub_216B4AED0(&v22);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, v16, v14, v15, v22);
  }
  return result;
}

uint64_t sub_216B8B708(uint64_t a1, unsigned int *a2, char a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  ++*(_DWORD *)(a1 + 1344);
  v21 = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
  v7 = sub_216B90250(a1, &v21);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
  if (!sub_216B8B480(*(_QWORD *)(a1 + 808)))
  {
    v9 = *(_QWORD *)(a1 + 808) + 32;
    if ((a3 & 1) != 0 || (v10 = v21) == 0 || ((v7 ^ 1) & 1) != 0)
    {
      sub_216B8F350(v9);
    }
    else
    {
      v11 = sub_216B1E4E0(a2);
      sub_216B8F328(v9, v10, v11);
    }
  }
  v12 = *(_QWORD *)(a1 + 872);
  if (v12)
  {
    v13 = sub_216B1E4E0(a2);
    sub_216B746DC(&v20, v6, v8);
    if (v7)
      v14 = 2;
    else
      v14 = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 208))(v12, v13, v20, v14);
  }
  if (v7)
  {
    v15 = *(_QWORD *)(a1 + 808);
    v16 = sub_216B1E4E0(a2);
    return sub_216B8A804(v15, v16, 0, 1, 0);
  }
  else
  {
    v18 = sub_216B1E4E0(a2);
    sub_216B4AED0(&v19);
    return sub_216B8A0E4(a1, v18, 0, 0, v19);
  }
}

uint64_t sub_216B8B880(uint64_t a1, __int128 *a2, int a3, char a4)
{
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28[6];
  __int128 v29;
  uint64_t v30;

  ++*(_DWORD *)(a1 + 1344);
  v29 = *a2;
  v30 = *((_QWORD *)a2 + 2);
  sub_216B70D84(v28);
  sub_216B89E8C(a1, v28, 0);
  if (sub_216B71174((uint64_t)v28, 2))
  {
    v7 = sub_216B1E4E0((unsigned int *)&v29);
    sub_216B4AED0(&v27);
    v8 = v7;
    v9 = v27;
    return sub_216B8A0E4(a1, v8, 0, 0, v9);
  }
  if (a3)
    v10 = "ifndef";
  else
    v10 = "ifdef";
  sub_216B89F60(a1, (uint64_t)v10, 0);
  v11 = sub_216B7068C((uint64_t)v28);
  v12 = sub_216B7B880(a1, v11);
  v13 = v12;
  if (v12)
    v14 = (unsigned int *)sub_216B7B8C4(v12);
  else
    v14 = 0;
  if (sub_216B8B480(*(_QWORD *)(a1 + 808)))
  {
    if (v14)
    {
LABEL_11:
      sub_216B96174(a1, v14);
      v15 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 808);
    v17 = v16 + 32;
    if ((a4 & 1) != 0 || v14)
    {
      sub_216B8F350(v16 + 32);
      if (v14)
        goto LABEL_11;
    }
    else
    {
      v18 = sub_216B1E4E0(v28);
      sub_216B8F328(v17, v11, v18);
    }
  }
  v15 = 1;
LABEL_17:
  v19 = *(_QWORD **)(a1 + 872);
  if (v19)
  {
    v20 = sub_216B1E4E0((unsigned int *)&v29);
    v21 = 224;
    if (a3)
      v21 = 232;
    (*(void (**)(_QWORD *, uint64_t, unsigned int *, uint64_t))(*v19 + v21))(v19, v20, v28, v13);
  }
  if (v15 != a3)
  {
    v22 = sub_216B1E4E0((unsigned int *)&v29);
    sub_216B4AED0(&v26);
    v8 = v22;
    v9 = v26;
    return sub_216B8A0E4(a1, v8, 0, 0, v9);
  }
  v24 = *(_QWORD *)(a1 + 808);
  v25 = sub_216B1E4E0((unsigned int *)&v29);
  return sub_216B8A804(v24, v25, 0, 1, 0);
}

uint64_t sub_216B8BA78(uint64_t a1, unsigned int *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  _BYTE v13[16];
  _BYTE v14[16];
  unsigned int v15;
  char v16;

  ++*(_DWORD *)(a1 + 1348);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
  sub_216B89B78(a1);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
  sub_216B70D84(&v15);
  if (sub_216B8A9C8(*(_QWORD *)(a1 + 808), (uint64_t)&v15))
  {
    sub_216B7B558(a1, a2, 836, (uint64_t)v14);
    return sub_216B4B3B4(v14);
  }
  else
  {
    if (!sub_216B8B480(*(_QWORD *)(a1 + 808)))
      sub_216B8F350(*(_QWORD *)(a1 + 808) + 32);
    if (v16)
    {
      sub_216B7B558(a1, a2, 835, (uint64_t)v13);
      sub_216B4B3B4(v13);
    }
    v7 = *(_QWORD *)(a1 + 872);
    if (v7)
    {
      v8 = sub_216B1E4E0(a2);
      sub_216B746DC(&v12, v4, v5);
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 216))(v7, v8, v12, 0, v15);
    }
    v9 = v15;
    v10 = v16;
    v11 = sub_216B1E4E0(a2);
    return sub_216B8A0E4(a1, v9, 1, v10, v11);
  }
}

uint64_t sub_216B8BBCC(uint64_t a1, unsigned int *a2)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  _BYTE v9[16];
  _BYTE v10[16];
  unsigned int v11;
  char v12;

  ++*(_DWORD *)(a1 + 1348);
  sub_216B89F60(a1, (uint64_t)"else", 0);
  sub_216B70D84(&v11);
  if (sub_216B8A9C8(*(_QWORD *)(a1 + 808), (uint64_t)&v11))
  {
    sub_216B7B558(a1, a2, 838, (uint64_t)v10);
    return sub_216B4B3B4(v10);
  }
  else
  {
    if (!sub_216B8B480(*(_QWORD *)(a1 + 808)))
      sub_216B8F350(*(_QWORD *)(a1 + 808) + 32);
    if (v12)
    {
      sub_216B7B558(a1, a2, 837, (uint64_t)v9);
      sub_216B4B3B4(v9);
    }
    v5 = *(_QWORD *)(a1 + 872);
    if (v5)
    {
      v6 = sub_216B1E4E0(a2);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 240))(v5, v6, v11);
    }
    v7 = v11;
    v8 = sub_216B1E4E0(a2);
    return sub_216B8A0E4(a1, v7, 1, 1, v8);
  }
}

uint64_t sub_216B8BCD8(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[16];
  unsigned int v8;

  ++*(_DWORD *)(a1 + 1352);
  sub_216B89F60(a1, (uint64_t)"endif", 0);
  sub_216B70D84(&v8);
  if (sub_216B8A9C8(*(_QWORD *)(a1 + 808), (uint64_t)&v8))
  {
    sub_216B7B558(a1, a2, 708, (uint64_t)v7);
    return sub_216B4B3B4(v7);
  }
  else
  {
    result = sub_216B8B480(*(_QWORD *)(a1 + 808));
    if (!(_DWORD)result)
      result = sub_216B8F354(*(_QWORD *)(a1 + 808) + 32);
    v5 = *(_QWORD *)(a1 + 872);
    if (v5)
    {
      v6 = sub_216B1E4E0(a2);
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 248))(v5, v6, v8);
    }
  }
  return result;
}

uint64_t sub_216B8BD94(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  const void **v29;
  const void **v30;
  uint64_t v31;
  const void **v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  const void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int i;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  const void **v77;
  const void **v78;
  uint64_t v79;
  const void **v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  std::string::size_type v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const void **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  std::string v120;
  std::string v121;
  std::string v122;
  uint64_t v123[2];
  const void *v124[2];
  std::string v125;
  uint64_t v126[2];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  std::string v130;
  __int128 v131;
  uint64_t v132[2];
  const void *v133[19];
  uint64_t v134;
  _BYTE v135[793];
  _OWORD v136[65];
  uint64_t v137;
  _BYTE v138[16];
  _BYTE v139[16];
  _BYTE v140[16];
  _BYTE v141[16];
  _BYTE v142[16];
  _BYTE v143[16];
  int v144;
  unsigned int v145;
  __int128 v146;
  const void *v147[19];
  unsigned int v148[6];
  std::string v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  sub_216B70D84(v148);
  sub_216B9D688(*(_QWORD *)(a1 + 808), v148);
  sub_216B295EC(v147);
  sub_216B26D14(&v146);
  sub_216B4AED0(&v145);
  sub_216B4AED0(&v144);
  v10 = sub_216B71644((uint64_t)v148);
  if (v10 > 14)
  {
    if (v10 == 46)
    {
      LOBYTE(v136[0]) = 60;
      sub_216B1FBBC((uint64_t)v147, v136);
      if ((sub_216B8E9A4(a1, v147, &v145) & 1) != 0)
        return sub_216B2489C(v147);
      *(_QWORD *)&v146 = sub_216B24850((uint64_t)v147);
      *((_QWORD *)&v146 + 1) = v23;
      v13 = 1;
LABEL_8:
      v144 = sub_216B62D74(&v145, v13);
      v14 = sub_216B1E4E0(v148);
      v15 = sub_216B7744C(v14, v144);
      v17 = v16;
      v18 = v146;
      v19 = sub_216B1E4E0(v148);
      v20 = sub_216B8E870(a1, v19, (uint64_t *)&v146);
      if (sub_216B29094((uint64_t)&v146))
        goto LABEL_9;
      v21 = sub_216B7068C(a3);
      v22 = sub_216B4AA68(v21);
      sub_216B89F60(a1, v22, 1);
      if (sub_216B882B0((_QWORD *)(a1 + 848)) == 199)
      {
        sub_216B7B558(a1, v148, 729, (uint64_t)v142);
        sub_216B4B3B4(v142);
        return sub_216B2489C(v147);
      }
      if (sub_216B27BAC((_DWORD *)(a1 + 772)))
      {
        sub_216B720D8(a1, a2, 727, (uint64_t)v141);
        sub_216B4B3B4(v141);
        sub_216B720D8(a1, *(_DWORD *)(a1 + 772), 54, (uint64_t)v140);
        sub_216B4B3B4(v140);
        sub_216B4AED0(v136);
        *(_DWORD *)(a1 + 772) = v136[0];
      }
      v118 = v17;
      if (sub_216B27BAC((_DWORD *)(a1 + 776)))
      {
        sub_216B720D8(a1, a2, 728, (uint64_t)v139);
        sub_216B4B3B4(v139);
        sub_216B720D8(a1, *(_DWORD *)(a1 + 776), 54, (uint64_t)v138);
        sub_216B4B3B4(v138);
        sub_216B4AED0(v136);
        *(_DWORD *)(a1 + 776) = v136[0];
      }
      if (sub_216B8EB48(*(_QWORD *)(a1 + 64), v24))
      {
        *(_QWORD *)&v136[0] = sub_216B8EB50(*(_QWORD *)(a1 + 64), v18, *((uint64_t *)&v18 + 1));
        *((_QWORD *)&v136[0] + 1) = v25;
        if (!sub_216B29094((uint64_t)v136))
          v146 = v136[0];
      }
      v117 = a5;
      v137 = 0;
      sub_216B6BD8C(v136);
      sub_216B6BD8C(v135);
      sub_216B6DE08((uint64_t)&v134);
      v26 = sub_216B1E4E0(v148);
      sub_216B295EC(v133);
      v27 = **(_QWORD **)(a1 + 24);
      if ((v27 & 4) != 0)
      {
        sub_216B25018(&v146, (uint64_t)&v130);
        sub_216B26CA0(v132, &v130);
        sub_216B6C7A4(v133, v132[0], v132[1]);
        std::string::~string(&v130);
        sub_216B2929C((uint64_t)v133);
        v27 = **(_QWORD **)(a1 + 24);
      }
      v119 = v20;
      if ((v27 & 4) != 0)
      {
        v28 = (char *)sub_216B2A0B4((uint64_t)v133);
        sub_216B1E678((int)&v131, v28);
      }
      else
      {
        v131 = v146;
      }
      if (*(_QWORD *)(a1 + 872))
        v29 = (const void **)v136;
      else
        v29 = 0;
      if (*(_QWORD *)(a1 + 872))
        v30 = (const void **)v135;
      else
        v30 = 0;
      v31 = sub_216B262E0(*(_QWORD *)(a1 + 64));
      v32 = (const void **)&v134;
      if ((*(_BYTE *)(v31 + 152) & 2) == 0)
        v32 = 0;
      v112 = v30;
      v116 = v26;
      v33 = v119;
      v34 = sub_216B8AAF8(a1, v26, v131, *((uint64_t *)&v131 + 1), v119, a4, &v137, v29, v112, v32, 0);
      v36 = v34;
      if (*(_QWORD *)(a1 + 872))
      {
        if (!v34)
        {
          sub_216B295EC(&v130);
          if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, std::string *))(**(_QWORD **)(a1 + 872) + 32))(*(_QWORD *)(a1 + 872), v146, *((_QWORD *)&v146 + 1), &v130)&& (v37 = *(_QWORD *)(a1 + 40), v38 = sub_216B28180((uint64_t)&v130), (v40 = sub_216B4FCC4(v37, v38, v39, 1)) != 0))
          {
            sub_216B8EBE0((uint64_t)&v149, (uint64_t)v40, 0, 0);
            sub_216B8EBE4(*(_QWORD *)(a1 + 64), (__n128 *)&v149, v119);
            if ((**(_BYTE **)(a1 + 24) & 4) != 0)
            {
              v41 = (char *)sub_216B2A0B4((uint64_t)v133);
              sub_216B1E678((int)&v129, v41);
            }
            else
            {
              v129 = v146;
            }
            v42 = sub_216B262E0(*(_QWORD *)(a1 + 64));
            v43 = (const void **)&v134;
            if ((*(_BYTE *)(v42 + 152) & 2) == 0)
              v43 = 0;
            v36 = sub_216B8AAF8(a1, v116, v129, *((uint64_t *)&v129 + 1), v119, a4, &v137, 0, 0, v43, 1);
          }
          else
          {
            v36 = 0;
          }
          sub_216B2489C(&v130);
        }
        if (!sub_216B7DE18(&v134, v35) || (*(_BYTE *)(sub_216B5EE7C(a1) + 6) & 0x10) == 0)
        {
          v44 = v36;
          v45 = *(_QWORD *)(a1 + 872);
          v46 = v15;
          if ((**(_BYTE **)(a1 + 24) & 4) != 0)
          {
            v47 = (char *)sub_216B2A0B4((uint64_t)v133);
            sub_216B1E678((int)&v128, v47);
          }
          else
          {
            v128 = v146;
          }
          v48 = sub_216B28180((uint64_t)v136);
          v50 = v49;
          v51 = sub_216B28180((uint64_t)v135);
          v52 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v45 + 40);
          v114 = v50;
          v115 = v51;
          v113 = v48;
          v53 = v45;
          v36 = v44;
          v33 = v119;
          v15 = v46;
          v52(v53, a2, a3, v128, *((_QWORD *)&v128 + 1), v119, v46, v17, v44, v113, v114, v115, v54, 0);
        }
      }
      if (v36)
        goto LABEL_53;
      if ((*(_WORD *)(a1 + 436) & 4) == 0)
      {
        if (v33)
        {
          if ((**(_BYTE **)(a1 + 24) & 4) != 0)
          {
            v76 = (char *)sub_216B2A0B4((uint64_t)v133);
            sub_216B1E678((int)&v127, v76);
          }
          else
          {
            v127 = v146;
          }
          if (*(_QWORD *)(a1 + 872))
            v77 = (const void **)v136;
          else
            v77 = 0;
          if (*(_QWORD *)(a1 + 872))
            v78 = (const void **)v135;
          else
            v78 = 0;
          v79 = sub_216B262E0(*(_QWORD *)(a1 + 64));
          v80 = (const void **)&v134;
          if ((*(_BYTE *)(v79 + 152) & 2) == 0)
            v80 = 0;
          v81 = sub_216B8AAF8(a1, v116, v127, *((uint64_t *)&v127 + 1), 0, a4, &v137, v77, v78, v80, 0);
          if (v81)
          {
            v36 = v81;
            v82 = sub_216B1E4E0(v148);
            sub_216B746DC(&v120, v82, v144);
            sub_216B7B558(a1, v148, 722, (uint64_t)&v121);
            v83 = sub_216B4B340((uint64_t *)&v121, v146, *((uint64_t *)&v146 + 1));
            v84 = v15;
            v85 = v120.__r_.__value_.__r.__words[0];
            sub_216B25018(&v146, (uint64_t)&v125);
            sub_216B2BA64("\"", &v125, (uint64_t)&v122);
            sub_216B2B308(&v122, "\"", (uint64_t)&v149);
            sub_216B26CA0(v126, &v149);
            v86 = v85;
            v15 = v84;
            sub_216B8EC8C(v86, v126[0], v126[1], (uint64_t)&v130);
            sub_216B73938((uint64_t)v83, (uint64_t)&v130);
            sub_216B4C8CC(&v130);
            std::string::~string(&v149);
            std::string::~string(&v122);
            std::string::~string(&v125);
            sub_216B4B3B4(&v121);
LABEL_53:
            if (sub_216B7DE18(&v134, v35) && (*(_BYTE *)(sub_216B5EE7C(a1) + 6) & 0x10) != 0)
            {
              v56 = sub_216B6EFA4(&v134, v55);
              v57 = sub_216B8ECCC(v56);
              v58 = v15;
              v60 = v59;
              v61 = sub_216B5EE7C(a1);
              sub_216B26CA0(v124, v61 + 160);
              v62 = v60;
              v15 = v58;
              if (sub_216B2B2F0(v57, v62, v124[0], (size_t)v124[1]))
              {
                sub_216B5EDE4(&v149);
                v64 = sub_216B6EFA4(&v134, v63);
                if (v64)
                {
                  v65 = v64;
                  do
                  {
                    sub_216B26CA0(v123, v65);
                    v122.__r_.__value_.__r.__words[0] = sub_216B89E24(a1, v123[0], v123[1]);
                    LODWORD(v125.__r_.__value_.__l.__data_) = sub_216B1E4E0(v148);
                    v130.__r_.__value_.__r.__words[0] = sub_216B67C54((uint64_t)&v122, (uint64_t)&v125);
                    v130.__r_.__value_.__l.__size_ = v66;
                    sub_216B267B0((uint64_t)&v149, &v130);
                    v65 = *(_QWORD *)(v65 + 32);
                  }
                  while (v65);
                }
                v67 = sub_216B1E600((uint64_t)&v149);
                v68 = sub_216B1E67C((uint64_t)&v149);
                sub_216B8ECF8(v67, v68);
                sub_216B295EC(&v130);
                v69 = sub_216B2BA30((uint64_t)&v149);
                if (v69)
                {
                  for (i = 0; i != v69; ++i)
                  {
                    if (i)
                      sub_216B6E098((uint64_t)&v130, 46);
                    v71 = (uint64_t *)sub_216B2B9AC((uint64_t)&v149, i);
                    v72 = sub_216B4A11C(*v71);
                    sub_216B341A4((const void **)&v130.__r_.__value_.__l.__data_, v72, v73);
                  }
                }
                v74 = sub_216B7068C(a3);
                v75 = (char *)&loc_216B8C4C8 + 4 * word_216C187AA[sub_216B5D91C(v74) - 8];
                __asm { BR              X10 }
              }
            }
            if (*(_QWORD *)(a1 + 872) && sub_216B7DE18(&v134, v55))
            {
              v87 = *(_QWORD *)(a1 + 872);
              v88 = v146;
              v89 = sub_216B28180((uint64_t)v136);
              v91 = v90;
              v92 = sub_216B28180((uint64_t)v135);
              (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v87 + 40))(v87, a2, a3, v88, *((_QWORD *)&v88 + 1), v119, v15, v118, v36, v89, v91, v92, v93, 0);
            }
            LODWORD(v130.__r_.__value_.__l.__data_) = sub_216B8ED94(*(_QWORD *)(a1 + 64), v36);
            v94 = *(_QWORD *)(a1 + 48);
            v95 = sub_216B1E4E0(v148);
            LODWORD(v149.__r_.__value_.__l.__data_) = sub_216B63EF8(v94, v95);
            v96 = *(unsigned int *)sub_216B4ED68(&v130, &v149);
            if ((sub_216B6E7D8(*(_QWORD *)(a1 + 64), v36, v117) & 1) != 0)
            {
              LODWORD(v149.__r_.__value_.__l.__data_) = v145;
              v97 = sub_216B5E144(&v149);
              LODWORD(v98) = v149.__r_.__value_.__l.__data_;
              if (v97)
              {
                v99 = sub_216B630BC(*(_DWORD **)(a1 + 48), (int)v149.__r_.__value_.__l.__data_);
                v98 = HIDWORD(v99);
                LODWORD(v149.__r_.__value_.__l.__data_) = HIDWORD(v99);
              }
              v100 = sub_216B84BE4(*(_QWORD *)(a1 + 48), v36, v98, v96, 0, 0);
              sub_216B6DE08((uint64_t)&v130);
              if ((*(_BYTE *)(sub_216B5EE7C(a1) + 6) & 0x10) != 0)
              {
                v101 = sub_216B5EE7C(a1);
                if (!sub_216B25DD0(v101 + 136, v102))
                {
                  v103 = sub_216B8AA28(a1, v116);
                  v104 = (uint64_t *)sub_216B6C230(*(_QWORD *)(a1 + 64));
                  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_216B7D9A4(v104, v36, v103);
                }
              }
              v105 = v137;
              v106 = sub_216B1E4E0(v148);
              if (!sub_216B9277C(a1, v100, v105, v106) && sub_216B7DE18(&v130, v107))
              {
                v109 = sub_216B6EFA4(&v130, v108);
                *(_QWORD *)(a1 + 840) = v109;
                sub_216B8ECFC(a1, a2, v145, 519, v109);
              }
            }
            else
            {
              v110 = *(_QWORD *)(a1 + 872);
              if (v110)
                (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v110 + 24))(v110, v36, v148, v96);
            }
            goto LABEL_95;
          }
        }
        sub_216B7B558(a1, v148, 721, (uint64_t)&v130);
        sub_216B4B340((uint64_t *)&v130, v146, *((uint64_t *)&v146 + 1));
        sub_216B4B3B4(&v130);
      }
LABEL_95:
      sub_216B2489C(v133);
      sub_216B2489C(v135);
      sub_216B2489C(v136);
      return sub_216B2489C(v147);
    }
    if (v10 != 15)
      goto LABEL_4;
LABEL_7:
    *(_QWORD *)&v146 = sub_216B9BC28(a1, v148, v147, 0);
    *((_QWORD *)&v146 + 1) = v12;
    v145 = sub_216B1E4E0(v148);
    v13 = sub_216B693F8((uint64_t)v148);
    goto LABEL_8;
  }
  if (v10 != 2)
  {
    if (v10 != 13)
    {
LABEL_4:
      v11 = sub_216B1E4E0(v148);
      sub_216B720D8(a1, v11, 718, (uint64_t)v143);
      sub_216B4B3B4(v143);
LABEL_9:
      sub_216B89B78(a1);
      return sub_216B2489C(v147);
    }
    goto LABEL_7;
  }
  return sub_216B2489C(v147);
}

BOOL sub_216B8CBE4(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  int v6;
  const char *v7;
  unsigned int v8;
  _BOOL8 result;
  _BYTE v10[24];
  _BYTE v11[16];

  v6 = sub_216B1E4E0(a3);
  v7 = sub_216B63FB4(*(_DWORD **)(a1 + 48), v6, 0);
  if (!strcmp(v7, "<built-in>"))
  {
    sub_216B8BD94(a1, a2, (uint64_t)a3, 0, 0);
    sub_216B70D84(v10);
    do
    {
      sub_216B9C594(a1, v10);
      result = sub_216B7214C((uint64_t)v10, 66);
    }
    while (result);
  }
  else
  {
    v8 = sub_216B1E4E0(a3);
    sub_216B720D8(a1, v8, 840, (uint64_t)v11);
    sub_216B4B3B4(v11);
    return sub_216B89B78(a1);
  }
  return result;
}

uint64_t sub_216B8CCB0(uint64_t a1, unsigned int *a2, int a3)
{
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  BOOL v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  _BYTE *v56;
  int v57;
  unsigned int v58;
  _BYTE v59[16];
  uint64_t v60[2];
  _BYTE v61[16];
  _BYTE v62[16];
  _BYTE v63[16];
  _BYTE v64[16];
  _BYTE v65[16];
  _BYTE v66[16];
  _BYTE v67[16];
  _BYTE v68[16];
  uint64_t v69[3];
  _BYTE v70[24];
  const void *v71[2];
  __int128 v72;
  uint64_t v73;

  ++*(_DWORD *)(a1 + 1332);
  sub_216B70D84(&v72);
  sub_216B89E8C(a1, (unsigned int *)&v72, 1);
  if (sub_216B5D8E0(*(_QWORD *)(a1 + 24)))
  {
    v6 = *(_DWORD **)(a1 + 48);
    v7 = sub_216B1E4E0(a2);
    *(_DWORD *)v70 = sub_216B60454(v6, v7);
    if (sub_216B651D4(v70, (_DWORD *)(a1 + 1416)))
    {
      v8 = sub_216B7068C((uint64_t)&v72);
      if (v8)
      {
        v9 = v8;
        *(_QWORD *)v70 = sub_216B4A11C(v8);
        *(_QWORD *)&v70[8] = v10;
        sub_216B1E678((int)v71, "GL_");
        if (sub_216B2A2EC((uint64_t)v70, v71[0], (size_t)v71[1]))
        {
          sub_216B7B558(a1, a2, 634, (uint64_t)v69);
          sub_216B89E58(v69, v9);
          sub_216B4B3B4(v69);
        }
        if ((unint64_t)sub_216B1E67C((uint64_t)v70) >= 2)
        {
          v11 = 2;
          v12 = 1;
          while (sub_216B26288(v70, v12) != 95 || sub_216B26288(v70, v11 - 2) != 95)
          {
            v12 = v11;
            if (sub_216B1E67C((uint64_t)v70) <= (unint64_t)v11++)
              goto LABEL_13;
          }
          sub_216B7B558(a1, a2, 634, (uint64_t)v69);
          sub_216B89E58(v69, v9);
          sub_216B4B3B4(v69);
        }
      }
    }
  }
LABEL_13:
  result = sub_216B71174((uint64_t)&v72, 2);
  if ((result & 1) == 0)
  {
    *(_OWORD *)v70 = v72;
    *(_QWORD *)&v70[16] = v73;
    if (sub_216B3817C(a1 + 792, v15))
    {
      v17 = sub_216B25CA8(a1 + 792, v16);
      sub_216B70878(v17, (*(_WORD *)(a1 + 436) & 2) != 0);
    }
    v18 = sub_216B1E4E0((unsigned int *)&v72);
    v19 = (unsigned int *)sub_216B899B8(a1, v18);
    sub_216B70D84(v69);
    sub_216B89BC0(a1, (uint64_t)v69);
    if (sub_216B71174((uint64_t)v69, 2))
    {
      if (a3)
      {
        v20 = *(_QWORD *)(a1 + 808) + 32;
        v21 = sub_216B7068C((uint64_t)&v72);
        v22 = sub_216B1E4E0((unsigned int *)&v72);
        sub_216B8F188(v20, v21, v22);
      }
      goto LABEL_35;
    }
    if (sub_216B75974((uint64_t)v69))
    {
      sub_216B747D8((uint64_t)v69, 2);
LABEL_35:
      if (!sub_216B71174((uint64_t)v69, 2))
      {
        *(_OWORD *)v70 = *(_OWORD *)v69;
        *(_DWORD *)&v70[15] = *(_DWORD *)((char *)&v69[1] + 7);
      }
      v24 = sub_216B8F1D4((uint64_t)v19);
      v25 = sub_216B7214C((uint64_t)v69, 2);
      if (v24)
      {
        if (v25)
        {
          do
          {
            *(_OWORD *)v70 = *(_OWORD *)v69;
            *(_DWORD *)&v70[15] = *(_DWORD *)((char *)&v69[1] + 7);
            sub_216B8F1E4((uint64_t)v19, (uint64_t)v69);
            sub_216B89BC0(a1, (uint64_t)v69);
          }
          while (sub_216B7214C((uint64_t)v69, 2));
        }
LABEL_62:
        sub_216B8F1A4(*(unsigned int **)(a1 + 328), 1);
        v31 = sub_216B8F1EC((uint64_t)v19);
        if (v31)
        {
          v32 = v31;
          v33 = sub_216B8F204((uint64_t)v19, 0);
          if (sub_216B71174(v33, 66))
          {
            v34 = (unsigned int *)sub_216B8F204((uint64_t)v19, 0);
            sub_216B7B558(a1, v34, 697, (uint64_t)v64);
            v35 = v64;
            return sub_216B4B3B4(v35);
          }
          v36 = v32 - 1;
          v37 = sub_216B8F204((uint64_t)v19, v36);
          if (sub_216B71174(v37, 66))
          {
            v38 = (unsigned int *)sub_216B8F204((uint64_t)v19, v36);
            sub_216B7B558(a1, v38, 696, (uint64_t)v63);
            v35 = v63;
            return sub_216B4B3B4(v35);
          }
        }
        v39 = sub_216B1E4E0((unsigned int *)v70);
        sub_216B68C9C((uint64_t)v19, v39);
        v40 = sub_216B7068C((uint64_t)&v72);
        v41 = sub_216B7AE74(a1, v40);
        if (!v41)
          goto LABEL_82;
        v42 = (unsigned int *)v41;
        v43 = sub_216B2037C(a1);
        if (!sub_216B8F21C(v43)
          || (v44 = *(_QWORD *)(a1 + 48), v45 = sub_216B1E4E0(a2), !sub_216B4ED84(v44, v45)))
        {
          if ((sub_216B8F224((uint64_t)v42) & 1) == 0 && sub_216B8F230((uint64_t)v42))
          {
            v46 = sub_216B1E4E0(v42);
            sub_216B720D8(a1, v46, 844, (uint64_t)v62);
            sub_216B4B3B4(v62);
          }
          if (sub_216B89E80((uint64_t)v42))
          {
            v47 = v61;
            sub_216B7B558(a1, (unsigned int *)&v72, 808, (uint64_t)v61);
LABEL_79:
            sub_216B4B3B4(v47);
            goto LABEL_80;
          }
          if ((sub_216B8F23C((uint64_t)v42) & 1) == 0
            && (sub_216B7C674((uint64_t)v19, (uint64_t)v42, a1, (**(_QWORD **)(a1 + 24) >> 3) & 1) & 1) == 0)
          {
            v48 = sub_216B1E4E0(v19);
            sub_216B720D8(a1, v48, 806, (uint64_t)v60);
            v49 = sub_216B7068C((uint64_t)&v72);
            sub_216B89E58(v60, v49);
            sub_216B4B3B4(v60);
            v50 = sub_216B1E4E0(v42);
            v47 = v59;
            sub_216B720D8(a1, v50, 56, (uint64_t)v59);
            goto LABEL_79;
          }
        }
LABEL_80:
        if (sub_216B8F230((uint64_t)v42))
        {
          v51 = sub_216B1E4E0(v42);
          sub_216B8F248(a1 + 1008, v51);
        }
LABEL_82:
        v52 = (unsigned int *)sub_216B7068C((uint64_t)&v72);
        v53 = sub_216B8F274(a1, v52, v19);
        v54 = sub_216B40EE8(a1);
        v55 = sub_216B1E4E0(v19);
        if (sub_216B640B8(v54, v55))
        {
          v56 = *(_BYTE **)(a1 + 16);
          v57 = sub_216B1E4E0(v19);
          if (!sub_216B6DED4(v56, 0x34Cu, v57))
          {
            sub_216B8F2DC((uint64_t)v19, 1);
            v58 = sub_216B1E4E0(v19);
            sub_216B8F2FC(a1 + 1008, v58);
          }
        }
        result = *(_QWORD *)(a1 + 872);
        if (result)
          return (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *))(*(_QWORD *)result + 176))(result, &v72, v53);
        return result;
      }
      if (!v25)
        goto LABEL_62;
      while (1)
      {
        *(_OWORD *)v70 = *(_OWORD *)v69;
        *(_DWORD *)&v70[15] = *(_DWORD *)((char *)&v69[1] + 7);
        if (sub_216B7214C((uint64_t)v69, 65) && sub_216B7214C((uint64_t)v69, 66))
          goto LABEL_52;
        if ((*(_BYTE *)(sub_216B5EE7C(a1) + 4) & 0x80) != 0)
          break;
        v26 = sub_216B71174((uint64_t)v69, 66);
        sub_216B89BC0(a1, (uint64_t)v69);
        if (v26)
        {
          if (sub_216B71174((uint64_t)v69, 2))
          {
            sub_216B8F1E4((uint64_t)v19, (uint64_t)v70);
            goto LABEL_62;
          }
          v27 = sub_216B8F1EC((uint64_t)v19);
          if (v27)
          {
            v28 = v27;
            if (sub_216B7068C((uint64_t)v69) == *(_QWORD *)(a1 + 328))
            {
              v29 = sub_216B8F204((uint64_t)v19, v28 - 1);
              if (sub_216B71174(v29, 64))
                sub_216B8F20C((uint64_t)v19);
            }
          }
          goto LABEL_60;
        }
        if (!sub_216B7068C((uint64_t)v69)
          || (v30 = sub_216B7068C((uint64_t)v69), sub_216B7C954((uint64_t)v19, v30) == -1))
        {
          if ((*(_BYTE *)(sub_216B5EE7C(a1) + 2) & 0x40) == 0 || !sub_216B7214C((uint64_t)v69, 2))
          {
            sub_216B7B558(a1, (unsigned int *)v69, 748, (uint64_t)v65);
            sub_216B4B3B4(v65);
            return (uint64_t)sub_216B8F1A4(*(unsigned int **)(a1 + 328), 1);
          }
          sub_216B74800((uint64_t)v70, 0);
LABEL_60:
          sub_216B8F1E4((uint64_t)v19, (uint64_t)v70);
          goto LABEL_61;
        }
        sub_216B8F1E4((uint64_t)v19, (uint64_t)v70);
        sub_216B8F1E4((uint64_t)v19, (uint64_t)v69);
        *(_OWORD *)v70 = *(_OWORD *)v69;
        *(_DWORD *)&v70[15] = *(_DWORD *)((char *)&v69[1] + 7);
LABEL_53:
        sub_216B89BC0(a1, (uint64_t)v69);
LABEL_61:
        if (!sub_216B7214C((uint64_t)v69, 2))
          goto LABEL_62;
      }
      sub_216B74800((uint64_t)v69, 0);
LABEL_52:
      sub_216B8F1E4((uint64_t)v19, (uint64_t)v69);
      goto LABEL_53;
    }
    if (!sub_216B71174((uint64_t)v69, 21))
    {
      if ((**(_BYTE **)(a1 + 24) & 0x81) != 0)
      {
        sub_216B7B558(a1, (unsigned int *)v69, 776, (uint64_t)v68);
        v23 = v68;
      }
      else if (sub_216B71174((uint64_t)v69, 71) || sub_216B71174((uint64_t)v69, 0))
      {
        sub_216B7B558(a1, (unsigned int *)v69, 787, (uint64_t)v67);
        v23 = v67;
      }
      else
      {
        sub_216B7B558(a1, (unsigned int *)v69, 878, (uint64_t)v66);
        v23 = v66;
      }
      sub_216B4B3B4(v23);
      goto LABEL_35;
    }
    sub_216B8F194((uint64_t)v19);
    result = sub_216B8EDF0(a1, (uint64_t)v19, (unsigned int *)v70);
    if (!(_DWORD)result)
    {
      if (sub_216B7C92C((uint64_t)v19))
        sub_216B8F1A4(*(unsigned int **)(a1 + 328), 0);
      sub_216B89BC0(a1, (uint64_t)v69);
      goto LABEL_35;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 808) + 24))
      return sub_216B89B78(a1);
  }
  return result;
}

uint64_t sub_216B8D4E0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12[2];
  _BYTE v13[16];
  unsigned int v14[6];

  ++*(_DWORD *)(a1 + 1336);
  sub_216B70D84(v14);
  sub_216B89E8C(a1, v14, 2);
  result = sub_216B71174((uint64_t)v14, 2);
  if ((result & 1) == 0)
  {
    sub_216B89F60(a1, (uint64_t)"undef", 0);
    v3 = sub_216B7068C((uint64_t)v14);
    v4 = sub_216B7B880(a1, v3);
    v5 = v4;
    if (v4)
      v6 = (unsigned int *)sub_216B7B8C4(v4);
    else
      v6 = 0;
    result = *(_QWORD *)(a1 + 872);
    if (result)
      result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)result + 184))(result, v14, v5);
    if (v6)
    {
      if ((sub_216B8F224((uint64_t)v6) & 1) == 0 && sub_216B8F230((uint64_t)v6))
      {
        v7 = sub_216B1E4E0(v6);
        sub_216B720D8(a1, v7, 844, (uint64_t)v13);
        sub_216B4B3B4(v13);
      }
      if (sub_216B8F230((uint64_t)v6))
      {
        v8 = sub_216B1E4E0(v6);
        sub_216B8F248(a1 + 1008, v8);
      }
      v9 = (unsigned int *)sub_216B7068C((uint64_t)v14);
      v10 = sub_216B1E4E0(v14);
      sub_216B26D14(v12);
      v11 = (_QWORD *)sub_216B89A6C(a1, v10, 0, v12[0], v12[1]);
      return (uint64_t)sub_216B94248(a1, v9, v11);
    }
  }
  return result;
}

uint64_t sub_216B8D64C(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE v17[16];
  _QWORD v18[2];
  uint64_t v19[82];
  char v20;
  char v21;
  _BYTE v22[16];
  _BYTE v23[16];
  unsigned int v24[6];
  _BYTE v25[16];
  _BYTE v26[20];
  unsigned int v27;
  unsigned int v28[6];

  sub_216B70D84(v28);
  sub_216B9C594(a1, v28);
  v27 = 0;
  result = sub_216B8E2C0(v28, &v27, 736, a1, 0);
  if ((result & 1) == 0)
  {
    v3 = v27;
    if (!v27)
    {
      sub_216B7B558(a1, v28, 805, (uint64_t)v26);
      sub_216B4B3B4(v26);
    }
    v4 = **(_QWORD **)(a1 + 24);
    if ((v4 & 0x81) != 0)
      v5 = 0x80000000;
    else
      v5 = 0x8000;
    if (v3 >= v5)
    {
      sub_216B7B558(a1, v28, 804, (uint64_t)v19);
      sub_216B7A71C(v19, v5);
      v6 = v19;
    }
    else
    {
      if (v3 < 0x8000 || (v4 & 0x80) == 0)
      {
LABEL_13:
        sub_216B70D84(v24);
        sub_216B9C594(a1, v24);
        if (sub_216B71174((uint64_t)v24, 2))
        {
          v7 = -1;
          goto LABEL_15;
        }
        if (sub_216B7214C((uint64_t)v24, 13))
        {
          sub_216B7B558(a1, v24, 735, (uint64_t)v23);
          v12 = v23;
        }
        else
        {
          if (!sub_216B820A0((uint64_t)v24))
          {
            sub_216B6E0CC(v18, (uint64_t)v24);
            sub_216B7A1DC(v19, v18[0], v18[1], a1, 1);
            if (!v20)
            {
              if (!v21)
              {
                v13 = *(_QWORD *)(a1 + 48);
                v14 = sub_216B820B0((uint64_t)v19);
                v7 = sub_216B6136C(v13, v14, v15);
                sub_216B89F60(a1, (uint64_t)"line", 1);
                sub_216B820FC((uint64_t)v19);
LABEL_15:
                v8 = *(_QWORD *)(a1 + 48);
                v9 = sub_216B1E4E0(v28);
                result = sub_216B613BC(v8, v9, v3, v7);
                v10 = *(_QWORD *)(a1 + 872);
                if (v10)
                {
                  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 32))(*(_QWORD *)(a1 + 808));
                  sub_216B4AED0(&v16);
                  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 16))(v10, v11, 3, 0, v16);
                }
                return result;
              }
              sub_216B7B558(a1, v24, 737, (uint64_t)v17);
              sub_216B4B3B4(v17);
            }
            sub_216B89B78(a1);
            return sub_216B820FC((uint64_t)v19);
          }
          sub_216B7B558(a1, v24, 19, (uint64_t)v22);
          v12 = v22;
        }
        sub_216B4B3B4(v12);
        return sub_216B89B78(a1);
      }
      sub_216B7B558(a1, v28, 869, (uint64_t)v25);
      v6 = (uint64_t *)v25;
    }
    sub_216B4B3B4(v6);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_216B8D8E0(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17[2];
  uint64_t v18[2];
  _BYTE v19[152];

  v6 = a1 + 800;
  if (sub_216B3817C(a1 + 800, (uint64_t)a2))
  {
    v8 = sub_216B25CA8(v6, v7);
    return sub_216B99C84(v8);
  }
  else
  {
    sub_216B295EC(v19);
    v11 = sub_216B25CA8(a1 + 792, v10);
    sub_216B74CF4(v11, (uint64_t)v19);
    v18[0] = sub_216B24850((uint64_t)v19);
    v18[1] = v12;
    sub_216B1E678((int)v17, " ");
    v13 = sub_216B39E04(v18, v17[0], v17[1]);
    v15 = v14;
    if (a3)
      v16 = 839;
    else
      v16 = 723;
    sub_216B7B558(a1, a2, v16, (uint64_t)v18);
    sub_216B4B340(v18, v13, v15);
    sub_216B4B3B4(v18);
    return sub_216B2489C(v19);
  }
}

uint64_t sub_216B8D9D4(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  _BYTE v8[16];

  v6 = **(_QWORD **)(a1 + 24);
  if ((v6 & 0x400) != 0)
    return sub_216B8BD94(a1, a2, (uint64_t)a3, 0, 1);
  if ((v6 & 4) == 0)
  {
    sub_216B7B558(a1, a3, 801, (uint64_t)v8);
    sub_216B4B3B4(v8);
    return sub_216B8BD94(a1, a2, (uint64_t)a3, 0, 1);
  }
  return sub_216B8EDB0(a1, a3);
}

uint64_t sub_216B8DA68(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  _BYTE v12[16];
  _BYTE v13[16];

  sub_216B7B558(a1, a3, 802, (uint64_t)v13);
  sub_216B4B3B4(v13);
  v6 = *(_QWORD *)(a1 + 816);
  if (sub_216B92678(a1, v7))
  {
    sub_216B7B558(a1, a3, 842, (uint64_t)v12);
    v8 = v12;
LABEL_6:
    sub_216B4B3B4(v8);
    v9 = 0;
    return sub_216B8BD94(a1, a2, (uint64_t)a3, v9, 0);
  }
  if (!v6)
  {
    sub_216B7B558(a1, a3, 841, (uint64_t)v11);
    v8 = v11;
    goto LABEL_6;
  }
  v9 = v6 + 16;
  return sub_216B8BD94(a1, a2, (uint64_t)a3, v9, 0);
}

void sub_216B8DB20(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  std::string v6;
  unsigned __int8 v7;
  _BYTE v8[16];
  _BYTE v9[16];
  unsigned int v10[6];
  _BYTE v11[16];

  sub_216B7B558(a1, a2, 800, (uint64_t)v11);
  sub_216B4B3B4(v11);
  sub_216B70D84(v10);
  sub_216B9C594(a1, v10);
  if (sub_216B7214C((uint64_t)v10, 13) && sub_216B7214C((uint64_t)v10, 14))
  {
    sub_216B7B558(a1, v10, 742, (uint64_t)v9);
    sub_216B4B3B4(v9);
    if (!sub_216B7214C((uint64_t)v10, 2))
      return;
LABEL_7:
    sub_216B89B78(a1);
    return;
  }
  if (sub_216B820A0((uint64_t)v10))
  {
    sub_216B7B558(a1, v10, 19, (uint64_t)v8);
    sub_216B4B3B4(v8);
    goto LABEL_7;
  }
  sub_216B89F60(a1, (uint64_t)"ident", 0);
  if (*(_QWORD *)(a1 + 872))
  {
    v7 = 0;
    sub_216B747E8(a1, v10, &v7, &v6);
    if (!v7)
    {
      v4 = *(_QWORD *)(a1 + 872);
      v5 = sub_216B1E4E0(a2);
      (*(void (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)v4 + 64))(v4, v5, &v6);
    }
    std::string::~string(&v6);
  }
}

uint64_t sub_216B8DC5C(uint64_t *a1, unsigned int *a2)
{
  uint64_t result;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18[2];
  _BYTE v19[20];
  unsigned int v20;
  unsigned int v21[6];
  uint64_t v22[13];

  v22[12] = *MEMORY[0x24BDAC8D0];
  if (sub_216B5D8E0(a1[3]))
  {
    sub_216B70D84(v21);
    sub_216B89BC0((uint64_t)a1, (uint64_t)v21);
    v20 = 0;
    result = sub_216B8E2C0(v21, &v20, 641, (uint64_t)a1, 2u);
    if ((result & 1) == 0)
    {
      v5 = (_DWORD *)a1[6];
      v6 = sub_216B1E4E0(a2);
      v7 = sub_216B60568(v5, v6);
      if (sub_216B63A50(a1[6], v7, SHIDWORD(v7), 0) >= 2 && (sub_216B8E76C(a1[2]) & 1) == 0)
      {
        sub_216B7B558((uint64_t)a1, a2, 635, (uint64_t)v19);
        sub_216B4B3B4(v19);
      }
      sub_216B8E774(v22);
      v18[0] = (uint64_t)v22;
      v18[1] = (uint64_t)a1;
      memset(v17, 0, sizeof(v17));
      sub_216B70D84(v17);
      sub_216B623F0((uint64_t)v22, (uint64_t)v17);
      v8 = sub_216B3B09C((uint64_t)v22);
      sub_216B75074(v8);
      v9 = sub_216B3B09C((uint64_t)v22);
      sub_216B74800(v9, 523);
      v10 = (_DWORD *)sub_216B3B09C((uint64_t)v22);
      v11 = sub_216B1E4E0(v21);
      sub_216B2A7D8(v10, v11);
      sub_216B623F0((uint64_t)v22, (uint64_t)v21);
      v12 = v20;
      v13 = sub_216B3B09C((uint64_t)v22);
      sub_216B203A4(v13, v12);
      sub_216B70D84(v17);
      sub_216B89BC0((uint64_t)a1, (uint64_t)v17);
      if (!sub_216B71174((uint64_t)v17, 2))
      {
        sub_216B7068C((uint64_t)v17);
        sub_216B623F0((uint64_t)v22, (uint64_t)v17);
        sub_216B89F60((uint64_t)a1, (uint64_t)"version", 0);
      }
      sub_216B8E778(v18);
      return sub_216B1FF6C(v22);
    }
  }
  else
  {
    sub_216B7B558((uint64_t)a1, a2, 638, (uint64_t)v22);
    v14 = sub_216B7068C((uint64_t)a2);
    v15 = sub_216B4A11C(v14);
    sub_216B4B340(v22, v15, v16);
    sub_216B4B3B4(v22);
    return sub_216B89B78((uint64_t)a1);
  }
  return result;
}

void sub_216B8DE88(uint64_t a1, unsigned int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  _BYTE v16[19];
  uint64_t v17[3];
  uint64_t v18[3];
  uint64_t v19[3];
  uint64_t v20[3];

  if (!sub_216B5D8E0(*(_QWORD *)(a1 + 24)))
  {
    sub_216B7B558(a1, a2, 638, (uint64_t)v20);
    v5 = sub_216B7068C((uint64_t)a2);
    v6 = sub_216B4A11C(v5);
    sub_216B4B340(v20, v6, v7);
    sub_216B4B3B4(v20);
    goto LABEL_5;
  }
  sub_216B70D84(v20);
  sub_216B89BC0(a1, (uint64_t)v20);
  if (sub_216B71174((uint64_t)v20, 2))
  {
    sub_216B7B558(a1, (unsigned int *)v20, 637, (uint64_t)v19);
    sub_216B77520(v19, 0);
    v4 = v19;
LABEL_11:
    sub_216B4B3B4(v4);
    return;
  }
  sub_216B70D84(v19);
  sub_216B89BC0(a1, (uint64_t)v19);
  if (sub_216B7214C((uint64_t)v19, 60))
  {
    sub_216B7B558(a1, (unsigned int *)v19, 9, (uint64_t)v18);
    v8 = sub_216B7068C((uint64_t)v20);
    v9 = sub_216B4A11C(v8);
    v11 = sub_216B4B340(v18, v9, v10);
    sub_216B89E2C(v11, 0x3Cu);
    sub_216B4B3B4(v18);
    if (!sub_216B7214C((uint64_t)v19, 2))
      return;
LABEL_5:
    sub_216B89B78(a1);
    return;
  }
  sub_216B70D84(v18);
  sub_216B89BC0(a1, (uint64_t)v18);
  if (sub_216B71174((uint64_t)v18, 2))
  {
    sub_216B7B558(a1, (unsigned int *)v18, 637, (uint64_t)v17);
    sub_216B77520(v17, 1);
    v4 = v17;
    goto LABEL_11;
  }
  sub_216B89F60(a1, (uint64_t)"extension", 0);
  sub_216B70D84(v17);
  sub_216B75074((uint64_t)v17);
  sub_216B74800((uint64_t)v17, 524);
  v12 = sub_216B1E4E0((unsigned int *)v20);
  sub_216B2A7D8(v17, v12);
  sub_216B70D84(v16);
  sub_216B75074((uint64_t)v16);
  sub_216B74800((uint64_t)v16, 2);
  v13 = sub_216B1E4E0((unsigned int *)v18);
  sub_216B2A7D8(v16, v13);
  v14 = sub_216B1D1D4(96);
  for (i = 0; i != 96; i += 24)
    sub_216B70D84(v14 + i);
  *(_OWORD *)v14 = *(_OWORD *)v17;
  *(_DWORD *)(v14 + 15) = *(_DWORD *)((char *)&v17[1] + 7);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)v20;
  *(_DWORD *)(v14 + 39) = *(_DWORD *)((char *)&v20[1] + 7);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)v18;
  *(_DWORD *)(v14 + 63) = *(_DWORD *)((char *)&v18[1] + 7);
  *(_DWORD *)(v14 + 87) = *(_DWORD *)&v16[15];
  *(_OWORD *)(v14 + 72) = *(_OWORD *)v16;
  sub_216B92C84(a1, v14, 4, 1, 1);
}

uint64_t sub_216B8E11C(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6[2];
  unsigned int v7[6];

  sub_216B70D84(v7);
  sub_216B89E8C(a1, v7, 2);
  result = sub_216B71174((uint64_t)v7, 2);
  if ((result & 1) == 0)
  {
    sub_216B89F60(a1, (uint64_t)"__public_macro", 0);
    v3 = (unsigned int *)sub_216B7068C((uint64_t)v7);
    if (sub_216B7B880(a1, (uint64_t)v3))
    {
      v4 = sub_216B1E4E0(v7);
      v5 = (_QWORD *)sub_216B89AEC(a1, v4, 1);
      return (uint64_t)sub_216B94248(a1, v3, v5);
    }
    else
    {
      sub_216B7B558(a1, v7, 753, (uint64_t)v6);
      sub_216B89E58(v6, (uint64_t)v3);
      return sub_216B4B3B4(v6);
    }
  }
  return result;
}

uint64_t sub_216B8E1EC(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6[2];
  unsigned int v7[6];

  sub_216B70D84(v7);
  sub_216B89E8C(a1, v7, 2);
  result = sub_216B71174((uint64_t)v7, 2);
  if ((result & 1) == 0)
  {
    sub_216B89F60(a1, (uint64_t)"__private_macro", 0);
    v3 = (unsigned int *)sub_216B7068C((uint64_t)v7);
    if (sub_216B7B880(a1, (uint64_t)v3))
    {
      v4 = sub_216B1E4E0(v7);
      v5 = (_QWORD *)sub_216B89AEC(a1, v4, 0);
      return (uint64_t)sub_216B94248(a1, v3, v5);
    }
    else
    {
      sub_216B7B558(a1, v7, 753, (uint64_t)v6);
      sub_216B89E58(v6, (uint64_t)v3);
      return sub_216B4B3B4(v6);
    }
  }
  return result;
}

uint64_t sub_216B8E2C0(unsigned int *a1, unsigned int *a2, int a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned __int8 v25;
  _BYTE v26[16];
  uint64_t v27[2];
  char v28;
  _BYTE *v29;
  const void *v30[11];
  _BYTE v31[24];

  if (sub_216B7214C((uint64_t)a1, 8))
  {
    sub_216B7B558(a4, a1, a3, (uint64_t)v31);
    sub_216B4B3B4(v31);
    if (sub_216B7214C((uint64_t)a1, 2))
      sub_216B89B78(a4);
    return 1;
  }
  sub_216B341A0(v30);
  v11 = sub_216B693F8((uint64_t)a1);
  sub_216B294F0(v30, v11);
  v29 = (_BYTE *)sub_216B1FF44((uint64_t)v30, 0);
  v28 = 0;
  v12 = sub_216B7B53C(a4, a1, (uint64_t *)&v29, &v28);
  if (v28)
  {
LABEL_6:
    v10 = 1;
    goto LABEL_20;
  }
  *a2 = 0;
  if (!v12)
    goto LABEL_19;
  v25 = a5;
  v13 = 0;
  v14 = 0;
  v15 = v29;
  v16 = v12;
  do
  {
    v17 = (char)v15[v13];
    if (v17 == 39)
      goto LABEL_13;
    if ((sub_216B4C42C(v15[v13]) & 1) == 0)
    {
      v22 = sub_216B1E4E0(a1);
      v23 = sub_216B78310(a4, v22, v13);
      sub_216B720D8(a4, v23, 734, (uint64_t)v27);
      sub_216B77520(v27, v25);
      v24 = v27;
LABEL_24:
      sub_216B4B3B4(v24);
      sub_216B89B78(a4);
      goto LABEL_6;
    }
    v18 = v17 + 10 * v14 - 48;
    if (v18 < v14)
    {
      sub_216B7B558(a4, a1, a3, (uint64_t)v26);
      v24 = (uint64_t *)v26;
      goto LABEL_24;
    }
    *a2 = v18;
    v14 = v17 + 10 * v14 - 48;
LABEL_13:
    ++v13;
  }
  while (v16 != v13);
  if (*v15 == 48 && v14 != 0)
  {
    v20 = sub_216B1E4E0(a1);
    sub_216B720D8(a4, v20, 889, (uint64_t)v27);
    sub_216B77520(v27, v25);
    sub_216B4B3B4(v27);
  }
LABEL_19:
  v10 = 0;
LABEL_20:
  sub_216B2489C(v30);
  return v10;
}

uint64_t sub_216B8E4CC(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, uint64_t a5)
{
  unsigned int v11;
  _BYTE *v12;
  _DWORD *v13;
  int v14;
  int v15;
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];
  uint64_t v20;
  int v21;
  _QWORD v22[3];
  int v23;
  unsigned int v24[7];
  unsigned int v25;

  sub_216B70D84(v24);
  sub_216B9C594(a5, v24);
  if (sub_216B71174((uint64_t)v24, 2))
    return 0;
  v25 = 0;
  if ((sub_216B8E2C0(v24, &v25, 738, a5, 0) & 1) != 0)
    return 1;
  v11 = v25;
  if (v25 == 2)
  {
    *a2 = 1;
    v13 = (_DWORD *)sub_216B40EE8(a5);
    v14 = sub_216B1E4E0(v24);
    v23 = sub_216B61470(v13, v14);
    v15 = sub_216B1E4E0(v24);
    sub_216B63858((uint64_t)v13, v15, 1, (uint64_t)v22);
    if (sub_216B603D4(v22))
      return 1;
    v21 = sub_216B4CBC4((uint64_t)v22);
    if (sub_216B4B4A8(&v21) || (v20 = sub_216B61470(v13, v21), sub_216B651D4(&v20, &v23)))
    {
      sub_216B7B558(a5, v24, 739, (uint64_t)v19);
      v12 = v19;
      goto LABEL_20;
    }
    sub_216B9C594(a5, v24);
    if (sub_216B71174((uint64_t)v24, 2))
      return 0;
    if (sub_216B8E2C0(v24, &v25, 738, a5, 0))
      return 1;
  }
  else
  {
    if (v25 != 1)
      goto LABEL_9;
    *a1 = 1;
    sub_216B9C594(a5, v24);
    if (sub_216B71174((uint64_t)v24, 2))
      return 0;
    if ((sub_216B8E2C0(v24, &v25, 738, a5, 0) & 1) != 0)
      return 1;
  }
  v11 = v25;
LABEL_9:
  if (v11 != 3)
  {
    sub_216B7B558(a5, v24, 738, (uint64_t)v18);
    v12 = v18;
    goto LABEL_20;
  }
  *a3 = 1;
  sub_216B9C594(a5, v24);
  if (sub_216B71174((uint64_t)v24, 2))
    return 0;
  if ((sub_216B8E2C0(v24, &v25, 738, a5, 0) & 1) == 0)
  {
    if (v25 != 4)
    {
      sub_216B7B558(a5, v24, 738, (uint64_t)v17);
      v12 = v17;
      goto LABEL_20;
    }
    *a4 = 1;
    sub_216B9C594(a5, v24);
    if (!sub_216B71174((uint64_t)v24, 2))
    {
      sub_216B7B558(a5, v24, 738, (uint64_t)v16);
      v12 = v16;
LABEL_20:
      sub_216B4B3B4(v12);
      sub_216B89B78(a5);
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_216B8E76C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void sub_216B8E778(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[3];

  v3 = *a1;
  v2 = a1[1];
  memset(v13, 0, sizeof(v13));
  sub_216B70D84(v13);
  sub_216B623F0(v3, (uint64_t)v13);
  v4 = sub_216B3B09C(*a1);
  sub_216B75074(v4);
  v5 = sub_216B3B09C(*a1);
  sub_216B74800(v5, 2);
  v6 = sub_216B60724(*a1);
  v7 = v6;
  v8 = 24 * v6;
  if (is_mul_ok(v6, 0x18uLL))
    v9 = 24 * v6;
  else
    v9 = -1;
  v10 = sub_216B1D1D4(v9);
  v11 = v10;
  if (v7)
  {
    do
    {
      v10 = sub_216B70D84(v10) + 24;
      v8 -= 24;
    }
    while (v8);
  }
  sub_216B1E600(*a1);
  sub_216B1E67C(*a1);
  sub_216B7AC98();
  v12 = sub_216B60724(*a1);
  sub_216B92C84(v2, v11, v12, 1, 1);
}

uint64_t sub_216B8E870(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  BOOL v6;
  _BOOL8 v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  _BYTE v14[16];
  _BYTE v15[16];
  __int128 v16;
  _BYTE v17[16];

  v6 = sub_216B26288(a3, 0) == 60;
  v7 = v6;
  if (v6)
  {
    if (sub_216B4FE64(a3) != 62)
    {
      sub_216B720D8(a1, a2, 718, (uint64_t)v17);
      v8 = v17;
LABEL_12:
      sub_216B4B3B4(v8);
      sub_216B26D14(&v16);
      *(_OWORD *)a3 = v16;
      return 1;
    }
  }
  else
  {
    v9 = sub_216B26288(a3, 0);
    if (v9 != 34)
    {
      sub_216B720D8(a1, a2, 718, (uint64_t)v14);
      v8 = v14;
      goto LABEL_12;
    }
    if (sub_216B4FE64(a3) != 34)
    {
      sub_216B720D8(a1, a2, 718, (uint64_t)v15);
      v8 = v15;
      goto LABEL_12;
    }
  }
  if ((unint64_t)sub_216B1E67C((uint64_t)a3) <= 2)
  {
    sub_216B720D8(a1, a2, 707, (uint64_t)v13);
    v8 = v13;
    goto LABEL_12;
  }
  v10 = sub_216B1E67C((uint64_t)a3);
  *a3 = sub_216B2864C(a3, 1uLL, v10 - 2);
  a3[1] = v11;
  return v7;
}

uint64_t sub_216B8E9A4(uint64_t a1, const void **a2, _DWORD *a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  void *v9;
  void *v10;
  unsigned int v11;
  _BYTE v13[16];
  void *__src;
  unsigned int v15[6];

  sub_216B70D84(v15);
  sub_216B9C594(a1, v15);
  while (sub_216B7214C((uint64_t)v15, 2))
  {
    *a3 = sub_216B1E4E0(v15);
    if (sub_216B71174((uint64_t)v15, 3))
    {
      sub_216B89F40(a1);
    }
    else
    {
      if (sub_216B75974((uint64_t)v15))
      {
        LOBYTE(__src) = 32;
        sub_216B1FBBC((uint64_t)a2, &__src);
      }
      v6 = sub_216B1FF14((uint64_t)a2);
      v7 = sub_216B693F8((uint64_t)v15);
      sub_216B294F0(a2, v7 + v6);
      __src = 0;
      __src = (void *)sub_216B1FF44((uint64_t)a2, v6);
      v8 = sub_216B7B53C(a1, v15, (uint64_t *)&__src, 0);
      v9 = __src;
      if (v9 != (void *)sub_216B1FF44((uint64_t)a2, v6))
      {
        v10 = (void *)sub_216B1FF44((uint64_t)a2, v6);
        memcpy(v10, __src, v8);
      }
      if (sub_216B693F8((uint64_t)v15) != v8)
        sub_216B294F0(a2, v8 + v6);
      if (sub_216B71174((uint64_t)v15, 50))
        return 0;
    }
    sub_216B9C594(a1, v15);
  }
  v11 = sub_216B1E4E0(v15);
  sub_216B720D8(a1, v11, 718, (uint64_t)v13);
  sub_216B4B3B4(v13);
  return 1;
}

BOOL sub_216B8EB48(uint64_t a1, uint64_t a2)
{
  return sub_216B3817C(a1 + 456, a2);
}

uint64_t sub_216B8EB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1 + 456;
  v6 = (_QWORD *)sub_216B25CA8(a1 + 456, a2);
  v12 = sub_216B5133C(v6, a2, a3);
  v8 = sub_216B25CA8(v5, v7);
  v11 = sub_216B3C994(v8);
  if (sub_216B3760C(&v12, &v11))
  {
    v9 = sub_216B3C9C8((uint64_t)&v12);
    sub_216B26CA0(&v13, v9 + 8);
  }
  else
  {
    sub_216B26D14(&v13);
  }
  return v13;
}

uint64_t sub_216B8EBE4(uint64_t a1, __n128 *a2, int a3)
{
  char v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  v6 = 48;
  if (a3)
    v6 = 52;
  v7 = *(unsigned int *)(a1 + v6);
  v8 = (uint64_t *)(a1 + 24);
  v10 = sub_216B2C910((uint64_t *)(a1 + 24));
  v11 = sub_216B8F734(&v10, v7);
  sub_216B2C008(&v12, &v11);
  result = sub_216B8F5FC(v8, v12, a2);
  if ((v3 & 1) == 0)
    ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 52);
  return result;
}

void sub_216B8EC8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;

  v7 = sub_216B7AA24(a1);
  sub_216B754D4(v7, v8, a2, a3, a4);
}

uint64_t sub_216B8ECCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = sub_216B5ECD4(a1);
  sub_216B26CA0(&v3, v1);
  return v3;
}

void sub_216B8ECFC(uint64_t a1, int a2, unsigned int a3, __int16 a4, uint64_t a5)
{
  _DWORD *v10;
  uint64_t v11;

  v10 = (_DWORD *)sub_216B1D1D4(24);
  v11 = sub_216B70D84(v10);
  sub_216B75074(v11);
  sub_216B74800((uint64_t)v10, a4);
  sub_216B2A7D8(v10, a2);
  sub_216B900B4((uint64_t)v10, a3);
  sub_216B203A4((uint64_t)v10, a5);
  sub_216B92C84(a1, (uint64_t)v10, 1, 1, 1);
}

uint64_t sub_216B8ED94(uint64_t a1, uint64_t a2)
{
  return ((unsigned __int16)*sub_216B6DE18(a1, a2) >> 2) & 3;
}

BOOL sub_216B8EDB0(uint64_t a1, unsigned int *a2)
{
  _BYTE v4[16];

  sub_216B7B558(a1, a2, 726, (uint64_t)v4);
  sub_216B4B3B4(v4);
  return sub_216B89B78(a1);
}

uint64_t sub_216B8EDF0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  uint64_t v21[2];
  _BYTE v22[16];
  uint64_t v23;
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[16];
  _BYTE v27[16];
  _BYTE v28[16];
  _QWORD v29[36];

  v29[35] = *MEMORY[0x24BDAC8D0];
  sub_216B8F100(v29);
  while (1)
  {
    sub_216B89BC0(a1, (uint64_t)a3);
    v6 = sub_216B71644((uint64_t)a3);
    if (v6 == 2)
    {
      sub_216B7B558(a1, a3, 744, (uint64_t)v24);
      v11 = (uint64_t *)v24;
      goto LABEL_27;
    }
    if (v6 == 26)
    {
      v12 = *(_QWORD *)(a1 + 24);
      if ((*(_QWORD *)v12 & 1) == 0)
      {
        if ((*(_QWORD *)v12 & 0x80) != 0)
          v13 = 873;
        else
          v13 = 820;
        sub_216B7B558(a1, a3, v13, (uint64_t)v27);
        sub_216B4B3B4(v27);
        v12 = *(_QWORD *)(a1 + 24);
      }
      if ((*(_WORD *)(v12 + 16) & 0x4000) != 0)
      {
        sub_216B7B558(a1, a3, 745, (uint64_t)v26);
        v11 = (uint64_t *)v26;
        goto LABEL_27;
      }
      sub_216B89BC0(a1, (uint64_t)a3);
      if (sub_216B7214C((uint64_t)a3, 22))
      {
        sub_216B7B558(a1, a3, 744, (uint64_t)v25);
        v11 = (uint64_t *)v25;
        goto LABEL_27;
      }
      sub_216B268AC((uint64_t)v29, (_QWORD *)(a1 + 328));
      sub_216B8F104(a2);
LABEL_30:
      v15 = sub_216B4FBDC((uint64_t)v29, 0);
      v16 = sub_216B26878((uint64_t)v29);
      sub_216B8F114(a2, v15, v16, a1 + 104);
      goto LABEL_31;
    }
    if (v6 == 22)
      break;
    v23 = 0;
    v23 = sub_216B7068C((uint64_t)a3);
    if (!v23)
    {
      sub_216B7B558(a1, a3, 732, (uint64_t)v22);
      v11 = (uint64_t *)v22;
      goto LABEL_27;
    }
    v7 = sub_216B1E600((uint64_t)v29);
    v8 = sub_216B1E67C((uint64_t)v29);
    v9 = sub_216B84C60(v7, v8, &v23);
    if (v9 != sub_216B1E67C((uint64_t)v29))
    {
      sub_216B7B558(a1, a3, 706, (uint64_t)v21);
      sub_216B89E58(v21, v23);
      v11 = v21;
      goto LABEL_27;
    }
    sub_216B268AC((uint64_t)v29, &v23);
    sub_216B89BC0(a1, (uint64_t)a3);
    v10 = sub_216B71644((uint64_t)a3);
    if (v10 != 64)
    {
      if (v10 != 22)
      {
        if (v10 != 26)
        {
          sub_216B7B558(a1, a3, 713, (uint64_t)v20);
          v11 = (uint64_t *)v20;
          goto LABEL_27;
        }
        sub_216B7B558(a1, a3, 791, (uint64_t)v19);
        sub_216B4B3B4(v19);
        sub_216B89BC0(a1, (uint64_t)a3);
        if (sub_216B7214C((uint64_t)a3, 22))
        {
          sub_216B7B558(a1, a3, 744, (uint64_t)v18);
          v11 = (uint64_t *)v18;
LABEL_27:
          sub_216B4B3B4(v11);
          v14 = 1;
          goto LABEL_32;
        }
        sub_216B8F178(a2);
      }
      goto LABEL_30;
    }
  }
  if (!sub_216B29084(v29))
  {
    sub_216B7B558(a1, a3, 715, (uint64_t)v28);
    v11 = (uint64_t *)v28;
    goto LABEL_27;
  }
LABEL_31:
  v14 = 0;
LABEL_32:
  sub_216B1FF6C(v29);
  return v14;
}

uint64_t sub_216B8F104(uint64_t result)
{
  *(_WORD *)(result + 244) |= 4u;
  return result;
}

uint64_t sub_216B8F114(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v6 = result;
    *(_DWORD *)(result + 16) = a3;
    result = sub_216B900E8(a4, a3);
    v7 = 0;
    *(_QWORD *)(v6 + 8) = result;
    do
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 8) + v7) = *(_QWORD *)(a2 + v7);
      v7 += 8;
    }
    while (8 * a3 != v7);
  }
  return result;
}

uint64_t sub_216B8F178(uint64_t result)
{
  *(_WORD *)(result + 244) |= 8u;
  return result;
}

uint64_t sub_216B8F188(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 28) = a3;
  return result;
}

uint64_t sub_216B8F194(uint64_t result)
{
  *(_WORD *)(result + 244) |= 2u;
  return result;
}

unsigned int *sub_216B8F1A4(unsigned int *a1, int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
    v2 = 0x1000000;
  else
    v2 = 0;
  v3 = *a1 & 0xFEFFFFFF | v2;
  *a1 = v3;
  if (!a2)
    return (unsigned int *)sub_216B5E058(a1);
  *a1 = v3 | 0x4000000;
  return a1;
}

BOOL sub_216B8F1D4(uint64_t a1)
{
  return (*(_WORD *)(a1 + 244) & 2) == 0;
}

uint64_t sub_216B8F1E4(uint64_t a1, uint64_t a2)
{
  return sub_216B623F0(a1 + 24, a2);
}

unint64_t sub_216B8F1EC(uint64_t a1)
{
  return sub_216B60724(a1 + 24);
}

uint64_t sub_216B8F204(uint64_t a1, unsigned int a2)
{
  return sub_216B60770(a1 + 24, a2);
}

